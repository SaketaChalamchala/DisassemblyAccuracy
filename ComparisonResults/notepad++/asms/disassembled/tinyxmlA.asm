.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 867A272C8D059EB05DADE761D765DDCB
.rdata:00000000 ; Input CRC32 : F2CA95ED
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\tinyxmlA.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG96267
.rdata:00000000 $SG96267:                               ; DATA XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+29o
.rdata:00000000                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:0000004A ; char _SG96938[2]
.rdata:0000004A $SG96938        db 2 dup(0)             ; DATA XREF: TiXmlTextA::Clone(void)+49o
.rdata:0000004C ; wchar_t _SG96268
.rdata:0000004C $SG96268:                               ; DATA XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+2Eo
.rdata:0000004C                 unicode 0, <previous->
.rdata:0000004C                 dw 3Eh
.rdata:0000004C                 unicode 0, <parent == this>,0
.rdata:0000007E                 align 10h
.rdata:00000080 ; wchar_t _SG96277
.rdata:00000080 $SG96277:                               ; DATA XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+2Do
.rdata:00000080                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:000000CA                 align 4
.rdata:000000CC ; wchar_t _SG96278
.rdata:000000CC $SG96278:                               ; DATA XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+32o
.rdata:000000CC                 unicode 0, <previous->
.rdata:000000CC                 dw 3Eh
.rdata:000000CC                 unicode 0, <parent == this>,0
.rdata:000000FE                 align 10h
.rdata:00000100 ; char _SG96442[]
.rdata:00000100 $SG96442        dd offset loc_6422+3    ; DATA XREF: TiXmlElementA::SetAttribute(char const *,int)+17o
.rdata:00000104 ; char _SG96468[]
.rdata:00000104 $SG96468        db '    ',0             ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+23o
.rdata:00000109                 align 4
.rdata:0000010C ; char _SG96469[]
.rdata:0000010C $SG96469        db '<%s',0              ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+42o
.rdata:00000110 ; char _SG96474[]
.rdata:00000110 $SG96474        dd offset $SG96267+20h  ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+74o
.rdata:00000110                                         ; "inyXmlA\\tinyxmlA.cpp"
.rdata:00000114 ; char _SG96477[4]
.rdata:00000114 $SG96477        db ' />',0              ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+A5o
.rdata:00000118 ; char _SG96480[]
.rdata:00000118 $SG96480        dd offset $SG96267+3Eh  ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+D8o
.rdata:00000118                                         ; "A.cpp"
.rdata:0000011C ; char _SG96481[]
.rdata:0000011C $SG96481        db '</%s>',0            ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+113o
.rdata:00000122                 align 4
.rdata:00000124 ; char _SG96483[]
.rdata:00000124 $SG96483        dd offset $SG96267+3Eh  ; DATA XREF: TiXmlElementA::Print(_iobuf *,int):loc_22B1o
.rdata:00000124                                         ; "A.cpp"
.rdata:00000128 ; char _SG96488[2]
.rdata:00000128 $SG96488        db 0Ah,0                ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+162o
.rdata:0000012A                 align 4
.rdata:0000012C ; char _SG96489[2]
.rdata:0000012C $SG96489        db 0Ah,0                ; DATA XREF: TiXmlElementA::Print(_iobuf *,int):loc_2315o
.rdata:0000012E                 align 10h
.rdata:00000130 ; char _SG96493[]
.rdata:00000130 $SG96493        db '    ',0             ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+1B8o
.rdata:00000135                 align 4
.rdata:00000138 ; char _SG96494[]
.rdata:00000138 $SG96494        db '</%s>',0            ; DATA XREF: TiXmlElementA::Print(_iobuf *,int)+1D7o
.rdata:0000013E                 align 10h
.rdata:00000140 ; char _SG96547[]
.rdata:00000140 $SG96547        dd offset $SG96267+3Ch  ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+10o
.rdata:00000140                                         ; "lA.cpp"
.rdata:00000144 ; char _SG96560[]
.rdata:00000144 $SG96560        dd offset $SG96267+20h  ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+4Bo
.rdata:00000144                                         ; "inyXmlA\\tinyxmlA.cpp"
.rdata:00000148 ; char _SG96571[]
.rdata:00000148 $SG96571        dd offset $SG96267+3Eh  ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+78o
.rdata:00000148                                         ; "A.cpp"
.rdata:0000014C ; char _SG96610[]
.rdata:0000014C $SG96610        dd offset $SG96267+3Eh  ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *):loc_2430o
.rdata:0000014C                                         ; "A.cpp"
.rdata:00000150 ; char _SG96611[]
.rdata:00000150 $SG96611        dd offset loc_2F39+3    ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+C4o
.rdata:00000154 ; char _SG96632[4]
.rdata:00000154 $SG96632        db ' />',0              ; DATA XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *):loc_2461o
.rdata:00000158 ; char _SG96676[]
.rdata:00000158 $SG96676        dd offset $SG96268+26h  ; DATA XREF: TiXmlDocumentA::LoadFile(char const *)+5Co
.rdata:00000158                                         ; " this"
.rdata:0000015C ; wchar_t _SG96695
.rdata:0000015C $SG96695        dd offset $SG96268+26h  ; DATA XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+4Ao
.rdata:0000015C                                         ; " this"
.rdata:00000160 ; char _SG96714[]
.rdata:00000160 $SG96714        dd offset $SG96268+2Bh  ; DATA XREF: TiXmlDocumentA::SaveFile(char const *)+9o
.rdata:00000160                                         ; "椀猀"
.rdata:00000164 ; wchar_t _SG96721
.rdata:00000164 $SG96721        dd offset $SG96268+2Bh  ; DATA XREF: TiXmlDocumentA::SaveUnicodeFilePath(wchar_t const *)+9o
.rdata:00000164                                         ; "椀猀"
.rdata:00000168 ; char _SG96745[2]
.rdata:00000168 $SG96745        db 0Ah,0                ; DATA XREF: TiXmlDocumentA::Print(_iobuf *,int)+3Co
.rdata:0000016A                 align 4
.rdata:0000016C ; char _SG96773[]
.rdata:0000016C $SG96773        db '%s="%s"',0          ; DATA XREF: TiXmlAttributeA::Print(_iobuf *,int)+DDo
.rdata:00000174 ; char _SG96775[]
.rdata:00000174 $SG96775        db '%s=',27h,'%s',27h,0 ; DATA XREF: TiXmlAttributeA::Print(_iobuf *,int)+102o
.rdata:0000017C ; char _SG96797[]
.rdata:0000017C $SG96797        dd offset $SG96267+27h  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+31o
.rdata:0000017C                                         ; "洀氀䄀尀琀椀渀礀砀洀氀䄀⸀"...
.rdata:00000180 ; char _SG96798[]
.rdata:00000180 $SG96798        dd offset $SG96267+3Dh  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+36o
.rdata:00000180                                         ; "䄀⸀挀瀀瀀"
.rdata:00000184 ; char _SG96807[]
.rdata:00000184 $SG96807        dd offset $SG96267+27h  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+63o
.rdata:00000184                                         ; "洀氀䄀尀琀椀渀礀砀洀氀䄀⸀"...
.rdata:00000188 ; char _SG96825[]
.rdata:00000188 $SG96825        dd offset $SG96267+22h  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+89o
.rdata:00000188                                         ; "nyXmlA\\tinyxmlA.cpp"
.rdata:0000018C ; char _SG96826[]
.rdata:0000018C $SG96826        dd offset $SG96267+3Dh  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+8Eo
.rdata:0000018C                                         ; "䄀⸀挀瀀瀀"
.rdata:00000190 ; char _SG96835[]
.rdata:00000190 $SG96835        dd offset $SG96267+22h  ; DATA XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+BBo
.rdata:00000190                                         ; "nyXmlA\\tinyxmlA.cpp"
.rdata:00000194 ; char _SG96841[]
.rdata:00000194 $SG96841        dd offset loc_6422+3    ; DATA XREF: TiXmlAttributeA::QueryIntValue(int *)+Bo
.rdata:00000198 ; char _SG96847[4]
.rdata:00000198 $SG96847        db '%lf',0              ; DATA XREF: TiXmlAttributeA::QueryDoubleValue(double *)+Bo
.rdata:0000019C ; char _SG96853[]
.rdata:0000019C $SG96853        dd offset loc_6422+3    ; DATA XREF: TiXmlAttributeA::SetIntValue(int)+17o
.rdata:000001A0 ; char _SG96859[4]
.rdata:000001A0 $SG96859        db '%lf',0              ; DATA XREF: TiXmlAttributeA::SetDoubleValue(double)+20o
.rdata:000001A4 ; char _SG96875[]
.rdata:000001A4 $SG96875        db '    ',0             ; DATA XREF: TiXmlCommentA::Print(_iobuf *,int)+27o
.rdata:000001A9                 align 4
.rdata:000001AC ; char _SG96876[]
.rdata:000001AC $SG96876        db '<!--%s-->',0        ; DATA XREF: TiXmlCommentA::Print(_iobuf *,int)+42o
.rdata:000001B6                 align 4
.rdata:000001B8 ; char _SG96900[]
.rdata:000001B8 $SG96900        db '<!--',0             ; DATA XREF: TiXmlCommentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+7o
.rdata:000001BD                 align 10h
.rdata:000001C0 ; char _SG96909[]
.rdata:000001C0 $SG96909        db '-->',0              ; DATA XREF: TiXmlCommentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+2Bo
.rdata:000001C4 ; char _SG96925[]
.rdata:000001C4 $SG96925        dd offset loc_7325      ; DATA XREF: TiXmlTextA::Print(_iobuf *,int)+56o
.rdata:000001C8 ; char _SG96951[]
.rdata:000001C8 $SG96951        db '<?xml ',0           ; DATA XREF: TiXmlDeclarationA::Print(_iobuf *,int)+7o
.rdata:000001CF                 align 10h
.rdata:000001D0 ; char _SG96953[]
.rdata:000001D0 $SG96953        db 'version="%s" ',0    ; DATA XREF: TiXmlDeclarationA::Print(_iobuf *,int)+36o
.rdata:000001DE                 align 10h
.rdata:000001E0 ; char _SG96955[]
.rdata:000001E0 $SG96955        db 'encoding="%s" ',0   ; DATA XREF: TiXmlDeclarationA::Print(_iobuf *,int)+65o
.rdata:000001EF                 align 10h
.rdata:000001F0 ; char _SG96957[]
.rdata:000001F0 $SG96957        db 'standalone="%s" ',0 ; DATA XREF: TiXmlDeclarationA::Print(_iobuf *,int)+94o
.rdata:00000201                 align 4
.rdata:00000204 ; char _SG96958[]
.rdata:00000204 $SG96958        dd offset loc_3E3F      ; DATA XREF: TiXmlDeclarationA::Print(_iobuf *,int):loc_295Do
.rdata:00000208 ; char _SG96982[]
.rdata:00000208 $SG96982        db '<?xml ',0           ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+7o
.rdata:0000020F                 align 10h
.rdata:00000210 ; char _SG97003[]
.rdata:00000210 $SG97003        db 'version="',0        ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+2Ao
.rdata:0000021A                 align 4
.rdata:0000021C ; char _SG97012[]
.rdata:0000021C $SG97012        dd offset loc_2020+2    ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+4Eo
.rdata:00000220 ; char _SG97033[]
.rdata:00000220 $SG97033        db 'encoding="',0       ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+71o
.rdata:0000022B                 align 4
.rdata:0000022C ; char _SG97042[]
.rdata:0000022C $SG97042        dd offset loc_2020+2    ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+95o
.rdata:00000230 ; char _SG97063[]
.rdata:00000230 $SG97063        db 'standalone="',0     ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+B8o
.rdata:0000023D                 align 10h
.rdata:00000240 ; char _SG97072[]
.rdata:00000240 $SG97072        dd offset loc_2020+2    ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+DCo
.rdata:00000244 ; char _SG97081[]
.rdata:00000244 $SG97081        dd offset loc_3E3F      ; DATA XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *):loc_2A65o
.rdata:00000248 ; char _SG97100[]
.rdata:00000248 $SG97100        db '    ',0             ; DATA XREF: TiXmlUnknownA::Print(_iobuf *,int)+23o
.rdata:0000024D                 align 10h
.rdata:00000250 ; char _SG97101[]
.rdata:00000250 $SG97101        dd offset loc_7325      ; DATA XREF: TiXmlUnknownA::Print(_iobuf *,int)+42o
.rdata:00000254 ; char _SG96093[]
.rdata:00000254 $SG96093        db '&#x%02X;',0         ; DATA XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+1FEo
.rdata:0000025D                 align 10h
.rdata:00000260 ; char _SG97130[]
.rdata:00000260 $SG97130        dd offset $SG96267+3Eh  ; DATA XREF: TiXmlUnknownA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+7o
.rdata:00000260                                         ; "A.cpp"
.rdata:00000264 ; char _SG97131[]
.rdata:00000264 $SG97131        dd offset $SG96267+3Ch  ; DATA XREF: TiXmlUnknownA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+13o
.rdata:00000264                                         ; "lA.cpp"
.rdata:00000268 ; wchar_t _SG97148
.rdata:00000268 $SG97148:                               ; DATA XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+3Do
.rdata:00000268                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:000002B2                 align 4
.rdata:000002B4 ; wchar_t _SG97149
.rdata:000002B4 $SG97149:                               ; DATA XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+42o
.rdata:000002B4                 unicode 0, <sentinel.next == &sentinel>,0
.rdata:000002EA                 align 4
.rdata:000002EC ; wchar_t _SG97171
.rdata:000002EC $SG97171        dd offset $SG96267+30h  ; DATA XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+71o
.rdata:000002EC                                         ; "tinyxmlA.cpp"
.rdata:000002F0 ; wchar_t _SG97151
.rdata:000002F0 $SG97151:                               ; DATA XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+5Fo
.rdata:000002F0                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:0000033A                 align 4
.rdata:0000033C ; wchar_t _SG97152
.rdata:0000033C $SG97152:                               ; DATA XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+64o
.rdata:0000033C                 unicode 0, <sentinel.prev == &sentinel>,0
.rdata:00000372                 align 4
.rdata:00000374 ; wchar_t _SG96161
.rdata:00000374 $SG96161:                               ; DATA XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+85o
.rdata:00000374                 unicode 0, <firstChild == beforeThis>,0
.rdata:000003A6                 align 4
.rdata:000003A8 ; wchar_t _SG97158
.rdata:000003A8 $SG97158:                               ; DATA XREF: TiXmlAttributeSetA::Add(TiXmlAttributeA *)+21o
.rdata:000003A8                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:000003F2                 align 4
.rdata:000003F4 ; wchar_t _SG97159
.rdata:000003F4 $SG97159:                               ; DATA XREF: TiXmlAttributeSetA::Add(TiXmlAttributeA *)+26o
.rdata:000003F4                 unicode 0, <!Find( addMe->
.rdata:000003F4                 dw 3Eh
.rdata:000003F4                 unicode 0, <Name() )>,0
.rdata:00000422                 align 4
.rdata:00000424 ; wchar_t _SG96197
.rdata:00000424 $SG96197        dd offset $SG96267+30h  ; DATA XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+22o
.rdata:00000424                                         ; "tinyxmlA.cpp"
.rdata:00000428 ; wchar_t _SG97170
.rdata:00000428 $SG97170:                               ; DATA XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+6Co
.rdata:00000428                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:00000472                 align 8
.rdata:00000478 ; wchar_t _SG96160
.rdata:00000478 $SG96160:                               ; DATA XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+80o
.rdata:00000478                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:000004C2                 align 8
.rdata:000004C8 ; wchar_t _SG96174
.rdata:000004C8 $SG96174:                               ; DATA XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+80o
.rdata:000004C8                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:00000512                 align 4
.rdata:00000514 ; wchar_t _SG96175
.rdata:00000514 $SG96175:                               ; DATA XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+85o
.rdata:00000514                 unicode 0, <lastChild == afterThis>,0
.rdata:00000542                 align 8
.rdata:00000548 ; wchar_t _SG96196
.rdata:00000548 $SG96196:                               ; DATA XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+1Do
.rdata:00000548                 unicode 0, <..\src\TinyXml\tinyXmlA\tinyxmlA.cpp>,0
.rdata:00000592                 align 4
.rdata:00000592 _rdata          ends
.rdata:00000592
.data:00000594 ; ===========================================================================
.data:00000594
.data:00000594 ; Segment type: Pure data
.data:00000594 ; Segment permissions: Read/Write
.data:00000594 _data           segment byte public 'DATA' use32
.data:00000594                 assume cs:_data
.data:00000594                 ;org 594h
.data:00000594                 public ?condenseWhiteSpace@TiXmlBaseA@@0_NA
.data:00000594 ; private: static bool TiXmlBaseA::condenseWhiteSpace
.data:00000594 ?condenseWhiteSpace@TiXmlBaseA@@0_NA db    1
.data:00000595                 align 4
.data:00000595 _data           ends
.data:00000595
.text$mn:00000598 ; ===========================================================================
.text$mn:00000598
.text$mn:00000598 ; Segment type: Pure code
.text$mn:00000598 ; Segment permissions: Read/Execute
.text$mn:00000598 _text$mn        segment para public 'CODE' use32
.text$mn:00000598                 assume cs:_text$mn
.text$mn:00000598                 ;org 598h
.text$mn:00000598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000598
.text$mn:00000598 ; =============== S U B R O U T I N E =======================================
.text$mn:00000598
.text$mn:00000598 ; Attributes: bp-based frame
.text$mn:00000598
.text$mn:00000598 ; public: __thiscall TiXmlBaseA::StringToBuffer::StringToBuffer(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00000598                 public ??0StringToBuffer@TiXmlBaseA@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
.text$mn:00000598 ??0StringToBuffer@TiXmlBaseA@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
.text$mn:00000598                                         ; CODE XREF: TiXmlDocumentA::LoadFile(void)+32p
.text$mn:00000598                                         ; TiXmlDocumentA::SaveFile(void)+32p
.text$mn:00000598
.text$mn:00000598 var_8           = dword ptr -8
.text$mn:00000598 var_4           = dword ptr -4
.text$mn:00000598 arg_0           = dword ptr  8
.text$mn:00000598
.text$mn:00000598                 push    ebp
.text$mn:00000599                 mov     ebp, esp
.text$mn:0000059B                 sub     esp, 8
.text$mn:0000059E                 mov     [ebp+var_4], ecx
.text$mn:000005A1                 mov     ecx, [ebp+arg_0]
.text$mn:000005A4                 call    ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length(void)
.text$mn:000005A9                 add     eax, 1
.text$mn:000005AC                 push    eax             ; unsigned int
.text$mn:000005AD                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:000005B2                 add     esp, 4
.text$mn:000005B5                 mov     [ebp+var_8], eax
.text$mn:000005B8                 mov     eax, [ebp+var_4]
.text$mn:000005BB                 mov     ecx, [ebp+var_8]
.text$mn:000005BE                 mov     [eax], ecx
.text$mn:000005C0                 mov     edx, [ebp+var_4]
.text$mn:000005C3                 cmp     dword ptr [edx], 0
.text$mn:000005C6                 jz      short loc_5DF
.text$mn:000005C8                 mov     ecx, [ebp+arg_0]
.text$mn:000005CB                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000005D0                 push    eax             ; Source
.text$mn:000005D1                 mov     eax, [ebp+var_4]
.text$mn:000005D4                 mov     ecx, [eax]
.text$mn:000005D6                 push    ecx             ; Dest
.text$mn:000005D7                 call    _strcpy
.text$mn:000005DC                 add     esp, 8
.text$mn:000005DF
.text$mn:000005DF loc_5DF:                                ; CODE XREF: TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+2Ej
.text$mn:000005DF                 mov     eax, [ebp+var_4]
.text$mn:000005E2                 mov     esp, ebp
.text$mn:000005E4                 pop     ebp
.text$mn:000005E5                 retn    4
.text$mn:000005E5 ??0StringToBuffer@TiXmlBaseA@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z endp
.text$mn:000005E5
.text$mn:000005E8
.text$mn:000005E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000005E8
.text$mn:000005E8 ; Attributes: bp-based frame
.text$mn:000005E8
.text$mn:000005E8 ; _DWORD __thiscall TiXmlBaseA::StringToBuffer::~StringToBuffer(TiXmlBaseA::StringToBuffer *__hidden this)
.text$mn:000005E8                 public ??1StringToBuffer@TiXmlBaseA@@QAE@XZ
.text$mn:000005E8 ??1StringToBuffer@TiXmlBaseA@@QAE@XZ proc near
.text$mn:000005E8                                         ; CODE XREF: TiXmlDocumentA::LoadFile(void)+65p
.text$mn:000005E8                                         ; TiXmlDocumentA::LoadFile(void)+7Dp ...
.text$mn:000005E8
.text$mn:000005E8 var_8           = dword ptr -8
.text$mn:000005E8 var_4           = dword ptr -4
.text$mn:000005E8
.text$mn:000005E8                 push    ebp
.text$mn:000005E9                 mov     ebp, esp
.text$mn:000005EB                 sub     esp, 8
.text$mn:000005EE                 mov     [ebp+var_4], ecx
.text$mn:000005F1                 mov     eax, [ebp+var_4]
.text$mn:000005F4                 mov     ecx, [eax]
.text$mn:000005F6                 mov     [ebp+var_8], ecx
.text$mn:000005F9                 mov     edx, [ebp+var_8]
.text$mn:000005FC                 push    edx             ; void *
.text$mn:000005FD                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:00000602                 add     esp, 4
.text$mn:00000605                 mov     esp, ebp
.text$mn:00000607                 pop     ebp
.text$mn:00000608                 retn
.text$mn:00000608 ??1StringToBuffer@TiXmlBaseA@@QAE@XZ endp
.text$mn:00000608
.text$mn:00000608 ; ---------------------------------------------------------------------------
.text$mn:00000609                 db 0Fh dup(0CCh)
.text$mn:00000618
.text$mn:00000618 ; =============== S U B R O U T I N E =======================================
.text$mn:00000618
.text$mn:00000618 ; Attributes: bp-based frame
.text$mn:00000618
.text$mn:00000618 ; protected: static void __cdecl TiXmlBaseA::PutString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_ostream<char, struct std::char_traits<char>> *)
.text$mn:00000618                 public ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z
.text$mn:00000618 ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z proc near
.text$mn:00000618                                         ; CODE XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+29p
.text$mn:00000618                                         ; TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+5Bp ...
.text$mn:00000618
.text$mn:00000618 var_2C          = byte ptr -2Ch
.text$mn:00000618 var_10          = dword ptr -10h
.text$mn:00000618 var_C           = dword ptr -0Ch
.text$mn:00000618 var_4           = dword ptr -4
.text$mn:00000618 arg_0           = dword ptr  8
.text$mn:00000618 arg_4           = dword ptr  0Ch
.text$mn:00000618
.text$mn:00000618                 push    ebp
.text$mn:00000619                 mov     ebp, esp
.text$mn:0000061B                 push    0FFFFFFFFh
.text$mn:0000061D                 push    offset __ehhandler$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z
.text$mn:00000622                 mov     eax, large fs:0
.text$mn:00000628                 push    eax
.text$mn:00000629                 sub     esp, 20h
.text$mn:0000062C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000631                 xor     eax, ebp
.text$mn:00000633                 mov     [ebp+var_10], eax
.text$mn:00000636                 push    eax
.text$mn:00000637                 lea     eax, [ebp+var_C]
.text$mn:0000063A                 mov     large fs:0, eax
.text$mn:00000640                 lea     ecx, [ebp+var_2C]
.text$mn:00000643                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000648                 mov     [ebp+var_4], 0
.text$mn:0000064F                 lea     eax, [ebp+var_2C]
.text$mn:00000652                 push    eax
.text$mn:00000653                 mov     ecx, [ebp+arg_0]
.text$mn:00000656                 push    ecx
.text$mn:00000657                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.text$mn:0000065C                 add     esp, 8
.text$mn:0000065F                 lea     edx, [ebp+var_2C]
.text$mn:00000662                 push    edx
.text$mn:00000663                 mov     eax, [ebp+arg_4]
.text$mn:00000666                 push    eax
.text$mn:00000667                 call    ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000066C                 add     esp, 8
.text$mn:0000066F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000676                 lea     ecx, [ebp+var_2C]
.text$mn:00000679                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000067E                 mov     ecx, [ebp+var_C]
.text$mn:00000681                 mov     large fs:0, ecx
.text$mn:00000688                 pop     ecx
.text$mn:00000689                 mov     ecx, [ebp+var_10]
.text$mn:0000068C                 xor     ecx, ebp
.text$mn:0000068E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000693                 mov     esp, ebp
.text$mn:00000695                 pop     ebp
.text$mn:00000696                 retn
.text$mn:00000696 ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z endp
.text$mn:00000696
.text$mn:00000696 ; ---------------------------------------------------------------------------
.text$mn:00000697                 align 4
.text$mn:00000698
.text$mn:00000698 ; =============== S U B R O U T I N E =======================================
.text$mn:00000698
.text$mn:00000698 ; Attributes: bp-based frame
.text$mn:00000698
.text$mn:00000698 ; protected: static void __cdecl TiXmlBaseA::PutString(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
.text$mn:00000698                 public ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z
.text$mn:00000698 ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z proc near
.text$mn:00000698                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+3Fp
.text$mn:00000698                                         ; TiXmlAttributeA::Print(_iobuf *,int)+69p ...
.text$mn:00000698
.text$mn:00000698 Src             = byte ptr -2Dh
.text$mn:00000698 var_2C          = dword ptr -2Ch
.text$mn:00000698 var_28          = dword ptr -28h
.text$mn:00000698 Dest            = byte ptr -24h
.text$mn:00000698 var_4           = dword ptr -4
.text$mn:00000698 arg_0           = dword ptr  8
.text$mn:00000698 arg_4           = dword ptr  0Ch
.text$mn:00000698
.text$mn:00000698                 push    ebp
.text$mn:00000699                 mov     ebp, esp
.text$mn:0000069B                 sub     esp, 30h
.text$mn:0000069E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000006A3                 xor     eax, ebp
.text$mn:000006A5                 mov     [ebp+var_4], eax
.text$mn:000006A8                 mov     [ebp+var_28], 0
.text$mn:000006AF
.text$mn:000006AF loc_6AF:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *):loc_8E8j
.text$mn:000006AF                 mov     ecx, [ebp+arg_0]
.text$mn:000006B2                 call    ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length(void)
.text$mn:000006B7                 cmp     [ebp+var_28], eax
.text$mn:000006BA                 jge     loc_8ED
.text$mn:000006C0                 mov     eax, [ebp+var_28]
.text$mn:000006C3                 push    eax
.text$mn:000006C4                 mov     ecx, [ebp+arg_0]
.text$mn:000006C7                 call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)
.text$mn:000006CC                 movsx   ecx, byte ptr [eax]
.text$mn:000006CF                 mov     [ebp+var_2C], ecx
.text$mn:000006D2                 cmp     [ebp+var_2C], 26h ; '&'
.text$mn:000006D6                 jnz     loc_763
.text$mn:000006DC                 mov     ecx, [ebp+arg_0]
.text$mn:000006DF                 call    ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length(void)
.text$mn:000006E4                 sub     eax, 2
.text$mn:000006E7                 cmp     [ebp+var_28], eax
.text$mn:000006EA                 jge     short loc_763
.text$mn:000006EC                 mov     edx, [ebp+var_28]
.text$mn:000006EF                 add     edx, 1
.text$mn:000006F2                 push    edx
.text$mn:000006F3                 mov     ecx, [ebp+arg_0]
.text$mn:000006F6                 call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)
.text$mn:000006FB                 movsx   eax, byte ptr [eax]
.text$mn:000006FE                 cmp     eax, 23h ; '#'
.text$mn:00000701                 jnz     short loc_763
.text$mn:00000703                 mov     ecx, [ebp+var_28]
.text$mn:00000706                 add     ecx, 2
.text$mn:00000709                 push    ecx
.text$mn:0000070A                 mov     ecx, [ebp+arg_0]
.text$mn:0000070D                 call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)
.text$mn:00000712                 movsx   edx, byte ptr [eax]
.text$mn:00000715                 cmp     edx, 78h ; 'x'
.text$mn:00000718                 jnz     short loc_763
.text$mn:0000071A
.text$mn:0000071A loc_71A:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *):loc_75Cj
.text$mn:0000071A                 mov     ecx, [ebp+arg_0]
.text$mn:0000071D                 call    ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length(void)
.text$mn:00000722                 cmp     [ebp+var_28], eax
.text$mn:00000725                 jge     short loc_75E
.text$mn:00000727                 push    1               ; Size
.text$mn:00000729                 mov     ecx, [ebp+arg_0]
.text$mn:0000072C                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00000731                 add     eax, [ebp+var_28]
.text$mn:00000734                 push    eax             ; Src
.text$mn:00000735                 mov     ecx, [ebp+arg_4]
.text$mn:00000738                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:0000073D                 mov     eax, [ebp+var_28]
.text$mn:00000740                 add     eax, 1
.text$mn:00000743                 mov     [ebp+var_28], eax
.text$mn:00000746                 mov     ecx, [ebp+var_28]
.text$mn:00000749                 push    ecx
.text$mn:0000074A                 mov     ecx, [ebp+arg_0]
.text$mn:0000074D                 call    ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)
.text$mn:00000752                 movsx   edx, byte ptr [eax]
.text$mn:00000755                 cmp     edx, 3Bh ; ';'
.text$mn:00000758                 jnz     short loc_75C
.text$mn:0000075A                 jmp     short loc_75E
.text$mn:0000075C ; ---------------------------------------------------------------------------
.text$mn:0000075C
.text$mn:0000075C loc_75C:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+C0j
.text$mn:0000075C                 jmp     short loc_71A
.text$mn:0000075E ; ---------------------------------------------------------------------------
.text$mn:0000075E
.text$mn:0000075E loc_75E:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+8Dj
.text$mn:0000075E                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+C2j
.text$mn:0000075E                 jmp     loc_8E8
.text$mn:00000763 ; ---------------------------------------------------------------------------
.text$mn:00000763
.text$mn:00000763 loc_763:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+3Ej
.text$mn:00000763                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+52j ...
.text$mn:00000763                 cmp     [ebp+var_2C], 26h ; '&'
.text$mn:00000767                 jnz     short loc_79D
.text$mn:00000769                 mov     eax, 0Ch
.text$mn:0000076E                 imul    ecx, eax, 0
.text$mn:00000771                 mov     edx, dword ptr ds:(?entity@TiXmlBaseA@@0PAUEntity@1@A+4)[ecx] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:00000777                 push    edx             ; Size
.text$mn:00000778                 mov     eax, 0Ch
.text$mn:0000077D                 imul    ecx, eax, 0
.text$mn:00000780                 mov     edx, dword ptr ds:?entity@TiXmlBaseA@@0PAUEntity@1@A[ecx] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:00000786                 push    edx             ; Src
.text$mn:00000787                 mov     ecx, [ebp+arg_4]
.text$mn:0000078A                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:0000078F                 mov     eax, [ebp+var_28]
.text$mn:00000792                 add     eax, 1
.text$mn:00000795                 mov     [ebp+var_28], eax
.text$mn:00000798                 jmp     loc_8E8
.text$mn:0000079D ; ---------------------------------------------------------------------------
.text$mn:0000079D
.text$mn:0000079D loc_79D:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+CFj
.text$mn:0000079D                 cmp     [ebp+var_2C], 3Ch ; '<'
.text$mn:000007A1                 jnz     short loc_7D7
.text$mn:000007A3                 mov     ecx, 0Ch
.text$mn:000007A8                 shl     ecx, 0
.text$mn:000007AB                 mov     edx, dword ptr ds:(?entity@TiXmlBaseA@@0PAUEntity@1@A+4)[ecx] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:000007B1                 push    edx             ; Size
.text$mn:000007B2                 mov     eax, 0Ch
.text$mn:000007B7                 shl     eax, 0
.text$mn:000007BA                 mov     ecx, dword ptr ds:?entity@TiXmlBaseA@@0PAUEntity@1@A[eax] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:000007C0                 push    ecx             ; Src
.text$mn:000007C1                 mov     ecx, [ebp+arg_4]
.text$mn:000007C4                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:000007C9                 mov     edx, [ebp+var_28]
.text$mn:000007CC                 add     edx, 1
.text$mn:000007CF                 mov     [ebp+var_28], edx
.text$mn:000007D2                 jmp     loc_8E8
.text$mn:000007D7 ; ---------------------------------------------------------------------------
.text$mn:000007D7
.text$mn:000007D7 loc_7D7:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+109j
.text$mn:000007D7                 cmp     [ebp+var_2C], 3Eh ; '>'
.text$mn:000007DB                 jnz     short loc_80F
.text$mn:000007DD                 mov     eax, 0Ch
.text$mn:000007E2                 shl     eax, 1
.text$mn:000007E4                 mov     ecx, dword ptr ds:(?entity@TiXmlBaseA@@0PAUEntity@1@A+4)[eax] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:000007EA                 push    ecx             ; Size
.text$mn:000007EB                 mov     edx, 0Ch
.text$mn:000007F0                 shl     edx, 1
.text$mn:000007F2                 mov     eax, dword ptr ds:?entity@TiXmlBaseA@@0PAUEntity@1@A[edx] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:000007F8                 push    eax             ; Src
.text$mn:000007F9                 mov     ecx, [ebp+arg_4]
.text$mn:000007FC                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:00000801                 mov     ecx, [ebp+var_28]
.text$mn:00000804                 add     ecx, 1
.text$mn:00000807                 mov     [ebp+var_28], ecx
.text$mn:0000080A                 jmp     loc_8E8
.text$mn:0000080F ; ---------------------------------------------------------------------------
.text$mn:0000080F
.text$mn:0000080F loc_80F:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+143j
.text$mn:0000080F                 cmp     [ebp+var_2C], 22h ; '"'
.text$mn:00000813                 jnz     short loc_849
.text$mn:00000815                 mov     edx, 0Ch
.text$mn:0000081A                 imul    eax, edx, 3
.text$mn:0000081D                 mov     ecx, dword ptr ds:(?entity@TiXmlBaseA@@0PAUEntity@1@A+4)[eax] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:00000823                 push    ecx             ; Size
.text$mn:00000824                 mov     edx, 0Ch
.text$mn:00000829                 imul    eax, edx, 3
.text$mn:0000082C                 mov     ecx, dword ptr ds:?entity@TiXmlBaseA@@0PAUEntity@1@A[eax] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:00000832                 push    ecx             ; Src
.text$mn:00000833                 mov     ecx, [ebp+arg_4]
.text$mn:00000836                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:0000083B                 mov     edx, [ebp+var_28]
.text$mn:0000083E                 add     edx, 1
.text$mn:00000841                 mov     [ebp+var_28], edx
.text$mn:00000844                 jmp     loc_8E8
.text$mn:00000849 ; ---------------------------------------------------------------------------
.text$mn:00000849
.text$mn:00000849 loc_849:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+17Bj
.text$mn:00000849                 cmp     [ebp+var_2C], 27h ; '''
.text$mn:0000084D                 jnz     short loc_880
.text$mn:0000084F                 mov     eax, 0Ch
.text$mn:00000854                 shl     eax, 2
.text$mn:00000857                 mov     ecx, dword ptr ds:(?entity@TiXmlBaseA@@0PAUEntity@1@A+4)[eax] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:0000085D                 push    ecx             ; Size
.text$mn:0000085E                 mov     edx, 0Ch
.text$mn:00000863                 shl     edx, 2
.text$mn:00000866                 mov     eax, dword ptr ds:?entity@TiXmlBaseA@@0PAUEntity@1@A[edx] ; TiXmlBaseA::Entity * TiXmlBaseA::entity
.text$mn:0000086C                 push    eax             ; Src
.text$mn:0000086D                 mov     ecx, [ebp+arg_4]
.text$mn:00000870                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:00000875                 mov     ecx, [ebp+var_28]
.text$mn:00000878                 add     ecx, 1
.text$mn:0000087B                 mov     [ebp+var_28], ecx
.text$mn:0000087E                 jmp     short loc_8E8
.text$mn:00000880 ; ---------------------------------------------------------------------------
.text$mn:00000880
.text$mn:00000880 loc_880:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+1B5j
.text$mn:00000880                 cmp     [ebp+var_2C], 20h ; ' '
.text$mn:00000884                 jl      short loc_88C
.text$mn:00000886                 cmp     [ebp+var_2C], 7Eh ; '~'
.text$mn:0000088A                 jle     short loc_8CB
.text$mn:0000088C
.text$mn:0000088C loc_88C:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+1ECj
.text$mn:0000088C                 mov     edx, [ebp+var_2C]
.text$mn:0000088F                 and     edx, 0FFh
.text$mn:00000895                 push    edx
.text$mn:00000896                 push    offset $SG96093 ; "&#x%02X;"
.text$mn:0000089B                 lea     eax, [ebp+Dest]
.text$mn:0000089E                 push    eax             ; Dest
.text$mn:0000089F                 call    _sprintf
.text$mn:000008A4                 add     esp, 0Ch
.text$mn:000008A7                 lea     ecx, [ebp+Dest]
.text$mn:000008AA                 push    ecx             ; Str
.text$mn:000008AB                 call    _strlen
.text$mn:000008B0                 add     esp, 4
.text$mn:000008B3                 push    eax             ; Size
.text$mn:000008B4                 lea     edx, [ebp+Dest]
.text$mn:000008B7                 push    edx             ; Src
.text$mn:000008B8                 mov     ecx, [ebp+arg_4]
.text$mn:000008BB                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:000008C0                 mov     eax, [ebp+var_28]
.text$mn:000008C3                 add     eax, 1
.text$mn:000008C6                 mov     [ebp+var_28], eax
.text$mn:000008C9                 jmp     short loc_8E8
.text$mn:000008CB ; ---------------------------------------------------------------------------
.text$mn:000008CB
.text$mn:000008CB loc_8CB:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+1F2j
.text$mn:000008CB                 mov     cl, byte ptr [ebp+var_2C]
.text$mn:000008CE                 mov     [ebp+Src], cl
.text$mn:000008D1                 push    1               ; Size
.text$mn:000008D3                 lea     edx, [ebp+Src]
.text$mn:000008D6                 push    edx             ; Src
.text$mn:000008D7                 mov     ecx, [ebp+arg_4]
.text$mn:000008DA                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:000008DF                 mov     eax, [ebp+var_28]
.text$mn:000008E2                 add     eax, 1
.text$mn:000008E5                 mov     [ebp+var_28], eax
.text$mn:000008E8
.text$mn:000008E8 loc_8E8:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *):loc_75Ej
.text$mn:000008E8                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+100j ...
.text$mn:000008E8                 jmp     loc_6AF
.text$mn:000008ED ; ---------------------------------------------------------------------------
.text$mn:000008ED
.text$mn:000008ED loc_8ED:                                ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+22j
.text$mn:000008ED                 mov     ecx, [ebp+var_4]
.text$mn:000008F0                 xor     ecx, ebp
.text$mn:000008F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000008F7                 mov     esp, ebp
.text$mn:000008F9                 pop     ebp
.text$mn:000008FA                 retn
.text$mn:000008FA ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z endp
.text$mn:000008FA
.text$mn:000008FA ; ---------------------------------------------------------------------------
.text$mn:000008FB                 db 0Dh dup(0CCh)
.text$mn:00000908
.text$mn:00000908 ; =============== S U B R O U T I N E =======================================
.text$mn:00000908
.text$mn:00000908 ; Attributes: bp-based frame
.text$mn:00000908
.text$mn:00000908 ; class std::basic_istream<char, struct std::char_traits<char>> & __cdecl operator>>(class std::basic_istream<char, struct std::char_traits<char>> &, class TiXmlNodeA &)
.text$mn:00000908                 public ??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z
.text$mn:00000908 ??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z proc near
.text$mn:00000908
.text$mn:00000908 var_30          = dword ptr -30h
.text$mn:00000908 var_2C          = byte ptr -2Ch
.text$mn:00000908 var_10          = dword ptr -10h
.text$mn:00000908 var_C           = dword ptr -0Ch
.text$mn:00000908 var_4           = dword ptr -4
.text$mn:00000908 arg_0           = dword ptr  8
.text$mn:00000908 arg_4           = dword ptr  0Ch
.text$mn:00000908
.text$mn:00000908                 push    ebp
.text$mn:00000909                 mov     ebp, esp
.text$mn:0000090B                 push    0FFFFFFFFh
.text$mn:0000090D                 push    offset __ehhandler$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z
.text$mn:00000912                 mov     eax, large fs:0
.text$mn:00000918                 push    eax
.text$mn:00000919                 sub     esp, 24h
.text$mn:0000091C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000921                 xor     eax, ebp
.text$mn:00000923                 mov     [ebp+var_10], eax
.text$mn:00000926                 push    eax
.text$mn:00000927                 lea     eax, [ebp+var_C]
.text$mn:0000092A                 mov     large fs:0, eax
.text$mn:00000930                 lea     ecx, [ebp+var_2C]
.text$mn:00000933                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000938                 mov     [ebp+var_4], 0
.text$mn:0000093F                 push    1F40h
.text$mn:00000944                 lea     ecx, [ebp+var_2C]
.text$mn:00000947                 call    ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)
.text$mn:0000094C                 lea     eax, [ebp+var_2C]
.text$mn:0000094F                 push    eax
.text$mn:00000950                 mov     ecx, [ebp+arg_0]
.text$mn:00000953                 push    ecx
.text$mn:00000954                 mov     edx, [ebp+arg_4]
.text$mn:00000957                 mov     eax, [edx]
.text$mn:00000959                 mov     ecx, [ebp+arg_4]
.text$mn:0000095C                 mov     edx, [eax+18h]
.text$mn:0000095F                 call    edx
.text$mn:00000961                 push    0
.text$mn:00000963                 lea     ecx, [ebp+var_2C]
.text$mn:00000966                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000096B                 push    eax
.text$mn:0000096C                 mov     eax, [ebp+arg_4]
.text$mn:0000096F                 mov     edx, [eax]
.text$mn:00000971                 mov     ecx, [ebp+arg_4]
.text$mn:00000974                 mov     eax, [edx+0Ch]
.text$mn:00000977                 call    eax
.text$mn:00000979                 mov     ecx, [ebp+arg_0]
.text$mn:0000097C                 mov     [ebp+var_30], ecx
.text$mn:0000097F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000986                 lea     ecx, [ebp+var_2C]
.text$mn:00000989                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000098E                 mov     eax, [ebp+var_30]
.text$mn:00000991                 mov     ecx, [ebp+var_C]
.text$mn:00000994                 mov     large fs:0, ecx
.text$mn:0000099B                 pop     ecx
.text$mn:0000099C                 mov     ecx, [ebp+var_10]
.text$mn:0000099F                 xor     ecx, ebp
.text$mn:000009A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000009A6                 mov     esp, ebp
.text$mn:000009A8                 pop     ebp
.text$mn:000009A9                 retn
.text$mn:000009A9 ??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z endp
.text$mn:000009A9
.text$mn:000009A9 ; ---------------------------------------------------------------------------
.text$mn:000009AA                 db 0Eh dup(0CCh)
.text$mn:000009B8
.text$mn:000009B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000009B8
.text$mn:000009B8 ; Attributes: bp-based frame
.text$mn:000009B8
.text$mn:000009B8 ; class std::basic_ostream<char, struct std::char_traits<char>> & __cdecl operator<<(class std::basic_ostream<char, struct std::char_traits<char>> &, class TiXmlNodeA const &)
.text$mn:000009B8                 public ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABVTiXmlNodeA@@@Z
.text$mn:000009B8 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABVTiXmlNodeA@@@Z proc near
.text$mn:000009B8
.text$mn:000009B8 arg_0           = dword ptr  8
.text$mn:000009B8 arg_4           = dword ptr  0Ch
.text$mn:000009B8
.text$mn:000009B8                 push    ebp
.text$mn:000009B9                 mov     ebp, esp
.text$mn:000009BB                 mov     eax, [ebp+arg_0]
.text$mn:000009BE                 push    eax
.text$mn:000009BF                 mov     ecx, [ebp+arg_4]
.text$mn:000009C2                 mov     edx, [ecx]
.text$mn:000009C4                 mov     ecx, [ebp+arg_4]
.text$mn:000009C7                 mov     eax, [edx+8]
.text$mn:000009CA                 call    eax
.text$mn:000009CC                 mov     eax, [ebp+arg_0]
.text$mn:000009CF                 pop     ebp
.text$mn:000009D0                 retn
.text$mn:000009D0 ??6@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV01@ABVTiXmlNodeA@@@Z endp
.text$mn:000009D0
.text$mn:000009D0 ; ---------------------------------------------------------------------------
.text$mn:000009D1                 align 8
.text$mn:000009D8
.text$mn:000009D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000009D8
.text$mn:000009D8 ; Attributes: bp-based frame
.text$mn:000009D8
.text$mn:000009D8 ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __cdecl operator<<(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class TiXmlNodeA const &)
.text$mn:000009D8                 public ??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z
.text$mn:000009D8 ??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z proc near
.text$mn:000009D8
.text$mn:000009D8 var_D0          = byte ptr -0D0h
.text$mn:000009D8 var_38          = dword ptr -38h
.text$mn:000009D8 var_34          = dword ptr -34h
.text$mn:000009D8 var_30          = dword ptr -30h
.text$mn:000009D8 var_2C          = byte ptr -2Ch
.text$mn:000009D8 var_10          = dword ptr -10h
.text$mn:000009D8 var_C           = dword ptr -0Ch
.text$mn:000009D8 var_4           = dword ptr -4
.text$mn:000009D8 arg_0           = dword ptr  8
.text$mn:000009D8 arg_4           = dword ptr  0Ch
.text$mn:000009D8
.text$mn:000009D8                 push    ebp
.text$mn:000009D9                 mov     ebp, esp
.text$mn:000009DB                 push    0FFFFFFFFh
.text$mn:000009DD                 push    offset __ehhandler$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z
.text$mn:000009E2                 mov     eax, large fs:0
.text$mn:000009E8                 push    eax
.text$mn:000009E9                 sub     esp, 0C4h
.text$mn:000009EF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000009F4                 xor     eax, ebp
.text$mn:000009F6                 mov     [ebp+var_10], eax
.text$mn:000009F9                 push    eax
.text$mn:000009FA                 lea     eax, [ebp+var_C]
.text$mn:000009FD                 mov     large fs:0, eax
.text$mn:00000A03                 push    1
.text$mn:00000A05                 push    2
.text$mn:00000A07                 lea     ecx, [ebp+var_D0]
.text$mn:00000A0D                 call    ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)
.text$mn:00000A12                 mov     [ebp+var_4], 0
.text$mn:00000A19                 lea     eax, [ebp+var_D0]
.text$mn:00000A1F                 push    eax
.text$mn:00000A20                 mov     ecx, [ebp+arg_4]
.text$mn:00000A23                 mov     edx, [ecx]
.text$mn:00000A25                 mov     ecx, [ebp+arg_4]
.text$mn:00000A28                 mov     eax, [edx+8]
.text$mn:00000A2B                 call    eax
.text$mn:00000A2D                 lea     ecx, [ebp+var_2C]
.text$mn:00000A30                 push    ecx
.text$mn:00000A31                 lea     ecx, [ebp+var_D0]
.text$mn:00000A37                 call    ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::str(void)
.text$mn:00000A3C                 mov     [ebp+var_38], eax
.text$mn:00000A3F                 mov     edx, [ebp+var_38]
.text$mn:00000A42                 mov     [ebp+var_34], edx
.text$mn:00000A45                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000A49                 mov     eax, [ebp+var_34]
.text$mn:00000A4C                 push    eax
.text$mn:00000A4D                 mov     ecx, [ebp+arg_0]
.text$mn:00000A50                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00000A55                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000A59                 lea     ecx, [ebp+var_2C]
.text$mn:00000A5C                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000A61                 mov     ecx, [ebp+arg_0]
.text$mn:00000A64                 mov     [ebp+var_30], ecx
.text$mn:00000A67                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000A6E                 lea     ecx, [ebp+var_D0]
.text$mn:00000A74                 call    ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
.text$mn:00000A79                 mov     eax, [ebp+var_30]
.text$mn:00000A7C                 mov     ecx, [ebp+var_C]
.text$mn:00000A7F                 mov     large fs:0, ecx
.text$mn:00000A86                 pop     ecx
.text$mn:00000A87                 mov     ecx, [ebp+var_10]
.text$mn:00000A8A                 xor     ecx, ebp
.text$mn:00000A8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000A91                 mov     esp, ebp
.text$mn:00000A93                 pop     ebp
.text$mn:00000A94                 retn
.text$mn:00000A94 ??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z endp
.text$mn:00000A94
.text$mn:00000A94 ; ---------------------------------------------------------------------------
.text$mn:00000A95                 align 4
.text$mn:00000A98
.text$mn:00000A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A98
.text$mn:00000A98 ; Attributes: bp-based frame
.text$mn:00000A98
.text$mn:00000A98 ; _DWORD __thiscall TiXmlNodeA::~TiXmlNodeA(TiXmlNodeA *__hidden this)
.text$mn:00000A98                 public ??1TiXmlNodeA@@UAE@XZ
.text$mn:00000A98 ??1TiXmlNodeA@@UAE@XZ proc near         ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+ABp
.text$mn:00000A98                                         ; __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$0+3j ...
.text$mn:00000A98
.text$mn:00000A98 var_24          = dword ptr -24h
.text$mn:00000A98 var_20          = dword ptr -20h
.text$mn:00000A98 var_1C          = dword ptr -1Ch
.text$mn:00000A98 var_18          = dword ptr -18h
.text$mn:00000A98 var_14          = dword ptr -14h
.text$mn:00000A98 var_10          = dword ptr -10h
.text$mn:00000A98 var_C           = dword ptr -0Ch
.text$mn:00000A98 var_4           = dword ptr -4
.text$mn:00000A98
.text$mn:00000A98                 push    ebp
.text$mn:00000A99                 mov     ebp, esp
.text$mn:00000A9B                 push    0FFFFFFFFh
.text$mn:00000A9D                 push    offset __ehhandler$??1TiXmlNodeA@@UAE@XZ
.text$mn:00000AA2                 mov     eax, large fs:0
.text$mn:00000AA8                 push    eax
.text$mn:00000AA9                 sub     esp, 18h
.text$mn:00000AAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000AB1                 xor     eax, ebp
.text$mn:00000AB3                 push    eax
.text$mn:00000AB4                 lea     eax, [ebp+var_C]
.text$mn:00000AB7                 mov     large fs:0, eax
.text$mn:00000ABD                 mov     [ebp+var_14], ecx
.text$mn:00000AC0                 mov     eax, [ebp+var_14]
.text$mn:00000AC3                 mov     dword ptr [eax], offset ??_7TiXmlNodeA@@6B@ ; const TiXmlNodeA::`vftable'
.text$mn:00000AC9                 mov     [ebp+var_4], 1
.text$mn:00000AD0                 mov     ecx, [ebp+var_14]
.text$mn:00000AD3                 mov     edx, [ecx+14h]
.text$mn:00000AD6                 mov     [ebp+var_10], edx
.text$mn:00000AD9                 mov     [ebp+var_1C], 0
.text$mn:00000AE0
.text$mn:00000AE0 loc_AE0:                                ; CODE XREF: TiXmlNodeA::~TiXmlNodeA(void):loc_B21j
.text$mn:00000AE0                 cmp     [ebp+var_10], 0
.text$mn:00000AE4                 jz      short loc_B23
.text$mn:00000AE6                 mov     eax, [ebp+var_10]
.text$mn:00000AE9                 mov     [ebp+var_1C], eax
.text$mn:00000AEC                 mov     ecx, [ebp+var_10]
.text$mn:00000AEF                 mov     edx, [ecx+3Ch]
.text$mn:00000AF2                 mov     [ebp+var_10], edx
.text$mn:00000AF5                 mov     eax, [ebp+var_1C]
.text$mn:00000AF8                 mov     [ebp+var_20], eax
.text$mn:00000AFB                 mov     ecx, [ebp+var_20]
.text$mn:00000AFE                 mov     [ebp+var_18], ecx
.text$mn:00000B01                 cmp     [ebp+var_18], 0
.text$mn:00000B05                 jz      short loc_B1A
.text$mn:00000B07                 push    1
.text$mn:00000B09                 mov     edx, [ebp+var_18]
.text$mn:00000B0C                 mov     eax, [edx]
.text$mn:00000B0E                 mov     ecx, [ebp+var_18]
.text$mn:00000B11                 mov     edx, [eax]
.text$mn:00000B13                 call    edx
.text$mn:00000B15                 mov     [ebp+var_24], eax
.text$mn:00000B18                 jmp     short loc_B21
.text$mn:00000B1A ; ---------------------------------------------------------------------------
.text$mn:00000B1A
.text$mn:00000B1A loc_B1A:                                ; CODE XREF: TiXmlNodeA::~TiXmlNodeA(void)+6Dj
.text$mn:00000B1A                 mov     [ebp+var_24], 0
.text$mn:00000B21
.text$mn:00000B21 loc_B21:                                ; CODE XREF: TiXmlNodeA::~TiXmlNodeA(void)+80j
.text$mn:00000B21                 jmp     short loc_AE0
.text$mn:00000B23 ; ---------------------------------------------------------------------------
.text$mn:00000B23
.text$mn:00000B23 loc_B23:                                ; CODE XREF: TiXmlNodeA::~TiXmlNodeA(void)+4Cj
.text$mn:00000B23                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000B27                 mov     ecx, [ebp+var_14]
.text$mn:00000B2A                 add     ecx, 1Ch
.text$mn:00000B2D                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000B32                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000B39                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000B3C                 call    ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$mn:00000B41                 mov     ecx, [ebp+var_C]
.text$mn:00000B44                 mov     large fs:0, ecx
.text$mn:00000B4B                 pop     ecx
.text$mn:00000B4C                 mov     esp, ebp
.text$mn:00000B4E                 pop     ebp
.text$mn:00000B4F                 retn
.text$mn:00000B4F ??1TiXmlNodeA@@UAE@XZ endp
.text$mn:00000B4F
.text$mn:00000B4F ; ---------------------------------------------------------------------------
.text$mn:00000B50                 db 8 dup(0CCh)
.text$mn:00000B58
.text$mn:00000B58 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B58
.text$mn:00000B58 ; Attributes: bp-based frame
.text$mn:00000B58
.text$mn:00000B58 ; void __thiscall TiXmlNodeA::Clear(TiXmlNodeA *__hidden this)
.text$mn:00000B58                 public ?Clear@TiXmlNodeA@@QAEXXZ
.text$mn:00000B58 ?Clear@TiXmlNodeA@@QAEXXZ proc near     ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+37p
.text$mn:00000B58                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+37p
.text$mn:00000B58
.text$mn:00000B58 var_18          = dword ptr -18h
.text$mn:00000B58 var_14          = dword ptr -14h
.text$mn:00000B58 var_10          = dword ptr -10h
.text$mn:00000B58 var_C           = dword ptr -0Ch
.text$mn:00000B58 var_8           = dword ptr -8
.text$mn:00000B58 var_4           = dword ptr -4
.text$mn:00000B58
.text$mn:00000B58                 push    ebp
.text$mn:00000B59                 mov     ebp, esp
.text$mn:00000B5B                 sub     esp, 18h
.text$mn:00000B5E                 mov     [ebp+var_C], ecx
.text$mn:00000B61                 mov     eax, [ebp+var_C]
.text$mn:00000B64                 mov     ecx, [eax+14h]
.text$mn:00000B67                 mov     [ebp+var_4], ecx
.text$mn:00000B6A                 mov     [ebp+var_10], 0
.text$mn:00000B71
.text$mn:00000B71 loc_B71:                                ; CODE XREF: TiXmlNodeA::Clear(void):loc_BB2j
.text$mn:00000B71                 cmp     [ebp+var_4], 0
.text$mn:00000B75                 jz      short loc_BB4
.text$mn:00000B77                 mov     edx, [ebp+var_4]
.text$mn:00000B7A                 mov     [ebp+var_10], edx
.text$mn:00000B7D                 mov     eax, [ebp+var_4]
.text$mn:00000B80                 mov     ecx, [eax+3Ch]
.text$mn:00000B83                 mov     [ebp+var_4], ecx
.text$mn:00000B86                 mov     edx, [ebp+var_10]
.text$mn:00000B89                 mov     [ebp+var_14], edx
.text$mn:00000B8C                 mov     eax, [ebp+var_14]
.text$mn:00000B8F                 mov     [ebp+var_8], eax
.text$mn:00000B92                 cmp     [ebp+var_8], 0
.text$mn:00000B96                 jz      short loc_BAB
.text$mn:00000B98                 push    1
.text$mn:00000B9A                 mov     ecx, [ebp+var_8]
.text$mn:00000B9D                 mov     edx, [ecx]
.text$mn:00000B9F                 mov     ecx, [ebp+var_8]
.text$mn:00000BA2                 mov     eax, [edx]
.text$mn:00000BA4                 call    eax
.text$mn:00000BA6                 mov     [ebp+var_18], eax
.text$mn:00000BA9                 jmp     short loc_BB2
.text$mn:00000BAB ; ---------------------------------------------------------------------------
.text$mn:00000BAB
.text$mn:00000BAB loc_BAB:                                ; CODE XREF: TiXmlNodeA::Clear(void)+3Ej
.text$mn:00000BAB                 mov     [ebp+var_18], 0
.text$mn:00000BB2
.text$mn:00000BB2 loc_BB2:                                ; CODE XREF: TiXmlNodeA::Clear(void)+51j
.text$mn:00000BB2                 jmp     short loc_B71
.text$mn:00000BB4 ; ---------------------------------------------------------------------------
.text$mn:00000BB4
.text$mn:00000BB4 loc_BB4:                                ; CODE XREF: TiXmlNodeA::Clear(void)+1Dj
.text$mn:00000BB4                 mov     ecx, [ebp+var_C]
.text$mn:00000BB7                 mov     dword ptr [ecx+14h], 0
.text$mn:00000BBE                 mov     edx, [ebp+var_C]
.text$mn:00000BC1                 mov     dword ptr [edx+18h], 0
.text$mn:00000BC8                 mov     esp, ebp
.text$mn:00000BCA                 pop     ebp
.text$mn:00000BCB                 retn
.text$mn:00000BCB ?Clear@TiXmlNodeA@@QAEXXZ endp
.text$mn:00000BCB
.text$mn:00000BCB ; ---------------------------------------------------------------------------
.text$mn:00000BCC                 db 0Ch dup(0CCh)
.text$mn:00000BD8
.text$mn:00000BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000BD8
.text$mn:00000BD8 ; Attributes: bp-based frame
.text$mn:00000BD8
.text$mn:00000BD8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::FirstChild(TiXmlNodeA *this, const char *)
.text$mn:00000BD8                 public ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:00000BD8 ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$mn:00000BD8                                         ; CODE XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+14p
.text$mn:00000BD8                                         ; TiXmlNodeA::FirstChildElement(char const *)+10p ...
.text$mn:00000BD8
.text$mn:00000BD8 var_64          = dword ptr -64h
.text$mn:00000BD8 var_60          = dword ptr -60h
.text$mn:00000BD8 var_5C          = dword ptr -5Ch
.text$mn:00000BD8 var_58          = dword ptr -58h
.text$mn:00000BD8 var_54          = dword ptr -54h
.text$mn:00000BD8 var_50          = dword ptr -50h
.text$mn:00000BD8 var_49          = byte ptr -49h
.text$mn:00000BD8 var_48          = byte ptr -48h
.text$mn:00000BD8 var_2C          = byte ptr -2Ch
.text$mn:00000BD8 var_10          = dword ptr -10h
.text$mn:00000BD8 var_C           = dword ptr -0Ch
.text$mn:00000BD8 var_4           = dword ptr -4
.text$mn:00000BD8 Str             = dword ptr  8
.text$mn:00000BD8
.text$mn:00000BD8                 push    ebp
.text$mn:00000BD9                 mov     ebp, esp
.text$mn:00000BDB                 push    0FFFFFFFFh
.text$mn:00000BDD                 push    offset __ehhandler$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:00000BE2                 mov     eax, large fs:0
.text$mn:00000BE8                 push    eax
.text$mn:00000BE9                 sub     esp, 58h
.text$mn:00000BEC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000BF1                 xor     eax, ebp
.text$mn:00000BF3                 mov     [ebp+var_10], eax
.text$mn:00000BF6                 push    eax
.text$mn:00000BF7                 lea     eax, [ebp+var_C]
.text$mn:00000BFA                 mov     large fs:0, eax
.text$mn:00000C00                 mov     [ebp+var_64], ecx
.text$mn:00000C03                 mov     eax, [ebp+var_64]
.text$mn:00000C06                 mov     ecx, [eax+14h]
.text$mn:00000C09                 mov     [ebp+var_50], ecx
.text$mn:00000C0C                 jmp     short loc_C17
.text$mn:00000C0E ; ---------------------------------------------------------------------------
.text$mn:00000C0E
.text$mn:00000C0E loc_C0E:                                ; CODE XREF: TiXmlNodeA::FirstChild(char const *):loc_C8Dj
.text$mn:00000C0E                 mov     edx, [ebp+var_50]
.text$mn:00000C11                 mov     eax, [edx+3Ch]
.text$mn:00000C14                 mov     [ebp+var_50], eax
.text$mn:00000C17
.text$mn:00000C17 loc_C17:                                ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+34j
.text$mn:00000C17                 cmp     [ebp+var_50], 0
.text$mn:00000C1B                 jz      short loc_C92
.text$mn:00000C1D                 mov     ecx, [ebp+Str]
.text$mn:00000C20                 push    ecx             ; Str
.text$mn:00000C21                 lea     ecx, [ebp+var_2C]
.text$mn:00000C24                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00000C29                 mov     [ebp+var_5C], eax
.text$mn:00000C2C                 mov     edx, [ebp+var_5C]
.text$mn:00000C2F                 mov     [ebp+var_54], edx
.text$mn:00000C32                 mov     [ebp+var_4], 0
.text$mn:00000C39                 mov     eax, [ebp+var_54]
.text$mn:00000C3C                 push    eax
.text$mn:00000C3D                 lea     ecx, [ebp+var_48]
.text$mn:00000C40                 push    ecx
.text$mn:00000C41                 mov     ecx, [ebp+var_50]
.text$mn:00000C44                 call    ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; TiXmlNodeA::SValue(void)
.text$mn:00000C49                 mov     [ebp+var_60], eax
.text$mn:00000C4C                 mov     edx, [ebp+var_60]
.text$mn:00000C4F                 mov     [ebp+var_58], edx
.text$mn:00000C52                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000C56                 mov     eax, [ebp+var_58]
.text$mn:00000C59                 push    eax
.text$mn:00000C5A                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00000C5F                 add     esp, 8
.text$mn:00000C62                 mov     [ebp+var_49], al
.text$mn:00000C65                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000C69                 lea     ecx, [ebp+var_48]
.text$mn:00000C6C                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000C71                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000C78                 lea     ecx, [ebp+var_2C]
.text$mn:00000C7B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000C80                 movzx   ecx, [ebp+var_49]
.text$mn:00000C84                 test    ecx, ecx
.text$mn:00000C86                 jz      short loc_C8D
.text$mn:00000C88                 mov     eax, [ebp+var_50]
.text$mn:00000C8B                 jmp     short loc_C94
.text$mn:00000C8D ; ---------------------------------------------------------------------------
.text$mn:00000C8D
.text$mn:00000C8D loc_C8D:                                ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+AEj
.text$mn:00000C8D                 jmp     loc_C0E
.text$mn:00000C92 ; ---------------------------------------------------------------------------
.text$mn:00000C92
.text$mn:00000C92 loc_C92:                                ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+43j
.text$mn:00000C92                 xor     eax, eax
.text$mn:00000C94
.text$mn:00000C94 loc_C94:                                ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+B3j
.text$mn:00000C94                 mov     ecx, [ebp+var_C]
.text$mn:00000C97                 mov     large fs:0, ecx
.text$mn:00000C9E                 pop     ecx
.text$mn:00000C9F                 mov     ecx, [ebp+var_10]
.text$mn:00000CA2                 xor     ecx, ebp
.text$mn:00000CA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000CA9                 mov     esp, ebp
.text$mn:00000CAB                 pop     ebp
.text$mn:00000CAC                 retn    4
.text$mn:00000CAC ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$mn:00000CAC
.text$mn:00000CAC ; ---------------------------------------------------------------------------
.text$mn:00000CAF                 db 9 dup(0CCh)
.text$mn:00000CB8
.text$mn:00000CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000CB8
.text$mn:00000CB8 ; Attributes: bp-based frame
.text$mn:00000CB8
.text$mn:00000CB8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::LastChild(TiXmlNodeA *this, const char *)
.text$mn:00000CB8                 public ?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:00000CB8 ?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$mn:00000CB8
.text$mn:00000CB8 var_64          = dword ptr -64h
.text$mn:00000CB8 var_60          = dword ptr -60h
.text$mn:00000CB8 var_5C          = dword ptr -5Ch
.text$mn:00000CB8 var_58          = dword ptr -58h
.text$mn:00000CB8 var_54          = dword ptr -54h
.text$mn:00000CB8 var_50          = dword ptr -50h
.text$mn:00000CB8 var_49          = byte ptr -49h
.text$mn:00000CB8 var_48          = byte ptr -48h
.text$mn:00000CB8 var_2C          = byte ptr -2Ch
.text$mn:00000CB8 var_10          = dword ptr -10h
.text$mn:00000CB8 var_C           = dword ptr -0Ch
.text$mn:00000CB8 var_4           = dword ptr -4
.text$mn:00000CB8 Str             = dword ptr  8
.text$mn:00000CB8
.text$mn:00000CB8                 push    ebp
.text$mn:00000CB9                 mov     ebp, esp
.text$mn:00000CBB                 push    0FFFFFFFFh
.text$mn:00000CBD                 push    offset __ehhandler$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:00000CC2                 mov     eax, large fs:0
.text$mn:00000CC8                 push    eax
.text$mn:00000CC9                 sub     esp, 58h
.text$mn:00000CCC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000CD1                 xor     eax, ebp
.text$mn:00000CD3                 mov     [ebp+var_10], eax
.text$mn:00000CD6                 push    eax
.text$mn:00000CD7                 lea     eax, [ebp+var_C]
.text$mn:00000CDA                 mov     large fs:0, eax
.text$mn:00000CE0                 mov     [ebp+var_64], ecx
.text$mn:00000CE3                 mov     eax, [ebp+var_64]
.text$mn:00000CE6                 mov     ecx, [eax+18h]
.text$mn:00000CE9                 mov     [ebp+var_50], ecx
.text$mn:00000CEC                 jmp     short loc_CF7
.text$mn:00000CEE ; ---------------------------------------------------------------------------
.text$mn:00000CEE
.text$mn:00000CEE loc_CEE:                                ; CODE XREF: TiXmlNodeA::LastChild(char const *):loc_D6Dj
.text$mn:00000CEE                 mov     edx, [ebp+var_50]
.text$mn:00000CF1                 mov     eax, [edx+38h]
.text$mn:00000CF4                 mov     [ebp+var_50], eax
.text$mn:00000CF7
.text$mn:00000CF7 loc_CF7:                                ; CODE XREF: TiXmlNodeA::LastChild(char const *)+34j
.text$mn:00000CF7                 cmp     [ebp+var_50], 0
.text$mn:00000CFB                 jz      short loc_D72
.text$mn:00000CFD                 mov     ecx, [ebp+Str]
.text$mn:00000D00                 push    ecx             ; Str
.text$mn:00000D01                 lea     ecx, [ebp+var_2C]
.text$mn:00000D04                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00000D09                 mov     [ebp+var_5C], eax
.text$mn:00000D0C                 mov     edx, [ebp+var_5C]
.text$mn:00000D0F                 mov     [ebp+var_54], edx
.text$mn:00000D12                 mov     [ebp+var_4], 0
.text$mn:00000D19                 mov     eax, [ebp+var_54]
.text$mn:00000D1C                 push    eax
.text$mn:00000D1D                 lea     ecx, [ebp+var_48]
.text$mn:00000D20                 push    ecx
.text$mn:00000D21                 mov     ecx, [ebp+var_50]
.text$mn:00000D24                 call    ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; TiXmlNodeA::SValue(void)
.text$mn:00000D29                 mov     [ebp+var_60], eax
.text$mn:00000D2C                 mov     edx, [ebp+var_60]
.text$mn:00000D2F                 mov     [ebp+var_58], edx
.text$mn:00000D32                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000D36                 mov     eax, [ebp+var_58]
.text$mn:00000D39                 push    eax
.text$mn:00000D3A                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00000D3F                 add     esp, 8
.text$mn:00000D42                 mov     [ebp+var_49], al
.text$mn:00000D45                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000D49                 lea     ecx, [ebp+var_48]
.text$mn:00000D4C                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000D51                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000D58                 lea     ecx, [ebp+var_2C]
.text$mn:00000D5B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00000D60                 movzx   ecx, [ebp+var_49]
.text$mn:00000D64                 test    ecx, ecx
.text$mn:00000D66                 jz      short loc_D6D
.text$mn:00000D68                 mov     eax, [ebp+var_50]
.text$mn:00000D6B                 jmp     short loc_D74
.text$mn:00000D6D ; ---------------------------------------------------------------------------
.text$mn:00000D6D
.text$mn:00000D6D loc_D6D:                                ; CODE XREF: TiXmlNodeA::LastChild(char const *)+AEj
.text$mn:00000D6D                 jmp     loc_CEE
.text$mn:00000D72 ; ---------------------------------------------------------------------------
.text$mn:00000D72
.text$mn:00000D72 loc_D72:                                ; CODE XREF: TiXmlNodeA::LastChild(char const *)+43j
.text$mn:00000D72                 xor     eax, eax
.text$mn:00000D74
.text$mn:00000D74 loc_D74:                                ; CODE XREF: TiXmlNodeA::LastChild(char const *)+B3j
.text$mn:00000D74                 mov     ecx, [ebp+var_C]
.text$mn:00000D77                 mov     large fs:0, ecx
.text$mn:00000D7E                 pop     ecx
.text$mn:00000D7F                 mov     ecx, [ebp+var_10]
.text$mn:00000D82                 xor     ecx, ebp
.text$mn:00000D84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000D89                 mov     esp, ebp
.text$mn:00000D8B                 pop     ebp
.text$mn:00000D8C                 retn    4
.text$mn:00000D8C ?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$mn:00000D8C
.text$mn:00000D8C ; ---------------------------------------------------------------------------
.text$mn:00000D8F                 db 9 dup(0CCh)
.text$mn:00000D98
.text$mn:00000D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D98
.text$mn:00000D98 ; Attributes: bp-based frame
.text$mn:00000D98
.text$mn:00000D98 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::IterateChildren(TiXmlNodeA *this, struct TiXmlNodeA *)
.text$mn:00000D98                 public ?IterateChildren@TiXmlNodeA@@QBEPAV1@PAV1@@Z
.text$mn:00000D98 ?IterateChildren@TiXmlNodeA@@QBEPAV1@PAV1@@Z proc near
.text$mn:00000D98
.text$mn:00000D98 var_4           = dword ptr -4
.text$mn:00000D98 arg_0           = dword ptr  8
.text$mn:00000D98
.text$mn:00000D98                 push    ebp
.text$mn:00000D99                 mov     ebp, esp
.text$mn:00000D9B                 push    ecx
.text$mn:00000D9C                 mov     [ebp+var_4], ecx
.text$mn:00000D9F                 cmp     [ebp+arg_0], 0
.text$mn:00000DA3                 jnz     short loc_DB1
.text$mn:00000DA5                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000DA8                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00000DAD                 jmp     short loc_DDB
.text$mn:00000DAF ; ---------------------------------------------------------------------------
.text$mn:00000DAF                 jmp     short loc_DDB
.text$mn:00000DB1 ; ---------------------------------------------------------------------------
.text$mn:00000DB1
.text$mn:00000DB1 loc_DB1:                                ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+Bj
.text$mn:00000DB1                 mov     eax, [ebp+arg_0]
.text$mn:00000DB4                 mov     ecx, [eax+0Ch]
.text$mn:00000DB7                 cmp     ecx, [ebp+var_4]
.text$mn:00000DBA                 jz      short loc_DD3
.text$mn:00000DBC                 push    149h            ; Line
.text$mn:00000DC1                 push    offset $SG96267 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00000DC6                 push    offset $SG96268 ; "previous->parent == this"
.text$mn:00000DCB                 call    __wassert
.text$mn:00000DD0 ; ---------------------------------------------------------------------------
.text$mn:00000DD0                 add     esp, 0Ch
.text$mn:00000DD3
.text$mn:00000DD3 loc_DD3:                                ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+22j
.text$mn:00000DD3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00000DD6                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00000DDB
.text$mn:00000DDB loc_DDB:                                ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+15j
.text$mn:00000DDB                                         ; TiXmlNodeA::IterateChildren(TiXmlNodeA *)+17j
.text$mn:00000DDB                 mov     esp, ebp
.text$mn:00000DDD                 pop     ebp
.text$mn:00000DDE                 retn    4
.text$mn:00000DDE ?IterateChildren@TiXmlNodeA@@QBEPAV1@PAV1@@Z endp
.text$mn:00000DDE
.text$mn:00000DDE ; ---------------------------------------------------------------------------
.text$mn:00000DE1                 align 8
.text$mn:00000DE8
.text$mn:00000DE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DE8
.text$mn:00000DE8 ; Attributes: bp-based frame
.text$mn:00000DE8
.text$mn:00000DE8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::IterateChildren(TiXmlNodeA *this, const char *, struct TiXmlNodeA *)
.text$mn:00000DE8                 public ?IterateChildren@TiXmlNodeA@@QBEPAV1@PBDPAV1@@Z
.text$mn:00000DE8 ?IterateChildren@TiXmlNodeA@@QBEPAV1@PBDPAV1@@Z proc near
.text$mn:00000DE8
.text$mn:00000DE8 var_4           = dword ptr -4
.text$mn:00000DE8 arg_0           = dword ptr  8
.text$mn:00000DE8 arg_4           = dword ptr  0Ch
.text$mn:00000DE8
.text$mn:00000DE8                 push    ebp
.text$mn:00000DE9                 mov     ebp, esp
.text$mn:00000DEB                 push    ecx
.text$mn:00000DEC                 mov     [ebp+var_4], ecx
.text$mn:00000DEF                 cmp     [ebp+arg_4], 0
.text$mn:00000DF3                 jnz     short loc_E05
.text$mn:00000DF5                 mov     eax, [ebp+arg_0]
.text$mn:00000DF8                 push    eax             ; char *
.text$mn:00000DF9                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000DFC                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00000E01                 jmp     short loc_E33
.text$mn:00000E03 ; ---------------------------------------------------------------------------
.text$mn:00000E03                 jmp     short loc_E33
.text$mn:00000E05 ; ---------------------------------------------------------------------------
.text$mn:00000E05
.text$mn:00000E05 loc_E05:                                ; CODE XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+Bj
.text$mn:00000E05                 mov     ecx, [ebp+arg_4]
.text$mn:00000E08                 mov     edx, [ecx+0Ch]
.text$mn:00000E0B                 cmp     edx, [ebp+var_4]
.text$mn:00000E0E                 jz      short loc_E27
.text$mn:00000E10                 push    156h            ; Line
.text$mn:00000E15                 push    offset $SG96277 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00000E1A                 push    offset $SG96278 ; "previous->parent == this"
.text$mn:00000E1F                 call    __wassert
.text$mn:00000E24 ; ---------------------------------------------------------------------------
.text$mn:00000E24                 add     esp, 0Ch
.text$mn:00000E27
.text$mn:00000E27 loc_E27:                                ; CODE XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+26j
.text$mn:00000E27                 mov     ecx, [ebp+arg_0]
.text$mn:00000E2A                 push    ecx             ; char *
.text$mn:00000E2B                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000E2E                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00000E33
.text$mn:00000E33 loc_E33:                                ; CODE XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+19j
.text$mn:00000E33                                         ; TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+1Bj
.text$mn:00000E33                 mov     esp, ebp
.text$mn:00000E35                 pop     ebp
.text$mn:00000E36                 retn    8
.text$mn:00000E36 ?IterateChildren@TiXmlNodeA@@QBEPAV1@PBDPAV1@@Z endp
.text$mn:00000E36
.text$mn:00000E36 ; ---------------------------------------------------------------------------
.text$mn:00000E39                 db 0Fh dup(0CCh)
.text$mn:00000E48
.text$mn:00000E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E48
.text$mn:00000E48 ; Attributes: bp-based frame
.text$mn:00000E48
.text$mn:00000E48 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::InsertEndChild(TiXmlNodeA *this, const struct TiXmlNodeA *)
.text$mn:00000E48                 public ?InsertEndChild@TiXmlNodeA@@QAEPAV1@ABV1@@Z
.text$mn:00000E48 ?InsertEndChild@TiXmlNodeA@@QAEPAV1@ABV1@@Z proc near
.text$mn:00000E48
.text$mn:00000E48 var_8           = dword ptr -8
.text$mn:00000E48 var_4           = dword ptr -4
.text$mn:00000E48 arg_0           = dword ptr  8
.text$mn:00000E48
.text$mn:00000E48                 push    ebp
.text$mn:00000E49                 mov     ebp, esp
.text$mn:00000E4B                 sub     esp, 8
.text$mn:00000E4E                 mov     [ebp+var_8], ecx
.text$mn:00000E51                 mov     eax, [ebp+arg_0]
.text$mn:00000E54                 mov     edx, [eax]
.text$mn:00000E56                 mov     ecx, [ebp+arg_0]
.text$mn:00000E59                 mov     eax, [edx+14h]
.text$mn:00000E5C                 call    eax
.text$mn:00000E5E                 mov     [ebp+var_4], eax
.text$mn:00000E61                 cmp     [ebp+var_4], 0
.text$mn:00000E65                 jnz     short loc_E6B
.text$mn:00000E67                 xor     eax, eax
.text$mn:00000E69                 jmp     short loc_E77
.text$mn:00000E6B ; ---------------------------------------------------------------------------
.text$mn:00000E6B
.text$mn:00000E6B loc_E6B:                                ; CODE XREF: TiXmlNodeA::InsertEndChild(TiXmlNodeA const &)+1Dj
.text$mn:00000E6B                 mov     ecx, [ebp+var_4]
.text$mn:00000E6E                 push    ecx             ; struct TiXmlNodeA *
.text$mn:00000E6F                 mov     ecx, [ebp+var_8] ; this
.text$mn:00000E72                 call    ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z ; TiXmlNodeA::LinkEndChild(TiXmlNodeA *)
.text$mn:00000E77
.text$mn:00000E77 loc_E77:                                ; CODE XREF: TiXmlNodeA::InsertEndChild(TiXmlNodeA const &)+21j
.text$mn:00000E77                 mov     esp, ebp
.text$mn:00000E79                 pop     ebp
.text$mn:00000E7A                 retn    4
.text$mn:00000E7A ?InsertEndChild@TiXmlNodeA@@QAEPAV1@ABV1@@Z endp
.text$mn:00000E7A
.text$mn:00000E7A ; ---------------------------------------------------------------------------
.text$mn:00000E7D                 db 0Bh dup(0CCh)
.text$mn:00000E88
.text$mn:00000E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E88
.text$mn:00000E88 ; Attributes: bp-based frame
.text$mn:00000E88
.text$mn:00000E88 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::LinkEndChild(TiXmlNodeA *this, struct TiXmlNodeA *)
.text$mn:00000E88                 public ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z
.text$mn:00000E88 ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z proc near
.text$mn:00000E88                                         ; CODE XREF: TiXmlNodeA::InsertEndChild(TiXmlNodeA const &)+2Ap
.text$mn:00000E88                                         ; TiXmlElementA::Clone(void)+106p ...
.text$mn:00000E88
.text$mn:00000E88 var_4           = dword ptr -4
.text$mn:00000E88 arg_0           = dword ptr  8
.text$mn:00000E88
.text$mn:00000E88                 push    ebp
.text$mn:00000E89                 mov     ebp, esp
.text$mn:00000E8B                 push    ecx
.text$mn:00000E8C                 mov     [ebp+var_4], ecx
.text$mn:00000E8F                 mov     eax, [ebp+arg_0]
.text$mn:00000E92                 mov     ecx, [ebp+var_4]
.text$mn:00000E95                 mov     [eax+0Ch], ecx
.text$mn:00000E98                 mov     edx, [ebp+arg_0]
.text$mn:00000E9B                 mov     eax, [ebp+var_4]
.text$mn:00000E9E                 mov     ecx, [eax+18h]
.text$mn:00000EA1                 mov     [edx+38h], ecx
.text$mn:00000EA4                 mov     edx, [ebp+arg_0]
.text$mn:00000EA7                 mov     dword ptr [edx+3Ch], 0
.text$mn:00000EAE                 mov     eax, [ebp+var_4]
.text$mn:00000EB1                 cmp     dword ptr [eax+18h], 0
.text$mn:00000EB5                 jz      short loc_EC5
.text$mn:00000EB7                 mov     ecx, [ebp+var_4]
.text$mn:00000EBA                 mov     edx, [ecx+18h]
.text$mn:00000EBD                 mov     eax, [ebp+arg_0]
.text$mn:00000EC0                 mov     [edx+3Ch], eax
.text$mn:00000EC3                 jmp     short loc_ECE
.text$mn:00000EC5 ; ---------------------------------------------------------------------------
.text$mn:00000EC5
.text$mn:00000EC5 loc_EC5:                                ; CODE XREF: TiXmlNodeA::LinkEndChild(TiXmlNodeA *)+2Dj
.text$mn:00000EC5                 mov     ecx, [ebp+var_4]
.text$mn:00000EC8                 mov     edx, [ebp+arg_0]
.text$mn:00000ECB                 mov     [ecx+14h], edx
.text$mn:00000ECE
.text$mn:00000ECE loc_ECE:                                ; CODE XREF: TiXmlNodeA::LinkEndChild(TiXmlNodeA *)+3Bj
.text$mn:00000ECE                 mov     eax, [ebp+var_4]
.text$mn:00000ED1                 mov     ecx, [ebp+arg_0]
.text$mn:00000ED4                 mov     [eax+18h], ecx
.text$mn:00000ED7                 mov     eax, [ebp+arg_0]
.text$mn:00000EDA                 mov     esp, ebp
.text$mn:00000EDC                 pop     ebp
.text$mn:00000EDD                 retn    4
.text$mn:00000EDD ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z endp
.text$mn:00000EDD
.text$mn:00000EDD ; ---------------------------------------------------------------------------
.text$mn:00000EE0                 db 8 dup(0CCh)
.text$mn:00000EE8
.text$mn:00000EE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000EE8
.text$mn:00000EE8 ; Attributes: bp-based frame
.text$mn:00000EE8
.text$mn:00000EE8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *this, struct TiXmlNodeA *, const struct TiXmlNodeA *)
.text$mn:00000EE8                 public ?InsertBeforeChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:00000EE8 ?InsertBeforeChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:00000EE8
.text$mn:00000EE8 var_8           = dword ptr -8
.text$mn:00000EE8 var_4           = dword ptr -4
.text$mn:00000EE8 arg_0           = dword ptr  8
.text$mn:00000EE8 arg_4           = dword ptr  0Ch
.text$mn:00000EE8
.text$mn:00000EE8                 push    ebp
.text$mn:00000EE9                 mov     ebp, esp
.text$mn:00000EEB                 sub     esp, 8
.text$mn:00000EEE                 mov     [ebp+var_8], ecx
.text$mn:00000EF1                 cmp     [ebp+arg_0], 0
.text$mn:00000EF5                 jz      short loc_F02
.text$mn:00000EF7                 mov     eax, [ebp+arg_0]
.text$mn:00000EFA                 mov     ecx, [eax+0Ch]
.text$mn:00000EFD                 cmp     ecx, [ebp+var_8]
.text$mn:00000F00                 jz      short loc_F09
.text$mn:00000F02
.text$mn:00000F02 loc_F02:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+Dj
.text$mn:00000F02                 xor     eax, eax
.text$mn:00000F04                 jmp     loc_F8F
.text$mn:00000F09 ; ---------------------------------------------------------------------------
.text$mn:00000F09
.text$mn:00000F09 loc_F09:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+18j
.text$mn:00000F09                 mov     edx, [ebp+arg_4]
.text$mn:00000F0C                 mov     eax, [edx]
.text$mn:00000F0E                 mov     ecx, [ebp+arg_4]
.text$mn:00000F11                 mov     edx, [eax+14h]
.text$mn:00000F14                 call    edx
.text$mn:00000F16                 mov     [ebp+var_4], eax
.text$mn:00000F19                 cmp     [ebp+var_4], 0
.text$mn:00000F1D                 jnz     short loc_F23
.text$mn:00000F1F                 xor     eax, eax
.text$mn:00000F21                 jmp     short loc_F8F
.text$mn:00000F23 ; ---------------------------------------------------------------------------
.text$mn:00000F23
.text$mn:00000F23 loc_F23:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+35j
.text$mn:00000F23                 mov     eax, [ebp+var_4]
.text$mn:00000F26                 mov     ecx, [ebp+var_8]
.text$mn:00000F29                 mov     [eax+0Ch], ecx
.text$mn:00000F2C                 mov     edx, [ebp+var_4]
.text$mn:00000F2F                 mov     eax, [ebp+arg_0]
.text$mn:00000F32                 mov     [edx+3Ch], eax
.text$mn:00000F35                 mov     ecx, [ebp+var_4]
.text$mn:00000F38                 mov     edx, [ebp+arg_0]
.text$mn:00000F3B                 mov     eax, [edx+38h]
.text$mn:00000F3E                 mov     [ecx+38h], eax
.text$mn:00000F41                 mov     ecx, [ebp+arg_0]
.text$mn:00000F44                 cmp     dword ptr [ecx+38h], 0
.text$mn:00000F48                 jz      short loc_F58
.text$mn:00000F4A                 mov     edx, [ebp+arg_0]
.text$mn:00000F4D                 mov     eax, [edx+38h]
.text$mn:00000F50                 mov     ecx, [ebp+var_4]
.text$mn:00000F53                 mov     [eax+3Ch], ecx
.text$mn:00000F56                 jmp     short loc_F83
.text$mn:00000F58 ; ---------------------------------------------------------------------------
.text$mn:00000F58
.text$mn:00000F58 loc_F58:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+60j
.text$mn:00000F58                 mov     edx, [ebp+var_8]
.text$mn:00000F5B                 mov     eax, [edx+14h]
.text$mn:00000F5E                 cmp     eax, [ebp+arg_0]
.text$mn:00000F61                 jz      short loc_F7A
.text$mn:00000F63                 push    0D7h ; '+'      ; Line
.text$mn:00000F68                 push    offset $SG96160 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00000F6D                 push    offset $SG96161 ; "firstChild == beforeThis"
.text$mn:00000F72                 call    __wassert
.text$mn:00000F77 ; ---------------------------------------------------------------------------
.text$mn:00000F77                 add     esp, 0Ch
.text$mn:00000F7A
.text$mn:00000F7A loc_F7A:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+79j
.text$mn:00000F7A                 mov     edx, [ebp+var_8]
.text$mn:00000F7D                 mov     eax, [ebp+var_4]
.text$mn:00000F80                 mov     [edx+14h], eax
.text$mn:00000F83
.text$mn:00000F83 loc_F83:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+6Ej
.text$mn:00000F83                 mov     ecx, [ebp+arg_0]
.text$mn:00000F86                 mov     edx, [ebp+var_4]
.text$mn:00000F89                 mov     [ecx+38h], edx
.text$mn:00000F8C                 mov     eax, [ebp+var_4]
.text$mn:00000F8F
.text$mn:00000F8F loc_F8F:                                ; CODE XREF: TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+1Cj
.text$mn:00000F8F                                         ; TiXmlNodeA::InsertBeforeChild(TiXmlNodeA *,TiXmlNodeA const &)+39j
.text$mn:00000F8F                 mov     esp, ebp
.text$mn:00000F91                 pop     ebp
.text$mn:00000F92                 retn    8
.text$mn:00000F92 ?InsertBeforeChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00000F92
.text$mn:00000F92 ; ---------------------------------------------------------------------------
.text$mn:00000F95                 align 4
.text$mn:00000F98
.text$mn:00000F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F98
.text$mn:00000F98 ; Attributes: bp-based frame
.text$mn:00000F98
.text$mn:00000F98 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::InsertAfterChild(TiXmlNodeA *this, struct TiXmlNodeA *, const struct TiXmlNodeA *)
.text$mn:00000F98                 public ?InsertAfterChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:00000F98 ?InsertAfterChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:00000F98
.text$mn:00000F98 var_8           = dword ptr -8
.text$mn:00000F98 var_4           = dword ptr -4
.text$mn:00000F98 arg_0           = dword ptr  8
.text$mn:00000F98 arg_4           = dword ptr  0Ch
.text$mn:00000F98
.text$mn:00000F98                 push    ebp
.text$mn:00000F99                 mov     ebp, esp
.text$mn:00000F9B                 sub     esp, 8
.text$mn:00000F9E                 mov     [ebp+var_8], ecx
.text$mn:00000FA1                 cmp     [ebp+arg_0], 0
.text$mn:00000FA5                 jz      short loc_FB2
.text$mn:00000FA7                 mov     eax, [ebp+arg_0]
.text$mn:00000FAA                 mov     ecx, [eax+0Ch]
.text$mn:00000FAD                 cmp     ecx, [ebp+var_8]
.text$mn:00000FB0                 jz      short loc_FB9
.text$mn:00000FB2
.text$mn:00000FB2 loc_FB2:                                ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+Dj
.text$mn:00000FB2                 xor     eax, eax
.text$mn:00000FB4                 jmp     loc_103F
.text$mn:00000FB9 ; ---------------------------------------------------------------------------
.text$mn:00000FB9
.text$mn:00000FB9 loc_FB9:                                ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+18j
.text$mn:00000FB9                 mov     edx, [ebp+arg_4]
.text$mn:00000FBC                 mov     eax, [edx]
.text$mn:00000FBE                 mov     ecx, [ebp+arg_4]
.text$mn:00000FC1                 mov     edx, [eax+14h]
.text$mn:00000FC4                 call    edx
.text$mn:00000FC6                 mov     [ebp+var_4], eax
.text$mn:00000FC9                 cmp     [ebp+var_4], 0
.text$mn:00000FCD                 jnz     short loc_FD3
.text$mn:00000FCF                 xor     eax, eax
.text$mn:00000FD1                 jmp     short loc_103F
.text$mn:00000FD3 ; ---------------------------------------------------------------------------
.text$mn:00000FD3
.text$mn:00000FD3 loc_FD3:                                ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+35j
.text$mn:00000FD3                 mov     eax, [ebp+var_4]
.text$mn:00000FD6                 mov     ecx, [ebp+var_8]
.text$mn:00000FD9                 mov     [eax+0Ch], ecx
.text$mn:00000FDC                 mov     edx, [ebp+var_4]
.text$mn:00000FDF                 mov     eax, [ebp+arg_0]
.text$mn:00000FE2                 mov     [edx+38h], eax
.text$mn:00000FE5                 mov     ecx, [ebp+var_4]
.text$mn:00000FE8                 mov     edx, [ebp+arg_0]
.text$mn:00000FEB                 mov     eax, [edx+3Ch]
.text$mn:00000FEE                 mov     [ecx+3Ch], eax
.text$mn:00000FF1                 mov     ecx, [ebp+arg_0]
.text$mn:00000FF4                 cmp     dword ptr [ecx+3Ch], 0
.text$mn:00000FF8                 jz      short loc_1008
.text$mn:00000FFA                 mov     edx, [ebp+arg_0]
.text$mn:00000FFD                 mov     eax, [edx+3Ch]
.text$mn:00001000                 mov     ecx, [ebp+var_4]
.text$mn:00001003                 mov     [eax+38h], ecx
.text$mn:00001006                 jmp     short loc_1033
.text$mn:00001008 ; ---------------------------------------------------------------------------
.text$mn:00001008
.text$mn:00001008 loc_1008:                               ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+60j
.text$mn:00001008                 mov     edx, [ebp+var_8]
.text$mn:0000100B                 mov     eax, [edx+18h]
.text$mn:0000100E                 cmp     eax, [ebp+arg_0]
.text$mn:00001011                 jz      short loc_102A
.text$mn:00001013                 push    0F1h ; '±'      ; Line
.text$mn:00001018                 push    offset $SG96174 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:0000101D                 push    offset $SG96175 ; "lastChild == afterThis"
.text$mn:00001022                 call    __wassert
.text$mn:00001027 ; ---------------------------------------------------------------------------
.text$mn:00001027                 add     esp, 0Ch
.text$mn:0000102A
.text$mn:0000102A loc_102A:                               ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+79j
.text$mn:0000102A                 mov     edx, [ebp+var_8]
.text$mn:0000102D                 mov     eax, [ebp+var_4]
.text$mn:00001030                 mov     [edx+18h], eax
.text$mn:00001033
.text$mn:00001033 loc_1033:                               ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+6Ej
.text$mn:00001033                 mov     ecx, [ebp+arg_0]
.text$mn:00001036                 mov     edx, [ebp+var_4]
.text$mn:00001039                 mov     [ecx+3Ch], edx
.text$mn:0000103C                 mov     eax, [ebp+var_4]
.text$mn:0000103F
.text$mn:0000103F loc_103F:                               ; CODE XREF: TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+1Cj
.text$mn:0000103F                                         ; TiXmlNodeA::InsertAfterChild(TiXmlNodeA *,TiXmlNodeA const &)+39j
.text$mn:0000103F                 mov     esp, ebp
.text$mn:00001041                 pop     ebp
.text$mn:00001042                 retn    8
.text$mn:00001042 ?InsertAfterChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00001042
.text$mn:00001042 ; ---------------------------------------------------------------------------
.text$mn:00001045                 align 4
.text$mn:00001048
.text$mn:00001048 ; =============== S U B R O U T I N E =======================================
.text$mn:00001048
.text$mn:00001048 ; Attributes: bp-based frame
.text$mn:00001048
.text$mn:00001048 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::ReplaceChild(TiXmlNodeA *this, struct TiXmlNodeA *, const struct TiXmlNodeA *)
.text$mn:00001048                 public ?ReplaceChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z
.text$mn:00001048 ?ReplaceChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z proc near
.text$mn:00001048
.text$mn:00001048 var_14          = dword ptr -14h
.text$mn:00001048 var_10          = dword ptr -10h
.text$mn:00001048 var_C           = dword ptr -0Ch
.text$mn:00001048 var_8           = dword ptr -8
.text$mn:00001048 var_4           = dword ptr -4
.text$mn:00001048 arg_0           = dword ptr  8
.text$mn:00001048 arg_4           = dword ptr  0Ch
.text$mn:00001048
.text$mn:00001048                 push    ebp
.text$mn:00001049                 mov     ebp, esp
.text$mn:0000104B                 sub     esp, 14h
.text$mn:0000104E                 mov     [ebp+var_8], ecx
.text$mn:00001051                 mov     eax, [ebp+arg_0]
.text$mn:00001054                 mov     ecx, [eax+0Ch]
.text$mn:00001057                 cmp     ecx, [ebp+var_8]
.text$mn:0000105A                 jz      short loc_1063
.text$mn:0000105C                 xor     eax, eax
.text$mn:0000105E                 jmp     loc_1110
.text$mn:00001063 ; ---------------------------------------------------------------------------
.text$mn:00001063
.text$mn:00001063 loc_1063:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+12j
.text$mn:00001063                 mov     edx, [ebp+arg_4]
.text$mn:00001066                 mov     eax, [edx]
.text$mn:00001068                 mov     ecx, [ebp+arg_4]
.text$mn:0000106B                 mov     edx, [eax+14h]
.text$mn:0000106E                 call    edx
.text$mn:00001070                 mov     [ebp+var_4], eax
.text$mn:00001073                 cmp     [ebp+var_4], 0
.text$mn:00001077                 jnz     short loc_1080
.text$mn:00001079                 xor     eax, eax
.text$mn:0000107B                 jmp     loc_1110
.text$mn:00001080 ; ---------------------------------------------------------------------------
.text$mn:00001080
.text$mn:00001080 loc_1080:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+2Fj
.text$mn:00001080                 mov     eax, [ebp+var_4]
.text$mn:00001083                 mov     ecx, [ebp+arg_0]
.text$mn:00001086                 mov     edx, [ecx+3Ch]
.text$mn:00001089                 mov     [eax+3Ch], edx
.text$mn:0000108C                 mov     eax, [ebp+var_4]
.text$mn:0000108F                 mov     ecx, [ebp+arg_0]
.text$mn:00001092                 mov     edx, [ecx+38h]
.text$mn:00001095                 mov     [eax+38h], edx
.text$mn:00001098                 mov     eax, [ebp+arg_0]
.text$mn:0000109B                 cmp     dword ptr [eax+3Ch], 0
.text$mn:0000109F                 jz      short loc_10AF
.text$mn:000010A1                 mov     ecx, [ebp+arg_0]
.text$mn:000010A4                 mov     edx, [ecx+3Ch]
.text$mn:000010A7                 mov     eax, [ebp+var_4]
.text$mn:000010AA                 mov     [edx+38h], eax
.text$mn:000010AD                 jmp     short loc_10B8
.text$mn:000010AF ; ---------------------------------------------------------------------------
.text$mn:000010AF
.text$mn:000010AF loc_10AF:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+57j
.text$mn:000010AF                 mov     ecx, [ebp+var_8]
.text$mn:000010B2                 mov     edx, [ebp+var_4]
.text$mn:000010B5                 mov     [ecx+18h], edx
.text$mn:000010B8
.text$mn:000010B8 loc_10B8:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+65j
.text$mn:000010B8                 mov     eax, [ebp+arg_0]
.text$mn:000010BB                 cmp     dword ptr [eax+38h], 0
.text$mn:000010BF                 jz      short loc_10CF
.text$mn:000010C1                 mov     ecx, [ebp+arg_0]
.text$mn:000010C4                 mov     edx, [ecx+38h]
.text$mn:000010C7                 mov     eax, [ebp+var_4]
.text$mn:000010CA                 mov     [edx+3Ch], eax
.text$mn:000010CD                 jmp     short loc_10D8
.text$mn:000010CF ; ---------------------------------------------------------------------------
.text$mn:000010CF
.text$mn:000010CF loc_10CF:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+77j
.text$mn:000010CF                 mov     ecx, [ebp+var_8]
.text$mn:000010D2                 mov     edx, [ebp+var_4]
.text$mn:000010D5                 mov     [ecx+14h], edx
.text$mn:000010D8
.text$mn:000010D8 loc_10D8:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+85j
.text$mn:000010D8                 mov     eax, [ebp+arg_0]
.text$mn:000010DB                 mov     [ebp+var_10], eax
.text$mn:000010DE                 mov     ecx, [ebp+var_10]
.text$mn:000010E1                 mov     [ebp+var_C], ecx
.text$mn:000010E4                 cmp     [ebp+var_C], 0
.text$mn:000010E8                 jz      short loc_10FD
.text$mn:000010EA                 push    1
.text$mn:000010EC                 mov     edx, [ebp+var_C]
.text$mn:000010EF                 mov     eax, [edx]
.text$mn:000010F1                 mov     ecx, [ebp+var_C]
.text$mn:000010F4                 mov     edx, [eax]
.text$mn:000010F6                 call    edx
.text$mn:000010F8                 mov     [ebp+var_14], eax
.text$mn:000010FB                 jmp     short loc_1104
.text$mn:000010FD ; ---------------------------------------------------------------------------
.text$mn:000010FD
.text$mn:000010FD loc_10FD:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+A0j
.text$mn:000010FD                 mov     [ebp+var_14], 0
.text$mn:00001104
.text$mn:00001104 loc_1104:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+B3j
.text$mn:00001104                 mov     eax, [ebp+var_4]
.text$mn:00001107                 mov     ecx, [ebp+var_8]
.text$mn:0000110A                 mov     [eax+0Ch], ecx
.text$mn:0000110D                 mov     eax, [ebp+var_4]
.text$mn:00001110
.text$mn:00001110 loc_1110:                               ; CODE XREF: TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+16j
.text$mn:00001110                                         ; TiXmlNodeA::ReplaceChild(TiXmlNodeA *,TiXmlNodeA const &)+33j
.text$mn:00001110                 mov     esp, ebp
.text$mn:00001112                 pop     ebp
.text$mn:00001113                 retn    8
.text$mn:00001113 ?ReplaceChild@TiXmlNodeA@@QAEPAV1@PAV1@ABV1@@Z endp
.text$mn:00001113
.text$mn:00001113 ; ---------------------------------------------------------------------------
.text$mn:00001116                 align 4
.text$mn:00001118
.text$mn:00001118 ; =============== S U B R O U T I N E =======================================
.text$mn:00001118
.text$mn:00001118 ; Attributes: bp-based frame
.text$mn:00001118
.text$mn:00001118 ; bool __thiscall TiXmlNodeA::RemoveChild(TiXmlNodeA *this, struct TiXmlNodeA *)
.text$mn:00001118                 public ?RemoveChild@TiXmlNodeA@@QAE_NPAV1@@Z
.text$mn:00001118 ?RemoveChild@TiXmlNodeA@@QAE_NPAV1@@Z proc near
.text$mn:00001118
.text$mn:00001118 var_10          = dword ptr -10h
.text$mn:00001118 var_C           = dword ptr -0Ch
.text$mn:00001118 var_8           = dword ptr -8
.text$mn:00001118 var_4           = dword ptr -4
.text$mn:00001118 arg_0           = dword ptr  8
.text$mn:00001118
.text$mn:00001118                 push    ebp
.text$mn:00001119                 mov     ebp, esp
.text$mn:0000111B                 sub     esp, 10h
.text$mn:0000111E                 mov     [ebp+var_4], ecx
.text$mn:00001121                 mov     eax, [ebp+arg_0]
.text$mn:00001124                 mov     ecx, [eax+0Ch]
.text$mn:00001127                 cmp     ecx, [ebp+var_4]
.text$mn:0000112A                 jz      short loc_114B
.text$mn:0000112C                 xor     edx, edx
.text$mn:0000112E                 jnz     short loc_1147
.text$mn:00001130                 push    119h            ; Line
.text$mn:00001135                 push    offset $SG96196 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:0000113A                 push    offset $SG96197 ; Message
.text$mn:0000113F                 call    __wassert
.text$mn:00001144 ; ---------------------------------------------------------------------------
.text$mn:00001144                 add     esp, 0Ch
.text$mn:00001147
.text$mn:00001147 loc_1147:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+16j
.text$mn:00001147                 xor     al, al
.text$mn:00001149                 jmp     short loc_11C5
.text$mn:0000114B ; ---------------------------------------------------------------------------
.text$mn:0000114B
.text$mn:0000114B loc_114B:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+12j
.text$mn:0000114B                 mov     ecx, [ebp+arg_0]
.text$mn:0000114E                 cmp     dword ptr [ecx+3Ch], 0
.text$mn:00001152                 jz      short loc_1165
.text$mn:00001154                 mov     edx, [ebp+arg_0]
.text$mn:00001157                 mov     eax, [edx+3Ch]
.text$mn:0000115A                 mov     ecx, [ebp+arg_0]
.text$mn:0000115D                 mov     edx, [ecx+38h]
.text$mn:00001160                 mov     [eax+38h], edx
.text$mn:00001163                 jmp     short loc_1171
.text$mn:00001165 ; ---------------------------------------------------------------------------
.text$mn:00001165
.text$mn:00001165 loc_1165:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+3Aj
.text$mn:00001165                 mov     eax, [ebp+var_4]
.text$mn:00001168                 mov     ecx, [ebp+arg_0]
.text$mn:0000116B                 mov     edx, [ecx+38h]
.text$mn:0000116E                 mov     [eax+18h], edx
.text$mn:00001171
.text$mn:00001171 loc_1171:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+4Bj
.text$mn:00001171                 mov     eax, [ebp+arg_0]
.text$mn:00001174                 cmp     dword ptr [eax+38h], 0
.text$mn:00001178                 jz      short loc_118B
.text$mn:0000117A                 mov     ecx, [ebp+arg_0]
.text$mn:0000117D                 mov     edx, [ecx+38h]
.text$mn:00001180                 mov     eax, [ebp+arg_0]
.text$mn:00001183                 mov     ecx, [eax+3Ch]
.text$mn:00001186                 mov     [edx+3Ch], ecx
.text$mn:00001189                 jmp     short loc_1197
.text$mn:0000118B ; ---------------------------------------------------------------------------
.text$mn:0000118B
.text$mn:0000118B loc_118B:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+60j
.text$mn:0000118B                 mov     edx, [ebp+var_4]
.text$mn:0000118E                 mov     eax, [ebp+arg_0]
.text$mn:00001191                 mov     ecx, [eax+3Ch]
.text$mn:00001194                 mov     [edx+14h], ecx
.text$mn:00001197
.text$mn:00001197 loc_1197:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+71j
.text$mn:00001197                 mov     edx, [ebp+arg_0]
.text$mn:0000119A                 mov     [ebp+var_C], edx
.text$mn:0000119D                 mov     eax, [ebp+var_C]
.text$mn:000011A0                 mov     [ebp+var_8], eax
.text$mn:000011A3                 cmp     [ebp+var_8], 0
.text$mn:000011A7                 jz      short loc_11BC
.text$mn:000011A9                 push    1
.text$mn:000011AB                 mov     ecx, [ebp+var_8]
.text$mn:000011AE                 mov     edx, [ecx]
.text$mn:000011B0                 mov     ecx, [ebp+var_8]
.text$mn:000011B3                 mov     eax, [edx]
.text$mn:000011B5                 call    eax
.text$mn:000011B7                 mov     [ebp+var_10], eax
.text$mn:000011BA                 jmp     short loc_11C3
.text$mn:000011BC ; ---------------------------------------------------------------------------
.text$mn:000011BC
.text$mn:000011BC loc_11BC:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+8Fj
.text$mn:000011BC                 mov     [ebp+var_10], 0
.text$mn:000011C3
.text$mn:000011C3 loc_11C3:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+A2j
.text$mn:000011C3                 mov     al, 1
.text$mn:000011C5
.text$mn:000011C5 loc_11C5:                               ; CODE XREF: TiXmlNodeA::RemoveChild(TiXmlNodeA *)+31j
.text$mn:000011C5                 mov     esp, ebp
.text$mn:000011C7                 pop     ebp
.text$mn:000011C8                 retn    4
.text$mn:000011C8 ?RemoveChild@TiXmlNodeA@@QAE_NPAV1@@Z endp
.text$mn:000011C8
.text$mn:000011C8 ; ---------------------------------------------------------------------------
.text$mn:000011CB                 db 0Dh dup(0CCh)
.text$mn:000011D8
.text$mn:000011D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000011D8
.text$mn:000011D8 ; Attributes: bp-based frame
.text$mn:000011D8
.text$mn:000011D8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::PreviousSibling(TiXmlNodeA *this, const char *)
.text$mn:000011D8                 public ?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:000011D8 ?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$mn:000011D8
.text$mn:000011D8 var_64          = dword ptr -64h
.text$mn:000011D8 var_60          = dword ptr -60h
.text$mn:000011D8 var_5C          = dword ptr -5Ch
.text$mn:000011D8 var_58          = dword ptr -58h
.text$mn:000011D8 var_54          = dword ptr -54h
.text$mn:000011D8 var_50          = dword ptr -50h
.text$mn:000011D8 var_49          = byte ptr -49h
.text$mn:000011D8 var_48          = byte ptr -48h
.text$mn:000011D8 var_2C          = byte ptr -2Ch
.text$mn:000011D8 var_10          = dword ptr -10h
.text$mn:000011D8 var_C           = dword ptr -0Ch
.text$mn:000011D8 var_4           = dword ptr -4
.text$mn:000011D8 Str             = dword ptr  8
.text$mn:000011D8
.text$mn:000011D8                 push    ebp
.text$mn:000011D9                 mov     ebp, esp
.text$mn:000011DB                 push    0FFFFFFFFh
.text$mn:000011DD                 push    offset __ehhandler$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:000011E2                 mov     eax, large fs:0
.text$mn:000011E8                 push    eax
.text$mn:000011E9                 sub     esp, 58h
.text$mn:000011EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000011F1                 xor     eax, ebp
.text$mn:000011F3                 mov     [ebp+var_10], eax
.text$mn:000011F6                 push    eax
.text$mn:000011F7                 lea     eax, [ebp+var_C]
.text$mn:000011FA                 mov     large fs:0, eax
.text$mn:00001200                 mov     [ebp+var_64], ecx
.text$mn:00001203                 mov     eax, [ebp+var_64]
.text$mn:00001206                 mov     ecx, [eax+38h]
.text$mn:00001209                 mov     [ebp+var_50], ecx
.text$mn:0000120C                 jmp     short loc_1217
.text$mn:0000120E ; ---------------------------------------------------------------------------
.text$mn:0000120E
.text$mn:0000120E loc_120E:                               ; CODE XREF: TiXmlNodeA::PreviousSibling(char const *):loc_128Dj
.text$mn:0000120E                 mov     edx, [ebp+var_50]
.text$mn:00001211                 mov     eax, [edx+38h]
.text$mn:00001214                 mov     [ebp+var_50], eax
.text$mn:00001217
.text$mn:00001217 loc_1217:                               ; CODE XREF: TiXmlNodeA::PreviousSibling(char const *)+34j
.text$mn:00001217                 cmp     [ebp+var_50], 0
.text$mn:0000121B                 jz      short loc_1292
.text$mn:0000121D                 mov     ecx, [ebp+Str]
.text$mn:00001220                 push    ecx             ; Str
.text$mn:00001221                 lea     ecx, [ebp+var_2C]
.text$mn:00001224                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00001229                 mov     [ebp+var_5C], eax
.text$mn:0000122C                 mov     edx, [ebp+var_5C]
.text$mn:0000122F                 mov     [ebp+var_54], edx
.text$mn:00001232                 mov     [ebp+var_4], 0
.text$mn:00001239                 mov     eax, [ebp+var_54]
.text$mn:0000123C                 push    eax
.text$mn:0000123D                 lea     ecx, [ebp+var_48]
.text$mn:00001240                 push    ecx
.text$mn:00001241                 mov     ecx, [ebp+var_50]
.text$mn:00001244                 call    ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; TiXmlNodeA::SValue(void)
.text$mn:00001249                 mov     [ebp+var_60], eax
.text$mn:0000124C                 mov     edx, [ebp+var_60]
.text$mn:0000124F                 mov     [ebp+var_58], edx
.text$mn:00001252                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001256                 mov     eax, [ebp+var_58]
.text$mn:00001259                 push    eax
.text$mn:0000125A                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000125F                 add     esp, 8
.text$mn:00001262                 mov     [ebp+var_49], al
.text$mn:00001265                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001269                 lea     ecx, [ebp+var_48]
.text$mn:0000126C                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001271                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001278                 lea     ecx, [ebp+var_2C]
.text$mn:0000127B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001280                 movzx   ecx, [ebp+var_49]
.text$mn:00001284                 test    ecx, ecx
.text$mn:00001286                 jz      short loc_128D
.text$mn:00001288                 mov     eax, [ebp+var_50]
.text$mn:0000128B                 jmp     short loc_1294
.text$mn:0000128D ; ---------------------------------------------------------------------------
.text$mn:0000128D
.text$mn:0000128D loc_128D:                               ; CODE XREF: TiXmlNodeA::PreviousSibling(char const *)+AEj
.text$mn:0000128D                 jmp     loc_120E
.text$mn:00001292 ; ---------------------------------------------------------------------------
.text$mn:00001292
.text$mn:00001292 loc_1292:                               ; CODE XREF: TiXmlNodeA::PreviousSibling(char const *)+43j
.text$mn:00001292                 xor     eax, eax
.text$mn:00001294
.text$mn:00001294 loc_1294:                               ; CODE XREF: TiXmlNodeA::PreviousSibling(char const *)+B3j
.text$mn:00001294                 mov     ecx, [ebp+var_C]
.text$mn:00001297                 mov     large fs:0, ecx
.text$mn:0000129E                 pop     ecx
.text$mn:0000129F                 mov     ecx, [ebp+var_10]
.text$mn:000012A2                 xor     ecx, ebp
.text$mn:000012A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000012A9                 mov     esp, ebp
.text$mn:000012AB                 pop     ebp
.text$mn:000012AC                 retn    4
.text$mn:000012AC ?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$mn:000012AC
.text$mn:000012AC ; ---------------------------------------------------------------------------
.text$mn:000012AF                 db 9 dup(0CCh)
.text$mn:000012B8
.text$mn:000012B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000012B8
.text$mn:000012B8 ; Attributes: bp-based frame
.text$mn:000012B8
.text$mn:000012B8 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::NextSibling(TiXmlNodeA *this, const char *)
.text$mn:000012B8                 public ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:000012B8 ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$mn:000012B8                                         ; CODE XREF: TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+46p
.text$mn:000012B8                                         ; TiXmlNodeA::NextSiblingElement(char const *)+10p ...
.text$mn:000012B8
.text$mn:000012B8 var_64          = dword ptr -64h
.text$mn:000012B8 var_60          = dword ptr -60h
.text$mn:000012B8 var_5C          = dword ptr -5Ch
.text$mn:000012B8 var_58          = dword ptr -58h
.text$mn:000012B8 var_54          = dword ptr -54h
.text$mn:000012B8 var_50          = dword ptr -50h
.text$mn:000012B8 var_49          = byte ptr -49h
.text$mn:000012B8 var_48          = byte ptr -48h
.text$mn:000012B8 var_2C          = byte ptr -2Ch
.text$mn:000012B8 var_10          = dword ptr -10h
.text$mn:000012B8 var_C           = dword ptr -0Ch
.text$mn:000012B8 var_4           = dword ptr -4
.text$mn:000012B8 Str             = dword ptr  8
.text$mn:000012B8
.text$mn:000012B8                 push    ebp
.text$mn:000012B9                 mov     ebp, esp
.text$mn:000012BB                 push    0FFFFFFFFh
.text$mn:000012BD                 push    offset __ehhandler$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$mn:000012C2                 mov     eax, large fs:0
.text$mn:000012C8                 push    eax
.text$mn:000012C9                 sub     esp, 58h
.text$mn:000012CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000012D1                 xor     eax, ebp
.text$mn:000012D3                 mov     [ebp+var_10], eax
.text$mn:000012D6                 push    eax
.text$mn:000012D7                 lea     eax, [ebp+var_C]
.text$mn:000012DA                 mov     large fs:0, eax
.text$mn:000012E0                 mov     [ebp+var_64], ecx
.text$mn:000012E3                 mov     eax, [ebp+var_64]
.text$mn:000012E6                 mov     ecx, [eax+3Ch]
.text$mn:000012E9                 mov     [ebp+var_50], ecx
.text$mn:000012EC                 jmp     short loc_12F7
.text$mn:000012EE ; ---------------------------------------------------------------------------
.text$mn:000012EE
.text$mn:000012EE loc_12EE:                               ; CODE XREF: TiXmlNodeA::NextSibling(char const *):loc_136Dj
.text$mn:000012EE                 mov     edx, [ebp+var_50]
.text$mn:000012F1                 mov     eax, [edx+3Ch]
.text$mn:000012F4                 mov     [ebp+var_50], eax
.text$mn:000012F7
.text$mn:000012F7 loc_12F7:                               ; CODE XREF: TiXmlNodeA::NextSibling(char const *)+34j
.text$mn:000012F7                 cmp     [ebp+var_50], 0
.text$mn:000012FB                 jz      short loc_1372
.text$mn:000012FD                 mov     ecx, [ebp+Str]
.text$mn:00001300                 push    ecx             ; Str
.text$mn:00001301                 lea     ecx, [ebp+var_2C]
.text$mn:00001304                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00001309                 mov     [ebp+var_5C], eax
.text$mn:0000130C                 mov     edx, [ebp+var_5C]
.text$mn:0000130F                 mov     [ebp+var_54], edx
.text$mn:00001312                 mov     [ebp+var_4], 0
.text$mn:00001319                 mov     eax, [ebp+var_54]
.text$mn:0000131C                 push    eax
.text$mn:0000131D                 lea     ecx, [ebp+var_48]
.text$mn:00001320                 push    ecx
.text$mn:00001321                 mov     ecx, [ebp+var_50]
.text$mn:00001324                 call    ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; TiXmlNodeA::SValue(void)
.text$mn:00001329                 mov     [ebp+var_60], eax
.text$mn:0000132C                 mov     edx, [ebp+var_60]
.text$mn:0000132F                 mov     [ebp+var_58], edx
.text$mn:00001332                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001336                 mov     eax, [ebp+var_58]
.text$mn:00001339                 push    eax
.text$mn:0000133A                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000133F                 add     esp, 8
.text$mn:00001342                 mov     [ebp+var_49], al
.text$mn:00001345                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001349                 lea     ecx, [ebp+var_48]
.text$mn:0000134C                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001351                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001358                 lea     ecx, [ebp+var_2C]
.text$mn:0000135B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001360                 movzx   ecx, [ebp+var_49]
.text$mn:00001364                 test    ecx, ecx
.text$mn:00001366                 jz      short loc_136D
.text$mn:00001368                 mov     eax, [ebp+var_50]
.text$mn:0000136B                 jmp     short loc_1374
.text$mn:0000136D ; ---------------------------------------------------------------------------
.text$mn:0000136D
.text$mn:0000136D loc_136D:                               ; CODE XREF: TiXmlNodeA::NextSibling(char const *)+AEj
.text$mn:0000136D                 jmp     loc_12EE
.text$mn:00001372 ; ---------------------------------------------------------------------------
.text$mn:00001372
.text$mn:00001372 loc_1372:                               ; CODE XREF: TiXmlNodeA::NextSibling(char const *)+43j
.text$mn:00001372                 xor     eax, eax
.text$mn:00001374
.text$mn:00001374 loc_1374:                               ; CODE XREF: TiXmlNodeA::NextSibling(char const *)+B3j
.text$mn:00001374                 mov     ecx, [ebp+var_C]
.text$mn:00001377                 mov     large fs:0, ecx
.text$mn:0000137E                 pop     ecx
.text$mn:0000137F                 mov     ecx, [ebp+var_10]
.text$mn:00001382                 xor     ecx, ebp
.text$mn:00001384                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001389                 mov     esp, ebp
.text$mn:0000138B                 pop     ebp
.text$mn:0000138C                 retn    4
.text$mn:0000138C ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$mn:0000138C
.text$mn:0000138C ; ---------------------------------------------------------------------------
.text$mn:0000138F                 db 9 dup(0CCh)
.text$mn:00001398
.text$mn:00001398 ; =============== S U B R O U T I N E =======================================
.text$mn:00001398
.text$mn:00001398 ; Attributes: bp-based frame
.text$mn:00001398
.text$mn:00001398 ; struct TiXmlElementA *__thiscall TiXmlNodeA::NextSiblingElement(TiXmlNodeA *__hidden this)
.text$mn:00001398                 public ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ
.text$mn:00001398 ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ proc near
.text$mn:00001398                                         ; CODE XREF: TiXmlHandleA::ChildElement(int)+2Ap
.text$mn:00001398
.text$mn:00001398 var_8           = dword ptr -8
.text$mn:00001398 var_4           = dword ptr -4
.text$mn:00001398
.text$mn:00001398                 push    ebp
.text$mn:00001399                 mov     ebp, esp
.text$mn:0000139B                 sub     esp, 8
.text$mn:0000139E                 mov     [ebp+var_8], ecx
.text$mn:000013A1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000013A4                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:000013A9                 mov     [ebp+var_4], eax
.text$mn:000013AC                 jmp     short loc_13B9
.text$mn:000013AE ; ---------------------------------------------------------------------------
.text$mn:000013AE
.text$mn:000013AE loc_13AE:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(void):loc_13D5j
.text$mn:000013AE                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013B1                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:000013B6                 mov     [ebp+var_4], eax
.text$mn:000013B9
.text$mn:000013B9 loc_13B9:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(void)+14j
.text$mn:000013B9                 cmp     [ebp+var_4], 0
.text$mn:000013BD                 jz      short loc_13D7
.text$mn:000013BF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013C2                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000013C7                 test    eax, eax
.text$mn:000013C9                 jz      short loc_13D5
.text$mn:000013CB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013CE                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000013D3                 jmp     short loc_13D9
.text$mn:000013D5 ; ---------------------------------------------------------------------------
.text$mn:000013D5
.text$mn:000013D5 loc_13D5:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(void)+31j
.text$mn:000013D5                 jmp     short loc_13AE
.text$mn:000013D7 ; ---------------------------------------------------------------------------
.text$mn:000013D7
.text$mn:000013D7 loc_13D7:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(void)+25j
.text$mn:000013D7                 xor     eax, eax
.text$mn:000013D9
.text$mn:000013D9 loc_13D9:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(void)+3Bj
.text$mn:000013D9                 mov     esp, ebp
.text$mn:000013DB                 pop     ebp
.text$mn:000013DC                 retn
.text$mn:000013DC ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ endp
.text$mn:000013DC
.text$mn:000013DC ; ---------------------------------------------------------------------------
.text$mn:000013DD                 db 0Bh dup(0CCh)
.text$mn:000013E8
.text$mn:000013E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000013E8
.text$mn:000013E8 ; Attributes: bp-based frame
.text$mn:000013E8
.text$mn:000013E8 ; struct TiXmlElementA *__thiscall TiXmlNodeA::NextSiblingElement(TiXmlNodeA *this, const char *)
.text$mn:000013E8                 public ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z
.text$mn:000013E8 ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z proc near
.text$mn:000013E8                                         ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+32p
.text$mn:000013E8
.text$mn:000013E8 var_8           = dword ptr -8
.text$mn:000013E8 var_4           = dword ptr -4
.text$mn:000013E8 arg_0           = dword ptr  8
.text$mn:000013E8
.text$mn:000013E8                 push    ebp
.text$mn:000013E9                 mov     ebp, esp
.text$mn:000013EB                 sub     esp, 8
.text$mn:000013EE                 mov     [ebp+var_8], ecx
.text$mn:000013F1                 mov     eax, [ebp+arg_0]
.text$mn:000013F4                 push    eax             ; char *
.text$mn:000013F5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000013F8                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:000013FD                 mov     [ebp+var_4], eax
.text$mn:00001400                 jmp     short loc_1411
.text$mn:00001402 ; ---------------------------------------------------------------------------
.text$mn:00001402
.text$mn:00001402 loc_1402:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(char const *):loc_142Dj
.text$mn:00001402                 mov     ecx, [ebp+arg_0]
.text$mn:00001405                 push    ecx             ; char *
.text$mn:00001406                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001409                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:0000140E                 mov     [ebp+var_4], eax
.text$mn:00001411
.text$mn:00001411 loc_1411:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(char const *)+18j
.text$mn:00001411                 cmp     [ebp+var_4], 0
.text$mn:00001415                 jz      short loc_142F
.text$mn:00001417                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000141A                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000141F                 test    eax, eax
.text$mn:00001421                 jz      short loc_142D
.text$mn:00001423                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001426                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000142B                 jmp     short loc_1431
.text$mn:0000142D ; ---------------------------------------------------------------------------
.text$mn:0000142D
.text$mn:0000142D loc_142D:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(char const *)+39j
.text$mn:0000142D                 jmp     short loc_1402
.text$mn:0000142F ; ---------------------------------------------------------------------------
.text$mn:0000142F
.text$mn:0000142F loc_142F:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(char const *)+2Dj
.text$mn:0000142F                 xor     eax, eax
.text$mn:00001431
.text$mn:00001431 loc_1431:                               ; CODE XREF: TiXmlNodeA::NextSiblingElement(char const *)+43j
.text$mn:00001431                 mov     esp, ebp
.text$mn:00001433                 pop     ebp
.text$mn:00001434                 retn    4
.text$mn:00001434 ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z endp
.text$mn:00001434
.text$mn:00001434 ; ---------------------------------------------------------------------------
.text$mn:00001437                 align 4
.text$mn:00001438
.text$mn:00001438 ; =============== S U B R O U T I N E =======================================
.text$mn:00001438
.text$mn:00001438 ; Attributes: bp-based frame
.text$mn:00001438
.text$mn:00001438 ; struct TiXmlElementA *__thiscall TiXmlNodeA::FirstChildElement(TiXmlNodeA *__hidden this)
.text$mn:00001438                 public ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ
.text$mn:00001438 ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ proc near
.text$mn:00001438                                         ; CODE XREF: TiXmlHandleA::FirstChildElement(void)+16p
.text$mn:00001438                                         ; TiXmlHandleA::ChildElement(int)+16p
.text$mn:00001438
.text$mn:00001438 var_8           = dword ptr -8
.text$mn:00001438 var_4           = dword ptr -4
.text$mn:00001438
.text$mn:00001438                 push    ebp
.text$mn:00001439                 mov     ebp, esp
.text$mn:0000143B                 sub     esp, 8
.text$mn:0000143E                 mov     [ebp+var_8], ecx
.text$mn:00001441                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001444                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00001449                 mov     [ebp+var_4], eax
.text$mn:0000144C                 jmp     short loc_1459
.text$mn:0000144E ; ---------------------------------------------------------------------------
.text$mn:0000144E
.text$mn:0000144E loc_144E:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(void):loc_1475j
.text$mn:0000144E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001451                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00001456                 mov     [ebp+var_4], eax
.text$mn:00001459
.text$mn:00001459 loc_1459:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(void)+14j
.text$mn:00001459                 cmp     [ebp+var_4], 0
.text$mn:0000145D                 jz      short loc_1477
.text$mn:0000145F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001462                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00001467                 test    eax, eax
.text$mn:00001469                 jz      short loc_1475
.text$mn:0000146B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000146E                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00001473                 jmp     short loc_1479
.text$mn:00001475 ; ---------------------------------------------------------------------------
.text$mn:00001475
.text$mn:00001475 loc_1475:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(void)+31j
.text$mn:00001475                 jmp     short loc_144E
.text$mn:00001477 ; ---------------------------------------------------------------------------
.text$mn:00001477
.text$mn:00001477 loc_1477:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(void)+25j
.text$mn:00001477                 xor     eax, eax
.text$mn:00001479
.text$mn:00001479 loc_1479:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(void)+3Bj
.text$mn:00001479                 mov     esp, ebp
.text$mn:0000147B                 pop     ebp
.text$mn:0000147C                 retn
.text$mn:0000147C ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ endp
.text$mn:0000147C
.text$mn:0000147C ; ---------------------------------------------------------------------------
.text$mn:0000147D                 db 0Bh dup(0CCh)
.text$mn:00001488
.text$mn:00001488 ; =============== S U B R O U T I N E =======================================
.text$mn:00001488
.text$mn:00001488 ; Attributes: bp-based frame
.text$mn:00001488
.text$mn:00001488 ; struct TiXmlElementA *__thiscall TiXmlNodeA::FirstChildElement(TiXmlNodeA *this, const char *)
.text$mn:00001488                 public ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z
.text$mn:00001488 ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z proc near
.text$mn:00001488                                         ; CODE XREF: TiXmlHandleA::FirstChildElement(char const *)+1Ap
.text$mn:00001488                                         ; TiXmlHandleA::ChildElement(char const *,int)+1Ap
.text$mn:00001488
.text$mn:00001488 var_8           = dword ptr -8
.text$mn:00001488 var_4           = dword ptr -4
.text$mn:00001488 arg_0           = dword ptr  8
.text$mn:00001488
.text$mn:00001488                 push    ebp
.text$mn:00001489                 mov     ebp, esp
.text$mn:0000148B                 sub     esp, 8
.text$mn:0000148E                 mov     [ebp+var_8], ecx
.text$mn:00001491                 mov     eax, [ebp+arg_0]
.text$mn:00001494                 push    eax             ; char *
.text$mn:00001495                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001498                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000149D                 mov     [ebp+var_4], eax
.text$mn:000014A0                 jmp     short loc_14B1
.text$mn:000014A2 ; ---------------------------------------------------------------------------
.text$mn:000014A2
.text$mn:000014A2 loc_14A2:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(char const *):loc_14CDj
.text$mn:000014A2                 mov     ecx, [ebp+arg_0]
.text$mn:000014A5                 push    ecx             ; char *
.text$mn:000014A6                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014A9                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:000014AE                 mov     [ebp+var_4], eax
.text$mn:000014B1
.text$mn:000014B1 loc_14B1:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(char const *)+18j
.text$mn:000014B1                 cmp     [ebp+var_4], 0
.text$mn:000014B5                 jz      short loc_14CF
.text$mn:000014B7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014BA                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000014BF                 test    eax, eax
.text$mn:000014C1                 jz      short loc_14CD
.text$mn:000014C3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014C6                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000014CB                 jmp     short loc_14D1
.text$mn:000014CD ; ---------------------------------------------------------------------------
.text$mn:000014CD
.text$mn:000014CD loc_14CD:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(char const *)+39j
.text$mn:000014CD                 jmp     short loc_14A2
.text$mn:000014CF ; ---------------------------------------------------------------------------
.text$mn:000014CF
.text$mn:000014CF loc_14CF:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(char const *)+2Dj
.text$mn:000014CF                 xor     eax, eax
.text$mn:000014D1
.text$mn:000014D1 loc_14D1:                               ; CODE XREF: TiXmlNodeA::FirstChildElement(char const *)+43j
.text$mn:000014D1                 mov     esp, ebp
.text$mn:000014D3                 pop     ebp
.text$mn:000014D4                 retn    4
.text$mn:000014D4 ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z endp
.text$mn:000014D4
.text$mn:000014D4 ; ---------------------------------------------------------------------------
.text$mn:000014D7                 align 4
.text$mn:000014D8
.text$mn:000014D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000014D8
.text$mn:000014D8 ; Attributes: bp-based frame
.text$mn:000014D8
.text$mn:000014D8 ; struct TiXmlDocumentA *__thiscall TiXmlNodeA::GetDocument(TiXmlNodeA *__hidden this)
.text$mn:000014D8                 public ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ
.text$mn:000014D8 ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ proc near
.text$mn:000014D8                                         ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+B1p
.text$mn:000014D8
.text$mn:000014D8 var_8           = dword ptr -8
.text$mn:000014D8 var_4           = dword ptr -4
.text$mn:000014D8
.text$mn:000014D8                 push    ebp
.text$mn:000014D9                 mov     ebp, esp
.text$mn:000014DB                 sub     esp, 8
.text$mn:000014DE                 mov     [ebp+var_8], ecx
.text$mn:000014E1                 mov     eax, [ebp+var_8]
.text$mn:000014E4                 mov     [ebp+var_4], eax
.text$mn:000014E7                 jmp     short loc_14F2
.text$mn:000014E9 ; ---------------------------------------------------------------------------
.text$mn:000014E9
.text$mn:000014E9 loc_14E9:                               ; CODE XREF: TiXmlNodeA::GetDocument(void):loc_150Ej
.text$mn:000014E9                 mov     ecx, [ebp+var_4]
.text$mn:000014EC                 mov     edx, [ecx+0Ch]
.text$mn:000014EF                 mov     [ebp+var_4], edx
.text$mn:000014F2
.text$mn:000014F2 loc_14F2:                               ; CODE XREF: TiXmlNodeA::GetDocument(void)+Fj
.text$mn:000014F2                 cmp     [ebp+var_4], 0
.text$mn:000014F6                 jz      short loc_1510
.text$mn:000014F8                 mov     ecx, [ebp+var_4] ; this
.text$mn:000014FB                 call    ?ToDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ ; TiXmlNodeA::ToDocument(void)
.text$mn:00001500                 test    eax, eax
.text$mn:00001502                 jz      short loc_150E
.text$mn:00001504                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001507                 call    ?ToDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ ; TiXmlNodeA::ToDocument(void)
.text$mn:0000150C                 jmp     short loc_1512
.text$mn:0000150E ; ---------------------------------------------------------------------------
.text$mn:0000150E
.text$mn:0000150E loc_150E:                               ; CODE XREF: TiXmlNodeA::GetDocument(void)+2Aj
.text$mn:0000150E                 jmp     short loc_14E9
.text$mn:00001510 ; ---------------------------------------------------------------------------
.text$mn:00001510
.text$mn:00001510 loc_1510:                               ; CODE XREF: TiXmlNodeA::GetDocument(void)+1Ej
.text$mn:00001510                 xor     eax, eax
.text$mn:00001512
.text$mn:00001512 loc_1512:                               ; CODE XREF: TiXmlNodeA::GetDocument(void)+34j
.text$mn:00001512                 mov     esp, ebp
.text$mn:00001514                 pop     ebp
.text$mn:00001515                 retn
.text$mn:00001515 ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ endp
.text$mn:00001515
.text$mn:00001515 ; ---------------------------------------------------------------------------
.text$mn:00001516                 align 4
.text$mn:00001518
.text$mn:00001518 ; =============== S U B R O U T I N E =======================================
.text$mn:00001518
.text$mn:00001518 ; Attributes: bp-based frame
.text$mn:00001518
.text$mn:00001518 ; protected: __thiscall TiXmlNodeA::TiXmlNodeA(enum  TiXmlNodeA::NodeType)
.text$mn:00001518                 public ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z
.text$mn:00001518 ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z proc near
.text$mn:00001518                                         ; CODE XREF: TiXmlElementA::TiXmlElementA(char const *)+2Bp
.text$mn:00001518                                         ; TiXmlDeclarationA::TiXmlDeclarationA(char const *,char const *,char const *)+2Bp ...
.text$mn:00001518
.text$mn:00001518 var_10          = dword ptr -10h
.text$mn:00001518 var_C           = dword ptr -0Ch
.text$mn:00001518 var_4           = dword ptr -4
.text$mn:00001518 arg_0           = dword ptr  8
.text$mn:00001518
.text$mn:00001518                 push    ebp
.text$mn:00001519                 mov     ebp, esp
.text$mn:0000151B                 push    0FFFFFFFFh
.text$mn:0000151D                 push    offset __ehhandler$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z
.text$mn:00001522                 mov     eax, large fs:0
.text$mn:00001528                 push    eax
.text$mn:00001529                 push    ecx
.text$mn:0000152A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000152F                 xor     eax, ebp
.text$mn:00001531                 push    eax
.text$mn:00001532                 lea     eax, [ebp+var_C]
.text$mn:00001535                 mov     large fs:0, eax
.text$mn:0000153B                 mov     [ebp+var_10], ecx
.text$mn:0000153E                 mov     ecx, [ebp+var_10]
.text$mn:00001541                 call    ??0TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::TiXmlBaseA(void)
.text$mn:00001546                 mov     [ebp+var_4], 0
.text$mn:0000154D                 mov     eax, [ebp+var_10]
.text$mn:00001550                 mov     dword ptr [eax], offset ??_7TiXmlNodeA@@6B@ ; const TiXmlNodeA::`vftable'
.text$mn:00001556                 mov     ecx, [ebp+var_10]
.text$mn:00001559                 add     ecx, 1Ch
.text$mn:0000155C                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001561                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001565                 mov     ecx, [ebp+var_10]
.text$mn:00001568                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000156F                 mov     edx, [ebp+var_10]
.text$mn:00001572                 mov     eax, [ebp+arg_0]
.text$mn:00001575                 mov     [edx+10h], eax
.text$mn:00001578                 mov     ecx, [ebp+var_10]
.text$mn:0000157B                 mov     dword ptr [ecx+14h], 0
.text$mn:00001582                 mov     edx, [ebp+var_10]
.text$mn:00001585                 mov     dword ptr [edx+18h], 0
.text$mn:0000158C                 mov     eax, [ebp+var_10]
.text$mn:0000158F                 mov     dword ptr [eax+38h], 0
.text$mn:00001596                 mov     ecx, [ebp+var_10]
.text$mn:00001599                 mov     dword ptr [ecx+3Ch], 0
.text$mn:000015A0                 mov     edx, [ebp+var_10]
.text$mn:000015A3                 mov     dword ptr [edx+40h], 0
.text$mn:000015AA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000015B1                 mov     eax, [ebp+var_10]
.text$mn:000015B4                 mov     ecx, [ebp+var_C]
.text$mn:000015B7                 mov     large fs:0, ecx
.text$mn:000015BE                 pop     ecx
.text$mn:000015BF                 mov     esp, ebp
.text$mn:000015C1                 pop     ebp
.text$mn:000015C2                 retn    4
.text$mn:000015C2 ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z endp
.text$mn:000015C2
.text$mn:000015C2 ; ---------------------------------------------------------------------------
.text$mn:000015C5                 align 4
.text$mn:000015C8
.text$mn:000015C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015C8
.text$mn:000015C8 ; Attributes: bp-based frame
.text$mn:000015C8
.text$mn:000015C8 ; int __thiscall TiXmlAttributeA::IntValue(TiXmlAttributeA *__hidden this)
.text$mn:000015C8                 public ?IntValue@TiXmlAttributeA@@QBE?BHXZ
.text$mn:000015C8 ?IntValue@TiXmlAttributeA@@QBE?BHXZ proc near
.text$mn:000015C8
.text$mn:000015C8 var_4           = dword ptr -4
.text$mn:000015C8
.text$mn:000015C8                 push    ebp
.text$mn:000015C9                 mov     ebp, esp
.text$mn:000015CB                 push    ecx
.text$mn:000015CC                 mov     [ebp+var_4], ecx
.text$mn:000015CF                 mov     ecx, [ebp+var_4]
.text$mn:000015D2                 add     ecx, 2Ch ; ','
.text$mn:000015D5                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000015DA                 push    eax             ; Str
.text$mn:000015DB                 call    _atoi
.text$mn:000015E0                 add     esp, 4
.text$mn:000015E3                 mov     esp, ebp
.text$mn:000015E5                 pop     ebp
.text$mn:000015E6                 retn
.text$mn:000015E6 ?IntValue@TiXmlAttributeA@@QBE?BHXZ endp
.text$mn:000015E6
.text$mn:000015E6 ; ---------------------------------------------------------------------------
.text$mn:000015E7                 align 4
.text$mn:000015E8
.text$mn:000015E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015E8
.text$mn:000015E8 ; Attributes: bp-based frame
.text$mn:000015E8
.text$mn:000015E8 ; double __thiscall TiXmlAttributeA::DoubleValue(TiXmlAttributeA *__hidden this)
.text$mn:000015E8                 public ?DoubleValue@TiXmlAttributeA@@QBE?BNXZ
.text$mn:000015E8 ?DoubleValue@TiXmlAttributeA@@QBE?BNXZ proc near
.text$mn:000015E8
.text$mn:000015E8 var_4           = dword ptr -4
.text$mn:000015E8
.text$mn:000015E8                 push    ebp
.text$mn:000015E9                 mov     ebp, esp
.text$mn:000015EB                 push    ecx
.text$mn:000015EC                 mov     [ebp+var_4], ecx
.text$mn:000015EF                 mov     ecx, [ebp+var_4]
.text$mn:000015F2                 add     ecx, 2Ch ; ','
.text$mn:000015F5                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000015FA                 push    eax             ; String
.text$mn:000015FB                 call    _atof
.text$mn:00001600                 add     esp, 4
.text$mn:00001603                 mov     esp, ebp
.text$mn:00001605                 pop     ebp
.text$mn:00001606                 retn
.text$mn:00001606 ?DoubleValue@TiXmlAttributeA@@QBE?BNXZ endp
.text$mn:00001606
.text$mn:00001606 ; ---------------------------------------------------------------------------
.text$mn:00001607                 align 4
.text$mn:00001608
.text$mn:00001608 ; =============== S U B R O U T I N E =======================================
.text$mn:00001608
.text$mn:00001608 ; Attributes: bp-based frame
.text$mn:00001608
.text$mn:00001608 ; int __thiscall TiXmlAttributeA::QueryIntValue(TiXmlAttributeA *this, int *)
.text$mn:00001608                 public ?QueryIntValue@TiXmlAttributeA@@QBEHPAH@Z
.text$mn:00001608 ?QueryIntValue@TiXmlAttributeA@@QBEHPAH@Z proc near
.text$mn:00001608                                         ; CODE XREF: TiXmlElementA::QueryIntAttribute(char const *,int *)+2Fp
.text$mn:00001608
.text$mn:00001608 var_4           = dword ptr -4
.text$mn:00001608 arg_0           = dword ptr  8
.text$mn:00001608
.text$mn:00001608                 push    ebp
.text$mn:00001609                 mov     ebp, esp
.text$mn:0000160B                 push    ecx
.text$mn:0000160C                 mov     [ebp+var_4], ecx
.text$mn:0000160F                 mov     eax, [ebp+arg_0]
.text$mn:00001612                 push    eax
.text$mn:00001613                 push    offset $SG96841 ; Format
.text$mn:00001618                 mov     ecx, [ebp+var_4]
.text$mn:0000161B                 add     ecx, 2Ch ; ','
.text$mn:0000161E                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00001623                 push    eax             ; Src
.text$mn:00001624                 call    _sscanf
.text$mn:00001629                 add     esp, 0Ch
.text$mn:0000162C                 cmp     eax, 1
.text$mn:0000162F                 jnz     short loc_1635
.text$mn:00001631                 xor     eax, eax
.text$mn:00001633                 jmp     short loc_163A
.text$mn:00001635 ; ---------------------------------------------------------------------------
.text$mn:00001635
.text$mn:00001635 loc_1635:                               ; CODE XREF: TiXmlAttributeA::QueryIntValue(int *)+27j
.text$mn:00001635                 mov     eax, 2
.text$mn:0000163A
.text$mn:0000163A loc_163A:                               ; CODE XREF: TiXmlAttributeA::QueryIntValue(int *)+2Bj
.text$mn:0000163A                 mov     esp, ebp
.text$mn:0000163C                 pop     ebp
.text$mn:0000163D                 retn    4
.text$mn:0000163D ?QueryIntValue@TiXmlAttributeA@@QBEHPAH@Z endp
.text$mn:0000163D
.text$mn:0000163D ; ---------------------------------------------------------------------------
.text$mn:00001640                 db 8 dup(0CCh)
.text$mn:00001648
.text$mn:00001648 ; =============== S U B R O U T I N E =======================================
.text$mn:00001648
.text$mn:00001648 ; Attributes: bp-based frame
.text$mn:00001648
.text$mn:00001648 ; int __thiscall TiXmlAttributeA::QueryDoubleValue(TiXmlAttributeA *this, double *)
.text$mn:00001648                 public ?QueryDoubleValue@TiXmlAttributeA@@QBEHPAN@Z
.text$mn:00001648 ?QueryDoubleValue@TiXmlAttributeA@@QBEHPAN@Z proc near
.text$mn:00001648                                         ; CODE XREF: TiXmlElementA::QueryDoubleAttribute(char const *,double *)+2Fp
.text$mn:00001648
.text$mn:00001648 var_4           = dword ptr -4
.text$mn:00001648 arg_0           = dword ptr  8
.text$mn:00001648
.text$mn:00001648                 push    ebp
.text$mn:00001649                 mov     ebp, esp
.text$mn:0000164B                 push    ecx
.text$mn:0000164C                 mov     [ebp+var_4], ecx
.text$mn:0000164F                 mov     eax, [ebp+arg_0]
.text$mn:00001652                 push    eax
.text$mn:00001653                 push    offset $SG96847 ; "%lf"
.text$mn:00001658                 mov     ecx, [ebp+var_4]
.text$mn:0000165B                 add     ecx, 2Ch ; ','
.text$mn:0000165E                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00001663                 push    eax             ; Src
.text$mn:00001664                 call    _sscanf
.text$mn:00001669                 add     esp, 0Ch
.text$mn:0000166C                 cmp     eax, 1
.text$mn:0000166F                 jnz     short loc_1675
.text$mn:00001671                 xor     eax, eax
.text$mn:00001673                 jmp     short loc_167A
.text$mn:00001675 ; ---------------------------------------------------------------------------
.text$mn:00001675
.text$mn:00001675 loc_1675:                               ; CODE XREF: TiXmlAttributeA::QueryDoubleValue(double *)+27j
.text$mn:00001675                 mov     eax, 2
.text$mn:0000167A
.text$mn:0000167A loc_167A:                               ; CODE XREF: TiXmlAttributeA::QueryDoubleValue(double *)+2Bj
.text$mn:0000167A                 mov     esp, ebp
.text$mn:0000167C                 pop     ebp
.text$mn:0000167D                 retn    4
.text$mn:0000167D ?QueryDoubleValue@TiXmlAttributeA@@QBEHPAN@Z endp
.text$mn:0000167D
.text$mn:0000167D ; ---------------------------------------------------------------------------
.text$mn:00001680                 db 8 dup(0CCh)
.text$mn:00001688
.text$mn:00001688 ; =============== S U B R O U T I N E =======================================
.text$mn:00001688
.text$mn:00001688 ; Attributes: bp-based frame
.text$mn:00001688
.text$mn:00001688 ; void __thiscall TiXmlAttributeA::SetIntValue(TiXmlAttributeA *this, int)
.text$mn:00001688                 public ?SetIntValue@TiXmlAttributeA@@QAEXH@Z
.text$mn:00001688 ?SetIntValue@TiXmlAttributeA@@QAEXH@Z proc near
.text$mn:00001688
.text$mn:00001688 var_48          = dword ptr -48h
.text$mn:00001688 Dest            = byte ptr -44h
.text$mn:00001688 var_4           = dword ptr -4
.text$mn:00001688 arg_0           = dword ptr  8
.text$mn:00001688
.text$mn:00001688                 push    ebp
.text$mn:00001689                 mov     ebp, esp
.text$mn:0000168B                 sub     esp, 48h
.text$mn:0000168E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001693                 xor     eax, ebp
.text$mn:00001695                 mov     [ebp+var_4], eax
.text$mn:00001698                 mov     [ebp+var_48], ecx
.text$mn:0000169B                 mov     eax, [ebp+arg_0]
.text$mn:0000169E                 push    eax
.text$mn:0000169F                 push    offset $SG96853 ; Format
.text$mn:000016A4                 lea     ecx, [ebp+Dest]
.text$mn:000016A7                 push    ecx             ; Dest
.text$mn:000016A8                 call    _sprintf
.text$mn:000016AD                 add     esp, 0Ch
.text$mn:000016B0                 lea     edx, [ebp+Dest]
.text$mn:000016B3                 push    edx             ; char *
.text$mn:000016B4                 mov     ecx, [ebp+var_48] ; this
.text$mn:000016B7                 call    ?SetValue@TiXmlAttributeA@@QAEXPBD@Z ; TiXmlAttributeA::SetValue(char const *)
.text$mn:000016BC                 mov     ecx, [ebp+var_4]
.text$mn:000016BF                 xor     ecx, ebp
.text$mn:000016C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000016C6                 mov     esp, ebp
.text$mn:000016C8                 pop     ebp
.text$mn:000016C9                 retn    4
.text$mn:000016C9 ?SetIntValue@TiXmlAttributeA@@QAEXH@Z endp
.text$mn:000016C9
.text$mn:000016C9 ; ---------------------------------------------------------------------------
.text$mn:000016CC                 db 0Ch dup(0CCh)
.text$mn:000016D8
.text$mn:000016D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000016D8
.text$mn:000016D8 ; Attributes: bp-based frame
.text$mn:000016D8
.text$mn:000016D8 ; void __thiscall TiXmlAttributeA::SetDoubleValue(TiXmlAttributeA *this, double)
.text$mn:000016D8                 public ?SetDoubleValue@TiXmlAttributeA@@QAEXN@Z
.text$mn:000016D8 ?SetDoubleValue@TiXmlAttributeA@@QAEXN@Z proc near
.text$mn:000016D8
.text$mn:000016D8 var_50          = qword ptr -50h
.text$mn:000016D8 var_48          = dword ptr -48h
.text$mn:000016D8 Dest            = byte ptr -44h
.text$mn:000016D8 var_4           = dword ptr -4
.text$mn:000016D8 arg_0           = qword ptr  8
.text$mn:000016D8
.text$mn:000016D8                 push    ebp
.text$mn:000016D9                 mov     ebp, esp
.text$mn:000016DB                 sub     esp, 48h
.text$mn:000016DE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000016E3                 xor     eax, ebp
.text$mn:000016E5                 mov     [ebp+var_4], eax
.text$mn:000016E8                 mov     [ebp+var_48], ecx
.text$mn:000016EB                 sub     esp, 8
.text$mn:000016EE                 movsd   xmm0, [ebp+arg_0]
.text$mn:000016F3                 movsd   [esp+50h+var_50], xmm0
.text$mn:000016F8                 push    offset $SG96859 ; "%lf"
.text$mn:000016FD                 lea     eax, [ebp+Dest]
.text$mn:00001700                 push    eax             ; Dest
.text$mn:00001701                 call    _sprintf
.text$mn:00001706                 add     esp, 10h
.text$mn:00001709                 lea     ecx, [ebp+Dest]
.text$mn:0000170C                 push    ecx             ; char *
.text$mn:0000170D                 mov     ecx, [ebp+var_48] ; this
.text$mn:00001710                 call    ?SetValue@TiXmlAttributeA@@QAEXPBD@Z ; TiXmlAttributeA::SetValue(char const *)
.text$mn:00001715                 mov     ecx, [ebp+var_4]
.text$mn:00001718                 xor     ecx, ebp
.text$mn:0000171A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000171F                 mov     esp, ebp
.text$mn:00001721                 pop     ebp
.text$mn:00001722                 retn    8
.text$mn:00001722 ?SetDoubleValue@TiXmlAttributeA@@QAEXN@Z endp
.text$mn:00001722
.text$mn:00001722 ; ---------------------------------------------------------------------------
.text$mn:00001725                 align 4
.text$mn:00001728
.text$mn:00001728 ; =============== S U B R O U T I N E =======================================
.text$mn:00001728
.text$mn:00001728 ; Attributes: bp-based frame
.text$mn:00001728
.text$mn:00001728 ; struct TiXmlAttributeA *__thiscall TiXmlAttributeA::Next(TiXmlAttributeA *__hidden this)
.text$mn:00001728                 public ?Next@TiXmlAttributeA@@QBEPAV1@XZ
.text$mn:00001728 ?Next@TiXmlAttributeA@@QBEPAV1@XZ proc near
.text$mn:00001728                                         ; CODE XREF: TiXmlElementA::Clone(void)+A8p
.text$mn:00001728                                         ; TiXmlElementA::Print(_iobuf *,int)+66p ...
.text$mn:00001728
.text$mn:00001728 var_4           = dword ptr -4
.text$mn:00001728
.text$mn:00001728                 push    ebp
.text$mn:00001729                 mov     ebp, esp
.text$mn:0000172B                 push    ecx
.text$mn:0000172C                 mov     [ebp+var_4], ecx
.text$mn:0000172F                 mov     eax, [ebp+var_4]
.text$mn:00001732                 mov     ecx, [eax+4Ch]
.text$mn:00001735                 add     ecx, 2Ch ; ','
.text$mn:00001738                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:0000173D                 movzx   ecx, al
.text$mn:00001740                 test    ecx, ecx
.text$mn:00001742                 jz      short loc_175D
.text$mn:00001744                 mov     edx, [ebp+var_4]
.text$mn:00001747                 mov     ecx, [edx+4Ch]
.text$mn:0000174A                 add     ecx, 10h
.text$mn:0000174D                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00001752                 movzx   eax, al
.text$mn:00001755                 test    eax, eax
.text$mn:00001757                 jz      short loc_175D
.text$mn:00001759                 xor     eax, eax
.text$mn:0000175B                 jmp     short loc_1763
.text$mn:0000175D ; ---------------------------------------------------------------------------
.text$mn:0000175D
.text$mn:0000175D loc_175D:                               ; CODE XREF: TiXmlAttributeA::Next(void)+1Aj
.text$mn:0000175D                                         ; TiXmlAttributeA::Next(void)+2Fj
.text$mn:0000175D                 mov     ecx, [ebp+var_4]
.text$mn:00001760                 mov     eax, [ecx+4Ch]
.text$mn:00001763
.text$mn:00001763 loc_1763:                               ; CODE XREF: TiXmlAttributeA::Next(void)+33j
.text$mn:00001763                 mov     esp, ebp
.text$mn:00001765                 pop     ebp
.text$mn:00001766                 retn
.text$mn:00001766 ?Next@TiXmlAttributeA@@QBEPAV1@XZ endp
.text$mn:00001766
.text$mn:00001766 ; ---------------------------------------------------------------------------
.text$mn:00001767                 align 4
.text$mn:00001768
.text$mn:00001768 ; =============== S U B R O U T I N E =======================================
.text$mn:00001768
.text$mn:00001768 ; Attributes: bp-based frame
.text$mn:00001768
.text$mn:00001768 ; struct TiXmlAttributeA *__thiscall TiXmlAttributeA::Previous(TiXmlAttributeA *__hidden this)
.text$mn:00001768                 public ?Previous@TiXmlAttributeA@@QBEPAV1@XZ
.text$mn:00001768 ?Previous@TiXmlAttributeA@@QBEPAV1@XZ proc near
.text$mn:00001768
.text$mn:00001768 var_4           = dword ptr -4
.text$mn:00001768
.text$mn:00001768                 push    ebp
.text$mn:00001769                 mov     ebp, esp
.text$mn:0000176B                 push    ecx
.text$mn:0000176C                 mov     [ebp+var_4], ecx
.text$mn:0000176F                 mov     eax, [ebp+var_4]
.text$mn:00001772                 mov     ecx, [eax+48h]
.text$mn:00001775                 add     ecx, 2Ch ; ','
.text$mn:00001778                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:0000177D                 movzx   ecx, al
.text$mn:00001780                 test    ecx, ecx
.text$mn:00001782                 jz      short loc_179D
.text$mn:00001784                 mov     edx, [ebp+var_4]
.text$mn:00001787                 mov     ecx, [edx+48h]
.text$mn:0000178A                 add     ecx, 10h
.text$mn:0000178D                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00001792                 movzx   eax, al
.text$mn:00001795                 test    eax, eax
.text$mn:00001797                 jz      short loc_179D
.text$mn:00001799                 xor     eax, eax
.text$mn:0000179B                 jmp     short loc_17A3
.text$mn:0000179D ; ---------------------------------------------------------------------------
.text$mn:0000179D
.text$mn:0000179D loc_179D:                               ; CODE XREF: TiXmlAttributeA::Previous(void)+1Aj
.text$mn:0000179D                                         ; TiXmlAttributeA::Previous(void)+2Fj
.text$mn:0000179D                 mov     ecx, [ebp+var_4]
.text$mn:000017A0                 mov     eax, [ecx+48h]
.text$mn:000017A3
.text$mn:000017A3 loc_17A3:                               ; CODE XREF: TiXmlAttributeA::Previous(void)+33j
.text$mn:000017A3                 mov     esp, ebp
.text$mn:000017A5                 pop     ebp
.text$mn:000017A6                 retn
.text$mn:000017A6 ?Previous@TiXmlAttributeA@@QBEPAV1@XZ endp
.text$mn:000017A6
.text$mn:000017A6 ; ---------------------------------------------------------------------------
.text$mn:000017A7                 align 4
.text$mn:000017A8
.text$mn:000017A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000017A8
.text$mn:000017A8 ; Attributes: bp-based frame
.text$mn:000017A8
.text$mn:000017A8 ; void __thiscall TiXmlAttributeA::Print(TiXmlAttributeA *this, FILE *File, int)
.text$mn:000017A8                 public ?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z
.text$mn:000017A8 ?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000017A8                                         ; DATA XREF: .rdata:0000CD58o
.text$mn:000017A8
.text$mn:000017A8 var_84          = dword ptr -84h
.text$mn:000017A8 var_80          = byte ptr -80h
.text$mn:000017A8 var_64          = byte ptr -64h
.text$mn:000017A8 var_48          = byte ptr -48h
.text$mn:000017A8 var_2C          = byte ptr -2Ch
.text$mn:000017A8 var_10          = dword ptr -10h
.text$mn:000017A8 var_C           = dword ptr -0Ch
.text$mn:000017A8 var_4           = dword ptr -4
.text$mn:000017A8 File            = dword ptr  8
.text$mn:000017A8
.text$mn:000017A8                 push    ebp
.text$mn:000017A9                 mov     ebp, esp
.text$mn:000017AB                 push    0FFFFFFFFh
.text$mn:000017AD                 push    offset __ehhandler$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z
.text$mn:000017B2                 mov     eax, large fs:0
.text$mn:000017B8                 push    eax
.text$mn:000017B9                 sub     esp, 78h
.text$mn:000017BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000017C1                 xor     eax, ebp
.text$mn:000017C3                 mov     [ebp+var_10], eax
.text$mn:000017C6                 push    eax
.text$mn:000017C7                 lea     eax, [ebp+var_C]
.text$mn:000017CA                 mov     large fs:0, eax
.text$mn:000017D0                 mov     [ebp+var_84], ecx
.text$mn:000017D6                 lea     ecx, [ebp+var_2C]
.text$mn:000017D9                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000017DE                 mov     [ebp+var_4], 0
.text$mn:000017E5                 lea     ecx, [ebp+var_48]
.text$mn:000017E8                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000017ED                 mov     byte ptr [ebp+var_4], 1
.text$mn:000017F1                 mov     ecx, [ebp+var_84] ; this
.text$mn:000017F7                 call    ?Name@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Name(void)
.text$mn:000017FC                 push    eax             ; Str
.text$mn:000017FD                 lea     ecx, [ebp+var_80]
.text$mn:00001800                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00001805                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001809                 lea     eax, [ebp+var_2C]
.text$mn:0000180C                 push    eax
.text$mn:0000180D                 lea     ecx, [ebp+var_80]
.text$mn:00001810                 push    ecx
.text$mn:00001811                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.text$mn:00001816                 add     esp, 8
.text$mn:00001819                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000181D                 lea     ecx, [ebp+var_80]
.text$mn:00001820                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001825                 mov     ecx, [ebp+var_84] ; this
.text$mn:0000182B                 call    ?Value@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Value(void)
.text$mn:00001830                 push    eax             ; Str
.text$mn:00001831                 lea     ecx, [ebp+var_64]
.text$mn:00001834                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00001839                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000183D                 lea     edx, [ebp+var_48]
.text$mn:00001840                 push    edx
.text$mn:00001841                 lea     eax, [ebp+var_64]
.text$mn:00001844                 push    eax
.text$mn:00001845                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.text$mn:0000184A                 add     esp, 8
.text$mn:0000184D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001851                 lea     ecx, [ebp+var_64]
.text$mn:00001854                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001859                 push    0               ; int
.text$mn:0000185B                 push    22h ; '"'       ; Buf2
.text$mn:0000185D                 mov     ecx, [ebp+var_84]
.text$mn:00001863                 add     ecx, 2Ch ; ','
.text$mn:00001866                 call    ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char,uint)
.text$mn:0000186B                 cmp     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00001871                 jnz     short loc_1898
.text$mn:00001873                 lea     ecx, [ebp+var_48]
.text$mn:00001876                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000187B                 push    eax
.text$mn:0000187C                 lea     ecx, [ebp+var_2C]
.text$mn:0000187F                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00001884                 push    eax
.text$mn:00001885                 push    offset $SG96773 ; "%s=\"%s\""
.text$mn:0000188A                 mov     ecx, [ebp+File]
.text$mn:0000188D                 push    ecx             ; File
.text$mn:0000188E                 call    _fprintf
.text$mn:00001893                 add     esp, 10h
.text$mn:00001896                 jmp     short loc_18BB
.text$mn:00001898 ; ---------------------------------------------------------------------------
.text$mn:00001898
.text$mn:00001898 loc_1898:                               ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+C9j
.text$mn:00001898                 lea     ecx, [ebp+var_48]
.text$mn:0000189B                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000018A0                 push    eax
.text$mn:000018A1                 lea     ecx, [ebp+var_2C]
.text$mn:000018A4                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000018A9                 push    eax
.text$mn:000018AA                 push    offset $SG96775 ; "%s='%s'"
.text$mn:000018AF                 mov     edx, [ebp+File]
.text$mn:000018B2                 push    edx             ; File
.text$mn:000018B3                 call    _fprintf
.text$mn:000018B8                 add     esp, 10h
.text$mn:000018BB
.text$mn:000018BB loc_18BB:                               ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+EEj
.text$mn:000018BB                 mov     byte ptr [ebp+var_4], 0
.text$mn:000018BF                 lea     ecx, [ebp+var_48]
.text$mn:000018C2                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000018C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000018CE                 lea     ecx, [ebp+var_2C]
.text$mn:000018D1                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000018D6                 mov     ecx, [ebp+var_C]
.text$mn:000018D9                 mov     large fs:0, ecx
.text$mn:000018E0                 pop     ecx
.text$mn:000018E1                 mov     ecx, [ebp+var_10]
.text$mn:000018E4                 xor     ecx, ebp
.text$mn:000018E6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000018EB                 mov     esp, ebp
.text$mn:000018ED                 pop     ebp
.text$mn:000018EE                 retn    8
.text$mn:000018EE ?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:000018EE
.text$mn:000018EE ; ---------------------------------------------------------------------------
.text$mn:000018F1                 align 8
.text$mn:000018F8
.text$mn:000018F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000018F8
.text$mn:000018F8 ; Attributes: bp-based frame
.text$mn:000018F8
.text$mn:000018F8 ; public: virtual void __thiscall TiXmlAttributeA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:000018F8                 public ?StreamOut@TiXmlAttributeA@@UBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:000018F8 ?StreamOut@TiXmlAttributeA@@UBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:000018F8                                         ; DATA XREF: .rdata:0000CD5Co
.text$mn:000018F8
.text$mn:000018F8 var_4           = dword ptr -4
.text$mn:000018F8 arg_0           = dword ptr  8
.text$mn:000018F8
.text$mn:000018F8                 push    ebp
.text$mn:000018F9                 mov     ebp, esp
.text$mn:000018FB                 push    ecx
.text$mn:000018FC                 mov     [ebp+var_4], ecx
.text$mn:000018FF                 push    0               ; int
.text$mn:00001901                 push    22h ; '"'       ; Buf2
.text$mn:00001903                 mov     ecx, [ebp+var_4]
.text$mn:00001906                 add     ecx, 2Ch ; ','
.text$mn:00001909                 call    ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char,uint)
.text$mn:0000190E                 cmp     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00001914                 jz      short loc_196E
.text$mn:00001916                 mov     eax, [ebp+arg_0]
.text$mn:00001919                 push    eax
.text$mn:0000191A                 mov     ecx, [ebp+var_4]
.text$mn:0000191D                 add     ecx, 10h
.text$mn:00001920                 push    ecx
.text$mn:00001921                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:00001926                 add     esp, 8
.text$mn:00001929                 push    offset $SG96797 ; Str
.text$mn:0000192E                 push    offset $SG96798 ; Str
.text$mn:00001933                 mov     edx, [ebp+arg_0]
.text$mn:00001936                 push    edx             ; int
.text$mn:00001937                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000193C                 add     esp, 8
.text$mn:0000193F                 push    eax             ; int
.text$mn:00001940                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00001945                 add     esp, 8
.text$mn:00001948                 mov     eax, [ebp+arg_0]
.text$mn:0000194B                 push    eax
.text$mn:0000194C                 mov     ecx, [ebp+var_4]
.text$mn:0000194F                 add     ecx, 2Ch ; ','
.text$mn:00001952                 push    ecx
.text$mn:00001953                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:00001958                 add     esp, 8
.text$mn:0000195B                 push    offset $SG96807 ; Str
.text$mn:00001960                 mov     edx, [ebp+arg_0]
.text$mn:00001963                 push    edx             ; int
.text$mn:00001964                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00001969                 add     esp, 8
.text$mn:0000196C                 jmp     short loc_19C4
.text$mn:0000196E ; ---------------------------------------------------------------------------
.text$mn:0000196E
.text$mn:0000196E loc_196E:                               ; CODE XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+1Cj
.text$mn:0000196E                 mov     eax, [ebp+arg_0]
.text$mn:00001971                 push    eax
.text$mn:00001972                 mov     ecx, [ebp+var_4]
.text$mn:00001975                 add     ecx, 10h
.text$mn:00001978                 push    ecx
.text$mn:00001979                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:0000197E                 add     esp, 8
.text$mn:00001981                 push    offset $SG96825 ; Str
.text$mn:00001986                 push    offset $SG96826 ; Str
.text$mn:0000198B                 mov     edx, [ebp+arg_0]
.text$mn:0000198E                 push    edx             ; int
.text$mn:0000198F                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00001994                 add     esp, 8
.text$mn:00001997                 push    eax             ; int
.text$mn:00001998                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000199D                 add     esp, 8
.text$mn:000019A0                 mov     eax, [ebp+arg_0]
.text$mn:000019A3                 push    eax
.text$mn:000019A4                 mov     ecx, [ebp+var_4]
.text$mn:000019A7                 add     ecx, 2Ch ; ','
.text$mn:000019AA                 push    ecx
.text$mn:000019AB                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:000019B0                 add     esp, 8
.text$mn:000019B3                 push    offset $SG96835 ; Str
.text$mn:000019B8                 mov     edx, [ebp+arg_0]
.text$mn:000019BB                 push    edx             ; int
.text$mn:000019BC                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000019C1                 add     esp, 8
.text$mn:000019C4
.text$mn:000019C4 loc_19C4:                               ; CODE XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+74j
.text$mn:000019C4                 mov     esp, ebp
.text$mn:000019C6                 pop     ebp
.text$mn:000019C7                 retn    4
.text$mn:000019C7 ?StreamOut@TiXmlAttributeA@@UBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:000019C7
.text$mn:000019C7 ; ---------------------------------------------------------------------------
.text$mn:000019CA                 db 0Eh dup(0CCh)
.text$mn:000019D8
.text$mn:000019D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000019D8
.text$mn:000019D8 ; Attributes: bp-based frame
.text$mn:000019D8
.text$mn:000019D8 ; public: __thiscall TiXmlAttributeSetA::TiXmlAttributeSetA(void)
.text$mn:000019D8                 public ??0TiXmlAttributeSetA@@QAE@XZ
.text$mn:000019D8 ??0TiXmlAttributeSetA@@QAE@XZ proc near ; CODE XREF: TiXmlElementA::TiXmlElementA(char const *)+46p
.text$mn:000019D8
.text$mn:000019D8 var_10          = dword ptr -10h
.text$mn:000019D8 var_C           = dword ptr -0Ch
.text$mn:000019D8 var_4           = dword ptr -4
.text$mn:000019D8
.text$mn:000019D8                 push    ebp
.text$mn:000019D9                 mov     ebp, esp
.text$mn:000019DB                 push    0FFFFFFFFh
.text$mn:000019DD                 push    offset __ehhandler$??0TiXmlAttributeSetA@@QAE@XZ
.text$mn:000019E2                 mov     eax, large fs:0
.text$mn:000019E8                 push    eax
.text$mn:000019E9                 push    ecx
.text$mn:000019EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000019EF                 xor     eax, ebp
.text$mn:000019F1                 push    eax
.text$mn:000019F2                 lea     eax, [ebp+var_C]
.text$mn:000019F5                 mov     large fs:0, eax
.text$mn:000019FB                 mov     [ebp+var_10], ecx
.text$mn:000019FE                 mov     ecx, [ebp+var_10]
.text$mn:00001A01                 call    ??0TiXmlAttributeA@@QAE@XZ ; TiXmlAttributeA::TiXmlAttributeA(void)
.text$mn:00001A06                 mov     [ebp+var_4], 0
.text$mn:00001A0D                 mov     eax, [ebp+var_10]
.text$mn:00001A10                 mov     ecx, [ebp+var_10]
.text$mn:00001A13                 mov     [ecx+4Ch], eax
.text$mn:00001A16                 mov     edx, [ebp+var_10]
.text$mn:00001A19                 mov     eax, [ebp+var_10]
.text$mn:00001A1C                 mov     [eax+48h], edx
.text$mn:00001A1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001A26                 mov     eax, [ebp+var_10]
.text$mn:00001A29                 mov     ecx, [ebp+var_C]
.text$mn:00001A2C                 mov     large fs:0, ecx
.text$mn:00001A33                 pop     ecx
.text$mn:00001A34                 mov     esp, ebp
.text$mn:00001A36                 pop     ebp
.text$mn:00001A37                 retn
.text$mn:00001A37 ??0TiXmlAttributeSetA@@QAE@XZ endp
.text$mn:00001A37
.text$mn:00001A38
.text$mn:00001A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A38
.text$mn:00001A38 ; Attributes: bp-based frame
.text$mn:00001A38
.text$mn:00001A38 ; _DWORD __thiscall TiXmlAttributeSetA::~TiXmlAttributeSetA(TiXmlAttributeSetA *__hidden this)
.text$mn:00001A38                 public ??1TiXmlAttributeSetA@@QAE@XZ
.text$mn:00001A38 ??1TiXmlAttributeSetA@@QAE@XZ proc near ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+9Cp
.text$mn:00001A38                                         ; __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$1+6j ...
.text$mn:00001A38
.text$mn:00001A38 var_10          = dword ptr -10h
.text$mn:00001A38 var_C           = dword ptr -0Ch
.text$mn:00001A38 var_4           = dword ptr -4
.text$mn:00001A38
.text$mn:00001A38                 push    ebp
.text$mn:00001A39                 mov     ebp, esp
.text$mn:00001A3B                 push    0FFFFFFFFh
.text$mn:00001A3D                 push    offset __ehhandler$??1TiXmlAttributeSetA@@QAE@XZ
.text$mn:00001A42                 mov     eax, large fs:0
.text$mn:00001A48                 push    eax
.text$mn:00001A49                 push    ecx
.text$mn:00001A4A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001A4F                 xor     eax, ebp
.text$mn:00001A51                 push    eax
.text$mn:00001A52                 lea     eax, [ebp+var_C]
.text$mn:00001A55                 mov     large fs:0, eax
.text$mn:00001A5B                 mov     [ebp+var_10], ecx
.text$mn:00001A5E                 mov     [ebp+var_4], 0
.text$mn:00001A65                 mov     eax, [ebp+var_10]
.text$mn:00001A68                 mov     ecx, [ebp+var_10]
.text$mn:00001A6B                 cmp     [ecx+4Ch], eax
.text$mn:00001A6E                 jz      short loc_1A87
.text$mn:00001A70                 push    469h            ; Line
.text$mn:00001A75                 push    offset $SG97148 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00001A7A                 push    offset $SG97149 ; "sentinel.next == &sentinel"
.text$mn:00001A7F                 call    __wassert
.text$mn:00001A84 ; ---------------------------------------------------------------------------
.text$mn:00001A84                 add     esp, 0Ch
.text$mn:00001A87
.text$mn:00001A87 loc_1A87:                               ; CODE XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+36j
.text$mn:00001A87                 mov     eax, [ebp+var_10]
.text$mn:00001A8A                 mov     ecx, [ebp+var_10]
.text$mn:00001A8D                 cmp     [ecx+48h], eax
.text$mn:00001A90                 jz      short loc_1AA9
.text$mn:00001A92                 push    46Ah            ; Line
.text$mn:00001A97                 push    offset $SG97151 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00001A9C                 push    offset $SG97152 ; "sentinel.prev == &sentinel"
.text$mn:00001AA1                 call    __wassert
.text$mn:00001AA6 ; ---------------------------------------------------------------------------
.text$mn:00001AA6                 add     esp, 0Ch
.text$mn:00001AA9
.text$mn:00001AA9 loc_1AA9:                               ; CODE XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+58j
.text$mn:00001AA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001AB0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001AB3                 call    ??1TiXmlAttributeA@@UAE@XZ ; TiXmlAttributeA::~TiXmlAttributeA(void)
.text$mn:00001AB8                 mov     ecx, [ebp+var_C]
.text$mn:00001ABB                 mov     large fs:0, ecx
.text$mn:00001AC2                 pop     ecx
.text$mn:00001AC3                 mov     esp, ebp
.text$mn:00001AC5                 pop     ebp
.text$mn:00001AC6                 retn
.text$mn:00001AC6 ??1TiXmlAttributeSetA@@QAE@XZ endp
.text$mn:00001AC6
.text$mn:00001AC6 ; ---------------------------------------------------------------------------
.text$mn:00001AC7                 align 4
.text$mn:00001AC8
.text$mn:00001AC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001AC8
.text$mn:00001AC8 ; Attributes: bp-based frame
.text$mn:00001AC8
.text$mn:00001AC8 ; void __thiscall TiXmlAttributeSetA::Add(TiXmlAttributeSetA *this, struct TiXmlAttributeA *)
.text$mn:00001AC8                 public ?Add@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z
.text$mn:00001AC8 ?Add@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z proc near
.text$mn:00001AC8                                         ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+A7p
.text$mn:00001AC8
.text$mn:00001AC8 var_4           = dword ptr -4
.text$mn:00001AC8 arg_0           = dword ptr  8
.text$mn:00001AC8
.text$mn:00001AC8                 push    ebp
.text$mn:00001AC9                 mov     ebp, esp
.text$mn:00001ACB                 push    ecx
.text$mn:00001ACC                 mov     [ebp+var_4], ecx
.text$mn:00001ACF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001AD2                 call    ?Name@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Name(void)
.text$mn:00001AD7                 push    eax             ; char *
.text$mn:00001AD8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001ADB                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00001AE0                 test    eax, eax
.text$mn:00001AE2                 jz      short loc_1AFB
.text$mn:00001AE4                 push    470h            ; Line
.text$mn:00001AE9                 push    offset $SG97158 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00001AEE                 push    offset $SG97159 ; "!Find( addMe->Name() )"
.text$mn:00001AF3                 call    __wassert
.text$mn:00001AF8 ; ---------------------------------------------------------------------------
.text$mn:00001AF8                 add     esp, 0Ch
.text$mn:00001AFB
.text$mn:00001AFB loc_1AFB:                               ; CODE XREF: TiXmlAttributeSetA::Add(TiXmlAttributeA *)+1Aj
.text$mn:00001AFB                 mov     ecx, [ebp+var_4]
.text$mn:00001AFE                 mov     edx, [ebp+arg_0]
.text$mn:00001B01                 mov     [edx+4Ch], ecx
.text$mn:00001B04                 mov     eax, [ebp+arg_0]
.text$mn:00001B07                 mov     ecx, [ebp+var_4]
.text$mn:00001B0A                 mov     edx, [ecx+48h]
.text$mn:00001B0D                 mov     [eax+48h], edx
.text$mn:00001B10                 mov     eax, [ebp+var_4]
.text$mn:00001B13                 mov     ecx, [eax+48h]
.text$mn:00001B16                 mov     edx, [ebp+arg_0]
.text$mn:00001B19                 mov     [ecx+4Ch], edx
.text$mn:00001B1C                 mov     eax, [ebp+var_4]
.text$mn:00001B1F                 mov     ecx, [ebp+arg_0]
.text$mn:00001B22                 mov     [eax+48h], ecx
.text$mn:00001B25                 mov     esp, ebp
.text$mn:00001B27                 pop     ebp
.text$mn:00001B28                 retn    4
.text$mn:00001B28 ?Add@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z endp
.text$mn:00001B28
.text$mn:00001B28 ; ---------------------------------------------------------------------------
.text$mn:00001B2B                 db 0Dh dup(0CCh)
.text$mn:00001B38
.text$mn:00001B38 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B38
.text$mn:00001B38 ; Attributes: bp-based frame
.text$mn:00001B38
.text$mn:00001B38 ; void __thiscall TiXmlAttributeSetA::Remove(TiXmlAttributeSetA *this, struct TiXmlAttributeA *)
.text$mn:00001B38                 public ?Remove@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z
.text$mn:00001B38 ?Remove@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z proc near
.text$mn:00001B38                                         ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+5Fp
.text$mn:00001B38                                         ; TiXmlElementA::RemoveAttribute(char const *)+2Bp
.text$mn:00001B38
.text$mn:00001B38 var_8           = dword ptr -8
.text$mn:00001B38 var_4           = dword ptr -4
.text$mn:00001B38 arg_0           = dword ptr  8
.text$mn:00001B38
.text$mn:00001B38                 push    ebp
.text$mn:00001B39                 mov     ebp, esp
.text$mn:00001B3B                 sub     esp, 8
.text$mn:00001B3E                 mov     [ebp+var_8], ecx
.text$mn:00001B41                 mov     eax, [ebp+var_8]
.text$mn:00001B44                 mov     ecx, [eax+4Ch]
.text$mn:00001B47                 mov     [ebp+var_4], ecx
.text$mn:00001B4A                 jmp     short loc_1B55
.text$mn:00001B4C ; ---------------------------------------------------------------------------
.text$mn:00001B4C
.text$mn:00001B4C loc_1B4C:                               ; CODE XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *):loc_1B99j
.text$mn:00001B4C                 mov     edx, [ebp+var_4]
.text$mn:00001B4F                 mov     eax, [edx+4Ch]
.text$mn:00001B52                 mov     [ebp+var_4], eax
.text$mn:00001B55
.text$mn:00001B55 loc_1B55:                               ; CODE XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+12j
.text$mn:00001B55                 mov     ecx, [ebp+var_8]
.text$mn:00001B58                 cmp     [ebp+var_4], ecx
.text$mn:00001B5B                 jz      short loc_1B9B
.text$mn:00001B5D                 mov     edx, [ebp+var_4]
.text$mn:00001B60                 cmp     edx, [ebp+arg_0]
.text$mn:00001B63                 jnz     short loc_1B99
.text$mn:00001B65                 mov     eax, [ebp+var_4]
.text$mn:00001B68                 mov     ecx, [eax+48h]
.text$mn:00001B6B                 mov     edx, [ebp+var_4]
.text$mn:00001B6E                 mov     eax, [edx+4Ch]
.text$mn:00001B71                 mov     [ecx+4Ch], eax
.text$mn:00001B74                 mov     ecx, [ebp+var_4]
.text$mn:00001B77                 mov     edx, [ecx+4Ch]
.text$mn:00001B7A                 mov     eax, [ebp+var_4]
.text$mn:00001B7D                 mov     ecx, [eax+48h]
.text$mn:00001B80                 mov     [edx+48h], ecx
.text$mn:00001B83                 mov     edx, [ebp+var_4]
.text$mn:00001B86                 mov     dword ptr [edx+4Ch], 0
.text$mn:00001B8D                 mov     eax, [ebp+var_4]
.text$mn:00001B90                 mov     dword ptr [eax+48h], 0
.text$mn:00001B97                 jmp     short loc_1BB6
.text$mn:00001B99 ; ---------------------------------------------------------------------------
.text$mn:00001B99
.text$mn:00001B99 loc_1B99:                               ; CODE XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+2Bj
.text$mn:00001B99                 jmp     short loc_1B4C
.text$mn:00001B9B ; ---------------------------------------------------------------------------
.text$mn:00001B9B
.text$mn:00001B9B loc_1B9B:                               ; CODE XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+23j
.text$mn:00001B9B                 xor     ecx, ecx
.text$mn:00001B9D                 jnz     short loc_1BB6
.text$mn:00001B9F                 push    488h            ; Line
.text$mn:00001BA4                 push    offset $SG97170 ; "..\\src\\TinyXml\\tinyXmlA\\tinyxmlA.cp"...
.text$mn:00001BA9                 push    offset $SG97171 ; Message
.text$mn:00001BAE                 call    __wassert
.text$mn:00001BB3 ; ---------------------------------------------------------------------------
.text$mn:00001BB3                 add     esp, 0Ch
.text$mn:00001BB6
.text$mn:00001BB6 loc_1BB6:                               ; CODE XREF: TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+5Fj
.text$mn:00001BB6                                         ; TiXmlAttributeSetA::Remove(TiXmlAttributeA *)+65j
.text$mn:00001BB6                 mov     esp, ebp
.text$mn:00001BB8                 pop     ebp
.text$mn:00001BB9                 retn    4
.text$mn:00001BB9 ?Remove@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z endp
.text$mn:00001BB9
.text$mn:00001BB9 ; ---------------------------------------------------------------------------
.text$mn:00001BBC                 db 0Ch dup(0CCh)
.text$mn:00001BC8
.text$mn:00001BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BC8
.text$mn:00001BC8 ; Attributes: bp-based frame
.text$mn:00001BC8
.text$mn:00001BC8 ; struct TiXmlAttributeA *__thiscall TiXmlAttributeSetA::Find(TiXmlAttributeSetA *this, const char *)
.text$mn:00001BC8                 public ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z
.text$mn:00001BC8 ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z proc near
.text$mn:00001BC8                                         ; CODE XREF: TiXmlAttributeSetA::Add(TiXmlAttributeA *)+13p
.text$mn:00001BC8                                         ; TiXmlElementA::Attribute(char const *)+13p ...
.text$mn:00001BC8
.text$mn:00001BC8 var_8           = dword ptr -8
.text$mn:00001BC8 var_4           = dword ptr -4
.text$mn:00001BC8 Str             = dword ptr  8
.text$mn:00001BC8
.text$mn:00001BC8                 push    ebp
.text$mn:00001BC9                 mov     ebp, esp
.text$mn:00001BCB                 sub     esp, 8
.text$mn:00001BCE                 mov     [ebp+var_8], ecx
.text$mn:00001BD1                 mov     eax, [ebp+var_8]
.text$mn:00001BD4                 mov     ecx, [eax+4Ch]
.text$mn:00001BD7                 mov     [ebp+var_4], ecx
.text$mn:00001BDA                 jmp     short loc_1BE5
.text$mn:00001BDC ; ---------------------------------------------------------------------------
.text$mn:00001BDC
.text$mn:00001BDC loc_1BDC:                               ; CODE XREF: TiXmlAttributeSetA::Find(char const *):loc_1C0Cj
.text$mn:00001BDC                 mov     edx, [ebp+var_4]
.text$mn:00001BDF                 mov     eax, [edx+4Ch]
.text$mn:00001BE2                 mov     [ebp+var_4], eax
.text$mn:00001BE5
.text$mn:00001BE5 loc_1BE5:                               ; CODE XREF: TiXmlAttributeSetA::Find(char const *)+12j
.text$mn:00001BE5                 mov     ecx, [ebp+var_8]
.text$mn:00001BE8                 cmp     [ebp+var_4], ecx
.text$mn:00001BEB                 jz      short loc_1C0E
.text$mn:00001BED                 mov     edx, [ebp+Str]
.text$mn:00001BF0                 push    edx             ; Str
.text$mn:00001BF1                 mov     eax, [ebp+var_4]
.text$mn:00001BF4                 add     eax, 10h
.text$mn:00001BF7                 push    eax             ; int
.text$mn:00001BF8                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text$mn:00001BFD                 add     esp, 8
.text$mn:00001C00                 movzx   ecx, al
.text$mn:00001C03                 test    ecx, ecx
.text$mn:00001C05                 jz      short loc_1C0C
.text$mn:00001C07                 mov     eax, [ebp+var_4]
.text$mn:00001C0A                 jmp     short loc_1C10
.text$mn:00001C0C ; ---------------------------------------------------------------------------
.text$mn:00001C0C
.text$mn:00001C0C loc_1C0C:                               ; CODE XREF: TiXmlAttributeSetA::Find(char const *)+3Dj
.text$mn:00001C0C                 jmp     short loc_1BDC
.text$mn:00001C0E ; ---------------------------------------------------------------------------
.text$mn:00001C0E
.text$mn:00001C0E loc_1C0E:                               ; CODE XREF: TiXmlAttributeSetA::Find(char const *)+23j
.text$mn:00001C0E                 xor     eax, eax
.text$mn:00001C10
.text$mn:00001C10 loc_1C10:                               ; CODE XREF: TiXmlAttributeSetA::Find(char const *)+42j
.text$mn:00001C10                 mov     esp, ebp
.text$mn:00001C12                 pop     ebp
.text$mn:00001C13                 retn    4
.text$mn:00001C13 ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z endp
.text$mn:00001C13
.text$mn:00001C13 ; ---------------------------------------------------------------------------
.text$mn:00001C16                 align 4
.text$mn:00001C18
.text$mn:00001C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C18
.text$mn:00001C18 ; Attributes: bp-based frame
.text$mn:00001C18
.text$mn:00001C18 ; int __stdcall TiXmlElementA::TiXmlElementA(char *Str)
.text$mn:00001C18                 public ??0TiXmlElementA@@QAE@PBD@Z
.text$mn:00001C18 ??0TiXmlElementA@@QAE@PBD@Z proc near   ; CODE XREF: TiXmlElementA::Clone(void)+51p
.text$mn:00001C18
.text$mn:00001C18 var_10          = dword ptr -10h
.text$mn:00001C18 var_C           = dword ptr -0Ch
.text$mn:00001C18 var_4           = dword ptr -4
.text$mn:00001C18 Str             = dword ptr  8
.text$mn:00001C18
.text$mn:00001C18                 push    ebp
.text$mn:00001C19                 mov     ebp, esp
.text$mn:00001C1B                 push    0FFFFFFFFh
.text$mn:00001C1D                 push    offset __ehhandler$??0TiXmlElementA@@QAE@PBD@Z
.text$mn:00001C22                 mov     eax, large fs:0
.text$mn:00001C28                 push    eax
.text$mn:00001C29                 push    ecx
.text$mn:00001C2A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001C2F                 xor     eax, ebp
.text$mn:00001C31                 push    eax
.text$mn:00001C32                 lea     eax, [ebp+var_C]
.text$mn:00001C35                 mov     large fs:0, eax
.text$mn:00001C3B                 mov     [ebp+var_10], ecx
.text$mn:00001C3E                 push    1
.text$mn:00001C40                 mov     ecx, [ebp+var_10]
.text$mn:00001C43                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00001C48                 mov     [ebp+var_4], 0
.text$mn:00001C4F                 mov     eax, [ebp+var_10]
.text$mn:00001C52                 mov     dword ptr [eax], offset ??_7TiXmlElementA@@6B@ ; const TiXmlElementA::`vftable'
.text$mn:00001C58                 mov     ecx, [ebp+var_10]
.text$mn:00001C5B                 add     ecx, 44h ; 'D'
.text$mn:00001C5E                 call    ??0TiXmlAttributeSetA@@QAE@XZ ; TiXmlAttributeSetA::TiXmlAttributeSetA(void)
.text$mn:00001C63                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001C67                 mov     ecx, [ebp+var_10]
.text$mn:00001C6A                 mov     dword ptr [ecx+18h], 0
.text$mn:00001C71                 mov     edx, [ebp+var_10]
.text$mn:00001C74                 mov     dword ptr [edx+14h], 0
.text$mn:00001C7B                 mov     eax, [ebp+Str]
.text$mn:00001C7E                 push    eax             ; Str
.text$mn:00001C7F                 mov     ecx, [ebp+var_10]
.text$mn:00001C82                 add     ecx, 1Ch
.text$mn:00001C85                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00001C8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001C91                 mov     eax, [ebp+var_10]
.text$mn:00001C94                 mov     ecx, [ebp+var_C]
.text$mn:00001C97                 mov     large fs:0, ecx
.text$mn:00001C9E                 pop     ecx
.text$mn:00001C9F                 mov     esp, ebp
.text$mn:00001CA1                 pop     ebp
.text$mn:00001CA2                 retn    4
.text$mn:00001CA2 ??0TiXmlElementA@@QAE@PBD@Z endp
.text$mn:00001CA2
.text$mn:00001CA2 ; ---------------------------------------------------------------------------
.text$mn:00001CA5                 align 4
.text$mn:00001CA8
.text$mn:00001CA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CA8
.text$mn:00001CA8 ; Attributes: bp-based frame
.text$mn:00001CA8
.text$mn:00001CA8 ; _DWORD __thiscall TiXmlElementA::~TiXmlElementA(TiXmlElementA *__hidden this)
.text$mn:00001CA8                 public ??1TiXmlElementA@@UAE@XZ
.text$mn:00001CA8 ??1TiXmlElementA@@UAE@XZ proc near      ; CODE XREF: TiXmlElementA::`scalar deleting destructor'(uint)+Ap
.text$mn:00001CA8
.text$mn:00001CA8 var_20          = dword ptr -20h
.text$mn:00001CA8 var_1C          = dword ptr -1Ch
.text$mn:00001CA8 var_18          = dword ptr -18h
.text$mn:00001CA8 var_14          = dword ptr -14h
.text$mn:00001CA8 var_10          = dword ptr -10h
.text$mn:00001CA8 var_C           = dword ptr -0Ch
.text$mn:00001CA8 var_4           = dword ptr -4
.text$mn:00001CA8
.text$mn:00001CA8                 push    ebp
.text$mn:00001CA9                 mov     ebp, esp
.text$mn:00001CAB                 push    0FFFFFFFFh
.text$mn:00001CAD                 push    offset __ehhandler$??1TiXmlElementA@@UAE@XZ
.text$mn:00001CB2                 mov     eax, large fs:0
.text$mn:00001CB8                 push    eax
.text$mn:00001CB9                 sub     esp, 14h
.text$mn:00001CBC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001CC1                 xor     eax, ebp
.text$mn:00001CC3                 push    eax
.text$mn:00001CC4                 lea     eax, [ebp+var_C]
.text$mn:00001CC7                 mov     large fs:0, eax
.text$mn:00001CCD                 mov     [ebp+var_10], ecx
.text$mn:00001CD0                 mov     eax, [ebp+var_10]
.text$mn:00001CD3                 mov     dword ptr [eax], offset ??_7TiXmlElementA@@6B@ ; const TiXmlElementA::`vftable'
.text$mn:00001CD9                 mov     [ebp+var_4], 1
.text$mn:00001CE0
.text$mn:00001CE0 loc_1CE0:                               ; CODE XREF: TiXmlElementA::~TiXmlElementA(void):loc_1D38j
.text$mn:00001CE0                 mov     ecx, [ebp+var_10]
.text$mn:00001CE3                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001CE6                 call    ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ ; TiXmlAttributeSetA::First(void)
.text$mn:00001CEB                 test    eax, eax
.text$mn:00001CED                 jz      short loc_1D3A
.text$mn:00001CEF                 mov     ecx, [ebp+var_10]
.text$mn:00001CF2                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001CF5                 call    ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ ; TiXmlAttributeSetA::First(void)
.text$mn:00001CFA                 mov     [ebp+var_18], eax
.text$mn:00001CFD                 mov     ecx, [ebp+var_18]
.text$mn:00001D00                 push    ecx             ; struct TiXmlAttributeA *
.text$mn:00001D01                 mov     ecx, [ebp+var_10]
.text$mn:00001D04                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D07                 call    ?Remove@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z ; TiXmlAttributeSetA::Remove(TiXmlAttributeA *)
.text$mn:00001D0C                 mov     edx, [ebp+var_18]
.text$mn:00001D0F                 mov     [ebp+var_1C], edx
.text$mn:00001D12                 mov     eax, [ebp+var_1C]
.text$mn:00001D15                 mov     [ebp+var_14], eax
.text$mn:00001D18                 cmp     [ebp+var_14], 0
.text$mn:00001D1C                 jz      short loc_1D31
.text$mn:00001D1E                 push    1
.text$mn:00001D20                 mov     ecx, [ebp+var_14]
.text$mn:00001D23                 mov     edx, [ecx]
.text$mn:00001D25                 mov     ecx, [ebp+var_14]
.text$mn:00001D28                 mov     eax, [edx]
.text$mn:00001D2A                 call    eax
.text$mn:00001D2C                 mov     [ebp+var_20], eax
.text$mn:00001D2F                 jmp     short loc_1D38
.text$mn:00001D31 ; ---------------------------------------------------------------------------
.text$mn:00001D31
.text$mn:00001D31 loc_1D31:                               ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+74j
.text$mn:00001D31                 mov     [ebp+var_20], 0
.text$mn:00001D38
.text$mn:00001D38 loc_1D38:                               ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+87j
.text$mn:00001D38                 jmp     short loc_1CE0
.text$mn:00001D3A ; ---------------------------------------------------------------------------
.text$mn:00001D3A
.text$mn:00001D3A loc_1D3A:                               ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+45j
.text$mn:00001D3A                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001D3E                 mov     ecx, [ebp+var_10]
.text$mn:00001D41                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D44                 call    ??1TiXmlAttributeSetA@@QAE@XZ ; TiXmlAttributeSetA::~TiXmlAttributeSetA(void)
.text$mn:00001D49                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D50                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001D53                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00001D58                 mov     ecx, [ebp+var_C]
.text$mn:00001D5B                 mov     large fs:0, ecx
.text$mn:00001D62                 pop     ecx
.text$mn:00001D63                 mov     esp, ebp
.text$mn:00001D65                 pop     ebp
.text$mn:00001D66                 retn
.text$mn:00001D66 ??1TiXmlElementA@@UAE@XZ endp
.text$mn:00001D66
.text$mn:00001D66 ; ---------------------------------------------------------------------------
.text$mn:00001D67                 align 4
.text$mn:00001D68
.text$mn:00001D68 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D68
.text$mn:00001D68 ; Attributes: bp-based frame
.text$mn:00001D68
.text$mn:00001D68 ; const char *__thiscall TiXmlElementA::Attribute(TiXmlElementA *this, const char *)
.text$mn:00001D68                 public ?Attribute@TiXmlElementA@@QBEPBDPBD@Z
.text$mn:00001D68 ?Attribute@TiXmlElementA@@QBEPBDPBD@Z proc near
.text$mn:00001D68                                         ; CODE XREF: TiXmlElementA::Attribute(char const *,int *)+10p
.text$mn:00001D68                                         ; TiXmlElementA::Attribute(char const *,double *)+10p
.text$mn:00001D68
.text$mn:00001D68 var_8           = dword ptr -8
.text$mn:00001D68 var_4           = dword ptr -4
.text$mn:00001D68 arg_0           = dword ptr  8
.text$mn:00001D68
.text$mn:00001D68                 push    ebp
.text$mn:00001D69                 mov     ebp, esp
.text$mn:00001D6B                 sub     esp, 8
.text$mn:00001D6E                 mov     [ebp+var_8], ecx
.text$mn:00001D71                 mov     eax, [ebp+arg_0]
.text$mn:00001D74                 push    eax             ; char *
.text$mn:00001D75                 mov     ecx, [ebp+var_8]
.text$mn:00001D78                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001D7B                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00001D80                 mov     [ebp+var_4], eax
.text$mn:00001D83                 cmp     [ebp+var_4], 0
.text$mn:00001D87                 jz      short loc_1D93
.text$mn:00001D89                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001D8C                 call    ?Value@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Value(void)
.text$mn:00001D91                 jmp     short loc_1D95
.text$mn:00001D93 ; ---------------------------------------------------------------------------
.text$mn:00001D93
.text$mn:00001D93 loc_1D93:                               ; CODE XREF: TiXmlElementA::Attribute(char const *)+1Fj
.text$mn:00001D93                 xor     eax, eax
.text$mn:00001D95
.text$mn:00001D95 loc_1D95:                               ; CODE XREF: TiXmlElementA::Attribute(char const *)+29j
.text$mn:00001D95                 mov     esp, ebp
.text$mn:00001D97                 pop     ebp
.text$mn:00001D98                 retn    4
.text$mn:00001D98 ?Attribute@TiXmlElementA@@QBEPBDPBD@Z endp
.text$mn:00001D98
.text$mn:00001D98 ; ---------------------------------------------------------------------------
.text$mn:00001D9B                 db 0Dh dup(0CCh)
.text$mn:00001DA8
.text$mn:00001DA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DA8
.text$mn:00001DA8 ; Attributes: bp-based frame
.text$mn:00001DA8
.text$mn:00001DA8 ; const char *__thiscall TiXmlElementA::Attribute(TiXmlElementA *this, const char *, int *)
.text$mn:00001DA8                 public ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z
.text$mn:00001DA8 ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z proc near
.text$mn:00001DA8
.text$mn:00001DA8 var_8           = dword ptr -8
.text$mn:00001DA8 Str             = dword ptr -4
.text$mn:00001DA8 arg_0           = dword ptr  8
.text$mn:00001DA8 arg_4           = dword ptr  0Ch
.text$mn:00001DA8
.text$mn:00001DA8                 push    ebp
.text$mn:00001DA9                 mov     ebp, esp
.text$mn:00001DAB                 sub     esp, 8
.text$mn:00001DAE                 mov     [ebp+var_8], ecx
.text$mn:00001DB1                 mov     eax, [ebp+arg_0]
.text$mn:00001DB4                 push    eax             ; char *
.text$mn:00001DB5                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001DB8                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00001DBD                 mov     [ebp+Str], eax
.text$mn:00001DC0                 cmp     [ebp+arg_4], 0
.text$mn:00001DC4                 jz      short loc_1DE8
.text$mn:00001DC6                 cmp     [ebp+Str], 0
.text$mn:00001DCA                 jz      short loc_1DDF
.text$mn:00001DCC                 mov     ecx, [ebp+Str]
.text$mn:00001DCF                 push    ecx             ; Str
.text$mn:00001DD0                 call    _atoi
.text$mn:00001DD5                 add     esp, 4
.text$mn:00001DD8                 mov     edx, [ebp+arg_4]
.text$mn:00001DDB                 mov     [edx], eax
.text$mn:00001DDD                 jmp     short loc_1DE8
.text$mn:00001DDF ; ---------------------------------------------------------------------------
.text$mn:00001DDF
.text$mn:00001DDF loc_1DDF:                               ; CODE XREF: TiXmlElementA::Attribute(char const *,int *)+22j
.text$mn:00001DDF                 mov     eax, [ebp+arg_4]
.text$mn:00001DE2                 mov     dword ptr [eax], 0
.text$mn:00001DE8
.text$mn:00001DE8 loc_1DE8:                               ; CODE XREF: TiXmlElementA::Attribute(char const *,int *)+1Cj
.text$mn:00001DE8                                         ; TiXmlElementA::Attribute(char const *,int *)+35j
.text$mn:00001DE8                 mov     eax, [ebp+Str]
.text$mn:00001DEB                 mov     esp, ebp
.text$mn:00001DED                 pop     ebp
.text$mn:00001DEE                 retn    8
.text$mn:00001DEE ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z endp
.text$mn:00001DEE
.text$mn:00001DEE ; ---------------------------------------------------------------------------
.text$mn:00001DF1                 align 8
.text$mn:00001DF8
.text$mn:00001DF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DF8
.text$mn:00001DF8 ; Attributes: bp-based frame
.text$mn:00001DF8
.text$mn:00001DF8 ; const char *__thiscall TiXmlElementA::Attribute(TiXmlElementA *this, const char *, double *)
.text$mn:00001DF8                 public ?Attribute@TiXmlElementA@@QBEPBDPBDPAN@Z
.text$mn:00001DF8 ?Attribute@TiXmlElementA@@QBEPBDPBDPAN@Z proc near
.text$mn:00001DF8
.text$mn:00001DF8 var_8           = dword ptr -8
.text$mn:00001DF8 String          = dword ptr -4
.text$mn:00001DF8 arg_0           = dword ptr  8
.text$mn:00001DF8 arg_4           = dword ptr  0Ch
.text$mn:00001DF8
.text$mn:00001DF8                 push    ebp
.text$mn:00001DF9                 mov     ebp, esp
.text$mn:00001DFB                 sub     esp, 8
.text$mn:00001DFE                 mov     [ebp+var_8], ecx
.text$mn:00001E01                 mov     eax, [ebp+arg_0]
.text$mn:00001E04                 push    eax             ; char *
.text$mn:00001E05                 mov     ecx, [ebp+var_8] ; this
.text$mn:00001E08                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00001E0D                 mov     [ebp+String], eax
.text$mn:00001E10                 cmp     [ebp+arg_4], 0
.text$mn:00001E14                 jz      short loc_1E3E
.text$mn:00001E16                 cmp     [ebp+String], 0
.text$mn:00001E1A                 jz      short loc_1E2F
.text$mn:00001E1C                 mov     ecx, [ebp+String]
.text$mn:00001E1F                 push    ecx             ; String
.text$mn:00001E20                 call    _atof
.text$mn:00001E25                 add     esp, 4
.text$mn:00001E28                 mov     edx, [ebp+arg_4]
.text$mn:00001E2B                 fstp    qword ptr [edx]
.text$mn:00001E2D                 jmp     short loc_1E3E
.text$mn:00001E2F ; ---------------------------------------------------------------------------
.text$mn:00001E2F
.text$mn:00001E2F loc_1E2F:                               ; CODE XREF: TiXmlElementA::Attribute(char const *,double *)+22j
.text$mn:00001E2F                 mov     eax, [ebp+arg_4]
.text$mn:00001E32                 movsd   xmm0, ds:__real@0000000000000000
.text$mn:00001E3A                 movsd   qword ptr [eax], xmm0
.text$mn:00001E3E
.text$mn:00001E3E loc_1E3E:                               ; CODE XREF: TiXmlElementA::Attribute(char const *,double *)+1Cj
.text$mn:00001E3E                                         ; TiXmlElementA::Attribute(char const *,double *)+35j
.text$mn:00001E3E                 mov     eax, [ebp+String]
.text$mn:00001E41                 mov     esp, ebp
.text$mn:00001E43                 pop     ebp
.text$mn:00001E44                 retn    8
.text$mn:00001E44 ?Attribute@TiXmlElementA@@QBEPBDPBDPAN@Z endp
.text$mn:00001E44
.text$mn:00001E44 ; ---------------------------------------------------------------------------
.text$mn:00001E47                 align 4
.text$mn:00001E48
.text$mn:00001E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E48
.text$mn:00001E48 ; Attributes: bp-based frame
.text$mn:00001E48
.text$mn:00001E48 ; int __thiscall TiXmlElementA::QueryIntAttribute(TiXmlElementA *this, const char *, int *)
.text$mn:00001E48                 public ?QueryIntAttribute@TiXmlElementA@@QBEHPBDPAH@Z
.text$mn:00001E48 ?QueryIntAttribute@TiXmlElementA@@QBEHPBDPAH@Z proc near
.text$mn:00001E48
.text$mn:00001E48 var_8           = dword ptr -8
.text$mn:00001E48 var_4           = dword ptr -4
.text$mn:00001E48 arg_0           = dword ptr  8
.text$mn:00001E48 arg_4           = dword ptr  0Ch
.text$mn:00001E48
.text$mn:00001E48                 push    ebp
.text$mn:00001E49                 mov     ebp, esp
.text$mn:00001E4B                 sub     esp, 8
.text$mn:00001E4E                 mov     [ebp+var_8], ecx
.text$mn:00001E51                 mov     eax, [ebp+arg_0]
.text$mn:00001E54                 push    eax             ; char *
.text$mn:00001E55                 mov     ecx, [ebp+var_8]
.text$mn:00001E58                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001E5B                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00001E60                 mov     [ebp+var_4], eax
.text$mn:00001E63                 cmp     [ebp+var_4], 0
.text$mn:00001E67                 jnz     short loc_1E70
.text$mn:00001E69                 mov     eax, 1
.text$mn:00001E6E                 jmp     short loc_1E7C
.text$mn:00001E70 ; ---------------------------------------------------------------------------
.text$mn:00001E70
.text$mn:00001E70 loc_1E70:                               ; CODE XREF: TiXmlElementA::QueryIntAttribute(char const *,int *)+1Fj
.text$mn:00001E70                 mov     ecx, [ebp+arg_4]
.text$mn:00001E73                 push    ecx             ; int *
.text$mn:00001E74                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001E77                 call    ?QueryIntValue@TiXmlAttributeA@@QBEHPAH@Z ; TiXmlAttributeA::QueryIntValue(int *)
.text$mn:00001E7C
.text$mn:00001E7C loc_1E7C:                               ; CODE XREF: TiXmlElementA::QueryIntAttribute(char const *,int *)+26j
.text$mn:00001E7C                 mov     esp, ebp
.text$mn:00001E7E                 pop     ebp
.text$mn:00001E7F                 retn    8
.text$mn:00001E7F ?QueryIntAttribute@TiXmlElementA@@QBEHPBDPAH@Z endp
.text$mn:00001E7F
.text$mn:00001E7F ; ---------------------------------------------------------------------------
.text$mn:00001E82                 align 8
.text$mn:00001E88
.text$mn:00001E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E88
.text$mn:00001E88 ; Attributes: bp-based frame
.text$mn:00001E88
.text$mn:00001E88 ; int __thiscall TiXmlElementA::QueryDoubleAttribute(TiXmlElementA *this, const char *, double *)
.text$mn:00001E88                 public ?QueryDoubleAttribute@TiXmlElementA@@QBEHPBDPAN@Z
.text$mn:00001E88 ?QueryDoubleAttribute@TiXmlElementA@@QBEHPBDPAN@Z proc near
.text$mn:00001E88
.text$mn:00001E88 var_8           = dword ptr -8
.text$mn:00001E88 var_4           = dword ptr -4
.text$mn:00001E88 arg_0           = dword ptr  8
.text$mn:00001E88 arg_4           = dword ptr  0Ch
.text$mn:00001E88
.text$mn:00001E88                 push    ebp
.text$mn:00001E89                 mov     ebp, esp
.text$mn:00001E8B                 sub     esp, 8
.text$mn:00001E8E                 mov     [ebp+var_8], ecx
.text$mn:00001E91                 mov     eax, [ebp+arg_0]
.text$mn:00001E94                 push    eax             ; char *
.text$mn:00001E95                 mov     ecx, [ebp+var_8]
.text$mn:00001E98                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001E9B                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00001EA0                 mov     [ebp+var_4], eax
.text$mn:00001EA3                 cmp     [ebp+var_4], 0
.text$mn:00001EA7                 jnz     short loc_1EB0
.text$mn:00001EA9                 mov     eax, 1
.text$mn:00001EAE                 jmp     short loc_1EBC
.text$mn:00001EB0 ; ---------------------------------------------------------------------------
.text$mn:00001EB0
.text$mn:00001EB0 loc_1EB0:                               ; CODE XREF: TiXmlElementA::QueryDoubleAttribute(char const *,double *)+1Fj
.text$mn:00001EB0                 mov     ecx, [ebp+arg_4]
.text$mn:00001EB3                 push    ecx             ; double *
.text$mn:00001EB4                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001EB7                 call    ?QueryDoubleValue@TiXmlAttributeA@@QBEHPAN@Z ; TiXmlAttributeA::QueryDoubleValue(double *)
.text$mn:00001EBC
.text$mn:00001EBC loc_1EBC:                               ; CODE XREF: TiXmlElementA::QueryDoubleAttribute(char const *,double *)+26j
.text$mn:00001EBC                 mov     esp, ebp
.text$mn:00001EBE                 pop     ebp
.text$mn:00001EBF                 retn    8
.text$mn:00001EBF ?QueryDoubleAttribute@TiXmlElementA@@QBEHPBDPAN@Z endp
.text$mn:00001EBF
.text$mn:00001EBF ; ---------------------------------------------------------------------------
.text$mn:00001EC2                 align 8
.text$mn:00001EC8
.text$mn:00001EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EC8
.text$mn:00001EC8 ; Attributes: bp-based frame
.text$mn:00001EC8
.text$mn:00001EC8 ; void __thiscall TiXmlElementA::SetAttribute(TiXmlElementA *this, const char *Str, const char *)
.text$mn:00001EC8                 public ?SetAttribute@TiXmlElementA@@QAEXPBD0@Z
.text$mn:00001EC8 ?SetAttribute@TiXmlElementA@@QAEXPBD0@Z proc near
.text$mn:00001EC8                                         ; CODE XREF: TiXmlElementA::SetAttribute(char const *,int)+33p
.text$mn:00001EC8                                         ; TiXmlElementA::Clone(void)+CBp
.text$mn:00001EC8
.text$mn:00001EC8 var_28          = dword ptr -28h
.text$mn:00001EC8 var_24          = dword ptr -24h
.text$mn:00001EC8 var_20          = dword ptr -20h
.text$mn:00001EC8 var_1C          = dword ptr -1Ch
.text$mn:00001EC8 var_18          = dword ptr -18h
.text$mn:00001EC8 var_14          = dword ptr -14h
.text$mn:00001EC8 var_10          = dword ptr -10h
.text$mn:00001EC8 var_C           = dword ptr -0Ch
.text$mn:00001EC8 var_4           = dword ptr -4
.text$mn:00001EC8 Str             = dword ptr  8
.text$mn:00001EC8 arg_4           = dword ptr  0Ch
.text$mn:00001EC8
.text$mn:00001EC8                 push    ebp
.text$mn:00001EC9                 mov     ebp, esp
.text$mn:00001ECB                 push    0FFFFFFFFh
.text$mn:00001ECD                 push    offset __ehhandler$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z
.text$mn:00001ED2                 mov     eax, large fs:0
.text$mn:00001ED8                 push    eax
.text$mn:00001ED9                 sub     esp, 1Ch
.text$mn:00001EDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001EE1                 xor     eax, ebp
.text$mn:00001EE3                 push    eax
.text$mn:00001EE4                 lea     eax, [ebp+var_C]
.text$mn:00001EE7                 mov     large fs:0, eax
.text$mn:00001EED                 mov     [ebp+var_10], ecx
.text$mn:00001EF0                 mov     eax, [ebp+Str]
.text$mn:00001EF3                 push    eax             ; char *
.text$mn:00001EF4                 mov     ecx, [ebp+var_10]
.text$mn:00001EF7                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001EFA                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00001EFF                 mov     [ebp+var_14], eax
.text$mn:00001F02                 cmp     [ebp+var_14], 0
.text$mn:00001F06                 jz      short loc_1F16
.text$mn:00001F08                 mov     ecx, [ebp+arg_4]
.text$mn:00001F0B                 push    ecx             ; char *
.text$mn:00001F0C                 mov     ecx, [ebp+var_14] ; this
.text$mn:00001F0F                 call    ?SetValue@TiXmlAttributeA@@QAEXPBD@Z ; TiXmlAttributeA::SetValue(char const *)
.text$mn:00001F14                 jmp     short loc_1F95
.text$mn:00001F16 ; ---------------------------------------------------------------------------
.text$mn:00001F16
.text$mn:00001F16 loc_1F16:                               ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+3Ej
.text$mn:00001F16                 push    50h ; 'P'       ; unsigned int
.text$mn:00001F18                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001F1D                 add     esp, 4
.text$mn:00001F20                 mov     [ebp+var_18], eax
.text$mn:00001F23                 mov     [ebp+var_4], 0
.text$mn:00001F2A                 cmp     [ebp+var_18], 0
.text$mn:00001F2E                 jz      short loc_1F45
.text$mn:00001F30                 mov     edx, [ebp+arg_4]
.text$mn:00001F33                 push    edx             ; char *
.text$mn:00001F34                 mov     eax, [ebp+Str]
.text$mn:00001F37                 push    eax             ; Str
.text$mn:00001F38                 mov     ecx, [ebp+var_18]
.text$mn:00001F3B                 call    ??0TiXmlAttributeA@@QAE@PBD0@Z ; TiXmlAttributeA::TiXmlAttributeA(char const *,char const *)
.text$mn:00001F40                 mov     [ebp+var_1C], eax
.text$mn:00001F43                 jmp     short loc_1F4C
.text$mn:00001F45 ; ---------------------------------------------------------------------------
.text$mn:00001F45
.text$mn:00001F45 loc_1F45:                               ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+66j
.text$mn:00001F45                 mov     [ebp+var_1C], 0
.text$mn:00001F4C
.text$mn:00001F4C loc_1F4C:                               ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+7Bj
.text$mn:00001F4C                 mov     ecx, [ebp+var_1C]
.text$mn:00001F4F                 mov     [ebp+var_28], ecx
.text$mn:00001F52                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F59                 mov     edx, [ebp+var_28]
.text$mn:00001F5C                 mov     [ebp+var_20], edx
.text$mn:00001F5F                 cmp     [ebp+var_20], 0
.text$mn:00001F63                 jz      short loc_1F76
.text$mn:00001F65                 mov     eax, [ebp+var_20]
.text$mn:00001F68                 push    eax             ; struct TiXmlAttributeA *
.text$mn:00001F69                 mov     ecx, [ebp+var_10]
.text$mn:00001F6C                 add     ecx, 44h ; 'D'  ; this
.text$mn:00001F6F                 call    ?Add@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z ; TiXmlAttributeSetA::Add(TiXmlAttributeA *)
.text$mn:00001F74                 jmp     short loc_1F95
.text$mn:00001F76 ; ---------------------------------------------------------------------------
.text$mn:00001F76
.text$mn:00001F76 loc_1F76:                               ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+9Bj
.text$mn:00001F76                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001F79                 call    ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ ; TiXmlNodeA::GetDocument(void)
.text$mn:00001F7E                 mov     [ebp+var_24], eax
.text$mn:00001F81                 cmp     [ebp+var_24], 0
.text$mn:00001F85                 jz      short loc_1F95
.text$mn:00001F87                 push    0               ; struct TiXmlParsingDataA *
.text$mn:00001F89                 push    0               ; char *
.text$mn:00001F8B                 push    3               ; int
.text$mn:00001F8D                 mov     ecx, [ebp+var_24] ; this
.text$mn:00001F90                 call    ?SetError@TiXmlDocumentA@@QAEXHPBDPAVTiXmlParsingDataA@@@Z ; TiXmlDocumentA::SetError(int,char const *,TiXmlParsingDataA *)
.text$mn:00001F95
.text$mn:00001F95 loc_1F95:                               ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+4Cj
.text$mn:00001F95                                         ; TiXmlElementA::SetAttribute(char const *,char const *)+ACj ...
.text$mn:00001F95                 mov     ecx, [ebp+var_C]
.text$mn:00001F98                 mov     large fs:0, ecx
.text$mn:00001F9F                 pop     ecx
.text$mn:00001FA0                 mov     esp, ebp
.text$mn:00001FA2                 pop     ebp
.text$mn:00001FA3                 retn    8
.text$mn:00001FA3 ?SetAttribute@TiXmlElementA@@QAEXPBD0@Z endp
.text$mn:00001FA3
.text$mn:00001FA3 ; ---------------------------------------------------------------------------
.text$mn:00001FA6                 align 4
.text$mn:00001FA8
.text$mn:00001FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001FA8
.text$mn:00001FA8 ; Attributes: bp-based frame
.text$mn:00001FA8
.text$mn:00001FA8 ; void __thiscall TiXmlElementA::SetAttribute(TiXmlElementA *this, const char *Str, int)
.text$mn:00001FA8                 public ?SetAttribute@TiXmlElementA@@QAEXPBDH@Z
.text$mn:00001FA8 ?SetAttribute@TiXmlElementA@@QAEXPBDH@Z proc near
.text$mn:00001FA8
.text$mn:00001FA8 var_48          = dword ptr -48h
.text$mn:00001FA8 Dest            = byte ptr -44h
.text$mn:00001FA8 var_4           = dword ptr -4
.text$mn:00001FA8 Str             = dword ptr  8
.text$mn:00001FA8 arg_4           = dword ptr  0Ch
.text$mn:00001FA8
.text$mn:00001FA8                 push    ebp
.text$mn:00001FA9                 mov     ebp, esp
.text$mn:00001FAB                 sub     esp, 48h
.text$mn:00001FAE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001FB3                 xor     eax, ebp
.text$mn:00001FB5                 mov     [ebp+var_4], eax
.text$mn:00001FB8                 mov     [ebp+var_48], ecx
.text$mn:00001FBB                 mov     eax, [ebp+arg_4]
.text$mn:00001FBE                 push    eax
.text$mn:00001FBF                 push    offset $SG96442 ; Format
.text$mn:00001FC4                 lea     ecx, [ebp+Dest]
.text$mn:00001FC7                 push    ecx             ; Dest
.text$mn:00001FC8                 call    _sprintf
.text$mn:00001FCD                 add     esp, 0Ch
.text$mn:00001FD0                 lea     edx, [ebp+Dest]
.text$mn:00001FD3                 push    edx             ; char *
.text$mn:00001FD4                 mov     eax, [ebp+Str]
.text$mn:00001FD7                 push    eax             ; Str
.text$mn:00001FD8                 mov     ecx, [ebp+var_48] ; this
.text$mn:00001FDB                 call    ?SetAttribute@TiXmlElementA@@QAEXPBD0@Z ; TiXmlElementA::SetAttribute(char const *,char const *)
.text$mn:00001FE0                 mov     ecx, [ebp+var_4]
.text$mn:00001FE3                 xor     ecx, ebp
.text$mn:00001FE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001FEA                 mov     esp, ebp
.text$mn:00001FEC                 pop     ebp
.text$mn:00001FED                 retn    8
.text$mn:00001FED ?SetAttribute@TiXmlElementA@@QAEXPBDH@Z endp
.text$mn:00001FED
.text$mn:00001FED ; ---------------------------------------------------------------------------
.text$mn:00001FF0                 db 8 dup(0CCh)
.text$mn:00001FF8
.text$mn:00001FF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001FF8
.text$mn:00001FF8 ; Attributes: bp-based frame
.text$mn:00001FF8
.text$mn:00001FF8 ; void __thiscall TiXmlElementA::RemoveAttribute(TiXmlElementA *this, const char *)
.text$mn:00001FF8                 public ?RemoveAttribute@TiXmlElementA@@QAEXPBD@Z
.text$mn:00001FF8 ?RemoveAttribute@TiXmlElementA@@QAEXPBD@Z proc near
.text$mn:00001FF8
.text$mn:00001FF8 var_14          = dword ptr -14h
.text$mn:00001FF8 var_10          = dword ptr -10h
.text$mn:00001FF8 var_C           = dword ptr -0Ch
.text$mn:00001FF8 var_8           = dword ptr -8
.text$mn:00001FF8 var_4           = dword ptr -4
.text$mn:00001FF8 arg_0           = dword ptr  8
.text$mn:00001FF8
.text$mn:00001FF8                 push    ebp
.text$mn:00001FF9                 mov     ebp, esp
.text$mn:00001FFB                 sub     esp, 14h
.text$mn:00001FFE                 mov     [ebp+var_C], ecx
.text$mn:00002001                 mov     eax, [ebp+arg_0]
.text$mn:00002004                 push    eax             ; char *
.text$mn:00002005                 mov     ecx, [ebp+var_C]
.text$mn:00002008                 add     ecx, 44h ; 'D'  ; this
.text$mn:0000200B                 call    ?Find@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@PBD@Z ; TiXmlAttributeSetA::Find(char const *)
.text$mn:00002010                 mov     [ebp+var_4], eax
.text$mn:00002013                 cmp     [ebp+var_4], 0
.text$mn:00002017                 jz      short loc_2054
.text$mn:00002019                 mov     ecx, [ebp+var_4]
.text$mn:0000201C                 push    ecx             ; struct TiXmlAttributeA *
.text$mn:0000201D                 mov     ecx, [ebp+var_C]
.text$mn:00002020
.text$mn:00002020 loc_2020:                               ; DATA XREF: .rdata:$SG97012o
.text$mn:00002020                                         ; .rdata:$SG97042o ...
.text$mn:00002020                 add     ecx, 44h ; 'D'  ; this
.text$mn:00002023                 call    ?Remove@TiXmlAttributeSetA@@QAEXPAVTiXmlAttributeA@@@Z ; TiXmlAttributeSetA::Remove(TiXmlAttributeA *)
.text$mn:00002028                 mov     edx, [ebp+var_4]
.text$mn:0000202B                 mov     [ebp+var_10], edx
.text$mn:0000202E                 mov     eax, [ebp+var_10]
.text$mn:00002031                 mov     [ebp+var_8], eax
.text$mn:00002034                 cmp     [ebp+var_8], 0
.text$mn:00002038                 jz      short loc_204D
.text$mn:0000203A                 push    1
.text$mn:0000203C                 mov     ecx, [ebp+var_8]
.text$mn:0000203F                 mov     edx, [ecx]
.text$mn:00002041                 mov     ecx, [ebp+var_8]
.text$mn:00002044                 mov     eax, [edx]
.text$mn:00002046                 call    eax
.text$mn:00002048                 mov     [ebp+var_14], eax
.text$mn:0000204B                 jmp     short loc_2054
.text$mn:0000204D ; ---------------------------------------------------------------------------
.text$mn:0000204D
.text$mn:0000204D loc_204D:                               ; CODE XREF: TiXmlElementA::RemoveAttribute(char const *)+40j
.text$mn:0000204D                 mov     [ebp+var_14], 0
.text$mn:00002054
.text$mn:00002054 loc_2054:                               ; CODE XREF: TiXmlElementA::RemoveAttribute(char const *)+1Fj
.text$mn:00002054                                         ; TiXmlElementA::RemoveAttribute(char const *)+53j
.text$mn:00002054                 mov     esp, ebp
.text$mn:00002056                 pop     ebp
.text$mn:00002057                 retn    4
.text$mn:00002057 ?RemoveAttribute@TiXmlElementA@@QAEXPBD@Z endp
.text$mn:00002057
.text$mn:00002057 ; ---------------------------------------------------------------------------
.text$mn:0000205A                 db 0Eh dup(0CCh)
.text$mn:00002068
.text$mn:00002068 ; =============== S U B R O U T I N E =======================================
.text$mn:00002068
.text$mn:00002068 ; Attributes: bp-based frame
.text$mn:00002068
.text$mn:00002068 ; struct TiXmlNodeA *__thiscall TiXmlElementA::Clone(TiXmlElementA *__hidden this)
.text$mn:00002068                 public ?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002068 ?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$mn:00002068                                         ; DATA XREF: .rdata:0000CD7Co
.text$mn:00002068
.text$mn:00002068 var_28          = dword ptr -28h
.text$mn:00002068 var_24          = dword ptr -24h
.text$mn:00002068 var_20          = dword ptr -20h
.text$mn:00002068 var_1C          = dword ptr -1Ch
.text$mn:00002068 var_18          = dword ptr -18h
.text$mn:00002068 var_14          = dword ptr -14h
.text$mn:00002068 var_10          = dword ptr -10h
.text$mn:00002068 var_C           = dword ptr -0Ch
.text$mn:00002068 var_4           = dword ptr -4
.text$mn:00002068
.text$mn:00002068                 push    ebp
.text$mn:00002069                 mov     ebp, esp
.text$mn:0000206B                 push    0FFFFFFFFh
.text$mn:0000206D                 push    offset __ehhandler$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002072                 mov     eax, large fs:0
.text$mn:00002078                 push    eax
.text$mn:00002079                 sub     esp, 1Ch
.text$mn:0000207C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002081                 xor     eax, ebp
.text$mn:00002083                 push    eax
.text$mn:00002084                 lea     eax, [ebp+var_C]
.text$mn:00002087                 mov     large fs:0, eax
.text$mn:0000208D                 mov     [ebp+var_1C], ecx
.text$mn:00002090                 push    94h ; 'ö'       ; unsigned int
.text$mn:00002095                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000209A                 add     esp, 4
.text$mn:0000209D                 mov     [ebp+var_20], eax
.text$mn:000020A0                 mov     [ebp+var_4], 0
.text$mn:000020A7                 cmp     [ebp+var_20], 0
.text$mn:000020AB                 jz      short loc_20C3
.text$mn:000020AD                 mov     ecx, [ebp+var_1C] ; this
.text$mn:000020B0                 call    ?Value@TiXmlNodeA@@QBEPBDXZ ; TiXmlNodeA::Value(void)
.text$mn:000020B5                 push    eax             ; Str
.text$mn:000020B6                 mov     ecx, [ebp+var_20]
.text$mn:000020B9                 call    ??0TiXmlElementA@@QAE@PBD@Z ; TiXmlElementA::TiXmlElementA(char const *)
.text$mn:000020BE                 mov     [ebp+var_24], eax
.text$mn:000020C1                 jmp     short loc_20CA
.text$mn:000020C3 ; ---------------------------------------------------------------------------
.text$mn:000020C3
.text$mn:000020C3 loc_20C3:                               ; CODE XREF: TiXmlElementA::Clone(void)+43j
.text$mn:000020C3                 mov     [ebp+var_24], 0
.text$mn:000020CA
.text$mn:000020CA loc_20CA:                               ; CODE XREF: TiXmlElementA::Clone(void)+59j
.text$mn:000020CA                 mov     eax, [ebp+var_24]
.text$mn:000020CD                 mov     [ebp+var_28], eax
.text$mn:000020D0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000020D7                 mov     ecx, [ebp+var_28]
.text$mn:000020DA                 mov     [ebp+var_18], ecx
.text$mn:000020DD                 cmp     [ebp+var_18], 0
.text$mn:000020E1                 jnz     short loc_20EA
.text$mn:000020E3                 xor     eax, eax
.text$mn:000020E5                 jmp     loc_2178
.text$mn:000020EA ; ---------------------------------------------------------------------------
.text$mn:000020EA
.text$mn:000020EA loc_20EA:                               ; CODE XREF: TiXmlElementA::Clone(void)+79j
.text$mn:000020EA                 mov     edx, [ebp+var_18]
.text$mn:000020ED                 push    edx             ; struct TiXmlNodeA *
.text$mn:000020EE                 mov     ecx, [ebp+var_1C] ; this
.text$mn:000020F1                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:000020F6                 mov     [ebp+var_10], 0
.text$mn:000020FD                 mov     ecx, [ebp+var_1C]
.text$mn:00002100                 add     ecx, 44h ; 'D'  ; this
.text$mn:00002103                 call    ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ ; TiXmlAttributeSetA::First(void)
.text$mn:00002108                 mov     [ebp+var_10], eax
.text$mn:0000210B                 jmp     short loc_2118
.text$mn:0000210D ; ---------------------------------------------------------------------------
.text$mn:0000210D
.text$mn:0000210D loc_210D:                               ; CODE XREF: TiXmlElementA::Clone(void)+D0j
.text$mn:0000210D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002110                 call    ?Next@TiXmlAttributeA@@QBEPAV1@XZ ; TiXmlAttributeA::Next(void)
.text$mn:00002115                 mov     [ebp+var_10], eax
.text$mn:00002118
.text$mn:00002118 loc_2118:                               ; CODE XREF: TiXmlElementA::Clone(void)+A3j
.text$mn:00002118                 cmp     [ebp+var_10], 0
.text$mn:0000211C                 jz      short loc_213A
.text$mn:0000211E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002121                 call    ?Value@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Value(void)
.text$mn:00002126                 push    eax             ; char *
.text$mn:00002127                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000212A                 call    ?Name@TiXmlAttributeA@@QBEPBDXZ ; TiXmlAttributeA::Name(void)
.text$mn:0000212F                 push    eax             ; Str
.text$mn:00002130                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002133                 call    ?SetAttribute@TiXmlElementA@@QAEXPBD0@Z ; TiXmlElementA::SetAttribute(char const *,char const *)
.text$mn:00002138                 jmp     short loc_210D
.text$mn:0000213A ; ---------------------------------------------------------------------------
.text$mn:0000213A
.text$mn:0000213A loc_213A:                               ; CODE XREF: TiXmlElementA::Clone(void)+B4j
.text$mn:0000213A                 mov     [ebp+var_14], 0
.text$mn:00002141                 mov     eax, [ebp+var_1C]
.text$mn:00002144                 mov     ecx, [eax+14h]
.text$mn:00002147                 mov     [ebp+var_14], ecx
.text$mn:0000214A                 jmp     short loc_2157
.text$mn:0000214C ; ---------------------------------------------------------------------------
.text$mn:0000214C
.text$mn:0000214C loc_214C:                               ; CODE XREF: TiXmlElementA::Clone(void)+10Bj
.text$mn:0000214C                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000214F                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00002154                 mov     [ebp+var_14], eax
.text$mn:00002157
.text$mn:00002157 loc_2157:                               ; CODE XREF: TiXmlElementA::Clone(void)+E2j
.text$mn:00002157                 cmp     [ebp+var_14], 0
.text$mn:0000215B                 jz      short loc_2175
.text$mn:0000215D                 mov     edx, [ebp+var_14]
.text$mn:00002160                 mov     eax, [edx]
.text$mn:00002162                 mov     ecx, [ebp+var_14]
.text$mn:00002165                 mov     edx, [eax+14h]
.text$mn:00002168                 call    edx
.text$mn:0000216A                 push    eax             ; struct TiXmlNodeA *
.text$mn:0000216B                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000216E                 call    ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z ; TiXmlNodeA::LinkEndChild(TiXmlNodeA *)
.text$mn:00002173                 jmp     short loc_214C
.text$mn:00002175 ; ---------------------------------------------------------------------------
.text$mn:00002175
.text$mn:00002175 loc_2175:                               ; CODE XREF: TiXmlElementA::Clone(void)+F3j
.text$mn:00002175                 mov     eax, [ebp+var_18]
.text$mn:00002178
.text$mn:00002178 loc_2178:                               ; CODE XREF: TiXmlElementA::Clone(void)+7Dj
.text$mn:00002178                 mov     ecx, [ebp+var_C]
.text$mn:0000217B                 mov     large fs:0, ecx
.text$mn:00002182                 pop     ecx
.text$mn:00002183                 mov     esp, ebp
.text$mn:00002185                 pop     ebp
.text$mn:00002186                 retn
.text$mn:00002186 ?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ endp
.text$mn:00002186
.text$mn:00002186 ; ---------------------------------------------------------------------------
.text$mn:00002187                 align 4
.text$mn:00002188
.text$mn:00002188 ; =============== S U B R O U T I N E =======================================
.text$mn:00002188
.text$mn:00002188 ; Attributes: bp-based frame
.text$mn:00002188
.text$mn:00002188 ; void __thiscall TiXmlElementA::Print(TiXmlElementA *this, FILE *File, int)
.text$mn:00002188                 public ?Print@TiXmlElementA@@UBEXPAU_iobuf@@H@Z
.text$mn:00002188 ?Print@TiXmlElementA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:00002188                                         ; DATA XREF: .rdata:0000CD6Co
.text$mn:00002188
.text$mn:00002188 var_10          = dword ptr -10h
.text$mn:00002188 var_C           = dword ptr -0Ch
.text$mn:00002188 var_8           = dword ptr -8
.text$mn:00002188 var_4           = dword ptr -4
.text$mn:00002188 File            = dword ptr  8
.text$mn:00002188 arg_4           = dword ptr  0Ch
.text$mn:00002188
.text$mn:00002188                 push    ebp
.text$mn:00002189                 mov     ebp, esp
.text$mn:0000218B                 sub     esp, 10h
.text$mn:0000218E                 mov     [ebp+var_4], ecx
.text$mn:00002191                 mov     [ebp+var_8], 0
.text$mn:00002198                 jmp     short loc_21A3
.text$mn:0000219A ; ---------------------------------------------------------------------------
.text$mn:0000219A
.text$mn:0000219A loc_219A:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+34j
.text$mn:0000219A                 mov     eax, [ebp+var_8]
.text$mn:0000219D                 add     eax, 1
.text$mn:000021A0                 mov     [ebp+var_8], eax
.text$mn:000021A3
.text$mn:000021A3 loc_21A3:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+10j
.text$mn:000021A3                 mov     ecx, [ebp+var_8]
.text$mn:000021A6                 cmp     ecx, [ebp+arg_4]
.text$mn:000021A9                 jge     short loc_21BE
.text$mn:000021AB                 push    offset $SG96468 ; "    "
.text$mn:000021B0                 mov     edx, [ebp+File]
.text$mn:000021B3                 push    edx             ; File
.text$mn:000021B4                 call    _fprintf
.text$mn:000021B9                 add     esp, 8
.text$mn:000021BC                 jmp     short loc_219A
.text$mn:000021BE ; ---------------------------------------------------------------------------
.text$mn:000021BE
.text$mn:000021BE loc_21BE:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+21j
.text$mn:000021BE                 mov     ecx, [ebp+var_4]
.text$mn:000021C1                 add     ecx, 1Ch
.text$mn:000021C4                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000021C9                 push    eax
.text$mn:000021CA                 push    offset $SG96469 ; "<%s"
.text$mn:000021CF                 mov     eax, [ebp+File]
.text$mn:000021D2                 push    eax             ; File
.text$mn:000021D3                 call    _fprintf
.text$mn:000021D8                 add     esp, 0Ch
.text$mn:000021DB                 mov     ecx, [ebp+var_4]
.text$mn:000021DE                 add     ecx, 44h ; 'D'  ; this
.text$mn:000021E1                 call    ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ ; TiXmlAttributeSetA::First(void)
.text$mn:000021E6                 mov     [ebp+var_10], eax
.text$mn:000021E9                 jmp     short loc_21F6
.text$mn:000021EB ; ---------------------------------------------------------------------------
.text$mn:000021EB
.text$mn:000021EB loc_21EB:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+9Aj
.text$mn:000021EB                 mov     ecx, [ebp+var_10] ; this
.text$mn:000021EE                 call    ?Next@TiXmlAttributeA@@QBEPAV1@XZ ; TiXmlAttributeA::Next(void)
.text$mn:000021F3                 mov     [ebp+var_10], eax
.text$mn:000021F6
.text$mn:000021F6 loc_21F6:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+61j
.text$mn:000021F6                 cmp     [ebp+var_10], 0
.text$mn:000021FA                 jz      short loc_2224
.text$mn:000021FC                 push    offset $SG96474 ; Format
.text$mn:00002201                 mov     ecx, [ebp+File]
.text$mn:00002204                 push    ecx             ; File
.text$mn:00002205                 call    _fprintf
.text$mn:0000220A                 add     esp, 8
.text$mn:0000220D                 mov     edx, [ebp+arg_4]
.text$mn:00002210                 push    edx
.text$mn:00002211                 mov     eax, [ebp+File]
.text$mn:00002214                 push    eax
.text$mn:00002215                 mov     ecx, [ebp+var_10]
.text$mn:00002218                 mov     edx, [ecx]
.text$mn:0000221A                 mov     ecx, [ebp+var_10]
.text$mn:0000221D                 mov     eax, [edx+4]
.text$mn:00002220                 call    eax
.text$mn:00002222                 jmp     short loc_21EB
.text$mn:00002224 ; ---------------------------------------------------------------------------
.text$mn:00002224
.text$mn:00002224 loc_2224:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+72j
.text$mn:00002224                 mov     ecx, [ebp+var_4]
.text$mn:00002227                 cmp     dword ptr [ecx+14h], 0
.text$mn:0000222B                 jnz     short loc_2243
.text$mn:0000222D                 push    offset $SG96477 ; " />"
.text$mn:00002232                 mov     edx, [ebp+File]
.text$mn:00002235                 push    edx             ; File
.text$mn:00002236                 call    _fprintf
.text$mn:0000223B                 add     esp, 8
.text$mn:0000223E                 jmp     loc_2370
.text$mn:00002243 ; ---------------------------------------------------------------------------
.text$mn:00002243
.text$mn:00002243 loc_2243:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+A3j
.text$mn:00002243                 mov     eax, [ebp+var_4]
.text$mn:00002246                 mov     ecx, [ebp+var_4]
.text$mn:00002249                 mov     edx, [eax+14h]
.text$mn:0000224C                 cmp     edx, [ecx+18h]
.text$mn:0000224F                 jnz     short loc_22B1
.text$mn:00002251                 mov     eax, [ebp+var_4]
.text$mn:00002254                 mov     ecx, [eax+14h]  ; this
.text$mn:00002257                 call    ?ToText@TiXmlNodeA@@QBEPAVTiXmlTextA@@XZ ; TiXmlNodeA::ToText(void)
.text$mn:0000225C                 test    eax, eax
.text$mn:0000225E                 jz      short loc_22B1
.text$mn:00002260                 push    offset $SG96480 ; Format
.text$mn:00002265                 mov     ecx, [ebp+File]
.text$mn:00002268                 push    ecx             ; File
.text$mn:00002269                 call    _fprintf
.text$mn:0000226E                 add     esp, 8
.text$mn:00002271                 mov     edx, [ebp+arg_4]
.text$mn:00002274                 add     edx, 1
.text$mn:00002277                 push    edx
.text$mn:00002278                 mov     eax, [ebp+File]
.text$mn:0000227B                 push    eax
.text$mn:0000227C                 mov     ecx, [ebp+var_4]
.text$mn:0000227F                 mov     edx, [ecx+14h]
.text$mn:00002282                 mov     eax, [ebp+var_4]
.text$mn:00002285                 mov     edx, [edx]
.text$mn:00002287                 mov     ecx, [eax+14h]
.text$mn:0000228A                 mov     eax, [edx+4]
.text$mn:0000228D                 call    eax
.text$mn:0000228F                 mov     ecx, [ebp+var_4]
.text$mn:00002292                 add     ecx, 1Ch
.text$mn:00002295                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000229A                 push    eax
.text$mn:0000229B                 push    offset $SG96481 ; "</%s>"
.text$mn:000022A0                 mov     ecx, [ebp+File]
.text$mn:000022A3                 push    ecx             ; File
.text$mn:000022A4                 call    _fprintf
.text$mn:000022A9                 add     esp, 0Ch
.text$mn:000022AC                 jmp     loc_2370
.text$mn:000022B1 ; ---------------------------------------------------------------------------
.text$mn:000022B1
.text$mn:000022B1 loc_22B1:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+C7j
.text$mn:000022B1                                         ; TiXmlElementA::Print(_iobuf *,int)+D6j
.text$mn:000022B1                 push    offset $SG96483 ; Format
.text$mn:000022B6                 mov     edx, [ebp+File]
.text$mn:000022B9                 push    edx             ; File
.text$mn:000022BA                 call    _fprintf
.text$mn:000022BF                 add     esp, 8
.text$mn:000022C2                 mov     eax, [ebp+var_4]
.text$mn:000022C5                 mov     ecx, [eax+14h]
.text$mn:000022C8                 mov     [ebp+var_C], ecx
.text$mn:000022CB                 jmp     short loc_22D8
.text$mn:000022CD ; ---------------------------------------------------------------------------
.text$mn:000022CD
.text$mn:000022CD loc_22CD:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+18Bj
.text$mn:000022CD                 mov     ecx, [ebp+var_C] ; this
.text$mn:000022D0                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:000022D5                 mov     [ebp+var_C], eax
.text$mn:000022D8
.text$mn:000022D8 loc_22D8:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+143j
.text$mn:000022D8                 cmp     [ebp+var_C], 0
.text$mn:000022DC                 jz      short loc_2315
.text$mn:000022DE                 mov     ecx, [ebp+var_C] ; this
.text$mn:000022E1                 call    ?ToText@TiXmlNodeA@@QBEPAVTiXmlTextA@@XZ ; TiXmlNodeA::ToText(void)
.text$mn:000022E6                 test    eax, eax
.text$mn:000022E8                 jnz     short loc_22FB
.text$mn:000022EA                 push    offset $SG96488 ; "\n"
.text$mn:000022EF                 mov     edx, [ebp+File]
.text$mn:000022F2                 push    edx             ; File
.text$mn:000022F3                 call    _fprintf
.text$mn:000022F8                 add     esp, 8
.text$mn:000022FB
.text$mn:000022FB loc_22FB:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+160j
.text$mn:000022FB                 mov     eax, [ebp+arg_4]
.text$mn:000022FE                 add     eax, 1
.text$mn:00002301                 push    eax
.text$mn:00002302                 mov     ecx, [ebp+File]
.text$mn:00002305                 push    ecx
.text$mn:00002306                 mov     edx, [ebp+var_C]
.text$mn:00002309                 mov     eax, [edx]
.text$mn:0000230B                 mov     ecx, [ebp+var_C]
.text$mn:0000230E                 mov     edx, [eax+4]
.text$mn:00002311                 call    edx
.text$mn:00002313                 jmp     short loc_22CD
.text$mn:00002315 ; ---------------------------------------------------------------------------
.text$mn:00002315
.text$mn:00002315 loc_2315:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+154j
.text$mn:00002315                 push    offset $SG96489 ; "\n"
.text$mn:0000231A                 mov     eax, [ebp+File]
.text$mn:0000231D                 push    eax             ; File
.text$mn:0000231E                 call    _fprintf
.text$mn:00002323                 add     esp, 8
.text$mn:00002326                 mov     [ebp+var_8], 0
.text$mn:0000232D                 jmp     short loc_2338
.text$mn:0000232F ; ---------------------------------------------------------------------------
.text$mn:0000232F
.text$mn:0000232F loc_232F:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+1C9j
.text$mn:0000232F                 mov     ecx, [ebp+var_8]
.text$mn:00002332                 add     ecx, 1
.text$mn:00002335                 mov     [ebp+var_8], ecx
.text$mn:00002338
.text$mn:00002338 loc_2338:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+1A5j
.text$mn:00002338                 mov     edx, [ebp+var_8]
.text$mn:0000233B                 cmp     edx, [ebp+arg_4]
.text$mn:0000233E                 jge     short loc_2353
.text$mn:00002340                 push    offset $SG96493 ; "    "
.text$mn:00002345                 mov     eax, [ebp+File]
.text$mn:00002348                 push    eax             ; File
.text$mn:00002349                 call    _fprintf
.text$mn:0000234E                 add     esp, 8
.text$mn:00002351                 jmp     short loc_232F
.text$mn:00002353 ; ---------------------------------------------------------------------------
.text$mn:00002353
.text$mn:00002353 loc_2353:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+1B6j
.text$mn:00002353                 mov     ecx, [ebp+var_4]
.text$mn:00002356                 add     ecx, 1Ch
.text$mn:00002359                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000235E                 push    eax
.text$mn:0000235F                 push    offset $SG96494 ; "</%s>"
.text$mn:00002364                 mov     ecx, [ebp+File]
.text$mn:00002367                 push    ecx             ; File
.text$mn:00002368                 call    _fprintf
.text$mn:0000236D                 add     esp, 0Ch
.text$mn:00002370
.text$mn:00002370 loc_2370:                               ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+B6j
.text$mn:00002370                                         ; TiXmlElementA::Print(_iobuf *,int)+124j
.text$mn:00002370                 mov     esp, ebp
.text$mn:00002372                 pop     ebp
.text$mn:00002373                 retn    8
.text$mn:00002373 ?Print@TiXmlElementA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00002373
.text$mn:00002373 ; ---------------------------------------------------------------------------
.text$mn:00002376                 align 4
.text$mn:00002378
.text$mn:00002378 ; =============== S U B R O U T I N E =======================================
.text$mn:00002378
.text$mn:00002378 ; Attributes: bp-based frame
.text$mn:00002378
.text$mn:00002378 ; protected: virtual void __thiscall TiXmlElementA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00002378                 public ?StreamOut@TiXmlElementA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00002378 ?StreamOut@TiXmlElementA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00002378                                         ; DATA XREF: .rdata:0000CD70o
.text$mn:00002378
.text$mn:00002378 var_C           = dword ptr -0Ch
.text$mn:00002378 var_8           = dword ptr -8
.text$mn:00002378 var_4           = dword ptr -4
.text$mn:00002378 arg_0           = dword ptr  8
.text$mn:00002378
.text$mn:00002378                 push    ebp
.text$mn:00002379                 mov     ebp, esp
.text$mn:0000237B                 sub     esp, 0Ch
.text$mn:0000237E                 mov     [ebp+var_C], ecx
.text$mn:00002381                 mov     eax, [ebp+var_C]
.text$mn:00002384                 add     eax, 1Ch
.text$mn:00002387                 push    eax
.text$mn:00002388                 push    offset $SG96547 ; Str
.text$mn:0000238D                 mov     ecx, [ebp+arg_0]
.text$mn:00002390                 push    ecx             ; int
.text$mn:00002391                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002396                 add     esp, 8
.text$mn:00002399                 push    eax
.text$mn:0000239A                 call    ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000239F                 add     esp, 8
.text$mn:000023A2                 mov     ecx, [ebp+var_C]
.text$mn:000023A5                 add     ecx, 44h ; 'D'  ; this
.text$mn:000023A8                 call    ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ ; TiXmlAttributeSetA::First(void)
.text$mn:000023AD                 mov     [ebp+var_4], eax
.text$mn:000023B0                 jmp     short loc_23BD
.text$mn:000023B2 ; ---------------------------------------------------------------------------
.text$mn:000023B2
.text$mn:000023B2 loc_23B2:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+6Dj
.text$mn:000023B2                 mov     ecx, [ebp+var_4] ; this
.text$mn:000023B5                 call    ?Next@TiXmlAttributeA@@QBEPAV1@XZ ; TiXmlAttributeA::Next(void)
.text$mn:000023BA                 mov     [ebp+var_4], eax
.text$mn:000023BD
.text$mn:000023BD loc_23BD:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+38j
.text$mn:000023BD                 cmp     [ebp+var_4], 0
.text$mn:000023C1                 jz      short loc_23E7
.text$mn:000023C3                 push    offset $SG96560 ; Str
.text$mn:000023C8                 mov     edx, [ebp+arg_0]
.text$mn:000023CB                 push    edx             ; int
.text$mn:000023CC                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000023D1                 add     esp, 8
.text$mn:000023D4                 mov     eax, [ebp+arg_0]
.text$mn:000023D7                 push    eax
.text$mn:000023D8                 mov     ecx, [ebp+var_4]
.text$mn:000023DB                 mov     edx, [ecx]
.text$mn:000023DD                 mov     ecx, [ebp+var_4]
.text$mn:000023E0                 mov     eax, [edx+8]
.text$mn:000023E3                 call    eax
.text$mn:000023E5                 jmp     short loc_23B2
.text$mn:000023E7 ; ---------------------------------------------------------------------------
.text$mn:000023E7
.text$mn:000023E7 loc_23E7:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+49j
.text$mn:000023E7                 mov     ecx, [ebp+var_C]
.text$mn:000023EA                 cmp     dword ptr [ecx+14h], 0
.text$mn:000023EE                 jz      short loc_2461
.text$mn:000023F0                 push    offset $SG96571 ; Str
.text$mn:000023F5                 mov     edx, [ebp+arg_0]
.text$mn:000023F8                 push    edx             ; int
.text$mn:000023F9                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000023FE                 add     esp, 8
.text$mn:00002401                 mov     eax, [ebp+var_C]
.text$mn:00002404                 mov     ecx, [eax+14h]
.text$mn:00002407                 mov     [ebp+var_8], ecx
.text$mn:0000240A                 jmp     short loc_2417
.text$mn:0000240C ; ---------------------------------------------------------------------------
.text$mn:0000240C
.text$mn:0000240C loc_240C:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+B6j
.text$mn:0000240C                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000240F                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00002414                 mov     [ebp+var_8], eax
.text$mn:00002417
.text$mn:00002417 loc_2417:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+92j
.text$mn:00002417                 cmp     [ebp+var_8], 0
.text$mn:0000241B                 jz      short loc_2430
.text$mn:0000241D                 mov     edx, [ebp+arg_0]
.text$mn:00002420                 push    edx
.text$mn:00002421                 mov     eax, [ebp+var_8]
.text$mn:00002424                 mov     edx, [eax]
.text$mn:00002426                 mov     ecx, [ebp+var_8]
.text$mn:00002429                 mov     eax, [edx+8]
.text$mn:0000242C                 call    eax
.text$mn:0000242E                 jmp     short loc_240C
.text$mn:00002430 ; ---------------------------------------------------------------------------
.text$mn:00002430
.text$mn:00002430 loc_2430:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+A3j
.text$mn:00002430                 push    offset $SG96610 ; Str
.text$mn:00002435                 mov     ecx, [ebp+var_C]
.text$mn:00002438                 add     ecx, 1Ch
.text$mn:0000243B                 push    ecx
.text$mn:0000243C                 push    offset $SG96611 ; Str
.text$mn:00002441                 mov     edx, [ebp+arg_0]
.text$mn:00002444                 push    edx             ; int
.text$mn:00002445                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000244A                 add     esp, 8
.text$mn:0000244D                 push    eax
.text$mn:0000244E                 call    ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00002453                 add     esp, 8
.text$mn:00002456                 push    eax             ; int
.text$mn:00002457                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000245C                 add     esp, 8
.text$mn:0000245F                 jmp     short loc_2472
.text$mn:00002461 ; ---------------------------------------------------------------------------
.text$mn:00002461
.text$mn:00002461 loc_2461:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+76j
.text$mn:00002461                 push    offset $SG96632 ; " />"
.text$mn:00002466                 mov     eax, [ebp+arg_0]
.text$mn:00002469                 push    eax             ; int
.text$mn:0000246A                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000246F                 add     esp, 8
.text$mn:00002472
.text$mn:00002472 loc_2472:                               ; CODE XREF: TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+E7j
.text$mn:00002472                 mov     esp, ebp
.text$mn:00002474                 pop     ebp
.text$mn:00002475                 retn    4
.text$mn:00002475 ?StreamOut@TiXmlElementA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:00002475
.text$mn:00002478
.text$mn:00002478 ; =============== S U B R O U T I N E =======================================
.text$mn:00002478
.text$mn:00002478 ; Attributes: bp-based frame
.text$mn:00002478
.text$mn:00002478 ; struct TiXmlNodeA *__thiscall TiXmlCommentA::Clone(TiXmlCommentA *__hidden this)
.text$mn:00002478                 public ?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002478 ?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$mn:00002478                                         ; DATA XREF: .rdata:0000CD9Co
.text$mn:00002478
.text$mn:00002478 var_20          = dword ptr -20h
.text$mn:00002478 var_1C          = dword ptr -1Ch
.text$mn:00002478 var_18          = dword ptr -18h
.text$mn:00002478 var_14          = dword ptr -14h
.text$mn:00002478 var_10          = dword ptr -10h
.text$mn:00002478 var_C           = dword ptr -0Ch
.text$mn:00002478 var_4           = dword ptr -4
.text$mn:00002478
.text$mn:00002478                 push    ebp
.text$mn:00002479                 mov     ebp, esp
.text$mn:0000247B                 push    0FFFFFFFFh
.text$mn:0000247D                 push    offset __ehhandler$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002482                 mov     eax, large fs:0
.text$mn:00002488                 push    eax
.text$mn:00002489                 sub     esp, 14h
.text$mn:0000248C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002491                 xor     eax, ebp
.text$mn:00002493                 push    eax
.text$mn:00002494                 lea     eax, [ebp+var_C]
.text$mn:00002497                 mov     large fs:0, eax
.text$mn:0000249D                 mov     [ebp+var_20], ecx
.text$mn:000024A0                 push    44h ; 'D'       ; unsigned int
.text$mn:000024A2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000024A7                 add     esp, 4
.text$mn:000024AA                 mov     [ebp+var_14], eax
.text$mn:000024AD                 mov     [ebp+var_4], 0
.text$mn:000024B4                 cmp     [ebp+var_14], 0
.text$mn:000024B8                 jz      short loc_24C7
.text$mn:000024BA                 mov     ecx, [ebp+var_14]
.text$mn:000024BD                 call    ??0TiXmlCommentA@@QAE@XZ ; TiXmlCommentA::TiXmlCommentA(void)
.text$mn:000024C2                 mov     [ebp+var_18], eax
.text$mn:000024C5                 jmp     short loc_24CE
.text$mn:000024C7 ; ---------------------------------------------------------------------------
.text$mn:000024C7
.text$mn:000024C7 loc_24C7:                               ; CODE XREF: TiXmlCommentA::Clone(void)+40j
.text$mn:000024C7                 mov     [ebp+var_18], 0
.text$mn:000024CE
.text$mn:000024CE loc_24CE:                               ; CODE XREF: TiXmlCommentA::Clone(void)+4Dj
.text$mn:000024CE                 mov     eax, [ebp+var_18]
.text$mn:000024D1                 mov     [ebp+var_1C], eax
.text$mn:000024D4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000024DB                 mov     ecx, [ebp+var_1C]
.text$mn:000024DE                 mov     [ebp+var_10], ecx
.text$mn:000024E1                 cmp     [ebp+var_10], 0
.text$mn:000024E5                 jnz     short loc_24EB
.text$mn:000024E7                 xor     eax, eax
.text$mn:000024E9                 jmp     short loc_24FA
.text$mn:000024EB ; ---------------------------------------------------------------------------
.text$mn:000024EB
.text$mn:000024EB loc_24EB:                               ; CODE XREF: TiXmlCommentA::Clone(void)+6Dj
.text$mn:000024EB                 mov     edx, [ebp+var_10]
.text$mn:000024EE                 push    edx             ; struct TiXmlNodeA *
.text$mn:000024EF                 mov     ecx, [ebp+var_20] ; this
.text$mn:000024F2                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:000024F7                 mov     eax, [ebp+var_10]
.text$mn:000024FA
.text$mn:000024FA loc_24FA:                               ; CODE XREF: TiXmlCommentA::Clone(void)+71j
.text$mn:000024FA                 mov     ecx, [ebp+var_C]
.text$mn:000024FD                 mov     large fs:0, ecx
.text$mn:00002504                 pop     ecx
.text$mn:00002505                 mov     esp, ebp
.text$mn:00002507                 pop     ebp
.text$mn:00002508                 retn
.text$mn:00002508 ?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ endp
.text$mn:00002508
.text$mn:00002508 ; ---------------------------------------------------------------------------
.text$mn:00002509                 db 0Fh dup(0CCh)
.text$mn:00002518
.text$mn:00002518 ; =============== S U B R O U T I N E =======================================
.text$mn:00002518
.text$mn:00002518 ; Attributes: bp-based frame
.text$mn:00002518
.text$mn:00002518 ; void __thiscall TiXmlCommentA::Print(TiXmlCommentA *this, FILE *File, int)
.text$mn:00002518                 public ?Print@TiXmlCommentA@@UBEXPAU_iobuf@@H@Z
.text$mn:00002518 ?Print@TiXmlCommentA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:00002518                                         ; DATA XREF: .rdata:0000CD8Co
.text$mn:00002518
.text$mn:00002518 var_8           = dword ptr -8
.text$mn:00002518 var_4           = dword ptr -4
.text$mn:00002518 File            = dword ptr  8
.text$mn:00002518 arg_4           = dword ptr  0Ch
.text$mn:00002518
.text$mn:00002518                 push    ebp
.text$mn:00002519                 mov     ebp, esp
.text$mn:0000251B                 sub     esp, 8
.text$mn:0000251E                 mov     [ebp+var_8], ecx
.text$mn:00002521                 mov     [ebp+var_4], 0
.text$mn:00002528                 jmp     short loc_2533
.text$mn:0000252A ; ---------------------------------------------------------------------------
.text$mn:0000252A
.text$mn:0000252A loc_252A:                               ; CODE XREF: TiXmlCommentA::Print(_iobuf *,int)+34j
.text$mn:0000252A                 mov     eax, [ebp+var_4]
.text$mn:0000252D                 add     eax, 1
.text$mn:00002530                 mov     [ebp+var_4], eax
.text$mn:00002533
.text$mn:00002533 loc_2533:                               ; CODE XREF: TiXmlCommentA::Print(_iobuf *,int)+10j
.text$mn:00002533                 mov     ecx, [ebp+var_4]
.text$mn:00002536                 cmp     ecx, [ebp+arg_4]
.text$mn:00002539                 jge     short loc_254E
.text$mn:0000253B                 mov     edx, [ebp+File]
.text$mn:0000253E                 push    edx             ; File
.text$mn:0000253F                 push    offset $SG96875 ; "    "
.text$mn:00002544                 call    _fputs
.text$mn:00002549                 add     esp, 8
.text$mn:0000254C                 jmp     short loc_252A
.text$mn:0000254E ; ---------------------------------------------------------------------------
.text$mn:0000254E
.text$mn:0000254E loc_254E:                               ; CODE XREF: TiXmlCommentA::Print(_iobuf *,int)+21j
.text$mn:0000254E                 mov     ecx, [ebp+var_8]
.text$mn:00002551                 add     ecx, 1Ch
.text$mn:00002554                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00002559                 push    eax
.text$mn:0000255A                 push    offset $SG96876 ; "<!--%s-->"
.text$mn:0000255F                 mov     eax, [ebp+File]
.text$mn:00002562                 push    eax             ; File
.text$mn:00002563                 call    _fprintf
.text$mn:00002568                 add     esp, 0Ch
.text$mn:0000256B                 mov     esp, ebp
.text$mn:0000256D                 pop     ebp
.text$mn:0000256E                 retn    8
.text$mn:0000256E ?Print@TiXmlCommentA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:0000256E
.text$mn:0000256E ; ---------------------------------------------------------------------------
.text$mn:00002571                 align 8
.text$mn:00002578
.text$mn:00002578 ; =============== S U B R O U T I N E =======================================
.text$mn:00002578
.text$mn:00002578 ; Attributes: bp-based frame
.text$mn:00002578
.text$mn:00002578 ; protected: virtual void __thiscall TiXmlCommentA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00002578                 public ?StreamOut@TiXmlCommentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00002578 ?StreamOut@TiXmlCommentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00002578                                         ; DATA XREF: .rdata:0000CD90o
.text$mn:00002578
.text$mn:00002578 var_4           = dword ptr -4
.text$mn:00002578 arg_0           = dword ptr  8
.text$mn:00002578
.text$mn:00002578                 push    ebp
.text$mn:00002579                 mov     ebp, esp
.text$mn:0000257B                 push    ecx
.text$mn:0000257C                 mov     [ebp+var_4], ecx
.text$mn:0000257F                 push    offset $SG96900 ; "<!--"
.text$mn:00002584                 mov     eax, [ebp+arg_0]
.text$mn:00002587                 push    eax             ; int
.text$mn:00002588                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000258D                 add     esp, 8
.text$mn:00002590                 mov     ecx, [ebp+arg_0]
.text$mn:00002593                 push    ecx
.text$mn:00002594                 mov     edx, [ebp+var_4]
.text$mn:00002597                 add     edx, 1Ch
.text$mn:0000259A                 push    edx
.text$mn:0000259B                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:000025A0                 add     esp, 8
.text$mn:000025A3                 push    offset $SG96909 ; "-->"
.text$mn:000025A8                 mov     eax, [ebp+arg_0]
.text$mn:000025AB                 push    eax             ; int
.text$mn:000025AC                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000025B1                 add     esp, 8
.text$mn:000025B4                 mov     esp, ebp
.text$mn:000025B6                 pop     ebp
.text$mn:000025B7                 retn    4
.text$mn:000025B7 ?StreamOut@TiXmlCommentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:000025B7
.text$mn:000025B7 ; ---------------------------------------------------------------------------
.text$mn:000025BA                 db 0Eh dup(0CCh)
.text$mn:000025C8
.text$mn:000025C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000025C8
.text$mn:000025C8 ; Attributes: bp-based frame
.text$mn:000025C8
.text$mn:000025C8 ; void __thiscall TiXmlTextA::Print(TiXmlTextA *this, FILE *File, int)
.text$mn:000025C8                 public ?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z
.text$mn:000025C8 ?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000025C8                                         ; DATA XREF: .rdata:0000CDACo
.text$mn:000025C8
.text$mn:000025C8 var_30          = dword ptr -30h
.text$mn:000025C8 var_2C          = byte ptr -2Ch
.text$mn:000025C8 var_10          = dword ptr -10h
.text$mn:000025C8 var_C           = dword ptr -0Ch
.text$mn:000025C8 var_4           = dword ptr -4
.text$mn:000025C8 File            = dword ptr  8
.text$mn:000025C8
.text$mn:000025C8                 push    ebp
.text$mn:000025C9                 mov     ebp, esp
.text$mn:000025CB                 push    0FFFFFFFFh
.text$mn:000025CD                 push    offset __ehhandler$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z
.text$mn:000025D2                 mov     eax, large fs:0
.text$mn:000025D8                 push    eax
.text$mn:000025D9                 sub     esp, 24h
.text$mn:000025DC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000025E1                 xor     eax, ebp
.text$mn:000025E3                 mov     [ebp+var_10], eax
.text$mn:000025E6                 push    eax
.text$mn:000025E7                 lea     eax, [ebp+var_C]
.text$mn:000025EA                 mov     large fs:0, eax
.text$mn:000025F0                 mov     [ebp+var_30], ecx
.text$mn:000025F3                 lea     ecx, [ebp+var_2C]
.text$mn:000025F6                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000025FB                 mov     [ebp+var_4], 0
.text$mn:00002602                 lea     eax, [ebp+var_2C]
.text$mn:00002605                 push    eax
.text$mn:00002606                 mov     ecx, [ebp+var_30]
.text$mn:00002609                 add     ecx, 1Ch
.text$mn:0000260C                 push    ecx
.text$mn:0000260D                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.text$mn:00002612                 add     esp, 8
.text$mn:00002615                 lea     ecx, [ebp+var_2C]
.text$mn:00002618                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000261D                 push    eax
.text$mn:0000261E                 push    offset $SG96925 ; Format
.text$mn:00002623                 mov     edx, [ebp+File]
.text$mn:00002626                 push    edx             ; File
.text$mn:00002627                 call    _fprintf
.text$mn:0000262C                 add     esp, 0Ch
.text$mn:0000262F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002636                 lea     ecx, [ebp+var_2C]
.text$mn:00002639                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000263E                 mov     ecx, [ebp+var_C]
.text$mn:00002641                 mov     large fs:0, ecx
.text$mn:00002648                 pop     ecx
.text$mn:00002649                 mov     ecx, [ebp+var_10]
.text$mn:0000264C                 xor     ecx, ebp
.text$mn:0000264E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002653                 mov     esp, ebp
.text$mn:00002655                 pop     ebp
.text$mn:00002656                 retn    8
.text$mn:00002656 ?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00002656
.text$mn:00002656 ; ---------------------------------------------------------------------------
.text$mn:00002659                 db 0Fh dup(0CCh)
.text$mn:00002668
.text$mn:00002668 ; =============== S U B R O U T I N E =======================================
.text$mn:00002668
.text$mn:00002668 ; Attributes: bp-based frame
.text$mn:00002668
.text$mn:00002668 ; struct TiXmlNodeA *__thiscall TiXmlTextA::Clone(TiXmlTextA *__hidden this)
.text$mn:00002668                 public ?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ
.text$mn:00002668 ?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ proc near
.text$mn:00002668                                         ; DATA XREF: .rdata:0000CDBCo
.text$mn:00002668
.text$mn:00002668 var_20          = dword ptr -20h
.text$mn:00002668 var_1C          = dword ptr -1Ch
.text$mn:00002668 var_18          = dword ptr -18h
.text$mn:00002668 var_14          = dword ptr -14h
.text$mn:00002668 var_10          = dword ptr -10h
.text$mn:00002668 var_C           = dword ptr -0Ch
.text$mn:00002668 var_4           = dword ptr -4
.text$mn:00002668
.text$mn:00002668                 push    ebp
.text$mn:00002669                 mov     ebp, esp
.text$mn:0000266B                 push    0FFFFFFFFh
.text$mn:0000266D                 push    offset __ehhandler$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ
.text$mn:00002672                 mov     eax, large fs:0
.text$mn:00002678                 push    eax
.text$mn:00002679                 sub     esp, 14h
.text$mn:0000267C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002681                 xor     eax, ebp
.text$mn:00002683                 push    eax
.text$mn:00002684                 lea     eax, [ebp+var_C]
.text$mn:00002687                 mov     large fs:0, eax
.text$mn:0000268D                 mov     [ebp+var_20], ecx
.text$mn:00002690                 mov     [ebp+var_10], 0
.text$mn:00002697                 push    44h ; 'D'       ; unsigned int
.text$mn:00002699                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000269E                 add     esp, 4
.text$mn:000026A1                 mov     [ebp+var_14], eax
.text$mn:000026A4                 mov     [ebp+var_4], 0
.text$mn:000026AB                 cmp     [ebp+var_14], 0
.text$mn:000026AF                 jz      short loc_26C3
.text$mn:000026B1                 push    offset $SG96938 ; char *
.text$mn:000026B6                 mov     ecx, [ebp+var_14]
.text$mn:000026B9                 call    ??0TiXmlTextA@@QAE@PBD@Z ; TiXmlTextA::TiXmlTextA(char const *)
.text$mn:000026BE                 mov     [ebp+var_18], eax
.text$mn:000026C1                 jmp     short loc_26CA
.text$mn:000026C3 ; ---------------------------------------------------------------------------
.text$mn:000026C3
.text$mn:000026C3 loc_26C3:                               ; CODE XREF: TiXmlTextA::Clone(void)+47j
.text$mn:000026C3                 mov     [ebp+var_18], 0
.text$mn:000026CA
.text$mn:000026CA loc_26CA:                               ; CODE XREF: TiXmlTextA::Clone(void)+59j
.text$mn:000026CA                 mov     eax, [ebp+var_18]
.text$mn:000026CD                 mov     [ebp+var_1C], eax
.text$mn:000026D0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000026D7                 mov     ecx, [ebp+var_1C]
.text$mn:000026DA                 mov     [ebp+var_10], ecx
.text$mn:000026DD                 cmp     [ebp+var_10], 0
.text$mn:000026E1                 jnz     short loc_26E7
.text$mn:000026E3                 xor     eax, eax
.text$mn:000026E5                 jmp     short loc_26F6
.text$mn:000026E7 ; ---------------------------------------------------------------------------
.text$mn:000026E7
.text$mn:000026E7 loc_26E7:                               ; CODE XREF: TiXmlTextA::Clone(void)+79j
.text$mn:000026E7                 mov     edx, [ebp+var_10]
.text$mn:000026EA                 push    edx             ; struct TiXmlNodeA *
.text$mn:000026EB                 mov     ecx, [ebp+var_20] ; this
.text$mn:000026EE                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:000026F3                 mov     eax, [ebp+var_10]
.text$mn:000026F6
.text$mn:000026F6 loc_26F6:                               ; CODE XREF: TiXmlTextA::Clone(void)+7Dj
.text$mn:000026F6                 mov     ecx, [ebp+var_C]
.text$mn:000026F9                 mov     large fs:0, ecx
.text$mn:00002700                 pop     ecx
.text$mn:00002701                 mov     esp, ebp
.text$mn:00002703                 pop     ebp
.text$mn:00002704                 retn
.text$mn:00002704 ?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ endp
.text$mn:00002704
.text$mn:00002704 ; ---------------------------------------------------------------------------
.text$mn:00002705                 align 4
.text$mn:00002708
.text$mn:00002708 ; =============== S U B R O U T I N E =======================================
.text$mn:00002708
.text$mn:00002708 ; Attributes: bp-based frame
.text$mn:00002708
.text$mn:00002708 ; protected: virtual void __thiscall TiXmlTextA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00002708                 public ?StreamOut@TiXmlTextA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00002708 ?StreamOut@TiXmlTextA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00002708                                         ; DATA XREF: .rdata:0000CDB0o
.text$mn:00002708
.text$mn:00002708 var_4           = dword ptr -4
.text$mn:00002708 arg_0           = dword ptr  8
.text$mn:00002708
.text$mn:00002708                 push    ebp
.text$mn:00002709                 mov     ebp, esp
.text$mn:0000270B                 push    ecx
.text$mn:0000270C                 mov     [ebp+var_4], ecx
.text$mn:0000270F                 mov     eax, [ebp+arg_0]
.text$mn:00002712                 push    eax
.text$mn:00002713                 mov     ecx, [ebp+var_4]
.text$mn:00002716                 add     ecx, 1Ch
.text$mn:00002719                 push    ecx
.text$mn:0000271A                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:0000271F                 add     esp, 8
.text$mn:00002722                 mov     esp, ebp
.text$mn:00002724                 pop     ebp
.text$mn:00002725                 retn    4
.text$mn:00002725 ?StreamOut@TiXmlTextA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:00002725
.text$mn:00002728
.text$mn:00002728 ; =============== S U B R O U T I N E =======================================
.text$mn:00002728
.text$mn:00002728 ; Attributes: bp-based frame
.text$mn:00002728
.text$mn:00002728 ; int __stdcall TiXmlDeclarationA::TiXmlDeclarationA(char *Str, char *, char *)
.text$mn:00002728                 public ??0TiXmlDeclarationA@@QAE@PBD00@Z
.text$mn:00002728 ??0TiXmlDeclarationA@@QAE@PBD00@Z proc near
.text$mn:00002728
.text$mn:00002728 var_10          = dword ptr -10h
.text$mn:00002728 var_C           = dword ptr -0Ch
.text$mn:00002728 var_4           = dword ptr -4
.text$mn:00002728 Str             = dword ptr  8
.text$mn:00002728 arg_4           = dword ptr  0Ch
.text$mn:00002728 arg_8           = dword ptr  10h
.text$mn:00002728
.text$mn:00002728                 push    ebp
.text$mn:00002729                 mov     ebp, esp
.text$mn:0000272B                 push    0FFFFFFFFh
.text$mn:0000272D                 push    offset __ehhandler$??0TiXmlDeclarationA@@QAE@PBD00@Z
.text$mn:00002732                 mov     eax, large fs:0
.text$mn:00002738                 push    eax
.text$mn:00002739                 push    ecx
.text$mn:0000273A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000273F                 xor     eax, ebp
.text$mn:00002741                 push    eax
.text$mn:00002742                 lea     eax, [ebp+var_C]
.text$mn:00002745                 mov     large fs:0, eax
.text$mn:0000274B                 mov     [ebp+var_10], ecx
.text$mn:0000274E                 push    5
.text$mn:00002750                 mov     ecx, [ebp+var_10]
.text$mn:00002753                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00002758                 mov     [ebp+var_4], 0
.text$mn:0000275F                 mov     eax, [ebp+var_10]
.text$mn:00002762                 mov     dword ptr [eax], offset ??_7TiXmlDeclarationA@@6B@ ; const TiXmlDeclarationA::`vftable'
.text$mn:00002768                 mov     ecx, [ebp+var_10]
.text$mn:0000276B                 add     ecx, 44h ; 'D'
.text$mn:0000276E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002773                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002777                 mov     ecx, [ebp+var_10]
.text$mn:0000277A                 add     ecx, 60h ; '`'
.text$mn:0000277D                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002782                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002786                 mov     ecx, [ebp+var_10]
.text$mn:00002789                 add     ecx, 7Ch ; '|'
.text$mn:0000278C                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002791                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002795                 mov     ecx, [ebp+Str]
.text$mn:00002798                 push    ecx             ; Str
.text$mn:00002799                 mov     ecx, [ebp+var_10]
.text$mn:0000279C                 add     ecx, 44h ; 'D'
.text$mn:0000279F                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:000027A4                 mov     edx, [ebp+arg_4]
.text$mn:000027A7                 push    edx             ; Str
.text$mn:000027A8                 mov     ecx, [ebp+var_10]
.text$mn:000027AB                 add     ecx, 60h ; '`'
.text$mn:000027AE                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:000027B3                 mov     eax, [ebp+arg_8]
.text$mn:000027B6                 push    eax             ; Str
.text$mn:000027B7                 mov     ecx, [ebp+var_10]
.text$mn:000027BA                 add     ecx, 7Ch ; '|'
.text$mn:000027BD                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:000027C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000027C9                 mov     eax, [ebp+var_10]
.text$mn:000027CC                 mov     ecx, [ebp+var_C]
.text$mn:000027CF                 mov     large fs:0, ecx
.text$mn:000027D6                 pop     ecx
.text$mn:000027D7                 mov     esp, ebp
.text$mn:000027D9                 pop     ebp
.text$mn:000027DA                 retn    0Ch
.text$mn:000027DA ??0TiXmlDeclarationA@@QAE@PBD00@Z endp
.text$mn:000027DA
.text$mn:000027DA ; ---------------------------------------------------------------------------
.text$mn:000027DD                 db 0Bh dup(0CCh)
.text$mn:000027E8
.text$mn:000027E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000027E8
.text$mn:000027E8 ; Attributes: bp-based frame
.text$mn:000027E8
.text$mn:000027E8 ; struct TiXmlNodeA *__thiscall TiXmlDeclarationA::Clone(TiXmlDeclarationA *__hidden this)
.text$mn:000027E8                 public ?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:000027E8 ?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$mn:000027E8                                         ; DATA XREF: .rdata:0000CDDCo
.text$mn:000027E8
.text$mn:000027E8 var_20          = dword ptr -20h
.text$mn:000027E8 var_1C          = dword ptr -1Ch
.text$mn:000027E8 var_18          = dword ptr -18h
.text$mn:000027E8 var_14          = dword ptr -14h
.text$mn:000027E8 var_10          = dword ptr -10h
.text$mn:000027E8 var_C           = dword ptr -0Ch
.text$mn:000027E8 var_4           = dword ptr -4
.text$mn:000027E8
.text$mn:000027E8                 push    ebp
.text$mn:000027E9                 mov     ebp, esp
.text$mn:000027EB                 push    0FFFFFFFFh
.text$mn:000027ED                 push    offset __ehhandler$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:000027F2                 mov     eax, large fs:0
.text$mn:000027F8                 push    eax
.text$mn:000027F9                 sub     esp, 14h
.text$mn:000027FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002801                 xor     eax, ebp
.text$mn:00002803                 push    eax
.text$mn:00002804                 lea     eax, [ebp+var_C]
.text$mn:00002807                 mov     large fs:0, eax
.text$mn:0000280D                 mov     [ebp+var_14], ecx
.text$mn:00002810                 push    98h ; 'ÿ'       ; unsigned int
.text$mn:00002815                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000281A                 add     esp, 4
.text$mn:0000281D                 mov     [ebp+var_18], eax
.text$mn:00002820                 mov     [ebp+var_4], 0
.text$mn:00002827                 cmp     [ebp+var_18], 0
.text$mn:0000282B                 jz      short loc_283A
.text$mn:0000282D                 mov     ecx, [ebp+var_18]
.text$mn:00002830                 call    ??0TiXmlDeclarationA@@QAE@XZ ; TiXmlDeclarationA::TiXmlDeclarationA(void)
.text$mn:00002835                 mov     [ebp+var_1C], eax
.text$mn:00002838                 jmp     short loc_2841
.text$mn:0000283A ; ---------------------------------------------------------------------------
.text$mn:0000283A
.text$mn:0000283A loc_283A:                               ; CODE XREF: TiXmlDeclarationA::Clone(void)+43j
.text$mn:0000283A                 mov     [ebp+var_1C], 0
.text$mn:00002841
.text$mn:00002841 loc_2841:                               ; CODE XREF: TiXmlDeclarationA::Clone(void)+50j
.text$mn:00002841                 mov     eax, [ebp+var_1C]
.text$mn:00002844                 mov     [ebp+var_20], eax
.text$mn:00002847                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000284E                 mov     ecx, [ebp+var_20]
.text$mn:00002851                 mov     [ebp+var_10], ecx
.text$mn:00002854                 cmp     [ebp+var_10], 0
.text$mn:00002858                 jnz     short loc_285E
.text$mn:0000285A                 xor     eax, eax
.text$mn:0000285C                 jmp     short loc_28A3
.text$mn:0000285E ; ---------------------------------------------------------------------------
.text$mn:0000285E
.text$mn:0000285E loc_285E:                               ; CODE XREF: TiXmlDeclarationA::Clone(void)+70j
.text$mn:0000285E                 mov     edx, [ebp+var_10]
.text$mn:00002861                 push    edx             ; struct TiXmlNodeA *
.text$mn:00002862                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002865                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:0000286A                 mov     eax, [ebp+var_14]
.text$mn:0000286D                 add     eax, 44h ; 'D'
.text$mn:00002870                 push    eax
.text$mn:00002871                 mov     ecx, [ebp+var_10]
.text$mn:00002874                 add     ecx, 44h ; 'D'
.text$mn:00002877                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000287C                 mov     ecx, [ebp+var_14]
.text$mn:0000287F                 add     ecx, 60h ; '`'
.text$mn:00002882                 push    ecx
.text$mn:00002883                 mov     ecx, [ebp+var_10]
.text$mn:00002886                 add     ecx, 60h ; '`'
.text$mn:00002889                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000288E                 mov     edx, [ebp+var_14]
.text$mn:00002891                 add     edx, 7Ch ; '|'
.text$mn:00002894                 push    edx
.text$mn:00002895                 mov     ecx, [ebp+var_10]
.text$mn:00002898                 add     ecx, 7Ch ; '|'
.text$mn:0000289B                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:000028A0                 mov     eax, [ebp+var_10]
.text$mn:000028A3
.text$mn:000028A3 loc_28A3:                               ; CODE XREF: TiXmlDeclarationA::Clone(void)+74j
.text$mn:000028A3                 mov     ecx, [ebp+var_C]
.text$mn:000028A6                 mov     large fs:0, ecx
.text$mn:000028AD                 pop     ecx
.text$mn:000028AE                 mov     esp, ebp
.text$mn:000028B0                 pop     ebp
.text$mn:000028B1                 retn
.text$mn:000028B1 ?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ endp
.text$mn:000028B1
.text$mn:000028B1 ; ---------------------------------------------------------------------------
.text$mn:000028B2                 align 8
.text$mn:000028B8
.text$mn:000028B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000028B8
.text$mn:000028B8 ; Attributes: bp-based frame
.text$mn:000028B8
.text$mn:000028B8 ; void __thiscall TiXmlDeclarationA::Print(TiXmlDeclarationA *this, FILE *File, int)
.text$mn:000028B8                 public ?Print@TiXmlDeclarationA@@UBEXPAU_iobuf@@H@Z
.text$mn:000028B8 ?Print@TiXmlDeclarationA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000028B8                                         ; DATA XREF: .rdata:0000CDCCo
.text$mn:000028B8
.text$mn:000028B8 var_4           = dword ptr -4
.text$mn:000028B8 File            = dword ptr  8
.text$mn:000028B8
.text$mn:000028B8                 push    ebp
.text$mn:000028B9                 mov     ebp, esp
.text$mn:000028BB                 push    ecx
.text$mn:000028BC                 mov     [ebp+var_4], ecx
.text$mn:000028BF                 push    offset $SG96951 ; "<?xml "
.text$mn:000028C4                 mov     eax, [ebp+File]
.text$mn:000028C7                 push    eax             ; File
.text$mn:000028C8                 call    _fprintf
.text$mn:000028CD                 add     esp, 8
.text$mn:000028D0                 mov     ecx, [ebp+var_4]
.text$mn:000028D3                 add     ecx, 44h ; 'D'
.text$mn:000028D6                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:000028DB                 movzx   ecx, al
.text$mn:000028DE                 test    ecx, ecx
.text$mn:000028E0                 jnz     short loc_28FF
.text$mn:000028E2                 mov     ecx, [ebp+var_4]
.text$mn:000028E5                 add     ecx, 44h ; 'D'
.text$mn:000028E8                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000028ED                 push    eax
.text$mn:000028EE                 push    offset $SG96953 ; "version=\"%s\" "
.text$mn:000028F3                 mov     edx, [ebp+File]
.text$mn:000028F6                 push    edx             ; File
.text$mn:000028F7                 call    _fprintf
.text$mn:000028FC                 add     esp, 0Ch
.text$mn:000028FF
.text$mn:000028FF loc_28FF:                               ; CODE XREF: TiXmlDeclarationA::Print(_iobuf *,int)+28j
.text$mn:000028FF                 mov     ecx, [ebp+var_4]
.text$mn:00002902                 add     ecx, 60h ; '`'
.text$mn:00002905                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:0000290A                 movzx   eax, al
.text$mn:0000290D                 test    eax, eax
.text$mn:0000290F                 jnz     short loc_292E
.text$mn:00002911                 mov     ecx, [ebp+var_4]
.text$mn:00002914                 add     ecx, 60h ; '`'
.text$mn:00002917                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000291C                 push    eax
.text$mn:0000291D                 push    offset $SG96955 ; "encoding=\"%s\" "
.text$mn:00002922                 mov     ecx, [ebp+File]
.text$mn:00002925                 push    ecx             ; File
.text$mn:00002926                 call    _fprintf
.text$mn:0000292B                 add     esp, 0Ch
.text$mn:0000292E
.text$mn:0000292E loc_292E:                               ; CODE XREF: TiXmlDeclarationA::Print(_iobuf *,int)+57j
.text$mn:0000292E                 mov     ecx, [ebp+var_4]
.text$mn:00002931                 add     ecx, 7Ch ; '|'
.text$mn:00002934                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00002939                 movzx   edx, al
.text$mn:0000293C                 test    edx, edx
.text$mn:0000293E                 jnz     short loc_295D
.text$mn:00002940                 mov     ecx, [ebp+var_4]
.text$mn:00002943                 add     ecx, 7Ch ; '|'
.text$mn:00002946                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000294B                 push    eax
.text$mn:0000294C                 push    offset $SG96957 ; "standalone=\"%s\" "
.text$mn:00002951                 mov     eax, [ebp+File]
.text$mn:00002954                 push    eax             ; File
.text$mn:00002955                 call    _fprintf
.text$mn:0000295A                 add     esp, 0Ch
.text$mn:0000295D
.text$mn:0000295D loc_295D:                               ; CODE XREF: TiXmlDeclarationA::Print(_iobuf *,int)+86j
.text$mn:0000295D                 push    offset $SG96958 ; Format
.text$mn:00002962                 mov     ecx, [ebp+File]
.text$mn:00002965                 push    ecx             ; File
.text$mn:00002966                 call    _fprintf
.text$mn:0000296B                 add     esp, 8
.text$mn:0000296E                 mov     esp, ebp
.text$mn:00002970                 pop     ebp
.text$mn:00002971                 retn    8
.text$mn:00002971 ?Print@TiXmlDeclarationA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00002971
.text$mn:00002971 ; ---------------------------------------------------------------------------
.text$mn:00002974                 align 8
.text$mn:00002978
.text$mn:00002978 ; =============== S U B R O U T I N E =======================================
.text$mn:00002978
.text$mn:00002978 ; Attributes: bp-based frame
.text$mn:00002978
.text$mn:00002978 ; protected: virtual void __thiscall TiXmlDeclarationA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00002978                 public ?StreamOut@TiXmlDeclarationA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00002978 ?StreamOut@TiXmlDeclarationA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00002978                                         ; DATA XREF: .rdata:0000CDD0o
.text$mn:00002978
.text$mn:00002978 var_4           = dword ptr -4
.text$mn:00002978 arg_0           = dword ptr  8
.text$mn:00002978
.text$mn:00002978                 push    ebp
.text$mn:00002979                 mov     ebp, esp
.text$mn:0000297B                 push    ecx
.text$mn:0000297C                 mov     [ebp+var_4], ecx
.text$mn:0000297F                 push    offset $SG96982 ; "<?xml "
.text$mn:00002984                 mov     eax, [ebp+arg_0]
.text$mn:00002987                 push    eax             ; int
.text$mn:00002988                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:0000298D                 add     esp, 8
.text$mn:00002990                 mov     ecx, [ebp+var_4]
.text$mn:00002993                 add     ecx, 44h ; 'D'
.text$mn:00002996                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:0000299B                 movzx   ecx, al
.text$mn:0000299E                 test    ecx, ecx
.text$mn:000029A0                 jnz     short loc_29D7
.text$mn:000029A2                 push    offset $SG97003 ; "version=\""
.text$mn:000029A7                 mov     edx, [ebp+arg_0]
.text$mn:000029AA                 push    edx             ; int
.text$mn:000029AB                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000029B0                 add     esp, 8
.text$mn:000029B3                 mov     eax, [ebp+arg_0]
.text$mn:000029B6                 push    eax
.text$mn:000029B7                 mov     ecx, [ebp+var_4]
.text$mn:000029BA                 add     ecx, 44h ; 'D'
.text$mn:000029BD                 push    ecx
.text$mn:000029BE                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:000029C3                 add     esp, 8
.text$mn:000029C6                 push    offset $SG97012 ; Str
.text$mn:000029CB                 mov     edx, [ebp+arg_0]
.text$mn:000029CE                 push    edx             ; int
.text$mn:000029CF                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000029D4                 add     esp, 8
.text$mn:000029D7
.text$mn:000029D7 loc_29D7:                               ; CODE XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+28j
.text$mn:000029D7                 mov     ecx, [ebp+var_4]
.text$mn:000029DA                 add     ecx, 60h ; '`'
.text$mn:000029DD                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:000029E2                 movzx   eax, al
.text$mn:000029E5                 test    eax, eax
.text$mn:000029E7                 jnz     short loc_2A1E
.text$mn:000029E9                 push    offset $SG97033 ; "encoding=\""
.text$mn:000029EE                 mov     ecx, [ebp+arg_0]
.text$mn:000029F1                 push    ecx             ; int
.text$mn:000029F2                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:000029F7                 add     esp, 8
.text$mn:000029FA                 mov     edx, [ebp+arg_0]
.text$mn:000029FD                 push    edx
.text$mn:000029FE                 mov     eax, [ebp+var_4]
.text$mn:00002A01                 add     eax, 60h ; '`'
.text$mn:00002A04                 push    eax
.text$mn:00002A05                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:00002A0A                 add     esp, 8
.text$mn:00002A0D                 push    offset $SG97042 ; Str
.text$mn:00002A12                 mov     ecx, [ebp+arg_0]
.text$mn:00002A15                 push    ecx             ; int
.text$mn:00002A16                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002A1B                 add     esp, 8
.text$mn:00002A1E
.text$mn:00002A1E loc_2A1E:                               ; CODE XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+6Fj
.text$mn:00002A1E                 mov     ecx, [ebp+var_4]
.text$mn:00002A21                 add     ecx, 7Ch ; '|'
.text$mn:00002A24                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00002A29                 movzx   edx, al
.text$mn:00002A2C                 test    edx, edx
.text$mn:00002A2E                 jnz     short loc_2A65
.text$mn:00002A30                 push    offset $SG97063 ; "standalone=\""
.text$mn:00002A35                 mov     eax, [ebp+arg_0]
.text$mn:00002A38                 push    eax             ; int
.text$mn:00002A39                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002A3E                 add     esp, 8
.text$mn:00002A41                 mov     ecx, [ebp+arg_0]
.text$mn:00002A44                 push    ecx
.text$mn:00002A45                 mov     edx, [ebp+var_4]
.text$mn:00002A48                 add     edx, 7Ch ; '|'
.text$mn:00002A4B                 push    edx
.text$mn:00002A4C                 call    ?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)
.text$mn:00002A51                 add     esp, 8
.text$mn:00002A54                 push    offset $SG97072 ; Str
.text$mn:00002A59                 mov     eax, [ebp+arg_0]
.text$mn:00002A5C                 push    eax             ; int
.text$mn:00002A5D                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002A62                 add     esp, 8
.text$mn:00002A65
.text$mn:00002A65 loc_2A65:                               ; CODE XREF: TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+B6j
.text$mn:00002A65                 push    offset $SG97081 ; Str
.text$mn:00002A6A                 mov     ecx, [ebp+arg_0]
.text$mn:00002A6D                 push    ecx             ; int
.text$mn:00002A6E                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002A73                 add     esp, 8
.text$mn:00002A76                 mov     esp, ebp
.text$mn:00002A78                 pop     ebp
.text$mn:00002A79                 retn    4
.text$mn:00002A79 ?StreamOut@TiXmlDeclarationA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:00002A79
.text$mn:00002A79 ; ---------------------------------------------------------------------------
.text$mn:00002A7C                 db 0Ch dup(0CCh)
.text$mn:00002A88
.text$mn:00002A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A88
.text$mn:00002A88 ; Attributes: bp-based frame
.text$mn:00002A88
.text$mn:00002A88 ; struct TiXmlNodeA *__thiscall TiXmlUnknownA::Clone(TiXmlUnknownA *__hidden this)
.text$mn:00002A88                 public ?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002A88 ?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$mn:00002A88                                         ; DATA XREF: .rdata:0000CDFCo
.text$mn:00002A88
.text$mn:00002A88 var_20          = dword ptr -20h
.text$mn:00002A88 var_1C          = dword ptr -1Ch
.text$mn:00002A88 var_18          = dword ptr -18h
.text$mn:00002A88 var_14          = dword ptr -14h
.text$mn:00002A88 var_10          = dword ptr -10h
.text$mn:00002A88 var_C           = dword ptr -0Ch
.text$mn:00002A88 var_4           = dword ptr -4
.text$mn:00002A88
.text$mn:00002A88                 push    ebp
.text$mn:00002A89                 mov     ebp, esp
.text$mn:00002A8B                 push    0FFFFFFFFh
.text$mn:00002A8D                 push    offset __ehhandler$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ
.text$mn:00002A92                 mov     eax, large fs:0
.text$mn:00002A98                 push    eax
.text$mn:00002A99                 sub     esp, 14h
.text$mn:00002A9C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002AA1                 xor     eax, ebp
.text$mn:00002AA3                 push    eax
.text$mn:00002AA4                 lea     eax, [ebp+var_C]
.text$mn:00002AA7                 mov     large fs:0, eax
.text$mn:00002AAD                 mov     [ebp+var_20], ecx
.text$mn:00002AB0                 push    44h ; 'D'       ; unsigned int
.text$mn:00002AB2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002AB7                 add     esp, 4
.text$mn:00002ABA                 mov     [ebp+var_14], eax
.text$mn:00002ABD                 mov     [ebp+var_4], 0
.text$mn:00002AC4                 cmp     [ebp+var_14], 0
.text$mn:00002AC8                 jz      short loc_2AD7
.text$mn:00002ACA                 mov     ecx, [ebp+var_14]
.text$mn:00002ACD                 call    ??0TiXmlUnknownA@@QAE@XZ ; TiXmlUnknownA::TiXmlUnknownA(void)
.text$mn:00002AD2                 mov     [ebp+var_18], eax
.text$mn:00002AD5                 jmp     short loc_2ADE
.text$mn:00002AD7 ; ---------------------------------------------------------------------------
.text$mn:00002AD7
.text$mn:00002AD7 loc_2AD7:                               ; CODE XREF: TiXmlUnknownA::Clone(void)+40j
.text$mn:00002AD7                 mov     [ebp+var_18], 0
.text$mn:00002ADE
.text$mn:00002ADE loc_2ADE:                               ; CODE XREF: TiXmlUnknownA::Clone(void)+4Dj
.text$mn:00002ADE                 mov     eax, [ebp+var_18]
.text$mn:00002AE1                 mov     [ebp+var_1C], eax
.text$mn:00002AE4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002AEB                 mov     ecx, [ebp+var_1C]
.text$mn:00002AEE                 mov     [ebp+var_10], ecx
.text$mn:00002AF1                 cmp     [ebp+var_10], 0
.text$mn:00002AF5                 jnz     short loc_2AFB
.text$mn:00002AF7                 xor     eax, eax
.text$mn:00002AF9                 jmp     short loc_2B0A
.text$mn:00002AFB ; ---------------------------------------------------------------------------
.text$mn:00002AFB
.text$mn:00002AFB loc_2AFB:                               ; CODE XREF: TiXmlUnknownA::Clone(void)+6Dj
.text$mn:00002AFB                 mov     edx, [ebp+var_10]
.text$mn:00002AFE                 push    edx             ; struct TiXmlNodeA *
.text$mn:00002AFF                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002B02                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:00002B07                 mov     eax, [ebp+var_10]
.text$mn:00002B0A
.text$mn:00002B0A loc_2B0A:                               ; CODE XREF: TiXmlUnknownA::Clone(void)+71j
.text$mn:00002B0A                 mov     ecx, [ebp+var_C]
.text$mn:00002B0D                 mov     large fs:0, ecx
.text$mn:00002B14                 pop     ecx
.text$mn:00002B15                 mov     esp, ebp
.text$mn:00002B17                 pop     ebp
.text$mn:00002B18                 retn
.text$mn:00002B18 ?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ endp
.text$mn:00002B18
.text$mn:00002B18 ; ---------------------------------------------------------------------------
.text$mn:00002B19                 db 0Fh dup(0CCh)
.text$mn:00002B28
.text$mn:00002B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B28
.text$mn:00002B28 ; Attributes: bp-based frame
.text$mn:00002B28
.text$mn:00002B28 ; void __thiscall TiXmlUnknownA::Print(TiXmlUnknownA *this, FILE *File, int)
.text$mn:00002B28                 public ?Print@TiXmlUnknownA@@UBEXPAU_iobuf@@H@Z
.text$mn:00002B28 ?Print@TiXmlUnknownA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:00002B28                                         ; DATA XREF: .rdata:0000CDECo
.text$mn:00002B28
.text$mn:00002B28 var_8           = dword ptr -8
.text$mn:00002B28 var_4           = dword ptr -4
.text$mn:00002B28 File            = dword ptr  8
.text$mn:00002B28 arg_4           = dword ptr  0Ch
.text$mn:00002B28
.text$mn:00002B28                 push    ebp
.text$mn:00002B29                 mov     ebp, esp
.text$mn:00002B2B                 sub     esp, 8
.text$mn:00002B2E                 mov     [ebp+var_8], ecx
.text$mn:00002B31                 mov     [ebp+var_4], 0
.text$mn:00002B38                 jmp     short loc_2B43
.text$mn:00002B3A ; ---------------------------------------------------------------------------
.text$mn:00002B3A
.text$mn:00002B3A loc_2B3A:                               ; CODE XREF: TiXmlUnknownA::Print(_iobuf *,int)+34j
.text$mn:00002B3A                 mov     eax, [ebp+var_4]
.text$mn:00002B3D                 add     eax, 1
.text$mn:00002B40                 mov     [ebp+var_4], eax
.text$mn:00002B43
.text$mn:00002B43 loc_2B43:                               ; CODE XREF: TiXmlUnknownA::Print(_iobuf *,int)+10j
.text$mn:00002B43                 mov     ecx, [ebp+var_4]
.text$mn:00002B46                 cmp     ecx, [ebp+arg_4]
.text$mn:00002B49                 jge     short loc_2B5E
.text$mn:00002B4B                 push    offset $SG97100 ; "    "
.text$mn:00002B50                 mov     edx, [ebp+File]
.text$mn:00002B53                 push    edx             ; File
.text$mn:00002B54                 call    _fprintf
.text$mn:00002B59                 add     esp, 8
.text$mn:00002B5C                 jmp     short loc_2B3A
.text$mn:00002B5E ; ---------------------------------------------------------------------------
.text$mn:00002B5E
.text$mn:00002B5E loc_2B5E:                               ; CODE XREF: TiXmlUnknownA::Print(_iobuf *,int)+21j
.text$mn:00002B5E                 mov     ecx, [ebp+var_8]
.text$mn:00002B61                 add     ecx, 1Ch
.text$mn:00002B64                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00002B69                 push    eax
.text$mn:00002B6A                 push    offset $SG97101 ; Format
.text$mn:00002B6F                 mov     eax, [ebp+File]
.text$mn:00002B72                 push    eax             ; File
.text$mn:00002B73                 call    _fprintf
.text$mn:00002B78                 add     esp, 0Ch
.text$mn:00002B7B                 mov     esp, ebp
.text$mn:00002B7D                 pop     ebp
.text$mn:00002B7E                 retn    8
.text$mn:00002B7E ?Print@TiXmlUnknownA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:00002B7E
.text$mn:00002B7E ; ---------------------------------------------------------------------------
.text$mn:00002B81                 align 8
.text$mn:00002B88
.text$mn:00002B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B88
.text$mn:00002B88 ; Attributes: bp-based frame
.text$mn:00002B88
.text$mn:00002B88 ; protected: virtual void __thiscall TiXmlUnknownA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00002B88                 public ?StreamOut@TiXmlUnknownA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00002B88 ?StreamOut@TiXmlUnknownA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00002B88                                         ; DATA XREF: .rdata:0000CDF0o
.text$mn:00002B88
.text$mn:00002B88 var_4           = dword ptr -4
.text$mn:00002B88 arg_0           = dword ptr  8
.text$mn:00002B88
.text$mn:00002B88                 push    ebp
.text$mn:00002B89                 mov     ebp, esp
.text$mn:00002B8B                 push    ecx
.text$mn:00002B8C                 mov     [ebp+var_4], ecx
.text$mn:00002B8F                 push    offset $SG97130 ; Str
.text$mn:00002B94                 mov     eax, [ebp+var_4]
.text$mn:00002B97                 add     eax, 1Ch
.text$mn:00002B9A                 push    eax
.text$mn:00002B9B                 push    offset $SG97131 ; Str
.text$mn:00002BA0                 mov     ecx, [ebp+arg_0]
.text$mn:00002BA3                 push    ecx             ; int
.text$mn:00002BA4                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002BA9                 add     esp, 8
.text$mn:00002BAC                 push    eax
.text$mn:00002BAD                 call    ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00002BB2                 add     esp, 8
.text$mn:00002BB5                 push    eax             ; int
.text$mn:00002BB6                 call    ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)
.text$mn:00002BBB                 add     esp, 8
.text$mn:00002BBE                 mov     esp, ebp
.text$mn:00002BC0                 pop     ebp
.text$mn:00002BC1                 retn    4
.text$mn:00002BC1 ?StreamOut@TiXmlUnknownA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:00002BC1
.text$mn:00002BC1 ; ---------------------------------------------------------------------------
.text$mn:00002BC4                 align 8
.text$mn:00002BC8
.text$mn:00002BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BC8
.text$mn:00002BC8 ; Attributes: bp-based frame
.text$mn:00002BC8
.text$mn:00002BC8 ; public: __thiscall TiXmlDocumentA::TiXmlDocumentA(void)
.text$mn:00002BC8                 public ??0TiXmlDocumentA@@QAE@XZ
.text$mn:00002BC8 ??0TiXmlDocumentA@@QAE@XZ proc near     ; CODE XREF: TiXmlDocumentA::Clone(void)+45p
.text$mn:00002BC8
.text$mn:00002BC8 var_10          = dword ptr -10h
.text$mn:00002BC8 var_C           = dword ptr -0Ch
.text$mn:00002BC8 var_4           = dword ptr -4
.text$mn:00002BC8
.text$mn:00002BC8                 push    ebp
.text$mn:00002BC9                 mov     ebp, esp
.text$mn:00002BCB                 push    0FFFFFFFFh
.text$mn:00002BCD                 push    offset __ehhandler$??0TiXmlDocumentA@@QAE@XZ
.text$mn:00002BD2                 mov     eax, large fs:0
.text$mn:00002BD8                 push    eax
.text$mn:00002BD9                 push    ecx
.text$mn:00002BDA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002BDF                 xor     eax, ebp
.text$mn:00002BE1                 push    eax
.text$mn:00002BE2                 lea     eax, [ebp+var_C]
.text$mn:00002BE5                 mov     large fs:0, eax
.text$mn:00002BEB                 mov     [ebp+var_10], ecx
.text$mn:00002BEE                 push    0
.text$mn:00002BF0                 mov     ecx, [ebp+var_10]
.text$mn:00002BF3                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00002BF8                 mov     [ebp+var_4], 0
.text$mn:00002BFF                 mov     eax, [ebp+var_10]
.text$mn:00002C02                 mov     dword ptr [eax], offset ??_7TiXmlDocumentA@@6B@ ; const TiXmlDocumentA::`vftable'
.text$mn:00002C08                 mov     ecx, [ebp+var_10]
.text$mn:00002C0B                 add     ecx, 4Ch ; 'L'
.text$mn:00002C0E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002C13                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002C17                 mov     ecx, [ebp+var_10]
.text$mn:00002C1A                 add     ecx, 6Ch ; 'l'
.text$mn:00002C1D                 call    ??0TiXmlCursorA@@QAE@XZ ; TiXmlCursorA::TiXmlCursorA(void)
.text$mn:00002C22                 mov     ecx, [ebp+var_10]
.text$mn:00002C25                 mov     dword ptr [ecx+68h], 4
.text$mn:00002C2C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002C2F                 call    ?ClearError@TiXmlDocumentA@@QAEXXZ ; TiXmlDocumentA::ClearError(void)
.text$mn:00002C34                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002C3B                 mov     eax, [ebp+var_10]
.text$mn:00002C3E                 mov     ecx, [ebp+var_C]
.text$mn:00002C41                 mov     large fs:0, ecx
.text$mn:00002C48                 pop     ecx
.text$mn:00002C49                 mov     esp, ebp
.text$mn:00002C4B                 pop     ebp
.text$mn:00002C4C                 retn
.text$mn:00002C4C ??0TiXmlDocumentA@@QAE@XZ endp
.text$mn:00002C4C
.text$mn:00002C4C ; ---------------------------------------------------------------------------
.text$mn:00002C4D                 db 0Bh dup(0CCh)
.text$mn:00002C58
.text$mn:00002C58 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C58
.text$mn:00002C58 ; Attributes: bp-based frame
.text$mn:00002C58
.text$mn:00002C58 ; int __stdcall TiXmlDocumentA::TiXmlDocumentA(char *Str)
.text$mn:00002C58                 public ??0TiXmlDocumentA@@QAE@PBD@Z
.text$mn:00002C58 ??0TiXmlDocumentA@@QAE@PBD@Z proc near
.text$mn:00002C58
.text$mn:00002C58 var_10          = dword ptr -10h
.text$mn:00002C58 var_C           = dword ptr -0Ch
.text$mn:00002C58 var_4           = dword ptr -4
.text$mn:00002C58 Str             = dword ptr  8
.text$mn:00002C58
.text$mn:00002C58                 push    ebp
.text$mn:00002C59                 mov     ebp, esp
.text$mn:00002C5B                 push    0FFFFFFFFh
.text$mn:00002C5D                 push    offset __ehhandler$??0TiXmlDocumentA@@QAE@PBD@Z
.text$mn:00002C62                 mov     eax, large fs:0
.text$mn:00002C68                 push    eax
.text$mn:00002C69                 push    ecx
.text$mn:00002C6A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002C6F                 xor     eax, ebp
.text$mn:00002C71                 push    eax
.text$mn:00002C72                 lea     eax, [ebp+var_C]
.text$mn:00002C75                 mov     large fs:0, eax
.text$mn:00002C7B                 mov     [ebp+var_10], ecx
.text$mn:00002C7E                 push    0
.text$mn:00002C80                 mov     ecx, [ebp+var_10]
.text$mn:00002C83                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00002C88                 mov     [ebp+var_4], 0
.text$mn:00002C8F                 mov     eax, [ebp+var_10]
.text$mn:00002C92                 mov     dword ptr [eax], offset ??_7TiXmlDocumentA@@6B@ ; const TiXmlDocumentA::`vftable'
.text$mn:00002C98                 mov     ecx, [ebp+var_10]
.text$mn:00002C9B                 add     ecx, 4Ch ; 'L'
.text$mn:00002C9E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002CA3                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002CA7                 mov     ecx, [ebp+var_10]
.text$mn:00002CAA                 add     ecx, 6Ch ; 'l'
.text$mn:00002CAD                 call    ??0TiXmlCursorA@@QAE@XZ ; TiXmlCursorA::TiXmlCursorA(void)
.text$mn:00002CB2                 mov     ecx, [ebp+var_10]
.text$mn:00002CB5                 mov     dword ptr [ecx+68h], 4
.text$mn:00002CBC                 mov     edx, [ebp+Str]
.text$mn:00002CBF                 push    edx             ; Str
.text$mn:00002CC0                 mov     ecx, [ebp+var_10]
.text$mn:00002CC3                 add     ecx, 1Ch
.text$mn:00002CC6                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00002CCB                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002CCE                 call    ?ClearError@TiXmlDocumentA@@QAEXXZ ; TiXmlDocumentA::ClearError(void)
.text$mn:00002CD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002CDA                 mov     eax, [ebp+var_10]
.text$mn:00002CDD                 mov     ecx, [ebp+var_C]
.text$mn:00002CE0                 mov     large fs:0, ecx
.text$mn:00002CE7                 pop     ecx
.text$mn:00002CE8                 mov     esp, ebp
.text$mn:00002CEA                 pop     ebp
.text$mn:00002CEB                 retn    4
.text$mn:00002CEB ??0TiXmlDocumentA@@QAE@PBD@Z endp
.text$mn:00002CEB
.text$mn:00002CEB ; ---------------------------------------------------------------------------
.text$mn:00002CEE                 db 0Ah dup(0CCh)
.text$mn:00002CF8
.text$mn:00002CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CF8
.text$mn:00002CF8 ; Attributes: bp-based frame
.text$mn:00002CF8
.text$mn:00002CF8 ; bool __thiscall TiXmlDocumentA::LoadFile(TiXmlDocumentA *__hidden this)
.text$mn:00002CF8                 public ?LoadFile@TiXmlDocumentA@@QAE_NXZ
.text$mn:00002CF8 ?LoadFile@TiXmlDocumentA@@QAE_NXZ proc near
.text$mn:00002CF8
.text$mn:00002CF8 var_18          = dword ptr -18h
.text$mn:00002CF8 var_14          = dword ptr -14h
.text$mn:00002CF8 var_E           = byte ptr -0Eh
.text$mn:00002CF8 var_D           = byte ptr -0Dh
.text$mn:00002CF8 var_C           = dword ptr -0Ch
.text$mn:00002CF8 var_4           = dword ptr -4
.text$mn:00002CF8
.text$mn:00002CF8                 push    ebp
.text$mn:00002CF9                 mov     ebp, esp
.text$mn:00002CFB                 push    0FFFFFFFFh
.text$mn:00002CFD                 push    offset __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NXZ
.text$mn:00002D02                 mov     eax, large fs:0
.text$mn:00002D08                 push    eax
.text$mn:00002D09                 sub     esp, 0Ch
.text$mn:00002D0C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002D11                 xor     eax, ebp
.text$mn:00002D13                 push    eax
.text$mn:00002D14                 lea     eax, [ebp+var_C]
.text$mn:00002D17                 mov     large fs:0, eax
.text$mn:00002D1D                 mov     [ebp+var_18], ecx
.text$mn:00002D20                 mov     eax, [ebp+var_18]
.text$mn:00002D23                 add     eax, 1Ch
.text$mn:00002D26                 push    eax
.text$mn:00002D27                 lea     ecx, [ebp+var_14]
.text$mn:00002D2A                 call    ??0StringToBuffer@TiXmlBaseA@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00002D2F                 mov     [ebp+var_4], 0
.text$mn:00002D36                 cmp     [ebp+var_14], 0
.text$mn:00002D3A                 jz      short loc_2D67
.text$mn:00002D3C                 mov     ecx, [ebp+var_14]
.text$mn:00002D3F                 push    ecx             ; char *
.text$mn:00002D40                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002D43                 call    ?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z ; TiXmlDocumentA::LoadFile(char const *)
.text$mn:00002D48                 movzx   edx, al
.text$mn:00002D4B                 test    edx, edx
.text$mn:00002D4D                 jz      short loc_2D67
.text$mn:00002D4F                 mov     [ebp+var_D], 1
.text$mn:00002D53                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D5A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002D5D                 call    ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$mn:00002D62                 mov     al, [ebp+var_D]
.text$mn:00002D65                 jmp     short loc_2D7D
.text$mn:00002D67 ; ---------------------------------------------------------------------------
.text$mn:00002D67
.text$mn:00002D67 loc_2D67:                               ; CODE XREF: TiXmlDocumentA::LoadFile(void)+42j
.text$mn:00002D67                                         ; TiXmlDocumentA::LoadFile(void)+55j
.text$mn:00002D67                 mov     [ebp+var_E], 0
.text$mn:00002D6B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D72                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002D75                 call    ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$mn:00002D7A                 mov     al, [ebp+var_E]
.text$mn:00002D7D
.text$mn:00002D7D loc_2D7D:                               ; CODE XREF: TiXmlDocumentA::LoadFile(void)+6Dj
.text$mn:00002D7D                 mov     ecx, [ebp+var_C]
.text$mn:00002D80                 mov     large fs:0, ecx
.text$mn:00002D87                 pop     ecx
.text$mn:00002D88                 mov     esp, ebp
.text$mn:00002D8A                 pop     ebp
.text$mn:00002D8B                 retn
.text$mn:00002D8B ?LoadFile@TiXmlDocumentA@@QAE_NXZ endp
.text$mn:00002D8B
.text$mn:00002D8B ; ---------------------------------------------------------------------------
.text$mn:00002D8C                 db 0Ch dup(0CCh)
.text$mn:00002D98
.text$mn:00002D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D98
.text$mn:00002D98 ; Attributes: bp-based frame
.text$mn:00002D98
.text$mn:00002D98 ; bool __thiscall TiXmlDocumentA::SaveFile(TiXmlDocumentA *__hidden this)
.text$mn:00002D98                 public ?SaveFile@TiXmlDocumentA@@QBE_NXZ
.text$mn:00002D98 ?SaveFile@TiXmlDocumentA@@QBE_NXZ proc near
.text$mn:00002D98
.text$mn:00002D98 var_18          = dword ptr -18h
.text$mn:00002D98 var_14          = dword ptr -14h
.text$mn:00002D98 var_E           = byte ptr -0Eh
.text$mn:00002D98 var_D           = byte ptr -0Dh
.text$mn:00002D98 var_C           = dword ptr -0Ch
.text$mn:00002D98 var_4           = dword ptr -4
.text$mn:00002D98
.text$mn:00002D98                 push    ebp
.text$mn:00002D99                 mov     ebp, esp
.text$mn:00002D9B                 push    0FFFFFFFFh
.text$mn:00002D9D                 push    offset __ehhandler$?SaveFile@TiXmlDocumentA@@QBE_NXZ
.text$mn:00002DA2                 mov     eax, large fs:0
.text$mn:00002DA8                 push    eax
.text$mn:00002DA9                 sub     esp, 0Ch
.text$mn:00002DAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002DB1                 xor     eax, ebp
.text$mn:00002DB3                 push    eax
.text$mn:00002DB4                 lea     eax, [ebp+var_C]
.text$mn:00002DB7                 mov     large fs:0, eax
.text$mn:00002DBD                 mov     [ebp+var_18], ecx
.text$mn:00002DC0                 mov     eax, [ebp+var_18]
.text$mn:00002DC3                 add     eax, 1Ch
.text$mn:00002DC6                 push    eax
.text$mn:00002DC7                 lea     ecx, [ebp+var_14]
.text$mn:00002DCA                 call    ??0StringToBuffer@TiXmlBaseA@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00002DCF                 mov     [ebp+var_4], 0
.text$mn:00002DD6                 cmp     [ebp+var_14], 0
.text$mn:00002DDA                 jz      short loc_2E07
.text$mn:00002DDC                 mov     ecx, [ebp+var_14]
.text$mn:00002DDF                 push    ecx             ; char *
.text$mn:00002DE0                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002DE3                 call    ?SaveFile@TiXmlDocumentA@@QBE_NPBD@Z ; TiXmlDocumentA::SaveFile(char const *)
.text$mn:00002DE8                 movzx   edx, al
.text$mn:00002DEB                 test    edx, edx
.text$mn:00002DED                 jz      short loc_2E07
.text$mn:00002DEF                 mov     [ebp+var_D], 1
.text$mn:00002DF3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DFA                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002DFD                 call    ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$mn:00002E02                 mov     al, [ebp+var_D]
.text$mn:00002E05                 jmp     short loc_2E1D
.text$mn:00002E07 ; ---------------------------------------------------------------------------
.text$mn:00002E07
.text$mn:00002E07 loc_2E07:                               ; CODE XREF: TiXmlDocumentA::SaveFile(void)+42j
.text$mn:00002E07                                         ; TiXmlDocumentA::SaveFile(void)+55j
.text$mn:00002E07                 mov     [ebp+var_E], 0
.text$mn:00002E0B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002E12                 lea     ecx, [ebp+var_14] ; this
.text$mn:00002E15                 call    ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$mn:00002E1A                 mov     al, [ebp+var_E]
.text$mn:00002E1D
.text$mn:00002E1D loc_2E1D:                               ; CODE XREF: TiXmlDocumentA::SaveFile(void)+6Dj
.text$mn:00002E1D                 mov     ecx, [ebp+var_C]
.text$mn:00002E20                 mov     large fs:0, ecx
.text$mn:00002E27                 pop     ecx
.text$mn:00002E28                 mov     esp, ebp
.text$mn:00002E2A                 pop     ebp
.text$mn:00002E2B                 retn
.text$mn:00002E2B ?SaveFile@TiXmlDocumentA@@QBE_NXZ endp
.text$mn:00002E2B
.text$mn:00002E2B ; ---------------------------------------------------------------------------
.text$mn:00002E2C                 db 0Ch dup(0CCh)
.text$mn:00002E38
.text$mn:00002E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E38
.text$mn:00002E38 ; Attributes: bp-based frame
.text$mn:00002E38
.text$mn:00002E38 ; bool __thiscall TiXmlDocumentA::LoadFile(TiXmlDocumentA *this, const char *)
.text$mn:00002E38                 public ?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z
.text$mn:00002E38 ?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z proc near
.text$mn:00002E38                                         ; CODE XREF: TiXmlDocumentA::LoadFile(void)+4Bp
.text$mn:00002E38
.text$mn:00002E38 var_840         = dword ptr -840h
.text$mn:00002E38 var_83C         = dword ptr -83Ch
.text$mn:00002E38 var_836         = byte ptr -836h
.text$mn:00002E38 var_835         = byte ptr -835h
.text$mn:00002E38 File            = dword ptr -834h
.text$mn:00002E38 var_830         = dword ptr -830h
.text$mn:00002E38 var_82C         = byte ptr -82Ch
.text$mn:00002E38 Buf             = byte ptr -810h
.text$mn:00002E38 var_10          = dword ptr -10h
.text$mn:00002E38 var_C           = dword ptr -0Ch
.text$mn:00002E38 var_4           = dword ptr -4
.text$mn:00002E38 Str             = dword ptr  8
.text$mn:00002E38
.text$mn:00002E38                 push    ebp
.text$mn:00002E39                 mov     ebp, esp
.text$mn:00002E3B                 push    0FFFFFFFFh
.text$mn:00002E3D                 push    offset __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z
.text$mn:00002E42                 mov     eax, large fs:0
.text$mn:00002E48                 push    eax
.text$mn:00002E49                 sub     esp, 834h
.text$mn:00002E4F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002E54                 xor     eax, ebp
.text$mn:00002E56                 mov     [ebp+var_10], eax
.text$mn:00002E59                 push    eax
.text$mn:00002E5A                 lea     eax, [ebp+var_C]
.text$mn:00002E5D                 mov     large fs:0, eax
.text$mn:00002E63                 mov     [ebp+var_830], ecx
.text$mn:00002E69                 mov     ecx, [ebp+var_830] ; this
.text$mn:00002E6F                 call    ?Clear@TiXmlNodeA@@QAEXXZ ; TiXmlNodeA::Clear(void)
.text$mn:00002E74                 mov     ecx, [ebp+var_830]
.text$mn:00002E7A                 add     ecx, 4          ; this
.text$mn:00002E7D                 call    ?Clear@TiXmlCursorA@@QAEXXZ ; TiXmlCursorA::Clear(void)
.text$mn:00002E82                 mov     eax, [ebp+Str]
.text$mn:00002E85                 push    eax             ; Str
.text$mn:00002E86                 mov     ecx, [ebp+var_830]
.text$mn:00002E8C                 add     ecx, 1Ch
.text$mn:00002E8F                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00002E94                 push    offset $SG96676 ; Mode
.text$mn:00002E99                 mov     ecx, [ebp+var_830]
.text$mn:00002E9F                 add     ecx, 1Ch
.text$mn:00002EA2                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00002EA7                 push    eax             ; Filename
.text$mn:00002EA8                 call    _fopen
.text$mn:00002EAD                 add     esp, 8
.text$mn:00002EB0                 mov     [ebp+File], eax
.text$mn:00002EB6                 cmp     [ebp+File], 0
.text$mn:00002EBD                 jz      loc_3020
.text$mn:00002EC3                 mov     [ebp+var_83C], 0
.text$mn:00002ECD                 push    2               ; Origin
.text$mn:00002ECF                 push    0               ; Offset
.text$mn:00002ED1                 mov     ecx, [ebp+File]
.text$mn:00002ED7                 push    ecx             ; File
.text$mn:00002ED8                 call    _fseek
.text$mn:00002EDD                 add     esp, 0Ch
.text$mn:00002EE0                 mov     edx, [ebp+File]
.text$mn:00002EE6                 push    edx             ; File
.text$mn:00002EE7                 call    _ftell
.text$mn:00002EEC                 add     esp, 4
.text$mn:00002EEF                 mov     [ebp+var_83C], eax
.text$mn:00002EF5                 push    0               ; Origin
.text$mn:00002EF7                 push    0               ; Offset
.text$mn:00002EF9                 mov     eax, [ebp+File]
.text$mn:00002EFF                 push    eax             ; File
.text$mn:00002F00                 call    _fseek
.text$mn:00002F05                 add     esp, 0Ch
.text$mn:00002F08                 cmp     [ebp+var_83C], 0
.text$mn:00002F0F                 jnz     short loc_2F27
.text$mn:00002F11                 mov     ecx, [ebp+File]
.text$mn:00002F17                 push    ecx             ; File
.text$mn:00002F18                 call    _fclose
.text$mn:00002F1D                 add     esp, 4
.text$mn:00002F20                 xor     al, al
.text$mn:00002F22                 jmp     loc_3033
.text$mn:00002F27 ; ---------------------------------------------------------------------------
.text$mn:00002F27
.text$mn:00002F27 loc_2F27:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+D7j
.text$mn:00002F27                 lea     ecx, [ebp+var_82C]
.text$mn:00002F2D                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002F32                 mov     [ebp+var_4], 0
.text$mn:00002F39
.text$mn:00002F39 loc_2F39:                               ; DATA XREF: .rdata:$SG96611o
.text$mn:00002F39                 mov     edx, [ebp+var_83C]
.text$mn:00002F3F                 push    edx
.text$mn:00002F40                 lea     ecx, [ebp+var_82C]
.text$mn:00002F46                 call    ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)
.text$mn:00002F4B                 mov     [ebp+var_840], 800h
.text$mn:00002F55
.text$mn:00002F55 loc_2F55:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+14Ej
.text$mn:00002F55                 mov     eax, [ebp+File]
.text$mn:00002F5B                 push    eax             ; File
.text$mn:00002F5C                 push    800h            ; MaxCount
.text$mn:00002F61                 lea     ecx, [ebp+Buf]
.text$mn:00002F67                 push    ecx             ; Buf
.text$mn:00002F68                 call    _fgets
.text$mn:00002F6D                 add     esp, 0Ch
.text$mn:00002F70                 test    eax, eax
.text$mn:00002F72                 jz      short loc_2F88
.text$mn:00002F74                 lea     edx, [ebp+Buf]
.text$mn:00002F7A                 push    edx             ; Str
.text$mn:00002F7B                 lea     ecx, [ebp+var_82C]
.text$mn:00002F81                 call    ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(char const *)
.text$mn:00002F86                 jmp     short loc_2F55
.text$mn:00002F88 ; ---------------------------------------------------------------------------
.text$mn:00002F88
.text$mn:00002F88 loc_2F88:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+13Aj
.text$mn:00002F88                 mov     eax, [ebp+File]
.text$mn:00002F8E                 push    eax             ; File
.text$mn:00002F8F                 call    _fclose
.text$mn:00002F94                 add     esp, 4
.text$mn:00002F97                 push    0
.text$mn:00002F99                 lea     ecx, [ebp+var_82C]
.text$mn:00002F9F                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00002FA4                 push    eax
.text$mn:00002FA5                 mov     ecx, [ebp+var_830]
.text$mn:00002FAB                 mov     edx, [ecx]
.text$mn:00002FAD                 mov     ecx, [ebp+var_830]
.text$mn:00002FB3                 mov     eax, [edx+0Ch]
.text$mn:00002FB6                 call    eax
.text$mn:00002FB8                 mov     ecx, [ebp+var_830]
.text$mn:00002FBE                 call    ?Error@TiXmlDocumentA@@QBE_NXZ ; TiXmlDocumentA::Error(void)
.text$mn:00002FC3                 movzx   ecx, al
.text$mn:00002FC6                 test    ecx, ecx
.text$mn:00002FC8                 jz      short loc_2FED
.text$mn:00002FCA                 mov     [ebp+var_836], 0
.text$mn:00002FD1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002FD8                 lea     ecx, [ebp+var_82C]
.text$mn:00002FDE                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00002FE3                 mov     al, [ebp+var_836]
.text$mn:00002FE9                 jmp     short loc_3033
.text$mn:00002FEB ; ---------------------------------------------------------------------------
.text$mn:00002FEB                 jmp     short loc_300E
.text$mn:00002FED ; ---------------------------------------------------------------------------
.text$mn:00002FED
.text$mn:00002FED loc_2FED:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+190j
.text$mn:00002FED                 mov     [ebp+var_835], 1
.text$mn:00002FF4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002FFB                 lea     ecx, [ebp+var_82C]
.text$mn:00003001                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003006                 mov     al, [ebp+var_835]
.text$mn:0000300C                 jmp     short loc_3033
.text$mn:0000300E ; ---------------------------------------------------------------------------
.text$mn:0000300E
.text$mn:0000300E loc_300E:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+1B3j
.text$mn:0000300E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003015                 lea     ecx, [ebp+var_82C]
.text$mn:0000301B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003020
.text$mn:00003020 loc_3020:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+85j
.text$mn:00003020                 push    0               ; struct TiXmlParsingDataA *
.text$mn:00003022                 push    0               ; char *
.text$mn:00003024                 push    2               ; int
.text$mn:00003026                 mov     ecx, [ebp+var_830] ; this
.text$mn:0000302C                 call    ?SetError@TiXmlDocumentA@@QAEXHPBDPAVTiXmlParsingDataA@@@Z ; TiXmlDocumentA::SetError(int,char const *,TiXmlParsingDataA *)
.text$mn:00003031                 xor     al, al
.text$mn:00003033
.text$mn:00003033 loc_3033:                               ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+EAj
.text$mn:00003033                                         ; TiXmlDocumentA::LoadFile(char const *)+1B1j ...
.text$mn:00003033                 mov     ecx, [ebp+var_C]
.text$mn:00003036                 mov     large fs:0, ecx
.text$mn:0000303D                 pop     ecx
.text$mn:0000303E                 mov     ecx, [ebp+var_10]
.text$mn:00003041                 xor     ecx, ebp
.text$mn:00003043                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003048                 mov     esp, ebp
.text$mn:0000304A                 pop     ebp
.text$mn:0000304B                 retn    4
.text$mn:0000304B ?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z endp
.text$mn:0000304B
.text$mn:0000304B ; ---------------------------------------------------------------------------
.text$mn:0000304E                 db 0Ah dup(0CCh)
.text$mn:00003058
.text$mn:00003058 ; =============== S U B R O U T I N E =======================================
.text$mn:00003058
.text$mn:00003058 ; Attributes: bp-based frame
.text$mn:00003058
.text$mn:00003058 ; bool __thiscall TiXmlDocumentA::SaveFile(TiXmlDocumentA *this, const char *)
.text$mn:00003058                 public ?SaveFile@TiXmlDocumentA@@QBE_NPBD@Z
.text$mn:00003058 ?SaveFile@TiXmlDocumentA@@QBE_NPBD@Z proc near
.text$mn:00003058                                         ; CODE XREF: TiXmlDocumentA::SaveFile(void)+4Bp
.text$mn:00003058
.text$mn:00003058 var_8           = dword ptr -8
.text$mn:00003058 File            = dword ptr -4
.text$mn:00003058 Filename        = dword ptr  8
.text$mn:00003058
.text$mn:00003058                 push    ebp
.text$mn:00003059                 mov     ebp, esp
.text$mn:0000305B                 sub     esp, 8
.text$mn:0000305E                 mov     [ebp+var_8], ecx
.text$mn:00003061                 push    offset $SG96714 ; Mode
.text$mn:00003066                 mov     eax, [ebp+Filename]
.text$mn:00003069                 push    eax             ; Filename
.text$mn:0000306A                 call    _fopen
.text$mn:0000306F                 add     esp, 8
.text$mn:00003072                 mov     [ebp+File], eax
.text$mn:00003075                 cmp     [ebp+File], 0
.text$mn:00003079                 jz      short loc_309E
.text$mn:0000307B                 push    0
.text$mn:0000307D                 mov     ecx, [ebp+File]
.text$mn:00003080                 push    ecx
.text$mn:00003081                 mov     edx, [ebp+var_8]
.text$mn:00003084                 mov     eax, [edx]
.text$mn:00003086                 mov     ecx, [ebp+var_8]
.text$mn:00003089                 mov     edx, [eax+4]
.text$mn:0000308C                 call    edx
.text$mn:0000308E                 mov     eax, [ebp+File]
.text$mn:00003091                 push    eax             ; File
.text$mn:00003092                 call    _fclose
.text$mn:00003097                 add     esp, 4
.text$mn:0000309A                 mov     al, 1
.text$mn:0000309C                 jmp     short loc_30A0
.text$mn:0000309E ; ---------------------------------------------------------------------------
.text$mn:0000309E
.text$mn:0000309E loc_309E:                               ; CODE XREF: TiXmlDocumentA::SaveFile(char const *)+21j
.text$mn:0000309E                 xor     al, al
.text$mn:000030A0
.text$mn:000030A0 loc_30A0:                               ; CODE XREF: TiXmlDocumentA::SaveFile(char const *)+44j
.text$mn:000030A0                 mov     esp, ebp
.text$mn:000030A2                 pop     ebp
.text$mn:000030A3                 retn    4
.text$mn:000030A3 ?SaveFile@TiXmlDocumentA@@QBE_NPBD@Z endp
.text$mn:000030A3
.text$mn:000030A3 ; ---------------------------------------------------------------------------
.text$mn:000030A6                 align 4
.text$mn:000030A8
.text$mn:000030A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000030A8
.text$mn:000030A8 ; Attributes: bp-based frame
.text$mn:000030A8
.text$mn:000030A8 ; bool __thiscall TiXmlDocumentA::LoadUnicodeFilePath(TiXmlDocumentA *this, const wchar_t *)
.text$mn:000030A8                 public ?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z
.text$mn:000030A8 ?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z proc near
.text$mn:000030A8
.text$mn:000030A8 var_840         = dword ptr -840h
.text$mn:000030A8 var_83C         = dword ptr -83Ch
.text$mn:000030A8 var_838         = dword ptr -838h
.text$mn:000030A8 var_832         = byte ptr -832h
.text$mn:000030A8 var_831         = byte ptr -831h
.text$mn:000030A8 File            = dword ptr -830h
.text$mn:000030A8 var_82C         = byte ptr -82Ch
.text$mn:000030A8 Buf             = byte ptr -810h
.text$mn:000030A8 var_10          = dword ptr -10h
.text$mn:000030A8 var_C           = dword ptr -0Ch
.text$mn:000030A8 var_4           = dword ptr -4
.text$mn:000030A8 Filename        = dword ptr  8
.text$mn:000030A8
.text$mn:000030A8                 push    ebp
.text$mn:000030A9                 mov     ebp, esp
.text$mn:000030AB                 push    0FFFFFFFFh
.text$mn:000030AD                 push    offset __ehhandler$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z
.text$mn:000030B2                 mov     eax, large fs:0
.text$mn:000030B8                 push    eax
.text$mn:000030B9                 sub     esp, 834h
.text$mn:000030BF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000030C4                 xor     eax, ebp
.text$mn:000030C6                 mov     [ebp+var_10], eax
.text$mn:000030C9                 push    eax
.text$mn:000030CA                 lea     eax, [ebp+var_C]
.text$mn:000030CD                 mov     large fs:0, eax
.text$mn:000030D3                 mov     [ebp+var_838], ecx
.text$mn:000030D9                 mov     ecx, [ebp+var_838] ; this
.text$mn:000030DF                 call    ?Clear@TiXmlNodeA@@QAEXXZ ; TiXmlNodeA::Clear(void)
.text$mn:000030E4                 mov     ecx, [ebp+var_838]
.text$mn:000030EA                 add     ecx, 4          ; this
.text$mn:000030ED                 call    ?Clear@TiXmlCursorA@@QAEXXZ ; TiXmlCursorA::Clear(void)
.text$mn:000030F2                 push    offset $SG96695 ; Mode
.text$mn:000030F7                 mov     eax, [ebp+Filename]
.text$mn:000030FA                 push    eax             ; Filename
.text$mn:000030FB                 call    __wfopen
.text$mn:00003100                 add     esp, 8
.text$mn:00003103                 mov     [ebp+File], eax
.text$mn:00003109                 cmp     [ebp+File], 0
.text$mn:00003110                 jz      loc_3273
.text$mn:00003116                 mov     [ebp+var_83C], 0
.text$mn:00003120                 push    2               ; Origin
.text$mn:00003122                 push    0               ; Offset
.text$mn:00003124                 mov     ecx, [ebp+File]
.text$mn:0000312A                 push    ecx             ; File
.text$mn:0000312B                 call    _fseek
.text$mn:00003130                 add     esp, 0Ch
.text$mn:00003133                 mov     edx, [ebp+File]
.text$mn:00003139                 push    edx             ; File
.text$mn:0000313A                 call    _ftell
.text$mn:0000313F                 add     esp, 4
.text$mn:00003142                 mov     [ebp+var_83C], eax
.text$mn:00003148                 push    0               ; Origin
.text$mn:0000314A                 push    0               ; Offset
.text$mn:0000314C                 mov     eax, [ebp+File]
.text$mn:00003152                 push    eax             ; File
.text$mn:00003153                 call    _fseek
.text$mn:00003158                 add     esp, 0Ch
.text$mn:0000315B                 cmp     [ebp+var_83C], 0
.text$mn:00003162                 jnz     short loc_317A
.text$mn:00003164                 mov     ecx, [ebp+File]
.text$mn:0000316A                 push    ecx             ; File
.text$mn:0000316B                 call    _fclose
.text$mn:00003170                 add     esp, 4
.text$mn:00003173                 xor     al, al
.text$mn:00003175                 jmp     loc_3286
.text$mn:0000317A ; ---------------------------------------------------------------------------
.text$mn:0000317A
.text$mn:0000317A loc_317A:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+BAj
.text$mn:0000317A                 lea     ecx, [ebp+var_82C]
.text$mn:00003180                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003185                 mov     [ebp+var_4], 0
.text$mn:0000318C                 mov     edx, [ebp+var_83C]
.text$mn:00003192                 push    edx
.text$mn:00003193                 lea     ecx, [ebp+var_82C]
.text$mn:00003199                 call    ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)
.text$mn:0000319E                 mov     [ebp+var_840], 800h
.text$mn:000031A8
.text$mn:000031A8 loc_31A8:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+131j
.text$mn:000031A8                 mov     eax, [ebp+File]
.text$mn:000031AE                 push    eax             ; File
.text$mn:000031AF                 push    800h            ; MaxCount
.text$mn:000031B4                 lea     ecx, [ebp+Buf]
.text$mn:000031BA                 push    ecx             ; Buf
.text$mn:000031BB                 call    _fgets
.text$mn:000031C0                 add     esp, 0Ch
.text$mn:000031C3                 test    eax, eax
.text$mn:000031C5                 jz      short loc_31DB
.text$mn:000031C7                 lea     edx, [ebp+Buf]
.text$mn:000031CD                 push    edx             ; Str
.text$mn:000031CE                 lea     ecx, [ebp+var_82C]
.text$mn:000031D4                 call    ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(char const *)
.text$mn:000031D9                 jmp     short loc_31A8
.text$mn:000031DB ; ---------------------------------------------------------------------------
.text$mn:000031DB
.text$mn:000031DB loc_31DB:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+11Dj
.text$mn:000031DB                 mov     eax, [ebp+File]
.text$mn:000031E1                 push    eax             ; File
.text$mn:000031E2                 call    _fclose
.text$mn:000031E7                 add     esp, 4
.text$mn:000031EA                 push    0
.text$mn:000031EC                 lea     ecx, [ebp+var_82C]
.text$mn:000031F2                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000031F7                 push    eax
.text$mn:000031F8                 mov     ecx, [ebp+var_838]
.text$mn:000031FE                 mov     edx, [ecx]
.text$mn:00003200                 mov     ecx, [ebp+var_838]
.text$mn:00003206                 mov     eax, [edx+0Ch]
.text$mn:00003209                 call    eax
.text$mn:0000320B                 mov     ecx, [ebp+var_838]
.text$mn:00003211                 call    ?Error@TiXmlDocumentA@@QBE_NXZ ; TiXmlDocumentA::Error(void)
.text$mn:00003216                 movzx   ecx, al
.text$mn:00003219                 test    ecx, ecx
.text$mn:0000321B                 jz      short loc_3240
.text$mn:0000321D                 mov     [ebp+var_831], 0
.text$mn:00003224                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000322B                 lea     ecx, [ebp+var_82C]
.text$mn:00003231                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003236                 mov     al, [ebp+var_831]
.text$mn:0000323C                 jmp     short loc_3286
.text$mn:0000323E ; ---------------------------------------------------------------------------
.text$mn:0000323E                 jmp     short loc_3261
.text$mn:00003240 ; ---------------------------------------------------------------------------
.text$mn:00003240
.text$mn:00003240 loc_3240:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+173j
.text$mn:00003240                 mov     [ebp+var_832], 1
.text$mn:00003247                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000324E                 lea     ecx, [ebp+var_82C]
.text$mn:00003254                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003259                 mov     al, [ebp+var_832]
.text$mn:0000325F                 jmp     short loc_3286
.text$mn:00003261 ; ---------------------------------------------------------------------------
.text$mn:00003261
.text$mn:00003261 loc_3261:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+196j
.text$mn:00003261                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003268                 lea     ecx, [ebp+var_82C]
.text$mn:0000326E                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003273
.text$mn:00003273 loc_3273:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+68j
.text$mn:00003273                 push    0               ; struct TiXmlParsingDataA *
.text$mn:00003275                 push    0               ; char *
.text$mn:00003277                 push    2               ; int
.text$mn:00003279                 mov     ecx, [ebp+var_838] ; this
.text$mn:0000327F                 call    ?SetError@TiXmlDocumentA@@QAEXHPBDPAVTiXmlParsingDataA@@@Z ; TiXmlDocumentA::SetError(int,char const *,TiXmlParsingDataA *)
.text$mn:00003284                 xor     al, al
.text$mn:00003286
.text$mn:00003286 loc_3286:                               ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+CDj
.text$mn:00003286                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+194j ...
.text$mn:00003286                 mov     ecx, [ebp+var_C]
.text$mn:00003289                 mov     large fs:0, ecx
.text$mn:00003290                 pop     ecx
.text$mn:00003291                 mov     ecx, [ebp+var_10]
.text$mn:00003294                 xor     ecx, ebp
.text$mn:00003296                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000329B                 mov     esp, ebp
.text$mn:0000329D                 pop     ebp
.text$mn:0000329E                 retn    4
.text$mn:0000329E ?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z endp
.text$mn:0000329E
.text$mn:0000329E ; ---------------------------------------------------------------------------
.text$mn:000032A1                 align 8
.text$mn:000032A8
.text$mn:000032A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000032A8
.text$mn:000032A8 ; Attributes: bp-based frame
.text$mn:000032A8
.text$mn:000032A8 ; bool __thiscall TiXmlDocumentA::SaveUnicodeFilePath(TiXmlDocumentA *this, const wchar_t *)
.text$mn:000032A8                 public ?SaveUnicodeFilePath@TiXmlDocumentA@@QBE_NPB_W@Z
.text$mn:000032A8 ?SaveUnicodeFilePath@TiXmlDocumentA@@QBE_NPB_W@Z proc near
.text$mn:000032A8
.text$mn:000032A8 var_8           = dword ptr -8
.text$mn:000032A8 File            = dword ptr -4
.text$mn:000032A8 Filename        = dword ptr  8
.text$mn:000032A8
.text$mn:000032A8                 push    ebp
.text$mn:000032A9                 mov     ebp, esp
.text$mn:000032AB                 sub     esp, 8
.text$mn:000032AE                 mov     [ebp+var_8], ecx
.text$mn:000032B1                 push    offset $SG96721 ; Mode
.text$mn:000032B6                 mov     eax, [ebp+Filename]
.text$mn:000032B9                 push    eax             ; Filename
.text$mn:000032BA                 call    __wfopen
.text$mn:000032BF                 add     esp, 8
.text$mn:000032C2                 mov     [ebp+File], eax
.text$mn:000032C5                 cmp     [ebp+File], 0
.text$mn:000032C9                 jz      short loc_32EE
.text$mn:000032CB                 push    0
.text$mn:000032CD                 mov     ecx, [ebp+File]
.text$mn:000032D0                 push    ecx
.text$mn:000032D1                 mov     edx, [ebp+var_8]
.text$mn:000032D4                 mov     eax, [edx]
.text$mn:000032D6                 mov     ecx, [ebp+var_8]
.text$mn:000032D9                 mov     edx, [eax+4]
.text$mn:000032DC                 call    edx
.text$mn:000032DE                 mov     eax, [ebp+File]
.text$mn:000032E1                 push    eax             ; File
.text$mn:000032E2                 call    _fclose
.text$mn:000032E7                 add     esp, 4
.text$mn:000032EA                 mov     al, 1
.text$mn:000032EC                 jmp     short loc_32F0
.text$mn:000032EE ; ---------------------------------------------------------------------------
.text$mn:000032EE
.text$mn:000032EE loc_32EE:                               ; CODE XREF: TiXmlDocumentA::SaveUnicodeFilePath(wchar_t const *)+21j
.text$mn:000032EE                 xor     al, al
.text$mn:000032F0
.text$mn:000032F0 loc_32F0:                               ; CODE XREF: TiXmlDocumentA::SaveUnicodeFilePath(wchar_t const *)+44j
.text$mn:000032F0                 mov     esp, ebp
.text$mn:000032F2                 pop     ebp
.text$mn:000032F3                 retn    4
.text$mn:000032F3 ?SaveUnicodeFilePath@TiXmlDocumentA@@QBE_NPB_W@Z endp
.text$mn:000032F3
.text$mn:000032F3 ; ---------------------------------------------------------------------------
.text$mn:000032F6                 align 4
.text$mn:000032F8
.text$mn:000032F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000032F8
.text$mn:000032F8 ; Attributes: bp-based frame
.text$mn:000032F8
.text$mn:000032F8 ; void __thiscall TiXmlDocumentA::Print(TiXmlDocumentA *this, FILE *File, int)
.text$mn:000032F8                 public ?Print@TiXmlDocumentA@@UBEXPAU_iobuf@@H@Z
.text$mn:000032F8 ?Print@TiXmlDocumentA@@UBEXPAU_iobuf@@H@Z proc near
.text$mn:000032F8                                         ; DATA XREF: .rdata:0000CE0Co
.text$mn:000032F8
.text$mn:000032F8 var_8           = dword ptr -8
.text$mn:000032F8 var_4           = dword ptr -4
.text$mn:000032F8 File            = dword ptr  8
.text$mn:000032F8 arg_4           = dword ptr  0Ch
.text$mn:000032F8
.text$mn:000032F8                 push    ebp
.text$mn:000032F9                 mov     ebp, esp
.text$mn:000032FB                 sub     esp, 8
.text$mn:000032FE                 mov     [ebp+var_8], ecx
.text$mn:00003301                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003304                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00003309                 mov     [ebp+var_4], eax
.text$mn:0000330C                 jmp     short loc_3319
.text$mn:0000330E ; ---------------------------------------------------------------------------
.text$mn:0000330E
.text$mn:0000330E loc_330E:                               ; CODE XREF: TiXmlDocumentA::Print(_iobuf *,int)+4Dj
.text$mn:0000330E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003311                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00003316                 mov     [ebp+var_4], eax
.text$mn:00003319
.text$mn:00003319 loc_3319:                               ; CODE XREF: TiXmlDocumentA::Print(_iobuf *,int)+14j
.text$mn:00003319                 cmp     [ebp+var_4], 0
.text$mn:0000331D                 jz      short loc_3347
.text$mn:0000331F                 mov     eax, [ebp+arg_4]
.text$mn:00003322                 push    eax
.text$mn:00003323                 mov     ecx, [ebp+File]
.text$mn:00003326                 push    ecx
.text$mn:00003327                 mov     edx, [ebp+var_4]
.text$mn:0000332A                 mov     eax, [edx]
.text$mn:0000332C                 mov     ecx, [ebp+var_4]
.text$mn:0000332F                 mov     edx, [eax+4]
.text$mn:00003332                 call    edx
.text$mn:00003334                 push    offset $SG96745 ; "\n"
.text$mn:00003339                 mov     eax, [ebp+File]
.text$mn:0000333C                 push    eax             ; File
.text$mn:0000333D                 call    _fprintf
.text$mn:00003342                 add     esp, 8
.text$mn:00003345                 jmp     short loc_330E
.text$mn:00003347 ; ---------------------------------------------------------------------------
.text$mn:00003347
.text$mn:00003347 loc_3347:                               ; CODE XREF: TiXmlDocumentA::Print(_iobuf *,int)+25j
.text$mn:00003347                 mov     esp, ebp
.text$mn:00003349                 pop     ebp
.text$mn:0000334A                 retn    8
.text$mn:0000334A ?Print@TiXmlDocumentA@@UBEXPAU_iobuf@@H@Z endp
.text$mn:0000334A
.text$mn:0000334A ; ---------------------------------------------------------------------------
.text$mn:0000334D                 db 0Bh dup(0CCh)
.text$mn:00003358
.text$mn:00003358 ; =============== S U B R O U T I N E =======================================
.text$mn:00003358
.text$mn:00003358 ; Attributes: bp-based frame
.text$mn:00003358
.text$mn:00003358 ; protected: virtual void __thiscall TiXmlDocumentA::StreamOut(class std::basic_ostream<char, struct std::char_traits<char>> *)const
.text$mn:00003358                 public ?StreamOut@TiXmlDocumentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z
.text$mn:00003358 ?StreamOut@TiXmlDocumentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z proc near
.text$mn:00003358                                         ; DATA XREF: .rdata:0000CE10o
.text$mn:00003358
.text$mn:00003358 var_8           = dword ptr -8
.text$mn:00003358 var_4           = dword ptr -4
.text$mn:00003358 arg_0           = dword ptr  8
.text$mn:00003358
.text$mn:00003358                 push    ebp
.text$mn:00003359                 mov     ebp, esp
.text$mn:0000335B                 sub     esp, 8
.text$mn:0000335E                 mov     [ebp+var_8], ecx
.text$mn:00003361                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003364                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00003369                 mov     [ebp+var_4], eax
.text$mn:0000336C                 jmp     short loc_3379
.text$mn:0000336E ; ---------------------------------------------------------------------------
.text$mn:0000336E
.text$mn:0000336E loc_336E:                               ; CODE XREF: TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *):loc_339Ej
.text$mn:0000336E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003371                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00003376                 mov     [ebp+var_4], eax
.text$mn:00003379
.text$mn:00003379 loc_3379:                               ; CODE XREF: TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+14j
.text$mn:00003379                 cmp     [ebp+var_4], 0
.text$mn:0000337D                 jz      short loc_33A0
.text$mn:0000337F                 mov     eax, [ebp+arg_0]
.text$mn:00003382                 push    eax
.text$mn:00003383                 mov     ecx, [ebp+var_4]
.text$mn:00003386                 mov     edx, [ecx]
.text$mn:00003388                 mov     ecx, [ebp+var_4]
.text$mn:0000338B                 mov     eax, [edx+8]
.text$mn:0000338E                 call    eax
.text$mn:00003390                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003393                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003398                 test    eax, eax
.text$mn:0000339A                 jz      short loc_339E
.text$mn:0000339C                 jmp     short loc_33A0
.text$mn:0000339E ; ---------------------------------------------------------------------------
.text$mn:0000339E
.text$mn:0000339E loc_339E:                               ; CODE XREF: TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+42j
.text$mn:0000339E                 jmp     short loc_336E
.text$mn:000033A0 ; ---------------------------------------------------------------------------
.text$mn:000033A0
.text$mn:000033A0 loc_33A0:                               ; CODE XREF: TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+25j
.text$mn:000033A0                                         ; TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+44j
.text$mn:000033A0                 mov     esp, ebp
.text$mn:000033A2                 pop     ebp
.text$mn:000033A3                 retn    4
.text$mn:000033A3 ?StreamOut@TiXmlDocumentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z endp
.text$mn:000033A3
.text$mn:000033A3 ; ---------------------------------------------------------------------------
.text$mn:000033A6                 align 4
.text$mn:000033A8
.text$mn:000033A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000033A8
.text$mn:000033A8 ; Attributes: bp-based frame
.text$mn:000033A8
.text$mn:000033A8 ; struct TiXmlNodeA *__thiscall TiXmlDocumentA::Clone(TiXmlDocumentA *__hidden this)
.text$mn:000033A8                 public ?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ
.text$mn:000033A8 ?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ proc near
.text$mn:000033A8                                         ; DATA XREF: .rdata:0000CE1Co
.text$mn:000033A8
.text$mn:000033A8 var_24          = dword ptr -24h
.text$mn:000033A8 var_20          = dword ptr -20h
.text$mn:000033A8 var_1C          = dword ptr -1Ch
.text$mn:000033A8 var_18          = dword ptr -18h
.text$mn:000033A8 var_14          = dword ptr -14h
.text$mn:000033A8 var_10          = dword ptr -10h
.text$mn:000033A8 var_C           = dword ptr -0Ch
.text$mn:000033A8 var_4           = dword ptr -4
.text$mn:000033A8
.text$mn:000033A8                 push    ebp
.text$mn:000033A9                 mov     ebp, esp
.text$mn:000033AB                 push    0FFFFFFFFh
.text$mn:000033AD                 push    offset __ehhandler$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ
.text$mn:000033B2                 mov     eax, large fs:0
.text$mn:000033B8                 push    eax
.text$mn:000033B9                 sub     esp, 18h
.text$mn:000033BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000033C1                 xor     eax, ebp
.text$mn:000033C3                 push    eax
.text$mn:000033C4                 lea     eax, [ebp+var_C]
.text$mn:000033C7                 mov     large fs:0, eax
.text$mn:000033CD                 mov     [ebp+var_18], ecx
.text$mn:000033D0                 push    74h ; 't'       ; unsigned int
.text$mn:000033D2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000033D7                 add     esp, 4
.text$mn:000033DA                 mov     [ebp+var_1C], eax
.text$mn:000033DD                 mov     [ebp+var_4], 0
.text$mn:000033E4                 cmp     [ebp+var_1C], 0
.text$mn:000033E8                 jz      short loc_33F7
.text$mn:000033EA                 mov     ecx, [ebp+var_1C]
.text$mn:000033ED                 call    ??0TiXmlDocumentA@@QAE@XZ ; TiXmlDocumentA::TiXmlDocumentA(void)
.text$mn:000033F2                 mov     [ebp+var_20], eax
.text$mn:000033F5                 jmp     short loc_33FE
.text$mn:000033F7 ; ---------------------------------------------------------------------------
.text$mn:000033F7
.text$mn:000033F7 loc_33F7:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+40j
.text$mn:000033F7                 mov     [ebp+var_20], 0
.text$mn:000033FE
.text$mn:000033FE loc_33FE:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+4Dj
.text$mn:000033FE                 mov     eax, [ebp+var_20]
.text$mn:00003401                 mov     [ebp+var_24], eax
.text$mn:00003404                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000340B                 mov     ecx, [ebp+var_24]
.text$mn:0000340E                 mov     [ebp+var_14], ecx
.text$mn:00003411                 cmp     [ebp+var_14], 0
.text$mn:00003415                 jnz     short loc_341B
.text$mn:00003417                 xor     eax, eax
.text$mn:00003419                 jmp     short loc_3488
.text$mn:0000341B ; ---------------------------------------------------------------------------
.text$mn:0000341B
.text$mn:0000341B loc_341B:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+6Dj
.text$mn:0000341B                 mov     edx, [ebp+var_14]
.text$mn:0000341E                 push    edx             ; struct TiXmlNodeA *
.text$mn:0000341F                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003422                 call    ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)
.text$mn:00003427                 mov     eax, [ebp+var_14]
.text$mn:0000342A                 mov     ecx, [ebp+var_18]
.text$mn:0000342D                 mov     dl, [ecx+44h]
.text$mn:00003430                 mov     [eax+44h], dl
.text$mn:00003433                 mov     ecx, [ebp+var_18]
.text$mn:00003436                 add     ecx, 4Ch ; 'L'
.text$mn:00003439                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000343E                 push    eax             ; Str
.text$mn:0000343F                 mov     ecx, [ebp+var_14]
.text$mn:00003442                 add     ecx, 4Ch ; 'L'
.text$mn:00003445                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:0000344A                 mov     [ebp+var_10], 0
.text$mn:00003451                 mov     eax, [ebp+var_18]
.text$mn:00003454                 mov     ecx, [eax+14h]
.text$mn:00003457                 mov     [ebp+var_10], ecx
.text$mn:0000345A                 jmp     short loc_3467
.text$mn:0000345C ; ---------------------------------------------------------------------------
.text$mn:0000345C
.text$mn:0000345C loc_345C:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+DBj
.text$mn:0000345C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000345F                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00003464                 mov     [ebp+var_10], eax
.text$mn:00003467
.text$mn:00003467 loc_3467:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+B2j
.text$mn:00003467                 cmp     [ebp+var_10], 0
.text$mn:0000346B                 jz      short loc_3485
.text$mn:0000346D                 mov     edx, [ebp+var_10]
.text$mn:00003470                 mov     eax, [edx]
.text$mn:00003472                 mov     ecx, [ebp+var_10]
.text$mn:00003475                 mov     edx, [eax+14h]
.text$mn:00003478                 call    edx
.text$mn:0000347A                 push    eax             ; struct TiXmlNodeA *
.text$mn:0000347B                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000347E                 call    ?LinkEndChild@TiXmlNodeA@@QAEPAV1@PAV1@@Z ; TiXmlNodeA::LinkEndChild(TiXmlNodeA *)
.text$mn:00003483                 jmp     short loc_345C
.text$mn:00003485 ; ---------------------------------------------------------------------------
.text$mn:00003485
.text$mn:00003485 loc_3485:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+C3j
.text$mn:00003485                 mov     eax, [ebp+var_14]
.text$mn:00003488
.text$mn:00003488 loc_3488:                               ; CODE XREF: TiXmlDocumentA::Clone(void)+71j
.text$mn:00003488                 mov     ecx, [ebp+var_C]
.text$mn:0000348B                 mov     large fs:0, ecx
.text$mn:00003492                 pop     ecx
.text$mn:00003493                 mov     esp, ebp
.text$mn:00003495                 pop     ebp
.text$mn:00003496                 retn
.text$mn:00003496 ?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ endp
.text$mn:00003496
.text$mn:00003496 ; ---------------------------------------------------------------------------
.text$mn:00003497                 align 4
.text$mn:00003498
.text$mn:00003498 ; =============== S U B R O U T I N E =======================================
.text$mn:00003498
.text$mn:00003498 ; Attributes: bp-based frame
.text$mn:00003498
.text$mn:00003498 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::FirstChild(void)const
.text$mn:00003498                 public ?FirstChild@TiXmlHandleA@@QBE?AV1@XZ
.text$mn:00003498 ?FirstChild@TiXmlHandleA@@QBE?AV1@XZ proc near
.text$mn:00003498
.text$mn:00003498 var_8           = dword ptr -8
.text$mn:00003498 var_4           = dword ptr -4
.text$mn:00003498 arg_0           = dword ptr  8
.text$mn:00003498
.text$mn:00003498                 push    ebp
.text$mn:00003499                 mov     ebp, esp
.text$mn:0000349B                 sub     esp, 8
.text$mn:0000349E                 mov     [ebp+var_4], ecx
.text$mn:000034A1                 mov     eax, [ebp+var_4]
.text$mn:000034A4                 cmp     dword ptr [eax], 0
.text$mn:000034A7                 jz      short loc_34CD
.text$mn:000034A9                 mov     ecx, [ebp+var_4]
.text$mn:000034AC                 mov     ecx, [ecx]      ; this
.text$mn:000034AE                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:000034B3                 mov     [ebp+var_8], eax
.text$mn:000034B6                 cmp     [ebp+var_8], 0
.text$mn:000034BA                 jz      short loc_34CD
.text$mn:000034BC                 mov     edx, [ebp+var_8]
.text$mn:000034BF                 push    edx             ; struct TiXmlNodeA *
.text$mn:000034C0                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000034C3                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000034C8                 mov     eax, [ebp+arg_0]
.text$mn:000034CB                 jmp     short loc_34DA
.text$mn:000034CD ; ---------------------------------------------------------------------------
.text$mn:000034CD
.text$mn:000034CD loc_34CD:                               ; CODE XREF: TiXmlHandleA::FirstChild(void)+Fj
.text$mn:000034CD                                         ; TiXmlHandleA::FirstChild(void)+22j
.text$mn:000034CD                 push    0               ; struct TiXmlNodeA *
.text$mn:000034CF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000034D2                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000034D7                 mov     eax, [ebp+arg_0]
.text$mn:000034DA
.text$mn:000034DA loc_34DA:                               ; CODE XREF: TiXmlHandleA::FirstChild(void)+33j
.text$mn:000034DA                 mov     esp, ebp
.text$mn:000034DC                 pop     ebp
.text$mn:000034DD                 retn    4
.text$mn:000034DD ?FirstChild@TiXmlHandleA@@QBE?AV1@XZ endp
.text$mn:000034DD
.text$mn:000034DD ; ---------------------------------------------------------------------------
.text$mn:000034E0                 db 8 dup(0CCh)
.text$mn:000034E8
.text$mn:000034E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000034E8
.text$mn:000034E8 ; Attributes: bp-based frame
.text$mn:000034E8
.text$mn:000034E8 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::FirstChild(char const *)const
.text$mn:000034E8                 public ?FirstChild@TiXmlHandleA@@QBE?AV1@PBD@Z
.text$mn:000034E8 ?FirstChild@TiXmlHandleA@@QBE?AV1@PBD@Z proc near
.text$mn:000034E8
.text$mn:000034E8 var_8           = dword ptr -8
.text$mn:000034E8 var_4           = dword ptr -4
.text$mn:000034E8 arg_0           = dword ptr  8
.text$mn:000034E8 arg_4           = dword ptr  0Ch
.text$mn:000034E8
.text$mn:000034E8                 push    ebp
.text$mn:000034E9                 mov     ebp, esp
.text$mn:000034EB                 sub     esp, 8
.text$mn:000034EE                 mov     [ebp+var_4], ecx
.text$mn:000034F1                 mov     eax, [ebp+var_4]
.text$mn:000034F4                 cmp     dword ptr [eax], 0
.text$mn:000034F7                 jz      short loc_3521
.text$mn:000034F9                 mov     ecx, [ebp+arg_4]
.text$mn:000034FC                 push    ecx             ; char *
.text$mn:000034FD                 mov     edx, [ebp+var_4]
.text$mn:00003500                 mov     ecx, [edx]      ; this
.text$mn:00003502                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003507                 mov     [ebp+var_8], eax
.text$mn:0000350A                 cmp     [ebp+var_8], 0
.text$mn:0000350E                 jz      short loc_3521
.text$mn:00003510                 mov     eax, [ebp+var_8]
.text$mn:00003513                 push    eax             ; struct TiXmlNodeA *
.text$mn:00003514                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003517                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000351C                 mov     eax, [ebp+arg_0]
.text$mn:0000351F                 jmp     short loc_352E
.text$mn:00003521 ; ---------------------------------------------------------------------------
.text$mn:00003521
.text$mn:00003521 loc_3521:                               ; CODE XREF: TiXmlHandleA::FirstChild(char const *)+Fj
.text$mn:00003521                                         ; TiXmlHandleA::FirstChild(char const *)+26j
.text$mn:00003521                 push    0               ; struct TiXmlNodeA *
.text$mn:00003523                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003526                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000352B                 mov     eax, [ebp+arg_0]
.text$mn:0000352E
.text$mn:0000352E loc_352E:                               ; CODE XREF: TiXmlHandleA::FirstChild(char const *)+37j
.text$mn:0000352E                 mov     esp, ebp
.text$mn:00003530                 pop     ebp
.text$mn:00003531                 retn    8
.text$mn:00003531 ?FirstChild@TiXmlHandleA@@QBE?AV1@PBD@Z endp
.text$mn:00003531
.text$mn:00003531 ; ---------------------------------------------------------------------------
.text$mn:00003534                 align 8
.text$mn:00003538
.text$mn:00003538 ; =============== S U B R O U T I N E =======================================
.text$mn:00003538
.text$mn:00003538 ; Attributes: bp-based frame
.text$mn:00003538
.text$mn:00003538 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::FirstChildElement(void)const
.text$mn:00003538                 public ?FirstChildElement@TiXmlHandleA@@QBE?AV1@XZ
.text$mn:00003538 ?FirstChildElement@TiXmlHandleA@@QBE?AV1@XZ proc near
.text$mn:00003538
.text$mn:00003538 var_8           = dword ptr -8
.text$mn:00003538 var_4           = dword ptr -4
.text$mn:00003538 arg_0           = dword ptr  8
.text$mn:00003538
.text$mn:00003538                 push    ebp
.text$mn:00003539                 mov     ebp, esp
.text$mn:0000353B                 sub     esp, 8
.text$mn:0000353E                 mov     [ebp+var_4], ecx
.text$mn:00003541                 mov     eax, [ebp+var_4]
.text$mn:00003544                 cmp     dword ptr [eax], 0
.text$mn:00003547                 jz      short loc_356D
.text$mn:00003549                 mov     ecx, [ebp+var_4]
.text$mn:0000354C                 mov     ecx, [ecx]      ; this
.text$mn:0000354E                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::FirstChildElement(void)
.text$mn:00003553                 mov     [ebp+var_8], eax
.text$mn:00003556                 cmp     [ebp+var_8], 0
.text$mn:0000355A                 jz      short loc_356D
.text$mn:0000355C                 mov     edx, [ebp+var_8]
.text$mn:0000355F                 push    edx             ; struct TiXmlNodeA *
.text$mn:00003560                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003563                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:00003568                 mov     eax, [ebp+arg_0]
.text$mn:0000356B                 jmp     short loc_357A
.text$mn:0000356D ; ---------------------------------------------------------------------------
.text$mn:0000356D
.text$mn:0000356D loc_356D:                               ; CODE XREF: TiXmlHandleA::FirstChildElement(void)+Fj
.text$mn:0000356D                                         ; TiXmlHandleA::FirstChildElement(void)+22j
.text$mn:0000356D                 push    0               ; struct TiXmlNodeA *
.text$mn:0000356F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003572                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:00003577                 mov     eax, [ebp+arg_0]
.text$mn:0000357A
.text$mn:0000357A loc_357A:                               ; CODE XREF: TiXmlHandleA::FirstChildElement(void)+33j
.text$mn:0000357A                 mov     esp, ebp
.text$mn:0000357C                 pop     ebp
.text$mn:0000357D                 retn    4
.text$mn:0000357D ?FirstChildElement@TiXmlHandleA@@QBE?AV1@XZ endp
.text$mn:0000357D
.text$mn:0000357D ; ---------------------------------------------------------------------------
.text$mn:00003580                 db 8 dup(0CCh)
.text$mn:00003588
.text$mn:00003588 ; =============== S U B R O U T I N E =======================================
.text$mn:00003588
.text$mn:00003588 ; Attributes: bp-based frame
.text$mn:00003588
.text$mn:00003588 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::FirstChildElement(char const *)const
.text$mn:00003588                 public ?FirstChildElement@TiXmlHandleA@@QBE?AV1@PBD@Z
.text$mn:00003588 ?FirstChildElement@TiXmlHandleA@@QBE?AV1@PBD@Z proc near
.text$mn:00003588
.text$mn:00003588 var_8           = dword ptr -8
.text$mn:00003588 var_4           = dword ptr -4
.text$mn:00003588 arg_0           = dword ptr  8
.text$mn:00003588 arg_4           = dword ptr  0Ch
.text$mn:00003588
.text$mn:00003588                 push    ebp
.text$mn:00003589                 mov     ebp, esp
.text$mn:0000358B                 sub     esp, 8
.text$mn:0000358E                 mov     [ebp+var_4], ecx
.text$mn:00003591                 mov     eax, [ebp+var_4]
.text$mn:00003594                 cmp     dword ptr [eax], 0
.text$mn:00003597                 jz      short loc_35C1
.text$mn:00003599                 mov     ecx, [ebp+arg_4]
.text$mn:0000359C                 push    ecx             ; char *
.text$mn:0000359D                 mov     edx, [ebp+var_4]
.text$mn:000035A0                 mov     ecx, [edx]      ; this
.text$mn:000035A2                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:000035A7                 mov     [ebp+var_8], eax
.text$mn:000035AA                 cmp     [ebp+var_8], 0
.text$mn:000035AE                 jz      short loc_35C1
.text$mn:000035B0                 mov     eax, [ebp+var_8]
.text$mn:000035B3                 push    eax             ; struct TiXmlNodeA *
.text$mn:000035B4                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000035B7                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000035BC                 mov     eax, [ebp+arg_0]
.text$mn:000035BF                 jmp     short loc_35CE
.text$mn:000035C1 ; ---------------------------------------------------------------------------
.text$mn:000035C1
.text$mn:000035C1 loc_35C1:                               ; CODE XREF: TiXmlHandleA::FirstChildElement(char const *)+Fj
.text$mn:000035C1                                         ; TiXmlHandleA::FirstChildElement(char const *)+26j
.text$mn:000035C1                 push    0               ; struct TiXmlNodeA *
.text$mn:000035C3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000035C6                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000035CB                 mov     eax, [ebp+arg_0]
.text$mn:000035CE
.text$mn:000035CE loc_35CE:                               ; CODE XREF: TiXmlHandleA::FirstChildElement(char const *)+37j
.text$mn:000035CE                 mov     esp, ebp
.text$mn:000035D0                 pop     ebp
.text$mn:000035D1                 retn    8
.text$mn:000035D1 ?FirstChildElement@TiXmlHandleA@@QBE?AV1@PBD@Z endp
.text$mn:000035D1
.text$mn:000035D1 ; ---------------------------------------------------------------------------
.text$mn:000035D4                 align 8
.text$mn:000035D8
.text$mn:000035D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000035D8
.text$mn:000035D8 ; Attributes: bp-based frame
.text$mn:000035D8
.text$mn:000035D8 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::Child(char const *, int)const
.text$mn:000035D8                 public ?Child@TiXmlHandleA@@QBE?AV1@PBDH@Z
.text$mn:000035D8 ?Child@TiXmlHandleA@@QBE?AV1@PBDH@Z proc near
.text$mn:000035D8
.text$mn:000035D8 var_C           = dword ptr -0Ch
.text$mn:000035D8 var_8           = dword ptr -8
.text$mn:000035D8 var_4           = dword ptr -4
.text$mn:000035D8 arg_0           = dword ptr  8
.text$mn:000035D8 arg_4           = dword ptr  0Ch
.text$mn:000035D8 arg_8           = dword ptr  10h
.text$mn:000035D8
.text$mn:000035D8                 push    ebp
.text$mn:000035D9                 mov     ebp, esp
.text$mn:000035DB                 sub     esp, 0Ch
.text$mn:000035DE                 mov     [ebp+var_C], ecx
.text$mn:000035E1                 mov     eax, [ebp+var_C]
.text$mn:000035E4                 cmp     dword ptr [eax], 0
.text$mn:000035E7                 jz      short loc_3642
.text$mn:000035E9                 mov     ecx, [ebp+arg_4]
.text$mn:000035EC                 push    ecx             ; char *
.text$mn:000035ED                 mov     edx, [ebp+var_C]
.text$mn:000035F0                 mov     ecx, [edx]      ; this
.text$mn:000035F2                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000035F7                 mov     [ebp+var_4], eax
.text$mn:000035FA                 mov     [ebp+var_8], 0
.text$mn:00003601                 jmp     short loc_361B
.text$mn:00003603 ; ---------------------------------------------------------------------------
.text$mn:00003603
.text$mn:00003603 loc_3603:                               ; CODE XREF: TiXmlHandleA::Child(char const *,int)+51j
.text$mn:00003603                 mov     eax, [ebp+arg_4]
.text$mn:00003606                 push    eax             ; char *
.text$mn:00003607                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000360A                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:0000360F                 mov     [ebp+var_4], eax
.text$mn:00003612                 mov     ecx, [ebp+var_8]
.text$mn:00003615                 add     ecx, 1
.text$mn:00003618                 mov     [ebp+var_8], ecx
.text$mn:0000361B
.text$mn:0000361B loc_361B:                               ; CODE XREF: TiXmlHandleA::Child(char const *,int)+29j
.text$mn:0000361B                 cmp     [ebp+var_4], 0
.text$mn:0000361F                 jz      short loc_362B
.text$mn:00003621                 mov     edx, [ebp+var_8]
.text$mn:00003624                 cmp     edx, [ebp+arg_8]
.text$mn:00003627                 jge     short loc_362B
.text$mn:00003629                 jmp     short loc_3603
.text$mn:0000362B ; ---------------------------------------------------------------------------
.text$mn:0000362B
.text$mn:0000362B loc_362B:                               ; CODE XREF: TiXmlHandleA::Child(char const *,int)+47j
.text$mn:0000362B                                         ; TiXmlHandleA::Child(char const *,int)+4Fj
.text$mn:0000362B                 cmp     [ebp+var_4], 0
.text$mn:0000362F                 jz      short loc_3642
.text$mn:00003631                 mov     eax, [ebp+var_4]
.text$mn:00003634                 push    eax             ; struct TiXmlNodeA *
.text$mn:00003635                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003638                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000363D                 mov     eax, [ebp+arg_0]
.text$mn:00003640                 jmp     short loc_364F
.text$mn:00003642 ; ---------------------------------------------------------------------------
.text$mn:00003642
.text$mn:00003642 loc_3642:                               ; CODE XREF: TiXmlHandleA::Child(char const *,int)+Fj
.text$mn:00003642                                         ; TiXmlHandleA::Child(char const *,int)+57j
.text$mn:00003642                 push    0               ; struct TiXmlNodeA *
.text$mn:00003644                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003647                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000364C                 mov     eax, [ebp+arg_0]
.text$mn:0000364F
.text$mn:0000364F loc_364F:                               ; CODE XREF: TiXmlHandleA::Child(char const *,int)+68j
.text$mn:0000364F                 mov     esp, ebp
.text$mn:00003651                 pop     ebp
.text$mn:00003652                 retn    0Ch
.text$mn:00003652 ?Child@TiXmlHandleA@@QBE?AV1@PBDH@Z endp
.text$mn:00003652
.text$mn:00003652 ; ---------------------------------------------------------------------------
.text$mn:00003655                 align 4
.text$mn:00003658
.text$mn:00003658 ; =============== S U B R O U T I N E =======================================
.text$mn:00003658
.text$mn:00003658 ; Attributes: bp-based frame
.text$mn:00003658
.text$mn:00003658 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::Child(int)const
.text$mn:00003658                 public ?Child@TiXmlHandleA@@QBE?AV1@H@Z
.text$mn:00003658 ?Child@TiXmlHandleA@@QBE?AV1@H@Z proc near
.text$mn:00003658
.text$mn:00003658 var_C           = dword ptr -0Ch
.text$mn:00003658 var_8           = dword ptr -8
.text$mn:00003658 var_4           = dword ptr -4
.text$mn:00003658 arg_0           = dword ptr  8
.text$mn:00003658 arg_4           = dword ptr  0Ch
.text$mn:00003658
.text$mn:00003658                 push    ebp
.text$mn:00003659                 mov     ebp, esp
.text$mn:0000365B                 sub     esp, 0Ch
.text$mn:0000365E                 mov     [ebp+var_C], ecx
.text$mn:00003661                 mov     eax, [ebp+var_C]
.text$mn:00003664                 cmp     dword ptr [eax], 0
.text$mn:00003667                 jz      short loc_36BA
.text$mn:00003669                 mov     ecx, [ebp+var_C]
.text$mn:0000366C                 mov     ecx, [ecx]      ; this
.text$mn:0000366E                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00003673                 mov     [ebp+var_4], eax
.text$mn:00003676                 mov     [ebp+var_8], 0
.text$mn:0000367D                 jmp     short loc_3693
.text$mn:0000367F ; ---------------------------------------------------------------------------
.text$mn:0000367F
.text$mn:0000367F loc_367F:                               ; CODE XREF: TiXmlHandleA::Child(int)+49j
.text$mn:0000367F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003682                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00003687                 mov     [ebp+var_4], eax
.text$mn:0000368A                 mov     edx, [ebp+var_8]
.text$mn:0000368D                 add     edx, 1
.text$mn:00003690                 mov     [ebp+var_8], edx
.text$mn:00003693
.text$mn:00003693 loc_3693:                               ; CODE XREF: TiXmlHandleA::Child(int)+25j
.text$mn:00003693                 cmp     [ebp+var_4], 0
.text$mn:00003697                 jz      short loc_36A3
.text$mn:00003699                 mov     eax, [ebp+var_8]
.text$mn:0000369C                 cmp     eax, [ebp+arg_4]
.text$mn:0000369F                 jge     short loc_36A3
.text$mn:000036A1                 jmp     short loc_367F
.text$mn:000036A3 ; ---------------------------------------------------------------------------
.text$mn:000036A3
.text$mn:000036A3 loc_36A3:                               ; CODE XREF: TiXmlHandleA::Child(int)+3Fj
.text$mn:000036A3                                         ; TiXmlHandleA::Child(int)+47j
.text$mn:000036A3                 cmp     [ebp+var_4], 0
.text$mn:000036A7                 jz      short loc_36BA
.text$mn:000036A9                 mov     ecx, [ebp+var_4]
.text$mn:000036AC                 push    ecx             ; struct TiXmlNodeA *
.text$mn:000036AD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000036B0                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000036B5                 mov     eax, [ebp+arg_0]
.text$mn:000036B8                 jmp     short loc_36C7
.text$mn:000036BA ; ---------------------------------------------------------------------------
.text$mn:000036BA
.text$mn:000036BA loc_36BA:                               ; CODE XREF: TiXmlHandleA::Child(int)+Fj
.text$mn:000036BA                                         ; TiXmlHandleA::Child(int)+4Fj
.text$mn:000036BA                 push    0               ; struct TiXmlNodeA *
.text$mn:000036BC                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000036BF                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000036C4                 mov     eax, [ebp+arg_0]
.text$mn:000036C7
.text$mn:000036C7 loc_36C7:                               ; CODE XREF: TiXmlHandleA::Child(int)+60j
.text$mn:000036C7                 mov     esp, ebp
.text$mn:000036C9                 pop     ebp
.text$mn:000036CA                 retn    8
.text$mn:000036CA ?Child@TiXmlHandleA@@QBE?AV1@H@Z endp
.text$mn:000036CA
.text$mn:000036CA ; ---------------------------------------------------------------------------
.text$mn:000036CD                 db 0Bh dup(0CCh)
.text$mn:000036D8
.text$mn:000036D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000036D8
.text$mn:000036D8 ; Attributes: bp-based frame
.text$mn:000036D8
.text$mn:000036D8 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::ChildElement(char const *, int)const
.text$mn:000036D8                 public ?ChildElement@TiXmlHandleA@@QBE?AV1@PBDH@Z
.text$mn:000036D8 ?ChildElement@TiXmlHandleA@@QBE?AV1@PBDH@Z proc near
.text$mn:000036D8
.text$mn:000036D8 var_C           = dword ptr -0Ch
.text$mn:000036D8 var_8           = dword ptr -8
.text$mn:000036D8 var_4           = dword ptr -4
.text$mn:000036D8 arg_0           = dword ptr  8
.text$mn:000036D8 arg_4           = dword ptr  0Ch
.text$mn:000036D8 arg_8           = dword ptr  10h
.text$mn:000036D8
.text$mn:000036D8                 push    ebp
.text$mn:000036D9                 mov     ebp, esp
.text$mn:000036DB                 sub     esp, 0Ch
.text$mn:000036DE                 mov     [ebp+var_C], ecx
.text$mn:000036E1                 mov     eax, [ebp+var_C]
.text$mn:000036E4                 cmp     dword ptr [eax], 0
.text$mn:000036E7                 jz      short loc_3742
.text$mn:000036E9                 mov     ecx, [ebp+arg_4]
.text$mn:000036EC                 push    ecx             ; char *
.text$mn:000036ED                 mov     edx, [ebp+var_C]
.text$mn:000036F0                 mov     ecx, [edx]      ; this
.text$mn:000036F2                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:000036F7                 mov     [ebp+var_4], eax
.text$mn:000036FA                 mov     [ebp+var_8], 0
.text$mn:00003701                 jmp     short loc_371B
.text$mn:00003703 ; ---------------------------------------------------------------------------
.text$mn:00003703
.text$mn:00003703 loc_3703:                               ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+51j
.text$mn:00003703                 mov     eax, [ebp+arg_4]
.text$mn:00003706                 push    eax             ; char *
.text$mn:00003707                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000370A                 call    ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::NextSiblingElement(char const *)
.text$mn:0000370F                 mov     [ebp+var_4], eax
.text$mn:00003712                 mov     ecx, [ebp+var_8]
.text$mn:00003715                 add     ecx, 1
.text$mn:00003718                 mov     [ebp+var_8], ecx
.text$mn:0000371B
.text$mn:0000371B loc_371B:                               ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+29j
.text$mn:0000371B                 cmp     [ebp+var_4], 0
.text$mn:0000371F                 jz      short loc_372B
.text$mn:00003721                 mov     edx, [ebp+var_8]
.text$mn:00003724                 cmp     edx, [ebp+arg_8]
.text$mn:00003727                 jge     short loc_372B
.text$mn:00003729                 jmp     short loc_3703
.text$mn:0000372B ; ---------------------------------------------------------------------------
.text$mn:0000372B
.text$mn:0000372B loc_372B:                               ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+47j
.text$mn:0000372B                                         ; TiXmlHandleA::ChildElement(char const *,int)+4Fj
.text$mn:0000372B                 cmp     [ebp+var_4], 0
.text$mn:0000372F                 jz      short loc_3742
.text$mn:00003731                 mov     eax, [ebp+var_4]
.text$mn:00003734                 push    eax             ; struct TiXmlNodeA *
.text$mn:00003735                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003738                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000373D                 mov     eax, [ebp+arg_0]
.text$mn:00003740                 jmp     short loc_374F
.text$mn:00003742 ; ---------------------------------------------------------------------------
.text$mn:00003742
.text$mn:00003742 loc_3742:                               ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+Fj
.text$mn:00003742                                         ; TiXmlHandleA::ChildElement(char const *,int)+57j
.text$mn:00003742                 push    0               ; struct TiXmlNodeA *
.text$mn:00003744                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003747                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:0000374C                 mov     eax, [ebp+arg_0]
.text$mn:0000374F
.text$mn:0000374F loc_374F:                               ; CODE XREF: TiXmlHandleA::ChildElement(char const *,int)+68j
.text$mn:0000374F                 mov     esp, ebp
.text$mn:00003751                 pop     ebp
.text$mn:00003752                 retn    0Ch
.text$mn:00003752 ?ChildElement@TiXmlHandleA@@QBE?AV1@PBDH@Z endp
.text$mn:00003752
.text$mn:00003752 ; ---------------------------------------------------------------------------
.text$mn:00003755                 align 4
.text$mn:00003758
.text$mn:00003758 ; =============== S U B R O U T I N E =======================================
.text$mn:00003758
.text$mn:00003758 ; Attributes: bp-based frame
.text$mn:00003758
.text$mn:00003758 ; public: class TiXmlHandleA __thiscall TiXmlHandleA::ChildElement(int)const
.text$mn:00003758                 public ?ChildElement@TiXmlHandleA@@QBE?AV1@H@Z
.text$mn:00003758 ?ChildElement@TiXmlHandleA@@QBE?AV1@H@Z proc near
.text$mn:00003758
.text$mn:00003758 var_C           = dword ptr -0Ch
.text$mn:00003758 var_8           = dword ptr -8
.text$mn:00003758 var_4           = dword ptr -4
.text$mn:00003758 arg_0           = dword ptr  8
.text$mn:00003758 arg_4           = dword ptr  0Ch
.text$mn:00003758
.text$mn:00003758                 push    ebp
.text$mn:00003759                 mov     ebp, esp
.text$mn:0000375B                 sub     esp, 0Ch
.text$mn:0000375E                 mov     [ebp+var_C], ecx
.text$mn:00003761                 mov     eax, [ebp+var_C]
.text$mn:00003764                 cmp     dword ptr [eax], 0
.text$mn:00003767                 jz      short loc_37BA
.text$mn:00003769                 mov     ecx, [ebp+var_C]
.text$mn:0000376C                 mov     ecx, [ecx]      ; this
.text$mn:0000376E                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::FirstChildElement(void)
.text$mn:00003773                 mov     [ebp+var_4], eax
.text$mn:00003776                 mov     [ebp+var_8], 0
.text$mn:0000377D                 jmp     short loc_3793
.text$mn:0000377F ; ---------------------------------------------------------------------------
.text$mn:0000377F
.text$mn:0000377F loc_377F:                               ; CODE XREF: TiXmlHandleA::ChildElement(int)+49j
.text$mn:0000377F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003782                 call    ?NextSiblingElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::NextSiblingElement(void)
.text$mn:00003787                 mov     [ebp+var_4], eax
.text$mn:0000378A                 mov     edx, [ebp+var_8]
.text$mn:0000378D                 add     edx, 1
.text$mn:00003790                 mov     [ebp+var_8], edx
.text$mn:00003793
.text$mn:00003793 loc_3793:                               ; CODE XREF: TiXmlHandleA::ChildElement(int)+25j
.text$mn:00003793                 cmp     [ebp+var_4], 0
.text$mn:00003797                 jz      short loc_37A3
.text$mn:00003799                 mov     eax, [ebp+var_8]
.text$mn:0000379C                 cmp     eax, [ebp+arg_4]
.text$mn:0000379F                 jge     short loc_37A3
.text$mn:000037A1                 jmp     short loc_377F
.text$mn:000037A3 ; ---------------------------------------------------------------------------
.text$mn:000037A3
.text$mn:000037A3 loc_37A3:                               ; CODE XREF: TiXmlHandleA::ChildElement(int)+3Fj
.text$mn:000037A3                                         ; TiXmlHandleA::ChildElement(int)+47j
.text$mn:000037A3                 cmp     [ebp+var_4], 0
.text$mn:000037A7                 jz      short loc_37BA
.text$mn:000037A9                 mov     ecx, [ebp+var_4]
.text$mn:000037AC                 push    ecx             ; struct TiXmlNodeA *
.text$mn:000037AD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000037B0                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000037B5                 mov     eax, [ebp+arg_0]
.text$mn:000037B8                 jmp     short loc_37C7
.text$mn:000037BA ; ---------------------------------------------------------------------------
.text$mn:000037BA
.text$mn:000037BA loc_37BA:                               ; CODE XREF: TiXmlHandleA::ChildElement(int)+Fj
.text$mn:000037BA                                         ; TiXmlHandleA::ChildElement(int)+4Fj
.text$mn:000037BA                 push    0               ; struct TiXmlNodeA *
.text$mn:000037BC                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000037BF                 call    ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z ; TiXmlHandleA::TiXmlHandleA(TiXmlNodeA *)
.text$mn:000037C4                 mov     eax, [ebp+arg_0]
.text$mn:000037C7
.text$mn:000037C7 loc_37C7:                               ; CODE XREF: TiXmlHandleA::ChildElement(int)+60j
.text$mn:000037C7                 mov     esp, ebp
.text$mn:000037C9                 pop     ebp
.text$mn:000037CA                 retn    8
.text$mn:000037CA ?ChildElement@TiXmlHandleA@@QBE?AV1@H@Z endp
.text$mn:000037CA
.text$mn:000037CA ; ---------------------------------------------------------------------------
.text$mn:000037CD                 align 10h
.text$mn:000037CD _text$mn        ends
.text$mn:000037CD
.text$x:000037D0 ; ===========================================================================
.text$x:000037D0
.text$x:000037D0 ; Segment type: Pure code
.text$x:000037D0 ; Segment permissions: Read/Execute
.text$x:000037D0 _text$x         segment para public 'CODE' use32
.text$x:000037D0                 assume cs:_text$x
.text$x:000037D0                 ;org 37D0h
.text$x:000037D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000037D0
.text$x:000037D0 ; =============== S U B R O U T I N E =======================================
.text$x:000037D0
.text$x:000037D0
.text$x:000037D0 __unwindfunclet$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z$0 proc near
.text$x:000037D0                                         ; DATA XREF: .xdata$x:0000BE18o
.text$x:000037D0                 lea     ecx, [ebp-2Ch]
.text$x:000037D3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000037D3 __unwindfunclet$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z$0 endp
.text$x:000037D3
.text$x:000037D8
.text$x:000037D8 ; =============== S U B R O U T I N E =======================================
.text$x:000037D8
.text$x:000037D8
.text$x:000037D8 __ehhandler$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z proc near
.text$x:000037D8                                         ; DATA XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+5o
.text$x:000037D8
.text$x:000037D8 arg_4           = dword ptr  8
.text$x:000037D8
.text$x:000037D8                 mov     edx, [esp+arg_4]
.text$x:000037DC                 lea     eax, [edx+0Ch]
.text$x:000037DF                 mov     ecx, [edx-24h]
.text$x:000037E2                 xor     ecx, eax
.text$x:000037E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037E9                 mov     ecx, [edx-4]
.text$x:000037EC                 xor     ecx, eax
.text$x:000037EE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037F3                 mov     eax, offset __ehfuncinfo$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z
.text$x:000037F8                 jmp     ___CxxFrameHandler3
.text$x:000037F8 __ehhandler$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z endp
.text$x:000037F8
.text$x:000037FD
.text$x:000037FD ; =============== S U B R O U T I N E =======================================
.text$x:000037FD
.text$x:000037FD
.text$x:000037FD __unwindfunclet$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z$0 proc near
.text$x:000037FD                                         ; DATA XREF: .xdata$x:0000BE10o
.text$x:000037FD                 lea     ecx, [ebp-2Ch]
.text$x:00003800                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003800 __unwindfunclet$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z$0 endp
.text$x:00003800
.text$x:00003805
.text$x:00003805 ; =============== S U B R O U T I N E =======================================
.text$x:00003805
.text$x:00003805
.text$x:00003805 __ehhandler$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z proc near
.text$x:00003805                                         ; DATA XREF: operator>>(std::basic_istream<char,std::char_traits<char>> &,TiXmlNodeA &)+5o
.text$x:00003805
.text$x:00003805 arg_4           = dword ptr  8
.text$x:00003805
.text$x:00003805                 mov     edx, [esp+arg_4]
.text$x:00003809                 lea     eax, [edx+0Ch]
.text$x:0000380C                 mov     ecx, [edx-28h]
.text$x:0000380F                 xor     ecx, eax
.text$x:00003811                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003816                 mov     ecx, [edx-4]
.text$x:00003819                 xor     ecx, eax
.text$x:0000381B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003820                 mov     eax, offset __ehfuncinfo$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z
.text$x:00003825                 jmp     ___CxxFrameHandler3
.text$x:00003825 __ehhandler$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z endp
.text$x:00003825
.text$x:0000382A
.text$x:0000382A ; =============== S U B R O U T I N E =======================================
.text$x:0000382A
.text$x:0000382A
.text$x:0000382A __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$0 proc near
.text$x:0000382A                                         ; DATA XREF: .xdata$x:0000BEC0o
.text$x:0000382A                 lea     ecx, [ebp-0D0h]
.text$x:00003830                 jmp     ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
.text$x:00003830 __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$0 endp
.text$x:00003830
.text$x:00003835
.text$x:00003835 ; =============== S U B R O U T I N E =======================================
.text$x:00003835
.text$x:00003835
.text$x:00003835 __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$1 proc near
.text$x:00003835                                         ; DATA XREF: .xdata$x:0000BEC8o
.text$x:00003835                 lea     ecx, [ebp-2Ch]
.text$x:00003838                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003838 __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$1 endp
.text$x:00003838
.text$x:0000383D
.text$x:0000383D ; =============== S U B R O U T I N E =======================================
.text$x:0000383D
.text$x:0000383D
.text$x:0000383D __ehhandler$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z proc near
.text$x:0000383D                                         ; DATA XREF: operator<<(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,TiXmlNodeA const &)+5o
.text$x:0000383D
.text$x:0000383D arg_4           = dword ptr  8
.text$x:0000383D
.text$x:0000383D                 mov     edx, [esp+arg_4]
.text$x:00003841                 lea     eax, [edx+0Ch]
.text$x:00003844                 mov     ecx, [edx-0C8h]
.text$x:0000384A                 xor     ecx, eax
.text$x:0000384C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003851                 mov     ecx, [edx-4]
.text$x:00003854                 xor     ecx, eax
.text$x:00003856                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000385B                 mov     eax, offset __ehfuncinfo$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z
.text$x:00003860                 jmp     ___CxxFrameHandler3
.text$x:00003860 __ehhandler$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z endp
.text$x:00003860
.text$x:00003865
.text$x:00003865 ; =============== S U B R O U T I N E =======================================
.text$x:00003865
.text$x:00003865
.text$x:00003865 __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$0 proc near
.text$x:00003865                                         ; DATA XREF: .xdata$x:0000BEB0o
.text$x:00003865                 mov     ecx, [ebp-14h]  ; this
.text$x:00003868                 jmp     ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$x:00003868 __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$0 endp
.text$x:00003868
.text$x:0000386D
.text$x:0000386D ; =============== S U B R O U T I N E =======================================
.text$x:0000386D
.text$x:0000386D
.text$x:0000386D __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$1 proc near
.text$x:0000386D                                         ; DATA XREF: .xdata$x:0000BEB8o
.text$x:0000386D                 mov     ecx, [ebp-14h]
.text$x:00003870                 add     ecx, 1Ch
.text$x:00003873                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003873 __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$1 endp
.text$x:00003873
.text$x:00003878
.text$x:00003878 ; =============== S U B R O U T I N E =======================================
.text$x:00003878
.text$x:00003878
.text$x:00003878 __ehhandler$??1TiXmlNodeA@@UAE@XZ proc near
.text$x:00003878                                         ; DATA XREF: TiXmlNodeA::~TiXmlNodeA(void)+5o
.text$x:00003878
.text$x:00003878 arg_4           = dword ptr  8
.text$x:00003878
.text$x:00003878                 mov     edx, [esp+arg_4]
.text$x:0000387C                 lea     eax, [edx+0Ch]
.text$x:0000387F                 mov     ecx, [edx-1Ch]
.text$x:00003882                 xor     ecx, eax
.text$x:00003884                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003889                 mov     eax, offset __ehfuncinfo$??1TiXmlNodeA@@UAE@XZ
.text$x:0000388E                 jmp     ___CxxFrameHandler3
.text$x:0000388E __ehhandler$??1TiXmlNodeA@@UAE@XZ endp
.text$x:0000388E
.text$x:00003893
.text$x:00003893 ; =============== S U B R O U T I N E =======================================
.text$x:00003893
.text$x:00003893
.text$x:00003893 __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0 proc near
.text$x:00003893                                         ; DATA XREF: .xdata$x:0000BEA0o
.text$x:00003893                 lea     ecx, [ebp-2Ch]
.text$x:00003896                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003896 __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0 endp
.text$x:00003896
.text$x:0000389B
.text$x:0000389B ; =============== S U B R O U T I N E =======================================
.text$x:0000389B
.text$x:0000389B
.text$x:0000389B __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1 proc near
.text$x:0000389B                                         ; DATA XREF: .xdata$x:0000BEA8o
.text$x:0000389B                 lea     ecx, [ebp-48h]
.text$x:0000389E                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000389E __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1 endp
.text$x:0000389E
.text$x:000038A3
.text$x:000038A3 ; =============== S U B R O U T I N E =======================================
.text$x:000038A3
.text$x:000038A3
.text$x:000038A3 __ehhandler$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$x:000038A3                                         ; DATA XREF: TiXmlNodeA::FirstChild(char const *)+5o
.text$x:000038A3
.text$x:000038A3 arg_4           = dword ptr  8
.text$x:000038A3
.text$x:000038A3                 mov     edx, [esp+arg_4]
.text$x:000038A7                 lea     eax, [edx+0Ch]
.text$x:000038AA                 mov     ecx, [edx-5Ch]
.text$x:000038AD                 xor     ecx, eax
.text$x:000038AF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038B4                 mov     ecx, [edx-4]
.text$x:000038B7                 xor     ecx, eax
.text$x:000038B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038BE                 mov     eax, offset __ehfuncinfo$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$x:000038C3                 jmp     ___CxxFrameHandler3
.text$x:000038C3 __ehhandler$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$x:000038C3
.text$x:000038C8
.text$x:000038C8 ; =============== S U B R O U T I N E =======================================
.text$x:000038C8
.text$x:000038C8
.text$x:000038C8 __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0 proc near
.text$x:000038C8                                         ; DATA XREF: .xdata$x:0000BE90o
.text$x:000038C8                 lea     ecx, [ebp-2Ch]
.text$x:000038CB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000038CB __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0 endp
.text$x:000038CB
.text$x:000038D0
.text$x:000038D0 ; =============== S U B R O U T I N E =======================================
.text$x:000038D0
.text$x:000038D0
.text$x:000038D0 __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1 proc near
.text$x:000038D0                                         ; DATA XREF: .xdata$x:0000BE98o
.text$x:000038D0                 lea     ecx, [ebp-48h]
.text$x:000038D3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000038D3 __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1 endp
.text$x:000038D3
.text$x:000038D8
.text$x:000038D8 ; =============== S U B R O U T I N E =======================================
.text$x:000038D8
.text$x:000038D8
.text$x:000038D8 __ehhandler$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$x:000038D8                                         ; DATA XREF: TiXmlNodeA::LastChild(char const *)+5o
.text$x:000038D8
.text$x:000038D8 arg_4           = dword ptr  8
.text$x:000038D8
.text$x:000038D8                 mov     edx, [esp+arg_4]
.text$x:000038DC                 lea     eax, [edx+0Ch]
.text$x:000038DF                 mov     ecx, [edx-5Ch]
.text$x:000038E2                 xor     ecx, eax
.text$x:000038E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038E9                 mov     ecx, [edx-4]
.text$x:000038EC                 xor     ecx, eax
.text$x:000038EE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038F3                 mov     eax, offset __ehfuncinfo$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$x:000038F8                 jmp     ___CxxFrameHandler3
.text$x:000038F8 __ehhandler$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$x:000038F8
.text$x:000038FD
.text$x:000038FD ; =============== S U B R O U T I N E =======================================
.text$x:000038FD
.text$x:000038FD
.text$x:000038FD __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0 proc near
.text$x:000038FD                                         ; DATA XREF: .xdata$x:0000BE80o
.text$x:000038FD                 lea     ecx, [ebp-2Ch]
.text$x:00003900                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003900 __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0 endp
.text$x:00003900
.text$x:00003905
.text$x:00003905 ; =============== S U B R O U T I N E =======================================
.text$x:00003905
.text$x:00003905
.text$x:00003905 __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1 proc near
.text$x:00003905                                         ; DATA XREF: .xdata$x:0000BE88o
.text$x:00003905                 lea     ecx, [ebp-48h]
.text$x:00003908                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003908 __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1 endp
.text$x:00003908
.text$x:0000390D
.text$x:0000390D ; =============== S U B R O U T I N E =======================================
.text$x:0000390D
.text$x:0000390D
.text$x:0000390D __ehhandler$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$x:0000390D                                         ; DATA XREF: TiXmlNodeA::PreviousSibling(char const *)+5o
.text$x:0000390D
.text$x:0000390D arg_4           = dword ptr  8
.text$x:0000390D
.text$x:0000390D                 mov     edx, [esp+arg_4]
.text$x:00003911                 lea     eax, [edx+0Ch]
.text$x:00003914                 mov     ecx, [edx-5Ch]
.text$x:00003917                 xor     ecx, eax
.text$x:00003919                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000391E                 mov     ecx, [edx-4]
.text$x:00003921                 xor     ecx, eax
.text$x:00003923                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003928                 mov     eax, offset __ehfuncinfo$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$x:0000392D                 jmp     ___CxxFrameHandler3
.text$x:0000392D __ehhandler$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$x:0000392D
.text$x:00003932
.text$x:00003932 ; =============== S U B R O U T I N E =======================================
.text$x:00003932
.text$x:00003932
.text$x:00003932 __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0 proc near
.text$x:00003932                                         ; DATA XREF: .xdata$x:0000BE70o
.text$x:00003932                 lea     ecx, [ebp-2Ch]
.text$x:00003935                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003935 __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0 endp
.text$x:00003935
.text$x:0000393A
.text$x:0000393A ; =============== S U B R O U T I N E =======================================
.text$x:0000393A
.text$x:0000393A
.text$x:0000393A __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1 proc near
.text$x:0000393A                                         ; DATA XREF: .xdata$x:0000BE78o
.text$x:0000393A                 lea     ecx, [ebp-48h]
.text$x:0000393D                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000393D __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1 endp
.text$x:0000393D
.text$x:00003942
.text$x:00003942 ; =============== S U B R O U T I N E =======================================
.text$x:00003942
.text$x:00003942
.text$x:00003942 __ehhandler$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z proc near
.text$x:00003942                                         ; DATA XREF: TiXmlNodeA::NextSibling(char const *)+5o
.text$x:00003942
.text$x:00003942 arg_4           = dword ptr  8
.text$x:00003942
.text$x:00003942                 mov     edx, [esp+arg_4]
.text$x:00003946                 lea     eax, [edx+0Ch]
.text$x:00003949                 mov     ecx, [edx-5Ch]
.text$x:0000394C                 xor     ecx, eax
.text$x:0000394E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003953                 mov     ecx, [edx-4]
.text$x:00003956                 xor     ecx, eax
.text$x:00003958                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000395D                 mov     eax, offset __ehfuncinfo$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.text$x:00003962                 jmp     ___CxxFrameHandler3
.text$x:00003962 __ehhandler$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z endp
.text$x:00003962
.text$x:00003967
.text$x:00003967 ; =============== S U B R O U T I N E =======================================
.text$x:00003967
.text$x:00003967
.text$x:00003967 __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$0 proc near
.text$x:00003967                                         ; DATA XREF: .xdata$x:0000BE60o
.text$x:00003967                 mov     ecx, [ebp-10h]  ; this
.text$x:0000396A                 jmp     ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$x:0000396A __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$0 endp
.text$x:0000396A
.text$x:0000396F
.text$x:0000396F ; =============== S U B R O U T I N E =======================================
.text$x:0000396F
.text$x:0000396F
.text$x:0000396F __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$1 proc near
.text$x:0000396F                                         ; DATA XREF: .xdata$x:0000BE68o
.text$x:0000396F                 mov     ecx, [ebp-10h]
.text$x:00003972                 add     ecx, 1Ch
.text$x:00003975                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003975 __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$1 endp
.text$x:00003975
.text$x:0000397A
.text$x:0000397A ; =============== S U B R O U T I N E =======================================
.text$x:0000397A
.text$x:0000397A
.text$x:0000397A __ehhandler$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z proc near
.text$x:0000397A                                         ; DATA XREF: TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)+5o
.text$x:0000397A
.text$x:0000397A arg_4           = dword ptr  8
.text$x:0000397A
.text$x:0000397A                 mov     edx, [esp+arg_4]
.text$x:0000397E                 lea     eax, [edx+0Ch]
.text$x:00003981                 mov     ecx, [edx-8]
.text$x:00003984                 xor     ecx, eax
.text$x:00003986                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000398B                 mov     eax, offset __ehfuncinfo$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z
.text$x:00003990                 jmp     ___CxxFrameHandler3
.text$x:00003990 __ehhandler$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z endp
.text$x:00003990
.text$x:00003995
.text$x:00003995 ; =============== S U B R O U T I N E =======================================
.text$x:00003995
.text$x:00003995
.text$x:00003995 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$0 proc near
.text$x:00003995                                         ; DATA XREF: .xdata$x:0000BEF0o
.text$x:00003995                 lea     ecx, [ebp-2Ch]
.text$x:00003998                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003998 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$0 endp
.text$x:00003998
.text$x:0000399D
.text$x:0000399D ; =============== S U B R O U T I N E =======================================
.text$x:0000399D
.text$x:0000399D
.text$x:0000399D __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$1 proc near
.text$x:0000399D                                         ; DATA XREF: .xdata$x:0000BEF8o
.text$x:0000399D                 lea     ecx, [ebp-48h]
.text$x:000039A0                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000039A0 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$1 endp
.text$x:000039A0
.text$x:000039A5
.text$x:000039A5 ; =============== S U B R O U T I N E =======================================
.text$x:000039A5
.text$x:000039A5
.text$x:000039A5 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$2 proc near
.text$x:000039A5                                         ; DATA XREF: .xdata$x:0000BF00o
.text$x:000039A5                 lea     ecx, [ebp-80h]
.text$x:000039A8                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000039A8 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$2 endp
.text$x:000039A8
.text$x:000039AD
.text$x:000039AD ; =============== S U B R O U T I N E =======================================
.text$x:000039AD
.text$x:000039AD
.text$x:000039AD __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$3 proc near
.text$x:000039AD                                         ; DATA XREF: .xdata$x:0000BF08o
.text$x:000039AD                 lea     ecx, [ebp-64h]
.text$x:000039B0                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000039B0 __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$3 endp
.text$x:000039B0
.text$x:000039B5
.text$x:000039B5 ; =============== S U B R O U T I N E =======================================
.text$x:000039B5
.text$x:000039B5
.text$x:000039B5 __ehhandler$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z proc near
.text$x:000039B5                                         ; DATA XREF: TiXmlAttributeA::Print(_iobuf *,int)+5o
.text$x:000039B5
.text$x:000039B5 arg_4           = dword ptr  8
.text$x:000039B5
.text$x:000039B5                 mov     edx, [esp+arg_4]
.text$x:000039B9                 lea     eax, [edx+0Ch]
.text$x:000039BC                 mov     ecx, [edx-7Ch]
.text$x:000039BF                 xor     ecx, eax
.text$x:000039C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039C6                 mov     ecx, [edx-4]
.text$x:000039C9                 xor     ecx, eax
.text$x:000039CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039D0                 mov     eax, offset __ehfuncinfo$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z
.text$x:000039D5                 jmp     ___CxxFrameHandler3
.text$x:000039D5 __ehhandler$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z endp
.text$x:000039D5
.text$x:000039DA
.text$x:000039DA ; =============== S U B R O U T I N E =======================================
.text$x:000039DA
.text$x:000039DA
.text$x:000039DA __unwindfunclet$??0TiXmlAttributeSetA@@QAE@XZ$0 proc near
.text$x:000039DA                                         ; DATA XREF: .xdata$x:0000BE08o
.text$x:000039DA                 mov     ecx, [ebp-10h]  ; this
.text$x:000039DD                 jmp     ??1TiXmlAttributeA@@UAE@XZ ; TiXmlAttributeA::~TiXmlAttributeA(void)
.text$x:000039DD __unwindfunclet$??0TiXmlAttributeSetA@@QAE@XZ$0 endp
.text$x:000039DD
.text$x:000039E2
.text$x:000039E2 ; =============== S U B R O U T I N E =======================================
.text$x:000039E2
.text$x:000039E2
.text$x:000039E2 __ehhandler$??0TiXmlAttributeSetA@@QAE@XZ proc near
.text$x:000039E2                                         ; DATA XREF: TiXmlAttributeSetA::TiXmlAttributeSetA(void)+5o
.text$x:000039E2
.text$x:000039E2 arg_4           = dword ptr  8
.text$x:000039E2
.text$x:000039E2                 mov     edx, [esp+arg_4]
.text$x:000039E6                 lea     eax, [edx+0Ch]
.text$x:000039E9                 mov     ecx, [edx-8]
.text$x:000039EC                 xor     ecx, eax
.text$x:000039EE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039F3                 mov     eax, offset __ehfuncinfo$??0TiXmlAttributeSetA@@QAE@XZ
.text$x:000039F8                 jmp     ___CxxFrameHandler3
.text$x:000039F8 __ehhandler$??0TiXmlAttributeSetA@@QAE@XZ endp
.text$x:000039F8
.text$x:000039FD
.text$x:000039FD ; =============== S U B R O U T I N E =======================================
.text$x:000039FD
.text$x:000039FD
.text$x:000039FD __unwindfunclet$??1TiXmlAttributeSetA@@QAE@XZ$0 proc near
.text$x:000039FD                                         ; DATA XREF: .xdata$x:0000BE00o
.text$x:000039FD                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A00                 jmp     ??1TiXmlAttributeA@@UAE@XZ ; TiXmlAttributeA::~TiXmlAttributeA(void)
.text$x:00003A00 __unwindfunclet$??1TiXmlAttributeSetA@@QAE@XZ$0 endp
.text$x:00003A00
.text$x:00003A05
.text$x:00003A05 ; =============== S U B R O U T I N E =======================================
.text$x:00003A05
.text$x:00003A05
.text$x:00003A05 __ehhandler$??1TiXmlAttributeSetA@@QAE@XZ proc near
.text$x:00003A05                                         ; DATA XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+5o
.text$x:00003A05
.text$x:00003A05 arg_4           = dword ptr  8
.text$x:00003A05
.text$x:00003A05                 mov     edx, [esp+arg_4]
.text$x:00003A09                 lea     eax, [edx+0Ch]
.text$x:00003A0C                 mov     ecx, [edx-8]
.text$x:00003A0F                 xor     ecx, eax
.text$x:00003A11                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A16                 mov     eax, offset __ehfuncinfo$??1TiXmlAttributeSetA@@QAE@XZ
.text$x:00003A1B                 jmp     ___CxxFrameHandler3
.text$x:00003A1B __ehhandler$??1TiXmlAttributeSetA@@QAE@XZ endp
.text$x:00003A1B
.text$x:00003A20
.text$x:00003A20 ; =============== S U B R O U T I N E =======================================
.text$x:00003A20
.text$x:00003A20
.text$x:00003A20 __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$0 proc near
.text$x:00003A20                                         ; DATA XREF: .xdata$x:0000BE50o
.text$x:00003A20                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A23                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00003A23 __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$0 endp
.text$x:00003A23
.text$x:00003A28
.text$x:00003A28 ; =============== S U B R O U T I N E =======================================
.text$x:00003A28
.text$x:00003A28
.text$x:00003A28 __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$1 proc near
.text$x:00003A28                                         ; DATA XREF: .xdata$x:0000BE58o
.text$x:00003A28                 mov     ecx, [ebp-10h]
.text$x:00003A2B                 add     ecx, 44h ; 'D'  ; this
.text$x:00003A2E                 jmp     ??1TiXmlAttributeSetA@@QAE@XZ ; TiXmlAttributeSetA::~TiXmlAttributeSetA(void)
.text$x:00003A2E __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$1 endp
.text$x:00003A2E
.text$x:00003A33
.text$x:00003A33 ; =============== S U B R O U T I N E =======================================
.text$x:00003A33
.text$x:00003A33
.text$x:00003A33 __ehhandler$??0TiXmlElementA@@QAE@PBD@Z proc near
.text$x:00003A33                                         ; DATA XREF: TiXmlElementA::TiXmlElementA(char const *)+5o
.text$x:00003A33
.text$x:00003A33 arg_4           = dword ptr  8
.text$x:00003A33
.text$x:00003A33                 mov     edx, [esp+arg_4]
.text$x:00003A37                 lea     eax, [edx+0Ch]
.text$x:00003A3A                 mov     ecx, [edx-8]
.text$x:00003A3D                 xor     ecx, eax
.text$x:00003A3F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A44                 mov     eax, offset __ehfuncinfo$??0TiXmlElementA@@QAE@PBD@Z
.text$x:00003A49                 jmp     ___CxxFrameHandler3
.text$x:00003A49 __ehhandler$??0TiXmlElementA@@QAE@PBD@Z endp
.text$x:00003A49
.text$x:00003A4E
.text$x:00003A4E ; =============== S U B R O U T I N E =======================================
.text$x:00003A4E
.text$x:00003A4E
.text$x:00003A4E __unwindfunclet$??1TiXmlElementA@@UAE@XZ$0 proc near
.text$x:00003A4E                                         ; DATA XREF: .xdata$x:0000BE40o
.text$x:00003A4E                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A51                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00003A51 __unwindfunclet$??1TiXmlElementA@@UAE@XZ$0 endp
.text$x:00003A51
.text$x:00003A56
.text$x:00003A56 ; =============== S U B R O U T I N E =======================================
.text$x:00003A56
.text$x:00003A56
.text$x:00003A56 __unwindfunclet$??1TiXmlElementA@@UAE@XZ$1 proc near
.text$x:00003A56                                         ; DATA XREF: .xdata$x:0000BE48o
.text$x:00003A56                 mov     ecx, [ebp-10h]
.text$x:00003A59                 add     ecx, 44h ; 'D'  ; this
.text$x:00003A5C                 jmp     ??1TiXmlAttributeSetA@@QAE@XZ ; TiXmlAttributeSetA::~TiXmlAttributeSetA(void)
.text$x:00003A5C __unwindfunclet$??1TiXmlElementA@@UAE@XZ$1 endp
.text$x:00003A5C
.text$x:00003A61
.text$x:00003A61 ; =============== S U B R O U T I N E =======================================
.text$x:00003A61
.text$x:00003A61
.text$x:00003A61 __ehhandler$??1TiXmlElementA@@UAE@XZ proc near
.text$x:00003A61                                         ; DATA XREF: TiXmlElementA::~TiXmlElementA(void)+5o
.text$x:00003A61
.text$x:00003A61 arg_4           = dword ptr  8
.text$x:00003A61
.text$x:00003A61                 mov     edx, [esp+arg_4]
.text$x:00003A65                 lea     eax, [edx+0Ch]
.text$x:00003A68                 mov     ecx, [edx-18h]
.text$x:00003A6B                 xor     ecx, eax
.text$x:00003A6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A72                 mov     eax, offset __ehfuncinfo$??1TiXmlElementA@@UAE@XZ
.text$x:00003A77                 jmp     ___CxxFrameHandler3
.text$x:00003A77 __ehhandler$??1TiXmlElementA@@UAE@XZ endp
.text$x:00003A77
.text$x:00003A7C
.text$x:00003A7C ; =============== S U B R O U T I N E =======================================
.text$x:00003A7C
.text$x:00003A7C
.text$x:00003A7C __unwindfunclet$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z$0 proc near
.text$x:00003A7C                                         ; DATA XREF: .xdata$x:0000BDF8o
.text$x:00003A7C                 mov     eax, [ebp-18h]
.text$x:00003A7F                 push    eax             ; void *
.text$x:00003A80                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003A85                 pop     ecx
.text$x:00003A86                 retn
.text$x:00003A86 __unwindfunclet$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z$0 endp
.text$x:00003A86
.text$x:00003A87
.text$x:00003A87 ; =============== S U B R O U T I N E =======================================
.text$x:00003A87
.text$x:00003A87
.text$x:00003A87 __ehhandler$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z proc near
.text$x:00003A87                                         ; DATA XREF: TiXmlElementA::SetAttribute(char const *,char const *)+5o
.text$x:00003A87
.text$x:00003A87 arg_4           = dword ptr  8
.text$x:00003A87
.text$x:00003A87                 mov     edx, [esp+arg_4]
.text$x:00003A8B                 lea     eax, [edx+0Ch]
.text$x:00003A8E                 mov     ecx, [edx-20h]
.text$x:00003A91                 xor     ecx, eax
.text$x:00003A93                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A98                 mov     eax, offset __ehfuncinfo$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z
.text$x:00003A9D                 jmp     ___CxxFrameHandler3
.text$x:00003A9D __ehhandler$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z endp
.text$x:00003A9D
.text$x:00003AA2
.text$x:00003AA2 ; =============== S U B R O U T I N E =======================================
.text$x:00003AA2
.text$x:00003AA2
.text$x:00003AA2 __unwindfunclet$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003AA2                                         ; DATA XREF: .xdata$x:0000BDF0o
.text$x:00003AA2                 mov     eax, [ebp-20h]
.text$x:00003AA5                 push    eax             ; void *
.text$x:00003AA6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003AAB                 pop     ecx
.text$x:00003AAC                 retn
.text$x:00003AAC __unwindfunclet$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003AAC
.text$x:00003AAD
.text$x:00003AAD ; =============== S U B R O U T I N E =======================================
.text$x:00003AAD
.text$x:00003AAD
.text$x:00003AAD __ehhandler$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003AAD                                         ; DATA XREF: TiXmlElementA::Clone(void)+5o
.text$x:00003AAD
.text$x:00003AAD arg_4           = dword ptr  8
.text$x:00003AAD
.text$x:00003AAD                 mov     edx, [esp+arg_4]
.text$x:00003AB1                 lea     eax, [edx+0Ch]
.text$x:00003AB4                 mov     ecx, [edx-20h]
.text$x:00003AB7                 xor     ecx, eax
.text$x:00003AB9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ABE                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ
.text$x:00003AC3                 jmp     ___CxxFrameHandler3
.text$x:00003AC3 __ehhandler$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ endp
.text$x:00003AC3
.text$x:00003AC8
.text$x:00003AC8 ; =============== S U B R O U T I N E =======================================
.text$x:00003AC8
.text$x:00003AC8
.text$x:00003AC8 __unwindfunclet$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003AC8                                         ; DATA XREF: .xdata$x:0000BDE8o
.text$x:00003AC8                 mov     eax, [ebp-14h]
.text$x:00003ACB                 push    eax             ; void *
.text$x:00003ACC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003AD1                 pop     ecx
.text$x:00003AD2                 retn
.text$x:00003AD2 __unwindfunclet$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003AD2
.text$x:00003AD3
.text$x:00003AD3 ; =============== S U B R O U T I N E =======================================
.text$x:00003AD3
.text$x:00003AD3
.text$x:00003AD3 __ehhandler$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003AD3                                         ; DATA XREF: TiXmlCommentA::Clone(void)+5o
.text$x:00003AD3
.text$x:00003AD3 arg_4           = dword ptr  8
.text$x:00003AD3
.text$x:00003AD3                 mov     edx, [esp+arg_4]
.text$x:00003AD7                 lea     eax, [edx+0Ch]
.text$x:00003ADA                 mov     ecx, [edx-18h]
.text$x:00003ADD                 xor     ecx, eax
.text$x:00003ADF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AE4                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ
.text$x:00003AE9                 jmp     ___CxxFrameHandler3
.text$x:00003AE9 __ehhandler$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ endp
.text$x:00003AE9
.text$x:00003AEE
.text$x:00003AEE ; =============== S U B R O U T I N E =======================================
.text$x:00003AEE
.text$x:00003AEE
.text$x:00003AEE __unwindfunclet$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z$0 proc near
.text$x:00003AEE                                         ; DATA XREF: .xdata$x:0000BDE0o
.text$x:00003AEE                 lea     ecx, [ebp-2Ch]
.text$x:00003AF1                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003AF1 __unwindfunclet$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z$0 endp
.text$x:00003AF1
.text$x:00003AF6
.text$x:00003AF6 ; =============== S U B R O U T I N E =======================================
.text$x:00003AF6
.text$x:00003AF6
.text$x:00003AF6 __ehhandler$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z proc near
.text$x:00003AF6                                         ; DATA XREF: TiXmlTextA::Print(_iobuf *,int)+5o
.text$x:00003AF6
.text$x:00003AF6 arg_4           = dword ptr  8
.text$x:00003AF6
.text$x:00003AF6                 mov     edx, [esp+arg_4]
.text$x:00003AFA                 lea     eax, [edx+0Ch]
.text$x:00003AFD                 mov     ecx, [edx-28h]
.text$x:00003B00                 xor     ecx, eax
.text$x:00003B02                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B07                 mov     ecx, [edx-4]
.text$x:00003B0A                 xor     ecx, eax
.text$x:00003B0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B11                 mov     eax, offset __ehfuncinfo$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z
.text$x:00003B16                 jmp     ___CxxFrameHandler3
.text$x:00003B16 __ehhandler$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z endp
.text$x:00003B16
.text$x:00003B1B
.text$x:00003B1B ; =============== S U B R O U T I N E =======================================
.text$x:00003B1B
.text$x:00003B1B
.text$x:00003B1B __unwindfunclet$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003B1B                                         ; DATA XREF: .xdata$x:0000BDD8o
.text$x:00003B1B                 mov     eax, [ebp-14h]
.text$x:00003B1E                 push    eax             ; void *
.text$x:00003B1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003B24                 pop     ecx
.text$x:00003B25                 retn
.text$x:00003B25 __unwindfunclet$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003B25
.text$x:00003B26
.text$x:00003B26 ; =============== S U B R O U T I N E =======================================
.text$x:00003B26
.text$x:00003B26
.text$x:00003B26 __ehhandler$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003B26                                         ; DATA XREF: TiXmlTextA::Clone(void)+5o
.text$x:00003B26
.text$x:00003B26 arg_4           = dword ptr  8
.text$x:00003B26
.text$x:00003B26                 mov     edx, [esp+arg_4]
.text$x:00003B2A                 lea     eax, [edx+0Ch]
.text$x:00003B2D                 mov     ecx, [edx-18h]
.text$x:00003B30                 xor     ecx, eax
.text$x:00003B32                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B37                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ
.text$x:00003B3C                 jmp     ___CxxFrameHandler3
.text$x:00003B3C __ehhandler$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ endp
.text$x:00003B3C
.text$x:00003B41
.text$x:00003B41 ; =============== S U B R O U T I N E =======================================
.text$x:00003B41
.text$x:00003B41
.text$x:00003B41 __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$0 proc near
.text$x:00003B41                                         ; DATA XREF: .xdata$x:0000BED0o
.text$x:00003B41                 mov     ecx, [ebp-10h]  ; this
.text$x:00003B44                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00003B44 __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$0 endp
.text$x:00003B44
.text$x:00003B49
.text$x:00003B49 ; =============== S U B R O U T I N E =======================================
.text$x:00003B49
.text$x:00003B49
.text$x:00003B49 __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$1 proc near
.text$x:00003B49                                         ; DATA XREF: .xdata$x:0000BED8o
.text$x:00003B49                 mov     ecx, [ebp-10h]
.text$x:00003B4C                 add     ecx, 44h ; 'D'
.text$x:00003B4F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003B4F __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$1 endp
.text$x:00003B4F
.text$x:00003B54
.text$x:00003B54 ; =============== S U B R O U T I N E =======================================
.text$x:00003B54
.text$x:00003B54
.text$x:00003B54 __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$2 proc near
.text$x:00003B54                                         ; DATA XREF: .xdata$x:0000BEE0o
.text$x:00003B54                 mov     ecx, [ebp-10h]
.text$x:00003B57                 add     ecx, 60h ; '`'
.text$x:00003B5A                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003B5A __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$2 endp
.text$x:00003B5A
.text$x:00003B5F
.text$x:00003B5F ; =============== S U B R O U T I N E =======================================
.text$x:00003B5F
.text$x:00003B5F
.text$x:00003B5F __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$3 proc near
.text$x:00003B5F                                         ; DATA XREF: .xdata$x:0000BEE8o
.text$x:00003B5F                 mov     ecx, [ebp-10h]
.text$x:00003B62                 add     ecx, 7Ch ; '|'
.text$x:00003B65                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003B65 __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$3 endp
.text$x:00003B65
.text$x:00003B6A
.text$x:00003B6A ; =============== S U B R O U T I N E =======================================
.text$x:00003B6A
.text$x:00003B6A
.text$x:00003B6A __ehhandler$??0TiXmlDeclarationA@@QAE@PBD00@Z proc near
.text$x:00003B6A                                         ; DATA XREF: TiXmlDeclarationA::TiXmlDeclarationA(char const *,char const *,char const *)+5o
.text$x:00003B6A
.text$x:00003B6A arg_4           = dword ptr  8
.text$x:00003B6A
.text$x:00003B6A                 mov     edx, [esp+arg_4]
.text$x:00003B6E                 lea     eax, [edx+0Ch]
.text$x:00003B71                 mov     ecx, [edx-8]
.text$x:00003B74                 xor     ecx, eax
.text$x:00003B76                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B7B                 mov     eax, offset __ehfuncinfo$??0TiXmlDeclarationA@@QAE@PBD00@Z
.text$x:00003B80                 jmp     ___CxxFrameHandler3
.text$x:00003B80 __ehhandler$??0TiXmlDeclarationA@@QAE@PBD00@Z endp
.text$x:00003B80
.text$x:00003B85
.text$x:00003B85 ; =============== S U B R O U T I N E =======================================
.text$x:00003B85
.text$x:00003B85
.text$x:00003B85 __unwindfunclet$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003B85                                         ; DATA XREF: .xdata$x:0000BDD0o
.text$x:00003B85                 mov     eax, [ebp-18h]
.text$x:00003B88                 push    eax             ; void *
.text$x:00003B89                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003B8E                 pop     ecx
.text$x:00003B8F                 retn
.text$x:00003B8F __unwindfunclet$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003B8F
.text$x:00003B90
.text$x:00003B90 ; =============== S U B R O U T I N E =======================================
.text$x:00003B90
.text$x:00003B90
.text$x:00003B90 __ehhandler$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003B90                                         ; DATA XREF: TiXmlDeclarationA::Clone(void)+5o
.text$x:00003B90
.text$x:00003B90 arg_4           = dword ptr  8
.text$x:00003B90
.text$x:00003B90                 mov     edx, [esp+arg_4]
.text$x:00003B94                 lea     eax, [edx+0Ch]
.text$x:00003B97                 mov     ecx, [edx-18h]
.text$x:00003B9A                 xor     ecx, eax
.text$x:00003B9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BA1                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ
.text$x:00003BA6                 jmp     ___CxxFrameHandler3
.text$x:00003BA6 __ehhandler$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ endp
.text$x:00003BA6
.text$x:00003BAB
.text$x:00003BAB ; =============== S U B R O U T I N E =======================================
.text$x:00003BAB
.text$x:00003BAB
.text$x:00003BAB __unwindfunclet$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003BAB                                         ; DATA XREF: .xdata$x:0000BDC8o
.text$x:00003BAB                 mov     eax, [ebp-14h]
.text$x:00003BAE                 push    eax             ; void *
.text$x:00003BAF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003BB4                 pop     ecx
.text$x:00003BB5                 retn
.text$x:00003BB5 __unwindfunclet$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003BB5
.text$x:00003BB6
.text$x:00003BB6 ; =============== S U B R O U T I N E =======================================
.text$x:00003BB6
.text$x:00003BB6
.text$x:00003BB6 __ehhandler$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003BB6                                         ; DATA XREF: TiXmlUnknownA::Clone(void)+5o
.text$x:00003BB6
.text$x:00003BB6 arg_4           = dword ptr  8
.text$x:00003BB6
.text$x:00003BB6                 mov     edx, [esp+arg_4]
.text$x:00003BBA                 lea     eax, [edx+0Ch]
.text$x:00003BBD                 mov     ecx, [edx-18h]
.text$x:00003BC0                 xor     ecx, eax
.text$x:00003BC2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BC7                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ
.text$x:00003BCC                 jmp     ___CxxFrameHandler3
.text$x:00003BCC __ehhandler$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ endp
.text$x:00003BCC
.text$x:00003BD1
.text$x:00003BD1 ; =============== S U B R O U T I N E =======================================
.text$x:00003BD1
.text$x:00003BD1
.text$x:00003BD1 __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$0 proc near
.text$x:00003BD1                                         ; DATA XREF: .xdata$x:0000BE30o
.text$x:00003BD1                 mov     ecx, [ebp-10h]  ; this
.text$x:00003BD4                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00003BD4 __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$0 endp
.text$x:00003BD4
.text$x:00003BD9
.text$x:00003BD9 ; =============== S U B R O U T I N E =======================================
.text$x:00003BD9
.text$x:00003BD9
.text$x:00003BD9 __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$1 proc near
.text$x:00003BD9                                         ; DATA XREF: .xdata$x:0000BE38o
.text$x:00003BD9                 mov     ecx, [ebp-10h]
.text$x:00003BDC                 add     ecx, 4Ch ; 'L'
.text$x:00003BDF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003BDF __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$1 endp
.text$x:00003BDF
.text$x:00003BE4
.text$x:00003BE4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BE4
.text$x:00003BE4
.text$x:00003BE4 __ehhandler$??0TiXmlDocumentA@@QAE@XZ proc near
.text$x:00003BE4                                         ; DATA XREF: TiXmlDocumentA::TiXmlDocumentA(void)+5o
.text$x:00003BE4
.text$x:00003BE4 arg_4           = dword ptr  8
.text$x:00003BE4
.text$x:00003BE4                 mov     edx, [esp+arg_4]
.text$x:00003BE8                 lea     eax, [edx+0Ch]
.text$x:00003BEB                 mov     ecx, [edx-8]
.text$x:00003BEE                 xor     ecx, eax
.text$x:00003BF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BF5                 mov     eax, offset __ehfuncinfo$??0TiXmlDocumentA@@QAE@XZ
.text$x:00003BFA                 jmp     ___CxxFrameHandler3
.text$x:00003BFA __ehhandler$??0TiXmlDocumentA@@QAE@XZ endp
.text$x:00003BFA
.text$x:00003BFF
.text$x:00003BFF ; =============== S U B R O U T I N E =======================================
.text$x:00003BFF
.text$x:00003BFF
.text$x:00003BFF __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$0 proc near
.text$x:00003BFF                                         ; DATA XREF: .xdata$x:0000BE20o
.text$x:00003BFF                 mov     ecx, [ebp-10h]  ; this
.text$x:00003C02                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00003C02 __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$0 endp
.text$x:00003C02
.text$x:00003C07
.text$x:00003C07 ; =============== S U B R O U T I N E =======================================
.text$x:00003C07
.text$x:00003C07
.text$x:00003C07 __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$1 proc near
.text$x:00003C07                                         ; DATA XREF: .xdata$x:0000BE28o
.text$x:00003C07                 mov     ecx, [ebp-10h]
.text$x:00003C0A                 add     ecx, 4Ch ; 'L'
.text$x:00003C0D                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003C0D __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$1 endp
.text$x:00003C0D
.text$x:00003C12
.text$x:00003C12 ; =============== S U B R O U T I N E =======================================
.text$x:00003C12
.text$x:00003C12
.text$x:00003C12 __ehhandler$??0TiXmlDocumentA@@QAE@PBD@Z proc near
.text$x:00003C12                                         ; DATA XREF: TiXmlDocumentA::TiXmlDocumentA(char const *)+5o
.text$x:00003C12
.text$x:00003C12 arg_4           = dword ptr  8
.text$x:00003C12
.text$x:00003C12                 mov     edx, [esp+arg_4]
.text$x:00003C16                 lea     eax, [edx+0Ch]
.text$x:00003C19                 mov     ecx, [edx-8]
.text$x:00003C1C                 xor     ecx, eax
.text$x:00003C1E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C23                 mov     eax, offset __ehfuncinfo$??0TiXmlDocumentA@@QAE@PBD@Z
.text$x:00003C28                 jmp     ___CxxFrameHandler3
.text$x:00003C28 __ehhandler$??0TiXmlDocumentA@@QAE@PBD@Z endp
.text$x:00003C28
.text$x:00003C2D
.text$x:00003C2D ; =============== S U B R O U T I N E =======================================
.text$x:00003C2D
.text$x:00003C2D
.text$x:00003C2D __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NXZ$0 proc near
.text$x:00003C2D                                         ; DATA XREF: .xdata$x:0000BDC0o
.text$x:00003C2D                 lea     ecx, [ebp-14h]  ; this
.text$x:00003C30                 jmp     ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$x:00003C30 __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NXZ$0 endp
.text$x:00003C30
.text$x:00003C35
.text$x:00003C35 ; =============== S U B R O U T I N E =======================================
.text$x:00003C35
.text$x:00003C35
.text$x:00003C35 __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NXZ proc near
.text$x:00003C35                                         ; DATA XREF: TiXmlDocumentA::LoadFile(void)+5o
.text$x:00003C35
.text$x:00003C35 arg_4           = dword ptr  8
.text$x:00003C35
.text$x:00003C35                 mov     edx, [esp+arg_4]
.text$x:00003C39                 lea     eax, [edx+0Ch]
.text$x:00003C3C                 mov     ecx, [edx-10h]
.text$x:00003C3F                 xor     ecx, eax
.text$x:00003C41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C46                 mov     eax, offset __ehfuncinfo$?LoadFile@TiXmlDocumentA@@QAE_NXZ
.text$x:00003C4B                 jmp     ___CxxFrameHandler3
.text$x:00003C4B __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NXZ endp
.text$x:00003C4B
.text$x:00003C50
.text$x:00003C50 ; =============== S U B R O U T I N E =======================================
.text$x:00003C50
.text$x:00003C50
.text$x:00003C50 __unwindfunclet$?SaveFile@TiXmlDocumentA@@QBE_NXZ$0 proc near
.text$x:00003C50                                         ; DATA XREF: .xdata$x:0000BDB8o
.text$x:00003C50                 lea     ecx, [ebp-14h]  ; this
.text$x:00003C53                 jmp     ??1StringToBuffer@TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::StringToBuffer::~StringToBuffer(void)
.text$x:00003C53 __unwindfunclet$?SaveFile@TiXmlDocumentA@@QBE_NXZ$0 endp
.text$x:00003C53
.text$x:00003C58
.text$x:00003C58 ; =============== S U B R O U T I N E =======================================
.text$x:00003C58
.text$x:00003C58
.text$x:00003C58 __ehhandler$?SaveFile@TiXmlDocumentA@@QBE_NXZ proc near
.text$x:00003C58                                         ; DATA XREF: TiXmlDocumentA::SaveFile(void)+5o
.text$x:00003C58
.text$x:00003C58 arg_4           = dword ptr  8
.text$x:00003C58
.text$x:00003C58                 mov     edx, [esp+arg_4]
.text$x:00003C5C                 lea     eax, [edx+0Ch]
.text$x:00003C5F                 mov     ecx, [edx-10h]
.text$x:00003C62                 xor     ecx, eax
.text$x:00003C64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C69                 mov     eax, offset __ehfuncinfo$?SaveFile@TiXmlDocumentA@@QBE_NXZ
.text$x:00003C6E                 jmp     ___CxxFrameHandler3
.text$x:00003C6E __ehhandler$?SaveFile@TiXmlDocumentA@@QBE_NXZ endp
.text$x:00003C6E
.text$x:00003C73
.text$x:00003C73 ; =============== S U B R O U T I N E =======================================
.text$x:00003C73
.text$x:00003C73
.text$x:00003C73 __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z$0 proc near
.text$x:00003C73                                         ; DATA XREF: .xdata$x:0000BDB0o
.text$x:00003C73                 lea     ecx, [ebp-82Ch]
.text$x:00003C79                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003C79 __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z$0 endp
.text$x:00003C79
.text$x:00003C7E
.text$x:00003C7E ; =============== S U B R O U T I N E =======================================
.text$x:00003C7E
.text$x:00003C7E
.text$x:00003C7E __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z proc near
.text$x:00003C7E                                         ; DATA XREF: TiXmlDocumentA::LoadFile(char const *)+5o
.text$x:00003C7E
.text$x:00003C7E arg_4           = dword ptr  8
.text$x:00003C7E
.text$x:00003C7E                 mov     edx, [esp+arg_4]
.text$x:00003C82                 lea     eax, [edx+0Ch]
.text$x:00003C85                 mov     ecx, [edx-838h]
.text$x:00003C8B                 xor     ecx, eax
.text$x:00003C8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C92                 mov     ecx, [edx-4]
.text$x:00003C95                 xor     ecx, eax
.text$x:00003C97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C9C                 mov     eax, offset __ehfuncinfo$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z
.text$x:00003CA1                 jmp     ___CxxFrameHandler3
.text$x:00003CA1 __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z endp
.text$x:00003CA1
.text$x:00003CA6
.text$x:00003CA6 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA6
.text$x:00003CA6
.text$x:00003CA6 __unwindfunclet$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z$0 proc near
.text$x:00003CA6                                         ; DATA XREF: .xdata$x:0000BDA8o
.text$x:00003CA6                 lea     ecx, [ebp-82Ch]
.text$x:00003CAC                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003CAC __unwindfunclet$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z$0 endp
.text$x:00003CAC
.text$x:00003CB1
.text$x:00003CB1 ; =============== S U B R O U T I N E =======================================
.text$x:00003CB1
.text$x:00003CB1
.text$x:00003CB1 __ehhandler$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z proc near
.text$x:00003CB1                                         ; DATA XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+5o
.text$x:00003CB1
.text$x:00003CB1 arg_4           = dword ptr  8
.text$x:00003CB1
.text$x:00003CB1                 mov     edx, [esp+arg_4]
.text$x:00003CB5                 lea     eax, [edx+0Ch]
.text$x:00003CB8                 mov     ecx, [edx-838h]
.text$x:00003CBE                 xor     ecx, eax
.text$x:00003CC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CC5                 mov     ecx, [edx-4]
.text$x:00003CC8                 xor     ecx, eax
.text$x:00003CCA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CCF                 mov     eax, offset __ehfuncinfo$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z
.text$x:00003CD4                 jmp     ___CxxFrameHandler3
.text$x:00003CD4 __ehhandler$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z endp
.text$x:00003CD4
.text$x:00003CD9
.text$x:00003CD9 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD9
.text$x:00003CD9
.text$x:00003CD9 __unwindfunclet$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ$0 proc near
.text$x:00003CD9                                         ; DATA XREF: .xdata$x:0000BDA0o
.text$x:00003CD9                 mov     eax, [ebp-1Ch]
.text$x:00003CDC                 push    eax             ; void *
.text$x:00003CDD                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003CE2                 pop     ecx
.text$x:00003CE3                 retn
.text$x:00003CE3 __unwindfunclet$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ$0 endp
.text$x:00003CE3
.text$x:00003CE4
.text$x:00003CE4 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE4
.text$x:00003CE4
.text$x:00003CE4 __ehhandler$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ proc near
.text$x:00003CE4                                         ; DATA XREF: TiXmlDocumentA::Clone(void)+5o
.text$x:00003CE4
.text$x:00003CE4 arg_4           = dword ptr  8
.text$x:00003CE4
.text$x:00003CE4                 mov     edx, [esp+arg_4]
.text$x:00003CE8                 lea     eax, [edx+0Ch]
.text$x:00003CEB                 mov     ecx, [edx-1Ch]
.text$x:00003CEE                 xor     ecx, eax
.text$x:00003CF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CF5                 mov     eax, offset __ehfuncinfo$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ
.text$x:00003CFA                 jmp     ___CxxFrameHandler3
.text$x:00003CFA __ehhandler$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ endp
.text$x:00003CFA
.text$x:00003CFA ; ---------------------------------------------------------------------------
.text$x:00003CFF                 align 10h
.text$x:00003CFF _text$x         ends
.text$x:00003CFF
.text$mn:00003D00 ; ===========================================================================
.text$mn:00003D00
.text$mn:00003D00 ; Segment type: Pure code
.text$mn:00003D00 ; Segment permissions: Read/Execute
.text$mn:00003D00 _text$mn        segment para public 'CODE' use32
.text$mn:00003D00                 assume cs:_text$mn
.text$mn:00003D00                 ;org 3D00h
.text$mn:00003D00 ; COMDAT (pick any)
.text$mn:00003D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D00
.text$mn:00003D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D00
.text$mn:00003D00 ; Attributes: bp-based frame
.text$mn:00003D00
.text$mn:00003D00 ; class std::basic_ostream<char, struct std::char_traits<char>> & __cdecl std::operator<<<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_ostream<char, struct std::char_traits<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00003D00                 public ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003D00 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z proc near
.text$mn:00003D00                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+4Fp
.text$mn:00003D00                                         ; TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+22p ...
.text$mn:00003D00
.text$mn:00003D00 var_54          = byte ptr -54h
.text$mn:00003D00 var_4C          = dword ptr -4Ch
.text$mn:00003D00 var_48          = dword ptr -48h
.text$mn:00003D00 var_44          = dword ptr -44h
.text$mn:00003D00 var_40          = dword ptr -40h
.text$mn:00003D00 var_3C          = dword ptr -3Ch
.text$mn:00003D00 var_38          = dword ptr -38h
.text$mn:00003D00 var_34          = dword ptr -34h
.text$mn:00003D00 var_30          = dword ptr -30h
.text$mn:00003D00 var_2C          = dword ptr -2Ch
.text$mn:00003D00 var_28          = dword ptr -28h
.text$mn:00003D00 var_24          = dword ptr -24h
.text$mn:00003D00 var_20          = dword ptr -20h
.text$mn:00003D00 var_1C          = dword ptr -1Ch
.text$mn:00003D00 var_18          = dword ptr -18h
.text$mn:00003D00 var_14          = dword ptr -14h
.text$mn:00003D00 var_10          = dword ptr -10h
.text$mn:00003D00 var_C           = dword ptr -0Ch
.text$mn:00003D00 var_4           = dword ptr -4
.text$mn:00003D00 arg_0           = dword ptr  8
.text$mn:00003D00 arg_4           = dword ptr  0Ch
.text$mn:00003D00
.text$mn:00003D00 ; FUNCTION CHUNK AT .text$mn:00003F55 SIZE 00000009 BYTES
.text$mn:00003D00 ; FUNCTION CHUNK AT .text$mn:00003F65 SIZE 00000040 BYTES
.text$mn:00003D00
.text$mn:00003D00                 push    ebp
.text$mn:00003D01                 mov     ebp, esp
.text$mn:00003D03                 push    0FFFFFFFFh
.text$mn:00003D05                 push    offset __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003D0A                 mov     eax, large fs:0
.text$mn:00003D10                 push    eax
.text$mn:00003D11                 push    ecx
.text$mn:00003D12                 sub     esp, 44h
.text$mn:00003D15                 push    ebx
.text$mn:00003D16                 push    esi
.text$mn:00003D17                 push    edi
.text$mn:00003D18                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D1D                 xor     eax, ebp
.text$mn:00003D1F                 push    eax
.text$mn:00003D20                 lea     eax, [ebp+var_C]
.text$mn:00003D23                 mov     large fs:0, eax
.text$mn:00003D29                 mov     [ebp+var_10], esp
.text$mn:00003D2C                 mov     [ebp+var_14], 0
.text$mn:00003D33                 mov     ecx, [ebp+arg_4]
.text$mn:00003D36                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00003D3B                 mov     [ebp+var_1C], eax
.text$mn:00003D3E                 mov     eax, [ebp+arg_0]
.text$mn:00003D41                 mov     ecx, [eax]
.text$mn:00003D43                 mov     edx, [ebp+arg_0]
.text$mn:00003D46                 add     edx, [ecx+4]
.text$mn:00003D49                 mov     ecx, edx        ; this
.text$mn:00003D4B                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003D50                 mov     [ebp+var_3C], eax
.text$mn:00003D53                 mov     [ebp+var_38], edx
.text$mn:00003D56                 cmp     [ebp+var_38], 0
.text$mn:00003D5A                 jl      short loc_3D95
.text$mn:00003D5C                 jg      short loc_3D64
.text$mn:00003D5E                 cmp     [ebp+var_3C], 0
.text$mn:00003D62                 jbe     short loc_3D95
.text$mn:00003D64
.text$mn:00003D64 loc_3D64:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Cj
.text$mn:00003D64                 mov     eax, [ebp+arg_0]
.text$mn:00003D67                 mov     ecx, [eax]
.text$mn:00003D69                 mov     edx, [ebp+arg_0]
.text$mn:00003D6C                 add     edx, [ecx+4]
.text$mn:00003D6F                 mov     ecx, edx        ; this
.text$mn:00003D71                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003D76                 cmp     eax, [ebp+var_1C]
.text$mn:00003D79                 jbe     short loc_3D95
.text$mn:00003D7B                 mov     eax, [ebp+arg_0]
.text$mn:00003D7E                 mov     ecx, [eax]
.text$mn:00003D80                 mov     edx, [ebp+arg_0]
.text$mn:00003D83                 add     edx, [ecx+4]
.text$mn:00003D86                 mov     ecx, edx        ; this
.text$mn:00003D88                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00003D8D                 sub     eax, [ebp+var_1C]
.text$mn:00003D90                 mov     [ebp+var_20], eax
.text$mn:00003D93                 jmp     short loc_3D9C
.text$mn:00003D95 ; ---------------------------------------------------------------------------
.text$mn:00003D95
.text$mn:00003D95 loc_3D95:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Aj
.text$mn:00003D95                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+62j ...
.text$mn:00003D95                 mov     [ebp+var_20], 0
.text$mn:00003D9C
.text$mn:00003D9C loc_3D9C:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+93j
.text$mn:00003D9C                 mov     eax, [ebp+var_20]
.text$mn:00003D9F                 mov     [ebp+var_18], eax
.text$mn:00003DA2                 mov     ecx, [ebp+arg_0]
.text$mn:00003DA5                 push    ecx
.text$mn:00003DA6                 lea     ecx, [ebp+var_54]
.text$mn:00003DA9                 call    ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
.text$mn:00003DAE                 mov     [ebp+var_4], 0
.text$mn:00003DB5                 lea     ecx, [ebp+var_54]
.text$mn:00003DB8                 call    ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator bool(void)
.text$mn:00003DBD                 movzx   edx, al
.text$mn:00003DC0                 test    edx, edx
.text$mn:00003DC2                 jnz     short loc_3DD2
.text$mn:00003DC4                 mov     eax, [ebp+var_14]
.text$mn:00003DC7                 or      eax, 4
.text$mn:00003DCA                 mov     [ebp+var_14], eax
.text$mn:00003DCD                 jmp     loc_3F65
.text$mn:00003DD2 ; ---------------------------------------------------------------------------
.text$mn:00003DD2
.text$mn:00003DD2 loc_3DD2:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+C2j
.text$mn:00003DD2                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003DD6                 mov     ecx, [ebp+arg_0]
.text$mn:00003DD9                 mov     edx, [ecx]
.text$mn:00003DDB                 mov     ecx, [ebp+arg_0]
.text$mn:00003DDE                 add     ecx, [edx+4]    ; this
.text$mn:00003DE1                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00003DE6                 and     eax, 1C0h
.text$mn:00003DEB                 cmp     eax, 40h ; '@'
.text$mn:00003DEE                 jz      short loc_3E5B
.text$mn:00003DF0                 jmp     short loc_3DFB
.text$mn:00003DF2 ; ---------------------------------------------------------------------------
.text$mn:00003DF2
.text$mn:00003DF2 loc_3DF2:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &):loc_3E59j
.text$mn:00003DF2                 mov     eax, [ebp+var_18]
.text$mn:00003DF5                 sub     eax, 1
.text$mn:00003DF8                 mov     [ebp+var_18], eax
.text$mn:00003DFB
.text$mn:00003DFB loc_3DFB:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+F0j
.text$mn:00003DFB                 cmp     [ebp+var_18], 0
.text$mn:00003DFF                 jbe     short loc_3E5B
.text$mn:00003E01                 mov     ecx, [ebp+arg_0]
.text$mn:00003E04                 mov     edx, [ecx]
.text$mn:00003E06                 mov     ecx, [ebp+arg_0]
.text$mn:00003E09                 add     ecx, [edx+4]
.text$mn:00003E0C                 call    ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
.text$mn:00003E11                 movzx   eax, al
.text$mn:00003E14                 push    eax
.text$mn:00003E15                 mov     ecx, [ebp+arg_0]
.text$mn:00003E18                 mov     edx, [ecx]
.text$mn:00003E1A                 mov     ecx, [ebp+arg_0]
.text$mn:00003E1D                 add     ecx, [edx+4]
.text$mn:00003E20                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00003E25                 mov     ecx, eax
.text$mn:00003E27                 call    ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text$mn:00003E2C                 mov     [ebp+var_24], eax
.text$mn:00003E2F                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00003E34                 mov     [ebp+var_28], eax
.text$mn:00003E37                 lea     eax, [ebp+var_24]
.text$mn:00003E3A                 push    eax
.text$mn:00003E3B                 lea     ecx, [ebp+var_28]
.text$mn:00003E3E                 push    ecx
.text$mn:00003E3F
.text$mn:00003E3F loc_3E3F:                               ; DATA XREF: .rdata:$SG96958o
.text$mn:00003E3F                                         ; .rdata:$SG97081o
.text$mn:00003E3F                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:00003E44                 add     esp, 8
.text$mn:00003E47                 movzx   edx, al
.text$mn:00003E4A                 test    edx, edx
.text$mn:00003E4C                 jz      short loc_3E59
.text$mn:00003E4E                 mov     eax, [ebp+var_14]
.text$mn:00003E51                 or      eax, 4
.text$mn:00003E54                 mov     [ebp+var_14], eax
.text$mn:00003E57                 jmp     short loc_3E5B
.text$mn:00003E59 ; ---------------------------------------------------------------------------
.text$mn:00003E59
.text$mn:00003E59 loc_3E59:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+14Cj
.text$mn:00003E59                 jmp     short loc_3DF2
.text$mn:00003E5B ; ---------------------------------------------------------------------------
.text$mn:00003E5B
.text$mn:00003E5B loc_3E5B:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+EEj
.text$mn:00003E5B                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+FFj ...
.text$mn:00003E5B                 cmp     [ebp+var_14], 0
.text$mn:00003E5F                 jnz     short loc_3EB6
.text$mn:00003E61                 mov     ecx, [ebp+var_1C]
.text$mn:00003E64                 xor     edx, edx
.text$mn:00003E66                 push    edx
.text$mn:00003E67                 push    ecx
.text$mn:00003E68                 mov     ecx, [ebp+arg_4]
.text$mn:00003E6B                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00003E70                 push    eax
.text$mn:00003E71                 mov     eax, [ebp+arg_0]
.text$mn:00003E74                 mov     ecx, [eax]
.text$mn:00003E76                 mov     edx, [ebp+arg_0]
.text$mn:00003E79                 add     edx, [ecx+4]
.text$mn:00003E7C                 mov     ecx, edx
.text$mn:00003E7E                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00003E83                 mov     ecx, eax
.text$mn:00003E85                 call    ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text$mn:00003E8A                 mov     ecx, [ebp+var_1C]
.text$mn:00003E8D                 xor     esi, esi
.text$mn:00003E8F                 mov     [ebp+var_44], eax
.text$mn:00003E92                 mov     [ebp+var_40], edx
.text$mn:00003E95                 mov     [ebp+var_4C], ecx
.text$mn:00003E98                 mov     [ebp+var_48], esi
.text$mn:00003E9B                 mov     edx, [ebp+var_44]
.text$mn:00003E9E                 cmp     edx, [ebp+var_4C]
.text$mn:00003EA1                 jnz     short loc_3EAB
.text$mn:00003EA3                 mov     eax, [ebp+var_40]
.text$mn:00003EA6                 cmp     eax, [ebp+var_48]
.text$mn:00003EA9                 jz      short loc_3EB6
.text$mn:00003EAB
.text$mn:00003EAB loc_3EAB:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1A1j
.text$mn:00003EAB                 mov     ecx, [ebp+var_14]
.text$mn:00003EAE                 or      ecx, 4
.text$mn:00003EB1                 mov     [ebp+var_14], ecx
.text$mn:00003EB4                 jmp     short loc_3F23
.text$mn:00003EB6 ; ---------------------------------------------------------------------------
.text$mn:00003EB6
.text$mn:00003EB6 loc_3EB6:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+15Fj
.text$mn:00003EB6                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1A9j
.text$mn:00003EB6                 jmp     short loc_3EC1
.text$mn:00003EB8 ; ---------------------------------------------------------------------------
.text$mn:00003EB8
.text$mn:00003EB8 loc_3EB8:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &):loc_3F21j
.text$mn:00003EB8                 mov     edx, [ebp+var_18]
.text$mn:00003EBB                 sub     edx, 1
.text$mn:00003EBE                 mov     [ebp+var_18], edx
.text$mn:00003EC1
.text$mn:00003EC1 loc_3EC1:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &):loc_3EB6j
.text$mn:00003EC1                 cmp     [ebp+var_18], 0
.text$mn:00003EC5                 jbe     short loc_3F23
.text$mn:00003EC7                 mov     eax, [ebp+arg_0]
.text$mn:00003ECA                 mov     ecx, [eax]
.text$mn:00003ECC                 mov     edx, [ebp+arg_0]
.text$mn:00003ECF                 add     edx, [ecx+4]
.text$mn:00003ED2                 mov     ecx, edx
.text$mn:00003ED4                 call    ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
.text$mn:00003ED9                 movzx   eax, al
.text$mn:00003EDC                 push    eax
.text$mn:00003EDD                 mov     ecx, [ebp+arg_0]
.text$mn:00003EE0                 mov     edx, [ecx]
.text$mn:00003EE2                 mov     ecx, [ebp+arg_0]
.text$mn:00003EE5                 add     ecx, [edx+4]
.text$mn:00003EE8                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00003EED                 mov     ecx, eax
.text$mn:00003EEF                 call    ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text$mn:00003EF4                 mov     [ebp+var_2C], eax
.text$mn:00003EF7                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00003EFC                 mov     [ebp+var_30], eax
.text$mn:00003EFF                 lea     eax, [ebp+var_2C]
.text$mn:00003F02                 push    eax
.text$mn:00003F03                 lea     ecx, [ebp+var_30]
.text$mn:00003F06                 push    ecx
.text$mn:00003F07                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:00003F0C                 add     esp, 8
.text$mn:00003F0F                 movzx   edx, al
.text$mn:00003F12                 test    edx, edx
.text$mn:00003F14                 jz      short loc_3F21
.text$mn:00003F16                 mov     eax, [ebp+var_14]
.text$mn:00003F19                 or      eax, 4
.text$mn:00003F1C                 mov     [ebp+var_14], eax
.text$mn:00003F1F                 jmp     short loc_3F23
.text$mn:00003F21 ; ---------------------------------------------------------------------------
.text$mn:00003F21
.text$mn:00003F21 loc_3F21:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+214j
.text$mn:00003F21                 jmp     short loc_3EB8
.text$mn:00003F23 ; ---------------------------------------------------------------------------
.text$mn:00003F23
.text$mn:00003F23 loc_3F23:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1B4j
.text$mn:00003F23                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1C5j ...
.text$mn:00003F23                 push    0
.text$mn:00003F25                 push    0               ; __int64
.text$mn:00003F27                 mov     ecx, [ebp+arg_0]
.text$mn:00003F2A                 mov     edx, [ecx]
.text$mn:00003F2C                 mov     ecx, [ebp+arg_0]
.text$mn:00003F2F                 add     ecx, [edx+4]    ; this
.text$mn:00003F32                 call    ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
.text$mn:00003F37                 jmp     short loc_3F55
.text$mn:00003F37 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z endp
.text$mn:00003F37
.text$mn:00003F39
.text$mn:00003F39 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F39
.text$mn:00003F39
.text$mn:00003F39 __catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0 proc near
.text$mn:00003F39                                         ; DATA XREF: .xdata$x:0000C630o
.text$mn:00003F39                 push    1
.text$mn:00003F3B                 push    4
.text$mn:00003F3D                 mov     eax, [ebp+8]
.text$mn:00003F40                 mov     ecx, [eax]
.text$mn:00003F42                 mov     edx, [ebp+8]
.text$mn:00003F45                 add     edx, [ecx+4]
.text$mn:00003F48                 mov     ecx, edx
.text$mn:00003F4A                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:00003F4F                 mov     eax, offset $LN23_0
.text$mn:00003F54                 retn
.text$mn:00003F54 __catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0 endp
.text$mn:00003F54
.text$mn:00003F55 ; ---------------------------------------------------------------------------
.text$mn:00003F55 ; START OF FUNCTION CHUNK FOR ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003F55
.text$mn:00003F55 loc_3F55:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+237j
.text$mn:00003F55                 mov     [ebp+var_4], 0
.text$mn:00003F5C                 jmp     short loc_3F65
.text$mn:00003F5C ; END OF FUNCTION CHUNK FOR ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003F5E
.text$mn:00003F5E ; =============== S U B R O U T I N E =======================================
.text$mn:00003F5E
.text$mn:00003F5E
.text$mn:00003F5E $LN23_0         proc near               ; DATA XREF: __catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0+16o
.text$mn:00003F5E                 mov     dword ptr [ebp-4], 0
.text$mn:00003F5E $LN23_0         endp ; sp-analysis failed
.text$mn:00003F5E
.text$mn:00003F65 ; START OF FUNCTION CHUNK FOR ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003F65
.text$mn:00003F65 loc_3F65:                               ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+CDj
.text$mn:00003F65                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+25Cj
.text$mn:00003F65                 push    0
.text$mn:00003F67                 mov     eax, [ebp+var_14]
.text$mn:00003F6A                 push    eax
.text$mn:00003F6B                 mov     ecx, [ebp+arg_0]
.text$mn:00003F6E                 mov     edx, [ecx]
.text$mn:00003F70                 mov     ecx, [ebp+arg_0]
.text$mn:00003F73                 add     ecx, [edx+4]
.text$mn:00003F76                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:00003F7B                 mov     eax, [ebp+arg_0]
.text$mn:00003F7E                 mov     [ebp+var_34], eax
.text$mn:00003F81                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F88                 lea     ecx, [ebp+var_54]
.text$mn:00003F8B                 call    ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$mn:00003F90                 mov     eax, [ebp+var_34]
.text$mn:00003F93                 mov     ecx, [ebp+var_C]
.text$mn:00003F96                 mov     large fs:0, ecx
.text$mn:00003F9D                 pop     ecx
.text$mn:00003F9E                 pop     edi
.text$mn:00003F9F                 pop     esi
.text$mn:00003FA0                 pop     ebx
.text$mn:00003FA1                 mov     esp, ebp
.text$mn:00003FA3                 pop     ebp
.text$mn:00003FA4                 retn
.text$mn:00003FA4 ; END OF FUNCTION CHUNK FOR ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$mn:00003FA4 ; ---------------------------------------------------------------------------
.text$mn:00003FA5                 align 4
.text$mn:00003FA5 _text$mn        ends
.text$mn:00003FA5
.text$x:00003FA8 ; ===========================================================================
.text$x:00003FA8
.text$x:00003FA8 ; Segment type: Pure code
.text$x:00003FA8 ; Segment permissions: Read/Execute
.text$x:00003FA8 _text$x         segment para public 'CODE' use32
.text$x:00003FA8                 assume cs:_text$x
.text$x:00003FA8                 ;org 3FA8h
.text$x:00003FA8 ; COMDAT (pick associative to section at 3D00)
.text$x:00003FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003FA8
.text$x:00003FA8 ; =============== S U B R O U T I N E =======================================
.text$x:00003FA8
.text$x:00003FA8
.text$x:00003FA8 __unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2 proc near
.text$x:00003FA8                                         ; DATA XREF: .xdata$x:0000C64Co
.text$x:00003FA8                 lea     ecx, [ebp-54h]
.text$x:00003FAB                 jmp     ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$x:00003FAB __unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2 endp
.text$x:00003FAB
.text$x:00003FB0
.text$x:00003FB0 ; =============== S U B R O U T I N E =======================================
.text$x:00003FB0
.text$x:00003FB0
.text$x:00003FB0 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z proc near
.text$x:00003FB0                                         ; DATA XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00003FB0
.text$x:00003FB0 arg_4           = dword ptr  8
.text$x:00003FB0
.text$x:00003FB0                 mov     edx, [esp+arg_4]
.text$x:00003FB4                 lea     eax, [edx+0Ch]
.text$x:00003FB7                 mov     ecx, [edx-58h]
.text$x:00003FBA                 xor     ecx, eax
.text$x:00003FBC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FC1                 mov     eax, offset __ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.text$x:00003FC6                 jmp     ___CxxFrameHandler3
.text$x:00003FC6 __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z endp
.text$x:00003FC6
.text$x:00003FC6 ; ---------------------------------------------------------------------------
.text$x:00003FCB                 align 4
.text$x:00003FCB _text$x         ends
.text$x:00003FCB
.text$mn:00003FCC ; ===========================================================================
.text$mn:00003FCC
.text$mn:00003FCC ; Segment type: Pure code
.text$mn:00003FCC ; Segment permissions: Read/Execute
.text$mn:00003FCC _text$mn        segment para public 'CODE' use32
.text$mn:00003FCC                 assume cs:_text$mn
.text$mn:00003FCC                 ;org 3FCCh
.text$mn:00003FCC ; COMDAT (pick any)
.text$mn:00003FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FCC
.text$mn:00003FCC ; =============== S U B R O U T I N E =======================================
.text$mn:00003FCC
.text$mn:00003FCC ; Attributes: bp-based frame
.text$mn:00003FCC
.text$mn:00003FCC ; int __cdecl std::operator<<<std::char_traits<char>>(int, char *Str)
.text$mn:00003FCC                 public ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:00003FCC ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
.text$mn:00003FCC                                         ; CODE XREF: TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+3Fp
.text$mn:00003FCC                                         ; TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+48p ...
.text$mn:00003FCC
.text$mn:00003FCC var_60          = byte ptr -60h
.text$mn:00003FCC var_58          = dword ptr -58h
.text$mn:00003FCC var_54          = dword ptr -54h
.text$mn:00003FCC var_50          = dword ptr -50h
.text$mn:00003FCC var_4C          = dword ptr -4Ch
.text$mn:00003FCC var_48          = dword ptr -48h
.text$mn:00003FCC var_44          = dword ptr -44h
.text$mn:00003FCC var_40          = qword ptr -40h
.text$mn:00003FCC var_38          = dword ptr -38h
.text$mn:00003FCC var_34          = dword ptr -34h
.text$mn:00003FCC var_30          = dword ptr -30h
.text$mn:00003FCC var_2C          = dword ptr -2Ch
.text$mn:00003FCC var_28          = dword ptr -28h
.text$mn:00003FCC var_24          = dword ptr -24h
.text$mn:00003FCC var_20          = dword ptr -20h
.text$mn:00003FCC var_1C          = dword ptr -1Ch
.text$mn:00003FCC var_18          = dword ptr -18h
.text$mn:00003FCC var_14          = dword ptr -14h
.text$mn:00003FCC var_10          = dword ptr -10h
.text$mn:00003FCC var_C           = dword ptr -0Ch
.text$mn:00003FCC var_4           = dword ptr -4
.text$mn:00003FCC arg_0           = dword ptr  8
.text$mn:00003FCC Str             = dword ptr  0Ch
.text$mn:00003FCC
.text$mn:00003FCC ; FUNCTION CHUNK AT .text$mn:0000425C SIZE 00000009 BYTES
.text$mn:00003FCC ; FUNCTION CHUNK AT .text$mn:0000426C SIZE 00000040 BYTES
.text$mn:00003FCC
.text$mn:00003FCC                 push    ebp
.text$mn:00003FCD                 mov     ebp, esp
.text$mn:00003FCF                 push    0FFFFFFFFh
.text$mn:00003FD1                 push    offset __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:00003FD6                 mov     eax, large fs:0
.text$mn:00003FDC                 push    eax
.text$mn:00003FDD                 push    ecx
.text$mn:00003FDE                 sub     esp, 50h
.text$mn:00003FE1                 push    ebx
.text$mn:00003FE2                 push    esi
.text$mn:00003FE3                 push    edi
.text$mn:00003FE4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003FE9                 xor     eax, ebp
.text$mn:00003FEB                 push    eax
.text$mn:00003FEC                 lea     eax, [ebp+var_C]
.text$mn:00003FEF                 mov     large fs:0, eax
.text$mn:00003FF5                 mov     [ebp+var_10], esp
.text$mn:00003FF8                 mov     [ebp+var_14], 0
.text$mn:00003FFF                 mov     eax, [ebp+Str]
.text$mn:00004002                 push    eax             ; Str
.text$mn:00004003                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00004008                 add     esp, 4
.text$mn:0000400B                 xor     ecx, ecx
.text$mn:0000400D                 mov     [ebp+var_38], eax
.text$mn:00004010                 mov     [ebp+var_34], ecx
.text$mn:00004013                 mov     edx, [ebp+arg_0]
.text$mn:00004016                 mov     eax, [edx]
.text$mn:00004018                 mov     ecx, [ebp+arg_0]
.text$mn:0000401B                 add     ecx, [eax+4]    ; this
.text$mn:0000401E                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00004023                 mov     [ebp+var_48], eax
.text$mn:00004026                 mov     [ebp+var_44], edx
.text$mn:00004029                 cmp     [ebp+var_44], 0
.text$mn:0000402D                 jl      short loc_407D
.text$mn:0000402F                 jg      short loc_4037
.text$mn:00004031                 cmp     [ebp+var_48], 0
.text$mn:00004035                 jbe     short loc_407D
.text$mn:00004037
.text$mn:00004037 loc_4037:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+63j
.text$mn:00004037                 mov     ecx, [ebp+arg_0]
.text$mn:0000403A                 mov     edx, [ecx]
.text$mn:0000403C                 mov     ecx, [ebp+arg_0]
.text$mn:0000403F                 add     ecx, [edx+4]    ; this
.text$mn:00004042                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:00004047                 mov     [ebp+var_50], eax
.text$mn:0000404A                 mov     [ebp+var_4C], edx
.text$mn:0000404D                 mov     eax, [ebp+var_4C]
.text$mn:00004050                 cmp     eax, [ebp+var_34]
.text$mn:00004053                 jl      short loc_407D
.text$mn:00004055                 jg      short loc_405F
.text$mn:00004057                 mov     ecx, [ebp+var_50]
.text$mn:0000405A                 cmp     ecx, [ebp+var_38]
.text$mn:0000405D                 jbe     short loc_407D
.text$mn:0000405F
.text$mn:0000405F loc_405F:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+89j
.text$mn:0000405F                 mov     edx, [ebp+arg_0]
.text$mn:00004062                 mov     eax, [edx]
.text$mn:00004064                 mov     ecx, [ebp+arg_0]
.text$mn:00004067                 add     ecx, [eax+4]    ; this
.text$mn:0000406A                 call    ?width@ios_base@std@@QBE_JXZ ; std::ios_base::width(void)
.text$mn:0000406F                 sub     eax, [ebp+var_38]
.text$mn:00004072                 sbb     edx, [ebp+var_34]
.text$mn:00004075                 mov     dword ptr [ebp+var_40], eax
.text$mn:00004078                 mov     dword ptr [ebp+var_40+4], edx
.text$mn:0000407B                 jmp     short loc_4086
.text$mn:0000407D ; ---------------------------------------------------------------------------
.text$mn:0000407D
.text$mn:0000407D loc_407D:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+61j
.text$mn:0000407D                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+69j ...
.text$mn:0000407D                 xorpd   xmm0, xmm0
.text$mn:00004081                 movlpd  [ebp+var_40], xmm0
.text$mn:00004086
.text$mn:00004086 loc_4086:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+AFj
.text$mn:00004086                 mov     ecx, dword ptr [ebp+var_40]
.text$mn:00004089                 mov     [ebp+var_30], ecx
.text$mn:0000408C                 mov     edx, dword ptr [ebp+var_40+4]
.text$mn:0000408F                 mov     [ebp+var_2C], edx
.text$mn:00004092                 mov     eax, [ebp+arg_0]
.text$mn:00004095                 push    eax
.text$mn:00004096                 lea     ecx, [ebp+var_60]
.text$mn:00004099                 call    ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
.text$mn:0000409E                 mov     [ebp+var_4], 0
.text$mn:000040A5                 lea     ecx, [ebp+var_60]
.text$mn:000040A8                 call    ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator bool(void)
.text$mn:000040AD                 movzx   ecx, al
.text$mn:000040B0                 test    ecx, ecx
.text$mn:000040B2                 jnz     short loc_40C2
.text$mn:000040B4                 mov     edx, [ebp+var_14]
.text$mn:000040B7                 or      edx, 4
.text$mn:000040BA                 mov     [ebp+var_14], edx
.text$mn:000040BD                 jmp     loc_426C
.text$mn:000040C2 ; ---------------------------------------------------------------------------
.text$mn:000040C2
.text$mn:000040C2 loc_40C2:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+E6j
.text$mn:000040C2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000040C6                 mov     eax, [ebp+arg_0]
.text$mn:000040C9                 mov     ecx, [eax]
.text$mn:000040CB                 mov     edx, [ebp+arg_0]
.text$mn:000040CE                 add     edx, [ecx+4]
.text$mn:000040D1                 mov     ecx, edx        ; this
.text$mn:000040D3                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:000040D8                 and     eax, 1C0h
.text$mn:000040DD                 cmp     eax, 40h ; '@'
.text$mn:000040E0                 jz      short loc_415E
.text$mn:000040E2                 jmp     short loc_40F6
.text$mn:000040E4 ; ---------------------------------------------------------------------------
.text$mn:000040E4
.text$mn:000040E4 loc_40E4:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_415Cj
.text$mn:000040E4                 mov     eax, [ebp+var_30]
.text$mn:000040E7                 sub     eax, 1
.text$mn:000040EA                 mov     ecx, [ebp+var_2C]
.text$mn:000040ED                 sbb     ecx, 0
.text$mn:000040F0                 mov     [ebp+var_30], eax
.text$mn:000040F3                 mov     [ebp+var_2C], ecx
.text$mn:000040F6
.text$mn:000040F6 loc_40F6:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+116j
.text$mn:000040F6                 cmp     [ebp+var_2C], 0
.text$mn:000040FA                 jl      short loc_415E
.text$mn:000040FC                 jg      short loc_4104
.text$mn:000040FE                 cmp     [ebp+var_30], 0
.text$mn:00004102                 jbe     short loc_415E
.text$mn:00004104
.text$mn:00004104 loc_4104:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+130j
.text$mn:00004104                 mov     edx, [ebp+arg_0]
.text$mn:00004107                 mov     eax, [edx]
.text$mn:00004109                 mov     ecx, [ebp+arg_0]
.text$mn:0000410C                 add     ecx, [eax+4]
.text$mn:0000410F                 call    ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
.text$mn:00004114                 movzx   ecx, al
.text$mn:00004117                 push    ecx
.text$mn:00004118                 mov     edx, [ebp+arg_0]
.text$mn:0000411B                 mov     eax, [edx]
.text$mn:0000411D                 mov     ecx, [ebp+arg_0]
.text$mn:00004120                 add     ecx, [eax+4]
.text$mn:00004123                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00004128                 mov     ecx, eax
.text$mn:0000412A                 call    ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text$mn:0000412F                 mov     [ebp+var_18], eax
.text$mn:00004132                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00004137                 mov     [ebp+var_1C], eax
.text$mn:0000413A                 lea     ecx, [ebp+var_18]
.text$mn:0000413D                 push    ecx
.text$mn:0000413E                 lea     edx, [ebp+var_1C]
.text$mn:00004141                 push    edx
.text$mn:00004142                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:00004147                 add     esp, 8
.text$mn:0000414A                 movzx   eax, al
.text$mn:0000414D                 test    eax, eax
.text$mn:0000414F                 jz      short loc_415C
.text$mn:00004151                 mov     ecx, [ebp+var_14]
.text$mn:00004154                 or      ecx, 4
.text$mn:00004157                 mov     [ebp+var_14], ecx
.text$mn:0000415A                 jmp     short loc_415E
.text$mn:0000415C ; ---------------------------------------------------------------------------
.text$mn:0000415C
.text$mn:0000415C loc_415C:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+183j
.text$mn:0000415C                 jmp     short loc_40E4
.text$mn:0000415E ; ---------------------------------------------------------------------------
.text$mn:0000415E
.text$mn:0000415E loc_415E:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+114j
.text$mn:0000415E                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+12Ej ...
.text$mn:0000415E                 cmp     [ebp+var_14], 0
.text$mn:00004162                 jnz     short loc_41A6
.text$mn:00004164                 mov     edx, [ebp+var_34]
.text$mn:00004167                 push    edx
.text$mn:00004168                 mov     eax, [ebp+var_38]
.text$mn:0000416B                 push    eax
.text$mn:0000416C                 mov     ecx, [ebp+Str]
.text$mn:0000416F                 push    ecx
.text$mn:00004170                 mov     edx, [ebp+arg_0]
.text$mn:00004173                 mov     eax, [edx]
.text$mn:00004175                 mov     ecx, [ebp+arg_0]
.text$mn:00004178                 add     ecx, [eax+4]
.text$mn:0000417B                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00004180                 mov     ecx, eax
.text$mn:00004182                 call    ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputn(char const *,__int64)
.text$mn:00004187                 mov     [ebp+var_58], eax
.text$mn:0000418A                 mov     [ebp+var_54], edx
.text$mn:0000418D                 mov     ecx, [ebp+var_58]
.text$mn:00004190                 cmp     ecx, [ebp+var_38]
.text$mn:00004193                 jnz     short loc_419D
.text$mn:00004195                 mov     edx, [ebp+var_54]
.text$mn:00004198                 cmp     edx, [ebp+var_34]
.text$mn:0000419B                 jz      short loc_41A6
.text$mn:0000419D
.text$mn:0000419D loc_419D:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1C7j
.text$mn:0000419D                 mov     eax, [ebp+var_14]
.text$mn:000041A0                 or      eax, 4
.text$mn:000041A3                 mov     [ebp+var_14], eax
.text$mn:000041A6
.text$mn:000041A6 loc_41A6:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+196j
.text$mn:000041A6                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1CFj
.text$mn:000041A6                 cmp     [ebp+var_14], 0
.text$mn:000041AA                 jnz     short loc_422A
.text$mn:000041AC                 jmp     short loc_41C0
.text$mn:000041AE ; ---------------------------------------------------------------------------
.text$mn:000041AE
.text$mn:000041AE loc_41AE:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *):loc_4228j
.text$mn:000041AE                 mov     ecx, [ebp+var_30]
.text$mn:000041B1                 sub     ecx, 1
.text$mn:000041B4                 mov     edx, [ebp+var_2C]
.text$mn:000041B7                 sbb     edx, 0
.text$mn:000041BA                 mov     [ebp+var_30], ecx
.text$mn:000041BD                 mov     [ebp+var_2C], edx
.text$mn:000041C0
.text$mn:000041C0 loc_41C0:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1E0j
.text$mn:000041C0                 cmp     [ebp+var_2C], 0
.text$mn:000041C4                 jl      short loc_422A
.text$mn:000041C6                 jg      short loc_41CE
.text$mn:000041C8                 cmp     [ebp+var_30], 0
.text$mn:000041CC                 jbe     short loc_422A
.text$mn:000041CE
.text$mn:000041CE loc_41CE:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1FAj
.text$mn:000041CE                 mov     eax, [ebp+arg_0]
.text$mn:000041D1                 mov     ecx, [eax]
.text$mn:000041D3                 mov     edx, [ebp+arg_0]
.text$mn:000041D6                 add     edx, [ecx+4]
.text$mn:000041D9                 mov     ecx, edx
.text$mn:000041DB                 call    ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char>>::fill(void)
.text$mn:000041E0                 movzx   eax, al
.text$mn:000041E3                 push    eax
.text$mn:000041E4                 mov     ecx, [ebp+arg_0]
.text$mn:000041E7                 mov     edx, [ecx]
.text$mn:000041E9                 mov     ecx, [ebp+arg_0]
.text$mn:000041EC                 add     ecx, [edx+4]
.text$mn:000041EF                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:000041F4                 mov     ecx, eax
.text$mn:000041F6                 call    ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)
.text$mn:000041FB                 mov     [ebp+var_20], eax
.text$mn:000041FE                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00004203                 mov     [ebp+var_24], eax
.text$mn:00004206                 lea     eax, [ebp+var_20]
.text$mn:00004209                 push    eax
.text$mn:0000420A                 lea     ecx, [ebp+var_24]
.text$mn:0000420D                 push    ecx
.text$mn:0000420E                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:00004213                 add     esp, 8
.text$mn:00004216                 movzx   edx, al
.text$mn:00004219                 test    edx, edx
.text$mn:0000421B                 jz      short loc_4228
.text$mn:0000421D                 mov     eax, [ebp+var_14]
.text$mn:00004220                 or      eax, 4
.text$mn:00004223                 mov     [ebp+var_14], eax
.text$mn:00004226                 jmp     short loc_422A
.text$mn:00004228 ; ---------------------------------------------------------------------------
.text$mn:00004228
.text$mn:00004228 loc_4228:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+24Fj
.text$mn:00004228                 jmp     short loc_41AE
.text$mn:0000422A ; ---------------------------------------------------------------------------
.text$mn:0000422A
.text$mn:0000422A loc_422A:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1DEj
.text$mn:0000422A                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1F8j ...
.text$mn:0000422A                 push    0
.text$mn:0000422C                 push    0               ; __int64
.text$mn:0000422E                 mov     ecx, [ebp+arg_0]
.text$mn:00004231                 mov     edx, [ecx]
.text$mn:00004233                 mov     ecx, [ebp+arg_0]
.text$mn:00004236                 add     ecx, [edx+4]    ; this
.text$mn:00004239                 call    ?width@ios_base@std@@QAE_J_J@Z ; std::ios_base::width(__int64)
.text$mn:0000423E                 jmp     short loc_425C
.text$mn:0000423E ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z endp
.text$mn:0000423E
.text$mn:00004240
.text$mn:00004240 ; =============== S U B R O U T I N E =======================================
.text$mn:00004240
.text$mn:00004240
.text$mn:00004240 __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
.text$mn:00004240                                         ; DATA XREF: .xdata$x:0000C5D0o
.text$mn:00004240                 push    1
.text$mn:00004242                 push    4
.text$mn:00004244                 mov     eax, [ebp+8]
.text$mn:00004247                 mov     ecx, [eax]
.text$mn:00004249                 mov     edx, [ebp+8]
.text$mn:0000424C                 add     edx, [ecx+4]
.text$mn:0000424F                 mov     ecx, edx
.text$mn:00004251                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:00004256                 mov     eax, offset $LN23
.text$mn:0000425B                 retn
.text$mn:0000425B __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 endp
.text$mn:0000425B
.text$mn:0000425C ; ---------------------------------------------------------------------------
.text$mn:0000425C ; START OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:0000425C
.text$mn:0000425C loc_425C:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+272j
.text$mn:0000425C                 mov     [ebp+var_4], 0
.text$mn:00004263                 jmp     short loc_426C
.text$mn:00004263 ; END OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:00004265
.text$mn:00004265 ; =============== S U B R O U T I N E =======================================
.text$mn:00004265
.text$mn:00004265
.text$mn:00004265 $LN23           proc near               ; DATA XREF: __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0+16o
.text$mn:00004265                 mov     dword ptr [ebp-4], 0
.text$mn:00004265 $LN23           endp ; sp-analysis failed
.text$mn:00004265
.text$mn:0000426C ; START OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:0000426C
.text$mn:0000426C loc_426C:                               ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+F1j
.text$mn:0000426C                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+297j
.text$mn:0000426C                 push    0
.text$mn:0000426E                 mov     eax, [ebp+var_14]
.text$mn:00004271                 push    eax
.text$mn:00004272                 mov     ecx, [ebp+arg_0]
.text$mn:00004275                 mov     edx, [ecx]
.text$mn:00004277                 mov     ecx, [ebp+arg_0]
.text$mn:0000427A                 add     ecx, [edx+4]
.text$mn:0000427D                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:00004282                 mov     eax, [ebp+arg_0]
.text$mn:00004285                 mov     [ebp+var_28], eax
.text$mn:00004288                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000428F                 lea     ecx, [ebp+var_60]
.text$mn:00004292                 call    ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$mn:00004297                 mov     eax, [ebp+var_28]
.text$mn:0000429A                 mov     ecx, [ebp+var_C]
.text$mn:0000429D                 mov     large fs:0, ecx
.text$mn:000042A4                 pop     ecx
.text$mn:000042A5                 pop     edi
.text$mn:000042A6                 pop     esi
.text$mn:000042A7                 pop     ebx
.text$mn:000042A8                 mov     esp, ebp
.text$mn:000042AA                 pop     ebp
.text$mn:000042AB                 retn
.text$mn:000042AB ; END OF FUNCTION CHUNK FOR ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$mn:000042AB _text$mn        ends
.text$mn:000042AB
.text$x:000042AC ; ===========================================================================
.text$x:000042AC
.text$x:000042AC ; Segment type: Pure code
.text$x:000042AC ; Segment permissions: Read/Execute
.text$x:000042AC _text$x         segment para public 'CODE' use32
.text$x:000042AC                 assume cs:_text$x
.text$x:000042AC                 ;org 42ACh
.text$x:000042AC ; COMDAT (pick associative to section at 3FCC)
.text$x:000042AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000042AC
.text$x:000042AC ; =============== S U B R O U T I N E =======================================
.text$x:000042AC
.text$x:000042AC
.text$x:000042AC __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
.text$x:000042AC                                         ; DATA XREF: .xdata$x:0000C5ECo
.text$x:000042AC                 lea     ecx, [ebp-60h]
.text$x:000042AF                 jmp     ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$x:000042AF __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 endp
.text$x:000042AF
.text$x:000042B4
.text$x:000042B4 ; =============== S U B R O U T I N E =======================================
.text$x:000042B4
.text$x:000042B4
.text$x:000042B4 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
.text$x:000042B4                                         ; DATA XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+5o
.text$x:000042B4
.text$x:000042B4 arg_4           = dword ptr  8
.text$x:000042B4
.text$x:000042B4                 mov     edx, [esp+arg_4]
.text$x:000042B8                 lea     eax, [edx+0Ch]
.text$x:000042BB                 mov     ecx, [edx-64h]
.text$x:000042BE                 xor     ecx, eax
.text$x:000042C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042C5                 mov     eax, offset __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.text$x:000042CA                 jmp     ___CxxFrameHandler3
.text$x:000042CA __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z endp
.text$x:000042CA
.text$x:000042CA ; ---------------------------------------------------------------------------
.text$x:000042CF                 align 10h
.text$x:000042CF _text$x         ends
.text$x:000042CF
.text$mn:000042D0 ; ===========================================================================
.text$mn:000042D0
.text$mn:000042D0 ; Segment type: Pure code
.text$mn:000042D0 ; Segment permissions: Read/Execute
.text$mn:000042D0 _text$mn        segment para public 'CODE' use32
.text$mn:000042D0                 assume cs:_text$mn
.text$mn:000042D0                 ;org 42D0h
.text$mn:000042D0 ; COMDAT (pick any)
.text$mn:000042D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042D0
.text$mn:000042D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000042D0
.text$mn:000042D0 ; Attributes: bp-based frame
.text$mn:000042D0
.text$mn:000042D0 ; bool __cdecl std::operator==<char, char>(class std::allocator<char> const &, class std::allocator<char> const &)
.text$mn:000042D0                 public ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
.text$mn:000042D0 ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z proc near
.text$mn:000042D0                                         ; CODE XREF: std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+1Ep
.text$mn:000042D0                 push    ebp
.text$mn:000042D1                 mov     ebp, esp
.text$mn:000042D3                 mov     al, 1
.text$mn:000042D5                 pop     ebp
.text$mn:000042D6                 retn
.text$mn:000042D6 ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z endp
.text$mn:000042D6
.text$mn:000042D6 ; ---------------------------------------------------------------------------
.text$mn:000042D7                 align 4
.text$mn:000042D7 _text$mn        ends
.text$mn:000042D7
.text$mn:000042D8 ; ===========================================================================
.text$mn:000042D8
.text$mn:000042D8 ; Segment type: Pure code
.text$mn:000042D8 ; Segment permissions: Read/Execute
.text$mn:000042D8 _text$mn        segment para public 'CODE' use32
.text$mn:000042D8                 assume cs:_text$mn
.text$mn:000042D8                 ;org 42D8h
.text$mn:000042D8 ; COMDAT (pick any)
.text$mn:000042D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042D8
.text$mn:000042D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042D8
.text$mn:000042D8 ; Attributes: bp-based frame
.text$mn:000042D8
.text$mn:000042D8 ; bool __cdecl std::operator==<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:000042D8                 public ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
.text$mn:000042D8 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z proc near
.text$mn:000042D8                                         ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+82p
.text$mn:000042D8                                         ; TiXmlNodeA::LastChild(char const *)+82p ...
.text$mn:000042D8
.text$mn:000042D8 var_4           = dword ptr -4
.text$mn:000042D8 arg_0           = dword ptr  8
.text$mn:000042D8 arg_4           = dword ptr  0Ch
.text$mn:000042D8
.text$mn:000042D8                 push    ebp
.text$mn:000042D9                 mov     ebp, esp
.text$mn:000042DB                 push    ecx
.text$mn:000042DC                 mov     eax, [ebp+arg_4]
.text$mn:000042DF                 push    eax
.text$mn:000042E0                 mov     ecx, [ebp+arg_0]
.text$mn:000042E3                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:000042E8                 test    eax, eax
.text$mn:000042EA                 jnz     short loc_42F5
.text$mn:000042EC                 mov     [ebp+var_4], 1
.text$mn:000042F3                 jmp     short loc_42FC
.text$mn:000042F5 ; ---------------------------------------------------------------------------
.text$mn:000042F5
.text$mn:000042F5 loc_42F5:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+12j
.text$mn:000042F5                 mov     [ebp+var_4], 0
.text$mn:000042FC
.text$mn:000042FC loc_42FC:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1Bj
.text$mn:000042FC                 mov     al, byte ptr [ebp+var_4]
.text$mn:000042FF                 mov     esp, ebp
.text$mn:00004301                 pop     ebp
.text$mn:00004302                 retn
.text$mn:00004302 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z endp
.text$mn:00004302
.text$mn:00004302 ; ---------------------------------------------------------------------------
.text$mn:00004303                 align 4
.text$mn:00004303 _text$mn        ends
.text$mn:00004303
.text$mn:00004304 ; ===========================================================================
.text$mn:00004304
.text$mn:00004304 ; Segment type: Pure code
.text$mn:00004304 ; Segment permissions: Read/Execute
.text$mn:00004304 _text$mn        segment para public 'CODE' use32
.text$mn:00004304                 assume cs:_text$mn
.text$mn:00004304                 ;org 4304h
.text$mn:00004304 ; COMDAT (pick any)
.text$mn:00004304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004304
.text$mn:00004304 ; =============== S U B R O U T I N E =======================================
.text$mn:00004304
.text$mn:00004304 ; Attributes: bp-based frame
.text$mn:00004304
.text$mn:00004304 ; int __cdecl std::operator==<char,std::char_traits<char>,std::allocator<char>>(int, char *Str)
.text$mn:00004304                 public ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
.text$mn:00004304 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z proc near
.text$mn:00004304                                         ; CODE XREF: TiXmlAttributeSetA::Find(char const *)+30p
.text$mn:00004304
.text$mn:00004304 var_4           = dword ptr -4
.text$mn:00004304 arg_0           = dword ptr  8
.text$mn:00004304 Str             = dword ptr  0Ch
.text$mn:00004304
.text$mn:00004304                 push    ebp
.text$mn:00004305                 mov     ebp, esp
.text$mn:00004307                 push    ecx
.text$mn:00004308                 mov     eax, [ebp+Str]
.text$mn:0000430B                 push    eax             ; Str
.text$mn:0000430C                 mov     ecx, [ebp+arg_0]
.text$mn:0000430F                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char const *)
.text$mn:00004314                 test    eax, eax
.text$mn:00004316                 jnz     short loc_4321
.text$mn:00004318                 mov     [ebp+var_4], 1
.text$mn:0000431F                 jmp     short loc_4328
.text$mn:00004321 ; ---------------------------------------------------------------------------
.text$mn:00004321
.text$mn:00004321 loc_4321:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+12j
.text$mn:00004321                 mov     [ebp+var_4], 0
.text$mn:00004328
.text$mn:00004328 loc_4328:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+1Bj
.text$mn:00004328                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000432B                 mov     esp, ebp
.text$mn:0000432D                 pop     ebp
.text$mn:0000432E                 retn
.text$mn:0000432E ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z endp
.text$mn:0000432E
.text$mn:0000432E ; ---------------------------------------------------------------------------
.text$mn:0000432F                 align 10h
.text$mn:0000432F _text$mn        ends
.text$mn:0000432F
.text$mn:00004330 ; ===========================================================================
.text$mn:00004330
.text$mn:00004330 ; Segment type: Pure code
.text$mn:00004330 ; Segment permissions: Read/Execute
.text$mn:00004330 _text$mn        segment para public 'CODE' use32
.text$mn:00004330                 assume cs:_text$mn
.text$mn:00004330                 ;org 4330h
.text$mn:00004330 ; COMDAT (pick any)
.text$mn:00004330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004330
.text$mn:00004330 ; =============== S U B R O U T I N E =======================================
.text$mn:00004330
.text$mn:00004330 ; Attributes: bp-based frame
.text$mn:00004330
.text$mn:00004330 ; bool __cdecl std::operator==<class std::allocator<char>, class std::allocator<char>>(struct std::_Wrap_alloc<class std::allocator<char>> const &, struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:00004330                 public ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
.text$mn:00004330 ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z proc near
.text$mn:00004330                                         ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+Cp
.text$mn:00004330
.text$mn:00004330 var_2           = byte ptr -2
.text$mn:00004330 var_1           = byte ptr -1
.text$mn:00004330 arg_0           = dword ptr  8
.text$mn:00004330 arg_4           = dword ptr  0Ch
.text$mn:00004330
.text$mn:00004330                 push    ebp
.text$mn:00004331                 mov     ebp, esp
.text$mn:00004333                 push    ecx
.text$mn:00004334                 mov     eax, [ebp+arg_4]
.text$mn:00004337                 push    eax
.text$mn:00004338                 lea     ecx, [ebp+var_1]
.text$mn:0000433B                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:00004340                 push    eax
.text$mn:00004341                 mov     ecx, [ebp+arg_0]
.text$mn:00004344                 push    ecx
.text$mn:00004345                 lea     ecx, [ebp+var_2]
.text$mn:00004348                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:0000434D                 push    eax
.text$mn:0000434E                 call    ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ; std::operator==<char,char>(std::allocator<char> const &,std::allocator<char> const &)
.text$mn:00004353                 add     esp, 8
.text$mn:00004356                 mov     esp, ebp
.text$mn:00004358                 pop     ebp
.text$mn:00004359                 retn
.text$mn:00004359 ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z endp
.text$mn:00004359
.text$mn:00004359 ; ---------------------------------------------------------------------------
.text$mn:0000435A                 align 4
.text$mn:0000435A _text$mn        ends
.text$mn:0000435A
.text$mn:0000435C ; ===========================================================================
.text$mn:0000435C
.text$mn:0000435C ; Segment type: Pure code
.text$mn:0000435C ; Segment permissions: Read/Execute
.text$mn:0000435C _text$mn        segment para public 'CODE' use32
.text$mn:0000435C                 assume cs:_text$mn
.text$mn:0000435C                 ;org 435Ch
.text$mn:0000435C ; COMDAT (pick any)
.text$mn:0000435C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000435C
.text$mn:0000435C ; =============== S U B R O U T I N E =======================================
.text$mn:0000435C
.text$mn:0000435C ; Attributes: bp-based frame
.text$mn:0000435C
.text$mn:0000435C ; bool __cdecl std::operator!=<class std::allocator<char>, class std::allocator<char>>(struct std::_Wrap_alloc<class std::allocator<char>> const &, struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:0000435C                 public ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
.text$mn:0000435C ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z proc near
.text$mn:0000435C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+2Bp
.text$mn:0000435C
.text$mn:0000435C var_4           = dword ptr -4
.text$mn:0000435C arg_0           = dword ptr  8
.text$mn:0000435C arg_4           = dword ptr  0Ch
.text$mn:0000435C
.text$mn:0000435C                 push    ebp
.text$mn:0000435D                 mov     ebp, esp
.text$mn:0000435F                 push    ecx
.text$mn:00004360                 mov     eax, [ebp+arg_4]
.text$mn:00004363                 push    eax
.text$mn:00004364                 mov     ecx, [ebp+arg_0]
.text$mn:00004367                 push    ecx
.text$mn:00004368                 call    ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:0000436D                 add     esp, 8
.text$mn:00004370                 movzx   edx, al
.text$mn:00004373                 test    edx, edx
.text$mn:00004375                 jnz     short loc_4380
.text$mn:00004377                 mov     [ebp+var_4], 1
.text$mn:0000437E                 jmp     short loc_4387
.text$mn:00004380 ; ---------------------------------------------------------------------------
.text$mn:00004380
.text$mn:00004380 loc_4380:                               ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+19j
.text$mn:00004380                 mov     [ebp+var_4], 0
.text$mn:00004387
.text$mn:00004387 loc_4387:                               ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+22j
.text$mn:00004387                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000438A                 mov     esp, ebp
.text$mn:0000438C                 pop     ebp
.text$mn:0000438D                 retn
.text$mn:0000438D ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z endp
.text$mn:0000438D
.text$mn:0000438D ; ---------------------------------------------------------------------------
.text$mn:0000438E                 align 10h
.text$mn:0000438E _text$mn        ends
.text$mn:0000438E
.text$mn:00004390 ; ===========================================================================
.text$mn:00004390
.text$mn:00004390 ; Segment type: Pure code
.text$mn:00004390 ; Segment permissions: Read/Execute
.text$mn:00004390 _text$mn        segment para public 'CODE' use32
.text$mn:00004390                 assume cs:_text$mn
.text$mn:00004390                 ;org 4390h
.text$mn:00004390 ; COMDAT (pick any)
.text$mn:00004390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004390
.text$mn:00004390 ; =============== S U B R O U T I N E =======================================
.text$mn:00004390
.text$mn:00004390 ; Attributes: bp-based frame
.text$mn:00004390
.text$mn:00004390 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00004390                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00004390 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00004390                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00004390
.text$mn:00004390 var_4           = dword ptr -4
.text$mn:00004390 arg_0           = dword ptr  8
.text$mn:00004390
.text$mn:00004390                 push    ebp
.text$mn:00004391                 mov     ebp, esp
.text$mn:00004393                 push    ecx
.text$mn:00004394                 mov     [ebp+var_4], 0
.text$mn:0000439B                 cmp     [ebp+arg_0], 0
.text$mn:0000439F                 jnz     short loc_43A3
.text$mn:000043A1                 jmp     short loc_43C3
.text$mn:000043A3 ; ---------------------------------------------------------------------------
.text$mn:000043A3
.text$mn:000043A3 loc_43A3:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000043A3                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000043A7                 ja      short loc_43BE
.text$mn:000043A9                 mov     eax, [ebp+arg_0]
.text$mn:000043AC                 push    eax             ; unsigned int
.text$mn:000043AD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000043B2                 add     esp, 4
.text$mn:000043B5                 mov     [ebp+var_4], eax
.text$mn:000043B8                 cmp     [ebp+var_4], 0
.text$mn:000043BC                 jnz     short loc_43C3
.text$mn:000043BE
.text$mn:000043BE loc_43BE:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:000043BE                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000043C3
.text$mn:000043C3 loc_43C3:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:000043C3                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:000043C3                 mov     eax, [ebp+var_4]
.text$mn:000043C6                 mov     esp, ebp
.text$mn:000043C8                 pop     ebp
.text$mn:000043C9                 retn
.text$mn:000043C9 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000043C9
.text$mn:000043C9 ; ---------------------------------------------------------------------------
.text$mn:000043CA                 align 4
.text$mn:000043CA _text$mn        ends
.text$mn:000043CA
.text$mn:000043CC ; ===========================================================================
.text$mn:000043CC
.text$mn:000043CC ; Segment type: Pure code
.text$mn:000043CC ; Segment permissions: Read/Execute
.text$mn:000043CC _text$mn        segment para public 'CODE' use32
.text$mn:000043CC                 assume cs:_text$mn
.text$mn:000043CC                 ;org 43CCh
.text$mn:000043CC ; COMDAT (pick any)
.text$mn:000043CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043CC
.text$mn:000043CC ; =============== S U B R O U T I N E =======================================
.text$mn:000043CC
.text$mn:000043CC ; Attributes: bp-based frame
.text$mn:000043CC
.text$mn:000043CC ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:000043CC                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:000043CC ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:000043CC                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:000043CC
.text$mn:000043CC var_4           = dword ptr -4
.text$mn:000043CC arg_0           = dword ptr  8
.text$mn:000043CC
.text$mn:000043CC                 push    ebp
.text$mn:000043CD                 mov     ebp, esp
.text$mn:000043CF                 push    ecx
.text$mn:000043D0                 mov     [ebp+var_4], 0
.text$mn:000043D7                 cmp     [ebp+arg_0], 0
.text$mn:000043DB                 jnz     short loc_43DF
.text$mn:000043DD                 jmp     short loc_4405
.text$mn:000043DF ; ---------------------------------------------------------------------------
.text$mn:000043DF
.text$mn:000043DF loc_43DF:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:000043DF                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:000043E6                 ja      short loc_4400
.text$mn:000043E8                 mov     eax, [ebp+arg_0]
.text$mn:000043EB                 shl     eax, 3
.text$mn:000043EE                 push    eax             ; unsigned int
.text$mn:000043EF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000043F4                 add     esp, 4
.text$mn:000043F7                 mov     [ebp+var_4], eax
.text$mn:000043FA                 cmp     [ebp+var_4], 0
.text$mn:000043FE                 jnz     short loc_4405
.text$mn:00004400
.text$mn:00004400 loc_4400:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00004400                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004405
.text$mn:00004405 loc_4405:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00004405                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00004405                 mov     eax, [ebp+var_4]
.text$mn:00004408                 mov     esp, ebp
.text$mn:0000440A                 pop     ebp
.text$mn:0000440B                 retn
.text$mn:0000440B ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:0000440B
.text$mn:0000440B _text$mn        ends
.text$mn:0000440B
.text$mn:0000440C ; ===========================================================================
.text$mn:0000440C
.text$mn:0000440C ; Segment type: Pure code
.text$mn:0000440C ; Segment permissions: Read/Execute
.text$mn:0000440C _text$mn        segment para public 'CODE' use32
.text$mn:0000440C                 assume cs:_text$mn
.text$mn:0000440C                 ;org 440Ch
.text$mn:0000440C ; COMDAT (pick any)
.text$mn:0000440C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000440C
.text$mn:0000440C ; =============== S U B R O U T I N E =======================================
.text$mn:0000440C
.text$mn:0000440C ; Attributes: bp-based frame
.text$mn:0000440C
.text$mn:0000440C ; int __cdecl std::_DebugHeapDelete<std::_Facet_base>(void *Memory)
.text$mn:0000440C                 public ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z
.text$mn:0000440C ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z proc near
.text$mn:0000440C                                         ; CODE XREF: std::locale::~locale(void)+21p
.text$mn:0000440C
.text$mn:0000440C Memory          = dword ptr  8
.text$mn:0000440C
.text$mn:0000440C                 push    ebp
.text$mn:0000440D                 mov     ebp, esp
.text$mn:0000440F                 cmp     [ebp+Memory], 0
.text$mn:00004413                 jz      short loc_442F
.text$mn:00004415                 push    0
.text$mn:00004417                 mov     eax, [ebp+Memory]
.text$mn:0000441A                 mov     edx, [eax]
.text$mn:0000441C                 mov     ecx, [ebp+Memory]
.text$mn:0000441F                 mov     eax, [edx]
.text$mn:00004421                 call    eax
.text$mn:00004423                 mov     ecx, [ebp+Memory]
.text$mn:00004426                 push    ecx             ; Memory
.text$mn:00004427                 call    _free
.text$mn:0000442C                 add     esp, 4
.text$mn:0000442F
.text$mn:0000442F loc_442F:                               ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+7j
.text$mn:0000442F                 pop     ebp
.text$mn:00004430                 retn
.text$mn:00004430 ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z endp
.text$mn:00004430
.text$mn:00004430 ; ---------------------------------------------------------------------------
.text$mn:00004431                 align 4
.text$mn:00004431 _text$mn        ends
.text$mn:00004431
.text$mn:00004434 ; ===========================================================================
.text$mn:00004434
.text$mn:00004434 ; Segment type: Pure code
.text$mn:00004434 ; Segment permissions: Read/Execute
.text$mn:00004434 _text$mn        segment para public 'CODE' use32
.text$mn:00004434                 assume cs:_text$mn
.text$mn:00004434                 ;org 4434h
.text$mn:00004434 ; COMDAT (pick any)
.text$mn:00004434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004434
.text$mn:00004434 ; =============== S U B R O U T I N E =======================================
.text$mn:00004434
.text$mn:00004434 ; Attributes: bp-based frame
.text$mn:00004434
.text$mn:00004434 ; int __cdecl std::_DebugHeapDelete<std::locale::facet>(void *Memory)
.text$mn:00004434                 public ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
.text$mn:00004434 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z proc near
.text$mn:00004434                                         ; CODE XREF: std::locale::facet::operator delete(void *)+7p
.text$mn:00004434
.text$mn:00004434 Memory          = dword ptr  8
.text$mn:00004434
.text$mn:00004434                 push    ebp
.text$mn:00004435                 mov     ebp, esp
.text$mn:00004437                 cmp     [ebp+Memory], 0
.text$mn:0000443B                 jz      short loc_4457
.text$mn:0000443D                 push    0
.text$mn:0000443F                 mov     eax, [ebp+Memory]
.text$mn:00004442                 mov     edx, [eax]
.text$mn:00004444                 mov     ecx, [ebp+Memory]
.text$mn:00004447                 mov     eax, [edx]
.text$mn:00004449                 call    eax
.text$mn:0000444B                 mov     ecx, [ebp+Memory]
.text$mn:0000444E                 push    ecx             ; Memory
.text$mn:0000444F                 call    _free
.text$mn:00004454                 add     esp, 4
.text$mn:00004457
.text$mn:00004457 loc_4457:                               ; CODE XREF: std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+7j
.text$mn:00004457                 pop     ebp
.text$mn:00004458                 retn
.text$mn:00004458 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z endp
.text$mn:00004458
.text$mn:00004458 ; ---------------------------------------------------------------------------
.text$mn:00004459                 align 4
.text$mn:00004459 _text$mn        ends
.text$mn:00004459
.text$mn:0000445C ; ===========================================================================
.text$mn:0000445C
.text$mn:0000445C ; Segment type: Pure code
.text$mn:0000445C ; Segment permissions: Read/Execute
.text$mn:0000445C _text$mn        segment para public 'CODE' use32
.text$mn:0000445C                 assume cs:_text$mn
.text$mn:0000445C                 ;org 445Ch
.text$mn:0000445C ; COMDAT (pick any)
.text$mn:0000445C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000445C
.text$mn:0000445C ; =============== S U B R O U T I N E =======================================
.text$mn:0000445C
.text$mn:0000445C ; Attributes: bp-based frame
.text$mn:0000445C
.text$mn:0000445C ; int __cdecl std::_DebugHeapDelete<std::locale>(void *Memory)
.text$mn:0000445C                 public ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z
.text$mn:0000445C ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z proc near
.text$mn:0000445C                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)+17p
.text$mn:0000445C
.text$mn:0000445C Memory          = dword ptr  8
.text$mn:0000445C
.text$mn:0000445C                 push    ebp
.text$mn:0000445D                 mov     ebp, esp
.text$mn:0000445F                 cmp     [ebp+Memory], 0
.text$mn:00004463                 jz      short loc_447B
.text$mn:00004465                 push    0
.text$mn:00004467                 mov     ecx, [ebp+Memory]
.text$mn:0000446A                 call    ??_Glocale@std@@QAEPAXI@Z ; std::locale::`scalar deleting destructor'(uint)
.text$mn:0000446F                 mov     eax, [ebp+Memory]
.text$mn:00004472                 push    eax             ; Memory
.text$mn:00004473                 call    _free
.text$mn:00004478                 add     esp, 4
.text$mn:0000447B
.text$mn:0000447B loc_447B:                               ; CODE XREF: std::_DebugHeapDelete<std::locale>(std::locale *)+7j
.text$mn:0000447B                 pop     ebp
.text$mn:0000447C                 retn
.text$mn:0000447C ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z endp
.text$mn:0000447C
.text$mn:0000447C ; ---------------------------------------------------------------------------
.text$mn:0000447D                 align 10h
.text$mn:0000447D _text$mn        ends
.text$mn:0000447D
.text$mn:00004480 ; ===========================================================================
.text$mn:00004480
.text$mn:00004480 ; Segment type: Pure code
.text$mn:00004480 ; Segment permissions: Read/Execute
.text$mn:00004480 _text$mn        segment para public 'CODE' use32
.text$mn:00004480                 assume cs:_text$mn
.text$mn:00004480                 ;org 4480h
.text$mn:00004480 ; COMDAT (pick any)
.text$mn:00004480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004480
.text$mn:00004480 ; =============== S U B R O U T I N E =======================================
.text$mn:00004480
.text$mn:00004480 ; Attributes: bp-based frame
.text$mn:00004480
.text$mn:00004480 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00004480                 public ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z
.text$mn:00004480 ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z proc near
.text$mn:00004480                                         ; CODE XREF: std::ctype<char>::do_narrow(char const *,char const *,char,char *)+2Fp
.text$mn:00004480                                         ; std::ctype<char>::do_widen(char const *,char const *,char *)+2Fp
.text$mn:00004480
.text$mn:00004480 arg_0           = dword ptr  8
.text$mn:00004480 arg_4           = dword ptr  0Ch
.text$mn:00004480 arg_8           = dword ptr  10h
.text$mn:00004480
.text$mn:00004480                 push    ebp
.text$mn:00004481                 mov     ebp, esp
.text$mn:00004483                 cmp     [ebp+arg_0], 0
.text$mn:00004487                 jnz     short loc_449E
.text$mn:00004489                 mov     eax, [ebp+arg_8]
.text$mn:0000448C                 push    eax             ; unsigned int
.text$mn:0000448D                 mov     ecx, [ebp+arg_4]
.text$mn:00004490                 push    ecx             ; wchar_t *
.text$mn:00004491                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004496                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000449B                 add     esp, 0Ch
.text$mn:0000449E
.text$mn:0000449E loc_449E:                               ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+7j
.text$mn:0000449E                 pop     ebp
.text$mn:0000449F                 retn
.text$mn:0000449F ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z endp
.text$mn:0000449F
.text$mn:0000449F _text$mn        ends
.text$mn:0000449F
.text$mn:000044A0 ; ===========================================================================
.text$mn:000044A0
.text$mn:000044A0 ; Segment type: Pure code
.text$mn:000044A0 ; Segment permissions: Read/Execute
.text$mn:000044A0 _text$mn        segment para public 'CODE' use32
.text$mn:000044A0                 assume cs:_text$mn
.text$mn:000044A0                 ;org 44A0h
.text$mn:000044A0 ; COMDAT (pick any)
.text$mn:000044A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044A0
.text$mn:000044A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000044A0
.text$mn:000044A0 ; Attributes: bp-based frame
.text$mn:000044A0
.text$mn:000044A0 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:000044A0                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:000044A0 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:000044A0                                         ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000044A0                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000044A0
.text$mn:000044A0 arg_0           = dword ptr  8
.text$mn:000044A0 arg_4           = dword ptr  0Ch
.text$mn:000044A0 arg_8           = dword ptr  10h
.text$mn:000044A0
.text$mn:000044A0                 push    ebp
.text$mn:000044A1                 mov     ebp, esp
.text$mn:000044A3                 cmp     [ebp+arg_0], 0
.text$mn:000044A7                 jnz     short loc_44BE
.text$mn:000044A9                 mov     eax, [ebp+arg_8]
.text$mn:000044AC                 push    eax             ; unsigned int
.text$mn:000044AD                 mov     ecx, [ebp+arg_4]
.text$mn:000044B0                 push    ecx             ; wchar_t *
.text$mn:000044B1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000044B6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000044BB                 add     esp, 0Ch
.text$mn:000044BE
.text$mn:000044BE loc_44BE:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000044BE                 pop     ebp
.text$mn:000044BF                 retn
.text$mn:000044BF ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000044BF
.text$mn:000044BF _text$mn        ends
.text$mn:000044BF
.text$mn:000044C0 ; ===========================================================================
.text$mn:000044C0
.text$mn:000044C0 ; Segment type: Pure code
.text$mn:000044C0 ; Segment permissions: Read/Execute
.text$mn:000044C0 _text$mn        segment para public 'CODE' use32
.text$mn:000044C0                 assume cs:_text$mn
.text$mn:000044C0                 ;org 44C0h
.text$mn:000044C0 ; COMDAT (pick any)
.text$mn:000044C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044C0
.text$mn:000044C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000044C0
.text$mn:000044C0 ; Attributes: bp-based frame
.text$mn:000044C0
.text$mn:000044C0 ; int __cdecl std::_Debug_range2<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:000044C0                 public ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000044C0 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000044C0                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+2Ap
.text$mn:000044C0
.text$mn:000044C0 arg_0           = dword ptr  8
.text$mn:000044C0 arg_4           = dword ptr  0Ch
.text$mn:000044C0 arg_8           = dword ptr  10h
.text$mn:000044C0 arg_C           = dword ptr  14h
.text$mn:000044C0
.text$mn:000044C0                 push    ebp
.text$mn:000044C1                 mov     ebp, esp
.text$mn:000044C3                 mov     eax, [ebp+arg_0]
.text$mn:000044C6                 cmp     eax, [ebp+arg_4]
.text$mn:000044C9                 jz      short loc_4510
.text$mn:000044CB                 mov     ecx, [ebp+arg_C]
.text$mn:000044CE                 push    ecx             ; unsigned int
.text$mn:000044CF                 mov     edx, [ebp+arg_8]
.text$mn:000044D2                 push    edx             ; wchar_t *
.text$mn:000044D3                 mov     eax, [ebp+arg_0]
.text$mn:000044D6                 push    eax             ; int
.text$mn:000044D7                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000044DC                 add     esp, 0Ch
.text$mn:000044DF                 mov     ecx, [ebp+arg_C]
.text$mn:000044E2                 push    ecx             ; unsigned int
.text$mn:000044E3                 mov     edx, [ebp+arg_8]
.text$mn:000044E6                 push    edx             ; wchar_t *
.text$mn:000044E7                 mov     eax, [ebp+arg_4]
.text$mn:000044EA                 push    eax             ; int
.text$mn:000044EB                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000044F0                 add     esp, 0Ch
.text$mn:000044F3                 mov     ecx, [ebp+arg_4]
.text$mn:000044F6                 cmp     ecx, [ebp+arg_0]
.text$mn:000044F9                 jnb     short loc_4510
.text$mn:000044FB                 mov     edx, [ebp+arg_C]
.text$mn:000044FE                 push    edx             ; unsigned int
.text$mn:000044FF                 mov     eax, [ebp+arg_8]
.text$mn:00004502                 push    eax             ; wchar_t *
.text$mn:00004503                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004508                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000450D                 add     esp, 0Ch
.text$mn:00004510
.text$mn:00004510 loc_4510:                               ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004510                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004510                 pop     ebp
.text$mn:00004511                 retn
.text$mn:00004511 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004511
.text$mn:00004511 ; ---------------------------------------------------------------------------
.text$mn:00004512                 align 4
.text$mn:00004512 _text$mn        ends
.text$mn:00004512
.text$mn:00004514 ; ===========================================================================
.text$mn:00004514
.text$mn:00004514 ; Segment type: Pure code
.text$mn:00004514 ; Segment permissions: Read/Execute
.text$mn:00004514 _text$mn        segment para public 'CODE' use32
.text$mn:00004514                 assume cs:_text$mn
.text$mn:00004514                 ;org 4514h
.text$mn:00004514 ; COMDAT (pick any)
.text$mn:00004514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004514
.text$mn:00004514 ; =============== S U B R O U T I N E =======================================
.text$mn:00004514
.text$mn:00004514 ; Attributes: bp-based frame
.text$mn:00004514
.text$mn:00004514 ; int __cdecl std::_Debug_range<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004514                 public ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z
.text$mn:00004514 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z proc near
.text$mn:00004514                                         ; CODE XREF: std::ctype<char>::do_narrow(char const *,char const *,char,char *)+19p
.text$mn:00004514                                         ; std::ctype<char>::do_tolower(char *,char const *)+19p ...
.text$mn:00004514
.text$mn:00004514 var_1           = byte ptr -1
.text$mn:00004514 arg_0           = dword ptr  8
.text$mn:00004514 arg_4           = dword ptr  0Ch
.text$mn:00004514 arg_8           = dword ptr  10h
.text$mn:00004514 arg_C           = dword ptr  14h
.text$mn:00004514
.text$mn:00004514                 push    ebp
.text$mn:00004515                 mov     ebp, esp
.text$mn:00004517                 push    ecx
.text$mn:00004518                 lea     eax, [ebp+arg_0]
.text$mn:0000451B                 push    eax
.text$mn:0000451C                 lea     ecx, [ebp+var_1]
.text$mn:0000451F                 push    ecx
.text$mn:00004520                 call    ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ; std::_Iter_cat<char const *>(char const * const &)
.text$mn:00004525                 add     esp, 8
.text$mn:00004528                 mov     dl, [eax]
.text$mn:0000452A                 movzx   eax, dl
.text$mn:0000452D                 push    eax
.text$mn:0000452E                 mov     ecx, [ebp+arg_C]
.text$mn:00004531                 push    ecx             ; unsigned int
.text$mn:00004532                 mov     edx, [ebp+arg_8]
.text$mn:00004535                 push    edx             ; wchar_t *
.text$mn:00004536                 mov     eax, [ebp+arg_4]
.text$mn:00004539                 push    eax             ; int
.text$mn:0000453A                 mov     ecx, [ebp+arg_0]
.text$mn:0000453D                 push    ecx             ; int
.text$mn:0000453E                 call    ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004543                 add     esp, 14h
.text$mn:00004546                 mov     esp, ebp
.text$mn:00004548                 pop     ebp
.text$mn:00004549                 retn
.text$mn:00004549 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z endp
.text$mn:00004549
.text$mn:00004549 ; ---------------------------------------------------------------------------
.text$mn:0000454A                 align 4
.text$mn:0000454A _text$mn        ends
.text$mn:0000454A
.text$mn:0000454C ; ===========================================================================
.text$mn:0000454C
.text$mn:0000454C ; Segment type: Pure code
.text$mn:0000454C ; Segment permissions: Read/Execute
.text$mn:0000454C _text$mn        segment para public 'CODE' use32
.text$mn:0000454C                 assume cs:_text$mn
.text$mn:0000454C                 ;org 454Ch
.text$mn:0000454C ; COMDAT (pick any)
.text$mn:0000454C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000454C
.text$mn:0000454C ; =============== S U B R O U T I N E =======================================
.text$mn:0000454C
.text$mn:0000454C ; Attributes: bp-based frame
.text$mn:0000454C
.text$mn:0000454C ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<char const *>(char const * const &)
.text$mn:0000454C                 public ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z
.text$mn:0000454C ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z proc near
.text$mn:0000454C                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+Cp
.text$mn:0000454C
.text$mn:0000454C var_1           = byte ptr -1
.text$mn:0000454C arg_0           = dword ptr  8
.text$mn:0000454C
.text$mn:0000454C                 push    ebp
.text$mn:0000454D                 mov     ebp, esp
.text$mn:0000454F                 push    ecx
.text$mn:00004550                 mov     eax, [ebp+arg_0]
.text$mn:00004553                 mov     cl, [ebp+var_1]
.text$mn:00004556                 mov     [eax], cl
.text$mn:00004558                 mov     eax, [ebp+arg_0]
.text$mn:0000455B                 mov     esp, ebp
.text$mn:0000455D                 pop     ebp
.text$mn:0000455E                 retn
.text$mn:0000455E ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z endp
.text$mn:0000455E
.text$mn:0000455E ; ---------------------------------------------------------------------------
.text$mn:0000455F                 align 10h
.text$mn:0000455F _text$mn        ends
.text$mn:0000455F
.text$mn:00004560 ; ===========================================================================
.text$mn:00004560
.text$mn:00004560 ; Segment type: Pure code
.text$mn:00004560 ; Segment permissions: Read/Execute
.text$mn:00004560 _text$mn        segment para public 'CODE' use32
.text$mn:00004560                 assume cs:_text$mn
.text$mn:00004560                 ;org 4560h
.text$mn:00004560 ; COMDAT (pick any)
.text$mn:00004560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004560
.text$mn:00004560 ; =============== S U B R O U T I N E =======================================
.text$mn:00004560
.text$mn:00004560 ; Attributes: bp-based frame
.text$mn:00004560
.text$mn:00004560 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00004560                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00004560 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00004560                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00004560                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00004560
.text$mn:00004560 arg_0           = dword ptr  8
.text$mn:00004560
.text$mn:00004560                 push    ebp
.text$mn:00004561                 mov     ebp, esp
.text$mn:00004563                 mov     eax, [ebp+arg_0]
.text$mn:00004566                 pop     ebp
.text$mn:00004567                 retn
.text$mn:00004567 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00004567
.text$mn:00004567 _text$mn        ends
.text$mn:00004567
.text$mn:00004568 ; ===========================================================================
.text$mn:00004568
.text$mn:00004568 ; Segment type: Pure code
.text$mn:00004568 ; Segment permissions: Read/Execute
.text$mn:00004568 _text$mn        segment para public 'CODE' use32
.text$mn:00004568                 assume cs:_text$mn
.text$mn:00004568                 ;org 4568h
.text$mn:00004568 ; COMDAT (pick any)
.text$mn:00004568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004568
.text$mn:00004568 ; =============== S U B R O U T I N E =======================================
.text$mn:00004568
.text$mn:00004568 ; Attributes: bp-based frame
.text$mn:00004568
.text$mn:00004568 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00004568                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00004568 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00004568                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+50p
.text$mn:00004568                                         ; $LN19+4Bp
.text$mn:00004568
.text$mn:00004568 var_4           = dword ptr -4
.text$mn:00004568 arg_0           = dword ptr  8
.text$mn:00004568 arg_4           = dword ptr  0Ch
.text$mn:00004568
.text$mn:00004568                 push    ebp
.text$mn:00004569                 mov     ebp, esp
.text$mn:0000456B                 push    ecx
.text$mn:0000456C                 mov     [ebp+var_4], ecx
.text$mn:0000456F                 mov     eax, [ebp+arg_4]
.text$mn:00004572                 push    eax
.text$mn:00004573                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004578                 add     esp, 4
.text$mn:0000457B                 push    eax             ; int
.text$mn:0000457C                 mov     ecx, [ebp+arg_0]
.text$mn:0000457F                 push    ecx             ; void *
.text$mn:00004580                 mov     edx, [ebp+var_4]
.text$mn:00004583                 push    edx             ; int
.text$mn:00004584                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00004589                 add     esp, 0Ch
.text$mn:0000458C                 mov     esp, ebp
.text$mn:0000458E                 pop     ebp
.text$mn:0000458F                 retn    8
.text$mn:0000458F ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000458F
.text$mn:0000458F ; ---------------------------------------------------------------------------
.text$mn:00004592                 align 4
.text$mn:00004592 _text$mn        ends
.text$mn:00004592
.text$mn:00004594 ; ===========================================================================
.text$mn:00004594
.text$mn:00004594 ; Segment type: Pure code
.text$mn:00004594 ; Segment permissions: Read/Execute
.text$mn:00004594 _text$mn        segment para public 'CODE' use32
.text$mn:00004594                 assume cs:_text$mn
.text$mn:00004594                 ;org 4594h
.text$mn:00004594 ; COMDAT (pick any)
.text$mn:00004594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004594
.text$mn:00004594 ; =============== S U B R O U T I N E =======================================
.text$mn:00004594
.text$mn:00004594 ; Attributes: bp-based frame
.text$mn:00004594
.text$mn:00004594 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00004594                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00004594 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00004594                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00004594
.text$mn:00004594 var_1C          = dword ptr -1Ch
.text$mn:00004594 var_18          = dword ptr -18h
.text$mn:00004594 var_14          = dword ptr -14h
.text$mn:00004594 var_10          = dword ptr -10h
.text$mn:00004594 var_C           = dword ptr -0Ch
.text$mn:00004594 var_4           = dword ptr -4
.text$mn:00004594 arg_0           = dword ptr  8
.text$mn:00004594 arg_4           = dword ptr  0Ch
.text$mn:00004594
.text$mn:00004594                 push    ebp
.text$mn:00004595                 mov     ebp, esp
.text$mn:00004597                 push    0FFFFFFFFh
.text$mn:00004599                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:0000459E                 mov     eax, large fs:0
.text$mn:000045A4                 push    eax
.text$mn:000045A5                 sub     esp, 10h
.text$mn:000045A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045AD                 xor     eax, ebp
.text$mn:000045AF                 push    eax
.text$mn:000045B0                 lea     eax, [ebp+var_C]
.text$mn:000045B3                 mov     large fs:0, eax
.text$mn:000045B9                 mov     [ebp+var_18], ecx
.text$mn:000045BC                 mov     eax, [ebp+arg_0]
.text$mn:000045BF                 push    eax             ; void *
.text$mn:000045C0                 push    4               ; unsigned int
.text$mn:000045C2                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000045C7                 add     esp, 8
.text$mn:000045CA                 mov     [ebp+var_10], eax
.text$mn:000045CD                 mov     [ebp+var_4], 0
.text$mn:000045D4                 cmp     [ebp+var_10], 0
.text$mn:000045D8                 jz      short loc_45F5
.text$mn:000045DA                 mov     ecx, [ebp+arg_4]
.text$mn:000045DD                 push    ecx
.text$mn:000045DE                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000045E3                 add     esp, 4
.text$mn:000045E6                 mov     edx, [ebp+var_10]
.text$mn:000045E9                 mov     eax, [eax]
.text$mn:000045EB                 mov     [edx], eax
.text$mn:000045ED                 mov     ecx, [ebp+var_10]
.text$mn:000045F0                 mov     [ebp+var_14], ecx
.text$mn:000045F3                 jmp     short loc_45FC
.text$mn:000045F5 ; ---------------------------------------------------------------------------
.text$mn:000045F5
.text$mn:000045F5 loc_45F5:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:000045F5                 mov     [ebp+var_14], 0
.text$mn:000045FC
.text$mn:000045FC loc_45FC:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:000045FC                 mov     edx, [ebp+var_14]
.text$mn:000045FF                 mov     [ebp+var_1C], edx
.text$mn:00004602                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004609                 mov     ecx, [ebp+var_C]
.text$mn:0000460C                 mov     large fs:0, ecx
.text$mn:00004613                 pop     ecx
.text$mn:00004614                 mov     esp, ebp
.text$mn:00004616                 pop     ebp
.text$mn:00004617                 retn    8
.text$mn:00004617 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00004617
.text$mn:00004617 ; ---------------------------------------------------------------------------
.text$mn:0000461A                 align 4
.text$mn:0000461A _text$mn        ends
.text$mn:0000461A
.text$x:0000461C ; ===========================================================================
.text$x:0000461C
.text$x:0000461C ; Segment type: Pure code
.text$x:0000461C ; Segment permissions: Read/Execute
.text$x:0000461C _text$x         segment para public 'CODE' use32
.text$x:0000461C                 assume cs:_text$x
.text$x:0000461C                 ;org 461Ch
.text$x:0000461C ; COMDAT (pick associative to section at 4594)
.text$x:0000461C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000461C
.text$x:0000461C ; =============== S U B R O U T I N E =======================================
.text$x:0000461C
.text$x:0000461C
.text$x:0000461C __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:0000461C                                         ; DATA XREF: .xdata$x:0000C844o
.text$x:0000461C                 mov     eax, [ebp+8]
.text$x:0000461F                 push    eax
.text$x:00004620                 mov     eax, [ebp-10h]
.text$x:00004623                 push    eax             ; void *
.text$x:00004624                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004629                 add     esp, 8
.text$x:0000462C                 retn
.text$x:0000462C __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:0000462C
.text$x:0000462D
.text$x:0000462D ; =============== S U B R O U T I N E =======================================
.text$x:0000462D
.text$x:0000462D
.text$x:0000462D __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:0000462D                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:0000462D
.text$x:0000462D arg_4           = dword ptr  8
.text$x:0000462D
.text$x:0000462D                 mov     edx, [esp+arg_4]
.text$x:00004631                 lea     eax, [edx+0Ch]
.text$x:00004634                 mov     ecx, [edx-14h]
.text$x:00004637                 xor     ecx, eax
.text$x:00004639                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000463E                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00004643                 jmp     ___CxxFrameHandler3
.text$x:00004643 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00004643
.text$x:00004643 _text$x         ends
.text$x:00004643
.text$mn:00004648 ; ===========================================================================
.text$mn:00004648
.text$mn:00004648 ; Segment type: Pure code
.text$mn:00004648 ; Segment permissions: Read/Execute
.text$mn:00004648 _text$mn        segment para public 'CODE' use32
.text$mn:00004648                 assume cs:_text$mn
.text$mn:00004648                 ;org 4648h
.text$mn:00004648 ; COMDAT (pick any)
.text$mn:00004648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004648
.text$mn:00004648 ; =============== S U B R O U T I N E =======================================
.text$mn:00004648
.text$mn:00004648 ; Attributes: bp-based frame
.text$mn:00004648
.text$mn:00004648 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00004648                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00004648 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00004648                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00004648
.text$mn:00004648 arg_0           = dword ptr  8
.text$mn:00004648 arg_4           = dword ptr  0Ch
.text$mn:00004648 arg_8           = dword ptr  10h
.text$mn:00004648
.text$mn:00004648                 push    ebp
.text$mn:00004649                 mov     ebp, esp
.text$mn:0000464B                 mov     eax, [ebp+arg_8]
.text$mn:0000464E                 push    eax
.text$mn:0000464F                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004654                 add     esp, 4
.text$mn:00004657                 push    eax             ; int
.text$mn:00004658                 mov     ecx, [ebp+arg_4]
.text$mn:0000465B                 push    ecx             ; void *
.text$mn:0000465C                 mov     ecx, [ebp+arg_0]
.text$mn:0000465F                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00004664                 pop     ebp
.text$mn:00004665                 retn
.text$mn:00004665 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00004665
.text$mn:00004665 ; ---------------------------------------------------------------------------
.text$mn:00004666                 align 4
.text$mn:00004666 _text$mn        ends
.text$mn:00004666
.text$mn:00004668 ; ===========================================================================
.text$mn:00004668
.text$mn:00004668 ; Segment type: Pure code
.text$mn:00004668 ; Segment permissions: Read/Execute
.text$mn:00004668 _text$mn        segment para public 'CODE' use32
.text$mn:00004668                 assume cs:_text$mn
.text$mn:00004668                 ;org 4668h
.text$mn:00004668 ; COMDAT (pick any)
.text$mn:00004668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004668
.text$mn:00004668 ; =============== S U B R O U T I N E =======================================
.text$mn:00004668
.text$mn:00004668 ; Attributes: bp-based frame
.text$mn:00004668
.text$mn:00004668 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00004668                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004668 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00004668                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:00004668
.text$mn:00004668 var_1C          = dword ptr -1Ch
.text$mn:00004668 var_18          = dword ptr -18h
.text$mn:00004668 var_14          = dword ptr -14h
.text$mn:00004668 var_10          = dword ptr -10h
.text$mn:00004668 var_C           = dword ptr -0Ch
.text$mn:00004668 var_4           = dword ptr -4
.text$mn:00004668 arg_0           = dword ptr  8
.text$mn:00004668 arg_4           = dword ptr  0Ch
.text$mn:00004668
.text$mn:00004668                 push    ebp
.text$mn:00004669                 mov     ebp, esp
.text$mn:0000466B                 push    0FFFFFFFFh
.text$mn:0000466D                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004672                 mov     eax, large fs:0
.text$mn:00004678                 push    eax
.text$mn:00004679                 sub     esp, 10h
.text$mn:0000467C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004681                 xor     eax, ebp
.text$mn:00004683                 push    eax
.text$mn:00004684                 lea     eax, [ebp+var_C]
.text$mn:00004687                 mov     large fs:0, eax
.text$mn:0000468D                 mov     [ebp+var_18], ecx
.text$mn:00004690                 mov     eax, [ebp+arg_0]
.text$mn:00004693                 push    eax             ; void *
.text$mn:00004694                 push    8               ; unsigned int
.text$mn:00004696                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000469B                 add     esp, 8
.text$mn:0000469E                 mov     [ebp+var_10], eax
.text$mn:000046A1                 mov     [ebp+var_4], 0
.text$mn:000046A8                 cmp     [ebp+var_10], 0
.text$mn:000046AC                 jz      short loc_46CF
.text$mn:000046AE                 mov     ecx, [ebp+arg_4]
.text$mn:000046B1                 push    ecx
.text$mn:000046B2                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000046B7                 add     esp, 4
.text$mn:000046BA                 mov     edx, [eax]
.text$mn:000046BC                 mov     eax, [eax+4]
.text$mn:000046BF                 mov     ecx, [ebp+var_10]
.text$mn:000046C2                 mov     [ecx], edx
.text$mn:000046C4                 mov     [ecx+4], eax
.text$mn:000046C7                 mov     edx, [ebp+var_10]
.text$mn:000046CA                 mov     [ebp+var_14], edx
.text$mn:000046CD                 jmp     short loc_46D6
.text$mn:000046CF ; ---------------------------------------------------------------------------
.text$mn:000046CF
.text$mn:000046CF loc_46CF:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:000046CF                 mov     [ebp+var_14], 0
.text$mn:000046D6
.text$mn:000046D6 loc_46D6:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:000046D6                 mov     eax, [ebp+var_14]
.text$mn:000046D9                 mov     [ebp+var_1C], eax
.text$mn:000046DC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046E3                 mov     ecx, [ebp+var_C]
.text$mn:000046E6                 mov     large fs:0, ecx
.text$mn:000046ED                 pop     ecx
.text$mn:000046EE                 mov     esp, ebp
.text$mn:000046F0                 pop     ebp
.text$mn:000046F1                 retn    8
.text$mn:000046F1 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:000046F1
.text$mn:000046F1 _text$mn        ends
.text$mn:000046F1
.text$x:000046F4 ; ===========================================================================
.text$x:000046F4
.text$x:000046F4 ; Segment type: Pure code
.text$x:000046F4 ; Segment permissions: Read/Execute
.text$x:000046F4 _text$x         segment para public 'CODE' use32
.text$x:000046F4                 assume cs:_text$x
.text$x:000046F4                 ;org 46F4h
.text$x:000046F4 ; COMDAT (pick associative to section at 4668)
.text$x:000046F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046F4
.text$x:000046F4 ; =============== S U B R O U T I N E =======================================
.text$x:000046F4
.text$x:000046F4
.text$x:000046F4 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:000046F4                                         ; DATA XREF: .xdata$x:0000C7C0o
.text$x:000046F4                 mov     eax, [ebp+8]
.text$x:000046F7                 push    eax
.text$x:000046F8                 mov     eax, [ebp-10h]
.text$x:000046FB                 push    eax             ; void *
.text$x:000046FC                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004701                 add     esp, 8
.text$x:00004704                 retn
.text$x:00004704 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00004704
.text$x:00004705
.text$x:00004705 ; =============== S U B R O U T I N E =======================================
.text$x:00004705
.text$x:00004705
.text$x:00004705 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00004705                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00004705
.text$x:00004705 arg_4           = dword ptr  8
.text$x:00004705
.text$x:00004705                 mov     edx, [esp+arg_4]
.text$x:00004709                 lea     eax, [edx+0Ch]
.text$x:0000470C                 mov     ecx, [edx-14h]
.text$x:0000470F                 xor     ecx, eax
.text$x:00004711                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004716                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:0000471B                 jmp     ___CxxFrameHandler3
.text$x:0000471B __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:0000471B
.text$x:0000471B _text$x         ends
.text$x:0000471B
.text$mn:00004720 ; ===========================================================================
.text$mn:00004720
.text$mn:00004720 ; Segment type: Pure code
.text$mn:00004720 ; Segment permissions: Read/Execute
.text$mn:00004720 _text$mn        segment para public 'CODE' use32
.text$mn:00004720                 assume cs:_text$mn
.text$mn:00004720                 ;org 4720h
.text$mn:00004720 ; COMDAT (pick any)
.text$mn:00004720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004720
.text$mn:00004720 ; =============== S U B R O U T I N E =======================================
.text$mn:00004720
.text$mn:00004720 ; Attributes: bp-based frame
.text$mn:00004720
.text$mn:00004720 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00004720                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00004720 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00004720                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00004720
.text$mn:00004720 var_4           = dword ptr -4
.text$mn:00004720 arg_0           = dword ptr  8
.text$mn:00004720
.text$mn:00004720                 push    ebp
.text$mn:00004721                 mov     ebp, esp
.text$mn:00004723                 push    ecx
.text$mn:00004724                 mov     [ebp+var_4], ecx
.text$mn:00004727                 mov     eax, [ebp+arg_0]
.text$mn:0000472A                 push    eax
.text$mn:0000472B                 mov     ecx, [ebp+var_4]
.text$mn:0000472E                 push    ecx
.text$mn:0000472F                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00004734                 add     esp, 8
.text$mn:00004737                 mov     esp, ebp
.text$mn:00004739                 pop     ebp
.text$mn:0000473A                 retn    4
.text$mn:0000473A ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:0000473A
.text$mn:0000473A ; ---------------------------------------------------------------------------
.text$mn:0000473D                 align 10h
.text$mn:0000473D _text$mn        ends
.text$mn:0000473D
.text$mn:00004740 ; ===========================================================================
.text$mn:00004740
.text$mn:00004740 ; Segment type: Pure code
.text$mn:00004740 ; Segment permissions: Read/Execute
.text$mn:00004740 _text$mn        segment para public 'CODE' use32
.text$mn:00004740                 assume cs:_text$mn
.text$mn:00004740                 ;org 4740h
.text$mn:00004740 ; COMDAT (pick any)
.text$mn:00004740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004740
.text$mn:00004740 ; =============== S U B R O U T I N E =======================================
.text$mn:00004740
.text$mn:00004740 ; Attributes: bp-based frame
.text$mn:00004740
.text$mn:00004740 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00004740                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00004740 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00004740                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00004740
.text$mn:00004740 var_4           = dword ptr -4
.text$mn:00004740
.text$mn:00004740                 push    ebp
.text$mn:00004741                 mov     ebp, esp
.text$mn:00004743                 push    ecx
.text$mn:00004744                 mov     [ebp+var_4], ecx
.text$mn:00004747                 mov     esp, ebp
.text$mn:00004749                 pop     ebp
.text$mn:0000474A                 retn    4
.text$mn:0000474A ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:0000474A
.text$mn:0000474A ; ---------------------------------------------------------------------------
.text$mn:0000474D                 align 10h
.text$mn:0000474D _text$mn        ends
.text$mn:0000474D
.text$mn:00004750 ; ===========================================================================
.text$mn:00004750
.text$mn:00004750 ; Segment type: Pure code
.text$mn:00004750 ; Segment permissions: Read/Execute
.text$mn:00004750 _text$mn        segment para public 'CODE' use32
.text$mn:00004750                 assume cs:_text$mn
.text$mn:00004750                 ;org 4750h
.text$mn:00004750 ; COMDAT (pick any)
.text$mn:00004750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004750
.text$mn:00004750 ; =============== S U B R O U T I N E =======================================
.text$mn:00004750
.text$mn:00004750 ; Attributes: bp-based frame
.text$mn:00004750
.text$mn:00004750 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00004750                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00004750 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00004750                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00004750
.text$mn:00004750 arg_0           = dword ptr  8
.text$mn:00004750 arg_4           = dword ptr  0Ch
.text$mn:00004750
.text$mn:00004750                 push    ebp
.text$mn:00004751                 mov     ebp, esp
.text$mn:00004753                 mov     eax, [ebp+arg_4]
.text$mn:00004756                 push    eax
.text$mn:00004757                 mov     ecx, [ebp+arg_0]
.text$mn:0000475A                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:0000475F                 pop     ebp
.text$mn:00004760                 retn
.text$mn:00004760 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00004760
.text$mn:00004760 ; ---------------------------------------------------------------------------
.text$mn:00004761                 align 4
.text$mn:00004761 _text$mn        ends
.text$mn:00004761
.text$mn:00004764 ; ===========================================================================
.text$mn:00004764
.text$mn:00004764 ; Segment type: Pure code
.text$mn:00004764 ; Segment permissions: Read/Execute
.text$mn:00004764 _text$mn        segment para public 'CODE' use32
.text$mn:00004764                 assume cs:_text$mn
.text$mn:00004764                 ;org 4764h
.text$mn:00004764 ; COMDAT (pick any)
.text$mn:00004764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004764
.text$mn:00004764 ; =============== S U B R O U T I N E =======================================
.text$mn:00004764
.text$mn:00004764 ; Attributes: bp-based frame
.text$mn:00004764
.text$mn:00004764 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00004764                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00004764 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00004764                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:00004764
.text$mn:00004764 var_4           = dword ptr -4
.text$mn:00004764
.text$mn:00004764                 push    ebp
.text$mn:00004765                 mov     ebp, esp
.text$mn:00004767                 push    ecx
.text$mn:00004768                 mov     [ebp+var_4], ecx
.text$mn:0000476B                 mov     esp, ebp
.text$mn:0000476D                 pop     ebp
.text$mn:0000476E                 retn    4
.text$mn:0000476E ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:0000476E
.text$mn:0000476E ; ---------------------------------------------------------------------------
.text$mn:00004771                 align 4
.text$mn:00004771 _text$mn        ends
.text$mn:00004771
.text$mn:00004774 ; ===========================================================================
.text$mn:00004774
.text$mn:00004774 ; Segment type: Pure code
.text$mn:00004774 ; Segment permissions: Read/Execute
.text$mn:00004774 _text$mn        segment para public 'CODE' use32
.text$mn:00004774                 assume cs:_text$mn
.text$mn:00004774                 ;org 4774h
.text$mn:00004774 ; COMDAT (pick any)
.text$mn:00004774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004774
.text$mn:00004774 ; =============== S U B R O U T I N E =======================================
.text$mn:00004774
.text$mn:00004774 ; Attributes: bp-based frame
.text$mn:00004774
.text$mn:00004774 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00004774                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00004774 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00004774                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00004774                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00004774
.text$mn:00004774 arg_0           = dword ptr  8
.text$mn:00004774
.text$mn:00004774                 push    ebp
.text$mn:00004775                 mov     ebp, esp
.text$mn:00004777                 mov     eax, [ebp+arg_0]
.text$mn:0000477A                 pop     ebp
.text$mn:0000477B                 retn
.text$mn:0000477B ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:0000477B
.text$mn:0000477B _text$mn        ends
.text$mn:0000477B
.text$mn:0000477C ; ===========================================================================
.text$mn:0000477C
.text$mn:0000477C ; Segment type: Pure code
.text$mn:0000477C ; Segment permissions: Read/Execute
.text$mn:0000477C _text$mn        segment para public 'CODE' use32
.text$mn:0000477C                 assume cs:_text$mn
.text$mn:0000477C                 ;org 477Ch
.text$mn:0000477C ; COMDAT (pick any)
.text$mn:0000477C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000477C
.text$mn:0000477C ; =============== S U B R O U T I N E =======================================
.text$mn:0000477C
.text$mn:0000477C ; Attributes: bp-based frame
.text$mn:0000477C
.text$mn:0000477C ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:0000477C                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:0000477C ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:0000477C                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:0000477C
.text$mn:0000477C arg_0           = dword ptr  8
.text$mn:0000477C
.text$mn:0000477C                 push    ebp
.text$mn:0000477D                 mov     ebp, esp
.text$mn:0000477F                 mov     eax, [ebp+arg_0]
.text$mn:00004782                 pop     ebp
.text$mn:00004783                 retn
.text$mn:00004783 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00004783
.text$mn:00004783 _text$mn        ends
.text$mn:00004783
.text$mn:00004784 ; ===========================================================================
.text$mn:00004784
.text$mn:00004784 ; Segment type: Pure code
.text$mn:00004784 ; Segment permissions: Read/Execute
.text$mn:00004784 _text$mn        segment para public 'CODE' use32
.text$mn:00004784                 assume cs:_text$mn
.text$mn:00004784                 ;org 4784h
.text$mn:00004784 ; COMDAT (pick any)
.text$mn:00004784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004784
.text$mn:00004784 ; =============== S U B R O U T I N E =======================================
.text$mn:00004784
.text$mn:00004784 ; Attributes: bp-based frame
.text$mn:00004784
.text$mn:00004784 ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> && __cdecl std::forward<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
.text$mn:00004784                 public ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
.text$mn:00004784 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
.text$mn:00004784                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+54p
.text$mn:00004784
.text$mn:00004784 arg_0           = dword ptr  8
.text$mn:00004784
.text$mn:00004784                 push    ebp
.text$mn:00004785                 mov     ebp, esp
.text$mn:00004787                 mov     eax, [ebp+arg_0]
.text$mn:0000478A                 pop     ebp
.text$mn:0000478B                 retn
.text$mn:0000478B ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z endp
.text$mn:0000478B
.text$mn:0000478B _text$mn        ends
.text$mn:0000478B
.text$mn:0000478C ; ===========================================================================
.text$mn:0000478C
.text$mn:0000478C ; Segment type: Pure code
.text$mn:0000478C ; Segment permissions: Read/Execute
.text$mn:0000478C _text$mn        segment para public 'CODE' use32
.text$mn:0000478C                 assume cs:_text$mn
.text$mn:0000478C                 ;org 478Ch
.text$mn:0000478C ; COMDAT (pick any)
.text$mn:0000478C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000478C
.text$mn:0000478C ; =============== S U B R O U T I N E =======================================
.text$mn:0000478C
.text$mn:0000478C ; Attributes: bp-based frame
.text$mn:0000478C
.text$mn:0000478C ; int __cdecl std::use_facet<std::ctype<char>>(std::locale *)
.text$mn:0000478C                 public ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
.text$mn:0000478C ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z proc near
.text$mn:0000478C                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::widen(char)+48p
.text$mn:0000478C
.text$mn:0000478C var_30          = byte ptr -30h
.text$mn:0000478C var_24          = dword ptr -24h
.text$mn:0000478C var_20          = byte ptr -20h
.text$mn:0000478C var_1C          = dword ptr -1Ch
.text$mn:0000478C var_18          = dword ptr -18h
.text$mn:0000478C var_14          = dword ptr -14h
.text$mn:0000478C var_10          = dword ptr -10h
.text$mn:0000478C var_C           = dword ptr -0Ch
.text$mn:0000478C var_4           = dword ptr -4
.text$mn:0000478C arg_0           = dword ptr  8
.text$mn:0000478C
.text$mn:0000478C                 push    ebp
.text$mn:0000478D                 mov     ebp, esp
.text$mn:0000478F                 push    0FFFFFFFFh
.text$mn:00004791                 push    offset __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
.text$mn:00004796                 mov     eax, large fs:0
.text$mn:0000479C                 push    eax
.text$mn:0000479D                 sub     esp, 24h
.text$mn:000047A0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000047A5                 xor     eax, ebp
.text$mn:000047A7                 push    eax
.text$mn:000047A8                 lea     eax, [ebp+var_C]
.text$mn:000047AB                 mov     large fs:0, eax
.text$mn:000047B1                 push    0               ; int
.text$mn:000047B3                 lea     ecx, [ebp+var_20] ; this
.text$mn:000047B6                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000047BB                 mov     [ebp+var_4], 0
.text$mn:000047C2                 mov     eax, ds:?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::locale::facet const * const std::_Facetptr<std::ctype<char>>::_Psave
.text$mn:000047C7                 mov     [ebp+var_10], eax
.text$mn:000047CA                 mov     ecx, offset ?id@?$ctype@D@std@@2V0locale@2@A ; std::locale::id std::ctype<char>::id
.text$mn:000047CF                 call    ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator uint(void)
.text$mn:000047D4                 mov     [ebp+var_1C], eax
.text$mn:000047D7                 mov     ecx, [ebp+var_1C]
.text$mn:000047DA                 push    ecx             ; unsigned int
.text$mn:000047DB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000047DE                 call    ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet(uint)
.text$mn:000047E3                 mov     [ebp+var_14], eax
.text$mn:000047E6                 cmp     [ebp+var_14], 0
.text$mn:000047EA                 jz      short loc_47EE
.text$mn:000047EC                 jmp     short loc_485C
.text$mn:000047EE ; ---------------------------------------------------------------------------
.text$mn:000047EE
.text$mn:000047EE loc_47EE:                               ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+5Ej
.text$mn:000047EE                 cmp     [ebp+var_10], 0
.text$mn:000047F2                 jz      short loc_47FC
.text$mn:000047F4                 mov     edx, [ebp+var_10]
.text$mn:000047F7                 mov     [ebp+var_14], edx
.text$mn:000047FA                 jmp     short loc_485C
.text$mn:000047FC ; ---------------------------------------------------------------------------
.text$mn:000047FC
.text$mn:000047FC loc_47FC:                               ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+66j
.text$mn:000047FC                 mov     eax, [ebp+arg_0]
.text$mn:000047FF                 push    eax             ; std::locale *
.text$mn:00004800                 lea     ecx, [ebp+var_10]
.text$mn:00004803                 push    ecx             ; int
.text$mn:00004804                 call    ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)
.text$mn:00004809                 add     esp, 8
.text$mn:0000480C                 cmp     eax, 0FFFFFFFFh
.text$mn:0000480F                 jnz     short loc_482E
.text$mn:00004811                 push    offset ??_C@_08EPJLHIJG@bad?5cast?$AA@ ; "bad cast"
.text$mn:00004816                 lea     ecx, [ebp+var_30] ; this
.text$mn:00004819                 call    ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast(char const *)
.text$mn:0000481E                 push    offset __TI2?AVbad_cast@std@@
.text$mn:00004823                 lea     edx, [ebp+var_30]
.text$mn:00004826                 push    edx
.text$mn:00004827                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000482C ; ---------------------------------------------------------------------------
.text$mn:0000482C                 jmp     short loc_485C
.text$mn:0000482E ; ---------------------------------------------------------------------------
.text$mn:0000482E
.text$mn:0000482E loc_482E:                               ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+83j
.text$mn:0000482E                 mov     eax, [ebp+var_10]
.text$mn:00004831                 mov     [ebp+var_14], eax
.text$mn:00004834                 mov     ecx, [ebp+var_10]
.text$mn:00004837                 mov     ds:?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::locale::facet const * const std::_Facetptr<std::ctype<char>>::_Psave
.text$mn:0000483D                 mov     edx, [ebp+var_10]
.text$mn:00004840                 mov     [ebp+var_18], edx
.text$mn:00004843                 mov     eax, [ebp+var_18]
.text$mn:00004846                 mov     edx, [eax]
.text$mn:00004848                 mov     ecx, [ebp+var_18]
.text$mn:0000484B                 mov     eax, [edx+4]
.text$mn:0000484E                 call    eax
.text$mn:00004850                 mov     ecx, [ebp+var_18]
.text$mn:00004853                 push    ecx             ; struct std::_Facet_base *
.text$mn:00004854                 call    ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register(std::_Facet_base *)
.text$mn:00004859                 add     esp, 4
.text$mn:0000485C
.text$mn:0000485C loc_485C:                               ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+60j
.text$mn:0000485C                                         ; std::use_facet<std::ctype<char>>(std::locale const &)+6Ej ...
.text$mn:0000485C                 mov     edx, [ebp+var_14]
.text$mn:0000485F                 mov     [ebp+var_24], edx
.text$mn:00004862                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004869                 lea     ecx, [ebp+var_20] ; this
.text$mn:0000486C                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004871                 mov     eax, [ebp+var_24]
.text$mn:00004874                 mov     ecx, [ebp+var_C]
.text$mn:00004877                 mov     large fs:0, ecx
.text$mn:0000487E                 pop     ecx
.text$mn:0000487F                 mov     esp, ebp
.text$mn:00004881                 pop     ebp
.text$mn:00004882                 retn
.text$mn:00004882 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z endp
.text$mn:00004882
.text$mn:00004882 ; ---------------------------------------------------------------------------
.text$mn:00004883                 align 4
.text$mn:00004883 _text$mn        ends
.text$mn:00004883
.text$x:00004884 ; ===========================================================================
.text$x:00004884
.text$x:00004884 ; Segment type: Pure code
.text$x:00004884 ; Segment permissions: Read/Execute
.text$x:00004884 _text$x         segment para public 'CODE' use32
.text$x:00004884                 assume cs:_text$x
.text$x:00004884                 ;org 4884h
.text$x:00004884 ; COMDAT (pick associative to section at 478C)
.text$x:00004884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004884
.text$x:00004884 ; =============== S U B R O U T I N E =======================================
.text$x:00004884
.text$x:00004884
.text$x:00004884 __unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0 proc near
.text$x:00004884                                         ; DATA XREF: .xdata$x:0000B86Co
.text$x:00004884                 lea     ecx, [ebp-20h]  ; this
.text$x:00004887                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004887 __unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0 endp
.text$x:00004887
.text$x:0000488C
.text$x:0000488C ; =============== S U B R O U T I N E =======================================
.text$x:0000488C
.text$x:0000488C
.text$x:0000488C __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z proc near
.text$x:0000488C                                         ; DATA XREF: std::use_facet<std::ctype<char>>(std::locale const &)+5o
.text$x:0000488C
.text$x:0000488C arg_4           = dword ptr  8
.text$x:0000488C
.text$x:0000488C                 mov     edx, [esp+arg_4]
.text$x:00004890                 lea     eax, [edx+0Ch]
.text$x:00004893                 mov     ecx, [edx-28h]
.text$x:00004896                 xor     ecx, eax
.text$x:00004898                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000489D                 mov     eax, offset __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
.text$x:000048A2                 jmp     ___CxxFrameHandler3
.text$x:000048A2 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z endp
.text$x:000048A2
.text$x:000048A2 ; ---------------------------------------------------------------------------
.text$x:000048A7                 align 4
.text$x:000048A7 _text$x         ends
.text$x:000048A7
.text$mn:000048A8 ; ===========================================================================
.text$mn:000048A8
.text$mn:000048A8 ; Segment type: Pure code
.text$mn:000048A8 ; Segment permissions: Read/Execute
.text$mn:000048A8 _text$mn        segment para public 'CODE' use32
.text$mn:000048A8                 assume cs:_text$mn
.text$mn:000048A8                 ;org 48A8h
.text$mn:000048A8 ; COMDAT (pick any)
.text$mn:000048A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048A8
.text$mn:000048A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048A8
.text$mn:000048A8 ; Attributes: bp-based frame
.text$mn:000048A8
.text$mn:000048A8 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:000048A8                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000048A8 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:000048A8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+38p
.text$mn:000048A8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+43p ...
.text$mn:000048A8
.text$mn:000048A8 var_10          = dword ptr -10h
.text$mn:000048A8 var_C           = dword ptr -0Ch
.text$mn:000048A8 var_4           = dword ptr -4
.text$mn:000048A8
.text$mn:000048A8                 push    ebp
.text$mn:000048A9                 mov     ebp, esp
.text$mn:000048AB                 push    0FFFFFFFFh
.text$mn:000048AD                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000048B2                 mov     eax, large fs:0
.text$mn:000048B8                 push    eax
.text$mn:000048B9                 push    ecx
.text$mn:000048BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000048BF                 xor     eax, ebp
.text$mn:000048C1                 push    eax
.text$mn:000048C2                 lea     eax, [ebp+var_C]
.text$mn:000048C5                 mov     large fs:0, eax
.text$mn:000048CB                 mov     [ebp+var_10], ecx
.text$mn:000048CE                 mov     ecx, [ebp+var_10]
.text$mn:000048D1                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:000048D6                 mov     [ebp+var_4], 0
.text$mn:000048DD                 mov     ecx, [ebp+var_10]
.text$mn:000048E0                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000048E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048EC                 mov     eax, [ebp+var_10]
.text$mn:000048EF                 mov     ecx, [ebp+var_C]
.text$mn:000048F2                 mov     large fs:0, ecx
.text$mn:000048F9                 pop     ecx
.text$mn:000048FA                 mov     esp, ebp
.text$mn:000048FC                 pop     ebp
.text$mn:000048FD                 retn    4
.text$mn:000048FD ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000048FD
.text$mn:000048FD _text$mn        ends
.text$mn:000048FD
.text$x:00004900 ; ===========================================================================
.text$x:00004900
.text$x:00004900 ; Segment type: Pure code
.text$x:00004900 ; Segment permissions: Read/Execute
.text$x:00004900 _text$x         segment para public 'CODE' use32
.text$x:00004900                 assume cs:_text$x
.text$x:00004900                 ;org 4900h
.text$x:00004900 ; COMDAT (pick associative to section at 48A8)
.text$x:00004900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004900
.text$x:00004900 ; =============== S U B R O U T I N E =======================================
.text$x:00004900
.text$x:00004900
.text$x:00004900 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00004900                                         ; DATA XREF: .xdata$x:0000B3A8o
.text$x:00004900                 mov     ecx, [ebp-10h]
.text$x:00004903                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00004903 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00004903
.text$x:00004908
.text$x:00004908 ; =============== S U B R O U T I N E =======================================
.text$x:00004908
.text$x:00004908
.text$x:00004908 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00004908                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00004908
.text$x:00004908 arg_4           = dword ptr  8
.text$x:00004908
.text$x:00004908                 mov     edx, [esp+arg_4]
.text$x:0000490C                 lea     eax, [edx+0Ch]
.text$x:0000490F                 mov     ecx, [edx-8]
.text$x:00004912                 xor     ecx, eax
.text$x:00004914                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004919                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:0000491E                 jmp     ___CxxFrameHandler3
.text$x:0000491E __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:0000491E
.text$x:0000491E ; ---------------------------------------------------------------------------
.text$x:00004923                 align 4
.text$x:00004923 _text$x         ends
.text$x:00004923
.text$mn:00004924 ; ===========================================================================
.text$mn:00004924
.text$mn:00004924 ; Segment type: Pure code
.text$mn:00004924 ; Segment permissions: Read/Execute
.text$mn:00004924 _text$mn        segment para public 'CODE' use32
.text$mn:00004924                 assume cs:_text$mn
.text$mn:00004924                 ;org 4924h
.text$mn:00004924 ; COMDAT (pick any)
.text$mn:00004924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004924
.text$mn:00004924 ; =============== S U B R O U T I N E =======================================
.text$mn:00004924
.text$mn:00004924 ; Attributes: bp-based frame
.text$mn:00004924
.text$mn:00004924 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00004924                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004924 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00004924                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00004924
.text$mn:00004924 var_10          = dword ptr -10h
.text$mn:00004924 var_C           = dword ptr -0Ch
.text$mn:00004924 var_4           = dword ptr -4
.text$mn:00004924
.text$mn:00004924                 push    ebp
.text$mn:00004925                 mov     ebp, esp
.text$mn:00004927                 push    0FFFFFFFFh
.text$mn:00004929                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000492E                 mov     eax, large fs:0
.text$mn:00004934                 push    eax
.text$mn:00004935                 push    ecx
.text$mn:00004936                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000493B                 xor     eax, ebp
.text$mn:0000493D                 push    eax
.text$mn:0000493E                 lea     eax, [ebp+var_C]
.text$mn:00004941                 mov     large fs:0, eax
.text$mn:00004947                 mov     [ebp+var_10], ecx
.text$mn:0000494A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000494D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00004952                 mov     [ebp+var_4], 0
.text$mn:00004959                 mov     eax, [ebp+var_10]
.text$mn:0000495C                 mov     dword ptr [eax+14h], 0
.text$mn:00004963                 mov     ecx, [ebp+var_10]
.text$mn:00004966                 mov     dword ptr [ecx+18h], 0
.text$mn:0000496D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004974                 mov     eax, [ebp+var_10]
.text$mn:00004977                 mov     ecx, [ebp+var_C]
.text$mn:0000497A                 mov     large fs:0, ecx
.text$mn:00004981                 pop     ecx
.text$mn:00004982                 mov     esp, ebp
.text$mn:00004984                 pop     ebp
.text$mn:00004985                 retn
.text$mn:00004985 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00004985
.text$mn:00004985 ; ---------------------------------------------------------------------------
.text$mn:00004986                 align 4
.text$mn:00004986 _text$mn        ends
.text$mn:00004986
.text$x:00004988 ; ===========================================================================
.text$x:00004988
.text$x:00004988 ; Segment type: Pure code
.text$x:00004988 ; Segment permissions: Read/Execute
.text$x:00004988 _text$x         segment para public 'CODE' use32
.text$x:00004988                 assume cs:_text$x
.text$x:00004988                 ;org 4988h
.text$x:00004988 ; COMDAT (pick associative to section at 4924)
.text$x:00004988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004988
.text$x:00004988 ; =============== S U B R O U T I N E =======================================
.text$x:00004988
.text$x:00004988
.text$x:00004988 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00004988                                         ; DATA XREF: .xdata$x:0000B350o
.text$x:00004988                 mov     ecx, [ebp-10h]  ; this
.text$x:0000498B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000498B __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000498B
.text$x:00004990
.text$x:00004990 ; =============== S U B R O U T I N E =======================================
.text$x:00004990
.text$x:00004990
.text$x:00004990 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004990                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004990
.text$x:00004990 arg_4           = dword ptr  8
.text$x:00004990
.text$x:00004990                 mov     edx, [esp+arg_4]
.text$x:00004994                 lea     eax, [edx+0Ch]
.text$x:00004997                 mov     ecx, [edx-8]
.text$x:0000499A                 xor     ecx, eax
.text$x:0000499C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049A1                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000049A6                 jmp     ___CxxFrameHandler3
.text$x:000049A6 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000049A6
.text$x:000049A6 ; ---------------------------------------------------------------------------
.text$x:000049AB                 align 4
.text$x:000049AB _text$x         ends
.text$x:000049AB
.text$mn:000049AC ; ===========================================================================
.text$mn:000049AC
.text$mn:000049AC ; Segment type: Pure code
.text$mn:000049AC ; Segment permissions: Read/Execute
.text$mn:000049AC _text$mn        segment para public 'CODE' use32
.text$mn:000049AC                 assume cs:_text$mn
.text$mn:000049AC                 ;org 49ACh
.text$mn:000049AC ; COMDAT (pick any)
.text$mn:000049AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049AC
.text$mn:000049AC ; =============== S U B R O U T I N E =======================================
.text$mn:000049AC
.text$mn:000049AC ; Attributes: bp-based frame
.text$mn:000049AC
.text$mn:000049AC ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(class std::allocator<char> const &)
.text$mn:000049AC                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000049AC ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:000049AC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+1Dp
.text$mn:000049AC
.text$mn:000049AC var_4           = dword ptr -4
.text$mn:000049AC arg_0           = dword ptr  8
.text$mn:000049AC
.text$mn:000049AC                 push    ebp
.text$mn:000049AD                 mov     ebp, esp
.text$mn:000049AF                 push    ecx
.text$mn:000049B0                 mov     [ebp+var_4], ecx
.text$mn:000049B3                 mov     eax, [ebp+arg_0]
.text$mn:000049B6                 push    eax
.text$mn:000049B7                 mov     ecx, [ebp+var_4]
.text$mn:000049BA                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:000049BF                 mov     eax, [ebp+var_4]
.text$mn:000049C2                 mov     esp, ebp
.text$mn:000049C4                 pop     ebp
.text$mn:000049C5                 retn    4
.text$mn:000049C5 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000049C5
.text$mn:000049C5 _text$mn        ends
.text$mn:000049C5
.text$mn:000049C8 ; ===========================================================================
.text$mn:000049C8
.text$mn:000049C8 ; Segment type: Pure code
.text$mn:000049C8 ; Segment permissions: Read/Execute
.text$mn:000049C8 _text$mn        segment para public 'CODE' use32
.text$mn:000049C8                 assume cs:_text$mn
.text$mn:000049C8                 ;org 49C8h
.text$mn:000049C8 ; COMDAT (pick any)
.text$mn:000049C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049C8
.text$mn:000049C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000049C8
.text$mn:000049C8 ; Attributes: bp-based frame
.text$mn:000049C8
.text$mn:000049C8 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:000049C8                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:000049C8 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:000049C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:000049C8
.text$mn:000049C8 var_4           = dword ptr -4
.text$mn:000049C8
.text$mn:000049C8                 push    ebp
.text$mn:000049C9                 mov     ebp, esp
.text$mn:000049CB                 push    ecx
.text$mn:000049CC                 mov     [ebp+var_4], ecx
.text$mn:000049CF                 mov     ecx, [ebp+var_4]
.text$mn:000049D2                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000049D7                 mov     eax, [ebp+var_4]
.text$mn:000049DA                 mov     esp, ebp
.text$mn:000049DC                 pop     ebp
.text$mn:000049DD                 retn
.text$mn:000049DD ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:000049DD
.text$mn:000049DD ; ---------------------------------------------------------------------------
.text$mn:000049DE                 align 10h
.text$mn:000049DE _text$mn        ends
.text$mn:000049DE
.text$mn:000049E0 ; ===========================================================================
.text$mn:000049E0
.text$mn:000049E0 ; Segment type: Pure code
.text$mn:000049E0 ; Segment permissions: Read/Execute
.text$mn:000049E0 _text$mn        segment para public 'CODE' use32
.text$mn:000049E0                 assume cs:_text$mn
.text$mn:000049E0                 ;org 49E0h
.text$mn:000049E0 ; COMDAT (pick any)
.text$mn:000049E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049E0
.text$mn:000049E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049E0
.text$mn:000049E0 ; Attributes: bp-based frame
.text$mn:000049E0
.text$mn:000049E0 ; public: __thiscall std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000049E0                 public ??0?$_Yarn@D@std@@QAE@XZ
.text$mn:000049E0 ??0?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+3Fp
.text$mn:000049E0                                         ; std::_Locinfo::_Locinfo(char const *)+4Ep ...
.text$mn:000049E0
.text$mn:000049E0 var_4           = dword ptr -4
.text$mn:000049E0
.text$mn:000049E0                 push    ebp
.text$mn:000049E1                 mov     ebp, esp
.text$mn:000049E3                 push    ecx
.text$mn:000049E4                 mov     [ebp+var_4], ecx
.text$mn:000049E7                 mov     eax, [ebp+var_4]
.text$mn:000049EA                 mov     dword ptr [eax], 0
.text$mn:000049F0                 mov     ecx, [ebp+var_4]
.text$mn:000049F3                 mov     byte ptr [ecx+4], 0
.text$mn:000049F7                 mov     eax, [ebp+var_4]
.text$mn:000049FA                 mov     esp, ebp
.text$mn:000049FC                 pop     ebp
.text$mn:000049FD                 retn
.text$mn:000049FD ??0?$_Yarn@D@std@@QAE@XZ endp
.text$mn:000049FD
.text$mn:000049FD ; ---------------------------------------------------------------------------
.text$mn:000049FE                 align 10h
.text$mn:000049FE _text$mn        ends
.text$mn:000049FE
.text$mn:00004A00 ; ===========================================================================
.text$mn:00004A00
.text$mn:00004A00 ; Segment type: Pure code
.text$mn:00004A00 ; Segment permissions: Read/Execute
.text$mn:00004A00 _text$mn        segment para public 'CODE' use32
.text$mn:00004A00                 assume cs:_text$mn
.text$mn:00004A00                 ;org 4A00h
.text$mn:00004A00 ; COMDAT (pick any)
.text$mn:00004A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A00
.text$mn:00004A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A00
.text$mn:00004A00 ; Attributes: bp-based frame
.text$mn:00004A00
.text$mn:00004A00 ; public: __thiscall std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00004A00                 public ??0?$_Yarn@_W@std@@QAE@XZ
.text$mn:00004A00 ??0?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+5Dp
.text$mn:00004A00                                         ; std::_Locinfo::_Locinfo(char const *)+6Cp
.text$mn:00004A00
.text$mn:00004A00 var_4           = dword ptr -4
.text$mn:00004A00
.text$mn:00004A00                 push    ebp
.text$mn:00004A01                 mov     ebp, esp
.text$mn:00004A03                 push    ecx
.text$mn:00004A04                 mov     [ebp+var_4], ecx
.text$mn:00004A07                 mov     eax, [ebp+var_4]
.text$mn:00004A0A                 mov     dword ptr [eax], 0
.text$mn:00004A10                 xor     ecx, ecx
.text$mn:00004A12                 mov     edx, [ebp+var_4]
.text$mn:00004A15                 mov     [edx+4], cx
.text$mn:00004A19                 mov     eax, [ebp+var_4]
.text$mn:00004A1C                 mov     esp, ebp
.text$mn:00004A1E                 pop     ebp
.text$mn:00004A1F                 retn
.text$mn:00004A1F ??0?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:00004A1F
.text$mn:00004A1F _text$mn        ends
.text$mn:00004A1F
.text$mn:00004A20 ; ===========================================================================
.text$mn:00004A20
.text$mn:00004A20 ; Segment type: Pure code
.text$mn:00004A20 ; Segment permissions: Read/Execute
.text$mn:00004A20 _text$mn        segment para public 'CODE' use32
.text$mn:00004A20                 assume cs:_text$mn
.text$mn:00004A20                 ;org 4A20h
.text$mn:00004A20 ; COMDAT (pick any)
.text$mn:00004A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A20
.text$mn:00004A20 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A20
.text$mn:00004A20 ; Attributes: bp-based frame
.text$mn:00004A20
.text$mn:00004A20 ; public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)
.text$mn:00004A20                 public ??0?$allocator@D@std@@QAE@ABV01@@Z
.text$mn:00004A20 ??0?$allocator@D@std@@QAE@ABV01@@Z proc near
.text$mn:00004A20                                         ; CODE XREF: std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+Bp
.text$mn:00004A20                                         ; std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+18p ...
.text$mn:00004A20
.text$mn:00004A20 var_4           = dword ptr -4
.text$mn:00004A20
.text$mn:00004A20                 push    ebp
.text$mn:00004A21                 mov     ebp, esp
.text$mn:00004A23                 push    ecx
.text$mn:00004A24                 mov     [ebp+var_4], ecx
.text$mn:00004A27                 mov     eax, [ebp+var_4]
.text$mn:00004A2A                 mov     esp, ebp
.text$mn:00004A2C                 pop     ebp
.text$mn:00004A2D                 retn    4
.text$mn:00004A2D ??0?$allocator@D@std@@QAE@ABV01@@Z endp
.text$mn:00004A2D
.text$mn:00004A2D _text$mn        ends
.text$mn:00004A2D
.text$mn:00004A30 ; ===========================================================================
.text$mn:00004A30
.text$mn:00004A30 ; Segment type: Pure code
.text$mn:00004A30 ; Segment permissions: Read/Execute
.text$mn:00004A30 _text$mn        segment para public 'CODE' use32
.text$mn:00004A30                 assume cs:_text$mn
.text$mn:00004A30                 ;org 4A30h
.text$mn:00004A30 ; COMDAT (pick any)
.text$mn:00004A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A30
.text$mn:00004A30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A30
.text$mn:00004A30 ; Attributes: bp-based frame
.text$mn:00004A30
.text$mn:00004A30 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00004A30                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00004A30 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00004A30                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp ...
.text$mn:00004A30
.text$mn:00004A30 var_4           = dword ptr -4
.text$mn:00004A30
.text$mn:00004A30                 push    ebp
.text$mn:00004A31                 mov     ebp, esp
.text$mn:00004A33                 push    ecx
.text$mn:00004A34                 mov     [ebp+var_4], ecx
.text$mn:00004A37                 mov     eax, [ebp+var_4]
.text$mn:00004A3A                 mov     esp, ebp
.text$mn:00004A3C                 pop     ebp
.text$mn:00004A3D                 retn
.text$mn:00004A3D ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00004A3D
.text$mn:00004A3D ; ---------------------------------------------------------------------------
.text$mn:00004A3E                 align 10h
.text$mn:00004A3E _text$mn        ends
.text$mn:00004A3E
.text$mn:00004A40 ; ===========================================================================
.text$mn:00004A40
.text$mn:00004A40 ; Segment type: Pure code
.text$mn:00004A40 ; Segment permissions: Read/Execute
.text$mn:00004A40 _text$mn        segment para public 'CODE' use32
.text$mn:00004A40                 assume cs:_text$mn
.text$mn:00004A40                 ;org 4A40h
.text$mn:00004A40 ; COMDAT (pick any)
.text$mn:00004A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A40
.text$mn:00004A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A40
.text$mn:00004A40 ; Attributes: bp-based frame
.text$mn:00004A40
.text$mn:00004A40 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00004A40                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00004A40 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00004A40                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:00004A40                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+Cp
.text$mn:00004A40
.text$mn:00004A40 var_4           = dword ptr -4
.text$mn:00004A40
.text$mn:00004A40                 push    ebp
.text$mn:00004A41                 mov     ebp, esp
.text$mn:00004A43                 push    ecx
.text$mn:00004A44                 mov     [ebp+var_4], ecx
.text$mn:00004A47                 mov     eax, [ebp+var_4]
.text$mn:00004A4A                 mov     esp, ebp
.text$mn:00004A4C                 pop     ebp
.text$mn:00004A4D                 retn
.text$mn:00004A4D ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00004A4D
.text$mn:00004A4D ; ---------------------------------------------------------------------------
.text$mn:00004A4E                 align 10h
.text$mn:00004A4E _text$mn        ends
.text$mn:00004A4E
.text$mn:00004A50 ; ===========================================================================
.text$mn:00004A50
.text$mn:00004A50 ; Segment type: Pure code
.text$mn:00004A50 ; Segment permissions: Read/Execute
.text$mn:00004A50 _text$mn        segment para public 'CODE' use32
.text$mn:00004A50                 assume cs:_text$mn
.text$mn:00004A50                 ;org 4A50h
.text$mn:00004A50 ; COMDAT (pick any)
.text$mn:00004A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A50
.text$mn:00004A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A50
.text$mn:00004A50 ; Attributes: bp-based frame
.text$mn:00004A50
.text$mn:00004A50 ; protected: __thiscall std::basic_ios<char, struct std::char_traits<char>>::basic_ios<char, struct std::char_traits<char>>(void)
.text$mn:00004A50                 public ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
.text$mn:00004A50 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ proc near
.text$mn:00004A50                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+44p
.text$mn:00004A50                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+44p
.text$mn:00004A50
.text$mn:00004A50 var_10          = dword ptr -10h
.text$mn:00004A50 var_C           = dword ptr -0Ch
.text$mn:00004A50 var_4           = dword ptr -4
.text$mn:00004A50
.text$mn:00004A50                 push    ebp
.text$mn:00004A51                 mov     ebp, esp
.text$mn:00004A53                 push    0FFFFFFFFh
.text$mn:00004A55                 push    offset __ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
.text$mn:00004A5A                 mov     eax, large fs:0
.text$mn:00004A60                 push    eax
.text$mn:00004A61                 push    ecx
.text$mn:00004A62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A67                 xor     eax, ebp
.text$mn:00004A69                 push    eax
.text$mn:00004A6A                 lea     eax, [ebp+var_C]
.text$mn:00004A6D                 mov     large fs:0, eax
.text$mn:00004A73                 mov     [ebp+var_10], ecx
.text$mn:00004A76                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004A79                 call    ??0ios_base@std@@IAE@XZ ; std::ios_base::ios_base(void)
.text$mn:00004A7E                 mov     [ebp+var_4], 0
.text$mn:00004A85                 mov     eax, [ebp+var_10]
.text$mn:00004A88                 mov     dword ptr [eax], offset ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ios<char,std::char_traits<char>>::`vftable'
.text$mn:00004A8E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A95                 mov     eax, [ebp+var_10]
.text$mn:00004A98                 mov     ecx, [ebp+var_C]
.text$mn:00004A9B                 mov     large fs:0, ecx
.text$mn:00004AA2                 pop     ecx
.text$mn:00004AA3                 mov     esp, ebp
.text$mn:00004AA5                 pop     ebp
.text$mn:00004AA6                 retn
.text$mn:00004AA6 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ endp
.text$mn:00004AA6
.text$mn:00004AA6 ; ---------------------------------------------------------------------------
.text$mn:00004AA7                 align 4
.text$mn:00004AA7 _text$mn        ends
.text$mn:00004AA7
.text$x:00004AA8 ; ===========================================================================
.text$x:00004AA8
.text$x:00004AA8 ; Segment type: Pure code
.text$x:00004AA8 ; Segment permissions: Read/Execute
.text$x:00004AA8 _text$x         segment para public 'CODE' use32
.text$x:00004AA8                 assume cs:_text$x
.text$x:00004AA8                 ;org 4AA8h
.text$x:00004AA8 ; COMDAT (pick associative to section at 4A50)
.text$x:00004AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004AA8
.text$x:00004AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004AA8
.text$x:00004AA8
.text$x:00004AA8 __unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0 proc near
.text$x:00004AA8                                         ; DATA XREF: .xdata$x:0000BCC4o
.text$x:00004AA8                 mov     ecx, [ebp-10h]  ; this
.text$x:00004AAB                 jmp     ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$x:00004AAB __unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0 endp
.text$x:00004AAB
.text$x:00004AB0
.text$x:00004AB0 ; =============== S U B R O U T I N E =======================================
.text$x:00004AB0
.text$x:00004AB0
.text$x:00004AB0 __ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ proc near
.text$x:00004AB0                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)+5o
.text$x:00004AB0
.text$x:00004AB0 arg_4           = dword ptr  8
.text$x:00004AB0
.text$x:00004AB0                 mov     edx, [esp+arg_4]
.text$x:00004AB4                 lea     eax, [edx+0Ch]
.text$x:00004AB7                 mov     ecx, [edx-8]
.text$x:00004ABA                 xor     ecx, eax
.text$x:00004ABC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AC1                 mov     eax, offset __ehfuncinfo$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
.text$x:00004AC6                 jmp     ___CxxFrameHandler3
.text$x:00004AC6 __ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ endp
.text$x:00004AC6
.text$x:00004AC6 ; ---------------------------------------------------------------------------
.text$x:00004ACB                 align 4
.text$x:00004ACB _text$x         ends
.text$x:00004ACB
.text$mn:00004ACC ; ===========================================================================
.text$mn:00004ACC
.text$mn:00004ACC ; Segment type: Pure code
.text$mn:00004ACC ; Segment permissions: Read/Execute
.text$mn:00004ACC _text$mn        segment para public 'CODE' use32
.text$mn:00004ACC                 assume cs:_text$mn
.text$mn:00004ACC                 ;org 4ACCh
.text$mn:00004ACC ; COMDAT (pick any)
.text$mn:00004ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004ACC
.text$mn:00004ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00004ACC
.text$mn:00004ACC ; Attributes: bp-based frame
.text$mn:00004ACC
.text$mn:00004ACC ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::basic_ostream<char, struct std::char_traits<char>>(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
.text$mn:00004ACC                 public ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
.text$mn:00004ACC ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z proc near
.text$mn:00004ACC                                         ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+67p
.text$mn:00004ACC
.text$mn:00004ACC var_14          = dword ptr -14h
.text$mn:00004ACC var_10          = dword ptr -10h
.text$mn:00004ACC var_C           = dword ptr -0Ch
.text$mn:00004ACC var_4           = dword ptr -4
.text$mn:00004ACC arg_0           = dword ptr  8
.text$mn:00004ACC arg_4           = byte ptr  0Ch
.text$mn:00004ACC arg_8           = dword ptr  10h
.text$mn:00004ACC
.text$mn:00004ACC                 push    ebp
.text$mn:00004ACD                 mov     ebp, esp
.text$mn:00004ACF                 push    0FFFFFFFFh
.text$mn:00004AD1                 push    offset __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
.text$mn:00004AD6                 mov     eax, large fs:0
.text$mn:00004ADC                 push    eax
.text$mn:00004ADD                 sub     esp, 8
.text$mn:00004AE0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004AE5                 xor     eax, ebp
.text$mn:00004AE7                 push    eax
.text$mn:00004AE8                 lea     eax, [ebp+var_C]
.text$mn:00004AEB                 mov     large fs:0, eax
.text$mn:00004AF1                 mov     [ebp+var_10], ecx
.text$mn:00004AF4                 mov     [ebp+var_14], 0
.text$mn:00004AFB                 cmp     [ebp+arg_8], 0
.text$mn:00004AFF                 jz      short loc_4B25
.text$mn:00004B01                 mov     eax, [ebp+var_10]
.text$mn:00004B04                 mov     dword ptr [eax], offset ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; const std::basic_ostream<char,std::char_traits<char>>::`vbtable'
.text$mn:00004B0A                 mov     ecx, [ebp+var_10]
.text$mn:00004B0D                 add     ecx, 8
.text$mn:00004B10                 call    ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)
.text$mn:00004B15                 mov     [ebp+var_4], 0
.text$mn:00004B1C                 mov     ecx, [ebp+var_14]
.text$mn:00004B1F                 or      ecx, 1
.text$mn:00004B22                 mov     [ebp+var_14], ecx
.text$mn:00004B25
.text$mn:00004B25 loc_4B25:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+33j
.text$mn:00004B25                 mov     edx, [ebp+var_10]
.text$mn:00004B28                 mov     eax, [edx]
.text$mn:00004B2A                 mov     ecx, [eax+4]
.text$mn:00004B2D                 mov     edx, [ebp+var_10]
.text$mn:00004B30                 mov     dword ptr [edx+ecx], offset ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ostream<char,std::char_traits<char>>::`vftable'
.text$mn:00004B37                 mov     eax, [ebp+var_10]
.text$mn:00004B3A                 mov     ecx, [eax]
.text$mn:00004B3C                 mov     edx, [ecx+4]
.text$mn:00004B3F                 sub     edx, 8
.text$mn:00004B42                 mov     eax, [ebp+var_10]
.text$mn:00004B45                 mov     ecx, [eax]
.text$mn:00004B47                 mov     eax, [ecx+4]
.text$mn:00004B4A                 mov     ecx, [ebp+var_10]
.text$mn:00004B4D                 mov     [ecx+eax-4], edx
.text$mn:00004B51                 movzx   edx, [ebp+arg_4]
.text$mn:00004B55                 push    edx
.text$mn:00004B56                 mov     eax, [ebp+arg_0]
.text$mn:00004B59                 push    eax
.text$mn:00004B5A                 mov     ecx, [ebp+var_10]
.text$mn:00004B5D                 mov     edx, [ecx]
.text$mn:00004B5F                 mov     ecx, [ebp+var_10]
.text$mn:00004B62                 add     ecx, [edx+4]
.text$mn:00004B65                 call    ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)
.text$mn:00004B6A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004B71                 mov     eax, [ebp+var_10]
.text$mn:00004B74                 mov     ecx, [ebp+var_C]
.text$mn:00004B77                 mov     large fs:0, ecx
.text$mn:00004B7E                 pop     ecx
.text$mn:00004B7F                 mov     esp, ebp
.text$mn:00004B81                 pop     ebp
.text$mn:00004B82                 retn    0Ch
.text$mn:00004B82 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z endp
.text$mn:00004B82
.text$mn:00004B82 ; ---------------------------------------------------------------------------
.text$mn:00004B85                 align 4
.text$mn:00004B85 _text$mn        ends
.text$mn:00004B85
.text$x:00004B88 ; ===========================================================================
.text$x:00004B88
.text$x:00004B88 ; Segment type: Pure code
.text$x:00004B88 ; Segment permissions: Read/Execute
.text$x:00004B88 _text$x         segment para public 'CODE' use32
.text$x:00004B88                 assume cs:_text$x
.text$x:00004B88                 ;org 4B88h
.text$x:00004B88 ; COMDAT (pick associative to section at 4ACC)
.text$x:00004B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B88
.text$x:00004B88 ; =============== S U B R O U T I N E =======================================
.text$x:00004B88
.text$x:00004B88
.text$x:00004B88 __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0 proc near
.text$x:00004B88                                         ; DATA XREF: .xdata$x:0000BCF0o
.text$x:00004B88                 mov     eax, [ebp-14h]
.text$x:00004B8B                 and     eax, 1
.text$x:00004B8E                 jz      $LN5
.text$x:00004B94                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00004B98                 mov     ecx, [ebp-10h]
.text$x:00004B9B                 add     ecx, 8
.text$x:00004B9E                 jmp     ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
.text$x:00004BA3 ; ---------------------------------------------------------------------------
.text$x:00004BA3
.text$x:00004BA3 $LN5:                                   ; CODE XREF: __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0+6j
.text$x:00004BA3                 retn
.text$x:00004BA3 __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0 endp
.text$x:00004BA3
.text$x:00004BA4
.text$x:00004BA4 ; =============== S U B R O U T I N E =======================================
.text$x:00004BA4
.text$x:00004BA4
.text$x:00004BA4 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z proc near
.text$x:00004BA4                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+5o
.text$x:00004BA4
.text$x:00004BA4 arg_4           = dword ptr  8
.text$x:00004BA4
.text$x:00004BA4                 mov     edx, [esp+arg_4]
.text$x:00004BA8                 lea     eax, [edx+0Ch]
.text$x:00004BAB                 mov     ecx, [edx-0Ch]
.text$x:00004BAE                 xor     ecx, eax
.text$x:00004BB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BB5                 mov     eax, offset __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
.text$x:00004BBA                 jmp     ___CxxFrameHandler3
.text$x:00004BBA __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z endp
.text$x:00004BBA
.text$x:00004BBA ; ---------------------------------------------------------------------------
.text$x:00004BBF                 align 10h
.text$x:00004BBF _text$x         ends
.text$x:00004BBF
.text$mn:00004BC0 ; ===========================================================================
.text$mn:00004BC0
.text$mn:00004BC0 ; Segment type: Pure code
.text$mn:00004BC0 ; Segment permissions: Read/Execute
.text$mn:00004BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00004BC0                 assume cs:_text$mn
.text$mn:00004BC0                 ;org 4BC0h
.text$mn:00004BC0 ; COMDAT (pick any)
.text$mn:00004BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BC0
.text$mn:00004BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BC0
.text$mn:00004BC0 ; Attributes: bp-based frame
.text$mn:00004BC0
.text$mn:00004BC0 ; public: __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>(int)
.text$mn:00004BC0                 public ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$mn:00004BC0 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
.text$mn:00004BC0                                         ; CODE XREF: operator<<(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,TiXmlNodeA const &)+35p
.text$mn:00004BC0
.text$mn:00004BC0 var_14          = dword ptr -14h
.text$mn:00004BC0 var_10          = dword ptr -10h
.text$mn:00004BC0 var_C           = dword ptr -0Ch
.text$mn:00004BC0 var_4           = dword ptr -4
.text$mn:00004BC0 arg_0           = dword ptr  8
.text$mn:00004BC0 arg_4           = dword ptr  0Ch
.text$mn:00004BC0
.text$mn:00004BC0                 push    ebp
.text$mn:00004BC1                 mov     ebp, esp
.text$mn:00004BC3                 push    0FFFFFFFFh
.text$mn:00004BC5                 push    offset __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$mn:00004BCA                 mov     eax, large fs:0
.text$mn:00004BD0                 push    eax
.text$mn:00004BD1                 sub     esp, 8
.text$mn:00004BD4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004BD9                 xor     eax, ebp
.text$mn:00004BDB                 push    eax
.text$mn:00004BDC                 lea     eax, [ebp+var_C]
.text$mn:00004BDF                 mov     large fs:0, eax
.text$mn:00004BE5                 mov     [ebp+var_10], ecx
.text$mn:00004BE8                 mov     [ebp+var_14], 0
.text$mn:00004BEF                 cmp     [ebp+arg_4], 0
.text$mn:00004BF3                 jz      short loc_4C19
.text$mn:00004BF5                 mov     eax, [ebp+var_10]
.text$mn:00004BF8                 mov     dword ptr [eax], offset ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; const std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vbtable'
.text$mn:00004BFE                 mov     ecx, [ebp+var_10]
.text$mn:00004C01                 add     ecx, 50h ; 'P'
.text$mn:00004C04                 call    ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)
.text$mn:00004C09                 mov     [ebp+var_4], 0
.text$mn:00004C10                 mov     ecx, [ebp+var_14]
.text$mn:00004C13                 or      ecx, 1
.text$mn:00004C16                 mov     [ebp+var_14], ecx
.text$mn:00004C19
.text$mn:00004C19 loc_4C19:                               ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+33j
.text$mn:00004C19                 push    0
.text$mn:00004C1B                 push    0
.text$mn:00004C1D                 mov     edx, [ebp+var_10]
.text$mn:00004C20                 add     edx, 4
.text$mn:00004C23                 push    edx
.text$mn:00004C24                 mov     ecx, [ebp+var_10]
.text$mn:00004C27                 call    ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)
.text$mn:00004C2C                 mov     [ebp+var_4], 1
.text$mn:00004C33                 mov     eax, [ebp+var_10]
.text$mn:00004C36                 mov     ecx, [eax]
.text$mn:00004C38                 mov     edx, [ecx+4]
.text$mn:00004C3B                 mov     eax, [ebp+var_10]
.text$mn:00004C3E                 mov     dword ptr [eax+edx], offset ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'
.text$mn:00004C45                 mov     ecx, [ebp+var_10]
.text$mn:00004C48                 mov     edx, [ecx]
.text$mn:00004C4A                 mov     eax, [edx+4]
.text$mn:00004C4D                 sub     eax, 50h ; 'P'
.text$mn:00004C50                 mov     ecx, [ebp+var_10]
.text$mn:00004C53                 mov     edx, [ecx]
.text$mn:00004C55                 mov     ecx, [edx+4]
.text$mn:00004C58                 mov     edx, [ebp+var_10]
.text$mn:00004C5B                 mov     [edx+ecx-4], eax
.text$mn:00004C5F                 mov     eax, [ebp+arg_0]
.text$mn:00004C62                 or      eax, 2
.text$mn:00004C65                 push    eax
.text$mn:00004C66                 mov     ecx, [ebp+var_10]
.text$mn:00004C69                 add     ecx, 4
.text$mn:00004C6C                 call    ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)
.text$mn:00004C71                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004C75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C7C                 mov     eax, [ebp+var_10]
.text$mn:00004C7F                 mov     ecx, [ebp+var_C]
.text$mn:00004C82                 mov     large fs:0, ecx
.text$mn:00004C89                 pop     ecx
.text$mn:00004C8A                 mov     esp, ebp
.text$mn:00004C8C                 pop     ebp
.text$mn:00004C8D                 retn    8
.text$mn:00004C8D ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp
.text$mn:00004C8D
.text$mn:00004C8D _text$mn        ends
.text$mn:00004C8D
.text$x:00004C90 ; ===========================================================================
.text$x:00004C90
.text$x:00004C90 ; Segment type: Pure code
.text$x:00004C90 ; Segment permissions: Read/Execute
.text$x:00004C90 _text$x         segment para public 'CODE' use32
.text$x:00004C90                 assume cs:_text$x
.text$x:00004C90                 ;org 4C90h
.text$x:00004C90 ; COMDAT (pick associative to section at 4BC0)
.text$x:00004C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C90
.text$x:00004C90 ; =============== S U B R O U T I N E =======================================
.text$x:00004C90
.text$x:00004C90
.text$x:00004C90 __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
.text$x:00004C90                                         ; DATA XREF: .xdata$x:0000C688o
.text$x:00004C90                 mov     eax, [ebp-14h]
.text$x:00004C93                 and     eax, 1
.text$x:00004C96                 jz      $LN5_0
.text$x:00004C9C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00004CA0                 mov     ecx, [ebp-10h]
.text$x:00004CA3                 add     ecx, 50h ; 'P'
.text$x:00004CA6                 jmp     ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
.text$x:00004CAB ; ---------------------------------------------------------------------------
.text$x:00004CAB
.text$x:00004CAB $LN5_0:                                 ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+6j
.text$x:00004CAB                 retn
.text$x:00004CAB __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 endp
.text$x:00004CAB
.text$x:00004CAC
.text$x:00004CAC ; =============== S U B R O U T I N E =======================================
.text$x:00004CAC
.text$x:00004CAC
.text$x:00004CAC __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1 proc near
.text$x:00004CAC                                         ; DATA XREF: .xdata$x:0000C690o
.text$x:00004CAC                 mov     ecx, [ebp-10h]
.text$x:00004CAF                 add     ecx, 8
.text$x:00004CB2                 jmp     ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
.text$x:00004CB2 __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1 endp
.text$x:00004CB2
.text$x:00004CB7
.text$x:00004CB7 ; =============== S U B R O U T I N E =======================================
.text$x:00004CB7
.text$x:00004CB7
.text$x:00004CB7 __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2 proc near
.text$x:00004CB7                                         ; DATA XREF: .xdata$x:0000C698o
.text$x:00004CB7                 mov     ecx, [ebp-10h]
.text$x:00004CBA                 add     ecx, 4
.text$x:00004CBD                 jmp     ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00004CBD __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2 endp
.text$x:00004CBD
.text$x:00004CC2
.text$x:00004CC2 ; =============== S U B R O U T I N E =======================================
.text$x:00004CC2
.text$x:00004CC2
.text$x:00004CC2 __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
.text$x:00004CC2                                         ; DATA XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+5o
.text$x:00004CC2
.text$x:00004CC2 arg_4           = dword ptr  8
.text$x:00004CC2
.text$x:00004CC2                 mov     edx, [esp+arg_4]
.text$x:00004CC6                 lea     eax, [edx+0Ch]
.text$x:00004CC9                 mov     ecx, [edx-0Ch]
.text$x:00004CCC                 xor     ecx, eax
.text$x:00004CCE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CD3                 mov     eax, offset __ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$x:00004CD8                 jmp     ___CxxFrameHandler3
.text$x:00004CD8 __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp
.text$x:00004CD8
.text$x:00004CD8 ; ---------------------------------------------------------------------------
.text$x:00004CDD                 align 10h
.text$x:00004CDD _text$x         ends
.text$x:00004CDD
.text$mn:00004CE0 ; ===========================================================================
.text$mn:00004CE0
.text$mn:00004CE0 ; Segment type: Pure code
.text$mn:00004CE0 ; Segment permissions: Read/Execute
.text$mn:00004CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00004CE0                 assume cs:_text$mn
.text$mn:00004CE0                 ;org 4CE0h
.text$mn:00004CE0 ; COMDAT (pick any)
.text$mn:00004CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CE0
.text$mn:00004CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CE0
.text$mn:00004CE0 ; Attributes: bp-based frame
.text$mn:00004CE0
.text$mn:00004CE0 ; protected: __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::basic_streambuf<char, struct std::char_traits<char>>(void)
.text$mn:00004CE0                 public ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
.text$mn:00004CE0 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ proc near
.text$mn:00004CE0                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+29p
.text$mn:00004CE0
.text$mn:00004CE0 var_C           = dword ptr -0Ch
.text$mn:00004CE0 var_8           = dword ptr -8
.text$mn:00004CE0 var_4           = dword ptr -4
.text$mn:00004CE0
.text$mn:00004CE0                 push    ebp
.text$mn:00004CE1                 mov     ebp, esp
.text$mn:00004CE3                 sub     esp, 0Ch
.text$mn:00004CE6                 mov     [ebp+var_4], ecx
.text$mn:00004CE9                 mov     eax, [ebp+var_4]
.text$mn:00004CEC                 mov     dword ptr [eax], offset ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_streambuf<char,std::char_traits<char>>::`vftable'
.text$mn:00004CF2                 push    19h             ; int
.text$mn:00004CF4                 push    offset ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004CF9                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00004CFE                 push    eax             ; struct std::_DebugHeapTag_t *
.text$mn:00004CFF                 push    4               ; unsigned int
.text$mn:00004D01                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00004D06                 add     esp, 10h
.text$mn:00004D09                 mov     [ebp+var_8], eax
.text$mn:00004D0C                 cmp     [ebp+var_8], 0
.text$mn:00004D10                 jz      short loc_4D1F
.text$mn:00004D12                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004D15                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00004D1A                 mov     [ebp+var_C], eax
.text$mn:00004D1D                 jmp     short loc_4D26
.text$mn:00004D1F ; ---------------------------------------------------------------------------
.text$mn:00004D1F
.text$mn:00004D1F loc_4D1F:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+30j
.text$mn:00004D1F                 mov     [ebp+var_C], 0
.text$mn:00004D26
.text$mn:00004D26 loc_4D26:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+3Dj
.text$mn:00004D26                 mov     ecx, [ebp+var_4]
.text$mn:00004D29                 mov     edx, [ebp+var_C]
.text$mn:00004D2C                 mov     [ecx+34h], edx
.text$mn:00004D2F                 mov     ecx, [ebp+var_4]
.text$mn:00004D32                 call    ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Init(void)
.text$mn:00004D37                 mov     eax, [ebp+var_4]
.text$mn:00004D3A                 mov     esp, ebp
.text$mn:00004D3C                 pop     ebp
.text$mn:00004D3D                 retn
.text$mn:00004D3D ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ endp
.text$mn:00004D3D
.text$mn:00004D3D ; ---------------------------------------------------------------------------
.text$mn:00004D3E                 align 10h
.text$mn:00004D3E _text$mn        ends
.text$mn:00004D3E
.text$mn:00004D40 ; ===========================================================================
.text$mn:00004D40
.text$mn:00004D40 ; Segment type: Pure code
.text$mn:00004D40 ; Segment permissions: Read/Execute
.text$mn:00004D40 _text$mn        segment para public 'CODE' use32
.text$mn:00004D40                 assume cs:_text$mn
.text$mn:00004D40                 ;org 4D40h
.text$mn:00004D40 ; COMDAT (pick any)
.text$mn:00004D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D40
.text$mn:00004D40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D40
.text$mn:00004D40 ; Attributes: bp-based frame
.text$mn:00004D40
.text$mn:00004D40 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00004D40                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:00004D40 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00004D40                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+8Ap
.text$mn:00004D40                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+A1p ...
.text$mn:00004D40
.text$mn:00004D40 var_14          = dword ptr -14h
.text$mn:00004D40 var_D           = byte ptr -0Dh
.text$mn:00004D40 var_C           = dword ptr -0Ch
.text$mn:00004D40 var_4           = dword ptr -4
.text$mn:00004D40 arg_0           = dword ptr  8
.text$mn:00004D40
.text$mn:00004D40                 push    ebp
.text$mn:00004D41                 mov     ebp, esp
.text$mn:00004D43                 push    0FFFFFFFFh
.text$mn:00004D45                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:00004D4A                 mov     eax, large fs:0
.text$mn:00004D50                 push    eax
.text$mn:00004D51                 sub     esp, 8
.text$mn:00004D54                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D59                 xor     eax, ebp
.text$mn:00004D5B                 push    eax
.text$mn:00004D5C                 lea     eax, [ebp+var_C]
.text$mn:00004D5F                 mov     large fs:0, eax
.text$mn:00004D65                 mov     [ebp+var_14], ecx
.text$mn:00004D68                 lea     eax, [ebp+var_D]
.text$mn:00004D6B                 push    eax
.text$mn:00004D6C                 mov     ecx, [ebp+arg_0]
.text$mn:00004D6F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004D74                 push    eax
.text$mn:00004D75                 mov     ecx, [ebp+var_14]
.text$mn:00004D78                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004D7D                 mov     [ebp+var_4], 0
.text$mn:00004D84                 push    0               ; Size
.text$mn:00004D86                 push    0               ; char
.text$mn:00004D88                 mov     ecx, [ebp+var_14]
.text$mn:00004D8B                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004D90                 mov     ecx, [ebp+arg_0]
.text$mn:00004D93                 push    ecx
.text$mn:00004D94                 call    ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)
.text$mn:00004D99                 add     esp, 4
.text$mn:00004D9C                 push    eax
.text$mn:00004D9D                 mov     ecx, [ebp+var_14]
.text$mn:00004DA0                 call    ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00004DA5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DAC                 mov     eax, [ebp+var_14]
.text$mn:00004DAF                 mov     ecx, [ebp+var_C]
.text$mn:00004DB2                 mov     large fs:0, ecx
.text$mn:00004DB9                 pop     ecx
.text$mn:00004DBA                 mov     esp, ebp
.text$mn:00004DBC                 pop     ebp
.text$mn:00004DBD                 retn    4
.text$mn:00004DBD ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00004DBD
.text$mn:00004DBD _text$mn        ends
.text$mn:00004DBD
.text$x:00004DC0 ; ===========================================================================
.text$x:00004DC0
.text$x:00004DC0 ; Segment type: Pure code
.text$x:00004DC0 ; Segment permissions: Read/Execute
.text$x:00004DC0 _text$x         segment para public 'CODE' use32
.text$x:00004DC0                 assume cs:_text$x
.text$x:00004DC0                 ;org 4DC0h
.text$x:00004DC0 ; COMDAT (pick associative to section at 4D40)
.text$x:00004DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004DC0
.text$x:00004DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00004DC0
.text$x:00004DC0
.text$x:00004DC0 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00004DC0                                         ; DATA XREF: .xdata$x:0000B4B0o
.text$x:00004DC0                 mov     ecx, [ebp-14h]
.text$x:00004DC3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004DC3 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00004DC3
.text$x:00004DC8
.text$x:00004DC8 ; =============== S U B R O U T I N E =======================================
.text$x:00004DC8
.text$x:00004DC8
.text$x:00004DC8 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:00004DC8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+5o
.text$x:00004DC8
.text$x:00004DC8 arg_4           = dword ptr  8
.text$x:00004DC8
.text$x:00004DC8                 mov     edx, [esp+arg_4]
.text$x:00004DCC                 lea     eax, [edx+0Ch]
.text$x:00004DCF                 mov     ecx, [edx-0Ch]
.text$x:00004DD2                 xor     ecx, eax
.text$x:00004DD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DD9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$x:00004DDE                 jmp     ___CxxFrameHandler3
.text$x:00004DDE __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$x:00004DDE
.text$x:00004DDE ; ---------------------------------------------------------------------------
.text$x:00004DE3                 align 4
.text$x:00004DE3 _text$x         ends
.text$x:00004DE3
.text$mn:00004DE4 ; ===========================================================================
.text$mn:00004DE4
.text$mn:00004DE4 ; Segment type: Pure code
.text$mn:00004DE4 ; Segment permissions: Read/Execute
.text$mn:00004DE4 _text$mn        segment para public 'CODE' use32
.text$mn:00004DE4                 assume cs:_text$mn
.text$mn:00004DE4                 ;org 4DE4h
.text$mn:00004DE4 ; COMDAT (pick any)
.text$mn:00004DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DE4
.text$mn:00004DE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DE4
.text$mn:00004DE4 ; Attributes: bp-based frame
.text$mn:00004DE4
.text$mn:00004DE4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00004DE4                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00004DE4 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00004DE4                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+37p
.text$mn:00004DE4                                         ; TiXmlNodeA::SValue(void)+39p
.text$mn:00004DE4
.text$mn:00004DE4 var_14          = dword ptr -14h
.text$mn:00004DE4 var_E           = byte ptr -0Eh
.text$mn:00004DE4 var_D           = byte ptr -0Dh
.text$mn:00004DE4 var_C           = dword ptr -0Ch
.text$mn:00004DE4 var_4           = dword ptr -4
.text$mn:00004DE4 arg_0           = dword ptr  8
.text$mn:00004DE4
.text$mn:00004DE4                 push    ebp
.text$mn:00004DE5                 mov     ebp, esp
.text$mn:00004DE7                 push    0FFFFFFFFh
.text$mn:00004DE9                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00004DEE                 mov     eax, large fs:0
.text$mn:00004DF4                 push    eax
.text$mn:00004DF5                 sub     esp, 8
.text$mn:00004DF8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DFD                 xor     eax, ebp
.text$mn:00004DFF                 push    eax
.text$mn:00004E00                 lea     eax, [ebp+var_C]
.text$mn:00004E03                 mov     large fs:0, eax
.text$mn:00004E09                 mov     [ebp+var_14], ecx
.text$mn:00004E0C                 lea     eax, [ebp+var_D]
.text$mn:00004E0F                 push    eax
.text$mn:00004E10                 lea     ecx, [ebp+var_E]
.text$mn:00004E13                 push    ecx
.text$mn:00004E14                 mov     ecx, [ebp+arg_0]
.text$mn:00004E17                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004E1C                 mov     ecx, eax
.text$mn:00004E1E                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)
.text$mn:00004E23                 push    eax
.text$mn:00004E24                 mov     ecx, [ebp+var_14]
.text$mn:00004E27                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004E2C                 mov     [ebp+var_4], 0
.text$mn:00004E33                 push    0               ; Size
.text$mn:00004E35                 push    0               ; char
.text$mn:00004E37                 mov     ecx, [ebp+var_14]
.text$mn:00004E3A                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004E3F                 mov     edx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00004E45                 push    edx
.text$mn:00004E46                 push    0
.text$mn:00004E48                 mov     eax, [ebp+arg_0]
.text$mn:00004E4B                 push    eax
.text$mn:00004E4C                 mov     ecx, [ebp+var_14]
.text$mn:00004E4F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00004E54                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E5B                 mov     eax, [ebp+var_14]
.text$mn:00004E5E                 mov     ecx, [ebp+var_C]
.text$mn:00004E61                 mov     large fs:0, ecx
.text$mn:00004E68                 pop     ecx
.text$mn:00004E69                 mov     esp, ebp
.text$mn:00004E6B                 pop     ebp
.text$mn:00004E6C                 retn    4
.text$mn:00004E6C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$mn:00004E6C
.text$mn:00004E6C ; ---------------------------------------------------------------------------
.text$mn:00004E6F                 align 10h
.text$mn:00004E6F _text$mn        ends
.text$mn:00004E6F
.text$x:00004E70 ; ===========================================================================
.text$x:00004E70
.text$x:00004E70 ; Segment type: Pure code
.text$x:00004E70 ; Segment permissions: Read/Execute
.text$x:00004E70 _text$x         segment para public 'CODE' use32
.text$x:00004E70                 assume cs:_text$x
.text$x:00004E70                 ;org 4E70h
.text$x:00004E70 ; COMDAT (pick associative to section at 4DE4)
.text$x:00004E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E70
.text$x:00004E70 ; =============== S U B R O U T I N E =======================================
.text$x:00004E70
.text$x:00004E70
.text$x:00004E70 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00004E70                                         ; DATA XREF: .xdata$x:0000B400o
.text$x:00004E70                 mov     ecx, [ebp-14h]
.text$x:00004E73                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004E73 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00004E73
.text$x:00004E78
.text$x:00004E78 ; =============== S U B R O U T I N E =======================================
.text$x:00004E78
.text$x:00004E78
.text$x:00004E78 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$x:00004E78                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00004E78
.text$x:00004E78 arg_4           = dword ptr  8
.text$x:00004E78
.text$x:00004E78                 mov     edx, [esp+arg_4]
.text$x:00004E7C                 lea     eax, [edx+0Ch]
.text$x:00004E7F                 mov     ecx, [edx-0Ch]
.text$x:00004E82                 xor     ecx, eax
.text$x:00004E84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E89                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$x:00004E8E                 jmp     ___CxxFrameHandler3
.text$x:00004E8E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$x:00004E8E
.text$x:00004E8E ; ---------------------------------------------------------------------------
.text$x:00004E93                 align 4
.text$x:00004E93 _text$x         ends
.text$x:00004E93
.text$mn:00004E94 ; ===========================================================================
.text$mn:00004E94
.text$mn:00004E94 ; Segment type: Pure code
.text$mn:00004E94 ; Segment permissions: Read/Execute
.text$mn:00004E94 _text$mn        segment para public 'CODE' use32
.text$mn:00004E94                 assume cs:_text$mn
.text$mn:00004E94                 ;org 4E94h
.text$mn:00004E94 ; COMDAT (pick any)
.text$mn:00004E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E94
.text$mn:00004E94 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E94
.text$mn:00004E94 ; Attributes: bp-based frame
.text$mn:00004E94
.text$mn:00004E94 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00004E94                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00004E94 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00004E94                                         ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+4Cp
.text$mn:00004E94                                         ; TiXmlNodeA::LastChild(char const *)+4Cp ...
.text$mn:00004E94
.text$mn:00004E94 var_14          = dword ptr -14h
.text$mn:00004E94 var_D           = byte ptr -0Dh
.text$mn:00004E94 var_C           = dword ptr -0Ch
.text$mn:00004E94 var_4           = dword ptr -4
.text$mn:00004E94 Str             = dword ptr  8
.text$mn:00004E94
.text$mn:00004E94                 push    ebp
.text$mn:00004E95                 mov     ebp, esp
.text$mn:00004E97                 push    0FFFFFFFFh
.text$mn:00004E99                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00004E9E                 mov     eax, large fs:0
.text$mn:00004EA4                 push    eax
.text$mn:00004EA5                 sub     esp, 8
.text$mn:00004EA8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004EAD                 xor     eax, ebp
.text$mn:00004EAF                 push    eax
.text$mn:00004EB0                 lea     eax, [ebp+var_C]
.text$mn:00004EB3                 mov     large fs:0, eax
.text$mn:00004EB9                 mov     [ebp+var_14], ecx
.text$mn:00004EBC                 lea     ecx, [ebp+var_D]
.text$mn:00004EBF                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004EC4                 push    eax
.text$mn:00004EC5                 mov     ecx, [ebp+var_14]
.text$mn:00004EC8                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004ECD                 mov     [ebp+var_4], 0
.text$mn:00004ED4                 push    0               ; Size
.text$mn:00004ED6                 push    0               ; char
.text$mn:00004ED8                 mov     ecx, [ebp+var_14]
.text$mn:00004EDB                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004EE0                 mov     eax, [ebp+Str]
.text$mn:00004EE3                 push    eax             ; Str
.text$mn:00004EE4                 mov     ecx, [ebp+var_14]
.text$mn:00004EE7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00004EEC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004EF3                 mov     eax, [ebp+var_14]
.text$mn:00004EF6                 mov     ecx, [ebp+var_C]
.text$mn:00004EF9                 mov     large fs:0, ecx
.text$mn:00004F00                 pop     ecx
.text$mn:00004F01                 mov     esp, ebp
.text$mn:00004F03                 pop     ebp
.text$mn:00004F04                 retn    4
.text$mn:00004F04 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00004F04
.text$mn:00004F04 ; ---------------------------------------------------------------------------
.text$mn:00004F07                 align 4
.text$mn:00004F07 _text$mn        ends
.text$mn:00004F07
.text$x:00004F08 ; ===========================================================================
.text$x:00004F08
.text$x:00004F08 ; Segment type: Pure code
.text$x:00004F08 ; Segment permissions: Read/Execute
.text$x:00004F08 _text$x         segment para public 'CODE' use32
.text$x:00004F08                 assume cs:_text$x
.text$x:00004F08                 ;org 4F08h
.text$x:00004F08 ; COMDAT (pick associative to section at 4E94)
.text$x:00004F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F08
.text$x:00004F08 ; =============== S U B R O U T I N E =======================================
.text$x:00004F08
.text$x:00004F08
.text$x:00004F08 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00004F08                                         ; DATA XREF: .xdata$x:0000B484o
.text$x:00004F08                 mov     ecx, [ebp-14h]
.text$x:00004F0B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004F0B __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00004F0B
.text$x:00004F10
.text$x:00004F10 ; =============== S U B R O U T I N E =======================================
.text$x:00004F10
.text$x:00004F10
.text$x:00004F10 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00004F10                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00004F10
.text$x:00004F10 arg_4           = dword ptr  8
.text$x:00004F10
.text$x:00004F10                 mov     edx, [esp+arg_4]
.text$x:00004F14                 lea     eax, [edx+0Ch]
.text$x:00004F17                 mov     ecx, [edx-0Ch]
.text$x:00004F1A                 xor     ecx, eax
.text$x:00004F1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F21                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00004F26                 jmp     ___CxxFrameHandler3
.text$x:00004F26 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00004F26
.text$x:00004F26 ; ---------------------------------------------------------------------------
.text$x:00004F2B                 align 4
.text$x:00004F2B _text$x         ends
.text$x:00004F2B
.text$mn:00004F2C ; ===========================================================================
.text$mn:00004F2C
.text$mn:00004F2C ; Segment type: Pure code
.text$mn:00004F2C ; Segment permissions: Read/Execute
.text$mn:00004F2C _text$mn        segment para public 'CODE' use32
.text$mn:00004F2C                 assume cs:_text$mn
.text$mn:00004F2C                 ;org 4F2Ch
.text$mn:00004F2C ; COMDAT (pick any)
.text$mn:00004F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F2C
.text$mn:00004F2C ; =============== S U B R O U T I N E =======================================
.text$mn:00004F2C
.text$mn:00004F2C ; Attributes: bp-based frame
.text$mn:00004F2C
.text$mn:00004F2C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void *Src, size_t Size)
.text$mn:00004F2C                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
.text$mn:00004F2C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc near
.text$mn:00004F2C                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+8Ep
.text$mn:00004F2C                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+100p
.text$mn:00004F2C
.text$mn:00004F2C var_14          = dword ptr -14h
.text$mn:00004F2C var_D           = byte ptr -0Dh
.text$mn:00004F2C var_C           = dword ptr -0Ch
.text$mn:00004F2C var_4           = dword ptr -4
.text$mn:00004F2C Src             = dword ptr  8
.text$mn:00004F2C Size            = dword ptr  0Ch
.text$mn:00004F2C
.text$mn:00004F2C                 push    ebp
.text$mn:00004F2D                 mov     ebp, esp
.text$mn:00004F2F                 push    0FFFFFFFFh
.text$mn:00004F31                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
.text$mn:00004F36                 mov     eax, large fs:0
.text$mn:00004F3C                 push    eax
.text$mn:00004F3D                 sub     esp, 8
.text$mn:00004F40                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F45                 xor     eax, ebp
.text$mn:00004F47                 push    eax
.text$mn:00004F48                 lea     eax, [ebp+var_C]
.text$mn:00004F4B                 mov     large fs:0, eax
.text$mn:00004F51                 mov     [ebp+var_14], ecx
.text$mn:00004F54                 lea     ecx, [ebp+var_D]
.text$mn:00004F57                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004F5C                 push    eax
.text$mn:00004F5D                 mov     ecx, [ebp+var_14]
.text$mn:00004F60                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00004F65                 mov     [ebp+var_4], 0
.text$mn:00004F6C                 push    0               ; Size
.text$mn:00004F6E                 push    0               ; char
.text$mn:00004F70                 mov     ecx, [ebp+var_14]
.text$mn:00004F73                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004F78                 mov     eax, [ebp+Size]
.text$mn:00004F7B                 push    eax             ; Size
.text$mn:00004F7C                 mov     ecx, [ebp+Src]
.text$mn:00004F7F                 push    ecx             ; Src
.text$mn:00004F80                 mov     ecx, [ebp+var_14]
.text$mn:00004F83                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00004F88                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F8F                 mov     eax, [ebp+var_14]
.text$mn:00004F92                 mov     ecx, [ebp+var_C]
.text$mn:00004F95                 mov     large fs:0, ecx
.text$mn:00004F9C                 pop     ecx
.text$mn:00004F9D                 mov     esp, ebp
.text$mn:00004F9F                 pop     ebp
.text$mn:00004FA0                 retn    8
.text$mn:00004FA0 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z endp
.text$mn:00004FA0
.text$mn:00004FA0 ; ---------------------------------------------------------------------------
.text$mn:00004FA3                 align 4
.text$mn:00004FA3 _text$mn        ends
.text$mn:00004FA3
.text$x:00004FA4 ; ===========================================================================
.text$x:00004FA4
.text$x:00004FA4 ; Segment type: Pure code
.text$x:00004FA4 ; Segment permissions: Read/Execute
.text$x:00004FA4 _text$x         segment para public 'CODE' use32
.text$x:00004FA4                 assume cs:_text$x
.text$x:00004FA4                 ;org 4FA4h
.text$x:00004FA4 ; COMDAT (pick associative to section at 4F2C)
.text$x:00004FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FA4
.text$x:00004FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA4
.text$x:00004FA4
.text$x:00004FA4 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 proc near
.text$x:00004FA4                                         ; DATA XREF: .xdata$x:0000B458o
.text$x:00004FA4                 mov     ecx, [ebp-14h]
.text$x:00004FA7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004FA7 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 endp
.text$x:00004FA7
.text$x:00004FAC
.text$x:00004FAC ; =============== S U B R O U T I N E =======================================
.text$x:00004FAC
.text$x:00004FAC
.text$x:00004FAC __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc near
.text$x:00004FAC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)+5o
.text$x:00004FAC
.text$x:00004FAC arg_4           = dword ptr  8
.text$x:00004FAC
.text$x:00004FAC                 mov     edx, [esp+arg_4]
.text$x:00004FB0                 lea     eax, [edx+0Ch]
.text$x:00004FB3                 mov     ecx, [edx-0Ch]
.text$x:00004FB6                 xor     ecx, eax
.text$x:00004FB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FBD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
.text$x:00004FC2                 jmp     ___CxxFrameHandler3
.text$x:00004FC2 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z endp
.text$x:00004FC2
.text$x:00004FC2 ; ---------------------------------------------------------------------------
.text$x:00004FC7                 align 4
.text$x:00004FC7 _text$x         ends
.text$x:00004FC7
.text$mn:00004FC8 ; ===========================================================================
.text$mn:00004FC8
.text$mn:00004FC8 ; Segment type: Pure code
.text$mn:00004FC8 ; Segment permissions: Read/Execute
.text$mn:00004FC8 _text$mn        segment para public 'CODE' use32
.text$mn:00004FC8                 assume cs:_text$mn
.text$mn:00004FC8                 ;org 4FC8h
.text$mn:00004FC8 ; COMDAT (pick any)
.text$mn:00004FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FC8
.text$mn:00004FC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FC8
.text$mn:00004FC8 ; Attributes: bp-based frame
.text$mn:00004FC8
.text$mn:00004FC8 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00004FC8                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004FC8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00004FC8                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+2Bp
.text$mn:00004FC8                                         ; operator>>(std::basic_istream<char,std::char_traits<char>> &,TiXmlNodeA &)+2Bp ...
.text$mn:00004FC8
.text$mn:00004FC8 var_14          = dword ptr -14h
.text$mn:00004FC8 var_D           = byte ptr -0Dh
.text$mn:00004FC8 var_C           = dword ptr -0Ch
.text$mn:00004FC8 var_4           = dword ptr -4
.text$mn:00004FC8
.text$mn:00004FC8                 push    ebp
.text$mn:00004FC9                 mov     ebp, esp
.text$mn:00004FCB                 push    0FFFFFFFFh
.text$mn:00004FCD                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004FD2                 mov     eax, large fs:0
.text$mn:00004FD8                 push    eax
.text$mn:00004FD9                 sub     esp, 8
.text$mn:00004FDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FE1                 xor     eax, ebp
.text$mn:00004FE3                 push    eax
.text$mn:00004FE4                 lea     eax, [ebp+var_C]
.text$mn:00004FE7                 mov     large fs:0, eax
.text$mn:00004FED                 mov     [ebp+var_14], ecx
.text$mn:00004FF0                 lea     ecx, [ebp+var_D]
.text$mn:00004FF3                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00004FF8                 push    eax
.text$mn:00004FF9                 mov     ecx, [ebp+var_14]
.text$mn:00004FFC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00005001                 mov     [ebp+var_4], 0
.text$mn:00005008                 push    0               ; Size
.text$mn:0000500A                 push    0               ; char
.text$mn:0000500C                 mov     ecx, [ebp+var_14]
.text$mn:0000500F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005014                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000501B                 mov     eax, [ebp+var_14]
.text$mn:0000501E                 mov     ecx, [ebp+var_C]
.text$mn:00005021                 mov     large fs:0, ecx
.text$mn:00005028                 pop     ecx
.text$mn:00005029                 mov     esp, ebp
.text$mn:0000502B                 pop     ebp
.text$mn:0000502C                 retn
.text$mn:0000502C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:0000502C
.text$mn:0000502C ; ---------------------------------------------------------------------------
.text$mn:0000502D                 align 10h
.text$mn:0000502D _text$mn        ends
.text$mn:0000502D
.text$x:00005030 ; ===========================================================================
.text$x:00005030
.text$x:00005030 ; Segment type: Pure code
.text$x:00005030 ; Segment permissions: Read/Execute
.text$x:00005030 _text$x         segment para public 'CODE' use32
.text$x:00005030                 assume cs:_text$x
.text$x:00005030                 ;org 5030h
.text$x:00005030 ; COMDAT (pick associative to section at 4FC8)
.text$x:00005030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005030
.text$x:00005030 ; =============== S U B R O U T I N E =======================================
.text$x:00005030
.text$x:00005030
.text$x:00005030 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00005030                                         ; DATA XREF: .xdata$x:0000B42Co
.text$x:00005030                 mov     ecx, [ebp-14h]
.text$x:00005033                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00005033 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00005033
.text$x:00005038
.text$x:00005038 ; =============== S U B R O U T I N E =======================================
.text$x:00005038
.text$x:00005038
.text$x:00005038 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00005038                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00005038
.text$x:00005038 arg_4           = dword ptr  8
.text$x:00005038
.text$x:00005038                 mov     edx, [esp+arg_4]
.text$x:0000503C                 lea     eax, [edx+0Ch]
.text$x:0000503F                 mov     ecx, [edx-0Ch]
.text$x:00005042                 xor     ecx, eax
.text$x:00005044                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005049                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:0000504E                 jmp     ___CxxFrameHandler3
.text$x:0000504E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:0000504E
.text$x:0000504E ; ---------------------------------------------------------------------------
.text$x:00005053                 align 4
.text$x:00005053 _text$x         ends
.text$x:00005053
.text$mn:00005054 ; ===========================================================================
.text$mn:00005054
.text$mn:00005054 ; Segment type: Pure code
.text$mn:00005054 ; Segment permissions: Read/Execute
.text$mn:00005054 _text$mn        segment para public 'CODE' use32
.text$mn:00005054                 assume cs:_text$mn
.text$mn:00005054                 ;org 5054h
.text$mn:00005054 ; COMDAT (pick any)
.text$mn:00005054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005054
.text$mn:00005054 ; =============== S U B R O U T I N E =======================================
.text$mn:00005054
.text$mn:00005054 ; Attributes: bp-based frame
.text$mn:00005054
.text$mn:00005054 ; public: __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>(int)
.text$mn:00005054                 public ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$mn:00005054 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
.text$mn:00005054                                         ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+ACp
.text$mn:00005054
.text$mn:00005054 var_10          = dword ptr -10h
.text$mn:00005054 var_C           = dword ptr -0Ch
.text$mn:00005054 var_4           = dword ptr -4
.text$mn:00005054 arg_0           = dword ptr  8
.text$mn:00005054
.text$mn:00005054                 push    ebp
.text$mn:00005055                 mov     ebp, esp
.text$mn:00005057                 push    0FFFFFFFFh
.text$mn:00005059                 push    offset __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$mn:0000505E                 mov     eax, large fs:0
.text$mn:00005064                 push    eax
.text$mn:00005065                 push    ecx
.text$mn:00005066                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000506B                 xor     eax, ebp
.text$mn:0000506D                 push    eax
.text$mn:0000506E                 lea     eax, [ebp+var_C]
.text$mn:00005071                 mov     large fs:0, eax
.text$mn:00005077                 mov     [ebp+var_10], ecx
.text$mn:0000507A                 mov     ecx, [ebp+var_10]
.text$mn:0000507D                 call    ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)
.text$mn:00005082                 mov     [ebp+var_4], 0
.text$mn:00005089                 mov     eax, [ebp+var_10]
.text$mn:0000508C                 mov     dword ptr [eax], offset ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'
.text$mn:00005092                 mov     ecx, [ebp+var_10]
.text$mn:00005095                 add     ecx, 40h ; '@'
.text$mn:00005098                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:0000509D                 mov     ecx, [ebp+arg_0]
.text$mn:000050A0                 push    ecx
.text$mn:000050A1                 mov     ecx, [ebp+var_10]
.text$mn:000050A4                 call    ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)
.text$mn:000050A9                 push    eax             ; int
.text$mn:000050AA                 push    0               ; Size
.text$mn:000050AC                 push    0               ; Src
.text$mn:000050AE                 mov     ecx, [ebp+var_10]
.text$mn:000050B1                 call    ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)
.text$mn:000050B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000050BD                 mov     eax, [ebp+var_10]
.text$mn:000050C0                 mov     ecx, [ebp+var_C]
.text$mn:000050C3                 mov     large fs:0, ecx
.text$mn:000050CA                 pop     ecx
.text$mn:000050CB                 mov     esp, ebp
.text$mn:000050CD                 pop     ebp
.text$mn:000050CE                 retn    4
.text$mn:000050CE ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp
.text$mn:000050CE
.text$mn:000050CE ; ---------------------------------------------------------------------------
.text$mn:000050D1                 align 4
.text$mn:000050D1 _text$mn        ends
.text$mn:000050D1
.text$x:000050D4 ; ===========================================================================
.text$x:000050D4
.text$x:000050D4 ; Segment type: Pure code
.text$x:000050D4 ; Segment permissions: Read/Execute
.text$x:000050D4 _text$x         segment para public 'CODE' use32
.text$x:000050D4                 assume cs:_text$x
.text$x:000050D4                 ;org 50D4h
.text$x:000050D4 ; COMDAT (pick associative to section at 5054)
.text$x:000050D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000050D4
.text$x:000050D4 ; =============== S U B R O U T I N E =======================================
.text$x:000050D4
.text$x:000050D4
.text$x:000050D4 __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
.text$x:000050D4                                         ; DATA XREF: .xdata$x:0000C724o
.text$x:000050D4                 mov     ecx, [ebp-10h]
.text$x:000050D7                 jmp     ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
.text$x:000050D7 __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 endp
.text$x:000050D7
.text$x:000050DC
.text$x:000050DC ; =============== S U B R O U T I N E =======================================
.text$x:000050DC
.text$x:000050DC
.text$x:000050DC __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
.text$x:000050DC                                         ; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+5o
.text$x:000050DC
.text$x:000050DC arg_4           = dword ptr  8
.text$x:000050DC
.text$x:000050DC                 mov     edx, [esp+arg_4]
.text$x:000050E0                 lea     eax, [edx+0Ch]
.text$x:000050E3                 mov     ecx, [edx-8]
.text$x:000050E6                 xor     ecx, eax
.text$x:000050E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050ED                 mov     eax, offset __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.text$x:000050F2                 jmp     ___CxxFrameHandler3
.text$x:000050F2 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z endp
.text$x:000050F2
.text$x:000050F2 ; ---------------------------------------------------------------------------
.text$x:000050F7                 align 4
.text$x:000050F7 _text$x         ends
.text$x:000050F7
.text$mn:000050F8 ; ===========================================================================
.text$mn:000050F8
.text$mn:000050F8 ; Segment type: Pure code
.text$mn:000050F8 ; Segment permissions: Read/Execute
.text$mn:000050F8 _text$mn        segment para public 'CODE' use32
.text$mn:000050F8                 assume cs:_text$mn
.text$mn:000050F8                 ;org 50F8h
.text$mn:000050F8 ; COMDAT (pick any)
.text$mn:000050F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050F8
.text$mn:000050F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000050F8
.text$mn:000050F8 ; Attributes: bp-based frame
.text$mn:000050F8
.text$mn:000050F8 ; public: __thiscall std::ctype<char>::ctype<char>(class std::_Locinfo const &, unsigned int)
.text$mn:000050F8                 public ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:000050F8 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$mn:000050F8                                         ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+A2p
.text$mn:000050F8
.text$mn:000050F8 var_10          = dword ptr -10h
.text$mn:000050F8 var_C           = dword ptr -0Ch
.text$mn:000050F8 var_4           = dword ptr -4
.text$mn:000050F8 arg_0           = dword ptr  8
.text$mn:000050F8 arg_4           = dword ptr  0Ch
.text$mn:000050F8
.text$mn:000050F8                 push    ebp
.text$mn:000050F9                 mov     ebp, esp
.text$mn:000050FB                 push    0FFFFFFFFh
.text$mn:000050FD                 push    offset __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:00005102                 mov     eax, large fs:0
.text$mn:00005108                 push    eax
.text$mn:00005109                 push    ecx
.text$mn:0000510A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000510F                 xor     eax, ebp
.text$mn:00005111                 push    eax
.text$mn:00005112                 lea     eax, [ebp+var_C]
.text$mn:00005115                 mov     large fs:0, eax
.text$mn:0000511B                 mov     [ebp+var_10], ecx
.text$mn:0000511E                 mov     eax, [ebp+arg_4]
.text$mn:00005121                 push    eax             ; unsigned int
.text$mn:00005122                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005125                 call    ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base(uint)
.text$mn:0000512A                 mov     [ebp+var_4], 0
.text$mn:00005131                 mov     ecx, [ebp+var_10]
.text$mn:00005134                 mov     dword ptr [ecx], offset ??_7?$ctype@D@std@@6B@ ; const std::ctype<char>::`vftable'
.text$mn:0000513A                 mov     edx, [ebp+arg_0]
.text$mn:0000513D                 push    edx
.text$mn:0000513E                 mov     ecx, [ebp+var_10]
.text$mn:00005141                 call    ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<char>::_Init(std::_Locinfo const &)
.text$mn:00005146                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000514D                 mov     eax, [ebp+var_10]
.text$mn:00005150                 mov     ecx, [ebp+var_C]
.text$mn:00005153                 mov     large fs:0, ecx
.text$mn:0000515A                 pop     ecx
.text$mn:0000515B                 mov     esp, ebp
.text$mn:0000515D                 pop     ebp
.text$mn:0000515E                 retn    8
.text$mn:0000515E ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$mn:0000515E
.text$mn:0000515E ; ---------------------------------------------------------------------------
.text$mn:00005161                 align 4
.text$mn:00005161 _text$mn        ends
.text$mn:00005161
.text$x:00005164 ; ===========================================================================
.text$x:00005164
.text$x:00005164 ; Segment type: Pure code
.text$x:00005164 ; Segment permissions: Read/Execute
.text$x:00005164 _text$x         segment para public 'CODE' use32
.text$x:00005164                 assume cs:_text$x
.text$x:00005164                 ;org 5164h
.text$x:00005164 ; COMDAT (pick associative to section at 50F8)
.text$x:00005164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005164
.text$x:00005164 ; =============== S U B R O U T I N E =======================================
.text$x:00005164
.text$x:00005164
.text$x:00005164 __unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0 proc near
.text$x:00005164                                         ; DATA XREF: .xdata$x:0000B7D8o
.text$x:00005164                 mov     ecx, [ebp-10h]  ; this
.text$x:00005167                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:00005167 __unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0 endp
.text$x:00005167
.text$x:0000516C
.text$x:0000516C ; =============== S U B R O U T I N E =======================================
.text$x:0000516C
.text$x:0000516C
.text$x:0000516C __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$x:0000516C                                         ; DATA XREF: std::ctype<char>::ctype<char>(std::_Locinfo const &,uint)+5o
.text$x:0000516C
.text$x:0000516C arg_4           = dword ptr  8
.text$x:0000516C
.text$x:0000516C                 mov     edx, [esp+arg_4]
.text$x:00005170                 lea     eax, [edx+0Ch]
.text$x:00005173                 mov     ecx, [edx-8]
.text$x:00005176                 xor     ecx, eax
.text$x:00005178                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000517D                 mov     eax, offset __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
.text$x:00005182                 jmp     ___CxxFrameHandler3
.text$x:00005182 __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$x:00005182
.text$x:00005182 ; ---------------------------------------------------------------------------
.text$x:00005187                 align 4
.text$x:00005187 _text$x         ends
.text$x:00005187
.text$mn:00005188 ; ===========================================================================
.text$mn:00005188
.text$mn:00005188 ; Segment type: Pure code
.text$mn:00005188 ; Segment permissions: Read/Execute
.text$mn:00005188 _text$mn        segment para public 'CODE' use32
.text$mn:00005188                 assume cs:_text$mn
.text$mn:00005188                 ;org 5188h
.text$mn:00005188 ; COMDAT (pick any)
.text$mn:00005188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005188
.text$mn:00005188 ; =============== S U B R O U T I N E =======================================
.text$mn:00005188
.text$mn:00005188 ; Attributes: bp-based frame
.text$mn:00005188
.text$mn:00005188 ; public: __thiscall std::fpos<int>::fpos<int>(__int64)
.text$mn:00005188                 public ??0?$fpos@H@std@@QAE@_J@Z
.text$mn:00005188 ??0?$fpos@H@std@@QAE@_J@Z proc near     ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::seekoff(__int64,int,int)+17p
.text$mn:00005188                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+297p ...
.text$mn:00005188
.text$mn:00005188 var_4           = dword ptr -4
.text$mn:00005188 arg_0           = dword ptr  8
.text$mn:00005188 arg_4           = dword ptr  0Ch
.text$mn:00005188
.text$mn:00005188                 push    ebp
.text$mn:00005189                 mov     ebp, esp
.text$mn:0000518B                 push    ecx
.text$mn:0000518C                 mov     [ebp+var_4], ecx
.text$mn:0000518F                 mov     eax, [ebp+var_4]
.text$mn:00005192                 mov     ecx, [ebp+arg_0]
.text$mn:00005195                 mov     [eax], ecx
.text$mn:00005197                 mov     edx, [ebp+arg_4]
.text$mn:0000519A                 mov     [eax+4], edx
.text$mn:0000519D                 mov     eax, [ebp+var_4]
.text$mn:000051A0                 mov     dword ptr [eax+8], 0
.text$mn:000051A7                 mov     dword ptr [eax+0Ch], 0
.text$mn:000051AE                 mov     ecx, [ebp+var_4]
.text$mn:000051B1                 mov     dword ptr [ecx+10h], 0
.text$mn:000051B8                 mov     eax, [ebp+var_4]
.text$mn:000051BB                 mov     esp, ebp
.text$mn:000051BD                 pop     ebp
.text$mn:000051BE                 retn    8
.text$mn:000051BE ??0?$fpos@H@std@@QAE@_J@Z endp
.text$mn:000051BE
.text$mn:000051BE ; ---------------------------------------------------------------------------
.text$mn:000051C1                 align 4
.text$mn:000051C1 _text$mn        ends
.text$mn:000051C1
.text$mn:000051C4 ; ===========================================================================
.text$mn:000051C4
.text$mn:000051C4 ; Segment type: Pure code
.text$mn:000051C4 ; Segment permissions: Read/Execute
.text$mn:000051C4 _text$mn        segment para public 'CODE' use32
.text$mn:000051C4                 assume cs:_text$mn
.text$mn:000051C4                 ;org 51C4h
.text$mn:000051C4 ; COMDAT (pick any)
.text$mn:000051C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051C4
.text$mn:000051C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051C4
.text$mn:000051C4 ; Attributes: bp-based frame
.text$mn:000051C4
.text$mn:000051C4 ; int __stdcall TiXmlAttributeA::TiXmlAttributeA(char *Str, char *)
.text$mn:000051C4                 public ??0TiXmlAttributeA@@QAE@PBD0@Z
.text$mn:000051C4 ??0TiXmlAttributeA@@QAE@PBD0@Z proc near
.text$mn:000051C4                                         ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+73p
.text$mn:000051C4
.text$mn:000051C4 var_10          = dword ptr -10h
.text$mn:000051C4 var_C           = dword ptr -0Ch
.text$mn:000051C4 var_4           = dword ptr -4
.text$mn:000051C4 Str             = dword ptr  8
.text$mn:000051C4 arg_4           = dword ptr  0Ch
.text$mn:000051C4
.text$mn:000051C4                 push    ebp
.text$mn:000051C5                 mov     ebp, esp
.text$mn:000051C7                 push    0FFFFFFFFh
.text$mn:000051C9                 push    offset __ehhandler$??0TiXmlAttributeA@@QAE@PBD0@Z
.text$mn:000051CE                 mov     eax, large fs:0
.text$mn:000051D4                 push    eax
.text$mn:000051D5                 push    ecx
.text$mn:000051D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000051DB                 xor     eax, ebp
.text$mn:000051DD                 push    eax
.text$mn:000051DE                 lea     eax, [ebp+var_C]
.text$mn:000051E1                 mov     large fs:0, eax
.text$mn:000051E7                 mov     [ebp+var_10], ecx
.text$mn:000051EA                 mov     ecx, [ebp+var_10]
.text$mn:000051ED                 call    ??0TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::TiXmlBaseA(void)
.text$mn:000051F2                 mov     [ebp+var_4], 0
.text$mn:000051F9                 mov     eax, [ebp+var_10]
.text$mn:000051FC                 mov     dword ptr [eax], offset ??_7TiXmlAttributeA@@6B@ ; const TiXmlAttributeA::`vftable'
.text$mn:00005202                 mov     ecx, [ebp+var_10]
.text$mn:00005205                 add     ecx, 10h
.text$mn:00005208                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000520D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005211                 mov     ecx, [ebp+var_10]
.text$mn:00005214                 add     ecx, 2Ch ; ','
.text$mn:00005217                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000521C                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005220                 mov     ecx, [ebp+Str]
.text$mn:00005223                 push    ecx             ; Str
.text$mn:00005224                 mov     ecx, [ebp+var_10]
.text$mn:00005227                 add     ecx, 10h
.text$mn:0000522A                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:0000522F                 mov     edx, [ebp+arg_4]
.text$mn:00005232                 push    edx             ; Str
.text$mn:00005233                 mov     ecx, [ebp+var_10]
.text$mn:00005236                 add     ecx, 2Ch ; ','
.text$mn:00005239                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:0000523E                 mov     eax, [ebp+var_10]
.text$mn:00005241                 mov     dword ptr [eax+0Ch], 0
.text$mn:00005248                 mov     ecx, [ebp+var_10]
.text$mn:0000524B                 mov     dword ptr [ecx+4Ch], 0
.text$mn:00005252                 mov     edx, [ebp+var_10]
.text$mn:00005255                 mov     dword ptr [edx+48h], 0
.text$mn:0000525C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005263                 mov     eax, [ebp+var_10]
.text$mn:00005266                 mov     ecx, [ebp+var_C]
.text$mn:00005269                 mov     large fs:0, ecx
.text$mn:00005270                 pop     ecx
.text$mn:00005271                 mov     esp, ebp
.text$mn:00005273                 pop     ebp
.text$mn:00005274                 retn    8
.text$mn:00005274 ??0TiXmlAttributeA@@QAE@PBD0@Z endp
.text$mn:00005274
.text$mn:00005274 ; ---------------------------------------------------------------------------
.text$mn:00005277                 align 4
.text$mn:00005277 _text$mn        ends
.text$mn:00005277
.text$x:00005278 ; ===========================================================================
.text$x:00005278
.text$x:00005278 ; Segment type: Pure code
.text$x:00005278 ; Segment permissions: Read/Execute
.text$x:00005278 _text$x         segment para public 'CODE' use32
.text$x:00005278                 assume cs:_text$x
.text$x:00005278                 ;org 5278h
.text$x:00005278 ; COMDAT (pick associative to section at 51C4)
.text$x:00005278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005278
.text$x:00005278 ; =============== S U B R O U T I N E =======================================
.text$x:00005278
.text$x:00005278
.text$x:00005278 __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$0 proc near
.text$x:00005278                                         ; DATA XREF: .xdata$x:0000C38Co
.text$x:00005278                 mov     ecx, [ebp-10h]  ; this
.text$x:0000527B                 jmp     ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$x:0000527B __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$0 endp
.text$x:0000527B
.text$x:00005280
.text$x:00005280 ; =============== S U B R O U T I N E =======================================
.text$x:00005280
.text$x:00005280
.text$x:00005280 __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$1 proc near
.text$x:00005280                                         ; DATA XREF: .xdata$x:0000C394o
.text$x:00005280                 mov     ecx, [ebp-10h]
.text$x:00005283                 add     ecx, 10h
.text$x:00005286                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005286 __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$1 endp
.text$x:00005286
.text$x:0000528B
.text$x:0000528B ; =============== S U B R O U T I N E =======================================
.text$x:0000528B
.text$x:0000528B
.text$x:0000528B __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$2 proc near
.text$x:0000528B                                         ; DATA XREF: .xdata$x:0000C39Co
.text$x:0000528B                 mov     ecx, [ebp-10h]
.text$x:0000528E                 add     ecx, 2Ch ; ','
.text$x:00005291                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005291 __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$2 endp
.text$x:00005291
.text$x:00005296
.text$x:00005296 ; =============== S U B R O U T I N E =======================================
.text$x:00005296
.text$x:00005296
.text$x:00005296 __ehhandler$??0TiXmlAttributeA@@QAE@PBD0@Z proc near
.text$x:00005296                                         ; DATA XREF: TiXmlAttributeA::TiXmlAttributeA(char const *,char const *)+5o
.text$x:00005296
.text$x:00005296 arg_4           = dword ptr  8
.text$x:00005296
.text$x:00005296                 mov     edx, [esp+arg_4]
.text$x:0000529A                 lea     eax, [edx+0Ch]
.text$x:0000529D                 mov     ecx, [edx-8]
.text$x:000052A0                 xor     ecx, eax
.text$x:000052A2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000052A7                 mov     eax, offset __ehfuncinfo$??0TiXmlAttributeA@@QAE@PBD0@Z
.text$x:000052AC                 jmp     ___CxxFrameHandler3
.text$x:000052AC __ehhandler$??0TiXmlAttributeA@@QAE@PBD0@Z endp
.text$x:000052AC
.text$x:000052AC ; ---------------------------------------------------------------------------
.text$x:000052B1                 align 4
.text$x:000052B1 _text$x         ends
.text$x:000052B1
.text$mn:000052B4 ; ===========================================================================
.text$mn:000052B4
.text$mn:000052B4 ; Segment type: Pure code
.text$mn:000052B4 ; Segment permissions: Read/Execute
.text$mn:000052B4 _text$mn        segment para public 'CODE' use32
.text$mn:000052B4                 assume cs:_text$mn
.text$mn:000052B4                 ;org 52B4h
.text$mn:000052B4 ; COMDAT (pick any)
.text$mn:000052B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052B4
.text$mn:000052B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000052B4
.text$mn:000052B4 ; Attributes: bp-based frame
.text$mn:000052B4
.text$mn:000052B4 ; public: __thiscall TiXmlAttributeA::TiXmlAttributeA(void)
.text$mn:000052B4                 public ??0TiXmlAttributeA@@QAE@XZ
.text$mn:000052B4 ??0TiXmlAttributeA@@QAE@XZ proc near    ; CODE XREF: TiXmlAttributeSetA::TiXmlAttributeSetA(void)+29p
.text$mn:000052B4
.text$mn:000052B4 var_10          = dword ptr -10h
.text$mn:000052B4 var_C           = dword ptr -0Ch
.text$mn:000052B4 var_4           = dword ptr -4
.text$mn:000052B4
.text$mn:000052B4                 push    ebp
.text$mn:000052B5                 mov     ebp, esp
.text$mn:000052B7                 push    0FFFFFFFFh
.text$mn:000052B9                 push    offset __ehhandler$??0TiXmlAttributeA@@QAE@XZ
.text$mn:000052BE                 mov     eax, large fs:0
.text$mn:000052C4                 push    eax
.text$mn:000052C5                 push    ecx
.text$mn:000052C6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000052CB                 xor     eax, ebp
.text$mn:000052CD                 push    eax
.text$mn:000052CE                 lea     eax, [ebp+var_C]
.text$mn:000052D1                 mov     large fs:0, eax
.text$mn:000052D7                 mov     [ebp+var_10], ecx
.text$mn:000052DA                 mov     ecx, [ebp+var_10]
.text$mn:000052DD                 call    ??0TiXmlBaseA@@QAE@XZ ; TiXmlBaseA::TiXmlBaseA(void)
.text$mn:000052E2                 mov     [ebp+var_4], 0
.text$mn:000052E9                 mov     eax, [ebp+var_10]
.text$mn:000052EC                 mov     dword ptr [eax], offset ??_7TiXmlAttributeA@@6B@ ; const TiXmlAttributeA::`vftable'
.text$mn:000052F2                 mov     ecx, [ebp+var_10]
.text$mn:000052F5                 add     ecx, 10h
.text$mn:000052F8                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000052FD                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005301                 mov     ecx, [ebp+var_10]
.text$mn:00005304                 add     ecx, 2Ch ; ','
.text$mn:00005307                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000530C                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005310                 mov     ecx, [ebp+var_10]
.text$mn:00005313                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000531A                 mov     edx, [ebp+var_10]
.text$mn:0000531D                 mov     dword ptr [edx+4Ch], 0
.text$mn:00005324                 mov     eax, [ebp+var_10]
.text$mn:00005327                 mov     dword ptr [eax+48h], 0
.text$mn:0000532E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005335                 mov     eax, [ebp+var_10]
.text$mn:00005338                 mov     ecx, [ebp+var_C]
.text$mn:0000533B                 mov     large fs:0, ecx
.text$mn:00005342                 pop     ecx
.text$mn:00005343                 mov     esp, ebp
.text$mn:00005345                 pop     ebp
.text$mn:00005346                 retn
.text$mn:00005346 ??0TiXmlAttributeA@@QAE@XZ endp
.text$mn:00005346
.text$mn:00005346 ; ---------------------------------------------------------------------------
.text$mn:00005347                 align 4
.text$mn:00005347 _text$mn        ends
.text$mn:00005347
.text$x:00005348 ; ===========================================================================
.text$x:00005348
.text$x:00005348 ; Segment type: Pure code
.text$x:00005348 ; Segment permissions: Read/Execute
.text$x:00005348 _text$x         segment para public 'CODE' use32
.text$x:00005348                 assume cs:_text$x
.text$x:00005348                 ;org 5348h
.text$x:00005348 ; COMDAT (pick associative to section at 52B4)
.text$x:00005348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005348
.text$x:00005348 ; =============== S U B R O U T I N E =======================================
.text$x:00005348
.text$x:00005348
.text$x:00005348 __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$0 proc near
.text$x:00005348                                         ; DATA XREF: .xdata$x:0000C350o
.text$x:00005348                 mov     ecx, [ebp-10h]  ; this
.text$x:0000534B                 jmp     ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$x:0000534B __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$0 endp
.text$x:0000534B
.text$x:00005350
.text$x:00005350 ; =============== S U B R O U T I N E =======================================
.text$x:00005350
.text$x:00005350
.text$x:00005350 __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$1 proc near
.text$x:00005350                                         ; DATA XREF: .xdata$x:0000C358o
.text$x:00005350                 mov     ecx, [ebp-10h]
.text$x:00005353                 add     ecx, 10h
.text$x:00005356                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005356 __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$1 endp
.text$x:00005356
.text$x:0000535B
.text$x:0000535B ; =============== S U B R O U T I N E =======================================
.text$x:0000535B
.text$x:0000535B
.text$x:0000535B __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$2 proc near
.text$x:0000535B                                         ; DATA XREF: .xdata$x:0000C360o
.text$x:0000535B                 mov     ecx, [ebp-10h]
.text$x:0000535E                 add     ecx, 2Ch ; ','
.text$x:00005361                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005361 __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$2 endp
.text$x:00005361
.text$x:00005366
.text$x:00005366 ; =============== S U B R O U T I N E =======================================
.text$x:00005366
.text$x:00005366
.text$x:00005366 __ehhandler$??0TiXmlAttributeA@@QAE@XZ proc near
.text$x:00005366                                         ; DATA XREF: TiXmlAttributeA::TiXmlAttributeA(void)+5o
.text$x:00005366
.text$x:00005366 arg_4           = dword ptr  8
.text$x:00005366
.text$x:00005366                 mov     edx, [esp+arg_4]
.text$x:0000536A                 lea     eax, [edx+0Ch]
.text$x:0000536D                 mov     ecx, [edx-8]
.text$x:00005370                 xor     ecx, eax
.text$x:00005372                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005377                 mov     eax, offset __ehfuncinfo$??0TiXmlAttributeA@@QAE@XZ
.text$x:0000537C                 jmp     ___CxxFrameHandler3
.text$x:0000537C __ehhandler$??0TiXmlAttributeA@@QAE@XZ endp
.text$x:0000537C
.text$x:0000537C ; ---------------------------------------------------------------------------
.text$x:00005381                 align 4
.text$x:00005381 _text$x         ends
.text$x:00005381
.text$mn:00005384 ; ===========================================================================
.text$mn:00005384
.text$mn:00005384 ; Segment type: Pure code
.text$mn:00005384 ; Segment permissions: Read/Execute
.text$mn:00005384 _text$mn        segment para public 'CODE' use32
.text$mn:00005384                 assume cs:_text$mn
.text$mn:00005384                 ;org 5384h
.text$mn:00005384 ; COMDAT (pick any)
.text$mn:00005384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005384
.text$mn:00005384 ; =============== S U B R O U T I N E =======================================
.text$mn:00005384
.text$mn:00005384 ; Attributes: bp-based frame
.text$mn:00005384
.text$mn:00005384 ; public: __thiscall TiXmlBaseA::TiXmlBaseA(void)
.text$mn:00005384                 public ??0TiXmlBaseA@@QAE@XZ
.text$mn:00005384 ??0TiXmlBaseA@@QAE@XZ proc near         ; CODE XREF: TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)+29p
.text$mn:00005384                                         ; TiXmlAttributeA::TiXmlAttributeA(char const *,char const *)+29p ...
.text$mn:00005384
.text$mn:00005384 var_4           = dword ptr -4
.text$mn:00005384
.text$mn:00005384                 push    ebp
.text$mn:00005385                 mov     ebp, esp
.text$mn:00005387                 push    ecx
.text$mn:00005388                 mov     [ebp+var_4], ecx
.text$mn:0000538B                 mov     eax, [ebp+var_4]
.text$mn:0000538E                 mov     dword ptr [eax], offset ??_7TiXmlBaseA@@6B@ ; const TiXmlBaseA::`vftable'
.text$mn:00005394                 mov     ecx, [ebp+var_4]
.text$mn:00005397                 add     ecx, 4
.text$mn:0000539A                 call    ??0TiXmlCursorA@@QAE@XZ ; TiXmlCursorA::TiXmlCursorA(void)
.text$mn:0000539F                 mov     eax, [ebp+var_4]
.text$mn:000053A2                 mov     esp, ebp
.text$mn:000053A4                 pop     ebp
.text$mn:000053A5                 retn
.text$mn:000053A5 ??0TiXmlBaseA@@QAE@XZ endp
.text$mn:000053A5
.text$mn:000053A5 ; ---------------------------------------------------------------------------
.text$mn:000053A6                 align 4
.text$mn:000053A6 _text$mn        ends
.text$mn:000053A6
.text$mn:000053A8 ; ===========================================================================
.text$mn:000053A8
.text$mn:000053A8 ; Segment type: Pure code
.text$mn:000053A8 ; Segment permissions: Read/Execute
.text$mn:000053A8 _text$mn        segment para public 'CODE' use32
.text$mn:000053A8                 assume cs:_text$mn
.text$mn:000053A8                 ;org 53A8h
.text$mn:000053A8 ; COMDAT (pick any)
.text$mn:000053A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053A8
.text$mn:000053A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000053A8
.text$mn:000053A8 ; Attributes: bp-based frame
.text$mn:000053A8
.text$mn:000053A8 ; public: __thiscall TiXmlCommentA::TiXmlCommentA(void)
.text$mn:000053A8                 public ??0TiXmlCommentA@@QAE@XZ
.text$mn:000053A8 ??0TiXmlCommentA@@QAE@XZ proc near      ; CODE XREF: TiXmlCommentA::Clone(void)+45p
.text$mn:000053A8
.text$mn:000053A8 var_10          = dword ptr -10h
.text$mn:000053A8 var_C           = dword ptr -0Ch
.text$mn:000053A8 var_4           = dword ptr -4
.text$mn:000053A8
.text$mn:000053A8                 push    ebp
.text$mn:000053A9                 mov     ebp, esp
.text$mn:000053AB                 push    0FFFFFFFFh
.text$mn:000053AD                 push    offset __ehhandler$??0TiXmlCommentA@@QAE@XZ
.text$mn:000053B2                 mov     eax, large fs:0
.text$mn:000053B8                 push    eax
.text$mn:000053B9                 push    ecx
.text$mn:000053BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053BF                 xor     eax, ebp
.text$mn:000053C1                 push    eax
.text$mn:000053C2                 lea     eax, [ebp+var_C]
.text$mn:000053C5                 mov     large fs:0, eax
.text$mn:000053CB                 mov     [ebp+var_10], ecx
.text$mn:000053CE                 push    2
.text$mn:000053D0                 mov     ecx, [ebp+var_10]
.text$mn:000053D3                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:000053D8                 mov     [ebp+var_4], 0
.text$mn:000053DF                 mov     eax, [ebp+var_10]
.text$mn:000053E2                 mov     dword ptr [eax], offset ??_7TiXmlCommentA@@6B@ ; const TiXmlCommentA::`vftable'
.text$mn:000053E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000053EF                 mov     eax, [ebp+var_10]
.text$mn:000053F2                 mov     ecx, [ebp+var_C]
.text$mn:000053F5                 mov     large fs:0, ecx
.text$mn:000053FC                 pop     ecx
.text$mn:000053FD                 mov     esp, ebp
.text$mn:000053FF                 pop     ebp
.text$mn:00005400                 retn
.text$mn:00005400 ??0TiXmlCommentA@@QAE@XZ endp
.text$mn:00005400
.text$mn:00005400 ; ---------------------------------------------------------------------------
.text$mn:00005401                 align 4
.text$mn:00005401 _text$mn        ends
.text$mn:00005401
.text$x:00005404 ; ===========================================================================
.text$x:00005404
.text$x:00005404 ; Segment type: Pure code
.text$x:00005404 ; Segment permissions: Read/Execute
.text$x:00005404 _text$x         segment para public 'CODE' use32
.text$x:00005404                 assume cs:_text$x
.text$x:00005404                 ;org 5404h
.text$x:00005404 ; COMDAT (pick associative to section at 53A8)
.text$x:00005404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005404
.text$x:00005404 ; =============== S U B R O U T I N E =======================================
.text$x:00005404
.text$x:00005404
.text$x:00005404 __unwindfunclet$??0TiXmlCommentA@@QAE@XZ$0 proc near
.text$x:00005404                                         ; DATA XREF: .xdata$x:0000C404o
.text$x:00005404                 mov     ecx, [ebp-10h]  ; this
.text$x:00005407                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00005407 __unwindfunclet$??0TiXmlCommentA@@QAE@XZ$0 endp
.text$x:00005407
.text$x:0000540C
.text$x:0000540C ; =============== S U B R O U T I N E =======================================
.text$x:0000540C
.text$x:0000540C
.text$x:0000540C __ehhandler$??0TiXmlCommentA@@QAE@XZ proc near
.text$x:0000540C                                         ; DATA XREF: TiXmlCommentA::TiXmlCommentA(void)+5o
.text$x:0000540C
.text$x:0000540C arg_4           = dword ptr  8
.text$x:0000540C
.text$x:0000540C                 mov     edx, [esp+arg_4]
.text$x:00005410                 lea     eax, [edx+0Ch]
.text$x:00005413                 mov     ecx, [edx-8]
.text$x:00005416                 xor     ecx, eax
.text$x:00005418                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000541D                 mov     eax, offset __ehfuncinfo$??0TiXmlCommentA@@QAE@XZ
.text$x:00005422                 jmp     ___CxxFrameHandler3
.text$x:00005422 __ehhandler$??0TiXmlCommentA@@QAE@XZ endp
.text$x:00005422
.text$x:00005422 ; ---------------------------------------------------------------------------
.text$x:00005427                 align 4
.text$x:00005427 _text$x         ends
.text$x:00005427
.text$mn:00005428 ; ===========================================================================
.text$mn:00005428
.text$mn:00005428 ; Segment type: Pure code
.text$mn:00005428 ; Segment permissions: Read/Execute
.text$mn:00005428 _text$mn        segment para public 'CODE' use32
.text$mn:00005428                 assume cs:_text$mn
.text$mn:00005428                 ;org 5428h
.text$mn:00005428 ; COMDAT (pick any)
.text$mn:00005428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005428
.text$mn:00005428 ; =============== S U B R O U T I N E =======================================
.text$mn:00005428
.text$mn:00005428 ; Attributes: bp-based frame
.text$mn:00005428
.text$mn:00005428 ; public: __thiscall TiXmlCursorA::TiXmlCursorA(void)
.text$mn:00005428                 public ??0TiXmlCursorA@@QAE@XZ
.text$mn:00005428 ??0TiXmlCursorA@@QAE@XZ proc near       ; CODE XREF: TiXmlDocumentA::TiXmlDocumentA(void)+55p
.text$mn:00005428                                         ; TiXmlDocumentA::TiXmlDocumentA(char const *)+55p ...
.text$mn:00005428
.text$mn:00005428 var_4           = dword ptr -4
.text$mn:00005428
.text$mn:00005428                 push    ebp
.text$mn:00005429                 mov     ebp, esp
.text$mn:0000542B                 push    ecx
.text$mn:0000542C                 mov     [ebp+var_4], ecx
.text$mn:0000542F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005432                 call    ?Clear@TiXmlCursorA@@QAEXXZ ; TiXmlCursorA::Clear(void)
.text$mn:00005437                 mov     eax, [ebp+var_4]
.text$mn:0000543A                 mov     esp, ebp
.text$mn:0000543C                 pop     ebp
.text$mn:0000543D                 retn
.text$mn:0000543D ??0TiXmlCursorA@@QAE@XZ endp
.text$mn:0000543D
.text$mn:0000543D ; ---------------------------------------------------------------------------
.text$mn:0000543E                 align 10h
.text$mn:0000543E _text$mn        ends
.text$mn:0000543E
.text$mn:00005440 ; ===========================================================================
.text$mn:00005440
.text$mn:00005440 ; Segment type: Pure code
.text$mn:00005440 ; Segment permissions: Read/Execute
.text$mn:00005440 _text$mn        segment para public 'CODE' use32
.text$mn:00005440                 assume cs:_text$mn
.text$mn:00005440                 ;org 5440h
.text$mn:00005440 ; COMDAT (pick any)
.text$mn:00005440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005440
.text$mn:00005440 ; =============== S U B R O U T I N E =======================================
.text$mn:00005440
.text$mn:00005440 ; Attributes: bp-based frame
.text$mn:00005440
.text$mn:00005440 ; public: __thiscall TiXmlDeclarationA::TiXmlDeclarationA(void)
.text$mn:00005440                 public ??0TiXmlDeclarationA@@QAE@XZ
.text$mn:00005440 ??0TiXmlDeclarationA@@QAE@XZ proc near  ; CODE XREF: TiXmlDeclarationA::Clone(void)+48p
.text$mn:00005440
.text$mn:00005440 var_10          = dword ptr -10h
.text$mn:00005440 var_C           = dword ptr -0Ch
.text$mn:00005440 var_4           = dword ptr -4
.text$mn:00005440
.text$mn:00005440                 push    ebp
.text$mn:00005441                 mov     ebp, esp
.text$mn:00005443                 push    0FFFFFFFFh
.text$mn:00005445                 push    offset __ehhandler$??0TiXmlDeclarationA@@QAE@XZ
.text$mn:0000544A                 mov     eax, large fs:0
.text$mn:00005450                 push    eax
.text$mn:00005451                 push    ecx
.text$mn:00005452                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005457                 xor     eax, ebp
.text$mn:00005459                 push    eax
.text$mn:0000545A                 lea     eax, [ebp+var_C]
.text$mn:0000545D                 mov     large fs:0, eax
.text$mn:00005463                 mov     [ebp+var_10], ecx
.text$mn:00005466                 push    5
.text$mn:00005468                 mov     ecx, [ebp+var_10]
.text$mn:0000546B                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00005470                 mov     [ebp+var_4], 0
.text$mn:00005477                 mov     eax, [ebp+var_10]
.text$mn:0000547A                 mov     dword ptr [eax], offset ??_7TiXmlDeclarationA@@6B@ ; const TiXmlDeclarationA::`vftable'
.text$mn:00005480                 mov     ecx, [ebp+var_10]
.text$mn:00005483                 add     ecx, 44h ; 'D'
.text$mn:00005486                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000548B                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000548F                 mov     ecx, [ebp+var_10]
.text$mn:00005492                 add     ecx, 60h ; '`'
.text$mn:00005495                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000549A                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000549E                 mov     ecx, [ebp+var_10]
.text$mn:000054A1                 add     ecx, 7Ch ; '|'
.text$mn:000054A4                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000054A9                 mov     byte ptr [ebp+var_4], 3
.text$mn:000054AD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000054B4                 mov     eax, [ebp+var_10]
.text$mn:000054B7                 mov     ecx, [ebp+var_C]
.text$mn:000054BA                 mov     large fs:0, ecx
.text$mn:000054C1                 pop     ecx
.text$mn:000054C2                 mov     esp, ebp
.text$mn:000054C4                 pop     ebp
.text$mn:000054C5                 retn
.text$mn:000054C5 ??0TiXmlDeclarationA@@QAE@XZ endp
.text$mn:000054C5
.text$mn:000054C5 ; ---------------------------------------------------------------------------
.text$mn:000054C6                 align 4
.text$mn:000054C6 _text$mn        ends
.text$mn:000054C6
.text$x:000054C8 ; ===========================================================================
.text$x:000054C8
.text$x:000054C8 ; Segment type: Pure code
.text$x:000054C8 ; Segment permissions: Read/Execute
.text$x:000054C8 _text$x         segment para public 'CODE' use32
.text$x:000054C8                 assume cs:_text$x
.text$x:000054C8                 ;org 54C8h
.text$x:000054C8 ; COMDAT (pick associative to section at 5440)
.text$x:000054C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000054C8
.text$x:000054C8 ; =============== S U B R O U T I N E =======================================
.text$x:000054C8
.text$x:000054C8
.text$x:000054C8 __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$0 proc near
.text$x:000054C8                                         ; DATA XREF: .xdata$x:0000C4B4o
.text$x:000054C8                 mov     ecx, [ebp-10h]  ; this
.text$x:000054CB                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:000054CB __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$0 endp
.text$x:000054CB
.text$x:000054D0
.text$x:000054D0 ; =============== S U B R O U T I N E =======================================
.text$x:000054D0
.text$x:000054D0
.text$x:000054D0 __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$1 proc near
.text$x:000054D0                                         ; DATA XREF: .xdata$x:0000C4BCo
.text$x:000054D0                 mov     ecx, [ebp-10h]
.text$x:000054D3                 add     ecx, 44h ; 'D'
.text$x:000054D6                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000054D6 __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$1 endp
.text$x:000054D6
.text$x:000054DB
.text$x:000054DB ; =============== S U B R O U T I N E =======================================
.text$x:000054DB
.text$x:000054DB
.text$x:000054DB __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$2 proc near
.text$x:000054DB                                         ; DATA XREF: .xdata$x:0000C4C4o
.text$x:000054DB                 mov     ecx, [ebp-10h]
.text$x:000054DE                 add     ecx, 60h ; '`'
.text$x:000054E1                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000054E1 __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$2 endp
.text$x:000054E1
.text$x:000054E6
.text$x:000054E6 ; =============== S U B R O U T I N E =======================================
.text$x:000054E6
.text$x:000054E6
.text$x:000054E6 __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$3 proc near
.text$x:000054E6                                         ; DATA XREF: .xdata$x:0000C4CCo
.text$x:000054E6                 mov     ecx, [ebp-10h]
.text$x:000054E9                 add     ecx, 7Ch ; '|'
.text$x:000054EC                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000054EC __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$3 endp
.text$x:000054EC
.text$x:000054F1
.text$x:000054F1 ; =============== S U B R O U T I N E =======================================
.text$x:000054F1
.text$x:000054F1
.text$x:000054F1 __ehhandler$??0TiXmlDeclarationA@@QAE@XZ proc near
.text$x:000054F1                                         ; DATA XREF: TiXmlDeclarationA::TiXmlDeclarationA(void)+5o
.text$x:000054F1
.text$x:000054F1 arg_4           = dword ptr  8
.text$x:000054F1
.text$x:000054F1                 mov     edx, [esp+arg_4]
.text$x:000054F5                 lea     eax, [edx+0Ch]
.text$x:000054F8                 mov     ecx, [edx-8]
.text$x:000054FB                 xor     ecx, eax
.text$x:000054FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005502                 mov     eax, offset __ehfuncinfo$??0TiXmlDeclarationA@@QAE@XZ
.text$x:00005507                 jmp     ___CxxFrameHandler3
.text$x:00005507 __ehhandler$??0TiXmlDeclarationA@@QAE@XZ endp
.text$x:00005507
.text$x:00005507 _text$x         ends
.text$x:00005507
.text$mn:0000550C ; ===========================================================================
.text$mn:0000550C
.text$mn:0000550C ; Segment type: Pure code
.text$mn:0000550C ; Segment permissions: Read/Execute
.text$mn:0000550C _text$mn        segment para public 'CODE' use32
.text$mn:0000550C                 assume cs:_text$mn
.text$mn:0000550C                 ;org 550Ch
.text$mn:0000550C ; COMDAT (pick any)
.text$mn:0000550C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000550C
.text$mn:0000550C ; =============== S U B R O U T I N E =======================================
.text$mn:0000550C
.text$mn:0000550C ; Attributes: bp-based frame
.text$mn:0000550C
.text$mn:0000550C ; _DWORD __thiscall TiXmlHandleA::TiXmlHandleA(TiXmlHandleA *this, struct TiXmlNodeA *)
.text$mn:0000550C                 public ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z
.text$mn:0000550C ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z proc near
.text$mn:0000550C                                         ; CODE XREF: TiXmlHandleA::FirstChild(void)+2Bp
.text$mn:0000550C                                         ; TiXmlHandleA::FirstChild(void)+3Ap ...
.text$mn:0000550C
.text$mn:0000550C var_4           = dword ptr -4
.text$mn:0000550C arg_0           = dword ptr  8
.text$mn:0000550C
.text$mn:0000550C                 push    ebp
.text$mn:0000550D                 mov     ebp, esp
.text$mn:0000550F                 push    ecx
.text$mn:00005510                 mov     [ebp+var_4], ecx
.text$mn:00005513                 mov     eax, [ebp+var_4]
.text$mn:00005516                 mov     ecx, [ebp+arg_0]
.text$mn:00005519                 mov     [eax], ecx
.text$mn:0000551B                 mov     eax, [ebp+var_4]
.text$mn:0000551E                 mov     esp, ebp
.text$mn:00005520                 pop     ebp
.text$mn:00005521                 retn    4
.text$mn:00005521 ??0TiXmlHandleA@@QAE@PAVTiXmlNodeA@@@Z endp
.text$mn:00005521
.text$mn:00005521 _text$mn        ends
.text$mn:00005521
.text$mn:00005524 ; ===========================================================================
.text$mn:00005524
.text$mn:00005524 ; Segment type: Pure code
.text$mn:00005524 ; Segment permissions: Read/Execute
.text$mn:00005524 _text$mn        segment para public 'CODE' use32
.text$mn:00005524                 assume cs:_text$mn
.text$mn:00005524                 ;org 5524h
.text$mn:00005524 ; COMDAT (pick any)
.text$mn:00005524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005524
.text$mn:00005524 ; =============== S U B R O U T I N E =======================================
.text$mn:00005524
.text$mn:00005524 ; Attributes: bp-based frame
.text$mn:00005524
.text$mn:00005524 ; int __stdcall TiXmlTextA::TiXmlTextA(char *)
.text$mn:00005524                 public ??0TiXmlTextA@@QAE@PBD@Z
.text$mn:00005524 ??0TiXmlTextA@@QAE@PBD@Z proc near      ; CODE XREF: TiXmlTextA::Clone(void)+51p
.text$mn:00005524
.text$mn:00005524 var_10          = dword ptr -10h
.text$mn:00005524 var_C           = dword ptr -0Ch
.text$mn:00005524 var_4           = dword ptr -4
.text$mn:00005524 arg_0           = dword ptr  8
.text$mn:00005524
.text$mn:00005524                 push    ebp
.text$mn:00005525                 mov     ebp, esp
.text$mn:00005527                 push    0FFFFFFFFh
.text$mn:00005529                 push    offset __ehhandler$??0TiXmlTextA@@QAE@PBD@Z
.text$mn:0000552E                 mov     eax, large fs:0
.text$mn:00005534                 push    eax
.text$mn:00005535                 push    ecx
.text$mn:00005536                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000553B                 xor     eax, ebp
.text$mn:0000553D                 push    eax
.text$mn:0000553E                 lea     eax, [ebp+var_C]
.text$mn:00005541                 mov     large fs:0, eax
.text$mn:00005547                 mov     [ebp+var_10], ecx
.text$mn:0000554A                 push    4
.text$mn:0000554C                 mov     ecx, [ebp+var_10]
.text$mn:0000554F                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:00005554                 mov     [ebp+var_4], 0
.text$mn:0000555B                 mov     eax, [ebp+var_10]
.text$mn:0000555E                 mov     dword ptr [eax], offset ??_7TiXmlTextA@@6B@ ; const TiXmlTextA::`vftable'
.text$mn:00005564                 mov     ecx, [ebp+arg_0]
.text$mn:00005567                 push    ecx             ; char *
.text$mn:00005568                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000556B                 call    ?SetValue@TiXmlNodeA@@QAEXPBD@Z ; TiXmlNodeA::SetValue(char const *)
.text$mn:00005570                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005577                 mov     eax, [ebp+var_10]
.text$mn:0000557A                 mov     ecx, [ebp+var_C]
.text$mn:0000557D                 mov     large fs:0, ecx
.text$mn:00005584                 pop     ecx
.text$mn:00005585                 mov     esp, ebp
.text$mn:00005587                 pop     ebp
.text$mn:00005588                 retn    4
.text$mn:00005588 ??0TiXmlTextA@@QAE@PBD@Z endp
.text$mn:00005588
.text$mn:00005588 ; ---------------------------------------------------------------------------
.text$mn:0000558B                 align 4
.text$mn:0000558B _text$mn        ends
.text$mn:0000558B
.text$x:0000558C ; ===========================================================================
.text$x:0000558C
.text$x:0000558C ; Segment type: Pure code
.text$x:0000558C ; Segment permissions: Read/Execute
.text$x:0000558C _text$x         segment para public 'CODE' use32
.text$x:0000558C                 assume cs:_text$x
.text$x:0000558C                 ;org 558Ch
.text$x:0000558C ; COMDAT (pick associative to section at 5524)
.text$x:0000558C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000558C
.text$x:0000558C ; =============== S U B R O U T I N E =======================================
.text$x:0000558C
.text$x:0000558C
.text$x:0000558C __unwindfunclet$??0TiXmlTextA@@QAE@PBD@Z$0 proc near
.text$x:0000558C                                         ; DATA XREF: .xdata$x:0000C45Co
.text$x:0000558C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000558F                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:0000558F __unwindfunclet$??0TiXmlTextA@@QAE@PBD@Z$0 endp
.text$x:0000558F
.text$x:00005594
.text$x:00005594 ; =============== S U B R O U T I N E =======================================
.text$x:00005594
.text$x:00005594
.text$x:00005594 __ehhandler$??0TiXmlTextA@@QAE@PBD@Z proc near
.text$x:00005594                                         ; DATA XREF: TiXmlTextA::TiXmlTextA(char const *)+5o
.text$x:00005594
.text$x:00005594 arg_4           = dword ptr  8
.text$x:00005594
.text$x:00005594                 mov     edx, [esp+arg_4]
.text$x:00005598                 lea     eax, [edx+0Ch]
.text$x:0000559B                 mov     ecx, [edx-8]
.text$x:0000559E                 xor     ecx, eax
.text$x:000055A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000055A5                 mov     eax, offset __ehfuncinfo$??0TiXmlTextA@@QAE@PBD@Z
.text$x:000055AA                 jmp     ___CxxFrameHandler3
.text$x:000055AA __ehhandler$??0TiXmlTextA@@QAE@PBD@Z endp
.text$x:000055AA
.text$x:000055AA ; ---------------------------------------------------------------------------
.text$x:000055AF                 align 10h
.text$x:000055AF _text$x         ends
.text$x:000055AF
.text$mn:000055B0 ; ===========================================================================
.text$mn:000055B0
.text$mn:000055B0 ; Segment type: Pure code
.text$mn:000055B0 ; Segment permissions: Read/Execute
.text$mn:000055B0 _text$mn        segment para public 'CODE' use32
.text$mn:000055B0                 assume cs:_text$mn
.text$mn:000055B0                 ;org 55B0h
.text$mn:000055B0 ; COMDAT (pick any)
.text$mn:000055B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055B0
.text$mn:000055B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000055B0
.text$mn:000055B0 ; Attributes: bp-based frame
.text$mn:000055B0
.text$mn:000055B0 ; public: __thiscall TiXmlUnknownA::TiXmlUnknownA(void)
.text$mn:000055B0                 public ??0TiXmlUnknownA@@QAE@XZ
.text$mn:000055B0 ??0TiXmlUnknownA@@QAE@XZ proc near      ; CODE XREF: TiXmlUnknownA::Clone(void)+45p
.text$mn:000055B0
.text$mn:000055B0 var_10          = dword ptr -10h
.text$mn:000055B0 var_C           = dword ptr -0Ch
.text$mn:000055B0 var_4           = dword ptr -4
.text$mn:000055B0
.text$mn:000055B0                 push    ebp
.text$mn:000055B1                 mov     ebp, esp
.text$mn:000055B3                 push    0FFFFFFFFh
.text$mn:000055B5                 push    offset __ehhandler$??0TiXmlUnknownA@@QAE@XZ
.text$mn:000055BA                 mov     eax, large fs:0
.text$mn:000055C0                 push    eax
.text$mn:000055C1                 push    ecx
.text$mn:000055C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000055C7                 xor     eax, ebp
.text$mn:000055C9                 push    eax
.text$mn:000055CA                 lea     eax, [ebp+var_C]
.text$mn:000055CD                 mov     large fs:0, eax
.text$mn:000055D3                 mov     [ebp+var_10], ecx
.text$mn:000055D6                 push    3
.text$mn:000055D8                 mov     ecx, [ebp+var_10]
.text$mn:000055DB                 call    ??0TiXmlNodeA@@IAE@W4NodeType@0@@Z ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)
.text$mn:000055E0                 mov     [ebp+var_4], 0
.text$mn:000055E7                 mov     eax, [ebp+var_10]
.text$mn:000055EA                 mov     dword ptr [eax], offset ??_7TiXmlUnknownA@@6B@ ; const TiXmlUnknownA::`vftable'
.text$mn:000055F0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000055F7                 mov     eax, [ebp+var_10]
.text$mn:000055FA                 mov     ecx, [ebp+var_C]
.text$mn:000055FD                 mov     large fs:0, ecx
.text$mn:00005604                 pop     ecx
.text$mn:00005605                 mov     esp, ebp
.text$mn:00005607                 pop     ebp
.text$mn:00005608                 retn
.text$mn:00005608 ??0TiXmlUnknownA@@QAE@XZ endp
.text$mn:00005608
.text$mn:00005608 ; ---------------------------------------------------------------------------
.text$mn:00005609                 align 4
.text$mn:00005609 _text$mn        ends
.text$mn:00005609
.text$x:0000560C ; ===========================================================================
.text$x:0000560C
.text$x:0000560C ; Segment type: Pure code
.text$x:0000560C ; Segment permissions: Read/Execute
.text$x:0000560C _text$x         segment para public 'CODE' use32
.text$x:0000560C                 assume cs:_text$x
.text$x:0000560C                 ;org 560Ch
.text$x:0000560C ; COMDAT (pick associative to section at 55B0)
.text$x:0000560C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000560C
.text$x:0000560C ; =============== S U B R O U T I N E =======================================
.text$x:0000560C
.text$x:0000560C
.text$x:0000560C __unwindfunclet$??0TiXmlUnknownA@@QAE@XZ$0 proc near
.text$x:0000560C                                         ; DATA XREF: .xdata$x:0000C53Co
.text$x:0000560C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000560F                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:0000560F __unwindfunclet$??0TiXmlUnknownA@@QAE@XZ$0 endp
.text$x:0000560F
.text$x:00005614
.text$x:00005614 ; =============== S U B R O U T I N E =======================================
.text$x:00005614
.text$x:00005614
.text$x:00005614 __ehhandler$??0TiXmlUnknownA@@QAE@XZ proc near
.text$x:00005614                                         ; DATA XREF: TiXmlUnknownA::TiXmlUnknownA(void)+5o
.text$x:00005614
.text$x:00005614 arg_4           = dword ptr  8
.text$x:00005614
.text$x:00005614                 mov     edx, [esp+arg_4]
.text$x:00005618                 lea     eax, [edx+0Ch]
.text$x:0000561B                 mov     ecx, [edx-8]
.text$x:0000561E                 xor     ecx, eax
.text$x:00005620                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005625                 mov     eax, offset __ehfuncinfo$??0TiXmlUnknownA@@QAE@XZ
.text$x:0000562A                 jmp     ___CxxFrameHandler3
.text$x:0000562A __ehhandler$??0TiXmlUnknownA@@QAE@XZ endp
.text$x:0000562A
.text$x:0000562A ; ---------------------------------------------------------------------------
.text$x:0000562F                 align 10h
.text$x:0000562F _text$x         ends
.text$x:0000562F
.text$mn:00005630 ; ===========================================================================
.text$mn:00005630
.text$mn:00005630 ; Segment type: Pure code
.text$mn:00005630 ; Segment permissions: Read/Execute
.text$mn:00005630 _text$mn        segment para public 'CODE' use32
.text$mn:00005630                 assume cs:_text$mn
.text$mn:00005630                 ;org 5630h
.text$mn:00005630 ; COMDAT (pick any)
.text$mn:00005630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005630
.text$mn:00005630 ; =============== S U B R O U T I N E =======================================
.text$mn:00005630
.text$mn:00005630 ; Attributes: bp-based frame
.text$mn:00005630
.text$mn:00005630 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00005630                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00005630 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00005630                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00005630
.text$mn:00005630 var_4           = dword ptr -4
.text$mn:00005630
.text$mn:00005630                 push    ebp
.text$mn:00005631                 mov     ebp, esp
.text$mn:00005633                 push    ecx
.text$mn:00005634                 mov     [ebp+var_4], ecx
.text$mn:00005637                 mov     eax, [ebp+var_4]
.text$mn:0000563A                 mov     dword ptr [eax], 0
.text$mn:00005640                 mov     eax, [ebp+var_4]
.text$mn:00005643                 mov     esp, ebp
.text$mn:00005645                 pop     ebp
.text$mn:00005646                 retn
.text$mn:00005646 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00005646
.text$mn:00005646 ; ---------------------------------------------------------------------------
.text$mn:00005647                 align 4
.text$mn:00005647 _text$mn        ends
.text$mn:00005647
.text$mn:00005648 ; ===========================================================================
.text$mn:00005648
.text$mn:00005648 ; Segment type: Pure code
.text$mn:00005648 ; Segment permissions: Read/Execute
.text$mn:00005648 _text$mn        segment para public 'CODE' use32
.text$mn:00005648                 assume cs:_text$mn
.text$mn:00005648                 ;org 5648h
.text$mn:00005648 ; COMDAT (pick any)
.text$mn:00005648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005648
.text$mn:00005648 ; =============== S U B R O U T I N E =======================================
.text$mn:00005648
.text$mn:00005648 ; Attributes: bp-based frame
.text$mn:00005648
.text$mn:00005648 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00005648                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00005648 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00005648                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00005648
.text$mn:00005648 var_4           = dword ptr -4
.text$mn:00005648
.text$mn:00005648                 push    ebp
.text$mn:00005649                 mov     ebp, esp
.text$mn:0000564B                 push    ecx
.text$mn:0000564C                 mov     [ebp+var_4], ecx
.text$mn:0000564F                 mov     eax, [ebp+var_4]
.text$mn:00005652                 mov     dword ptr [eax], 0
.text$mn:00005658                 mov     ecx, [ebp+var_4]
.text$mn:0000565B                 mov     dword ptr [ecx+4], 0
.text$mn:00005662                 mov     eax, [ebp+var_4]
.text$mn:00005665                 mov     esp, ebp
.text$mn:00005667                 pop     ebp
.text$mn:00005668                 retn
.text$mn:00005668 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00005668
.text$mn:00005668 ; ---------------------------------------------------------------------------
.text$mn:00005669                 align 4
.text$mn:00005669 _text$mn        ends
.text$mn:00005669
.text$mn:0000566C ; ===========================================================================
.text$mn:0000566C
.text$mn:0000566C ; Segment type: Pure code
.text$mn:0000566C ; Segment permissions: Read/Execute
.text$mn:0000566C _text$mn        segment para public 'CODE' use32
.text$mn:0000566C                 assume cs:_text$mn
.text$mn:0000566C                 ;org 566Ch
.text$mn:0000566C ; COMDAT (pick any)
.text$mn:0000566C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000566C
.text$mn:0000566C ; =============== S U B R O U T I N E =======================================
.text$mn:0000566C
.text$mn:0000566C ; Attributes: bp-based frame
.text$mn:0000566C
.text$mn:0000566C ; _DWORD __thiscall std::_Facet_base::_Facet_base(std::_Facet_base *__hidden this)
.text$mn:0000566C                 public ??0_Facet_base@std@@QAE@XZ
.text$mn:0000566C ??0_Facet_base@std@@QAE@XZ proc near    ; CODE XREF: std::locale::facet::facet(uint)+29p
.text$mn:0000566C
.text$mn:0000566C var_4           = dword ptr -4
.text$mn:0000566C
.text$mn:0000566C                 push    ebp
.text$mn:0000566D                 mov     ebp, esp
.text$mn:0000566F                 push    ecx
.text$mn:00005670                 mov     [ebp+var_4], ecx
.text$mn:00005673                 mov     eax, [ebp+var_4]
.text$mn:00005676                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:0000567C                 mov     eax, [ebp+var_4]
.text$mn:0000567F                 mov     esp, ebp
.text$mn:00005681                 pop     ebp
.text$mn:00005682                 retn
.text$mn:00005682 ??0_Facet_base@std@@QAE@XZ endp
.text$mn:00005682
.text$mn:00005682 ; ---------------------------------------------------------------------------
.text$mn:00005683                 align 4
.text$mn:00005683 _text$mn        ends
.text$mn:00005683
.text$mn:00005684 ; ===========================================================================
.text$mn:00005684
.text$mn:00005684 ; Segment type: Pure code
.text$mn:00005684 ; Segment permissions: Read/Execute
.text$mn:00005684 _text$mn        segment para public 'CODE' use32
.text$mn:00005684                 assume cs:_text$mn
.text$mn:00005684                 ;org 5684h
.text$mn:00005684 ; COMDAT (pick any)
.text$mn:00005684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005684
.text$mn:00005684 ; =============== S U B R O U T I N E =======================================
.text$mn:00005684
.text$mn:00005684 ; Attributes: bp-based frame
.text$mn:00005684
.text$mn:00005684 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00005684                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00005684 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00005684                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00005684                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00005684
.text$mn:00005684 var_10          = dword ptr -10h
.text$mn:00005684 var_C           = dword ptr -0Ch
.text$mn:00005684 var_4           = dword ptr -4
.text$mn:00005684
.text$mn:00005684                 push    ebp
.text$mn:00005685                 mov     ebp, esp
.text$mn:00005687                 push    0FFFFFFFFh
.text$mn:00005689                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:0000568E                 mov     eax, large fs:0
.text$mn:00005694                 push    eax
.text$mn:00005695                 push    ecx
.text$mn:00005696                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000569B                 xor     eax, ebp
.text$mn:0000569D                 push    eax
.text$mn:0000569E                 lea     eax, [ebp+var_C]
.text$mn:000056A1                 mov     large fs:0, eax
.text$mn:000056A7                 mov     [ebp+var_10], ecx
.text$mn:000056AA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000056AD                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:000056B2                 mov     [ebp+var_4], 0
.text$mn:000056B9                 mov     eax, [ebp+var_10]
.text$mn:000056BC                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:000056C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000056C9                 mov     eax, [ebp+var_10]
.text$mn:000056CC                 mov     ecx, [ebp+var_C]
.text$mn:000056CF                 mov     large fs:0, ecx
.text$mn:000056D6                 pop     ecx
.text$mn:000056D7                 mov     esp, ebp
.text$mn:000056D9                 pop     ebp
.text$mn:000056DA                 retn
.text$mn:000056DA ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:000056DA
.text$mn:000056DA ; ---------------------------------------------------------------------------
.text$mn:000056DB                 align 4
.text$mn:000056DB _text$mn        ends
.text$mn:000056DB
.text$x:000056DC ; ===========================================================================
.text$x:000056DC
.text$x:000056DC ; Segment type: Pure code
.text$x:000056DC ; Segment permissions: Read/Execute
.text$x:000056DC _text$x         segment para public 'CODE' use32
.text$x:000056DC                 assume cs:_text$x
.text$x:000056DC                 ;org 56DCh
.text$x:000056DC ; COMDAT (pick associative to section at 5684)
.text$x:000056DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000056DC
.text$x:000056DC ; =============== S U B R O U T I N E =======================================
.text$x:000056DC
.text$x:000056DC
.text$x:000056DC __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:000056DC                                         ; DATA XREF: .xdata$x:0000BA30o
.text$x:000056DC                 mov     ecx, [ebp-10h]  ; this
.text$x:000056DF                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000056DF __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:000056DF
.text$x:000056E4
.text$x:000056E4 ; =============== S U B R O U T I N E =======================================
.text$x:000056E4
.text$x:000056E4
.text$x:000056E4 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:000056E4                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:000056E4
.text$x:000056E4 arg_4           = dword ptr  8
.text$x:000056E4
.text$x:000056E4                 mov     edx, [esp+arg_4]
.text$x:000056E8                 lea     eax, [edx+0Ch]
.text$x:000056EB                 mov     ecx, [edx-8]
.text$x:000056EE                 xor     ecx, eax
.text$x:000056F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000056F5                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:000056FA                 jmp     ___CxxFrameHandler3
.text$x:000056FA __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:000056FA
.text$x:000056FA ; ---------------------------------------------------------------------------
.text$x:000056FF                 align 10h
.text$x:000056FF _text$x         ends
.text$x:000056FF
.text$mn:00005700 ; ===========================================================================
.text$mn:00005700
.text$mn:00005700 ; Segment type: Pure code
.text$mn:00005700 ; Segment permissions: Read/Execute
.text$mn:00005700 _text$mn        segment para public 'CODE' use32
.text$mn:00005700                 assume cs:_text$mn
.text$mn:00005700                 ;org 5700h
.text$mn:00005700 ; COMDAT (pick any)
.text$mn:00005700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005700
.text$mn:00005700 ; =============== S U B R O U T I N E =======================================
.text$mn:00005700
.text$mn:00005700 ; Attributes: bp-based frame
.text$mn:00005700
.text$mn:00005700 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00005700                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00005700 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00005700                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00005700
.text$mn:00005700 var_10          = dword ptr -10h
.text$mn:00005700 var_C           = dword ptr -0Ch
.text$mn:00005700 var_4           = dword ptr -4
.text$mn:00005700
.text$mn:00005700                 push    ebp
.text$mn:00005701                 mov     ebp, esp
.text$mn:00005703                 push    0FFFFFFFFh
.text$mn:00005705                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000570A                 mov     eax, large fs:0
.text$mn:00005710                 push    eax
.text$mn:00005711                 push    ecx
.text$mn:00005712                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005717                 xor     eax, ebp
.text$mn:00005719                 push    eax
.text$mn:0000571A                 lea     eax, [ebp+var_C]
.text$mn:0000571D                 mov     large fs:0, eax
.text$mn:00005723                 mov     [ebp+var_10], ecx
.text$mn:00005726                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005729                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000572E                 mov     [ebp+var_4], 0
.text$mn:00005735                 mov     eax, [ebp+var_10]
.text$mn:00005738                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:0000573E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005745                 mov     eax, [ebp+var_10]
.text$mn:00005748                 mov     ecx, [ebp+var_C]
.text$mn:0000574B                 mov     large fs:0, ecx
.text$mn:00005752                 pop     ecx
.text$mn:00005753                 mov     esp, ebp
.text$mn:00005755                 pop     ebp
.text$mn:00005756                 retn
.text$mn:00005756 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00005756
.text$mn:00005756 ; ---------------------------------------------------------------------------
.text$mn:00005757                 align 4
.text$mn:00005757 _text$mn        ends
.text$mn:00005757
.text$x:00005758 ; ===========================================================================
.text$x:00005758
.text$x:00005758 ; Segment type: Pure code
.text$x:00005758 ; Segment permissions: Read/Execute
.text$x:00005758 _text$x         segment para public 'CODE' use32
.text$x:00005758                 assume cs:_text$x
.text$x:00005758                 ;org 5758h
.text$x:00005758 ; COMDAT (pick associative to section at 5700)
.text$x:00005758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005758
.text$x:00005758 ; =============== S U B R O U T I N E =======================================
.text$x:00005758
.text$x:00005758
.text$x:00005758 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00005758                                         ; DATA XREF: .xdata$x:0000BAB4o
.text$x:00005758                 mov     ecx, [ebp-10h]  ; this
.text$x:0000575B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000575B __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:0000575B
.text$x:00005760
.text$x:00005760 ; =============== S U B R O U T I N E =======================================
.text$x:00005760
.text$x:00005760
.text$x:00005760 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00005760                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00005760
.text$x:00005760 arg_4           = dword ptr  8
.text$x:00005760
.text$x:00005760                 mov     edx, [esp+arg_4]
.text$x:00005764                 lea     eax, [edx+0Ch]
.text$x:00005767                 mov     ecx, [edx-8]
.text$x:0000576A                 xor     ecx, eax
.text$x:0000576C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005771                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00005776                 jmp     ___CxxFrameHandler3
.text$x:00005776 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00005776
.text$x:00005776 ; ---------------------------------------------------------------------------
.text$x:0000577B                 align 4
.text$x:0000577B _text$x         ends
.text$x:0000577B
.text$mn:0000577C ; ===========================================================================
.text$mn:0000577C
.text$mn:0000577C ; Segment type: Pure code
.text$mn:0000577C ; Segment permissions: Read/Execute
.text$mn:0000577C _text$mn        segment para public 'CODE' use32
.text$mn:0000577C                 assume cs:_text$mn
.text$mn:0000577C                 ;org 577Ch
.text$mn:0000577C ; COMDAT (pick any)
.text$mn:0000577C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000577C
.text$mn:0000577C ; =============== S U B R O U T I N E =======================================
.text$mn:0000577C
.text$mn:0000577C ; Attributes: bp-based frame
.text$mn:0000577C
.text$mn:0000577C ; _DWORD __thiscall std::_Locinfo::_Locinfo(std::_Locinfo *this, const char *)
.text$mn:0000577C                 public ??0_Locinfo@std@@QAE@PBD@Z
.text$mn:0000577C ??0_Locinfo@std@@QAE@PBD@Z proc near    ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+80p
.text$mn:0000577C
.text$mn:0000577C var_1C          = byte ptr -1Ch
.text$mn:0000577C var_10          = dword ptr -10h
.text$mn:0000577C var_C           = dword ptr -0Ch
.text$mn:0000577C var_4           = dword ptr -4
.text$mn:0000577C arg_0           = dword ptr  8
.text$mn:0000577C
.text$mn:0000577C                 push    ebp
.text$mn:0000577D                 mov     ebp, esp
.text$mn:0000577F                 push    0FFFFFFFFh
.text$mn:00005781                 push    offset __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00005786                 mov     eax, large fs:0
.text$mn:0000578C                 push    eax
.text$mn:0000578D                 sub     esp, 10h
.text$mn:00005790                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005795                 xor     eax, ebp
.text$mn:00005797                 push    eax
.text$mn:00005798                 lea     eax, [ebp+var_C]
.text$mn:0000579B                 mov     large fs:0, eax
.text$mn:000057A1                 mov     [ebp+var_10], ecx
.text$mn:000057A4                 push    0               ; int
.text$mn:000057A6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000057A9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000057AE                 mov     [ebp+var_4], 0
.text$mn:000057B5                 mov     ecx, [ebp+var_10]
.text$mn:000057B8                 add     ecx, 4
.text$mn:000057BB                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000057C0                 mov     byte ptr [ebp+var_4], 1
.text$mn:000057C4                 mov     ecx, [ebp+var_10]
.text$mn:000057C7                 add     ecx, 0Ch
.text$mn:000057CA                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000057CF                 mov     byte ptr [ebp+var_4], 2
.text$mn:000057D3                 mov     ecx, [ebp+var_10]
.text$mn:000057D6                 add     ecx, 14h
.text$mn:000057D9                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:000057DE                 mov     byte ptr [ebp+var_4], 3
.text$mn:000057E2                 mov     ecx, [ebp+var_10]
.text$mn:000057E5                 add     ecx, 1Ch
.text$mn:000057E8                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:000057ED                 mov     byte ptr [ebp+var_4], 4
.text$mn:000057F1                 mov     ecx, [ebp+var_10]
.text$mn:000057F4                 add     ecx, 24h ; '$'
.text$mn:000057F7                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000057FC                 mov     byte ptr [ebp+var_4], 5
.text$mn:00005800                 mov     ecx, [ebp+var_10]
.text$mn:00005803                 add     ecx, 2Ch ; ','
.text$mn:00005806                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:0000580B                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000580F                 cmp     [ebp+arg_0], 0
.text$mn:00005813                 jnz     short loc_5830
.text$mn:00005815                 push    offset ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ ; "bad locale name"
.text$mn:0000581A                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000581D                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00005822                 push    offset __TI2?AVruntime_error@std@@
.text$mn:00005827                 lea     eax, [ebp+var_1C]
.text$mn:0000582A                 push    eax
.text$mn:0000582B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005830 ; ---------------------------------------------------------------------------
.text$mn:00005830
.text$mn:00005830 loc_5830:                               ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+97j
.text$mn:00005830                 mov     ecx, [ebp+arg_0]
.text$mn:00005833                 push    ecx             ; char *
.text$mn:00005834                 mov     edx, [ebp+var_10]
.text$mn:00005837                 push    edx             ; struct std::_Locinfo *
.text$mn:00005838                 call    ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor(std::_Locinfo *,char const *)
.text$mn:0000583D                 add     esp, 8
.text$mn:00005840                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005847                 mov     eax, [ebp+var_10]
.text$mn:0000584A                 mov     ecx, [ebp+var_C]
.text$mn:0000584D                 mov     large fs:0, ecx
.text$mn:00005854                 pop     ecx
.text$mn:00005855                 mov     esp, ebp
.text$mn:00005857                 pop     ebp
.text$mn:00005858                 retn    4
.text$mn:00005858 ??0_Locinfo@std@@QAE@PBD@Z endp
.text$mn:00005858
.text$mn:00005858 ; ---------------------------------------------------------------------------
.text$mn:0000585B                 align 4
.text$mn:0000585B _text$mn        ends
.text$mn:0000585B
.text$x:0000585C ; ===========================================================================
.text$x:0000585C
.text$x:0000585C ; Segment type: Pure code
.text$x:0000585C ; Segment permissions: Read/Execute
.text$x:0000585C _text$x         segment para public 'CODE' use32
.text$x:0000585C                 assume cs:_text$x
.text$x:0000585C                 ;org 585Ch
.text$x:0000585C ; COMDAT (pick associative to section at 577C)
.text$x:0000585C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000585C
.text$x:0000585C ; =============== S U B R O U T I N E =======================================
.text$x:0000585C
.text$x:0000585C
.text$x:0000585C __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 proc near
.text$x:0000585C                                         ; DATA XREF: .xdata$x:0000B668o
.text$x:0000585C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000585F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000585F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 endp
.text$x:0000585F
.text$x:00005864
.text$x:00005864 ; =============== S U B R O U T I N E =======================================
.text$x:00005864
.text$x:00005864
.text$x:00005864 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 proc near
.text$x:00005864                                         ; DATA XREF: .xdata$x:0000B670o
.text$x:00005864                 mov     ecx, [ebp-10h]
.text$x:00005867                 add     ecx, 4
.text$x:0000586A                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:0000586A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 endp
.text$x:0000586A
.text$x:0000586F
.text$x:0000586F ; =============== S U B R O U T I N E =======================================
.text$x:0000586F
.text$x:0000586F
.text$x:0000586F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 proc near
.text$x:0000586F                                         ; DATA XREF: .xdata$x:0000B678o
.text$x:0000586F                 mov     ecx, [ebp-10h]
.text$x:00005872                 add     ecx, 0Ch
.text$x:00005875                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005875 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 endp
.text$x:00005875
.text$x:0000587A
.text$x:0000587A ; =============== S U B R O U T I N E =======================================
.text$x:0000587A
.text$x:0000587A
.text$x:0000587A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 proc near
.text$x:0000587A                                         ; DATA XREF: .xdata$x:0000B680o
.text$x:0000587A                 mov     ecx, [ebp-10h]
.text$x:0000587D                 add     ecx, 14h
.text$x:00005880                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00005880 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 endp
.text$x:00005880
.text$x:00005885
.text$x:00005885 ; =============== S U B R O U T I N E =======================================
.text$x:00005885
.text$x:00005885
.text$x:00005885 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 proc near
.text$x:00005885                                         ; DATA XREF: .xdata$x:0000B688o
.text$x:00005885                 mov     ecx, [ebp-10h]
.text$x:00005888                 add     ecx, 1Ch
.text$x:0000588B                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:0000588B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 endp
.text$x:0000588B
.text$x:00005890
.text$x:00005890 ; =============== S U B R O U T I N E =======================================
.text$x:00005890
.text$x:00005890
.text$x:00005890 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 proc near
.text$x:00005890                                         ; DATA XREF: .xdata$x:0000B690o
.text$x:00005890                 mov     ecx, [ebp-10h]
.text$x:00005893                 add     ecx, 24h ; '$'
.text$x:00005896                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00005896 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 endp
.text$x:00005896
.text$x:0000589B
.text$x:0000589B ; =============== S U B R O U T I N E =======================================
.text$x:0000589B
.text$x:0000589B
.text$x:0000589B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 proc near
.text$x:0000589B                                         ; DATA XREF: .xdata$x:0000B698o
.text$x:0000589B                 mov     ecx, [ebp-10h]
.text$x:0000589E                 add     ecx, 2Ch ; ','
.text$x:000058A1                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000058A1 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 endp
.text$x:000058A1
.text$x:000058A6
.text$x:000058A6 ; =============== S U B R O U T I N E =======================================
.text$x:000058A6
.text$x:000058A6
.text$x:000058A6 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z proc near
.text$x:000058A6                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+5o
.text$x:000058A6
.text$x:000058A6 arg_4           = dword ptr  8
.text$x:000058A6
.text$x:000058A6                 mov     edx, [esp+arg_4]
.text$x:000058AA                 lea     eax, [edx+0Ch]
.text$x:000058AD                 mov     ecx, [edx-14h]
.text$x:000058B0                 xor     ecx, eax
.text$x:000058B2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000058B7                 mov     eax, offset __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
.text$x:000058BC                 jmp     ___CxxFrameHandler3
.text$x:000058BC __ehhandler$??0_Locinfo@std@@QAE@PBD@Z endp
.text$x:000058BC
.text$x:000058BC ; ---------------------------------------------------------------------------
.text$x:000058C1                 align 4
.text$x:000058C1 _text$x         ends
.text$x:000058C1
.text$mn:000058C4 ; ===========================================================================
.text$mn:000058C4
.text$mn:000058C4 ; Segment type: Pure code
.text$mn:000058C4 ; Segment permissions: Read/Execute
.text$mn:000058C4 _text$mn        segment para public 'CODE' use32
.text$mn:000058C4                 assume cs:_text$mn
.text$mn:000058C4                 ;org 58C4h
.text$mn:000058C4 ; COMDAT (pick any)
.text$mn:000058C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058C4
.text$mn:000058C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000058C4
.text$mn:000058C4 ; Attributes: bp-based frame
.text$mn:000058C4
.text$mn:000058C4 ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::_Sentry_base(class std::basic_ostream<char, struct std::char_traits<char>> &)
.text$mn:000058C4                 public ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
.text$mn:000058C4 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:000058C4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+2Dp
.text$mn:000058C4
.text$mn:000058C4 var_10          = dword ptr -10h
.text$mn:000058C4 var_C           = dword ptr -0Ch
.text$mn:000058C4 var_8           = dword ptr -8
.text$mn:000058C4 var_4           = dword ptr -4
.text$mn:000058C4 arg_0           = dword ptr  8
.text$mn:000058C4
.text$mn:000058C4                 push    ebp
.text$mn:000058C5                 mov     ebp, esp
.text$mn:000058C7                 sub     esp, 10h
.text$mn:000058CA                 mov     [ebp+var_4], ecx
.text$mn:000058CD                 mov     eax, [ebp+var_4]
.text$mn:000058D0                 mov     ecx, [ebp+arg_0]
.text$mn:000058D3                 mov     [eax], ecx
.text$mn:000058D5                 mov     edx, [ebp+var_4]
.text$mn:000058D8                 mov     eax, [edx]
.text$mn:000058DA                 mov     [ebp+var_8], eax
.text$mn:000058DD                 mov     ecx, [ebp+var_8]
.text$mn:000058E0                 mov     edx, [ecx]
.text$mn:000058E2                 mov     ecx, [ebp+var_8]
.text$mn:000058E5                 add     ecx, [edx+4]
.text$mn:000058E8                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:000058ED                 test    eax, eax
.text$mn:000058EF                 jz      short loc_5919
.text$mn:000058F1                 mov     eax, [ebp+var_4]
.text$mn:000058F4                 mov     ecx, [eax]
.text$mn:000058F6                 mov     [ebp+var_C], ecx
.text$mn:000058F9                 mov     edx, [ebp+var_C]
.text$mn:000058FC                 mov     eax, [edx]
.text$mn:000058FE                 mov     ecx, [ebp+var_C]
.text$mn:00005901                 add     ecx, [eax+4]
.text$mn:00005904                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00005909                 mov     [ebp+var_10], eax
.text$mn:0000590C                 mov     ecx, [ebp+var_10]
.text$mn:0000590F                 mov     edx, [ecx]
.text$mn:00005911                 mov     ecx, [ebp+var_10]
.text$mn:00005914                 mov     eax, [edx+4]
.text$mn:00005917                 call    eax
.text$mn:00005919
.text$mn:00005919 loc_5919:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>> &)+2Bj
.text$mn:00005919                 mov     eax, [ebp+var_4]
.text$mn:0000591C                 mov     esp, ebp
.text$mn:0000591E                 pop     ebp
.text$mn:0000591F                 retn    4
.text$mn:0000591F ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp
.text$mn:0000591F
.text$mn:0000591F ; ---------------------------------------------------------------------------
.text$mn:00005922                 align 4
.text$mn:00005922 _text$mn        ends
.text$mn:00005922
.text$mn:00005924 ; ===========================================================================
.text$mn:00005924
.text$mn:00005924 ; Segment type: Pure code
.text$mn:00005924 ; Segment permissions: Read/Execute
.text$mn:00005924 _text$mn        segment para public 'CODE' use32
.text$mn:00005924                 assume cs:_text$mn
.text$mn:00005924                 ;org 5924h
.text$mn:00005924 ; COMDAT (pick any)
.text$mn:00005924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005924
.text$mn:00005924 ; =============== S U B R O U T I N E =======================================
.text$mn:00005924
.text$mn:00005924 ; Attributes: bp-based frame
.text$mn:00005924
.text$mn:00005924 ; protected: __thiscall std::_System_error::_System_error(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00005924                 public ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00005924 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:00005924                                         ; CODE XREF: std::system_error::system_error(std::error_code,char const *)+4Dp
.text$mn:00005924
.text$mn:00005924 var_44          = dword ptr -44h
.text$mn:00005924 var_40          = dword ptr -40h
.text$mn:00005924 var_3C          = dword ptr -3Ch
.text$mn:00005924 var_38          = dword ptr -38h
.text$mn:00005924 var_34          = dword ptr -34h
.text$mn:00005924 var_30          = dword ptr -30h
.text$mn:00005924 var_2C          = byte ptr -2Ch
.text$mn:00005924 var_10          = dword ptr -10h
.text$mn:00005924 var_C           = dword ptr -0Ch
.text$mn:00005924 var_4           = dword ptr -4
.text$mn:00005924 arg_0           = dword ptr  8
.text$mn:00005924 arg_4           = dword ptr  0Ch
.text$mn:00005924 arg_8           = dword ptr  10h
.text$mn:00005924
.text$mn:00005924                 push    ebp
.text$mn:00005925                 mov     ebp, esp
.text$mn:00005927                 push    0FFFFFFFFh
.text$mn:00005929                 push    offset __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:0000592E                 mov     eax, large fs:0
.text$mn:00005934                 push    eax
.text$mn:00005935                 sub     esp, 38h
.text$mn:00005938                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000593D                 xor     eax, ebp
.text$mn:0000593F                 mov     [ebp+var_10], eax
.text$mn:00005942                 push    eax
.text$mn:00005943                 lea     eax, [ebp+var_C]
.text$mn:00005946                 mov     large fs:0, eax
.text$mn:0000594C                 mov     [ebp+var_30], ecx
.text$mn:0000594F                 sub     esp, 1Ch
.text$mn:00005952                 mov     ecx, esp
.text$mn:00005954                 mov     [ebp+var_40], esp
.text$mn:00005957                 mov     eax, [ebp+arg_8]
.text$mn:0000595A                 push    eax
.text$mn:0000595B                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00005960                 mov     [ebp+var_3C], eax
.text$mn:00005963                 mov     ecx, [ebp+var_3C]
.text$mn:00005966                 mov     [ebp+var_44], ecx
.text$mn:00005969                 mov     [ebp+var_4], 0
.text$mn:00005970                 mov     edx, [ebp+arg_4]
.text$mn:00005973                 push    edx
.text$mn:00005974                 mov     eax, [ebp+arg_0]
.text$mn:00005977                 push    eax
.text$mn:00005978                 lea     ecx, [ebp+var_2C]
.text$mn:0000597B                 push    ecx
.text$mn:0000597C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005983                 call    ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)
.text$mn:00005988                 add     esp, 28h
.text$mn:0000598B                 mov     [ebp+var_38], eax
.text$mn:0000598E                 mov     edx, [ebp+var_38]
.text$mn:00005991                 mov     [ebp+var_34], edx
.text$mn:00005994                 mov     [ebp+var_4], 1
.text$mn:0000599B                 mov     eax, [ebp+var_34]
.text$mn:0000599E                 push    eax
.text$mn:0000599F                 mov     ecx, [ebp+var_30]
.text$mn:000059A2                 call    ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:000059A7                 mov     byte ptr [ebp+var_4], 3
.text$mn:000059AB                 lea     ecx, [ebp+var_2C]
.text$mn:000059AE                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000059B3                 mov     ecx, [ebp+var_30]
.text$mn:000059B6                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:000059BC                 mov     edx, [ebp+var_30]
.text$mn:000059BF                 mov     eax, [ebp+arg_0]
.text$mn:000059C2                 mov     [edx+0Ch], eax
.text$mn:000059C5                 mov     ecx, [ebp+arg_4]
.text$mn:000059C8                 mov     [edx+10h], ecx
.text$mn:000059CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000059D2                 mov     eax, [ebp+var_30]
.text$mn:000059D5                 mov     ecx, [ebp+var_C]
.text$mn:000059D8                 mov     large fs:0, ecx
.text$mn:000059DF                 pop     ecx
.text$mn:000059E0                 mov     ecx, [ebp+var_10]
.text$mn:000059E3                 xor     ecx, ebp
.text$mn:000059E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000059EA                 mov     esp, ebp
.text$mn:000059EC                 pop     ebp
.text$mn:000059ED                 retn    0Ch
.text$mn:000059ED ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:000059ED
.text$mn:000059ED _text$mn        ends
.text$mn:000059ED
.text$x:000059F0 ; ===========================================================================
.text$x:000059F0
.text$x:000059F0 ; Segment type: Pure code
.text$x:000059F0 ; Segment permissions: Read/Execute
.text$x:000059F0 _text$x         segment para public 'CODE' use32
.text$x:000059F0                 assume cs:_text$x
.text$x:000059F0                 ;org 59F0h
.text$x:000059F0 ; COMDAT (pick associative to section at 5924)
.text$x:000059F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000059F0
.text$x:000059F0 ; =============== S U B R O U T I N E =======================================
.text$x:000059F0
.text$x:000059F0
.text$x:000059F0 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:000059F0                                         ; DATA XREF: .xdata$x:0000B900o
.text$x:000059F0                 mov     ecx, [ebp-40h]
.text$x:000059F3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000059F3 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:000059F3
.text$x:000059F8
.text$x:000059F8 ; =============== S U B R O U T I N E =======================================
.text$x:000059F8
.text$x:000059F8
.text$x:000059F8 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 proc near
.text$x:000059F8                                         ; DATA XREF: .xdata$x:0000B908o
.text$x:000059F8                 lea     ecx, [ebp-2Ch]
.text$x:000059FB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000059FB __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 endp
.text$x:000059FB
.text$x:00005A00
.text$x:00005A00 ; =============== S U B R O U T I N E =======================================
.text$x:00005A00
.text$x:00005A00
.text$x:00005A00 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 proc near
.text$x:00005A00                                         ; DATA XREF: .xdata$x:0000B910o
.text$x:00005A00                                         ; .xdata$x:0000B918o
.text$x:00005A00                 mov     ecx, [ebp-30h]  ; this
.text$x:00005A03                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00005A03 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 endp
.text$x:00005A03
.text$x:00005A08
.text$x:00005A08 ; =============== S U B R O U T I N E =======================================
.text$x:00005A08
.text$x:00005A08
.text$x:00005A08 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:00005A08                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00005A08
.text$x:00005A08 arg_4           = dword ptr  8
.text$x:00005A08
.text$x:00005A08                 mov     edx, [esp+arg_4]
.text$x:00005A0C                 lea     eax, [edx+0Ch]
.text$x:00005A0F                 mov     ecx, [edx-3Ch]
.text$x:00005A12                 xor     ecx, eax
.text$x:00005A14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A19                 mov     ecx, [edx-4]
.text$x:00005A1C                 xor     ecx, eax
.text$x:00005A1E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A23                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:00005A28                 jmp     ___CxxFrameHandler3
.text$x:00005A28 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:00005A28
.text$x:00005A28 ; ---------------------------------------------------------------------------
.text$x:00005A2D                 align 10h
.text$x:00005A2D _text$x         ends
.text$x:00005A2D
.text$mn:00005A30 ; ===========================================================================
.text$mn:00005A30
.text$mn:00005A30 ; Segment type: Pure code
.text$mn:00005A30 ; Segment permissions: Read/Execute
.text$mn:00005A30 _text$mn        segment para public 'CODE' use32
.text$mn:00005A30                 assume cs:_text$mn
.text$mn:00005A30                 ;org 5A30h
.text$mn:00005A30 ; COMDAT (pick any)
.text$mn:00005A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A30
.text$mn:00005A30 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A30
.text$mn:00005A30 ; Attributes: bp-based frame
.text$mn:00005A30
.text$mn:00005A30 ; _DWORD __thiscall std::_System_error::_System_error(std::_System_error *this, const struct std::_System_error *)
.text$mn:00005A30                 public ??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00005A30 ??0_System_error@std@@QAE@ABV01@@Z proc near
.text$mn:00005A30                                         ; CODE XREF: std::system_error::system_error(std::system_error const &)+2Dp
.text$mn:00005A30                                         ; DATA XREF: .xdata$x:0000CC28o
.text$mn:00005A30
.text$mn:00005A30 var_10          = dword ptr -10h
.text$mn:00005A30 var_C           = dword ptr -0Ch
.text$mn:00005A30 var_4           = dword ptr -4
.text$mn:00005A30 arg_0           = dword ptr  8
.text$mn:00005A30
.text$mn:00005A30                 push    ebp
.text$mn:00005A31                 mov     ebp, esp
.text$mn:00005A33                 push    0FFFFFFFFh
.text$mn:00005A35                 push    offset __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00005A3A                 mov     eax, large fs:0
.text$mn:00005A40                 push    eax
.text$mn:00005A41                 push    ecx
.text$mn:00005A42                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A47                 xor     eax, ebp
.text$mn:00005A49                 push    eax
.text$mn:00005A4A                 lea     eax, [ebp+var_C]
.text$mn:00005A4D                 mov     large fs:0, eax
.text$mn:00005A53                 mov     [ebp+var_10], ecx
.text$mn:00005A56                 mov     eax, [ebp+arg_0]
.text$mn:00005A59                 push    eax             ; struct std::runtime_error *
.text$mn:00005A5A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005A5D                 call    ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.text$mn:00005A62                 mov     [ebp+var_4], 0
.text$mn:00005A69                 mov     ecx, [ebp+var_10]
.text$mn:00005A6C                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:00005A72                 mov     edx, [ebp+arg_0]
.text$mn:00005A75                 mov     eax, [edx+0Ch]
.text$mn:00005A78                 mov     ecx, [edx+10h]
.text$mn:00005A7B                 mov     edx, [ebp+var_10]
.text$mn:00005A7E                 mov     [edx+0Ch], eax
.text$mn:00005A81                 mov     [edx+10h], ecx
.text$mn:00005A84                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005A8B                 mov     eax, [ebp+var_10]
.text$mn:00005A8E                 mov     ecx, [ebp+var_C]
.text$mn:00005A91                 mov     large fs:0, ecx
.text$mn:00005A98                 pop     ecx
.text$mn:00005A99                 mov     esp, ebp
.text$mn:00005A9B                 pop     ebp
.text$mn:00005A9C                 retn    4
.text$mn:00005A9C ??0_System_error@std@@QAE@ABV01@@Z endp
.text$mn:00005A9C
.text$mn:00005A9C ; ---------------------------------------------------------------------------
.text$mn:00005A9F                 align 10h
.text$mn:00005A9F _text$mn        ends
.text$mn:00005A9F
.text$x:00005AA0 ; ===========================================================================
.text$x:00005AA0
.text$x:00005AA0 ; Segment type: Pure code
.text$x:00005AA0 ; Segment permissions: Read/Execute
.text$x:00005AA0 _text$x         segment para public 'CODE' use32
.text$x:00005AA0                 assume cs:_text$x
.text$x:00005AA0                 ;org 5AA0h
.text$x:00005AA0 ; COMDAT (pick associative to section at 5A30)
.text$x:00005AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005AA0
.text$x:00005AA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AA0
.text$x:00005AA0
.text$x:00005AA0 __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005AA0                                         ; DATA XREF: .xdata$x:0000B970o
.text$x:00005AA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005AA3                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00005AA3 __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00005AA3
.text$x:00005AA8
.text$x:00005AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AA8
.text$x:00005AA8
.text$x:00005AA8 __ehhandler$??0_System_error@std@@QAE@ABV01@@Z proc near
.text$x:00005AA8                                         ; DATA XREF: std::_System_error::_System_error(std::_System_error const &)+5o
.text$x:00005AA8
.text$x:00005AA8 arg_4           = dword ptr  8
.text$x:00005AA8
.text$x:00005AA8                 mov     edx, [esp+arg_4]
.text$x:00005AAC                 lea     eax, [edx+0Ch]
.text$x:00005AAF                 mov     ecx, [edx-8]
.text$x:00005AB2                 xor     ecx, eax
.text$x:00005AB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AB9                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z
.text$x:00005ABE                 jmp     ___CxxFrameHandler3
.text$x:00005ABE __ehhandler$??0_System_error@std@@QAE@ABV01@@Z endp
.text$x:00005ABE
.text$x:00005ABE ; ---------------------------------------------------------------------------
.text$x:00005AC3                 align 4
.text$x:00005AC3 _text$x         ends
.text$x:00005AC3
.text$mn:00005AC4 ; ===========================================================================
.text$mn:00005AC4
.text$mn:00005AC4 ; Segment type: Pure code
.text$mn:00005AC4 ; Segment permissions: Read/Execute
.text$mn:00005AC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005AC4                 assume cs:_text$mn
.text$mn:00005AC4                 ;org 5AC4h
.text$mn:00005AC4 ; COMDAT (pick any)
.text$mn:00005AC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AC4
.text$mn:00005AC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AC4
.text$mn:00005AC4 ; Attributes: bp-based frame
.text$mn:00005AC4
.text$mn:00005AC4 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00005AC4                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00005AC4 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00005AC4                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00005AC4
.text$mn:00005AC4 var_10          = dword ptr -10h
.text$mn:00005AC4 var_C           = dword ptr -0Ch
.text$mn:00005AC4 var_4           = dword ptr -4
.text$mn:00005AC4
.text$mn:00005AC4                 push    ebp
.text$mn:00005AC5                 mov     ebp, esp
.text$mn:00005AC7                 push    0FFFFFFFFh
.text$mn:00005AC9                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00005ACE                 mov     eax, large fs:0
.text$mn:00005AD4                 push    eax
.text$mn:00005AD5                 push    ecx
.text$mn:00005AD6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005ADB                 xor     eax, ebp
.text$mn:00005ADD                 push    eax
.text$mn:00005ADE                 lea     eax, [ebp+var_C]
.text$mn:00005AE1                 mov     large fs:0, eax
.text$mn:00005AE7                 mov     [ebp+var_10], ecx
.text$mn:00005AEA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005AED                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00005AF2                 mov     [ebp+var_4], 0
.text$mn:00005AF9                 mov     eax, [ebp+var_10]
.text$mn:00005AFC                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00005B02                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B09                 mov     eax, [ebp+var_10]
.text$mn:00005B0C                 mov     ecx, [ebp+var_C]
.text$mn:00005B0F                 mov     large fs:0, ecx
.text$mn:00005B16                 pop     ecx
.text$mn:00005B17                 mov     esp, ebp
.text$mn:00005B19                 pop     ebp
.text$mn:00005B1A                 retn
.text$mn:00005B1A ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00005B1A
.text$mn:00005B1A ; ---------------------------------------------------------------------------
.text$mn:00005B1B                 align 4
.text$mn:00005B1B _text$mn        ends
.text$mn:00005B1B
.text$x:00005B1C ; ===========================================================================
.text$x:00005B1C
.text$x:00005B1C ; Segment type: Pure code
.text$x:00005B1C ; Segment permissions: Read/Execute
.text$x:00005B1C _text$x         segment para public 'CODE' use32
.text$x:00005B1C                 assume cs:_text$x
.text$x:00005B1C                 ;org 5B1Ch
.text$x:00005B1C ; COMDAT (pick associative to section at 5AC4)
.text$x:00005B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B1C
.text$x:00005B1C ; =============== S U B R O U T I N E =======================================
.text$x:00005B1C
.text$x:00005B1C
.text$x:00005B1C __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00005B1C                                         ; DATA XREF: .xdata$x:0000BB38o
.text$x:00005B1C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005B1F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005B1F __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00005B1F
.text$x:00005B24
.text$x:00005B24 ; =============== S U B R O U T I N E =======================================
.text$x:00005B24
.text$x:00005B24
.text$x:00005B24 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00005B24                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00005B24
.text$x:00005B24 arg_4           = dword ptr  8
.text$x:00005B24
.text$x:00005B24                 mov     edx, [esp+arg_4]
.text$x:00005B28                 lea     eax, [edx+0Ch]
.text$x:00005B2B                 mov     ecx, [edx-8]
.text$x:00005B2E                 xor     ecx, eax
.text$x:00005B30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B35                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00005B3A                 jmp     ___CxxFrameHandler3
.text$x:00005B3A __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00005B3A
.text$x:00005B3A ; ---------------------------------------------------------------------------
.text$x:00005B3F                 align 10h
.text$x:00005B3F _text$x         ends
.text$x:00005B3F
.text$mn:00005B40 ; ===========================================================================
.text$mn:00005B40
.text$mn:00005B40 ; Segment type: Pure code
.text$mn:00005B40 ; Segment permissions: Read/Execute
.text$mn:00005B40 _text$mn        segment para public 'CODE' use32
.text$mn:00005B40                 assume cs:_text$mn
.text$mn:00005B40                 ;org 5B40h
.text$mn:00005B40 ; COMDAT (pick any)
.text$mn:00005B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B40
.text$mn:00005B40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B40
.text$mn:00005B40 ; Attributes: bp-based frame
.text$mn:00005B40
.text$mn:00005B40 ; _DWORD __thiscall std::ctype_base::ctype_base(std::ctype_base *this, unsigned int)
.text$mn:00005B40                 public ??0ctype_base@std@@QAE@I@Z
.text$mn:00005B40 ??0ctype_base@std@@QAE@I@Z proc near    ; CODE XREF: std::ctype<char>::ctype<char>(std::_Locinfo const &,uint)+2Dp
.text$mn:00005B40
.text$mn:00005B40 var_10          = dword ptr -10h
.text$mn:00005B40 var_C           = dword ptr -0Ch
.text$mn:00005B40 var_4           = dword ptr -4
.text$mn:00005B40 arg_0           = dword ptr  8
.text$mn:00005B40
.text$mn:00005B40                 push    ebp
.text$mn:00005B41                 mov     ebp, esp
.text$mn:00005B43                 push    0FFFFFFFFh
.text$mn:00005B45                 push    offset __ehhandler$??0ctype_base@std@@QAE@I@Z
.text$mn:00005B4A                 mov     eax, large fs:0
.text$mn:00005B50                 push    eax
.text$mn:00005B51                 push    ecx
.text$mn:00005B52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B57                 xor     eax, ebp
.text$mn:00005B59                 push    eax
.text$mn:00005B5A                 lea     eax, [ebp+var_C]
.text$mn:00005B5D                 mov     large fs:0, eax
.text$mn:00005B63                 mov     [ebp+var_10], ecx
.text$mn:00005B66                 mov     eax, [ebp+arg_0]
.text$mn:00005B69                 push    eax             ; unsigned int
.text$mn:00005B6A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005B6D                 call    ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet(uint)
.text$mn:00005B72                 mov     [ebp+var_4], 0
.text$mn:00005B79                 mov     ecx, [ebp+var_10]
.text$mn:00005B7C                 mov     dword ptr [ecx], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:00005B82                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B89                 mov     eax, [ebp+var_10]
.text$mn:00005B8C                 mov     ecx, [ebp+var_C]
.text$mn:00005B8F                 mov     large fs:0, ecx
.text$mn:00005B96                 pop     ecx
.text$mn:00005B97                 mov     esp, ebp
.text$mn:00005B99                 pop     ebp
.text$mn:00005B9A                 retn    4
.text$mn:00005B9A ??0ctype_base@std@@QAE@I@Z endp
.text$mn:00005B9A
.text$mn:00005B9A ; ---------------------------------------------------------------------------
.text$mn:00005B9D                 align 10h
.text$mn:00005B9D _text$mn        ends
.text$mn:00005B9D
.text$x:00005BA0 ; ===========================================================================
.text$x:00005BA0
.text$x:00005BA0 ; Segment type: Pure code
.text$x:00005BA0 ; Segment permissions: Read/Execute
.text$x:00005BA0 _text$x         segment para public 'CODE' use32
.text$x:00005BA0                 assume cs:_text$x
.text$x:00005BA0                 ;org 5BA0h
.text$x:00005BA0 ; COMDAT (pick associative to section at 5B40)
.text$x:00005BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005BA0
.text$x:00005BA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA0
.text$x:00005BA0
.text$x:00005BA0 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 proc near
.text$x:00005BA0                                         ; DATA XREF: .xdata$x:0000B780o
.text$x:00005BA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005BA3                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00005BA3 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 endp
.text$x:00005BA3
.text$x:00005BA8
.text$x:00005BA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA8
.text$x:00005BA8
.text$x:00005BA8 __ehhandler$??0ctype_base@std@@QAE@I@Z proc near
.text$x:00005BA8                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+5o
.text$x:00005BA8
.text$x:00005BA8 arg_4           = dword ptr  8
.text$x:00005BA8
.text$x:00005BA8                 mov     edx, [esp+arg_4]
.text$x:00005BAC                 lea     eax, [edx+0Ch]
.text$x:00005BAF                 mov     ecx, [edx-8]
.text$x:00005BB2                 xor     ecx, eax
.text$x:00005BB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BB9                 mov     eax, offset __ehfuncinfo$??0ctype_base@std@@QAE@I@Z
.text$x:00005BBE                 jmp     ___CxxFrameHandler3
.text$x:00005BBE __ehhandler$??0ctype_base@std@@QAE@I@Z endp
.text$x:00005BBE
.text$x:00005BBE ; ---------------------------------------------------------------------------
.text$x:00005BC3                 align 4
.text$x:00005BC3 _text$x         ends
.text$x:00005BC3
.text$mn:00005BC4 ; ===========================================================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Segment type: Pure code
.text$mn:00005BC4 ; Segment permissions: Read/Execute
.text$mn:00005BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BC4                 assume cs:_text$mn
.text$mn:00005BC4                 ;org 5BC4h
.text$mn:00005BC4 ; COMDAT (pick any)
.text$mn:00005BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BC4
.text$mn:00005BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Attributes: bp-based frame
.text$mn:00005BC4
.text$mn:00005BC4 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00005BC4                 public ??0error_category@std@@QAE@XZ
.text$mn:00005BC4 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00005BC4
.text$mn:00005BC4 var_4           = dword ptr -4
.text$mn:00005BC4
.text$mn:00005BC4                 push    ebp
.text$mn:00005BC5                 mov     ebp, esp
.text$mn:00005BC7                 push    ecx
.text$mn:00005BC8                 mov     [ebp+var_4], ecx
.text$mn:00005BCB                 mov     eax, [ebp+var_4]
.text$mn:00005BCE                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00005BD4                 mov     eax, [ebp+var_4]
.text$mn:00005BD7                 mov     esp, ebp
.text$mn:00005BD9                 pop     ebp
.text$mn:00005BDA                 retn
.text$mn:00005BDA ??0error_category@std@@QAE@XZ endp
.text$mn:00005BDA
.text$mn:00005BDA ; ---------------------------------------------------------------------------
.text$mn:00005BDB                 align 4
.text$mn:00005BDB _text$mn        ends
.text$mn:00005BDB
.text$mn:00005BDC ; ===========================================================================
.text$mn:00005BDC
.text$mn:00005BDC ; Segment type: Pure code
.text$mn:00005BDC ; Segment permissions: Read/Execute
.text$mn:00005BDC _text$mn        segment para public 'CODE' use32
.text$mn:00005BDC                 assume cs:_text$mn
.text$mn:00005BDC                 ;org 5BDCh
.text$mn:00005BDC ; COMDAT (pick any)
.text$mn:00005BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BDC
.text$mn:00005BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005BDC
.text$mn:00005BDC ; Attributes: bp-based frame
.text$mn:00005BDC
.text$mn:00005BDC ; _DWORD __thiscall std::error_code::error_code(std::error_code *this, int, const struct std::error_category *)
.text$mn:00005BDC                 public ??0error_code@std@@QAE@HABVerror_category@1@@Z
.text$mn:00005BDC ??0error_code@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00005BDC                                         ; CODE XREF: std::make_error_code(std::io_errc)+10p
.text$mn:00005BDC
.text$mn:00005BDC var_4           = dword ptr -4
.text$mn:00005BDC arg_0           = dword ptr  8
.text$mn:00005BDC arg_4           = dword ptr  0Ch
.text$mn:00005BDC
.text$mn:00005BDC                 push    ebp
.text$mn:00005BDD                 mov     ebp, esp
.text$mn:00005BDF                 push    ecx
.text$mn:00005BE0                 mov     [ebp+var_4], ecx
.text$mn:00005BE3                 mov     eax, [ebp+var_4]
.text$mn:00005BE6                 mov     ecx, [ebp+arg_0]
.text$mn:00005BE9                 mov     [eax], ecx
.text$mn:00005BEB                 mov     edx, [ebp+var_4]
.text$mn:00005BEE                 mov     eax, [ebp+arg_4]
.text$mn:00005BF1                 mov     [edx+4], eax
.text$mn:00005BF4                 mov     eax, [ebp+var_4]
.text$mn:00005BF7                 mov     esp, ebp
.text$mn:00005BF9                 pop     ebp
.text$mn:00005BFA                 retn    8
.text$mn:00005BFA ??0error_code@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00005BFA
.text$mn:00005BFA ; ---------------------------------------------------------------------------
.text$mn:00005BFD                 align 10h
.text$mn:00005BFD _text$mn        ends
.text$mn:00005BFD
.text$mn:00005C00 ; ===========================================================================
.text$mn:00005C00
.text$mn:00005C00 ; Segment type: Pure code
.text$mn:00005C00 ; Segment permissions: Read/Execute
.text$mn:00005C00 _text$mn        segment para public 'CODE' use32
.text$mn:00005C00                 assume cs:_text$mn
.text$mn:00005C00                 ;org 5C00h
.text$mn:00005C00 ; COMDAT (pick any)
.text$mn:00005C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C00
.text$mn:00005C00 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C00
.text$mn:00005C00 ; Attributes: bp-based frame
.text$mn:00005C00
.text$mn:00005C00 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00005C00                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00005C00 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00005C00                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00005C00                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00005C00
.text$mn:00005C00 var_4           = dword ptr -4
.text$mn:00005C00 arg_0           = dword ptr  8
.text$mn:00005C00 arg_4           = dword ptr  0Ch
.text$mn:00005C00
.text$mn:00005C00                 push    ebp
.text$mn:00005C01                 mov     ebp, esp
.text$mn:00005C03                 push    ecx
.text$mn:00005C04                 mov     [ebp+var_4], ecx
.text$mn:00005C07                 mov     eax, [ebp+var_4]
.text$mn:00005C0A                 mov     ecx, [ebp+arg_0]
.text$mn:00005C0D                 mov     [eax], ecx
.text$mn:00005C0F                 mov     edx, [ebp+var_4]
.text$mn:00005C12                 mov     eax, [ebp+arg_4]
.text$mn:00005C15                 mov     [edx+4], eax
.text$mn:00005C18                 mov     eax, [ebp+var_4]
.text$mn:00005C1B                 mov     esp, ebp
.text$mn:00005C1D                 pop     ebp
.text$mn:00005C1E                 retn    8
.text$mn:00005C1E ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00005C1E
.text$mn:00005C1E ; ---------------------------------------------------------------------------
.text$mn:00005C21                 align 4
.text$mn:00005C21 _text$mn        ends
.text$mn:00005C21
.text$mn:00005C24 ; ===========================================================================
.text$mn:00005C24
.text$mn:00005C24 ; Segment type: Pure code
.text$mn:00005C24 ; Segment permissions: Read/Execute
.text$mn:00005C24 _text$mn        segment para public 'CODE' use32
.text$mn:00005C24                 assume cs:_text$mn
.text$mn:00005C24                 ;org 5C24h
.text$mn:00005C24 ; COMDAT (pick any)
.text$mn:00005C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C24
.text$mn:00005C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C24
.text$mn:00005C24 ; Attributes: bp-based frame
.text$mn:00005C24
.text$mn:00005C24 ; _DWORD __thiscall std::locale::facet::facet(std::locale::facet *this, unsigned int)
.text$mn:00005C24                 public ??0facet@locale@std@@IAE@I@Z
.text$mn:00005C24 ??0facet@locale@std@@IAE@I@Z proc near  ; CODE XREF: std::ctype_base::ctype_base(uint)+2Dp
.text$mn:00005C24
.text$mn:00005C24 var_10          = dword ptr -10h
.text$mn:00005C24 var_C           = dword ptr -0Ch
.text$mn:00005C24 var_4           = dword ptr -4
.text$mn:00005C24 arg_0           = dword ptr  8
.text$mn:00005C24
.text$mn:00005C24                 push    ebp
.text$mn:00005C25                 mov     ebp, esp
.text$mn:00005C27                 push    0FFFFFFFFh
.text$mn:00005C29                 push    offset __ehhandler$??0facet@locale@std@@IAE@I@Z
.text$mn:00005C2E                 mov     eax, large fs:0
.text$mn:00005C34                 push    eax
.text$mn:00005C35                 push    ecx
.text$mn:00005C36                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005C3B                 xor     eax, ebp
.text$mn:00005C3D                 push    eax
.text$mn:00005C3E                 lea     eax, [ebp+var_C]
.text$mn:00005C41                 mov     large fs:0, eax
.text$mn:00005C47                 mov     [ebp+var_10], ecx
.text$mn:00005C4A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005C4D                 call    ??0_Facet_base@std@@QAE@XZ ; std::_Facet_base::_Facet_base(void)
.text$mn:00005C52                 mov     [ebp+var_4], 0
.text$mn:00005C59                 mov     eax, [ebp+var_10]
.text$mn:00005C5C                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00005C62                 mov     ecx, [ebp+arg_0]
.text$mn:00005C65                 push    ecx             ; unsigned __int32
.text$mn:00005C66                 mov     edx, [ebp+var_10]
.text$mn:00005C69                 add     edx, 4
.text$mn:00005C6C                 push    edx             ; unsigned __int32 *
.text$mn:00005C6D                 call    ?_Init_atomic_counter@std@@YAXAAKK@Z ; std::_Init_atomic_counter(ulong &,ulong)
.text$mn:00005C72                 add     esp, 8
.text$mn:00005C75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C7C                 mov     eax, [ebp+var_10]
.text$mn:00005C7F                 mov     ecx, [ebp+var_C]
.text$mn:00005C82                 mov     large fs:0, ecx
.text$mn:00005C89                 pop     ecx
.text$mn:00005C8A                 mov     esp, ebp
.text$mn:00005C8C                 pop     ebp
.text$mn:00005C8D                 retn    4
.text$mn:00005C8D ??0facet@locale@std@@IAE@I@Z endp
.text$mn:00005C8D
.text$mn:00005C8D _text$mn        ends
.text$mn:00005C8D
.text$x:00005C90 ; ===========================================================================
.text$x:00005C90
.text$x:00005C90 ; Segment type: Pure code
.text$x:00005C90 ; Segment permissions: Read/Execute
.text$x:00005C90 _text$x         segment para public 'CODE' use32
.text$x:00005C90                 assume cs:_text$x
.text$x:00005C90                 ;org 5C90h
.text$x:00005C90 ; COMDAT (pick associative to section at 5C24)
.text$x:00005C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C90
.text$x:00005C90 ; =============== S U B R O U T I N E =======================================
.text$x:00005C90
.text$x:00005C90
.text$x:00005C90 __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 proc near
.text$x:00005C90                                         ; DATA XREF: .xdata$x:0000B728o
.text$x:00005C90                 mov     ecx, [ebp-10h]  ; this
.text$x:00005C93                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:00005C93 __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 endp
.text$x:00005C93
.text$x:00005C98
.text$x:00005C98 ; =============== S U B R O U T I N E =======================================
.text$x:00005C98
.text$x:00005C98
.text$x:00005C98 __ehhandler$??0facet@locale@std@@IAE@I@Z proc near
.text$x:00005C98                                         ; DATA XREF: std::locale::facet::facet(uint)+5o
.text$x:00005C98
.text$x:00005C98 arg_4           = dword ptr  8
.text$x:00005C98
.text$x:00005C98                 mov     edx, [esp+arg_4]
.text$x:00005C9C                 lea     eax, [edx+0Ch]
.text$x:00005C9F                 mov     ecx, [edx-8]
.text$x:00005CA2                 xor     ecx, eax
.text$x:00005CA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005CA9                 mov     eax, offset __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
.text$x:00005CAE                 jmp     ___CxxFrameHandler3
.text$x:00005CAE __ehhandler$??0facet@locale@std@@IAE@I@Z endp
.text$x:00005CAE
.text$x:00005CAE ; ---------------------------------------------------------------------------
.text$x:00005CB3                 align 4
.text$x:00005CB3 _text$x         ends
.text$x:00005CB3
.text$mn:00005CB4 ; ===========================================================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Segment type: Pure code
.text$mn:00005CB4 ; Segment permissions: Read/Execute
.text$mn:00005CB4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CB4                 assume cs:_text$mn
.text$mn:00005CB4                 ;org 5CB4h
.text$mn:00005CB4 ; COMDAT (pick any)
.text$mn:00005CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CB4
.text$mn:00005CB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Attributes: bp-based frame
.text$mn:00005CB4
.text$mn:00005CB4 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const struct std::ios_base::failure *)
.text$mn:00005CB4                 public ??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:00005CB4 ??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$mn:00005CB4                                         ; DATA XREF: .xdata$x:0000CBB0o
.text$mn:00005CB4
.text$mn:00005CB4 var_10          = dword ptr -10h
.text$mn:00005CB4 var_C           = dword ptr -0Ch
.text$mn:00005CB4 var_4           = dword ptr -4
.text$mn:00005CB4 arg_0           = dword ptr  8
.text$mn:00005CB4
.text$mn:00005CB4                 push    ebp
.text$mn:00005CB5                 mov     ebp, esp
.text$mn:00005CB7                 push    0FFFFFFFFh
.text$mn:00005CB9                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:00005CBE                 mov     eax, large fs:0
.text$mn:00005CC4                 push    eax
.text$mn:00005CC5                 push    ecx
.text$mn:00005CC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CCB                 xor     eax, ebp
.text$mn:00005CCD                 push    eax
.text$mn:00005CCE                 lea     eax, [ebp+var_C]
.text$mn:00005CD1                 mov     large fs:0, eax
.text$mn:00005CD7                 mov     [ebp+var_10], ecx
.text$mn:00005CDA                 mov     eax, [ebp+arg_0]
.text$mn:00005CDD                 push    eax             ; struct std::system_error *
.text$mn:00005CDE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005CE1                 call    ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.text$mn:00005CE6                 mov     [ebp+var_4], 0
.text$mn:00005CED                 mov     ecx, [ebp+var_10]
.text$mn:00005CF0                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:00005CF6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005CFD                 mov     eax, [ebp+var_10]
.text$mn:00005D00                 mov     ecx, [ebp+var_C]
.text$mn:00005D03                 mov     large fs:0, ecx
.text$mn:00005D0A                 pop     ecx
.text$mn:00005D0B                 mov     esp, ebp
.text$mn:00005D0D                 pop     ebp
.text$mn:00005D0E                 retn    4
.text$mn:00005D0E ??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$mn:00005D0E
.text$mn:00005D0E ; ---------------------------------------------------------------------------
.text$mn:00005D11                 align 4
.text$mn:00005D11 _text$mn        ends
.text$mn:00005D11
.text$x:00005D14 ; ===========================================================================
.text$x:00005D14
.text$x:00005D14 ; Segment type: Pure code
.text$x:00005D14 ; Segment permissions: Read/Execute
.text$x:00005D14 _text$x         segment para public 'CODE' use32
.text$x:00005D14                 assume cs:_text$x
.text$x:00005D14                 ;org 5D14h
.text$x:00005D14 ; COMDAT (pick associative to section at 5CB4)
.text$x:00005D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D14
.text$x:00005D14 ; =============== S U B R O U T I N E =======================================
.text$x:00005D14
.text$x:00005D14
.text$x:00005D14 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 proc near
.text$x:00005D14                                         ; DATA XREF: .xdata$x:0000BC14o
.text$x:00005D14                 mov     ecx, [ebp-10h]  ; this
.text$x:00005D17                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:00005D17 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 endp
.text$x:00005D17
.text$x:00005D1C
.text$x:00005D1C ; =============== S U B R O U T I N E =======================================
.text$x:00005D1C
.text$x:00005D1C
.text$x:00005D1C __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$x:00005D1C                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+5o
.text$x:00005D1C
.text$x:00005D1C arg_4           = dword ptr  8
.text$x:00005D1C
.text$x:00005D1C                 mov     edx, [esp+arg_4]
.text$x:00005D20                 lea     eax, [edx+0Ch]
.text$x:00005D23                 mov     ecx, [edx-8]
.text$x:00005D26                 xor     ecx, eax
.text$x:00005D28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D2D                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$x:00005D32                 jmp     ___CxxFrameHandler3
.text$x:00005D32 __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$x:00005D32
.text$x:00005D32 ; ---------------------------------------------------------------------------
.text$x:00005D37                 align 4
.text$x:00005D37 _text$x         ends
.text$x:00005D37
.text$mn:00005D38 ; ===========================================================================
.text$mn:00005D38
.text$mn:00005D38 ; Segment type: Pure code
.text$mn:00005D38 ; Segment permissions: Read/Execute
.text$mn:00005D38 _text$mn        segment para public 'CODE' use32
.text$mn:00005D38                 assume cs:_text$mn
.text$mn:00005D38                 ;org 5D38h
.text$mn:00005D38 ; COMDAT (pick any)
.text$mn:00005D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D38
.text$mn:00005D38 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D38
.text$mn:00005D38 ; Attributes: bp-based frame
.text$mn:00005D38
.text$mn:00005D38 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const char *, const struct std::error_code *)
.text$mn:00005D38                 public ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:00005D38 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$mn:00005D38                                         ; CODE XREF: std::ios_base::clear(int,bool)+66p
.text$mn:00005D38                                         ; std::ios_base::clear(int,bool)+A3p ...
.text$mn:00005D38
.text$mn:00005D38 var_10          = dword ptr -10h
.text$mn:00005D38 var_C           = dword ptr -0Ch
.text$mn:00005D38 var_4           = dword ptr -4
.text$mn:00005D38 arg_0           = dword ptr  8
.text$mn:00005D38 arg_4           = dword ptr  0Ch
.text$mn:00005D38
.text$mn:00005D38                 push    ebp
.text$mn:00005D39                 mov     ebp, esp
.text$mn:00005D3B                 push    0FFFFFFFFh
.text$mn:00005D3D                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:00005D42                 mov     eax, large fs:0
.text$mn:00005D48                 push    eax
.text$mn:00005D49                 push    ecx
.text$mn:00005D4A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D4F                 xor     eax, ebp
.text$mn:00005D51                 push    eax
.text$mn:00005D52                 lea     eax, [ebp+var_C]
.text$mn:00005D55                 mov     large fs:0, eax
.text$mn:00005D5B                 mov     [ebp+var_10], ecx
.text$mn:00005D5E                 mov     eax, [ebp+arg_0]
.text$mn:00005D61                 push    eax
.text$mn:00005D62                 mov     ecx, [ebp+arg_4]
.text$mn:00005D65                 mov     edx, [ecx+4]
.text$mn:00005D68                 push    edx
.text$mn:00005D69                 mov     eax, [ecx]
.text$mn:00005D6B                 push    eax
.text$mn:00005D6C                 mov     ecx, [ebp+var_10]
.text$mn:00005D6F                 call    ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error(std::error_code,char const *)
.text$mn:00005D74                 mov     [ebp+var_4], 0
.text$mn:00005D7B                 mov     ecx, [ebp+var_10]
.text$mn:00005D7E                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:00005D84                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D8B                 mov     eax, [ebp+var_10]
.text$mn:00005D8E                 mov     ecx, [ebp+var_C]
.text$mn:00005D91                 mov     large fs:0, ecx
.text$mn:00005D98                 pop     ecx
.text$mn:00005D99                 mov     esp, ebp
.text$mn:00005D9B                 pop     ebp
.text$mn:00005D9C                 retn    8
.text$mn:00005D9C ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$mn:00005D9C
.text$mn:00005D9C ; ---------------------------------------------------------------------------
.text$mn:00005D9F                 align 10h
.text$mn:00005D9F _text$mn        ends
.text$mn:00005D9F
.text$x:00005DA0 ; ===========================================================================
.text$x:00005DA0
.text$x:00005DA0 ; Segment type: Pure code
.text$x:00005DA0 ; Segment permissions: Read/Execute
.text$x:00005DA0 _text$x         segment para public 'CODE' use32
.text$x:00005DA0                 assume cs:_text$x
.text$x:00005DA0                 ;org 5DA0h
.text$x:00005DA0 ; COMDAT (pick associative to section at 5D38)
.text$x:00005DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DA0
.text$x:00005DA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005DA0
.text$x:00005DA0
.text$x:00005DA0 __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 proc near
.text$x:00005DA0                                         ; DATA XREF: .xdata$x:0000BBBCo
.text$x:00005DA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005DA3                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:00005DA3 __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 endp
.text$x:00005DA3
.text$x:00005DA8
.text$x:00005DA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005DA8
.text$x:00005DA8
.text$x:00005DA8 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$x:00005DA8                                         ; DATA XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+5o
.text$x:00005DA8
.text$x:00005DA8 arg_4           = dword ptr  8
.text$x:00005DA8
.text$x:00005DA8                 mov     edx, [esp+arg_4]
.text$x:00005DAC                 lea     eax, [edx+0Ch]
.text$x:00005DAF                 mov     ecx, [edx-8]
.text$x:00005DB2                 xor     ecx, eax
.text$x:00005DB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DB9                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$x:00005DBE                 jmp     ___CxxFrameHandler3
.text$x:00005DBE __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$x:00005DBE
.text$x:00005DBE ; ---------------------------------------------------------------------------
.text$x:00005DC3                 align 4
.text$x:00005DC3 _text$x         ends
.text$x:00005DC3
.text$mn:00005DC4 ; ===========================================================================
.text$mn:00005DC4
.text$mn:00005DC4 ; Segment type: Pure code
.text$mn:00005DC4 ; Segment permissions: Read/Execute
.text$mn:00005DC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DC4                 assume cs:_text$mn
.text$mn:00005DC4                 ;org 5DC4h
.text$mn:00005DC4 ; COMDAT (pick any)
.text$mn:00005DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DC4
.text$mn:00005DC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DC4
.text$mn:00005DC4 ; Attributes: bp-based frame
.text$mn:00005DC4
.text$mn:00005DC4 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00005DC4                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00005DC4 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00005DC4                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00005DC4
.text$mn:00005DC4 var_4           = dword ptr -4
.text$mn:00005DC4 arg_0           = dword ptr  8
.text$mn:00005DC4
.text$mn:00005DC4                 push    ebp
.text$mn:00005DC5                 mov     ebp, esp
.text$mn:00005DC7                 push    ecx
.text$mn:00005DC8                 mov     [ebp+var_4], ecx
.text$mn:00005DCB                 mov     eax, [ebp+var_4]
.text$mn:00005DCE                 mov     ecx, [ebp+arg_0]
.text$mn:00005DD1                 mov     [eax], ecx
.text$mn:00005DD3                 mov     eax, [ebp+var_4]
.text$mn:00005DD6                 mov     esp, ebp
.text$mn:00005DD8                 pop     ebp
.text$mn:00005DD9                 retn    4
.text$mn:00005DD9 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00005DD9
.text$mn:00005DD9 _text$mn        ends
.text$mn:00005DD9
.text$mn:00005DDC ; ===========================================================================
.text$mn:00005DDC
.text$mn:00005DDC ; Segment type: Pure code
.text$mn:00005DDC ; Segment permissions: Read/Execute
.text$mn:00005DDC _text$mn        segment para public 'CODE' use32
.text$mn:00005DDC                 assume cs:_text$mn
.text$mn:00005DDC                 ;org 5DDCh
.text$mn:00005DDC ; COMDAT (pick any)
.text$mn:00005DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DDC
.text$mn:00005DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005DDC
.text$mn:00005DDC ; Attributes: bp-based frame
.text$mn:00005DDC
.text$mn:00005DDC ; _DWORD __thiscall std::ios_base::ios_base(std::ios_base *__hidden this)
.text$mn:00005DDC                 public ??0ios_base@std@@IAE@XZ
.text$mn:00005DDC ??0ios_base@std@@IAE@XZ proc near       ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)+29p
.text$mn:00005DDC
.text$mn:00005DDC var_4           = dword ptr -4
.text$mn:00005DDC
.text$mn:00005DDC                 push    ebp
.text$mn:00005DDD                 mov     ebp, esp
.text$mn:00005DDF                 push    ecx
.text$mn:00005DE0                 mov     [ebp+var_4], ecx
.text$mn:00005DE3                 mov     eax, [ebp+var_4]
.text$mn:00005DE6                 mov     dword ptr [eax], offset ??_7ios_base@std@@6B@ ; const std::ios_base::`vftable'
.text$mn:00005DEC                 mov     eax, [ebp+var_4]
.text$mn:00005DEF                 mov     esp, ebp
.text$mn:00005DF1                 pop     ebp
.text$mn:00005DF2                 retn
.text$mn:00005DF2 ??0ios_base@std@@IAE@XZ endp
.text$mn:00005DF2
.text$mn:00005DF2 ; ---------------------------------------------------------------------------
.text$mn:00005DF3                 align 4
.text$mn:00005DF3 _text$mn        ends
.text$mn:00005DF3
.text$mn:00005DF4 ; ===========================================================================
.text$mn:00005DF4
.text$mn:00005DF4 ; Segment type: Pure code
.text$mn:00005DF4 ; Segment permissions: Read/Execute
.text$mn:00005DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DF4                 assume cs:_text$mn
.text$mn:00005DF4                 ;org 5DF4h
.text$mn:00005DF4 ; COMDAT (pick any)
.text$mn:00005DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DF4
.text$mn:00005DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DF4
.text$mn:00005DF4 ; Attributes: bp-based frame
.text$mn:00005DF4
.text$mn:00005DF4 ; _DWORD __thiscall std::locale::locale(std::locale *this, const struct std::locale *)
.text$mn:00005DF4                 public ??0locale@std@@QAE@ABV01@@Z
.text$mn:00005DF4 ??0locale@std@@QAE@ABV01@@Z proc near   ; CODE XREF: std::ios_base::getloc(void)+39p
.text$mn:00005DF4
.text$mn:00005DF4 var_4           = dword ptr -4
.text$mn:00005DF4 arg_0           = dword ptr  8
.text$mn:00005DF4
.text$mn:00005DF4                 push    ebp
.text$mn:00005DF5                 mov     ebp, esp
.text$mn:00005DF7                 push    ecx
.text$mn:00005DF8                 mov     [ebp+var_4], ecx
.text$mn:00005DFB                 mov     eax, [ebp+var_4]
.text$mn:00005DFE                 mov     ecx, [ebp+arg_0]
.text$mn:00005E01                 mov     edx, [ecx]
.text$mn:00005E03                 mov     [eax], edx
.text$mn:00005E05                 mov     eax, [ebp+var_4]
.text$mn:00005E08                 mov     ecx, [eax]
.text$mn:00005E0A                 mov     edx, [ebp+var_4]
.text$mn:00005E0D                 mov     eax, [ecx]
.text$mn:00005E0F                 mov     ecx, [edx]
.text$mn:00005E11                 mov     edx, [eax+4]
.text$mn:00005E14                 call    edx
.text$mn:00005E16                 mov     eax, [ebp+var_4]
.text$mn:00005E19                 mov     esp, ebp
.text$mn:00005E1B                 pop     ebp
.text$mn:00005E1C                 retn    4
.text$mn:00005E1C ??0locale@std@@QAE@ABV01@@Z endp
.text$mn:00005E1C
.text$mn:00005E1C ; ---------------------------------------------------------------------------
.text$mn:00005E1F                 align 10h
.text$mn:00005E1F _text$mn        ends
.text$mn:00005E1F
.text$mn:00005E20 ; ===========================================================================
.text$mn:00005E20
.text$mn:00005E20 ; Segment type: Pure code
.text$mn:00005E20 ; Segment permissions: Read/Execute
.text$mn:00005E20 _text$mn        segment para public 'CODE' use32
.text$mn:00005E20                 assume cs:_text$mn
.text$mn:00005E20                 ;org 5E20h
.text$mn:00005E20 ; COMDAT (pick any)
.text$mn:00005E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E20
.text$mn:00005E20 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E20
.text$mn:00005E20 ; Attributes: bp-based frame
.text$mn:00005E20
.text$mn:00005E20 ; _DWORD __thiscall std::locale::locale(std::locale *__hidden this)
.text$mn:00005E20                 public ??0locale@std@@QAE@XZ
.text$mn:00005E20 ??0locale@std@@QAE@XZ proc near         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+35p
.text$mn:00005E20                                         ; std::ios_base::_Init(void)+97p
.text$mn:00005E20
.text$mn:00005E20 var_4           = dword ptr -4
.text$mn:00005E20
.text$mn:00005E20                 push    ebp
.text$mn:00005E21                 mov     ebp, esp
.text$mn:00005E23                 push    ecx
.text$mn:00005E24                 mov     [ebp+var_4], ecx
.text$mn:00005E27                 push    1               ; bool
.text$mn:00005E29                 call    ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init(bool)
.text$mn:00005E2E                 add     esp, 4
.text$mn:00005E31                 mov     ecx, [ebp+var_4]
.text$mn:00005E34                 mov     [ecx], eax
.text$mn:00005E36                 mov     eax, [ebp+var_4]
.text$mn:00005E39                 mov     esp, ebp
.text$mn:00005E3B                 pop     ebp
.text$mn:00005E3C                 retn
.text$mn:00005E3C ??0locale@std@@QAE@XZ endp
.text$mn:00005E3C
.text$mn:00005E3C ; ---------------------------------------------------------------------------
.text$mn:00005E3D                 align 10h
.text$mn:00005E3D _text$mn        ends
.text$mn:00005E3D
.text$mn:00005E40 ; ===========================================================================
.text$mn:00005E40
.text$mn:00005E40 ; Segment type: Pure code
.text$mn:00005E40 ; Segment permissions: Read/Execute
.text$mn:00005E40 _text$mn        segment para public 'CODE' use32
.text$mn:00005E40                 assume cs:_text$mn
.text$mn:00005E40                 ;org 5E40h
.text$mn:00005E40 ; COMDAT (pick any)
.text$mn:00005E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E40
.text$mn:00005E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E40
.text$mn:00005E40 ; Attributes: bp-based frame
.text$mn:00005E40
.text$mn:00005E40 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:00005E40                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00005E40 ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:00005E40                                         ; CODE XREF: std::_System_error::_System_error(std::_System_error const &)+2Dp
.text$mn:00005E40                                         ; DATA XREF: .xdata$x:0000C8D4o
.text$mn:00005E40
.text$mn:00005E40 var_10          = dword ptr -10h
.text$mn:00005E40 var_C           = dword ptr -0Ch
.text$mn:00005E40 var_4           = dword ptr -4
.text$mn:00005E40 arg_0           = dword ptr  8
.text$mn:00005E40
.text$mn:00005E40                 push    ebp
.text$mn:00005E41                 mov     ebp, esp
.text$mn:00005E43                 push    0FFFFFFFFh
.text$mn:00005E45                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00005E4A                 mov     eax, large fs:0
.text$mn:00005E50                 push    eax
.text$mn:00005E51                 push    ecx
.text$mn:00005E52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E57                 xor     eax, ebp
.text$mn:00005E59                 push    eax
.text$mn:00005E5A                 lea     eax, [ebp+var_C]
.text$mn:00005E5D                 mov     large fs:0, eax
.text$mn:00005E63                 mov     [ebp+var_10], ecx
.text$mn:00005E66                 mov     eax, [ebp+arg_0]
.text$mn:00005E69                 push    eax             ; struct std::exception *
.text$mn:00005E6A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005E6D                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:00005E72                 mov     [ebp+var_4], 0
.text$mn:00005E79                 mov     ecx, [ebp+var_10]
.text$mn:00005E7C                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00005E82                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E89                 mov     eax, [ebp+var_10]
.text$mn:00005E8C                 mov     ecx, [ebp+var_C]
.text$mn:00005E8F                 mov     large fs:0, ecx
.text$mn:00005E96                 pop     ecx
.text$mn:00005E97                 mov     esp, ebp
.text$mn:00005E99                 pop     ebp
.text$mn:00005E9A                 retn    4
.text$mn:00005E9A ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:00005E9A
.text$mn:00005E9A ; ---------------------------------------------------------------------------
.text$mn:00005E9D                 align 10h
.text$mn:00005E9D _text$mn        ends
.text$mn:00005E9D
.text$x:00005EA0 ; ===========================================================================
.text$x:00005EA0
.text$x:00005EA0 ; Segment type: Pure code
.text$x:00005EA0 ; Segment permissions: Read/Execute
.text$x:00005EA0 _text$x         segment para public 'CODE' use32
.text$x:00005EA0                 assume cs:_text$x
.text$x:00005EA0                 ;org 5EA0h
.text$x:00005EA0 ; COMDAT (pick associative to section at 5E40)
.text$x:00005EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EA0
.text$x:00005EA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005EA0
.text$x:00005EA0
.text$x:00005EA0 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005EA0                                         ; DATA XREF: .xdata$x:0000B618o
.text$x:00005EA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005EA3                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00005EA3 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00005EA3
.text$x:00005EA8
.text$x:00005EA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005EA8
.text$x:00005EA8
.text$x:00005EA8 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:00005EA8                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:00005EA8
.text$x:00005EA8 arg_4           = dword ptr  8
.text$x:00005EA8
.text$x:00005EA8                 mov     edx, [esp+arg_4]
.text$x:00005EAC                 lea     eax, [edx+0Ch]
.text$x:00005EAF                 mov     ecx, [edx-8]
.text$x:00005EB2                 xor     ecx, eax
.text$x:00005EB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EB9                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:00005EBE                 jmp     ___CxxFrameHandler3
.text$x:00005EBE __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:00005EBE
.text$x:00005EBE ; ---------------------------------------------------------------------------
.text$x:00005EC3                 align 4
.text$x:00005EC3 _text$x         ends
.text$x:00005EC3
.text$mn:00005EC4 ; ===========================================================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Segment type: Pure code
.text$mn:00005EC4 ; Segment permissions: Read/Execute
.text$mn:00005EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EC4                 assume cs:_text$mn
.text$mn:00005EC4                 ;org 5EC4h
.text$mn:00005EC4 ; COMDAT (pick any)
.text$mn:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EC4
.text$mn:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Attributes: bp-based frame
.text$mn:00005EC4
.text$mn:00005EC4 ; public: __thiscall std::runtime_error::runtime_error(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00005EC4                 public ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00005EC4 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:00005EC4                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+7Ep
.text$mn:00005EC4
.text$mn:00005EC4 var_14          = dword ptr -14h
.text$mn:00005EC4 var_10          = dword ptr -10h
.text$mn:00005EC4 var_C           = dword ptr -0Ch
.text$mn:00005EC4 var_4           = dword ptr -4
.text$mn:00005EC4 arg_0           = dword ptr  8
.text$mn:00005EC4
.text$mn:00005EC4                 push    ebp
.text$mn:00005EC5                 mov     ebp, esp
.text$mn:00005EC7                 push    0FFFFFFFFh
.text$mn:00005EC9                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00005ECE                 mov     eax, large fs:0
.text$mn:00005ED4                 push    eax
.text$mn:00005ED5                 sub     esp, 8
.text$mn:00005ED8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EDD                 xor     eax, ebp
.text$mn:00005EDF                 push    eax
.text$mn:00005EE0                 lea     eax, [ebp+var_C]
.text$mn:00005EE3                 mov     large fs:0, eax
.text$mn:00005EE9                 mov     [ebp+var_10], ecx
.text$mn:00005EEC                 mov     ecx, [ebp+arg_0]
.text$mn:00005EEF                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00005EF4                 mov     [ebp+var_14], eax
.text$mn:00005EF7                 lea     eax, [ebp+var_14]
.text$mn:00005EFA                 push    eax             ; char **
.text$mn:00005EFB                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005EFE                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:00005F03                 mov     [ebp+var_4], 0
.text$mn:00005F0A                 mov     ecx, [ebp+var_10]
.text$mn:00005F0D                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00005F13                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F1A                 mov     eax, [ebp+var_10]
.text$mn:00005F1D                 mov     ecx, [ebp+var_C]
.text$mn:00005F20                 mov     large fs:0, ecx
.text$mn:00005F27                 pop     ecx
.text$mn:00005F28                 mov     esp, ebp
.text$mn:00005F2A                 pop     ebp
.text$mn:00005F2B                 retn    4
.text$mn:00005F2B ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:00005F2B
.text$mn:00005F2B ; ---------------------------------------------------------------------------
.text$mn:00005F2E                 align 10h
.text$mn:00005F2E _text$mn        ends
.text$mn:00005F2E
.text$x:00005F30 ; ===========================================================================
.text$x:00005F30
.text$x:00005F30 ; Segment type: Pure code
.text$x:00005F30 ; Segment permissions: Read/Execute
.text$x:00005F30 _text$x         segment para public 'CODE' use32
.text$x:00005F30                 assume cs:_text$x
.text$x:00005F30                 ;org 5F30h
.text$x:00005F30 ; COMDAT (pick associative to section at 5EC4)
.text$x:00005F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F30
.text$x:00005F30 ; =============== S U B R O U T I N E =======================================
.text$x:00005F30
.text$x:00005F30
.text$x:00005F30 __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:00005F30                                         ; DATA XREF: .xdata$x:0000B594o
.text$x:00005F30                 mov     ecx, [ebp-10h]  ; this
.text$x:00005F33                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00005F33 __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:00005F33
.text$x:00005F38
.text$x:00005F38 ; =============== S U B R O U T I N E =======================================
.text$x:00005F38
.text$x:00005F38
.text$x:00005F38 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:00005F38                                         ; DATA XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00005F38
.text$x:00005F38 arg_4           = dword ptr  8
.text$x:00005F38
.text$x:00005F38                 mov     edx, [esp+arg_4]
.text$x:00005F3C                 lea     eax, [edx+0Ch]
.text$x:00005F3F                 mov     ecx, [edx-0Ch]
.text$x:00005F42                 xor     ecx, eax
.text$x:00005F44                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F49                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:00005F4E                 jmp     ___CxxFrameHandler3
.text$x:00005F4E __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:00005F4E
.text$x:00005F4E ; ---------------------------------------------------------------------------
.text$x:00005F53                 align 4
.text$x:00005F53 _text$x         ends
.text$x:00005F53
.text$mn:00005F54 ; ===========================================================================
.text$mn:00005F54
.text$mn:00005F54 ; Segment type: Pure code
.text$mn:00005F54 ; Segment permissions: Read/Execute
.text$mn:00005F54 _text$mn        segment para public 'CODE' use32
.text$mn:00005F54                 assume cs:_text$mn
.text$mn:00005F54                 ;org 5F54h
.text$mn:00005F54 ; COMDAT (pick any)
.text$mn:00005F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F54
.text$mn:00005F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F54
.text$mn:00005F54 ; Attributes: bp-based frame
.text$mn:00005F54
.text$mn:00005F54 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:00005F54                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:00005F54 ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:00005F54                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+A1p
.text$mn:00005F54
.text$mn:00005F54 var_10          = dword ptr -10h
.text$mn:00005F54 var_C           = dword ptr -0Ch
.text$mn:00005F54 var_4           = dword ptr -4
.text$mn:00005F54 arg_0           = dword ptr  8
.text$mn:00005F54
.text$mn:00005F54                 push    ebp
.text$mn:00005F55                 mov     ebp, esp
.text$mn:00005F57                 push    0FFFFFFFFh
.text$mn:00005F59                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:00005F5E                 mov     eax, large fs:0
.text$mn:00005F64                 push    eax
.text$mn:00005F65                 push    ecx
.text$mn:00005F66                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F6B                 xor     eax, ebp
.text$mn:00005F6D                 push    eax
.text$mn:00005F6E                 lea     eax, [ebp+var_C]
.text$mn:00005F71                 mov     large fs:0, eax
.text$mn:00005F77                 mov     [ebp+var_10], ecx
.text$mn:00005F7A                 lea     eax, [ebp+arg_0]
.text$mn:00005F7D                 push    eax             ; char **
.text$mn:00005F7E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005F81                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:00005F86                 mov     [ebp+var_4], 0
.text$mn:00005F8D                 mov     ecx, [ebp+var_10]
.text$mn:00005F90                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00005F96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F9D                 mov     eax, [ebp+var_10]
.text$mn:00005FA0                 mov     ecx, [ebp+var_C]
.text$mn:00005FA3                 mov     large fs:0, ecx
.text$mn:00005FAA                 pop     ecx
.text$mn:00005FAB                 mov     esp, ebp
.text$mn:00005FAD                 pop     ebp
.text$mn:00005FAE                 retn    4
.text$mn:00005FAE ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:00005FAE
.text$mn:00005FAE ; ---------------------------------------------------------------------------
.text$mn:00005FB1                 align 4
.text$mn:00005FB1 _text$mn        ends
.text$mn:00005FB1
.text$x:00005FB4 ; ===========================================================================
.text$x:00005FB4
.text$x:00005FB4 ; Segment type: Pure code
.text$x:00005FB4 ; Segment permissions: Read/Execute
.text$x:00005FB4 _text$x         segment para public 'CODE' use32
.text$x:00005FB4                 assume cs:_text$x
.text$x:00005FB4                 ;org 5FB4h
.text$x:00005FB4 ; COMDAT (pick associative to section at 5F54)
.text$x:00005FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005FB4
.text$x:00005FB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005FB4
.text$x:00005FB4
.text$x:00005FB4 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:00005FB4                                         ; DATA XREF: .xdata$x:0000B5C0o
.text$x:00005FB4                 mov     ecx, [ebp-10h]  ; this
.text$x:00005FB7                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00005FB7 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:00005FB7
.text$x:00005FBC
.text$x:00005FBC ; =============== S U B R O U T I N E =======================================
.text$x:00005FBC
.text$x:00005FBC
.text$x:00005FBC __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:00005FBC                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:00005FBC
.text$x:00005FBC arg_4           = dword ptr  8
.text$x:00005FBC
.text$x:00005FBC                 mov     edx, [esp+arg_4]
.text$x:00005FC0                 lea     eax, [edx+0Ch]
.text$x:00005FC3                 mov     ecx, [edx-8]
.text$x:00005FC6                 xor     ecx, eax
.text$x:00005FC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005FCD                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:00005FD2                 jmp     ___CxxFrameHandler3
.text$x:00005FD2 __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:00005FD2
.text$x:00005FD2 ; ---------------------------------------------------------------------------
.text$x:00005FD7                 align 4
.text$x:00005FD7 _text$x         ends
.text$x:00005FD7
.text$mn:00005FD8 ; ===========================================================================
.text$mn:00005FD8
.text$mn:00005FD8 ; Segment type: Pure code
.text$mn:00005FD8 ; Segment permissions: Read/Execute
.text$mn:00005FD8 _text$mn        segment para public 'CODE' use32
.text$mn:00005FD8                 assume cs:_text$mn
.text$mn:00005FD8                 ;org 5FD8h
.text$mn:00005FD8 ; COMDAT (pick any)
.text$mn:00005FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FD8
.text$mn:00005FD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FD8
.text$mn:00005FD8 ; Attributes: bp-based frame
.text$mn:00005FD8
.text$mn:00005FD8 ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::sentry(class std::basic_ostream<char, struct std::char_traits<char>> &)
.text$mn:00005FD8                 public ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
.text$mn:00005FD8 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00005FD8                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+A9p
.text$mn:00005FD8                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+CDp ...
.text$mn:00005FD8
.text$mn:00005FD8 var_10          = dword ptr -10h
.text$mn:00005FD8 var_C           = dword ptr -0Ch
.text$mn:00005FD8 var_4           = dword ptr -4
.text$mn:00005FD8 arg_0           = dword ptr  8
.text$mn:00005FD8
.text$mn:00005FD8                 push    ebp
.text$mn:00005FD9                 mov     ebp, esp
.text$mn:00005FDB                 push    0FFFFFFFFh
.text$mn:00005FDD                 push    offset __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
.text$mn:00005FE2                 mov     eax, large fs:0
.text$mn:00005FE8                 push    eax
.text$mn:00005FE9                 push    ecx
.text$mn:00005FEA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FEF                 xor     eax, ebp
.text$mn:00005FF1                 push    eax
.text$mn:00005FF2                 lea     eax, [ebp+var_C]
.text$mn:00005FF5                 mov     large fs:0, eax
.text$mn:00005FFB                 mov     [ebp+var_10], ecx
.text$mn:00005FFE                 mov     eax, [ebp+arg_0]
.text$mn:00006001                 push    eax
.text$mn:00006002                 mov     ecx, [ebp+var_10]
.text$mn:00006005                 call    ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::_Sentry_base(std::basic_ostream<char,std::char_traits<char>> &)
.text$mn:0000600A                 mov     [ebp+var_4], 0
.text$mn:00006011                 mov     ecx, [ebp+arg_0]
.text$mn:00006014                 mov     edx, [ecx]
.text$mn:00006016                 mov     ecx, [ebp+arg_0]
.text$mn:00006019                 add     ecx, [edx+4]    ; this
.text$mn:0000601C                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00006021                 movzx   eax, al
.text$mn:00006024                 test    eax, eax
.text$mn:00006026                 jz      short loc_606C
.text$mn:00006028                 mov     ecx, [ebp+arg_0]
.text$mn:0000602B                 mov     edx, [ecx]
.text$mn:0000602D                 mov     ecx, [ebp+arg_0]
.text$mn:00006030                 add     ecx, [edx+4]
.text$mn:00006033                 call    ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
.text$mn:00006038                 test    eax, eax
.text$mn:0000603A                 jz      short loc_606C
.text$mn:0000603C                 mov     eax, [ebp+arg_0]
.text$mn:0000603F                 mov     ecx, [eax]
.text$mn:00006041                 mov     edx, [ebp+arg_0]
.text$mn:00006044                 add     edx, [ecx+4]
.text$mn:00006047                 mov     ecx, edx
.text$mn:00006049                 call    ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
.text$mn:0000604E                 cmp     eax, [ebp+arg_0]
.text$mn:00006051                 jz      short loc_606C
.text$mn:00006053                 mov     eax, [ebp+arg_0]
.text$mn:00006056                 mov     ecx, [eax]
.text$mn:00006058                 mov     edx, [ebp+arg_0]
.text$mn:0000605B                 add     edx, [ecx+4]
.text$mn:0000605E                 mov     ecx, edx
.text$mn:00006060                 call    ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::tie(void)
.text$mn:00006065                 mov     ecx, eax
.text$mn:00006067                 call    ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char>>::flush(void)
.text$mn:0000606C
.text$mn:0000606C loc_606C:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+4Ej
.text$mn:0000606C                                         ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+62j ...
.text$mn:0000606C                 mov     eax, [ebp+arg_0]
.text$mn:0000606F                 mov     ecx, [eax]
.text$mn:00006071                 mov     edx, [ebp+arg_0]
.text$mn:00006074                 add     edx, [ecx+4]
.text$mn:00006077                 mov     ecx, edx        ; this
.text$mn:00006079                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000607E                 mov     ecx, [ebp+var_10]
.text$mn:00006081                 mov     [ecx+4], al
.text$mn:00006084                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000608B                 mov     eax, [ebp+var_10]
.text$mn:0000608E                 mov     ecx, [ebp+var_C]
.text$mn:00006091                 mov     large fs:0, ecx
.text$mn:00006098                 pop     ecx
.text$mn:00006099                 mov     esp, ebp
.text$mn:0000609B                 pop     ebp
.text$mn:0000609C                 retn    4
.text$mn:0000609C ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp
.text$mn:0000609C
.text$mn:0000609C ; ---------------------------------------------------------------------------
.text$mn:0000609F                 align 10h
.text$mn:0000609F _text$mn        ends
.text$mn:0000609F
.text$x:000060A0 ; ===========================================================================
.text$x:000060A0
.text$x:000060A0 ; Segment type: Pure code
.text$x:000060A0 ; Segment permissions: Read/Execute
.text$x:000060A0 _text$x         segment para public 'CODE' use32
.text$x:000060A0                 assume cs:_text$x
.text$x:000060A0                 ;org 60A0h
.text$x:000060A0 ; COMDAT (pick associative to section at 5FD8)
.text$x:000060A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000060A0
.text$x:000060A0 ; =============== S U B R O U T I N E =======================================
.text$x:000060A0
.text$x:000060A0
.text$x:000060A0 __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
.text$x:000060A0                                         ; DATA XREF: .xdata$x:0000C7ECo
.text$x:000060A0                 mov     ecx, [ebp-10h]
.text$x:000060A3                 jmp     ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
.text$x:000060A3 __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 endp
.text$x:000060A3
.text$x:000060A8
.text$x:000060A8 ; =============== S U B R O U T I N E =======================================
.text$x:000060A8
.text$x:000060A8
.text$x:000060A8 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
.text$x:000060A8                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+5o
.text$x:000060A8
.text$x:000060A8 arg_4           = dword ptr  8
.text$x:000060A8
.text$x:000060A8                 mov     edx, [esp+arg_4]
.text$x:000060AC                 lea     eax, [edx+0Ch]
.text$x:000060AF                 mov     ecx, [edx-8]
.text$x:000060B2                 xor     ecx, eax
.text$x:000060B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060B9                 mov     eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
.text$x:000060BE                 jmp     ___CxxFrameHandler3
.text$x:000060BE __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z endp
.text$x:000060BE
.text$x:000060BE ; ---------------------------------------------------------------------------
.text$x:000060C3                 align 4
.text$x:000060C3 _text$x         ends
.text$x:000060C3
.text$mn:000060C4 ; ===========================================================================
.text$mn:000060C4
.text$mn:000060C4 ; Segment type: Pure code
.text$mn:000060C4 ; Segment permissions: Read/Execute
.text$mn:000060C4 _text$mn        segment para public 'CODE' use32
.text$mn:000060C4                 assume cs:_text$mn
.text$mn:000060C4                 ;org 60C4h
.text$mn:000060C4 ; COMDAT (pick any)
.text$mn:000060C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060C4
.text$mn:000060C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000060C4
.text$mn:000060C4 ; Attributes: bp-based frame
.text$mn:000060C4
.text$mn:000060C4 ; _DWORD __thiscall std::system_error::system_error(std::system_error *this, const struct std::system_error *)
.text$mn:000060C4                 public ??0system_error@std@@QAE@ABV01@@Z
.text$mn:000060C4 ??0system_error@std@@QAE@ABV01@@Z proc near
.text$mn:000060C4                                         ; CODE XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+2Dp
.text$mn:000060C4                                         ; DATA XREF: .xdata$x:0000CBECo
.text$mn:000060C4
.text$mn:000060C4 var_10          = dword ptr -10h
.text$mn:000060C4 var_C           = dword ptr -0Ch
.text$mn:000060C4 var_4           = dword ptr -4
.text$mn:000060C4 arg_0           = dword ptr  8
.text$mn:000060C4
.text$mn:000060C4                 push    ebp
.text$mn:000060C5                 mov     ebp, esp
.text$mn:000060C7                 push    0FFFFFFFFh
.text$mn:000060C9                 push    offset __ehhandler$??0system_error@std@@QAE@ABV01@@Z
.text$mn:000060CE                 mov     eax, large fs:0
.text$mn:000060D4                 push    eax
.text$mn:000060D5                 push    ecx
.text$mn:000060D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000060DB                 xor     eax, ebp
.text$mn:000060DD                 push    eax
.text$mn:000060DE                 lea     eax, [ebp+var_C]
.text$mn:000060E1                 mov     large fs:0, eax
.text$mn:000060E7                 mov     [ebp+var_10], ecx
.text$mn:000060EA                 mov     eax, [ebp+arg_0]
.text$mn:000060ED                 push    eax             ; struct std::_System_error *
.text$mn:000060EE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000060F1                 call    ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.text$mn:000060F6                 mov     [ebp+var_4], 0
.text$mn:000060FD                 mov     ecx, [ebp+var_10]
.text$mn:00006100                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:00006106                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000610D                 mov     eax, [ebp+var_10]
.text$mn:00006110                 mov     ecx, [ebp+var_C]
.text$mn:00006113                 mov     large fs:0, ecx
.text$mn:0000611A                 pop     ecx
.text$mn:0000611B                 mov     esp, ebp
.text$mn:0000611D                 pop     ebp
.text$mn:0000611E                 retn    4
.text$mn:0000611E ??0system_error@std@@QAE@ABV01@@Z endp
.text$mn:0000611E
.text$mn:0000611E ; ---------------------------------------------------------------------------
.text$mn:00006121                 align 4
.text$mn:00006121 _text$mn        ends
.text$mn:00006121
.text$x:00006124 ; ===========================================================================
.text$x:00006124
.text$x:00006124 ; Segment type: Pure code
.text$x:00006124 ; Segment permissions: Read/Execute
.text$x:00006124 _text$x         segment para public 'CODE' use32
.text$x:00006124                 assume cs:_text$x
.text$x:00006124                 ;org 6124h
.text$x:00006124 ; COMDAT (pick associative to section at 60C4)
.text$x:00006124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006124
.text$x:00006124 ; =============== S U B R O U T I N E =======================================
.text$x:00006124
.text$x:00006124
.text$x:00006124 __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006124                                         ; DATA XREF: .xdata$x:0000BA04o
.text$x:00006124                 mov     ecx, [ebp-10h]  ; this
.text$x:00006127                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:00006127 __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00006127
.text$x:0000612C
.text$x:0000612C ; =============== S U B R O U T I N E =======================================
.text$x:0000612C
.text$x:0000612C
.text$x:0000612C __ehhandler$??0system_error@std@@QAE@ABV01@@Z proc near
.text$x:0000612C                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+5o
.text$x:0000612C
.text$x:0000612C arg_4           = dword ptr  8
.text$x:0000612C
.text$x:0000612C                 mov     edx, [esp+arg_4]
.text$x:00006130                 lea     eax, [edx+0Ch]
.text$x:00006133                 mov     ecx, [edx-8]
.text$x:00006136                 xor     ecx, eax
.text$x:00006138                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000613D                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z
.text$x:00006142                 jmp     ___CxxFrameHandler3
.text$x:00006142 __ehhandler$??0system_error@std@@QAE@ABV01@@Z endp
.text$x:00006142
.text$x:00006142 ; ---------------------------------------------------------------------------
.text$x:00006147                 align 4
.text$x:00006147 _text$x         ends
.text$x:00006147
.text$mn:00006148 ; ===========================================================================
.text$mn:00006148
.text$mn:00006148 ; Segment type: Pure code
.text$mn:00006148 ; Segment permissions: Read/Execute
.text$mn:00006148 _text$mn        segment para public 'CODE' use32
.text$mn:00006148                 assume cs:_text$mn
.text$mn:00006148                 ;org 6148h
.text$mn:00006148 ; COMDAT (pick any)
.text$mn:00006148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006148
.text$mn:00006148 ; =============== S U B R O U T I N E =======================================
.text$mn:00006148
.text$mn:00006148 ; Attributes: bp-based frame
.text$mn:00006148
.text$mn:00006148 ; public: __thiscall std::system_error::system_error(class std::error_code, char const *)
.text$mn:00006148                 public ??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:00006148 ??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$mn:00006148                                         ; CODE XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+37p
.text$mn:00006148
.text$mn:00006148 var_30          = dword ptr -30h
.text$mn:00006148 var_2C          = byte ptr -2Ch
.text$mn:00006148 var_10          = dword ptr -10h
.text$mn:00006148 var_C           = dword ptr -0Ch
.text$mn:00006148 var_4           = dword ptr -4
.text$mn:00006148 arg_0           = dword ptr  8
.text$mn:00006148 arg_4           = dword ptr  0Ch
.text$mn:00006148 Str             = dword ptr  10h
.text$mn:00006148
.text$mn:00006148                 push    ebp
.text$mn:00006149                 mov     ebp, esp
.text$mn:0000614B                 push    0FFFFFFFFh
.text$mn:0000614D                 push    offset __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:00006152                 mov     eax, large fs:0
.text$mn:00006158                 push    eax
.text$mn:00006159                 sub     esp, 24h
.text$mn:0000615C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006161                 xor     eax, ebp
.text$mn:00006163                 mov     [ebp+var_10], eax
.text$mn:00006166                 push    eax
.text$mn:00006167                 lea     eax, [ebp+var_C]
.text$mn:0000616A                 mov     large fs:0, eax
.text$mn:00006170                 mov     [ebp+var_30], ecx
.text$mn:00006173                 mov     eax, [ebp+Str]
.text$mn:00006176                 push    eax             ; Str
.text$mn:00006177                 lea     ecx, [ebp+var_2C]
.text$mn:0000617A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000617F                 mov     [ebp+var_4], 0
.text$mn:00006186                 lea     ecx, [ebp+var_2C]
.text$mn:00006189                 push    ecx
.text$mn:0000618A                 mov     edx, [ebp+arg_4]
.text$mn:0000618D                 push    edx
.text$mn:0000618E                 mov     eax, [ebp+arg_0]
.text$mn:00006191                 push    eax
.text$mn:00006192                 mov     ecx, [ebp+var_30]
.text$mn:00006195                 call    ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000619A                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000619E                 lea     ecx, [ebp+var_2C]
.text$mn:000061A1                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000061A6                 mov     ecx, [ebp+var_30]
.text$mn:000061A9                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:000061AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000061B6                 mov     eax, [ebp+var_30]
.text$mn:000061B9                 mov     ecx, [ebp+var_C]
.text$mn:000061BC                 mov     large fs:0, ecx
.text$mn:000061C3                 pop     ecx
.text$mn:000061C4                 mov     ecx, [ebp+var_10]
.text$mn:000061C7                 xor     ecx, ebp
.text$mn:000061C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000061CE                 mov     esp, ebp
.text$mn:000061D0                 pop     ebp
.text$mn:000061D1                 retn    0Ch
.text$mn:000061D1 ??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$mn:000061D1
.text$mn:000061D1 _text$mn        ends
.text$mn:000061D1
.text$x:000061D4 ; ===========================================================================
.text$x:000061D4
.text$x:000061D4 ; Segment type: Pure code
.text$x:000061D4 ; Segment permissions: Read/Execute
.text$x:000061D4 _text$x         segment para public 'CODE' use32
.text$x:000061D4                 assume cs:_text$x
.text$x:000061D4                 ;org 61D4h
.text$x:000061D4 ; COMDAT (pick associative to section at 6148)
.text$x:000061D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000061D4
.text$x:000061D4 ; =============== S U B R O U T I N E =======================================
.text$x:000061D4
.text$x:000061D4
.text$x:000061D4 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 proc near
.text$x:000061D4                                         ; DATA XREF: .xdata$x:0000B99Co
.text$x:000061D4                 lea     ecx, [ebp-2Ch]
.text$x:000061D7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000061D7 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 endp
.text$x:000061D7
.text$x:000061DC
.text$x:000061DC ; =============== S U B R O U T I N E =======================================
.text$x:000061DC
.text$x:000061DC
.text$x:000061DC __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 proc near
.text$x:000061DC                                         ; DATA XREF: .xdata$x:0000B9A4o
.text$x:000061DC                                         ; .xdata$x:0000B9ACo
.text$x:000061DC                 mov     ecx, [ebp-30h]  ; this
.text$x:000061DF                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:000061DF __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 endp
.text$x:000061DF
.text$x:000061E4
.text$x:000061E4 ; =============== S U B R O U T I N E =======================================
.text$x:000061E4
.text$x:000061E4
.text$x:000061E4 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$x:000061E4                                         ; DATA XREF: std::system_error::system_error(std::error_code,char const *)+5o
.text$x:000061E4
.text$x:000061E4 arg_4           = dword ptr  8
.text$x:000061E4
.text$x:000061E4                 mov     edx, [esp+arg_4]
.text$x:000061E8                 lea     eax, [edx+0Ch]
.text$x:000061EB                 mov     ecx, [edx-28h]
.text$x:000061EE                 xor     ecx, eax
.text$x:000061F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061F5                 mov     ecx, [edx-4]
.text$x:000061F8                 xor     ecx, eax
.text$x:000061FA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061FF                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$x:00006204                 jmp     ___CxxFrameHandler3
.text$x:00006204 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$x:00006204
.text$x:00006204 ; ---------------------------------------------------------------------------
.text$x:00006209                 align 4
.text$x:00006209 _text$x         ends
.text$x:00006209
.text$mn:0000620C ; ===========================================================================
.text$mn:0000620C
.text$mn:0000620C ; Segment type: Pure code
.text$mn:0000620C ; Segment permissions: Read/Execute
.text$mn:0000620C _text$mn        segment para public 'CODE' use32
.text$mn:0000620C                 assume cs:_text$mn
.text$mn:0000620C                 ;org 620Ch
.text$mn:0000620C ; COMDAT (pick any)
.text$mn:0000620C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000620C
.text$mn:0000620C ; =============== S U B R O U T I N E =======================================
.text$mn:0000620C
.text$mn:0000620C ; Attributes: bp-based frame
.text$mn:0000620C
.text$mn:0000620C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:0000620C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000620C ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000620C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:0000620C                                         ; __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:0000620C
.text$mn:0000620C var_10          = dword ptr -10h
.text$mn:0000620C var_C           = dword ptr -0Ch
.text$mn:0000620C var_4           = dword ptr -4
.text$mn:0000620C
.text$mn:0000620C                 push    ebp
.text$mn:0000620D                 mov     ebp, esp
.text$mn:0000620F                 push    0FFFFFFFFh
.text$mn:00006211                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006216                 mov     eax, large fs:0
.text$mn:0000621C                 push    eax
.text$mn:0000621D                 push    ecx
.text$mn:0000621E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006223                 xor     eax, ebp
.text$mn:00006225                 push    eax
.text$mn:00006226                 lea     eax, [ebp+var_C]
.text$mn:00006229                 mov     large fs:0, eax
.text$mn:0000622F                 mov     [ebp+var_10], ecx
.text$mn:00006232                 mov     [ebp+var_4], 0
.text$mn:00006239                 mov     ecx, [ebp+var_10]
.text$mn:0000623C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00006241                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006248                 mov     ecx, [ebp+var_10]
.text$mn:0000624B                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00006250                 mov     ecx, [ebp+var_C]
.text$mn:00006253                 mov     large fs:0, ecx
.text$mn:0000625A                 pop     ecx
.text$mn:0000625B                 mov     esp, ebp
.text$mn:0000625D                 pop     ebp
.text$mn:0000625E                 retn
.text$mn:0000625E ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000625E
.text$mn:0000625E ; ---------------------------------------------------------------------------
.text$mn:0000625F                 align 10h
.text$mn:0000625F _text$mn        ends
.text$mn:0000625F
.text$x:00006260 ; ===========================================================================
.text$x:00006260
.text$x:00006260 ; Segment type: Pure code
.text$x:00006260 ; Segment permissions: Read/Execute
.text$x:00006260 _text$x         segment para public 'CODE' use32
.text$x:00006260                 assume cs:_text$x
.text$x:00006260                 ;org 6260h
.text$x:00006260 ; COMDAT (pick associative to section at 620C)
.text$x:00006260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006260
.text$x:00006260 ; =============== S U B R O U T I N E =======================================
.text$x:00006260
.text$x:00006260
.text$x:00006260 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006260                                         ; DATA XREF: .xdata$x:0000B3D4o
.text$x:00006260                 mov     ecx, [ebp-10h]
.text$x:00006263                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00006263 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006263
.text$x:00006268
.text$x:00006268 ; =============== S U B R O U T I N E =======================================
.text$x:00006268
.text$x:00006268
.text$x:00006268 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006268                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00006268
.text$x:00006268 arg_4           = dword ptr  8
.text$x:00006268
.text$x:00006268                 mov     edx, [esp+arg_4]
.text$x:0000626C                 lea     eax, [edx+0Ch]
.text$x:0000626F                 mov     ecx, [edx-8]
.text$x:00006272                 xor     ecx, eax
.text$x:00006274                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006279                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:0000627E                 jmp     ___CxxFrameHandler3
.text$x:0000627E __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:0000627E
.text$x:0000627E ; ---------------------------------------------------------------------------
.text$x:00006283                 align 4
.text$x:00006283 _text$x         ends
.text$x:00006283
.text$mn:00006284 ; ===========================================================================
.text$mn:00006284
.text$mn:00006284 ; Segment type: Pure code
.text$mn:00006284 ; Segment permissions: Read/Execute
.text$mn:00006284 _text$mn        segment para public 'CODE' use32
.text$mn:00006284                 assume cs:_text$mn
.text$mn:00006284                 ;org 6284h
.text$mn:00006284 ; COMDAT (pick any)
.text$mn:00006284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006284
.text$mn:00006284 ; =============== S U B R O U T I N E =======================================
.text$mn:00006284
.text$mn:00006284 ; Attributes: bp-based frame
.text$mn:00006284
.text$mn:00006284 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00006284                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00006284 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00006284                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00006284                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00006284
.text$mn:00006284 var_10          = dword ptr -10h
.text$mn:00006284 var_C           = dword ptr -0Ch
.text$mn:00006284 var_4           = dword ptr -4
.text$mn:00006284
.text$mn:00006284                 push    ebp
.text$mn:00006285                 mov     ebp, esp
.text$mn:00006287                 push    0FFFFFFFFh
.text$mn:00006289                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000628E                 mov     eax, large fs:0
.text$mn:00006294                 push    eax
.text$mn:00006295                 push    ecx
.text$mn:00006296                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000629B                 xor     eax, ebp
.text$mn:0000629D                 push    eax
.text$mn:0000629E                 lea     eax, [ebp+var_C]
.text$mn:000062A1                 mov     large fs:0, eax
.text$mn:000062A7                 mov     [ebp+var_10], ecx
.text$mn:000062AA                 mov     [ebp+var_4], 0
.text$mn:000062B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062B8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000062BB                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000062C0                 mov     ecx, [ebp+var_C]
.text$mn:000062C3                 mov     large fs:0, ecx
.text$mn:000062CA                 pop     ecx
.text$mn:000062CB                 mov     esp, ebp
.text$mn:000062CD                 pop     ebp
.text$mn:000062CE                 retn
.text$mn:000062CE ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000062CE
.text$mn:000062CE ; ---------------------------------------------------------------------------
.text$mn:000062CF                 align 10h
.text$mn:000062CF _text$mn        ends
.text$mn:000062CF
.text$x:000062D0 ; ===========================================================================
.text$x:000062D0
.text$x:000062D0 ; Segment type: Pure code
.text$x:000062D0 ; Segment permissions: Read/Execute
.text$x:000062D0 _text$x         segment para public 'CODE' use32
.text$x:000062D0                 assume cs:_text$x
.text$x:000062D0                 ;org 62D0h
.text$x:000062D0 ; COMDAT (pick associative to section at 6284)
.text$x:000062D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062D0
.text$x:000062D0 ; =============== S U B R O U T I N E =======================================
.text$x:000062D0
.text$x:000062D0
.text$x:000062D0 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000062D0                                         ; DATA XREF: .xdata$x:0000B37Co
.text$x:000062D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000062D3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000062D3 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000062D3
.text$x:000062D8
.text$x:000062D8 ; =============== S U B R O U T I N E =======================================
.text$x:000062D8
.text$x:000062D8
.text$x:000062D8 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000062D8                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000062D8
.text$x:000062D8 arg_4           = dword ptr  8
.text$x:000062D8
.text$x:000062D8                 mov     edx, [esp+arg_4]
.text$x:000062DC                 lea     eax, [edx+0Ch]
.text$x:000062DF                 mov     ecx, [edx-8]
.text$x:000062E2                 xor     ecx, eax
.text$x:000062E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000062E9                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000062EE                 jmp     ___CxxFrameHandler3
.text$x:000062EE __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000062EE
.text$x:000062EE ; ---------------------------------------------------------------------------
.text$x:000062F3                 align 4
.text$x:000062F3 _text$x         ends
.text$x:000062F3
.text$mn:000062F4 ; ===========================================================================
.text$mn:000062F4
.text$mn:000062F4 ; Segment type: Pure code
.text$mn:000062F4 ; Segment permissions: Read/Execute
.text$mn:000062F4 _text$mn        segment para public 'CODE' use32
.text$mn:000062F4                 assume cs:_text$mn
.text$mn:000062F4                 ;org 62F4h
.text$mn:000062F4 ; COMDAT (pick any)
.text$mn:000062F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062F4
.text$mn:000062F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000062F4
.text$mn:000062F4 ; Attributes: bp-based frame
.text$mn:000062F4
.text$mn:000062F4 ; public: __thiscall std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:000062F4                 public ??1?$_Yarn@D@std@@QAE@XZ
.text$mn:000062F4 ??1?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1+6j
.text$mn:000062F4                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2+6j ...
.text$mn:000062F4
.text$mn:000062F4 var_4           = dword ptr -4
.text$mn:000062F4
.text$mn:000062F4                 push    ebp
.text$mn:000062F5                 mov     ebp, esp
.text$mn:000062F7                 push    ecx
.text$mn:000062F8                 mov     [ebp+var_4], ecx
.text$mn:000062FB                 mov     ecx, [ebp+var_4]
.text$mn:000062FE                 call    ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy(void)
.text$mn:00006303                 mov     esp, ebp
.text$mn:00006305                 pop     ebp
.text$mn:00006306                 retn
.text$mn:00006306 ??1?$_Yarn@D@std@@QAE@XZ endp
.text$mn:00006306
.text$mn:00006306 ; ---------------------------------------------------------------------------
.text$mn:00006307                 align 4
.text$mn:00006307 _text$mn        ends
.text$mn:00006307
.text$mn:00006308 ; ===========================================================================
.text$mn:00006308
.text$mn:00006308 ; Segment type: Pure code
.text$mn:00006308 ; Segment permissions: Read/Execute
.text$mn:00006308 _text$mn        segment para public 'CODE' use32
.text$mn:00006308                 assume cs:_text$mn
.text$mn:00006308                 ;org 6308h
.text$mn:00006308 ; COMDAT (pick any)
.text$mn:00006308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006308
.text$mn:00006308 ; =============== S U B R O U T I N E =======================================
.text$mn:00006308
.text$mn:00006308 ; Attributes: bp-based frame
.text$mn:00006308
.text$mn:00006308 ; public: __thiscall std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00006308                 public ??1?$_Yarn@_W@std@@QAE@XZ
.text$mn:00006308 ??1?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3+6j
.text$mn:00006308                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4+6j ...
.text$mn:00006308
.text$mn:00006308 var_4           = dword ptr -4
.text$mn:00006308
.text$mn:00006308                 push    ebp
.text$mn:00006309                 mov     ebp, esp
.text$mn:0000630B                 push    ecx
.text$mn:0000630C                 mov     [ebp+var_4], ecx
.text$mn:0000630F                 mov     ecx, [ebp+var_4]
.text$mn:00006312                 call    ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:00006317                 mov     esp, ebp
.text$mn:00006319                 pop     ebp
.text$mn:0000631A                 retn
.text$mn:0000631A ??1?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:0000631A
.text$mn:0000631A ; ---------------------------------------------------------------------------
.text$mn:0000631B                 align 4
.text$mn:0000631B _text$mn        ends
.text$mn:0000631B
.text$mn:0000631C ; ===========================================================================
.text$mn:0000631C
.text$mn:0000631C ; Segment type: Pure code
.text$mn:0000631C ; Segment permissions: Read/Execute
.text$mn:0000631C _text$mn        segment para public 'CODE' use32
.text$mn:0000631C                 assume cs:_text$mn
.text$mn:0000631C                 ;org 631Ch
.text$mn:0000631C ; COMDAT (pick any)
.text$mn:0000631C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000631C
.text$mn:0000631C ; =============== S U B R O U T I N E =======================================
.text$mn:0000631C
.text$mn:0000631C ; Attributes: bp-based frame
.text$mn:0000631C
.text$mn:0000631C ; public: virtual __thiscall std::basic_ios<char, struct std::char_traits<char>>::~basic_ios<char, struct std::char_traits<char>>(void)
.text$mn:0000631C                 public ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
.text$mn:0000631C ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ proc near
.text$mn:0000631C                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0+16j
.text$mn:0000631C                                         ; __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+16j ...
.text$mn:0000631C
.text$mn:0000631C var_10          = dword ptr -10h
.text$mn:0000631C var_C           = dword ptr -0Ch
.text$mn:0000631C var_4           = dword ptr -4
.text$mn:0000631C
.text$mn:0000631C                 push    ebp
.text$mn:0000631D                 mov     ebp, esp
.text$mn:0000631F                 push    0FFFFFFFFh
.text$mn:00006321                 push    offset __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
.text$mn:00006326                 mov     eax, large fs:0
.text$mn:0000632C                 push    eax
.text$mn:0000632D                 push    ecx
.text$mn:0000632E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006333                 xor     eax, ebp
.text$mn:00006335                 push    eax
.text$mn:00006336                 lea     eax, [ebp+var_C]
.text$mn:00006339                 mov     large fs:0, eax
.text$mn:0000633F                 mov     [ebp+var_10], ecx
.text$mn:00006342                 mov     eax, [ebp+var_10]
.text$mn:00006345                 mov     dword ptr [eax], offset ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ios<char,std::char_traits<char>>::`vftable'
.text$mn:0000634B                 mov     [ebp+var_4], 0
.text$mn:00006352                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006359                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000635C                 call    ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$mn:00006361                 mov     ecx, [ebp+var_C]
.text$mn:00006364                 mov     large fs:0, ecx
.text$mn:0000636B                 pop     ecx
.text$mn:0000636C                 mov     esp, ebp
.text$mn:0000636E                 pop     ebp
.text$mn:0000636F                 retn
.text$mn:0000636F ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ endp
.text$mn:0000636F
.text$mn:0000636F _text$mn        ends
.text$mn:0000636F
.text$x:00006370 ; ===========================================================================
.text$x:00006370
.text$x:00006370 ; Segment type: Pure code
.text$x:00006370 ; Segment permissions: Read/Execute
.text$x:00006370 _text$x         segment para public 'CODE' use32
.text$x:00006370                 assume cs:_text$x
.text$x:00006370                 ;org 6370h
.text$x:00006370 ; COMDAT (pick associative to section at 631C)
.text$x:00006370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006370
.text$x:00006370 ; =============== S U B R O U T I N E =======================================
.text$x:00006370
.text$x:00006370
.text$x:00006370 __unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0 proc near
.text$x:00006370                                         ; DATA XREF: .xdata$x:0000BC6Co
.text$x:00006370                 mov     ecx, [ebp-10h]  ; this
.text$x:00006373                 jmp     ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$x:00006373 __unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0 endp
.text$x:00006373
.text$x:00006378
.text$x:00006378 ; =============== S U B R O U T I N E =======================================
.text$x:00006378
.text$x:00006378
.text$x:00006378 __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ proc near
.text$x:00006378                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)+5o
.text$x:00006378
.text$x:00006378 arg_4           = dword ptr  8
.text$x:00006378
.text$x:00006378                 mov     edx, [esp+arg_4]
.text$x:0000637C                 lea     eax, [edx+0Ch]
.text$x:0000637F                 mov     ecx, [edx-8]
.text$x:00006382                 xor     ecx, eax
.text$x:00006384                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006389                 mov     eax, offset __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
.text$x:0000638E                 jmp     ___CxxFrameHandler3
.text$x:0000638E __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ endp
.text$x:0000638E
.text$x:0000638E ; ---------------------------------------------------------------------------
.text$x:00006393                 align 4
.text$x:00006393 _text$x         ends
.text$x:00006393
.text$mn:00006394 ; ===========================================================================
.text$mn:00006394
.text$mn:00006394 ; Segment type: Pure code
.text$mn:00006394 ; Segment permissions: Read/Execute
.text$mn:00006394 _text$mn        segment para public 'CODE' use32
.text$mn:00006394                 assume cs:_text$mn
.text$mn:00006394                 ;org 6394h
.text$mn:00006394 ; COMDAT (pick any)
.text$mn:00006394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006394
.text$mn:00006394 ; =============== S U B R O U T I N E =======================================
.text$mn:00006394
.text$mn:00006394 ; Attributes: bp-based frame
.text$mn:00006394
.text$mn:00006394 ; public: virtual __thiscall std::basic_ostream<char, struct std::char_traits<char>>::~basic_ostream<char, struct std::char_traits<char>>(void)
.text$mn:00006394                 public ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
.text$mn:00006394 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ proc near
.text$mn:00006394                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1+6j
.text$mn:00006394                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(void)+79p ...
.text$mn:00006394
.text$mn:00006394 var_4           = dword ptr -4
.text$mn:00006394
.text$mn:00006394                 push    ebp
.text$mn:00006395                 mov     ebp, esp
.text$mn:00006397                 push    ecx
.text$mn:00006398                 mov     [ebp+var_4], ecx
.text$mn:0000639B                 mov     eax, [ebp+var_4]
.text$mn:0000639E                 mov     ecx, [eax-8]
.text$mn:000063A1                 mov     edx, [ecx+4]
.text$mn:000063A4                 mov     eax, [ebp+var_4]
.text$mn:000063A7                 mov     dword ptr [eax+edx-8], offset ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ostream<char,std::char_traits<char>>::`vftable'
.text$mn:000063AF                 mov     ecx, [ebp+var_4]
.text$mn:000063B2                 mov     edx, [ecx-8]
.text$mn:000063B5                 mov     eax, [edx+4]
.text$mn:000063B8                 sub     eax, 8
.text$mn:000063BB                 mov     ecx, [ebp+var_4]
.text$mn:000063BE                 mov     edx, [ecx-8]
.text$mn:000063C1                 mov     ecx, [edx+4]
.text$mn:000063C4                 mov     edx, [ebp+var_4]
.text$mn:000063C7                 mov     [edx+ecx-0Ch], eax
.text$mn:000063CB                 mov     esp, ebp
.text$mn:000063CD                 pop     ebp
.text$mn:000063CE                 retn
.text$mn:000063CE ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ endp
.text$mn:000063CE
.text$mn:000063CE ; ---------------------------------------------------------------------------
.text$mn:000063CF                 align 10h
.text$mn:000063CF _text$mn        ends
.text$mn:000063CF
.text$mn:000063D0 ; ===========================================================================
.text$mn:000063D0
.text$mn:000063D0 ; Segment type: Pure code
.text$mn:000063D0 ; Segment permissions: Read/Execute
.text$mn:000063D0 _text$mn        segment para public 'CODE' use32
.text$mn:000063D0                 assume cs:_text$mn
.text$mn:000063D0                 ;org 63D0h
.text$mn:000063D0 ; COMDAT (pick any)
.text$mn:000063D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063D0
.text$mn:000063D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000063D0
.text$mn:000063D0 ; Attributes: bp-based frame
.text$mn:000063D0
.text$mn:000063D0 ; public: virtual __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000063D0                 public ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$mn:000063D0 ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
.text$mn:000063D0                                         ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)+Dp
.text$mn:000063D0
.text$mn:000063D0 var_10          = dword ptr -10h
.text$mn:000063D0 var_C           = dword ptr -0Ch
.text$mn:000063D0 var_4           = dword ptr -4
.text$mn:000063D0
.text$mn:000063D0                 push    ebp
.text$mn:000063D1                 mov     ebp, esp
.text$mn:000063D3                 push    0FFFFFFFFh
.text$mn:000063D5                 push    offset __ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$mn:000063DA                 mov     eax, large fs:0
.text$mn:000063E0                 push    eax
.text$mn:000063E1                 push    ecx
.text$mn:000063E2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063E7                 xor     eax, ebp
.text$mn:000063E9                 push    eax
.text$mn:000063EA                 lea     eax, [ebp+var_C]
.text$mn:000063ED                 mov     large fs:0, eax
.text$mn:000063F3                 mov     [ebp+var_10], ecx
.text$mn:000063F6                 mov     eax, [ebp+var_10]
.text$mn:000063F9                 mov     ecx, [eax-50h]
.text$mn:000063FC                 mov     edx, [ecx+4]
.text$mn:000063FF                 mov     eax, [ebp+var_10]
.text$mn:00006402                 mov     dword ptr [eax+edx-50h], offset ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'
.text$mn:0000640A                 mov     ecx, [ebp+var_10]
.text$mn:0000640D                 mov     edx, [ecx-50h]
.text$mn:00006410                 mov     eax, [edx+4]
.text$mn:00006413                 sub     eax, 50h ; 'P'
.text$mn:00006416                 mov     ecx, [ebp+var_10]
.text$mn:00006419                 mov     edx, [ecx-50h]
.text$mn:0000641C                 mov     ecx, [edx+4]
.text$mn:0000641F                 mov     edx, [ebp+var_10]
.text$mn:00006422
.text$mn:00006422 loc_6422:                               ; DATA XREF: .rdata:$SG96442o
.text$mn:00006422                                         ; .rdata:$SG96841o ...
.text$mn:00006422                 mov     [edx+ecx-54h], eax
.text$mn:00006426                 mov     [ebp+var_4], 1
.text$mn:0000642D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006431                 mov     ecx, [ebp+var_10]
.text$mn:00006434                 sub     ecx, 4Ch ; 'L'
.text$mn:00006437                 call    ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000643C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006443                 mov     ecx, [ebp+var_10]
.text$mn:00006446                 sub     ecx, 48h ; 'H'
.text$mn:00006449                 call    ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
.text$mn:0000644E                 mov     ecx, [ebp+var_C]
.text$mn:00006451                 mov     large fs:0, ecx
.text$mn:00006458                 pop     ecx
.text$mn:00006459                 mov     esp, ebp
.text$mn:0000645B                 pop     ebp
.text$mn:0000645C                 retn
.text$mn:0000645C ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp
.text$mn:0000645C
.text$mn:0000645C ; ---------------------------------------------------------------------------
.text$mn:0000645D                 align 10h
.text$mn:0000645D _text$mn        ends
.text$mn:0000645D
.text$x:00006460 ; ===========================================================================
.text$x:00006460
.text$x:00006460 ; Segment type: Pure code
.text$x:00006460 ; Segment permissions: Read/Execute
.text$x:00006460 _text$x         segment para public 'CODE' use32
.text$x:00006460                 assume cs:_text$x
.text$x:00006460                 ;org 6460h
.text$x:00006460 ; COMDAT (pick associative to section at 63D0)
.text$x:00006460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006460
.text$x:00006460 ; =============== S U B R O U T I N E =======================================
.text$x:00006460
.text$x:00006460
.text$x:00006460 __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0 proc near
.text$x:00006460                                         ; DATA XREF: .xdata$x:0000C6C4o
.text$x:00006460                 mov     ecx, [ebp-10h]
.text$x:00006463                 sub     ecx, 48h ; 'H'
.text$x:00006466                 jmp     ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
.text$x:00006466 __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0 endp
.text$x:00006466
.text$x:0000646B
.text$x:0000646B ; =============== S U B R O U T I N E =======================================
.text$x:0000646B
.text$x:0000646B
.text$x:0000646B __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$1 proc near
.text$x:0000646B                                         ; DATA XREF: .xdata$x:0000C6CCo
.text$x:0000646B                 mov     ecx, [ebp-10h]
.text$x:0000646E                 sub     ecx, 4Ch ; 'L'
.text$x:00006471                 jmp     ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006471 __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$1 endp
.text$x:00006471
.text$x:00006476
.text$x:00006476 ; =============== S U B R O U T I N E =======================================
.text$x:00006476
.text$x:00006476
.text$x:00006476 __ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
.text$x:00006476                                         ; DATA XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00006476
.text$x:00006476 arg_4           = dword ptr  8
.text$x:00006476
.text$x:00006476                 mov     edx, [esp+arg_4]
.text$x:0000647A                 lea     eax, [edx+0Ch]
.text$x:0000647D                 mov     ecx, [edx-8]
.text$x:00006480                 xor     ecx, eax
.text$x:00006482                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006487                 mov     eax, offset __ehfuncinfo$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$x:0000648C                 jmp     ___CxxFrameHandler3
.text$x:0000648C __ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp
.text$x:0000648C
.text$x:0000648C ; ---------------------------------------------------------------------------
.text$x:00006491                 align 4
.text$x:00006491 _text$x         ends
.text$x:00006491
.text$mn:00006494 ; ===========================================================================
.text$mn:00006494
.text$mn:00006494 ; Segment type: Pure code
.text$mn:00006494 ; Segment permissions: Read/Execute
.text$mn:00006494 _text$mn        segment para public 'CODE' use32
.text$mn:00006494                 assume cs:_text$mn
.text$mn:00006494                 ;org 6494h
.text$mn:00006494 ; COMDAT (pick any)
.text$mn:00006494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006494
.text$mn:00006494 ; =============== S U B R O U T I N E =======================================
.text$mn:00006494
.text$mn:00006494 ; Attributes: bp-based frame
.text$mn:00006494
.text$mn:00006494 ; public: virtual __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::~basic_streambuf<char, struct std::char_traits<char>>(void)
.text$mn:00006494                 public ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
.text$mn:00006494 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ proc near
.text$mn:00006494                                         ; CODE XREF: __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0+3j
.text$mn:00006494                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+48p ...
.text$mn:00006494
.text$mn:00006494 var_4           = dword ptr -4
.text$mn:00006494
.text$mn:00006494                 push    ebp
.text$mn:00006495                 mov     ebp, esp
.text$mn:00006497                 push    ecx
.text$mn:00006498                 mov     [ebp+var_4], ecx
.text$mn:0000649B                 mov     eax, [ebp+var_4]
.text$mn:0000649E                 mov     dword ptr [eax], offset ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_streambuf<char,std::char_traits<char>>::`vftable'
.text$mn:000064A4                 mov     ecx, [ebp+var_4]
.text$mn:000064A7                 mov     edx, [ecx+34h]
.text$mn:000064AA                 push    edx             ; Memory
.text$mn:000064AB                 call    ??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z ; std::_DebugHeapDelete<std::locale>(std::locale *)
.text$mn:000064B0                 add     esp, 4
.text$mn:000064B3                 mov     esp, ebp
.text$mn:000064B5                 pop     ebp
.text$mn:000064B6                 retn
.text$mn:000064B6 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ endp
.text$mn:000064B6
.text$mn:000064B6 ; ---------------------------------------------------------------------------
.text$mn:000064B7                 align 4
.text$mn:000064B7 _text$mn        ends
.text$mn:000064B7
.text$mn:000064B8 ; ===========================================================================
.text$mn:000064B8
.text$mn:000064B8 ; Segment type: Pure code
.text$mn:000064B8 ; Segment permissions: Read/Execute
.text$mn:000064B8 _text$mn        segment para public 'CODE' use32
.text$mn:000064B8                 assume cs:_text$mn
.text$mn:000064B8                 ;org 64B8h
.text$mn:000064B8 ; COMDAT (pick any)
.text$mn:000064B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064B8
.text$mn:000064B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000064B8
.text$mn:000064B8 ; Attributes: bp-based frame
.text$mn:000064B8
.text$mn:000064B8 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000064B8                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000064B8 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000064B8                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+61p
.text$mn:000064B8                                         ; operator>>(std::basic_istream<char,std::char_traits<char>> &,TiXmlNodeA &)+81p ...
.text$mn:000064B8
.text$mn:000064B8 var_10          = dword ptr -10h
.text$mn:000064B8 var_C           = dword ptr -0Ch
.text$mn:000064B8 var_4           = dword ptr -4
.text$mn:000064B8
.text$mn:000064B8                 push    ebp
.text$mn:000064B9                 mov     ebp, esp
.text$mn:000064BB                 push    0FFFFFFFFh
.text$mn:000064BD                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000064C2                 mov     eax, large fs:0
.text$mn:000064C8                 push    eax
.text$mn:000064C9                 push    ecx
.text$mn:000064CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000064CF                 xor     eax, ebp
.text$mn:000064D1                 push    eax
.text$mn:000064D2                 lea     eax, [ebp+var_C]
.text$mn:000064D5                 mov     large fs:0, eax
.text$mn:000064DB                 mov     [ebp+var_10], ecx
.text$mn:000064DE                 mov     [ebp+var_4], 0
.text$mn:000064E5                 push    0               ; Size
.text$mn:000064E7                 push    1               ; char
.text$mn:000064E9                 mov     ecx, [ebp+var_10]
.text$mn:000064EC                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000064F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000064F8                 mov     ecx, [ebp+var_10]
.text$mn:000064FB                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00006500                 mov     ecx, [ebp+var_C]
.text$mn:00006503                 mov     large fs:0, ecx
.text$mn:0000650A                 pop     ecx
.text$mn:0000650B                 mov     esp, ebp
.text$mn:0000650D                 pop     ebp
.text$mn:0000650E                 retn
.text$mn:0000650E ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:0000650E
.text$mn:0000650E ; ---------------------------------------------------------------------------
.text$mn:0000650F                 align 10h
.text$mn:0000650F _text$mn        ends
.text$mn:0000650F
.text$x:00006510 ; ===========================================================================
.text$x:00006510
.text$x:00006510 ; Segment type: Pure code
.text$x:00006510 ; Segment permissions: Read/Execute
.text$x:00006510 _text$x         segment para public 'CODE' use32
.text$x:00006510                 assume cs:_text$x
.text$x:00006510                 ;org 6510h
.text$x:00006510 ; COMDAT (pick associative to section at 64B8)
.text$x:00006510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006510
.text$x:00006510 ; =============== S U B R O U T I N E =======================================
.text$x:00006510
.text$x:00006510
.text$x:00006510 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00006510                                         ; DATA XREF: .xdata$x:0000B4DCo
.text$x:00006510                 mov     ecx, [ebp-10h]
.text$x:00006513                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00006513 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00006513
.text$x:00006518
.text$x:00006518 ; =============== S U B R O U T I N E =======================================
.text$x:00006518
.text$x:00006518
.text$x:00006518 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00006518                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00006518
.text$x:00006518 arg_4           = dword ptr  8
.text$x:00006518
.text$x:00006518                 mov     edx, [esp+arg_4]
.text$x:0000651C                 lea     eax, [edx+0Ch]
.text$x:0000651F                 mov     ecx, [edx-8]
.text$x:00006522                 xor     ecx, eax
.text$x:00006524                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006529                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:0000652E                 jmp     ___CxxFrameHandler3
.text$x:0000652E __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:0000652E
.text$x:0000652E ; ---------------------------------------------------------------------------
.text$x:00006533                 align 4
.text$x:00006533 _text$x         ends
.text$x:00006533
.text$mn:00006534 ; ===========================================================================
.text$mn:00006534
.text$mn:00006534 ; Segment type: Pure code
.text$mn:00006534 ; Segment permissions: Read/Execute
.text$mn:00006534 _text$mn        segment para public 'CODE' use32
.text$mn:00006534                 assume cs:_text$mn
.text$mn:00006534                 ;org 6534h
.text$mn:00006534 ; COMDAT (pick any)
.text$mn:00006534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006534
.text$mn:00006534 ; =============== S U B R O U T I N E =======================================
.text$mn:00006534
.text$mn:00006534 ; Attributes: bp-based frame
.text$mn:00006534
.text$mn:00006534 ; public: virtual __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00006534                 public ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$mn:00006534 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
.text$mn:00006534                                         ; CODE XREF: __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2+6j
.text$mn:00006534                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(void)+67p ...
.text$mn:00006534
.text$mn:00006534 var_10          = dword ptr -10h
.text$mn:00006534 var_C           = dword ptr -0Ch
.text$mn:00006534 var_4           = dword ptr -4
.text$mn:00006534
.text$mn:00006534                 push    ebp
.text$mn:00006535                 mov     ebp, esp
.text$mn:00006537                 push    0FFFFFFFFh
.text$mn:00006539                 push    offset __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$mn:0000653E                 mov     eax, large fs:0
.text$mn:00006544                 push    eax
.text$mn:00006545                 push    ecx
.text$mn:00006546                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000654B                 xor     eax, ebp
.text$mn:0000654D                 push    eax
.text$mn:0000654E                 lea     eax, [ebp+var_C]
.text$mn:00006551                 mov     large fs:0, eax
.text$mn:00006557                 mov     [ebp+var_10], ecx
.text$mn:0000655A                 mov     eax, [ebp+var_10]
.text$mn:0000655D                 mov     dword ptr [eax], offset ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'
.text$mn:00006563                 mov     [ebp+var_4], 0
.text$mn:0000656A                 mov     ecx, [ebp+var_10]
.text$mn:0000656D                 call    ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)
.text$mn:00006572                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006579                 mov     ecx, [ebp+var_10]
.text$mn:0000657C                 call    ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
.text$mn:00006581                 mov     ecx, [ebp+var_C]
.text$mn:00006584                 mov     large fs:0, ecx
.text$mn:0000658B                 pop     ecx
.text$mn:0000658C                 mov     esp, ebp
.text$mn:0000658E                 pop     ebp
.text$mn:0000658F                 retn
.text$mn:0000658F ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp
.text$mn:0000658F
.text$mn:0000658F _text$mn        ends
.text$mn:0000658F
.text$x:00006590 ; ===========================================================================
.text$x:00006590
.text$x:00006590 ; Segment type: Pure code
.text$x:00006590 ; Segment permissions: Read/Execute
.text$x:00006590 _text$x         segment para public 'CODE' use32
.text$x:00006590                 assume cs:_text$x
.text$x:00006590                 ;org 6590h
.text$x:00006590 ; COMDAT (pick associative to section at 6534)
.text$x:00006590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006590
.text$x:00006590 ; =============== S U B R O U T I N E =======================================
.text$x:00006590
.text$x:00006590
.text$x:00006590 __unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0 proc near
.text$x:00006590                                         ; DATA XREF: .xdata$x:0000C750o
.text$x:00006590                 mov     ecx, [ebp-10h]
.text$x:00006593                 jmp     ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
.text$x:00006593 __unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0 endp
.text$x:00006593
.text$x:00006598
.text$x:00006598 ; =============== S U B R O U T I N E =======================================
.text$x:00006598
.text$x:00006598
.text$x:00006598 __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
.text$x:00006598                                         ; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00006598
.text$x:00006598 arg_4           = dword ptr  8
.text$x:00006598
.text$x:00006598                 mov     edx, [esp+arg_4]
.text$x:0000659C                 lea     eax, [edx+0Ch]
.text$x:0000659F                 mov     ecx, [edx-8]
.text$x:000065A2                 xor     ecx, eax
.text$x:000065A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065A9                 mov     eax, offset __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.text$x:000065AE                 jmp     ___CxxFrameHandler3
.text$x:000065AE __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ endp
.text$x:000065AE
.text$x:000065AE ; ---------------------------------------------------------------------------
.text$x:000065B3                 align 4
.text$x:000065B3 _text$x         ends
.text$x:000065B3
.text$mn:000065B4 ; ===========================================================================
.text$mn:000065B4
.text$mn:000065B4 ; Segment type: Pure code
.text$mn:000065B4 ; Segment permissions: Read/Execute
.text$mn:000065B4 _text$mn        segment para public 'CODE' use32
.text$mn:000065B4                 assume cs:_text$mn
.text$mn:000065B4                 ;org 65B4h
.text$mn:000065B4 ; COMDAT (pick any)
.text$mn:000065B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065B4
.text$mn:000065B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000065B4
.text$mn:000065B4 ; Attributes: bp-based frame
.text$mn:000065B4
.text$mn:000065B4 ; protected: virtual __thiscall std::ctype<char>::~ctype<char>(void)
.text$mn:000065B4                 public ??1?$ctype@D@std@@MAE@XZ
.text$mn:000065B4 ??1?$ctype@D@std@@MAE@XZ proc near      ; CODE XREF: std::ctype<char>::`scalar deleting destructor'(uint)+Ap
.text$mn:000065B4
.text$mn:000065B4 var_10          = dword ptr -10h
.text$mn:000065B4 var_C           = dword ptr -0Ch
.text$mn:000065B4 var_4           = dword ptr -4
.text$mn:000065B4
.text$mn:000065B4                 push    ebp
.text$mn:000065B5                 mov     ebp, esp
.text$mn:000065B7                 push    0FFFFFFFFh
.text$mn:000065B9                 push    offset __ehhandler$??1?$ctype@D@std@@MAE@XZ
.text$mn:000065BE                 mov     eax, large fs:0
.text$mn:000065C4                 push    eax
.text$mn:000065C5                 push    ecx
.text$mn:000065C6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000065CB                 xor     eax, ebp
.text$mn:000065CD                 push    eax
.text$mn:000065CE                 lea     eax, [ebp+var_C]
.text$mn:000065D1                 mov     large fs:0, eax
.text$mn:000065D7                 mov     [ebp+var_10], ecx
.text$mn:000065DA                 mov     eax, [ebp+var_10]
.text$mn:000065DD                 mov     dword ptr [eax], offset ??_7?$ctype@D@std@@6B@ ; const std::ctype<char>::`vftable'
.text$mn:000065E3                 mov     [ebp+var_4], 0
.text$mn:000065EA                 mov     ecx, [ebp+var_10]
.text$mn:000065ED                 call    ?_Tidy@?$ctype@D@std@@IAEXXZ ; std::ctype<char>::_Tidy(void)
.text$mn:000065F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000065F9                 mov     ecx, [ebp+var_10] ; this
.text$mn:000065FC                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:00006601                 mov     ecx, [ebp+var_C]
.text$mn:00006604                 mov     large fs:0, ecx
.text$mn:0000660B                 pop     ecx
.text$mn:0000660C                 mov     esp, ebp
.text$mn:0000660E                 pop     ebp
.text$mn:0000660F                 retn
.text$mn:0000660F ??1?$ctype@D@std@@MAE@XZ endp
.text$mn:0000660F
.text$mn:0000660F _text$mn        ends
.text$mn:0000660F
.text$x:00006610 ; ===========================================================================
.text$x:00006610
.text$x:00006610 ; Segment type: Pure code
.text$x:00006610 ; Segment permissions: Read/Execute
.text$x:00006610 _text$x         segment para public 'CODE' use32
.text$x:00006610                 assume cs:_text$x
.text$x:00006610                 ;org 6610h
.text$x:00006610 ; COMDAT (pick associative to section at 65B4)
.text$x:00006610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006610
.text$x:00006610 ; =============== S U B R O U T I N E =======================================
.text$x:00006610
.text$x:00006610
.text$x:00006610 __unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0 proc near
.text$x:00006610                                         ; DATA XREF: .xdata$x:0000B840o
.text$x:00006610                 mov     ecx, [ebp-10h]  ; this
.text$x:00006613                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:00006613 __unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0 endp
.text$x:00006613
.text$x:00006618
.text$x:00006618 ; =============== S U B R O U T I N E =======================================
.text$x:00006618
.text$x:00006618
.text$x:00006618 __ehhandler$??1?$ctype@D@std@@MAE@XZ proc near
.text$x:00006618                                         ; DATA XREF: std::ctype<char>::~ctype<char>(void)+5o
.text$x:00006618
.text$x:00006618 arg_4           = dword ptr  8
.text$x:00006618
.text$x:00006618                 mov     edx, [esp+arg_4]
.text$x:0000661C                 lea     eax, [edx+0Ch]
.text$x:0000661F                 mov     ecx, [edx-8]
.text$x:00006622                 xor     ecx, eax
.text$x:00006624                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006629                 mov     eax, offset __ehfuncinfo$??1?$ctype@D@std@@MAE@XZ
.text$x:0000662E                 jmp     ___CxxFrameHandler3
.text$x:0000662E __ehhandler$??1?$ctype@D@std@@MAE@XZ endp
.text$x:0000662E
.text$x:0000662E ; ---------------------------------------------------------------------------
.text$x:00006633                 align 4
.text$x:00006633 _text$x         ends
.text$x:00006633
.text$mn:00006634 ; ===========================================================================
.text$mn:00006634
.text$mn:00006634 ; Segment type: Pure code
.text$mn:00006634 ; Segment permissions: Read/Execute
.text$mn:00006634 _text$mn        segment para public 'CODE' use32
.text$mn:00006634                 assume cs:_text$mn
.text$mn:00006634                 ;org 6634h
.text$mn:00006634 ; COMDAT (pick any)
.text$mn:00006634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006634
.text$mn:00006634 ; =============== S U B R O U T I N E =======================================
.text$mn:00006634
.text$mn:00006634 ; Attributes: bp-based frame
.text$mn:00006634
.text$mn:00006634 ; _DWORD __thiscall TiXmlAttributeA::~TiXmlAttributeA(TiXmlAttributeA *__hidden this)
.text$mn:00006634                 public ??1TiXmlAttributeA@@UAE@XZ
.text$mn:00006634 ??1TiXmlAttributeA@@UAE@XZ proc near    ; CODE XREF: TiXmlAttributeSetA::~TiXmlAttributeSetA(void)+7Bp
.text$mn:00006634                                         ; __unwindfunclet$??0TiXmlAttributeSetA@@QAE@XZ$0+3j ...
.text$mn:00006634
.text$mn:00006634 var_10          = dword ptr -10h
.text$mn:00006634 var_C           = dword ptr -0Ch
.text$mn:00006634 var_4           = dword ptr -4
.text$mn:00006634
.text$mn:00006634                 push    ebp
.text$mn:00006635                 mov     ebp, esp
.text$mn:00006637                 push    0FFFFFFFFh
.text$mn:00006639                 push    offset __ehhandler$??1TiXmlAttributeA@@UAE@XZ
.text$mn:0000663E                 mov     eax, large fs:0
.text$mn:00006644                 push    eax
.text$mn:00006645                 push    ecx
.text$mn:00006646                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000664B                 xor     eax, ebp
.text$mn:0000664D                 push    eax
.text$mn:0000664E                 lea     eax, [ebp+var_C]
.text$mn:00006651                 mov     large fs:0, eax
.text$mn:00006657                 mov     [ebp+var_10], ecx
.text$mn:0000665A                 mov     [ebp+var_4], 2
.text$mn:00006661                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006665                 mov     ecx, [ebp+var_10]
.text$mn:00006668                 add     ecx, 2Ch ; ','
.text$mn:0000666B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00006670                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006674                 mov     ecx, [ebp+var_10]
.text$mn:00006677                 add     ecx, 10h
.text$mn:0000667A                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000667F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006686                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006689                 call    ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$mn:0000668E                 mov     ecx, [ebp+var_C]
.text$mn:00006691                 mov     large fs:0, ecx
.text$mn:00006698                 pop     ecx
.text$mn:00006699                 mov     esp, ebp
.text$mn:0000669B                 pop     ebp
.text$mn:0000669C                 retn
.text$mn:0000669C ??1TiXmlAttributeA@@UAE@XZ endp
.text$mn:0000669C
.text$mn:0000669C ; ---------------------------------------------------------------------------
.text$mn:0000669D                 align 10h
.text$mn:0000669D _text$mn        ends
.text$mn:0000669D
.text$x:000066A0 ; ===========================================================================
.text$x:000066A0
.text$x:000066A0 ; Segment type: Pure code
.text$x:000066A0 ; Segment permissions: Read/Execute
.text$x:000066A0 _text$x         segment para public 'CODE' use32
.text$x:000066A0                 assume cs:_text$x
.text$x:000066A0                 ;org 66A0h
.text$x:000066A0 ; COMDAT (pick associative to section at 6634)
.text$x:000066A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000066A0
.text$x:000066A0 ; =============== S U B R O U T I N E =======================================
.text$x:000066A0
.text$x:000066A0
.text$x:000066A0 __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$0 proc near
.text$x:000066A0                                         ; DATA XREF: .xdata$x:0000C3C8o
.text$x:000066A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000066A3                 jmp     ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$x:000066A3 __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$0 endp
.text$x:000066A3
.text$x:000066A8
.text$x:000066A8 ; =============== S U B R O U T I N E =======================================
.text$x:000066A8
.text$x:000066A8
.text$x:000066A8 __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$1 proc near
.text$x:000066A8                                         ; DATA XREF: .xdata$x:0000C3D0o
.text$x:000066A8                 mov     ecx, [ebp-10h]
.text$x:000066AB                 add     ecx, 10h
.text$x:000066AE                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000066AE __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$1 endp
.text$x:000066AE
.text$x:000066B3
.text$x:000066B3 ; =============== S U B R O U T I N E =======================================
.text$x:000066B3
.text$x:000066B3
.text$x:000066B3 __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$2 proc near
.text$x:000066B3                                         ; DATA XREF: .xdata$x:0000C3D8o
.text$x:000066B3                 mov     ecx, [ebp-10h]
.text$x:000066B6                 add     ecx, 2Ch ; ','
.text$x:000066B9                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000066B9 __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$2 endp
.text$x:000066B9
.text$x:000066BE
.text$x:000066BE ; =============== S U B R O U T I N E =======================================
.text$x:000066BE
.text$x:000066BE
.text$x:000066BE __ehhandler$??1TiXmlAttributeA@@UAE@XZ proc near
.text$x:000066BE                                         ; DATA XREF: TiXmlAttributeA::~TiXmlAttributeA(void)+5o
.text$x:000066BE
.text$x:000066BE arg_4           = dword ptr  8
.text$x:000066BE
.text$x:000066BE                 mov     edx, [esp+arg_4]
.text$x:000066C2                 lea     eax, [edx+0Ch]
.text$x:000066C5                 mov     ecx, [edx-8]
.text$x:000066C8                 xor     ecx, eax
.text$x:000066CA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000066CF                 mov     eax, offset __ehfuncinfo$??1TiXmlAttributeA@@UAE@XZ
.text$x:000066D4                 jmp     ___CxxFrameHandler3
.text$x:000066D4 __ehhandler$??1TiXmlAttributeA@@UAE@XZ endp
.text$x:000066D4
.text$x:000066D4 ; ---------------------------------------------------------------------------
.text$x:000066D9                 align 4
.text$x:000066D9 _text$x         ends
.text$x:000066D9
.text$mn:000066DC ; ===========================================================================
.text$mn:000066DC
.text$mn:000066DC ; Segment type: Pure code
.text$mn:000066DC ; Segment permissions: Read/Execute
.text$mn:000066DC _text$mn        segment para public 'CODE' use32
.text$mn:000066DC                 assume cs:_text$mn
.text$mn:000066DC                 ;org 66DCh
.text$mn:000066DC ; COMDAT (pick any)
.text$mn:000066DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066DC
.text$mn:000066DC ; =============== S U B R O U T I N E =======================================
.text$mn:000066DC
.text$mn:000066DC ; Attributes: bp-based frame
.text$mn:000066DC
.text$mn:000066DC ; _DWORD __thiscall TiXmlBaseA::~TiXmlBaseA(TiXmlBaseA *__hidden this)
.text$mn:000066DC                 public ??1TiXmlBaseA@@UAE@XZ
.text$mn:000066DC ??1TiXmlBaseA@@UAE@XZ proc near         ; CODE XREF: TiXmlNodeA::~TiXmlNodeA(void)+A4p
.text$mn:000066DC                                         ; __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$0+3j ...
.text$mn:000066DC
.text$mn:000066DC var_4           = dword ptr -4
.text$mn:000066DC
.text$mn:000066DC                 push    ebp
.text$mn:000066DD                 mov     ebp, esp
.text$mn:000066DF                 push    ecx
.text$mn:000066E0                 mov     [ebp+var_4], ecx
.text$mn:000066E3                 mov     eax, [ebp+var_4]
.text$mn:000066E6                 mov     dword ptr [eax], offset ??_7TiXmlBaseA@@6B@ ; const TiXmlBaseA::`vftable'
.text$mn:000066EC                 mov     esp, ebp
.text$mn:000066EE                 pop     ebp
.text$mn:000066EF                 retn
.text$mn:000066EF ??1TiXmlBaseA@@UAE@XZ endp
.text$mn:000066EF
.text$mn:000066EF _text$mn        ends
.text$mn:000066EF
.text$mn:000066F0 ; ===========================================================================
.text$mn:000066F0
.text$mn:000066F0 ; Segment type: Pure code
.text$mn:000066F0 ; Segment permissions: Read/Execute
.text$mn:000066F0 _text$mn        segment para public 'CODE' use32
.text$mn:000066F0                 assume cs:_text$mn
.text$mn:000066F0                 ;org 66F0h
.text$mn:000066F0 ; COMDAT (pick any)
.text$mn:000066F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066F0
.text$mn:000066F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000066F0
.text$mn:000066F0 ; Attributes: bp-based frame
.text$mn:000066F0
.text$mn:000066F0 ; _DWORD __thiscall TiXmlCommentA::~TiXmlCommentA(TiXmlCommentA *__hidden this)
.text$mn:000066F0                 public ??1TiXmlCommentA@@UAE@XZ
.text$mn:000066F0 ??1TiXmlCommentA@@UAE@XZ proc near      ; CODE XREF: TiXmlCommentA::`scalar deleting destructor'(uint)+Ap
.text$mn:000066F0
.text$mn:000066F0 var_10          = dword ptr -10h
.text$mn:000066F0 var_C           = dword ptr -0Ch
.text$mn:000066F0 var_4           = dword ptr -4
.text$mn:000066F0
.text$mn:000066F0                 push    ebp
.text$mn:000066F1                 mov     ebp, esp
.text$mn:000066F3                 push    0FFFFFFFFh
.text$mn:000066F5                 push    offset __ehhandler$??1TiXmlCommentA@@UAE@XZ
.text$mn:000066FA                 mov     eax, large fs:0
.text$mn:00006700                 push    eax
.text$mn:00006701                 push    ecx
.text$mn:00006702                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006707                 xor     eax, ebp
.text$mn:00006709                 push    eax
.text$mn:0000670A                 lea     eax, [ebp+var_C]
.text$mn:0000670D                 mov     large fs:0, eax
.text$mn:00006713                 mov     [ebp+var_10], ecx
.text$mn:00006716                 mov     eax, [ebp+var_10]
.text$mn:00006719                 mov     dword ptr [eax], offset ??_7TiXmlCommentA@@6B@ ; const TiXmlCommentA::`vftable'
.text$mn:0000671F                 mov     [ebp+var_4], 0
.text$mn:00006726                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000672D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006730                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00006735                 mov     ecx, [ebp+var_C]
.text$mn:00006738                 mov     large fs:0, ecx
.text$mn:0000673F                 pop     ecx
.text$mn:00006740                 mov     esp, ebp
.text$mn:00006742                 pop     ebp
.text$mn:00006743                 retn
.text$mn:00006743 ??1TiXmlCommentA@@UAE@XZ endp
.text$mn:00006743
.text$mn:00006743 _text$mn        ends
.text$mn:00006743
.text$x:00006744 ; ===========================================================================
.text$x:00006744
.text$x:00006744 ; Segment type: Pure code
.text$x:00006744 ; Segment permissions: Read/Execute
.text$x:00006744 _text$x         segment para public 'CODE' use32
.text$x:00006744                 assume cs:_text$x
.text$x:00006744                 ;org 6744h
.text$x:00006744 ; COMDAT (pick associative to section at 66F0)
.text$x:00006744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006744
.text$x:00006744 ; =============== S U B R O U T I N E =======================================
.text$x:00006744
.text$x:00006744
.text$x:00006744 __unwindfunclet$??1TiXmlCommentA@@UAE@XZ$0 proc near
.text$x:00006744                                         ; DATA XREF: .xdata$x:0000C430o
.text$x:00006744                 mov     ecx, [ebp-10h]  ; this
.text$x:00006747                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00006747 __unwindfunclet$??1TiXmlCommentA@@UAE@XZ$0 endp
.text$x:00006747
.text$x:0000674C
.text$x:0000674C ; =============== S U B R O U T I N E =======================================
.text$x:0000674C
.text$x:0000674C
.text$x:0000674C __ehhandler$??1TiXmlCommentA@@UAE@XZ proc near
.text$x:0000674C                                         ; DATA XREF: TiXmlCommentA::~TiXmlCommentA(void)+5o
.text$x:0000674C
.text$x:0000674C arg_4           = dword ptr  8
.text$x:0000674C
.text$x:0000674C                 mov     edx, [esp+arg_4]
.text$x:00006750                 lea     eax, [edx+0Ch]
.text$x:00006753                 mov     ecx, [edx-8]
.text$x:00006756                 xor     ecx, eax
.text$x:00006758                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000675D                 mov     eax, offset __ehfuncinfo$??1TiXmlCommentA@@UAE@XZ
.text$x:00006762                 jmp     ___CxxFrameHandler3
.text$x:00006762 __ehhandler$??1TiXmlCommentA@@UAE@XZ endp
.text$x:00006762
.text$x:00006762 ; ---------------------------------------------------------------------------
.text$x:00006767                 align 4
.text$x:00006767 _text$x         ends
.text$x:00006767
.text$mn:00006768 ; ===========================================================================
.text$mn:00006768
.text$mn:00006768 ; Segment type: Pure code
.text$mn:00006768 ; Segment permissions: Read/Execute
.text$mn:00006768 _text$mn        segment para public 'CODE' use32
.text$mn:00006768                 assume cs:_text$mn
.text$mn:00006768                 ;org 6768h
.text$mn:00006768 ; COMDAT (pick any)
.text$mn:00006768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006768
.text$mn:00006768 ; =============== S U B R O U T I N E =======================================
.text$mn:00006768
.text$mn:00006768 ; Attributes: bp-based frame
.text$mn:00006768
.text$mn:00006768 ; _DWORD __thiscall TiXmlDeclarationA::~TiXmlDeclarationA(TiXmlDeclarationA *__hidden this)
.text$mn:00006768                 public ??1TiXmlDeclarationA@@UAE@XZ
.text$mn:00006768 ??1TiXmlDeclarationA@@UAE@XZ proc near  ; CODE XREF: TiXmlDeclarationA::`scalar deleting destructor'(uint)+Ap
.text$mn:00006768
.text$mn:00006768 var_10          = dword ptr -10h
.text$mn:00006768 var_C           = dword ptr -0Ch
.text$mn:00006768 var_4           = dword ptr -4
.text$mn:00006768
.text$mn:00006768                 push    ebp
.text$mn:00006769                 mov     ebp, esp
.text$mn:0000676B                 push    0FFFFFFFFh
.text$mn:0000676D                 push    offset __ehhandler$??1TiXmlDeclarationA@@UAE@XZ
.text$mn:00006772                 mov     eax, large fs:0
.text$mn:00006778                 push    eax
.text$mn:00006779                 push    ecx
.text$mn:0000677A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000677F                 xor     eax, ebp
.text$mn:00006781                 push    eax
.text$mn:00006782                 lea     eax, [ebp+var_C]
.text$mn:00006785                 mov     large fs:0, eax
.text$mn:0000678B                 mov     [ebp+var_10], ecx
.text$mn:0000678E                 mov     eax, [ebp+var_10]
.text$mn:00006791                 mov     dword ptr [eax], offset ??_7TiXmlDeclarationA@@6B@ ; const TiXmlDeclarationA::`vftable'
.text$mn:00006797                 mov     [ebp+var_4], 3
.text$mn:0000679E                 mov     byte ptr [ebp+var_4], 2
.text$mn:000067A2                 mov     ecx, [ebp+var_10]
.text$mn:000067A5                 add     ecx, 7Ch ; '|'
.text$mn:000067A8                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000067AD                 mov     byte ptr [ebp+var_4], 1
.text$mn:000067B1                 mov     ecx, [ebp+var_10]
.text$mn:000067B4                 add     ecx, 60h ; '`'
.text$mn:000067B7                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000067BC                 mov     byte ptr [ebp+var_4], 0
.text$mn:000067C0                 mov     ecx, [ebp+var_10]
.text$mn:000067C3                 add     ecx, 44h ; 'D'
.text$mn:000067C6                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:000067CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067D2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000067D5                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:000067DA                 mov     ecx, [ebp+var_C]
.text$mn:000067DD                 mov     large fs:0, ecx
.text$mn:000067E4                 pop     ecx
.text$mn:000067E5                 mov     esp, ebp
.text$mn:000067E7                 pop     ebp
.text$mn:000067E8                 retn
.text$mn:000067E8 ??1TiXmlDeclarationA@@UAE@XZ endp
.text$mn:000067E8
.text$mn:000067E8 ; ---------------------------------------------------------------------------
.text$mn:000067E9                 align 4
.text$mn:000067E9 _text$mn        ends
.text$mn:000067E9
.text$x:000067EC ; ===========================================================================
.text$x:000067EC
.text$x:000067EC ; Segment type: Pure code
.text$x:000067EC ; Segment permissions: Read/Execute
.text$x:000067EC _text$x         segment para public 'CODE' use32
.text$x:000067EC                 assume cs:_text$x
.text$x:000067EC                 ;org 67ECh
.text$x:000067EC ; COMDAT (pick associative to section at 6768)
.text$x:000067EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000067EC
.text$x:000067EC ; =============== S U B R O U T I N E =======================================
.text$x:000067EC
.text$x:000067EC
.text$x:000067EC __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$0 proc near
.text$x:000067EC                                         ; DATA XREF: .xdata$x:0000C4F8o
.text$x:000067EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000067EF                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:000067EF __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$0 endp
.text$x:000067EF
.text$x:000067F4
.text$x:000067F4 ; =============== S U B R O U T I N E =======================================
.text$x:000067F4
.text$x:000067F4
.text$x:000067F4 __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$1 proc near
.text$x:000067F4                                         ; DATA XREF: .xdata$x:0000C500o
.text$x:000067F4                 mov     ecx, [ebp-10h]
.text$x:000067F7                 add     ecx, 44h ; 'D'
.text$x:000067FA                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000067FA __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$1 endp
.text$x:000067FA
.text$x:000067FF
.text$x:000067FF ; =============== S U B R O U T I N E =======================================
.text$x:000067FF
.text$x:000067FF
.text$x:000067FF __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$2 proc near
.text$x:000067FF                                         ; DATA XREF: .xdata$x:0000C508o
.text$x:000067FF                 mov     ecx, [ebp-10h]
.text$x:00006802                 add     ecx, 60h ; '`'
.text$x:00006805                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006805 __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$2 endp
.text$x:00006805
.text$x:0000680A
.text$x:0000680A ; =============== S U B R O U T I N E =======================================
.text$x:0000680A
.text$x:0000680A
.text$x:0000680A __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$3 proc near
.text$x:0000680A                                         ; DATA XREF: .xdata$x:0000C510o
.text$x:0000680A                 mov     ecx, [ebp-10h]
.text$x:0000680D                 add     ecx, 7Ch ; '|'
.text$x:00006810                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006810 __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$3 endp
.text$x:00006810
.text$x:00006815
.text$x:00006815 ; =============== S U B R O U T I N E =======================================
.text$x:00006815
.text$x:00006815
.text$x:00006815 __ehhandler$??1TiXmlDeclarationA@@UAE@XZ proc near
.text$x:00006815                                         ; DATA XREF: TiXmlDeclarationA::~TiXmlDeclarationA(void)+5o
.text$x:00006815
.text$x:00006815 arg_4           = dword ptr  8
.text$x:00006815
.text$x:00006815                 mov     edx, [esp+arg_4]
.text$x:00006819                 lea     eax, [edx+0Ch]
.text$x:0000681C                 mov     ecx, [edx-8]
.text$x:0000681F                 xor     ecx, eax
.text$x:00006821                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006826                 mov     eax, offset __ehfuncinfo$??1TiXmlDeclarationA@@UAE@XZ
.text$x:0000682B                 jmp     ___CxxFrameHandler3
.text$x:0000682B __ehhandler$??1TiXmlDeclarationA@@UAE@XZ endp
.text$x:0000682B
.text$x:0000682B _text$x         ends
.text$x:0000682B
.text$mn:00006830 ; ===========================================================================
.text$mn:00006830
.text$mn:00006830 ; Segment type: Pure code
.text$mn:00006830 ; Segment permissions: Read/Execute
.text$mn:00006830 _text$mn        segment para public 'CODE' use32
.text$mn:00006830                 assume cs:_text$mn
.text$mn:00006830                 ;org 6830h
.text$mn:00006830 ; COMDAT (pick any)
.text$mn:00006830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006830
.text$mn:00006830 ; =============== S U B R O U T I N E =======================================
.text$mn:00006830
.text$mn:00006830 ; Attributes: bp-based frame
.text$mn:00006830
.text$mn:00006830 ; _DWORD __thiscall TiXmlDocumentA::~TiXmlDocumentA(TiXmlDocumentA *__hidden this)
.text$mn:00006830                 public ??1TiXmlDocumentA@@UAE@XZ
.text$mn:00006830 ??1TiXmlDocumentA@@UAE@XZ proc near     ; CODE XREF: TiXmlDocumentA::`scalar deleting destructor'(uint)+Ap
.text$mn:00006830
.text$mn:00006830 var_10          = dword ptr -10h
.text$mn:00006830 var_C           = dword ptr -0Ch
.text$mn:00006830 var_4           = dword ptr -4
.text$mn:00006830
.text$mn:00006830                 push    ebp
.text$mn:00006831                 mov     ebp, esp
.text$mn:00006833                 push    0FFFFFFFFh
.text$mn:00006835                 push    offset __ehhandler$??1TiXmlDocumentA@@UAE@XZ
.text$mn:0000683A                 mov     eax, large fs:0
.text$mn:00006840                 push    eax
.text$mn:00006841                 push    ecx
.text$mn:00006842                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006847                 xor     eax, ebp
.text$mn:00006849                 push    eax
.text$mn:0000684A                 lea     eax, [ebp+var_C]
.text$mn:0000684D                 mov     large fs:0, eax
.text$mn:00006853                 mov     [ebp+var_10], ecx
.text$mn:00006856                 mov     eax, [ebp+var_10]
.text$mn:00006859                 mov     dword ptr [eax], offset ??_7TiXmlDocumentA@@6B@ ; const TiXmlDocumentA::`vftable'
.text$mn:0000685F                 mov     [ebp+var_4], 1
.text$mn:00006866                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000686A                 mov     ecx, [ebp+var_10]
.text$mn:0000686D                 add     ecx, 4Ch ; 'L'
.text$mn:00006870                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00006875                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000687C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000687F                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00006884                 mov     ecx, [ebp+var_C]
.text$mn:00006887                 mov     large fs:0, ecx
.text$mn:0000688E                 pop     ecx
.text$mn:0000688F                 mov     esp, ebp
.text$mn:00006891                 pop     ebp
.text$mn:00006892                 retn
.text$mn:00006892 ??1TiXmlDocumentA@@UAE@XZ endp
.text$mn:00006892
.text$mn:00006892 ; ---------------------------------------------------------------------------
.text$mn:00006893                 align 4
.text$mn:00006893 _text$mn        ends
.text$mn:00006893
.text$x:00006894 ; ===========================================================================
.text$x:00006894
.text$x:00006894 ; Segment type: Pure code
.text$x:00006894 ; Segment permissions: Read/Execute
.text$x:00006894 _text$x         segment para public 'CODE' use32
.text$x:00006894                 assume cs:_text$x
.text$x:00006894                 ;org 6894h
.text$x:00006894 ; COMDAT (pick associative to section at 6830)
.text$x:00006894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006894
.text$x:00006894 ; =============== S U B R O U T I N E =======================================
.text$x:00006894
.text$x:00006894
.text$x:00006894 __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$0 proc near
.text$x:00006894                                         ; DATA XREF: .xdata$x:0000C594o
.text$x:00006894                 mov     ecx, [ebp-10h]  ; this
.text$x:00006897                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00006897 __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$0 endp
.text$x:00006897
.text$x:0000689C
.text$x:0000689C ; =============== S U B R O U T I N E =======================================
.text$x:0000689C
.text$x:0000689C
.text$x:0000689C __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$1 proc near
.text$x:0000689C                                         ; DATA XREF: .xdata$x:0000C59Co
.text$x:0000689C                 mov     ecx, [ebp-10h]
.text$x:0000689F                 add     ecx, 4Ch ; 'L'
.text$x:000068A2                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000068A2 __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$1 endp
.text$x:000068A2
.text$x:000068A7
.text$x:000068A7 ; =============== S U B R O U T I N E =======================================
.text$x:000068A7
.text$x:000068A7
.text$x:000068A7 __ehhandler$??1TiXmlDocumentA@@UAE@XZ proc near
.text$x:000068A7                                         ; DATA XREF: TiXmlDocumentA::~TiXmlDocumentA(void)+5o
.text$x:000068A7
.text$x:000068A7 arg_4           = dword ptr  8
.text$x:000068A7
.text$x:000068A7                 mov     edx, [esp+arg_4]
.text$x:000068AB                 lea     eax, [edx+0Ch]
.text$x:000068AE                 mov     ecx, [edx-8]
.text$x:000068B1                 xor     ecx, eax
.text$x:000068B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068B8                 mov     eax, offset __ehfuncinfo$??1TiXmlDocumentA@@UAE@XZ
.text$x:000068BD                 jmp     ___CxxFrameHandler3
.text$x:000068BD __ehhandler$??1TiXmlDocumentA@@UAE@XZ endp
.text$x:000068BD
.text$x:000068BD ; ---------------------------------------------------------------------------
.text$x:000068C2                 align 4
.text$x:000068C2 _text$x         ends
.text$x:000068C2
.text$mn:000068C4 ; ===========================================================================
.text$mn:000068C4
.text$mn:000068C4 ; Segment type: Pure code
.text$mn:000068C4 ; Segment permissions: Read/Execute
.text$mn:000068C4 _text$mn        segment para public 'CODE' use32
.text$mn:000068C4                 assume cs:_text$mn
.text$mn:000068C4                 ;org 68C4h
.text$mn:000068C4 ; COMDAT (pick any)
.text$mn:000068C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068C4
.text$mn:000068C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000068C4
.text$mn:000068C4 ; Attributes: bp-based frame
.text$mn:000068C4
.text$mn:000068C4 ; _DWORD __thiscall TiXmlTextA::~TiXmlTextA(TiXmlTextA *__hidden this)
.text$mn:000068C4                 public ??1TiXmlTextA@@UAE@XZ
.text$mn:000068C4 ??1TiXmlTextA@@UAE@XZ proc near         ; CODE XREF: TiXmlTextA::`scalar deleting destructor'(uint)+Ap
.text$mn:000068C4
.text$mn:000068C4 var_10          = dword ptr -10h
.text$mn:000068C4 var_C           = dword ptr -0Ch
.text$mn:000068C4 var_4           = dword ptr -4
.text$mn:000068C4
.text$mn:000068C4                 push    ebp
.text$mn:000068C5                 mov     ebp, esp
.text$mn:000068C7                 push    0FFFFFFFFh
.text$mn:000068C9                 push    offset __ehhandler$??1TiXmlTextA@@UAE@XZ
.text$mn:000068CE                 mov     eax, large fs:0
.text$mn:000068D4                 push    eax
.text$mn:000068D5                 push    ecx
.text$mn:000068D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068DB                 xor     eax, ebp
.text$mn:000068DD                 push    eax
.text$mn:000068DE                 lea     eax, [ebp+var_C]
.text$mn:000068E1                 mov     large fs:0, eax
.text$mn:000068E7                 mov     [ebp+var_10], ecx
.text$mn:000068EA                 mov     eax, [ebp+var_10]
.text$mn:000068ED                 mov     dword ptr [eax], offset ??_7TiXmlTextA@@6B@ ; const TiXmlTextA::`vftable'
.text$mn:000068F3                 mov     [ebp+var_4], 0
.text$mn:000068FA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006901                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006904                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00006909                 mov     ecx, [ebp+var_C]
.text$mn:0000690C                 mov     large fs:0, ecx
.text$mn:00006913                 pop     ecx
.text$mn:00006914                 mov     esp, ebp
.text$mn:00006916                 pop     ebp
.text$mn:00006917                 retn
.text$mn:00006917 ??1TiXmlTextA@@UAE@XZ endp
.text$mn:00006917
.text$mn:00006917 _text$mn        ends
.text$mn:00006917
.text$x:00006918 ; ===========================================================================
.text$x:00006918
.text$x:00006918 ; Segment type: Pure code
.text$x:00006918 ; Segment permissions: Read/Execute
.text$x:00006918 _text$x         segment para public 'CODE' use32
.text$x:00006918                 assume cs:_text$x
.text$x:00006918                 ;org 6918h
.text$x:00006918 ; COMDAT (pick associative to section at 68C4)
.text$x:00006918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006918
.text$x:00006918 ; =============== S U B R O U T I N E =======================================
.text$x:00006918
.text$x:00006918
.text$x:00006918 __unwindfunclet$??1TiXmlTextA@@UAE@XZ$0 proc near
.text$x:00006918                                         ; DATA XREF: .xdata$x:0000C488o
.text$x:00006918                 mov     ecx, [ebp-10h]  ; this
.text$x:0000691B                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:0000691B __unwindfunclet$??1TiXmlTextA@@UAE@XZ$0 endp
.text$x:0000691B
.text$x:00006920
.text$x:00006920 ; =============== S U B R O U T I N E =======================================
.text$x:00006920
.text$x:00006920
.text$x:00006920 __ehhandler$??1TiXmlTextA@@UAE@XZ proc near
.text$x:00006920                                         ; DATA XREF: TiXmlTextA::~TiXmlTextA(void)+5o
.text$x:00006920
.text$x:00006920 arg_4           = dword ptr  8
.text$x:00006920
.text$x:00006920                 mov     edx, [esp+arg_4]
.text$x:00006924                 lea     eax, [edx+0Ch]
.text$x:00006927                 mov     ecx, [edx-8]
.text$x:0000692A                 xor     ecx, eax
.text$x:0000692C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006931                 mov     eax, offset __ehfuncinfo$??1TiXmlTextA@@UAE@XZ
.text$x:00006936                 jmp     ___CxxFrameHandler3
.text$x:00006936 __ehhandler$??1TiXmlTextA@@UAE@XZ endp
.text$x:00006936
.text$x:00006936 ; ---------------------------------------------------------------------------
.text$x:0000693B                 align 4
.text$x:0000693B _text$x         ends
.text$x:0000693B
.text$mn:0000693C ; ===========================================================================
.text$mn:0000693C
.text$mn:0000693C ; Segment type: Pure code
.text$mn:0000693C ; Segment permissions: Read/Execute
.text$mn:0000693C _text$mn        segment para public 'CODE' use32
.text$mn:0000693C                 assume cs:_text$mn
.text$mn:0000693C                 ;org 693Ch
.text$mn:0000693C ; COMDAT (pick any)
.text$mn:0000693C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000693C
.text$mn:0000693C ; =============== S U B R O U T I N E =======================================
.text$mn:0000693C
.text$mn:0000693C ; Attributes: bp-based frame
.text$mn:0000693C
.text$mn:0000693C ; _DWORD __thiscall TiXmlUnknownA::~TiXmlUnknownA(TiXmlUnknownA *__hidden this)
.text$mn:0000693C                 public ??1TiXmlUnknownA@@UAE@XZ
.text$mn:0000693C ??1TiXmlUnknownA@@UAE@XZ proc near      ; CODE XREF: TiXmlUnknownA::`scalar deleting destructor'(uint)+Ap
.text$mn:0000693C
.text$mn:0000693C var_10          = dword ptr -10h
.text$mn:0000693C var_C           = dword ptr -0Ch
.text$mn:0000693C var_4           = dword ptr -4
.text$mn:0000693C
.text$mn:0000693C                 push    ebp
.text$mn:0000693D                 mov     ebp, esp
.text$mn:0000693F                 push    0FFFFFFFFh
.text$mn:00006941                 push    offset __ehhandler$??1TiXmlUnknownA@@UAE@XZ
.text$mn:00006946                 mov     eax, large fs:0
.text$mn:0000694C                 push    eax
.text$mn:0000694D                 push    ecx
.text$mn:0000694E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006953                 xor     eax, ebp
.text$mn:00006955                 push    eax
.text$mn:00006956                 lea     eax, [ebp+var_C]
.text$mn:00006959                 mov     large fs:0, eax
.text$mn:0000695F                 mov     [ebp+var_10], ecx
.text$mn:00006962                 mov     eax, [ebp+var_10]
.text$mn:00006965                 mov     dword ptr [eax], offset ??_7TiXmlUnknownA@@6B@ ; const TiXmlUnknownA::`vftable'
.text$mn:0000696B                 mov     [ebp+var_4], 0
.text$mn:00006972                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006979                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000697C                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00006981                 mov     ecx, [ebp+var_C]
.text$mn:00006984                 mov     large fs:0, ecx
.text$mn:0000698B                 pop     ecx
.text$mn:0000698C                 mov     esp, ebp
.text$mn:0000698E                 pop     ebp
.text$mn:0000698F                 retn
.text$mn:0000698F ??1TiXmlUnknownA@@UAE@XZ endp
.text$mn:0000698F
.text$mn:0000698F _text$mn        ends
.text$mn:0000698F
.text$x:00006990 ; ===========================================================================
.text$x:00006990
.text$x:00006990 ; Segment type: Pure code
.text$x:00006990 ; Segment permissions: Read/Execute
.text$x:00006990 _text$x         segment para public 'CODE' use32
.text$x:00006990                 assume cs:_text$x
.text$x:00006990                 ;org 6990h
.text$x:00006990 ; COMDAT (pick associative to section at 693C)
.text$x:00006990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006990
.text$x:00006990 ; =============== S U B R O U T I N E =======================================
.text$x:00006990
.text$x:00006990
.text$x:00006990 __unwindfunclet$??1TiXmlUnknownA@@UAE@XZ$0 proc near
.text$x:00006990                                         ; DATA XREF: .xdata$x:0000C568o
.text$x:00006990                 mov     ecx, [ebp-10h]  ; this
.text$x:00006993                 jmp     ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$x:00006993 __unwindfunclet$??1TiXmlUnknownA@@UAE@XZ$0 endp
.text$x:00006993
.text$x:00006998
.text$x:00006998 ; =============== S U B R O U T I N E =======================================
.text$x:00006998
.text$x:00006998
.text$x:00006998 __ehhandler$??1TiXmlUnknownA@@UAE@XZ proc near
.text$x:00006998                                         ; DATA XREF: TiXmlUnknownA::~TiXmlUnknownA(void)+5o
.text$x:00006998
.text$x:00006998 arg_4           = dword ptr  8
.text$x:00006998
.text$x:00006998                 mov     edx, [esp+arg_4]
.text$x:0000699C                 lea     eax, [edx+0Ch]
.text$x:0000699F                 mov     ecx, [edx-8]
.text$x:000069A2                 xor     ecx, eax
.text$x:000069A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069A9                 mov     eax, offset __ehfuncinfo$??1TiXmlUnknownA@@UAE@XZ
.text$x:000069AE                 jmp     ___CxxFrameHandler3
.text$x:000069AE __ehhandler$??1TiXmlUnknownA@@UAE@XZ endp
.text$x:000069AE
.text$x:000069AE ; ---------------------------------------------------------------------------
.text$x:000069B3                 align 4
.text$x:000069B3 _text$x         ends
.text$x:000069B3
.text$mn:000069B4 ; ===========================================================================
.text$mn:000069B4
.text$mn:000069B4 ; Segment type: Pure code
.text$mn:000069B4 ; Segment permissions: Read/Execute
.text$mn:000069B4 _text$mn        segment para public 'CODE' use32
.text$mn:000069B4                 assume cs:_text$mn
.text$mn:000069B4                 ;org 69B4h
.text$mn:000069B4 ; COMDAT (pick any)
.text$mn:000069B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069B4
.text$mn:000069B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000069B4
.text$mn:000069B4 ; Attributes: bp-based frame
.text$mn:000069B4
.text$mn:000069B4 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000069B4                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:000069B4 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:000069B4                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:000069B4                                         ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+37p ...
.text$mn:000069B4
.text$mn:000069B4 var_4           = dword ptr -4
.text$mn:000069B4
.text$mn:000069B4                 push    ebp
.text$mn:000069B5                 mov     ebp, esp
.text$mn:000069B7                 push    ecx
.text$mn:000069B8                 mov     [ebp+var_4], ecx
.text$mn:000069BB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000069BE                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000069C3                 mov     esp, ebp
.text$mn:000069C5                 pop     ebp
.text$mn:000069C6                 retn
.text$mn:000069C6 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:000069C6
.text$mn:000069C6 ; ---------------------------------------------------------------------------
.text$mn:000069C7                 align 4
.text$mn:000069C7 _text$mn        ends
.text$mn:000069C7
.text$mn:000069C8 ; ===========================================================================
.text$mn:000069C8
.text$mn:000069C8 ; Segment type: Pure code
.text$mn:000069C8 ; Segment permissions: Read/Execute
.text$mn:000069C8 _text$mn        segment para public 'CODE' use32
.text$mn:000069C8                 assume cs:_text$mn
.text$mn:000069C8                 ;org 69C8h
.text$mn:000069C8 ; COMDAT (pick any)
.text$mn:000069C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069C8
.text$mn:000069C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000069C8
.text$mn:000069C8 ; Attributes: bp-based frame
.text$mn:000069C8
.text$mn:000069C8 ; _DWORD __thiscall std::_Facet_base::~_Facet_base(std::_Facet_base *__hidden this)
.text$mn:000069C8                 public ??1_Facet_base@std@@UAE@XZ
.text$mn:000069C8 ??1_Facet_base@std@@UAE@XZ proc near    ; CODE XREF: __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0+3j
.text$mn:000069C8                                         ; std::locale::facet::~facet(void)+40p ...
.text$mn:000069C8
.text$mn:000069C8 var_4           = dword ptr -4
.text$mn:000069C8
.text$mn:000069C8                 push    ebp
.text$mn:000069C9                 mov     ebp, esp
.text$mn:000069CB                 push    ecx
.text$mn:000069CC                 mov     [ebp+var_4], ecx
.text$mn:000069CF                 mov     eax, [ebp+var_4]
.text$mn:000069D2                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:000069D8                 mov     esp, ebp
.text$mn:000069DA                 pop     ebp
.text$mn:000069DB                 retn
.text$mn:000069DB ??1_Facet_base@std@@UAE@XZ endp
.text$mn:000069DB
.text$mn:000069DB _text$mn        ends
.text$mn:000069DB
.text$mn:000069DC ; ===========================================================================
.text$mn:000069DC
.text$mn:000069DC ; Segment type: Pure code
.text$mn:000069DC ; Segment permissions: Read/Execute
.text$mn:000069DC _text$mn        segment para public 'CODE' use32
.text$mn:000069DC                 assume cs:_text$mn
.text$mn:000069DC                 ;org 69DCh
.text$mn:000069DC ; COMDAT (pick any)
.text$mn:000069DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069DC
.text$mn:000069DC ; =============== S U B R O U T I N E =======================================
.text$mn:000069DC
.text$mn:000069DC ; Attributes: bp-based frame
.text$mn:000069DC
.text$mn:000069DC ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000069DC                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:000069DC ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:000069DC                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:000069DC                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:000069DC
.text$mn:000069DC var_10          = dword ptr -10h
.text$mn:000069DC var_C           = dword ptr -0Ch
.text$mn:000069DC var_4           = dword ptr -4
.text$mn:000069DC
.text$mn:000069DC                 push    ebp
.text$mn:000069DD                 mov     ebp, esp
.text$mn:000069DF                 push    0FFFFFFFFh
.text$mn:000069E1                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:000069E6                 mov     eax, large fs:0
.text$mn:000069EC                 push    eax
.text$mn:000069ED                 push    ecx
.text$mn:000069EE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069F3                 xor     eax, ebp
.text$mn:000069F5                 push    eax
.text$mn:000069F6                 lea     eax, [ebp+var_C]
.text$mn:000069F9                 mov     large fs:0, eax
.text$mn:000069FF                 mov     [ebp+var_10], ecx
.text$mn:00006A02                 mov     [ebp+var_4], 0
.text$mn:00006A09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A10                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006A13                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00006A18                 mov     ecx, [ebp+var_C]
.text$mn:00006A1B                 mov     large fs:0, ecx
.text$mn:00006A22                 pop     ecx
.text$mn:00006A23                 mov     esp, ebp
.text$mn:00006A25                 pop     ebp
.text$mn:00006A26                 retn
.text$mn:00006A26 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00006A26
.text$mn:00006A26 ; ---------------------------------------------------------------------------
.text$mn:00006A27                 align 4
.text$mn:00006A27 _text$mn        ends
.text$mn:00006A27
.text$x:00006A28 ; ===========================================================================
.text$x:00006A28
.text$x:00006A28 ; Segment type: Pure code
.text$x:00006A28 ; Segment permissions: Read/Execute
.text$x:00006A28 _text$x         segment para public 'CODE' use32
.text$x:00006A28                 assume cs:_text$x
.text$x:00006A28                 ;org 6A28h
.text$x:00006A28 ; COMDAT (pick associative to section at 69DC)
.text$x:00006A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A28
.text$x:00006A28 ; =============== S U B R O U T I N E =======================================
.text$x:00006A28
.text$x:00006A28
.text$x:00006A28 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00006A28                                         ; DATA XREF: .xdata$x:0000BA88o
.text$x:00006A28                 mov     ecx, [ebp-10h]  ; this
.text$x:00006A2B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00006A2B __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00006A2B
.text$x:00006A30
.text$x:00006A30 ; =============== S U B R O U T I N E =======================================
.text$x:00006A30
.text$x:00006A30
.text$x:00006A30 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00006A30                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00006A30
.text$x:00006A30 arg_4           = dword ptr  8
.text$x:00006A30
.text$x:00006A30                 mov     edx, [esp+arg_4]
.text$x:00006A34                 lea     eax, [edx+0Ch]
.text$x:00006A37                 mov     ecx, [edx-8]
.text$x:00006A3A                 xor     ecx, eax
.text$x:00006A3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A41                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00006A46                 jmp     ___CxxFrameHandler3
.text$x:00006A46 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00006A46
.text$x:00006A46 ; ---------------------------------------------------------------------------
.text$x:00006A4B                 align 4
.text$x:00006A4B _text$x         ends
.text$x:00006A4B
.text$mn:00006A4C ; ===========================================================================
.text$mn:00006A4C
.text$mn:00006A4C ; Segment type: Pure code
.text$mn:00006A4C ; Segment permissions: Read/Execute
.text$mn:00006A4C _text$mn        segment para public 'CODE' use32
.text$mn:00006A4C                 assume cs:_text$mn
.text$mn:00006A4C                 ;org 6A4Ch
.text$mn:00006A4C ; COMDAT (pick any)
.text$mn:00006A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A4C
.text$mn:00006A4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A4C
.text$mn:00006A4C ; Attributes: bp-based frame
.text$mn:00006A4C
.text$mn:00006A4C ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00006A4C                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006A4C ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00006A4C                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00006A4C                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00006A4C
.text$mn:00006A4C var_10          = dword ptr -10h
.text$mn:00006A4C var_C           = dword ptr -0Ch
.text$mn:00006A4C var_4           = dword ptr -4
.text$mn:00006A4C
.text$mn:00006A4C                 push    ebp
.text$mn:00006A4D                 mov     ebp, esp
.text$mn:00006A4F                 push    0FFFFFFFFh
.text$mn:00006A51                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006A56                 mov     eax, large fs:0
.text$mn:00006A5C                 push    eax
.text$mn:00006A5D                 push    ecx
.text$mn:00006A5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A63                 xor     eax, ebp
.text$mn:00006A65                 push    eax
.text$mn:00006A66                 lea     eax, [ebp+var_C]
.text$mn:00006A69                 mov     large fs:0, eax
.text$mn:00006A6F                 mov     [ebp+var_10], ecx
.text$mn:00006A72                 mov     [ebp+var_4], 0
.text$mn:00006A79                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A80                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006A83                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006A88                 mov     ecx, [ebp+var_C]
.text$mn:00006A8B                 mov     large fs:0, ecx
.text$mn:00006A92                 pop     ecx
.text$mn:00006A93                 mov     esp, ebp
.text$mn:00006A95                 pop     ebp
.text$mn:00006A96                 retn
.text$mn:00006A96 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00006A96
.text$mn:00006A96 ; ---------------------------------------------------------------------------
.text$mn:00006A97                 align 4
.text$mn:00006A97 _text$mn        ends
.text$mn:00006A97
.text$x:00006A98 ; ===========================================================================
.text$x:00006A98
.text$x:00006A98 ; Segment type: Pure code
.text$x:00006A98 ; Segment permissions: Read/Execute
.text$x:00006A98 _text$x         segment para public 'CODE' use32
.text$x:00006A98                 assume cs:_text$x
.text$x:00006A98                 ;org 6A98h
.text$x:00006A98 ; COMDAT (pick associative to section at 6A4C)
.text$x:00006A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A98
.text$x:00006A98 ; =============== S U B R O U T I N E =======================================
.text$x:00006A98
.text$x:00006A98
.text$x:00006A98 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00006A98                                         ; DATA XREF: .xdata$x:0000BB0Co
.text$x:00006A98                 mov     ecx, [ebp-10h]  ; this
.text$x:00006A9B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006A9B __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00006A9B
.text$x:00006AA0
.text$x:00006AA0 ; =============== S U B R O U T I N E =======================================
.text$x:00006AA0
.text$x:00006AA0
.text$x:00006AA0 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00006AA0                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00006AA0
.text$x:00006AA0 arg_4           = dword ptr  8
.text$x:00006AA0
.text$x:00006AA0                 mov     edx, [esp+arg_4]
.text$x:00006AA4                 lea     eax, [edx+0Ch]
.text$x:00006AA7                 mov     ecx, [edx-8]
.text$x:00006AAA                 xor     ecx, eax
.text$x:00006AAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AB1                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00006AB6                 jmp     ___CxxFrameHandler3
.text$x:00006AB6 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00006AB6
.text$x:00006AB6 ; ---------------------------------------------------------------------------
.text$x:00006ABB                 align 4
.text$x:00006ABB _text$x         ends
.text$x:00006ABB
.text$mn:00006ABC ; ===========================================================================
.text$mn:00006ABC
.text$mn:00006ABC ; Segment type: Pure code
.text$mn:00006ABC ; Segment permissions: Read/Execute
.text$mn:00006ABC _text$mn        segment para public 'CODE' use32
.text$mn:00006ABC                 assume cs:_text$mn
.text$mn:00006ABC                 ;org 6ABCh
.text$mn:00006ABC ; COMDAT (pick any)
.text$mn:00006ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ABC
.text$mn:00006ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00006ABC
.text$mn:00006ABC ; Attributes: bp-based frame
.text$mn:00006ABC
.text$mn:00006ABC ; _DWORD __thiscall std::_Locinfo::~_Locinfo(std::_Locinfo *__hidden this)
.text$mn:00006ABC                 public ??1_Locinfo@std@@QAE@XZ
.text$mn:00006ABC ??1_Locinfo@std@@QAE@XZ proc near       ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+DEp
.text$mn:00006ABC                                         ; __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+13j
.text$mn:00006ABC
.text$mn:00006ABC var_10          = dword ptr -10h
.text$mn:00006ABC var_C           = dword ptr -0Ch
.text$mn:00006ABC var_4           = dword ptr -4
.text$mn:00006ABC
.text$mn:00006ABC                 push    ebp
.text$mn:00006ABD                 mov     ebp, esp
.text$mn:00006ABF                 push    0FFFFFFFFh
.text$mn:00006AC1                 push    offset __ehhandler$??1_Locinfo@std@@QAE@XZ
.text$mn:00006AC6                 mov     eax, large fs:0
.text$mn:00006ACC                 push    eax
.text$mn:00006ACD                 push    ecx
.text$mn:00006ACE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006AD3                 xor     eax, ebp
.text$mn:00006AD5                 push    eax
.text$mn:00006AD6                 lea     eax, [ebp+var_C]
.text$mn:00006AD9                 mov     large fs:0, eax
.text$mn:00006ADF                 mov     [ebp+var_10], ecx
.text$mn:00006AE2                 mov     [ebp+var_4], 6
.text$mn:00006AE9                 mov     eax, [ebp+var_10]
.text$mn:00006AEC                 push    eax             ; struct std::_Locinfo *
.text$mn:00006AED                 call    ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor(std::_Locinfo *)
.text$mn:00006AF2                 add     esp, 4
.text$mn:00006AF5                 mov     byte ptr [ebp+var_4], 5
.text$mn:00006AF9                 mov     ecx, [ebp+var_10]
.text$mn:00006AFC                 add     ecx, 2Ch ; ','
.text$mn:00006AFF                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00006B04                 mov     byte ptr [ebp+var_4], 4
.text$mn:00006B08                 mov     ecx, [ebp+var_10]
.text$mn:00006B0B                 add     ecx, 24h ; '$'
.text$mn:00006B0E                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00006B13                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006B17                 mov     ecx, [ebp+var_10]
.text$mn:00006B1A                 add     ecx, 1Ch
.text$mn:00006B1D                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00006B22                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006B26                 mov     ecx, [ebp+var_10]
.text$mn:00006B29                 add     ecx, 14h
.text$mn:00006B2C                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00006B31                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006B35                 mov     ecx, [ebp+var_10]
.text$mn:00006B38                 add     ecx, 0Ch
.text$mn:00006B3B                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00006B40                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006B44                 mov     ecx, [ebp+var_10]
.text$mn:00006B47                 add     ecx, 4
.text$mn:00006B4A                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00006B4F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B56                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B59                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006B5E                 mov     ecx, [ebp+var_C]
.text$mn:00006B61                 mov     large fs:0, ecx
.text$mn:00006B68                 pop     ecx
.text$mn:00006B69                 mov     esp, ebp
.text$mn:00006B6B                 pop     ebp
.text$mn:00006B6C                 retn
.text$mn:00006B6C ??1_Locinfo@std@@QAE@XZ endp
.text$mn:00006B6C
.text$mn:00006B6C ; ---------------------------------------------------------------------------
.text$mn:00006B6D                 align 10h
.text$mn:00006B6D _text$mn        ends
.text$mn:00006B6D
.text$x:00006B70 ; ===========================================================================
.text$x:00006B70
.text$x:00006B70 ; Segment type: Pure code
.text$x:00006B70 ; Segment permissions: Read/Execute
.text$x:00006B70 _text$x         segment para public 'CODE' use32
.text$x:00006B70                 assume cs:_text$x
.text$x:00006B70                 ;org 6B70h
.text$x:00006B70 ; COMDAT (pick associative to section at 6ABC)
.text$x:00006B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B70
.text$x:00006B70 ; =============== S U B R O U T I N E =======================================
.text$x:00006B70
.text$x:00006B70
.text$x:00006B70 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 proc near
.text$x:00006B70                                         ; DATA XREF: .xdata$x:0000B6C4o
.text$x:00006B70                 mov     ecx, [ebp-10h]  ; this
.text$x:00006B73                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006B73 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 endp
.text$x:00006B73
.text$x:00006B78
.text$x:00006B78 ; =============== S U B R O U T I N E =======================================
.text$x:00006B78
.text$x:00006B78
.text$x:00006B78 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 proc near
.text$x:00006B78                                         ; DATA XREF: .xdata$x:0000B6CCo
.text$x:00006B78                 mov     ecx, [ebp-10h]
.text$x:00006B7B                 add     ecx, 4
.text$x:00006B7E                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00006B7E __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 endp
.text$x:00006B7E
.text$x:00006B83
.text$x:00006B83 ; =============== S U B R O U T I N E =======================================
.text$x:00006B83
.text$x:00006B83
.text$x:00006B83 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 proc near
.text$x:00006B83                                         ; DATA XREF: .xdata$x:0000B6D4o
.text$x:00006B83                 mov     ecx, [ebp-10h]
.text$x:00006B86                 add     ecx, 0Ch
.text$x:00006B89                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00006B89 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 endp
.text$x:00006B89
.text$x:00006B8E
.text$x:00006B8E ; =============== S U B R O U T I N E =======================================
.text$x:00006B8E
.text$x:00006B8E
.text$x:00006B8E __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 proc near
.text$x:00006B8E                                         ; DATA XREF: .xdata$x:0000B6DCo
.text$x:00006B8E                 mov     ecx, [ebp-10h]
.text$x:00006B91                 add     ecx, 14h
.text$x:00006B94                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00006B94 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 endp
.text$x:00006B94
.text$x:00006B99
.text$x:00006B99 ; =============== S U B R O U T I N E =======================================
.text$x:00006B99
.text$x:00006B99
.text$x:00006B99 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 proc near
.text$x:00006B99                                         ; DATA XREF: .xdata$x:0000B6E4o
.text$x:00006B99                 mov     ecx, [ebp-10h]
.text$x:00006B9C                 add     ecx, 1Ch
.text$x:00006B9F                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00006B9F __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 endp
.text$x:00006B9F
.text$x:00006BA4
.text$x:00006BA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006BA4
.text$x:00006BA4
.text$x:00006BA4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 proc near
.text$x:00006BA4                                         ; DATA XREF: .xdata$x:0000B6ECo
.text$x:00006BA4                 mov     ecx, [ebp-10h]
.text$x:00006BA7                 add     ecx, 24h ; '$'
.text$x:00006BAA                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00006BAA __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 endp
.text$x:00006BAA
.text$x:00006BAF
.text$x:00006BAF ; =============== S U B R O U T I N E =======================================
.text$x:00006BAF
.text$x:00006BAF
.text$x:00006BAF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 proc near
.text$x:00006BAF                                         ; DATA XREF: .xdata$x:0000B6F4o
.text$x:00006BAF                 mov     ecx, [ebp-10h]
.text$x:00006BB2                 add     ecx, 2Ch ; ','
.text$x:00006BB5                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00006BB5 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 endp
.text$x:00006BB5
.text$x:00006BBA
.text$x:00006BBA ; =============== S U B R O U T I N E =======================================
.text$x:00006BBA
.text$x:00006BBA
.text$x:00006BBA __ehhandler$??1_Locinfo@std@@QAE@XZ proc near
.text$x:00006BBA                                         ; DATA XREF: std::_Locinfo::~_Locinfo(void)+5o
.text$x:00006BBA
.text$x:00006BBA arg_4           = dword ptr  8
.text$x:00006BBA
.text$x:00006BBA                 mov     edx, [esp+arg_4]
.text$x:00006BBE                 lea     eax, [edx+0Ch]
.text$x:00006BC1                 mov     ecx, [edx-8]
.text$x:00006BC4                 xor     ecx, eax
.text$x:00006BC6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BCB                 mov     eax, offset __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
.text$x:00006BD0                 jmp     ___CxxFrameHandler3
.text$x:00006BD0 __ehhandler$??1_Locinfo@std@@QAE@XZ endp
.text$x:00006BD0
.text$x:00006BD0 ; ---------------------------------------------------------------------------
.text$x:00006BD5                 align 4
.text$x:00006BD5 _text$x         ends
.text$x:00006BD5
.text$mn:00006BD8 ; ===========================================================================
.text$mn:00006BD8
.text$mn:00006BD8 ; Segment type: Pure code
.text$mn:00006BD8 ; Segment permissions: Read/Execute
.text$mn:00006BD8 _text$mn        segment para public 'CODE' use32
.text$mn:00006BD8                 assume cs:_text$mn
.text$mn:00006BD8                 ;org 6BD8h
.text$mn:00006BD8 ; COMDAT (pick any)
.text$mn:00006BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BD8
.text$mn:00006BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BD8
.text$mn:00006BD8 ; Attributes: bp-based frame
.text$mn:00006BD8
.text$mn:00006BD8 ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00006BD8                 public ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
.text$mn:00006BD8 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
.text$mn:00006BD8                                         ; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0+3j
.text$mn:00006BD8                                         ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+4Dp ...
.text$mn:00006BD8
.text$mn:00006BD8 var_10          = dword ptr -10h
.text$mn:00006BD8 var_C           = dword ptr -0Ch
.text$mn:00006BD8 var_8           = dword ptr -8
.text$mn:00006BD8 var_4           = dword ptr -4
.text$mn:00006BD8
.text$mn:00006BD8                 push    ebp
.text$mn:00006BD9                 mov     ebp, esp
.text$mn:00006BDB                 sub     esp, 10h
.text$mn:00006BDE                 mov     [ebp+var_8], ecx
.text$mn:00006BE1                 mov     eax, [ebp+var_8]
.text$mn:00006BE4                 mov     ecx, [eax]
.text$mn:00006BE6                 mov     [ebp+var_4], ecx
.text$mn:00006BE9                 mov     edx, [ebp+var_4]
.text$mn:00006BEC                 mov     eax, [edx]
.text$mn:00006BEE                 mov     ecx, [ebp+var_4]
.text$mn:00006BF1                 add     ecx, [eax+4]
.text$mn:00006BF4                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00006BF9                 test    eax, eax
.text$mn:00006BFB                 jz      short loc_6C27
.text$mn:00006BFD                 mov     ecx, [ebp+var_8]
.text$mn:00006C00                 mov     edx, [ecx]
.text$mn:00006C02                 mov     [ebp+var_C], edx
.text$mn:00006C05                 mov     eax, [ebp+var_C]
.text$mn:00006C08                 mov     ecx, [eax]
.text$mn:00006C0A                 mov     edx, [ebp+var_C]
.text$mn:00006C0D                 add     edx, [ecx+4]
.text$mn:00006C10                 mov     ecx, edx
.text$mn:00006C12                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00006C17                 mov     [ebp+var_10], eax
.text$mn:00006C1A                 mov     eax, [ebp+var_10]
.text$mn:00006C1D                 mov     edx, [eax]
.text$mn:00006C1F                 mov     ecx, [ebp+var_10]
.text$mn:00006C22                 mov     eax, [edx+8]
.text$mn:00006C25                 call    eax
.text$mn:00006C27
.text$mn:00006C27 loc_6C27:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)+23j
.text$mn:00006C27                 mov     esp, ebp
.text$mn:00006C29                 pop     ebp
.text$mn:00006C2A                 retn
.text$mn:00006C2A ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp
.text$mn:00006C2A
.text$mn:00006C2A ; ---------------------------------------------------------------------------
.text$mn:00006C2B                 align 4
.text$mn:00006C2B _text$mn        ends
.text$mn:00006C2B
.text$mn:00006C2C ; ===========================================================================
.text$mn:00006C2C
.text$mn:00006C2C ; Segment type: Pure code
.text$mn:00006C2C ; Segment permissions: Read/Execute
.text$mn:00006C2C _text$mn        segment para public 'CODE' use32
.text$mn:00006C2C                 assume cs:_text$mn
.text$mn:00006C2C                 ;org 6C2Ch
.text$mn:00006C2C ; COMDAT (pick any)
.text$mn:00006C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C2C
.text$mn:00006C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C2C
.text$mn:00006C2C ; Attributes: bp-based frame
.text$mn:00006C2C
.text$mn:00006C2C ; _DWORD __thiscall std::_System_error::~_System_error(std::_System_error *__hidden this)
.text$mn:00006C2C                 public ??1_System_error@std@@UAE@XZ
.text$mn:00006C2C ??1_System_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006C2C                                         ; __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1+3j ...
.text$mn:00006C2C
.text$mn:00006C2C var_10          = dword ptr -10h
.text$mn:00006C2C var_C           = dword ptr -0Ch
.text$mn:00006C2C var_4           = dword ptr -4
.text$mn:00006C2C
.text$mn:00006C2C                 push    ebp
.text$mn:00006C2D                 mov     ebp, esp
.text$mn:00006C2F                 push    0FFFFFFFFh
.text$mn:00006C31                 push    offset __ehhandler$??1_System_error@std@@UAE@XZ
.text$mn:00006C36                 mov     eax, large fs:0
.text$mn:00006C3C                 push    eax
.text$mn:00006C3D                 push    ecx
.text$mn:00006C3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C43                 xor     eax, ebp
.text$mn:00006C45                 push    eax
.text$mn:00006C46                 lea     eax, [ebp+var_C]
.text$mn:00006C49                 mov     large fs:0, eax
.text$mn:00006C4F                 mov     [ebp+var_10], ecx
.text$mn:00006C52                 mov     [ebp+var_4], 0
.text$mn:00006C59                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C60                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C63                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:00006C68                 mov     ecx, [ebp+var_C]
.text$mn:00006C6B                 mov     large fs:0, ecx
.text$mn:00006C72                 pop     ecx
.text$mn:00006C73                 mov     esp, ebp
.text$mn:00006C75                 pop     ebp
.text$mn:00006C76                 retn
.text$mn:00006C76 ??1_System_error@std@@UAE@XZ endp
.text$mn:00006C76
.text$mn:00006C76 ; ---------------------------------------------------------------------------
.text$mn:00006C77                 align 4
.text$mn:00006C77 _text$mn        ends
.text$mn:00006C77
.text$x:00006C78 ; ===========================================================================
.text$x:00006C78
.text$x:00006C78 ; Segment type: Pure code
.text$x:00006C78 ; Segment permissions: Read/Execute
.text$x:00006C78 _text$x         segment para public 'CODE' use32
.text$x:00006C78                 assume cs:_text$x
.text$x:00006C78                 ;org 6C78h
.text$x:00006C78 ; COMDAT (pick associative to section at 6C2C)
.text$x:00006C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C78
.text$x:00006C78 ; =============== S U B R O U T I N E =======================================
.text$x:00006C78
.text$x:00006C78
.text$x:00006C78 __unwindfunclet$??1_System_error@std@@UAE@XZ$0 proc near
.text$x:00006C78                                         ; DATA XREF: .xdata$x:0000B944o
.text$x:00006C78                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C7B                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00006C7B __unwindfunclet$??1_System_error@std@@UAE@XZ$0 endp
.text$x:00006C7B
.text$x:00006C80
.text$x:00006C80 ; =============== S U B R O U T I N E =======================================
.text$x:00006C80
.text$x:00006C80
.text$x:00006C80 __ehhandler$??1_System_error@std@@UAE@XZ proc near
.text$x:00006C80                                         ; DATA XREF: std::_System_error::~_System_error(void)+5o
.text$x:00006C80
.text$x:00006C80 arg_4           = dword ptr  8
.text$x:00006C80
.text$x:00006C80                 mov     edx, [esp+arg_4]
.text$x:00006C84                 lea     eax, [edx+0Ch]
.text$x:00006C87                 mov     ecx, [edx-8]
.text$x:00006C8A                 xor     ecx, eax
.text$x:00006C8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C91                 mov     eax, offset __ehfuncinfo$??1_System_error@std@@UAE@XZ
.text$x:00006C96                 jmp     ___CxxFrameHandler3
.text$x:00006C96 __ehhandler$??1_System_error@std@@UAE@XZ endp
.text$x:00006C96
.text$x:00006C96 ; ---------------------------------------------------------------------------
.text$x:00006C9B                 align 4
.text$x:00006C9B _text$x         ends
.text$x:00006C9B
.text$mn:00006C9C ; ===========================================================================
.text$mn:00006C9C
.text$mn:00006C9C ; Segment type: Pure code
.text$mn:00006C9C ; Segment permissions: Read/Execute
.text$mn:00006C9C _text$mn        segment para public 'CODE' use32
.text$mn:00006C9C                 assume cs:_text$mn
.text$mn:00006C9C                 ;org 6C9Ch
.text$mn:00006C9C ; COMDAT (pick any)
.text$mn:00006C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C9C
.text$mn:00006C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C9C
.text$mn:00006C9C ; Attributes: bp-based frame
.text$mn:00006C9C
.text$mn:00006C9C ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00006C9C                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00006C9C ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00006C9C                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00006C9C                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00006C9C
.text$mn:00006C9C var_10          = dword ptr -10h
.text$mn:00006C9C var_C           = dword ptr -0Ch
.text$mn:00006C9C var_4           = dword ptr -4
.text$mn:00006C9C
.text$mn:00006C9C                 push    ebp
.text$mn:00006C9D                 mov     ebp, esp
.text$mn:00006C9F                 push    0FFFFFFFFh
.text$mn:00006CA1                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00006CA6                 mov     eax, large fs:0
.text$mn:00006CAC                 push    eax
.text$mn:00006CAD                 push    ecx
.text$mn:00006CAE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CB3                 xor     eax, ebp
.text$mn:00006CB5                 push    eax
.text$mn:00006CB6                 lea     eax, [ebp+var_C]
.text$mn:00006CB9                 mov     large fs:0, eax
.text$mn:00006CBF                 mov     [ebp+var_10], ecx
.text$mn:00006CC2                 mov     [ebp+var_4], 0
.text$mn:00006CC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006CD0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006CD3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006CD8                 mov     ecx, [ebp+var_C]
.text$mn:00006CDB                 mov     large fs:0, ecx
.text$mn:00006CE2                 pop     ecx
.text$mn:00006CE3                 mov     esp, ebp
.text$mn:00006CE5                 pop     ebp
.text$mn:00006CE6                 retn
.text$mn:00006CE6 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00006CE6
.text$mn:00006CE6 ; ---------------------------------------------------------------------------
.text$mn:00006CE7                 align 4
.text$mn:00006CE7 _text$mn        ends
.text$mn:00006CE7
.text$x:00006CE8 ; ===========================================================================
.text$x:00006CE8
.text$x:00006CE8 ; Segment type: Pure code
.text$x:00006CE8 ; Segment permissions: Read/Execute
.text$x:00006CE8 _text$x         segment para public 'CODE' use32
.text$x:00006CE8                 assume cs:_text$x
.text$x:00006CE8                 ;org 6CE8h
.text$x:00006CE8 ; COMDAT (pick associative to section at 6C9C)
.text$x:00006CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006CE8
.text$x:00006CE8 ; =============== S U B R O U T I N E =======================================
.text$x:00006CE8
.text$x:00006CE8
.text$x:00006CE8 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00006CE8                                         ; DATA XREF: .xdata$x:0000BB90o
.text$x:00006CE8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006CEB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006CEB __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00006CEB
.text$x:00006CF0
.text$x:00006CF0 ; =============== S U B R O U T I N E =======================================
.text$x:00006CF0
.text$x:00006CF0
.text$x:00006CF0 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00006CF0                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00006CF0
.text$x:00006CF0 arg_4           = dword ptr  8
.text$x:00006CF0
.text$x:00006CF0                 mov     edx, [esp+arg_4]
.text$x:00006CF4                 lea     eax, [edx+0Ch]
.text$x:00006CF7                 mov     ecx, [edx-8]
.text$x:00006CFA                 xor     ecx, eax
.text$x:00006CFC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D01                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00006D06                 jmp     ___CxxFrameHandler3
.text$x:00006D06 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00006D06
.text$x:00006D06 ; ---------------------------------------------------------------------------
.text$x:00006D0B                 align 4
.text$x:00006D0B _text$x         ends
.text$x:00006D0B
.text$mn:00006D0C ; ===========================================================================
.text$mn:00006D0C
.text$mn:00006D0C ; Segment type: Pure code
.text$mn:00006D0C ; Segment permissions: Read/Execute
.text$mn:00006D0C _text$mn        segment para public 'CODE' use32
.text$mn:00006D0C                 assume cs:_text$mn
.text$mn:00006D0C                 ;org 6D0Ch
.text$mn:00006D0C ; COMDAT (pick any)
.text$mn:00006D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D0C
.text$mn:00006D0C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D0C
.text$mn:00006D0C ; Attributes: bp-based frame
.text$mn:00006D0C
.text$mn:00006D0C ; _DWORD __thiscall std::ctype_base::~ctype_base(std::ctype_base *__hidden this)
.text$mn:00006D0C                 public ??1ctype_base@std@@UAE@XZ
.text$mn:00006D0C ??1ctype_base@std@@UAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0+3j
.text$mn:00006D0C                                         ; std::ctype<char>::~ctype<char>(void)+48p ...
.text$mn:00006D0C
.text$mn:00006D0C var_10          = dword ptr -10h
.text$mn:00006D0C var_C           = dword ptr -0Ch
.text$mn:00006D0C var_4           = dword ptr -4
.text$mn:00006D0C
.text$mn:00006D0C                 push    ebp
.text$mn:00006D0D                 mov     ebp, esp
.text$mn:00006D0F                 push    0FFFFFFFFh
.text$mn:00006D11                 push    offset __ehhandler$??1ctype_base@std@@UAE@XZ
.text$mn:00006D16                 mov     eax, large fs:0
.text$mn:00006D1C                 push    eax
.text$mn:00006D1D                 push    ecx
.text$mn:00006D1E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D23                 xor     eax, ebp
.text$mn:00006D25                 push    eax
.text$mn:00006D26                 lea     eax, [ebp+var_C]
.text$mn:00006D29                 mov     large fs:0, eax
.text$mn:00006D2F                 mov     [ebp+var_10], ecx
.text$mn:00006D32                 mov     eax, [ebp+var_10]
.text$mn:00006D35                 mov     dword ptr [eax], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:00006D3B                 mov     [ebp+var_4], 0
.text$mn:00006D42                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D49                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006D4C                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:00006D51                 mov     ecx, [ebp+var_C]
.text$mn:00006D54                 mov     large fs:0, ecx
.text$mn:00006D5B                 pop     ecx
.text$mn:00006D5C                 mov     esp, ebp
.text$mn:00006D5E                 pop     ebp
.text$mn:00006D5F                 retn
.text$mn:00006D5F ??1ctype_base@std@@UAE@XZ endp
.text$mn:00006D5F
.text$mn:00006D5F _text$mn        ends
.text$mn:00006D5F
.text$x:00006D60 ; ===========================================================================
.text$x:00006D60
.text$x:00006D60 ; Segment type: Pure code
.text$x:00006D60 ; Segment permissions: Read/Execute
.text$x:00006D60 _text$x         segment para public 'CODE' use32
.text$x:00006D60                 assume cs:_text$x
.text$x:00006D60                 ;org 6D60h
.text$x:00006D60 ; COMDAT (pick associative to section at 6D0C)
.text$x:00006D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D60
.text$x:00006D60 ; =============== S U B R O U T I N E =======================================
.text$x:00006D60
.text$x:00006D60
.text$x:00006D60 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 proc near
.text$x:00006D60                                         ; DATA XREF: .xdata$x:0000B7ACo
.text$x:00006D60                 mov     ecx, [ebp-10h]  ; this
.text$x:00006D63                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00006D63 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 endp
.text$x:00006D63
.text$x:00006D68
.text$x:00006D68 ; =============== S U B R O U T I N E =======================================
.text$x:00006D68
.text$x:00006D68
.text$x:00006D68 __ehhandler$??1ctype_base@std@@UAE@XZ proc near
.text$x:00006D68                                         ; DATA XREF: std::ctype_base::~ctype_base(void)+5o
.text$x:00006D68
.text$x:00006D68 arg_4           = dword ptr  8
.text$x:00006D68
.text$x:00006D68                 mov     edx, [esp+arg_4]
.text$x:00006D6C                 lea     eax, [edx+0Ch]
.text$x:00006D6F                 mov     ecx, [edx-8]
.text$x:00006D72                 xor     ecx, eax
.text$x:00006D74                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D79                 mov     eax, offset __ehfuncinfo$??1ctype_base@std@@UAE@XZ
.text$x:00006D7E                 jmp     ___CxxFrameHandler3
.text$x:00006D7E __ehhandler$??1ctype_base@std@@UAE@XZ endp
.text$x:00006D7E
.text$x:00006D7E ; ---------------------------------------------------------------------------
.text$x:00006D83                 align 4
.text$x:00006D83 _text$x         ends
.text$x:00006D83
.text$mn:00006D84 ; ===========================================================================
.text$mn:00006D84
.text$mn:00006D84 ; Segment type: Pure code
.text$mn:00006D84 ; Segment permissions: Read/Execute
.text$mn:00006D84 _text$mn        segment para public 'CODE' use32
.text$mn:00006D84                 assume cs:_text$mn
.text$mn:00006D84                 ;org 6D84h
.text$mn:00006D84 ; COMDAT (pick any)
.text$mn:00006D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D84
.text$mn:00006D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D84
.text$mn:00006D84 ; Attributes: bp-based frame
.text$mn:00006D84
.text$mn:00006D84 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00006D84                 public ??1error_category@std@@UAE@XZ
.text$mn:00006D84 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00006D84                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00006D84
.text$mn:00006D84 var_4           = dword ptr -4
.text$mn:00006D84
.text$mn:00006D84                 push    ebp
.text$mn:00006D85                 mov     ebp, esp
.text$mn:00006D87                 push    ecx
.text$mn:00006D88                 mov     [ebp+var_4], ecx
.text$mn:00006D8B                 mov     eax, [ebp+var_4]
.text$mn:00006D8E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00006D94                 mov     esp, ebp
.text$mn:00006D96                 pop     ebp
.text$mn:00006D97                 retn
.text$mn:00006D97 ??1error_category@std@@UAE@XZ endp
.text$mn:00006D97
.text$mn:00006D97 _text$mn        ends
.text$mn:00006D97
.text$mn:00006D98 ; ===========================================================================
.text$mn:00006D98
.text$mn:00006D98 ; Segment type: Pure code
.text$mn:00006D98 ; Segment permissions: Read/Execute
.text$mn:00006D98 _text$mn        segment para public 'CODE' use32
.text$mn:00006D98                 assume cs:_text$mn
.text$mn:00006D98                 ;org 6D98h
.text$mn:00006D98 ; COMDAT (pick any)
.text$mn:00006D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D98
.text$mn:00006D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D98
.text$mn:00006D98 ; Attributes: bp-based frame
.text$mn:00006D98
.text$mn:00006D98 ; _DWORD __thiscall std::locale::facet::~facet(std::locale::facet *__hidden this)
.text$mn:00006D98                 public ??1facet@locale@std@@MAE@XZ
.text$mn:00006D98 ??1facet@locale@std@@MAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0+3j
.text$mn:00006D98                                         ; std::ctype_base::~ctype_base(void)+40p ...
.text$mn:00006D98
.text$mn:00006D98 var_10          = dword ptr -10h
.text$mn:00006D98 var_C           = dword ptr -0Ch
.text$mn:00006D98 var_4           = dword ptr -4
.text$mn:00006D98
.text$mn:00006D98                 push    ebp
.text$mn:00006D99                 mov     ebp, esp
.text$mn:00006D9B                 push    0FFFFFFFFh
.text$mn:00006D9D                 push    offset __ehhandler$??1facet@locale@std@@MAE@XZ
.text$mn:00006DA2                 mov     eax, large fs:0
.text$mn:00006DA8                 push    eax
.text$mn:00006DA9                 push    ecx
.text$mn:00006DAA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006DAF                 xor     eax, ebp
.text$mn:00006DB1                 push    eax
.text$mn:00006DB2                 lea     eax, [ebp+var_C]
.text$mn:00006DB5                 mov     large fs:0, eax
.text$mn:00006DBB                 mov     [ebp+var_10], ecx
.text$mn:00006DBE                 mov     eax, [ebp+var_10]
.text$mn:00006DC1                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00006DC7                 mov     [ebp+var_4], 0
.text$mn:00006DCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006DD5                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006DD8                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:00006DDD                 mov     ecx, [ebp+var_C]
.text$mn:00006DE0                 mov     large fs:0, ecx
.text$mn:00006DE7                 pop     ecx
.text$mn:00006DE8                 mov     esp, ebp
.text$mn:00006DEA                 pop     ebp
.text$mn:00006DEB                 retn
.text$mn:00006DEB ??1facet@locale@std@@MAE@XZ endp
.text$mn:00006DEB
.text$mn:00006DEB _text$mn        ends
.text$mn:00006DEB
.text$x:00006DEC ; ===========================================================================
.text$x:00006DEC
.text$x:00006DEC ; Segment type: Pure code
.text$x:00006DEC ; Segment permissions: Read/Execute
.text$x:00006DEC _text$x         segment para public 'CODE' use32
.text$x:00006DEC                 assume cs:_text$x
.text$x:00006DEC                 ;org 6DECh
.text$x:00006DEC ; COMDAT (pick associative to section at 6D98)
.text$x:00006DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DEC
.text$x:00006DEC ; =============== S U B R O U T I N E =======================================
.text$x:00006DEC
.text$x:00006DEC
.text$x:00006DEC __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 proc near
.text$x:00006DEC                                         ; DATA XREF: .xdata$x:0000B754o
.text$x:00006DEC                 mov     ecx, [ebp-10h]  ; this
.text$x:00006DEF                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:00006DEF __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 endp
.text$x:00006DEF
.text$x:00006DF4
.text$x:00006DF4 ; =============== S U B R O U T I N E =======================================
.text$x:00006DF4
.text$x:00006DF4
.text$x:00006DF4 __ehhandler$??1facet@locale@std@@MAE@XZ proc near
.text$x:00006DF4                                         ; DATA XREF: std::locale::facet::~facet(void)+5o
.text$x:00006DF4
.text$x:00006DF4 arg_4           = dword ptr  8
.text$x:00006DF4
.text$x:00006DF4                 mov     edx, [esp+arg_4]
.text$x:00006DF8                 lea     eax, [edx+0Ch]
.text$x:00006DFB                 mov     ecx, [edx-8]
.text$x:00006DFE                 xor     ecx, eax
.text$x:00006E00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E05                 mov     eax, offset __ehfuncinfo$??1facet@locale@std@@MAE@XZ
.text$x:00006E0A                 jmp     ___CxxFrameHandler3
.text$x:00006E0A __ehhandler$??1facet@locale@std@@MAE@XZ endp
.text$x:00006E0A
.text$x:00006E0A ; ---------------------------------------------------------------------------
.text$x:00006E0F                 align 10h
.text$x:00006E0F _text$x         ends
.text$x:00006E0F
.text$mn:00006E10 ; ===========================================================================
.text$mn:00006E10
.text$mn:00006E10 ; Segment type: Pure code
.text$mn:00006E10 ; Segment permissions: Read/Execute
.text$mn:00006E10 _text$mn        segment para public 'CODE' use32
.text$mn:00006E10                 assume cs:_text$mn
.text$mn:00006E10                 ;org 6E10h
.text$mn:00006E10 ; COMDAT (pick any)
.text$mn:00006E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E10
.text$mn:00006E10 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E10
.text$mn:00006E10 ; Attributes: bp-based frame
.text$mn:00006E10
.text$mn:00006E10 ; _DWORD __thiscall std::ios_base::failure::~failure(std::ios_base::failure *__hidden this)
.text$mn:00006E10                 public ??1failure@ios_base@std@@UAE@XZ
.text$mn:00006E10 ??1failure@ios_base@std@@UAE@XZ proc near
.text$mn:00006E10                                         ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+Ap
.text$mn:00006E10                                         ; DATA XREF: .xdata$x:0000CB50o
.text$mn:00006E10
.text$mn:00006E10 var_10          = dword ptr -10h
.text$mn:00006E10 var_C           = dword ptr -0Ch
.text$mn:00006E10 var_4           = dword ptr -4
.text$mn:00006E10
.text$mn:00006E10                 push    ebp
.text$mn:00006E11                 mov     ebp, esp
.text$mn:00006E13                 push    0FFFFFFFFh
.text$mn:00006E15                 push    offset __ehhandler$??1failure@ios_base@std@@UAE@XZ
.text$mn:00006E1A                 mov     eax, large fs:0
.text$mn:00006E20                 push    eax
.text$mn:00006E21                 push    ecx
.text$mn:00006E22                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E27                 xor     eax, ebp
.text$mn:00006E29                 push    eax
.text$mn:00006E2A                 lea     eax, [ebp+var_C]
.text$mn:00006E2D                 mov     large fs:0, eax
.text$mn:00006E33                 mov     [ebp+var_10], ecx
.text$mn:00006E36                 mov     [ebp+var_4], 0
.text$mn:00006E3D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E44                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006E47                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:00006E4C                 mov     ecx, [ebp+var_C]
.text$mn:00006E4F                 mov     large fs:0, ecx
.text$mn:00006E56                 pop     ecx
.text$mn:00006E57                 mov     esp, ebp
.text$mn:00006E59                 pop     ebp
.text$mn:00006E5A                 retn
.text$mn:00006E5A ??1failure@ios_base@std@@UAE@XZ endp
.text$mn:00006E5A
.text$mn:00006E5A ; ---------------------------------------------------------------------------
.text$mn:00006E5B                 align 4
.text$mn:00006E5B _text$mn        ends
.text$mn:00006E5B
.text$x:00006E5C ; ===========================================================================
.text$x:00006E5C
.text$x:00006E5C ; Segment type: Pure code
.text$x:00006E5C ; Segment permissions: Read/Execute
.text$x:00006E5C _text$x         segment para public 'CODE' use32
.text$x:00006E5C                 assume cs:_text$x
.text$x:00006E5C                 ;org 6E5Ch
.text$x:00006E5C ; COMDAT (pick associative to section at 6E10)
.text$x:00006E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E5C
.text$x:00006E5C ; =============== S U B R O U T I N E =======================================
.text$x:00006E5C
.text$x:00006E5C
.text$x:00006E5C __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 proc near
.text$x:00006E5C                                         ; DATA XREF: .xdata$x:0000BBE8o
.text$x:00006E5C                 mov     ecx, [ebp-10h]  ; this
.text$x:00006E5F                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:00006E5F __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 endp
.text$x:00006E5F
.text$x:00006E64
.text$x:00006E64 ; =============== S U B R O U T I N E =======================================
.text$x:00006E64
.text$x:00006E64
.text$x:00006E64 __ehhandler$??1failure@ios_base@std@@UAE@XZ proc near
.text$x:00006E64                                         ; DATA XREF: std::ios_base::failure::~failure(void)+5o
.text$x:00006E64
.text$x:00006E64 arg_4           = dword ptr  8
.text$x:00006E64
.text$x:00006E64                 mov     edx, [esp+arg_4]
.text$x:00006E68                 lea     eax, [edx+0Ch]
.text$x:00006E6B                 mov     ecx, [edx-8]
.text$x:00006E6E                 xor     ecx, eax
.text$x:00006E70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E75                 mov     eax, offset __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ
.text$x:00006E7A                 jmp     ___CxxFrameHandler3
.text$x:00006E7A __ehhandler$??1failure@ios_base@std@@UAE@XZ endp
.text$x:00006E7A
.text$x:00006E7A ; ---------------------------------------------------------------------------
.text$x:00006E7F                 align 10h
.text$x:00006E7F _text$x         ends
.text$x:00006E7F
.text$mn:00006E80 ; ===========================================================================
.text$mn:00006E80
.text$mn:00006E80 ; Segment type: Pure code
.text$mn:00006E80 ; Segment permissions: Read/Execute
.text$mn:00006E80 _text$mn        segment para public 'CODE' use32
.text$mn:00006E80                 assume cs:_text$mn
.text$mn:00006E80                 ;org 6E80h
.text$mn:00006E80 ; COMDAT (pick any)
.text$mn:00006E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E80
.text$mn:00006E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E80
.text$mn:00006E80 ; Attributes: bp-based frame
.text$mn:00006E80
.text$mn:00006E80 ; _DWORD __thiscall std::ios_base::~ios_base(std::ios_base *__hidden this)
.text$mn:00006E80                 public ??1ios_base@std@@UAE@XZ
.text$mn:00006E80 ??1ios_base@std@@UAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0+3j
.text$mn:00006E80                                         ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)+40p ...
.text$mn:00006E80
.text$mn:00006E80 var_4           = dword ptr -4
.text$mn:00006E80
.text$mn:00006E80                 push    ebp
.text$mn:00006E81                 mov     ebp, esp
.text$mn:00006E83                 push    ecx
.text$mn:00006E84                 mov     [ebp+var_4], ecx
.text$mn:00006E87                 mov     eax, [ebp+var_4]
.text$mn:00006E8A                 mov     dword ptr [eax], offset ??_7ios_base@std@@6B@ ; const std::ios_base::`vftable'
.text$mn:00006E90                 mov     ecx, [ebp+var_4]
.text$mn:00006E93                 push    ecx             ; struct std::ios_base *
.text$mn:00006E94                 call    ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor(std::ios_base *)
.text$mn:00006E99                 add     esp, 4
.text$mn:00006E9C                 mov     esp, ebp
.text$mn:00006E9E                 pop     ebp
.text$mn:00006E9F                 retn
.text$mn:00006E9F ??1ios_base@std@@UAE@XZ endp
.text$mn:00006E9F
.text$mn:00006E9F _text$mn        ends
.text$mn:00006E9F
.text$mn:00006EA0 ; ===========================================================================
.text$mn:00006EA0
.text$mn:00006EA0 ; Segment type: Pure code
.text$mn:00006EA0 ; Segment permissions: Read/Execute
.text$mn:00006EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00006EA0                 assume cs:_text$mn
.text$mn:00006EA0                 ;org 6EA0h
.text$mn:00006EA0 ; COMDAT (pick any)
.text$mn:00006EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EA0
.text$mn:00006EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006EA0
.text$mn:00006EA0 ; Attributes: bp-based frame
.text$mn:00006EA0
.text$mn:00006EA0 ; _DWORD __thiscall std::locale::~locale(std::locale *__hidden this)
.text$mn:00006EA0                 public ??1locale@std@@QAE@XZ
.text$mn:00006EA0 ??1locale@std@@QAE@XZ proc near         ; CODE XREF: std::locale::`scalar deleting destructor'(uint)+Ap
.text$mn:00006EA0                                         ; __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0+13j ...
.text$mn:00006EA0
.text$mn:00006EA0 var_4           = dword ptr -4
.text$mn:00006EA0
.text$mn:00006EA0                 push    ebp
.text$mn:00006EA1                 mov     ebp, esp
.text$mn:00006EA3                 push    ecx
.text$mn:00006EA4                 mov     [ebp+var_4], ecx
.text$mn:00006EA7                 mov     eax, [ebp+var_4]
.text$mn:00006EAA                 cmp     dword ptr [eax], 0
.text$mn:00006EAD                 jz      short loc_6EC9
.text$mn:00006EAF                 mov     ecx, [ebp+var_4]
.text$mn:00006EB2                 mov     edx, [ecx]
.text$mn:00006EB4                 mov     eax, [ebp+var_4]
.text$mn:00006EB7                 mov     edx, [edx]
.text$mn:00006EB9                 mov     ecx, [eax]
.text$mn:00006EBB                 mov     eax, [edx+8]
.text$mn:00006EBE                 call    eax
.text$mn:00006EC0                 push    eax             ; Memory
.text$mn:00006EC1                 call    ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z ; std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)
.text$mn:00006EC6                 add     esp, 4
.text$mn:00006EC9
.text$mn:00006EC9 loc_6EC9:                               ; CODE XREF: std::locale::~locale(void)+Dj
.text$mn:00006EC9                 mov     esp, ebp
.text$mn:00006ECB                 pop     ebp
.text$mn:00006ECC                 retn
.text$mn:00006ECC ??1locale@std@@QAE@XZ endp
.text$mn:00006ECC
.text$mn:00006ECC ; ---------------------------------------------------------------------------
.text$mn:00006ECD                 align 10h
.text$mn:00006ECD _text$mn        ends
.text$mn:00006ECD
.text$mn:00006ED0 ; ===========================================================================
.text$mn:00006ED0
.text$mn:00006ED0 ; Segment type: Pure code
.text$mn:00006ED0 ; Segment permissions: Read/Execute
.text$mn:00006ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED0                 assume cs:_text$mn
.text$mn:00006ED0                 ;org 6ED0h
.text$mn:00006ED0 ; COMDAT (pick any)
.text$mn:00006ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED0
.text$mn:00006ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED0
.text$mn:00006ED0 ; Attributes: bp-based frame
.text$mn:00006ED0
.text$mn:00006ED0 ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:00006ED0                 public ??1runtime_error@std@@UAE@XZ
.text$mn:00006ED0 ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2+3j
.text$mn:00006ED0                                         ; __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00006ED0
.text$mn:00006ED0 var_10          = dword ptr -10h
.text$mn:00006ED0 var_C           = dword ptr -0Ch
.text$mn:00006ED0 var_4           = dword ptr -4
.text$mn:00006ED0
.text$mn:00006ED0                 push    ebp
.text$mn:00006ED1                 mov     ebp, esp
.text$mn:00006ED3                 push    0FFFFFFFFh
.text$mn:00006ED5                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:00006EDA                 mov     eax, large fs:0
.text$mn:00006EE0                 push    eax
.text$mn:00006EE1                 push    ecx
.text$mn:00006EE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006EE7                 xor     eax, ebp
.text$mn:00006EE9                 push    eax
.text$mn:00006EEA                 lea     eax, [ebp+var_C]
.text$mn:00006EED                 mov     large fs:0, eax
.text$mn:00006EF3                 mov     [ebp+var_10], ecx
.text$mn:00006EF6                 mov     [ebp+var_4], 0
.text$mn:00006EFD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F04                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F07                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00006F0C                 mov     ecx, [ebp+var_C]
.text$mn:00006F0F                 mov     large fs:0, ecx
.text$mn:00006F16                 pop     ecx
.text$mn:00006F17                 mov     esp, ebp
.text$mn:00006F19                 pop     ebp
.text$mn:00006F1A                 retn
.text$mn:00006F1A ??1runtime_error@std@@UAE@XZ endp
.text$mn:00006F1A
.text$mn:00006F1A ; ---------------------------------------------------------------------------
.text$mn:00006F1B                 align 4
.text$mn:00006F1B _text$mn        ends
.text$mn:00006F1B
.text$x:00006F1C ; ===========================================================================
.text$x:00006F1C
.text$x:00006F1C ; Segment type: Pure code
.text$x:00006F1C ; Segment permissions: Read/Execute
.text$x:00006F1C _text$x         segment para public 'CODE' use32
.text$x:00006F1C                 assume cs:_text$x
.text$x:00006F1C                 ;org 6F1Ch
.text$x:00006F1C ; COMDAT (pick associative to section at 6ED0)
.text$x:00006F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F1C
.text$x:00006F1C ; =============== S U B R O U T I N E =======================================
.text$x:00006F1C
.text$x:00006F1C
.text$x:00006F1C __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:00006F1C                                         ; DATA XREF: .xdata$x:0000B5ECo
.text$x:00006F1C                 mov     ecx, [ebp-10h]  ; this
.text$x:00006F1F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00006F1F __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:00006F1F
.text$x:00006F24
.text$x:00006F24 ; =============== S U B R O U T I N E =======================================
.text$x:00006F24
.text$x:00006F24
.text$x:00006F24 __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:00006F24                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:00006F24
.text$x:00006F24 arg_4           = dword ptr  8
.text$x:00006F24
.text$x:00006F24                 mov     edx, [esp+arg_4]
.text$x:00006F28                 lea     eax, [edx+0Ch]
.text$x:00006F2B                 mov     ecx, [edx-8]
.text$x:00006F2E                 xor     ecx, eax
.text$x:00006F30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F35                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:00006F3A                 jmp     ___CxxFrameHandler3
.text$x:00006F3A __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:00006F3A
.text$x:00006F3A ; ---------------------------------------------------------------------------
.text$x:00006F3F                 align 10h
.text$x:00006F3F _text$x         ends
.text$x:00006F3F
.text$mn:00006F40 ; ===========================================================================
.text$mn:00006F40
.text$mn:00006F40 ; Segment type: Pure code
.text$mn:00006F40 ; Segment permissions: Read/Execute
.text$mn:00006F40 _text$mn        segment para public 'CODE' use32
.text$mn:00006F40                 assume cs:_text$mn
.text$mn:00006F40                 ;org 6F40h
.text$mn:00006F40 ; COMDAT (pick any)
.text$mn:00006F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F40
.text$mn:00006F40 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F40
.text$mn:00006F40 ; Attributes: bp-based frame
.text$mn:00006F40
.text$mn:00006F40 ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::~sentry(void)
.text$mn:00006F40                 public ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
.text$mn:00006F40 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
.text$mn:00006F40                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+28Bp
.text$mn:00006F40                                         ; __unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2+3j ...
.text$mn:00006F40
.text$mn:00006F40 var_10          = dword ptr -10h
.text$mn:00006F40 var_C           = dword ptr -0Ch
.text$mn:00006F40 var_4           = dword ptr -4
.text$mn:00006F40
.text$mn:00006F40                 push    ebp
.text$mn:00006F41                 mov     ebp, esp
.text$mn:00006F43                 push    0FFFFFFFFh
.text$mn:00006F45                 push    offset __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
.text$mn:00006F4A                 mov     eax, large fs:0
.text$mn:00006F50                 push    eax
.text$mn:00006F51                 push    ecx
.text$mn:00006F52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F57                 xor     eax, ebp
.text$mn:00006F59                 push    eax
.text$mn:00006F5A                 lea     eax, [ebp+var_C]
.text$mn:00006F5D                 mov     large fs:0, eax
.text$mn:00006F63                 mov     [ebp+var_10], ecx
.text$mn:00006F66                 mov     [ebp+var_4], 0
.text$mn:00006F6D                 call    ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text$mn:00006F72                 movzx   eax, al
.text$mn:00006F75                 test    eax, eax
.text$mn:00006F77                 jnz     short loc_6F83
.text$mn:00006F79                 mov     ecx, [ebp+var_10]
.text$mn:00006F7C                 mov     ecx, [ecx]
.text$mn:00006F7E                 call    ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)
.text$mn:00006F83
.text$mn:00006F83 loc_6F83:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+37j
.text$mn:00006F83                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F8A                 mov     ecx, [ebp+var_10]
.text$mn:00006F8D                 call    ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00006F92                 mov     ecx, [ebp+var_C]
.text$mn:00006F95                 mov     large fs:0, ecx
.text$mn:00006F9C                 pop     ecx
.text$mn:00006F9D                 mov     esp, ebp
.text$mn:00006F9F                 pop     ebp
.text$mn:00006FA0                 retn
.text$mn:00006FA0 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp
.text$mn:00006FA0
.text$mn:00006FA0 ; ---------------------------------------------------------------------------
.text$mn:00006FA1                 align 4
.text$mn:00006FA1 _text$mn        ends
.text$mn:00006FA1
.text$x:00006FA4 ; ===========================================================================
.text$x:00006FA4
.text$x:00006FA4 ; Segment type: Pure code
.text$x:00006FA4 ; Segment permissions: Read/Execute
.text$x:00006FA4 _text$x         segment para public 'CODE' use32
.text$x:00006FA4                 assume cs:_text$x
.text$x:00006FA4                 ;org 6FA4h
.text$x:00006FA4 ; COMDAT (pick associative to section at 6F40)
.text$x:00006FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FA4
.text$x:00006FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006FA4
.text$x:00006FA4
.text$x:00006FA4 __unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00006FA4                                         ; DATA XREF: .xdata$x:0000C818o
.text$x:00006FA4                 mov     ecx, [ebp-10h]
.text$x:00006FA7                 jmp     ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::_Sentry_base::~_Sentry_base(void)
.text$x:00006FA7 __unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0 endp
.text$x:00006FA7
.text$x:00006FAC
.text$x:00006FAC ; =============== S U B R O U T I N E =======================================
.text$x:00006FAC
.text$x:00006FAC
.text$x:00006FAC __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
.text$x:00006FAC                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+5o
.text$x:00006FAC
.text$x:00006FAC arg_4           = dword ptr  8
.text$x:00006FAC
.text$x:00006FAC                 mov     edx, [esp+arg_4]
.text$x:00006FB0                 lea     eax, [edx+0Ch]
.text$x:00006FB3                 mov     ecx, [edx-8]
.text$x:00006FB6                 xor     ecx, eax
.text$x:00006FB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FBD                 mov     eax, offset __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
.text$x:00006FC2                 jmp     ___CxxFrameHandler3
.text$x:00006FC2 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ endp
.text$x:00006FC2
.text$x:00006FC2 ; ---------------------------------------------------------------------------
.text$x:00006FC7                 align 4
.text$x:00006FC7 _text$x         ends
.text$x:00006FC7
.text$mn:00006FC8 ; ===========================================================================
.text$mn:00006FC8
.text$mn:00006FC8 ; Segment type: Pure code
.text$mn:00006FC8 ; Segment permissions: Read/Execute
.text$mn:00006FC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006FC8                 assume cs:_text$mn
.text$mn:00006FC8                 ;org 6FC8h
.text$mn:00006FC8 ; COMDAT (pick any)
.text$mn:00006FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FC8
.text$mn:00006FC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FC8
.text$mn:00006FC8 ; Attributes: bp-based frame
.text$mn:00006FC8
.text$mn:00006FC8 ; _DWORD __thiscall std::system_error::~system_error(std::system_error *__hidden this)
.text$mn:00006FC8                 public ??1system_error@std@@UAE@XZ
.text$mn:00006FC8 ??1system_error@std@@UAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0+3j
.text$mn:00006FC8                                         ; __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0+3j ...
.text$mn:00006FC8
.text$mn:00006FC8 var_10          = dword ptr -10h
.text$mn:00006FC8 var_C           = dword ptr -0Ch
.text$mn:00006FC8 var_4           = dword ptr -4
.text$mn:00006FC8
.text$mn:00006FC8                 push    ebp
.text$mn:00006FC9                 mov     ebp, esp
.text$mn:00006FCB                 push    0FFFFFFFFh
.text$mn:00006FCD                 push    offset __ehhandler$??1system_error@std@@UAE@XZ
.text$mn:00006FD2                 mov     eax, large fs:0
.text$mn:00006FD8                 push    eax
.text$mn:00006FD9                 push    ecx
.text$mn:00006FDA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006FDF                 xor     eax, ebp
.text$mn:00006FE1                 push    eax
.text$mn:00006FE2                 lea     eax, [ebp+var_C]
.text$mn:00006FE5                 mov     large fs:0, eax
.text$mn:00006FEB                 mov     [ebp+var_10], ecx
.text$mn:00006FEE                 mov     [ebp+var_4], 0
.text$mn:00006FF5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006FFC                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006FFF                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:00007004                 mov     ecx, [ebp+var_C]
.text$mn:00007007                 mov     large fs:0, ecx
.text$mn:0000700E                 pop     ecx
.text$mn:0000700F                 mov     esp, ebp
.text$mn:00007011                 pop     ebp
.text$mn:00007012                 retn
.text$mn:00007012 ??1system_error@std@@UAE@XZ endp
.text$mn:00007012
.text$mn:00007012 ; ---------------------------------------------------------------------------
.text$mn:00007013                 align 4
.text$mn:00007013 _text$mn        ends
.text$mn:00007013
.text$x:00007014 ; ===========================================================================
.text$x:00007014
.text$x:00007014 ; Segment type: Pure code
.text$x:00007014 ; Segment permissions: Read/Execute
.text$x:00007014 _text$x         segment para public 'CODE' use32
.text$x:00007014                 assume cs:_text$x
.text$x:00007014                 ;org 7014h
.text$x:00007014 ; COMDAT (pick associative to section at 6FC8)
.text$x:00007014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007014
.text$x:00007014 ; =============== S U B R O U T I N E =======================================
.text$x:00007014
.text$x:00007014
.text$x:00007014 __unwindfunclet$??1system_error@std@@UAE@XZ$0 proc near
.text$x:00007014                                         ; DATA XREF: .xdata$x:0000B9D8o
.text$x:00007014                 mov     ecx, [ebp-10h]  ; this
.text$x:00007017                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:00007017 __unwindfunclet$??1system_error@std@@UAE@XZ$0 endp
.text$x:00007017
.text$x:0000701C
.text$x:0000701C ; =============== S U B R O U T I N E =======================================
.text$x:0000701C
.text$x:0000701C
.text$x:0000701C __ehhandler$??1system_error@std@@UAE@XZ proc near
.text$x:0000701C                                         ; DATA XREF: std::system_error::~system_error(void)+5o
.text$x:0000701C
.text$x:0000701C arg_4           = dword ptr  8
.text$x:0000701C
.text$x:0000701C                 mov     edx, [esp+arg_4]
.text$x:00007020                 lea     eax, [edx+0Ch]
.text$x:00007023                 mov     ecx, [edx-8]
.text$x:00007026                 xor     ecx, eax
.text$x:00007028                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000702D                 mov     eax, offset __ehfuncinfo$??1system_error@std@@UAE@XZ
.text$x:00007032                 jmp     ___CxxFrameHandler3
.text$x:00007032 __ehhandler$??1system_error@std@@UAE@XZ endp
.text$x:00007032
.text$x:00007032 ; ---------------------------------------------------------------------------
.text$x:00007037                 align 4
.text$x:00007037 _text$x         ends
.text$x:00007037
.text$mn:00007038 ; ===========================================================================
.text$mn:00007038
.text$mn:00007038 ; Segment type: Pure code
.text$mn:00007038 ; Segment permissions: Read/Execute
.text$mn:00007038 _text$mn        segment para public 'CODE' use32
.text$mn:00007038                 assume cs:_text$mn
.text$mn:00007038                 ;org 7038h
.text$mn:00007038 ; COMDAT (pick any)
.text$mn:00007038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007038
.text$mn:00007038 ; =============== S U B R O U T I N E =======================================
.text$mn:00007038
.text$mn:00007038 ; Attributes: bp-based frame
.text$mn:00007038
.text$mn:00007038 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00007038                 public ??2@YAPAXIPAX@Z
.text$mn:00007038 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00007038                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+2Ep
.text$mn:00007038
.text$mn:00007038 arg_4           = dword ptr  0Ch
.text$mn:00007038
.text$mn:00007038                 push    ebp
.text$mn:00007039                 mov     ebp, esp
.text$mn:0000703B                 mov     eax, [ebp+arg_4]
.text$mn:0000703E                 pop     ebp
.text$mn:0000703F                 retn
.text$mn:0000703F ??2@YAPAXIPAX@Z endp
.text$mn:0000703F
.text$mn:0000703F _text$mn        ends
.text$mn:0000703F
.text$mn:00007040 ; ===========================================================================
.text$mn:00007040
.text$mn:00007040 ; Segment type: Pure code
.text$mn:00007040 ; Segment permissions: Read/Execute
.text$mn:00007040 _text$mn        segment para public 'CODE' use32
.text$mn:00007040                 assume cs:_text$mn
.text$mn:00007040                 ;org 7040h
.text$mn:00007040 ; COMDAT (pick any)
.text$mn:00007040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007040
.text$mn:00007040 ; =============== S U B R O U T I N E =======================================
.text$mn:00007040
.text$mn:00007040 ; Attributes: bp-based frame
.text$mn:00007040
.text$mn:00007040 ; void *__cdecl std::locale::facet::operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
.text$mn:00007040                 public ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z
.text$mn:00007040 ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:00007040                                         ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+5Ap
.text$mn:00007040
.text$mn:00007040 arg_0           = dword ptr  8
.text$mn:00007040 arg_4           = dword ptr  0Ch
.text$mn:00007040 arg_8           = dword ptr  10h
.text$mn:00007040 arg_C           = dword ptr  14h
.text$mn:00007040
.text$mn:00007040                 push    ebp
.text$mn:00007041                 mov     ebp, esp
.text$mn:00007043                 mov     eax, [ebp+arg_C]
.text$mn:00007046                 push    eax             ; int
.text$mn:00007047                 mov     ecx, [ebp+arg_8]
.text$mn:0000704A                 push    ecx             ; char *
.text$mn:0000704B                 mov     edx, [ebp+arg_4]
.text$mn:0000704E                 push    edx             ; struct std::_DebugHeapTag_t *
.text$mn:0000704F                 mov     eax, [ebp+arg_0]
.text$mn:00007052                 push    eax             ; unsigned int
.text$mn:00007053                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00007058                 add     esp, 10h
.text$mn:0000705B                 pop     ebp
.text$mn:0000705C                 retn
.text$mn:0000705C ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:0000705C
.text$mn:0000705C ; ---------------------------------------------------------------------------
.text$mn:0000705D                 align 10h
.text$mn:0000705D _text$mn        ends
.text$mn:0000705D
.text$mn:00007060 ; ===========================================================================
.text$mn:00007060
.text$mn:00007060 ; Segment type: Pure code
.text$mn:00007060 ; Segment permissions: Read/Execute
.text$mn:00007060 _text$mn        segment para public 'CODE' use32
.text$mn:00007060                 assume cs:_text$mn
.text$mn:00007060                 ;org 7060h
.text$mn:00007060 ; COMDAT (pick any)
.text$mn:00007060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007060
.text$mn:00007060 ; =============== S U B R O U T I N E =======================================
.text$mn:00007060
.text$mn:00007060 ; Attributes: bp-based frame
.text$mn:00007060
.text$mn:00007060 ; void __cdecl operator delete(void *)
.text$mn:00007060                 public ??3@YAXPAX0@Z
.text$mn:00007060 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00007060                                         ; __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0+8p
.text$mn:00007060                 push    ebp
.text$mn:00007061                 mov     ebp, esp
.text$mn:00007063                 pop     ebp
.text$mn:00007064                 retn
.text$mn:00007064 ??3@YAXPAX0@Z   endp
.text$mn:00007064
.text$mn:00007064 ; ---------------------------------------------------------------------------
.text$mn:00007065                 align 4
.text$mn:00007065 _text$mn        ends
.text$mn:00007065
.text$mn:00007068 ; ===========================================================================
.text$mn:00007068
.text$mn:00007068 ; Segment type: Pure code
.text$mn:00007068 ; Segment permissions: Read/Execute
.text$mn:00007068 _text$mn        segment para public 'CODE' use32
.text$mn:00007068                 assume cs:_text$mn
.text$mn:00007068                 ;org 7068h
.text$mn:00007068 ; COMDAT (pick any)
.text$mn:00007068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007068
.text$mn:00007068 ; =============== S U B R O U T I N E =======================================
.text$mn:00007068
.text$mn:00007068 ; Attributes: bp-based frame
.text$mn:00007068
.text$mn:00007068 ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:00007068                 public ??3facet@locale@std@@SAXPAX@Z
.text$mn:00007068 ??3facet@locale@std@@SAXPAX@Z proc near ; CODE XREF: std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)+7p
.text$mn:00007068                                         ; std::ctype<char>::`scalar deleting destructor'(uint)+1Bp ...
.text$mn:00007068
.text$mn:00007068 Memory          = dword ptr  8
.text$mn:00007068
.text$mn:00007068                 push    ebp
.text$mn:00007069                 mov     ebp, esp
.text$mn:0000706B                 mov     eax, [ebp+Memory]
.text$mn:0000706E                 push    eax             ; Memory
.text$mn:0000706F                 call    ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)
.text$mn:00007074                 add     esp, 4
.text$mn:00007077                 pop     ebp
.text$mn:00007078                 retn
.text$mn:00007078 ??3facet@locale@std@@SAXPAX@Z endp
.text$mn:00007078
.text$mn:00007078 ; ---------------------------------------------------------------------------
.text$mn:00007079                 align 4
.text$mn:00007079 _text$mn        ends
.text$mn:00007079
.text$mn:0000707C ; ===========================================================================
.text$mn:0000707C
.text$mn:0000707C ; Segment type: Pure code
.text$mn:0000707C ; Segment permissions: Read/Execute
.text$mn:0000707C _text$mn        segment para public 'CODE' use32
.text$mn:0000707C                 assume cs:_text$mn
.text$mn:0000707C                 ;org 707Ch
.text$mn:0000707C ; COMDAT (pick any)
.text$mn:0000707C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000707C
.text$mn:0000707C ; =============== S U B R O U T I N E =======================================
.text$mn:0000707C
.text$mn:0000707C ; Attributes: bp-based frame
.text$mn:0000707C
.text$mn:0000707C ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:0000707C                 public ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z
.text$mn:0000707C ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:0000707C                                         ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+12p
.text$mn:0000707C
.text$mn:0000707C Memory          = dword ptr  8
.text$mn:0000707C
.text$mn:0000707C                 push    ebp
.text$mn:0000707D                 mov     ebp, esp
.text$mn:0000707F                 mov     eax, [ebp+Memory]
.text$mn:00007082                 push    eax             ; Memory
.text$mn:00007083                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00007088                 add     esp, 4
.text$mn:0000708B                 pop     ebp
.text$mn:0000708C                 retn
.text$mn:0000708C ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:0000708C
.text$mn:0000708C ; ---------------------------------------------------------------------------
.text$mn:0000708D                 align 10h
.text$mn:0000708D _text$mn        ends
.text$mn:0000708D
.text$mn:00007090 ; ===========================================================================
.text$mn:00007090
.text$mn:00007090 ; Segment type: Pure code
.text$mn:00007090 ; Segment permissions: Read/Execute
.text$mn:00007090 _text$mn        segment para public 'CODE' use32
.text$mn:00007090                 assume cs:_text$mn
.text$mn:00007090                 ;org 7090h
.text$mn:00007090 ; COMDAT (pick any)
.text$mn:00007090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007090
.text$mn:00007090 ; =============== S U B R O U T I N E =======================================
.text$mn:00007090
.text$mn:00007090 ; Attributes: bp-based frame
.text$mn:00007090
.text$mn:00007090 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00007090                 public ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007090 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00007090                                         ; CODE XREF: TiXmlDeclarationA::Clone(void)+8Fp
.text$mn:00007090                                         ; TiXmlDeclarationA::Clone(void)+A1p ...
.text$mn:00007090
.text$mn:00007090 var_8           = dword ptr -8
.text$mn:00007090 var_3           = byte ptr -3
.text$mn:00007090 var_2           = byte ptr -2
.text$mn:00007090 var_1           = byte ptr -1
.text$mn:00007090 arg_0           = dword ptr  8
.text$mn:00007090
.text$mn:00007090                 push    ebp
.text$mn:00007091                 mov     ebp, esp
.text$mn:00007093                 sub     esp, 8
.text$mn:00007096                 mov     [ebp+var_8], ecx
.text$mn:00007099                 mov     eax, [ebp+var_8]
.text$mn:0000709C                 cmp     eax, [ebp+arg_0]
.text$mn:0000709F                 jz      short loc_70FB
.text$mn:000070A1                 lea     ecx, [ebp+var_1]
.text$mn:000070A4                 push    ecx
.text$mn:000070A5                 mov     ecx, [ebp+arg_0]
.text$mn:000070A8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000070AD                 push    eax
.text$mn:000070AE                 lea     edx, [ebp+var_2]
.text$mn:000070B1                 push    edx
.text$mn:000070B2                 mov     ecx, [ebp+var_8]
.text$mn:000070B5                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000070BA                 push    eax
.text$mn:000070BB                 call    ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:000070C0                 add     esp, 8
.text$mn:000070C3                 movzx   eax, al
.text$mn:000070C6                 test    eax, eax
.text$mn:000070C8                 jz      short loc_70EF
.text$mn:000070CA                 xor     ecx, ecx
.text$mn:000070CC                 jz      short loc_70EF
.text$mn:000070CE                 push    0               ; Size
.text$mn:000070D0                 push    1               ; char
.text$mn:000070D2                 mov     ecx, [ebp+var_8]
.text$mn:000070D5                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000070DA                 lea     edx, [ebp+var_3]
.text$mn:000070DD                 push    edx
.text$mn:000070DE                 mov     ecx, [ebp+arg_0]
.text$mn:000070E1                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000070E6                 push    eax
.text$mn:000070E7                 mov     ecx, [ebp+var_8]
.text$mn:000070EA                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:000070EF
.text$mn:000070EF loc_70EF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+38j
.text$mn:000070EF                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Cj
.text$mn:000070EF                 mov     eax, [ebp+arg_0]
.text$mn:000070F2                 push    eax
.text$mn:000070F3                 mov     ecx, [ebp+var_8]
.text$mn:000070F6                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:000070FB
.text$mn:000070FB loc_70FB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+Fj
.text$mn:000070FB                 mov     eax, [ebp+var_8]
.text$mn:000070FE                 mov     esp, ebp
.text$mn:00007100                 pop     ebp
.text$mn:00007101                 retn    4
.text$mn:00007101 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00007101
.text$mn:00007101 _text$mn        ends
.text$mn:00007101
.text$mn:00007104 ; ===========================================================================
.text$mn:00007104
.text$mn:00007104 ; Segment type: Pure code
.text$mn:00007104 ; Segment permissions: Read/Execute
.text$mn:00007104 _text$mn        segment para public 'CODE' use32
.text$mn:00007104                 assume cs:_text$mn
.text$mn:00007104                 ;org 7104h
.text$mn:00007104 ; COMDAT (pick any)
.text$mn:00007104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007104
.text$mn:00007104 ; =============== S U B R O U T I N E =======================================
.text$mn:00007104
.text$mn:00007104 ; Attributes: bp-based frame
.text$mn:00007104
.text$mn:00007104 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char *Str)
.text$mn:00007104                 public ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
.text$mn:00007104 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z proc near
.text$mn:00007104                                         ; CODE XREF: TiXmlElementA::TiXmlElementA(char const *)+6Dp
.text$mn:00007104                                         ; TiXmlDeclarationA::TiXmlDeclarationA(char const *,char const *,char const *)+77p ...
.text$mn:00007104
.text$mn:00007104 var_4           = dword ptr -4
.text$mn:00007104 Str             = dword ptr  8
.text$mn:00007104
.text$mn:00007104                 push    ebp
.text$mn:00007105                 mov     ebp, esp
.text$mn:00007107                 push    ecx
.text$mn:00007108                 mov     [ebp+var_4], ecx
.text$mn:0000710B                 mov     eax, [ebp+Str]
.text$mn:0000710E                 push    eax             ; Str
.text$mn:0000710F                 mov     ecx, [ebp+var_4]
.text$mn:00007112                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00007117                 mov     esp, ebp
.text$mn:00007119                 pop     ebp
.text$mn:0000711A                 retn    4
.text$mn:0000711A ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z endp
.text$mn:0000711A
.text$mn:0000711A ; ---------------------------------------------------------------------------
.text$mn:0000711D                 align 10h
.text$mn:0000711D _text$mn        ends
.text$mn:0000711D
.text$mn:00007120 ; ===========================================================================
.text$mn:00007120
.text$mn:00007120 ; Segment type: Pure code
.text$mn:00007120 ; Segment permissions: Read/Execute
.text$mn:00007120 _text$mn        segment para public 'CODE' use32
.text$mn:00007120                 assume cs:_text$mn
.text$mn:00007120                 ;org 7120h
.text$mn:00007120 ; COMDAT (pick any)
.text$mn:00007120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007120
.text$mn:00007120 ; =============== S U B R O U T I N E =======================================
.text$mn:00007120
.text$mn:00007120 ; Attributes: bp-based frame
.text$mn:00007120
.text$mn:00007120 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00007120                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00007120 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00007120                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00007120                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00007120
.text$mn:00007120 var_8           = dword ptr -8
.text$mn:00007120 var_4           = dword ptr -4
.text$mn:00007120 arg_0           = dword ptr  8
.text$mn:00007120
.text$mn:00007120                 push    ebp
.text$mn:00007121                 mov     ebp, esp
.text$mn:00007123                 sub     esp, 8
.text$mn:00007126                 mov     [ebp+var_8], ecx
.text$mn:00007129                 mov     eax, [ebp+var_8]
.text$mn:0000712C                 cmp     eax, [ebp+arg_0]
.text$mn:0000712F                 jnz     short loc_713A
.text$mn:00007131                 mov     [ebp+var_4], 1
.text$mn:00007138                 jmp     short loc_7141
.text$mn:0000713A ; ---------------------------------------------------------------------------
.text$mn:0000713A
.text$mn:0000713A loc_713A:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000713A                 mov     [ebp+var_4], 0
.text$mn:00007141
.text$mn:00007141 loc_7141:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00007141                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007144                 mov     esp, ebp
.text$mn:00007146                 pop     ebp
.text$mn:00007147                 retn    4
.text$mn:00007147 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00007147
.text$mn:00007147 ; ---------------------------------------------------------------------------
.text$mn:0000714A                 align 4
.text$mn:0000714A _text$mn        ends
.text$mn:0000714A
.text$mn:0000714C ; ===========================================================================
.text$mn:0000714C
.text$mn:0000714C ; Segment type: Pure code
.text$mn:0000714C ; Segment permissions: Read/Execute
.text$mn:0000714C _text$mn        segment para public 'CODE' use32
.text$mn:0000714C                 assume cs:_text$mn
.text$mn:0000714C                 ;org 714Ch
.text$mn:0000714C ; COMDAT (pick any)
.text$mn:0000714C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000714C
.text$mn:0000714C ; =============== S U B R O U T I N E =======================================
.text$mn:0000714C
.text$mn:0000714C ; Attributes: bp-based frame
.text$mn:0000714C
.text$mn:0000714C ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:0000714C                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:0000714C ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:0000714C                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:0000714C
.text$mn:0000714C var_8           = dword ptr -8
.text$mn:0000714C var_4           = dword ptr -4
.text$mn:0000714C arg_0           = dword ptr  8
.text$mn:0000714C
.text$mn:0000714C                 push    ebp
.text$mn:0000714D                 mov     ebp, esp
.text$mn:0000714F                 sub     esp, 8
.text$mn:00007152                 push    esi
.text$mn:00007153                 mov     [ebp+var_4], ecx
.text$mn:00007156                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007159                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000715E                 push    eax
.text$mn:0000715F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007162                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00007167                 mov     ecx, eax
.text$mn:00007169                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000716E                 movzx   eax, al
.text$mn:00007171                 test    eax, eax
.text$mn:00007173                 jz      short loc_7194
.text$mn:00007175                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007178                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000717D                 mov     esi, eax
.text$mn:0000717F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007182                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00007187                 cmp     esi, eax
.text$mn:00007189                 jnz     short loc_7194
.text$mn:0000718B                 mov     [ebp+var_8], 1
.text$mn:00007192                 jmp     short loc_719B
.text$mn:00007194 ; ---------------------------------------------------------------------------
.text$mn:00007194
.text$mn:00007194 loc_7194:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00007194                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00007194                 mov     [ebp+var_8], 0
.text$mn:0000719B
.text$mn:0000719B loc_719B:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000719B                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000719E                 pop     esi
.text$mn:0000719F                 mov     esp, ebp
.text$mn:000071A1                 pop     ebp
.text$mn:000071A2                 retn    4
.text$mn:000071A2 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:000071A2
.text$mn:000071A2 ; ---------------------------------------------------------------------------
.text$mn:000071A5                 align 4
.text$mn:000071A5 _text$mn        ends
.text$mn:000071A5
.text$mn:000071A8 ; ===========================================================================
.text$mn:000071A8
.text$mn:000071A8 ; Segment type: Pure code
.text$mn:000071A8 ; Segment permissions: Read/Execute
.text$mn:000071A8 _text$mn        segment para public 'CODE' use32
.text$mn:000071A8                 assume cs:_text$mn
.text$mn:000071A8                 ;org 71A8h
.text$mn:000071A8 ; COMDAT (pick any)
.text$mn:000071A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071A8
.text$mn:000071A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000071A8
.text$mn:000071A8 ; Attributes: bp-based frame
.text$mn:000071A8
.text$mn:000071A8 ; public: char const & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::operator[](unsigned int)const
.text$mn:000071A8                 public ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
.text$mn:000071A8 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z proc near
.text$mn:000071A8                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+2Fp
.text$mn:000071A8                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+5Ep ...
.text$mn:000071A8
.text$mn:000071A8 var_4           = dword ptr -4
.text$mn:000071A8 arg_0           = dword ptr  8
.text$mn:000071A8
.text$mn:000071A8                 push    ebp
.text$mn:000071A9                 mov     ebp, esp
.text$mn:000071AB                 push    ecx
.text$mn:000071AC                 mov     [ebp+var_4], ecx
.text$mn:000071AF                 mov     eax, [ebp+var_4]
.text$mn:000071B2                 mov     ecx, [eax+14h]
.text$mn:000071B5                 cmp     ecx, [ebp+arg_0]
.text$mn:000071B8                 jnb     short loc_71D1
.text$mn:000071BA                 push    6A2h            ; unsigned int
.text$mn:000071BF                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000071C4                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:000071C9                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000071CE                 add     esp, 0Ch
.text$mn:000071D1
.text$mn:000071D1 loc_71D1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)+10j
.text$mn:000071D1                 mov     ecx, [ebp+var_4]
.text$mn:000071D4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000071D9                 add     eax, [ebp+arg_0]
.text$mn:000071DC                 mov     esp, ebp
.text$mn:000071DE                 pop     ebp
.text$mn:000071DF                 retn    4
.text$mn:000071DF ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z endp
.text$mn:000071DF
.text$mn:000071DF ; ---------------------------------------------------------------------------
.text$mn:000071E2                 align 4
.text$mn:000071E2 _text$mn        ends
.text$mn:000071E2
.text$mn:000071E4 ; ===========================================================================
.text$mn:000071E4
.text$mn:000071E4 ; Segment type: Pure code
.text$mn:000071E4 ; Segment permissions: Read/Execute
.text$mn:000071E4 _text$mn        segment para public 'CODE' use32
.text$mn:000071E4                 assume cs:_text$mn
.text$mn:000071E4                 ;org 71E4h
.text$mn:000071E4 ; COMDAT (pick any)
.text$mn:000071E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071E4
.text$mn:000071E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071E4
.text$mn:000071E4 ; Attributes: bp-based frame
.text$mn:000071E4
.text$mn:000071E4 ; public: __thiscall std::fpos<int>::operator __int64(void)const
.text$mn:000071E4                 public ??B?$fpos@H@std@@QBE_JXZ
.text$mn:000071E4 ??B?$fpos@H@std@@QBE_JXZ proc near      ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+Dp
.text$mn:000071E4
.text$mn:000071E4 var_4           = dword ptr -4
.text$mn:000071E4
.text$mn:000071E4                 push    ebp
.text$mn:000071E5                 mov     ebp, esp
.text$mn:000071E7                 push    ecx
.text$mn:000071E8                 push    esi
.text$mn:000071E9                 mov     [ebp+var_4], ecx
.text$mn:000071EC                 mov     eax, [ebp+var_4]
.text$mn:000071EF                 mov     ecx, [ebp+var_4]
.text$mn:000071F2                 mov     edx, [eax]
.text$mn:000071F4                 add     edx, [ecx+8]
.text$mn:000071F7                 mov     esi, [eax+4]
.text$mn:000071FA                 adc     esi, [ecx+0Ch]
.text$mn:000071FD                 mov     eax, edx
.text$mn:000071FF                 mov     edx, esi
.text$mn:00007201                 pop     esi
.text$mn:00007202                 mov     esp, ebp
.text$mn:00007204                 pop     ebp
.text$mn:00007205                 retn
.text$mn:00007205 ??B?$fpos@H@std@@QBE_JXZ endp
.text$mn:00007205
.text$mn:00007205 ; ---------------------------------------------------------------------------
.text$mn:00007206                 align 4
.text$mn:00007206 _text$mn        ends
.text$mn:00007206
.text$mn:00007208 ; ===========================================================================
.text$mn:00007208
.text$mn:00007208 ; Segment type: Pure code
.text$mn:00007208 ; Segment permissions: Read/Execute
.text$mn:00007208 _text$mn        segment para public 'CODE' use32
.text$mn:00007208                 assume cs:_text$mn
.text$mn:00007208                 ;org 7208h
.text$mn:00007208 ; COMDAT (pick any)
.text$mn:00007208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007208
.text$mn:00007208 ; =============== S U B R O U T I N E =======================================
.text$mn:00007208
.text$mn:00007208 ; Attributes: bp-based frame
.text$mn:00007208
.text$mn:00007208 ; public: __thiscall std::locale::id::operator unsigned int(void)
.text$mn:00007208                 public ??Bid@locale@std@@QAEIXZ
.text$mn:00007208 ??Bid@locale@std@@QAEIXZ proc near      ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+43p
.text$mn:00007208
.text$mn:00007208 var_14          = byte ptr -14h
.text$mn:00007208 var_10          = dword ptr -10h
.text$mn:00007208 var_C           = dword ptr -0Ch
.text$mn:00007208 var_4           = dword ptr -4
.text$mn:00007208
.text$mn:00007208                 push    ebp
.text$mn:00007209                 mov     ebp, esp
.text$mn:0000720B                 push    0FFFFFFFFh
.text$mn:0000720D                 push    offset __ehhandler$??Bid@locale@std@@QAEIXZ
.text$mn:00007212                 mov     eax, large fs:0
.text$mn:00007218                 push    eax
.text$mn:00007219                 sub     esp, 8
.text$mn:0000721C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007221                 xor     eax, ebp
.text$mn:00007223                 push    eax
.text$mn:00007224                 lea     eax, [ebp+var_C]
.text$mn:00007227                 mov     large fs:0, eax
.text$mn:0000722D                 mov     [ebp+var_10], ecx
.text$mn:00007230                 mov     eax, [ebp+var_10]
.text$mn:00007233                 cmp     dword ptr [eax], 0
.text$mn:00007236                 jnz     short loc_727A
.text$mn:00007238                 push    0               ; int
.text$mn:0000723A                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000723D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007242                 mov     [ebp+var_4], 0
.text$mn:00007249                 mov     ecx, [ebp+var_10]
.text$mn:0000724C                 cmp     dword ptr [ecx], 0
.text$mn:0000724F                 jnz     short loc_726B
.text$mn:00007251                 mov     edx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:00007257                 add     edx, 1
.text$mn:0000725A                 mov     dword ptr ds:?_Id_cnt@id@locale@std@@0HA, edx ; int std::locale::id::_Id_cnt
.text$mn:00007260                 mov     eax, [ebp+var_10]
.text$mn:00007263                 mov     ecx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:00007269                 mov     [eax], ecx
.text$mn:0000726B
.text$mn:0000726B loc_726B:                               ; CODE XREF: std::locale::id::operator uint(void)+47j
.text$mn:0000726B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007272                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007275                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000727A
.text$mn:0000727A loc_727A:                               ; CODE XREF: std::locale::id::operator uint(void)+2Ej
.text$mn:0000727A                 mov     edx, [ebp+var_10]
.text$mn:0000727D                 mov     eax, [edx]
.text$mn:0000727F                 mov     ecx, [ebp+var_C]
.text$mn:00007282                 mov     large fs:0, ecx
.text$mn:00007289                 pop     ecx
.text$mn:0000728A                 mov     esp, ebp
.text$mn:0000728C                 pop     ebp
.text$mn:0000728D                 retn
.text$mn:0000728D ??Bid@locale@std@@QAEIXZ endp
.text$mn:0000728D
.text$mn:0000728D ; ---------------------------------------------------------------------------
.text$mn:0000728E                 align 10h
.text$mn:0000728E _text$mn        ends
.text$mn:0000728E
.text$x:00007290 ; ===========================================================================
.text$x:00007290
.text$x:00007290 ; Segment type: Pure code
.text$x:00007290 ; Segment permissions: Read/Execute
.text$x:00007290 _text$x         segment para public 'CODE' use32
.text$x:00007290                 assume cs:_text$x
.text$x:00007290                 ;org 7290h
.text$x:00007290 ; COMDAT (pick associative to section at 7208)
.text$x:00007290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007290
.text$x:00007290 ; =============== S U B R O U T I N E =======================================
.text$x:00007290
.text$x:00007290
.text$x:00007290 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 proc near
.text$x:00007290                                         ; DATA XREF: .xdata$x:0000B6FCo
.text$x:00007290                 lea     ecx, [ebp-14h]  ; this
.text$x:00007293                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007293 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 endp
.text$x:00007293
.text$x:00007298
.text$x:00007298 ; =============== S U B R O U T I N E =======================================
.text$x:00007298
.text$x:00007298
.text$x:00007298 __ehhandler$??Bid@locale@std@@QAEIXZ proc near
.text$x:00007298                                         ; DATA XREF: std::locale::id::operator uint(void)+5o
.text$x:00007298
.text$x:00007298 arg_4           = dword ptr  8
.text$x:00007298
.text$x:00007298                 mov     edx, [esp+arg_4]
.text$x:0000729C                 lea     eax, [edx+0Ch]
.text$x:0000729F                 mov     ecx, [edx-0Ch]
.text$x:000072A2                 xor     ecx, eax
.text$x:000072A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072A9                 mov     eax, offset __ehfuncinfo$??Bid@locale@std@@QAEIXZ
.text$x:000072AE                 jmp     ___CxxFrameHandler3
.text$x:000072AE __ehhandler$??Bid@locale@std@@QAEIXZ endp
.text$x:000072AE
.text$x:000072AE ; ---------------------------------------------------------------------------
.text$x:000072B3                 align 4
.text$x:000072B3 _text$x         ends
.text$x:000072B3
.text$mn:000072B4 ; ===========================================================================
.text$mn:000072B4
.text$mn:000072B4 ; Segment type: Pure code
.text$mn:000072B4 ; Segment permissions: Read/Execute
.text$mn:000072B4 _text$mn        segment para public 'CODE' use32
.text$mn:000072B4                 assume cs:_text$mn
.text$mn:000072B4                 ;org 72B4h
.text$mn:000072B4 ; COMDAT (pick any)
.text$mn:000072B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072B4
.text$mn:000072B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072B4
.text$mn:000072B4 ; Attributes: bp-based frame
.text$mn:000072B4
.text$mn:000072B4 ; public: __thiscall std::basic_ostream<char, struct std::char_traits<char>>::sentry::operator bool(void)const
.text$mn:000072B4                 public ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
.text$mn:000072B4 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ proc near
.text$mn:000072B4                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+B8p
.text$mn:000072B4                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+DCp ...
.text$mn:000072B4
.text$mn:000072B4 var_4           = dword ptr -4
.text$mn:000072B4
.text$mn:000072B4                 push    ebp
.text$mn:000072B5                 mov     ebp, esp
.text$mn:000072B7                 push    ecx
.text$mn:000072B8                 mov     [ebp+var_4], ecx
.text$mn:000072BB                 mov     eax, [ebp+var_4]
.text$mn:000072BE                 mov     al, [eax+4]
.text$mn:000072C1                 mov     esp, ebp
.text$mn:000072C3                 pop     ebp
.text$mn:000072C4                 retn
.text$mn:000072C4 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ endp
.text$mn:000072C4
.text$mn:000072C4 ; ---------------------------------------------------------------------------
.text$mn:000072C5                 align 4
.text$mn:000072C5 _text$mn        ends
.text$mn:000072C5
.text$mn:000072C8 ; ===========================================================================
.text$mn:000072C8
.text$mn:000072C8 ; Segment type: Pure code
.text$mn:000072C8 ; Segment permissions: Read/Execute
.text$mn:000072C8 _text$mn        segment para public 'CODE' use32
.text$mn:000072C8                 assume cs:_text$mn
.text$mn:000072C8                 ;org 72C8h
.text$mn:000072C8 ; COMDAT (pick any)
.text$mn:000072C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072C8
.text$mn:000072C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000072C8
.text$mn:000072C8 ; Attributes: bp-based frame
.text$mn:000072C8
.text$mn:000072C8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(char *Str)
.text$mn:000072C8                 public ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
.text$mn:000072C8 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z proc near
.text$mn:000072C8                                         ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+149p
.text$mn:000072C8                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+12Cp
.text$mn:000072C8
.text$mn:000072C8 var_4           = dword ptr -4
.text$mn:000072C8 Str             = dword ptr  8
.text$mn:000072C8
.text$mn:000072C8                 push    ebp
.text$mn:000072C9                 mov     ebp, esp
.text$mn:000072CB                 push    ecx
.text$mn:000072CC                 mov     [ebp+var_4], ecx
.text$mn:000072CF                 mov     eax, [ebp+Str]
.text$mn:000072D2                 push    eax             ; Str
.text$mn:000072D3                 mov     ecx, [ebp+var_4]
.text$mn:000072D6                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)
.text$mn:000072DB                 mov     esp, ebp
.text$mn:000072DD                 pop     ebp
.text$mn:000072DE                 retn    4
.text$mn:000072DE ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z endp
.text$mn:000072DE
.text$mn:000072DE ; ---------------------------------------------------------------------------
.text$mn:000072E1                 align 4
.text$mn:000072E1 _text$mn        ends
.text$mn:000072E1
.text$mn:000072E4 ; ===========================================================================
.text$mn:000072E4
.text$mn:000072E4 ; Segment type: Pure code
.text$mn:000072E4 ; Segment permissions: Read/Execute
.text$mn:000072E4 _text$mn        segment para public 'CODE' use32
.text$mn:000072E4                 assume cs:_text$mn
.text$mn:000072E4                 ;org 72E4h
.text$mn:000072E4 ; COMDAT (pick any)
.text$mn:000072E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072E4
.text$mn:000072E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072E4
.text$mn:000072E4 ; Attributes: bp-based frame
.text$mn:000072E4
.text$mn:000072E4 ; public: void __thiscall std::basic_ostream<char, struct std::char_traits<char>>::`vbase destructor(void)
.text$mn:000072E4                 public ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$mn:000072E4 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near
.text$mn:000072E4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::`scalar deleting destructor'(uint)+Dp
.text$mn:000072E4
.text$mn:000072E4 var_4           = dword ptr -4
.text$mn:000072E4
.text$mn:000072E4                 push    ebp
.text$mn:000072E5                 mov     ebp, esp
.text$mn:000072E7                 push    ecx
.text$mn:000072E8                 mov     [ebp+var_4], ecx
.text$mn:000072EB                 mov     ecx, [ebp+var_4]
.text$mn:000072EE                 add     ecx, 8
.text$mn:000072F1                 call    ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)
.text$mn:000072F6                 mov     ecx, [ebp+var_4]
.text$mn:000072F9                 add     ecx, 8
.text$mn:000072FC                 call    ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
.text$mn:00007301                 mov     esp, ebp
.text$mn:00007303                 pop     ebp
.text$mn:00007304                 retn
.text$mn:00007304 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ endp
.text$mn:00007304
.text$mn:00007304 ; ---------------------------------------------------------------------------
.text$mn:00007305                 align 4
.text$mn:00007305 _text$mn        ends
.text$mn:00007305
.text$mn:00007308 ; ===========================================================================
.text$mn:00007308
.text$mn:00007308 ; Segment type: Pure code
.text$mn:00007308 ; Segment permissions: Read/Execute
.text$mn:00007308 _text$mn        segment para public 'CODE' use32
.text$mn:00007308                 assume cs:_text$mn
.text$mn:00007308                 ;org 7308h
.text$mn:00007308 ; COMDAT (pick any)
.text$mn:00007308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007308
.text$mn:00007308 ; =============== S U B R O U T I N E =======================================
.text$mn:00007308
.text$mn:00007308 ; Attributes: bp-based frame
.text$mn:00007308
.text$mn:00007308 ; public: void __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vbase destructor(void)
.text$mn:00007308                 public ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
.text$mn:00007308 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ proc near
.text$mn:00007308                                         ; CODE XREF: operator<<(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,TiXmlNodeA const &)+9Cp
.text$mn:00007308                                         ; __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$0+6j ...
.text$mn:00007308
.text$mn:00007308 var_4           = dword ptr -4
.text$mn:00007308
.text$mn:00007308                 push    ebp
.text$mn:00007309                 mov     ebp, esp
.text$mn:0000730B                 push    ecx
.text$mn:0000730C                 mov     [ebp+var_4], ecx
.text$mn:0000730F                 mov     ecx, [ebp+var_4]
.text$mn:00007312                 add     ecx, 50h ; 'P'
.text$mn:00007315                 call    ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000731A                 mov     ecx, [ebp+var_4]
.text$mn:0000731D                 add     ecx, 50h ; 'P'
.text$mn:00007320                 call    ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
.text$mn:00007325
.text$mn:00007325 loc_7325:                               ; DATA XREF: .rdata:$SG96925o
.text$mn:00007325                                         ; .rdata:$SG97101o
.text$mn:00007325                 mov     esp, ebp
.text$mn:00007327                 pop     ebp
.text$mn:00007328                 retn
.text$mn:00007328 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ endp
.text$mn:00007328
.text$mn:00007328 ; ---------------------------------------------------------------------------
.text$mn:00007329                 align 4
.text$mn:00007329 _text$mn        ends
.text$mn:00007329
.text$mn:0000732C ; ===========================================================================
.text$mn:0000732C
.text$mn:0000732C ; Segment type: Pure code
.text$mn:0000732C ; Segment permissions: Read/Execute
.text$mn:0000732C _text$mn        segment byte public 'CODE' use32
.text$mn:0000732C                 assume cs:_text$mn
.text$mn:0000732C                 ;org 732Ch
.text$mn:0000732C ; COMDAT (pick any)
.text$mn:0000732C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000732C
.text$mn:0000732C ; =============== S U B R O U T I N E =======================================
.text$mn:0000732C
.text$mn:0000732C
.text$mn:0000732C ; [thunk]:public: virtual void * __thiscall std::basic_ostream<char, struct std::char_traits<char>>::`vector deleting destructor'`vtordisp{4294967292, 0}' (unsigned int)
.text$mn:0000732C                 public ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
.text$mn:0000732C ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
.text$mn:0000732C                                         ; DATA XREF: .rdata:const std::basic_ostream<char,std::char_traits<char>>::`vftable'o
.text$mn:0000732C                 sub     ecx, [ecx-4]
.text$mn:0000732F                 jmp     ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char>>::`vector deleting destructor'(uint)
.text$mn:0000732F ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z endp
.text$mn:0000732F
.text$mn:0000732F _text$mn        ends
.text$mn:0000732F
.text$mn:00007334 ; ===========================================================================
.text$mn:00007334
.text$mn:00007334 ; Segment type: Pure code
.text$mn:00007334 ; Segment permissions: Read/Execute
.text$mn:00007334 _text$mn        segment byte public 'CODE' use32
.text$mn:00007334                 assume cs:_text$mn
.text$mn:00007334                 ;org 7334h
.text$mn:00007334 ; COMDAT (pick any)
.text$mn:00007334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007334
.text$mn:00007334 ; =============== S U B R O U T I N E =======================================
.text$mn:00007334
.text$mn:00007334
.text$mn:00007334 ; [thunk]:public: virtual void * __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'`vtordisp{4294967292, 0}' (unsigned int)
.text$mn:00007334                 public ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
.text$mn:00007334 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
.text$mn:00007334                                         ; DATA XREF: .rdata:const std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vftable'o
.text$mn:00007334                 sub     ecx, [ecx-4]
.text$mn:00007337                 jmp     ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'(uint)
.text$mn:00007337 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z endp
.text$mn:00007337
.text$mn:00007337 _text$mn        ends
.text$mn:00007337
.text$mn:0000733C ; ===========================================================================
.text$mn:0000733C
.text$mn:0000733C ; Segment type: Pure code
.text$mn:0000733C ; Segment permissions: Read/Execute
.text$mn:0000733C _text$mn        segment para public 'CODE' use32
.text$mn:0000733C                 assume cs:_text$mn
.text$mn:0000733C                 ;org 733Ch
.text$mn:0000733C ; COMDAT (pick any)
.text$mn:0000733C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000733C
.text$mn:0000733C ; =============== S U B R O U T I N E =======================================
.text$mn:0000733C
.text$mn:0000733C ; Attributes: bp-based frame
.text$mn:0000733C
.text$mn:0000733C ; public: virtual void * __thiscall std::basic_ios<char, struct std::char_traits<char>>::`scalar deleting destructor'(unsigned int)
.text$mn:0000733C                 public ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
.text$mn:0000733C ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z proc near
.text$mn:0000733C
.text$mn:0000733C var_4           = dword ptr -4
.text$mn:0000733C arg_0           = dword ptr  8
.text$mn:0000733C
.text$mn:0000733C                 push    ebp
.text$mn:0000733D                 mov     ebp, esp
.text$mn:0000733F                 push    ecx
.text$mn:00007340                 mov     [ebp+var_4], ecx
.text$mn:00007343                 mov     ecx, [ebp+var_4]
.text$mn:00007346                 call    ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)
.text$mn:0000734B                 mov     eax, [ebp+arg_0]
.text$mn:0000734E                 and     eax, 1
.text$mn:00007351                 jz      short loc_735F
.text$mn:00007353                 mov     ecx, [ebp+var_4]
.text$mn:00007356                 push    ecx             ; void *
.text$mn:00007357                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000735C                 add     esp, 4
.text$mn:0000735F
.text$mn:0000735F loc_735F:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::`scalar deleting destructor'(uint)+15j
.text$mn:0000735F                 mov     eax, [ebp+var_4]
.text$mn:00007362                 mov     esp, ebp
.text$mn:00007364                 pop     ebp
.text$mn:00007365                 retn    4
.text$mn:00007365 ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z endp
.text$mn:00007365
.text$mn:00007365 _text$mn        ends
.text$mn:00007365
.text$mn:00007368 ; ===========================================================================
.text$mn:00007368
.text$mn:00007368 ; Segment type: Pure code
.text$mn:00007368 ; Segment permissions: Read/Execute
.text$mn:00007368 _text$mn        segment para public 'CODE' use32
.text$mn:00007368                 assume cs:_text$mn
.text$mn:00007368                 ;org 7368h
.text$mn:00007368 ; COMDAT (pick any)
.text$mn:00007368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007368
.text$mn:00007368 ; =============== S U B R O U T I N E =======================================
.text$mn:00007368
.text$mn:00007368 ; Attributes: bp-based frame
.text$mn:00007368
.text$mn:00007368 ; public: virtual void * __thiscall std::basic_ostream<char, struct std::char_traits<char>>::`scalar deleting destructor'(unsigned int)
.text$mn:00007368                 public ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
.text$mn:00007368 ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z proc near
.text$mn:00007368
.text$mn:00007368 var_4           = dword ptr -4
.text$mn:00007368 arg_0           = dword ptr  8
.text$mn:00007368
.text$mn:00007368                 push    ebp
.text$mn:00007369                 mov     ebp, esp
.text$mn:0000736B                 push    ecx
.text$mn:0000736C                 mov     [ebp+var_4], ecx
.text$mn:0000736F                 mov     ecx, [ebp+var_4]
.text$mn:00007372                 sub     ecx, 8
.text$mn:00007375                 call    ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char>>::`vbase destructor(void)
.text$mn:0000737A                 mov     eax, [ebp+arg_0]
.text$mn:0000737D                 and     eax, 1
.text$mn:00007380                 jz      short loc_7391
.text$mn:00007382                 mov     ecx, [ebp+var_4]
.text$mn:00007385                 sub     ecx, 8
.text$mn:00007388                 push    ecx             ; void *
.text$mn:00007389                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000738E                 add     esp, 4
.text$mn:00007391
.text$mn:00007391 loc_7391:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::`scalar deleting destructor'(uint)+18j
.text$mn:00007391                 mov     eax, [ebp+var_4]
.text$mn:00007394                 sub     eax, 8
.text$mn:00007397                 mov     esp, ebp
.text$mn:00007399                 pop     ebp
.text$mn:0000739A                 retn    4
.text$mn:0000739A ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z endp
.text$mn:0000739A
.text$mn:0000739A ; ---------------------------------------------------------------------------
.text$mn:0000739D                 align 10h
.text$mn:0000739D _text$mn        ends
.text$mn:0000739D
.text$mn:000073A0 ; ===========================================================================
.text$mn:000073A0
.text$mn:000073A0 ; Segment type: Pure code
.text$mn:000073A0 ; Segment permissions: Read/Execute
.text$mn:000073A0 _text$mn        segment para public 'CODE' use32
.text$mn:000073A0                 assume cs:_text$mn
.text$mn:000073A0                 ;org 73A0h
.text$mn:000073A0 ; COMDAT (pick any)
.text$mn:000073A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073A0
.text$mn:000073A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000073A0
.text$mn:000073A0 ; Attributes: bp-based frame
.text$mn:000073A0
.text$mn:000073A0 ; public: virtual void * __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`scalar deleting destructor'(unsigned int)
.text$mn:000073A0                 public ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
.text$mn:000073A0 ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
.text$mn:000073A0
.text$mn:000073A0 var_4           = dword ptr -4
.text$mn:000073A0 arg_0           = dword ptr  8
.text$mn:000073A0
.text$mn:000073A0                 push    ebp
.text$mn:000073A1                 mov     ebp, esp
.text$mn:000073A3                 push    ecx
.text$mn:000073A4                 mov     [ebp+var_4], ecx
.text$mn:000073A7                 mov     ecx, [ebp+var_4]
.text$mn:000073AA                 sub     ecx, 50h ; 'P'
.text$mn:000073AD                 call    ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vbase destructor(void)
.text$mn:000073B2                 mov     eax, [ebp+arg_0]
.text$mn:000073B5                 and     eax, 1
.text$mn:000073B8                 jz      short loc_73C9
.text$mn:000073BA                 mov     ecx, [ebp+var_4]
.text$mn:000073BD                 sub     ecx, 50h ; 'P'
.text$mn:000073C0                 push    ecx             ; void *
.text$mn:000073C1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000073C6                 add     esp, 4
.text$mn:000073C9
.text$mn:000073C9 loc_73C9:                               ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`scalar deleting destructor'(uint)+18j
.text$mn:000073C9                 mov     eax, [ebp+var_4]
.text$mn:000073CC                 sub     eax, 50h ; 'P'
.text$mn:000073CF                 mov     esp, ebp
.text$mn:000073D1                 pop     ebp
.text$mn:000073D2                 retn    4
.text$mn:000073D2 ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z endp
.text$mn:000073D2
.text$mn:000073D2 ; ---------------------------------------------------------------------------
.text$mn:000073D5                 align 4
.text$mn:000073D5 _text$mn        ends
.text$mn:000073D5
.text$mn:000073D8 ; ===========================================================================
.text$mn:000073D8
.text$mn:000073D8 ; Segment type: Pure code
.text$mn:000073D8 ; Segment permissions: Read/Execute
.text$mn:000073D8 _text$mn        segment para public 'CODE' use32
.text$mn:000073D8                 assume cs:_text$mn
.text$mn:000073D8                 ;org 73D8h
.text$mn:000073D8 ; COMDAT (pick any)
.text$mn:000073D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073D8
.text$mn:000073D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000073D8
.text$mn:000073D8 ; Attributes: bp-based frame
.text$mn:000073D8
.text$mn:000073D8 ; public: virtual void * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::`scalar deleting destructor'(unsigned int)
.text$mn:000073D8                 public ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
.text$mn:000073D8 ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z proc near
.text$mn:000073D8
.text$mn:000073D8 var_4           = dword ptr -4
.text$mn:000073D8 arg_0           = dword ptr  8
.text$mn:000073D8
.text$mn:000073D8                 push    ebp
.text$mn:000073D9                 mov     ebp, esp
.text$mn:000073DB                 push    ecx
.text$mn:000073DC                 mov     [ebp+var_4], ecx
.text$mn:000073DF                 mov     ecx, [ebp+var_4]
.text$mn:000073E2                 call    ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)
.text$mn:000073E7                 mov     eax, [ebp+arg_0]
.text$mn:000073EA                 and     eax, 1
.text$mn:000073ED                 jz      short loc_73FB
.text$mn:000073EF                 mov     ecx, [ebp+var_4]
.text$mn:000073F2                 push    ecx             ; void *
.text$mn:000073F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000073F8                 add     esp, 4
.text$mn:000073FB
.text$mn:000073FB loc_73FB:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::`scalar deleting destructor'(uint)+15j
.text$mn:000073FB                 mov     eax, [ebp+var_4]
.text$mn:000073FE                 mov     esp, ebp
.text$mn:00007400                 pop     ebp
.text$mn:00007401                 retn    4
.text$mn:00007401 ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z endp
.text$mn:00007401
.text$mn:00007401 _text$mn        ends
.text$mn:00007401
.text$mn:00007404 ; ===========================================================================
.text$mn:00007404
.text$mn:00007404 ; Segment type: Pure code
.text$mn:00007404 ; Segment permissions: Read/Execute
.text$mn:00007404 _text$mn        segment para public 'CODE' use32
.text$mn:00007404                 assume cs:_text$mn
.text$mn:00007404                 ;org 7404h
.text$mn:00007404 ; COMDAT (pick any)
.text$mn:00007404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007404
.text$mn:00007404 ; =============== S U B R O U T I N E =======================================
.text$mn:00007404
.text$mn:00007404 ; Attributes: bp-based frame
.text$mn:00007404
.text$mn:00007404 ; public: virtual void * __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`scalar deleting destructor'(unsigned int)
.text$mn:00007404                 public ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
.text$mn:00007404 ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
.text$mn:00007404
.text$mn:00007404 var_4           = dword ptr -4
.text$mn:00007404 arg_0           = dword ptr  8
.text$mn:00007404
.text$mn:00007404                 push    ebp
.text$mn:00007405                 mov     ebp, esp
.text$mn:00007407                 push    ecx
.text$mn:00007408                 mov     [ebp+var_4], ecx
.text$mn:0000740B                 mov     ecx, [ebp+var_4]
.text$mn:0000740E                 call    ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00007413                 mov     eax, [ebp+arg_0]
.text$mn:00007416                 and     eax, 1
.text$mn:00007419                 jz      short loc_7427
.text$mn:0000741B                 mov     ecx, [ebp+var_4]
.text$mn:0000741E                 push    ecx             ; void *
.text$mn:0000741F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007424                 add     esp, 4
.text$mn:00007427
.text$mn:00007427 loc_7427:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`scalar deleting destructor'(uint)+15j
.text$mn:00007427                 mov     eax, [ebp+var_4]
.text$mn:0000742A                 mov     esp, ebp
.text$mn:0000742C                 pop     ebp
.text$mn:0000742D                 retn    4
.text$mn:0000742D ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z endp
.text$mn:0000742D
.text$mn:0000742D _text$mn        ends
.text$mn:0000742D
.text$mn:00007430 ; ===========================================================================
.text$mn:00007430
.text$mn:00007430 ; Segment type: Pure code
.text$mn:00007430 ; Segment permissions: Read/Execute
.text$mn:00007430 _text$mn        segment para public 'CODE' use32
.text$mn:00007430                 assume cs:_text$mn
.text$mn:00007430                 ;org 7430h
.text$mn:00007430 ; COMDAT (pick any)
.text$mn:00007430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007430
.text$mn:00007430 ; =============== S U B R O U T I N E =======================================
.text$mn:00007430
.text$mn:00007430 ; Attributes: bp-based frame
.text$mn:00007430
.text$mn:00007430 ; protected: virtual void * __thiscall std::ctype<char>::`scalar deleting destructor'(unsigned int)
.text$mn:00007430                 public ??_G?$ctype@D@std@@MAEPAXI@Z
.text$mn:00007430 ??_G?$ctype@D@std@@MAEPAXI@Z proc near
.text$mn:00007430
.text$mn:00007430 Memory          = dword ptr -4
.text$mn:00007430 arg_0           = dword ptr  8
.text$mn:00007430
.text$mn:00007430                 push    ebp
.text$mn:00007431                 mov     ebp, esp
.text$mn:00007433                 push    ecx
.text$mn:00007434                 mov     [ebp+Memory], ecx
.text$mn:00007437                 mov     ecx, [ebp+Memory]
.text$mn:0000743A                 call    ??1?$ctype@D@std@@MAE@XZ ; std::ctype<char>::~ctype<char>(void)
.text$mn:0000743F                 mov     eax, [ebp+arg_0]
.text$mn:00007442                 and     eax, 1
.text$mn:00007445                 jz      short loc_7453
.text$mn:00007447                 mov     ecx, [ebp+Memory]
.text$mn:0000744A                 push    ecx             ; Memory
.text$mn:0000744B                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00007450                 add     esp, 4
.text$mn:00007453
.text$mn:00007453 loc_7453:                               ; CODE XREF: std::ctype<char>::`scalar deleting destructor'(uint)+15j
.text$mn:00007453                 mov     eax, [ebp+Memory]
.text$mn:00007456                 mov     esp, ebp
.text$mn:00007458                 pop     ebp
.text$mn:00007459                 retn    4
.text$mn:00007459 ??_G?$ctype@D@std@@MAEPAXI@Z endp
.text$mn:00007459
.text$mn:00007459 _text$mn        ends
.text$mn:00007459
.text$mn:0000745C ; ===========================================================================
.text$mn:0000745C
.text$mn:0000745C ; Segment type: Pure code
.text$mn:0000745C ; Segment permissions: Read/Execute
.text$mn:0000745C _text$mn        segment para public 'CODE' use32
.text$mn:0000745C                 assume cs:_text$mn
.text$mn:0000745C                 ;org 745Ch
.text$mn:0000745C ; COMDAT (pick any)
.text$mn:0000745C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000745C
.text$mn:0000745C ; =============== S U B R O U T I N E =======================================
.text$mn:0000745C
.text$mn:0000745C ; Attributes: bp-based frame
.text$mn:0000745C
.text$mn:0000745C ; public: virtual void * __thiscall TiXmlAttributeA::`scalar deleting destructor'(unsigned int)
.text$mn:0000745C                 public ??_GTiXmlAttributeA@@UAEPAXI@Z
.text$mn:0000745C ??_GTiXmlAttributeA@@UAEPAXI@Z proc near
.text$mn:0000745C
.text$mn:0000745C var_4           = dword ptr -4
.text$mn:0000745C arg_0           = dword ptr  8
.text$mn:0000745C
.text$mn:0000745C                 push    ebp
.text$mn:0000745D                 mov     ebp, esp
.text$mn:0000745F                 push    ecx
.text$mn:00007460                 mov     [ebp+var_4], ecx
.text$mn:00007463                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007466                 call    ??1TiXmlAttributeA@@UAE@XZ ; TiXmlAttributeA::~TiXmlAttributeA(void)
.text$mn:0000746B                 mov     eax, [ebp+arg_0]
.text$mn:0000746E                 and     eax, 1
.text$mn:00007471                 jz      short loc_747F
.text$mn:00007473                 mov     ecx, [ebp+var_4]
.text$mn:00007476                 push    ecx             ; void *
.text$mn:00007477                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000747C                 add     esp, 4
.text$mn:0000747F
.text$mn:0000747F loc_747F:                               ; CODE XREF: TiXmlAttributeA::`scalar deleting destructor'(uint)+15j
.text$mn:0000747F                 mov     eax, [ebp+var_4]
.text$mn:00007482                 mov     esp, ebp
.text$mn:00007484                 pop     ebp
.text$mn:00007485                 retn    4
.text$mn:00007485 ??_GTiXmlAttributeA@@UAEPAXI@Z endp
.text$mn:00007485
.text$mn:00007485 _text$mn        ends
.text$mn:00007485
.text$mn:00007488 ; ===========================================================================
.text$mn:00007488
.text$mn:00007488 ; Segment type: Pure code
.text$mn:00007488 ; Segment permissions: Read/Execute
.text$mn:00007488 _text$mn        segment para public 'CODE' use32
.text$mn:00007488                 assume cs:_text$mn
.text$mn:00007488                 ;org 7488h
.text$mn:00007488 ; COMDAT (pick any)
.text$mn:00007488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007488
.text$mn:00007488 ; =============== S U B R O U T I N E =======================================
.text$mn:00007488
.text$mn:00007488 ; Attributes: bp-based frame
.text$mn:00007488
.text$mn:00007488 ; public: virtual void * __thiscall TiXmlBaseA::`scalar deleting destructor'(unsigned int)
.text$mn:00007488                 public ??_GTiXmlBaseA@@UAEPAXI@Z
.text$mn:00007488 ??_GTiXmlBaseA@@UAEPAXI@Z proc near
.text$mn:00007488
.text$mn:00007488 var_4           = dword ptr -4
.text$mn:00007488 arg_0           = dword ptr  8
.text$mn:00007488
.text$mn:00007488                 push    ebp
.text$mn:00007489                 mov     ebp, esp
.text$mn:0000748B                 push    ecx
.text$mn:0000748C                 mov     [ebp+var_4], ecx
.text$mn:0000748F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007492                 call    ??1TiXmlBaseA@@UAE@XZ ; TiXmlBaseA::~TiXmlBaseA(void)
.text$mn:00007497                 mov     eax, [ebp+arg_0]
.text$mn:0000749A                 and     eax, 1
.text$mn:0000749D                 jz      short loc_74AB
.text$mn:0000749F                 mov     ecx, [ebp+var_4]
.text$mn:000074A2                 push    ecx             ; void *
.text$mn:000074A3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000074A8                 add     esp, 4
.text$mn:000074AB
.text$mn:000074AB loc_74AB:                               ; CODE XREF: TiXmlBaseA::`scalar deleting destructor'(uint)+15j
.text$mn:000074AB                 mov     eax, [ebp+var_4]
.text$mn:000074AE                 mov     esp, ebp
.text$mn:000074B0                 pop     ebp
.text$mn:000074B1                 retn    4
.text$mn:000074B1 ??_GTiXmlBaseA@@UAEPAXI@Z endp
.text$mn:000074B1
.text$mn:000074B1 _text$mn        ends
.text$mn:000074B1
.text$mn:000074B4 ; ===========================================================================
.text$mn:000074B4
.text$mn:000074B4 ; Segment type: Pure code
.text$mn:000074B4 ; Segment permissions: Read/Execute
.text$mn:000074B4 _text$mn        segment para public 'CODE' use32
.text$mn:000074B4                 assume cs:_text$mn
.text$mn:000074B4                 ;org 74B4h
.text$mn:000074B4 ; COMDAT (pick any)
.text$mn:000074B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074B4
.text$mn:000074B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000074B4
.text$mn:000074B4 ; Attributes: bp-based frame
.text$mn:000074B4
.text$mn:000074B4 ; public: virtual void * __thiscall TiXmlCommentA::`scalar deleting destructor'(unsigned int)
.text$mn:000074B4                 public ??_GTiXmlCommentA@@UAEPAXI@Z
.text$mn:000074B4 ??_GTiXmlCommentA@@UAEPAXI@Z proc near
.text$mn:000074B4
.text$mn:000074B4 var_4           = dword ptr -4
.text$mn:000074B4 arg_0           = dword ptr  8
.text$mn:000074B4
.text$mn:000074B4                 push    ebp
.text$mn:000074B5                 mov     ebp, esp
.text$mn:000074B7                 push    ecx
.text$mn:000074B8                 mov     [ebp+var_4], ecx
.text$mn:000074BB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000074BE                 call    ??1TiXmlCommentA@@UAE@XZ ; TiXmlCommentA::~TiXmlCommentA(void)
.text$mn:000074C3                 mov     eax, [ebp+arg_0]
.text$mn:000074C6                 and     eax, 1
.text$mn:000074C9                 jz      short loc_74D7
.text$mn:000074CB                 mov     ecx, [ebp+var_4]
.text$mn:000074CE                 push    ecx             ; void *
.text$mn:000074CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000074D4                 add     esp, 4
.text$mn:000074D7
.text$mn:000074D7 loc_74D7:                               ; CODE XREF: TiXmlCommentA::`scalar deleting destructor'(uint)+15j
.text$mn:000074D7                 mov     eax, [ebp+var_4]
.text$mn:000074DA                 mov     esp, ebp
.text$mn:000074DC                 pop     ebp
.text$mn:000074DD                 retn    4
.text$mn:000074DD ??_GTiXmlCommentA@@UAEPAXI@Z endp
.text$mn:000074DD
.text$mn:000074DD _text$mn        ends
.text$mn:000074DD
.text$mn:000074E0 ; ===========================================================================
.text$mn:000074E0
.text$mn:000074E0 ; Segment type: Pure code
.text$mn:000074E0 ; Segment permissions: Read/Execute
.text$mn:000074E0 _text$mn        segment para public 'CODE' use32
.text$mn:000074E0                 assume cs:_text$mn
.text$mn:000074E0                 ;org 74E0h
.text$mn:000074E0 ; COMDAT (pick any)
.text$mn:000074E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074E0
.text$mn:000074E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000074E0
.text$mn:000074E0 ; Attributes: bp-based frame
.text$mn:000074E0
.text$mn:000074E0 ; public: virtual void * __thiscall TiXmlDeclarationA::`scalar deleting destructor'(unsigned int)
.text$mn:000074E0                 public ??_GTiXmlDeclarationA@@UAEPAXI@Z
.text$mn:000074E0 ??_GTiXmlDeclarationA@@UAEPAXI@Z proc near
.text$mn:000074E0
.text$mn:000074E0 var_4           = dword ptr -4
.text$mn:000074E0 arg_0           = dword ptr  8
.text$mn:000074E0
.text$mn:000074E0                 push    ebp
.text$mn:000074E1                 mov     ebp, esp
.text$mn:000074E3                 push    ecx
.text$mn:000074E4                 mov     [ebp+var_4], ecx
.text$mn:000074E7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000074EA                 call    ??1TiXmlDeclarationA@@UAE@XZ ; TiXmlDeclarationA::~TiXmlDeclarationA(void)
.text$mn:000074EF                 mov     eax, [ebp+arg_0]
.text$mn:000074F2                 and     eax, 1
.text$mn:000074F5                 jz      short loc_7503
.text$mn:000074F7                 mov     ecx, [ebp+var_4]
.text$mn:000074FA                 push    ecx             ; void *
.text$mn:000074FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007500                 add     esp, 4
.text$mn:00007503
.text$mn:00007503 loc_7503:                               ; CODE XREF: TiXmlDeclarationA::`scalar deleting destructor'(uint)+15j
.text$mn:00007503                 mov     eax, [ebp+var_4]
.text$mn:00007506                 mov     esp, ebp
.text$mn:00007508                 pop     ebp
.text$mn:00007509                 retn    4
.text$mn:00007509 ??_GTiXmlDeclarationA@@UAEPAXI@Z endp
.text$mn:00007509
.text$mn:00007509 _text$mn        ends
.text$mn:00007509
.text$mn:0000750C ; ===========================================================================
.text$mn:0000750C
.text$mn:0000750C ; Segment type: Pure code
.text$mn:0000750C ; Segment permissions: Read/Execute
.text$mn:0000750C _text$mn        segment para public 'CODE' use32
.text$mn:0000750C                 assume cs:_text$mn
.text$mn:0000750C                 ;org 750Ch
.text$mn:0000750C ; COMDAT (pick any)
.text$mn:0000750C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000750C
.text$mn:0000750C ; =============== S U B R O U T I N E =======================================
.text$mn:0000750C
.text$mn:0000750C ; Attributes: bp-based frame
.text$mn:0000750C
.text$mn:0000750C ; public: virtual void * __thiscall TiXmlDocumentA::`scalar deleting destructor'(unsigned int)
.text$mn:0000750C                 public ??_GTiXmlDocumentA@@UAEPAXI@Z
.text$mn:0000750C ??_GTiXmlDocumentA@@UAEPAXI@Z proc near
.text$mn:0000750C
.text$mn:0000750C var_4           = dword ptr -4
.text$mn:0000750C arg_0           = dword ptr  8
.text$mn:0000750C
.text$mn:0000750C                 push    ebp
.text$mn:0000750D                 mov     ebp, esp
.text$mn:0000750F                 push    ecx
.text$mn:00007510                 mov     [ebp+var_4], ecx
.text$mn:00007513                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007516                 call    ??1TiXmlDocumentA@@UAE@XZ ; TiXmlDocumentA::~TiXmlDocumentA(void)
.text$mn:0000751B                 mov     eax, [ebp+arg_0]
.text$mn:0000751E                 and     eax, 1
.text$mn:00007521                 jz      short loc_752F
.text$mn:00007523                 mov     ecx, [ebp+var_4]
.text$mn:00007526                 push    ecx             ; void *
.text$mn:00007527                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000752C                 add     esp, 4
.text$mn:0000752F
.text$mn:0000752F loc_752F:                               ; CODE XREF: TiXmlDocumentA::`scalar deleting destructor'(uint)+15j
.text$mn:0000752F                 mov     eax, [ebp+var_4]
.text$mn:00007532                 mov     esp, ebp
.text$mn:00007534                 pop     ebp
.text$mn:00007535                 retn    4
.text$mn:00007535 ??_GTiXmlDocumentA@@UAEPAXI@Z endp
.text$mn:00007535
.text$mn:00007535 _text$mn        ends
.text$mn:00007535
.text$mn:00007538 ; ===========================================================================
.text$mn:00007538
.text$mn:00007538 ; Segment type: Pure code
.text$mn:00007538 ; Segment permissions: Read/Execute
.text$mn:00007538 _text$mn        segment para public 'CODE' use32
.text$mn:00007538                 assume cs:_text$mn
.text$mn:00007538                 ;org 7538h
.text$mn:00007538 ; COMDAT (pick any)
.text$mn:00007538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007538
.text$mn:00007538 ; =============== S U B R O U T I N E =======================================
.text$mn:00007538
.text$mn:00007538 ; Attributes: bp-based frame
.text$mn:00007538
.text$mn:00007538 ; public: virtual void * __thiscall TiXmlElementA::`scalar deleting destructor'(unsigned int)
.text$mn:00007538                 public ??_GTiXmlElementA@@UAEPAXI@Z
.text$mn:00007538 ??_GTiXmlElementA@@UAEPAXI@Z proc near
.text$mn:00007538
.text$mn:00007538 var_4           = dword ptr -4
.text$mn:00007538 arg_0           = dword ptr  8
.text$mn:00007538
.text$mn:00007538                 push    ebp
.text$mn:00007539                 mov     ebp, esp
.text$mn:0000753B                 push    ecx
.text$mn:0000753C                 mov     [ebp+var_4], ecx
.text$mn:0000753F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007542                 call    ??1TiXmlElementA@@UAE@XZ ; TiXmlElementA::~TiXmlElementA(void)
.text$mn:00007547                 mov     eax, [ebp+arg_0]
.text$mn:0000754A                 and     eax, 1
.text$mn:0000754D                 jz      short loc_755B
.text$mn:0000754F                 mov     ecx, [ebp+var_4]
.text$mn:00007552                 push    ecx             ; void *
.text$mn:00007553                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007558                 add     esp, 4
.text$mn:0000755B
.text$mn:0000755B loc_755B:                               ; CODE XREF: TiXmlElementA::`scalar deleting destructor'(uint)+15j
.text$mn:0000755B                 mov     eax, [ebp+var_4]
.text$mn:0000755E                 mov     esp, ebp
.text$mn:00007560                 pop     ebp
.text$mn:00007561                 retn    4
.text$mn:00007561 ??_GTiXmlElementA@@UAEPAXI@Z endp
.text$mn:00007561
.text$mn:00007561 _text$mn        ends
.text$mn:00007561
.text$mn:00007564 ; ===========================================================================
.text$mn:00007564
.text$mn:00007564 ; Segment type: Pure code
.text$mn:00007564 ; Segment permissions: Read/Execute
.text$mn:00007564 _text$mn        segment para public 'CODE' use32
.text$mn:00007564                 assume cs:_text$mn
.text$mn:00007564                 ;org 7564h
.text$mn:00007564 ; COMDAT (pick any)
.text$mn:00007564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007564
.text$mn:00007564 ; =============== S U B R O U T I N E =======================================
.text$mn:00007564
.text$mn:00007564 ; Attributes: bp-based frame
.text$mn:00007564
.text$mn:00007564 ; public: virtual void * __thiscall TiXmlNodeA::`scalar deleting destructor'(unsigned int)
.text$mn:00007564                 public ??_GTiXmlNodeA@@UAEPAXI@Z
.text$mn:00007564 ??_GTiXmlNodeA@@UAEPAXI@Z proc near
.text$mn:00007564
.text$mn:00007564 var_4           = dword ptr -4
.text$mn:00007564 arg_0           = dword ptr  8
.text$mn:00007564
.text$mn:00007564                 push    ebp
.text$mn:00007565                 mov     ebp, esp
.text$mn:00007567                 push    ecx
.text$mn:00007568                 mov     [ebp+var_4], ecx
.text$mn:0000756B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000756E                 call    ??1TiXmlNodeA@@UAE@XZ ; TiXmlNodeA::~TiXmlNodeA(void)
.text$mn:00007573                 mov     eax, [ebp+arg_0]
.text$mn:00007576                 and     eax, 1
.text$mn:00007579                 jz      short loc_7587
.text$mn:0000757B                 mov     ecx, [ebp+var_4]
.text$mn:0000757E                 push    ecx             ; void *
.text$mn:0000757F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007584                 add     esp, 4
.text$mn:00007587
.text$mn:00007587 loc_7587:                               ; CODE XREF: TiXmlNodeA::`scalar deleting destructor'(uint)+15j
.text$mn:00007587                 mov     eax, [ebp+var_4]
.text$mn:0000758A                 mov     esp, ebp
.text$mn:0000758C                 pop     ebp
.text$mn:0000758D                 retn    4
.text$mn:0000758D ??_GTiXmlNodeA@@UAEPAXI@Z endp
.text$mn:0000758D
.text$mn:0000758D _text$mn        ends
.text$mn:0000758D
.text$mn:00007590 ; ===========================================================================
.text$mn:00007590
.text$mn:00007590 ; Segment type: Pure code
.text$mn:00007590 ; Segment permissions: Read/Execute
.text$mn:00007590 _text$mn        segment para public 'CODE' use32
.text$mn:00007590                 assume cs:_text$mn
.text$mn:00007590                 ;org 7590h
.text$mn:00007590 ; COMDAT (pick any)
.text$mn:00007590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007590
.text$mn:00007590 ; =============== S U B R O U T I N E =======================================
.text$mn:00007590
.text$mn:00007590 ; Attributes: bp-based frame
.text$mn:00007590
.text$mn:00007590 ; public: virtual void * __thiscall TiXmlTextA::`scalar deleting destructor'(unsigned int)
.text$mn:00007590                 public ??_GTiXmlTextA@@UAEPAXI@Z
.text$mn:00007590 ??_GTiXmlTextA@@UAEPAXI@Z proc near
.text$mn:00007590
.text$mn:00007590 var_4           = dword ptr -4
.text$mn:00007590 arg_0           = dword ptr  8
.text$mn:00007590
.text$mn:00007590                 push    ebp
.text$mn:00007591                 mov     ebp, esp
.text$mn:00007593                 push    ecx
.text$mn:00007594                 mov     [ebp+var_4], ecx
.text$mn:00007597                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000759A                 call    ??1TiXmlTextA@@UAE@XZ ; TiXmlTextA::~TiXmlTextA(void)
.text$mn:0000759F                 mov     eax, [ebp+arg_0]
.text$mn:000075A2                 and     eax, 1
.text$mn:000075A5                 jz      short loc_75B3
.text$mn:000075A7                 mov     ecx, [ebp+var_4]
.text$mn:000075AA                 push    ecx             ; void *
.text$mn:000075AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000075B0                 add     esp, 4
.text$mn:000075B3
.text$mn:000075B3 loc_75B3:                               ; CODE XREF: TiXmlTextA::`scalar deleting destructor'(uint)+15j
.text$mn:000075B3                 mov     eax, [ebp+var_4]
.text$mn:000075B6                 mov     esp, ebp
.text$mn:000075B8                 pop     ebp
.text$mn:000075B9                 retn    4
.text$mn:000075B9 ??_GTiXmlTextA@@UAEPAXI@Z endp
.text$mn:000075B9
.text$mn:000075B9 _text$mn        ends
.text$mn:000075B9
.text$mn:000075BC ; ===========================================================================
.text$mn:000075BC
.text$mn:000075BC ; Segment type: Pure code
.text$mn:000075BC ; Segment permissions: Read/Execute
.text$mn:000075BC _text$mn        segment para public 'CODE' use32
.text$mn:000075BC                 assume cs:_text$mn
.text$mn:000075BC                 ;org 75BCh
.text$mn:000075BC ; COMDAT (pick any)
.text$mn:000075BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075BC
.text$mn:000075BC ; =============== S U B R O U T I N E =======================================
.text$mn:000075BC
.text$mn:000075BC ; Attributes: bp-based frame
.text$mn:000075BC
.text$mn:000075BC ; public: virtual void * __thiscall TiXmlUnknownA::`scalar deleting destructor'(unsigned int)
.text$mn:000075BC                 public ??_GTiXmlUnknownA@@UAEPAXI@Z
.text$mn:000075BC ??_GTiXmlUnknownA@@UAEPAXI@Z proc near
.text$mn:000075BC
.text$mn:000075BC var_4           = dword ptr -4
.text$mn:000075BC arg_0           = dword ptr  8
.text$mn:000075BC
.text$mn:000075BC                 push    ebp
.text$mn:000075BD                 mov     ebp, esp
.text$mn:000075BF                 push    ecx
.text$mn:000075C0                 mov     [ebp+var_4], ecx
.text$mn:000075C3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000075C6                 call    ??1TiXmlUnknownA@@UAE@XZ ; TiXmlUnknownA::~TiXmlUnknownA(void)
.text$mn:000075CB                 mov     eax, [ebp+arg_0]
.text$mn:000075CE                 and     eax, 1
.text$mn:000075D1                 jz      short loc_75DF
.text$mn:000075D3                 mov     ecx, [ebp+var_4]
.text$mn:000075D6                 push    ecx             ; void *
.text$mn:000075D7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000075DC                 add     esp, 4
.text$mn:000075DF
.text$mn:000075DF loc_75DF:                               ; CODE XREF: TiXmlUnknownA::`scalar deleting destructor'(uint)+15j
.text$mn:000075DF                 mov     eax, [ebp+var_4]
.text$mn:000075E2                 mov     esp, ebp
.text$mn:000075E4                 pop     ebp
.text$mn:000075E5                 retn    4
.text$mn:000075E5 ??_GTiXmlUnknownA@@UAEPAXI@Z endp
.text$mn:000075E5
.text$mn:000075E5 _text$mn        ends
.text$mn:000075E5
.text$mn:000075E8 ; ===========================================================================
.text$mn:000075E8
.text$mn:000075E8 ; Segment type: Pure code
.text$mn:000075E8 ; Segment permissions: Read/Execute
.text$mn:000075E8 _text$mn        segment para public 'CODE' use32
.text$mn:000075E8                 assume cs:_text$mn
.text$mn:000075E8                 ;org 75E8h
.text$mn:000075E8 ; COMDAT (pick any)
.text$mn:000075E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075E8
.text$mn:000075E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000075E8
.text$mn:000075E8 ; Attributes: bp-based frame
.text$mn:000075E8
.text$mn:000075E8 ; public: virtual void * __thiscall std::_Facet_base::`scalar deleting destructor'(unsigned int)
.text$mn:000075E8                 public ??_G_Facet_base@std@@UAEPAXI@Z
.text$mn:000075E8 ??_G_Facet_base@std@@UAEPAXI@Z proc near
.text$mn:000075E8
.text$mn:000075E8 var_4           = dword ptr -4
.text$mn:000075E8 arg_0           = dword ptr  8
.text$mn:000075E8
.text$mn:000075E8                 push    ebp
.text$mn:000075E9                 mov     ebp, esp
.text$mn:000075EB                 push    ecx
.text$mn:000075EC                 mov     [ebp+var_4], ecx
.text$mn:000075EF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000075F2                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:000075F7                 mov     eax, [ebp+arg_0]
.text$mn:000075FA                 and     eax, 1
.text$mn:000075FD                 jz      short loc_760B
.text$mn:000075FF                 mov     ecx, [ebp+var_4]
.text$mn:00007602                 push    ecx             ; void *
.text$mn:00007603                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007608                 add     esp, 4
.text$mn:0000760B
.text$mn:0000760B loc_760B:                               ; CODE XREF: std::_Facet_base::`scalar deleting destructor'(uint)+15j
.text$mn:0000760B                 mov     eax, [ebp+var_4]
.text$mn:0000760E                 mov     esp, ebp
.text$mn:00007610                 pop     ebp
.text$mn:00007611                 retn    4
.text$mn:00007611 ??_G_Facet_base@std@@UAEPAXI@Z endp
.text$mn:00007611
.text$mn:00007611 _text$mn        ends
.text$mn:00007611
.text$mn:00007614 ; ===========================================================================
.text$mn:00007614
.text$mn:00007614 ; Segment type: Pure code
.text$mn:00007614 ; Segment permissions: Read/Execute
.text$mn:00007614 _text$mn        segment para public 'CODE' use32
.text$mn:00007614                 assume cs:_text$mn
.text$mn:00007614                 ;org 7614h
.text$mn:00007614 ; COMDAT (pick any)
.text$mn:00007614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007614
.text$mn:00007614 ; =============== S U B R O U T I N E =======================================
.text$mn:00007614
.text$mn:00007614 ; Attributes: bp-based frame
.text$mn:00007614
.text$mn:00007614 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007614                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00007614 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007614
.text$mn:00007614 var_4           = dword ptr -4
.text$mn:00007614 arg_0           = dword ptr  8
.text$mn:00007614
.text$mn:00007614                 push    ebp
.text$mn:00007615                 mov     ebp, esp
.text$mn:00007617                 push    ecx
.text$mn:00007618                 mov     [ebp+var_4], ecx
.text$mn:0000761B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000761E                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007623                 mov     eax, [ebp+arg_0]
.text$mn:00007626                 and     eax, 1
.text$mn:00007629                 jz      short loc_7637
.text$mn:0000762B                 mov     ecx, [ebp+var_4]
.text$mn:0000762E                 push    ecx             ; void *
.text$mn:0000762F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007634                 add     esp, 4
.text$mn:00007637
.text$mn:00007637 loc_7637:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007637                 mov     eax, [ebp+var_4]
.text$mn:0000763A                 mov     esp, ebp
.text$mn:0000763C                 pop     ebp
.text$mn:0000763D                 retn    4
.text$mn:0000763D ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:0000763D
.text$mn:0000763D _text$mn        ends
.text$mn:0000763D
.text$mn:00007640 ; ===========================================================================
.text$mn:00007640
.text$mn:00007640 ; Segment type: Pure code
.text$mn:00007640 ; Segment permissions: Read/Execute
.text$mn:00007640 _text$mn        segment para public 'CODE' use32
.text$mn:00007640                 assume cs:_text$mn
.text$mn:00007640                 ;org 7640h
.text$mn:00007640 ; COMDAT (pick any)
.text$mn:00007640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007640
.text$mn:00007640 ; =============== S U B R O U T I N E =======================================
.text$mn:00007640
.text$mn:00007640 ; Attributes: bp-based frame
.text$mn:00007640
.text$mn:00007640 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007640                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00007640 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007640
.text$mn:00007640 var_4           = dword ptr -4
.text$mn:00007640 arg_0           = dword ptr  8
.text$mn:00007640
.text$mn:00007640                 push    ebp
.text$mn:00007641                 mov     ebp, esp
.text$mn:00007643                 push    ecx
.text$mn:00007644                 mov     [ebp+var_4], ecx
.text$mn:00007647                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000764A                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:0000764F                 mov     eax, [ebp+arg_0]
.text$mn:00007652                 and     eax, 1
.text$mn:00007655                 jz      short loc_7663
.text$mn:00007657                 mov     ecx, [ebp+var_4]
.text$mn:0000765A                 push    ecx             ; void *
.text$mn:0000765B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007660                 add     esp, 4
.text$mn:00007663
.text$mn:00007663 loc_7663:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007663                 mov     eax, [ebp+var_4]
.text$mn:00007666                 mov     esp, ebp
.text$mn:00007668                 pop     ebp
.text$mn:00007669                 retn    4
.text$mn:00007669 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00007669
.text$mn:00007669 _text$mn        ends
.text$mn:00007669
.text$mn:0000766C ; ===========================================================================
.text$mn:0000766C
.text$mn:0000766C ; Segment type: Pure code
.text$mn:0000766C ; Segment permissions: Read/Execute
.text$mn:0000766C _text$mn        segment para public 'CODE' use32
.text$mn:0000766C                 assume cs:_text$mn
.text$mn:0000766C                 ;org 766Ch
.text$mn:0000766C ; COMDAT (pick any)
.text$mn:0000766C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000766C
.text$mn:0000766C ; =============== S U B R O U T I N E =======================================
.text$mn:0000766C
.text$mn:0000766C ; Attributes: bp-based frame
.text$mn:0000766C
.text$mn:0000766C ; public: virtual void * __thiscall std::_System_error::`scalar deleting destructor'(unsigned int)
.text$mn:0000766C                 public ??_G_System_error@std@@UAEPAXI@Z
.text$mn:0000766C ??_G_System_error@std@@UAEPAXI@Z proc near
.text$mn:0000766C
.text$mn:0000766C var_4           = dword ptr -4
.text$mn:0000766C arg_0           = dword ptr  8
.text$mn:0000766C
.text$mn:0000766C                 push    ebp
.text$mn:0000766D                 mov     ebp, esp
.text$mn:0000766F                 push    ecx
.text$mn:00007670                 mov     [ebp+var_4], ecx
.text$mn:00007673                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007676                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:0000767B                 mov     eax, [ebp+arg_0]
.text$mn:0000767E                 and     eax, 1
.text$mn:00007681                 jz      short loc_768F
.text$mn:00007683                 mov     ecx, [ebp+var_4]
.text$mn:00007686                 push    ecx             ; void *
.text$mn:00007687                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000768C                 add     esp, 4
.text$mn:0000768F
.text$mn:0000768F loc_768F:                               ; CODE XREF: std::_System_error::`scalar deleting destructor'(uint)+15j
.text$mn:0000768F                 mov     eax, [ebp+var_4]
.text$mn:00007692                 mov     esp, ebp
.text$mn:00007694                 pop     ebp
.text$mn:00007695                 retn    4
.text$mn:00007695 ??_G_System_error@std@@UAEPAXI@Z endp
.text$mn:00007695
.text$mn:00007695 _text$mn        ends
.text$mn:00007695
.text$mn:00007698 ; ===========================================================================
.text$mn:00007698
.text$mn:00007698 ; Segment type: Pure code
.text$mn:00007698 ; Segment permissions: Read/Execute
.text$mn:00007698 _text$mn        segment para public 'CODE' use32
.text$mn:00007698                 assume cs:_text$mn
.text$mn:00007698                 ;org 7698h
.text$mn:00007698 ; COMDAT (pick any)
.text$mn:00007698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007698
.text$mn:00007698 ; =============== S U B R O U T I N E =======================================
.text$mn:00007698
.text$mn:00007698 ; Attributes: bp-based frame
.text$mn:00007698
.text$mn:00007698 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007698                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00007698 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007698
.text$mn:00007698 var_4           = dword ptr -4
.text$mn:00007698 arg_0           = dword ptr  8
.text$mn:00007698
.text$mn:00007698                 push    ebp
.text$mn:00007699                 mov     ebp, esp
.text$mn:0000769B                 push    ecx
.text$mn:0000769C                 mov     [ebp+var_4], ecx
.text$mn:0000769F                 mov     ecx, [ebp+var_4] ; this
.text$mn:000076A2                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:000076A7                 mov     eax, [ebp+arg_0]
.text$mn:000076AA                 and     eax, 1
.text$mn:000076AD                 jz      short loc_76BB
.text$mn:000076AF                 mov     ecx, [ebp+var_4]
.text$mn:000076B2                 push    ecx             ; void *
.text$mn:000076B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000076B8                 add     esp, 4
.text$mn:000076BB
.text$mn:000076BB loc_76BB:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000076BB                 mov     eax, [ebp+var_4]
.text$mn:000076BE                 mov     esp, ebp
.text$mn:000076C0                 pop     ebp
.text$mn:000076C1                 retn    4
.text$mn:000076C1 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:000076C1
.text$mn:000076C1 _text$mn        ends
.text$mn:000076C1
.text$mn:000076C4 ; ===========================================================================
.text$mn:000076C4
.text$mn:000076C4 ; Segment type: Pure code
.text$mn:000076C4 ; Segment permissions: Read/Execute
.text$mn:000076C4 _text$mn        segment para public 'CODE' use32
.text$mn:000076C4                 assume cs:_text$mn
.text$mn:000076C4                 ;org 76C4h
.text$mn:000076C4 ; COMDAT (pick any)
.text$mn:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076C4
.text$mn:000076C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000076C4
.text$mn:000076C4 ; Attributes: bp-based frame
.text$mn:000076C4
.text$mn:000076C4 ; public: virtual void * __thiscall std::ctype_base::`scalar deleting destructor'(unsigned int)
.text$mn:000076C4                 public ??_Gctype_base@std@@UAEPAXI@Z
.text$mn:000076C4 ??_Gctype_base@std@@UAEPAXI@Z proc near
.text$mn:000076C4
.text$mn:000076C4 Memory          = dword ptr -4
.text$mn:000076C4 arg_0           = dword ptr  8
.text$mn:000076C4
.text$mn:000076C4                 push    ebp
.text$mn:000076C5                 mov     ebp, esp
.text$mn:000076C7                 push    ecx
.text$mn:000076C8                 mov     [ebp+Memory], ecx
.text$mn:000076CB                 mov     ecx, [ebp+Memory] ; this
.text$mn:000076CE                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:000076D3                 mov     eax, [ebp+arg_0]
.text$mn:000076D6                 and     eax, 1
.text$mn:000076D9                 jz      short loc_76E7
.text$mn:000076DB                 mov     ecx, [ebp+Memory]
.text$mn:000076DE                 push    ecx             ; Memory
.text$mn:000076DF                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:000076E4                 add     esp, 4
.text$mn:000076E7
.text$mn:000076E7 loc_76E7:                               ; CODE XREF: std::ctype_base::`scalar deleting destructor'(uint)+15j
.text$mn:000076E7                 mov     eax, [ebp+Memory]
.text$mn:000076EA                 mov     esp, ebp
.text$mn:000076EC                 pop     ebp
.text$mn:000076ED                 retn    4
.text$mn:000076ED ??_Gctype_base@std@@UAEPAXI@Z endp
.text$mn:000076ED
.text$mn:000076ED _text$mn        ends
.text$mn:000076ED
.text$mn:000076F0 ; ===========================================================================
.text$mn:000076F0
.text$mn:000076F0 ; Segment type: Pure code
.text$mn:000076F0 ; Segment permissions: Read/Execute
.text$mn:000076F0 _text$mn        segment para public 'CODE' use32
.text$mn:000076F0                 assume cs:_text$mn
.text$mn:000076F0                 ;org 76F0h
.text$mn:000076F0 ; COMDAT (pick any)
.text$mn:000076F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076F0
.text$mn:000076F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000076F0
.text$mn:000076F0 ; Attributes: bp-based frame
.text$mn:000076F0
.text$mn:000076F0 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000076F0                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:000076F0 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:000076F0
.text$mn:000076F0 var_4           = dword ptr -4
.text$mn:000076F0 arg_0           = dword ptr  8
.text$mn:000076F0
.text$mn:000076F0                 push    ebp
.text$mn:000076F1                 mov     ebp, esp
.text$mn:000076F3                 push    ecx
.text$mn:000076F4                 mov     [ebp+var_4], ecx
.text$mn:000076F7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000076FA                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000076FF                 mov     eax, [ebp+arg_0]
.text$mn:00007702                 and     eax, 1
.text$mn:00007705                 jz      short loc_7713
.text$mn:00007707                 mov     ecx, [ebp+var_4]
.text$mn:0000770A                 push    ecx             ; void *
.text$mn:0000770B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007710                 add     esp, 4
.text$mn:00007713
.text$mn:00007713 loc_7713:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007713                 mov     eax, [ebp+var_4]
.text$mn:00007716                 mov     esp, ebp
.text$mn:00007718                 pop     ebp
.text$mn:00007719                 retn    4
.text$mn:00007719 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00007719
.text$mn:00007719 _text$mn        ends
.text$mn:00007719
.text$mn:0000771C ; ===========================================================================
.text$mn:0000771C
.text$mn:0000771C ; Segment type: Pure code
.text$mn:0000771C ; Segment permissions: Read/Execute
.text$mn:0000771C _text$mn        segment para public 'CODE' use32
.text$mn:0000771C                 assume cs:_text$mn
.text$mn:0000771C                 ;org 771Ch
.text$mn:0000771C ; COMDAT (pick any)
.text$mn:0000771C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000771C
.text$mn:0000771C ; =============== S U B R O U T I N E =======================================
.text$mn:0000771C
.text$mn:0000771C ; Attributes: bp-based frame
.text$mn:0000771C
.text$mn:0000771C ; protected: virtual void * __thiscall std::locale::facet::`scalar deleting destructor'(unsigned int)
.text$mn:0000771C                 public ??_Gfacet@locale@std@@MAEPAXI@Z
.text$mn:0000771C ??_Gfacet@locale@std@@MAEPAXI@Z proc near
.text$mn:0000771C
.text$mn:0000771C var_4           = dword ptr -4
.text$mn:0000771C arg_0           = dword ptr  8
.text$mn:0000771C
.text$mn:0000771C                 push    ebp
.text$mn:0000771D                 mov     ebp, esp
.text$mn:0000771F                 push    ecx
.text$mn:00007720                 mov     [ebp+var_4], ecx
.text$mn:00007723                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007726                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:0000772B                 mov     eax, [ebp+arg_0]
.text$mn:0000772E                 and     eax, 1
.text$mn:00007731                 jz      short loc_773F
.text$mn:00007733                 mov     ecx, [ebp+var_4]
.text$mn:00007736                 push    ecx             ; Memory
.text$mn:00007737                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:0000773C                 add     esp, 4
.text$mn:0000773F
.text$mn:0000773F loc_773F:                               ; CODE XREF: std::locale::facet::`scalar deleting destructor'(uint)+15j
.text$mn:0000773F                 mov     eax, [ebp+var_4]
.text$mn:00007742                 mov     esp, ebp
.text$mn:00007744                 pop     ebp
.text$mn:00007745                 retn    4
.text$mn:00007745 ??_Gfacet@locale@std@@MAEPAXI@Z endp
.text$mn:00007745
.text$mn:00007745 _text$mn        ends
.text$mn:00007745
.text$mn:00007748 ; ===========================================================================
.text$mn:00007748
.text$mn:00007748 ; Segment type: Pure code
.text$mn:00007748 ; Segment permissions: Read/Execute
.text$mn:00007748 _text$mn        segment para public 'CODE' use32
.text$mn:00007748                 assume cs:_text$mn
.text$mn:00007748                 ;org 7748h
.text$mn:00007748 ; COMDAT (pick any)
.text$mn:00007748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007748
.text$mn:00007748 ; =============== S U B R O U T I N E =======================================
.text$mn:00007748
.text$mn:00007748 ; Attributes: bp-based frame
.text$mn:00007748
.text$mn:00007748 ; public: virtual void * __thiscall std::ios_base::failure::`scalar deleting destructor'(unsigned int)
.text$mn:00007748                 public ??_Gfailure@ios_base@std@@UAEPAXI@Z
.text$mn:00007748 ??_Gfailure@ios_base@std@@UAEPAXI@Z proc near
.text$mn:00007748
.text$mn:00007748 var_4           = dword ptr -4
.text$mn:00007748 arg_0           = dword ptr  8
.text$mn:00007748
.text$mn:00007748                 push    ebp
.text$mn:00007749                 mov     ebp, esp
.text$mn:0000774B                 push    ecx
.text$mn:0000774C                 mov     [ebp+var_4], ecx
.text$mn:0000774F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007752                 call    ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.text$mn:00007757                 mov     eax, [ebp+arg_0]
.text$mn:0000775A                 and     eax, 1
.text$mn:0000775D                 jz      short loc_776B
.text$mn:0000775F                 mov     ecx, [ebp+var_4]
.text$mn:00007762                 push    ecx             ; void *
.text$mn:00007763                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007768                 add     esp, 4
.text$mn:0000776B
.text$mn:0000776B loc_776B:                               ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+15j
.text$mn:0000776B                 mov     eax, [ebp+var_4]
.text$mn:0000776E                 mov     esp, ebp
.text$mn:00007770                 pop     ebp
.text$mn:00007771                 retn    4
.text$mn:00007771 ??_Gfailure@ios_base@std@@UAEPAXI@Z endp
.text$mn:00007771
.text$mn:00007771 _text$mn        ends
.text$mn:00007771
.text$mn:00007774 ; ===========================================================================
.text$mn:00007774
.text$mn:00007774 ; Segment type: Pure code
.text$mn:00007774 ; Segment permissions: Read/Execute
.text$mn:00007774 _text$mn        segment para public 'CODE' use32
.text$mn:00007774                 assume cs:_text$mn
.text$mn:00007774                 ;org 7774h
.text$mn:00007774 ; COMDAT (pick any)
.text$mn:00007774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007774
.text$mn:00007774 ; =============== S U B R O U T I N E =======================================
.text$mn:00007774
.text$mn:00007774 ; Attributes: bp-based frame
.text$mn:00007774
.text$mn:00007774 ; public: virtual void * __thiscall std::ios_base::`scalar deleting destructor'(unsigned int)
.text$mn:00007774                 public ??_Gios_base@std@@UAEPAXI@Z
.text$mn:00007774 ??_Gios_base@std@@UAEPAXI@Z proc near
.text$mn:00007774
.text$mn:00007774 var_4           = dword ptr -4
.text$mn:00007774 arg_0           = dword ptr  8
.text$mn:00007774
.text$mn:00007774                 push    ebp
.text$mn:00007775                 mov     ebp, esp
.text$mn:00007777                 push    ecx
.text$mn:00007778                 mov     [ebp+var_4], ecx
.text$mn:0000777B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000777E                 call    ??1ios_base@std@@UAE@XZ ; std::ios_base::~ios_base(void)
.text$mn:00007783                 mov     eax, [ebp+arg_0]
.text$mn:00007786                 and     eax, 1
.text$mn:00007789                 jz      short loc_7797
.text$mn:0000778B                 mov     ecx, [ebp+var_4]
.text$mn:0000778E                 push    ecx             ; void *
.text$mn:0000778F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007794                 add     esp, 4
.text$mn:00007797
.text$mn:00007797 loc_7797:                               ; CODE XREF: std::ios_base::`scalar deleting destructor'(uint)+15j
.text$mn:00007797                 mov     eax, [ebp+var_4]
.text$mn:0000779A                 mov     esp, ebp
.text$mn:0000779C                 pop     ebp
.text$mn:0000779D                 retn    4
.text$mn:0000779D ??_Gios_base@std@@UAEPAXI@Z endp
.text$mn:0000779D
.text$mn:0000779D _text$mn        ends
.text$mn:0000779D
.text$mn:000077A0 ; ===========================================================================
.text$mn:000077A0
.text$mn:000077A0 ; Segment type: Pure code
.text$mn:000077A0 ; Segment permissions: Read/Execute
.text$mn:000077A0 _text$mn        segment para public 'CODE' use32
.text$mn:000077A0                 assume cs:_text$mn
.text$mn:000077A0                 ;org 77A0h
.text$mn:000077A0 ; COMDAT (pick any)
.text$mn:000077A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077A0
.text$mn:000077A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000077A0
.text$mn:000077A0 ; Attributes: bp-based frame
.text$mn:000077A0
.text$mn:000077A0 ; public: void * __thiscall std::locale::`scalar deleting destructor'(unsigned int)
.text$mn:000077A0                 public ??_Glocale@std@@QAEPAXI@Z
.text$mn:000077A0 ??_Glocale@std@@QAEPAXI@Z proc near     ; CODE XREF: std::_DebugHeapDelete<std::locale>(std::locale *)+Ep
.text$mn:000077A0
.text$mn:000077A0 var_4           = dword ptr -4
.text$mn:000077A0 arg_0           = dword ptr  8
.text$mn:000077A0
.text$mn:000077A0                 push    ebp
.text$mn:000077A1                 mov     ebp, esp
.text$mn:000077A3                 push    ecx
.text$mn:000077A4                 mov     [ebp+var_4], ecx
.text$mn:000077A7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000077AA                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:000077AF                 mov     eax, [ebp+arg_0]
.text$mn:000077B2                 and     eax, 1
.text$mn:000077B5                 jz      short loc_77C3
.text$mn:000077B7                 mov     ecx, [ebp+var_4]
.text$mn:000077BA                 push    ecx             ; void *
.text$mn:000077BB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000077C0                 add     esp, 4
.text$mn:000077C3
.text$mn:000077C3 loc_77C3:                               ; CODE XREF: std::locale::`scalar deleting destructor'(uint)+15j
.text$mn:000077C3                 mov     eax, [ebp+var_4]
.text$mn:000077C6                 mov     esp, ebp
.text$mn:000077C8                 pop     ebp
.text$mn:000077C9                 retn    4
.text$mn:000077C9 ??_Glocale@std@@QAEPAXI@Z endp
.text$mn:000077C9
.text$mn:000077C9 _text$mn        ends
.text$mn:000077C9
.text$mn:000077CC ; ===========================================================================
.text$mn:000077CC
.text$mn:000077CC ; Segment type: Pure code
.text$mn:000077CC ; Segment permissions: Read/Execute
.text$mn:000077CC _text$mn        segment para public 'CODE' use32
.text$mn:000077CC                 assume cs:_text$mn
.text$mn:000077CC                 ;org 77CCh
.text$mn:000077CC ; COMDAT (pick any)
.text$mn:000077CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077CC
.text$mn:000077CC ; =============== S U B R O U T I N E =======================================
.text$mn:000077CC
.text$mn:000077CC ; Attributes: bp-based frame
.text$mn:000077CC
.text$mn:000077CC ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:000077CC                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:000077CC ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:000077CC
.text$mn:000077CC var_4           = dword ptr -4
.text$mn:000077CC arg_0           = dword ptr  8
.text$mn:000077CC
.text$mn:000077CC                 push    ebp
.text$mn:000077CD                 mov     ebp, esp
.text$mn:000077CF                 push    ecx
.text$mn:000077D0                 mov     [ebp+var_4], ecx
.text$mn:000077D3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000077D6                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:000077DB                 mov     eax, [ebp+arg_0]
.text$mn:000077DE                 and     eax, 1
.text$mn:000077E1                 jz      short loc_77EF
.text$mn:000077E3                 mov     ecx, [ebp+var_4]
.text$mn:000077E6                 push    ecx             ; void *
.text$mn:000077E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000077EC                 add     esp, 4
.text$mn:000077EF
.text$mn:000077EF loc_77EF:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:000077EF                 mov     eax, [ebp+var_4]
.text$mn:000077F2                 mov     esp, ebp
.text$mn:000077F4                 pop     ebp
.text$mn:000077F5                 retn    4
.text$mn:000077F5 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:000077F5
.text$mn:000077F5 _text$mn        ends
.text$mn:000077F5
.text$mn:000077F8 ; ===========================================================================
.text$mn:000077F8
.text$mn:000077F8 ; Segment type: Pure code
.text$mn:000077F8 ; Segment permissions: Read/Execute
.text$mn:000077F8 _text$mn        segment para public 'CODE' use32
.text$mn:000077F8                 assume cs:_text$mn
.text$mn:000077F8                 ;org 77F8h
.text$mn:000077F8 ; COMDAT (pick any)
.text$mn:000077F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077F8
.text$mn:000077F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000077F8
.text$mn:000077F8 ; Attributes: bp-based frame
.text$mn:000077F8
.text$mn:000077F8 ; public: virtual void * __thiscall std::system_error::`scalar deleting destructor'(unsigned int)
.text$mn:000077F8                 public ??_Gsystem_error@std@@UAEPAXI@Z
.text$mn:000077F8 ??_Gsystem_error@std@@UAEPAXI@Z proc near
.text$mn:000077F8
.text$mn:000077F8 var_4           = dword ptr -4
.text$mn:000077F8 arg_0           = dword ptr  8
.text$mn:000077F8
.text$mn:000077F8                 push    ebp
.text$mn:000077F9                 mov     ebp, esp
.text$mn:000077FB                 push    ecx
.text$mn:000077FC                 mov     [ebp+var_4], ecx
.text$mn:000077FF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007802                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:00007807                 mov     eax, [ebp+arg_0]
.text$mn:0000780A                 and     eax, 1
.text$mn:0000780D                 jz      short loc_781B
.text$mn:0000780F                 mov     ecx, [ebp+var_4]
.text$mn:00007812                 push    ecx             ; void *
.text$mn:00007813                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007818                 add     esp, 4
.text$mn:0000781B
.text$mn:0000781B loc_781B:                               ; CODE XREF: std::system_error::`scalar deleting destructor'(uint)+15j
.text$mn:0000781B                 mov     eax, [ebp+var_4]
.text$mn:0000781E                 mov     esp, ebp
.text$mn:00007820                 pop     ebp
.text$mn:00007821                 retn    4
.text$mn:00007821 ??_Gsystem_error@std@@UAEPAXI@Z endp
.text$mn:00007821
.text$mn:00007821 _text$mn        ends
.text$mn:00007821
.text$di:00007824 ; ===========================================================================
.text$di:00007824
.text$di:00007824 ; Segment type: Pure code
.text$di:00007824 ; Segment permissions: Read/Execute
.text$di:00007824 _text$di        segment para public 'CODE' use32
.text$di:00007824                 assume cs:_text$di
.text$di:00007824                 ;org 7824h
.text$di:00007824 ; COMDAT (pick any)
.text$di:00007824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007824
.text$di:00007824 ; =============== S U B R O U T I N E =======================================
.text$di:00007824
.text$di:00007824 ; Attributes: bp-based frame
.text$di:00007824
.text$di:00007824 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00007824 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00007824                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00007824                 push    ebp
.text$di:00007825                 mov     ebp, esp
.text$di:00007827                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:0000782C                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00007831                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007836                 call    _atexit
.text$di:0000783B                 add     esp, 4
.text$di:0000783E                 pop     ebp
.text$di:0000783F                 retn
.text$di:0000783F ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:0000783F
.text$di:0000783F _text$di        ends
.text$di:0000783F
.text$di:00007840 ; ===========================================================================
.text$di:00007840
.text$di:00007840 ; Segment type: Pure code
.text$di:00007840 ; Segment permissions: Read/Execute
.text$di:00007840 _text$di        segment para public 'CODE' use32
.text$di:00007840                 assume cs:_text$di
.text$di:00007840                 ;org 7840h
.text$di:00007840 ; COMDAT (pick any)
.text$di:00007840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007840
.text$di:00007840 ; =============== S U B R O U T I N E =======================================
.text$di:00007840
.text$di:00007840 ; Attributes: bp-based frame
.text$di:00007840
.text$di:00007840 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00007840 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00007840                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00007840                 push    ebp
.text$di:00007841                 mov     ebp, esp
.text$di:00007843                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00007848                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:0000784D                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007852                 call    _atexit
.text$di:00007857                 add     esp, 4
.text$di:0000785A                 pop     ebp
.text$di:0000785B                 retn
.text$di:0000785B ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:0000785B
.text$di:0000785B _text$di        ends
.text$di:0000785B
.text$di:0000785C ; ===========================================================================
.text$di:0000785C
.text$di:0000785C ; Segment type: Pure code
.text$di:0000785C ; Segment permissions: Read/Execute
.text$di:0000785C _text$di        segment para public 'CODE' use32
.text$di:0000785C                 assume cs:_text$di
.text$di:0000785C                 ;org 785Ch
.text$di:0000785C ; COMDAT (pick any)
.text$di:0000785C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000785C
.text$di:0000785C ; =============== S U B R O U T I N E =======================================
.text$di:0000785C
.text$di:0000785C ; Attributes: bp-based frame
.text$di:0000785C
.text$di:0000785C ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:0000785C ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:0000785C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:0000785C                 push    ebp
.text$di:0000785D                 mov     ebp, esp
.text$di:0000785F                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00007864                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00007869                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000786E                 call    _atexit
.text$di:00007873                 add     esp, 4
.text$di:00007876                 pop     ebp
.text$di:00007877                 retn
.text$di:00007877 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00007877
.text$di:00007877 _text$di        ends
.text$di:00007877
.text$di:00007878 ; ===========================================================================
.text$di:00007878
.text$di:00007878 ; Segment type: Pure code
.text$di:00007878 ; Segment permissions: Read/Execute
.text$di:00007878 _text$di        segment para public 'CODE' use32
.text$di:00007878                 assume cs:_text$di
.text$di:00007878                 ;org 7878h
.text$di:00007878 ; COMDAT (pick any)
.text$di:00007878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007878
.text$di:00007878 ; =============== S U B R O U T I N E =======================================
.text$di:00007878
.text$di:00007878 ; Attributes: bp-based frame
.text$di:00007878
.text$di:00007878 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00007878 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007878                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00007878                 push    ebp
.text$di:00007879                 mov     ebp, esp
.text$di:0000787B                 push    0               ; unsigned int
.text$di:0000787D                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007882                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007887                 pop     ebp
.text$di:00007888                 retn
.text$di:00007888 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007888
.text$di:00007888 ; ---------------------------------------------------------------------------
.text$di:00007889                 align 4
.text$di:00007889 _text$di        ends
.text$di:00007889
.text$di:0000788C ; ===========================================================================
.text$di:0000788C
.text$di:0000788C ; Segment type: Pure code
.text$di:0000788C ; Segment permissions: Read/Execute
.text$di:0000788C _text$di        segment para public 'CODE' use32
.text$di:0000788C                 assume cs:_text$di
.text$di:0000788C                 ;org 788Ch
.text$di:0000788C ; COMDAT (pick any)
.text$di:0000788C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000788C
.text$di:0000788C ; =============== S U B R O U T I N E =======================================
.text$di:0000788C
.text$di:0000788C ; Attributes: bp-based frame
.text$di:0000788C
.text$di:0000788C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:0000788C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000788C                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:0000788C                 push    ebp
.text$di:0000788D                 mov     ebp, esp
.text$di:0000788F                 push    0               ; unsigned int
.text$di:00007891                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007896                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000789B                 pop     ebp
.text$di:0000789C                 retn
.text$di:0000789C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000789C
.text$di:0000789C ; ---------------------------------------------------------------------------
.text$di:0000789D                 align 10h
.text$di:0000789D _text$di        ends
.text$di:0000789D
.text$di:000078A0 ; ===========================================================================
.text$di:000078A0
.text$di:000078A0 ; Segment type: Pure code
.text$di:000078A0 ; Segment permissions: Read/Execute
.text$di:000078A0 _text$di        segment para public 'CODE' use32
.text$di:000078A0                 assume cs:_text$di
.text$di:000078A0                 ;org 78A0h
.text$di:000078A0 ; COMDAT (pick any)
.text$di:000078A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000078A0
.text$di:000078A0 ; =============== S U B R O U T I N E =======================================
.text$di:000078A0
.text$di:000078A0 ; Attributes: bp-based frame
.text$di:000078A0
.text$di:000078A0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:000078A0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000078A0                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:000078A0                 push    ebp
.text$di:000078A1                 mov     ebp, esp
.text$di:000078A3                 push    0               ; unsigned int
.text$di:000078A5                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:000078AA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000078AF                 pop     ebp
.text$di:000078B0                 retn
.text$di:000078B0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000078B0
.text$di:000078B0 ; ---------------------------------------------------------------------------
.text$di:000078B1                 align 4
.text$di:000078B1 _text$di        ends
.text$di:000078B1
.text$di:000078B4 ; ===========================================================================
.text$di:000078B4
.text$di:000078B4 ; Segment type: Pure code
.text$di:000078B4 ; Segment permissions: Read/Execute
.text$di:000078B4 _text$di        segment para public 'CODE' use32
.text$di:000078B4                 assume cs:_text$di
.text$di:000078B4                 ;org 78B4h
.text$di:000078B4 ; COMDAT (pick any)
.text$di:000078B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000078B4
.text$di:000078B4 ; =============== S U B R O U T I N E =======================================
.text$di:000078B4
.text$di:000078B4 ; Attributes: bp-based frame
.text$di:000078B4
.text$di:000078B4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:000078B4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000078B4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:000078B4                 push    ebp
.text$di:000078B5                 mov     ebp, esp
.text$di:000078B7                 push    0               ; unsigned int
.text$di:000078B9                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:000078BE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000078C3                 pop     ebp
.text$di:000078C4                 retn
.text$di:000078C4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000078C4
.text$di:000078C4 ; ---------------------------------------------------------------------------
.text$di:000078C5                 align 4
.text$di:000078C5 _text$di        ends
.text$di:000078C5
.text$di:000078C8 ; ===========================================================================
.text$di:000078C8
.text$di:000078C8 ; Segment type: Pure code
.text$di:000078C8 ; Segment permissions: Read/Execute
.text$di:000078C8 _text$di        segment para public 'CODE' use32
.text$di:000078C8                 assume cs:_text$di
.text$di:000078C8                 ;org 78C8h
.text$di:000078C8 ; COMDAT (pick any)
.text$di:000078C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000078C8
.text$di:000078C8 ; =============== S U B R O U T I N E =======================================
.text$di:000078C8
.text$di:000078C8 ; Attributes: bp-based frame
.text$di:000078C8
.text$di:000078C8 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:000078C8 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:000078C8
.text$di:000078C8 var_1           = byte ptr -1
.text$di:000078C8
.text$di:000078C8                 push    ebp
.text$di:000078C9                 mov     ebp, esp
.text$di:000078CB                 push    ecx
.text$di:000078CC                 xor     eax, eax
.text$di:000078CE                 mov     [ebp+var_1], al
.text$di:000078D1                 mov     esp, ebp
.text$di:000078D3                 pop     ebp
.text$di:000078D4                 retn
.text$di:000078D4 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:000078D4
.text$di:000078D4 ; ---------------------------------------------------------------------------
.text$di:000078D5                 align 4
.text$di:000078D5 _text$di        ends
.text$di:000078D5
.text$di:000078D8 ; ===========================================================================
.text$di:000078D8
.text$di:000078D8 ; Segment type: Pure code
.text$di:000078D8 ; Segment permissions: Read/Execute
.text$di:000078D8 _text$di        segment para public 'CODE' use32
.text$di:000078D8                 assume cs:_text$di
.text$di:000078D8                 ;org 78D8h
.text$di:000078D8 ; COMDAT (pick any)
.text$di:000078D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000078D8
.text$di:000078D8 ; =============== S U B R O U T I N E =======================================
.text$di:000078D8
.text$di:000078D8 ; Attributes: bp-based frame
.text$di:000078D8
.text$di:000078D8 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:000078D8 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:000078D8                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:000078D8
.text$di:000078D8 var_1           = byte ptr -1
.text$di:000078D8
.text$di:000078D8                 push    ebp
.text$di:000078D9                 mov     ebp, esp
.text$di:000078DB                 push    ecx
.text$di:000078DC                 xor     eax, eax
.text$di:000078DE                 mov     [ebp+var_1], al
.text$di:000078E1                 mov     esp, ebp
.text$di:000078E3                 pop     ebp
.text$di:000078E4                 retn
.text$di:000078E4 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:000078E4
.text$di:000078E4 ; ---------------------------------------------------------------------------
.text$di:000078E5                 align 4
.text$di:000078E5 _text$di        ends
.text$di:000078E5
.text$yd:000078E8 ; ===========================================================================
.text$yd:000078E8
.text$yd:000078E8 ; Segment type: Pure code
.text$yd:000078E8 ; Segment permissions: Read/Execute
.text$yd:000078E8 _text$yd        segment para public 'CODE' use32
.text$yd:000078E8                 assume cs:_text$yd
.text$yd:000078E8                 ;org 78E8h
.text$yd:000078E8 ; COMDAT (pick any)
.text$yd:000078E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000078E8
.text$yd:000078E8 ; =============== S U B R O U T I N E =======================================
.text$yd:000078E8
.text$yd:000078E8 ; Attributes: bp-based frame
.text$yd:000078E8
.text$yd:000078E8 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:000078E8 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:000078E8                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:000078E8                 push    ebp
.text$yd:000078E9                 mov     ebp, esp
.text$yd:000078EB                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:000078F0                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:000078F5                 pop     ebp
.text$yd:000078F6                 retn
.text$yd:000078F6 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:000078F6
.text$yd:000078F6 ; ---------------------------------------------------------------------------
.text$yd:000078F7                 align 4
.text$yd:000078F7 _text$yd        ends
.text$yd:000078F7
.text$yd:000078F8 ; ===========================================================================
.text$yd:000078F8
.text$yd:000078F8 ; Segment type: Pure code
.text$yd:000078F8 ; Segment permissions: Read/Execute
.text$yd:000078F8 _text$yd        segment para public 'CODE' use32
.text$yd:000078F8                 assume cs:_text$yd
.text$yd:000078F8                 ;org 78F8h
.text$yd:000078F8 ; COMDAT (pick any)
.text$yd:000078F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000078F8
.text$yd:000078F8 ; =============== S U B R O U T I N E =======================================
.text$yd:000078F8
.text$yd:000078F8 ; Attributes: bp-based frame
.text$yd:000078F8
.text$yd:000078F8 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:000078F8 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:000078F8                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:000078F8                 push    ebp
.text$yd:000078F9                 mov     ebp, esp
.text$yd:000078FB                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00007900                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00007905                 pop     ebp
.text$yd:00007906                 retn
.text$yd:00007906 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00007906
.text$yd:00007906 ; ---------------------------------------------------------------------------
.text$yd:00007907                 align 4
.text$yd:00007907 _text$yd        ends
.text$yd:00007907
.text$yd:00007908 ; ===========================================================================
.text$yd:00007908
.text$yd:00007908 ; Segment type: Pure code
.text$yd:00007908 ; Segment permissions: Read/Execute
.text$yd:00007908 _text$yd        segment para public 'CODE' use32
.text$yd:00007908                 assume cs:_text$yd
.text$yd:00007908                 ;org 7908h
.text$yd:00007908 ; COMDAT (pick any)
.text$yd:00007908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00007908
.text$yd:00007908 ; =============== S U B R O U T I N E =======================================
.text$yd:00007908
.text$yd:00007908 ; Attributes: bp-based frame
.text$yd:00007908
.text$yd:00007908 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00007908 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00007908                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00007908                 push    ebp
.text$yd:00007909                 mov     ebp, esp
.text$yd:0000790B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00007910                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00007915                 pop     ebp
.text$yd:00007916                 retn
.text$yd:00007916 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00007916
.text$yd:00007916 ; ---------------------------------------------------------------------------
.text$yd:00007917                 align 4
.text$yd:00007917 _text$yd        ends
.text$yd:00007917
.text$mn:00007918 ; ===========================================================================
.text$mn:00007918
.text$mn:00007918 ; Segment type: Pure code
.text$mn:00007918 ; Segment permissions: Read/Execute
.text$mn:00007918 _text$mn        segment para public 'CODE' use32
.text$mn:00007918                 assume cs:_text$mn
.text$mn:00007918                 ;org 7918h
.text$mn:00007918 ; COMDAT (pick any)
.text$mn:00007918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007918
.text$mn:00007918 ; =============== S U B R O U T I N E =======================================
.text$mn:00007918
.text$mn:00007918 ; Attributes: bp-based frame
.text$mn:00007918
.text$mn:00007918 ; void __thiscall TiXmlCursorA::Clear(TiXmlCursorA *__hidden this)
.text$mn:00007918                 public ?Clear@TiXmlCursorA@@QAEXXZ
.text$mn:00007918 ?Clear@TiXmlCursorA@@QAEXXZ proc near   ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+45p
.text$mn:00007918                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+45p ...
.text$mn:00007918
.text$mn:00007918 var_4           = dword ptr -4
.text$mn:00007918
.text$mn:00007918                 push    ebp
.text$mn:00007919                 mov     ebp, esp
.text$mn:0000791B                 push    ecx
.text$mn:0000791C                 mov     [ebp+var_4], ecx
.text$mn:0000791F                 mov     eax, [ebp+var_4]
.text$mn:00007922                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:00007929                 mov     ecx, [ebp+var_4]
.text$mn:0000792C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:00007932                 mov     esp, ebp
.text$mn:00007934                 pop     ebp
.text$mn:00007935                 retn
.text$mn:00007935 ?Clear@TiXmlCursorA@@QAEXXZ endp
.text$mn:00007935
.text$mn:00007935 ; ---------------------------------------------------------------------------
.text$mn:00007936                 align 4
.text$mn:00007936 _text$mn        ends
.text$mn:00007936
.text$mn:00007938 ; ===========================================================================
.text$mn:00007938
.text$mn:00007938 ; Segment type: Pure code
.text$mn:00007938 ; Segment permissions: Read/Execute
.text$mn:00007938 _text$mn        segment para public 'CODE' use32
.text$mn:00007938                 assume cs:_text$mn
.text$mn:00007938                 ;org 7938h
.text$mn:00007938 ; COMDAT (pick any)
.text$mn:00007938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007938
.text$mn:00007938 ; =============== S U B R O U T I N E =======================================
.text$mn:00007938
.text$mn:00007938 ; Attributes: bp-based frame
.text$mn:00007938
.text$mn:00007938 ; void __thiscall TiXmlDocumentA::ClearError(TiXmlDocumentA *__hidden this)
.text$mn:00007938                 public ?ClearError@TiXmlDocumentA@@QAEXXZ
.text$mn:00007938 ?ClearError@TiXmlDocumentA@@QAEXXZ proc near
.text$mn:00007938                                         ; CODE XREF: TiXmlDocumentA::TiXmlDocumentA(void)+67p
.text$mn:00007938                                         ; TiXmlDocumentA::TiXmlDocumentA(char const *)+76p
.text$mn:00007938
.text$mn:00007938 var_4           = dword ptr -4
.text$mn:00007938
.text$mn:00007938                 push    ebp
.text$mn:00007939                 mov     ebp, esp
.text$mn:0000793B                 push    ecx
.text$mn:0000793C                 mov     [ebp+var_4], ecx
.text$mn:0000793F                 mov     eax, [ebp+var_4]
.text$mn:00007942                 mov     byte ptr [eax+44h], 0
.text$mn:00007946                 mov     ecx, [ebp+var_4]
.text$mn:00007949                 mov     dword ptr [ecx+48h], 0
.text$mn:00007950                 push    offset ??_C@_00CNPNBAHC@?$AA@ ; Str
.text$mn:00007955                 mov     ecx, [ebp+var_4]
.text$mn:00007958                 add     ecx, 4Ch ; 'L'
.text$mn:0000795B                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00007960                 mov     edx, [ebp+var_4]
.text$mn:00007963                 mov     dword ptr [edx+70h], 0
.text$mn:0000796A                 mov     eax, [ebp+var_4]
.text$mn:0000796D                 mov     dword ptr [eax+6Ch], 0
.text$mn:00007974                 mov     esp, ebp
.text$mn:00007976                 pop     ebp
.text$mn:00007977                 retn
.text$mn:00007977 ?ClearError@TiXmlDocumentA@@QAEXXZ endp
.text$mn:00007977
.text$mn:00007977 _text$mn        ends
.text$mn:00007977
.text$mn:00007978 ; ===========================================================================
.text$mn:00007978
.text$mn:00007978 ; Segment type: Pure code
.text$mn:00007978 ; Segment permissions: Read/Execute
.text$mn:00007978 _text$mn        segment para public 'CODE' use32
.text$mn:00007978                 assume cs:_text$mn
.text$mn:00007978                 ;org 7978h
.text$mn:00007978 ; COMDAT (pick any)
.text$mn:00007978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007978
.text$mn:00007978 ; =============== S U B R O U T I N E =======================================
.text$mn:00007978
.text$mn:00007978 ; Attributes: bp-based frame
.text$mn:00007978
.text$mn:00007978 ; void __thiscall TiXmlNodeA::CopyToClone(TiXmlNodeA *this, struct TiXmlNodeA *)
.text$mn:00007978                 public ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z
.text$mn:00007978 ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z proc near
.text$mn:00007978                                         ; CODE XREF: TiXmlElementA::Clone(void)+89p
.text$mn:00007978                                         ; TiXmlCommentA::Clone(void)+7Ap ...
.text$mn:00007978
.text$mn:00007978 var_4           = dword ptr -4
.text$mn:00007978 arg_0           = dword ptr  8
.text$mn:00007978
.text$mn:00007978                 push    ebp
.text$mn:00007979                 mov     ebp, esp
.text$mn:0000797B                 push    ecx
.text$mn:0000797C                 mov     [ebp+var_4], ecx
.text$mn:0000797F                 mov     ecx, [ebp+var_4]
.text$mn:00007982                 add     ecx, 1Ch
.text$mn:00007985                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:0000798A                 push    eax             ; char *
.text$mn:0000798B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000798E                 call    ?SetValue@TiXmlNodeA@@QAEXPBD@Z ; TiXmlNodeA::SetValue(char const *)
.text$mn:00007993                 mov     eax, [ebp+arg_0]
.text$mn:00007996                 mov     ecx, [ebp+var_4]
.text$mn:00007999                 mov     edx, [ecx+40h]
.text$mn:0000799C                 mov     [eax+40h], edx
.text$mn:0000799F                 mov     esp, ebp
.text$mn:000079A1                 pop     ebp
.text$mn:000079A2                 retn    4
.text$mn:000079A2 ?CopyToClone@TiXmlNodeA@@IBEXPAV1@@Z endp
.text$mn:000079A2
.text$mn:000079A2 ; ---------------------------------------------------------------------------
.text$mn:000079A5                 align 4
.text$mn:000079A5 _text$mn        ends
.text$mn:000079A5
.text$mn:000079A8 ; ===========================================================================
.text$mn:000079A8
.text$mn:000079A8 ; Segment type: Pure code
.text$mn:000079A8 ; Segment permissions: Read/Execute
.text$mn:000079A8 _text$mn        segment para public 'CODE' use32
.text$mn:000079A8                 assume cs:_text$mn
.text$mn:000079A8                 ;org 79A8h
.text$mn:000079A8 ; COMDAT (pick any)
.text$mn:000079A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079A8
.text$mn:000079A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000079A8
.text$mn:000079A8 ; Attributes: bp-based frame
.text$mn:000079A8
.text$mn:000079A8 ; public: bool __thiscall TiXmlDocumentA::Error(void)const
.text$mn:000079A8                 public ?Error@TiXmlDocumentA@@QBE_NXZ
.text$mn:000079A8 ?Error@TiXmlDocumentA@@QBE_NXZ proc near
.text$mn:000079A8                                         ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+186p
.text$mn:000079A8                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+169p
.text$mn:000079A8
.text$mn:000079A8 var_4           = dword ptr -4
.text$mn:000079A8
.text$mn:000079A8                 push    ebp
.text$mn:000079A9                 mov     ebp, esp
.text$mn:000079AB                 push    ecx
.text$mn:000079AC                 mov     [ebp+var_4], ecx
.text$mn:000079AF                 mov     eax, [ebp+var_4]
.text$mn:000079B2                 mov     al, [eax+44h]
.text$mn:000079B5                 mov     esp, ebp
.text$mn:000079B7                 pop     ebp
.text$mn:000079B8                 retn
.text$mn:000079B8 ?Error@TiXmlDocumentA@@QBE_NXZ endp
.text$mn:000079B8
.text$mn:000079B8 ; ---------------------------------------------------------------------------
.text$mn:000079B9                 align 4
.text$mn:000079B9 _text$mn        ends
.text$mn:000079B9
.text$mn:000079BC ; ===========================================================================
.text$mn:000079BC
.text$mn:000079BC ; Segment type: Pure code
.text$mn:000079BC ; Segment permissions: Read/Execute
.text$mn:000079BC _text$mn        segment para public 'CODE' use32
.text$mn:000079BC                 assume cs:_text$mn
.text$mn:000079BC                 ;org 79BCh
.text$mn:000079BC ; COMDAT (pick any)
.text$mn:000079BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079BC
.text$mn:000079BC ; =============== S U B R O U T I N E =======================================
.text$mn:000079BC
.text$mn:000079BC ; Attributes: bp-based frame
.text$mn:000079BC
.text$mn:000079BC ; struct TiXmlAttributeA *__thiscall TiXmlAttributeSetA::First(TiXmlAttributeSetA *__hidden this)
.text$mn:000079BC                 public ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ
.text$mn:000079BC ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ proc near
.text$mn:000079BC                                         ; CODE XREF: TiXmlElementA::~TiXmlElementA(void)+3Ep
.text$mn:000079BC                                         ; TiXmlElementA::~TiXmlElementA(void)+4Dp ...
.text$mn:000079BC
.text$mn:000079BC var_8           = dword ptr -8
.text$mn:000079BC var_4           = dword ptr -4
.text$mn:000079BC
.text$mn:000079BC                 push    ebp
.text$mn:000079BD                 mov     ebp, esp
.text$mn:000079BF                 sub     esp, 8
.text$mn:000079C2                 mov     [ebp+var_4], ecx
.text$mn:000079C5                 mov     eax, [ebp+var_4]
.text$mn:000079C8                 mov     ecx, [ebp+var_4]
.text$mn:000079CB                 cmp     [ecx+4Ch], eax
.text$mn:000079CE                 jnz     short loc_79D9
.text$mn:000079D0                 mov     [ebp+var_8], 0
.text$mn:000079D7                 jmp     short loc_79E2
.text$mn:000079D9 ; ---------------------------------------------------------------------------
.text$mn:000079D9
.text$mn:000079D9 loc_79D9:                               ; CODE XREF: TiXmlAttributeSetA::First(void)+12j
.text$mn:000079D9                 mov     edx, [ebp+var_4]
.text$mn:000079DC                 mov     eax, [edx+4Ch]
.text$mn:000079DF                 mov     [ebp+var_8], eax
.text$mn:000079E2
.text$mn:000079E2 loc_79E2:                               ; CODE XREF: TiXmlAttributeSetA::First(void)+1Bj
.text$mn:000079E2                 mov     eax, [ebp+var_8]
.text$mn:000079E5                 mov     esp, ebp
.text$mn:000079E7                 pop     ebp
.text$mn:000079E8                 retn
.text$mn:000079E8 ?First@TiXmlAttributeSetA@@QBEPAVTiXmlAttributeA@@XZ endp
.text$mn:000079E8
.text$mn:000079E8 ; ---------------------------------------------------------------------------
.text$mn:000079E9                 align 4
.text$mn:000079E9 _text$mn        ends
.text$mn:000079E9
.text$mn:000079EC ; ===========================================================================
.text$mn:000079EC
.text$mn:000079EC ; Segment type: Pure code
.text$mn:000079EC ; Segment permissions: Read/Execute
.text$mn:000079EC _text$mn        segment para public 'CODE' use32
.text$mn:000079EC                 assume cs:_text$mn
.text$mn:000079EC                 ;org 79ECh
.text$mn:000079EC ; COMDAT (pick any)
.text$mn:000079EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079EC
.text$mn:000079EC ; =============== S U B R O U T I N E =======================================
.text$mn:000079EC
.text$mn:000079EC ; Attributes: bp-based frame
.text$mn:000079EC
.text$mn:000079EC ; struct TiXmlNodeA *__thiscall TiXmlNodeA::FirstChild(TiXmlNodeA *__hidden this)
.text$mn:000079EC                 public ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ
.text$mn:000079EC ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ proc near
.text$mn:000079EC                                         ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+10p
.text$mn:000079EC                                         ; TiXmlNodeA::FirstChildElement(void)+Cp ...
.text$mn:000079EC
.text$mn:000079EC var_4           = dword ptr -4
.text$mn:000079EC
.text$mn:000079EC                 push    ebp
.text$mn:000079ED                 mov     ebp, esp
.text$mn:000079EF                 push    ecx
.text$mn:000079F0                 mov     [ebp+var_4], ecx
.text$mn:000079F3                 mov     eax, [ebp+var_4]
.text$mn:000079F6                 mov     eax, [eax+14h]
.text$mn:000079F9                 mov     esp, ebp
.text$mn:000079FB                 pop     ebp
.text$mn:000079FC                 retn
.text$mn:000079FC ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ endp
.text$mn:000079FC
.text$mn:000079FC ; ---------------------------------------------------------------------------
.text$mn:000079FD                 align 10h
.text$mn:000079FD _text$mn        ends
.text$mn:000079FD
.text$mn:00007A00 ; ===========================================================================
.text$mn:00007A00
.text$mn:00007A00 ; Segment type: Pure code
.text$mn:00007A00 ; Segment permissions: Read/Execute
.text$mn:00007A00 _text$mn        segment para public 'CODE' use32
.text$mn:00007A00                 assume cs:_text$mn
.text$mn:00007A00                 ;org 7A00h
.text$mn:00007A00 ; COMDAT (pick any)
.text$mn:00007A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A00
.text$mn:00007A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A00
.text$mn:00007A00 ; Attributes: bp-based frame
.text$mn:00007A00
.text$mn:00007A00 ; const char *__thiscall TiXmlAttributeA::Name(TiXmlAttributeA *__hidden this)
.text$mn:00007A00                 public ?Name@TiXmlAttributeA@@QBEPBDXZ
.text$mn:00007A00 ?Name@TiXmlAttributeA@@QBEPBDXZ proc near
.text$mn:00007A00                                         ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+4Fp
.text$mn:00007A00                                         ; TiXmlAttributeSetA::Add(TiXmlAttributeA *)+Ap ...
.text$mn:00007A00
.text$mn:00007A00 var_4           = dword ptr -4
.text$mn:00007A00
.text$mn:00007A00                 push    ebp
.text$mn:00007A01                 mov     ebp, esp
.text$mn:00007A03                 push    ecx
.text$mn:00007A04                 mov     [ebp+var_4], ecx
.text$mn:00007A07                 mov     ecx, [ebp+var_4]
.text$mn:00007A0A                 add     ecx, 10h
.text$mn:00007A0D                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00007A12                 mov     esp, ebp
.text$mn:00007A14                 pop     ebp
.text$mn:00007A15                 retn
.text$mn:00007A15 ?Name@TiXmlAttributeA@@QBEPBDXZ endp
.text$mn:00007A15
.text$mn:00007A15 ; ---------------------------------------------------------------------------
.text$mn:00007A16                 align 4
.text$mn:00007A16 _text$mn        ends
.text$mn:00007A16
.text$mn:00007A18 ; ===========================================================================
.text$mn:00007A18
.text$mn:00007A18 ; Segment type: Pure code
.text$mn:00007A18 ; Segment permissions: Read/Execute
.text$mn:00007A18 _text$mn        segment para public 'CODE' use32
.text$mn:00007A18                 assume cs:_text$mn
.text$mn:00007A18                 ;org 7A18h
.text$mn:00007A18 ; COMDAT (pick any)
.text$mn:00007A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A18
.text$mn:00007A18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A18
.text$mn:00007A18 ; Attributes: bp-based frame
.text$mn:00007A18
.text$mn:00007A18 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::NextSibling(TiXmlNodeA *__hidden this)
.text$mn:00007A18                 public ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ
.text$mn:00007A18 ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ proc near
.text$mn:00007A18                                         ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+3Ep
.text$mn:00007A18                                         ; TiXmlNodeA::NextSiblingElement(void)+Cp ...
.text$mn:00007A18
.text$mn:00007A18 var_4           = dword ptr -4
.text$mn:00007A18
.text$mn:00007A18                 push    ebp
.text$mn:00007A19                 mov     ebp, esp
.text$mn:00007A1B                 push    ecx
.text$mn:00007A1C                 mov     [ebp+var_4], ecx
.text$mn:00007A1F                 mov     eax, [ebp+var_4]
.text$mn:00007A22                 mov     eax, [eax+3Ch]
.text$mn:00007A25                 mov     esp, ebp
.text$mn:00007A27                 pop     ebp
.text$mn:00007A28                 retn
.text$mn:00007A28 ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ endp
.text$mn:00007A28
.text$mn:00007A28 ; ---------------------------------------------------------------------------
.text$mn:00007A29                 align 4
.text$mn:00007A29 _text$mn        ends
.text$mn:00007A29
.text$mn:00007A2C ; ===========================================================================
.text$mn:00007A2C
.text$mn:00007A2C ; Segment type: Pure code
.text$mn:00007A2C ; Segment permissions: Read/Execute
.text$mn:00007A2C _text$mn        segment para public 'CODE' use32
.text$mn:00007A2C                 assume cs:_text$mn
.text$mn:00007A2C                 ;org 7A2Ch
.text$mn:00007A2C ; COMDAT (pick any)
.text$mn:00007A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A2C
.text$mn:00007A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007A2C
.text$mn:00007A2C ; Attributes: bp-based frame
.text$mn:00007A2C
.text$mn:00007A2C ; protected: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall TiXmlNodeA::SValue(void)const
.text$mn:00007A2C                 public ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
.text$mn:00007A2C ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
.text$mn:00007A2C                                         ; CODE XREF: TiXmlNodeA::FirstChild(char const *)+6Cp
.text$mn:00007A2C                                         ; TiXmlNodeA::LastChild(char const *)+6Cp ...
.text$mn:00007A2C
.text$mn:00007A2C var_14          = dword ptr -14h
.text$mn:00007A2C var_10          = dword ptr -10h
.text$mn:00007A2C var_C           = dword ptr -0Ch
.text$mn:00007A2C var_4           = dword ptr -4
.text$mn:00007A2C arg_0           = dword ptr  8
.text$mn:00007A2C
.text$mn:00007A2C                 push    ebp
.text$mn:00007A2D                 mov     ebp, esp
.text$mn:00007A2F                 push    0FFFFFFFFh
.text$mn:00007A31                 push    offset __ehhandler$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
.text$mn:00007A36                 mov     eax, large fs:0
.text$mn:00007A3C                 push    eax
.text$mn:00007A3D                 sub     esp, 8
.text$mn:00007A40                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A45                 xor     eax, ebp
.text$mn:00007A47                 push    eax
.text$mn:00007A48                 lea     eax, [ebp+var_C]
.text$mn:00007A4B                 mov     large fs:0, eax
.text$mn:00007A51                 mov     [ebp+var_14], ecx
.text$mn:00007A54                 mov     [ebp+var_10], 0
.text$mn:00007A5B                 mov     eax, [ebp+var_14]
.text$mn:00007A5E                 add     eax, 1Ch
.text$mn:00007A61                 push    eax
.text$mn:00007A62                 mov     ecx, [ebp+arg_0]
.text$mn:00007A65                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00007A6A                 mov     [ebp+var_4], 0
.text$mn:00007A71                 mov     ecx, [ebp+var_10]
.text$mn:00007A74                 or      ecx, 1
.text$mn:00007A77                 mov     [ebp+var_10], ecx
.text$mn:00007A7A                 mov     eax, [ebp+arg_0]
.text$mn:00007A7D                 mov     ecx, [ebp+var_C]
.text$mn:00007A80                 mov     large fs:0, ecx
.text$mn:00007A87                 pop     ecx
.text$mn:00007A88                 mov     esp, ebp
.text$mn:00007A8A                 pop     ebp
.text$mn:00007A8B                 retn    4
.text$mn:00007A8B ?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ endp
.text$mn:00007A8B
.text$mn:00007A8B ; ---------------------------------------------------------------------------
.text$mn:00007A8E                 align 10h
.text$mn:00007A8E _text$mn        ends
.text$mn:00007A8E
.text$x:00007A90 ; ===========================================================================
.text$x:00007A90
.text$x:00007A90 ; Segment type: Pure code
.text$x:00007A90 ; Segment permissions: Read/Execute
.text$x:00007A90 _text$x         segment para public 'CODE' use32
.text$x:00007A90                 assume cs:_text$x
.text$x:00007A90                 ;org 7A90h
.text$x:00007A90 ; COMDAT (pick associative to section at 7A2C)
.text$x:00007A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A90
.text$x:00007A90 ; =============== S U B R O U T I N E =======================================
.text$x:00007A90
.text$x:00007A90
.text$x:00007A90 __unwindfunclet$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0 proc near
.text$x:00007A90                                         ; DATA XREF: .xdata$x:0000C324o
.text$x:00007A90                 mov     eax, [ebp-10h]
.text$x:00007A93                 and     eax, 1
.text$x:00007A96                 jz      $LN4_1
.text$x:00007A9C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00007AA0                 mov     ecx, [ebp+8]
.text$x:00007AA3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00007AA8 ; ---------------------------------------------------------------------------
.text$x:00007AA8
.text$x:00007AA8 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0+6j
.text$x:00007AA8                 retn
.text$x:00007AA8 __unwindfunclet$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0 endp
.text$x:00007AA8
.text$x:00007AA9
.text$x:00007AA9 ; =============== S U B R O U T I N E =======================================
.text$x:00007AA9
.text$x:00007AA9
.text$x:00007AA9 __ehhandler$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ proc near
.text$x:00007AA9                                         ; DATA XREF: TiXmlNodeA::SValue(void)+5o
.text$x:00007AA9
.text$x:00007AA9 arg_4           = dword ptr  8
.text$x:00007AA9
.text$x:00007AA9                 mov     edx, [esp+arg_4]
.text$x:00007AAD                 lea     eax, [edx+0Ch]
.text$x:00007AB0                 mov     ecx, [edx-0Ch]
.text$x:00007AB3                 xor     ecx, eax
.text$x:00007AB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007ABA                 mov     eax, offset __ehfuncinfo$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
.text$x:00007ABF                 jmp     ___CxxFrameHandler3
.text$x:00007ABF __ehhandler$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ endp
.text$x:00007ABF
.text$x:00007ABF _text$x         ends
.text$x:00007ABF
.text$mn:00007AC4 ; ===========================================================================
.text$mn:00007AC4
.text$mn:00007AC4 ; Segment type: Pure code
.text$mn:00007AC4 ; Segment permissions: Read/Execute
.text$mn:00007AC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007AC4                 assume cs:_text$mn
.text$mn:00007AC4                 ;org 7AC4h
.text$mn:00007AC4 ; COMDAT (pick any)
.text$mn:00007AC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AC4
.text$mn:00007AC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AC4
.text$mn:00007AC4 ; Attributes: bp-based frame
.text$mn:00007AC4
.text$mn:00007AC4 ; void __thiscall TiXmlAttributeA::SetValue(TiXmlAttributeA *this, const char *)
.text$mn:00007AC4                 public ?SetValue@TiXmlAttributeA@@QAEXPBD@Z
.text$mn:00007AC4 ?SetValue@TiXmlAttributeA@@QAEXPBD@Z proc near
.text$mn:00007AC4                                         ; CODE XREF: TiXmlAttributeA::SetIntValue(int)+2Fp
.text$mn:00007AC4                                         ; TiXmlAttributeA::SetDoubleValue(double)+38p ...
.text$mn:00007AC4
.text$mn:00007AC4 var_4           = dword ptr -4
.text$mn:00007AC4 Str             = dword ptr  8
.text$mn:00007AC4
.text$mn:00007AC4                 push    ebp
.text$mn:00007AC5                 mov     ebp, esp
.text$mn:00007AC7                 push    ecx
.text$mn:00007AC8                 mov     [ebp+var_4], ecx
.text$mn:00007ACB                 mov     eax, [ebp+Str]
.text$mn:00007ACE                 push    eax             ; Str
.text$mn:00007ACF                 mov     ecx, [ebp+var_4]
.text$mn:00007AD2                 add     ecx, 2Ch ; ','
.text$mn:00007AD5                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00007ADA                 mov     esp, ebp
.text$mn:00007ADC                 pop     ebp
.text$mn:00007ADD                 retn    4
.text$mn:00007ADD ?SetValue@TiXmlAttributeA@@QAEXPBD@Z endp
.text$mn:00007ADD
.text$mn:00007ADD _text$mn        ends
.text$mn:00007ADD
.text$mn:00007AE0 ; ===========================================================================
.text$mn:00007AE0
.text$mn:00007AE0 ; Segment type: Pure code
.text$mn:00007AE0 ; Segment permissions: Read/Execute
.text$mn:00007AE0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AE0                 assume cs:_text$mn
.text$mn:00007AE0                 ;org 7AE0h
.text$mn:00007AE0 ; COMDAT (pick any)
.text$mn:00007AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AE0
.text$mn:00007AE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AE0
.text$mn:00007AE0 ; Attributes: bp-based frame
.text$mn:00007AE0
.text$mn:00007AE0 ; void __thiscall TiXmlNodeA::SetValue(TiXmlNodeA *this, const char *)
.text$mn:00007AE0                 public ?SetValue@TiXmlNodeA@@QAEXPBD@Z
.text$mn:00007AE0 ?SetValue@TiXmlNodeA@@QAEXPBD@Z proc near
.text$mn:00007AE0                                         ; CODE XREF: TiXmlTextA::TiXmlTextA(char const *)+47p
.text$mn:00007AE0                                         ; TiXmlNodeA::CopyToClone(TiXmlNodeA *)+16p
.text$mn:00007AE0
.text$mn:00007AE0 var_4           = dword ptr -4
.text$mn:00007AE0 Str             = dword ptr  8
.text$mn:00007AE0
.text$mn:00007AE0                 push    ebp
.text$mn:00007AE1                 mov     ebp, esp
.text$mn:00007AE3                 push    ecx
.text$mn:00007AE4                 mov     [ebp+var_4], ecx
.text$mn:00007AE7                 mov     eax, [ebp+Str]
.text$mn:00007AEA                 push    eax             ; Str
.text$mn:00007AEB                 mov     ecx, [ebp+var_4]
.text$mn:00007AEE                 add     ecx, 1Ch
.text$mn:00007AF1                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00007AF6                 mov     esp, ebp
.text$mn:00007AF8                 pop     ebp
.text$mn:00007AF9                 retn    4
.text$mn:00007AF9 ?SetValue@TiXmlNodeA@@QAEXPBD@Z endp
.text$mn:00007AF9
.text$mn:00007AF9 _text$mn        ends
.text$mn:00007AF9
.text$mn:00007AFC ; ===========================================================================
.text$mn:00007AFC
.text$mn:00007AFC ; Segment type: Pure code
.text$mn:00007AFC ; Segment permissions: Read/Execute
.text$mn:00007AFC _text$mn        segment para public 'CODE' use32
.text$mn:00007AFC                 assume cs:_text$mn
.text$mn:00007AFC                 ;org 7AFCh
.text$mn:00007AFC ; COMDAT (pick any)
.text$mn:00007AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AFC
.text$mn:00007AFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007AFC
.text$mn:00007AFC ; Attributes: bp-based frame
.text$mn:00007AFC
.text$mn:00007AFC ; struct TiXmlDocumentA *__thiscall TiXmlNodeA::ToDocument(TiXmlNodeA *__hidden this)
.text$mn:00007AFC                 public ?ToDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ
.text$mn:00007AFC ?ToDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ proc near
.text$mn:00007AFC                                         ; CODE XREF: TiXmlNodeA::GetDocument(void)+23p
.text$mn:00007AFC                                         ; TiXmlNodeA::GetDocument(void)+2Fp
.text$mn:00007AFC
.text$mn:00007AFC var_8           = dword ptr -8
.text$mn:00007AFC var_4           = dword ptr -4
.text$mn:00007AFC
.text$mn:00007AFC                 push    ebp
.text$mn:00007AFD                 mov     ebp, esp
.text$mn:00007AFF                 sub     esp, 8
.text$mn:00007B02                 mov     [ebp+var_4], ecx
.text$mn:00007B05                 cmp     [ebp+var_4], 0
.text$mn:00007B09                 jz      short loc_7B1C
.text$mn:00007B0B                 mov     eax, [ebp+var_4]
.text$mn:00007B0E                 cmp     dword ptr [eax+10h], 0
.text$mn:00007B12                 jnz     short loc_7B1C
.text$mn:00007B14                 mov     ecx, [ebp+var_4]
.text$mn:00007B17                 mov     [ebp+var_8], ecx
.text$mn:00007B1A                 jmp     short loc_7B23
.text$mn:00007B1C ; ---------------------------------------------------------------------------
.text$mn:00007B1C
.text$mn:00007B1C loc_7B1C:                               ; CODE XREF: TiXmlNodeA::ToDocument(void)+Dj
.text$mn:00007B1C                                         ; TiXmlNodeA::ToDocument(void)+16j
.text$mn:00007B1C                 mov     [ebp+var_8], 0
.text$mn:00007B23
.text$mn:00007B23 loc_7B23:                               ; CODE XREF: TiXmlNodeA::ToDocument(void)+1Ej
.text$mn:00007B23                 mov     eax, [ebp+var_8]
.text$mn:00007B26                 mov     esp, ebp
.text$mn:00007B28                 pop     ebp
.text$mn:00007B29                 retn
.text$mn:00007B29 ?ToDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ endp
.text$mn:00007B29
.text$mn:00007B29 ; ---------------------------------------------------------------------------
.text$mn:00007B2A                 align 4
.text$mn:00007B2A _text$mn        ends
.text$mn:00007B2A
.text$mn:00007B2C ; ===========================================================================
.text$mn:00007B2C
.text$mn:00007B2C ; Segment type: Pure code
.text$mn:00007B2C ; Segment permissions: Read/Execute
.text$mn:00007B2C _text$mn        segment para public 'CODE' use32
.text$mn:00007B2C                 assume cs:_text$mn
.text$mn:00007B2C                 ;org 7B2Ch
.text$mn:00007B2C ; COMDAT (pick any)
.text$mn:00007B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B2C
.text$mn:00007B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B2C
.text$mn:00007B2C ; Attributes: bp-based frame
.text$mn:00007B2C
.text$mn:00007B2C ; struct TiXmlElementA *__thiscall TiXmlNodeA::ToElement(TiXmlNodeA *__hidden this)
.text$mn:00007B2C                 public ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ
.text$mn:00007B2C ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ proc near
.text$mn:00007B2C                                         ; CODE XREF: TiXmlNodeA::NextSiblingElement(void)+2Ap
.text$mn:00007B2C                                         ; TiXmlNodeA::NextSiblingElement(void)+36p ...
.text$mn:00007B2C
.text$mn:00007B2C var_8           = dword ptr -8
.text$mn:00007B2C var_4           = dword ptr -4
.text$mn:00007B2C
.text$mn:00007B2C                 push    ebp
.text$mn:00007B2D                 mov     ebp, esp
.text$mn:00007B2F                 sub     esp, 8
.text$mn:00007B32                 mov     [ebp+var_4], ecx
.text$mn:00007B35                 cmp     [ebp+var_4], 0
.text$mn:00007B39                 jz      short loc_7B4C
.text$mn:00007B3B                 mov     eax, [ebp+var_4]
.text$mn:00007B3E                 cmp     dword ptr [eax+10h], 1
.text$mn:00007B42                 jnz     short loc_7B4C
.text$mn:00007B44                 mov     ecx, [ebp+var_4]
.text$mn:00007B47                 mov     [ebp+var_8], ecx
.text$mn:00007B4A                 jmp     short loc_7B53
.text$mn:00007B4C ; ---------------------------------------------------------------------------
.text$mn:00007B4C
.text$mn:00007B4C loc_7B4C:                               ; CODE XREF: TiXmlNodeA::ToElement(void)+Dj
.text$mn:00007B4C                                         ; TiXmlNodeA::ToElement(void)+16j
.text$mn:00007B4C                 mov     [ebp+var_8], 0
.text$mn:00007B53
.text$mn:00007B53 loc_7B53:                               ; CODE XREF: TiXmlNodeA::ToElement(void)+1Ej
.text$mn:00007B53                 mov     eax, [ebp+var_8]
.text$mn:00007B56                 mov     esp, ebp
.text$mn:00007B58                 pop     ebp
.text$mn:00007B59                 retn
.text$mn:00007B59 ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ endp
.text$mn:00007B59
.text$mn:00007B59 ; ---------------------------------------------------------------------------
.text$mn:00007B5A                 align 4
.text$mn:00007B5A _text$mn        ends
.text$mn:00007B5A
.text$mn:00007B5C ; ===========================================================================
.text$mn:00007B5C
.text$mn:00007B5C ; Segment type: Pure code
.text$mn:00007B5C ; Segment permissions: Read/Execute
.text$mn:00007B5C _text$mn        segment para public 'CODE' use32
.text$mn:00007B5C                 assume cs:_text$mn
.text$mn:00007B5C                 ;org 7B5Ch
.text$mn:00007B5C ; COMDAT (pick any)
.text$mn:00007B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B5C
.text$mn:00007B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B5C
.text$mn:00007B5C ; Attributes: bp-based frame
.text$mn:00007B5C
.text$mn:00007B5C ; struct TiXmlTextA *__thiscall TiXmlNodeA::ToText(TiXmlNodeA *__hidden this)
.text$mn:00007B5C                 public ?ToText@TiXmlNodeA@@QBEPAVTiXmlTextA@@XZ
.text$mn:00007B5C ?ToText@TiXmlNodeA@@QBEPAVTiXmlTextA@@XZ proc near
.text$mn:00007B5C                                         ; CODE XREF: TiXmlElementA::Print(_iobuf *,int)+CFp
.text$mn:00007B5C                                         ; TiXmlElementA::Print(_iobuf *,int)+159p
.text$mn:00007B5C
.text$mn:00007B5C var_8           = dword ptr -8
.text$mn:00007B5C var_4           = dword ptr -4
.text$mn:00007B5C
.text$mn:00007B5C                 push    ebp
.text$mn:00007B5D                 mov     ebp, esp
.text$mn:00007B5F                 sub     esp, 8
.text$mn:00007B62                 mov     [ebp+var_4], ecx
.text$mn:00007B65                 cmp     [ebp+var_4], 0
.text$mn:00007B69                 jz      short loc_7B7C
.text$mn:00007B6B                 mov     eax, [ebp+var_4]
.text$mn:00007B6E                 cmp     dword ptr [eax+10h], 4
.text$mn:00007B72                 jnz     short loc_7B7C
.text$mn:00007B74                 mov     ecx, [ebp+var_4]
.text$mn:00007B77                 mov     [ebp+var_8], ecx
.text$mn:00007B7A                 jmp     short loc_7B83
.text$mn:00007B7C ; ---------------------------------------------------------------------------
.text$mn:00007B7C
.text$mn:00007B7C loc_7B7C:                               ; CODE XREF: TiXmlNodeA::ToText(void)+Dj
.text$mn:00007B7C                                         ; TiXmlNodeA::ToText(void)+16j
.text$mn:00007B7C                 mov     [ebp+var_8], 0
.text$mn:00007B83
.text$mn:00007B83 loc_7B83:                               ; CODE XREF: TiXmlNodeA::ToText(void)+1Ej
.text$mn:00007B83                 mov     eax, [ebp+var_8]
.text$mn:00007B86                 mov     esp, ebp
.text$mn:00007B88                 pop     ebp
.text$mn:00007B89                 retn
.text$mn:00007B89 ?ToText@TiXmlNodeA@@QBEPAVTiXmlTextA@@XZ endp
.text$mn:00007B89
.text$mn:00007B89 ; ---------------------------------------------------------------------------
.text$mn:00007B8A                 align 4
.text$mn:00007B8A _text$mn        ends
.text$mn:00007B8A
.text$mn:00007B8C ; ===========================================================================
.text$mn:00007B8C
.text$mn:00007B8C ; Segment type: Pure code
.text$mn:00007B8C ; Segment permissions: Read/Execute
.text$mn:00007B8C _text$mn        segment para public 'CODE' use32
.text$mn:00007B8C                 assume cs:_text$mn
.text$mn:00007B8C                 ;org 7B8Ch
.text$mn:00007B8C ; COMDAT (pick any)
.text$mn:00007B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B8C
.text$mn:00007B8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B8C
.text$mn:00007B8C ; Attributes: bp-based frame
.text$mn:00007B8C
.text$mn:00007B8C ; int __thiscall TiXmlNodeA::Type(TiXmlNodeA *__hidden this)
.text$mn:00007B8C                 public ?Type@TiXmlNodeA@@UBEHXZ
.text$mn:00007B8C ?Type@TiXmlNodeA@@UBEHXZ proc near      ; DATA XREF: .rdata:0000CD44o
.text$mn:00007B8C                                         ; .rdata:0000CD78o ...
.text$mn:00007B8C
.text$mn:00007B8C var_4           = dword ptr -4
.text$mn:00007B8C
.text$mn:00007B8C                 push    ebp
.text$mn:00007B8D                 mov     ebp, esp
.text$mn:00007B8F                 push    ecx
.text$mn:00007B90                 mov     [ebp+var_4], ecx
.text$mn:00007B93                 mov     eax, [ebp+var_4]
.text$mn:00007B96                 mov     eax, [eax+10h]
.text$mn:00007B99                 mov     esp, ebp
.text$mn:00007B9B                 pop     ebp
.text$mn:00007B9C                 retn
.text$mn:00007B9C ?Type@TiXmlNodeA@@UBEHXZ endp
.text$mn:00007B9C
.text$mn:00007B9C ; ---------------------------------------------------------------------------
.text$mn:00007B9D                 align 10h
.text$mn:00007B9D _text$mn        ends
.text$mn:00007B9D
.text$mn:00007BA0 ; ===========================================================================
.text$mn:00007BA0
.text$mn:00007BA0 ; Segment type: Pure code
.text$mn:00007BA0 ; Segment permissions: Read/Execute
.text$mn:00007BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00007BA0                 assume cs:_text$mn
.text$mn:00007BA0                 ;org 7BA0h
.text$mn:00007BA0 ; COMDAT (pick any)
.text$mn:00007BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BA0
.text$mn:00007BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BA0
.text$mn:00007BA0 ; Attributes: bp-based frame
.text$mn:00007BA0
.text$mn:00007BA0 ; const char *__thiscall TiXmlAttributeA::Value(TiXmlAttributeA *__hidden this)
.text$mn:00007BA0                 public ?Value@TiXmlAttributeA@@QBEPBDXZ
.text$mn:00007BA0 ?Value@TiXmlAttributeA@@QBEPBDXZ proc near
.text$mn:00007BA0                                         ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+83p
.text$mn:00007BA0                                         ; TiXmlElementA::Attribute(char const *)+24p ...
.text$mn:00007BA0
.text$mn:00007BA0 var_4           = dword ptr -4
.text$mn:00007BA0
.text$mn:00007BA0                 push    ebp
.text$mn:00007BA1                 mov     ebp, esp
.text$mn:00007BA3                 push    ecx
.text$mn:00007BA4                 mov     [ebp+var_4], ecx
.text$mn:00007BA7                 mov     ecx, [ebp+var_4]
.text$mn:00007BAA                 add     ecx, 2Ch ; ','
.text$mn:00007BAD                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00007BB2                 mov     esp, ebp
.text$mn:00007BB4                 pop     ebp
.text$mn:00007BB5                 retn
.text$mn:00007BB5 ?Value@TiXmlAttributeA@@QBEPBDXZ endp
.text$mn:00007BB5
.text$mn:00007BB5 ; ---------------------------------------------------------------------------
.text$mn:00007BB6                 align 4
.text$mn:00007BB6 _text$mn        ends
.text$mn:00007BB6
.text$mn:00007BB8 ; ===========================================================================
.text$mn:00007BB8
.text$mn:00007BB8 ; Segment type: Pure code
.text$mn:00007BB8 ; Segment permissions: Read/Execute
.text$mn:00007BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00007BB8                 assume cs:_text$mn
.text$mn:00007BB8                 ;org 7BB8h
.text$mn:00007BB8 ; COMDAT (pick any)
.text$mn:00007BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BB8
.text$mn:00007BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BB8
.text$mn:00007BB8 ; Attributes: bp-based frame
.text$mn:00007BB8
.text$mn:00007BB8 ; const char *__thiscall TiXmlNodeA::Value(TiXmlNodeA *__hidden this)
.text$mn:00007BB8                 public ?Value@TiXmlNodeA@@QBEPBDXZ
.text$mn:00007BB8 ?Value@TiXmlNodeA@@QBEPBDXZ proc near   ; CODE XREF: TiXmlElementA::Clone(void)+48p
.text$mn:00007BB8
.text$mn:00007BB8 var_4           = dword ptr -4
.text$mn:00007BB8
.text$mn:00007BB8                 push    ebp
.text$mn:00007BB9                 mov     ebp, esp
.text$mn:00007BBB                 push    ecx
.text$mn:00007BBC                 mov     [ebp+var_4], ecx
.text$mn:00007BBF                 mov     ecx, [ebp+var_4]
.text$mn:00007BC2                 add     ecx, 1Ch
.text$mn:00007BC5                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00007BCA                 mov     esp, ebp
.text$mn:00007BCC                 pop     ebp
.text$mn:00007BCD                 retn
.text$mn:00007BCD ?Value@TiXmlNodeA@@QBEPBDXZ endp
.text$mn:00007BCD
.text$mn:00007BCD ; ---------------------------------------------------------------------------
.text$mn:00007BCE                 align 10h
.text$mn:00007BCE _text$mn        ends
.text$mn:00007BCE
.text$mn:00007BD0 ; ===========================================================================
.text$mn:00007BD0
.text$mn:00007BD0 ; Segment type: Pure code
.text$mn:00007BD0 ; Segment permissions: Read/Execute
.text$mn:00007BD0 _text$mn        segment para public 'CODE' use32
.text$mn:00007BD0                 assume cs:_text$mn
.text$mn:00007BD0                 ;org 7BD0h
.text$mn:00007BD0 ; COMDAT (pick any)
.text$mn:00007BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BD0
.text$mn:00007BD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BD0
.text$mn:00007BD0 ; Attributes: bp-based frame
.text$mn:00007BD0
.text$mn:00007BD0 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00007BD0                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00007BD0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007BD0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:00007BD0
.text$mn:00007BD0 var_10          = byte ptr -10h
.text$mn:00007BD0 var_8           = dword ptr -8
.text$mn:00007BD0 var_1           = byte ptr -1
.text$mn:00007BD0
.text$mn:00007BD0                 push    ebp
.text$mn:00007BD1                 mov     ebp, esp
.text$mn:00007BD3                 sub     esp, 10h
.text$mn:00007BD6                 mov     [ebp+var_8], ecx
.text$mn:00007BD9                 lea     ecx, [ebp+var_1]
.text$mn:00007BDC                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007BE1                 push    1
.text$mn:00007BE3                 lea     ecx, [ebp+var_1]
.text$mn:00007BE6                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00007BEB                 mov     ecx, [ebp+var_8]
.text$mn:00007BEE                 mov     [ecx], eax
.text$mn:00007BF0                 lea     ecx, [ebp+var_10] ; this
.text$mn:00007BF3                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00007BF8                 push    eax             ; int
.text$mn:00007BF9                 mov     edx, [ebp+var_8]
.text$mn:00007BFC                 mov     eax, [edx]
.text$mn:00007BFE                 push    eax             ; void *
.text$mn:00007BFF                 lea     ecx, [ebp+var_1]
.text$mn:00007C02                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00007C07                 mov     ecx, [ebp+var_8]
.text$mn:00007C0A                 mov     edx, [ecx]
.text$mn:00007C0C                 mov     eax, [ebp+var_8]
.text$mn:00007C0F                 mov     [edx], eax
.text$mn:00007C11                 mov     esp, ebp
.text$mn:00007C13                 pop     ebp
.text$mn:00007C14                 retn
.text$mn:00007C14 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007C14
.text$mn:00007C14 ; ---------------------------------------------------------------------------
.text$mn:00007C15                 align 4
.text$mn:00007C15 _text$mn        ends
.text$mn:00007C15
.text$mn:00007C18 ; ===========================================================================
.text$mn:00007C18
.text$mn:00007C18 ; Segment type: Pure code
.text$mn:00007C18 ; Segment permissions: Read/Execute
.text$mn:00007C18 _text$mn        segment para public 'CODE' use32
.text$mn:00007C18                 assume cs:_text$mn
.text$mn:00007C18                 ;org 7C18h
.text$mn:00007C18 ; COMDAT (pick any)
.text$mn:00007C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C18
.text$mn:00007C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C18
.text$mn:00007C18 ; Attributes: bp-based frame
.text$mn:00007C18
.text$mn:00007C18 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Assign_rv(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00007C18                 public ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
.text$mn:00007C18 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00007C18                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+60p
.text$mn:00007C18
.text$mn:00007C18 var_8           = dword ptr -8
.text$mn:00007C18 var_1           = byte ptr -1
.text$mn:00007C18 arg_0           = dword ptr  8
.text$mn:00007C18
.text$mn:00007C18                 push    ebp
.text$mn:00007C19                 mov     ebp, esp
.text$mn:00007C1B                 sub     esp, 8
.text$mn:00007C1E                 mov     [ebp+var_8], ecx
.text$mn:00007C21                 mov     eax, [ebp+arg_0]
.text$mn:00007C24                 cmp     dword ptr [eax+18h], 10h
.text$mn:00007C28                 jnb     short loc_7C4C
.text$mn:00007C2A                 mov     ecx, [ebp+arg_0]
.text$mn:00007C2D                 mov     edx, [ecx+14h]
.text$mn:00007C30                 add     edx, 1
.text$mn:00007C33                 push    edx             ; Size
.text$mn:00007C34                 mov     eax, [ebp+arg_0]
.text$mn:00007C37                 add     eax, 4
.text$mn:00007C3A                 push    eax             ; Src
.text$mn:00007C3B                 mov     ecx, [ebp+var_8]
.text$mn:00007C3E                 add     ecx, 4
.text$mn:00007C41                 push    ecx             ; Dst
.text$mn:00007C42                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00007C47                 add     esp, 0Ch
.text$mn:00007C4A                 jmp     short loc_7C77
.text$mn:00007C4C ; ---------------------------------------------------------------------------
.text$mn:00007C4C
.text$mn:00007C4C loc_7C4C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+10j
.text$mn:00007C4C                 mov     edx, [ebp+arg_0]
.text$mn:00007C4F                 add     edx, 4
.text$mn:00007C52                 push    edx             ; int
.text$mn:00007C53                 mov     eax, [ebp+var_8]
.text$mn:00007C56                 add     eax, 4
.text$mn:00007C59                 push    eax             ; void *
.text$mn:00007C5A                 lea     ecx, [ebp+var_1]
.text$mn:00007C5D                 push    ecx
.text$mn:00007C5E                 mov     ecx, [ebp+var_8]
.text$mn:00007C61                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007C66                 mov     ecx, eax
.text$mn:00007C68                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00007C6D                 mov     edx, [ebp+arg_0]
.text$mn:00007C70                 mov     dword ptr [edx+4], 0
.text$mn:00007C77
.text$mn:00007C77 loc_7C77:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+32j
.text$mn:00007C77                 mov     eax, [ebp+var_8]
.text$mn:00007C7A                 mov     ecx, [ebp+arg_0]
.text$mn:00007C7D                 mov     edx, [ecx+14h]
.text$mn:00007C80                 mov     [eax+14h], edx
.text$mn:00007C83                 mov     eax, [ebp+var_8]
.text$mn:00007C86                 mov     ecx, [ebp+arg_0]
.text$mn:00007C89                 mov     edx, [ecx+18h]
.text$mn:00007C8C                 mov     [eax+18h], edx
.text$mn:00007C8F                 push    0               ; Size
.text$mn:00007C91                 push    0               ; char
.text$mn:00007C93                 mov     ecx, [ebp+arg_0]
.text$mn:00007C96                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007C9B                 mov     esp, ebp
.text$mn:00007C9D                 pop     ebp
.text$mn:00007C9E                 retn    4
.text$mn:00007C9E ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00007C9E
.text$mn:00007C9E ; ---------------------------------------------------------------------------
.text$mn:00007CA1                 align 4
.text$mn:00007CA1 _text$mn        ends
.text$mn:00007CA1
.text$mn:00007CA4 ; ===========================================================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Segment type: Pure code
.text$mn:00007CA4 ; Segment permissions: Read/Execute
.text$mn:00007CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CA4                 assume cs:_text$mn
.text$mn:00007CA4                 ;org 7CA4h
.text$mn:00007CA4 ; COMDAT (pick any)
.text$mn:00007CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CA4
.text$mn:00007CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Attributes: bp-based frame
.text$mn:00007CA4
.text$mn:00007CA4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:00007CA4                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
.text$mn:00007CA4 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z proc near
.text$mn:00007CA4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Ap
.text$mn:00007CA4
.text$mn:00007CA4 var_4           = dword ptr -4
.text$mn:00007CA4
.text$mn:00007CA4                 push    ebp
.text$mn:00007CA5                 mov     ebp, esp
.text$mn:00007CA7                 push    ecx
.text$mn:00007CA8                 mov     [ebp+var_4], ecx
.text$mn:00007CAB                 mov     esp, ebp
.text$mn:00007CAD                 pop     ebp
.text$mn:00007CAE                 retn    4
.text$mn:00007CAE ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z endp
.text$mn:00007CAE
.text$mn:00007CAE ; ---------------------------------------------------------------------------
.text$mn:00007CB1                 align 4
.text$mn:00007CB1 _text$mn        ends
.text$mn:00007CB1
.text$mn:00007CB4 ; ===========================================================================
.text$mn:00007CB4
.text$mn:00007CB4 ; Segment type: Pure code
.text$mn:00007CB4 ; Segment permissions: Read/Execute
.text$mn:00007CB4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CB4                 assume cs:_text$mn
.text$mn:00007CB4                 ;org 7CB4h
.text$mn:00007CB4 ; COMDAT (pick any)
.text$mn:00007CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CB4
.text$mn:00007CB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CB4
.text$mn:00007CB4 ; Attributes: bp-based frame
.text$mn:00007CB4
.text$mn:00007CB4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00007CB4                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007CB4 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00007CB4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00007CB4
.text$mn:00007CB4 var_20          = dword ptr -20h
.text$mn:00007CB4 var_1C          = dword ptr -1Ch
.text$mn:00007CB4 var_18          = dword ptr -18h
.text$mn:00007CB4 var_11          = byte ptr -11h
.text$mn:00007CB4 var_10          = dword ptr -10h
.text$mn:00007CB4 var_C           = byte ptr -0Ch
.text$mn:00007CB4 var_4           = dword ptr -4
.text$mn:00007CB4 arg_0           = dword ptr  8
.text$mn:00007CB4
.text$mn:00007CB4 ; FUNCTION CHUNK AT .text$mn:00007DD6 SIZE 00000009 BYTES
.text$mn:00007CB4
.text$mn:00007CB4                 push    ebp
.text$mn:00007CB5                 mov     ebp, esp
.text$mn:00007CB7                 push    0FFFFFFFFh
.text$mn:00007CB9                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007CBE                 mov     eax, large fs:0
.text$mn:00007CC4                 push    eax
.text$mn:00007CC5                 push    ecx
.text$mn:00007CC6                 sub     esp, 10h
.text$mn:00007CC9                 push    ebx
.text$mn:00007CCA                 push    esi
.text$mn:00007CCB                 push    edi
.text$mn:00007CCC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007CD1                 xor     eax, ebp
.text$mn:00007CD3                 push    eax
.text$mn:00007CD4                 lea     eax, [ebp+var_C]
.text$mn:00007CD7                 mov     large fs:0, eax
.text$mn:00007CDD                 mov     [ebp+var_10], esp
.text$mn:00007CE0                 mov     [ebp+var_18], ecx
.text$mn:00007CE3                 mov     eax, [ebp+arg_0]
.text$mn:00007CE6                 or      eax, 0Fh
.text$mn:00007CE9                 mov     [ebp+var_1C], eax
.text$mn:00007CEC                 mov     ecx, [ebp+var_18]
.text$mn:00007CEF                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007CF4                 cmp     eax, [ebp+var_1C]
.text$mn:00007CF7                 jnb     short loc_7D01
.text$mn:00007CF9                 mov     ecx, [ebp+arg_0]
.text$mn:00007CFC                 mov     [ebp+var_1C], ecx
.text$mn:00007CFF                 jmp     short loc_7D53
.text$mn:00007D01 ; ---------------------------------------------------------------------------
.text$mn:00007D01
.text$mn:00007D01 loc_7D01:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00007D01                 mov     edx, [ebp+var_18]
.text$mn:00007D04                 mov     ecx, [edx+18h]
.text$mn:00007D07                 shr     ecx, 1
.text$mn:00007D09                 mov     eax, [ebp+var_1C]
.text$mn:00007D0C                 xor     edx, edx
.text$mn:00007D0E                 mov     esi, 3
.text$mn:00007D13                 div     esi
.text$mn:00007D15                 cmp     ecx, eax
.text$mn:00007D17                 ja      short loc_7D1B
.text$mn:00007D19                 jmp     short loc_7D53
.text$mn:00007D1B ; ---------------------------------------------------------------------------
.text$mn:00007D1B
.text$mn:00007D1B loc_7D1B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00007D1B                 mov     ecx, [ebp+var_18]
.text$mn:00007D1E                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007D23                 mov     edx, [ebp+var_18]
.text$mn:00007D26                 mov     ecx, [edx+18h]
.text$mn:00007D29                 shr     ecx, 1
.text$mn:00007D2B                 sub     eax, ecx
.text$mn:00007D2D                 mov     edx, [ebp+var_18]
.text$mn:00007D30                 cmp     [edx+18h], eax
.text$mn:00007D33                 ja      short loc_7D48
.text$mn:00007D35                 mov     eax, [ebp+var_18]
.text$mn:00007D38                 mov     ecx, [eax+18h]
.text$mn:00007D3B                 shr     ecx, 1
.text$mn:00007D3D                 mov     edx, [ebp+var_18]
.text$mn:00007D40                 add     ecx, [edx+18h]
.text$mn:00007D43                 mov     [ebp+var_1C], ecx
.text$mn:00007D46                 jmp     short loc_7D53
.text$mn:00007D48 ; ---------------------------------------------------------------------------
.text$mn:00007D48
.text$mn:00007D48 loc_7D48:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00007D48                 mov     ecx, [ebp+var_18]
.text$mn:00007D4B                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007D50                 mov     [ebp+var_1C], eax
.text$mn:00007D53
.text$mn:00007D53 loc_7D53:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00007D53                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00007D53                 mov     [ebp+var_4], 0
.text$mn:00007D5A                 mov     eax, [ebp+var_1C]
.text$mn:00007D5D                 add     eax, 1
.text$mn:00007D60                 push    eax
.text$mn:00007D61                 lea     ecx, [ebp+var_11]
.text$mn:00007D64                 push    ecx
.text$mn:00007D65                 mov     ecx, [ebp+var_18]
.text$mn:00007D68                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007D6D                 mov     ecx, eax
.text$mn:00007D6F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00007D74                 mov     [ebp+var_20], eax
.text$mn:00007D77                 jmp     short loc_7DD6
.text$mn:00007D77 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00007D77
.text$mn:00007D79
.text$mn:00007D79 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D79
.text$mn:00007D79
.text$mn:00007D79 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00007D79                                         ; DATA XREF: .xdata$x:0000B510o
.text$mn:00007D79
.text$mn:00007D79 ; FUNCTION CHUNK AT .text$mn:00007DC0 SIZE 00000009 BYTES
.text$mn:00007D79 ; FUNCTION CHUNK AT .text$mn:00007DD0 SIZE 00000006 BYTES
.text$mn:00007D79
.text$mn:00007D79                 mov     [ebp-10h], esp
.text$mn:00007D7C                 mov     edx, [ebp+8]
.text$mn:00007D7F                 mov     [ebp-1Ch], edx
.text$mn:00007D82                 mov     byte ptr [ebp-4], 2
.text$mn:00007D86                 mov     eax, [ebp-1Ch]
.text$mn:00007D89                 add     eax, 1
.text$mn:00007D8C                 push    eax
.text$mn:00007D8D                 lea     ecx, [ebp-12h]
.text$mn:00007D90                 push    ecx
.text$mn:00007D91                 mov     ecx, [ebp-18h]
.text$mn:00007D94                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007D99                 mov     ecx, eax
.text$mn:00007D9B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00007DA0                 mov     [ebp-20h], eax
.text$mn:00007DA3                 jmp     short loc_7DC0
.text$mn:00007DA3 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00007DA3
.text$mn:00007DA5
.text$mn:00007DA5 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DA5
.text$mn:00007DA5 ; Attributes: noreturn
.text$mn:00007DA5
.text$mn:00007DA5 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00007DA5                                         ; DATA XREF: .xdata$x:0000B520o
.text$mn:00007DA5                 push    0               ; Size
.text$mn:00007DA7                 push    1               ; char
.text$mn:00007DA9                 mov     ecx, [ebp-18h]
.text$mn:00007DAC                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007DB1                 push    0
.text$mn:00007DB3                 push    0
.text$mn:00007DB5                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007DB5 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00007DB5
.text$mn:00007DBA ; ---------------------------------------------------------------------------
.text$mn:00007DBA                 mov     eax, offset $LN17
.text$mn:00007DBF                 retn
.text$mn:00007DC0 ; ---------------------------------------------------------------------------
.text$mn:00007DC0 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007DC0
.text$mn:00007DC0 loc_7DC0:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00007DC0                 mov     dword ptr [ebp-4], 1
.text$mn:00007DC7                 jmp     short loc_7DD0
.text$mn:00007DC7 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007DC9
.text$mn:00007DC9 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DC9
.text$mn:00007DC9
.text$mn:00007DC9 $LN17           proc near               ; DATA XREF: .text$mn:00007DBAo
.text$mn:00007DC9                 mov     dword ptr [ebp-4], 1
.text$mn:00007DC9 $LN17           endp ; sp-analysis failed
.text$mn:00007DC9
.text$mn:00007DD0 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007DD0
.text$mn:00007DD0 loc_7DD0:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00007DD0                 mov     eax, offset $LN19
.text$mn:00007DD5                 retn
.text$mn:00007DD5 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007DD6 ; ---------------------------------------------------------------------------
.text$mn:00007DD6 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007DD6
.text$mn:00007DD6 loc_7DD6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00007DD6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007DDD                 jmp     short loc_7DE6
.text$mn:00007DDD ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007DDF
.text$mn:00007DDF ; =============== S U B R O U T I N E =======================================
.text$mn:00007DDF
.text$mn:00007DDF
.text$mn:00007DDF $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_7DD0o
.text$mn:00007DDF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00007DE6
.text$mn:00007DE6 loc_7DE6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00007DE6                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00007DEA                 jbe     short loc_7E05
.text$mn:00007DEC                 mov     edx, [ebp+0Ch]
.text$mn:00007DEF                 push    edx             ; Size
.text$mn:00007DF0                 mov     ecx, [ebp-18h]
.text$mn:00007DF3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007DF8                 push    eax             ; Src
.text$mn:00007DF9                 mov     eax, [ebp-20h]
.text$mn:00007DFC                 push    eax             ; Dst
.text$mn:00007DFD                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00007E02                 add     esp, 0Ch
.text$mn:00007E05
.text$mn:00007E05 loc_7E05:                               ; CODE XREF: $LN19+Bj
.text$mn:00007E05                 push    0               ; Size
.text$mn:00007E07                 push    1               ; char
.text$mn:00007E09                 mov     ecx, [ebp-18h]
.text$mn:00007E0C                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007E11                 lea     ecx, [ebp-20h]
.text$mn:00007E14                 push    ecx             ; int
.text$mn:00007E15                 mov     edx, [ebp-18h]
.text$mn:00007E18                 add     edx, 4
.text$mn:00007E1B                 push    edx             ; void *
.text$mn:00007E1C                 lea     eax, [ebp-13h]
.text$mn:00007E1F                 push    eax
.text$mn:00007E20                 mov     ecx, [ebp-18h]
.text$mn:00007E23                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007E28                 mov     ecx, eax
.text$mn:00007E2A                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00007E2F                 mov     ecx, [ebp-18h]
.text$mn:00007E32                 mov     edx, [ebp-1Ch]
.text$mn:00007E35                 mov     [ecx+18h], edx
.text$mn:00007E38                 mov     eax, [ebp+0Ch]
.text$mn:00007E3B                 push    eax
.text$mn:00007E3C                 mov     ecx, [ebp-18h]
.text$mn:00007E3F                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007E44                 mov     ecx, [ebp-0Ch]
.text$mn:00007E47                 mov     large fs:0, ecx
.text$mn:00007E4E                 pop     ecx
.text$mn:00007E4F                 pop     edi
.text$mn:00007E50                 pop     esi
.text$mn:00007E51                 pop     ebx
.text$mn:00007E52                 mov     esp, ebp
.text$mn:00007E54                 pop     ebp
.text$mn:00007E55                 retn    8
.text$mn:00007E55 $LN19           endp ; sp-analysis failed
.text$mn:00007E55
.text$mn:00007E55 _text$mn        ends
.text$mn:00007E55
.text$x:00007E58 ; ===========================================================================
.text$x:00007E58
.text$x:00007E58 ; Segment type: Pure code
.text$x:00007E58 ; Segment permissions: Read/Execute
.text$x:00007E58 _text$x         segment para public 'CODE' use32
.text$x:00007E58                 assume cs:_text$x
.text$x:00007E58                 ;org 7E58h
.text$x:00007E58 ; COMDAT (pick associative to section at 7CB4)
.text$x:00007E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007E58
.text$x:00007E58 ; =============== S U B R O U T I N E =======================================
.text$x:00007E58
.text$x:00007E58
.text$x:00007E58 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00007E58                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00007E58
.text$x:00007E58 arg_4           = dword ptr  8
.text$x:00007E58
.text$x:00007E58                 mov     edx, [esp+arg_4]
.text$x:00007E5C                 lea     eax, [edx+0Ch]
.text$x:00007E5F                 mov     ecx, [edx-24h]
.text$x:00007E62                 xor     ecx, eax
.text$x:00007E64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007E69                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00007E6E                 jmp     ___CxxFrameHandler3
.text$x:00007E6E __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00007E6E
.text$x:00007E6E ; ---------------------------------------------------------------------------
.text$x:00007E73                 align 4
.text$x:00007E73 _text$x         ends
.text$x:00007E73
.text$mn:00007E74 ; ===========================================================================
.text$mn:00007E74
.text$mn:00007E74 ; Segment type: Pure code
.text$mn:00007E74 ; Segment permissions: Read/Execute
.text$mn:00007E74 _text$mn        segment para public 'CODE' use32
.text$mn:00007E74                 assume cs:_text$mn
.text$mn:00007E74                 ;org 7E74h
.text$mn:00007E74 ; COMDAT (pick any)
.text$mn:00007E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E74
.text$mn:00007E74 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E74
.text$mn:00007E74 ; Attributes: bp-based frame
.text$mn:00007E74
.text$mn:00007E74 ; struct std::_Facet_base *__thiscall std::locale::facet::_Decref(std::locale::facet *__hidden this)
.text$mn:00007E74                 public ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
.text$mn:00007E74 ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ proc near
.text$mn:00007E74                                         ; DATA XREF: .rdata:0000C93Co
.text$mn:00007E74                                         ; .rdata:0000CA28o ...
.text$mn:00007E74
.text$mn:00007E74 var_4           = dword ptr -4
.text$mn:00007E74
.text$mn:00007E74                 push    ebp
.text$mn:00007E75                 mov     ebp, esp
.text$mn:00007E77                 push    ecx
.text$mn:00007E78                 mov     [ebp+var_4], ecx
.text$mn:00007E7B                 mov     eax, [ebp+var_4]
.text$mn:00007E7E                 add     eax, 4
.text$mn:00007E81                 or      ecx, 0FFFFFFFFh
.text$mn:00007E84                 lock xadd [eax], ecx
.text$mn:00007E88                 dec     ecx
.text$mn:00007E89                 jnz     short loc_7E92
.text$mn:00007E8B                 mov     eax, [ebp+var_4]
.text$mn:00007E8E                 jmp     short loc_7E94
.text$mn:00007E90 ; ---------------------------------------------------------------------------
.text$mn:00007E90                 jmp     short loc_7E94
.text$mn:00007E92 ; ---------------------------------------------------------------------------
.text$mn:00007E92
.text$mn:00007E92 loc_7E92:                               ; CODE XREF: std::locale::facet::_Decref(void)+15j
.text$mn:00007E92                 xor     eax, eax
.text$mn:00007E94
.text$mn:00007E94 loc_7E94:                               ; CODE XREF: std::locale::facet::_Decref(void)+1Aj
.text$mn:00007E94                                         ; std::locale::facet::_Decref(void)+1Cj
.text$mn:00007E94                 mov     esp, ebp
.text$mn:00007E96                 pop     ebp
.text$mn:00007E97                 retn
.text$mn:00007E97 ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ endp
.text$mn:00007E97
.text$mn:00007E97 _text$mn        ends
.text$mn:00007E97
.text$mn:00007E98 ; ===========================================================================
.text$mn:00007E98
.text$mn:00007E98 ; Segment type: Pure code
.text$mn:00007E98 ; Segment permissions: Read/Execute
.text$mn:00007E98 _text$mn        segment para public 'CODE' use32
.text$mn:00007E98                 assume cs:_text$mn
.text$mn:00007E98                 ;org 7E98h
.text$mn:00007E98 ; COMDAT (pick any)
.text$mn:00007E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E98
.text$mn:00007E98 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E98
.text$mn:00007E98 ; Attributes: bp-based frame
.text$mn:00007E98
.text$mn:00007E98 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00007E98                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00007E98 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00007E98                                         ; CODE XREF: $LN19+60p
.text$mn:00007E98                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00007E98
.text$mn:00007E98 var_8           = dword ptr -8
.text$mn:00007E98 var_1           = byte ptr -1
.text$mn:00007E98 arg_0           = dword ptr  8
.text$mn:00007E98
.text$mn:00007E98                 push    ebp
.text$mn:00007E99                 mov     ebp, esp
.text$mn:00007E9B                 sub     esp, 8
.text$mn:00007E9E                 mov     [ebp+var_8], ecx
.text$mn:00007EA1                 mov     [ebp+var_1], 0
.text$mn:00007EA5                 mov     eax, [ebp+var_8]
.text$mn:00007EA8                 mov     ecx, [ebp+arg_0]
.text$mn:00007EAB                 mov     [eax+14h], ecx
.text$mn:00007EAE                 lea     edx, [ebp+var_1]
.text$mn:00007EB1                 push    edx
.text$mn:00007EB2                 mov     ecx, [ebp+var_8]
.text$mn:00007EB5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007EBA                 add     eax, [ebp+arg_0]
.text$mn:00007EBD                 push    eax
.text$mn:00007EBE                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:00007EC3                 add     esp, 8
.text$mn:00007EC6                 mov     esp, ebp
.text$mn:00007EC8                 pop     ebp
.text$mn:00007EC9                 retn    4
.text$mn:00007EC9 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00007EC9
.text$mn:00007EC9 _text$mn        ends
.text$mn:00007EC9
.text$mn:00007ECC ; ===========================================================================
.text$mn:00007ECC
.text$mn:00007ECC ; Segment type: Pure code
.text$mn:00007ECC ; Segment permissions: Read/Execute
.text$mn:00007ECC _text$mn        segment para public 'CODE' use32
.text$mn:00007ECC                 assume cs:_text$mn
.text$mn:00007ECC                 ;org 7ECCh
.text$mn:00007ECC ; COMDAT (pick any)
.text$mn:00007ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007ECC
.text$mn:00007ECC ; =============== S U B R O U T I N E =======================================
.text$mn:00007ECC
.text$mn:00007ECC ; Attributes: bp-based frame
.text$mn:00007ECC
.text$mn:00007ECC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00007ECC                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00007ECC ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007ECC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00007ECC
.text$mn:00007ECC var_8           = dword ptr -8
.text$mn:00007ECC var_1           = byte ptr -1
.text$mn:00007ECC
.text$mn:00007ECC                 push    ebp
.text$mn:00007ECD                 mov     ebp, esp
.text$mn:00007ECF                 sub     esp, 8
.text$mn:00007ED2                 mov     [ebp+var_8], ecx
.text$mn:00007ED5                 lea     ecx, [ebp+var_1]
.text$mn:00007ED8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007EDD                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007EE0                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007EE5                 mov     eax, [ebp+var_8]
.text$mn:00007EE8                 mov     ecx, [eax]
.text$mn:00007EEA                 push    ecx
.text$mn:00007EEB                 lea     ecx, [ebp+var_1]
.text$mn:00007EEE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007EF3                 push    1               ; int
.text$mn:00007EF5                 mov     edx, [ebp+var_8]
.text$mn:00007EF8                 mov     eax, [edx]
.text$mn:00007EFA                 push    eax             ; void *
.text$mn:00007EFB                 lea     ecx, [ebp+var_1]
.text$mn:00007EFE                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007F03                 mov     ecx, [ebp+var_8]
.text$mn:00007F06                 mov     dword ptr [ecx], 0
.text$mn:00007F0C                 mov     esp, ebp
.text$mn:00007F0E                 pop     ebp
.text$mn:00007F0F                 retn
.text$mn:00007F0F ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007F0F
.text$mn:00007F0F _text$mn        ends
.text$mn:00007F0F
.text$mn:00007F10 ; ===========================================================================
.text$mn:00007F10
.text$mn:00007F10 ; Segment type: Pure code
.text$mn:00007F10 ; Segment permissions: Read/Execute
.text$mn:00007F10 _text$mn        segment para public 'CODE' use32
.text$mn:00007F10                 assume cs:_text$mn
.text$mn:00007F10                 ;org 7F10h
.text$mn:00007F10 ; COMDAT (pick any)
.text$mn:00007F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F10
.text$mn:00007F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F10
.text$mn:00007F10 ; Attributes: bp-based frame
.text$mn:00007F10
.text$mn:00007F10 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:00007F10                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:00007F10 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:00007F10                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Fp
.text$mn:00007F10                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+33p ...
.text$mn:00007F10
.text$mn:00007F10 var_4           = dword ptr -4
.text$mn:00007F10 arg_0           = dword ptr  8
.text$mn:00007F10
.text$mn:00007F10                 push    ebp
.text$mn:00007F11                 mov     ebp, esp
.text$mn:00007F13                 push    ecx
.text$mn:00007F14                 mov     [ebp+var_4], ecx
.text$mn:00007F17                 mov     ecx, [ebp+arg_0]
.text$mn:00007F1A                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:00007F1F                 mov     eax, [ebp+arg_0]
.text$mn:00007F22                 mov     esp, ebp
.text$mn:00007F24                 pop     ebp
.text$mn:00007F25                 retn    4
.text$mn:00007F25 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00007F25
.text$mn:00007F25 _text$mn        ends
.text$mn:00007F25
.text$mn:00007F28 ; ===========================================================================
.text$mn:00007F28
.text$mn:00007F28 ; Segment type: Pure code
.text$mn:00007F28 ; Segment permissions: Read/Execute
.text$mn:00007F28 _text$mn        segment para public 'CODE' use32
.text$mn:00007F28                 assume cs:_text$mn
.text$mn:00007F28                 ;org 7F28h
.text$mn:00007F28 ; COMDAT (pick any)
.text$mn:00007F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F28
.text$mn:00007F28 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F28
.text$mn:00007F28 ; Attributes: bp-based frame
.text$mn:00007F28
.text$mn:00007F28 ; int __cdecl std::ctype<char>::_Getcat(int, std::locale *)
.text$mn:00007F28                 public ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:00007F28 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$mn:00007F28                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+78p
.text$mn:00007F28
.text$mn:00007F28 var_5C          = byte ptr -5Ch
.text$mn:00007F28 var_28          = dword ptr -28h
.text$mn:00007F28 var_24          = dword ptr -24h
.text$mn:00007F28 var_20          = dword ptr -20h
.text$mn:00007F28 var_1C          = dword ptr -1Ch
.text$mn:00007F28 var_18          = dword ptr -18h
.text$mn:00007F28 var_14          = dword ptr -14h
.text$mn:00007F28 var_10          = dword ptr -10h
.text$mn:00007F28 var_C           = dword ptr -0Ch
.text$mn:00007F28 var_4           = dword ptr -4
.text$mn:00007F28 arg_0           = dword ptr  8
.text$mn:00007F28 arg_4           = dword ptr  0Ch
.text$mn:00007F28
.text$mn:00007F28                 push    ebp
.text$mn:00007F29                 mov     ebp, esp
.text$mn:00007F2B                 push    0FFFFFFFFh
.text$mn:00007F2D                 push    offset __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:00007F32                 mov     eax, large fs:0
.text$mn:00007F38                 push    eax
.text$mn:00007F39                 sub     esp, 50h
.text$mn:00007F3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F41                 xor     eax, ebp
.text$mn:00007F43                 push    eax
.text$mn:00007F44                 lea     eax, [ebp+var_C]
.text$mn:00007F47                 mov     large fs:0, eax
.text$mn:00007F4D                 mov     [ebp+var_10], 0
.text$mn:00007F54                 cmp     [ebp+arg_0], 0
.text$mn:00007F58                 jz      loc_800B
.text$mn:00007F5E                 mov     eax, [ebp+arg_0]
.text$mn:00007F61                 cmp     dword ptr [eax], 0
.text$mn:00007F64                 jnz     loc_800B
.text$mn:00007F6A                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00007F6F                 mov     [ebp+var_1C], eax
.text$mn:00007F72                 push    9A8h            ; int
.text$mn:00007F77                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007F7C                 mov     ecx, [ebp+var_1C]
.text$mn:00007F7F                 push    ecx             ; struct std::_DebugHeapTag_t *
.text$mn:00007F80                 push    18h             ; unsigned int
.text$mn:00007F82                 call    ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00007F87                 add     esp, 10h
.text$mn:00007F8A                 mov     [ebp+var_14], eax
.text$mn:00007F8D                 mov     [ebp+var_4], 0
.text$mn:00007F94                 cmp     [ebp+var_14], 0
.text$mn:00007F98                 jz      short loc_7FD4
.text$mn:00007F9A                 push    0
.text$mn:00007F9C                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00007F9F                 call    ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str(void)
.text$mn:00007FA4                 push    eax             ; char *
.text$mn:00007FA5                 lea     ecx, [ebp+var_5C] ; this
.text$mn:00007FA8                 call    ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo(char const *)
.text$mn:00007FAD                 mov     [ebp+var_20], eax
.text$mn:00007FB0                 mov     edx, [ebp+var_20]
.text$mn:00007FB3                 mov     [ebp+var_24], edx
.text$mn:00007FB6                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007FBA                 mov     eax, [ebp+var_10]
.text$mn:00007FBD                 or      eax, 1
.text$mn:00007FC0                 mov     [ebp+var_10], eax
.text$mn:00007FC3                 mov     ecx, [ebp+var_24]
.text$mn:00007FC6                 push    ecx
.text$mn:00007FC7                 mov     ecx, [ebp+var_14]
.text$mn:00007FCA                 call    ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>(std::_Locinfo const &,uint)
.text$mn:00007FCF                 mov     [ebp+var_18], eax
.text$mn:00007FD2                 jmp     short loc_7FDB
.text$mn:00007FD4 ; ---------------------------------------------------------------------------
.text$mn:00007FD4
.text$mn:00007FD4 loc_7FD4:                               ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+70j
.text$mn:00007FD4                 mov     [ebp+var_18], 0
.text$mn:00007FDB
.text$mn:00007FDB loc_7FDB:                               ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+AAj
.text$mn:00007FDB                 mov     edx, [ebp+var_18]
.text$mn:00007FDE                 mov     [ebp+var_28], edx
.text$mn:00007FE1                 mov     [ebp+var_4], 2
.text$mn:00007FE8                 mov     eax, [ebp+arg_0]
.text$mn:00007FEB                 mov     ecx, [ebp+var_28]
.text$mn:00007FEE                 mov     [eax], ecx
.text$mn:00007FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007FF7                 mov     edx, [ebp+var_10]
.text$mn:00007FFA                 and     edx, 1
.text$mn:00007FFD                 jz      short loc_800B
.text$mn:00007FFF                 and     [ebp+var_10], 0FFFFFFFEh
.text$mn:00008003                 lea     ecx, [ebp+var_5C] ; this
.text$mn:00008006                 call    ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$mn:0000800B
.text$mn:0000800B loc_800B:                               ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+30j
.text$mn:0000800B                                         ; std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+3Cj ...
.text$mn:0000800B                 mov     eax, 2
.text$mn:00008010                 mov     ecx, [ebp+var_C]
.text$mn:00008013                 mov     large fs:0, ecx
.text$mn:0000801A                 pop     ecx
.text$mn:0000801B                 mov     esp, ebp
.text$mn:0000801D                 pop     ebp
.text$mn:0000801E                 retn
.text$mn:0000801E ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$mn:0000801E
.text$mn:0000801E ; ---------------------------------------------------------------------------
.text$mn:0000801F                 align 10h
.text$mn:0000801F _text$mn        ends
.text$mn:0000801F
.text$x:00008020 ; ===========================================================================
.text$x:00008020
.text$x:00008020 ; Segment type: Pure code
.text$x:00008020 ; Segment permissions: Read/Execute
.text$x:00008020 _text$x         segment para public 'CODE' use32
.text$x:00008020                 assume cs:_text$x
.text$x:00008020                 ;org 8020h
.text$x:00008020 ; COMDAT (pick associative to section at 7F28)
.text$x:00008020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008020
.text$x:00008020 ; =============== S U B R O U T I N E =======================================
.text$x:00008020
.text$x:00008020
.text$x:00008020 __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 proc near
.text$x:00008020                                         ; DATA XREF: .xdata$x:0000B804o
.text$x:00008020                 push    9A8h
.text$x:00008025                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$x:0000802A                 mov     eax, [ebp-1Ch]
.text$x:0000802D                 push    eax
.text$x:0000802E                 mov     eax, [ebp-14h]
.text$x:00008031                 push    eax             ; Memory
.text$x:00008032                 call    ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)
.text$x:00008037                 add     esp, 10h
.text$x:0000803A                 retn
.text$x:0000803A __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 endp
.text$x:0000803A
.text$x:0000803B
.text$x:0000803B ; =============== S U B R O U T I N E =======================================
.text$x:0000803B
.text$x:0000803B
.text$x:0000803B __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 proc near
.text$x:0000803B                                         ; DATA XREF: .xdata$x:0000B80Co
.text$x:0000803B                                         ; .xdata$x:0000B814o
.text$x:0000803B                 mov     eax, [ebp-10h]
.text$x:0000803E                 and     eax, 1
.text$x:00008041                 jz      $LN8
.text$x:00008047                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000804B                 lea     ecx, [ebp-5Ch]  ; this
.text$x:0000804E                 jmp     ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$x:00008053 ; ---------------------------------------------------------------------------
.text$x:00008053
.text$x:00008053 $LN8:                                   ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+6j
.text$x:00008053                 retn
.text$x:00008053 __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 endp
.text$x:00008053
.text$x:00008054
.text$x:00008054 ; =============== S U B R O U T I N E =======================================
.text$x:00008054
.text$x:00008054
.text$x:00008054 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$x:00008054                                         ; DATA XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+5o
.text$x:00008054
.text$x:00008054 arg_4           = dword ptr  8
.text$x:00008054
.text$x:00008054                 mov     edx, [esp+arg_4]
.text$x:00008058                 lea     eax, [edx+0Ch]
.text$x:0000805B                 mov     ecx, [edx-54h]
.text$x:0000805E                 xor     ecx, eax
.text$x:00008060                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008065                 mov     eax, offset __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$x:0000806A                 jmp     ___CxxFrameHandler3
.text$x:0000806A __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$x:0000806A
.text$x:0000806A ; ---------------------------------------------------------------------------
.text$x:0000806F                 align 10h
.text$x:0000806F _text$x         ends
.text$x:0000806F
.text$mn:00008070 ; ===========================================================================
.text$mn:00008070
.text$mn:00008070 ; Segment type: Pure code
.text$mn:00008070 ; Segment permissions: Read/Execute
.text$mn:00008070 _text$mn        segment para public 'CODE' use32
.text$mn:00008070                 assume cs:_text$mn
.text$mn:00008070                 ;org 8070h
.text$mn:00008070 ; COMDAT (pick any)
.text$mn:00008070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008070
.text$mn:00008070 ; =============== S U B R O U T I N E =======================================
.text$mn:00008070
.text$mn:00008070 ; Attributes: bp-based frame
.text$mn:00008070
.text$mn:00008070 ; public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const
.text$mn:00008070                 public ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
.text$mn:00008070 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ proc near
.text$mn:00008070                                         ; CODE XREF: std::ctype<char>::_Init(std::_Locinfo const &)+10p
.text$mn:00008070
.text$mn:00008070 var_24          = byte ptr -24h
.text$mn:00008070 var_14          = dword ptr -14h
.text$mn:00008070 var_10          = dword ptr -10h
.text$mn:00008070 var_C           = dword ptr -0Ch
.text$mn:00008070 var_8           = dword ptr -8
.text$mn:00008070 var_4           = dword ptr -4
.text$mn:00008070 arg_0           = dword ptr  8
.text$mn:00008070
.text$mn:00008070                 push    ebp
.text$mn:00008071                 mov     ebp, esp
.text$mn:00008073                 sub     esp, 24h
.text$mn:00008076                 mov     [ebp+var_4], ecx
.text$mn:00008079                 lea     eax, [ebp+var_24]
.text$mn:0000807C                 push    eax
.text$mn:0000807D                 call    __Getctype
.text$mn:00008082                 add     esp, 4
.text$mn:00008085                 mov     ecx, [eax]
.text$mn:00008087                 mov     [ebp+var_14], ecx
.text$mn:0000808A                 mov     edx, [eax+4]
.text$mn:0000808D                 mov     [ebp+var_10], edx
.text$mn:00008090                 mov     ecx, [eax+8]
.text$mn:00008093                 mov     [ebp+var_C], ecx
.text$mn:00008096                 mov     edx, [eax+0Ch]
.text$mn:00008099                 mov     [ebp+var_8], edx
.text$mn:0000809C                 mov     eax, [ebp+arg_0]
.text$mn:0000809F                 mov     ecx, [ebp+var_14]
.text$mn:000080A2                 mov     [eax], ecx
.text$mn:000080A4                 mov     edx, [ebp+var_10]
.text$mn:000080A7                 mov     [eax+4], edx
.text$mn:000080AA                 mov     ecx, [ebp+var_C]
.text$mn:000080AD                 mov     [eax+8], ecx
.text$mn:000080B0                 mov     edx, [ebp+var_8]
.text$mn:000080B3                 mov     [eax+0Ch], edx
.text$mn:000080B6                 mov     eax, [ebp+arg_0]
.text$mn:000080B9                 mov     esp, ebp
.text$mn:000080BB                 pop     ebp
.text$mn:000080BC                 retn    4
.text$mn:000080BC ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ endp
.text$mn:000080BC
.text$mn:000080BC ; ---------------------------------------------------------------------------
.text$mn:000080BF                 align 10h
.text$mn:000080BF _text$mn        ends
.text$mn:000080BF
.text$mn:000080C0 ; ===========================================================================
.text$mn:000080C0
.text$mn:000080C0 ; Segment type: Pure code
.text$mn:000080C0 ; Segment permissions: Read/Execute
.text$mn:000080C0 _text$mn        segment para public 'CODE' use32
.text$mn:000080C0                 assume cs:_text$mn
.text$mn:000080C0                 ;org 80C0h
.text$mn:000080C0 ; COMDAT (pick any)
.text$mn:000080C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080C0
.text$mn:000080C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080C0
.text$mn:000080C0 ; Attributes: bp-based frame
.text$mn:000080C0
.text$mn:000080C0 ; const struct std::locale::facet *__thiscall std::locale::_Getfacet(std::locale *this, unsigned int)
.text$mn:000080C0                 public ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
.text$mn:000080C0 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z proc near
.text$mn:000080C0                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+52p
.text$mn:000080C0
.text$mn:000080C0 var_14          = dword ptr -14h
.text$mn:000080C0 var_10          = dword ptr -10h
.text$mn:000080C0 var_C           = dword ptr -0Ch
.text$mn:000080C0 var_8           = dword ptr -8
.text$mn:000080C0 var_4           = dword ptr -4
.text$mn:000080C0 arg_0           = dword ptr  8
.text$mn:000080C0
.text$mn:000080C0                 push    ebp
.text$mn:000080C1                 mov     ebp, esp
.text$mn:000080C3                 sub     esp, 14h
.text$mn:000080C6                 mov     [ebp+var_4], ecx
.text$mn:000080C9                 mov     eax, [ebp+var_4]
.text$mn:000080CC                 mov     ecx, [eax]
.text$mn:000080CE                 mov     edx, [ebp+arg_0]
.text$mn:000080D1                 cmp     edx, [ecx+0Ch]
.text$mn:000080D4                 jnb     short loc_80E9
.text$mn:000080D6                 mov     eax, [ebp+var_4]
.text$mn:000080D9                 mov     ecx, [eax]
.text$mn:000080DB                 mov     edx, [ecx+8]
.text$mn:000080DE                 mov     eax, [ebp+arg_0]
.text$mn:000080E1                 mov     ecx, [edx+eax*4]
.text$mn:000080E4                 mov     [ebp+var_8], ecx
.text$mn:000080E7                 jmp     short loc_80F0
.text$mn:000080E9 ; ---------------------------------------------------------------------------
.text$mn:000080E9
.text$mn:000080E9 loc_80E9:                               ; CODE XREF: std::locale::_Getfacet(uint)+14j
.text$mn:000080E9                 mov     [ebp+var_8], 0
.text$mn:000080F0
.text$mn:000080F0 loc_80F0:                               ; CODE XREF: std::locale::_Getfacet(uint)+27j
.text$mn:000080F0                 mov     edx, [ebp+var_8]
.text$mn:000080F3                 mov     [ebp+var_C], edx
.text$mn:000080F6                 cmp     [ebp+var_C], 0
.text$mn:000080FA                 jnz     short loc_8109
.text$mn:000080FC                 mov     eax, [ebp+var_4]
.text$mn:000080FF                 mov     ecx, [eax]
.text$mn:00008101                 movzx   edx, byte ptr [ecx+14h]
.text$mn:00008105                 test    edx, edx
.text$mn:00008107                 jnz     short loc_8110
.text$mn:00008109
.text$mn:00008109 loc_8109:                               ; CODE XREF: std::locale::_Getfacet(uint)+3Aj
.text$mn:00008109                 mov     eax, [ebp+var_C]
.text$mn:0000810C                 jmp     short loc_813E
.text$mn:0000810E ; ---------------------------------------------------------------------------
.text$mn:0000810E                 jmp     short loc_813E
.text$mn:00008110 ; ---------------------------------------------------------------------------
.text$mn:00008110
.text$mn:00008110 loc_8110:                               ; CODE XREF: std::locale::_Getfacet(uint)+47j
.text$mn:00008110                 call    ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale(void)
.text$mn:00008115                 mov     [ebp+var_10], eax
.text$mn:00008118                 mov     eax, [ebp+var_10]
.text$mn:0000811B                 mov     ecx, [ebp+arg_0]
.text$mn:0000811E                 cmp     ecx, [eax+0Ch]
.text$mn:00008121                 jnb     short loc_8134
.text$mn:00008123                 mov     edx, [ebp+var_10]
.text$mn:00008126                 mov     eax, [edx+8]
.text$mn:00008129                 mov     ecx, [ebp+arg_0]
.text$mn:0000812C                 mov     edx, [eax+ecx*4]
.text$mn:0000812F                 mov     [ebp+var_14], edx
.text$mn:00008132                 jmp     short loc_813B
.text$mn:00008134 ; ---------------------------------------------------------------------------
.text$mn:00008134
.text$mn:00008134 loc_8134:                               ; CODE XREF: std::locale::_Getfacet(uint)+61j
.text$mn:00008134                 mov     [ebp+var_14], 0
.text$mn:0000813B
.text$mn:0000813B loc_813B:                               ; CODE XREF: std::locale::_Getfacet(uint)+72j
.text$mn:0000813B                 mov     eax, [ebp+var_14]
.text$mn:0000813E
.text$mn:0000813E loc_813E:                               ; CODE XREF: std::locale::_Getfacet(uint)+4Cj
.text$mn:0000813E                                         ; std::locale::_Getfacet(uint)+4Ej
.text$mn:0000813E                 mov     esp, ebp
.text$mn:00008140                 pop     ebp
.text$mn:00008141                 retn    4
.text$mn:00008141 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z endp
.text$mn:00008141
.text$mn:00008141 _text$mn        ends
.text$mn:00008141
.text$mn:00008144 ; ===========================================================================
.text$mn:00008144
.text$mn:00008144 ; Segment type: Pure code
.text$mn:00008144 ; Segment permissions: Read/Execute
.text$mn:00008144 _text$mn        segment para public 'CODE' use32
.text$mn:00008144                 assume cs:_text$mn
.text$mn:00008144                 ;org 8144h
.text$mn:00008144 ; COMDAT (pick any)
.text$mn:00008144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008144
.text$mn:00008144 ; =============== S U B R O U T I N E =======================================
.text$mn:00008144
.text$mn:00008144 ; Attributes: bp-based frame
.text$mn:00008144
.text$mn:00008144 ; private: int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::_Getstate(int)
.text$mn:00008144                 public ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
.text$mn:00008144 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z proc near
.text$mn:00008144                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+50p
.text$mn:00008144
.text$mn:00008144 var_8           = dword ptr -8
.text$mn:00008144 var_4           = dword ptr -4
.text$mn:00008144 arg_0           = dword ptr  8
.text$mn:00008144
.text$mn:00008144                 push    ebp
.text$mn:00008145                 mov     ebp, esp
.text$mn:00008147                 sub     esp, 8
.text$mn:0000814A                 mov     [ebp+var_8], ecx
.text$mn:0000814D                 mov     [ebp+var_4], 0
.text$mn:00008154                 mov     eax, [ebp+arg_0]
.text$mn:00008157                 and     eax, 1
.text$mn:0000815A                 jnz     short loc_8165
.text$mn:0000815C                 mov     ecx, [ebp+var_4]
.text$mn:0000815F                 or      ecx, 4
.text$mn:00008162                 mov     [ebp+var_4], ecx
.text$mn:00008165
.text$mn:00008165 loc_8165:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+16j
.text$mn:00008165                 mov     edx, [ebp+arg_0]
.text$mn:00008168                 and     edx, 2
.text$mn:0000816B                 jnz     short loc_8176
.text$mn:0000816D                 mov     eax, [ebp+var_4]
.text$mn:00008170                 or      eax, 2
.text$mn:00008173                 mov     [ebp+var_4], eax
.text$mn:00008176
.text$mn:00008176 loc_8176:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+27j
.text$mn:00008176                 mov     ecx, [ebp+arg_0]
.text$mn:00008179                 and     ecx, 8
.text$mn:0000817C                 jz      short loc_8187
.text$mn:0000817E                 mov     edx, [ebp+var_4]
.text$mn:00008181                 or      edx, 8
.text$mn:00008184                 mov     [ebp+var_4], edx
.text$mn:00008187
.text$mn:00008187 loc_8187:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+38j
.text$mn:00008187                 mov     eax, [ebp+arg_0]
.text$mn:0000818A                 and     eax, 4
.text$mn:0000818D                 jz      short loc_8198
.text$mn:0000818F                 mov     ecx, [ebp+var_4]
.text$mn:00008192                 or      ecx, 10h
.text$mn:00008195                 mov     [ebp+var_4], ecx
.text$mn:00008198
.text$mn:00008198 loc_8198:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Getstate(int)+49j
.text$mn:00008198                 mov     eax, [ebp+var_4]
.text$mn:0000819B                 mov     esp, ebp
.text$mn:0000819D                 pop     ebp
.text$mn:0000819E                 retn    4
.text$mn:0000819E ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z endp
.text$mn:0000819E
.text$mn:0000819E ; ---------------------------------------------------------------------------
.text$mn:000081A1                 align 4
.text$mn:000081A1 _text$mn        ends
.text$mn:000081A1
.text$mn:000081A4 ; ===========================================================================
.text$mn:000081A4
.text$mn:000081A4 ; Segment type: Pure code
.text$mn:000081A4 ; Segment permissions: Read/Execute
.text$mn:000081A4 _text$mn        segment para public 'CODE' use32
.text$mn:000081A4                 assume cs:_text$mn
.text$mn:000081A4                 ;org 81A4h
.text$mn:000081A4 ; COMDAT (pick any)
.text$mn:000081A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081A4
.text$mn:000081A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081A4
.text$mn:000081A4 ; Attributes: bp-based frame
.text$mn:000081A4
.text$mn:000081A4 ; protected: __int64 __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Gnavail(void)const
.text$mn:000081A4                 public ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
.text$mn:000081A4 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ proc near
.text$mn:000081A4                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+2Bp
.text$mn:000081A4
.text$mn:000081A4 var_8           = dword ptr -8
.text$mn:000081A4 var_4           = dword ptr -4
.text$mn:000081A4
.text$mn:000081A4                 push    ebp
.text$mn:000081A5                 mov     ebp, esp
.text$mn:000081A7                 sub     esp, 8
.text$mn:000081AA                 mov     [ebp+var_4], ecx
.text$mn:000081AD                 mov     eax, [ebp+var_4]
.text$mn:000081B0                 mov     ecx, [eax+1Ch]
.text$mn:000081B3                 cmp     dword ptr [ecx], 0
.text$mn:000081B6                 jz      short loc_81C5
.text$mn:000081B8                 mov     edx, [ebp+var_4]
.text$mn:000081BB                 mov     eax, [edx+2Ch]
.text$mn:000081BE                 mov     ecx, [eax]
.text$mn:000081C0                 mov     [ebp+var_8], ecx
.text$mn:000081C3                 jmp     short loc_81CC
.text$mn:000081C5 ; ---------------------------------------------------------------------------
.text$mn:000081C5
.text$mn:000081C5 loc_81C5:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Gnavail(void)+12j
.text$mn:000081C5                 mov     [ebp+var_8], 0
.text$mn:000081CC
.text$mn:000081CC loc_81CC:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Gnavail(void)+1Fj
.text$mn:000081CC                 mov     eax, [ebp+var_8]
.text$mn:000081CF                 cdq
.text$mn:000081D0                 mov     esp, ebp
.text$mn:000081D2                 pop     ebp
.text$mn:000081D3                 retn
.text$mn:000081D3 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ endp
.text$mn:000081D3
.text$mn:000081D3 _text$mn        ends
.text$mn:000081D3
.text$mn:000081D4 ; ===========================================================================
.text$mn:000081D4
.text$mn:000081D4 ; Segment type: Pure code
.text$mn:000081D4 ; Segment permissions: Read/Execute
.text$mn:000081D4 _text$mn        segment para public 'CODE' use32
.text$mn:000081D4                 assume cs:_text$mn
.text$mn:000081D4                 ;org 81D4h
.text$mn:000081D4 ; COMDAT (pick any)
.text$mn:000081D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081D4
.text$mn:000081D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081D4
.text$mn:000081D4 ; Attributes: bp-based frame
.text$mn:000081D4
.text$mn:000081D4 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Gninc(void)
.text$mn:000081D4                 public ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
.text$mn:000081D4 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ proc near
.text$mn:000081D4                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::uflow(void)+45p
.text$mn:000081D4
.text$mn:000081D4 var_8           = dword ptr -8
.text$mn:000081D4 var_4           = dword ptr -4
.text$mn:000081D4
.text$mn:000081D4                 push    ebp
.text$mn:000081D5                 mov     ebp, esp
.text$mn:000081D7                 sub     esp, 8
.text$mn:000081DA                 mov     [ebp+var_4], ecx
.text$mn:000081DD                 mov     eax, [ebp+var_4]
.text$mn:000081E0                 mov     ecx, [eax+2Ch]
.text$mn:000081E3                 mov     edx, [ecx]
.text$mn:000081E5                 sub     edx, 1
.text$mn:000081E8                 mov     eax, [ebp+var_4]
.text$mn:000081EB                 mov     ecx, [eax+2Ch]
.text$mn:000081EE                 mov     [ecx], edx
.text$mn:000081F0                 mov     edx, [ebp+var_4]
.text$mn:000081F3                 mov     eax, [edx+1Ch]
.text$mn:000081F6                 mov     ecx, [eax]
.text$mn:000081F8                 mov     [ebp+var_8], ecx
.text$mn:000081FB                 mov     edx, [ebp+var_4]
.text$mn:000081FE                 mov     eax, [edx+1Ch]
.text$mn:00008201                 mov     ecx, [eax]
.text$mn:00008203                 add     ecx, 1
.text$mn:00008206                 mov     edx, [ebp+var_4]
.text$mn:00008209                 mov     eax, [edx+1Ch]
.text$mn:0000820C                 mov     [eax], ecx
.text$mn:0000820E                 mov     eax, [ebp+var_8]
.text$mn:00008211                 mov     esp, ebp
.text$mn:00008213                 pop     ebp
.text$mn:00008214                 retn
.text$mn:00008214 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ endp
.text$mn:00008214
.text$mn:00008214 ; ---------------------------------------------------------------------------
.text$mn:00008215                 align 4
.text$mn:00008215 _text$mn        ends
.text$mn:00008215
.text$mn:00008218 ; ===========================================================================
.text$mn:00008218
.text$mn:00008218 ; Segment type: Pure code
.text$mn:00008218 ; Segment permissions: Read/Execute
.text$mn:00008218 _text$mn        segment para public 'CODE' use32
.text$mn:00008218                 assume cs:_text$mn
.text$mn:00008218                 ;org 8218h
.text$mn:00008218 ; COMDAT (pick any)
.text$mn:00008218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008218
.text$mn:00008218 ; =============== S U B R O U T I N E =======================================
.text$mn:00008218
.text$mn:00008218 ; Attributes: bp-based frame
.text$mn:00008218
.text$mn:00008218 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00008218                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00008218 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00008218                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Dp
.text$mn:00008218                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+8Cp ...
.text$mn:00008218
.text$mn:00008218 var_C           = dword ptr -0Ch
.text$mn:00008218 Size            = dword ptr -8
.text$mn:00008218 var_4           = dword ptr -4
.text$mn:00008218 arg_0           = dword ptr  8
.text$mn:00008218 arg_4           = byte ptr  0Ch
.text$mn:00008218
.text$mn:00008218                 push    ebp
.text$mn:00008219                 mov     ebp, esp
.text$mn:0000821B                 sub     esp, 0Ch
.text$mn:0000821E                 mov     [ebp+var_4], ecx
.text$mn:00008221                 mov     ecx, [ebp+var_4]
.text$mn:00008224                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008229                 cmp     eax, [ebp+arg_0]
.text$mn:0000822C                 jnb     short loc_8236
.text$mn:0000822E                 mov     ecx, [ebp+var_4]
.text$mn:00008231                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008236
.text$mn:00008236 loc_8236:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00008236                 mov     eax, [ebp+var_4]
.text$mn:00008239                 mov     ecx, [eax+18h]
.text$mn:0000823C                 cmp     ecx, [ebp+arg_0]
.text$mn:0000823F                 jnb     short loc_8256
.text$mn:00008241                 mov     edx, [ebp+var_4]
.text$mn:00008244                 mov     eax, [edx+14h]
.text$mn:00008247                 push    eax
.text$mn:00008248                 mov     ecx, [ebp+arg_0]
.text$mn:0000824B                 push    ecx
.text$mn:0000824C                 mov     ecx, [ebp+var_4]
.text$mn:0000824F                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00008254                 jmp     short loc_82A0
.text$mn:00008256 ; ---------------------------------------------------------------------------
.text$mn:00008256
.text$mn:00008256 loc_8256:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00008256                 movzx   edx, [ebp+arg_4]
.text$mn:0000825A                 test    edx, edx
.text$mn:0000825C                 jz      short loc_8290
.text$mn:0000825E                 cmp     [ebp+arg_0], 10h
.text$mn:00008262                 jnb     short loc_8290
.text$mn:00008264                 mov     eax, [ebp+var_4]
.text$mn:00008267                 mov     ecx, [ebp+arg_0]
.text$mn:0000826A                 cmp     ecx, [eax+14h]
.text$mn:0000826D                 jnb     short loc_8277
.text$mn:0000826F                 mov     edx, [ebp+arg_0]
.text$mn:00008272                 mov     [ebp+Size], edx
.text$mn:00008275                 jmp     short loc_8280
.text$mn:00008277 ; ---------------------------------------------------------------------------
.text$mn:00008277
.text$mn:00008277 loc_8277:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00008277                 mov     eax, [ebp+var_4]
.text$mn:0000827A                 mov     ecx, [eax+14h]
.text$mn:0000827D                 mov     [ebp+Size], ecx
.text$mn:00008280
.text$mn:00008280 loc_8280:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00008280                 mov     edx, [ebp+Size]
.text$mn:00008283                 push    edx             ; Size
.text$mn:00008284                 push    1               ; char
.text$mn:00008286                 mov     ecx, [ebp+var_4]
.text$mn:00008289                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000828E                 jmp     short loc_82A0
.text$mn:00008290 ; ---------------------------------------------------------------------------
.text$mn:00008290
.text$mn:00008290 loc_8290:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00008290                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00008290                 cmp     [ebp+arg_0], 0
.text$mn:00008294                 jnz     short loc_82A0
.text$mn:00008296                 push    0
.text$mn:00008298                 mov     ecx, [ebp+var_4]
.text$mn:0000829B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000082A0
.text$mn:000082A0 loc_82A0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:000082A0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:000082A0                 cmp     [ebp+arg_0], 0
.text$mn:000082A4                 jbe     short loc_82AF
.text$mn:000082A6                 mov     [ebp+var_C], 1
.text$mn:000082AD                 jmp     short loc_82B6
.text$mn:000082AF ; ---------------------------------------------------------------------------
.text$mn:000082AF
.text$mn:000082AF loc_82AF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:000082AF                 mov     [ebp+var_C], 0
.text$mn:000082B6
.text$mn:000082B6 loc_82B6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:000082B6                 mov     al, byte ptr [ebp+var_C]
.text$mn:000082B9                 mov     esp, ebp
.text$mn:000082BB                 pop     ebp
.text$mn:000082BC                 retn    8
.text$mn:000082BC ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:000082BC
.text$mn:000082BC ; ---------------------------------------------------------------------------
.text$mn:000082BF                 align 10h
.text$mn:000082BF _text$mn        ends
.text$mn:000082BF
.text$mn:000082C0 ; ===========================================================================
.text$mn:000082C0
.text$mn:000082C0 ; Segment type: Pure code
.text$mn:000082C0 ; Segment permissions: Read/Execute
.text$mn:000082C0 _text$mn        segment para public 'CODE' use32
.text$mn:000082C0                 assume cs:_text$mn
.text$mn:000082C0                 ;org 82C0h
.text$mn:000082C0 ; COMDAT (pick any)
.text$mn:000082C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082C0
.text$mn:000082C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000082C0
.text$mn:000082C0 ; Attributes: bp-based frame
.text$mn:000082C0
.text$mn:000082C0 ; void __thiscall std::locale::facet::_Incref(std::locale::facet *__hidden this)
.text$mn:000082C0                 public ?_Incref@facet@locale@std@@UAEXXZ
.text$mn:000082C0 ?_Incref@facet@locale@std@@UAEXXZ proc near ; DATA XREF: .rdata:0000C938o
.text$mn:000082C0                                         ; .rdata:0000CA24o ...
.text$mn:000082C0
.text$mn:000082C0 var_4           = dword ptr -4
.text$mn:000082C0
.text$mn:000082C0                 push    ebp
.text$mn:000082C1                 mov     ebp, esp
.text$mn:000082C3                 push    ecx
.text$mn:000082C4                 mov     [ebp+var_4], ecx
.text$mn:000082C7                 mov     eax, [ebp+var_4]
.text$mn:000082CA                 add     eax, 4
.text$mn:000082CD                 mov     ecx, 1
.text$mn:000082D2                 lock xadd [eax], ecx
.text$mn:000082D6                 mov     esp, ebp
.text$mn:000082D8                 pop     ebp
.text$mn:000082D9                 retn
.text$mn:000082D9 ?_Incref@facet@locale@std@@UAEXXZ endp
.text$mn:000082D9
.text$mn:000082D9 ; ---------------------------------------------------------------------------
.text$mn:000082DA                 align 4
.text$mn:000082DA _text$mn        ends
.text$mn:000082DA
.text$mn:000082DC ; ===========================================================================
.text$mn:000082DC
.text$mn:000082DC ; Segment type: Pure code
.text$mn:000082DC ; Segment permissions: Read/Execute
.text$mn:000082DC _text$mn        segment para public 'CODE' use32
.text$mn:000082DC                 assume cs:_text$mn
.text$mn:000082DC                 ;org 82DCh
.text$mn:000082DC ; COMDAT (pick any)
.text$mn:000082DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082DC
.text$mn:000082DC ; =============== S U B R O U T I N E =======================================
.text$mn:000082DC
.text$mn:000082DC ; Attributes: bp-based frame
.text$mn:000082DC
.text$mn:000082DC ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Init(void)
.text$mn:000082DC                 public ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
.text$mn:000082DC ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ proc near
.text$mn:000082DC                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+52p
.text$mn:000082DC
.text$mn:000082DC var_4           = dword ptr -4
.text$mn:000082DC
.text$mn:000082DC                 push    ebp
.text$mn:000082DD                 mov     ebp, esp
.text$mn:000082DF                 push    ecx
.text$mn:000082E0                 mov     [ebp+var_4], ecx
.text$mn:000082E3                 mov     eax, [ebp+var_4]
.text$mn:000082E6                 add     eax, 4
.text$mn:000082E9                 mov     ecx, [ebp+var_4]
.text$mn:000082EC                 mov     [ecx+0Ch], eax
.text$mn:000082EF                 mov     edx, [ebp+var_4]
.text$mn:000082F2                 add     edx, 8
.text$mn:000082F5                 mov     eax, [ebp+var_4]
.text$mn:000082F8                 mov     [eax+10h], edx
.text$mn:000082FB                 mov     ecx, [ebp+var_4]
.text$mn:000082FE                 add     ecx, 14h
.text$mn:00008301                 mov     edx, [ebp+var_4]
.text$mn:00008304                 mov     [edx+1Ch], ecx
.text$mn:00008307                 mov     eax, [ebp+var_4]
.text$mn:0000830A                 add     eax, 18h
.text$mn:0000830D                 mov     ecx, [ebp+var_4]
.text$mn:00008310                 mov     [ecx+20h], eax
.text$mn:00008313                 mov     edx, [ebp+var_4]
.text$mn:00008316                 add     edx, 24h ; '$'
.text$mn:00008319                 mov     eax, [ebp+var_4]
.text$mn:0000831C                 mov     [eax+2Ch], edx
.text$mn:0000831F                 mov     ecx, [ebp+var_4]
.text$mn:00008322                 add     ecx, 28h ; '('
.text$mn:00008325                 mov     edx, [ebp+var_4]
.text$mn:00008328                 mov     [edx+30h], ecx
.text$mn:0000832B                 push    0
.text$mn:0000832D                 push    0
.text$mn:0000832F                 mov     ecx, [ebp+var_4]
.text$mn:00008332                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *)
.text$mn:00008337                 push    0
.text$mn:00008339                 push    0
.text$mn:0000833B                 push    0
.text$mn:0000833D                 mov     ecx, [ebp+var_4]
.text$mn:00008340                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:00008345                 mov     esp, ebp
.text$mn:00008347                 pop     ebp
.text$mn:00008348                 retn
.text$mn:00008348 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ endp
.text$mn:00008348
.text$mn:00008348 ; ---------------------------------------------------------------------------
.text$mn:00008349                 align 4
.text$mn:00008349 _text$mn        ends
.text$mn:00008349
.text$mn:0000834C ; ===========================================================================
.text$mn:0000834C
.text$mn:0000834C ; Segment type: Pure code
.text$mn:0000834C ; Segment permissions: Read/Execute
.text$mn:0000834C _text$mn        segment para public 'CODE' use32
.text$mn:0000834C                 assume cs:_text$mn
.text$mn:0000834C                 ;org 834Ch
.text$mn:0000834C ; COMDAT (pick any)
.text$mn:0000834C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000834C
.text$mn:0000834C ; =============== S U B R O U T I N E =======================================
.text$mn:0000834C
.text$mn:0000834C ; Attributes: bp-based frame
.text$mn:0000834C
.text$mn:0000834C ; int __stdcall std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(void *Src, size_t Size, int)
.text$mn:0000834C                 public ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
.text$mn:0000834C ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z proc near
.text$mn:0000834C                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+5Dp
.text$mn:0000834C
.text$mn:0000834C var_C           = dword ptr -0Ch
.text$mn:0000834C Dst             = dword ptr -8
.text$mn:0000834C var_4           = dword ptr -4
.text$mn:0000834C Src             = dword ptr  8
.text$mn:0000834C Size            = dword ptr  0Ch
.text$mn:0000834C arg_8           = dword ptr  10h
.text$mn:0000834C
.text$mn:0000834C                 push    ebp
.text$mn:0000834D                 mov     ebp, esp
.text$mn:0000834F                 sub     esp, 0Ch
.text$mn:00008352                 mov     [ebp+var_4], ecx
.text$mn:00008355                 mov     eax, [ebp+var_4]
.text$mn:00008358                 mov     dword ptr [eax+38h], 0
.text$mn:0000835F                 mov     ecx, [ebp+var_4]
.text$mn:00008362                 mov     edx, [ebp+arg_8]
.text$mn:00008365                 mov     [ecx+3Ch], edx
.text$mn:00008368                 cmp     [ebp+Size], 0
.text$mn:0000836C                 jz      loc_8443
.text$mn:00008372                 mov     eax, [ebp+var_4]
.text$mn:00008375                 mov     ecx, [eax+3Ch]
.text$mn:00008378                 and     ecx, 6
.text$mn:0000837B                 cmp     ecx, 6
.text$mn:0000837E                 jz      loc_8443
.text$mn:00008384                 mov     edx, [ebp+Size]
.text$mn:00008387                 push    edx
.text$mn:00008388                 mov     ecx, [ebp+var_4]
.text$mn:0000838B                 add     ecx, 40h ; '@'
.text$mn:0000838E                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00008393                 mov     [ebp+Dst], eax
.text$mn:00008396                 mov     eax, [ebp+Size]
.text$mn:00008399                 push    eax             ; Size
.text$mn:0000839A                 mov     ecx, [ebp+Src]
.text$mn:0000839D                 push    ecx             ; Src
.text$mn:0000839E                 mov     edx, [ebp+Dst]
.text$mn:000083A1                 push    edx             ; Dst
.text$mn:000083A2                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000083A7                 add     esp, 0Ch
.text$mn:000083AA                 mov     eax, [ebp+Dst]
.text$mn:000083AD                 add     eax, [ebp+Size]
.text$mn:000083B0                 mov     ecx, [ebp+var_4]
.text$mn:000083B3                 mov     [ecx+38h], eax
.text$mn:000083B6                 mov     edx, [ebp+var_4]
.text$mn:000083B9                 mov     eax, [edx+3Ch]
.text$mn:000083BC                 and     eax, 4
.text$mn:000083BF                 jnz     short loc_83D8
.text$mn:000083C1                 mov     ecx, [ebp+Dst]
.text$mn:000083C4                 add     ecx, [ebp+Size]
.text$mn:000083C7                 push    ecx
.text$mn:000083C8                 mov     edx, [ebp+Dst]
.text$mn:000083CB                 push    edx
.text$mn:000083CC                 mov     eax, [ebp+Dst]
.text$mn:000083CF                 push    eax
.text$mn:000083D0                 mov     ecx, [ebp+var_4]
.text$mn:000083D3                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:000083D8
.text$mn:000083D8 loc_83D8:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+73j
.text$mn:000083D8                 mov     ecx, [ebp+var_4]
.text$mn:000083DB                 mov     edx, [ecx+3Ch]
.text$mn:000083DE                 and     edx, 2
.text$mn:000083E1                 jnz     short loc_8434
.text$mn:000083E3                 mov     eax, [ebp+var_4]
.text$mn:000083E6                 mov     ecx, [eax+3Ch]
.text$mn:000083E9                 and     ecx, 18h
.text$mn:000083EC                 jz      short loc_83F9
.text$mn:000083EE                 mov     edx, [ebp+Dst]
.text$mn:000083F1                 add     edx, [ebp+Size]
.text$mn:000083F4                 mov     [ebp+var_C], edx
.text$mn:000083F7                 jmp     short loc_83FF
.text$mn:000083F9 ; ---------------------------------------------------------------------------
.text$mn:000083F9
.text$mn:000083F9 loc_83F9:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+A0j
.text$mn:000083F9                 mov     eax, [ebp+Dst]
.text$mn:000083FC                 mov     [ebp+var_C], eax
.text$mn:000083FF
.text$mn:000083FF loc_83FF:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+ABj
.text$mn:000083FF                 mov     ecx, [ebp+Dst]
.text$mn:00008402                 add     ecx, [ebp+Size]
.text$mn:00008405                 push    ecx
.text$mn:00008406                 mov     edx, [ebp+var_C]
.text$mn:00008409                 push    edx
.text$mn:0000840A                 mov     eax, [ebp+Dst]
.text$mn:0000840D                 push    eax
.text$mn:0000840E                 mov     ecx, [ebp+var_4]
.text$mn:00008411                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
.text$mn:00008416                 mov     ecx, [ebp+var_4]
.text$mn:00008419                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000841E                 test    eax, eax
.text$mn:00008420                 jnz     short loc_8434
.text$mn:00008422                 mov     ecx, [ebp+Dst]
.text$mn:00008425                 push    ecx
.text$mn:00008426                 push    0
.text$mn:00008428                 mov     edx, [ebp+Dst]
.text$mn:0000842B                 push    edx
.text$mn:0000842C                 mov     ecx, [ebp+var_4]
.text$mn:0000842F                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:00008434
.text$mn:00008434 loc_8434:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+95j
.text$mn:00008434                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+D4j
.text$mn:00008434                 mov     eax, [ebp+var_4]
.text$mn:00008437                 mov     ecx, [eax+3Ch]
.text$mn:0000843A                 or      ecx, 1
.text$mn:0000843D                 mov     edx, [ebp+var_4]
.text$mn:00008440                 mov     [edx+3Ch], ecx
.text$mn:00008443
.text$mn:00008443 loc_8443:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+20j
.text$mn:00008443                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+32j
.text$mn:00008443                 mov     esp, ebp
.text$mn:00008445                 pop     ebp
.text$mn:00008446                 retn    0Ch
.text$mn:00008446 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z endp
.text$mn:00008446
.text$mn:00008446 ; ---------------------------------------------------------------------------
.text$mn:00008449                 align 4
.text$mn:00008449 _text$mn        ends
.text$mn:00008449
.text$mn:0000844C ; ===========================================================================
.text$mn:0000844C
.text$mn:0000844C ; Segment type: Pure code
.text$mn:0000844C ; Segment permissions: Read/Execute
.text$mn:0000844C _text$mn        segment para public 'CODE' use32
.text$mn:0000844C                 assume cs:_text$mn
.text$mn:0000844C                 ;org 844Ch
.text$mn:0000844C ; COMDAT (pick any)
.text$mn:0000844C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000844C
.text$mn:0000844C ; =============== S U B R O U T I N E =======================================
.text$mn:0000844C
.text$mn:0000844C ; Attributes: bp-based frame
.text$mn:0000844C
.text$mn:0000844C ; protected: void __thiscall std::ctype<char>::_Init(class std::_Locinfo const &)
.text$mn:0000844C                 public ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
.text$mn:0000844C ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z proc near
.text$mn:0000844C                                         ; CODE XREF: std::ctype<char>::ctype<char>(std::_Locinfo const &,uint)+49p
.text$mn:0000844C
.text$mn:0000844C var_14          = byte ptr -14h
.text$mn:0000844C var_4           = dword ptr -4
.text$mn:0000844C arg_0           = dword ptr  8
.text$mn:0000844C
.text$mn:0000844C                 push    ebp
.text$mn:0000844D                 mov     ebp, esp
.text$mn:0000844F                 sub     esp, 14h
.text$mn:00008452                 mov     [ebp+var_4], ecx
.text$mn:00008455                 lea     eax, [ebp+var_14]
.text$mn:00008458                 push    eax
.text$mn:00008459                 mov     ecx, [ebp+arg_0]
.text$mn:0000845C                 call    ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype(void)
.text$mn:00008461                 mov     ecx, [ebp+var_4]
.text$mn:00008464                 add     ecx, 8
.text$mn:00008467                 mov     edx, [eax]
.text$mn:00008469                 mov     [ecx], edx
.text$mn:0000846B                 mov     edx, [eax+4]
.text$mn:0000846E                 mov     [ecx+4], edx
.text$mn:00008471                 mov     edx, [eax+8]
.text$mn:00008474                 mov     [ecx+8], edx
.text$mn:00008477                 mov     eax, [eax+0Ch]
.text$mn:0000847A                 mov     [ecx+0Ch], eax
.text$mn:0000847D                 mov     esp, ebp
.text$mn:0000847F                 pop     ebp
.text$mn:00008480                 retn    4
.text$mn:00008480 ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z endp
.text$mn:00008480
.text$mn:00008480 ; ---------------------------------------------------------------------------
.text$mn:00008483                 align 4
.text$mn:00008483 _text$mn        ends
.text$mn:00008483
.text$mn:00008484 ; ===========================================================================
.text$mn:00008484
.text$mn:00008484 ; Segment type: Pure code
.text$mn:00008484 ; Segment permissions: Read/Execute
.text$mn:00008484 _text$mn        segment para public 'CODE' use32
.text$mn:00008484                 assume cs:_text$mn
.text$mn:00008484                 ;org 8484h
.text$mn:00008484 ; COMDAT (pick any)
.text$mn:00008484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008484
.text$mn:00008484 ; =============== S U B R O U T I N E =======================================
.text$mn:00008484
.text$mn:00008484 ; Attributes: bp-based frame
.text$mn:00008484
.text$mn:00008484 ; void __thiscall std::ios_base::_Init(std::ios_base *__hidden this)
.text$mn:00008484                 public ?_Init@ios_base@std@@IAEXXZ
.text$mn:00008484 ?_Init@ios_base@std@@IAEXXZ proc near   ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)+Ap
.text$mn:00008484
.text$mn:00008484 var_C           = dword ptr -0Ch
.text$mn:00008484 var_8           = dword ptr -8
.text$mn:00008484 var_4           = dword ptr -4
.text$mn:00008484
.text$mn:00008484                 push    ebp
.text$mn:00008485                 mov     ebp, esp
.text$mn:00008487                 sub     esp, 0Ch
.text$mn:0000848A                 mov     [ebp+var_4], ecx
.text$mn:0000848D                 mov     eax, [ebp+var_4]
.text$mn:00008490                 mov     dword ptr [eax+30h], 0
.text$mn:00008497                 mov     ecx, [ebp+var_4]
.text$mn:0000849A                 mov     dword ptr [ecx+8], 0
.text$mn:000084A1                 mov     edx, [ebp+var_4]
.text$mn:000084A4                 mov     dword ptr [edx+10h], 0
.text$mn:000084AB                 mov     eax, [ebp+var_4]
.text$mn:000084AE                 mov     dword ptr [eax+14h], 201h
.text$mn:000084B5                 mov     ecx, [ebp+var_4]
.text$mn:000084B8                 mov     dword ptr [ecx+18h], 6
.text$mn:000084BF                 mov     dword ptr [ecx+1Ch], 0
.text$mn:000084C6                 mov     edx, [ebp+var_4]
.text$mn:000084C9                 mov     dword ptr [edx+20h], 0
.text$mn:000084D0                 mov     dword ptr [edx+24h], 0
.text$mn:000084D7                 mov     eax, [ebp+var_4]
.text$mn:000084DA                 mov     dword ptr [eax+28h], 0
.text$mn:000084E1                 mov     ecx, [ebp+var_4]
.text$mn:000084E4                 mov     dword ptr [ecx+2Ch], 0
.text$mn:000084EB                 push    0               ; int
.text$mn:000084ED                 mov     ecx, [ebp+var_4] ; this
.text$mn:000084F0                 call    ?clear@ios_base@std@@QAEXH@Z ; std::ios_base::clear(int)
.text$mn:000084F5                 push    219h            ; int
.text$mn:000084FA                 push    offset ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000084FF                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:00008504                 push    eax             ; struct std::_DebugHeapTag_t *
.text$mn:00008505                 push    4               ; unsigned int
.text$mn:00008507                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:0000850C                 add     esp, 10h
.text$mn:0000850F                 mov     [ebp+var_8], eax
.text$mn:00008512                 cmp     [ebp+var_8], 0
.text$mn:00008516                 jz      short loc_8525
.text$mn:00008518                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000851B                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00008520                 mov     [ebp+var_C], eax
.text$mn:00008523                 jmp     short loc_852C
.text$mn:00008525 ; ---------------------------------------------------------------------------
.text$mn:00008525
.text$mn:00008525 loc_8525:                               ; CODE XREF: std::ios_base::_Init(void)+92j
.text$mn:00008525                 mov     [ebp+var_C], 0
.text$mn:0000852C
.text$mn:0000852C loc_852C:                               ; CODE XREF: std::ios_base::_Init(void)+9Fj
.text$mn:0000852C                 mov     edx, [ebp+var_4]
.text$mn:0000852F                 mov     eax, [ebp+var_C]
.text$mn:00008532                 mov     [edx+30h], eax
.text$mn:00008535                 mov     esp, ebp
.text$mn:00008537                 pop     ebp
.text$mn:00008538                 retn
.text$mn:00008538 ?_Init@ios_base@std@@IAEXXZ endp
.text$mn:00008538
.text$mn:00008538 ; ---------------------------------------------------------------------------
.text$mn:00008539                 align 4
.text$mn:00008539 _text$mn        ends
.text$mn:00008539
.text$mn:0000853C ; ===========================================================================
.text$mn:0000853C
.text$mn:0000853C ; Segment type: Pure code
.text$mn:0000853C ; Segment permissions: Read/Execute
.text$mn:0000853C _text$mn        segment para public 'CODE' use32
.text$mn:0000853C                 assume cs:_text$mn
.text$mn:0000853C                 ;org 853Ch
.text$mn:0000853C ; COMDAT (pick any)
.text$mn:0000853C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000853C
.text$mn:0000853C ; =============== S U B R O U T I N E =======================================
.text$mn:0000853C
.text$mn:0000853C ; Attributes: bp-based frame
.text$mn:0000853C
.text$mn:0000853C ; void __cdecl std::_Init_atomic_counter(unsigned __int32 *, unsigned __int32)
.text$mn:0000853C                 public ?_Init_atomic_counter@std@@YAXAAKK@Z
.text$mn:0000853C ?_Init_atomic_counter@std@@YAXAAKK@Z proc near
.text$mn:0000853C                                         ; CODE XREF: std::locale::facet::facet(uint)+49p
.text$mn:0000853C
.text$mn:0000853C arg_0           = dword ptr  8
.text$mn:0000853C arg_4           = dword ptr  0Ch
.text$mn:0000853C
.text$mn:0000853C                 push    ebp
.text$mn:0000853D                 mov     ebp, esp
.text$mn:0000853F                 mov     eax, [ebp+arg_0]
.text$mn:00008542                 mov     ecx, [ebp+arg_4]
.text$mn:00008545                 mov     [eax], ecx
.text$mn:00008547                 pop     ebp
.text$mn:00008548                 retn
.text$mn:00008548 ?_Init_atomic_counter@std@@YAXAAKK@Z endp
.text$mn:00008548
.text$mn:00008548 ; ---------------------------------------------------------------------------
.text$mn:00008549                 align 4
.text$mn:00008549 _text$mn        ends
.text$mn:00008549
.text$mn:0000854C ; ===========================================================================
.text$mn:0000854C
.text$mn:0000854C ; Segment type: Pure code
.text$mn:0000854C ; Segment permissions: Read/Execute
.text$mn:0000854C _text$mn        segment para public 'CODE' use32
.text$mn:0000854C                 assume cs:_text$mn
.text$mn:0000854C                 ;org 854Ch
.text$mn:0000854C ; COMDAT (pick any)
.text$mn:0000854C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000854C
.text$mn:0000854C ; =============== S U B R O U T I N E =======================================
.text$mn:0000854C
.text$mn:0000854C ; Attributes: bp-based frame
.text$mn:0000854C
.text$mn:0000854C ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:0000854C                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:0000854C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:0000854C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+2Cp
.text$mn:0000854C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:0000854C
.text$mn:0000854C var_4           = dword ptr -4
.text$mn:0000854C arg_0           = dword ptr  8
.text$mn:0000854C
.text$mn:0000854C                 push    ebp
.text$mn:0000854D                 mov     ebp, esp
.text$mn:0000854F                 push    ecx
.text$mn:00008550                 mov     [ebp+var_4], ecx
.text$mn:00008553                 cmp     [ebp+arg_0], 0
.text$mn:00008557                 jz      short loc_8579
.text$mn:00008559                 mov     ecx, [ebp+var_4]
.text$mn:0000855C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008561                 cmp     [ebp+arg_0], eax
.text$mn:00008564                 jb      short loc_8579
.text$mn:00008566                 mov     ecx, [ebp+var_4]
.text$mn:00008569                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000856E                 mov     ecx, [ebp+var_4]
.text$mn:00008571                 add     eax, [ecx+14h]
.text$mn:00008574                 cmp     eax, [ebp+arg_0]
.text$mn:00008577                 ja      short loc_857F
.text$mn:00008579
.text$mn:00008579 loc_8579:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00008579                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00008579                 xor     al, al
.text$mn:0000857B                 jmp     short loc_8581
.text$mn:0000857D ; ---------------------------------------------------------------------------
.text$mn:0000857D                 jmp     short loc_8581
.text$mn:0000857F ; ---------------------------------------------------------------------------
.text$mn:0000857F
.text$mn:0000857F loc_857F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:0000857F                 mov     al, 1
.text$mn:00008581
.text$mn:00008581 loc_8581:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00008581                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00008581                 mov     esp, ebp
.text$mn:00008583                 pop     ebp
.text$mn:00008584                 retn    4
.text$mn:00008584 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00008584
.text$mn:00008584 ; ---------------------------------------------------------------------------
.text$mn:00008587                 align 4
.text$mn:00008587 _text$mn        ends
.text$mn:00008587
.text$mn:00008588 ; ===========================================================================
.text$mn:00008588
.text$mn:00008588 ; Segment type: Pure code
.text$mn:00008588 ; Segment permissions: Read/Execute
.text$mn:00008588 _text$mn        segment para public 'CODE' use32
.text$mn:00008588                 assume cs:_text$mn
.text$mn:00008588                 ;org 8588h
.text$mn:00008588 ; COMDAT (pick any)
.text$mn:00008588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008588
.text$mn:00008588 ; =============== S U B R O U T I N E =======================================
.text$mn:00008588
.text$mn:00008588 ; Attributes: bp-based frame
.text$mn:00008588
.text$mn:00008588 ; public: virtual void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Lock(void)
.text$mn:00008588                 public ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
.text$mn:00008588 ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ proc near
.text$mn:00008588                                         ; DATA XREF: .rdata:0000CCCCo
.text$mn:00008588                                         ; .rdata:0000CE2Co
.text$mn:00008588
.text$mn:00008588 var_4           = dword ptr -4
.text$mn:00008588
.text$mn:00008588                 push    ebp
.text$mn:00008589                 mov     ebp, esp
.text$mn:0000858B                 push    ecx
.text$mn:0000858C                 mov     [ebp+var_4], ecx
.text$mn:0000858F                 mov     esp, ebp
.text$mn:00008591                 pop     ebp
.text$mn:00008592                 retn
.text$mn:00008592 ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ endp
.text$mn:00008592
.text$mn:00008592 ; ---------------------------------------------------------------------------
.text$mn:00008593                 align 4
.text$mn:00008593 _text$mn        ends
.text$mn:00008593
.text$mn:00008594 ; ===========================================================================
.text$mn:00008594
.text$mn:00008594 ; Segment type: Pure code
.text$mn:00008594 ; Segment permissions: Read/Execute
.text$mn:00008594 _text$mn        segment para public 'CODE' use32
.text$mn:00008594                 assume cs:_text$mn
.text$mn:00008594                 ;org 8594h
.text$mn:00008594 ; COMDAT (pick any)
.text$mn:00008594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008594
.text$mn:00008594 ; =============== S U B R O U T I N E =======================================
.text$mn:00008594
.text$mn:00008594 ; Attributes: bp-based frame
.text$mn:00008594
.text$mn:00008594 ; private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __cdecl std::_System_error::_Makestr(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
.text$mn:00008594                 public ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:00008594 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$mn:00008594                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Fp
.text$mn:00008594
.text$mn:00008594 var_38          = dword ptr -38h
.text$mn:00008594 var_34          = dword ptr -34h
.text$mn:00008594 var_30          = dword ptr -30h
.text$mn:00008594 var_2C          = byte ptr -2Ch
.text$mn:00008594 var_10          = dword ptr -10h
.text$mn:00008594 var_C           = dword ptr -0Ch
.text$mn:00008594 var_4           = dword ptr -4
.text$mn:00008594 arg_0           = dword ptr  8
.text$mn:00008594 arg_4           = byte ptr  0Ch
.text$mn:00008594 arg_C           = byte ptr  14h
.text$mn:00008594
.text$mn:00008594                 push    ebp
.text$mn:00008595                 mov     ebp, esp
.text$mn:00008597                 push    0FFFFFFFFh
.text$mn:00008599                 push    offset __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:0000859E                 mov     eax, large fs:0
.text$mn:000085A4                 push    eax
.text$mn:000085A5                 sub     esp, 2Ch
.text$mn:000085A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000085AD                 xor     eax, ebp
.text$mn:000085AF                 mov     [ebp+var_10], eax
.text$mn:000085B2                 push    eax
.text$mn:000085B3                 lea     eax, [ebp+var_C]
.text$mn:000085B6                 mov     large fs:0, eax
.text$mn:000085BC                 mov     [ebp+var_30], 0
.text$mn:000085C3                 mov     [ebp+var_4], 1
.text$mn:000085CA                 lea     ecx, [ebp+arg_C]
.text$mn:000085CD                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:000085D2                 movzx   eax, al
.text$mn:000085D5                 test    eax, eax
.text$mn:000085D7                 jnz     short loc_85E6
.text$mn:000085D9                 push    offset ??_C@_02LMMGGCAJ@?3?5?$AA@ ; ": "
.text$mn:000085DE                 lea     ecx, [ebp+arg_C]
.text$mn:000085E1                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)
.text$mn:000085E6
.text$mn:000085E6 loc_85E6:                               ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+43j
.text$mn:000085E6                 lea     ecx, [ebp+var_2C]
.text$mn:000085E9                 push    ecx
.text$mn:000085EA                 lea     ecx, [ebp+arg_4]
.text$mn:000085ED                 call    ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message(void)
.text$mn:000085F2                 mov     [ebp+var_34], eax
.text$mn:000085F5                 mov     edx, [ebp+var_34]
.text$mn:000085F8                 mov     [ebp+var_38], edx
.text$mn:000085FB                 mov     byte ptr [ebp+var_4], 2
.text$mn:000085FF                 mov     eax, [ebp+var_38]
.text$mn:00008602                 push    eax
.text$mn:00008603                 lea     ecx, [ebp+arg_C]
.text$mn:00008606                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:0000860B                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000860F                 lea     ecx, [ebp+var_2C]
.text$mn:00008612                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00008617                 lea     ecx, [ebp+arg_C]
.text$mn:0000861A                 push    ecx
.text$mn:0000861B                 mov     ecx, [ebp+arg_0]
.text$mn:0000861E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00008623                 mov     edx, [ebp+var_30]
.text$mn:00008626                 or      edx, 1
.text$mn:00008629                 mov     [ebp+var_30], edx
.text$mn:0000862C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00008630                 lea     ecx, [ebp+arg_C]
.text$mn:00008633                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00008638                 mov     eax, [ebp+arg_0]
.text$mn:0000863B                 mov     ecx, [ebp+var_C]
.text$mn:0000863E                 mov     large fs:0, ecx
.text$mn:00008645                 pop     ecx
.text$mn:00008646                 mov     ecx, [ebp+var_10]
.text$mn:00008649                 xor     ecx, ebp
.text$mn:0000864B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00008650                 mov     esp, ebp
.text$mn:00008652                 pop     ebp
.text$mn:00008653                 retn
.text$mn:00008653 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$mn:00008653
.text$mn:00008653 _text$mn        ends
.text$mn:00008653
.text$x:00008654 ; ===========================================================================
.text$x:00008654
.text$x:00008654 ; Segment type: Pure code
.text$x:00008654 ; Segment permissions: Read/Execute
.text$x:00008654 _text$x         segment para public 'CODE' use32
.text$x:00008654                 assume cs:_text$x
.text$x:00008654                 ;org 8654h
.text$x:00008654 ; COMDAT (pick associative to section at 8594)
.text$x:00008654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008654
.text$x:00008654 ; =============== S U B R O U T I N E =======================================
.text$x:00008654
.text$x:00008654
.text$x:00008654 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 proc near
.text$x:00008654                                         ; DATA XREF: .xdata$x:0000B8CCo
.text$x:00008654                 lea     ecx, [ebp+14h]
.text$x:00008657                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00008657 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 endp
.text$x:00008657
.text$x:0000865C
.text$x:0000865C ; =============== S U B R O U T I N E =======================================
.text$x:0000865C
.text$x:0000865C
.text$x:0000865C __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 proc near
.text$x:0000865C                                         ; DATA XREF: .xdata$x:0000B8D4o
.text$x:0000865C                 lea     ecx, [ebp-2Ch]
.text$x:0000865F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000865F __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 endp
.text$x:0000865F
.text$x:00008664
.text$x:00008664 ; =============== S U B R O U T I N E =======================================
.text$x:00008664
.text$x:00008664
.text$x:00008664 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 proc near
.text$x:00008664                                         ; DATA XREF: .xdata$x:0000B8C4o
.text$x:00008664                 mov     eax, [ebp-30h]
.text$x:00008667                 and     eax, 1
.text$x:0000866A                 jz      $LN7
.text$x:00008670                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:00008674                 mov     ecx, [ebp+8]
.text$x:00008677                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000867C ; ---------------------------------------------------------------------------
.text$x:0000867C
.text$x:0000867C $LN7:                                   ; CODE XREF: __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2+6j
.text$x:0000867C                 retn
.text$x:0000867C __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 endp
.text$x:0000867C
.text$x:0000867D
.text$x:0000867D ; =============== S U B R O U T I N E =======================================
.text$x:0000867D
.text$x:0000867D
.text$x:0000867D __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$x:0000867D                                         ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+5o
.text$x:0000867D
.text$x:0000867D arg_4           = dword ptr  8
.text$x:0000867D
.text$x:0000867D                 mov     edx, [esp+arg_4]
.text$x:00008681                 lea     eax, [edx+0Ch]
.text$x:00008684                 mov     ecx, [edx-30h]
.text$x:00008687                 xor     ecx, eax
.text$x:00008689                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000868E                 mov     ecx, [edx-4]
.text$x:00008691                 xor     ecx, eax
.text$x:00008693                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008698                 mov     eax, offset __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$x:0000869D                 jmp     ___CxxFrameHandler3
.text$x:0000869D __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$x:0000869D
.text$x:0000869D ; ---------------------------------------------------------------------------
.text$x:000086A2                 align 4
.text$x:000086A2 _text$x         ends
.text$x:000086A2
.text$mn:000086A4 ; ===========================================================================
.text$mn:000086A4
.text$mn:000086A4 ; Segment type: Pure code
.text$mn:000086A4 ; Segment permissions: Read/Execute
.text$mn:000086A4 _text$mn        segment para public 'CODE' use32
.text$mn:000086A4                 assume cs:_text$mn
.text$mn:000086A4                 ;org 86A4h
.text$mn:000086A4 ; COMDAT (pick any)
.text$mn:000086A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086A4
.text$mn:000086A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000086A4
.text$mn:000086A4 ; Attributes: bp-based frame
.text$mn:000086A4
.text$mn:000086A4 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:000086A4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:000086A4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:000086A4                                         ; CODE XREF: $LN19+14p
.text$mn:000086A4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:000086A4
.text$mn:000086A4 var_8           = dword ptr -8
.text$mn:000086A4 var_4           = dword ptr -4
.text$mn:000086A4
.text$mn:000086A4                 push    ebp
.text$mn:000086A5                 mov     ebp, esp
.text$mn:000086A7                 sub     esp, 8
.text$mn:000086AA                 mov     [ebp+var_4], ecx
.text$mn:000086AD                 mov     eax, [ebp+var_4]
.text$mn:000086B0                 cmp     dword ptr [eax+18h], 10h
.text$mn:000086B4                 jb      short loc_86CA
.text$mn:000086B6                 mov     ecx, [ebp+var_4]
.text$mn:000086B9                 mov     edx, [ecx+4]
.text$mn:000086BC                 push    edx
.text$mn:000086BD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000086C2                 add     esp, 4
.text$mn:000086C5                 mov     [ebp+var_8], eax
.text$mn:000086C8                 jmp     short loc_86D3
.text$mn:000086CA ; ---------------------------------------------------------------------------
.text$mn:000086CA
.text$mn:000086CA loc_86CA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000086CA                 mov     eax, [ebp+var_4]
.text$mn:000086CD                 add     eax, 4
.text$mn:000086D0                 mov     [ebp+var_8], eax
.text$mn:000086D3
.text$mn:000086D3 loc_86D3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000086D3                 mov     eax, [ebp+var_8]
.text$mn:000086D6                 mov     esp, ebp
.text$mn:000086D8                 pop     ebp
.text$mn:000086D9                 retn
.text$mn:000086D9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:000086D9
.text$mn:000086D9 ; ---------------------------------------------------------------------------
.text$mn:000086DA                 align 4
.text$mn:000086DA _text$mn        ends
.text$mn:000086DA
.text$mn:000086DC ; ===========================================================================
.text$mn:000086DC
.text$mn:000086DC ; Segment type: Pure code
.text$mn:000086DC ; Segment permissions: Read/Execute
.text$mn:000086DC _text$mn        segment para public 'CODE' use32
.text$mn:000086DC                 assume cs:_text$mn
.text$mn:000086DC                 ;org 86DCh
.text$mn:000086DC ; COMDAT (pick any)
.text$mn:000086DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086DC
.text$mn:000086DC ; =============== S U B R O U T I N E =======================================
.text$mn:000086DC
.text$mn:000086DC ; Attributes: bp-based frame
.text$mn:000086DC
.text$mn:000086DC ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:000086DC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:000086DC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:000086DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)+2Cp
.text$mn:000086DC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+80p ...
.text$mn:000086DC
.text$mn:000086DC var_8           = dword ptr -8
.text$mn:000086DC var_4           = dword ptr -4
.text$mn:000086DC
.text$mn:000086DC                 push    ebp
.text$mn:000086DD                 mov     ebp, esp
.text$mn:000086DF                 sub     esp, 8
.text$mn:000086E2                 mov     [ebp+var_4], ecx
.text$mn:000086E5                 mov     eax, [ebp+var_4]
.text$mn:000086E8                 cmp     dword ptr [eax+18h], 10h
.text$mn:000086EC                 jb      short loc_8702
.text$mn:000086EE                 mov     ecx, [ebp+var_4]
.text$mn:000086F1                 mov     edx, [ecx+4]
.text$mn:000086F4                 push    edx
.text$mn:000086F5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000086FA                 add     esp, 4
.text$mn:000086FD                 mov     [ebp+var_8], eax
.text$mn:00008700                 jmp     short loc_870B
.text$mn:00008702 ; ---------------------------------------------------------------------------
.text$mn:00008702
.text$mn:00008702 loc_8702:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00008702                 mov     eax, [ebp+var_4]
.text$mn:00008705                 add     eax, 4
.text$mn:00008708                 mov     [ebp+var_8], eax
.text$mn:0000870B
.text$mn:0000870B loc_870B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000870B                 mov     eax, [ebp+var_8]
.text$mn:0000870E                 mov     esp, ebp
.text$mn:00008710                 pop     ebp
.text$mn:00008711                 retn
.text$mn:00008711 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00008711
.text$mn:00008711 ; ---------------------------------------------------------------------------
.text$mn:00008712                 align 4
.text$mn:00008712 _text$mn        ends
.text$mn:00008712
.text$mn:00008714 ; ===========================================================================
.text$mn:00008714
.text$mn:00008714 ; Segment type: Pure code
.text$mn:00008714 ; Segment permissions: Read/Execute
.text$mn:00008714 _text$mn        segment para public 'CODE' use32
.text$mn:00008714                 assume cs:_text$mn
.text$mn:00008714                 ;org 8714h
.text$mn:00008714 ; COMDAT (pick any)
.text$mn:00008714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008714
.text$mn:00008714 ; =============== S U B R O U T I N E =======================================
.text$mn:00008714
.text$mn:00008714 ; Attributes: bp-based frame
.text$mn:00008714
.text$mn:00008714 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00008714                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00008714 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00008714                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00008714                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p
.text$mn:00008714
.text$mn:00008714 var_18          = byte ptr -18h
.text$mn:00008714 var_14          = dword ptr -14h
.text$mn:00008714 var_10          = dword ptr -10h
.text$mn:00008714 var_C           = dword ptr -0Ch
.text$mn:00008714 var_4           = dword ptr -4
.text$mn:00008714
.text$mn:00008714                 push    ebp
.text$mn:00008715                 mov     ebp, esp
.text$mn:00008717                 push    0FFFFFFFFh
.text$mn:00008719                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000871E                 mov     eax, large fs:0
.text$mn:00008724                 push    eax
.text$mn:00008725                 sub     esp, 0Ch
.text$mn:00008728                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000872D                 xor     eax, ebp
.text$mn:0000872F                 push    eax
.text$mn:00008730                 lea     eax, [ebp+var_C]
.text$mn:00008733                 mov     large fs:0, eax
.text$mn:00008739                 mov     [ebp+var_14], ecx
.text$mn:0000873C                 mov     eax, [ebp+var_14]
.text$mn:0000873F                 cmp     dword ptr [eax], 0
.text$mn:00008742                 jz      short loc_879F
.text$mn:00008744                 push    3               ; int
.text$mn:00008746                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008749                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000874E                 mov     [ebp+var_4], 0
.text$mn:00008755                 mov     ecx, [ebp+var_14]
.text$mn:00008758                 mov     edx, [ecx]
.text$mn:0000875A                 add     edx, 4
.text$mn:0000875D                 mov     [ebp+var_10], edx
.text$mn:00008760                 jmp     short loc_876F
.text$mn:00008762 ; ---------------------------------------------------------------------------
.text$mn:00008762
.text$mn:00008762 loc_8762:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00008762                 mov     eax, [ebp+var_10]
.text$mn:00008765                 mov     ecx, [eax]
.text$mn:00008767                 mov     edx, [ebp+var_10]
.text$mn:0000876A                 mov     eax, [ecx+4]
.text$mn:0000876D                 mov     [edx], eax
.text$mn:0000876F
.text$mn:0000876F loc_876F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:0000876F                 mov     ecx, [ebp+var_10]
.text$mn:00008772                 cmp     dword ptr [ecx], 0
.text$mn:00008775                 jz      short loc_8784
.text$mn:00008777                 mov     edx, [ebp+var_10]
.text$mn:0000877A                 mov     eax, [edx]
.text$mn:0000877C                 mov     dword ptr [eax], 0
.text$mn:00008782                 jmp     short loc_8762
.text$mn:00008784 ; ---------------------------------------------------------------------------
.text$mn:00008784
.text$mn:00008784 loc_8784:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00008784                 mov     ecx, [ebp+var_14]
.text$mn:00008787                 mov     edx, [ecx]
.text$mn:00008789                 mov     dword ptr [edx+4], 0
.text$mn:00008790                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008797                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000879A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000879F
.text$mn:0000879F loc_879F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:0000879F                 mov     ecx, [ebp+var_C]
.text$mn:000087A2                 mov     large fs:0, ecx
.text$mn:000087A9                 pop     ecx
.text$mn:000087AA                 mov     esp, ebp
.text$mn:000087AC                 pop     ebp
.text$mn:000087AD                 retn
.text$mn:000087AD ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:000087AD
.text$mn:000087AD ; ---------------------------------------------------------------------------
.text$mn:000087AE                 align 10h
.text$mn:000087AE _text$mn        ends
.text$mn:000087AE
.text$x:000087B0 ; ===========================================================================
.text$x:000087B0
.text$x:000087B0 ; Segment type: Pure code
.text$x:000087B0 ; Segment permissions: Read/Execute
.text$x:000087B0 _text$x         segment para public 'CODE' use32
.text$x:000087B0                 assume cs:_text$x
.text$x:000087B0                 ;org 87B0h
.text$x:000087B0 ; COMDAT (pick associative to section at 8714)
.text$x:000087B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000087B0
.text$x:000087B0 ; =============== S U B R O U T I N E =======================================
.text$x:000087B0
.text$x:000087B0
.text$x:000087B0 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:000087B0                                         ; DATA XREF: .xdata$x:0000B324o
.text$x:000087B0                 lea     ecx, [ebp-18h]  ; this
.text$x:000087B3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000087B3 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:000087B3
.text$x:000087B8
.text$x:000087B8 ; =============== S U B R O U T I N E =======================================
.text$x:000087B8
.text$x:000087B8
.text$x:000087B8 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:000087B8                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:000087B8
.text$x:000087B8 arg_4           = dword ptr  8
.text$x:000087B8
.text$x:000087B8                 mov     edx, [esp+arg_4]
.text$x:000087BC                 lea     eax, [edx+0Ch]
.text$x:000087BF                 mov     ecx, [edx-10h]
.text$x:000087C2                 xor     ecx, eax
.text$x:000087C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000087C9                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:000087CE                 jmp     ___CxxFrameHandler3
.text$x:000087CE __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:000087CE
.text$x:000087CE ; ---------------------------------------------------------------------------
.text$x:000087D3                 align 4
.text$x:000087D3 _text$x         ends
.text$x:000087D3
.text$mn:000087D4 ; ===========================================================================
.text$mn:000087D4
.text$mn:000087D4 ; Segment type: Pure code
.text$mn:000087D4 ; Segment permissions: Read/Execute
.text$mn:000087D4 _text$mn        segment para public 'CODE' use32
.text$mn:000087D4                 assume cs:_text$mn
.text$mn:000087D4                 ;org 87D4h
.text$mn:000087D4 ; COMDAT (pick any)
.text$mn:000087D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087D4
.text$mn:000087D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000087D4
.text$mn:000087D4 ; Attributes: bp-based frame
.text$mn:000087D4
.text$mn:000087D4 ; public: void __thiscall std::basic_ostream<char, struct std::char_traits<char>>::_Osfx(void)
.text$mn:000087D4                 public ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$mn:000087D4 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near
.text$mn:000087D4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+3Ep
.text$mn:000087D4
.text$mn:000087D4 var_14          = dword ptr -14h
.text$mn:000087D4 var_10          = dword ptr -10h
.text$mn:000087D4 var_C           = byte ptr -0Ch
.text$mn:000087D4 var_4           = dword ptr -4
.text$mn:000087D4
.text$mn:000087D4 ; FUNCTION CHUNK AT .text$mn:00008872 SIZE 00000009 BYTES
.text$mn:000087D4
.text$mn:000087D4                 push    ebp
.text$mn:000087D5                 mov     ebp, esp
.text$mn:000087D7                 push    0FFFFFFFFh
.text$mn:000087D9                 push    offset __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$mn:000087DE                 mov     eax, large fs:0
.text$mn:000087E4                 push    eax
.text$mn:000087E5                 push    ecx
.text$mn:000087E6                 push    ecx
.text$mn:000087E7                 push    ebx
.text$mn:000087E8                 push    esi
.text$mn:000087E9                 push    edi
.text$mn:000087EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000087EF                 xor     eax, ebp
.text$mn:000087F1                 push    eax
.text$mn:000087F2                 lea     eax, [ebp+var_C]
.text$mn:000087F5                 mov     large fs:0, eax
.text$mn:000087FB                 mov     [ebp+var_10], esp
.text$mn:000087FE                 mov     [ebp+var_14], ecx
.text$mn:00008801                 mov     [ebp+var_4], 0
.text$mn:00008808                 mov     eax, [ebp+var_14]
.text$mn:0000880B                 mov     ecx, [eax]
.text$mn:0000880D                 mov     edx, [ebp+var_14]
.text$mn:00008810                 add     edx, [ecx+4]
.text$mn:00008813                 mov     ecx, edx        ; this
.text$mn:00008815                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000881A                 movzx   eax, al
.text$mn:0000881D                 test    eax, eax
.text$mn:0000881F                 jz      short loc_886A
.text$mn:00008821                 mov     ecx, [ebp+var_14]
.text$mn:00008824                 mov     edx, [ecx]
.text$mn:00008826                 mov     ecx, [ebp+var_14]
.text$mn:00008829                 add     ecx, [edx+4]    ; this
.text$mn:0000882C                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00008831                 and     eax, 2
.text$mn:00008834                 jz      short loc_886A
.text$mn:00008836                 mov     eax, [ebp+var_14]
.text$mn:00008839                 mov     ecx, [eax]
.text$mn:0000883B                 mov     edx, [ebp+var_14]
.text$mn:0000883E                 add     edx, [ecx+4]
.text$mn:00008841                 mov     ecx, edx
.text$mn:00008843                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00008848                 mov     ecx, eax
.text$mn:0000884A                 call    ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::pubsync(void)
.text$mn:0000884F                 cmp     eax, 0FFFFFFFFh
.text$mn:00008852                 jnz     short loc_886A
.text$mn:00008854                 push    0
.text$mn:00008856                 push    4
.text$mn:00008858                 mov     eax, [ebp+var_14]
.text$mn:0000885B                 mov     ecx, [eax]
.text$mn:0000885D                 mov     edx, [ebp+var_14]
.text$mn:00008860                 add     edx, [ecx+4]
.text$mn:00008863                 mov     ecx, edx
.text$mn:00008865                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:0000886A
.text$mn:0000886A loc_886A:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)+4Bj
.text$mn:0000886A                                         ; std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)+60j ...
.text$mn:0000886A                 jmp     short loc_8872
.text$mn:0000886A ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ endp
.text$mn:0000886A
.text$mn:0000886C
.text$mn:0000886C ; =============== S U B R O U T I N E =======================================
.text$mn:0000886C
.text$mn:0000886C
.text$mn:0000886C __catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0 proc near
.text$mn:0000886C                                         ; DATA XREF: .xdata$x:0000BD24o
.text$mn:0000886C                 mov     eax, offset $LN9
.text$mn:00008871                 retn
.text$mn:00008871 __catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0 endp
.text$mn:00008871
.text$mn:00008872 ; ---------------------------------------------------------------------------
.text$mn:00008872 ; START OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$mn:00008872
.text$mn:00008872 loc_8872:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Osfx(void):loc_886Aj
.text$mn:00008872                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008879                 jmp     short loc_8882
.text$mn:00008879 ; END OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$mn:0000887B
.text$mn:0000887B ; =============== S U B R O U T I N E =======================================
.text$mn:0000887B
.text$mn:0000887B
.text$mn:0000887B $LN9            proc near               ; DATA XREF: __catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0o
.text$mn:0000887B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00008882
.text$mn:00008882 loc_8882:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)+A5j
.text$mn:00008882                 mov     ecx, [ebp-0Ch]
.text$mn:00008885                 mov     large fs:0, ecx
.text$mn:0000888C                 pop     ecx
.text$mn:0000888D                 pop     edi
.text$mn:0000888E                 pop     esi
.text$mn:0000888F                 pop     ebx
.text$mn:00008890                 mov     esp, ebp
.text$mn:00008892                 pop     ebp
.text$mn:00008893                 retn
.text$mn:00008893 $LN9            endp ; sp-analysis failed
.text$mn:00008893
.text$mn:00008893 _text$mn        ends
.text$mn:00008893
.text$x:00008894 ; ===========================================================================
.text$x:00008894
.text$x:00008894 ; Segment type: Pure code
.text$x:00008894 ; Segment permissions: Read/Execute
.text$x:00008894 _text$x         segment para public 'CODE' use32
.text$x:00008894                 assume cs:_text$x
.text$x:00008894                 ;org 8894h
.text$x:00008894 ; COMDAT (pick associative to section at 87D4)
.text$x:00008894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008894
.text$x:00008894 ; =============== S U B R O U T I N E =======================================
.text$x:00008894
.text$x:00008894
.text$x:00008894 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near
.text$x:00008894                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)+5o
.text$x:00008894
.text$x:00008894 arg_4           = dword ptr  8
.text$x:00008894
.text$x:00008894                 mov     edx, [esp+arg_4]
.text$x:00008898                 lea     eax, [edx+0Ch]
.text$x:0000889B                 mov     ecx, [edx-18h]
.text$x:0000889E                 xor     ecx, eax
.text$x:000088A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000088A5                 mov     eax, offset __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.text$x:000088AA                 jmp     ___CxxFrameHandler3
.text$x:000088AA __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ endp
.text$x:000088AA
.text$x:000088AA ; ---------------------------------------------------------------------------
.text$x:000088AF                 align 10h
.text$x:000088AF _text$x         ends
.text$x:000088AF
.text$mn:000088B0 ; ===========================================================================
.text$mn:000088B0
.text$mn:000088B0 ; Segment type: Pure code
.text$mn:000088B0 ; Segment permissions: Read/Execute
.text$mn:000088B0 _text$mn        segment para public 'CODE' use32
.text$mn:000088B0                 assume cs:_text$mn
.text$mn:000088B0                 ;org 88B0h
.text$mn:000088B0 ; COMDAT (pick any)
.text$mn:000088B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088B0
.text$mn:000088B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000088B0
.text$mn:000088B0 ; Attributes: bp-based frame
.text$mn:000088B0
.text$mn:000088B0 ; protected: __int64 __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Pnavail(void)const
.text$mn:000088B0                 public ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
.text$mn:000088B0 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ proc near
.text$mn:000088B0                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+Cp
.text$mn:000088B0                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+2Bp
.text$mn:000088B0
.text$mn:000088B0 var_8           = dword ptr -8
.text$mn:000088B0 var_4           = dword ptr -4
.text$mn:000088B0
.text$mn:000088B0                 push    ebp
.text$mn:000088B1                 mov     ebp, esp
.text$mn:000088B3                 sub     esp, 8
.text$mn:000088B6                 mov     [ebp+var_4], ecx
.text$mn:000088B9                 mov     eax, [ebp+var_4]
.text$mn:000088BC                 mov     ecx, [eax+20h]
.text$mn:000088BF                 cmp     dword ptr [ecx], 0
.text$mn:000088C2                 jz      short loc_88D1
.text$mn:000088C4                 mov     edx, [ebp+var_4]
.text$mn:000088C7                 mov     eax, [edx+30h]
.text$mn:000088CA                 mov     ecx, [eax]
.text$mn:000088CC                 mov     [ebp+var_8], ecx
.text$mn:000088CF                 jmp     short loc_88D8
.text$mn:000088D1 ; ---------------------------------------------------------------------------
.text$mn:000088D1
.text$mn:000088D1 loc_88D1:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Pnavail(void)+12j
.text$mn:000088D1                 mov     [ebp+var_8], 0
.text$mn:000088D8
.text$mn:000088D8 loc_88D8:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Pnavail(void)+1Fj
.text$mn:000088D8                 mov     eax, [ebp+var_8]
.text$mn:000088DB                 cdq
.text$mn:000088DC                 mov     esp, ebp
.text$mn:000088DE                 pop     ebp
.text$mn:000088DF                 retn
.text$mn:000088DF ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ endp
.text$mn:000088DF
.text$mn:000088DF _text$mn        ends
.text$mn:000088DF
.text$mn:000088E0 ; ===========================================================================
.text$mn:000088E0
.text$mn:000088E0 ; Segment type: Pure code
.text$mn:000088E0 ; Segment permissions: Read/Execute
.text$mn:000088E0 _text$mn        segment para public 'CODE' use32
.text$mn:000088E0                 assume cs:_text$mn
.text$mn:000088E0                 ;org 88E0h
.text$mn:000088E0 ; COMDAT (pick any)
.text$mn:000088E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088E0
.text$mn:000088E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000088E0
.text$mn:000088E0 ; Attributes: bp-based frame
.text$mn:000088E0
.text$mn:000088E0 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Pninc(void)
.text$mn:000088E0                 public ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
.text$mn:000088E0 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ proc near
.text$mn:000088E0                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+CDp
.text$mn:000088E0                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+2C7p ...
.text$mn:000088E0
.text$mn:000088E0 var_8           = dword ptr -8
.text$mn:000088E0 var_4           = dword ptr -4
.text$mn:000088E0
.text$mn:000088E0                 push    ebp
.text$mn:000088E1                 mov     ebp, esp
.text$mn:000088E3                 sub     esp, 8
.text$mn:000088E6                 mov     [ebp+var_4], ecx
.text$mn:000088E9                 mov     eax, [ebp+var_4]
.text$mn:000088EC                 mov     ecx, [eax+30h]
.text$mn:000088EF                 mov     edx, [ecx]
.text$mn:000088F1                 sub     edx, 1
.text$mn:000088F4                 mov     eax, [ebp+var_4]
.text$mn:000088F7                 mov     ecx, [eax+30h]
.text$mn:000088FA                 mov     [ecx], edx
.text$mn:000088FC                 mov     edx, [ebp+var_4]
.text$mn:000088FF                 mov     eax, [edx+20h]
.text$mn:00008902                 mov     ecx, [eax]
.text$mn:00008904                 mov     [ebp+var_8], ecx
.text$mn:00008907                 mov     edx, [ebp+var_4]
.text$mn:0000890A                 mov     eax, [edx+20h]
.text$mn:0000890D                 mov     ecx, [eax]
.text$mn:0000890F                 add     ecx, 1
.text$mn:00008912                 mov     edx, [ebp+var_4]
.text$mn:00008915                 mov     eax, [edx+20h]
.text$mn:00008918                 mov     [eax], ecx
.text$mn:0000891A                 mov     eax, [ebp+var_8]
.text$mn:0000891D                 mov     esp, ebp
.text$mn:0000891F                 pop     ebp
.text$mn:00008920                 retn
.text$mn:00008920 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ endp
.text$mn:00008920
.text$mn:00008920 ; ---------------------------------------------------------------------------
.text$mn:00008921                 align 4
.text$mn:00008921 _text$mn        ends
.text$mn:00008921
.text$mn:00008924 ; ===========================================================================
.text$mn:00008924
.text$mn:00008924 ; Segment type: Pure code
.text$mn:00008924 ; Segment permissions: Read/Execute
.text$mn:00008924 _text$mn        segment para public 'CODE' use32
.text$mn:00008924                 assume cs:_text$mn
.text$mn:00008924                 ;org 8924h
.text$mn:00008924 ; COMDAT (pick any)
.text$mn:00008924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008924
.text$mn:00008924 ; =============== S U B R O U T I N E =======================================
.text$mn:00008924
.text$mn:00008924 ; Attributes: bp-based frame
.text$mn:00008924
.text$mn:00008924 ; private: void __thiscall std::_Yarn<char>::_Tidy(void)
.text$mn:00008924                 public ?_Tidy@?$_Yarn@D@std@@AAEXXZ
.text$mn:00008924 ?_Tidy@?$_Yarn@D@std@@AAEXXZ proc near  ; CODE XREF: std::_Yarn<char>::~_Yarn<char>(void)+Ap
.text$mn:00008924
.text$mn:00008924 var_4           = dword ptr -4
.text$mn:00008924
.text$mn:00008924                 push    ebp
.text$mn:00008925                 mov     ebp, esp
.text$mn:00008927                 push    ecx
.text$mn:00008928                 mov     [ebp+var_4], ecx
.text$mn:0000892B                 mov     eax, [ebp+var_4]
.text$mn:0000892E                 cmp     dword ptr [eax], 0
.text$mn:00008931                 jz      short loc_8943
.text$mn:00008933                 push    2
.text$mn:00008935                 mov     ecx, [ebp+var_4]
.text$mn:00008938                 mov     edx, [ecx]
.text$mn:0000893A                 push    edx
.text$mn:0000893B                 call    __free_dbg
.text$mn:00008940                 add     esp, 8
.text$mn:00008943
.text$mn:00008943 loc_8943:                               ; CODE XREF: std::_Yarn<char>::_Tidy(void)+Dj
.text$mn:00008943                 mov     eax, [ebp+var_4]
.text$mn:00008946                 mov     dword ptr [eax], 0
.text$mn:0000894C                 mov     esp, ebp
.text$mn:0000894E                 pop     ebp
.text$mn:0000894F                 retn
.text$mn:0000894F ?_Tidy@?$_Yarn@D@std@@AAEXXZ endp
.text$mn:0000894F
.text$mn:0000894F _text$mn        ends
.text$mn:0000894F
.text$mn:00008950 ; ===========================================================================
.text$mn:00008950
.text$mn:00008950 ; Segment type: Pure code
.text$mn:00008950 ; Segment permissions: Read/Execute
.text$mn:00008950 _text$mn        segment para public 'CODE' use32
.text$mn:00008950                 assume cs:_text$mn
.text$mn:00008950                 ;org 8950h
.text$mn:00008950 ; COMDAT (pick any)
.text$mn:00008950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008950
.text$mn:00008950 ; =============== S U B R O U T I N E =======================================
.text$mn:00008950
.text$mn:00008950 ; Attributes: bp-based frame
.text$mn:00008950
.text$mn:00008950 ; private: void __thiscall std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:00008950                 public ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
.text$mn:00008950 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ proc near ; CODE XREF: std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)+Ap
.text$mn:00008950
.text$mn:00008950 var_4           = dword ptr -4
.text$mn:00008950
.text$mn:00008950                 push    ebp
.text$mn:00008951                 mov     ebp, esp
.text$mn:00008953                 push    ecx
.text$mn:00008954                 mov     [ebp+var_4], ecx
.text$mn:00008957                 mov     eax, [ebp+var_4]
.text$mn:0000895A                 cmp     dword ptr [eax], 0
.text$mn:0000895D                 jz      short loc_896F
.text$mn:0000895F                 push    2
.text$mn:00008961                 mov     ecx, [ebp+var_4]
.text$mn:00008964                 mov     edx, [ecx]
.text$mn:00008966                 push    edx
.text$mn:00008967                 call    __free_dbg
.text$mn:0000896C                 add     esp, 8
.text$mn:0000896F
.text$mn:0000896F loc_896F:                               ; CODE XREF: std::_Yarn<wchar_t>::_Tidy(void)+Dj
.text$mn:0000896F                 mov     eax, [ebp+var_4]
.text$mn:00008972                 mov     dword ptr [eax], 0
.text$mn:00008978                 mov     esp, ebp
.text$mn:0000897A                 pop     ebp
.text$mn:0000897B                 retn
.text$mn:0000897B ?_Tidy@?$_Yarn@_W@std@@AAEXXZ endp
.text$mn:0000897B
.text$mn:0000897B _text$mn        ends
.text$mn:0000897B
.text$mn:0000897C ; ===========================================================================
.text$mn:0000897C
.text$mn:0000897C ; Segment type: Pure code
.text$mn:0000897C ; Segment permissions: Read/Execute
.text$mn:0000897C _text$mn        segment para public 'CODE' use32
.text$mn:0000897C                 assume cs:_text$mn
.text$mn:0000897C                 ;org 897Ch
.text$mn:0000897C ; COMDAT (pick any)
.text$mn:0000897C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000897C
.text$mn:0000897C ; =============== S U B R O U T I N E =======================================
.text$mn:0000897C
.text$mn:0000897C ; Attributes: bp-based frame
.text$mn:0000897C
.text$mn:0000897C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:0000897C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:0000897C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:0000897C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+4Bp
.text$mn:0000897C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+56p ...
.text$mn:0000897C
.text$mn:0000897C var_C           = dword ptr -0Ch
.text$mn:0000897C var_8           = dword ptr -8
.text$mn:0000897C var_2           = byte ptr -2
.text$mn:0000897C var_1           = byte ptr -1
.text$mn:0000897C arg_0           = byte ptr  8
.text$mn:0000897C Size            = dword ptr  0Ch
.text$mn:0000897C
.text$mn:0000897C                 push    ebp
.text$mn:0000897D                 mov     ebp, esp
.text$mn:0000897F                 sub     esp, 0Ch
.text$mn:00008982                 mov     [ebp+var_8], ecx
.text$mn:00008985                 movzx   eax, [ebp+arg_0]
.text$mn:00008989                 test    eax, eax
.text$mn:0000898B                 jnz     short loc_898F
.text$mn:0000898D                 jmp     short loc_8A02
.text$mn:0000898F ; ---------------------------------------------------------------------------
.text$mn:0000898F
.text$mn:0000898F loc_898F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:0000898F                 mov     ecx, [ebp+var_8]
.text$mn:00008992                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00008996                 jb      short loc_8A02
.text$mn:00008998                 mov     edx, [ebp+var_8]
.text$mn:0000899B                 mov     eax, [edx+4]
.text$mn:0000899E                 mov     [ebp+var_C], eax
.text$mn:000089A1                 mov     ecx, [ebp+var_8]
.text$mn:000089A4                 add     ecx, 4
.text$mn:000089A7                 push    ecx
.text$mn:000089A8                 lea     edx, [ebp+var_1]
.text$mn:000089AB                 push    edx
.text$mn:000089AC                 mov     ecx, [ebp+var_8]
.text$mn:000089AF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000089B4                 mov     ecx, eax
.text$mn:000089B6                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:000089BB                 cmp     [ebp+Size], 0
.text$mn:000089BF                 jbe     short loc_89E1
.text$mn:000089C1                 mov     eax, [ebp+Size]
.text$mn:000089C4                 push    eax             ; Size
.text$mn:000089C5                 mov     ecx, [ebp+var_C]
.text$mn:000089C8                 push    ecx
.text$mn:000089C9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000089CE                 add     esp, 4
.text$mn:000089D1                 push    eax             ; Src
.text$mn:000089D2                 mov     edx, [ebp+var_8]
.text$mn:000089D5                 add     edx, 4
.text$mn:000089D8                 push    edx             ; Dst
.text$mn:000089D9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000089DE                 add     esp, 0Ch
.text$mn:000089E1
.text$mn:000089E1 loc_89E1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:000089E1                 mov     eax, [ebp+var_8]
.text$mn:000089E4                 mov     ecx, [eax+18h]
.text$mn:000089E7                 add     ecx, 1
.text$mn:000089EA                 push    ecx             ; int
.text$mn:000089EB                 mov     edx, [ebp+var_C]
.text$mn:000089EE                 push    edx             ; void *
.text$mn:000089EF                 lea     eax, [ebp+var_2]
.text$mn:000089F2                 push    eax
.text$mn:000089F3                 mov     ecx, [ebp+var_8]
.text$mn:000089F6                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000089FB                 mov     ecx, eax
.text$mn:000089FD                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00008A02
.text$mn:00008A02 loc_8A02:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00008A02                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00008A02                 mov     ecx, [ebp+var_8]
.text$mn:00008A05                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00008A0C                 mov     edx, [ebp+Size]
.text$mn:00008A0F                 push    edx
.text$mn:00008A10                 mov     ecx, [ebp+var_8]
.text$mn:00008A13                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008A18                 mov     esp, ebp
.text$mn:00008A1A                 pop     ebp
.text$mn:00008A1B                 retn    8
.text$mn:00008A1B ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00008A1B
.text$mn:00008A1B ; ---------------------------------------------------------------------------
.text$mn:00008A1E                 align 10h
.text$mn:00008A1E _text$mn        ends
.text$mn:00008A1E
.text$mn:00008A20 ; ===========================================================================
.text$mn:00008A20
.text$mn:00008A20 ; Segment type: Pure code
.text$mn:00008A20 ; Segment permissions: Read/Execute
.text$mn:00008A20 _text$mn        segment para public 'CODE' use32
.text$mn:00008A20                 assume cs:_text$mn
.text$mn:00008A20                 ;org 8A20h
.text$mn:00008A20 ; COMDAT (pick any)
.text$mn:00008A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A20
.text$mn:00008A20 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A20
.text$mn:00008A20 ; Attributes: bp-based frame
.text$mn:00008A20
.text$mn:00008A20 ; protected: void __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::_Tidy(void)
.text$mn:00008A20                 public ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
.text$mn:00008A20 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ proc near
.text$mn:00008A20                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+39p
.text$mn:00008A20
.text$mn:00008A20 var_8           = dword ptr -8
.text$mn:00008A20 var_4           = dword ptr -4
.text$mn:00008A20
.text$mn:00008A20                 push    ebp
.text$mn:00008A21                 mov     ebp, esp
.text$mn:00008A23                 sub     esp, 8
.text$mn:00008A26                 mov     [ebp+var_4], ecx
.text$mn:00008A29                 mov     eax, [ebp+var_4]
.text$mn:00008A2C                 mov     ecx, [eax+3Ch]
.text$mn:00008A2F                 and     ecx, 1
.text$mn:00008A32                 jz      short loc_8A7A
.text$mn:00008A34                 mov     ecx, [ebp+var_4]
.text$mn:00008A37                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:00008A3C                 test    eax, eax
.text$mn:00008A3E                 jz      short loc_8A4D
.text$mn:00008A40                 mov     ecx, [ebp+var_4]
.text$mn:00008A43                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:00008A48                 mov     [ebp+var_8], eax
.text$mn:00008A4B                 jmp     short loc_8A58
.text$mn:00008A4D ; ---------------------------------------------------------------------------
.text$mn:00008A4D
.text$mn:00008A4D loc_8A4D:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+1Ej
.text$mn:00008A4D                 mov     ecx, [ebp+var_4]
.text$mn:00008A50                 call    ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
.text$mn:00008A55                 mov     [ebp+var_8], eax
.text$mn:00008A58
.text$mn:00008A58 loc_8A58:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+2Bj
.text$mn:00008A58                 mov     ecx, [ebp+var_4]
.text$mn:00008A5B                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:00008A60                 mov     edx, [ebp+var_8]
.text$mn:00008A63                 sub     edx, eax
.text$mn:00008A65                 push    edx             ; int
.text$mn:00008A66                 mov     ecx, [ebp+var_4]
.text$mn:00008A69                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:00008A6E                 push    eax             ; void *
.text$mn:00008A6F                 mov     ecx, [ebp+var_4]
.text$mn:00008A72                 add     ecx, 40h ; '@'
.text$mn:00008A75                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00008A7A
.text$mn:00008A7A loc_8A7A:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+12j
.text$mn:00008A7A                 push    0
.text$mn:00008A7C                 push    0
.text$mn:00008A7E                 push    0
.text$mn:00008A80                 mov     ecx, [ebp+var_4]
.text$mn:00008A83                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:00008A88                 push    0
.text$mn:00008A8A                 push    0
.text$mn:00008A8C                 mov     ecx, [ebp+var_4]
.text$mn:00008A8F                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *)
.text$mn:00008A94                 mov     eax, [ebp+var_4]
.text$mn:00008A97                 mov     dword ptr [eax+38h], 0
.text$mn:00008A9E                 mov     ecx, [ebp+var_4]
.text$mn:00008AA1                 mov     edx, [ecx+3Ch]
.text$mn:00008AA4                 and     edx, 0FFFFFFFEh
.text$mn:00008AA7                 mov     eax, [ebp+var_4]
.text$mn:00008AAA                 mov     [eax+3Ch], edx
.text$mn:00008AAD                 mov     esp, ebp
.text$mn:00008AAF                 pop     ebp
.text$mn:00008AB0                 retn
.text$mn:00008AB0 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ endp
.text$mn:00008AB0
.text$mn:00008AB0 ; ---------------------------------------------------------------------------
.text$mn:00008AB1                 align 4
.text$mn:00008AB1 _text$mn        ends
.text$mn:00008AB1
.text$mn:00008AB4 ; ===========================================================================
.text$mn:00008AB4
.text$mn:00008AB4 ; Segment type: Pure code
.text$mn:00008AB4 ; Segment permissions: Read/Execute
.text$mn:00008AB4 _text$mn        segment para public 'CODE' use32
.text$mn:00008AB4                 assume cs:_text$mn
.text$mn:00008AB4                 ;org 8AB4h
.text$mn:00008AB4 ; COMDAT (pick any)
.text$mn:00008AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008AB4
.text$mn:00008AB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008AB4
.text$mn:00008AB4 ; Attributes: bp-based frame
.text$mn:00008AB4
.text$mn:00008AB4 ; protected: void __thiscall std::ctype<char>::_Tidy(void)
.text$mn:00008AB4                 public ?_Tidy@?$ctype@D@std@@IAEXXZ
.text$mn:00008AB4 ?_Tidy@?$ctype@D@std@@IAEXXZ proc near  ; CODE XREF: std::ctype<char>::~ctype<char>(void)+39p
.text$mn:00008AB4
.text$mn:00008AB4 var_8           = dword ptr -8
.text$mn:00008AB4 var_4           = dword ptr -4
.text$mn:00008AB4
.text$mn:00008AB4                 push    ebp
.text$mn:00008AB5                 mov     ebp, esp
.text$mn:00008AB7                 sub     esp, 8
.text$mn:00008ABA                 mov     [ebp+var_4], ecx
.text$mn:00008ABD                 mov     eax, [ebp+var_4]
.text$mn:00008AC0                 cmp     dword ptr [eax+10h], 0
.text$mn:00008AC4                 jle     short loc_8AD7
.text$mn:00008AC6                 mov     ecx, [ebp+var_4]
.text$mn:00008AC9                 mov     edx, [ecx+0Ch]
.text$mn:00008ACC                 push    edx             ; Memory
.text$mn:00008ACD                 call    _free
.text$mn:00008AD2                 add     esp, 4
.text$mn:00008AD5                 jmp     short loc_8AF5
.text$mn:00008AD7 ; ---------------------------------------------------------------------------
.text$mn:00008AD7
.text$mn:00008AD7 loc_8AD7:                               ; CODE XREF: std::ctype<char>::_Tidy(void)+10j
.text$mn:00008AD7                 mov     eax, [ebp+var_4]
.text$mn:00008ADA                 cmp     dword ptr [eax+10h], 0
.text$mn:00008ADE                 jge     short loc_8AF5
.text$mn:00008AE0                 mov     ecx, [ebp+var_4]
.text$mn:00008AE3                 mov     edx, [ecx+0Ch]
.text$mn:00008AE6                 mov     [ebp+var_8], edx
.text$mn:00008AE9                 mov     eax, [ebp+var_8]
.text$mn:00008AEC                 push    eax             ; void *
.text$mn:00008AED                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:00008AF2                 add     esp, 4
.text$mn:00008AF5
.text$mn:00008AF5 loc_8AF5:                               ; CODE XREF: std::ctype<char>::_Tidy(void)+21j
.text$mn:00008AF5                                         ; std::ctype<char>::_Tidy(void)+2Aj
.text$mn:00008AF5                 mov     ecx, [ebp+var_4]
.text$mn:00008AF8                 mov     edx, [ecx+14h]
.text$mn:00008AFB                 push    edx             ; Memory
.text$mn:00008AFC                 call    _free
.text$mn:00008B01                 add     esp, 4
.text$mn:00008B04                 mov     esp, ebp
.text$mn:00008B06                 pop     ebp
.text$mn:00008B07                 retn
.text$mn:00008B07 ?_Tidy@?$ctype@D@std@@IAEXXZ endp
.text$mn:00008B07
.text$mn:00008B07 _text$mn        ends
.text$mn:00008B07
.text$mn:00008B08 ; ===========================================================================
.text$mn:00008B08
.text$mn:00008B08 ; Segment type: Pure code
.text$mn:00008B08 ; Segment permissions: Read/Execute
.text$mn:00008B08 _text$mn        segment para public 'CODE' use32
.text$mn:00008B08                 assume cs:_text$mn
.text$mn:00008B08                 ;org 8B08h
.text$mn:00008B08 ; COMDAT (pick any)
.text$mn:00008B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B08
.text$mn:00008B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B08
.text$mn:00008B08 ; Attributes: bp-based frame
.text$mn:00008B08
.text$mn:00008B08 ; public: virtual void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::_Unlock(void)
.text$mn:00008B08                 public ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
.text$mn:00008B08 ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ proc near
.text$mn:00008B08                                         ; DATA XREF: .rdata:0000CCD0o
.text$mn:00008B08                                         ; .rdata:0000CE30o
.text$mn:00008B08
.text$mn:00008B08 var_4           = dword ptr -4
.text$mn:00008B08
.text$mn:00008B08                 push    ebp
.text$mn:00008B09                 mov     ebp, esp
.text$mn:00008B0B                 push    ecx
.text$mn:00008B0C                 mov     [ebp+var_4], ecx
.text$mn:00008B0F                 mov     esp, ebp
.text$mn:00008B11                 pop     ebp
.text$mn:00008B12                 retn
.text$mn:00008B12 ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ endp
.text$mn:00008B12
.text$mn:00008B12 ; ---------------------------------------------------------------------------
.text$mn:00008B13                 align 4
.text$mn:00008B13 _text$mn        ends
.text$mn:00008B13
.text$mn:00008B14 ; ===========================================================================
.text$mn:00008B14
.text$mn:00008B14 ; Segment type: Pure code
.text$mn:00008B14 ; Segment permissions: Read/Execute
.text$mn:00008B14 _text$mn        segment para public 'CODE' use32
.text$mn:00008B14                 assume cs:_text$mn
.text$mn:00008B14                 ;org 8B14h
.text$mn:00008B14 ; COMDAT (pick any)
.text$mn:00008B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B14
.text$mn:00008B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B14
.text$mn:00008B14 ; Attributes: bp-based frame
.text$mn:00008B14
.text$mn:00008B14 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00008B14                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00008B14 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00008B14                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00008B14                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Dp ...
.text$mn:00008B14
.text$mn:00008B14 var_4           = dword ptr -4
.text$mn:00008B14
.text$mn:00008B14                 push    ebp
.text$mn:00008B15                 mov     ebp, esp
.text$mn:00008B17                 push    ecx
.text$mn:00008B18                 mov     [ebp+var_4], ecx
.text$mn:00008B1B                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00008B20                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00008B25                 mov     esp, ebp
.text$mn:00008B27                 pop     ebp
.text$mn:00008B28                 retn
.text$mn:00008B28 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00008B28
.text$mn:00008B28 ; ---------------------------------------------------------------------------
.text$mn:00008B29                 align 4
.text$mn:00008B29 _text$mn        ends
.text$mn:00008B29
.text$mn:00008B2C ; ===========================================================================
.text$mn:00008B2C
.text$mn:00008B2C ; Segment type: Pure code
.text$mn:00008B2C ; Segment permissions: Read/Execute
.text$mn:00008B2C _text$mn        segment para public 'CODE' use32
.text$mn:00008B2C                 assume cs:_text$mn
.text$mn:00008B2C                 ;org 8B2Ch
.text$mn:00008B2C ; COMDAT (pick any)
.text$mn:00008B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B2C
.text$mn:00008B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B2C
.text$mn:00008B2C ; Attributes: bp-based frame
.text$mn:00008B2C
.text$mn:00008B2C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00008B2C                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00008B2C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00008B2C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00008B2C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p ...
.text$mn:00008B2C
.text$mn:00008B2C var_4           = dword ptr -4
.text$mn:00008B2C
.text$mn:00008B2C                 push    ebp
.text$mn:00008B2D                 mov     ebp, esp
.text$mn:00008B2F                 push    ecx
.text$mn:00008B30                 mov     [ebp+var_4], ecx
.text$mn:00008B33                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00008B38                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00008B3D                 mov     esp, ebp
.text$mn:00008B3F                 pop     ebp
.text$mn:00008B40                 retn
.text$mn:00008B40 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00008B40
.text$mn:00008B40 ; ---------------------------------------------------------------------------
.text$mn:00008B41                 align 4
.text$mn:00008B41 _text$mn        ends
.text$mn:00008B41
.text$mn:00008B44 ; ===========================================================================
.text$mn:00008B44
.text$mn:00008B44 ; Segment type: Pure code
.text$mn:00008B44 ; Segment permissions: Read/Execute
.text$mn:00008B44 _text$mn        segment para public 'CODE' use32
.text$mn:00008B44                 assume cs:_text$mn
.text$mn:00008B44                 ;org 8B44h
.text$mn:00008B44 ; COMDAT (pick any)
.text$mn:00008B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B44
.text$mn:00008B44 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B44
.text$mn:00008B44 ; Attributes: bp-based frame
.text$mn:00008B44
.text$mn:00008B44 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00008B44                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00008B44 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00008B44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00008B44                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00008B44
.text$mn:00008B44 var_4           = dword ptr -4
.text$mn:00008B44 arg_0           = dword ptr  8
.text$mn:00008B44
.text$mn:00008B44                 push    ebp
.text$mn:00008B45                 mov     ebp, esp
.text$mn:00008B47                 push    ecx
.text$mn:00008B48                 mov     [ebp+var_4], ecx
.text$mn:00008B4B                 mov     eax, [ebp+arg_0]
.text$mn:00008B4E                 push    eax
.text$mn:00008B4F                 mov     ecx, [ebp+var_4]
.text$mn:00008B52                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00008B57                 mov     esp, ebp
.text$mn:00008B59                 pop     ebp
.text$mn:00008B5A                 retn    4
.text$mn:00008B5A ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00008B5A
.text$mn:00008B5A ; ---------------------------------------------------------------------------
.text$mn:00008B5D                 align 10h
.text$mn:00008B5D _text$mn        ends
.text$mn:00008B5D
.text$mn:00008B60 ; ===========================================================================
.text$mn:00008B60
.text$mn:00008B60 ; Segment type: Pure code
.text$mn:00008B60 ; Segment permissions: Read/Execute
.text$mn:00008B60 _text$mn        segment para public 'CODE' use32
.text$mn:00008B60                 assume cs:_text$mn
.text$mn:00008B60                 ;org 8B60h
.text$mn:00008B60 ; COMDAT (pick any)
.text$mn:00008B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B60
.text$mn:00008B60 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B60
.text$mn:00008B60 ; Attributes: bp-based frame
.text$mn:00008B60
.text$mn:00008B60 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00008B60                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00008B60 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00008B60                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+42p
.text$mn:00008B60                                         ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep ...
.text$mn:00008B60
.text$mn:00008B60 var_4           = dword ptr -4
.text$mn:00008B60 arg_0           = dword ptr  8
.text$mn:00008B60
.text$mn:00008B60                 push    ebp
.text$mn:00008B61                 mov     ebp, esp
.text$mn:00008B63                 push    ecx
.text$mn:00008B64                 mov     [ebp+var_4], ecx
.text$mn:00008B67                 push    0
.text$mn:00008B69                 mov     eax, [ebp+arg_0]
.text$mn:00008B6C                 push    eax
.text$mn:00008B6D                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:00008B72                 add     esp, 8
.text$mn:00008B75                 mov     esp, ebp
.text$mn:00008B77                 pop     ebp
.text$mn:00008B78                 retn    4
.text$mn:00008B78 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00008B78
.text$mn:00008B78 ; ---------------------------------------------------------------------------
.text$mn:00008B7B                 align 4
.text$mn:00008B7B _text$mn        ends
.text$mn:00008B7B
.text$mn:00008B7C ; ===========================================================================
.text$mn:00008B7C
.text$mn:00008B7C ; Segment type: Pure code
.text$mn:00008B7C ; Segment permissions: Read/Execute
.text$mn:00008B7C _text$mn        segment para public 'CODE' use32
.text$mn:00008B7C                 assume cs:_text$mn
.text$mn:00008B7C                 ;org 8B7Ch
.text$mn:00008B7C ; COMDAT (pick any)
.text$mn:00008B7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B7C
.text$mn:00008B7C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B7C
.text$mn:00008B7C ; Attributes: bp-based frame
.text$mn:00008B7C
.text$mn:00008B7C ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00008B7C                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00008B7C ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00008B7C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00008B7C
.text$mn:00008B7C var_4           = dword ptr -4
.text$mn:00008B7C arg_0           = dword ptr  8
.text$mn:00008B7C
.text$mn:00008B7C                 push    ebp
.text$mn:00008B7D                 mov     ebp, esp
.text$mn:00008B7F                 push    ecx
.text$mn:00008B80                 mov     [ebp+var_4], ecx
.text$mn:00008B83                 push    0
.text$mn:00008B85                 mov     eax, [ebp+arg_0]
.text$mn:00008B88                 push    eax
.text$mn:00008B89                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:00008B8E                 add     esp, 8
.text$mn:00008B91                 mov     esp, ebp
.text$mn:00008B93                 pop     ebp
.text$mn:00008B94                 retn    4
.text$mn:00008B94 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00008B94
.text$mn:00008B94 ; ---------------------------------------------------------------------------
.text$mn:00008B97                 align 4
.text$mn:00008B97 _text$mn        ends
.text$mn:00008B97
.text$mn:00008B98 ; ===========================================================================
.text$mn:00008B98
.text$mn:00008B98 ; Segment type: Pure code
.text$mn:00008B98 ; Segment permissions: Read/Execute
.text$mn:00008B98 _text$mn        segment para public 'CODE' use32
.text$mn:00008B98                 assume cs:_text$mn
.text$mn:00008B98                 ;org 8B98h
.text$mn:00008B98 ; COMDAT (pick any)
.text$mn:00008B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B98
.text$mn:00008B98 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B98
.text$mn:00008B98 ; Attributes: bp-based frame
.text$mn:00008B98
.text$mn:00008B98 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::append(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00008B98                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00008B98 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00008B98                                         ; CODE XREF: operator<<(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,TiXmlNodeA const &)+78p
.text$mn:00008B98                                         ; std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+72p
.text$mn:00008B98
.text$mn:00008B98 var_4           = dword ptr -4
.text$mn:00008B98 arg_0           = dword ptr  8
.text$mn:00008B98
.text$mn:00008B98                 push    ebp
.text$mn:00008B99                 mov     ebp, esp
.text$mn:00008B9B                 push    ecx
.text$mn:00008B9C                 mov     [ebp+var_4], ecx
.text$mn:00008B9F                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00008BA4                 push    eax             ; Size
.text$mn:00008BA5                 push    0               ; int
.text$mn:00008BA7                 mov     ecx, [ebp+arg_0]
.text$mn:00008BAA                 push    ecx             ; int
.text$mn:00008BAB                 mov     ecx, [ebp+var_4]
.text$mn:00008BAE                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008BB3                 mov     esp, ebp
.text$mn:00008BB5                 pop     ebp
.text$mn:00008BB6                 retn    4
.text$mn:00008BB6 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00008BB6
.text$mn:00008BB6 ; ---------------------------------------------------------------------------
.text$mn:00008BB9                 align 4
.text$mn:00008BB9 _text$mn        ends
.text$mn:00008BB9
.text$mn:00008BBC ; ===========================================================================
.text$mn:00008BBC
.text$mn:00008BBC ; Segment type: Pure code
.text$mn:00008BBC ; Segment permissions: Read/Execute
.text$mn:00008BBC _text$mn        segment para public 'CODE' use32
.text$mn:00008BBC                 assume cs:_text$mn
.text$mn:00008BBC                 ;org 8BBCh
.text$mn:00008BBC ; COMDAT (pick any)
.text$mn:00008BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BBC
.text$mn:00008BBC ; =============== S U B R O U T I N E =======================================
.text$mn:00008BBC
.text$mn:00008BBC ; Attributes: bp-based frame
.text$mn:00008BBC
.text$mn:00008BBC ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(int, int, size_t Size)
.text$mn:00008BBC                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008BBC ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008BBC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+16p
.text$mn:00008BBC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+51p
.text$mn:00008BBC
.text$mn:00008BBC var_8           = dword ptr -8
.text$mn:00008BBC var_4           = dword ptr -4
.text$mn:00008BBC arg_0           = dword ptr  8
.text$mn:00008BBC arg_4           = dword ptr  0Ch
.text$mn:00008BBC Size            = dword ptr  10h
.text$mn:00008BBC
.text$mn:00008BBC                 push    ebp
.text$mn:00008BBD                 mov     ebp, esp
.text$mn:00008BBF                 sub     esp, 8
.text$mn:00008BC2                 mov     [ebp+var_4], ecx
.text$mn:00008BC5                 mov     ecx, [ebp+arg_0]
.text$mn:00008BC8                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00008BCD                 cmp     eax, [ebp+arg_4]
.text$mn:00008BD0                 jnb     short loc_8BDA
.text$mn:00008BD2                 mov     ecx, [ebp+var_4]
.text$mn:00008BD5                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008BDA
.text$mn:00008BDA loc_8BDA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00008BDA                 mov     ecx, [ebp+arg_0]
.text$mn:00008BDD                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00008BE2                 sub     eax, [ebp+arg_4]
.text$mn:00008BE5                 mov     [ebp+var_8], eax
.text$mn:00008BE8                 mov     eax, [ebp+var_8]
.text$mn:00008BEB                 cmp     eax, [ebp+Size]
.text$mn:00008BEE                 jnb     short loc_8BF6
.text$mn:00008BF0                 mov     ecx, [ebp+var_8]
.text$mn:00008BF3                 mov     [ebp+Size], ecx
.text$mn:00008BF6
.text$mn:00008BF6 loc_8BF6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00008BF6                 mov     edx, [ebp+var_4]
.text$mn:00008BF9                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00008BFE                 sub     eax, [edx+14h]
.text$mn:00008C01                 cmp     eax, [ebp+Size]
.text$mn:00008C04                 ja      short loc_8C0E
.text$mn:00008C06                 mov     ecx, [ebp+var_4]
.text$mn:00008C09                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008C0E
.text$mn:00008C0E loc_8C0E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+48j
.text$mn:00008C0E                 cmp     [ebp+Size], 0
.text$mn:00008C12                 jbe     short loc_8C68
.text$mn:00008C14                 mov     ecx, [ebp+var_4]
.text$mn:00008C17                 mov     edx, [ecx+14h]
.text$mn:00008C1A                 add     edx, [ebp+Size]
.text$mn:00008C1D                 mov     [ebp+var_8], edx
.text$mn:00008C20                 push    0
.text$mn:00008C22                 mov     eax, [ebp+var_8]
.text$mn:00008C25                 push    eax
.text$mn:00008C26                 mov     ecx, [ebp+var_4]
.text$mn:00008C29                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008C2E                 movzx   ecx, al
.text$mn:00008C31                 test    ecx, ecx
.text$mn:00008C33                 jz      short loc_8C68
.text$mn:00008C35                 mov     edx, [ebp+Size]
.text$mn:00008C38                 push    edx             ; Size
.text$mn:00008C39                 mov     ecx, [ebp+arg_0]
.text$mn:00008C3C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008C41                 add     eax, [ebp+arg_4]
.text$mn:00008C44                 push    eax             ; Src
.text$mn:00008C45                 mov     ecx, [ebp+var_4]
.text$mn:00008C48                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008C4D                 mov     ecx, [ebp+var_4]
.text$mn:00008C50                 add     eax, [ecx+14h]
.text$mn:00008C53                 push    eax             ; Dst
.text$mn:00008C54                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008C59                 add     esp, 0Ch
.text$mn:00008C5C                 mov     edx, [ebp+var_8]
.text$mn:00008C5F                 push    edx
.text$mn:00008C60                 mov     ecx, [ebp+var_4]
.text$mn:00008C63                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008C68
.text$mn:00008C68 loc_8C68:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+56j
.text$mn:00008C68                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+77j
.text$mn:00008C68                 mov     eax, [ebp+var_4]
.text$mn:00008C6B                 mov     esp, ebp
.text$mn:00008C6D                 pop     ebp
.text$mn:00008C6E                 retn    0Ch
.text$mn:00008C6E ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00008C6E
.text$mn:00008C6E ; ---------------------------------------------------------------------------
.text$mn:00008C71                 align 4
.text$mn:00008C71 _text$mn        ends
.text$mn:00008C71
.text$mn:00008C74 ; ===========================================================================
.text$mn:00008C74
.text$mn:00008C74 ; Segment type: Pure code
.text$mn:00008C74 ; Segment permissions: Read/Execute
.text$mn:00008C74 _text$mn        segment para public 'CODE' use32
.text$mn:00008C74                 assume cs:_text$mn
.text$mn:00008C74                 ;org 8C74h
.text$mn:00008C74 ; COMDAT (pick any)
.text$mn:00008C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C74
.text$mn:00008C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C74
.text$mn:00008C74 ; Attributes: bp-based frame
.text$mn:00008C74
.text$mn:00008C74 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char *Str)
.text$mn:00008C74                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00008C74 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00008C74                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator+=(char const *)+Ep
.text$mn:00008C74                                         ; std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+4Dp
.text$mn:00008C74
.text$mn:00008C74 var_4           = dword ptr -4
.text$mn:00008C74 Str             = dword ptr  8
.text$mn:00008C74
.text$mn:00008C74                 push    ebp
.text$mn:00008C75                 mov     ebp, esp
.text$mn:00008C77                 push    ecx
.text$mn:00008C78                 mov     [ebp+var_4], ecx
.text$mn:00008C7B                 push    43Eh            ; unsigned int
.text$mn:00008C80                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008C85                 mov     eax, [ebp+Str]
.text$mn:00008C88                 push    eax             ; int
.text$mn:00008C89                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008C8E                 add     esp, 0Ch
.text$mn:00008C91                 mov     ecx, [ebp+Str]
.text$mn:00008C94                 push    ecx             ; Str
.text$mn:00008C95                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00008C9A                 add     esp, 4
.text$mn:00008C9D                 push    eax             ; Size
.text$mn:00008C9E                 mov     edx, [ebp+Str]
.text$mn:00008CA1                 push    edx             ; Src
.text$mn:00008CA2                 mov     ecx, [ebp+var_4]
.text$mn:00008CA5                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:00008CAA                 mov     esp, ebp
.text$mn:00008CAC                 pop     ebp
.text$mn:00008CAD                 retn    4
.text$mn:00008CAD ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00008CAD
.text$mn:00008CAD _text$mn        ends
.text$mn:00008CAD
.text$mn:00008CB0 ; ===========================================================================
.text$mn:00008CB0
.text$mn:00008CB0 ; Segment type: Pure code
.text$mn:00008CB0 ; Segment permissions: Read/Execute
.text$mn:00008CB0 _text$mn        segment para public 'CODE' use32
.text$mn:00008CB0                 assume cs:_text$mn
.text$mn:00008CB0                 ;org 8CB0h
.text$mn:00008CB0 ; COMDAT (pick any)
.text$mn:00008CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CB0
.text$mn:00008CB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CB0
.text$mn:00008CB0 ; Attributes: bp-based frame
.text$mn:00008CB0
.text$mn:00008CB0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(void *Src, size_t Size)
.text$mn:00008CB0                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00008CB0 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00008CB0                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+A0p
.text$mn:00008CB0                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+F2p ...
.text$mn:00008CB0
.text$mn:00008CB0 var_8           = dword ptr -8
.text$mn:00008CB0 var_4           = dword ptr -4
.text$mn:00008CB0 Src             = dword ptr  8
.text$mn:00008CB0 Size            = dword ptr  0Ch
.text$mn:00008CB0
.text$mn:00008CB0                 push    ebp
.text$mn:00008CB1                 mov     ebp, esp
.text$mn:00008CB3                 sub     esp, 8
.text$mn:00008CB6                 mov     [ebp+var_4], ecx
.text$mn:00008CB9                 cmp     [ebp+Size], 0
.text$mn:00008CBD                 jz      short loc_8CD5
.text$mn:00008CBF                 push    42Ah            ; unsigned int
.text$mn:00008CC4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008CC9                 mov     eax, [ebp+Src]
.text$mn:00008CCC                 push    eax             ; int
.text$mn:00008CCD                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008CD2                 add     esp, 0Ch
.text$mn:00008CD5
.text$mn:00008CD5 loc_8CD5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+Dj
.text$mn:00008CD5                 mov     ecx, [ebp+Src]
.text$mn:00008CD8                 push    ecx
.text$mn:00008CD9                 mov     ecx, [ebp+var_4]
.text$mn:00008CDC                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00008CE1                 movzx   edx, al
.text$mn:00008CE4                 test    edx, edx
.text$mn:00008CE6                 jz      short loc_8D08
.text$mn:00008CE8                 mov     eax, [ebp+Size]
.text$mn:00008CEB                 push    eax             ; Size
.text$mn:00008CEC                 mov     ecx, [ebp+var_4]
.text$mn:00008CEF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008CF4                 mov     ecx, [ebp+Src]
.text$mn:00008CF7                 sub     ecx, eax
.text$mn:00008CF9                 push    ecx             ; int
.text$mn:00008CFA                 mov     edx, [ebp+var_4]
.text$mn:00008CFD                 push    edx             ; int
.text$mn:00008CFE                 mov     ecx, [ebp+var_4]
.text$mn:00008D01                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008D06                 jmp     short loc_8D76
.text$mn:00008D08 ; ---------------------------------------------------------------------------
.text$mn:00008D08
.text$mn:00008D08 loc_8D08:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+36j
.text$mn:00008D08                 mov     eax, [ebp+var_4]
.text$mn:00008D0B                 mov     ecx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00008D11                 sub     ecx, [eax+14h]
.text$mn:00008D14                 cmp     ecx, [ebp+Size]
.text$mn:00008D17                 ja      short loc_8D21
.text$mn:00008D19                 mov     ecx, [ebp+var_4]
.text$mn:00008D1C                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008D21
.text$mn:00008D21 loc_8D21:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+67j
.text$mn:00008D21                 cmp     [ebp+Size], 0
.text$mn:00008D25                 jbe     short loc_8D73
.text$mn:00008D27                 mov     edx, [ebp+var_4]
.text$mn:00008D2A                 mov     eax, [edx+14h]
.text$mn:00008D2D                 add     eax, [ebp+Size]
.text$mn:00008D30                 mov     [ebp+var_8], eax
.text$mn:00008D33                 push    0
.text$mn:00008D35                 mov     ecx, [ebp+var_8]
.text$mn:00008D38                 push    ecx
.text$mn:00008D39                 mov     ecx, [ebp+var_4]
.text$mn:00008D3C                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008D41                 movzx   edx, al
.text$mn:00008D44                 test    edx, edx
.text$mn:00008D46                 jz      short loc_8D73
.text$mn:00008D48                 mov     eax, [ebp+Size]
.text$mn:00008D4B                 push    eax             ; Size
.text$mn:00008D4C                 mov     ecx, [ebp+Src]
.text$mn:00008D4F                 push    ecx             ; Src
.text$mn:00008D50                 mov     ecx, [ebp+var_4]
.text$mn:00008D53                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008D58                 mov     edx, [ebp+var_4]
.text$mn:00008D5B                 add     eax, [edx+14h]
.text$mn:00008D5E                 push    eax             ; Dst
.text$mn:00008D5F                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008D64                 add     esp, 0Ch
.text$mn:00008D67                 mov     eax, [ebp+var_8]
.text$mn:00008D6A                 push    eax
.text$mn:00008D6B                 mov     ecx, [ebp+var_4]
.text$mn:00008D6E                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008D73
.text$mn:00008D73 loc_8D73:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+75j
.text$mn:00008D73                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+96j
.text$mn:00008D73                 mov     eax, [ebp+var_4]
.text$mn:00008D76
.text$mn:00008D76 loc_8D76:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+56j
.text$mn:00008D76                 mov     esp, ebp
.text$mn:00008D78                 pop     ebp
.text$mn:00008D79                 retn    8
.text$mn:00008D79 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00008D79
.text$mn:00008D79 _text$mn        ends
.text$mn:00008D79
.text$mn:00008D7C ; ===========================================================================
.text$mn:00008D7C
.text$mn:00008D7C ; Segment type: Pure code
.text$mn:00008D7C ; Segment permissions: Read/Execute
.text$mn:00008D7C _text$mn        segment para public 'CODE' use32
.text$mn:00008D7C                 assume cs:_text$mn
.text$mn:00008D7C                 ;org 8D7Ch
.text$mn:00008D7C ; COMDAT (pick any)
.text$mn:00008D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D7C
.text$mn:00008D7C ; =============== S U B R O U T I N E =======================================
.text$mn:00008D7C
.text$mn:00008D7C ; Attributes: bp-based frame
.text$mn:00008D7C
.text$mn:00008D7C ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00008D7C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00008D7C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00008D7C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+66p
.text$mn:00008D7C
.text$mn:00008D7C var_4           = dword ptr -4
.text$mn:00008D7C arg_0           = dword ptr  8
.text$mn:00008D7C
.text$mn:00008D7C                 push    ebp
.text$mn:00008D7D                 mov     ebp, esp
.text$mn:00008D7F                 push    ecx
.text$mn:00008D80                 mov     [ebp+var_4], ecx
.text$mn:00008D83                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00008D88                 push    eax
.text$mn:00008D89                 push    0
.text$mn:00008D8B                 mov     ecx, [ebp+arg_0]
.text$mn:00008D8E                 push    ecx
.text$mn:00008D8F                 mov     ecx, [ebp+var_4]
.text$mn:00008D92                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008D97                 mov     esp, ebp
.text$mn:00008D99                 pop     ebp
.text$mn:00008D9A                 retn    4
.text$mn:00008D9A ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00008D9A
.text$mn:00008D9A ; ---------------------------------------------------------------------------
.text$mn:00008D9D                 align 10h
.text$mn:00008D9D _text$mn        ends
.text$mn:00008D9D
.text$mn:00008DA0 ; ===========================================================================
.text$mn:00008DA0
.text$mn:00008DA0 ; Segment type: Pure code
.text$mn:00008DA0 ; Segment permissions: Read/Execute
.text$mn:00008DA0 _text$mn        segment para public 'CODE' use32
.text$mn:00008DA0                 assume cs:_text$mn
.text$mn:00008DA0                 ;org 8DA0h
.text$mn:00008DA0 ; COMDAT (pick any)
.text$mn:00008DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DA0
.text$mn:00008DA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DA0
.text$mn:00008DA0 ; Attributes: bp-based frame
.text$mn:00008DA0
.text$mn:00008DA0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00008DA0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008DA0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008DA0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+6Bp
.text$mn:00008DA0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+16p ...
.text$mn:00008DA0
.text$mn:00008DA0 Size            = dword ptr -8
.text$mn:00008DA0 var_4           = dword ptr -4
.text$mn:00008DA0 arg_0           = dword ptr  8
.text$mn:00008DA0 arg_4           = dword ptr  0Ch
.text$mn:00008DA0 arg_8           = dword ptr  10h
.text$mn:00008DA0
.text$mn:00008DA0                 push    ebp
.text$mn:00008DA1                 mov     ebp, esp
.text$mn:00008DA3                 sub     esp, 8
.text$mn:00008DA6                 mov     [ebp+var_4], ecx
.text$mn:00008DA9                 mov     ecx, [ebp+arg_0]
.text$mn:00008DAC                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00008DB1                 cmp     eax, [ebp+arg_4]
.text$mn:00008DB4                 jnb     short loc_8DBE
.text$mn:00008DB6                 mov     ecx, [ebp+var_4]
.text$mn:00008DB9                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008DBE
.text$mn:00008DBE loc_8DBE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00008DBE                 mov     ecx, [ebp+arg_0]
.text$mn:00008DC1                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00008DC6                 sub     eax, [ebp+arg_4]
.text$mn:00008DC9                 mov     [ebp+Size], eax
.text$mn:00008DCC                 mov     eax, [ebp+arg_8]
.text$mn:00008DCF                 cmp     eax, [ebp+Size]
.text$mn:00008DD2                 jnb     short loc_8DDA
.text$mn:00008DD4                 mov     ecx, [ebp+arg_8]
.text$mn:00008DD7                 mov     [ebp+Size], ecx
.text$mn:00008DDA
.text$mn:00008DDA loc_8DDA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00008DDA                 mov     edx, [ebp+var_4]
.text$mn:00008DDD                 cmp     edx, [ebp+arg_0]
.text$mn:00008DE0                 jnz     short loc_8E01
.text$mn:00008DE2                 mov     eax, [ebp+arg_4]
.text$mn:00008DE5                 add     eax, [ebp+Size]
.text$mn:00008DE8                 push    eax
.text$mn:00008DE9                 mov     ecx, [ebp+var_4]
.text$mn:00008DEC                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00008DF1                 mov     ecx, [ebp+arg_4]
.text$mn:00008DF4                 push    ecx
.text$mn:00008DF5                 push    0
.text$mn:00008DF7                 mov     ecx, [ebp+var_4]
.text$mn:00008DFA                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00008DFF                 jmp     short loc_8E43
.text$mn:00008E01 ; ---------------------------------------------------------------------------
.text$mn:00008E01
.text$mn:00008E01 loc_8E01:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00008E01                 push    0
.text$mn:00008E03                 mov     edx, [ebp+Size]
.text$mn:00008E06                 push    edx
.text$mn:00008E07                 mov     ecx, [ebp+var_4]
.text$mn:00008E0A                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008E0F                 movzx   eax, al
.text$mn:00008E12                 test    eax, eax
.text$mn:00008E14                 jz      short loc_8E43
.text$mn:00008E16                 mov     ecx, [ebp+Size]
.text$mn:00008E19                 push    ecx             ; Size
.text$mn:00008E1A                 mov     ecx, [ebp+arg_0]
.text$mn:00008E1D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008E22                 add     eax, [ebp+arg_4]
.text$mn:00008E25                 push    eax             ; Src
.text$mn:00008E26                 mov     ecx, [ebp+var_4]
.text$mn:00008E29                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008E2E                 push    eax             ; Dst
.text$mn:00008E2F                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008E34                 add     esp, 0Ch
.text$mn:00008E37                 mov     edx, [ebp+Size]
.text$mn:00008E3A                 push    edx
.text$mn:00008E3B                 mov     ecx, [ebp+var_4]
.text$mn:00008E3E                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008E43
.text$mn:00008E43 loc_8E43:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:00008E43                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:00008E43                 mov     eax, [ebp+var_4]
.text$mn:00008E46                 mov     esp, ebp
.text$mn:00008E48                 pop     ebp
.text$mn:00008E49                 retn    0Ch
.text$mn:00008E49 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00008E49
.text$mn:00008E49 _text$mn        ends
.text$mn:00008E49
.text$mn:00008E4C ; ===========================================================================
.text$mn:00008E4C
.text$mn:00008E4C ; Segment type: Pure code
.text$mn:00008E4C ; Segment permissions: Read/Execute
.text$mn:00008E4C _text$mn        segment para public 'CODE' use32
.text$mn:00008E4C                 assume cs:_text$mn
.text$mn:00008E4C                 ;org 8E4Ch
.text$mn:00008E4C ; COMDAT (pick any)
.text$mn:00008E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E4C
.text$mn:00008E4C ; =============== S U B R O U T I N E =======================================
.text$mn:00008E4C
.text$mn:00008E4C ; Attributes: bp-based frame
.text$mn:00008E4C
.text$mn:00008E4C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00008E4C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00008E4C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00008E4C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00008E4C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)+Ep
.text$mn:00008E4C
.text$mn:00008E4C var_4           = dword ptr -4
.text$mn:00008E4C Str             = dword ptr  8
.text$mn:00008E4C
.text$mn:00008E4C                 push    ebp
.text$mn:00008E4D                 mov     ebp, esp
.text$mn:00008E4F                 push    ecx
.text$mn:00008E50                 mov     [ebp+var_4], ecx
.text$mn:00008E53                 push    490h            ; unsigned int
.text$mn:00008E58                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008E5D                 mov     eax, [ebp+Str]
.text$mn:00008E60                 push    eax             ; int
.text$mn:00008E61                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008E66                 add     esp, 0Ch
.text$mn:00008E69                 mov     ecx, [ebp+Str]
.text$mn:00008E6C                 push    ecx             ; Str
.text$mn:00008E6D                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00008E72                 add     esp, 4
.text$mn:00008E75                 push    eax             ; Size
.text$mn:00008E76                 mov     edx, [ebp+Str]
.text$mn:00008E79                 push    edx             ; Src
.text$mn:00008E7A                 mov     ecx, [ebp+var_4]
.text$mn:00008E7D                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00008E82                 mov     esp, ebp
.text$mn:00008E84                 pop     ebp
.text$mn:00008E85                 retn    4
.text$mn:00008E85 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00008E85
.text$mn:00008E85 _text$mn        ends
.text$mn:00008E85
.text$mn:00008E88 ; ===========================================================================
.text$mn:00008E88
.text$mn:00008E88 ; Segment type: Pure code
.text$mn:00008E88 ; Segment permissions: Read/Execute
.text$mn:00008E88 _text$mn        segment para public 'CODE' use32
.text$mn:00008E88                 assume cs:_text$mn
.text$mn:00008E88                 ;org 8E88h
.text$mn:00008E88 ; COMDAT (pick any)
.text$mn:00008E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E88
.text$mn:00008E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E88
.text$mn:00008E88 ; Attributes: bp-based frame
.text$mn:00008E88
.text$mn:00008E88 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00008E88                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00008E88 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00008E88                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)+57p
.text$mn:00008E88                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00008E88
.text$mn:00008E88 var_4           = dword ptr -4
.text$mn:00008E88 Src             = dword ptr  8
.text$mn:00008E88 Size            = dword ptr  0Ch
.text$mn:00008E88
.text$mn:00008E88                 push    ebp
.text$mn:00008E89                 mov     ebp, esp
.text$mn:00008E8B                 push    ecx
.text$mn:00008E8C                 mov     [ebp+var_4], ecx
.text$mn:00008E8F                 cmp     [ebp+Size], 0
.text$mn:00008E93                 jz      short loc_8EAB
.text$mn:00008E95                 push    47Fh            ; unsigned int
.text$mn:00008E9A                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008E9F                 mov     eax, [ebp+Src]
.text$mn:00008EA2                 push    eax             ; int
.text$mn:00008EA3                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008EA8                 add     esp, 0Ch
.text$mn:00008EAB
.text$mn:00008EAB loc_8EAB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00008EAB                 mov     ecx, [ebp+Src]
.text$mn:00008EAE                 push    ecx
.text$mn:00008EAF                 mov     ecx, [ebp+var_4]
.text$mn:00008EB2                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00008EB7                 movzx   edx, al
.text$mn:00008EBA                 test    edx, edx
.text$mn:00008EBC                 jz      short loc_8EDE
.text$mn:00008EBE                 mov     eax, [ebp+Size]
.text$mn:00008EC1                 push    eax
.text$mn:00008EC2                 mov     ecx, [ebp+var_4]
.text$mn:00008EC5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008ECA                 mov     ecx, [ebp+Src]
.text$mn:00008ECD                 sub     ecx, eax
.text$mn:00008ECF                 push    ecx
.text$mn:00008ED0                 mov     edx, [ebp+var_4]
.text$mn:00008ED3                 push    edx
.text$mn:00008ED4                 mov     ecx, [ebp+var_4]
.text$mn:00008ED7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008EDC                 jmp     short loc_8F1B
.text$mn:00008EDE ; ---------------------------------------------------------------------------
.text$mn:00008EDE
.text$mn:00008EDE loc_8EDE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00008EDE                 push    0
.text$mn:00008EE0                 mov     eax, [ebp+Size]
.text$mn:00008EE3                 push    eax
.text$mn:00008EE4                 mov     ecx, [ebp+var_4]
.text$mn:00008EE7                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008EEC                 movzx   ecx, al
.text$mn:00008EEF                 test    ecx, ecx
.text$mn:00008EF1                 jz      short loc_8F18
.text$mn:00008EF3                 mov     edx, [ebp+Size]
.text$mn:00008EF6                 push    edx             ; Size
.text$mn:00008EF7                 mov     eax, [ebp+Src]
.text$mn:00008EFA                 push    eax             ; Src
.text$mn:00008EFB                 mov     ecx, [ebp+var_4]
.text$mn:00008EFE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008F03                 push    eax             ; Dst
.text$mn:00008F04                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008F09                 add     esp, 0Ch
.text$mn:00008F0C                 mov     ecx, [ebp+Size]
.text$mn:00008F0F                 push    ecx
.text$mn:00008F10                 mov     ecx, [ebp+var_4]
.text$mn:00008F13                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008F18
.text$mn:00008F18 loc_8F18:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00008F18                 mov     eax, [ebp+var_4]
.text$mn:00008F1B
.text$mn:00008F1B loc_8F1B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00008F1B                 mov     esp, ebp
.text$mn:00008F1D                 pop     ebp
.text$mn:00008F1E                 retn    8
.text$mn:00008F1E ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00008F1E
.text$mn:00008F1E ; ---------------------------------------------------------------------------
.text$mn:00008F21                 align 4
.text$mn:00008F21 _text$mn        ends
.text$mn:00008F21
.text$mn:00008F24 ; ===========================================================================
.text$mn:00008F24
.text$mn:00008F24 ; Segment type: Pure code
.text$mn:00008F24 ; Segment permissions: Read/Execute
.text$mn:00008F24 _text$mn        segment para public 'CODE' use32
.text$mn:00008F24                 assume cs:_text$mn
.text$mn:00008F24                 ;org 8F24h
.text$mn:00008F24 ; COMDAT (pick any)
.text$mn:00008F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F24
.text$mn:00008F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F24
.text$mn:00008F24 ; Attributes: bp-based frame
.text$mn:00008F24
.text$mn:00008F24 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00008F24                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00008F24 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00008F24                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00008F24
.text$mn:00008F24 arg_0           = dword ptr  8
.text$mn:00008F24 arg_4           = dword ptr  0Ch
.text$mn:00008F24
.text$mn:00008F24                 push    ebp
.text$mn:00008F25                 mov     ebp, esp
.text$mn:00008F27                 mov     eax, [ebp+arg_0]
.text$mn:00008F2A                 mov     ecx, [ebp+arg_4]
.text$mn:00008F2D                 mov     dl, [ecx]
.text$mn:00008F2F                 mov     [eax], dl
.text$mn:00008F31                 pop     ebp
.text$mn:00008F32                 retn
.text$mn:00008F32 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00008F32
.text$mn:00008F32 ; ---------------------------------------------------------------------------
.text$mn:00008F33                 align 4
.text$mn:00008F33 _text$mn        ends
.text$mn:00008F33
.text$mn:00008F34 ; ===========================================================================
.text$mn:00008F34
.text$mn:00008F34 ; Segment type: Pure code
.text$mn:00008F34 ; Segment permissions: Read/Execute
.text$mn:00008F34 _text$mn        segment para public 'CODE' use32
.text$mn:00008F34                 assume cs:_text$mn
.text$mn:00008F34                 ;org 8F34h
.text$mn:00008F34 ; COMDAT (pick any)
.text$mn:00008F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F34
.text$mn:00008F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F34
.text$mn:00008F34 ; Attributes: bp-based frame
.text$mn:00008F34
.text$mn:00008F34 ; public: char const * __thiscall std::_Yarn<char>::c_str(void)const
.text$mn:00008F34                 public ?c_str@?$_Yarn@D@std@@QBEPBDXZ
.text$mn:00008F34 ?c_str@?$_Yarn@D@std@@QBEPBDXZ proc near
.text$mn:00008F34                                         ; CODE XREF: std::locale::c_str(void)+22p
.text$mn:00008F34
.text$mn:00008F34 var_8           = dword ptr -8
.text$mn:00008F34 var_4           = dword ptr -4
.text$mn:00008F34
.text$mn:00008F34                 push    ebp
.text$mn:00008F35                 mov     ebp, esp
.text$mn:00008F37                 sub     esp, 8
.text$mn:00008F3A                 mov     [ebp+var_4], ecx
.text$mn:00008F3D                 mov     eax, [ebp+var_4]
.text$mn:00008F40                 cmp     dword ptr [eax], 0
.text$mn:00008F43                 jz      short loc_8F4F
.text$mn:00008F45                 mov     ecx, [ebp+var_4]
.text$mn:00008F48                 mov     edx, [ecx]
.text$mn:00008F4A                 mov     [ebp+var_8], edx
.text$mn:00008F4D                 jmp     short loc_8F58
.text$mn:00008F4F ; ---------------------------------------------------------------------------
.text$mn:00008F4F
.text$mn:00008F4F loc_8F4F:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+Fj
.text$mn:00008F4F                 mov     eax, [ebp+var_4]
.text$mn:00008F52                 add     eax, 4
.text$mn:00008F55                 mov     [ebp+var_8], eax
.text$mn:00008F58
.text$mn:00008F58 loc_8F58:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+19j
.text$mn:00008F58                 mov     eax, [ebp+var_8]
.text$mn:00008F5B                 mov     esp, ebp
.text$mn:00008F5D                 pop     ebp
.text$mn:00008F5E                 retn
.text$mn:00008F5E ?c_str@?$_Yarn@D@std@@QBEPBDXZ endp
.text$mn:00008F5E
.text$mn:00008F5E ; ---------------------------------------------------------------------------
.text$mn:00008F5F                 align 10h
.text$mn:00008F5F _text$mn        ends
.text$mn:00008F5F
.text$mn:00008F60 ; ===========================================================================
.text$mn:00008F60
.text$mn:00008F60 ; Segment type: Pure code
.text$mn:00008F60 ; Segment permissions: Read/Execute
.text$mn:00008F60 _text$mn        segment para public 'CODE' use32
.text$mn:00008F60                 assume cs:_text$mn
.text$mn:00008F60                 ;org 8F60h
.text$mn:00008F60 ; COMDAT (pick any)
.text$mn:00008F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F60
.text$mn:00008F60 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F60
.text$mn:00008F60 ; Attributes: bp-based frame
.text$mn:00008F60
.text$mn:00008F60 ; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
.text$mn:00008F60                 public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
.text$mn:00008F60 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
.text$mn:00008F60                                         ; CODE XREF: TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+33p
.text$mn:00008F60                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+94p ...
.text$mn:00008F60
.text$mn:00008F60 var_4           = dword ptr -4
.text$mn:00008F60
.text$mn:00008F60                 push    ebp
.text$mn:00008F61                 mov     ebp, esp
.text$mn:00008F63                 push    ecx
.text$mn:00008F64                 mov     [ebp+var_4], ecx
.text$mn:00008F67                 mov     ecx, [ebp+var_4]
.text$mn:00008F6A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008F6F                 mov     esp, ebp
.text$mn:00008F71                 pop     ebp
.text$mn:00008F72                 retn
.text$mn:00008F72 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp
.text$mn:00008F72
.text$mn:00008F72 ; ---------------------------------------------------------------------------
.text$mn:00008F73                 align 4
.text$mn:00008F73 _text$mn        ends
.text$mn:00008F73
.text$mn:00008F74 ; ===========================================================================
.text$mn:00008F74
.text$mn:00008F74 ; Segment type: Pure code
.text$mn:00008F74 ; Segment permissions: Read/Execute
.text$mn:00008F74 _text$mn        segment para public 'CODE' use32
.text$mn:00008F74                 assume cs:_text$mn
.text$mn:00008F74                 ;org 8F74h
.text$mn:00008F74 ; COMDAT (pick any)
.text$mn:00008F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F74
.text$mn:00008F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F74
.text$mn:00008F74 ; Attributes: bp-based frame
.text$mn:00008F74
.text$mn:00008F74 ; const char *__thiscall std::locale::c_str(std::locale *__hidden this)
.text$mn:00008F74                 public ?c_str@locale@std@@QBEPBDXZ
.text$mn:00008F74 ?c_str@locale@std@@QBEPBDXZ proc near   ; CODE XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+77p
.text$mn:00008F74
.text$mn:00008F74 var_8           = dword ptr -8
.text$mn:00008F74 var_4           = dword ptr -4
.text$mn:00008F74
.text$mn:00008F74                 push    ebp
.text$mn:00008F75                 mov     ebp, esp
.text$mn:00008F77                 sub     esp, 8
.text$mn:00008F7A                 mov     [ebp+var_4], ecx
.text$mn:00008F7D                 mov     eax, [ebp+var_4]
.text$mn:00008F80                 cmp     dword ptr [eax], 0
.text$mn:00008F83                 jnz     short loc_8F8E
.text$mn:00008F85                 mov     [ebp+var_8], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
.text$mn:00008F8C                 jmp     short loc_8F9E
.text$mn:00008F8E ; ---------------------------------------------------------------------------
.text$mn:00008F8E
.text$mn:00008F8E loc_8F8E:                               ; CODE XREF: std::locale::c_str(void)+Fj
.text$mn:00008F8E                 mov     ecx, [ebp+var_4]
.text$mn:00008F91                 mov     ecx, [ecx]
.text$mn:00008F93                 add     ecx, 18h
.text$mn:00008F96                 call    ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str(void)
.text$mn:00008F9B                 mov     [ebp+var_8], eax
.text$mn:00008F9E
.text$mn:00008F9E loc_8F9E:                               ; CODE XREF: std::locale::c_str(void)+18j
.text$mn:00008F9E                 mov     eax, [ebp+var_8]
.text$mn:00008FA1                 mov     esp, ebp
.text$mn:00008FA3                 pop     ebp
.text$mn:00008FA4                 retn
.text$mn:00008FA4 ?c_str@locale@std@@QBEPBDXZ endp
.text$mn:00008FA4
.text$mn:00008FA4 ; ---------------------------------------------------------------------------
.text$mn:00008FA5                 align 4
.text$mn:00008FA5 _text$mn        ends
.text$mn:00008FA5
.text$mn:00008FA8 ; ===========================================================================
.text$mn:00008FA8
.text$mn:00008FA8 ; Segment type: Pure code
.text$mn:00008FA8 ; Segment permissions: Read/Execute
.text$mn:00008FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00008FA8                 assume cs:_text$mn
.text$mn:00008FA8                 ;org 8FA8h
.text$mn:00008FA8 ; COMDAT (pick any)
.text$mn:00008FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FA8
.text$mn:00008FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FA8
.text$mn:00008FA8 ; Attributes: bp-based frame
.text$mn:00008FA8
.text$mn:00008FA8 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00008FA8                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00008FA8 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00008FA8                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00008FA8                                         ; std::error_code::message(void)+32p
.text$mn:00008FA8
.text$mn:00008FA8 var_4           = dword ptr -4
.text$mn:00008FA8
.text$mn:00008FA8                 push    ebp
.text$mn:00008FA9                 mov     ebp, esp
.text$mn:00008FAB                 push    ecx
.text$mn:00008FAC                 mov     [ebp+var_4], ecx
.text$mn:00008FAF                 mov     eax, [ebp+var_4]
.text$mn:00008FB2                 mov     eax, [eax+4]
.text$mn:00008FB5                 mov     esp, ebp
.text$mn:00008FB7                 pop     ebp
.text$mn:00008FB8                 retn
.text$mn:00008FB8 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008FB8
.text$mn:00008FB8 ; ---------------------------------------------------------------------------
.text$mn:00008FB9                 align 4
.text$mn:00008FB9 _text$mn        ends
.text$mn:00008FB9
.text$mn:00008FBC ; ===========================================================================
.text$mn:00008FBC
.text$mn:00008FBC ; Segment type: Pure code
.text$mn:00008FBC ; Segment permissions: Read/Execute
.text$mn:00008FBC _text$mn        segment para public 'CODE' use32
.text$mn:00008FBC                 assume cs:_text$mn
.text$mn:00008FBC                 ;org 8FBCh
.text$mn:00008FBC ; COMDAT (pick any)
.text$mn:00008FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FBC
.text$mn:00008FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00008FBC
.text$mn:00008FBC ; Attributes: bp-based frame
.text$mn:00008FBC
.text$mn:00008FBC ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00008FBC                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00008FBC ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00008FBC                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00008FBC                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00008FBC
.text$mn:00008FBC var_4           = dword ptr -4
.text$mn:00008FBC
.text$mn:00008FBC                 push    ebp
.text$mn:00008FBD                 mov     ebp, esp
.text$mn:00008FBF                 push    ecx
.text$mn:00008FC0                 mov     [ebp+var_4], ecx
.text$mn:00008FC3                 mov     eax, [ebp+var_4]
.text$mn:00008FC6                 mov     eax, [eax+4]
.text$mn:00008FC9                 mov     esp, ebp
.text$mn:00008FCB                 pop     ebp
.text$mn:00008FCC                 retn
.text$mn:00008FCC ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008FCC
.text$mn:00008FCC ; ---------------------------------------------------------------------------
.text$mn:00008FCD                 align 10h
.text$mn:00008FCD _text$mn        ends
.text$mn:00008FCD
.text$mn:00008FD0 ; ===========================================================================
.text$mn:00008FD0
.text$mn:00008FD0 ; Segment type: Pure code
.text$mn:00008FD0 ; Segment permissions: Read/Execute
.text$mn:00008FD0 _text$mn        segment para public 'CODE' use32
.text$mn:00008FD0                 assume cs:_text$mn
.text$mn:00008FD0                 ;org 8FD0h
.text$mn:00008FD0 ; COMDAT (pick any)
.text$mn:00008FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FD0
.text$mn:00008FD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FD0
.text$mn:00008FD0 ; Attributes: bp-based frame
.text$mn:00008FD0
.text$mn:00008FD0 ; public: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::clear(int, bool)
.text$mn:00008FD0                 public ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
.text$mn:00008FD0 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z proc near
.text$mn:00008FD0                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)+21p
.text$mn:00008FD0
.text$mn:00008FD0 var_8           = dword ptr -8
.text$mn:00008FD0 var_4           = dword ptr -4
.text$mn:00008FD0 arg_0           = dword ptr  8
.text$mn:00008FD0 arg_4           = byte ptr  0Ch
.text$mn:00008FD0
.text$mn:00008FD0                 push    ebp
.text$mn:00008FD1                 mov     ebp, esp
.text$mn:00008FD3                 sub     esp, 8
.text$mn:00008FD6                 mov     [ebp+var_8], ecx
.text$mn:00008FD9                 mov     eax, [ebp+var_8]
.text$mn:00008FDC                 cmp     dword ptr [eax+38h], 0
.text$mn:00008FE0                 jnz     short loc_8FED
.text$mn:00008FE2                 mov     ecx, [ebp+arg_0]
.text$mn:00008FE5                 or      ecx, 4
.text$mn:00008FE8                 mov     [ebp+var_4], ecx
.text$mn:00008FEB                 jmp     short loc_8FF3
.text$mn:00008FED ; ---------------------------------------------------------------------------
.text$mn:00008FED
.text$mn:00008FED loc_8FED:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::clear(int,bool)+10j
.text$mn:00008FED                 mov     edx, [ebp+arg_0]
.text$mn:00008FF0                 mov     [ebp+var_4], edx
.text$mn:00008FF3
.text$mn:00008FF3 loc_8FF3:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::clear(int,bool)+1Bj
.text$mn:00008FF3                 movzx   eax, [ebp+arg_4]
.text$mn:00008FF7                 push    eax             ; bool
.text$mn:00008FF8                 mov     ecx, [ebp+var_4]
.text$mn:00008FFB                 push    ecx             ; int
.text$mn:00008FFC                 mov     ecx, [ebp+var_8] ; this
.text$mn:00008FFF                 call    ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear(int,bool)
.text$mn:00009004                 mov     esp, ebp
.text$mn:00009006                 pop     ebp
.text$mn:00009007                 retn    8
.text$mn:00009007 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z endp
.text$mn:00009007
.text$mn:00009007 ; ---------------------------------------------------------------------------
.text$mn:0000900A                 align 4
.text$mn:0000900A _text$mn        ends
.text$mn:0000900A
.text$mn:0000900C ; ===========================================================================
.text$mn:0000900C
.text$mn:0000900C ; Segment type: Pure code
.text$mn:0000900C ; Segment permissions: Read/Execute
.text$mn:0000900C _text$mn        segment para public 'CODE' use32
.text$mn:0000900C                 assume cs:_text$mn
.text$mn:0000900C                 ;org 900Ch
.text$mn:0000900C ; COMDAT (pick any)
.text$mn:0000900C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000900C
.text$mn:0000900C ; =============== S U B R O U T I N E =======================================
.text$mn:0000900C
.text$mn:0000900C ; Attributes: bp-based frame
.text$mn:0000900C
.text$mn:0000900C ; void __thiscall std::ios_base::clear(std::ios_base *this, int)
.text$mn:0000900C                 public ?clear@ios_base@std@@QAEXH@Z
.text$mn:0000900C ?clear@ios_base@std@@QAEXH@Z proc near  ; CODE XREF: std::ios_base::_Init(void)+6Cp
.text$mn:0000900C
.text$mn:0000900C var_4           = dword ptr -4
.text$mn:0000900C arg_0           = dword ptr  8
.text$mn:0000900C
.text$mn:0000900C                 push    ebp
.text$mn:0000900D                 mov     ebp, esp
.text$mn:0000900F                 push    ecx
.text$mn:00009010                 mov     [ebp+var_4], ecx
.text$mn:00009013                 push    0               ; bool
.text$mn:00009015                 mov     eax, [ebp+arg_0]
.text$mn:00009018                 push    eax             ; int
.text$mn:00009019                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000901C                 call    ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear(int,bool)
.text$mn:00009021                 mov     esp, ebp
.text$mn:00009023                 pop     ebp
.text$mn:00009024                 retn    4
.text$mn:00009024 ?clear@ios_base@std@@QAEXH@Z endp
.text$mn:00009024
.text$mn:00009024 ; ---------------------------------------------------------------------------
.text$mn:00009027                 align 4
.text$mn:00009027 _text$mn        ends
.text$mn:00009027
.text$mn:00009028 ; ===========================================================================
.text$mn:00009028
.text$mn:00009028 ; Segment type: Pure code
.text$mn:00009028 ; Segment permissions: Read/Execute
.text$mn:00009028 _text$mn        segment para public 'CODE' use32
.text$mn:00009028                 assume cs:_text$mn
.text$mn:00009028                 ;org 9028h
.text$mn:00009028 ; COMDAT (pick any)
.text$mn:00009028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009028
.text$mn:00009028 ; =============== S U B R O U T I N E =======================================
.text$mn:00009028
.text$mn:00009028 ; Attributes: bp-based frame
.text$mn:00009028
.text$mn:00009028 ; void __thiscall std::ios_base::clear(std::ios_base *this, int, bool)
.text$mn:00009028                 public ?clear@ios_base@std@@QAEXH_N@Z
.text$mn:00009028 ?clear@ios_base@std@@QAEXH_N@Z proc near
.text$mn:00009028                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::clear(int,bool)+2Fp
.text$mn:00009028                                         ; std::ios_base::clear(int)+10p
.text$mn:00009028
.text$mn:00009028 var_58          = byte ptr -58h
.text$mn:00009028 var_44          = byte ptr -44h
.text$mn:00009028 var_30          = byte ptr -30h
.text$mn:00009028 var_1C          = byte ptr -1Ch
.text$mn:00009028 var_14          = byte ptr -14h
.text$mn:00009028 var_C           = byte ptr -0Ch
.text$mn:00009028 var_4           = dword ptr -4
.text$mn:00009028 arg_0           = dword ptr  8
.text$mn:00009028 arg_4           = byte ptr  0Ch
.text$mn:00009028
.text$mn:00009028                 push    ebp
.text$mn:00009029                 mov     ebp, esp
.text$mn:0000902B                 sub     esp, 58h
.text$mn:0000902E                 mov     [ebp+var_4], ecx
.text$mn:00009031                 mov     eax, [ebp+arg_0]
.text$mn:00009034                 and     eax, 17h
.text$mn:00009037                 mov     ecx, [ebp+var_4]
.text$mn:0000903A                 mov     [ecx+0Ch], eax
.text$mn:0000903D                 mov     edx, [ebp+var_4]
.text$mn:00009040                 mov     eax, [ebp+var_4]
.text$mn:00009043                 mov     ecx, [edx+0Ch]
.text$mn:00009046                 and     ecx, [eax+10h]
.text$mn:00009049                 jnz     short loc_9050
.text$mn:0000904B                 jmp     loc_910A
.text$mn:00009050 ; ---------------------------------------------------------------------------
.text$mn:00009050
.text$mn:00009050 loc_9050:                               ; CODE XREF: std::ios_base::clear(int,bool)+21j
.text$mn:00009050                 movzx   edx, [ebp+arg_4]
.text$mn:00009054                 test    edx, edx
.text$mn:00009056                 jz      short loc_9066
.text$mn:00009058                 push    0
.text$mn:0000905A                 push    0
.text$mn:0000905C                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00009061 ; ---------------------------------------------------------------------------
.text$mn:00009061                 jmp     loc_910A
.text$mn:00009066 ; ---------------------------------------------------------------------------
.text$mn:00009066
.text$mn:00009066 loc_9066:                               ; CODE XREF: std::ios_base::clear(int,bool)+2Ej
.text$mn:00009066                 mov     eax, [ebp+var_4]
.text$mn:00009069                 mov     ecx, [ebp+var_4]
.text$mn:0000906C                 mov     edx, [eax+0Ch]
.text$mn:0000906F                 and     edx, [ecx+10h]
.text$mn:00009072                 and     edx, 4
.text$mn:00009075                 jz      short loc_90A3
.text$mn:00009077                 push    1
.text$mn:00009079                 lea     eax, [ebp+var_C]
.text$mn:0000907C                 push    eax
.text$mn:0000907D                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:00009082                 add     esp, 8
.text$mn:00009085                 push    eax             ; struct std::error_code *
.text$mn:00009086                 push    offset ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ ; "ios_base::badbit set"
.text$mn:0000908B                 lea     ecx, [ebp+var_30] ; this
.text$mn:0000908E                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:00009093                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:00009098                 lea     ecx, [ebp+var_30]
.text$mn:0000909B                 push    ecx
.text$mn:0000909C                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000090A1 ; ---------------------------------------------------------------------------
.text$mn:000090A1                 jmp     short loc_910A
.text$mn:000090A3 ; ---------------------------------------------------------------------------
.text$mn:000090A3
.text$mn:000090A3 loc_90A3:                               ; CODE XREF: std::ios_base::clear(int,bool)+4Dj
.text$mn:000090A3                 mov     edx, [ebp+var_4]
.text$mn:000090A6                 mov     eax, [ebp+var_4]
.text$mn:000090A9                 mov     ecx, [edx+0Ch]
.text$mn:000090AC                 and     ecx, [eax+10h]
.text$mn:000090AF                 and     ecx, 2
.text$mn:000090B2                 jz      short loc_90E0
.text$mn:000090B4                 push    1
.text$mn:000090B6                 lea     edx, [ebp+var_14]
.text$mn:000090B9                 push    edx
.text$mn:000090BA                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:000090BF                 add     esp, 8
.text$mn:000090C2                 push    eax             ; struct std::error_code *
.text$mn:000090C3                 push    offset ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; "ios_base::failbit set"
.text$mn:000090C8                 lea     ecx, [ebp+var_44] ; this
.text$mn:000090CB                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:000090D0                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:000090D5                 lea     eax, [ebp+var_44]
.text$mn:000090D8                 push    eax
.text$mn:000090D9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000090DE ; ---------------------------------------------------------------------------
.text$mn:000090DE                 jmp     short loc_910A
.text$mn:000090E0 ; ---------------------------------------------------------------------------
.text$mn:000090E0
.text$mn:000090E0 loc_90E0:                               ; CODE XREF: std::ios_base::clear(int,bool)+8Aj
.text$mn:000090E0                 push    1
.text$mn:000090E2                 lea     ecx, [ebp+var_1C]
.text$mn:000090E5                 push    ecx
.text$mn:000090E6                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:000090EB                 add     esp, 8
.text$mn:000090EE                 push    eax             ; struct std::error_code *
.text$mn:000090EF                 push    offset ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ ; "ios_base::eofbit set"
.text$mn:000090F4                 lea     ecx, [ebp+var_58] ; this
.text$mn:000090F7                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:000090FC                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:00009101                 lea     edx, [ebp+var_58]
.text$mn:00009104                 push    edx
.text$mn:00009105                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000910A ; ---------------------------------------------------------------------------
.text$mn:0000910A
.text$mn:0000910A loc_910A:                               ; CODE XREF: std::ios_base::clear(int,bool)+23j
.text$mn:0000910A                                         ; std::ios_base::clear(int,bool)+39j ...
.text$mn:0000910A                 mov     esp, ebp
.text$mn:0000910C                 pop     ebp
.text$mn:0000910D                 retn    8
.text$mn:0000910D ?clear@ios_base@std@@QAEXH_N@Z endp
.text$mn:0000910D
.text$mn:0000910D _text$mn        ends
.text$mn:0000910D
.text$mn:00009110 ; ===========================================================================
.text$mn:00009110
.text$mn:00009110 ; Segment type: Pure code
.text$mn:00009110 ; Segment permissions: Read/Execute
.text$mn:00009110 _text$mn        segment para public 'CODE' use32
.text$mn:00009110                 assume cs:_text$mn
.text$mn:00009110                 ;org 9110h
.text$mn:00009110 ; COMDAT (pick any)
.text$mn:00009110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009110
.text$mn:00009110 ; =============== S U B R O U T I N E =======================================
.text$mn:00009110
.text$mn:00009110 ; Attributes: bp-based frame
.text$mn:00009110
.text$mn:00009110 ; public: int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::compare(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)const
.text$mn:00009110                 public ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
.text$mn:00009110 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z proc near
.text$mn:00009110                                         ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+Bp
.text$mn:00009110
.text$mn:00009110 var_4           = dword ptr -4
.text$mn:00009110 arg_0           = dword ptr  8
.text$mn:00009110
.text$mn:00009110                 push    ebp
.text$mn:00009111                 mov     ebp, esp
.text$mn:00009113                 push    ecx
.text$mn:00009114                 mov     [ebp+var_4], ecx
.text$mn:00009117                 mov     ecx, [ebp+arg_0]
.text$mn:0000911A                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000911F                 push    eax             ; int
.text$mn:00009120                 mov     ecx, [ebp+arg_0]
.text$mn:00009123                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009128                 push    eax             ; Buf2
.text$mn:00009129                 mov     eax, [ebp+var_4]
.text$mn:0000912C                 mov     ecx, [eax+14h]
.text$mn:0000912F                 push    ecx             ; int
.text$mn:00009130                 push    0               ; int
.text$mn:00009132                 mov     ecx, [ebp+var_4]
.text$mn:00009135                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)
.text$mn:0000913A                 mov     esp, ebp
.text$mn:0000913C                 pop     ebp
.text$mn:0000913D                 retn    4
.text$mn:0000913D ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z endp
.text$mn:0000913D
.text$mn:0000913D _text$mn        ends
.text$mn:0000913D
.text$mn:00009140 ; ===========================================================================
.text$mn:00009140
.text$mn:00009140 ; Segment type: Pure code
.text$mn:00009140 ; Segment permissions: Read/Execute
.text$mn:00009140 _text$mn        segment para public 'CODE' use32
.text$mn:00009140                 assume cs:_text$mn
.text$mn:00009140                 ;org 9140h
.text$mn:00009140 ; COMDAT (pick any)
.text$mn:00009140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009140
.text$mn:00009140 ; =============== S U B R O U T I N E =======================================
.text$mn:00009140
.text$mn:00009140 ; Attributes: bp-based frame
.text$mn:00009140
.text$mn:00009140 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(int, int, void *Buf2, int)
.text$mn:00009140                 public ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
.text$mn:00009140 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z proc near
.text$mn:00009140                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+25p
.text$mn:00009140                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char const *)+3Ap
.text$mn:00009140
.text$mn:00009140 var_18          = dword ptr -18h
.text$mn:00009140 var_14          = dword ptr -14h
.text$mn:00009140 var_10          = dword ptr -10h
.text$mn:00009140 var_C           = dword ptr -0Ch
.text$mn:00009140 Size            = dword ptr -8
.text$mn:00009140 var_4           = dword ptr -4
.text$mn:00009140 arg_0           = dword ptr  8
.text$mn:00009140 arg_4           = dword ptr  0Ch
.text$mn:00009140 Buf2            = dword ptr  10h
.text$mn:00009140 arg_C           = dword ptr  14h
.text$mn:00009140
.text$mn:00009140                 push    ebp
.text$mn:00009141                 mov     ebp, esp
.text$mn:00009143                 sub     esp, 18h
.text$mn:00009146                 mov     [ebp+var_4], ecx
.text$mn:00009149                 cmp     [ebp+arg_C], 0
.text$mn:0000914D                 jz      short loc_9165
.text$mn:0000914F                 push    87Dh            ; unsigned int
.text$mn:00009154                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009159                 mov     eax, [ebp+Buf2]
.text$mn:0000915C                 push    eax             ; int
.text$mn:0000915D                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009162                 add     esp, 0Ch
.text$mn:00009165
.text$mn:00009165 loc_9165:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+Dj
.text$mn:00009165                 mov     ecx, [ebp+var_4]
.text$mn:00009168                 mov     edx, [ecx+14h]
.text$mn:0000916B                 cmp     edx, [ebp+arg_0]
.text$mn:0000916E                 jnb     short loc_9178
.text$mn:00009170                 mov     ecx, [ebp+var_4]
.text$mn:00009173                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00009178
.text$mn:00009178 loc_9178:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+2Ej
.text$mn:00009178                 mov     eax, [ebp+var_4]
.text$mn:0000917B                 mov     ecx, [eax+14h]
.text$mn:0000917E                 sub     ecx, [ebp+arg_0]
.text$mn:00009181                 cmp     ecx, [ebp+arg_4]
.text$mn:00009184                 jnb     short loc_9192
.text$mn:00009186                 mov     edx, [ebp+var_4]
.text$mn:00009189                 mov     eax, [edx+14h]
.text$mn:0000918C                 sub     eax, [ebp+arg_0]
.text$mn:0000918F                 mov     [ebp+arg_4], eax
.text$mn:00009192
.text$mn:00009192 loc_9192:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+44j
.text$mn:00009192                 mov     ecx, [ebp+arg_4]
.text$mn:00009195                 cmp     ecx, [ebp+arg_C]
.text$mn:00009198                 jnb     short loc_91A2
.text$mn:0000919A                 mov     edx, [ebp+arg_4]
.text$mn:0000919D                 mov     [ebp+Size], edx
.text$mn:000091A0                 jmp     short loc_91A8
.text$mn:000091A2 ; ---------------------------------------------------------------------------
.text$mn:000091A2
.text$mn:000091A2 loc_91A2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+58j
.text$mn:000091A2                 mov     eax, [ebp+arg_C]
.text$mn:000091A5                 mov     [ebp+Size], eax
.text$mn:000091A8
.text$mn:000091A8 loc_91A8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+60j
.text$mn:000091A8                 mov     ecx, [ebp+Size]
.text$mn:000091AB                 push    ecx             ; Size
.text$mn:000091AC                 mov     edx, [ebp+Buf2]
.text$mn:000091AF                 push    edx             ; Buf2
.text$mn:000091B0                 mov     ecx, [ebp+var_4]
.text$mn:000091B3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000091B8                 add     eax, [ebp+arg_0]
.text$mn:000091BB                 push    eax             ; Buf1
.text$mn:000091BC                 call    ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare(char const *,char const *,uint)
.text$mn:000091C1                 add     esp, 0Ch
.text$mn:000091C4                 mov     [ebp+var_C], eax
.text$mn:000091C7                 cmp     [ebp+var_C], 0
.text$mn:000091CB                 jz      short loc_91D5
.text$mn:000091CD                 mov     eax, [ebp+var_C]
.text$mn:000091D0                 mov     [ebp+var_18], eax
.text$mn:000091D3                 jmp     short loc_920A
.text$mn:000091D5 ; ---------------------------------------------------------------------------
.text$mn:000091D5
.text$mn:000091D5 loc_91D5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+8Bj
.text$mn:000091D5                 mov     ecx, [ebp+arg_4]
.text$mn:000091D8                 cmp     ecx, [ebp+arg_C]
.text$mn:000091DB                 jnb     short loc_91E6
.text$mn:000091DD                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:000091E4                 jmp     short loc_9204
.text$mn:000091E6 ; ---------------------------------------------------------------------------
.text$mn:000091E6
.text$mn:000091E6 loc_91E6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+9Bj
.text$mn:000091E6                 mov     edx, [ebp+arg_4]
.text$mn:000091E9                 cmp     edx, [ebp+arg_C]
.text$mn:000091EC                 jnz     short loc_91F7
.text$mn:000091EE                 mov     [ebp+var_10], 0
.text$mn:000091F5                 jmp     short loc_91FE
.text$mn:000091F7 ; ---------------------------------------------------------------------------
.text$mn:000091F7
.text$mn:000091F7 loc_91F7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+ACj
.text$mn:000091F7                 mov     [ebp+var_10], 1
.text$mn:000091FE
.text$mn:000091FE loc_91FE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+B5j
.text$mn:000091FE                 mov     eax, [ebp+var_10]
.text$mn:00009201                 mov     [ebp+var_14], eax
.text$mn:00009204
.text$mn:00009204 loc_9204:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+A4j
.text$mn:00009204                 mov     ecx, [ebp+var_14]
.text$mn:00009207                 mov     [ebp+var_18], ecx
.text$mn:0000920A
.text$mn:0000920A loc_920A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+93j
.text$mn:0000920A                 mov     eax, [ebp+var_18]
.text$mn:0000920D                 mov     esp, ebp
.text$mn:0000920F                 pop     ebp
.text$mn:00009210                 retn    10h
.text$mn:00009210 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z endp
.text$mn:00009210
.text$mn:00009210 ; ---------------------------------------------------------------------------
.text$mn:00009213                 align 4
.text$mn:00009213 _text$mn        ends
.text$mn:00009213
.text$mn:00009214 ; ===========================================================================
.text$mn:00009214
.text$mn:00009214 ; Segment type: Pure code
.text$mn:00009214 ; Segment permissions: Read/Execute
.text$mn:00009214 _text$mn        segment para public 'CODE' use32
.text$mn:00009214                 assume cs:_text$mn
.text$mn:00009214                 ;org 9214h
.text$mn:00009214 ; COMDAT (pick any)
.text$mn:00009214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009214
.text$mn:00009214 ; =============== S U B R O U T I N E =======================================
.text$mn:00009214
.text$mn:00009214 ; Attributes: bp-based frame
.text$mn:00009214
.text$mn:00009214 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char *Str)
.text$mn:00009214                 public ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
.text$mn:00009214 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z proc near
.text$mn:00009214                                         ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+Bp
.text$mn:00009214
.text$mn:00009214 var_4           = dword ptr -4
.text$mn:00009214 Str             = dword ptr  8
.text$mn:00009214
.text$mn:00009214                 push    ebp
.text$mn:00009215                 mov     ebp, esp
.text$mn:00009217                 push    ecx
.text$mn:00009218                 mov     [ebp+var_4], ecx
.text$mn:0000921B                 push    86Eh            ; unsigned int
.text$mn:00009220                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009225                 mov     eax, [ebp+Str]
.text$mn:00009228                 push    eax             ; int
.text$mn:00009229                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000922E                 add     esp, 0Ch
.text$mn:00009231                 mov     ecx, [ebp+Str]
.text$mn:00009234                 push    ecx             ; Str
.text$mn:00009235                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000923A                 add     esp, 4
.text$mn:0000923D                 push    eax             ; int
.text$mn:0000923E                 mov     edx, [ebp+Str]
.text$mn:00009241                 push    edx             ; Buf2
.text$mn:00009242                 mov     eax, [ebp+var_4]
.text$mn:00009245                 mov     ecx, [eax+14h]
.text$mn:00009248                 push    ecx             ; int
.text$mn:00009249                 push    0               ; int
.text$mn:0000924B                 mov     ecx, [ebp+var_4]
.text$mn:0000924E                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)
.text$mn:00009253                 mov     esp, ebp
.text$mn:00009255                 pop     ebp
.text$mn:00009256                 retn    4
.text$mn:00009256 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z endp
.text$mn:00009256
.text$mn:00009256 ; ---------------------------------------------------------------------------
.text$mn:00009259                 align 4
.text$mn:00009259 _text$mn        ends
.text$mn:00009259
.text$mn:0000925C ; ===========================================================================
.text$mn:0000925C
.text$mn:0000925C ; Segment type: Pure code
.text$mn:0000925C ; Segment permissions: Read/Execute
.text$mn:0000925C _text$mn        segment para public 'CODE' use32
.text$mn:0000925C                 assume cs:_text$mn
.text$mn:0000925C                 ;org 925Ch
.text$mn:0000925C ; COMDAT (pick any)
.text$mn:0000925C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000925C
.text$mn:0000925C ; =============== S U B R O U T I N E =======================================
.text$mn:0000925C
.text$mn:0000925C ; Attributes: bp-based frame
.text$mn:0000925C
.text$mn:0000925C ; int __cdecl std::char_traits<char>::compare(void *Buf1, void *Buf2, size_t Size)
.text$mn:0000925C                 public ?compare@?$char_traits@D@std@@SAHPBD0I@Z
.text$mn:0000925C ?compare@?$char_traits@D@std@@SAHPBD0I@Z proc near
.text$mn:0000925C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+7Cp
.text$mn:0000925C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+C6p
.text$mn:0000925C
.text$mn:0000925C var_4           = dword ptr -4
.text$mn:0000925C Buf1            = dword ptr  8
.text$mn:0000925C Buf2            = dword ptr  0Ch
.text$mn:0000925C Size            = dword ptr  10h
.text$mn:0000925C
.text$mn:0000925C                 push    ebp
.text$mn:0000925D                 mov     ebp, esp
.text$mn:0000925F                 push    ecx
.text$mn:00009260                 cmp     [ebp+Size], 0
.text$mn:00009264                 jnz     short loc_926F
.text$mn:00009266                 mov     [ebp+var_4], 0
.text$mn:0000926D                 jmp     short loc_9286
.text$mn:0000926F ; ---------------------------------------------------------------------------
.text$mn:0000926F
.text$mn:0000926F loc_926F:                               ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+8j
.text$mn:0000926F                 mov     eax, [ebp+Size]
.text$mn:00009272                 push    eax             ; Size
.text$mn:00009273                 mov     ecx, [ebp+Buf2]
.text$mn:00009276                 push    ecx             ; Buf2
.text$mn:00009277                 mov     edx, [ebp+Buf1]
.text$mn:0000927A                 push    edx             ; Buf1
.text$mn:0000927B                 call    _memcmp
.text$mn:00009280                 add     esp, 0Ch
.text$mn:00009283                 mov     [ebp+var_4], eax
.text$mn:00009286
.text$mn:00009286 loc_9286:                               ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+11j
.text$mn:00009286                 mov     eax, [ebp+var_4]
.text$mn:00009289                 mov     esp, ebp
.text$mn:0000928B                 pop     ebp
.text$mn:0000928C                 retn
.text$mn:0000928C ?compare@?$char_traits@D@std@@SAHPBD0I@Z endp
.text$mn:0000928C
.text$mn:0000928C ; ---------------------------------------------------------------------------
.text$mn:0000928D                 align 10h
.text$mn:0000928D _text$mn        ends
.text$mn:0000928D
.text$mn:00009290 ; ===========================================================================
.text$mn:00009290
.text$mn:00009290 ; Segment type: Pure code
.text$mn:00009290 ; Segment permissions: Read/Execute
.text$mn:00009290 _text$mn        segment para public 'CODE' use32
.text$mn:00009290                 assume cs:_text$mn
.text$mn:00009290                 ;org 9290h
.text$mn:00009290 ; COMDAT (pick any)
.text$mn:00009290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009290
.text$mn:00009290 ; =============== S U B R O U T I N E =======================================
.text$mn:00009290
.text$mn:00009290 ; Attributes: bp-based frame
.text$mn:00009290
.text$mn:00009290 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00009290                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00009290 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00009290                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+56p ...
.text$mn:00009290
.text$mn:00009290 var_4           = dword ptr -4
.text$mn:00009290 Dst             = dword ptr  8
.text$mn:00009290 Src             = dword ptr  0Ch
.text$mn:00009290 Size            = dword ptr  10h
.text$mn:00009290
.text$mn:00009290                 push    ebp
.text$mn:00009291                 mov     ebp, esp
.text$mn:00009293                 push    ecx
.text$mn:00009294                 cmp     [ebp+Size], 0
.text$mn:00009298                 jnz     short loc_92A2
.text$mn:0000929A                 mov     eax, [ebp+Dst]
.text$mn:0000929D                 mov     [ebp+var_4], eax
.text$mn:000092A0                 jmp     short loc_92B9
.text$mn:000092A2 ; ---------------------------------------------------------------------------
.text$mn:000092A2
.text$mn:000092A2 loc_92A2:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:000092A2                 mov     ecx, [ebp+Size]
.text$mn:000092A5                 push    ecx             ; Size
.text$mn:000092A6                 mov     edx, [ebp+Src]
.text$mn:000092A9                 push    edx             ; Src
.text$mn:000092AA                 mov     eax, [ebp+Dst]
.text$mn:000092AD                 push    eax             ; Dst
.text$mn:000092AE                 call    _memcpy
.text$mn:000092B3                 add     esp, 0Ch
.text$mn:000092B6                 mov     [ebp+var_4], eax
.text$mn:000092B9
.text$mn:000092B9 loc_92B9:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:000092B9                 mov     eax, [ebp+var_4]
.text$mn:000092BC                 mov     esp, ebp
.text$mn:000092BE                 pop     ebp
.text$mn:000092BF                 retn
.text$mn:000092BF ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000092BF
.text$mn:000092BF _text$mn        ends
.text$mn:000092BF
.text$mn:000092C0 ; ===========================================================================
.text$mn:000092C0
.text$mn:000092C0 ; Segment type: Pure code
.text$mn:000092C0 ; Segment permissions: Read/Execute
.text$mn:000092C0 _text$mn        segment para public 'CODE' use32
.text$mn:000092C0                 assume cs:_text$mn
.text$mn:000092C0                 ;org 92C0h
.text$mn:000092C0 ; COMDAT (pick any)
.text$mn:000092C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092C0
.text$mn:000092C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000092C0
.text$mn:000092C0 ; Attributes: bp-based frame
.text$mn:000092C0
.text$mn:000092C0 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:000092C0                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:000092C0 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:000092C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:000092C0
.text$mn:000092C0 var_4           = dword ptr -4
.text$mn:000092C0 arg_0           = dword ptr  8
.text$mn:000092C0 arg_4           = dword ptr  0Ch
.text$mn:000092C0
.text$mn:000092C0                 push    ebp
.text$mn:000092C1                 mov     ebp, esp
.text$mn:000092C3                 push    ecx
.text$mn:000092C4                 mov     [ebp+var_4], ecx
.text$mn:000092C7                 mov     eax, [ebp+arg_4]
.text$mn:000092CA                 push    eax             ; int
.text$mn:000092CB                 mov     ecx, [ebp+arg_0]
.text$mn:000092CE                 push    ecx             ; void *
.text$mn:000092CF                 mov     ecx, [ebp+var_4]
.text$mn:000092D2                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:000092D7                 mov     esp, ebp
.text$mn:000092D9                 pop     ebp
.text$mn:000092DA                 retn    8
.text$mn:000092DA ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:000092DA
.text$mn:000092DA ; ---------------------------------------------------------------------------
.text$mn:000092DD                 align 10h
.text$mn:000092DD _text$mn        ends
.text$mn:000092DD
.text$mn:000092E0 ; ===========================================================================
.text$mn:000092E0
.text$mn:000092E0 ; Segment type: Pure code
.text$mn:000092E0 ; Segment permissions: Read/Execute
.text$mn:000092E0 _text$mn        segment para public 'CODE' use32
.text$mn:000092E0                 assume cs:_text$mn
.text$mn:000092E0                 ;org 92E0h
.text$mn:000092E0 ; COMDAT (pick any)
.text$mn:000092E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092E0
.text$mn:000092E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000092E0
.text$mn:000092E0 ; Attributes: bp-based frame
.text$mn:000092E0
.text$mn:000092E0 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:000092E0                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:000092E0 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:000092E0                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+55p
.text$mn:000092E0                                         ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p ...
.text$mn:000092E0
.text$mn:000092E0 var_4           = dword ptr -4
.text$mn:000092E0 arg_0           = dword ptr  8
.text$mn:000092E0
.text$mn:000092E0                 push    ebp
.text$mn:000092E1                 mov     ebp, esp
.text$mn:000092E3                 push    ecx
.text$mn:000092E4                 mov     [ebp+var_4], ecx
.text$mn:000092E7                 mov     eax, [ebp+arg_0]
.text$mn:000092EA                 push    eax             ; void *
.text$mn:000092EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000092F0                 add     esp, 4
.text$mn:000092F3                 mov     esp, ebp
.text$mn:000092F5                 pop     ebp
.text$mn:000092F6                 retn    8
.text$mn:000092F6 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:000092F6
.text$mn:000092F6 ; ---------------------------------------------------------------------------
.text$mn:000092F9                 align 4
.text$mn:000092F9 _text$mn        ends
.text$mn:000092F9
.text$mn:000092FC ; ===========================================================================
.text$mn:000092FC
.text$mn:000092FC ; Segment type: Pure code
.text$mn:000092FC ; Segment permissions: Read/Execute
.text$mn:000092FC _text$mn        segment para public 'CODE' use32
.text$mn:000092FC                 assume cs:_text$mn
.text$mn:000092FC                 ;org 92FCh
.text$mn:000092FC ; COMDAT (pick any)
.text$mn:000092FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092FC
.text$mn:000092FC ; =============== S U B R O U T I N E =======================================
.text$mn:000092FC
.text$mn:000092FC ; Attributes: bp-based frame
.text$mn:000092FC
.text$mn:000092FC ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:000092FC                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:000092FC ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:000092FC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:000092FC
.text$mn:000092FC var_4           = dword ptr -4
.text$mn:000092FC arg_0           = dword ptr  8
.text$mn:000092FC
.text$mn:000092FC                 push    ebp
.text$mn:000092FD                 mov     ebp, esp
.text$mn:000092FF                 push    ecx
.text$mn:00009300                 mov     [ebp+var_4], ecx
.text$mn:00009303                 mov     eax, [ebp+arg_0]
.text$mn:00009306                 push    eax             ; void *
.text$mn:00009307                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000930C                 add     esp, 4
.text$mn:0000930F                 mov     esp, ebp
.text$mn:00009311                 pop     ebp
.text$mn:00009312                 retn    8
.text$mn:00009312 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00009312
.text$mn:00009312 ; ---------------------------------------------------------------------------
.text$mn:00009315                 align 4
.text$mn:00009315 _text$mn        ends
.text$mn:00009315
.text$mn:00009318 ; ===========================================================================
.text$mn:00009318
.text$mn:00009318 ; Segment type: Pure code
.text$mn:00009318 ; Segment permissions: Read/Execute
.text$mn:00009318 _text$mn        segment para public 'CODE' use32
.text$mn:00009318                 assume cs:_text$mn
.text$mn:00009318                 ;org 9318h
.text$mn:00009318 ; COMDAT (pick any)
.text$mn:00009318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009318
.text$mn:00009318 ; =============== S U B R O U T I N E =======================================
.text$mn:00009318
.text$mn:00009318 ; Attributes: bp-based frame
.text$mn:00009318
.text$mn:00009318 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00009318                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00009318 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00009318                                         ; DATA XREF: .rdata:0000CB18o
.text$mn:00009318
.text$mn:00009318 var_4           = dword ptr -4
.text$mn:00009318 arg_0           = dword ptr  8
.text$mn:00009318 arg_4           = dword ptr  0Ch
.text$mn:00009318
.text$mn:00009318                 push    ebp
.text$mn:00009319                 mov     ebp, esp
.text$mn:0000931B                 push    ecx
.text$mn:0000931C                 mov     [ebp+var_4], ecx
.text$mn:0000931F                 mov     eax, [ebp+arg_4]
.text$mn:00009322                 push    eax             ; int
.text$mn:00009323                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00009328                 add     esp, 4
.text$mn:0000932B                 test    eax, eax
.text$mn:0000932D                 jz      short loc_9348
.text$mn:0000932F                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00009334                 push    eax             ; struct std::error_category *
.text$mn:00009335                 mov     ecx, [ebp+arg_4]
.text$mn:00009338                 push    ecx             ; int
.text$mn:00009339                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000933C                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00009341                 mov     eax, [ebp+arg_0]
.text$mn:00009344                 jmp     short loc_935D
.text$mn:00009346 ; ---------------------------------------------------------------------------
.text$mn:00009346                 jmp     short loc_935D
.text$mn:00009348 ; ---------------------------------------------------------------------------
.text$mn:00009348
.text$mn:00009348 loc_9348:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00009348                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000934D                 push    eax             ; struct std::error_category *
.text$mn:0000934E                 mov     edx, [ebp+arg_4]
.text$mn:00009351                 push    edx             ; int
.text$mn:00009352                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009355                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000935A                 mov     eax, [ebp+arg_0]
.text$mn:0000935D
.text$mn:0000935D loc_935D:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000935D                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000935D                 mov     esp, ebp
.text$mn:0000935F                 pop     ebp
.text$mn:00009360                 retn    8
.text$mn:00009360 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00009360
.text$mn:00009360 ; ---------------------------------------------------------------------------
.text$mn:00009363                 align 4
.text$mn:00009363 _text$mn        ends
.text$mn:00009363
.text$mn:00009364 ; ===========================================================================
.text$mn:00009364
.text$mn:00009364 ; Segment type: Pure code
.text$mn:00009364 ; Segment permissions: Read/Execute
.text$mn:00009364 _text$mn        segment para public 'CODE' use32
.text$mn:00009364                 assume cs:_text$mn
.text$mn:00009364                 ;org 9364h
.text$mn:00009364 ; COMDAT (pick any)
.text$mn:00009364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009364
.text$mn:00009364 ; =============== S U B R O U T I N E =======================================
.text$mn:00009364
.text$mn:00009364 ; Attributes: bp-based frame
.text$mn:00009364
.text$mn:00009364 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00009364                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00009364 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00009364                                         ; DATA XREF: .rdata:0000CA6Co
.text$mn:00009364                                         ; .rdata:0000CAA4o ...
.text$mn:00009364
.text$mn:00009364 var_4           = dword ptr -4
.text$mn:00009364 arg_0           = dword ptr  8
.text$mn:00009364 arg_4           = dword ptr  0Ch
.text$mn:00009364
.text$mn:00009364                 push    ebp
.text$mn:00009365                 mov     ebp, esp
.text$mn:00009367                 push    ecx
.text$mn:00009368                 mov     [ebp+var_4], ecx
.text$mn:0000936B                 mov     eax, [ebp+var_4]
.text$mn:0000936E                 push    eax             ; struct std::error_category *
.text$mn:0000936F                 mov     ecx, [ebp+arg_4]
.text$mn:00009372                 push    ecx             ; int
.text$mn:00009373                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009376                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000937B                 mov     eax, [ebp+arg_0]
.text$mn:0000937E                 mov     esp, ebp
.text$mn:00009380                 pop     ebp
.text$mn:00009381                 retn    8
.text$mn:00009381 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00009381
.text$mn:00009381 _text$mn        ends
.text$mn:00009381
.text$mn:00009384 ; ===========================================================================
.text$mn:00009384
.text$mn:00009384 ; Segment type: Pure code
.text$mn:00009384 ; Segment permissions: Read/Execute
.text$mn:00009384 _text$mn        segment para public 'CODE' use32
.text$mn:00009384                 assume cs:_text$mn
.text$mn:00009384                 ;org 9384h
.text$mn:00009384 ; COMDAT (pick any)
.text$mn:00009384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009384
.text$mn:00009384 ; =============== S U B R O U T I N E =======================================
.text$mn:00009384
.text$mn:00009384 ; Attributes: bp-based frame
.text$mn:00009384
.text$mn:00009384 ; protected: virtual char __thiscall std::ctype<char>::do_narrow(char, char)const
.text$mn:00009384                 public ?do_narrow@?$ctype@D@std@@MBEDDD@Z
.text$mn:00009384 ?do_narrow@?$ctype@D@std@@MBEDDD@Z proc near ; DATA XREF: .rdata:0000CA58o
.text$mn:00009384
.text$mn:00009384 var_4           = dword ptr -4
.text$mn:00009384 arg_0           = byte ptr  8
.text$mn:00009384
.text$mn:00009384                 push    ebp
.text$mn:00009385                 mov     ebp, esp
.text$mn:00009387                 push    ecx
.text$mn:00009388                 mov     [ebp+var_4], ecx
.text$mn:0000938B                 mov     al, [ebp+arg_0]
.text$mn:0000938E                 mov     esp, ebp
.text$mn:00009390                 pop     ebp
.text$mn:00009391                 retn    8
.text$mn:00009391 ?do_narrow@?$ctype@D@std@@MBEDDD@Z endp
.text$mn:00009391
.text$mn:00009391 _text$mn        ends
.text$mn:00009391
.text$mn:00009394 ; ===========================================================================
.text$mn:00009394
.text$mn:00009394 ; Segment type: Pure code
.text$mn:00009394 ; Segment permissions: Read/Execute
.text$mn:00009394 _text$mn        segment para public 'CODE' use32
.text$mn:00009394                 assume cs:_text$mn
.text$mn:00009394                 ;org 9394h
.text$mn:00009394 ; COMDAT (pick any)
.text$mn:00009394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009394
.text$mn:00009394 ; =============== S U B R O U T I N E =======================================
.text$mn:00009394
.text$mn:00009394 ; Attributes: bp-based frame
.text$mn:00009394
.text$mn:00009394 ; int __stdcall std::ctype<char>::do_narrow(void *Src, int, int, void *Dst)
.text$mn:00009394                 public ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
.text$mn:00009394 ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z proc near
.text$mn:00009394                                         ; DATA XREF: .rdata:0000CA54o
.text$mn:00009394
.text$mn:00009394 var_4           = dword ptr -4
.text$mn:00009394 Src             = dword ptr  8
.text$mn:00009394 arg_4           = dword ptr  0Ch
.text$mn:00009394 Dst             = dword ptr  14h
.text$mn:00009394
.text$mn:00009394                 push    ebp
.text$mn:00009395                 mov     ebp, esp
.text$mn:00009397                 push    ecx
.text$mn:00009398                 mov     [ebp+var_4], ecx
.text$mn:0000939B                 push    0A02h           ; unsigned int
.text$mn:000093A0                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000093A5                 mov     eax, [ebp+arg_4]
.text$mn:000093A8                 push    eax             ; int
.text$mn:000093A9                 mov     ecx, [ebp+Src]
.text$mn:000093AC                 push    ecx             ; int
.text$mn:000093AD                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:000093B2                 add     esp, 10h
.text$mn:000093B5                 push    0A03h           ; unsigned int
.text$mn:000093BA                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000093BF                 mov     edx, [ebp+Dst]
.text$mn:000093C2                 push    edx             ; int
.text$mn:000093C3                 call    ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z ; std::_Debug_pointer<char>(char *,wchar_t const *,uint)
.text$mn:000093C8                 add     esp, 0Ch
.text$mn:000093CB                 mov     eax, [ebp+arg_4]
.text$mn:000093CE                 sub     eax, [ebp+Src]
.text$mn:000093D1                 push    eax             ; Size
.text$mn:000093D2                 mov     ecx, [ebp+Src]
.text$mn:000093D5                 push    ecx             ; Src
.text$mn:000093D6                 mov     edx, [ebp+Dst]
.text$mn:000093D9                 push    edx             ; Dst
.text$mn:000093DA                 call    _memcpy
.text$mn:000093DF                 add     esp, 0Ch
.text$mn:000093E2                 mov     eax, [ebp+arg_4]
.text$mn:000093E5                 mov     esp, ebp
.text$mn:000093E7                 pop     ebp
.text$mn:000093E8                 retn    10h
.text$mn:000093E8 ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z endp
.text$mn:000093E8
.text$mn:000093E8 ; ---------------------------------------------------------------------------
.text$mn:000093EB                 align 4
.text$mn:000093EB _text$mn        ends
.text$mn:000093EB
.text$mn:000093EC ; ===========================================================================
.text$mn:000093EC
.text$mn:000093EC ; Segment type: Pure code
.text$mn:000093EC ; Segment permissions: Read/Execute
.text$mn:000093EC _text$mn        segment para public 'CODE' use32
.text$mn:000093EC                 assume cs:_text$mn
.text$mn:000093EC                 ;org 93ECh
.text$mn:000093EC ; COMDAT (pick any)
.text$mn:000093EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093EC
.text$mn:000093EC ; =============== S U B R O U T I N E =======================================
.text$mn:000093EC
.text$mn:000093EC ; Attributes: bp-based frame
.text$mn:000093EC
.text$mn:000093EC ; protected: virtual char __thiscall std::ctype<char>::do_tolower(char)const
.text$mn:000093EC                 public ?do_tolower@?$ctype@D@std@@MBEDD@Z
.text$mn:000093EC ?do_tolower@?$ctype@D@std@@MBEDD@Z proc near ; DATA XREF: .rdata:0000CA40o
.text$mn:000093EC
.text$mn:000093EC var_4           = dword ptr -4
.text$mn:000093EC arg_0           = byte ptr  8
.text$mn:000093EC
.text$mn:000093EC                 push    ebp
.text$mn:000093ED                 mov     ebp, esp
.text$mn:000093EF                 push    ecx
.text$mn:000093F0                 mov     [ebp+var_4], ecx
.text$mn:000093F3                 mov     eax, [ebp+var_4]
.text$mn:000093F6                 add     eax, 8
.text$mn:000093F9                 push    eax
.text$mn:000093FA                 movzx   ecx, [ebp+arg_0]
.text$mn:000093FE                 push    ecx
.text$mn:000093FF                 call    __Tolower
.text$mn:00009404                 add     esp, 8
.text$mn:00009407                 mov     esp, ebp
.text$mn:00009409                 pop     ebp
.text$mn:0000940A                 retn    4
.text$mn:0000940A ?do_tolower@?$ctype@D@std@@MBEDD@Z endp
.text$mn:0000940A
.text$mn:0000940A ; ---------------------------------------------------------------------------
.text$mn:0000940D                 align 10h
.text$mn:0000940D _text$mn        ends
.text$mn:0000940D
.text$mn:00009410 ; ===========================================================================
.text$mn:00009410
.text$mn:00009410 ; Segment type: Pure code
.text$mn:00009410 ; Segment permissions: Read/Execute
.text$mn:00009410 _text$mn        segment para public 'CODE' use32
.text$mn:00009410                 assume cs:_text$mn
.text$mn:00009410                 ;org 9410h
.text$mn:00009410 ; COMDAT (pick any)
.text$mn:00009410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009410
.text$mn:00009410 ; =============== S U B R O U T I N E =======================================
.text$mn:00009410
.text$mn:00009410 ; Attributes: bp-based frame
.text$mn:00009410
.text$mn:00009410 ; protected: virtual char const * __thiscall std::ctype<char>::do_tolower(char *, char const *)const
.text$mn:00009410                 public ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
.text$mn:00009410 ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z proc near
.text$mn:00009410                                         ; DATA XREF: .rdata:0000CA3Co
.text$mn:00009410
.text$mn:00009410 var_4           = dword ptr -4
.text$mn:00009410 arg_0           = dword ptr  8
.text$mn:00009410 arg_4           = dword ptr  0Ch
.text$mn:00009410
.text$mn:00009410                 push    ebp
.text$mn:00009411                 mov     ebp, esp
.text$mn:00009413                 push    ecx
.text$mn:00009414                 mov     [ebp+var_4], ecx
.text$mn:00009417                 push    9D8h            ; unsigned int
.text$mn:0000941C                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009421                 mov     eax, [ebp+arg_4]
.text$mn:00009424                 push    eax             ; int
.text$mn:00009425                 mov     ecx, [ebp+arg_0]
.text$mn:00009428                 push    ecx             ; int
.text$mn:00009429                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:0000942E                 add     esp, 10h
.text$mn:00009431                 jmp     short loc_943C
.text$mn:00009433 ; ---------------------------------------------------------------------------
.text$mn:00009433
.text$mn:00009433 loc_9433:                               ; CODE XREF: std::ctype<char>::do_tolower(char *,char const *)+4Fj
.text$mn:00009433                 mov     edx, [ebp+arg_0]
.text$mn:00009436                 add     edx, 1
.text$mn:00009439                 mov     [ebp+arg_0], edx
.text$mn:0000943C
.text$mn:0000943C loc_943C:                               ; CODE XREF: std::ctype<char>::do_tolower(char *,char const *)+21j
.text$mn:0000943C                 mov     eax, [ebp+arg_0]
.text$mn:0000943F                 cmp     eax, [ebp+arg_4]
.text$mn:00009442                 jz      short loc_9461
.text$mn:00009444                 mov     ecx, [ebp+var_4]
.text$mn:00009447                 add     ecx, 8
.text$mn:0000944A                 push    ecx
.text$mn:0000944B                 mov     edx, [ebp+arg_0]
.text$mn:0000944E                 movzx   eax, byte ptr [edx]
.text$mn:00009451                 push    eax
.text$mn:00009452                 call    __Tolower
.text$mn:00009457                 add     esp, 8
.text$mn:0000945A                 mov     ecx, [ebp+arg_0]
.text$mn:0000945D                 mov     [ecx], al
.text$mn:0000945F                 jmp     short loc_9433
.text$mn:00009461 ; ---------------------------------------------------------------------------
.text$mn:00009461
.text$mn:00009461 loc_9461:                               ; CODE XREF: std::ctype<char>::do_tolower(char *,char const *)+32j
.text$mn:00009461                 mov     eax, [ebp+arg_0]
.text$mn:00009464                 mov     esp, ebp
.text$mn:00009466                 pop     ebp
.text$mn:00009467                 retn    8
.text$mn:00009467 ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z endp
.text$mn:00009467
.text$mn:00009467 ; ---------------------------------------------------------------------------
.text$mn:0000946A                 align 4
.text$mn:0000946A _text$mn        ends
.text$mn:0000946A
.text$mn:0000946C ; ===========================================================================
.text$mn:0000946C
.text$mn:0000946C ; Segment type: Pure code
.text$mn:0000946C ; Segment permissions: Read/Execute
.text$mn:0000946C _text$mn        segment para public 'CODE' use32
.text$mn:0000946C                 assume cs:_text$mn
.text$mn:0000946C                 ;org 946Ch
.text$mn:0000946C ; COMDAT (pick any)
.text$mn:0000946C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000946C
.text$mn:0000946C ; =============== S U B R O U T I N E =======================================
.text$mn:0000946C
.text$mn:0000946C ; Attributes: bp-based frame
.text$mn:0000946C
.text$mn:0000946C ; protected: virtual char __thiscall std::ctype<char>::do_toupper(char)const
.text$mn:0000946C                 public ?do_toupper@?$ctype@D@std@@MBEDD@Z
.text$mn:0000946C ?do_toupper@?$ctype@D@std@@MBEDD@Z proc near ; DATA XREF: .rdata:0000CA48o
.text$mn:0000946C
.text$mn:0000946C var_4           = dword ptr -4
.text$mn:0000946C arg_0           = byte ptr  8
.text$mn:0000946C
.text$mn:0000946C                 push    ebp
.text$mn:0000946D                 mov     ebp, esp
.text$mn:0000946F                 push    ecx
.text$mn:00009470                 mov     [ebp+var_4], ecx
.text$mn:00009473                 mov     eax, [ebp+var_4]
.text$mn:00009476                 add     eax, 8
.text$mn:00009479                 push    eax
.text$mn:0000947A                 movzx   ecx, [ebp+arg_0]
.text$mn:0000947E                 push    ecx
.text$mn:0000947F                 call    __Toupper
.text$mn:00009484                 add     esp, 8
.text$mn:00009487                 mov     esp, ebp
.text$mn:00009489                 pop     ebp
.text$mn:0000948A                 retn    4
.text$mn:0000948A ?do_toupper@?$ctype@D@std@@MBEDD@Z endp
.text$mn:0000948A
.text$mn:0000948A ; ---------------------------------------------------------------------------
.text$mn:0000948D                 align 10h
.text$mn:0000948D _text$mn        ends
.text$mn:0000948D
.text$mn:00009490 ; ===========================================================================
.text$mn:00009490
.text$mn:00009490 ; Segment type: Pure code
.text$mn:00009490 ; Segment permissions: Read/Execute
.text$mn:00009490 _text$mn        segment para public 'CODE' use32
.text$mn:00009490                 assume cs:_text$mn
.text$mn:00009490                 ;org 9490h
.text$mn:00009490 ; COMDAT (pick any)
.text$mn:00009490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009490
.text$mn:00009490 ; =============== S U B R O U T I N E =======================================
.text$mn:00009490
.text$mn:00009490 ; Attributes: bp-based frame
.text$mn:00009490
.text$mn:00009490 ; protected: virtual char const * __thiscall std::ctype<char>::do_toupper(char *, char const *)const
.text$mn:00009490                 public ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
.text$mn:00009490 ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z proc near
.text$mn:00009490                                         ; DATA XREF: .rdata:0000CA44o
.text$mn:00009490
.text$mn:00009490 var_4           = dword ptr -4
.text$mn:00009490 arg_0           = dword ptr  8
.text$mn:00009490 arg_4           = dword ptr  0Ch
.text$mn:00009490
.text$mn:00009490                 push    ebp
.text$mn:00009491                 mov     ebp, esp
.text$mn:00009493                 push    ecx
.text$mn:00009494                 mov     [ebp+var_4], ecx
.text$mn:00009497                 push    9E6h            ; unsigned int
.text$mn:0000949C                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000094A1                 mov     eax, [ebp+arg_4]
.text$mn:000094A4                 push    eax             ; int
.text$mn:000094A5                 mov     ecx, [ebp+arg_0]
.text$mn:000094A8                 push    ecx             ; int
.text$mn:000094A9                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:000094AE                 add     esp, 10h
.text$mn:000094B1                 jmp     short loc_94BC
.text$mn:000094B3 ; ---------------------------------------------------------------------------
.text$mn:000094B3
.text$mn:000094B3 loc_94B3:                               ; CODE XREF: std::ctype<char>::do_toupper(char *,char const *)+4Fj
.text$mn:000094B3                 mov     edx, [ebp+arg_0]
.text$mn:000094B6                 add     edx, 1
.text$mn:000094B9                 mov     [ebp+arg_0], edx
.text$mn:000094BC
.text$mn:000094BC loc_94BC:                               ; CODE XREF: std::ctype<char>::do_toupper(char *,char const *)+21j
.text$mn:000094BC                 mov     eax, [ebp+arg_0]
.text$mn:000094BF                 cmp     eax, [ebp+arg_4]
.text$mn:000094C2                 jz      short loc_94E1
.text$mn:000094C4                 mov     ecx, [ebp+var_4]
.text$mn:000094C7                 add     ecx, 8
.text$mn:000094CA                 push    ecx
.text$mn:000094CB                 mov     edx, [ebp+arg_0]
.text$mn:000094CE                 movzx   eax, byte ptr [edx]
.text$mn:000094D1                 push    eax
.text$mn:000094D2                 call    __Toupper
.text$mn:000094D7                 add     esp, 8
.text$mn:000094DA                 mov     ecx, [ebp+arg_0]
.text$mn:000094DD                 mov     [ecx], al
.text$mn:000094DF                 jmp     short loc_94B3
.text$mn:000094E1 ; ---------------------------------------------------------------------------
.text$mn:000094E1
.text$mn:000094E1 loc_94E1:                               ; CODE XREF: std::ctype<char>::do_toupper(char *,char const *)+32j
.text$mn:000094E1                 mov     eax, [ebp+arg_0]
.text$mn:000094E4                 mov     esp, ebp
.text$mn:000094E6                 pop     ebp
.text$mn:000094E7                 retn    8
.text$mn:000094E7 ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z endp
.text$mn:000094E7
.text$mn:000094E7 ; ---------------------------------------------------------------------------
.text$mn:000094EA                 align 4
.text$mn:000094EA _text$mn        ends
.text$mn:000094EA
.text$mn:000094EC ; ===========================================================================
.text$mn:000094EC
.text$mn:000094EC ; Segment type: Pure code
.text$mn:000094EC ; Segment permissions: Read/Execute
.text$mn:000094EC _text$mn        segment para public 'CODE' use32
.text$mn:000094EC                 assume cs:_text$mn
.text$mn:000094EC                 ;org 94ECh
.text$mn:000094EC ; COMDAT (pick any)
.text$mn:000094EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094EC
.text$mn:000094EC ; =============== S U B R O U T I N E =======================================
.text$mn:000094EC
.text$mn:000094EC ; Attributes: bp-based frame
.text$mn:000094EC
.text$mn:000094EC ; protected: virtual char __thiscall std::ctype<char>::do_widen(char)const
.text$mn:000094EC                 public ?do_widen@?$ctype@D@std@@MBEDD@Z
.text$mn:000094EC ?do_widen@?$ctype@D@std@@MBEDD@Z proc near ; DATA XREF: .rdata:0000CA50o
.text$mn:000094EC
.text$mn:000094EC var_4           = dword ptr -4
.text$mn:000094EC arg_0           = byte ptr  8
.text$mn:000094EC
.text$mn:000094EC                 push    ebp
.text$mn:000094ED                 mov     ebp, esp
.text$mn:000094EF                 push    ecx
.text$mn:000094F0                 mov     [ebp+var_4], ecx
.text$mn:000094F3                 mov     al, [ebp+arg_0]
.text$mn:000094F6                 mov     esp, ebp
.text$mn:000094F8                 pop     ebp
.text$mn:000094F9                 retn    4
.text$mn:000094F9 ?do_widen@?$ctype@D@std@@MBEDD@Z endp
.text$mn:000094F9
.text$mn:000094F9 _text$mn        ends
.text$mn:000094F9
.text$mn:000094FC ; ===========================================================================
.text$mn:000094FC
.text$mn:000094FC ; Segment type: Pure code
.text$mn:000094FC ; Segment permissions: Read/Execute
.text$mn:000094FC _text$mn        segment para public 'CODE' use32
.text$mn:000094FC                 assume cs:_text$mn
.text$mn:000094FC                 ;org 94FCh
.text$mn:000094FC ; COMDAT (pick any)
.text$mn:000094FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094FC
.text$mn:000094FC ; =============== S U B R O U T I N E =======================================
.text$mn:000094FC
.text$mn:000094FC ; Attributes: bp-based frame
.text$mn:000094FC
.text$mn:000094FC ; int __stdcall std::ctype<char>::do_widen(void *Src, int, void *Dst)
.text$mn:000094FC                 public ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
.text$mn:000094FC ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z proc near
.text$mn:000094FC                                         ; DATA XREF: .rdata:0000CA4Co
.text$mn:000094FC
.text$mn:000094FC var_4           = dword ptr -4
.text$mn:000094FC Src             = dword ptr  8
.text$mn:000094FC arg_4           = dword ptr  0Ch
.text$mn:000094FC Dst             = dword ptr  10h
.text$mn:000094FC
.text$mn:000094FC                 push    ebp
.text$mn:000094FD                 mov     ebp, esp
.text$mn:000094FF                 push    ecx
.text$mn:00009500                 mov     [ebp+var_4], ecx
.text$mn:00009503                 push    9F4h            ; unsigned int
.text$mn:00009508                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000950D                 mov     eax, [ebp+arg_4]
.text$mn:00009510                 push    eax             ; int
.text$mn:00009511                 mov     ecx, [ebp+Src]
.text$mn:00009514                 push    ecx             ; int
.text$mn:00009515                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:0000951A                 add     esp, 10h
.text$mn:0000951D                 push    9F5h            ; unsigned int
.text$mn:00009522                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009527                 mov     edx, [ebp+Dst]
.text$mn:0000952A                 push    edx             ; int
.text$mn:0000952B                 call    ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z ; std::_Debug_pointer<char>(char *,wchar_t const *,uint)
.text$mn:00009530                 add     esp, 0Ch
.text$mn:00009533                 mov     eax, [ebp+arg_4]
.text$mn:00009536                 sub     eax, [ebp+Src]
.text$mn:00009539                 push    eax             ; Size
.text$mn:0000953A                 mov     ecx, [ebp+Src]
.text$mn:0000953D                 push    ecx             ; Src
.text$mn:0000953E                 mov     edx, [ebp+Dst]
.text$mn:00009541                 push    edx             ; Dst
.text$mn:00009542                 call    _memcpy
.text$mn:00009547                 add     esp, 0Ch
.text$mn:0000954A                 mov     eax, [ebp+arg_4]
.text$mn:0000954D                 mov     esp, ebp
.text$mn:0000954F                 pop     ebp
.text$mn:00009550                 retn    0Ch
.text$mn:00009550 ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z endp
.text$mn:00009550
.text$mn:00009550 ; ---------------------------------------------------------------------------
.text$mn:00009553                 align 4
.text$mn:00009553 _text$mn        ends
.text$mn:00009553
.text$mn:00009554 ; ===========================================================================
.text$mn:00009554
.text$mn:00009554 ; Segment type: Pure code
.text$mn:00009554 ; Segment permissions: Read/Execute
.text$mn:00009554 _text$mn        segment para public 'CODE' use32
.text$mn:00009554                 assume cs:_text$mn
.text$mn:00009554                 ;org 9554h
.text$mn:00009554 ; COMDAT (pick any)
.text$mn:00009554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009554
.text$mn:00009554 ; =============== S U B R O U T I N E =======================================
.text$mn:00009554
.text$mn:00009554 ; Attributes: bp-based frame
.text$mn:00009554
.text$mn:00009554 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::eback(void)const
.text$mn:00009554                 public ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:00009554 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:00009554                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+3Bp
.text$mn:00009554                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+49p ...
.text$mn:00009554
.text$mn:00009554 var_4           = dword ptr -4
.text$mn:00009554
.text$mn:00009554                 push    ebp
.text$mn:00009555                 mov     ebp, esp
.text$mn:00009557                 push    ecx
.text$mn:00009558                 mov     [ebp+var_4], ecx
.text$mn:0000955B                 mov     eax, [ebp+var_4]
.text$mn:0000955E                 mov     ecx, [eax+0Ch]
.text$mn:00009561                 mov     eax, [ecx]
.text$mn:00009563                 mov     esp, ebp
.text$mn:00009565                 pop     ebp
.text$mn:00009566                 retn
.text$mn:00009566 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:00009566
.text$mn:00009566 ; ---------------------------------------------------------------------------
.text$mn:00009567                 align 4
.text$mn:00009567 _text$mn        ends
.text$mn:00009567
.text$mn:00009568 ; ===========================================================================
.text$mn:00009568
.text$mn:00009568 ; Segment type: Pure code
.text$mn:00009568 ; Segment permissions: Read/Execute
.text$mn:00009568 _text$mn        segment para public 'CODE' use32
.text$mn:00009568                 assume cs:_text$mn
.text$mn:00009568                 ;org 9568h
.text$mn:00009568 ; COMDAT (pick any)
.text$mn:00009568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009568
.text$mn:00009568 ; =============== S U B R O U T I N E =======================================
.text$mn:00009568
.text$mn:00009568 ; Attributes: bp-based frame
.text$mn:00009568
.text$mn:00009568 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::egptr(void)const
.text$mn:00009568                 public ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:00009568 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:00009568                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+30p
.text$mn:00009568                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+E2p ...
.text$mn:00009568
.text$mn:00009568 var_4           = dword ptr -4
.text$mn:00009568
.text$mn:00009568                 push    ebp
.text$mn:00009569                 mov     ebp, esp
.text$mn:0000956B                 push    ecx
.text$mn:0000956C                 mov     [ebp+var_4], ecx
.text$mn:0000956F                 mov     eax, [ebp+var_4]
.text$mn:00009572                 mov     ecx, [eax+1Ch]
.text$mn:00009575                 mov     edx, [ebp+var_4]
.text$mn:00009578                 mov     eax, [edx+2Ch]
.text$mn:0000957B                 mov     ecx, [ecx]
.text$mn:0000957D                 add     ecx, [eax]
.text$mn:0000957F                 mov     eax, ecx
.text$mn:00009581                 mov     esp, ebp
.text$mn:00009583                 pop     ebp
.text$mn:00009584                 retn
.text$mn:00009584 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:00009584
.text$mn:00009584 ; ---------------------------------------------------------------------------
.text$mn:00009585                 align 4
.text$mn:00009585 _text$mn        ends
.text$mn:00009585
.text$mn:00009588 ; ===========================================================================
.text$mn:00009588
.text$mn:00009588 ; Segment type: Pure code
.text$mn:00009588 ; Segment permissions: Read/Execute
.text$mn:00009588 _text$mn        segment para public 'CODE' use32
.text$mn:00009588                 assume cs:_text$mn
.text$mn:00009588                 ;org 9588h
.text$mn:00009588 ; COMDAT (pick any)
.text$mn:00009588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009588
.text$mn:00009588 ; =============== S U B R O U T I N E =======================================
.text$mn:00009588
.text$mn:00009588 ; Attributes: bp-based frame
.text$mn:00009588
.text$mn:00009588 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::empty(void)const
.text$mn:00009588                 public ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
.text$mn:00009588 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
.text$mn:00009588                                         ; CODE XREF: TiXmlAttributeA::Next(void)+10p
.text$mn:00009588                                         ; TiXmlAttributeA::Next(void)+25p ...
.text$mn:00009588
.text$mn:00009588 var_8           = dword ptr -8
.text$mn:00009588 var_4           = dword ptr -4
.text$mn:00009588
.text$mn:00009588                 push    ebp
.text$mn:00009589                 mov     ebp, esp
.text$mn:0000958B                 sub     esp, 8
.text$mn:0000958E                 mov     [ebp+var_8], ecx
.text$mn:00009591                 mov     eax, [ebp+var_8]
.text$mn:00009594                 cmp     dword ptr [eax+14h], 0
.text$mn:00009598                 jnz     short loc_95A3
.text$mn:0000959A                 mov     [ebp+var_4], 1
.text$mn:000095A1                 jmp     short loc_95AA
.text$mn:000095A3 ; ---------------------------------------------------------------------------
.text$mn:000095A3
.text$mn:000095A3 loc_95A3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+10j
.text$mn:000095A3                 mov     [ebp+var_4], 0
.text$mn:000095AA
.text$mn:000095AA loc_95AA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+19j
.text$mn:000095AA                 mov     al, byte ptr [ebp+var_4]
.text$mn:000095AD                 mov     esp, ebp
.text$mn:000095AF                 pop     ebp
.text$mn:000095B0                 retn
.text$mn:000095B0 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ endp
.text$mn:000095B0
.text$mn:000095B0 ; ---------------------------------------------------------------------------
.text$mn:000095B1                 align 4
.text$mn:000095B1 _text$mn        ends
.text$mn:000095B1
.text$mn:000095B4 ; ===========================================================================
.text$mn:000095B4
.text$mn:000095B4 ; Segment type: Pure code
.text$mn:000095B4 ; Segment permissions: Read/Execute
.text$mn:000095B4 _text$mn        segment para public 'CODE' use32
.text$mn:000095B4                 assume cs:_text$mn
.text$mn:000095B4                 ;org 95B4h
.text$mn:000095B4 ; COMDAT (pick any)
.text$mn:000095B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095B4
.text$mn:000095B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000095B4
.text$mn:000095B4 ; Attributes: bp-based frame
.text$mn:000095B4
.text$mn:000095B4 ; public: static int __cdecl std::char_traits<char>::eof(void)
.text$mn:000095B4                 public ?eof@?$char_traits@D@std@@SAHXZ
.text$mn:000095B4 ?eof@?$char_traits@D@std@@SAHXZ proc near
.text$mn:000095B4                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+12Fp
.text$mn:000095B4                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1F7p ...
.text$mn:000095B4                 push    ebp
.text$mn:000095B5                 mov     ebp, esp
.text$mn:000095B7                 or      eax, 0FFFFFFFFh
.text$mn:000095BA                 pop     ebp
.text$mn:000095BB                 retn
.text$mn:000095BB ?eof@?$char_traits@D@std@@SAHXZ endp
.text$mn:000095BB
.text$mn:000095BB _text$mn        ends
.text$mn:000095BB
.text$mn:000095BC ; ===========================================================================
.text$mn:000095BC
.text$mn:000095BC ; Segment type: Pure code
.text$mn:000095BC ; Segment permissions: Read/Execute
.text$mn:000095BC _text$mn        segment para public 'CODE' use32
.text$mn:000095BC                 assume cs:_text$mn
.text$mn:000095BC                 ;org 95BCh
.text$mn:000095BC ; COMDAT (pick any)
.text$mn:000095BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095BC
.text$mn:000095BC ; =============== S U B R O U T I N E =======================================
.text$mn:000095BC
.text$mn:000095BC ; Attributes: bp-based frame
.text$mn:000095BC
.text$mn:000095BC ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::epptr(void)const
.text$mn:000095BC                 public ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:000095BC ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:000095BC                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+23p
.text$mn:000095BC                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+7Cp ...
.text$mn:000095BC
.text$mn:000095BC var_4           = dword ptr -4
.text$mn:000095BC
.text$mn:000095BC                 push    ebp
.text$mn:000095BD                 mov     ebp, esp
.text$mn:000095BF                 push    ecx
.text$mn:000095C0                 mov     [ebp+var_4], ecx
.text$mn:000095C3                 mov     eax, [ebp+var_4]
.text$mn:000095C6                 mov     ecx, [eax+20h]
.text$mn:000095C9                 mov     edx, [ebp+var_4]
.text$mn:000095CC                 mov     eax, [edx+30h]
.text$mn:000095CF                 mov     ecx, [ecx]
.text$mn:000095D1                 add     ecx, [eax]
.text$mn:000095D3                 mov     eax, ecx
.text$mn:000095D5                 mov     esp, ebp
.text$mn:000095D7                 pop     ebp
.text$mn:000095D8                 retn
.text$mn:000095D8 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:000095D8
.text$mn:000095D8 ; ---------------------------------------------------------------------------
.text$mn:000095D9                 align 4
.text$mn:000095D9 _text$mn        ends
.text$mn:000095D9
.text$mn:000095DC ; ===========================================================================
.text$mn:000095DC
.text$mn:000095DC ; Segment type: Pure code
.text$mn:000095DC ; Segment permissions: Read/Execute
.text$mn:000095DC _text$mn        segment para public 'CODE' use32
.text$mn:000095DC                 assume cs:_text$mn
.text$mn:000095DC                 ;org 95DCh
.text$mn:000095DC ; COMDAT (pick any)
.text$mn:000095DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095DC
.text$mn:000095DC ; =============== S U B R O U T I N E =======================================
.text$mn:000095DC
.text$mn:000095DC ; Attributes: bp-based frame
.text$mn:000095DC
.text$mn:000095DC ; public: static bool __cdecl std::char_traits<char>::eq(char const &, char const &)
.text$mn:000095DC                 public ?eq@?$char_traits@D@std@@SA_NABD0@Z
.text$mn:000095DC ?eq@?$char_traits@D@std@@SA_NABD0@Z proc near
.text$mn:000095DC                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+72p
.text$mn:000095DC
.text$mn:000095DC var_4           = dword ptr -4
.text$mn:000095DC arg_0           = dword ptr  8
.text$mn:000095DC arg_4           = dword ptr  0Ch
.text$mn:000095DC
.text$mn:000095DC                 push    ebp
.text$mn:000095DD                 mov     ebp, esp
.text$mn:000095DF                 push    ecx
.text$mn:000095E0                 mov     eax, [ebp+arg_0]
.text$mn:000095E3                 movsx   ecx, byte ptr [eax]
.text$mn:000095E6                 mov     edx, [ebp+arg_4]
.text$mn:000095E9                 movsx   eax, byte ptr [edx]
.text$mn:000095EC                 cmp     ecx, eax
.text$mn:000095EE                 jnz     short loc_95F9
.text$mn:000095F0                 mov     [ebp+var_4], 1
.text$mn:000095F7                 jmp     short loc_9600
.text$mn:000095F9 ; ---------------------------------------------------------------------------
.text$mn:000095F9
.text$mn:000095F9 loc_95F9:                               ; CODE XREF: std::char_traits<char>::eq(char const &,char const &)+12j
.text$mn:000095F9                 mov     [ebp+var_4], 0
.text$mn:00009600
.text$mn:00009600 loc_9600:                               ; CODE XREF: std::char_traits<char>::eq(char const &,char const &)+1Bj
.text$mn:00009600                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009603                 mov     esp, ebp
.text$mn:00009605                 pop     ebp
.text$mn:00009606                 retn
.text$mn:00009606 ?eq@?$char_traits@D@std@@SA_NABD0@Z endp
.text$mn:00009606
.text$mn:00009606 ; ---------------------------------------------------------------------------
.text$mn:00009607                 align 4
.text$mn:00009607 _text$mn        ends
.text$mn:00009607
.text$mn:00009608 ; ===========================================================================
.text$mn:00009608
.text$mn:00009608 ; Segment type: Pure code
.text$mn:00009608 ; Segment permissions: Read/Execute
.text$mn:00009608 _text$mn        segment para public 'CODE' use32
.text$mn:00009608                 assume cs:_text$mn
.text$mn:00009608                 ;org 9608h
.text$mn:00009608 ; COMDAT (pick any)
.text$mn:00009608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009608
.text$mn:00009608 ; =============== S U B R O U T I N E =======================================
.text$mn:00009608
.text$mn:00009608 ; Attributes: bp-based frame
.text$mn:00009608
.text$mn:00009608 ; public: static bool __cdecl std::char_traits<char>::eq_int_type(int const &, int const &)
.text$mn:00009608                 public ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
.text$mn:00009608 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
.text$mn:00009608                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &):loc_3E3Fp
.text$mn:00009608                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+207p ...
.text$mn:00009608
.text$mn:00009608 var_4           = dword ptr -4
.text$mn:00009608 arg_0           = dword ptr  8
.text$mn:00009608 arg_4           = dword ptr  0Ch
.text$mn:00009608
.text$mn:00009608                 push    ebp
.text$mn:00009609                 mov     ebp, esp
.text$mn:0000960B                 push    ecx
.text$mn:0000960C                 mov     eax, [ebp+arg_0]
.text$mn:0000960F                 mov     ecx, [ebp+arg_4]
.text$mn:00009612                 mov     edx, [eax]
.text$mn:00009614                 cmp     edx, [ecx]
.text$mn:00009616                 jnz     short loc_9621
.text$mn:00009618                 mov     [ebp+var_4], 1
.text$mn:0000961F                 jmp     short loc_9628
.text$mn:00009621 ; ---------------------------------------------------------------------------
.text$mn:00009621
.text$mn:00009621 loc_9621:                               ; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+Ej
.text$mn:00009621                 mov     [ebp+var_4], 0
.text$mn:00009628
.text$mn:00009628 loc_9628:                               ; CODE XREF: std::char_traits<char>::eq_int_type(int const &,int const &)+17j
.text$mn:00009628                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000962B                 mov     esp, ebp
.text$mn:0000962D                 pop     ebp
.text$mn:0000962E                 retn
.text$mn:0000962E ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z endp
.text$mn:0000962E
.text$mn:0000962E ; ---------------------------------------------------------------------------
.text$mn:0000962F                 align 10h
.text$mn:0000962F _text$mn        ends
.text$mn:0000962F
.text$mn:00009630 ; ===========================================================================
.text$mn:00009630
.text$mn:00009630 ; Segment type: Pure code
.text$mn:00009630 ; Segment permissions: Read/Execute
.text$mn:00009630 _text$mn        segment para public 'CODE' use32
.text$mn:00009630                 assume cs:_text$mn
.text$mn:00009630                 ;org 9630h
.text$mn:00009630 ; COMDAT (pick any)
.text$mn:00009630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009630
.text$mn:00009630 ; =============== S U B R O U T I N E =======================================
.text$mn:00009630
.text$mn:00009630 ; Attributes: bp-based frame
.text$mn:00009630
.text$mn:00009630 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00009630                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00009630 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00009630                                         ; DATA XREF: .rdata:0000CA70o
.text$mn:00009630                                         ; .rdata:0000CAA8o ...
.text$mn:00009630
.text$mn:00009630 var_8           = dword ptr -8
.text$mn:00009630 var_4           = dword ptr -4
.text$mn:00009630 arg_0           = dword ptr  8
.text$mn:00009630 arg_4           = dword ptr  0Ch
.text$mn:00009630
.text$mn:00009630                 push    ebp
.text$mn:00009631                 mov     ebp, esp
.text$mn:00009633                 sub     esp, 8
.text$mn:00009636                 mov     [ebp+var_8], ecx
.text$mn:00009639                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000963C                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00009641                 push    eax
.text$mn:00009642                 mov     ecx, [ebp+var_8]
.text$mn:00009645                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000964A                 movzx   eax, al
.text$mn:0000964D                 test    eax, eax
.text$mn:0000964F                 jz      short loc_9667
.text$mn:00009651                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009654                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00009659                 cmp     eax, [ebp+arg_4]
.text$mn:0000965C                 jnz     short loc_9667
.text$mn:0000965E                 mov     [ebp+var_4], 1
.text$mn:00009665                 jmp     short loc_966E
.text$mn:00009667 ; ---------------------------------------------------------------------------
.text$mn:00009667
.text$mn:00009667 loc_9667:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:00009667                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:00009667                 mov     [ebp+var_4], 0
.text$mn:0000966E
.text$mn:0000966E loc_966E:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000966E                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009671                 mov     esp, ebp
.text$mn:00009673                 pop     ebp
.text$mn:00009674                 retn    8
.text$mn:00009674 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:00009674
.text$mn:00009674 ; ---------------------------------------------------------------------------
.text$mn:00009677                 align 4
.text$mn:00009677 _text$mn        ends
.text$mn:00009677
.text$mn:00009678 ; ===========================================================================
.text$mn:00009678
.text$mn:00009678 ; Segment type: Pure code
.text$mn:00009678 ; Segment permissions: Read/Execute
.text$mn:00009678 _text$mn        segment para public 'CODE' use32
.text$mn:00009678                 assume cs:_text$mn
.text$mn:00009678                 ;org 9678h
.text$mn:00009678 ; COMDAT (pick any)
.text$mn:00009678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009678
.text$mn:00009678 ; =============== S U B R O U T I N E =======================================
.text$mn:00009678
.text$mn:00009678 ; Attributes: bp-based frame
.text$mn:00009678
.text$mn:00009678 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00009678                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00009678 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00009678                                         ; DATA XREF: .rdata:0000CA74o
.text$mn:00009678                                         ; .rdata:0000CAACo ...
.text$mn:00009678
.text$mn:00009678 var_C           = byte ptr -0Ch
.text$mn:00009678 var_4           = dword ptr -4
.text$mn:00009678 arg_0           = dword ptr  8
.text$mn:00009678 arg_4           = dword ptr  0Ch
.text$mn:00009678
.text$mn:00009678                 push    ebp
.text$mn:00009679                 mov     ebp, esp
.text$mn:0000967B                 sub     esp, 0Ch
.text$mn:0000967E                 mov     [ebp+var_4], ecx
.text$mn:00009681                 mov     eax, [ebp+arg_4]
.text$mn:00009684                 push    eax             ; std::error_condition *
.text$mn:00009685                 mov     ecx, [ebp+arg_0]
.text$mn:00009688                 push    ecx
.text$mn:00009689                 lea     edx, [ebp+var_C]
.text$mn:0000968C                 push    edx
.text$mn:0000968D                 mov     eax, [ebp+var_4]
.text$mn:00009690                 mov     edx, [eax]
.text$mn:00009692                 mov     ecx, [ebp+var_4]
.text$mn:00009695                 mov     eax, [edx+0Ch]
.text$mn:00009698                 call    eax
.text$mn:0000969A                 mov     ecx, eax
.text$mn:0000969C                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:000096A1                 mov     esp, ebp
.text$mn:000096A3                 pop     ebp
.text$mn:000096A4                 retn    8
.text$mn:000096A4 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:000096A4
.text$mn:000096A4 ; ---------------------------------------------------------------------------
.text$mn:000096A7                 align 4
.text$mn:000096A7 _text$mn        ends
.text$mn:000096A7
.text$mn:000096A8 ; ===========================================================================
.text$mn:000096A8
.text$mn:000096A8 ; Segment type: Pure code
.text$mn:000096A8 ; Segment permissions: Read/Execute
.text$mn:000096A8 _text$mn        segment para public 'CODE' use32
.text$mn:000096A8                 assume cs:_text$mn
.text$mn:000096A8                 ;org 96A8h
.text$mn:000096A8 ; COMDAT (pick any)
.text$mn:000096A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096A8
.text$mn:000096A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000096A8
.text$mn:000096A8 ; Attributes: bp-based frame
.text$mn:000096A8
.text$mn:000096A8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:000096A8                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:000096A8 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000096A8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:000096A8
.text$mn:000096A8 var_4           = dword ptr -4
.text$mn:000096A8 arg_0           = dword ptr  8
.text$mn:000096A8
.text$mn:000096A8                 push    ebp
.text$mn:000096A9                 mov     ebp, esp
.text$mn:000096AB                 push    ecx
.text$mn:000096AC                 mov     [ebp+var_4], ecx
.text$mn:000096AF                 mov     eax, [ebp+var_4]
.text$mn:000096B2                 mov     ecx, [eax+14h]
.text$mn:000096B5                 cmp     ecx, [ebp+arg_0]
.text$mn:000096B8                 jnb     short loc_96C2
.text$mn:000096BA                 mov     ecx, [ebp+var_4]
.text$mn:000096BD                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000096C2
.text$mn:000096C2 loc_96C2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:000096C2                 mov     edx, [ebp+arg_0]
.text$mn:000096C5                 push    edx
.text$mn:000096C6                 mov     ecx, [ebp+var_4]
.text$mn:000096C9                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000096CE                 mov     eax, [ebp+var_4]
.text$mn:000096D1                 mov     esp, ebp
.text$mn:000096D3                 pop     ebp
.text$mn:000096D4                 retn    4
.text$mn:000096D4 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:000096D4
.text$mn:000096D4 ; ---------------------------------------------------------------------------
.text$mn:000096D7                 align 4
.text$mn:000096D7 _text$mn        ends
.text$mn:000096D7
.text$mn:000096D8 ; ===========================================================================
.text$mn:000096D8
.text$mn:000096D8 ; Segment type: Pure code
.text$mn:000096D8 ; Segment permissions: Read/Execute
.text$mn:000096D8 _text$mn        segment para public 'CODE' use32
.text$mn:000096D8                 assume cs:_text$mn
.text$mn:000096D8                 ;org 96D8h
.text$mn:000096D8 ; COMDAT (pick any)
.text$mn:000096D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096D8
.text$mn:000096D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000096D8
.text$mn:000096D8 ; Attributes: bp-based frame
.text$mn:000096D8
.text$mn:000096D8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:000096D8                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:000096D8 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:000096D8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:000096D8
.text$mn:000096D8 var_C           = dword ptr -0Ch
.text$mn:000096D8 Dst             = dword ptr -8
.text$mn:000096D8 var_4           = dword ptr -4
.text$mn:000096D8 arg_0           = dword ptr  8
.text$mn:000096D8 arg_4           = dword ptr  0Ch
.text$mn:000096D8
.text$mn:000096D8                 push    ebp
.text$mn:000096D9                 mov     ebp, esp
.text$mn:000096DB                 sub     esp, 0Ch
.text$mn:000096DE                 mov     [ebp+var_4], ecx
.text$mn:000096E1                 mov     eax, [ebp+var_4]
.text$mn:000096E4                 mov     ecx, [eax+14h]
.text$mn:000096E7                 cmp     ecx, [ebp+arg_0]
.text$mn:000096EA                 jnb     short loc_96F4
.text$mn:000096EC                 mov     ecx, [ebp+var_4]
.text$mn:000096EF                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000096F4
.text$mn:000096F4 loc_96F4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:000096F4                 mov     edx, [ebp+var_4]
.text$mn:000096F7                 mov     eax, [edx+14h]
.text$mn:000096FA                 sub     eax, [ebp+arg_0]
.text$mn:000096FD                 cmp     eax, [ebp+arg_4]
.text$mn:00009700                 ja      short loc_9710
.text$mn:00009702                 mov     ecx, [ebp+arg_0]
.text$mn:00009705                 push    ecx
.text$mn:00009706                 mov     ecx, [ebp+var_4]
.text$mn:00009709                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000970E                 jmp     short loc_9756
.text$mn:00009710 ; ---------------------------------------------------------------------------
.text$mn:00009710
.text$mn:00009710 loc_9710:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00009710                 cmp     [ebp+arg_4], 0
.text$mn:00009714                 jbe     short loc_9756
.text$mn:00009716                 mov     ecx, [ebp+var_4]
.text$mn:00009719                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000971E                 add     eax, [ebp+arg_0]
.text$mn:00009721                 mov     [ebp+Dst], eax
.text$mn:00009724                 mov     edx, [ebp+var_4]
.text$mn:00009727                 mov     eax, [edx+14h]
.text$mn:0000972A                 sub     eax, [ebp+arg_4]
.text$mn:0000972D                 mov     [ebp+var_C], eax
.text$mn:00009730                 mov     ecx, [ebp+var_C]
.text$mn:00009733                 sub     ecx, [ebp+arg_0]
.text$mn:00009736                 push    ecx             ; Size
.text$mn:00009737                 mov     edx, [ebp+Dst]
.text$mn:0000973A                 add     edx, [ebp+arg_4]
.text$mn:0000973D                 push    edx             ; Src
.text$mn:0000973E                 mov     eax, [ebp+Dst]
.text$mn:00009741                 push    eax             ; Dst
.text$mn:00009742                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00009747                 add     esp, 0Ch
.text$mn:0000974A                 mov     ecx, [ebp+var_C]
.text$mn:0000974D                 push    ecx
.text$mn:0000974E                 mov     ecx, [ebp+var_4]
.text$mn:00009751                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009756
.text$mn:00009756 loc_9756:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:00009756                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:00009756                 mov     eax, [ebp+var_4]
.text$mn:00009759                 mov     esp, ebp
.text$mn:0000975B                 pop     ebp
.text$mn:0000975C                 retn    8
.text$mn:0000975C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000975C
.text$mn:0000975C ; ---------------------------------------------------------------------------
.text$mn:0000975F                 align 10h
.text$mn:0000975F _text$mn        ends
.text$mn:0000975F
.text$mn:00009760 ; ===========================================================================
.text$mn:00009760
.text$mn:00009760 ; Segment type: Pure code
.text$mn:00009760 ; Segment permissions: Read/Execute
.text$mn:00009760 _text$mn        segment para public 'CODE' use32
.text$mn:00009760                 assume cs:_text$mn
.text$mn:00009760                 ;org 9760h
.text$mn:00009760 ; COMDAT (pick any)
.text$mn:00009760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009760
.text$mn:00009760 ; =============== S U B R O U T I N E =======================================
.text$mn:00009760
.text$mn:00009760 ; Attributes: bp-based frame
.text$mn:00009760
.text$mn:00009760 ; public: char __thiscall std::basic_ios<char, struct std::char_traits<char>>::fill(void)const
.text$mn:00009760                 public ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
.text$mn:00009760 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ proc near
.text$mn:00009760                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+10Cp
.text$mn:00009760                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1D4p ...
.text$mn:00009760
.text$mn:00009760 var_4           = dword ptr -4
.text$mn:00009760
.text$mn:00009760                 push    ebp
.text$mn:00009761                 mov     ebp, esp
.text$mn:00009763                 push    ecx
.text$mn:00009764                 mov     [ebp+var_4], ecx
.text$mn:00009767                 mov     eax, [ebp+var_4]
.text$mn:0000976A                 mov     al, [eax+40h]
.text$mn:0000976D                 mov     esp, ebp
.text$mn:0000976F                 pop     ebp
.text$mn:00009770                 retn
.text$mn:00009770 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ endp
.text$mn:00009770
.text$mn:00009770 ; ---------------------------------------------------------------------------
.text$mn:00009771                 align 4
.text$mn:00009771 _text$mn        ends
.text$mn:00009771
.text$mn:00009774 ; ===========================================================================
.text$mn:00009774
.text$mn:00009774 ; Segment type: Pure code
.text$mn:00009774 ; Segment permissions: Read/Execute
.text$mn:00009774 _text$mn        segment para public 'CODE' use32
.text$mn:00009774                 assume cs:_text$mn
.text$mn:00009774                 ;org 9774h
.text$mn:00009774 ; COMDAT (pick any)
.text$mn:00009774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009774
.text$mn:00009774 ; =============== S U B R O U T I N E =======================================
.text$mn:00009774
.text$mn:00009774 ; Attributes: bp-based frame
.text$mn:00009774
.text$mn:00009774 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char Buf2, int)
.text$mn:00009774                 public ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
.text$mn:00009774 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z proc near
.text$mn:00009774                                         ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+BEp
.text$mn:00009774                                         ; TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+11p
.text$mn:00009774
.text$mn:00009774 var_4           = dword ptr -4
.text$mn:00009774 Buf2            = byte ptr  8
.text$mn:00009774 arg_4           = dword ptr  0Ch
.text$mn:00009774
.text$mn:00009774                 push    ebp
.text$mn:00009775                 mov     ebp, esp
.text$mn:00009777                 push    ecx
.text$mn:00009778                 mov     [ebp+var_4], ecx
.text$mn:0000977B                 push    1               ; Size
.text$mn:0000977D                 mov     eax, [ebp+arg_4]
.text$mn:00009780                 push    eax             ; int
.text$mn:00009781                 lea     ecx, [ebp+Buf2]
.text$mn:00009784                 push    ecx             ; Buf2
.text$mn:00009785                 mov     ecx, [ebp+var_4]
.text$mn:00009788                 call    ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)
.text$mn:0000978D                 mov     esp, ebp
.text$mn:0000978F                 pop     ebp
.text$mn:00009790                 retn    8
.text$mn:00009790 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z endp
.text$mn:00009790
.text$mn:00009790 ; ---------------------------------------------------------------------------
.text$mn:00009793                 align 4
.text$mn:00009793 _text$mn        ends
.text$mn:00009793
.text$mn:00009794 ; ===========================================================================
.text$mn:00009794
.text$mn:00009794 ; Segment type: Pure code
.text$mn:00009794 ; Segment permissions: Read/Execute
.text$mn:00009794 _text$mn        segment para public 'CODE' use32
.text$mn:00009794                 assume cs:_text$mn
.text$mn:00009794                 ;org 9794h
.text$mn:00009794 ; COMDAT (pick any)
.text$mn:00009794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009794
.text$mn:00009794 ; =============== S U B R O U T I N E =======================================
.text$mn:00009794
.text$mn:00009794 ; Attributes: bp-based frame
.text$mn:00009794
.text$mn:00009794 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(void *Buf2, int, size_t Size)
.text$mn:00009794                 public ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
.text$mn:00009794 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z proc near
.text$mn:00009794                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char,uint)+14p
.text$mn:00009794
.text$mn:00009794 Buf             = dword ptr -10h
.text$mn:00009794 Buf1            = dword ptr -0Ch
.text$mn:00009794 var_8           = dword ptr -8
.text$mn:00009794 MaxCount        = dword ptr -4
.text$mn:00009794 Buf2            = dword ptr  8
.text$mn:00009794 arg_4           = dword ptr  0Ch
.text$mn:00009794 Size            = dword ptr  10h
.text$mn:00009794
.text$mn:00009794                 push    ebp
.text$mn:00009795                 mov     ebp, esp
.text$mn:00009797                 sub     esp, 10h
.text$mn:0000979A                 mov     [ebp+var_8], ecx
.text$mn:0000979D                 cmp     [ebp+Size], 0
.text$mn:000097A1                 jz      short loc_97B9
.text$mn:000097A3                 push    768h            ; unsigned int
.text$mn:000097A8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000097AD                 mov     eax, [ebp+Buf2]
.text$mn:000097B0                 push    eax             ; int
.text$mn:000097B1                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000097B6                 add     esp, 0Ch
.text$mn:000097B9
.text$mn:000097B9 loc_97B9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+Dj
.text$mn:000097B9                 cmp     [ebp+Size], 0
.text$mn:000097BD                 jnz     short loc_97D2
.text$mn:000097BF                 mov     ecx, [ebp+var_8]
.text$mn:000097C2                 mov     edx, [ebp+arg_4]
.text$mn:000097C5                 cmp     edx, [ecx+14h]
.text$mn:000097C8                 ja      short loc_97D2
.text$mn:000097CA                 mov     eax, [ebp+arg_4]
.text$mn:000097CD                 jmp     loc_987E
.text$mn:000097D2 ; ---------------------------------------------------------------------------
.text$mn:000097D2
.text$mn:000097D2 loc_97D2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+29j
.text$mn:000097D2                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+34j
.text$mn:000097D2                 mov     eax, [ebp+var_8]
.text$mn:000097D5                 mov     ecx, [ebp+arg_4]
.text$mn:000097D8                 cmp     ecx, [eax+14h]
.text$mn:000097DB                 jnb     loc_9879
.text$mn:000097E1                 mov     edx, [ebp+var_8]
.text$mn:000097E4                 mov     eax, [edx+14h]
.text$mn:000097E7                 sub     eax, [ebp+arg_4]
.text$mn:000097EA                 mov     [ebp+MaxCount], eax
.text$mn:000097ED                 mov     ecx, [ebp+Size]
.text$mn:000097F0                 cmp     ecx, [ebp+MaxCount]
.text$mn:000097F3                 ja      loc_9879
.text$mn:000097F9                 mov     edx, [ebp+Size]
.text$mn:000097FC                 sub     edx, 1
.text$mn:000097FF                 mov     eax, [ebp+MaxCount]
.text$mn:00009802                 sub     eax, edx
.text$mn:00009804                 mov     [ebp+MaxCount], eax
.text$mn:00009807                 mov     ecx, [ebp+var_8]
.text$mn:0000980A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000980F                 add     eax, [ebp+arg_4]
.text$mn:00009812                 mov     [ebp+Buf], eax
.text$mn:00009815                 jmp     short loc_9831
.text$mn:00009817 ; ---------------------------------------------------------------------------
.text$mn:00009817
.text$mn:00009817 loc_9817:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint):loc_9877j
.text$mn:00009817                 mov     ecx, [ebp+Buf1]
.text$mn:0000981A                 sub     ecx, [ebp+Buf]
.text$mn:0000981D                 add     ecx, 1
.text$mn:00009820                 mov     edx, [ebp+MaxCount]
.text$mn:00009823                 sub     edx, ecx
.text$mn:00009825                 mov     [ebp+MaxCount], edx
.text$mn:00009828                 mov     eax, [ebp+Buf1]
.text$mn:0000982B                 add     eax, 1
.text$mn:0000982E                 mov     [ebp+Buf], eax
.text$mn:00009831
.text$mn:00009831 loc_9831:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+81j
.text$mn:00009831                 mov     ecx, [ebp+Buf2]
.text$mn:00009834                 push    ecx             ; int
.text$mn:00009835                 mov     edx, [ebp+MaxCount]
.text$mn:00009838                 push    edx             ; MaxCount
.text$mn:00009839                 mov     eax, [ebp+Buf]
.text$mn:0000983C                 push    eax             ; Buf
.text$mn:0000983D                 call    ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ; std::char_traits<char>::find(char const *,uint,char const &)
.text$mn:00009842                 add     esp, 0Ch
.text$mn:00009845                 mov     [ebp+Buf1], eax
.text$mn:00009848                 cmp     [ebp+Buf1], 0
.text$mn:0000984C                 jz      short loc_9879
.text$mn:0000984E                 mov     ecx, [ebp+Size]
.text$mn:00009851                 push    ecx             ; Size
.text$mn:00009852                 mov     edx, [ebp+Buf2]
.text$mn:00009855                 push    edx             ; Buf2
.text$mn:00009856                 mov     eax, [ebp+Buf1]
.text$mn:00009859                 push    eax             ; Buf1
.text$mn:0000985A                 call    ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare(char const *,char const *,uint)
.text$mn:0000985F                 add     esp, 0Ch
.text$mn:00009862                 test    eax, eax
.text$mn:00009864                 jnz     short loc_9877
.text$mn:00009866                 mov     ecx, [ebp+var_8]
.text$mn:00009869                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000986E                 mov     ecx, [ebp+Buf1]
.text$mn:00009871                 sub     ecx, eax
.text$mn:00009873                 mov     eax, ecx
.text$mn:00009875                 jmp     short loc_987E
.text$mn:00009877 ; ---------------------------------------------------------------------------
.text$mn:00009877
.text$mn:00009877 loc_9877:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+D0j
.text$mn:00009877                 jmp     short loc_9817
.text$mn:00009879 ; ---------------------------------------------------------------------------
.text$mn:00009879
.text$mn:00009879 loc_9879:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+47j
.text$mn:00009879                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+5Fj ...
.text$mn:00009879                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:0000987E
.text$mn:0000987E loc_987E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+39j
.text$mn:0000987E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+E1j
.text$mn:0000987E                 mov     esp, ebp
.text$mn:00009880                 pop     ebp
.text$mn:00009881                 retn    0Ch
.text$mn:00009881 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z endp
.text$mn:00009881
.text$mn:00009881 _text$mn        ends
.text$mn:00009881
.text$mn:00009884 ; ===========================================================================
.text$mn:00009884
.text$mn:00009884 ; Segment type: Pure code
.text$mn:00009884 ; Segment permissions: Read/Execute
.text$mn:00009884 _text$mn        segment para public 'CODE' use32
.text$mn:00009884                 assume cs:_text$mn
.text$mn:00009884                 ;org 9884h
.text$mn:00009884 ; COMDAT (pick any)
.text$mn:00009884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009884
.text$mn:00009884 ; =============== S U B R O U T I N E =======================================
.text$mn:00009884
.text$mn:00009884 ; Attributes: bp-based frame
.text$mn:00009884
.text$mn:00009884 ; int __cdecl std::char_traits<char>::find(void *Buf, size_t MaxCount, int)
.text$mn:00009884                 public ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
.text$mn:00009884 ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z proc near
.text$mn:00009884                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::find(char const *,uint,uint)+A9p
.text$mn:00009884
.text$mn:00009884 var_4           = dword ptr -4
.text$mn:00009884 Buf             = dword ptr  8
.text$mn:00009884 MaxCount        = dword ptr  0Ch
.text$mn:00009884 arg_8           = dword ptr  10h
.text$mn:00009884
.text$mn:00009884                 push    ebp
.text$mn:00009885                 mov     ebp, esp
.text$mn:00009887                 push    ecx
.text$mn:00009888                 cmp     [ebp+MaxCount], 0
.text$mn:0000988C                 jnz     short loc_9897
.text$mn:0000988E                 mov     [ebp+var_4], 0
.text$mn:00009895                 jmp     short loc_98B1
.text$mn:00009897 ; ---------------------------------------------------------------------------
.text$mn:00009897
.text$mn:00009897 loc_9897:                               ; CODE XREF: std::char_traits<char>::find(char const *,uint,char const &)+8j
.text$mn:00009897                 mov     eax, [ebp+MaxCount]
.text$mn:0000989A                 push    eax             ; MaxCount
.text$mn:0000989B                 mov     ecx, [ebp+arg_8]
.text$mn:0000989E                 movsx   edx, byte ptr [ecx]
.text$mn:000098A1                 push    edx             ; Val
.text$mn:000098A2                 mov     eax, [ebp+Buf]
.text$mn:000098A5                 push    eax             ; Buf
.text$mn:000098A6                 call    _memchr
.text$mn:000098AB                 add     esp, 0Ch
.text$mn:000098AE                 mov     [ebp+var_4], eax
.text$mn:000098B1
.text$mn:000098B1 loc_98B1:                               ; CODE XREF: std::char_traits<char>::find(char const *,uint,char const &)+11j
.text$mn:000098B1                 mov     eax, [ebp+var_4]
.text$mn:000098B4                 mov     esp, ebp
.text$mn:000098B6                 pop     ebp
.text$mn:000098B7                 retn
.text$mn:000098B7 ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z endp
.text$mn:000098B7
.text$mn:000098B7 _text$mn        ends
.text$mn:000098B7
.text$mn:000098B8 ; ===========================================================================
.text$mn:000098B8
.text$mn:000098B8 ; Segment type: Pure code
.text$mn:000098B8 ; Segment permissions: Read/Execute
.text$mn:000098B8 _text$mn        segment para public 'CODE' use32
.text$mn:000098B8                 assume cs:_text$mn
.text$mn:000098B8                 ;org 98B8h
.text$mn:000098B8 ; COMDAT (pick any)
.text$mn:000098B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098B8
.text$mn:000098B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000098B8
.text$mn:000098B8 ; Attributes: bp-based frame
.text$mn:000098B8
.text$mn:000098B8 ; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
.text$mn:000098B8                 public ?flags@ios_base@std@@QBEHXZ
.text$mn:000098B8 ?flags@ios_base@std@@QBEHXZ proc near   ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+E1p
.text$mn:000098B8                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+107p ...
.text$mn:000098B8
.text$mn:000098B8 var_4           = dword ptr -4
.text$mn:000098B8
.text$mn:000098B8                 push    ebp
.text$mn:000098B9                 mov     ebp, esp
.text$mn:000098BB                 push    ecx
.text$mn:000098BC                 mov     [ebp+var_4], ecx
.text$mn:000098BF                 mov     eax, [ebp+var_4]
.text$mn:000098C2                 mov     eax, [eax+14h]
.text$mn:000098C5                 mov     esp, ebp
.text$mn:000098C7                 pop     ebp
.text$mn:000098C8                 retn
.text$mn:000098C8 ?flags@ios_base@std@@QBEHXZ endp
.text$mn:000098C8
.text$mn:000098C8 ; ---------------------------------------------------------------------------
.text$mn:000098C9                 align 4
.text$mn:000098C9 _text$mn        ends
.text$mn:000098C9
.text$mn:000098CC ; ===========================================================================
.text$mn:000098CC
.text$mn:000098CC ; Segment type: Pure code
.text$mn:000098CC ; Segment permissions: Read/Execute
.text$mn:000098CC _text$mn        segment para public 'CODE' use32
.text$mn:000098CC                 assume cs:_text$mn
.text$mn:000098CC                 ;org 98CCh
.text$mn:000098CC ; COMDAT (pick any)
.text$mn:000098CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098CC
.text$mn:000098CC ; =============== S U B R O U T I N E =======================================
.text$mn:000098CC
.text$mn:000098CC ; Attributes: bp-based frame
.text$mn:000098CC
.text$mn:000098CC ; public: class std::basic_ostream<char, struct std::char_traits<char>> & __thiscall std::basic_ostream<char, struct std::char_traits<char>>::flush(void)
.text$mn:000098CC                 public ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
.text$mn:000098CC ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ proc near
.text$mn:000098CC                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+8Fp
.text$mn:000098CC
.text$mn:000098CC var_18          = byte ptr -18h
.text$mn:000098CC var_10          = dword ptr -10h
.text$mn:000098CC var_C           = dword ptr -0Ch
.text$mn:000098CC var_4           = dword ptr -4
.text$mn:000098CC
.text$mn:000098CC                 push    ebp
.text$mn:000098CD                 mov     ebp, esp
.text$mn:000098CF                 push    0FFFFFFFFh
.text$mn:000098D1                 push    offset __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
.text$mn:000098D6                 mov     eax, large fs:0
.text$mn:000098DC                 push    eax
.text$mn:000098DD                 sub     esp, 0Ch
.text$mn:000098E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000098E5                 xor     eax, ebp
.text$mn:000098E7                 push    eax
.text$mn:000098E8                 lea     eax, [ebp+var_C]
.text$mn:000098EB                 mov     large fs:0, eax
.text$mn:000098F1                 mov     [ebp+var_10], ecx
.text$mn:000098F4                 mov     eax, [ebp+var_10]
.text$mn:000098F7                 mov     ecx, [eax]
.text$mn:000098F9                 mov     edx, [ebp+var_10]
.text$mn:000098FC                 add     edx, [ecx+4]
.text$mn:000098FF                 mov     ecx, edx
.text$mn:00009901                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:00009906                 test    eax, eax
.text$mn:00009908                 jz      short loc_996B
.text$mn:0000990A                 mov     eax, [ebp+var_10]
.text$mn:0000990D                 push    eax
.text$mn:0000990E                 lea     ecx, [ebp+var_18]
.text$mn:00009911                 call    ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)
.text$mn:00009916                 mov     [ebp+var_4], 0
.text$mn:0000991D                 lea     ecx, [ebp+var_18]
.text$mn:00009920                 call    ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::operator bool(void)
.text$mn:00009925                 movzx   ecx, al
.text$mn:00009928                 test    ecx, ecx
.text$mn:0000992A                 jz      short loc_995C
.text$mn:0000992C                 mov     edx, [ebp+var_10]
.text$mn:0000992F                 mov     eax, [edx]
.text$mn:00009931                 mov     ecx, [ebp+var_10]
.text$mn:00009934                 add     ecx, [eax+4]
.text$mn:00009937                 call    ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char>>::rdbuf(void)
.text$mn:0000993C                 mov     ecx, eax
.text$mn:0000993E                 call    ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::pubsync(void)
.text$mn:00009943                 cmp     eax, 0FFFFFFFFh
.text$mn:00009946                 jnz     short loc_995C
.text$mn:00009948                 push    0
.text$mn:0000994A                 push    4
.text$mn:0000994C                 mov     ecx, [ebp+var_10]
.text$mn:0000994F                 mov     edx, [ecx]
.text$mn:00009951                 mov     ecx, [ebp+var_10]
.text$mn:00009954                 add     ecx, [edx+4]
.text$mn:00009957                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:0000995C
.text$mn:0000995C loc_995C:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::flush(void)+5Ej
.text$mn:0000995C                                         ; std::basic_ostream<char,std::char_traits<char>>::flush(void)+7Aj
.text$mn:0000995C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009963                 lea     ecx, [ebp+var_18]
.text$mn:00009966                 call    ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$mn:0000996B
.text$mn:0000996B loc_996B:                               ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::flush(void)+3Cj
.text$mn:0000996B                 mov     eax, [ebp+var_10]
.text$mn:0000996E                 mov     ecx, [ebp+var_C]
.text$mn:00009971                 mov     large fs:0, ecx
.text$mn:00009978                 pop     ecx
.text$mn:00009979                 mov     esp, ebp
.text$mn:0000997B                 pop     ebp
.text$mn:0000997C                 retn
.text$mn:0000997C ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ endp
.text$mn:0000997C
.text$mn:0000997C ; ---------------------------------------------------------------------------
.text$mn:0000997D                 align 10h
.text$mn:0000997D _text$mn        ends
.text$mn:0000997D
.text$x:00009980 ; ===========================================================================
.text$x:00009980
.text$x:00009980 ; Segment type: Pure code
.text$x:00009980 ; Segment permissions: Read/Execute
.text$x:00009980 _text$x         segment para public 'CODE' use32
.text$x:00009980                 assume cs:_text$x
.text$x:00009980                 ;org 9980h
.text$x:00009980 ; COMDAT (pick associative to section at 98CC)
.text$x:00009980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009980
.text$x:00009980 ; =============== S U B R O U T I N E =======================================
.text$x:00009980
.text$x:00009980
.text$x:00009980 __unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0 proc near
.text$x:00009980                                         ; DATA XREF: .xdata$x:0000BD74o
.text$x:00009980                 lea     ecx, [ebp-18h]
.text$x:00009983                 jmp     ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)
.text$x:00009983 __unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0 endp
.text$x:00009983
.text$x:00009988
.text$x:00009988 ; =============== S U B R O U T I N E =======================================
.text$x:00009988
.text$x:00009988
.text$x:00009988 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ proc near
.text$x:00009988                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::flush(void)+5o
.text$x:00009988
.text$x:00009988 arg_4           = dword ptr  8
.text$x:00009988
.text$x:00009988                 mov     edx, [esp+arg_4]
.text$x:0000998C                 lea     eax, [edx+0Ch]
.text$x:0000998F                 mov     ecx, [edx-10h]
.text$x:00009992                 xor     ecx, eax
.text$x:00009994                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009999                 mov     eax, offset __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
.text$x:0000999E                 jmp     ___CxxFrameHandler3
.text$x:0000999E __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ endp
.text$x:0000999E
.text$x:0000999E ; ---------------------------------------------------------------------------
.text$x:000099A3                 align 4
.text$x:000099A3 _text$x         ends
.text$x:000099A3
.text$mn:000099A4 ; ===========================================================================
.text$mn:000099A4
.text$mn:000099A4 ; Segment type: Pure code
.text$mn:000099A4 ; Segment permissions: Read/Execute
.text$mn:000099A4 _text$mn        segment para public 'CODE' use32
.text$mn:000099A4                 assume cs:_text$mn
.text$mn:000099A4                 ;org 99A4h
.text$mn:000099A4 ; COMDAT (pick any)
.text$mn:000099A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099A4
.text$mn:000099A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000099A4
.text$mn:000099A4 ; Attributes: bp-based frame
.text$mn:000099A4
.text$mn:000099A4 ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::gbump(int)
.text$mn:000099A4                 public ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
.text$mn:000099A4 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z proc near
.text$mn:000099A4                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+9Ap
.text$mn:000099A4                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+124p ...
.text$mn:000099A4
.text$mn:000099A4 var_4           = dword ptr -4
.text$mn:000099A4 arg_0           = dword ptr  8
.text$mn:000099A4
.text$mn:000099A4                 push    ebp
.text$mn:000099A5                 mov     ebp, esp
.text$mn:000099A7                 push    ecx
.text$mn:000099A8                 mov     [ebp+var_4], ecx
.text$mn:000099AB                 mov     eax, [ebp+var_4]
.text$mn:000099AE                 mov     ecx, [eax+2Ch]
.text$mn:000099B1                 mov     edx, [ecx]
.text$mn:000099B3                 sub     edx, [ebp+arg_0]
.text$mn:000099B6                 mov     eax, [ebp+var_4]
.text$mn:000099B9                 mov     ecx, [eax+2Ch]
.text$mn:000099BC                 mov     [ecx], edx
.text$mn:000099BE                 mov     edx, [ebp+var_4]
.text$mn:000099C1                 mov     eax, [edx+1Ch]
.text$mn:000099C4                 mov     ecx, [eax]
.text$mn:000099C6                 add     ecx, [ebp+arg_0]
.text$mn:000099C9                 mov     edx, [ebp+var_4]
.text$mn:000099CC                 mov     eax, [edx+1Ch]
.text$mn:000099CF                 mov     [eax], ecx
.text$mn:000099D1                 mov     esp, ebp
.text$mn:000099D3                 pop     ebp
.text$mn:000099D4                 retn    4
.text$mn:000099D4 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z endp
.text$mn:000099D4
.text$mn:000099D4 ; ---------------------------------------------------------------------------
.text$mn:000099D7                 align 4
.text$mn:000099D7 _text$mn        ends
.text$mn:000099D7
.text$mn:000099D8 ; ===========================================================================
.text$mn:000099D8
.text$mn:000099D8 ; Segment type: Pure code
.text$mn:000099D8 ; Segment permissions: Read/Execute
.text$mn:000099D8 _text$mn        segment para public 'CODE' use32
.text$mn:000099D8                 assume cs:_text$mn
.text$mn:000099D8                 ;org 99D8h
.text$mn:000099D8 ; COMDAT (pick any)
.text$mn:000099D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099D8
.text$mn:000099D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000099D8
.text$mn:000099D8 ; Attributes: bp-based frame
.text$mn:000099D8
.text$mn:000099D8 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:000099D8                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:000099D8 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000099D8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:000099D8                 push    ebp
.text$mn:000099D9                 mov     ebp, esp
.text$mn:000099DB                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:000099E0                 pop     ebp
.text$mn:000099E1                 retn
.text$mn:000099E1 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:000099E1
.text$mn:000099E1 ; ---------------------------------------------------------------------------
.text$mn:000099E2                 align 4
.text$mn:000099E2 _text$mn        ends
.text$mn:000099E2
.text$mn:000099E4 ; ===========================================================================
.text$mn:000099E4
.text$mn:000099E4 ; Segment type: Pure code
.text$mn:000099E4 ; Segment permissions: Read/Execute
.text$mn:000099E4 _text$mn        segment para public 'CODE' use32
.text$mn:000099E4                 assume cs:_text$mn
.text$mn:000099E4                 ;org 99E4h
.text$mn:000099E4 ; COMDAT (pick any)
.text$mn:000099E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099E4
.text$mn:000099E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000099E4
.text$mn:000099E4 ; Attributes: bp-based frame
.text$mn:000099E4
.text$mn:000099E4 ; public: class std::locale __thiscall std::ios_base::getloc(void)const
.text$mn:000099E4                 public ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:000099E4 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$mn:000099E4                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::widen(char)+2Fp
.text$mn:000099E4
.text$mn:000099E4 var_14          = dword ptr -14h
.text$mn:000099E4 var_10          = dword ptr -10h
.text$mn:000099E4 var_C           = dword ptr -0Ch
.text$mn:000099E4 var_4           = dword ptr -4
.text$mn:000099E4 arg_0           = dword ptr  8
.text$mn:000099E4
.text$mn:000099E4                 push    ebp
.text$mn:000099E5                 mov     ebp, esp
.text$mn:000099E7                 push    0FFFFFFFFh
.text$mn:000099E9                 push    offset __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:000099EE                 mov     eax, large fs:0
.text$mn:000099F4                 push    eax
.text$mn:000099F5                 sub     esp, 8
.text$mn:000099F8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000099FD                 xor     eax, ebp
.text$mn:000099FF                 push    eax
.text$mn:00009A00                 lea     eax, [ebp+var_C]
.text$mn:00009A03                 mov     large fs:0, eax
.text$mn:00009A09                 mov     [ebp+var_14], ecx
.text$mn:00009A0C                 mov     [ebp+var_10], 0
.text$mn:00009A13                 mov     eax, [ebp+var_14]
.text$mn:00009A16                 mov     ecx, [eax+30h]
.text$mn:00009A19                 push    ecx             ; struct std::locale *
.text$mn:00009A1A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009A1D                 call    ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale(std::locale const &)
.text$mn:00009A22                 mov     [ebp+var_4], 0
.text$mn:00009A29                 mov     edx, [ebp+var_10]
.text$mn:00009A2C                 or      edx, 1
.text$mn:00009A2F                 mov     [ebp+var_10], edx
.text$mn:00009A32                 mov     eax, [ebp+arg_0]
.text$mn:00009A35                 mov     ecx, [ebp+var_C]
.text$mn:00009A38                 mov     large fs:0, ecx
.text$mn:00009A3F                 pop     ecx
.text$mn:00009A40                 mov     esp, ebp
.text$mn:00009A42                 pop     ebp
.text$mn:00009A43                 retn    4
.text$mn:00009A43 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$mn:00009A43
.text$mn:00009A43 ; ---------------------------------------------------------------------------
.text$mn:00009A46                 align 4
.text$mn:00009A46 _text$mn        ends
.text$mn:00009A46
.text$x:00009A48 ; ===========================================================================
.text$x:00009A48
.text$x:00009A48 ; Segment type: Pure code
.text$x:00009A48 ; Segment permissions: Read/Execute
.text$x:00009A48 _text$x         segment para public 'CODE' use32
.text$x:00009A48                 assume cs:_text$x
.text$x:00009A48                 ;org 9A48h
.text$x:00009A48 ; COMDAT (pick associative to section at 99E4)
.text$x:00009A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009A48
.text$x:00009A48 ; =============== S U B R O U T I N E =======================================
.text$x:00009A48
.text$x:00009A48
.text$x:00009A48 __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 proc near
.text$x:00009A48                                         ; DATA XREF: .xdata$x:0000BC40o
.text$x:00009A48                 mov     eax, [ebp-10h]
.text$x:00009A4B                 and     eax, 1
.text$x:00009A4E                 jz      $LN4_0
.text$x:00009A54                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009A58                 mov     ecx, [ebp+8]    ; this
.text$x:00009A5B                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:00009A60 ; ---------------------------------------------------------------------------
.text$x:00009A60
.text$x:00009A60 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0+6j
.text$x:00009A60                 retn
.text$x:00009A60 __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 endp
.text$x:00009A60
.text$x:00009A61
.text$x:00009A61 ; =============== S U B R O U T I N E =======================================
.text$x:00009A61
.text$x:00009A61
.text$x:00009A61 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$x:00009A61                                         ; DATA XREF: std::ios_base::getloc(void)+5o
.text$x:00009A61
.text$x:00009A61 arg_4           = dword ptr  8
.text$x:00009A61
.text$x:00009A61                 mov     edx, [esp+arg_4]
.text$x:00009A65                 lea     eax, [edx+0Ch]
.text$x:00009A68                 mov     ecx, [edx-0Ch]
.text$x:00009A6B                 xor     ecx, eax
.text$x:00009A6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009A72                 mov     eax, offset __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$x:00009A77                 jmp     ___CxxFrameHandler3
.text$x:00009A77 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$x:00009A77
.text$x:00009A77 _text$x         ends
.text$x:00009A77
.text$mn:00009A7C ; ===========================================================================
.text$mn:00009A7C
.text$mn:00009A7C ; Segment type: Pure code
.text$mn:00009A7C ; Segment permissions: Read/Execute
.text$mn:00009A7C _text$mn        segment para public 'CODE' use32
.text$mn:00009A7C                 assume cs:_text$mn
.text$mn:00009A7C                 ;org 9A7Ch
.text$mn:00009A7C ; COMDAT (pick any)
.text$mn:00009A7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A7C
.text$mn:00009A7C ; =============== S U B R O U T I N E =======================================
.text$mn:00009A7C
.text$mn:00009A7C ; Attributes: bp-based frame
.text$mn:00009A7C
.text$mn:00009A7C ; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
.text$mn:00009A7C                 public ?good@ios_base@std@@QBE_NXZ
.text$mn:00009A7C ?good@ios_base@std@@QBE_NXZ proc near   ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+44p
.text$mn:00009A7C                                         ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+A1p ...
.text$mn:00009A7C
.text$mn:00009A7C var_8           = dword ptr -8
.text$mn:00009A7C var_4           = dword ptr -4
.text$mn:00009A7C
.text$mn:00009A7C                 push    ebp
.text$mn:00009A7D                 mov     ebp, esp
.text$mn:00009A7F                 sub     esp, 8
.text$mn:00009A82                 mov     [ebp+var_8], ecx
.text$mn:00009A85                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009A88                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:00009A8D                 test    eax, eax
.text$mn:00009A8F                 jnz     short loc_9A9A
.text$mn:00009A91                 mov     [ebp+var_4], 1
.text$mn:00009A98                 jmp     short loc_9AA1
.text$mn:00009A9A ; ---------------------------------------------------------------------------
.text$mn:00009A9A
.text$mn:00009A9A loc_9A9A:                               ; CODE XREF: std::ios_base::good(void)+13j
.text$mn:00009A9A                 mov     [ebp+var_4], 0
.text$mn:00009AA1
.text$mn:00009AA1 loc_9AA1:                               ; CODE XREF: std::ios_base::good(void)+1Cj
.text$mn:00009AA1                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009AA4                 mov     esp, ebp
.text$mn:00009AA6                 pop     ebp
.text$mn:00009AA7                 retn
.text$mn:00009AA7 ?good@ios_base@std@@QBE_NXZ endp
.text$mn:00009AA7
.text$mn:00009AA7 _text$mn        ends
.text$mn:00009AA7
.text$mn:00009AA8 ; ===========================================================================
.text$mn:00009AA8
.text$mn:00009AA8 ; Segment type: Pure code
.text$mn:00009AA8 ; Segment permissions: Read/Execute
.text$mn:00009AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00009AA8                 assume cs:_text$mn
.text$mn:00009AA8                 ;org 9AA8h
.text$mn:00009AA8 ; COMDAT (pick any)
.text$mn:00009AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009AA8
.text$mn:00009AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009AA8
.text$mn:00009AA8 ; Attributes: bp-based frame
.text$mn:00009AA8
.text$mn:00009AA8 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::gptr(void)const
.text$mn:00009AA8                 public ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:00009AA8 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:00009AA8                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+CDp
.text$mn:00009AA8                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+271p ...
.text$mn:00009AA8
.text$mn:00009AA8 var_4           = dword ptr -4
.text$mn:00009AA8
.text$mn:00009AA8                 push    ebp
.text$mn:00009AA9                 mov     ebp, esp
.text$mn:00009AAB                 push    ecx
.text$mn:00009AAC                 mov     [ebp+var_4], ecx
.text$mn:00009AAF                 mov     eax, [ebp+var_4]
.text$mn:00009AB2                 mov     ecx, [eax+1Ch]
.text$mn:00009AB5                 mov     eax, [ecx]
.text$mn:00009AB7                 mov     esp, ebp
.text$mn:00009AB9                 pop     ebp
.text$mn:00009ABA                 retn
.text$mn:00009ABA ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:00009ABA
.text$mn:00009ABA ; ---------------------------------------------------------------------------
.text$mn:00009ABB                 align 4
.text$mn:00009ABB _text$mn        ends
.text$mn:00009ABB
.text$mn:00009ABC ; ===========================================================================
.text$mn:00009ABC
.text$mn:00009ABC ; Segment type: Pure code
.text$mn:00009ABC ; Segment permissions: Read/Execute
.text$mn:00009ABC _text$mn        segment para public 'CODE' use32
.text$mn:00009ABC                 assume cs:_text$mn
.text$mn:00009ABC                 ;org 9ABCh
.text$mn:00009ABC ; COMDAT (pick any)
.text$mn:00009ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ABC
.text$mn:00009ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00009ABC
.text$mn:00009ABC ; Attributes: bp-based frame
.text$mn:00009ABC
.text$mn:00009ABC ; protected: virtual void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::imbue(class std::locale const &)
.text$mn:00009ABC                 public ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
.text$mn:00009ABC ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z proc near
.text$mn:00009ABC                                         ; DATA XREF: .rdata:0000CD00o
.text$mn:00009ABC                                         ; .rdata:0000CE60o
.text$mn:00009ABC
.text$mn:00009ABC var_4           = dword ptr -4
.text$mn:00009ABC
.text$mn:00009ABC                 push    ebp
.text$mn:00009ABD                 mov     ebp, esp
.text$mn:00009ABF                 push    ecx
.text$mn:00009AC0                 mov     [ebp+var_4], ecx
.text$mn:00009AC3                 mov     esp, ebp
.text$mn:00009AC5                 pop     ebp
.text$mn:00009AC6                 retn    4
.text$mn:00009AC6 ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z endp
.text$mn:00009AC6
.text$mn:00009AC6 ; ---------------------------------------------------------------------------
.text$mn:00009AC9                 align 4
.text$mn:00009AC9 _text$mn        ends
.text$mn:00009AC9
.text$mn:00009ACC ; ===========================================================================
.text$mn:00009ACC
.text$mn:00009ACC ; Segment type: Pure code
.text$mn:00009ACC ; Segment permissions: Read/Execute
.text$mn:00009ACC _text$mn        segment para public 'CODE' use32
.text$mn:00009ACC                 assume cs:_text$mn
.text$mn:00009ACC                 ;org 9ACCh
.text$mn:00009ACC ; COMDAT (pick any)
.text$mn:00009ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ACC
.text$mn:00009ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00009ACC
.text$mn:00009ACC ; Attributes: bp-based frame
.text$mn:00009ACC
.text$mn:00009ACC ; protected: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::init(class std::basic_streambuf<char, struct std::char_traits<char>> *, bool)
.text$mn:00009ACC                 public ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
.text$mn:00009ACC ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z proc near
.text$mn:00009ACC                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+99p
.text$mn:00009ACC
.text$mn:00009ACC var_4           = dword ptr -4
.text$mn:00009ACC arg_0           = dword ptr  8
.text$mn:00009ACC arg_4           = byte ptr  0Ch
.text$mn:00009ACC
.text$mn:00009ACC                 push    ebp
.text$mn:00009ACD                 mov     ebp, esp
.text$mn:00009ACF                 push    ecx
.text$mn:00009AD0                 mov     [ebp+var_4], ecx
.text$mn:00009AD3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009AD6                 call    ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init(void)
.text$mn:00009ADB                 mov     eax, [ebp+var_4]
.text$mn:00009ADE                 mov     ecx, [ebp+arg_0]
.text$mn:00009AE1                 mov     [eax+38h], ecx
.text$mn:00009AE4                 mov     edx, [ebp+var_4]
.text$mn:00009AE7                 mov     dword ptr [edx+3Ch], 0
.text$mn:00009AEE                 push    20h ; ' '
.text$mn:00009AF0                 mov     ecx, [ebp+var_4]
.text$mn:00009AF3                 call    ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char>>::widen(char)
.text$mn:00009AF8                 mov     ecx, [ebp+var_4]
.text$mn:00009AFB                 mov     [ecx+40h], al
.text$mn:00009AFE                 mov     edx, [ebp+var_4]
.text$mn:00009B01                 cmp     dword ptr [edx+38h], 0
.text$mn:00009B05                 jnz     short loc_9B13
.text$mn:00009B07                 push    0
.text$mn:00009B09                 push    4
.text$mn:00009B0B                 mov     ecx, [ebp+var_4]
.text$mn:00009B0E                 call    ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)
.text$mn:00009B13
.text$mn:00009B13 loc_9B13:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)+39j
.text$mn:00009B13                 movzx   eax, [ebp+arg_4]
.text$mn:00009B17                 test    eax, eax
.text$mn:00009B19                 jz      short loc_9B27
.text$mn:00009B1B                 mov     ecx, [ebp+var_4]
.text$mn:00009B1E                 push    ecx             ; struct std::ios_base *
.text$mn:00009B1F                 call    ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd(std::ios_base *)
.text$mn:00009B24                 add     esp, 4
.text$mn:00009B27
.text$mn:00009B27 loc_9B27:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)+4Dj
.text$mn:00009B27                 mov     esp, ebp
.text$mn:00009B29                 pop     ebp
.text$mn:00009B2A                 retn    8
.text$mn:00009B2A ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z endp
.text$mn:00009B2A
.text$mn:00009B2A ; ---------------------------------------------------------------------------
.text$mn:00009B2D                 align 10h
.text$mn:00009B2D _text$mn        ends
.text$mn:00009B2D
.text$mn:00009B30 ; ===========================================================================
.text$mn:00009B30
.text$mn:00009B30 ; Segment type: Pure code
.text$mn:00009B30 ; Segment permissions: Read/Execute
.text$mn:00009B30 _text$mn        segment para public 'CODE' use32
.text$mn:00009B30                 assume cs:_text$mn
.text$mn:00009B30                 ;org 9B30h
.text$mn:00009B30 ; COMDAT (pick any)
.text$mn:00009B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B30
.text$mn:00009B30 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B30
.text$mn:00009B30 ; Attributes: bp-based frame
.text$mn:00009B30
.text$mn:00009B30 ; const struct std::error_category *__cdecl std::iostream_category()
.text$mn:00009B30                 public ?iostream_category@std@@YAABVerror_category@1@XZ
.text$mn:00009B30 ?iostream_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00009B30                                         ; CODE XREF: std::make_error_code(std::io_errc)+3p
.text$mn:00009B30                 push    ebp
.text$mn:00009B31                 mov     ebp, esp
.text$mn:00009B33                 mov     eax, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.text$mn:00009B38                 pop     ebp
.text$mn:00009B39                 retn
.text$mn:00009B39 ?iostream_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00009B39
.text$mn:00009B39 ; ---------------------------------------------------------------------------
.text$mn:00009B3A                 align 4
.text$mn:00009B3A _text$mn        ends
.text$mn:00009B3A
.text$mn:00009B3C ; ===========================================================================
.text$mn:00009B3C
.text$mn:00009B3C ; Segment type: Pure code
.text$mn:00009B3C ; Segment permissions: Read/Execute
.text$mn:00009B3C _text$mn        segment para public 'CODE' use32
.text$mn:00009B3C                 assume cs:_text$mn
.text$mn:00009B3C                 ;org 9B3Ch
.text$mn:00009B3C ; COMDAT (pick any)
.text$mn:00009B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B3C
.text$mn:00009B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B3C
.text$mn:00009B3C ; Attributes: bp-based frame
.text$mn:00009B3C
.text$mn:00009B3C ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::length(void)const
.text$mn:00009B3C                 public ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00009B3C ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00009B3C                                         ; CODE XREF: TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+Cp
.text$mn:00009B3C                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+1Ap ...
.text$mn:00009B3C
.text$mn:00009B3C var_4           = dword ptr -4
.text$mn:00009B3C
.text$mn:00009B3C                 push    ebp
.text$mn:00009B3D                 mov     ebp, esp
.text$mn:00009B3F                 push    ecx
.text$mn:00009B40                 mov     [ebp+var_4], ecx
.text$mn:00009B43                 mov     eax, [ebp+var_4]
.text$mn:00009B46                 mov     eax, [eax+14h]
.text$mn:00009B49                 mov     esp, ebp
.text$mn:00009B4B                 pop     ebp
.text$mn:00009B4C                 retn
.text$mn:00009B4C ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00009B4C
.text$mn:00009B4C ; ---------------------------------------------------------------------------
.text$mn:00009B4D                 align 10h
.text$mn:00009B4D _text$mn        ends
.text$mn:00009B4D
.text$mn:00009B50 ; ===========================================================================
.text$mn:00009B50
.text$mn:00009B50 ; Segment type: Pure code
.text$mn:00009B50 ; Segment permissions: Read/Execute
.text$mn:00009B50 _text$mn        segment para public 'CODE' use32
.text$mn:00009B50                 assume cs:_text$mn
.text$mn:00009B50                 ;org 9B50h
.text$mn:00009B50 ; COMDAT (pick any)
.text$mn:00009B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B50
.text$mn:00009B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B50
.text$mn:00009B50 ; Attributes: bp-based frame
.text$mn:00009B50
.text$mn:00009B50 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00009B50                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00009B50 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00009B50                                         ; CODE XREF: std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+37p
.text$mn:00009B50                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+21p ...
.text$mn:00009B50
.text$mn:00009B50 var_4           = dword ptr -4
.text$mn:00009B50 Str             = dword ptr  8
.text$mn:00009B50
.text$mn:00009B50                 push    ebp
.text$mn:00009B51                 mov     ebp, esp
.text$mn:00009B53                 push    ecx
.text$mn:00009B54                 mov     eax, [ebp+Str]
.text$mn:00009B57                 movsx   ecx, byte ptr [eax]
.text$mn:00009B5A                 test    ecx, ecx
.text$mn:00009B5C                 jnz     short loc_9B67
.text$mn:00009B5E                 mov     [ebp+var_4], 0
.text$mn:00009B65                 jmp     short loc_9B76
.text$mn:00009B67 ; ---------------------------------------------------------------------------
.text$mn:00009B67
.text$mn:00009B67 loc_9B67:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:00009B67                 mov     edx, [ebp+Str]
.text$mn:00009B6A                 push    edx             ; Str
.text$mn:00009B6B                 call    _strlen
.text$mn:00009B70                 add     esp, 4
.text$mn:00009B73                 mov     [ebp+var_4], eax
.text$mn:00009B76
.text$mn:00009B76 loc_9B76:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:00009B76                 mov     eax, [ebp+var_4]
.text$mn:00009B79                 mov     esp, ebp
.text$mn:00009B7B                 pop     ebp
.text$mn:00009B7C                 retn
.text$mn:00009B7C ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00009B7C
.text$mn:00009B7C ; ---------------------------------------------------------------------------
.text$mn:00009B7D                 align 10h
.text$mn:00009B7D _text$mn        ends
.text$mn:00009B7D
.text$mn:00009B80 ; ===========================================================================
.text$mn:00009B80
.text$mn:00009B80 ; Segment type: Pure code
.text$mn:00009B80 ; Segment permissions: Read/Execute
.text$mn:00009B80 _text$mn        segment para public 'CODE' use32
.text$mn:00009B80                 assume cs:_text$mn
.text$mn:00009B80                 ;org 9B80h
.text$mn:00009B80 ; COMDAT (pick any)
.text$mn:00009B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B80
.text$mn:00009B80 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B80
.text$mn:00009B80 ; Attributes: bp-based frame
.text$mn:00009B80
.text$mn:00009B80 ; class std::error_code __cdecl std::make_error_code(enum  std::io_errc)
.text$mn:00009B80                 public ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
.text$mn:00009B80 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z proc near
.text$mn:00009B80                                         ; CODE XREF: std::ios_base::clear(int,bool)+55p
.text$mn:00009B80                                         ; std::ios_base::clear(int,bool)+92p ...
.text$mn:00009B80
.text$mn:00009B80 arg_0           = dword ptr  8
.text$mn:00009B80 arg_4           = dword ptr  0Ch
.text$mn:00009B80
.text$mn:00009B80                 push    ebp
.text$mn:00009B81                 mov     ebp, esp
.text$mn:00009B83                 call    ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category(void)
.text$mn:00009B88                 push    eax             ; struct std::error_category *
.text$mn:00009B89                 mov     eax, [ebp+arg_4]
.text$mn:00009B8C                 push    eax             ; int
.text$mn:00009B8D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009B90                 call    ??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code(int,std::error_category const &)
.text$mn:00009B95                 mov     eax, [ebp+arg_0]
.text$mn:00009B98                 pop     ebp
.text$mn:00009B99                 retn
.text$mn:00009B99 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z endp
.text$mn:00009B99
.text$mn:00009B99 ; ---------------------------------------------------------------------------
.text$mn:00009B9A                 align 4
.text$mn:00009B9A _text$mn        ends
.text$mn:00009B9A
.text$mn:00009B9C ; ===========================================================================
.text$mn:00009B9C
.text$mn:00009B9C ; Segment type: Pure code
.text$mn:00009B9C ; Segment permissions: Read/Execute
.text$mn:00009B9C _text$mn        segment para public 'CODE' use32
.text$mn:00009B9C                 assume cs:_text$mn
.text$mn:00009B9C                 ;org 9B9Ch
.text$mn:00009B9C ; COMDAT (pick any)
.text$mn:00009B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B9C
.text$mn:00009B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B9C
.text$mn:00009B9C ; Attributes: bp-based frame
.text$mn:00009B9C
.text$mn:00009B9C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00009B9C                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00009B9C ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00009B9C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00009B9C
.text$mn:00009B9C var_4           = dword ptr -4
.text$mn:00009B9C
.text$mn:00009B9C                 push    ebp
.text$mn:00009B9D                 mov     ebp, esp
.text$mn:00009B9F                 push    ecx
.text$mn:00009BA0                 mov     [ebp+var_4], ecx
.text$mn:00009BA3                 mov     eax, [ebp+var_4]
.text$mn:00009BA6                 push    eax
.text$mn:00009BA7                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00009BAC                 add     esp, 4
.text$mn:00009BAF                 mov     esp, ebp
.text$mn:00009BB1                 pop     ebp
.text$mn:00009BB2                 retn
.text$mn:00009BB2 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00009BB2
.text$mn:00009BB2 ; ---------------------------------------------------------------------------
.text$mn:00009BB3                 align 4
.text$mn:00009BB3 _text$mn        ends
.text$mn:00009BB3
.text$mn:00009BB4 ; ===========================================================================
.text$mn:00009BB4
.text$mn:00009BB4 ; Segment type: Pure code
.text$mn:00009BB4 ; Segment permissions: Read/Execute
.text$mn:00009BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BB4                 assume cs:_text$mn
.text$mn:00009BB4                 ;org 9BB4h
.text$mn:00009BB4 ; COMDAT (pick any)
.text$mn:00009BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BB4
.text$mn:00009BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BB4
.text$mn:00009BB4 ; Attributes: bp-based frame
.text$mn:00009BB4
.text$mn:00009BB4 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00009BB4                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00009BB4 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00009BB4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00009BB4
.text$mn:00009BB4 var_4           = dword ptr -4
.text$mn:00009BB4
.text$mn:00009BB4                 push    ebp
.text$mn:00009BB5                 mov     ebp, esp
.text$mn:00009BB7                 push    ecx
.text$mn:00009BB8                 mov     [ebp+var_4], ecx
.text$mn:00009BBB                 or      eax, 0FFFFFFFFh
.text$mn:00009BBE                 mov     esp, ebp
.text$mn:00009BC0                 pop     ebp
.text$mn:00009BC1                 retn
.text$mn:00009BC1 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00009BC1
.text$mn:00009BC1 ; ---------------------------------------------------------------------------
.text$mn:00009BC2                 align 4
.text$mn:00009BC2 _text$mn        ends
.text$mn:00009BC2
.text$mn:00009BC4 ; ===========================================================================
.text$mn:00009BC4
.text$mn:00009BC4 ; Segment type: Pure code
.text$mn:00009BC4 ; Segment permissions: Read/Execute
.text$mn:00009BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BC4                 assume cs:_text$mn
.text$mn:00009BC4                 ;org 9BC4h
.text$mn:00009BC4 ; COMDAT (pick any)
.text$mn:00009BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BC4
.text$mn:00009BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BC4
.text$mn:00009BC4 ; Attributes: bp-based frame
.text$mn:00009BC4
.text$mn:00009BC4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00009BC4                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00009BC4 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00009BC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00009BC4
.text$mn:00009BC4 arg_0           = dword ptr  8
.text$mn:00009BC4
.text$mn:00009BC4                 push    ebp
.text$mn:00009BC5                 mov     ebp, esp
.text$mn:00009BC7                 mov     ecx, [ebp+arg_0]
.text$mn:00009BCA                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00009BCF                 pop     ebp
.text$mn:00009BD0                 retn
.text$mn:00009BD0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00009BD0
.text$mn:00009BD0 ; ---------------------------------------------------------------------------
.text$mn:00009BD1                 align 4
.text$mn:00009BD1 _text$mn        ends
.text$mn:00009BD1
.text$mn:00009BD4 ; ===========================================================================
.text$mn:00009BD4
.text$mn:00009BD4 ; Segment type: Pure code
.text$mn:00009BD4 ; Segment permissions: Read/Execute
.text$mn:00009BD4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BD4                 assume cs:_text$mn
.text$mn:00009BD4                 ;org 9BD4h
.text$mn:00009BD4 ; COMDAT (pick any)
.text$mn:00009BD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BD4
.text$mn:00009BD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BD4
.text$mn:00009BD4 ; Attributes: bp-based frame
.text$mn:00009BD4
.text$mn:00009BD4 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00009BD4                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00009BD4 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00009BD4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00009BD4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00009BD4
.text$mn:00009BD4 var_10          = dword ptr -10h
.text$mn:00009BD4 var_C           = dword ptr -0Ch
.text$mn:00009BD4 var_8           = dword ptr -8
.text$mn:00009BD4 var_1           = byte ptr -1
.text$mn:00009BD4
.text$mn:00009BD4                 push    ebp
.text$mn:00009BD5                 mov     ebp, esp
.text$mn:00009BD7                 sub     esp, 10h
.text$mn:00009BDA                 mov     [ebp+var_10], ecx
.text$mn:00009BDD                 lea     eax, [ebp+var_1]
.text$mn:00009BE0                 push    eax
.text$mn:00009BE1                 mov     ecx, [ebp+var_10]
.text$mn:00009BE4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00009BE9                 mov     ecx, eax
.text$mn:00009BEB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00009BF0                 mov     [ebp+var_8], eax
.text$mn:00009BF3                 cmp     [ebp+var_8], 1
.text$mn:00009BF7                 ja      short loc_9C02
.text$mn:00009BF9                 mov     [ebp+var_C], 1
.text$mn:00009C00                 jmp     short loc_9C0B
.text$mn:00009C02 ; ---------------------------------------------------------------------------
.text$mn:00009C02
.text$mn:00009C02 loc_9C02:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00009C02                 mov     ecx, [ebp+var_8]
.text$mn:00009C05                 sub     ecx, 1
.text$mn:00009C08                 mov     [ebp+var_C], ecx
.text$mn:00009C0B
.text$mn:00009C0B loc_9C0B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00009C0B                 mov     eax, [ebp+var_C]
.text$mn:00009C0E                 mov     esp, ebp
.text$mn:00009C10                 pop     ebp
.text$mn:00009C11                 retn
.text$mn:00009C11 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00009C11
.text$mn:00009C11 ; ---------------------------------------------------------------------------
.text$mn:00009C12                 align 4
.text$mn:00009C12 _text$mn        ends
.text$mn:00009C12
.text$mn:00009C14 ; ===========================================================================
.text$mn:00009C14
.text$mn:00009C14 ; Segment type: Pure code
.text$mn:00009C14 ; Segment permissions: Read/Execute
.text$mn:00009C14 _text$mn        segment para public 'CODE' use32
.text$mn:00009C14                 assume cs:_text$mn
.text$mn:00009C14                 ;org 9C14h
.text$mn:00009C14 ; COMDAT (pick any)
.text$mn:00009C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C14
.text$mn:00009C14 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C14
.text$mn:00009C14 ; Attributes: bp-based frame
.text$mn:00009C14
.text$mn:00009C14 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00009C14                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009C14 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009C14                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00009C14                                         ; DATA XREF: .rdata:0000CAA0o
.text$mn:00009C14
.text$mn:00009C14 var_1C          = dword ptr -1Ch
.text$mn:00009C14 var_18          = dword ptr -18h
.text$mn:00009C14 Str             = dword ptr -14h
.text$mn:00009C14 var_10          = dword ptr -10h
.text$mn:00009C14 var_C           = dword ptr -0Ch
.text$mn:00009C14 var_4           = dword ptr -4
.text$mn:00009C14 arg_0           = dword ptr  8
.text$mn:00009C14 arg_4           = dword ptr  0Ch
.text$mn:00009C14
.text$mn:00009C14                 push    ebp
.text$mn:00009C15                 mov     ebp, esp
.text$mn:00009C17                 push    0FFFFFFFFh
.text$mn:00009C19                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009C1E                 mov     eax, large fs:0
.text$mn:00009C24                 push    eax
.text$mn:00009C25                 sub     esp, 10h
.text$mn:00009C28                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009C2D                 xor     eax, ebp
.text$mn:00009C2F                 push    eax
.text$mn:00009C30                 lea     eax, [ebp+var_C]
.text$mn:00009C33                 mov     large fs:0, eax
.text$mn:00009C39                 mov     [ebp+var_1C], ecx
.text$mn:00009C3C                 mov     [ebp+var_18], 0
.text$mn:00009C43                 mov     eax, [ebp+arg_4]
.text$mn:00009C46                 push    eax             ; int
.text$mn:00009C47                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00009C4C                 add     esp, 4
.text$mn:00009C4F                 mov     [ebp+var_10], eax
.text$mn:00009C52                 cmp     [ebp+var_10], 0
.text$mn:00009C56                 jz      short loc_9C60
.text$mn:00009C58                 mov     ecx, [ebp+var_10]
.text$mn:00009C5B                 mov     [ebp+Str], ecx
.text$mn:00009C5E                 jmp     short loc_9C67
.text$mn:00009C60 ; ---------------------------------------------------------------------------
.text$mn:00009C60
.text$mn:00009C60 loc_9C60:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00009C60                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00009C67
.text$mn:00009C67 loc_9C67:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00009C67                 mov     edx, [ebp+Str]
.text$mn:00009C6A                 push    edx             ; Str
.text$mn:00009C6B                 mov     ecx, [ebp+arg_0]
.text$mn:00009C6E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009C73                 mov     [ebp+var_4], 0
.text$mn:00009C7A                 mov     eax, [ebp+var_18]
.text$mn:00009C7D                 or      eax, 1
.text$mn:00009C80                 mov     [ebp+var_18], eax
.text$mn:00009C83                 mov     eax, [ebp+arg_0]
.text$mn:00009C86                 mov     ecx, [ebp+var_C]
.text$mn:00009C89                 mov     large fs:0, ecx
.text$mn:00009C90                 pop     ecx
.text$mn:00009C91                 mov     esp, ebp
.text$mn:00009C93                 pop     ebp
.text$mn:00009C94                 retn    8
.text$mn:00009C94 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009C94
.text$mn:00009C94 ; ---------------------------------------------------------------------------
.text$mn:00009C97                 align 4
.text$mn:00009C97 _text$mn        ends
.text$mn:00009C97
.text$x:00009C98 ; ===========================================================================
.text$x:00009C98
.text$x:00009C98 ; Segment type: Pure code
.text$x:00009C98 ; Segment permissions: Read/Execute
.text$x:00009C98 _text$x         segment para public 'CODE' use32
.text$x:00009C98                 assume cs:_text$x
.text$x:00009C98                 ;org 9C98h
.text$x:00009C98 ; COMDAT (pick associative to section at 9C14)
.text$x:00009C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009C98
.text$x:00009C98 ; =============== S U B R O U T I N E =======================================
.text$x:00009C98
.text$x:00009C98
.text$x:00009C98 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009C98                                         ; DATA XREF: .xdata$x:0000BA5Co
.text$x:00009C98                 mov     eax, [ebp-18h]
.text$x:00009C9B                 and     eax, 1
.text$x:00009C9E                 jz      $LN6
.text$x:00009CA4                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00009CA8                 mov     ecx, [ebp+8]
.text$x:00009CAB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009CB0 ; ---------------------------------------------------------------------------
.text$x:00009CB0
.text$x:00009CB0 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009CB0                 retn
.text$x:00009CB0 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009CB0
.text$x:00009CB1
.text$x:00009CB1 ; =============== S U B R O U T I N E =======================================
.text$x:00009CB1
.text$x:00009CB1
.text$x:00009CB1 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009CB1                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00009CB1
.text$x:00009CB1 arg_4           = dword ptr  8
.text$x:00009CB1
.text$x:00009CB1                 mov     edx, [esp+arg_4]
.text$x:00009CB5                 lea     eax, [edx+0Ch]
.text$x:00009CB8                 mov     ecx, [edx-14h]
.text$x:00009CBB                 xor     ecx, eax
.text$x:00009CBD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009CC2                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009CC7                 jmp     ___CxxFrameHandler3
.text$x:00009CC7 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009CC7
.text$x:00009CC7 _text$x         ends
.text$x:00009CC7
.text$mn:00009CCC ; ===========================================================================
.text$mn:00009CCC
.text$mn:00009CCC ; Segment type: Pure code
.text$mn:00009CCC ; Segment permissions: Read/Execute
.text$mn:00009CCC _text$mn        segment para public 'CODE' use32
.text$mn:00009CCC                 assume cs:_text$mn
.text$mn:00009CCC                 ;org 9CCCh
.text$mn:00009CCC ; COMDAT (pick any)
.text$mn:00009CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CCC
.text$mn:00009CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00009CCC
.text$mn:00009CCC ; Attributes: bp-based frame
.text$mn:00009CCC
.text$mn:00009CCC ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00009CCC                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009CCC ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009CCC                                         ; DATA XREF: .rdata:0000CAD4o
.text$mn:00009CCC
.text$mn:00009CCC var_14          = dword ptr -14h
.text$mn:00009CCC var_10          = dword ptr -10h
.text$mn:00009CCC var_C           = dword ptr -0Ch
.text$mn:00009CCC var_4           = dword ptr -4
.text$mn:00009CCC arg_0           = dword ptr  8
.text$mn:00009CCC arg_4           = dword ptr  0Ch
.text$mn:00009CCC
.text$mn:00009CCC                 push    ebp
.text$mn:00009CCD                 mov     ebp, esp
.text$mn:00009CCF                 push    0FFFFFFFFh
.text$mn:00009CD1                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009CD6                 mov     eax, large fs:0
.text$mn:00009CDC                 push    eax
.text$mn:00009CDD                 sub     esp, 8
.text$mn:00009CE0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009CE5                 xor     eax, ebp
.text$mn:00009CE7                 push    eax
.text$mn:00009CE8                 lea     eax, [ebp+var_C]
.text$mn:00009CEB                 mov     large fs:0, eax
.text$mn:00009CF1                 mov     [ebp+var_14], ecx
.text$mn:00009CF4                 mov     [ebp+var_10], 0
.text$mn:00009CFB                 cmp     [ebp+arg_4], 1
.text$mn:00009CFF                 jnz     short loc_9D25
.text$mn:00009D01                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00009D06                 mov     ecx, [ebp+arg_0]
.text$mn:00009D09                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009D0E                 mov     [ebp+var_4], 0
.text$mn:00009D15                 mov     eax, [ebp+var_10]
.text$mn:00009D18                 or      eax, 1
.text$mn:00009D1B                 mov     [ebp+var_10], eax
.text$mn:00009D1E                 mov     eax, [ebp+arg_0]
.text$mn:00009D21                 jmp     short loc_9D48
.text$mn:00009D23 ; ---------------------------------------------------------------------------
.text$mn:00009D23                 jmp     short loc_9D48
.text$mn:00009D25 ; ---------------------------------------------------------------------------
.text$mn:00009D25
.text$mn:00009D25 loc_9D25:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00009D25                 mov     ecx, [ebp+arg_4]
.text$mn:00009D28                 push    ecx
.text$mn:00009D29                 mov     edx, [ebp+arg_0]
.text$mn:00009D2C                 push    edx
.text$mn:00009D2D                 mov     ecx, [ebp+var_14]
.text$mn:00009D30                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00009D35                 mov     [ebp+var_4], 0
.text$mn:00009D3C                 mov     eax, [ebp+var_10]
.text$mn:00009D3F                 or      eax, 1
.text$mn:00009D42                 mov     [ebp+var_10], eax
.text$mn:00009D45                 mov     eax, [ebp+arg_0]
.text$mn:00009D48
.text$mn:00009D48 loc_9D48:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00009D48                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00009D48                 mov     ecx, [ebp+var_C]
.text$mn:00009D4B                 mov     large fs:0, ecx
.text$mn:00009D52                 pop     ecx
.text$mn:00009D53                 mov     esp, ebp
.text$mn:00009D55                 pop     ebp
.text$mn:00009D56                 retn    8
.text$mn:00009D56 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009D56
.text$mn:00009D56 ; ---------------------------------------------------------------------------
.text$mn:00009D59                 align 4
.text$mn:00009D59 _text$mn        ends
.text$mn:00009D59
.text$x:00009D5C ; ===========================================================================
.text$x:00009D5C
.text$x:00009D5C ; Segment type: Pure code
.text$x:00009D5C ; Segment permissions: Read/Execute
.text$x:00009D5C _text$x         segment para public 'CODE' use32
.text$x:00009D5C                 assume cs:_text$x
.text$x:00009D5C                 ;org 9D5Ch
.text$x:00009D5C ; COMDAT (pick associative to section at 9CCC)
.text$x:00009D5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009D5C
.text$x:00009D5C ; =============== S U B R O U T I N E =======================================
.text$x:00009D5C
.text$x:00009D5C
.text$x:00009D5C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009D5C                                         ; DATA XREF: .xdata$x:0000BAE0o
.text$x:00009D5C                 mov     eax, [ebp-10h]
.text$x:00009D5F                 and     eax, 1
.text$x:00009D62                 jz      $LN6_0
.text$x:00009D68                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009D6C                 mov     ecx, [ebp+8]
.text$x:00009D6F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009D74 ; ---------------------------------------------------------------------------
.text$x:00009D74
.text$x:00009D74 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009D74                 retn
.text$x:00009D74 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009D74
.text$x:00009D75
.text$x:00009D75 ; =============== S U B R O U T I N E =======================================
.text$x:00009D75
.text$x:00009D75
.text$x:00009D75 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009D75                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00009D75
.text$x:00009D75 arg_4           = dword ptr  8
.text$x:00009D75
.text$x:00009D75                 mov     edx, [esp+arg_4]
.text$x:00009D79                 lea     eax, [edx+0Ch]
.text$x:00009D7C                 mov     ecx, [edx-0Ch]
.text$x:00009D7F                 xor     ecx, eax
.text$x:00009D81                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009D86                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009D8B                 jmp     ___CxxFrameHandler3
.text$x:00009D8B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009D8B
.text$x:00009D8B _text$x         ends
.text$x:00009D8B
.text$mn:00009D90 ; ===========================================================================
.text$mn:00009D90
.text$mn:00009D90 ; Segment type: Pure code
.text$mn:00009D90 ; Segment permissions: Read/Execute
.text$mn:00009D90 _text$mn        segment para public 'CODE' use32
.text$mn:00009D90                 assume cs:_text$mn
.text$mn:00009D90                 ;org 9D90h
.text$mn:00009D90 ; COMDAT (pick any)
.text$mn:00009D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D90
.text$mn:00009D90 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D90
.text$mn:00009D90 ; Attributes: bp-based frame
.text$mn:00009D90
.text$mn:00009D90 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00009D90                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009D90 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009D90                                         ; DATA XREF: .rdata:0000CB14o
.text$mn:00009D90
.text$mn:00009D90 var_1C          = dword ptr -1Ch
.text$mn:00009D90 var_18          = dword ptr -18h
.text$mn:00009D90 Str             = dword ptr -14h
.text$mn:00009D90 var_10          = dword ptr -10h
.text$mn:00009D90 var_C           = dword ptr -0Ch
.text$mn:00009D90 var_4           = dword ptr -4
.text$mn:00009D90 arg_0           = dword ptr  8
.text$mn:00009D90 arg_4           = dword ptr  0Ch
.text$mn:00009D90
.text$mn:00009D90                 push    ebp
.text$mn:00009D91                 mov     ebp, esp
.text$mn:00009D93                 push    0FFFFFFFFh
.text$mn:00009D95                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009D9A                 mov     eax, large fs:0
.text$mn:00009DA0                 push    eax
.text$mn:00009DA1                 sub     esp, 10h
.text$mn:00009DA4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009DA9                 xor     eax, ebp
.text$mn:00009DAB                 push    eax
.text$mn:00009DAC                 lea     eax, [ebp+var_C]
.text$mn:00009DAF                 mov     large fs:0, eax
.text$mn:00009DB5                 mov     [ebp+var_1C], ecx
.text$mn:00009DB8                 mov     [ebp+var_18], 0
.text$mn:00009DBF                 mov     eax, [ebp+arg_4]
.text$mn:00009DC2                 push    eax             ; int
.text$mn:00009DC3                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00009DC8                 add     esp, 4
.text$mn:00009DCB                 mov     [ebp+var_10], eax
.text$mn:00009DCE                 cmp     [ebp+var_10], 0
.text$mn:00009DD2                 jz      short loc_9DDC
.text$mn:00009DD4                 mov     ecx, [ebp+var_10]
.text$mn:00009DD7                 mov     [ebp+Str], ecx
.text$mn:00009DDA                 jmp     short loc_9DE3
.text$mn:00009DDC ; ---------------------------------------------------------------------------
.text$mn:00009DDC
.text$mn:00009DDC loc_9DDC:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00009DDC                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00009DE3
.text$mn:00009DE3 loc_9DE3:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00009DE3                 mov     edx, [ebp+Str]
.text$mn:00009DE6                 push    edx             ; Str
.text$mn:00009DE7                 mov     ecx, [ebp+arg_0]
.text$mn:00009DEA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009DEF                 mov     [ebp+var_4], 0
.text$mn:00009DF6                 mov     eax, [ebp+var_18]
.text$mn:00009DF9                 or      eax, 1
.text$mn:00009DFC                 mov     [ebp+var_18], eax
.text$mn:00009DFF                 mov     eax, [ebp+arg_0]
.text$mn:00009E02                 mov     ecx, [ebp+var_C]
.text$mn:00009E05                 mov     large fs:0, ecx
.text$mn:00009E0C                 pop     ecx
.text$mn:00009E0D                 mov     esp, ebp
.text$mn:00009E0F                 pop     ebp
.text$mn:00009E10                 retn    8
.text$mn:00009E10 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009E10
.text$mn:00009E10 ; ---------------------------------------------------------------------------
.text$mn:00009E13                 align 4
.text$mn:00009E13 _text$mn        ends
.text$mn:00009E13
.text$x:00009E14 ; ===========================================================================
.text$x:00009E14
.text$x:00009E14 ; Segment type: Pure code
.text$x:00009E14 ; Segment permissions: Read/Execute
.text$x:00009E14 _text$x         segment para public 'CODE' use32
.text$x:00009E14                 assume cs:_text$x
.text$x:00009E14                 ;org 9E14h
.text$x:00009E14 ; COMDAT (pick associative to section at 9D90)
.text$x:00009E14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E14
.text$x:00009E14 ; =============== S U B R O U T I N E =======================================
.text$x:00009E14
.text$x:00009E14
.text$x:00009E14 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009E14                                         ; DATA XREF: .xdata$x:0000BB64o
.text$x:00009E14                 mov     eax, [ebp-18h]
.text$x:00009E17                 and     eax, 1
.text$x:00009E1A                 jz      $LN6_1
.text$x:00009E20                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00009E24                 mov     ecx, [ebp+8]
.text$x:00009E27                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009E2C ; ---------------------------------------------------------------------------
.text$x:00009E2C
.text$x:00009E2C $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009E2C                 retn
.text$x:00009E2C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009E2C
.text$x:00009E2D
.text$x:00009E2D ; =============== S U B R O U T I N E =======================================
.text$x:00009E2D
.text$x:00009E2D
.text$x:00009E2D __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009E2D                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00009E2D
.text$x:00009E2D arg_4           = dword ptr  8
.text$x:00009E2D
.text$x:00009E2D                 mov     edx, [esp+arg_4]
.text$x:00009E31                 lea     eax, [edx+0Ch]
.text$x:00009E34                 mov     ecx, [edx-14h]
.text$x:00009E37                 xor     ecx, eax
.text$x:00009E39                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009E3E                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009E43                 jmp     ___CxxFrameHandler3
.text$x:00009E43 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009E43
.text$x:00009E43 _text$x         ends
.text$x:00009E43
.text$mn:00009E48 ; ===========================================================================
.text$mn:00009E48
.text$mn:00009E48 ; Segment type: Pure code
.text$mn:00009E48 ; Segment permissions: Read/Execute
.text$mn:00009E48 _text$mn        segment para public 'CODE' use32
.text$mn:00009E48                 assume cs:_text$mn
.text$mn:00009E48                 ;org 9E48h
.text$mn:00009E48 ; COMDAT (pick any)
.text$mn:00009E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E48
.text$mn:00009E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E48
.text$mn:00009E48 ; Attributes: bp-based frame
.text$mn:00009E48
.text$mn:00009E48 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::error_code::message(void)const
.text$mn:00009E48                 public ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:00009E48 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$mn:00009E48                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+59p
.text$mn:00009E48
.text$mn:00009E48 var_18          = dword ptr -18h
.text$mn:00009E48 var_14          = dword ptr -14h
.text$mn:00009E48 var_10          = dword ptr -10h
.text$mn:00009E48 var_C           = dword ptr -0Ch
.text$mn:00009E48 var_4           = dword ptr -4
.text$mn:00009E48 arg_0           = dword ptr  8
.text$mn:00009E48
.text$mn:00009E48                 push    ebp
.text$mn:00009E49                 mov     ebp, esp
.text$mn:00009E4B                 push    0FFFFFFFFh
.text$mn:00009E4D                 push    offset __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:00009E52                 mov     eax, large fs:0
.text$mn:00009E58                 push    eax
.text$mn:00009E59                 sub     esp, 0Ch
.text$mn:00009E5C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009E61                 xor     eax, ebp
.text$mn:00009E63                 push    eax
.text$mn:00009E64                 lea     eax, [ebp+var_C]
.text$mn:00009E67                 mov     large fs:0, eax
.text$mn:00009E6D                 mov     [ebp+var_10], ecx
.text$mn:00009E70                 mov     [ebp+var_18], 0
.text$mn:00009E77                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009E7A                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00009E7F                 mov     [ebp+var_14], eax
.text$mn:00009E82                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009E85                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00009E8A                 push    eax
.text$mn:00009E8B                 mov     eax, [ebp+arg_0]
.text$mn:00009E8E                 push    eax
.text$mn:00009E8F                 mov     ecx, [ebp+var_14]
.text$mn:00009E92                 mov     edx, [ecx]
.text$mn:00009E94                 mov     ecx, [ebp+var_14]
.text$mn:00009E97                 mov     eax, [edx+8]
.text$mn:00009E9A                 call    eax
.text$mn:00009E9C                 mov     [ebp+var_4], 0
.text$mn:00009EA3                 mov     ecx, [ebp+var_18]
.text$mn:00009EA6                 or      ecx, 1
.text$mn:00009EA9                 mov     [ebp+var_18], ecx
.text$mn:00009EAC                 mov     eax, [ebp+arg_0]
.text$mn:00009EAF                 mov     ecx, [ebp+var_C]
.text$mn:00009EB2                 mov     large fs:0, ecx
.text$mn:00009EB9                 pop     ecx
.text$mn:00009EBA                 mov     esp, ebp
.text$mn:00009EBC                 pop     ebp
.text$mn:00009EBD                 retn    4
.text$mn:00009EBD ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$mn:00009EBD
.text$mn:00009EBD _text$mn        ends
.text$mn:00009EBD
.text$x:00009EC0 ; ===========================================================================
.text$x:00009EC0
.text$x:00009EC0 ; Segment type: Pure code
.text$x:00009EC0 ; Segment permissions: Read/Execute
.text$x:00009EC0 _text$x         segment para public 'CODE' use32
.text$x:00009EC0                 assume cs:_text$x
.text$x:00009EC0                 ;org 9EC0h
.text$x:00009EC0 ; COMDAT (pick associative to section at 9E48)
.text$x:00009EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009EC0
.text$x:00009EC0 ; =============== S U B R O U T I N E =======================================
.text$x:00009EC0
.text$x:00009EC0
.text$x:00009EC0 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 proc near
.text$x:00009EC0                                         ; DATA XREF: .xdata$x:0000B898o
.text$x:00009EC0                 mov     eax, [ebp-18h]
.text$x:00009EC3                 and     eax, 1
.text$x:00009EC6                 jz      $LN4
.text$x:00009ECC                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00009ED0                 mov     ecx, [ebp+8]
.text$x:00009ED3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009ED8 ; ---------------------------------------------------------------------------
.text$x:00009ED8
.text$x:00009ED8 $LN4:                                   ; CODE XREF: __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0+6j
.text$x:00009ED8                 retn
.text$x:00009ED8 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 endp
.text$x:00009ED8
.text$x:00009ED9
.text$x:00009ED9 ; =============== S U B R O U T I N E =======================================
.text$x:00009ED9
.text$x:00009ED9
.text$x:00009ED9 __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$x:00009ED9                                         ; DATA XREF: std::error_code::message(void)+5o
.text$x:00009ED9
.text$x:00009ED9 arg_4           = dword ptr  8
.text$x:00009ED9
.text$x:00009ED9                 mov     edx, [esp+arg_4]
.text$x:00009EDD                 lea     eax, [edx+0Ch]
.text$x:00009EE0                 mov     ecx, [edx-10h]
.text$x:00009EE3                 xor     ecx, eax
.text$x:00009EE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009EEA                 mov     eax, offset __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$x:00009EEF                 jmp     ___CxxFrameHandler3
.text$x:00009EEF __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$x:00009EEF
.text$x:00009EEF _text$x         ends
.text$x:00009EEF
.text$mn:00009EF4 ; ===========================================================================
.text$mn:00009EF4
.text$mn:00009EF4 ; Segment type: Pure code
.text$mn:00009EF4 ; Segment permissions: Read/Execute
.text$mn:00009EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00009EF4                 assume cs:_text$mn
.text$mn:00009EF4                 ;org 9EF4h
.text$mn:00009EF4 ; COMDAT (pick any)
.text$mn:00009EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EF4
.text$mn:00009EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009EF4
.text$mn:00009EF4 ; Attributes: bp-based frame
.text$mn:00009EF4
.text$mn:00009EF4 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00009EF4                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00009EF4 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00009EF4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Ap
.text$mn:00009EF4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00009EF4
.text$mn:00009EF4 var_4           = dword ptr -4
.text$mn:00009EF4 Dst             = dword ptr  8
.text$mn:00009EF4 Src             = dword ptr  0Ch
.text$mn:00009EF4 Size            = dword ptr  10h
.text$mn:00009EF4
.text$mn:00009EF4                 push    ebp
.text$mn:00009EF5                 mov     ebp, esp
.text$mn:00009EF7                 push    ecx
.text$mn:00009EF8                 cmp     [ebp+Size], 0
.text$mn:00009EFC                 jnz     short loc_9F06
.text$mn:00009EFE                 mov     eax, [ebp+Dst]
.text$mn:00009F01                 mov     [ebp+var_4], eax
.text$mn:00009F04                 jmp     short loc_9F1D
.text$mn:00009F06 ; ---------------------------------------------------------------------------
.text$mn:00009F06
.text$mn:00009F06 loc_9F06:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:00009F06                 mov     ecx, [ebp+Size]
.text$mn:00009F09                 push    ecx             ; Size
.text$mn:00009F0A                 mov     edx, [ebp+Src]
.text$mn:00009F0D                 push    edx             ; Src
.text$mn:00009F0E                 mov     eax, [ebp+Dst]
.text$mn:00009F11                 push    eax             ; Dst
.text$mn:00009F12                 call    _memmove
.text$mn:00009F17                 add     esp, 0Ch
.text$mn:00009F1A                 mov     [ebp+var_4], eax
.text$mn:00009F1D
.text$mn:00009F1D loc_9F1D:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00009F1D                 mov     eax, [ebp+var_4]
.text$mn:00009F20                 mov     esp, ebp
.text$mn:00009F22                 pop     ebp
.text$mn:00009F23                 retn
.text$mn:00009F23 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00009F23
.text$mn:00009F23 _text$mn        ends
.text$mn:00009F23
.text$mn:00009F24 ; ===========================================================================
.text$mn:00009F24
.text$mn:00009F24 ; Segment type: Pure code
.text$mn:00009F24 ; Segment permissions: Read/Execute
.text$mn:00009F24 _text$mn        segment para public 'CODE' use32
.text$mn:00009F24                 assume cs:_text$mn
.text$mn:00009F24                 ;org 9F24h
.text$mn:00009F24 ; COMDAT (pick any)
.text$mn:00009F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F24
.text$mn:00009F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F24
.text$mn:00009F24 ; Attributes: bp-based frame
.text$mn:00009F24
.text$mn:00009F24 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00009F24                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00009F24 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F24                                         ; DATA XREF: .rdata:0000CA9Co
.text$mn:00009F24
.text$mn:00009F24 var_4           = dword ptr -4
.text$mn:00009F24
.text$mn:00009F24                 push    ebp
.text$mn:00009F25                 mov     ebp, esp
.text$mn:00009F27                 push    ecx
.text$mn:00009F28                 mov     [ebp+var_4], ecx
.text$mn:00009F2B                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00009F30                 mov     esp, ebp
.text$mn:00009F32                 pop     ebp
.text$mn:00009F33                 retn
.text$mn:00009F33 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00009F33
.text$mn:00009F33 _text$mn        ends
.text$mn:00009F33
.text$mn:00009F34 ; ===========================================================================
.text$mn:00009F34
.text$mn:00009F34 ; Segment type: Pure code
.text$mn:00009F34 ; Segment permissions: Read/Execute
.text$mn:00009F34 _text$mn        segment para public 'CODE' use32
.text$mn:00009F34                 assume cs:_text$mn
.text$mn:00009F34                 ;org 9F34h
.text$mn:00009F34 ; COMDAT (pick any)
.text$mn:00009F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F34
.text$mn:00009F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F34
.text$mn:00009F34 ; Attributes: bp-based frame
.text$mn:00009F34
.text$mn:00009F34 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00009F34                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00009F34 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F34                                         ; DATA XREF: .rdata:0000CAD0o
.text$mn:00009F34
.text$mn:00009F34 var_4           = dword ptr -4
.text$mn:00009F34
.text$mn:00009F34                 push    ebp
.text$mn:00009F35                 mov     ebp, esp
.text$mn:00009F37                 push    ecx
.text$mn:00009F38                 mov     [ebp+var_4], ecx
.text$mn:00009F3B                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00009F40                 mov     esp, ebp
.text$mn:00009F42                 pop     ebp
.text$mn:00009F43                 retn
.text$mn:00009F43 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00009F43
.text$mn:00009F43 _text$mn        ends
.text$mn:00009F43
.text$mn:00009F44 ; ===========================================================================
.text$mn:00009F44
.text$mn:00009F44 ; Segment type: Pure code
.text$mn:00009F44 ; Segment permissions: Read/Execute
.text$mn:00009F44 _text$mn        segment para public 'CODE' use32
.text$mn:00009F44                 assume cs:_text$mn
.text$mn:00009F44                 ;org 9F44h
.text$mn:00009F44 ; COMDAT (pick any)
.text$mn:00009F44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F44
.text$mn:00009F44 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F44
.text$mn:00009F44 ; Attributes: bp-based frame
.text$mn:00009F44
.text$mn:00009F44 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00009F44                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00009F44 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F44                                         ; DATA XREF: .rdata:0000CB10o
.text$mn:00009F44
.text$mn:00009F44 var_4           = dword ptr -4
.text$mn:00009F44
.text$mn:00009F44                 push    ebp
.text$mn:00009F45                 mov     ebp, esp
.text$mn:00009F47                 push    ecx
.text$mn:00009F48                 mov     [ebp+var_4], ecx
.text$mn:00009F4B                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00009F50                 mov     esp, ebp
.text$mn:00009F52                 pop     ebp
.text$mn:00009F53                 retn
.text$mn:00009F53 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00009F53
.text$mn:00009F53 _text$mn        ends
.text$mn:00009F53
.text$mn:00009F54 ; ===========================================================================
.text$mn:00009F54
.text$mn:00009F54 ; Segment type: Pure code
.text$mn:00009F54 ; Segment permissions: Read/Execute
.text$mn:00009F54 _text$mn        segment para public 'CODE' use32
.text$mn:00009F54                 assume cs:_text$mn
.text$mn:00009F54                 ;org 9F54h
.text$mn:00009F54 ; COMDAT (pick any)
.text$mn:00009F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F54
.text$mn:00009F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F54
.text$mn:00009F54 ; Attributes: bp-based frame
.text$mn:00009F54
.text$mn:00009F54 ; public: static int __cdecl std::char_traits<char>::not_eof(int const &)
.text$mn:00009F54                 public ?not_eof@?$char_traits@D@std@@SAHABH@Z
.text$mn:00009F54 ?not_eof@?$char_traits@D@std@@SAHABH@Z proc near
.text$mn:00009F54                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+45p
.text$mn:00009F54                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+DAp
.text$mn:00009F54
.text$mn:00009F54 var_8           = dword ptr -8
.text$mn:00009F54 var_4           = dword ptr -4
.text$mn:00009F54 arg_0           = dword ptr  8
.text$mn:00009F54
.text$mn:00009F54                 push    ebp
.text$mn:00009F55                 mov     ebp, esp
.text$mn:00009F57                 sub     esp, 8
.text$mn:00009F5A                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00009F5F                 mov     ecx, [ebp+arg_0]
.text$mn:00009F62                 cmp     [ecx], eax
.text$mn:00009F64                 jz      short loc_9F70
.text$mn:00009F66                 mov     edx, [ebp+arg_0]
.text$mn:00009F69                 mov     eax, [edx]
.text$mn:00009F6B                 mov     [ebp+var_8], eax
.text$mn:00009F6E                 jmp     short loc_9F8F
.text$mn:00009F70 ; ---------------------------------------------------------------------------
.text$mn:00009F70
.text$mn:00009F70 loc_9F70:                               ; CODE XREF: std::char_traits<char>::not_eof(int const &)+10j
.text$mn:00009F70                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00009F75                 test    eax, eax
.text$mn:00009F77                 jnz     short loc_9F82
.text$mn:00009F79                 mov     [ebp+var_4], 1
.text$mn:00009F80                 jmp     short loc_9F89
.text$mn:00009F82 ; ---------------------------------------------------------------------------
.text$mn:00009F82
.text$mn:00009F82 loc_9F82:                               ; CODE XREF: std::char_traits<char>::not_eof(int const &)+23j
.text$mn:00009F82                 mov     [ebp+var_4], 0
.text$mn:00009F89
.text$mn:00009F89 loc_9F89:                               ; CODE XREF: std::char_traits<char>::not_eof(int const &)+2Cj
.text$mn:00009F89                 mov     ecx, [ebp+var_4]
.text$mn:00009F8C                 mov     [ebp+var_8], ecx
.text$mn:00009F8F
.text$mn:00009F8F loc_9F8F:                               ; CODE XREF: std::char_traits<char>::not_eof(int const &)+1Aj
.text$mn:00009F8F                 mov     eax, [ebp+var_8]
.text$mn:00009F92                 mov     esp, ebp
.text$mn:00009F94                 pop     ebp
.text$mn:00009F95                 retn
.text$mn:00009F95 ?not_eof@?$char_traits@D@std@@SAHABH@Z endp
.text$mn:00009F95
.text$mn:00009F95 ; ---------------------------------------------------------------------------
.text$mn:00009F96                 align 4
.text$mn:00009F96 _text$mn        ends
.text$mn:00009F96
.text$mn:00009F98 ; ===========================================================================
.text$mn:00009F98
.text$mn:00009F98 ; Segment type: Pure code
.text$mn:00009F98 ; Segment permissions: Read/Execute
.text$mn:00009F98 _text$mn        segment para public 'CODE' use32
.text$mn:00009F98                 assume cs:_text$mn
.text$mn:00009F98                 ;org 9F98h
.text$mn:00009F98 ; COMDAT (pick any)
.text$mn:00009F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F98
.text$mn:00009F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F98
.text$mn:00009F98 ; Attributes: bp-based frame
.text$mn:00009F98
.text$mn:00009F98 ; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::overflow(int)
.text$mn:00009F98                 public ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
.text$mn:00009F98 ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z proc near
.text$mn:00009F98                                         ; DATA XREF: .rdata:0000CCD4o
.text$mn:00009F98
.text$mn:00009F98 var_4           = dword ptr -4
.text$mn:00009F98
.text$mn:00009F98                 push    ebp
.text$mn:00009F99                 mov     ebp, esp
.text$mn:00009F9B                 push    ecx
.text$mn:00009F9C                 mov     [ebp+var_4], ecx
.text$mn:00009F9F                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00009FA4                 mov     esp, ebp
.text$mn:00009FA6                 pop     ebp
.text$mn:00009FA7                 retn    4
.text$mn:00009FA7 ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z endp
.text$mn:00009FA7
.text$mn:00009FA7 ; ---------------------------------------------------------------------------
.text$mn:00009FAA                 align 4
.text$mn:00009FAA _text$mn        ends
.text$mn:00009FAA
.text$mn:00009FAC ; ===========================================================================
.text$mn:00009FAC
.text$mn:00009FAC ; Segment type: Pure code
.text$mn:00009FAC ; Segment permissions: Read/Execute
.text$mn:00009FAC _text$mn        segment para public 'CODE' use32
.text$mn:00009FAC                 assume cs:_text$mn
.text$mn:00009FAC                 ;org 9FACh
.text$mn:00009FAC ; COMDAT (pick any)
.text$mn:00009FAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FAC
.text$mn:00009FAC ; =============== S U B R O U T I N E =======================================
.text$mn:00009FAC
.text$mn:00009FAC ; Attributes: bp-based frame
.text$mn:00009FAC
.text$mn:00009FAC ; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::overflow(int)
.text$mn:00009FAC                 public ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
.text$mn:00009FAC ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
.text$mn:00009FAC                                         ; DATA XREF: .rdata:0000CE34o
.text$mn:00009FAC
.text$mn:00009FAC var_24          = dword ptr -24h
.text$mn:00009FAC var_20          = dword ptr -20h
.text$mn:00009FAC var_1C          = dword ptr -1Ch
.text$mn:00009FAC Size            = dword ptr -18h
.text$mn:00009FAC Src             = dword ptr -14h
.text$mn:00009FAC var_10          = dword ptr -10h
.text$mn:00009FAC var_C           = dword ptr -0Ch
.text$mn:00009FAC Dst             = dword ptr -8
.text$mn:00009FAC var_4           = dword ptr -4
.text$mn:00009FAC arg_0           = dword ptr  8
.text$mn:00009FAC
.text$mn:00009FAC                 push    ebp
.text$mn:00009FAD                 mov     ebp, esp
.text$mn:00009FAF                 sub     esp, 24h
.text$mn:00009FB2                 push    ebx
.text$mn:00009FB3                 push    esi
.text$mn:00009FB4                 mov     [ebp+var_4], ecx
.text$mn:00009FB7                 mov     eax, [ebp+var_4]
.text$mn:00009FBA                 mov     ecx, [eax+3Ch]
.text$mn:00009FBD                 and     ecx, 2
.text$mn:00009FC0                 jz      short loc_9FCE
.text$mn:00009FC2                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00009FC7                 jmp     loc_A27D
.text$mn:00009FCC ; ---------------------------------------------------------------------------
.text$mn:00009FCC                 jmp     short loc_9FFE
.text$mn:00009FCE ; ---------------------------------------------------------------------------
.text$mn:00009FCE
.text$mn:00009FCE loc_9FCE:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+14j
.text$mn:00009FCE                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:00009FD3                 mov     [ebp+var_24], eax
.text$mn:00009FD6                 lea     edx, [ebp+arg_0]
.text$mn:00009FD9                 push    edx
.text$mn:00009FDA                 lea     eax, [ebp+var_24]
.text$mn:00009FDD                 push    eax
.text$mn:00009FDE                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:00009FE3                 add     esp, 8
.text$mn:00009FE6                 movzx   ecx, al
.text$mn:00009FE9                 test    ecx, ecx
.text$mn:00009FEB                 jz      short loc_9FFE
.text$mn:00009FED                 lea     edx, [ebp+arg_0]
.text$mn:00009FF0                 push    edx
.text$mn:00009FF1                 call    ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof(int const &)
.text$mn:00009FF6                 add     esp, 4
.text$mn:00009FF9                 jmp     loc_A27D
.text$mn:00009FFE ; ---------------------------------------------------------------------------
.text$mn:00009FFE
.text$mn:00009FFE loc_9FFE:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+20j
.text$mn:00009FFE                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+3Fj
.text$mn:00009FFE                 mov     eax, [ebp+var_4]
.text$mn:0000A001                 mov     ecx, [eax+3Ch]
.text$mn:0000A004                 and     ecx, 8
.text$mn:0000A007                 jz      short loc_A046
.text$mn:0000A009                 mov     ecx, [ebp+var_4]
.text$mn:0000A00C                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A011                 test    eax, eax
.text$mn:0000A013                 jz      short loc_A046
.text$mn:0000A015                 mov     ecx, [ebp+var_4]
.text$mn:0000A018                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A01D                 mov     edx, [ebp+var_4]
.text$mn:0000A020                 cmp     eax, [edx+38h]
.text$mn:0000A023                 jnb     short loc_A046
.text$mn:0000A025                 mov     ecx, [ebp+var_4]
.text$mn:0000A028                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:0000A02D                 push    eax
.text$mn:0000A02E                 mov     eax, [ebp+var_4]
.text$mn:0000A031                 mov     ecx, [eax+38h]
.text$mn:0000A034                 push    ecx
.text$mn:0000A035                 mov     ecx, [ebp+var_4]
.text$mn:0000A038                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000A03D                 push    eax
.text$mn:0000A03E                 mov     ecx, [ebp+var_4]
.text$mn:0000A041                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
.text$mn:0000A046
.text$mn:0000A046 loc_A046:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+5Bj
.text$mn:0000A046                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+67j ...
.text$mn:0000A046                 mov     ecx, [ebp+var_4]
.text$mn:0000A049                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A04E                 test    eax, eax
.text$mn:0000A050                 jz      short loc_A08D
.text$mn:0000A052                 mov     ecx, [ebp+var_4]
.text$mn:0000A055                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A05A                 mov     esi, eax
.text$mn:0000A05C                 mov     ecx, [ebp+var_4]
.text$mn:0000A05F                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:0000A064                 cmp     esi, eax
.text$mn:0000A066                 jnb     short loc_A08D
.text$mn:0000A068                 lea     edx, [ebp+arg_0]
.text$mn:0000A06B                 push    edx
.text$mn:0000A06C                 call    ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
.text$mn:0000A071                 add     esp, 4
.text$mn:0000A074                 mov     bl, al
.text$mn:0000A076                 mov     ecx, [ebp+var_4]
.text$mn:0000A079                 call    ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
.text$mn:0000A07E                 mov     [eax], bl
.text$mn:0000A080                 mov     eax, [ebp+arg_0]
.text$mn:0000A083                 jmp     loc_A27D
.text$mn:0000A088 ; ---------------------------------------------------------------------------
.text$mn:0000A088                 jmp     loc_A27D
.text$mn:0000A08D ; ---------------------------------------------------------------------------
.text$mn:0000A08D
.text$mn:0000A08D loc_A08D:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+A4j
.text$mn:0000A08D                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+BAj
.text$mn:0000A08D                 mov     ecx, [ebp+var_4]
.text$mn:0000A090                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A095                 test    eax, eax
.text$mn:0000A097                 jnz     short loc_A0A2
.text$mn:0000A099                 mov     [ebp+var_1C], 0
.text$mn:0000A0A0                 jmp     short loc_A0B9
.text$mn:0000A0A2 ; ---------------------------------------------------------------------------
.text$mn:0000A0A2
.text$mn:0000A0A2 loc_A0A2:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+EBj
.text$mn:0000A0A2                 mov     ecx, [ebp+var_4]
.text$mn:0000A0A5                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:0000A0AA                 mov     esi, eax
.text$mn:0000A0AC                 mov     ecx, [ebp+var_4]
.text$mn:0000A0AF                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A0B4                 sub     esi, eax
.text$mn:0000A0B6                 mov     [ebp+var_1C], esi
.text$mn:0000A0B9
.text$mn:0000A0B9 loc_A0B9:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+F4j
.text$mn:0000A0B9                 mov     eax, [ebp+var_1C]
.text$mn:0000A0BC                 mov     [ebp+Size], eax
.text$mn:0000A0BF                 mov     ecx, [ebp+Size]
.text$mn:0000A0C2                 mov     [ebp+var_C], ecx
.text$mn:0000A0C5                 mov     edx, [ebp+var_C]
.text$mn:0000A0C8                 shr     edx, 1
.text$mn:0000A0CA                 cmp     edx, 20h ; ' '
.text$mn:0000A0CD                 jnb     short loc_A0D8
.text$mn:0000A0CF                 mov     [ebp+var_20], 20h ; ' '
.text$mn:0000A0D6                 jmp     short loc_A0E0
.text$mn:0000A0D8 ; ---------------------------------------------------------------------------
.text$mn:0000A0D8
.text$mn:0000A0D8 loc_A0D8:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+121j
.text$mn:0000A0D8                 mov     eax, [ebp+var_C]
.text$mn:0000A0DB                 shr     eax, 1
.text$mn:0000A0DD                 mov     [ebp+var_20], eax
.text$mn:0000A0E0
.text$mn:0000A0E0 loc_A0E0:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+12Aj
.text$mn:0000A0E0                 mov     ecx, [ebp+var_20]
.text$mn:0000A0E3                 mov     [ebp+var_10], ecx
.text$mn:0000A0E6
.text$mn:0000A0E6 loc_A0E6:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+155j
.text$mn:0000A0E6                 cmp     [ebp+var_10], 0
.text$mn:0000A0EA                 jbe     short loc_A103
.text$mn:0000A0EC                 mov     edx, 7FFFFFFFh
.text$mn:0000A0F1                 sub     edx, [ebp+var_10]
.text$mn:0000A0F4                 cmp     edx, [ebp+var_C]
.text$mn:0000A0F7                 jnb     short loc_A103
.text$mn:0000A0F9                 mov     eax, [ebp+var_10]
.text$mn:0000A0FC                 shr     eax, 1
.text$mn:0000A0FE                 mov     [ebp+var_10], eax
.text$mn:0000A101                 jmp     short loc_A0E6
.text$mn:0000A103 ; ---------------------------------------------------------------------------
.text$mn:0000A103
.text$mn:0000A103 loc_A103:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+13Ej
.text$mn:0000A103                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+14Bj
.text$mn:0000A103                 cmp     [ebp+var_10], 0
.text$mn:0000A107                 jnz     short loc_A113
.text$mn:0000A109                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000A10E                 jmp     loc_A27D
.text$mn:0000A113 ; ---------------------------------------------------------------------------
.text$mn:0000A113
.text$mn:0000A113 loc_A113:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+15Bj
.text$mn:0000A113                 mov     ecx, [ebp+var_C]
.text$mn:0000A116                 add     ecx, [ebp+var_10]
.text$mn:0000A119                 mov     [ebp+var_C], ecx
.text$mn:0000A11C                 mov     edx, [ebp+var_C]
.text$mn:0000A11F                 push    edx
.text$mn:0000A120                 mov     ecx, [ebp+var_4]
.text$mn:0000A123                 add     ecx, 40h ; '@'
.text$mn:0000A126                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000A12B                 mov     [ebp+Dst], eax
.text$mn:0000A12E                 mov     ecx, [ebp+var_4]
.text$mn:0000A131                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A136                 mov     [ebp+Src], eax
.text$mn:0000A139                 cmp     [ebp+Size], 0
.text$mn:0000A13D                 jbe     short loc_A153
.text$mn:0000A13F                 mov     eax, [ebp+Size]
.text$mn:0000A142                 push    eax             ; Size
.text$mn:0000A143                 mov     ecx, [ebp+Src]
.text$mn:0000A146                 push    ecx             ; Src
.text$mn:0000A147                 mov     edx, [ebp+Dst]
.text$mn:0000A14A                 push    edx             ; Dst
.text$mn:0000A14B                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000A150                 add     esp, 0Ch
.text$mn:0000A153
.text$mn:0000A153 loc_A153:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+191j
.text$mn:0000A153                 cmp     [ebp+Size], 0
.text$mn:0000A157                 jnz     short loc_A1B0
.text$mn:0000A159                 mov     eax, [ebp+var_4]
.text$mn:0000A15C                 mov     ecx, [ebp+Dst]
.text$mn:0000A15F                 mov     [eax+38h], ecx
.text$mn:0000A162                 mov     edx, [ebp+Dst]
.text$mn:0000A165                 add     edx, [ebp+var_C]
.text$mn:0000A168                 push    edx
.text$mn:0000A169                 mov     eax, [ebp+Dst]
.text$mn:0000A16C                 push    eax
.text$mn:0000A16D                 mov     ecx, [ebp+var_4]
.text$mn:0000A170                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *)
.text$mn:0000A175                 mov     ecx, [ebp+var_4]
.text$mn:0000A178                 mov     edx, [ecx+3Ch]
.text$mn:0000A17B                 and     edx, 4
.text$mn:0000A17E                 jz      short loc_A194
.text$mn:0000A180                 mov     eax, [ebp+Dst]
.text$mn:0000A183                 push    eax
.text$mn:0000A184                 push    0
.text$mn:0000A186                 mov     ecx, [ebp+Dst]
.text$mn:0000A189                 push    ecx
.text$mn:0000A18A                 mov     ecx, [ebp+var_4]
.text$mn:0000A18D                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:0000A192                 jmp     short loc_A1AB
.text$mn:0000A194 ; ---------------------------------------------------------------------------
.text$mn:0000A194
.text$mn:0000A194 loc_A194:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1D2j
.text$mn:0000A194                 mov     edx, [ebp+Dst]
.text$mn:0000A197                 add     edx, 1
.text$mn:0000A19A                 push    edx
.text$mn:0000A19B                 mov     eax, [ebp+Dst]
.text$mn:0000A19E                 push    eax
.text$mn:0000A19F                 mov     ecx, [ebp+Dst]
.text$mn:0000A1A2                 push    ecx
.text$mn:0000A1A3                 mov     ecx, [ebp+var_4]
.text$mn:0000A1A6                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:0000A1AB
.text$mn:0000A1AB loc_A1AB:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1E6j
.text$mn:0000A1AB                 jmp     loc_A235
.text$mn:0000A1B0 ; ---------------------------------------------------------------------------
.text$mn:0000A1B0
.text$mn:0000A1B0 loc_A1B0:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1ABj
.text$mn:0000A1B0                 mov     edx, [ebp+var_4]
.text$mn:0000A1B3                 mov     eax, [edx+38h]
.text$mn:0000A1B6                 sub     eax, [ebp+Src]
.text$mn:0000A1B9                 add     eax, [ebp+Dst]
.text$mn:0000A1BC                 mov     ecx, [ebp+var_4]
.text$mn:0000A1BF                 mov     [ecx+38h], eax
.text$mn:0000A1C2                 mov     edx, [ebp+Dst]
.text$mn:0000A1C5                 add     edx, [ebp+var_C]
.text$mn:0000A1C8                 push    edx
.text$mn:0000A1C9                 mov     ecx, [ebp+var_4]
.text$mn:0000A1CC                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A1D1                 sub     eax, [ebp+Src]
.text$mn:0000A1D4                 add     eax, [ebp+Dst]
.text$mn:0000A1D7                 push    eax
.text$mn:0000A1D8                 mov     ecx, [ebp+var_4]
.text$mn:0000A1DB                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000A1E0                 sub     eax, [ebp+Src]
.text$mn:0000A1E3                 add     eax, [ebp+Dst]
.text$mn:0000A1E6                 push    eax
.text$mn:0000A1E7                 mov     ecx, [ebp+var_4]
.text$mn:0000A1EA                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
.text$mn:0000A1EF                 mov     eax, [ebp+var_4]
.text$mn:0000A1F2                 mov     ecx, [eax+3Ch]
.text$mn:0000A1F5                 and     ecx, 4
.text$mn:0000A1F8                 jz      short loc_A20E
.text$mn:0000A1FA                 mov     edx, [ebp+Dst]
.text$mn:0000A1FD                 push    edx
.text$mn:0000A1FE                 push    0
.text$mn:0000A200                 mov     eax, [ebp+Dst]
.text$mn:0000A203                 push    eax
.text$mn:0000A204                 mov     ecx, [ebp+var_4]
.text$mn:0000A207                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:0000A20C                 jmp     short loc_A235
.text$mn:0000A20E ; ---------------------------------------------------------------------------
.text$mn:0000A20E
.text$mn:0000A20E loc_A20E:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+24Cj
.text$mn:0000A20E                 mov     ecx, [ebp+var_4]
.text$mn:0000A211                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A216                 add     eax, 1
.text$mn:0000A219                 push    eax
.text$mn:0000A21A                 mov     ecx, [ebp+var_4]
.text$mn:0000A21D                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A222                 sub     eax, [ebp+Src]
.text$mn:0000A225                 add     eax, [ebp+Dst]
.text$mn:0000A228                 push    eax
.text$mn:0000A229                 mov     ecx, [ebp+Dst]
.text$mn:0000A22C                 push    ecx
.text$mn:0000A22D                 mov     ecx, [ebp+var_4]
.text$mn:0000A230                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:0000A235
.text$mn:0000A235 loc_A235:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int):loc_A1ABj
.text$mn:0000A235                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+260j
.text$mn:0000A235                 mov     edx, [ebp+var_4]
.text$mn:0000A238                 mov     eax, [edx+3Ch]
.text$mn:0000A23B                 and     eax, 1
.text$mn:0000A23E                 jz      short loc_A253
.text$mn:0000A240                 mov     ecx, [ebp+Size]
.text$mn:0000A243                 push    ecx             ; int
.text$mn:0000A244                 mov     edx, [ebp+Src]
.text$mn:0000A247                 push    edx             ; void *
.text$mn:0000A248                 mov     ecx, [ebp+var_4]
.text$mn:0000A24B                 add     ecx, 40h ; '@'
.text$mn:0000A24E                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000A253
.text$mn:0000A253 loc_A253:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+292j
.text$mn:0000A253                 mov     eax, [ebp+var_4]
.text$mn:0000A256                 mov     ecx, [eax+3Ch]
.text$mn:0000A259                 or      ecx, 1
.text$mn:0000A25C                 mov     edx, [ebp+var_4]
.text$mn:0000A25F                 mov     [edx+3Ch], ecx
.text$mn:0000A262                 lea     eax, [ebp+arg_0]
.text$mn:0000A265                 push    eax
.text$mn:0000A266                 call    ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
.text$mn:0000A26B                 add     esp, 4
.text$mn:0000A26E                 mov     bl, al
.text$mn:0000A270                 mov     ecx, [ebp+var_4]
.text$mn:0000A273                 call    ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
.text$mn:0000A278                 mov     [eax], bl
.text$mn:0000A27A                 mov     eax, [ebp+arg_0]
.text$mn:0000A27D
.text$mn:0000A27D loc_A27D:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+1Bj
.text$mn:0000A27D                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+4Dj ...
.text$mn:0000A27D                 pop     esi
.text$mn:0000A27E                 pop     ebx
.text$mn:0000A27F                 mov     esp, ebp
.text$mn:0000A281                 pop     ebp
.text$mn:0000A282                 retn    4
.text$mn:0000A282 ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z endp
.text$mn:0000A282
.text$mn:0000A282 ; ---------------------------------------------------------------------------
.text$mn:0000A285                 align 4
.text$mn:0000A285 _text$mn        ends
.text$mn:0000A285
.text$mn:0000A288 ; ===========================================================================
.text$mn:0000A288
.text$mn:0000A288 ; Segment type: Pure code
.text$mn:0000A288 ; Segment permissions: Read/Execute
.text$mn:0000A288 _text$mn        segment para public 'CODE' use32
.text$mn:0000A288                 assume cs:_text$mn
.text$mn:0000A288                 ;org 0A288h
.text$mn:0000A288 ; COMDAT (pick any)
.text$mn:0000A288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A288
.text$mn:0000A288 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A288
.text$mn:0000A288 ; Attributes: bp-based frame
.text$mn:0000A288
.text$mn:0000A288 ; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pbackfail(int)
.text$mn:0000A288                 public ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
.text$mn:0000A288 ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z proc near
.text$mn:0000A288                                         ; DATA XREF: .rdata:0000CCD8o
.text$mn:0000A288
.text$mn:0000A288 var_4           = dword ptr -4
.text$mn:0000A288
.text$mn:0000A288                 push    ebp
.text$mn:0000A289                 mov     ebp, esp
.text$mn:0000A28B                 push    ecx
.text$mn:0000A28C                 mov     [ebp+var_4], ecx
.text$mn:0000A28F                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000A294                 mov     esp, ebp
.text$mn:0000A296                 pop     ebp
.text$mn:0000A297                 retn    4
.text$mn:0000A297 ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z endp
.text$mn:0000A297
.text$mn:0000A297 ; ---------------------------------------------------------------------------
.text$mn:0000A29A                 align 4
.text$mn:0000A29A _text$mn        ends
.text$mn:0000A29A
.text$mn:0000A29C ; ===========================================================================
.text$mn:0000A29C
.text$mn:0000A29C ; Segment type: Pure code
.text$mn:0000A29C ; Segment permissions: Read/Execute
.text$mn:0000A29C _text$mn        segment para public 'CODE' use32
.text$mn:0000A29C                 assume cs:_text$mn
.text$mn:0000A29C                 ;org 0A29Ch
.text$mn:0000A29C ; COMDAT (pick any)
.text$mn:0000A29C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A29C
.text$mn:0000A29C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A29C
.text$mn:0000A29C ; Attributes: bp-based frame
.text$mn:0000A29C
.text$mn:0000A29C ; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::pbackfail(int)
.text$mn:0000A29C                 public ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
.text$mn:0000A29C ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
.text$mn:0000A29C                                         ; DATA XREF: .rdata:0000CE38o
.text$mn:0000A29C
.text$mn:0000A29C var_10          = dword ptr -10h
.text$mn:0000A29C var_C           = dword ptr -0Ch
.text$mn:0000A29C var_8           = dword ptr -8
.text$mn:0000A29C var_1           = byte ptr -1
.text$mn:0000A29C arg_0           = byte ptr  8
.text$mn:0000A29C
.text$mn:0000A29C                 push    ebp
.text$mn:0000A29D                 mov     ebp, esp
.text$mn:0000A29F                 sub     esp, 10h
.text$mn:0000A2A2                 push    ebx
.text$mn:0000A2A3                 push    esi
.text$mn:0000A2A4                 mov     [ebp+var_8], ecx
.text$mn:0000A2A7                 mov     ecx, [ebp+var_8]
.text$mn:0000A2AA                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A2AF                 test    eax, eax
.text$mn:0000A2B1                 jz      short loc_A328
.text$mn:0000A2B3                 mov     ecx, [ebp+var_8]
.text$mn:0000A2B6                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A2BB                 mov     esi, eax
.text$mn:0000A2BD                 mov     ecx, [ebp+var_8]
.text$mn:0000A2C0                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A2C5                 cmp     esi, eax
.text$mn:0000A2C7                 jbe     short loc_A328
.text$mn:0000A2C9                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000A2CE                 mov     [ebp+var_C], eax
.text$mn:0000A2D1                 lea     eax, [ebp+arg_0]
.text$mn:0000A2D4                 push    eax
.text$mn:0000A2D5                 lea     ecx, [ebp+var_C]
.text$mn:0000A2D8                 push    ecx
.text$mn:0000A2D9                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:0000A2DE                 add     esp, 8
.text$mn:0000A2E1                 movzx   edx, al
.text$mn:0000A2E4                 test    edx, edx
.text$mn:0000A2E6                 jnz     short loc_A331
.text$mn:0000A2E8                 lea     eax, [ebp+arg_0]
.text$mn:0000A2EB                 push    eax
.text$mn:0000A2EC                 call    ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
.text$mn:0000A2F1                 add     esp, 4
.text$mn:0000A2F4                 mov     [ebp+var_1], al
.text$mn:0000A2F7                 mov     ecx, [ebp+var_8]
.text$mn:0000A2FA                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A2FF                 mov     ecx, 1
.text$mn:0000A304                 imul    edx, ecx, -1
.text$mn:0000A307                 add     eax, edx
.text$mn:0000A309                 push    eax
.text$mn:0000A30A                 lea     eax, [ebp+var_1]
.text$mn:0000A30D                 push    eax
.text$mn:0000A30E                 call    ?eq@?$char_traits@D@std@@SA_NABD0@Z ; std::char_traits<char>::eq(char const &,char const &)
.text$mn:0000A313                 add     esp, 8
.text$mn:0000A316                 movzx   ecx, al
.text$mn:0000A319                 test    ecx, ecx
.text$mn:0000A31B                 jnz     short loc_A331
.text$mn:0000A31D                 mov     edx, [ebp+var_8]
.text$mn:0000A320                 mov     eax, [edx+3Ch]
.text$mn:0000A323                 and     eax, 2
.text$mn:0000A326                 jz      short loc_A331
.text$mn:0000A328
.text$mn:0000A328 loc_A328:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+15j
.text$mn:0000A328                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+2Bj
.text$mn:0000A328                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000A32D                 jmp     short loc_A37E
.text$mn:0000A32F ; ---------------------------------------------------------------------------
.text$mn:0000A32F                 jmp     short loc_A37E
.text$mn:0000A331 ; ---------------------------------------------------------------------------
.text$mn:0000A331
.text$mn:0000A331 loc_A331:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+4Aj
.text$mn:0000A331                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+7Fj ...
.text$mn:0000A331                 push    0FFFFFFFFh
.text$mn:0000A333                 mov     ecx, [ebp+var_8]
.text$mn:0000A336                 call    ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
.text$mn:0000A33B                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000A340                 mov     [ebp+var_10], eax
.text$mn:0000A343                 lea     ecx, [ebp+arg_0]
.text$mn:0000A346                 push    ecx
.text$mn:0000A347                 lea     edx, [ebp+var_10]
.text$mn:0000A34A                 push    edx
.text$mn:0000A34B                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:0000A350                 add     esp, 8
.text$mn:0000A353                 movzx   eax, al
.text$mn:0000A356                 test    eax, eax
.text$mn:0000A358                 jnz     short loc_A372
.text$mn:0000A35A                 lea     ecx, [ebp+arg_0]
.text$mn:0000A35D                 push    ecx
.text$mn:0000A35E                 call    ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
.text$mn:0000A363                 add     esp, 4
.text$mn:0000A366                 mov     bl, al
.text$mn:0000A368                 mov     ecx, [ebp+var_8]
.text$mn:0000A36B                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A370                 mov     [eax], bl
.text$mn:0000A372
.text$mn:0000A372 loc_A372:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+BCj
.text$mn:0000A372                 lea     edx, [ebp+arg_0]
.text$mn:0000A375                 push    edx
.text$mn:0000A376                 call    ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof(int const &)
.text$mn:0000A37B                 add     esp, 4
.text$mn:0000A37E
.text$mn:0000A37E loc_A37E:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+91j
.text$mn:0000A37E                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)+93j
.text$mn:0000A37E                 pop     esi
.text$mn:0000A37F                 pop     ebx
.text$mn:0000A380                 mov     esp, ebp
.text$mn:0000A382                 pop     ebp
.text$mn:0000A383                 retn    4
.text$mn:0000A383 ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z endp
.text$mn:0000A383
.text$mn:0000A383 ; ---------------------------------------------------------------------------
.text$mn:0000A386                 align 4
.text$mn:0000A386 _text$mn        ends
.text$mn:0000A386
.text$mn:0000A388 ; ===========================================================================
.text$mn:0000A388
.text$mn:0000A388 ; Segment type: Pure code
.text$mn:0000A388 ; Segment permissions: Read/Execute
.text$mn:0000A388 _text$mn        segment para public 'CODE' use32
.text$mn:0000A388                 assume cs:_text$mn
.text$mn:0000A388                 ;org 0A388h
.text$mn:0000A388 ; COMDAT (pick any)
.text$mn:0000A388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A388
.text$mn:0000A388 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A388
.text$mn:0000A388 ; Attributes: bp-based frame
.text$mn:0000A388
.text$mn:0000A388 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pbase(void)const
.text$mn:0000A388                 public ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:0000A388 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:0000A388                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+8Cp
.text$mn:0000A388                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+22Fp ...
.text$mn:0000A388
.text$mn:0000A388 var_4           = dword ptr -4
.text$mn:0000A388
.text$mn:0000A388                 push    ebp
.text$mn:0000A389                 mov     ebp, esp
.text$mn:0000A38B                 push    ecx
.text$mn:0000A38C                 mov     [ebp+var_4], ecx
.text$mn:0000A38F                 mov     eax, [ebp+var_4]
.text$mn:0000A392                 mov     ecx, [eax+10h]
.text$mn:0000A395                 mov     eax, [ecx]
.text$mn:0000A397                 mov     esp, ebp
.text$mn:0000A399                 pop     ebp
.text$mn:0000A39A                 retn
.text$mn:0000A39A ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:0000A39A
.text$mn:0000A39A ; ---------------------------------------------------------------------------
.text$mn:0000A39B                 align 4
.text$mn:0000A39B _text$mn        ends
.text$mn:0000A39B
.text$mn:0000A39C ; ===========================================================================
.text$mn:0000A39C
.text$mn:0000A39C ; Segment type: Pure code
.text$mn:0000A39C ; Segment permissions: Read/Execute
.text$mn:0000A39C _text$mn        segment para public 'CODE' use32
.text$mn:0000A39C                 assume cs:_text$mn
.text$mn:0000A39C                 ;org 0A39Ch
.text$mn:0000A39C ; COMDAT (pick any)
.text$mn:0000A39C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A39C
.text$mn:0000A39C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A39C
.text$mn:0000A39C ; Attributes: bp-based frame
.text$mn:0000A39C
.text$mn:0000A39C ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pbump(int)
.text$mn:0000A39C                 public ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
.text$mn:0000A39C ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z proc near
.text$mn:0000A39C                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+257p
.text$mn:0000A39C                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+1A1p ...
.text$mn:0000A39C
.text$mn:0000A39C var_4           = dword ptr -4
.text$mn:0000A39C arg_0           = dword ptr  8
.text$mn:0000A39C
.text$mn:0000A39C                 push    ebp
.text$mn:0000A39D                 mov     ebp, esp
.text$mn:0000A39F                 push    ecx
.text$mn:0000A3A0                 mov     [ebp+var_4], ecx
.text$mn:0000A3A3                 mov     eax, [ebp+var_4]
.text$mn:0000A3A6                 mov     ecx, [eax+30h]
.text$mn:0000A3A9                 mov     edx, [ecx]
.text$mn:0000A3AB                 sub     edx, [ebp+arg_0]
.text$mn:0000A3AE                 mov     eax, [ebp+var_4]
.text$mn:0000A3B1                 mov     ecx, [eax+30h]
.text$mn:0000A3B4                 mov     [ecx], edx
.text$mn:0000A3B6                 mov     edx, [ebp+var_4]
.text$mn:0000A3B9                 mov     eax, [edx+20h]
.text$mn:0000A3BC                 mov     ecx, [eax]
.text$mn:0000A3BE                 add     ecx, [ebp+arg_0]
.text$mn:0000A3C1                 mov     edx, [ebp+var_4]
.text$mn:0000A3C4                 mov     eax, [edx+20h]
.text$mn:0000A3C7                 mov     [eax], ecx
.text$mn:0000A3C9                 mov     esp, ebp
.text$mn:0000A3CB                 pop     ebp
.text$mn:0000A3CC                 retn    4
.text$mn:0000A3CC ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z endp
.text$mn:0000A3CC
.text$mn:0000A3CC ; ---------------------------------------------------------------------------
.text$mn:0000A3CF                 align 10h
.text$mn:0000A3CF _text$mn        ends
.text$mn:0000A3CF
.text$mn:0000A3D0 ; ===========================================================================
.text$mn:0000A3D0
.text$mn:0000A3D0 ; Segment type: Pure code
.text$mn:0000A3D0 ; Segment permissions: Read/Execute
.text$mn:0000A3D0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A3D0                 assume cs:_text$mn
.text$mn:0000A3D0                 ;org 0A3D0h
.text$mn:0000A3D0 ; COMDAT (pick any)
.text$mn:0000A3D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3D0
.text$mn:0000A3D0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3D0
.text$mn:0000A3D0 ; Attributes: bp-based frame
.text$mn:0000A3D0
.text$mn:0000A3D0 ; protected: char * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pptr(void)const
.text$mn:0000A3D0                 public ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
.text$mn:0000A3D0 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ proc near
.text$mn:0000A3D0                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+17p
.text$mn:0000A3D0                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+60p ...
.text$mn:0000A3D0
.text$mn:0000A3D0 var_4           = dword ptr -4
.text$mn:0000A3D0
.text$mn:0000A3D0                 push    ebp
.text$mn:0000A3D1                 mov     ebp, esp
.text$mn:0000A3D3                 push    ecx
.text$mn:0000A3D4                 mov     [ebp+var_4], ecx
.text$mn:0000A3D7                 mov     eax, [ebp+var_4]
.text$mn:0000A3DA                 mov     ecx, [eax+20h]
.text$mn:0000A3DD                 mov     eax, [ecx]
.text$mn:0000A3DF                 mov     esp, ebp
.text$mn:0000A3E1                 pop     ebp
.text$mn:0000A3E2                 retn
.text$mn:0000A3E2 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ endp
.text$mn:0000A3E2
.text$mn:0000A3E2 ; ---------------------------------------------------------------------------
.text$mn:0000A3E3                 align 4
.text$mn:0000A3E3 _text$mn        ends
.text$mn:0000A3E3
.text$mn:0000A3E4 ; ===========================================================================
.text$mn:0000A3E4
.text$mn:0000A3E4 ; Segment type: Pure code
.text$mn:0000A3E4 ; Segment permissions: Read/Execute
.text$mn:0000A3E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A3E4                 assume cs:_text$mn
.text$mn:0000A3E4                 ;org 0A3E4h
.text$mn:0000A3E4 ; COMDAT (pick any)
.text$mn:0000A3E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3E4
.text$mn:0000A3E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3E4
.text$mn:0000A3E4 ; Attributes: bp-based frame
.text$mn:0000A3E4
.text$mn:0000A3E4 ; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::pubsync(void)
.text$mn:0000A3E4                 public ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
.text$mn:0000A3E4 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ proc near
.text$mn:0000A3E4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::_Osfx(void)+76p
.text$mn:0000A3E4                                         ; std::basic_ostream<char,std::char_traits<char>>::flush(void)+72p
.text$mn:0000A3E4
.text$mn:0000A3E4 var_4           = dword ptr -4
.text$mn:0000A3E4
.text$mn:0000A3E4                 push    ebp
.text$mn:0000A3E5                 mov     ebp, esp
.text$mn:0000A3E7                 push    ecx
.text$mn:0000A3E8                 mov     [ebp+var_4], ecx
.text$mn:0000A3EB                 mov     eax, [ebp+var_4]
.text$mn:0000A3EE                 mov     edx, [eax]
.text$mn:0000A3F0                 mov     ecx, [ebp+var_4]
.text$mn:0000A3F3                 mov     eax, [edx+34h]
.text$mn:0000A3F6                 call    eax
.text$mn:0000A3F8                 mov     esp, ebp
.text$mn:0000A3FA                 pop     ebp
.text$mn:0000A3FB                 retn
.text$mn:0000A3FB ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ endp
.text$mn:0000A3FB
.text$mn:0000A3FB _text$mn        ends
.text$mn:0000A3FB
.text$mn:0000A3FC ; ===========================================================================
.text$mn:0000A3FC
.text$mn:0000A3FC ; Segment type: Pure code
.text$mn:0000A3FC ; Segment permissions: Read/Execute
.text$mn:0000A3FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A3FC                 assume cs:_text$mn
.text$mn:0000A3FC                 ;org 0A3FCh
.text$mn:0000A3FC ; COMDAT (pick any)
.text$mn:0000A3FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3FC
.text$mn:0000A3FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3FC
.text$mn:0000A3FC ; Attributes: bp-based frame
.text$mn:0000A3FC
.text$mn:0000A3FC ; public: class std::basic_streambuf<char, struct std::char_traits<char>> * __thiscall std::basic_ios<char, struct std::char_traits<char>>::rdbuf(void)const
.text$mn:0000A3FC                 public ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
.text$mn:0000A3FC ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ proc near
.text$mn:0000A3FC                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+120p
.text$mn:0000A3FC                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+17Ep ...
.text$mn:0000A3FC
.text$mn:0000A3FC var_4           = dword ptr -4
.text$mn:0000A3FC
.text$mn:0000A3FC                 push    ebp
.text$mn:0000A3FD                 mov     ebp, esp
.text$mn:0000A3FF                 push    ecx
.text$mn:0000A400                 mov     [ebp+var_4], ecx
.text$mn:0000A403                 mov     eax, [ebp+var_4]
.text$mn:0000A406                 mov     eax, [eax+38h]
.text$mn:0000A409                 mov     esp, ebp
.text$mn:0000A40B                 pop     ebp
.text$mn:0000A40C                 retn
.text$mn:0000A40C ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ endp
.text$mn:0000A40C
.text$mn:0000A40C ; ---------------------------------------------------------------------------
.text$mn:0000A40D                 align 10h
.text$mn:0000A40D _text$mn        ends
.text$mn:0000A40D
.text$mn:0000A410 ; ===========================================================================
.text$mn:0000A410
.text$mn:0000A410 ; Segment type: Pure code
.text$mn:0000A410 ; Segment permissions: Read/Execute
.text$mn:0000A410 _text$mn        segment para public 'CODE' use32
.text$mn:0000A410                 assume cs:_text$mn
.text$mn:0000A410                 ;org 0A410h
.text$mn:0000A410 ; COMDAT (pick any)
.text$mn:0000A410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A410
.text$mn:0000A410 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A410
.text$mn:0000A410 ; Attributes: bp-based frame
.text$mn:0000A410
.text$mn:0000A410 ; int __thiscall std::ios_base::rdstate(std::ios_base *__hidden this)
.text$mn:0000A410                 public ?rdstate@ios_base@std@@QBEHXZ
.text$mn:0000A410 ?rdstate@ios_base@std@@QBEHXZ proc near ; CODE XREF: std::ios_base::good(void)+Cp
.text$mn:0000A410                                         ; std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)+15p
.text$mn:0000A410
.text$mn:0000A410 var_4           = dword ptr -4
.text$mn:0000A410
.text$mn:0000A410                 push    ebp
.text$mn:0000A411                 mov     ebp, esp
.text$mn:0000A413                 push    ecx
.text$mn:0000A414                 mov     [ebp+var_4], ecx
.text$mn:0000A417                 mov     eax, [ebp+var_4]
.text$mn:0000A41A                 mov     eax, [eax+0Ch]
.text$mn:0000A41D                 mov     esp, ebp
.text$mn:0000A41F                 pop     ebp
.text$mn:0000A420                 retn
.text$mn:0000A420 ?rdstate@ios_base@std@@QBEHXZ endp
.text$mn:0000A420
.text$mn:0000A420 ; ---------------------------------------------------------------------------
.text$mn:0000A421                 align 4
.text$mn:0000A421 _text$mn        ends
.text$mn:0000A421
.text$mn:0000A424 ; ===========================================================================
.text$mn:0000A424
.text$mn:0000A424 ; Segment type: Pure code
.text$mn:0000A424 ; Segment permissions: Read/Execute
.text$mn:0000A424 _text$mn        segment para public 'CODE' use32
.text$mn:0000A424                 assume cs:_text$mn
.text$mn:0000A424                 ;org 0A424h
.text$mn:0000A424 ; COMDAT (pick any)
.text$mn:0000A424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A424
.text$mn:0000A424 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A424
.text$mn:0000A424 ; Attributes: bp-based frame
.text$mn:0000A424
.text$mn:0000A424 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::reserve(unsigned int)
.text$mn:0000A424                 public ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:0000A424 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:0000A424                                         ; CODE XREF: operator>>(std::basic_istream<char,std::char_traits<char>> &,TiXmlNodeA &)+3Fp
.text$mn:0000A424                                         ; TiXmlDocumentA::LoadFile(char const *)+10Ep ...
.text$mn:0000A424
.text$mn:0000A424 var_8           = dword ptr -8
.text$mn:0000A424 var_4           = dword ptr -4
.text$mn:0000A424 arg_0           = dword ptr  8
.text$mn:0000A424
.text$mn:0000A424                 push    ebp
.text$mn:0000A425                 mov     ebp, esp
.text$mn:0000A427                 sub     esp, 8
.text$mn:0000A42A                 mov     [ebp+var_4], ecx
.text$mn:0000A42D                 mov     eax, [ebp+var_4]
.text$mn:0000A430                 mov     ecx, [eax+14h]
.text$mn:0000A433                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A436                 ja      short loc_A46D
.text$mn:0000A438                 mov     edx, [ebp+var_4]
.text$mn:0000A43B                 mov     eax, [edx+18h]
.text$mn:0000A43E                 cmp     eax, [ebp+arg_0]
.text$mn:0000A441                 jz      short loc_A46D
.text$mn:0000A443                 mov     ecx, [ebp+var_4]
.text$mn:0000A446                 mov     edx, [ecx+14h]
.text$mn:0000A449                 mov     [ebp+var_8], edx
.text$mn:0000A44C                 push    1
.text$mn:0000A44E                 mov     eax, [ebp+arg_0]
.text$mn:0000A451                 push    eax
.text$mn:0000A452                 mov     ecx, [ebp+var_4]
.text$mn:0000A455                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000A45A                 movzx   ecx, al
.text$mn:0000A45D                 test    ecx, ecx
.text$mn:0000A45F                 jz      short loc_A46D
.text$mn:0000A461                 mov     edx, [ebp+var_8]
.text$mn:0000A464                 push    edx
.text$mn:0000A465                 mov     ecx, [ebp+var_4]
.text$mn:0000A468                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A46D
.text$mn:0000A46D loc_A46D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)+12j
.text$mn:0000A46D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)+1Dj ...
.text$mn:0000A46D                 mov     esp, ebp
.text$mn:0000A46F                 pop     ebp
.text$mn:0000A470                 retn    4
.text$mn:0000A470 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:0000A470
.text$mn:0000A470 ; ---------------------------------------------------------------------------
.text$mn:0000A473                 align 4
.text$mn:0000A473 _text$mn        ends
.text$mn:0000A473
.text$mn:0000A474 ; ===========================================================================
.text$mn:0000A474
.text$mn:0000A474 ; Segment type: Pure code
.text$mn:0000A474 ; Segment permissions: Read/Execute
.text$mn:0000A474 _text$mn        segment para public 'CODE' use32
.text$mn:0000A474                 assume cs:_text$mn
.text$mn:0000A474                 ;org 0A474h
.text$mn:0000A474 ; COMDAT (pick any)
.text$mn:0000A474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A474
.text$mn:0000A474 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A474
.text$mn:0000A474 ; Attributes: bp-based frame
.text$mn:0000A474
.text$mn:0000A474 ; protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::seekoff(__int64, int, int)
.text$mn:0000A474                 public ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
.text$mn:0000A474 ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
.text$mn:0000A474                                         ; DATA XREF: .rdata:0000CCF0o
.text$mn:0000A474
.text$mn:0000A474 var_4           = dword ptr -4
.text$mn:0000A474 arg_0           = dword ptr  8
.text$mn:0000A474
.text$mn:0000A474                 push    ebp
.text$mn:0000A475                 mov     ebp, esp
.text$mn:0000A477                 push    ecx
.text$mn:0000A478                 mov     [ebp+var_4], ecx
.text$mn:0000A47B                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A480                 push    eax
.text$mn:0000A481                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A487                 push    ecx
.text$mn:0000A488                 mov     ecx, [ebp+arg_0]
.text$mn:0000A48B                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000A490                 mov     eax, [ebp+arg_0]
.text$mn:0000A493                 mov     esp, ebp
.text$mn:0000A495                 pop     ebp
.text$mn:0000A496                 retn    14h
.text$mn:0000A496 ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z endp
.text$mn:0000A496
.text$mn:0000A496 ; ---------------------------------------------------------------------------
.text$mn:0000A499                 align 4
.text$mn:0000A499 _text$mn        ends
.text$mn:0000A499
.text$mn:0000A49C ; ===========================================================================
.text$mn:0000A49C
.text$mn:0000A49C ; Segment type: Pure code
.text$mn:0000A49C ; Segment permissions: Read/Execute
.text$mn:0000A49C _text$mn        segment para public 'CODE' use32
.text$mn:0000A49C                 assume cs:_text$mn
.text$mn:0000A49C                 ;org 0A49Ch
.text$mn:0000A49C ; COMDAT (pick any)
.text$mn:0000A49C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A49C
.text$mn:0000A49C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A49C
.text$mn:0000A49C ; Attributes: bp-based frame
.text$mn:0000A49C
.text$mn:0000A49C ; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::seekoff(__int64, int, int)
.text$mn:0000A49C                 public ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
.text$mn:0000A49C ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
.text$mn:0000A49C                                         ; DATA XREF: .rdata:0000CE50o
.text$mn:0000A49C
.text$mn:0000A49C var_14          = dword ptr -14h
.text$mn:0000A49C var_10          = dword ptr -10h
.text$mn:0000A49C var_C           = dword ptr -0Ch
.text$mn:0000A49C var_8           = dword ptr -8
.text$mn:0000A49C var_4           = dword ptr -4
.text$mn:0000A49C arg_0           = dword ptr  8
.text$mn:0000A49C arg_4           = dword ptr  0Ch
.text$mn:0000A49C arg_8           = dword ptr  10h
.text$mn:0000A49C arg_C           = dword ptr  14h
.text$mn:0000A49C arg_10          = dword ptr  18h
.text$mn:0000A49C
.text$mn:0000A49C                 push    ebp
.text$mn:0000A49D                 mov     ebp, esp
.text$mn:0000A49F                 sub     esp, 14h
.text$mn:0000A4A2                 push    esi
.text$mn:0000A4A3                 mov     [ebp+var_4], ecx
.text$mn:0000A4A6                 mov     ecx, [ebp+var_4]
.text$mn:0000A4A9                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A4AE                 test    eax, eax
.text$mn:0000A4B0                 jz      short loc_A4D0
.text$mn:0000A4B2                 mov     ecx, [ebp+var_4]
.text$mn:0000A4B5                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A4BA                 mov     ecx, [ebp+var_4]
.text$mn:0000A4BD                 cmp     [ecx+38h], eax
.text$mn:0000A4C0                 jnb     short loc_A4D0
.text$mn:0000A4C2                 mov     ecx, [ebp+var_4]
.text$mn:0000A4C5                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A4CA                 mov     edx, [ebp+var_4]
.text$mn:0000A4CD                 mov     [edx+38h], eax
.text$mn:0000A4D0
.text$mn:0000A4D0 loc_A4D0:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+14j
.text$mn:0000A4D0                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+24j
.text$mn:0000A4D0                 mov     eax, [ebp+arg_10]
.text$mn:0000A4D3                 and     eax, 1
.text$mn:0000A4D6                 jz      loc_A614
.text$mn:0000A4DC                 mov     ecx, [ebp+var_4]
.text$mn:0000A4DF                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A4E4                 test    eax, eax
.text$mn:0000A4E6                 jz      loc_A614
.text$mn:0000A4EC                 cmp     [ebp+arg_C], 2
.text$mn:0000A4F0                 jnz     short loc_A513
.text$mn:0000A4F2                 mov     ecx, [ebp+var_4]
.text$mn:0000A4F5                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A4FA                 mov     ecx, [ebp+var_4]
.text$mn:0000A4FD                 mov     edx, [ecx+38h]
.text$mn:0000A500                 sub     edx, eax
.text$mn:0000A502                 mov     eax, edx
.text$mn:0000A504                 cdq
.text$mn:0000A505                 add     eax, [ebp+arg_4]
.text$mn:0000A508                 adc     edx, [ebp+arg_8]
.text$mn:0000A50B                 mov     [ebp+arg_4], eax
.text$mn:0000A50E                 mov     [ebp+arg_8], edx
.text$mn:0000A511                 jmp     short loc_A55E
.text$mn:0000A513 ; ---------------------------------------------------------------------------
.text$mn:0000A513
.text$mn:0000A513 loc_A513:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+54j
.text$mn:0000A513                 cmp     [ebp+arg_C], 1
.text$mn:0000A517                 jnz     short loc_A546
.text$mn:0000A519                 mov     eax, [ebp+arg_10]
.text$mn:0000A51C                 and     eax, 2
.text$mn:0000A51F                 jnz     short loc_A546
.text$mn:0000A521                 mov     ecx, [ebp+var_4]
.text$mn:0000A524                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A529                 mov     esi, eax
.text$mn:0000A52B                 mov     ecx, [ebp+var_4]
.text$mn:0000A52E                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A533                 sub     esi, eax
.text$mn:0000A535                 mov     eax, esi
.text$mn:0000A537                 cdq
.text$mn:0000A538                 add     eax, [ebp+arg_4]
.text$mn:0000A53B                 adc     edx, [ebp+arg_8]
.text$mn:0000A53E                 mov     [ebp+arg_4], eax
.text$mn:0000A541                 mov     [ebp+arg_8], edx
.text$mn:0000A544                 jmp     short loc_A55E
.text$mn:0000A546 ; ---------------------------------------------------------------------------
.text$mn:0000A546
.text$mn:0000A546 loc_A546:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+7Bj
.text$mn:0000A546                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+83j
.text$mn:0000A546                 cmp     [ebp+arg_C], 0
.text$mn:0000A54A                 jz      short loc_A55E
.text$mn:0000A54C                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A552                 mov     [ebp+arg_4], ecx
.text$mn:0000A555                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A55B                 mov     [ebp+arg_8], edx
.text$mn:0000A55E
.text$mn:0000A55E loc_A55E:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+75j
.text$mn:0000A55E                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+A8j ...
.text$mn:0000A55E                 cmp     [ebp+arg_8], 0
.text$mn:0000A562                 jl      loc_A5FE
.text$mn:0000A568                 jg      short loc_A574
.text$mn:0000A56A                 cmp     [ebp+arg_4], 0
.text$mn:0000A56E                 jb      loc_A5FE
.text$mn:0000A574
.text$mn:0000A574 loc_A574:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+CCj
.text$mn:0000A574                 mov     ecx, [ebp+var_4]
.text$mn:0000A577                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A57C                 mov     ecx, [ebp+var_4]
.text$mn:0000A57F                 mov     edx, [ecx+38h]
.text$mn:0000A582                 sub     edx, eax
.text$mn:0000A584                 mov     eax, edx
.text$mn:0000A586                 cdq
.text$mn:0000A587                 mov     [ebp+var_C], eax
.text$mn:0000A58A                 mov     [ebp+var_8], edx
.text$mn:0000A58D                 mov     eax, [ebp+arg_8]
.text$mn:0000A590                 cmp     eax, [ebp+var_8]
.text$mn:0000A593                 jg      short loc_A5FE
.text$mn:0000A595                 jl      short loc_A59F
.text$mn:0000A597                 mov     ecx, [ebp+arg_4]
.text$mn:0000A59A                 cmp     ecx, [ebp+var_C]
.text$mn:0000A59D                 ja      short loc_A5FE
.text$mn:0000A59F
.text$mn:0000A59F loc_A59F:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+F9j
.text$mn:0000A59F                 mov     ecx, [ebp+var_4]
.text$mn:0000A5A2                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A5A7                 mov     esi, eax
.text$mn:0000A5A9                 mov     ecx, [ebp+var_4]
.text$mn:0000A5AC                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A5B1                 sub     esi, eax
.text$mn:0000A5B3                 mov     eax, esi
.text$mn:0000A5B5                 cdq
.text$mn:0000A5B6                 add     eax, [ebp+arg_4]
.text$mn:0000A5B9                 adc     edx, [ebp+arg_8]
.text$mn:0000A5BC                 push    eax
.text$mn:0000A5BD                 mov     ecx, [ebp+var_4]
.text$mn:0000A5C0                 call    ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
.text$mn:0000A5C5                 mov     edx, [ebp+arg_10]
.text$mn:0000A5C8                 and     edx, 2
.text$mn:0000A5CB                 jz      short loc_A5FC
.text$mn:0000A5CD                 mov     ecx, [ebp+var_4]
.text$mn:0000A5D0                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A5D5                 test    eax, eax
.text$mn:0000A5D7                 jz      short loc_A5FC
.text$mn:0000A5D9                 mov     ecx, [ebp+var_4]
.text$mn:0000A5DC                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:0000A5E1                 push    eax
.text$mn:0000A5E2                 mov     ecx, [ebp+var_4]
.text$mn:0000A5E5                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A5EA                 push    eax
.text$mn:0000A5EB                 mov     ecx, [ebp+var_4]
.text$mn:0000A5EE                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000A5F3                 push    eax
.text$mn:0000A5F4                 mov     ecx, [ebp+var_4]
.text$mn:0000A5F7                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
.text$mn:0000A5FC
.text$mn:0000A5FC loc_A5FC:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+12Fj
.text$mn:0000A5FC                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+13Bj
.text$mn:0000A5FC                 jmp     short loc_A60F
.text$mn:0000A5FE ; ---------------------------------------------------------------------------
.text$mn:0000A5FE
.text$mn:0000A5FE loc_A5FE:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+C6j
.text$mn:0000A5FE                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+D2j ...
.text$mn:0000A5FE                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A603                 mov     [ebp+arg_4], eax
.text$mn:0000A606                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A60C                 mov     [ebp+arg_8], ecx
.text$mn:0000A60F
.text$mn:0000A60F loc_A60F:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_A5FCj
.text$mn:0000A60F                 jmp     loc_A728
.text$mn:0000A614 ; ---------------------------------------------------------------------------
.text$mn:0000A614
.text$mn:0000A614 loc_A614:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+3Aj
.text$mn:0000A614                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+4Aj
.text$mn:0000A614                 mov     edx, [ebp+arg_10]
.text$mn:0000A617                 and     edx, 2
.text$mn:0000A61A                 jz      loc_A70E
.text$mn:0000A620                 mov     ecx, [ebp+var_4]
.text$mn:0000A623                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A628                 test    eax, eax
.text$mn:0000A62A                 jz      loc_A70E
.text$mn:0000A630                 cmp     [ebp+arg_C], 2
.text$mn:0000A634                 jnz     short loc_A657
.text$mn:0000A636                 mov     ecx, [ebp+var_4]
.text$mn:0000A639                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A63E                 mov     ecx, [ebp+var_4]
.text$mn:0000A641                 mov     edx, [ecx+38h]
.text$mn:0000A644                 sub     edx, eax
.text$mn:0000A646                 mov     eax, edx
.text$mn:0000A648                 cdq
.text$mn:0000A649                 add     eax, [ebp+arg_4]
.text$mn:0000A64C                 adc     edx, [ebp+arg_8]
.text$mn:0000A64F                 mov     [ebp+arg_4], eax
.text$mn:0000A652                 mov     [ebp+arg_8], edx
.text$mn:0000A655                 jmp     short loc_A699
.text$mn:0000A657 ; ---------------------------------------------------------------------------
.text$mn:0000A657
.text$mn:0000A657 loc_A657:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+198j
.text$mn:0000A657                 cmp     [ebp+arg_C], 1
.text$mn:0000A65B                 jnz     short loc_A682
.text$mn:0000A65D                 mov     ecx, [ebp+var_4]
.text$mn:0000A660                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A665                 mov     esi, eax
.text$mn:0000A667                 mov     ecx, [ebp+var_4]
.text$mn:0000A66A                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A66F                 sub     esi, eax
.text$mn:0000A671                 mov     eax, esi
.text$mn:0000A673                 cdq
.text$mn:0000A674                 add     eax, [ebp+arg_4]
.text$mn:0000A677                 adc     edx, [ebp+arg_8]
.text$mn:0000A67A                 mov     [ebp+arg_4], eax
.text$mn:0000A67D                 mov     [ebp+arg_8], edx
.text$mn:0000A680                 jmp     short loc_A699
.text$mn:0000A682 ; ---------------------------------------------------------------------------
.text$mn:0000A682
.text$mn:0000A682 loc_A682:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1BFj
.text$mn:0000A682                 cmp     [ebp+arg_C], 0
.text$mn:0000A686                 jz      short loc_A699
.text$mn:0000A688                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A68D                 mov     [ebp+arg_4], eax
.text$mn:0000A690                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A696                 mov     [ebp+arg_8], ecx
.text$mn:0000A699
.text$mn:0000A699 loc_A699:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1B9j
.text$mn:0000A699                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+1E4j ...
.text$mn:0000A699                 cmp     [ebp+arg_8], 0
.text$mn:0000A69D                 jl      short loc_A6FA
.text$mn:0000A69F                 jg      short loc_A6A7
.text$mn:0000A6A1                 cmp     [ebp+arg_4], 0
.text$mn:0000A6A5                 jb      short loc_A6FA
.text$mn:0000A6A7
.text$mn:0000A6A7 loc_A6A7:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+203j
.text$mn:0000A6A7                 mov     ecx, [ebp+var_4]
.text$mn:0000A6AA                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A6AF                 mov     edx, [ebp+var_4]
.text$mn:0000A6B2                 mov     ecx, [edx+38h]
.text$mn:0000A6B5                 sub     ecx, eax
.text$mn:0000A6B7                 mov     eax, ecx
.text$mn:0000A6B9                 cdq
.text$mn:0000A6BA                 mov     [ebp+var_14], eax
.text$mn:0000A6BD                 mov     [ebp+var_10], edx
.text$mn:0000A6C0                 mov     edx, [ebp+arg_8]
.text$mn:0000A6C3                 cmp     edx, [ebp+var_10]
.text$mn:0000A6C6                 jg      short loc_A6FA
.text$mn:0000A6C8                 jl      short loc_A6D2
.text$mn:0000A6CA                 mov     eax, [ebp+arg_4]
.text$mn:0000A6CD                 cmp     eax, [ebp+var_14]
.text$mn:0000A6D0                 ja      short loc_A6FA
.text$mn:0000A6D2
.text$mn:0000A6D2 loc_A6D2:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+22Cj
.text$mn:0000A6D2                 mov     ecx, [ebp+var_4]
.text$mn:0000A6D5                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A6DA                 mov     esi, eax
.text$mn:0000A6DC                 mov     ecx, [ebp+var_4]
.text$mn:0000A6DF                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A6E4                 sub     esi, eax
.text$mn:0000A6E6                 mov     eax, esi
.text$mn:0000A6E8                 cdq
.text$mn:0000A6E9                 add     eax, [ebp+arg_4]
.text$mn:0000A6EC                 adc     edx, [ebp+arg_8]
.text$mn:0000A6EF                 push    eax
.text$mn:0000A6F0                 mov     ecx, [ebp+var_4]
.text$mn:0000A6F3                 call    ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbump(int)
.text$mn:0000A6F8                 jmp     short loc_A70C
.text$mn:0000A6FA ; ---------------------------------------------------------------------------
.text$mn:0000A6FA
.text$mn:0000A6FA loc_A6FA:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+201j
.text$mn:0000A6FA                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+209j ...
.text$mn:0000A6FA                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A700                 mov     [ebp+arg_4], ecx
.text$mn:0000A703                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A709                 mov     [ebp+arg_8], edx
.text$mn:0000A70C
.text$mn:0000A70C loc_A70C:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+25Cj
.text$mn:0000A70C                 jmp     short loc_A728
.text$mn:0000A70E ; ---------------------------------------------------------------------------
.text$mn:0000A70E
.text$mn:0000A70E loc_A70E:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+17Ej
.text$mn:0000A70E                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)+18Ej
.text$mn:0000A70E                 mov     eax, [ebp+arg_4]
.text$mn:0000A711                 or      eax, [ebp+arg_8]
.text$mn:0000A714                 jz      short loc_A728
.text$mn:0000A716                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A71C                 mov     [ebp+arg_4], ecx
.text$mn:0000A71F                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A725                 mov     [ebp+arg_8], edx
.text$mn:0000A728
.text$mn:0000A728 loc_A728:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_A60Fj
.text$mn:0000A728                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int):loc_A70Cj ...
.text$mn:0000A728                 mov     eax, [ebp+arg_8]
.text$mn:0000A72B                 push    eax
.text$mn:0000A72C                 mov     ecx, [ebp+arg_4]
.text$mn:0000A72F                 push    ecx
.text$mn:0000A730                 mov     ecx, [ebp+arg_0]
.text$mn:0000A733                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000A738                 mov     eax, [ebp+arg_0]
.text$mn:0000A73B                 pop     esi
.text$mn:0000A73C                 mov     esp, ebp
.text$mn:0000A73E                 pop     ebp
.text$mn:0000A73F                 retn    14h
.text$mn:0000A73F ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z endp
.text$mn:0000A73F
.text$mn:0000A73F ; ---------------------------------------------------------------------------
.text$mn:0000A742                 align 4
.text$mn:0000A742 _text$mn        ends
.text$mn:0000A742
.text$mn:0000A744 ; ===========================================================================
.text$mn:0000A744
.text$mn:0000A744 ; Segment type: Pure code
.text$mn:0000A744 ; Segment permissions: Read/Execute
.text$mn:0000A744 _text$mn        segment para public 'CODE' use32
.text$mn:0000A744                 assume cs:_text$mn
.text$mn:0000A744                 ;org 0A744h
.text$mn:0000A744 ; COMDAT (pick any)
.text$mn:0000A744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A744
.text$mn:0000A744 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A744
.text$mn:0000A744 ; Attributes: bp-based frame
.text$mn:0000A744
.text$mn:0000A744 ; protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::seekpos(class std::fpos<int>, int)
.text$mn:0000A744                 public ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
.text$mn:0000A744 ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
.text$mn:0000A744                                         ; DATA XREF: .rdata:0000CCF4o
.text$mn:0000A744
.text$mn:0000A744 var_4           = dword ptr -4
.text$mn:0000A744 arg_0           = dword ptr  8
.text$mn:0000A744
.text$mn:0000A744                 push    ebp
.text$mn:0000A745                 mov     ebp, esp
.text$mn:0000A747                 push    ecx
.text$mn:0000A748                 mov     [ebp+var_4], ecx
.text$mn:0000A74B                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A750                 push    eax
.text$mn:0000A751                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A757                 push    ecx
.text$mn:0000A758                 mov     ecx, [ebp+arg_0]
.text$mn:0000A75B                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000A760                 mov     eax, [ebp+arg_0]
.text$mn:0000A763                 mov     esp, ebp
.text$mn:0000A765                 pop     ebp
.text$mn:0000A766                 retn    20h
.text$mn:0000A766 ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z endp
.text$mn:0000A766
.text$mn:0000A766 ; ---------------------------------------------------------------------------
.text$mn:0000A769                 align 4
.text$mn:0000A769 _text$mn        ends
.text$mn:0000A769
.text$mn:0000A76C ; ===========================================================================
.text$mn:0000A76C
.text$mn:0000A76C ; Segment type: Pure code
.text$mn:0000A76C ; Segment permissions: Read/Execute
.text$mn:0000A76C _text$mn        segment para public 'CODE' use32
.text$mn:0000A76C                 assume cs:_text$mn
.text$mn:0000A76C                 ;org 0A76Ch
.text$mn:0000A76C ; COMDAT (pick any)
.text$mn:0000A76C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A76C
.text$mn:0000A76C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A76C
.text$mn:0000A76C ; Attributes: bp-based frame
.text$mn:0000A76C
.text$mn:0000A76C ; protected: virtual class std::fpos<int> __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::seekpos(class std::fpos<int>, int)
.text$mn:0000A76C                 public ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
.text$mn:0000A76C ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
.text$mn:0000A76C                                         ; DATA XREF: .rdata:0000CE54o
.text$mn:0000A76C
.text$mn:0000A76C var_1C          = dword ptr -1Ch
.text$mn:0000A76C var_18          = dword ptr -18h
.text$mn:0000A76C var_14          = dword ptr -14h
.text$mn:0000A76C var_10          = dword ptr -10h
.text$mn:0000A76C var_C           = dword ptr -0Ch
.text$mn:0000A76C var_8           = dword ptr -8
.text$mn:0000A76C var_4           = dword ptr -4
.text$mn:0000A76C arg_0           = dword ptr  8
.text$mn:0000A76C arg_4           = byte ptr  0Ch
.text$mn:0000A76C arg_1C          = dword ptr  24h
.text$mn:0000A76C
.text$mn:0000A76C                 push    ebp
.text$mn:0000A76D                 mov     ebp, esp
.text$mn:0000A76F                 sub     esp, 1Ch
.text$mn:0000A772                 push    esi
.text$mn:0000A773                 mov     [ebp+var_4], ecx
.text$mn:0000A776                 lea     ecx, [ebp+arg_4]
.text$mn:0000A779                 call    ??B?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::operator __int64(void)
.text$mn:0000A77E                 mov     [ebp+var_C], eax
.text$mn:0000A781                 mov     [ebp+var_8], edx
.text$mn:0000A784                 mov     ecx, [ebp+var_4]
.text$mn:0000A787                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A78C                 test    eax, eax
.text$mn:0000A78E                 jz      short loc_A7AE
.text$mn:0000A790                 mov     ecx, [ebp+var_4]
.text$mn:0000A793                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A798                 mov     ecx, [ebp+var_4]
.text$mn:0000A79B                 cmp     [ecx+38h], eax
.text$mn:0000A79E                 jnb     short loc_A7AE
.text$mn:0000A7A0                 mov     ecx, [ebp+var_4]
.text$mn:0000A7A3                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A7A8                 mov     edx, [ebp+var_4]
.text$mn:0000A7AB                 mov     [edx+38h], eax
.text$mn:0000A7AE
.text$mn:0000A7AE loc_A7AE:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+22j
.text$mn:0000A7AE                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+32j
.text$mn:0000A7AE                 mov     eax, [ebp+var_C]
.text$mn:0000A7B1                 cmp     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A7B7                 jnz     short loc_A7C9
.text$mn:0000A7B9                 mov     ecx, [ebp+var_8]
.text$mn:0000A7BC                 cmp     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A7C2                 jnz     short loc_A7C9
.text$mn:0000A7C4                 jmp     loc_A939
.text$mn:0000A7C9 ; ---------------------------------------------------------------------------
.text$mn:0000A7C9
.text$mn:0000A7C9 loc_A7C9:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+4Bj
.text$mn:0000A7C9                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+56j
.text$mn:0000A7C9                 mov     edx, [ebp+arg_1C]
.text$mn:0000A7CC                 and     edx, 1
.text$mn:0000A7CF                 jz      loc_A89B
.text$mn:0000A7D5                 mov     ecx, [ebp+var_4]
.text$mn:0000A7D8                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A7DD                 test    eax, eax
.text$mn:0000A7DF                 jz      loc_A89B
.text$mn:0000A7E5                 cmp     [ebp+var_8], 0
.text$mn:0000A7E9                 jl      loc_A885
.text$mn:0000A7EF                 jg      short loc_A7FB
.text$mn:0000A7F1                 cmp     [ebp+var_C], 0
.text$mn:0000A7F5                 jb      loc_A885
.text$mn:0000A7FB
.text$mn:0000A7FB loc_A7FB:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+83j
.text$mn:0000A7FB                 mov     ecx, [ebp+var_4]
.text$mn:0000A7FE                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A803                 mov     ecx, [ebp+var_4]
.text$mn:0000A806                 mov     edx, [ecx+38h]
.text$mn:0000A809                 sub     edx, eax
.text$mn:0000A80B                 mov     eax, edx
.text$mn:0000A80D                 cdq
.text$mn:0000A80E                 mov     [ebp+var_14], eax
.text$mn:0000A811                 mov     [ebp+var_10], edx
.text$mn:0000A814                 mov     eax, [ebp+var_8]
.text$mn:0000A817                 cmp     eax, [ebp+var_10]
.text$mn:0000A81A                 jg      short loc_A885
.text$mn:0000A81C                 jl      short loc_A826
.text$mn:0000A81E                 mov     ecx, [ebp+var_C]
.text$mn:0000A821                 cmp     ecx, [ebp+var_14]
.text$mn:0000A824                 ja      short loc_A885
.text$mn:0000A826
.text$mn:0000A826 loc_A826:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+B0j
.text$mn:0000A826                 mov     ecx, [ebp+var_4]
.text$mn:0000A829                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A82E                 mov     esi, eax
.text$mn:0000A830                 mov     ecx, [ebp+var_4]
.text$mn:0000A833                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A838                 sub     esi, eax
.text$mn:0000A83A                 mov     eax, esi
.text$mn:0000A83C                 cdq
.text$mn:0000A83D                 add     eax, [ebp+var_C]
.text$mn:0000A840                 adc     edx, [ebp+var_8]
.text$mn:0000A843                 push    eax
.text$mn:0000A844                 mov     ecx, [ebp+var_4]
.text$mn:0000A847                 call    ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
.text$mn:0000A84C                 mov     edx, [ebp+arg_1C]
.text$mn:0000A84F                 and     edx, 2
.text$mn:0000A852                 jz      short loc_A883
.text$mn:0000A854                 mov     ecx, [ebp+var_4]
.text$mn:0000A857                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A85C                 test    eax, eax
.text$mn:0000A85E                 jz      short loc_A883
.text$mn:0000A860                 mov     ecx, [ebp+var_4]
.text$mn:0000A863                 call    ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::epptr(void)
.text$mn:0000A868                 push    eax
.text$mn:0000A869                 mov     ecx, [ebp+var_4]
.text$mn:0000A86C                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000A871                 push    eax
.text$mn:0000A872                 mov     ecx, [ebp+var_4]
.text$mn:0000A875                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000A87A                 push    eax
.text$mn:0000A87B                 mov     ecx, [ebp+var_4]
.text$mn:0000A87E                 call    ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setp(char *,char *,char *)
.text$mn:0000A883
.text$mn:0000A883 loc_A883:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+E6j
.text$mn:0000A883                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+F2j
.text$mn:0000A883                 jmp     short loc_A896
.text$mn:0000A885 ; ---------------------------------------------------------------------------
.text$mn:0000A885
.text$mn:0000A885 loc_A885:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+7Dj
.text$mn:0000A885                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+89j ...
.text$mn:0000A885                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A88A                 mov     [ebp+var_C], eax
.text$mn:0000A88D                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A893                 mov     [ebp+var_8], ecx
.text$mn:0000A896
.text$mn:0000A896 loc_A896:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int):loc_A883j
.text$mn:0000A896                 jmp     loc_A939
.text$mn:0000A89B ; ---------------------------------------------------------------------------
.text$mn:0000A89B
.text$mn:0000A89B loc_A89B:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+63j
.text$mn:0000A89B                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+73j
.text$mn:0000A89B                 mov     edx, [ebp+arg_1C]
.text$mn:0000A89E                 and     edx, 2
.text$mn:0000A8A1                 jz      loc_A927
.text$mn:0000A8A7                 mov     ecx, [ebp+var_4]
.text$mn:0000A8AA                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A8AF                 test    eax, eax
.text$mn:0000A8B1                 jz      short loc_A927
.text$mn:0000A8B3                 cmp     [ebp+var_8], 0
.text$mn:0000A8B7                 jl      short loc_A914
.text$mn:0000A8B9                 jg      short loc_A8C1
.text$mn:0000A8BB                 cmp     [ebp+var_C], 0
.text$mn:0000A8BF                 jb      short loc_A914
.text$mn:0000A8C1
.text$mn:0000A8C1 loc_A8C1:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+14Dj
.text$mn:0000A8C1                 mov     ecx, [ebp+var_4]
.text$mn:0000A8C4                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A8C9                 mov     ecx, [ebp+var_4]
.text$mn:0000A8CC                 mov     edx, [ecx+38h]
.text$mn:0000A8CF                 sub     edx, eax
.text$mn:0000A8D1                 mov     eax, edx
.text$mn:0000A8D3                 cdq
.text$mn:0000A8D4                 mov     [ebp+var_1C], eax
.text$mn:0000A8D7                 mov     [ebp+var_18], edx
.text$mn:0000A8DA                 mov     eax, [ebp+var_8]
.text$mn:0000A8DD                 cmp     eax, [ebp+var_18]
.text$mn:0000A8E0                 jg      short loc_A914
.text$mn:0000A8E2                 jl      short loc_A8EC
.text$mn:0000A8E4                 mov     ecx, [ebp+var_C]
.text$mn:0000A8E7                 cmp     ecx, [ebp+var_1C]
.text$mn:0000A8EA                 ja      short loc_A914
.text$mn:0000A8EC
.text$mn:0000A8EC loc_A8EC:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+176j
.text$mn:0000A8EC                 mov     ecx, [ebp+var_4]
.text$mn:0000A8EF                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000A8F4                 mov     esi, eax
.text$mn:0000A8F6                 mov     ecx, [ebp+var_4]
.text$mn:0000A8F9                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000A8FE                 sub     esi, eax
.text$mn:0000A900                 mov     eax, esi
.text$mn:0000A902                 cdq
.text$mn:0000A903                 add     eax, [ebp+var_C]
.text$mn:0000A906                 adc     edx, [ebp+var_8]
.text$mn:0000A909                 push    eax
.text$mn:0000A90A                 mov     ecx, [ebp+var_4]
.text$mn:0000A90D                 call    ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbump(int)
.text$mn:0000A912                 jmp     short loc_A925
.text$mn:0000A914 ; ---------------------------------------------------------------------------
.text$mn:0000A914
.text$mn:0000A914 loc_A914:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+14Bj
.text$mn:0000A914                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+153j ...
.text$mn:0000A914                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A91A                 mov     [ebp+var_C], edx
.text$mn:0000A91D                 mov     eax, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A922                 mov     [ebp+var_8], eax
.text$mn:0000A925
.text$mn:0000A925 loc_A925:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+1A6j
.text$mn:0000A925                 jmp     short loc_A939
.text$mn:0000A927 ; ---------------------------------------------------------------------------
.text$mn:0000A927
.text$mn:0000A927 loc_A927:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+135j
.text$mn:0000A927                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+145j
.text$mn:0000A927                 mov     ecx, dword ptr ds:?_BADOFF@std@@3_JB ; __int64 const std::_BADOFF
.text$mn:0000A92D                 mov     [ebp+var_C], ecx
.text$mn:0000A930                 mov     edx, dword ptr ds:?_BADOFF@std@@3_JB+4 ; __int64 const std::_BADOFF
.text$mn:0000A936                 mov     [ebp+var_8], edx
.text$mn:0000A939
.text$mn:0000A939 loc_A939:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)+58j
.text$mn:0000A939                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int):loc_A896j ...
.text$mn:0000A939                 mov     eax, [ebp+var_8]
.text$mn:0000A93C                 push    eax
.text$mn:0000A93D                 mov     ecx, [ebp+var_C]
.text$mn:0000A940                 push    ecx
.text$mn:0000A941                 mov     ecx, [ebp+arg_0]
.text$mn:0000A944                 call    ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>(__int64)
.text$mn:0000A949                 mov     eax, [ebp+arg_0]
.text$mn:0000A94C                 pop     esi
.text$mn:0000A94D                 mov     esp, ebp
.text$mn:0000A94F                 pop     ebp
.text$mn:0000A950                 retn    20h
.text$mn:0000A950 ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z endp
.text$mn:0000A950
.text$mn:0000A950 ; ---------------------------------------------------------------------------
.text$mn:0000A953                 align 4
.text$mn:0000A953 _text$mn        ends
.text$mn:0000A953
.text$mn:0000A954 ; ===========================================================================
.text$mn:0000A954
.text$mn:0000A954 ; Segment type: Pure code
.text$mn:0000A954 ; Segment permissions: Read/Execute
.text$mn:0000A954 _text$mn        segment para public 'CODE' use32
.text$mn:0000A954                 assume cs:_text$mn
.text$mn:0000A954                 ;org 0A954h
.text$mn:0000A954 ; COMDAT (pick any)
.text$mn:0000A954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A954
.text$mn:0000A954 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A954
.text$mn:0000A954 ; Attributes: bp-based frame
.text$mn:0000A954
.text$mn:0000A954 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_Wrap_alloc<class std::allocator<char>>::select_on_container_copy_construction(void)const
.text$mn:0000A954                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
.text$mn:0000A954 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000A954                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
.text$mn:0000A954
.text$mn:0000A954 var_8           = dword ptr -8
.text$mn:0000A954 var_1           = byte ptr -1
.text$mn:0000A954 arg_0           = dword ptr  8
.text$mn:0000A954
.text$mn:0000A954                 push    ebp
.text$mn:0000A955                 mov     ebp, esp
.text$mn:0000A957                 sub     esp, 8
.text$mn:0000A95A                 mov     [ebp+var_8], ecx
.text$mn:0000A95D                 mov     eax, [ebp+var_8]
.text$mn:0000A960                 push    eax
.text$mn:0000A961                 lea     ecx, [ebp+var_1]
.text$mn:0000A964                 push    ecx
.text$mn:0000A965                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)
.text$mn:0000A96A                 add     esp, 8
.text$mn:0000A96D                 push    eax
.text$mn:0000A96E                 mov     ecx, [ebp+arg_0]
.text$mn:0000A971                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(std::allocator<char> const &)
.text$mn:0000A976                 mov     eax, [ebp+arg_0]
.text$mn:0000A979                 mov     esp, ebp
.text$mn:0000A97B                 pop     ebp
.text$mn:0000A97C                 retn    4
.text$mn:0000A97C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000A97C
.text$mn:0000A97C ; ---------------------------------------------------------------------------
.text$mn:0000A97F                 align 10h
.text$mn:0000A97F _text$mn        ends
.text$mn:0000A97F
.text$mn:0000A980 ; ===========================================================================
.text$mn:0000A980
.text$mn:0000A980 ; Segment type: Pure code
.text$mn:0000A980 ; Segment permissions: Read/Execute
.text$mn:0000A980 _text$mn        segment para public 'CODE' use32
.text$mn:0000A980                 assume cs:_text$mn
.text$mn:0000A980                 ;org 0A980h
.text$mn:0000A980 ; COMDAT (pick any)
.text$mn:0000A980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A980
.text$mn:0000A980 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A980
.text$mn:0000A980 ; Attributes: bp-based frame
.text$mn:0000A980
.text$mn:0000A980 ; public: class std::allocator<char> __thiscall std::allocator<char>::select_on_container_copy_construction(void)const
.text$mn:0000A980                 public ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
.text$mn:0000A980 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ proc near
.text$mn:0000A980                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)+Ap
.text$mn:0000A980
.text$mn:0000A980 var_4           = dword ptr -4
.text$mn:0000A980 arg_0           = dword ptr  8
.text$mn:0000A980
.text$mn:0000A980                 push    ebp
.text$mn:0000A981                 mov     ebp, esp
.text$mn:0000A983                 push    ecx
.text$mn:0000A984                 mov     [ebp+var_4], ecx
.text$mn:0000A987                 mov     eax, [ebp+var_4]
.text$mn:0000A98A                 push    eax
.text$mn:0000A98B                 mov     ecx, [ebp+arg_0]
.text$mn:0000A98E                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:0000A993                 mov     eax, [ebp+arg_0]
.text$mn:0000A996                 mov     esp, ebp
.text$mn:0000A998                 pop     ebp
.text$mn:0000A999                 retn    4
.text$mn:0000A999 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ endp
.text$mn:0000A999
.text$mn:0000A999 _text$mn        ends
.text$mn:0000A999
.text$mn:0000A99C ; ===========================================================================
.text$mn:0000A99C
.text$mn:0000A99C ; Segment type: Pure code
.text$mn:0000A99C ; Segment permissions: Read/Execute
.text$mn:0000A99C _text$mn        segment para public 'CODE' use32
.text$mn:0000A99C                 assume cs:_text$mn
.text$mn:0000A99C                 ;org 0A99Ch
.text$mn:0000A99C ; COMDAT (pick any)
.text$mn:0000A99C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A99C
.text$mn:0000A99C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A99C
.text$mn:0000A99C ; Attributes: bp-based frame
.text$mn:0000A99C
.text$mn:0000A99C ; public: static class std::allocator<char> __cdecl std::allocator_traits<class std::allocator<char>>::select_on_container_copy_construction(class std::allocator<char> const &)
.text$mn:0000A99C                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
.text$mn:0000A99C ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z proc near
.text$mn:0000A99C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+11p
.text$mn:0000A99C
.text$mn:0000A99C arg_0           = dword ptr  8
.text$mn:0000A99C arg_4           = dword ptr  0Ch
.text$mn:0000A99C
.text$mn:0000A99C                 push    ebp
.text$mn:0000A99D                 mov     ebp, esp
.text$mn:0000A99F                 mov     eax, [ebp+arg_0]
.text$mn:0000A9A2                 push    eax
.text$mn:0000A9A3                 mov     ecx, [ebp+arg_4]
.text$mn:0000A9A6                 call    ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction(void)
.text$mn:0000A9AB                 mov     eax, [ebp+arg_0]
.text$mn:0000A9AE                 pop     ebp
.text$mn:0000A9AF                 retn
.text$mn:0000A9AF ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z endp
.text$mn:0000A9AF
.text$mn:0000A9AF _text$mn        ends
.text$mn:0000A9AF
.text$mn:0000A9B0 ; ===========================================================================
.text$mn:0000A9B0
.text$mn:0000A9B0 ; Segment type: Pure code
.text$mn:0000A9B0 ; Segment permissions: Read/Execute
.text$mn:0000A9B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9B0                 assume cs:_text$mn
.text$mn:0000A9B0                 ;org 0A9B0h
.text$mn:0000A9B0 ; COMDAT (pick any)
.text$mn:0000A9B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9B0
.text$mn:0000A9B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9B0
.text$mn:0000A9B0 ; Attributes: bp-based frame
.text$mn:0000A9B0
.text$mn:0000A9B0 ; protected: virtual class std::basic_streambuf<char, struct std::char_traits<char>> * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setbuf(char *, __int64)
.text$mn:0000A9B0                 public ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
.text$mn:0000A9B0 ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z proc near
.text$mn:0000A9B0                                         ; DATA XREF: .rdata:0000CCF8o
.text$mn:0000A9B0                                         ; .rdata:0000CE58o
.text$mn:0000A9B0
.text$mn:0000A9B0 var_4           = dword ptr -4
.text$mn:0000A9B0
.text$mn:0000A9B0                 push    ebp
.text$mn:0000A9B1                 mov     ebp, esp
.text$mn:0000A9B3                 push    ecx
.text$mn:0000A9B4                 mov     [ebp+var_4], ecx
.text$mn:0000A9B7                 mov     eax, [ebp+var_4]
.text$mn:0000A9BA                 mov     esp, ebp
.text$mn:0000A9BC                 pop     ebp
.text$mn:0000A9BD                 retn    0Ch
.text$mn:0000A9BD ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z endp
.text$mn:0000A9BD
.text$mn:0000A9BD _text$mn        ends
.text$mn:0000A9BD
.text$mn:0000A9C0 ; ===========================================================================
.text$mn:0000A9C0
.text$mn:0000A9C0 ; Segment type: Pure code
.text$mn:0000A9C0 ; Segment permissions: Read/Execute
.text$mn:0000A9C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9C0                 assume cs:_text$mn
.text$mn:0000A9C0                 ;org 0A9C0h
.text$mn:0000A9C0 ; COMDAT (pick any)
.text$mn:0000A9C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9C0
.text$mn:0000A9C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9C0
.text$mn:0000A9C0 ; Attributes: bp-based frame
.text$mn:0000A9C0
.text$mn:0000A9C0 ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setg(char *, char *, char *)
.text$mn:0000A9C0                 public ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
.text$mn:0000A9C0 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z proc near
.text$mn:0000A9C0                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Init(void)+64p
.text$mn:0000A9C0                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+87p ...
.text$mn:0000A9C0
.text$mn:0000A9C0 var_4           = dword ptr -4
.text$mn:0000A9C0 arg_0           = dword ptr  8
.text$mn:0000A9C0 arg_4           = dword ptr  0Ch
.text$mn:0000A9C0 arg_8           = dword ptr  10h
.text$mn:0000A9C0
.text$mn:0000A9C0                 push    ebp
.text$mn:0000A9C1                 mov     ebp, esp
.text$mn:0000A9C3                 push    ecx
.text$mn:0000A9C4                 mov     [ebp+var_4], ecx
.text$mn:0000A9C7                 mov     eax, [ebp+var_4]
.text$mn:0000A9CA                 mov     ecx, [eax+0Ch]
.text$mn:0000A9CD                 mov     edx, [ebp+arg_0]
.text$mn:0000A9D0                 mov     [ecx], edx
.text$mn:0000A9D2                 mov     eax, [ebp+var_4]
.text$mn:0000A9D5                 mov     ecx, [eax+1Ch]
.text$mn:0000A9D8                 mov     edx, [ebp+arg_4]
.text$mn:0000A9DB                 mov     [ecx], edx
.text$mn:0000A9DD                 mov     eax, [ebp+arg_8]
.text$mn:0000A9E0                 sub     eax, [ebp+arg_4]
.text$mn:0000A9E3                 mov     ecx, [ebp+var_4]
.text$mn:0000A9E6                 mov     edx, [ecx+2Ch]
.text$mn:0000A9E9                 mov     [edx], eax
.text$mn:0000A9EB                 mov     esp, ebp
.text$mn:0000A9ED                 pop     ebp
.text$mn:0000A9EE                 retn    0Ch
.text$mn:0000A9EE ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z endp
.text$mn:0000A9EE
.text$mn:0000A9EE ; ---------------------------------------------------------------------------
.text$mn:0000A9F1                 align 4
.text$mn:0000A9F1 _text$mn        ends
.text$mn:0000A9F1
.text$mn:0000A9F4 ; ===========================================================================
.text$mn:0000A9F4
.text$mn:0000A9F4 ; Segment type: Pure code
.text$mn:0000A9F4 ; Segment permissions: Read/Execute
.text$mn:0000A9F4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9F4                 assume cs:_text$mn
.text$mn:0000A9F4                 ;org 0A9F4h
.text$mn:0000A9F4 ; COMDAT (pick any)
.text$mn:0000A9F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9F4
.text$mn:0000A9F4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9F4
.text$mn:0000A9F4 ; Attributes: bp-based frame
.text$mn:0000A9F4
.text$mn:0000A9F4 ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *, char *)
.text$mn:0000A9F4                 public ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
.text$mn:0000A9F4 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z proc near
.text$mn:0000A9F4                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Init(char const *,uint,int)+C5p
.text$mn:0000A9F4                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+95p ...
.text$mn:0000A9F4
.text$mn:0000A9F4 var_4           = dword ptr -4
.text$mn:0000A9F4 arg_0           = dword ptr  8
.text$mn:0000A9F4 arg_4           = dword ptr  0Ch
.text$mn:0000A9F4 arg_8           = dword ptr  10h
.text$mn:0000A9F4
.text$mn:0000A9F4                 push    ebp
.text$mn:0000A9F5                 mov     ebp, esp
.text$mn:0000A9F7                 push    ecx
.text$mn:0000A9F8                 mov     [ebp+var_4], ecx
.text$mn:0000A9FB                 mov     eax, [ebp+var_4]
.text$mn:0000A9FE                 mov     ecx, [eax+10h]
.text$mn:0000AA01                 mov     edx, [ebp+arg_0]
.text$mn:0000AA04                 mov     [ecx], edx
.text$mn:0000AA06                 mov     eax, [ebp+var_4]
.text$mn:0000AA09                 mov     ecx, [eax+20h]
.text$mn:0000AA0C                 mov     edx, [ebp+arg_4]
.text$mn:0000AA0F                 mov     [ecx], edx
.text$mn:0000AA11                 mov     eax, [ebp+arg_8]
.text$mn:0000AA14                 sub     eax, [ebp+arg_4]
.text$mn:0000AA17                 mov     ecx, [ebp+var_4]
.text$mn:0000AA1A                 mov     edx, [ecx+30h]
.text$mn:0000AA1D                 mov     [edx], eax
.text$mn:0000AA1F                 mov     esp, ebp
.text$mn:0000AA21                 pop     ebp
.text$mn:0000AA22                 retn    0Ch
.text$mn:0000AA22 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z endp
.text$mn:0000AA22
.text$mn:0000AA22 ; ---------------------------------------------------------------------------
.text$mn:0000AA25                 align 4
.text$mn:0000AA25 _text$mn        ends
.text$mn:0000AA25
.text$mn:0000AA28 ; ===========================================================================
.text$mn:0000AA28
.text$mn:0000AA28 ; Segment type: Pure code
.text$mn:0000AA28 ; Segment permissions: Read/Execute
.text$mn:0000AA28 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA28                 assume cs:_text$mn
.text$mn:0000AA28                 ;org 0AA28h
.text$mn:0000AA28 ; COMDAT (pick any)
.text$mn:0000AA28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA28
.text$mn:0000AA28 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA28
.text$mn:0000AA28 ; Attributes: bp-based frame
.text$mn:0000AA28
.text$mn:0000AA28 ; protected: void __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::setp(char *, char *)
.text$mn:0000AA28                 public ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
.text$mn:0000AA28 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z proc near
.text$mn:0000AA28                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::_Init(void)+56p
.text$mn:0000AA28                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::_Tidy(void)+6Fp ...
.text$mn:0000AA28
.text$mn:0000AA28 var_4           = dword ptr -4
.text$mn:0000AA28 arg_0           = dword ptr  8
.text$mn:0000AA28 arg_4           = dword ptr  0Ch
.text$mn:0000AA28
.text$mn:0000AA28                 push    ebp
.text$mn:0000AA29                 mov     ebp, esp
.text$mn:0000AA2B                 push    ecx
.text$mn:0000AA2C                 mov     [ebp+var_4], ecx
.text$mn:0000AA2F                 mov     eax, [ebp+var_4]
.text$mn:0000AA32                 mov     ecx, [eax+10h]
.text$mn:0000AA35                 mov     edx, [ebp+arg_0]
.text$mn:0000AA38                 mov     [ecx], edx
.text$mn:0000AA3A                 mov     eax, [ebp+var_4]
.text$mn:0000AA3D                 mov     ecx, [eax+20h]
.text$mn:0000AA40                 mov     edx, [ebp+arg_0]
.text$mn:0000AA43                 mov     [ecx], edx
.text$mn:0000AA45                 mov     eax, [ebp+arg_4]
.text$mn:0000AA48                 sub     eax, [ebp+arg_0]
.text$mn:0000AA4B                 mov     ecx, [ebp+var_4]
.text$mn:0000AA4E                 mov     edx, [ecx+30h]
.text$mn:0000AA51                 mov     [edx], eax
.text$mn:0000AA53                 mov     esp, ebp
.text$mn:0000AA55                 pop     ebp
.text$mn:0000AA56                 retn    8
.text$mn:0000AA56 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z endp
.text$mn:0000AA56
.text$mn:0000AA56 ; ---------------------------------------------------------------------------
.text$mn:0000AA59                 align 4
.text$mn:0000AA59 _text$mn        ends
.text$mn:0000AA59
.text$mn:0000AA5C ; ===========================================================================
.text$mn:0000AA5C
.text$mn:0000AA5C ; Segment type: Pure code
.text$mn:0000AA5C ; Segment permissions: Read/Execute
.text$mn:0000AA5C _text$mn        segment para public 'CODE' use32
.text$mn:0000AA5C                 assume cs:_text$mn
.text$mn:0000AA5C                 ;org 0AA5Ch
.text$mn:0000AA5C ; COMDAT (pick any)
.text$mn:0000AA5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA5C
.text$mn:0000AA5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA5C
.text$mn:0000AA5C ; Attributes: bp-based frame
.text$mn:0000AA5C
.text$mn:0000AA5C ; public: void __thiscall std::basic_ios<char, struct std::char_traits<char>>::setstate(int, bool)
.text$mn:0000AA5C                 public ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
.text$mn:0000AA5C ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z proc near
.text$mn:0000AA5C                                         ; CODE XREF: __catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0+11p
.text$mn:0000AA5C                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+276p ...
.text$mn:0000AA5C
.text$mn:0000AA5C var_4           = dword ptr -4
.text$mn:0000AA5C arg_0           = dword ptr  8
.text$mn:0000AA5C arg_4           = byte ptr  0Ch
.text$mn:0000AA5C
.text$mn:0000AA5C                 push    ebp
.text$mn:0000AA5D                 mov     ebp, esp
.text$mn:0000AA5F                 push    ecx
.text$mn:0000AA60                 mov     [ebp+var_4], ecx
.text$mn:0000AA63                 cmp     [ebp+arg_0], 0
.text$mn:0000AA67                 jz      short loc_AA82
.text$mn:0000AA69                 movzx   eax, [ebp+arg_4]
.text$mn:0000AA6D                 push    eax
.text$mn:0000AA6E                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AA71                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:0000AA76                 or      eax, [ebp+arg_0]
.text$mn:0000AA79                 push    eax
.text$mn:0000AA7A                 mov     ecx, [ebp+var_4]
.text$mn:0000AA7D                 call    ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char>>::clear(int,bool)
.text$mn:0000AA82
.text$mn:0000AA82 loc_AA82:                               ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::setstate(int,bool)+Bj
.text$mn:0000AA82                 mov     esp, ebp
.text$mn:0000AA84                 pop     ebp
.text$mn:0000AA85                 retn    8
.text$mn:0000AA85 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z endp
.text$mn:0000AA85
.text$mn:0000AA85 _text$mn        ends
.text$mn:0000AA85
.text$mn:0000AA88 ; ===========================================================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Segment type: Pure code
.text$mn:0000AA88 ; Segment permissions: Read/Execute
.text$mn:0000AA88 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA88                 assume cs:_text$mn
.text$mn:0000AA88                 ;org 0AA88h
.text$mn:0000AA88 ; COMDAT (pick any)
.text$mn:0000AA88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA88
.text$mn:0000AA88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Attributes: bp-based frame
.text$mn:0000AA88
.text$mn:0000AA88 ; protected: virtual __int64 __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::showmanyc(void)
.text$mn:0000AA88                 public ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
.text$mn:0000AA88 ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ proc near
.text$mn:0000AA88                                         ; DATA XREF: .rdata:0000CCDCo
.text$mn:0000AA88                                         ; .rdata:0000CE3Co
.text$mn:0000AA88
.text$mn:0000AA88 var_4           = dword ptr -4
.text$mn:0000AA88
.text$mn:0000AA88                 push    ebp
.text$mn:0000AA89                 mov     ebp, esp
.text$mn:0000AA8B                 push    ecx
.text$mn:0000AA8C                 mov     [ebp+var_4], ecx
.text$mn:0000AA8F                 xor     eax, eax
.text$mn:0000AA91                 xor     edx, edx
.text$mn:0000AA93                 mov     esp, ebp
.text$mn:0000AA95                 pop     ebp
.text$mn:0000AA96                 retn
.text$mn:0000AA96 ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ endp
.text$mn:0000AA96
.text$mn:0000AA96 ; ---------------------------------------------------------------------------
.text$mn:0000AA97                 align 4
.text$mn:0000AA97 _text$mn        ends
.text$mn:0000AA97
.text$mn:0000AA98 ; ===========================================================================
.text$mn:0000AA98
.text$mn:0000AA98 ; Segment type: Pure code
.text$mn:0000AA98 ; Segment permissions: Read/Execute
.text$mn:0000AA98 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA98                 assume cs:_text$mn
.text$mn:0000AA98                 ;org 0AA98h
.text$mn:0000AA98 ; COMDAT (pick any)
.text$mn:0000AA98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA98
.text$mn:0000AA98 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA98
.text$mn:0000AA98 ; Attributes: bp-based frame
.text$mn:0000AA98
.text$mn:0000AA98 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000AA98                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000AA98 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000AA98                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+36p
.text$mn:0000AA98                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp ...
.text$mn:0000AA98
.text$mn:0000AA98 var_4           = dword ptr -4
.text$mn:0000AA98
.text$mn:0000AA98                 push    ebp
.text$mn:0000AA99                 mov     ebp, esp
.text$mn:0000AA9B                 push    ecx
.text$mn:0000AA9C                 mov     [ebp+var_4], ecx
.text$mn:0000AA9F                 mov     eax, [ebp+var_4]
.text$mn:0000AAA2                 mov     eax, [eax+14h]
.text$mn:0000AAA5                 mov     esp, ebp
.text$mn:0000AAA7                 pop     ebp
.text$mn:0000AAA8                 retn
.text$mn:0000AAA8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000AAA8
.text$mn:0000AAA8 ; ---------------------------------------------------------------------------
.text$mn:0000AAA9                 align 4
.text$mn:0000AAA9 _text$mn        ends
.text$mn:0000AAA9
.text$mn:0000AAAC ; ===========================================================================
.text$mn:0000AAAC
.text$mn:0000AAAC ; Segment type: Pure code
.text$mn:0000AAAC ; Segment permissions: Read/Execute
.text$mn:0000AAAC _text$mn        segment para public 'CODE' use32
.text$mn:0000AAAC                 assume cs:_text$mn
.text$mn:0000AAAC                 ;org 0AAACh
.text$mn:0000AAAC ; COMDAT (pick any)
.text$mn:0000AAAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAAC
.text$mn:0000AAAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAAC
.text$mn:0000AAAC ; Attributes: bp-based frame
.text$mn:0000AAAC
.text$mn:0000AAAC ; public: int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputc(char)
.text$mn:0000AAAC                 public ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
.text$mn:0000AAAC ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z proc near
.text$mn:0000AAAC                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+127p
.text$mn:0000AAAC                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+1EFp ...
.text$mn:0000AAAC
.text$mn:0000AAAC var_14          = dword ptr -14h
.text$mn:0000AAAC var_10          = dword ptr -10h
.text$mn:0000AAAC var_C           = dword ptr -0Ch
.text$mn:0000AAAC var_8           = dword ptr -8
.text$mn:0000AAAC var_4           = dword ptr -4
.text$mn:0000AAAC arg_0           = byte ptr  8
.text$mn:0000AAAC
.text$mn:0000AAAC                 push    ebp
.text$mn:0000AAAD                 mov     ebp, esp
.text$mn:0000AAAF                 sub     esp, 14h
.text$mn:0000AAB2                 mov     [ebp+var_4], ecx
.text$mn:0000AAB5                 mov     ecx, [ebp+var_4]
.text$mn:0000AAB8                 call    ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pnavail(void)
.text$mn:0000AABD                 mov     [ebp+var_14], eax
.text$mn:0000AAC0                 mov     [ebp+var_10], edx
.text$mn:0000AAC3                 cmp     [ebp+var_10], 0
.text$mn:0000AAC7                 jl      short loc_AAF5
.text$mn:0000AAC9                 jg      short loc_AAD1
.text$mn:0000AACB                 cmp     [ebp+var_14], 0
.text$mn:0000AACF                 jbe     short loc_AAF5
.text$mn:0000AAD1
.text$mn:0000AAD1 loc_AAD1:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+1Dj
.text$mn:0000AAD1                 mov     ecx, [ebp+var_4]
.text$mn:0000AAD4                 call    ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pninc(void)
.text$mn:0000AAD9                 mov     [ebp+var_8], eax
.text$mn:0000AADC                 mov     eax, [ebp+var_8]
.text$mn:0000AADF                 mov     cl, [ebp+arg_0]
.text$mn:0000AAE2                 mov     [eax], cl
.text$mn:0000AAE4                 mov     edx, [ebp+var_8]
.text$mn:0000AAE7                 push    edx
.text$mn:0000AAE8                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000AAED                 add     esp, 4
.text$mn:0000AAF0                 mov     [ebp+var_C], eax
.text$mn:0000AAF3                 jmp     short loc_AB12
.text$mn:0000AAF5 ; ---------------------------------------------------------------------------
.text$mn:0000AAF5
.text$mn:0000AAF5 loc_AAF5:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+1Bj
.text$mn:0000AAF5                                         ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+23j
.text$mn:0000AAF5                 lea     eax, [ebp+arg_0]
.text$mn:0000AAF8                 push    eax
.text$mn:0000AAF9                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000AAFE                 add     esp, 4
.text$mn:0000AB01                 push    eax
.text$mn:0000AB02                 mov     ecx, [ebp+var_4]
.text$mn:0000AB05                 mov     edx, [ecx]
.text$mn:0000AB07                 mov     ecx, [ebp+var_4]
.text$mn:0000AB0A                 mov     eax, [edx+0Ch]
.text$mn:0000AB0D                 call    eax
.text$mn:0000AB0F                 mov     [ebp+var_C], eax
.text$mn:0000AB12
.text$mn:0000AB12 loc_AB12:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+47j
.text$mn:0000AB12                 mov     eax, [ebp+var_C]
.text$mn:0000AB15                 mov     esp, ebp
.text$mn:0000AB17                 pop     ebp
.text$mn:0000AB18                 retn    4
.text$mn:0000AB18 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z endp
.text$mn:0000AB18
.text$mn:0000AB18 ; ---------------------------------------------------------------------------
.text$mn:0000AB1B                 align 4
.text$mn:0000AB1B _text$mn        ends
.text$mn:0000AB1B
.text$mn:0000AB1C ; ===========================================================================
.text$mn:0000AB1C
.text$mn:0000AB1C ; Segment type: Pure code
.text$mn:0000AB1C ; Segment permissions: Read/Execute
.text$mn:0000AB1C _text$mn        segment para public 'CODE' use32
.text$mn:0000AB1C                 assume cs:_text$mn
.text$mn:0000AB1C                 ;org 0AB1Ch
.text$mn:0000AB1C ; COMDAT (pick any)
.text$mn:0000AB1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB1C
.text$mn:0000AB1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB1C
.text$mn:0000AB1C ; Attributes: bp-based frame
.text$mn:0000AB1C
.text$mn:0000AB1C ; public: __int64 __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sputn(char const *, __int64)
.text$mn:0000AB1C                 public ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
.text$mn:0000AB1C ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z proc near
.text$mn:0000AB1C                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+185p
.text$mn:0000AB1C                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+1B6p
.text$mn:0000AB1C
.text$mn:0000AB1C var_4           = dword ptr -4
.text$mn:0000AB1C arg_0           = dword ptr  8
.text$mn:0000AB1C arg_4           = dword ptr  0Ch
.text$mn:0000AB1C arg_8           = dword ptr  10h
.text$mn:0000AB1C
.text$mn:0000AB1C                 push    ebp
.text$mn:0000AB1D                 mov     ebp, esp
.text$mn:0000AB1F                 push    ecx
.text$mn:0000AB20                 mov     [ebp+var_4], ecx
.text$mn:0000AB23                 mov     eax, [ebp+arg_8]
.text$mn:0000AB26                 push    eax
.text$mn:0000AB27                 mov     ecx, [ebp+arg_4]
.text$mn:0000AB2A                 push    ecx
.text$mn:0000AB2B                 mov     edx, [ebp+arg_0]
.text$mn:0000AB2E                 push    edx
.text$mn:0000AB2F                 mov     eax, [ebp+var_4]
.text$mn:0000AB32                 mov     edx, [eax]
.text$mn:0000AB34                 mov     ecx, [ebp+var_4]
.text$mn:0000AB37                 mov     eax, [edx+24h]
.text$mn:0000AB3A                 call    eax
.text$mn:0000AB3C                 mov     esp, ebp
.text$mn:0000AB3E                 pop     ebp
.text$mn:0000AB3F                 retn    0Ch
.text$mn:0000AB3F ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z endp
.text$mn:0000AB3F
.text$mn:0000AB3F ; ---------------------------------------------------------------------------
.text$mn:0000AB42                 align 4
.text$mn:0000AB42 _text$mn        ends
.text$mn:0000AB42
.text$mn:0000AB44 ; ===========================================================================
.text$mn:0000AB44
.text$mn:0000AB44 ; Segment type: Pure code
.text$mn:0000AB44 ; Segment permissions: Read/Execute
.text$mn:0000AB44 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB44                 assume cs:_text$mn
.text$mn:0000AB44                 ;org 0AB44h
.text$mn:0000AB44 ; COMDAT (pick any)
.text$mn:0000AB44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB44
.text$mn:0000AB44 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB44
.text$mn:0000AB44 ; Attributes: bp-based frame
.text$mn:0000AB44
.text$mn:0000AB44 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::str(void)const
.text$mn:0000AB44                 public ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000AB44 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$mn:0000AB44                                         ; CODE XREF: operator<<(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,TiXmlNodeA const &)+5Fp
.text$mn:0000AB44
.text$mn:0000AB44 var_14          = dword ptr -14h
.text$mn:0000AB44 var_10          = dword ptr -10h
.text$mn:0000AB44 var_C           = dword ptr -0Ch
.text$mn:0000AB44 var_4           = dword ptr -4
.text$mn:0000AB44 arg_0           = dword ptr  8
.text$mn:0000AB44
.text$mn:0000AB44                 push    ebp
.text$mn:0000AB45                 mov     ebp, esp
.text$mn:0000AB47                 push    0FFFFFFFFh
.text$mn:0000AB49                 push    offset __ehhandler$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000AB4E                 mov     eax, large fs:0
.text$mn:0000AB54                 push    eax
.text$mn:0000AB55                 sub     esp, 8
.text$mn:0000AB58                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AB5D                 xor     eax, ebp
.text$mn:0000AB5F                 push    eax
.text$mn:0000AB60                 lea     eax, [ebp+var_C]
.text$mn:0000AB63                 mov     large fs:0, eax
.text$mn:0000AB69                 mov     [ebp+var_14], ecx
.text$mn:0000AB6C                 mov     [ebp+var_10], 0
.text$mn:0000AB73                 mov     eax, [ebp+arg_0]
.text$mn:0000AB76                 push    eax
.text$mn:0000AB77                 mov     ecx, [ebp+var_14]
.text$mn:0000AB7A                 add     ecx, 4
.text$mn:0000AB7D                 call    ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)
.text$mn:0000AB82                 mov     [ebp+var_4], 0
.text$mn:0000AB89                 mov     ecx, [ebp+var_10]
.text$mn:0000AB8C                 or      ecx, 1
.text$mn:0000AB8F                 mov     [ebp+var_10], ecx
.text$mn:0000AB92                 mov     eax, [ebp+arg_0]
.text$mn:0000AB95                 mov     ecx, [ebp+var_C]
.text$mn:0000AB98                 mov     large fs:0, ecx
.text$mn:0000AB9F                 pop     ecx
.text$mn:0000ABA0                 mov     esp, ebp
.text$mn:0000ABA2                 pop     ebp
.text$mn:0000ABA3                 retn    4
.text$mn:0000ABA3 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$mn:0000ABA3
.text$mn:0000ABA3 ; ---------------------------------------------------------------------------
.text$mn:0000ABA6                 align 4
.text$mn:0000ABA6 _text$mn        ends
.text$mn:0000ABA6
.text$x:0000ABA8 ; ===========================================================================
.text$x:0000ABA8
.text$x:0000ABA8 ; Segment type: Pure code
.text$x:0000ABA8 ; Segment permissions: Read/Execute
.text$x:0000ABA8 _text$x         segment para public 'CODE' use32
.text$x:0000ABA8                 assume cs:_text$x
.text$x:0000ABA8                 ;org 0ABA8h
.text$x:0000ABA8 ; COMDAT (pick associative to section at AB44)
.text$x:0000ABA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000ABA8
.text$x:0000ABA8 ; =============== S U B R O U T I N E =======================================
.text$x:0000ABA8
.text$x:0000ABA8
.text$x:0000ABA8 __unwindfunclet$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 proc near
.text$x:0000ABA8                                         ; DATA XREF: .xdata$x:0000C6F8o
.text$x:0000ABA8                 mov     eax, [ebp-10h]
.text$x:0000ABAB                 and     eax, 1
.text$x:0000ABAE                 jz      $LN4_2
.text$x:0000ABB4                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000ABB8                 mov     ecx, [ebp+8]
.text$x:0000ABBB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000ABC0 ; ---------------------------------------------------------------------------
.text$x:0000ABC0
.text$x:0000ABC0 $LN4_2:                                 ; CODE XREF: __unwindfunclet$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0+6j
.text$x:0000ABC0                 retn
.text$x:0000ABC0 __unwindfunclet$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 endp
.text$x:0000ABC0
.text$x:0000ABC1
.text$x:0000ABC1 ; =============== S U B R O U T I N E =======================================
.text$x:0000ABC1
.text$x:0000ABC1
.text$x:0000ABC1 __ehhandler$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$x:0000ABC1                                         ; DATA XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::str(void)+5o
.text$x:0000ABC1
.text$x:0000ABC1 arg_4           = dword ptr  8
.text$x:0000ABC1
.text$x:0000ABC1                 mov     edx, [esp+arg_4]
.text$x:0000ABC5                 lea     eax, [edx+0Ch]
.text$x:0000ABC8                 mov     ecx, [edx-0Ch]
.text$x:0000ABCB                 xor     ecx, eax
.text$x:0000ABCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ABD2                 mov     eax, offset __ehfuncinfo$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$x:0000ABD7                 jmp     ___CxxFrameHandler3
.text$x:0000ABD7 __ehhandler$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$x:0000ABD7
.text$x:0000ABD7 _text$x         ends
.text$x:0000ABD7
.text$mn:0000ABDC ; ===========================================================================
.text$mn:0000ABDC
.text$mn:0000ABDC ; Segment type: Pure code
.text$mn:0000ABDC ; Segment permissions: Read/Execute
.text$mn:0000ABDC _text$mn        segment para public 'CODE' use32
.text$mn:0000ABDC                 assume cs:_text$mn
.text$mn:0000ABDC                 ;org 0ABDCh
.text$mn:0000ABDC ; COMDAT (pick any)
.text$mn:0000ABDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABDC
.text$mn:0000ABDC ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABDC
.text$mn:0000ABDC ; Attributes: bp-based frame
.text$mn:0000ABDC
.text$mn:0000ABDC ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::str(void)const
.text$mn:0000ABDC                 public ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000ABDC ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$mn:0000ABDC                                         ; CODE XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::str(void)+39p
.text$mn:0000ABDC
.text$mn:0000ABDC var_70          = dword ptr -70h
.text$mn:0000ABDC var_6C          = dword ptr -6Ch
.text$mn:0000ABDC var_68          = dword ptr -68h
.text$mn:0000ABDC var_64          = byte ptr -64h
.text$mn:0000ABDC var_48          = byte ptr -48h
.text$mn:0000ABDC var_2C          = byte ptr -2Ch
.text$mn:0000ABDC var_10          = dword ptr -10h
.text$mn:0000ABDC var_C           = dword ptr -0Ch
.text$mn:0000ABDC var_4           = dword ptr -4
.text$mn:0000ABDC arg_0           = dword ptr  8
.text$mn:0000ABDC
.text$mn:0000ABDC                 push    ebp
.text$mn:0000ABDD                 mov     ebp, esp
.text$mn:0000ABDF                 push    0FFFFFFFFh
.text$mn:0000ABE1                 push    offset __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:0000ABE6                 mov     eax, large fs:0
.text$mn:0000ABEC                 push    eax
.text$mn:0000ABED                 sub     esp, 64h
.text$mn:0000ABF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000ABF5                 xor     eax, ebp
.text$mn:0000ABF7                 mov     [ebp+var_10], eax
.text$mn:0000ABFA                 push    esi
.text$mn:0000ABFB                 push    eax
.text$mn:0000ABFC                 lea     eax, [ebp+var_C]
.text$mn:0000ABFF                 mov     large fs:0, eax
.text$mn:0000AC05                 mov     [ebp+var_68], ecx
.text$mn:0000AC08                 mov     [ebp+var_6C], 0
.text$mn:0000AC0F                 mov     eax, [ebp+var_68]
.text$mn:0000AC12                 mov     ecx, [eax+3Ch]
.text$mn:0000AC15                 and     ecx, 2
.text$mn:0000AC18                 jnz     loc_ACA4
.text$mn:0000AC1E                 mov     ecx, [ebp+var_68]
.text$mn:0000AC21                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AC26                 test    eax, eax
.text$mn:0000AC28                 jz      short loc_ACA4
.text$mn:0000AC2A                 mov     ecx, [ebp+var_68]
.text$mn:0000AC2D                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AC32                 mov     edx, [ebp+var_68]
.text$mn:0000AC35                 cmp     [edx+38h], eax
.text$mn:0000AC38                 jnb     short loc_AC47
.text$mn:0000AC3A                 mov     ecx, [ebp+var_68]
.text$mn:0000AC3D                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AC42                 mov     [ebp+var_70], eax
.text$mn:0000AC45                 jmp     short loc_AC50
.text$mn:0000AC47 ; ---------------------------------------------------------------------------
.text$mn:0000AC47
.text$mn:0000AC47 loc_AC47:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+5Cj
.text$mn:0000AC47                 mov     eax, [ebp+var_68]
.text$mn:0000AC4A                 mov     ecx, [eax+38h]
.text$mn:0000AC4D                 mov     [ebp+var_70], ecx
.text$mn:0000AC50
.text$mn:0000AC50 loc_AC50:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+69j
.text$mn:0000AC50                 mov     ecx, [ebp+var_68]
.text$mn:0000AC53                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000AC58                 mov     edx, [ebp+var_70]
.text$mn:0000AC5B                 sub     edx, eax
.text$mn:0000AC5D                 push    edx             ; Size
.text$mn:0000AC5E                 mov     ecx, [ebp+var_68]
.text$mn:0000AC61                 call    ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pbase(void)
.text$mn:0000AC66                 push    eax             ; Src
.text$mn:0000AC67                 lea     ecx, [ebp+var_64]
.text$mn:0000AC6A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)
.text$mn:0000AC6F                 mov     [ebp+var_4], 1
.text$mn:0000AC76                 lea     eax, [ebp+var_64]
.text$mn:0000AC79                 push    eax
.text$mn:0000AC7A                 mov     ecx, [ebp+arg_0]
.text$mn:0000AC7D                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:0000AC82                 mov     ecx, [ebp+var_6C]
.text$mn:0000AC85                 or      ecx, 1
.text$mn:0000AC88                 mov     [ebp+var_6C], ecx
.text$mn:0000AC8B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000AC8F                 lea     ecx, [ebp+var_64]
.text$mn:0000AC92                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000AC97                 mov     eax, [ebp+arg_0]
.text$mn:0000AC9A                 jmp     loc_AD43
.text$mn:0000AC9F ; ---------------------------------------------------------------------------
.text$mn:0000AC9F                 jmp     loc_AD43
.text$mn:0000ACA4 ; ---------------------------------------------------------------------------
.text$mn:0000ACA4
.text$mn:0000ACA4 loc_ACA4:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+3Cj
.text$mn:0000ACA4                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+4Cj
.text$mn:0000ACA4                 mov     edx, [ebp+var_68]
.text$mn:0000ACA7                 mov     eax, [edx+3Ch]
.text$mn:0000ACAA                 and     eax, 4
.text$mn:0000ACAD                 jnz     short loc_AD10
.text$mn:0000ACAF                 mov     ecx, [ebp+var_68]
.text$mn:0000ACB2                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000ACB7                 test    eax, eax
.text$mn:0000ACB9                 jz      short loc_AD10
.text$mn:0000ACBB                 mov     ecx, [ebp+var_68]
.text$mn:0000ACBE                 call    ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
.text$mn:0000ACC3                 mov     esi, eax
.text$mn:0000ACC5                 mov     ecx, [ebp+var_68]
.text$mn:0000ACC8                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000ACCD                 sub     esi, eax
.text$mn:0000ACCF                 push    esi             ; Size
.text$mn:0000ACD0                 mov     ecx, [ebp+var_68]
.text$mn:0000ACD3                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000ACD8                 push    eax             ; Src
.text$mn:0000ACD9                 lea     ecx, [ebp+var_48]
.text$mn:0000ACDC                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *,uint)
.text$mn:0000ACE1                 mov     [ebp+var_4], 2
.text$mn:0000ACE8                 lea     ecx, [ebp+var_48]
.text$mn:0000ACEB                 push    ecx
.text$mn:0000ACEC                 mov     ecx, [ebp+arg_0]
.text$mn:0000ACEF                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:0000ACF4                 mov     edx, [ebp+var_6C]
.text$mn:0000ACF7                 or      edx, 1
.text$mn:0000ACFA                 mov     [ebp+var_6C], edx
.text$mn:0000ACFD                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000AD01                 lea     ecx, [ebp+var_48]
.text$mn:0000AD04                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000AD09                 mov     eax, [ebp+arg_0]
.text$mn:0000AD0C                 jmp     short loc_AD43
.text$mn:0000AD0E ; ---------------------------------------------------------------------------
.text$mn:0000AD0E                 jmp     short loc_AD43
.text$mn:0000AD10 ; ---------------------------------------------------------------------------
.text$mn:0000AD10
.text$mn:0000AD10 loc_AD10:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+D1j
.text$mn:0000AD10                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+DDj
.text$mn:0000AD10                 lea     ecx, [ebp+var_2C]
.text$mn:0000AD13                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000AD18                 mov     [ebp+var_4], 3
.text$mn:0000AD1F                 lea     eax, [ebp+var_2C]
.text$mn:0000AD22                 push    eax
.text$mn:0000AD23                 mov     ecx, [ebp+arg_0]
.text$mn:0000AD26                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:0000AD2B                 mov     ecx, [ebp+var_6C]
.text$mn:0000AD2E                 or      ecx, 1
.text$mn:0000AD31                 mov     [ebp+var_6C], ecx
.text$mn:0000AD34                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000AD38                 lea     ecx, [ebp+var_2C]
.text$mn:0000AD3B                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000AD40                 mov     eax, [ebp+arg_0]
.text$mn:0000AD43
.text$mn:0000AD43 loc_AD43:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+BEj
.text$mn:0000AD43                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+C3j ...
.text$mn:0000AD43                 mov     ecx, [ebp+var_C]
.text$mn:0000AD46                 mov     large fs:0, ecx
.text$mn:0000AD4D                 pop     ecx
.text$mn:0000AD4E                 pop     esi
.text$mn:0000AD4F                 mov     ecx, [ebp+var_10]
.text$mn:0000AD52                 xor     ecx, ebp
.text$mn:0000AD54                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000AD59                 mov     esp, ebp
.text$mn:0000AD5B                 pop     ebp
.text$mn:0000AD5C                 retn    4
.text$mn:0000AD5C ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$mn:0000AD5C
.text$mn:0000AD5C ; ---------------------------------------------------------------------------
.text$mn:0000AD5F                 align 10h
.text$mn:0000AD5F _text$mn        ends
.text$mn:0000AD5F
.text$x:0000AD60 ; ===========================================================================
.text$x:0000AD60
.text$x:0000AD60 ; Segment type: Pure code
.text$x:0000AD60 ; Segment permissions: Read/Execute
.text$x:0000AD60 _text$x         segment para public 'CODE' use32
.text$x:0000AD60                 assume cs:_text$x
.text$x:0000AD60                 ;org 0AD60h
.text$x:0000AD60 ; COMDAT (pick associative to section at ABDC)
.text$x:0000AD60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AD60
.text$x:0000AD60 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD60
.text$x:0000AD60
.text$x:0000AD60 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 proc near
.text$x:0000AD60                                         ; DATA XREF: .xdata$x:0000C784o
.text$x:0000AD60                 lea     ecx, [ebp-64h]
.text$x:0000AD63                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AD63 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 endp
.text$x:0000AD63
.text$x:0000AD68
.text$x:0000AD68 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD68
.text$x:0000AD68
.text$x:0000AD68 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1 proc near
.text$x:0000AD68                                         ; DATA XREF: .xdata$x:0000C77Co
.text$x:0000AD68                 mov     eax, [ebp-6Ch]
.text$x:0000AD6B                 and     eax, 1
.text$x:0000AD6E                 jz      $LN11
.text$x:0000AD74                 and     dword ptr [ebp-6Ch], 0FFFFFFFEh
.text$x:0000AD78                 mov     ecx, [ebp+8]
.text$x:0000AD7B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AD80 ; ---------------------------------------------------------------------------
.text$x:0000AD80
.text$x:0000AD80 $LN11:                                  ; CODE XREF: __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1+6j
.text$x:0000AD80                 retn
.text$x:0000AD80 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1 endp
.text$x:0000AD80
.text$x:0000AD81
.text$x:0000AD81 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD81
.text$x:0000AD81
.text$x:0000AD81 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2 proc near
.text$x:0000AD81                                         ; DATA XREF: .xdata$x:0000C78Co
.text$x:0000AD81                 lea     ecx, [ebp-48h]
.text$x:0000AD84                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AD84 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2 endp
.text$x:0000AD84
.text$x:0000AD89
.text$x:0000AD89 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD89
.text$x:0000AD89
.text$x:0000AD89 __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3 proc near
.text$x:0000AD89                                         ; DATA XREF: .xdata$x:0000C794o
.text$x:0000AD89                 lea     ecx, [ebp-2Ch]
.text$x:0000AD8C                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AD8C __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3 endp
.text$x:0000AD8C
.text$x:0000AD91
.text$x:0000AD91 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD91
.text$x:0000AD91
.text$x:0000AD91 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$x:0000AD91                                         ; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::str(void)+5o
.text$x:0000AD91
.text$x:0000AD91 arg_4           = dword ptr  8
.text$x:0000AD91
.text$x:0000AD91                 mov     edx, [esp+arg_4]
.text$x:0000AD95                 lea     eax, [edx+0Ch]
.text$x:0000AD98                 mov     ecx, [edx-6Ch]
.text$x:0000AD9B                 xor     ecx, eax
.text$x:0000AD9D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ADA2                 mov     ecx, [edx-4]
.text$x:0000ADA5                 xor     ecx, eax
.text$x:0000ADA7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ADAC                 mov     eax, offset __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$x:0000ADB1                 jmp     ___CxxFrameHandler3
.text$x:0000ADB1 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$x:0000ADB1
.text$x:0000ADB1 ; ---------------------------------------------------------------------------
.text$x:0000ADB6                 align 4
.text$x:0000ADB6 _text$x         ends
.text$x:0000ADB6
.text$mn:0000ADB8 ; ===========================================================================
.text$mn:0000ADB8
.text$mn:0000ADB8 ; Segment type: Pure code
.text$mn:0000ADB8 ; Segment permissions: Read/Execute
.text$mn:0000ADB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADB8                 assume cs:_text$mn
.text$mn:0000ADB8                 ;org 0ADB8h
.text$mn:0000ADB8 ; COMDAT (pick any)
.text$mn:0000ADB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADB8
.text$mn:0000ADB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADB8
.text$mn:0000ADB8 ; Attributes: bp-based frame
.text$mn:0000ADB8
.text$mn:0000ADB8 ; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::sync(void)
.text$mn:0000ADB8                 public ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
.text$mn:0000ADB8 ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
.text$mn:0000ADB8                                         ; DATA XREF: .rdata:0000CCFCo
.text$mn:0000ADB8                                         ; .rdata:0000CE5Co
.text$mn:0000ADB8
.text$mn:0000ADB8 var_4           = dword ptr -4
.text$mn:0000ADB8
.text$mn:0000ADB8                 push    ebp
.text$mn:0000ADB9                 mov     ebp, esp
.text$mn:0000ADBB                 push    ecx
.text$mn:0000ADBC                 mov     [ebp+var_4], ecx
.text$mn:0000ADBF                 xor     eax, eax
.text$mn:0000ADC1                 mov     esp, ebp
.text$mn:0000ADC3                 pop     ebp
.text$mn:0000ADC4                 retn
.text$mn:0000ADC4 ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ endp
.text$mn:0000ADC4
.text$mn:0000ADC4 ; ---------------------------------------------------------------------------
.text$mn:0000ADC5                 align 4
.text$mn:0000ADC5 _text$mn        ends
.text$mn:0000ADC5
.text$mn:0000ADC8 ; ===========================================================================
.text$mn:0000ADC8
.text$mn:0000ADC8 ; Segment type: Pure code
.text$mn:0000ADC8 ; Segment permissions: Read/Execute
.text$mn:0000ADC8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADC8                 assume cs:_text$mn
.text$mn:0000ADC8                 ;org 0ADC8h
.text$mn:0000ADC8 ; COMDAT (pick any)
.text$mn:0000ADC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADC8
.text$mn:0000ADC8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADC8
.text$mn:0000ADC8 ; Attributes: bp-based frame
.text$mn:0000ADC8
.text$mn:0000ADC8 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000ADC8                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000ADC8 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000ADC8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_9348p
.text$mn:0000ADC8                 push    ebp
.text$mn:0000ADC9                 mov     ebp, esp
.text$mn:0000ADCB                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000ADD0                 pop     ebp
.text$mn:0000ADD1                 retn
.text$mn:0000ADD1 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000ADD1
.text$mn:0000ADD1 ; ---------------------------------------------------------------------------
.text$mn:0000ADD2                 align 4
.text$mn:0000ADD2 _text$mn        ends
.text$mn:0000ADD2
.text$mn:0000ADD4 ; ===========================================================================
.text$mn:0000ADD4
.text$mn:0000ADD4 ; Segment type: Pure code
.text$mn:0000ADD4 ; Segment permissions: Read/Execute
.text$mn:0000ADD4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADD4                 assume cs:_text$mn
.text$mn:0000ADD4                 ;org 0ADD4h
.text$mn:0000ADD4 ; COMDAT (pick any)
.text$mn:0000ADD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADD4
.text$mn:0000ADD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADD4
.text$mn:0000ADD4 ; Attributes: bp-based frame
.text$mn:0000ADD4
.text$mn:0000ADD4 ; public: class std::basic_ostream<char, struct std::char_traits<char>> * __thiscall std::basic_ios<char, struct std::char_traits<char>>::tie(void)const
.text$mn:0000ADD4                 public ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
.text$mn:0000ADD4 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ proc near
.text$mn:0000ADD4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+5Bp
.text$mn:0000ADD4                                         ; std::basic_ostream<char,std::char_traits<char>>::sentry::sentry(std::basic_ostream<char,std::char_traits<char>> &)+71p ...
.text$mn:0000ADD4
.text$mn:0000ADD4 var_4           = dword ptr -4
.text$mn:0000ADD4
.text$mn:0000ADD4                 push    ebp
.text$mn:0000ADD5                 mov     ebp, esp
.text$mn:0000ADD7                 push    ecx
.text$mn:0000ADD8                 mov     [ebp+var_4], ecx
.text$mn:0000ADDB                 mov     eax, [ebp+var_4]
.text$mn:0000ADDE                 mov     eax, [eax+3Ch]
.text$mn:0000ADE1                 mov     esp, ebp
.text$mn:0000ADE3                 pop     ebp
.text$mn:0000ADE4                 retn
.text$mn:0000ADE4 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ endp
.text$mn:0000ADE4
.text$mn:0000ADE4 ; ---------------------------------------------------------------------------
.text$mn:0000ADE5                 align 4
.text$mn:0000ADE5 _text$mn        ends
.text$mn:0000ADE5
.text$mn:0000ADE8 ; ===========================================================================
.text$mn:0000ADE8
.text$mn:0000ADE8 ; Segment type: Pure code
.text$mn:0000ADE8 ; Segment permissions: Read/Execute
.text$mn:0000ADE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADE8                 assume cs:_text$mn
.text$mn:0000ADE8                 ;org 0ADE8h
.text$mn:0000ADE8 ; COMDAT (pick any)
.text$mn:0000ADE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADE8
.text$mn:0000ADE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADE8
.text$mn:0000ADE8 ; Attributes: bp-based frame
.text$mn:0000ADE8
.text$mn:0000ADE8 ; public: static char __cdecl std::char_traits<char>::to_char_type(int const &)
.text$mn:0000ADE8                 public ?to_char_type@?$char_traits@D@std@@SADABH@Z
.text$mn:0000ADE8 ?to_char_type@?$char_traits@D@std@@SADABH@Z proc near
.text$mn:0000ADE8                                         ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+C0p
.text$mn:0000ADE8                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)+2BAp ...
.text$mn:0000ADE8
.text$mn:0000ADE8 arg_0           = dword ptr  8
.text$mn:0000ADE8
.text$mn:0000ADE8                 push    ebp
.text$mn:0000ADE9                 mov     ebp, esp
.text$mn:0000ADEB                 mov     eax, [ebp+arg_0]
.text$mn:0000ADEE                 mov     al, [eax]
.text$mn:0000ADF0                 pop     ebp
.text$mn:0000ADF1                 retn
.text$mn:0000ADF1 ?to_char_type@?$char_traits@D@std@@SADABH@Z endp
.text$mn:0000ADF1
.text$mn:0000ADF1 ; ---------------------------------------------------------------------------
.text$mn:0000ADF2                 align 4
.text$mn:0000ADF2 _text$mn        ends
.text$mn:0000ADF2
.text$mn:0000ADF4 ; ===========================================================================
.text$mn:0000ADF4
.text$mn:0000ADF4 ; Segment type: Pure code
.text$mn:0000ADF4 ; Segment permissions: Read/Execute
.text$mn:0000ADF4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ADF4                 assume cs:_text$mn
.text$mn:0000ADF4                 ;org 0ADF4h
.text$mn:0000ADF4 ; COMDAT (pick any)
.text$mn:0000ADF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADF4
.text$mn:0000ADF4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADF4
.text$mn:0000ADF4 ; Attributes: bp-based frame
.text$mn:0000ADF4
.text$mn:0000ADF4 ; public: static int __cdecl std::char_traits<char>::to_int_type(char const &)
.text$mn:0000ADF4                 public ?to_int_type@?$char_traits@D@std@@SAHABD@Z
.text$mn:0000ADF4 ?to_int_type@?$char_traits@D@std@@SAHABD@Z proc near
.text$mn:0000ADF4                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+3Cp
.text$mn:0000ADF4                                         ; std::basic_streambuf<char,std::char_traits<char>>::sputc(char)+4Dp ...
.text$mn:0000ADF4
.text$mn:0000ADF4 arg_0           = dword ptr  8
.text$mn:0000ADF4
.text$mn:0000ADF4                 push    ebp
.text$mn:0000ADF5                 mov     ebp, esp
.text$mn:0000ADF7                 mov     eax, [ebp+arg_0]
.text$mn:0000ADFA                 movzx   eax, byte ptr [eax]
.text$mn:0000ADFD                 pop     ebp
.text$mn:0000ADFE                 retn
.text$mn:0000ADFE ?to_int_type@?$char_traits@D@std@@SAHABD@Z endp
.text$mn:0000ADFE
.text$mn:0000ADFE ; ---------------------------------------------------------------------------
.text$mn:0000ADFF                 align 10h
.text$mn:0000ADFF _text$mn        ends
.text$mn:0000ADFF
.text$mn:0000AE00 ; ===========================================================================
.text$mn:0000AE00
.text$mn:0000AE00 ; Segment type: Pure code
.text$mn:0000AE00 ; Segment permissions: Read/Execute
.text$mn:0000AE00 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE00                 assume cs:_text$mn
.text$mn:0000AE00                 ;org 0AE00h
.text$mn:0000AE00 ; COMDAT (pick any)
.text$mn:0000AE00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE00
.text$mn:0000AE00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE00
.text$mn:0000AE00 ; Attributes: bp-based frame
.text$mn:0000AE00
.text$mn:0000AE00 ; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::uflow(void)
.text$mn:0000AE00                 public ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
.text$mn:0000AE00 ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
.text$mn:0000AE00                                         ; DATA XREF: .rdata:0000CCE4o
.text$mn:0000AE00                                         ; .rdata:0000CE44o
.text$mn:0000AE00
.text$mn:0000AE00 var_10          = dword ptr -10h
.text$mn:0000AE00 var_C           = dword ptr -0Ch
.text$mn:0000AE00 var_8           = dword ptr -8
.text$mn:0000AE00 var_4           = dword ptr -4
.text$mn:0000AE00
.text$mn:0000AE00                 push    ebp
.text$mn:0000AE01                 mov     ebp, esp
.text$mn:0000AE03                 sub     esp, 10h
.text$mn:0000AE06                 mov     [ebp+var_4], ecx
.text$mn:0000AE09                 mov     eax, [ebp+var_4]
.text$mn:0000AE0C                 mov     edx, [eax]
.text$mn:0000AE0E                 mov     ecx, [ebp+var_4]
.text$mn:0000AE11                 mov     eax, [edx+18h]
.text$mn:0000AE14                 call    eax
.text$mn:0000AE16                 mov     [ebp+var_C], eax
.text$mn:0000AE19                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000AE1E                 mov     [ebp+var_10], eax
.text$mn:0000AE21                 lea     ecx, [ebp+var_C]
.text$mn:0000AE24                 push    ecx
.text$mn:0000AE25                 lea     edx, [ebp+var_10]
.text$mn:0000AE28                 push    edx
.text$mn:0000AE29                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:0000AE2E                 add     esp, 8
.text$mn:0000AE31                 movzx   eax, al
.text$mn:0000AE34                 test    eax, eax
.text$mn:0000AE36                 jz      short loc_AE42
.text$mn:0000AE38                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000AE3D                 mov     [ebp+var_8], eax
.text$mn:0000AE40                 jmp     short loc_AE56
.text$mn:0000AE42 ; ---------------------------------------------------------------------------
.text$mn:0000AE42
.text$mn:0000AE42 loc_AE42:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::uflow(void)+36j
.text$mn:0000AE42                 mov     ecx, [ebp+var_4]
.text$mn:0000AE45                 call    ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Gninc(void)
.text$mn:0000AE4A                 push    eax
.text$mn:0000AE4B                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000AE50                 add     esp, 4
.text$mn:0000AE53                 mov     [ebp+var_8], eax
.text$mn:0000AE56
.text$mn:0000AE56 loc_AE56:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::uflow(void)+40j
.text$mn:0000AE56                 mov     eax, [ebp+var_8]
.text$mn:0000AE59                 mov     esp, ebp
.text$mn:0000AE5B                 pop     ebp
.text$mn:0000AE5C                 retn
.text$mn:0000AE5C ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ endp
.text$mn:0000AE5C
.text$mn:0000AE5C ; ---------------------------------------------------------------------------
.text$mn:0000AE5D                 align 10h
.text$mn:0000AE5D _text$mn        ends
.text$mn:0000AE5D
.text$mn:0000AE60 ; ===========================================================================
.text$mn:0000AE60
.text$mn:0000AE60 ; Segment type: Pure code
.text$mn:0000AE60 ; Segment permissions: Read/Execute
.text$mn:0000AE60 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE60                 assume cs:_text$mn
.text$mn:0000AE60                 ;org 0AE60h
.text$mn:0000AE60 ; COMDAT (pick any)
.text$mn:0000AE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE60
.text$mn:0000AE60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE60
.text$mn:0000AE60 ; Attributes: bp-based frame
.text$mn:0000AE60
.text$mn:0000AE60 ; protected: virtual int __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::underflow(void)
.text$mn:0000AE60                 public ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
.text$mn:0000AE60 ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ proc near
.text$mn:0000AE60                                         ; DATA XREF: .rdata:0000CCE0o
.text$mn:0000AE60
.text$mn:0000AE60 var_4           = dword ptr -4
.text$mn:0000AE60
.text$mn:0000AE60                 push    ebp
.text$mn:0000AE61                 mov     ebp, esp
.text$mn:0000AE63                 push    ecx
.text$mn:0000AE64                 mov     [ebp+var_4], ecx
.text$mn:0000AE67                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000AE6C                 mov     esp, ebp
.text$mn:0000AE6E                 pop     ebp
.text$mn:0000AE6F                 retn
.text$mn:0000AE6F ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ endp
.text$mn:0000AE6F
.text$mn:0000AE6F _text$mn        ends
.text$mn:0000AE6F
.text$mn:0000AE70 ; ===========================================================================
.text$mn:0000AE70
.text$mn:0000AE70 ; Segment type: Pure code
.text$mn:0000AE70 ; Segment permissions: Read/Execute
.text$mn:0000AE70 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE70                 assume cs:_text$mn
.text$mn:0000AE70                 ;org 0AE70h
.text$mn:0000AE70 ; COMDAT (pick any)
.text$mn:0000AE70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE70
.text$mn:0000AE70 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE70
.text$mn:0000AE70 ; Attributes: bp-based frame
.text$mn:0000AE70
.text$mn:0000AE70 ; protected: virtual int __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::underflow(void)
.text$mn:0000AE70                 public ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
.text$mn:0000AE70 ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ proc near
.text$mn:0000AE70                                         ; DATA XREF: .rdata:0000CE40o
.text$mn:0000AE70
.text$mn:0000AE70 var_4           = dword ptr -4
.text$mn:0000AE70
.text$mn:0000AE70                 push    ebp
.text$mn:0000AE71                 mov     ebp, esp
.text$mn:0000AE73                 push    ecx
.text$mn:0000AE74                 push    esi
.text$mn:0000AE75                 mov     [ebp+var_4], ecx
.text$mn:0000AE78                 mov     ecx, [ebp+var_4]
.text$mn:0000AE7B                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AE80                 test    eax, eax
.text$mn:0000AE82                 jnz     short loc_AE93
.text$mn:0000AE84                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000AE89                 jmp     loc_AF5A
.text$mn:0000AE8E ; ---------------------------------------------------------------------------
.text$mn:0000AE8E                 jmp     loc_AF5A
.text$mn:0000AE93 ; ---------------------------------------------------------------------------
.text$mn:0000AE93
.text$mn:0000AE93 loc_AE93:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+12j
.text$mn:0000AE93                 mov     ecx, [ebp+var_4]
.text$mn:0000AE96                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AE9B                 mov     esi, eax
.text$mn:0000AE9D                 mov     ecx, [ebp+var_4]
.text$mn:0000AEA0                 call    ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::egptr(void)
.text$mn:0000AEA5                 cmp     esi, eax
.text$mn:0000AEA7                 jnb     short loc_AEC4
.text$mn:0000AEA9                 mov     ecx, [ebp+var_4]
.text$mn:0000AEAC                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AEB1                 push    eax
.text$mn:0000AEB2                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000AEB7                 add     esp, 4
.text$mn:0000AEBA                 jmp     loc_AF5A
.text$mn:0000AEBF ; ---------------------------------------------------------------------------
.text$mn:0000AEBF                 jmp     loc_AF5A
.text$mn:0000AEC4 ; ---------------------------------------------------------------------------
.text$mn:0000AEC4
.text$mn:0000AEC4 loc_AEC4:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+37j
.text$mn:0000AEC4                 mov     eax, [ebp+var_4]
.text$mn:0000AEC7                 mov     ecx, [eax+3Ch]
.text$mn:0000AECA                 and     ecx, 4
.text$mn:0000AECD                 jnz     short loc_AF01
.text$mn:0000AECF                 mov     ecx, [ebp+var_4]
.text$mn:0000AED2                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AED7                 test    eax, eax
.text$mn:0000AED9                 jz      short loc_AF01
.text$mn:0000AEDB                 mov     ecx, [ebp+var_4]
.text$mn:0000AEDE                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AEE3                 mov     esi, eax
.text$mn:0000AEE5                 mov     ecx, [ebp+var_4]
.text$mn:0000AEE8                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AEED                 cmp     esi, eax
.text$mn:0000AEEF                 ja      short loc_AF0A
.text$mn:0000AEF1                 mov     ecx, [ebp+var_4]
.text$mn:0000AEF4                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AEF9                 mov     edx, [ebp+var_4]
.text$mn:0000AEFC                 cmp     [edx+38h], eax
.text$mn:0000AEFF                 ja      short loc_AF0A
.text$mn:0000AF01
.text$mn:0000AF01 loc_AF01:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+5Dj
.text$mn:0000AF01                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+69j
.text$mn:0000AF01                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000AF06                 jmp     short loc_AF5A
.text$mn:0000AF08 ; ---------------------------------------------------------------------------
.text$mn:0000AF08                 jmp     short loc_AF5A
.text$mn:0000AF0A ; ---------------------------------------------------------------------------
.text$mn:0000AF0A
.text$mn:0000AF0A loc_AF0A:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+7Fj
.text$mn:0000AF0A                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+8Fj
.text$mn:0000AF0A                 mov     ecx, [ebp+var_4]
.text$mn:0000AF0D                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AF12                 mov     ecx, [ebp+var_4]
.text$mn:0000AF15                 cmp     [ecx+38h], eax
.text$mn:0000AF18                 jnb     short loc_AF28
.text$mn:0000AF1A                 mov     ecx, [ebp+var_4]
.text$mn:0000AF1D                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000AF22                 mov     edx, [ebp+var_4]
.text$mn:0000AF25                 mov     [edx+38h], eax
.text$mn:0000AF28
.text$mn:0000AF28 loc_AF28:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+A8j
.text$mn:0000AF28                 mov     eax, [ebp+var_4]
.text$mn:0000AF2B                 mov     ecx, [eax+38h]
.text$mn:0000AF2E                 push    ecx
.text$mn:0000AF2F                 mov     ecx, [ebp+var_4]
.text$mn:0000AF32                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AF37                 push    eax
.text$mn:0000AF38                 mov     ecx, [ebp+var_4]
.text$mn:0000AF3B                 call    ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::eback(void)
.text$mn:0000AF40                 push    eax
.text$mn:0000AF41                 mov     ecx, [ebp+var_4]
.text$mn:0000AF44                 call    ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char>>::setg(char *,char *,char *)
.text$mn:0000AF49                 mov     ecx, [ebp+var_4]
.text$mn:0000AF4C                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000AF51                 push    eax
.text$mn:0000AF52                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000AF57                 add     esp, 4
.text$mn:0000AF5A
.text$mn:0000AF5A loc_AF5A:                               ; CODE XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+19j
.text$mn:0000AF5A                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)+1Ej ...
.text$mn:0000AF5A                 pop     esi
.text$mn:0000AF5B                 mov     esp, ebp
.text$mn:0000AF5D                 pop     ebp
.text$mn:0000AF5E                 retn
.text$mn:0000AF5E ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ endp
.text$mn:0000AF5E
.text$mn:0000AF5E ; ---------------------------------------------------------------------------
.text$mn:0000AF5F                 align 10h
.text$mn:0000AF5F _text$mn        ends
.text$mn:0000AF5F
.text$mn:0000AF60 ; ===========================================================================
.text$mn:0000AF60
.text$mn:0000AF60 ; Segment type: Pure code
.text$mn:0000AF60 ; Segment permissions: Read/Execute
.text$mn:0000AF60 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF60                 assume cs:_text$mn
.text$mn:0000AF60                 ;org 0AF60h
.text$mn:0000AF60 ; COMDAT (pick any)
.text$mn:0000AF60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF60
.text$mn:0000AF60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF60
.text$mn:0000AF60 ; Attributes: bp-based frame
.text$mn:0000AF60
.text$mn:0000AF60 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000AF60                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000AF60 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000AF60                                         ; std::error_code::message(void)+3Dp
.text$mn:0000AF60
.text$mn:0000AF60 var_4           = dword ptr -4
.text$mn:0000AF60
.text$mn:0000AF60                 push    ebp
.text$mn:0000AF61                 mov     ebp, esp
.text$mn:0000AF63                 push    ecx
.text$mn:0000AF64                 mov     [ebp+var_4], ecx
.text$mn:0000AF67                 mov     eax, [ebp+var_4]
.text$mn:0000AF6A                 mov     eax, [eax]
.text$mn:0000AF6C                 mov     esp, ebp
.text$mn:0000AF6E                 pop     ebp
.text$mn:0000AF6F                 retn
.text$mn:0000AF6F ?value@error_code@std@@QBEHXZ endp
.text$mn:0000AF6F
.text$mn:0000AF6F _text$mn        ends
.text$mn:0000AF6F
.text$mn:0000AF70 ; ===========================================================================
.text$mn:0000AF70
.text$mn:0000AF70 ; Segment type: Pure code
.text$mn:0000AF70 ; Segment permissions: Read/Execute
.text$mn:0000AF70 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF70                 assume cs:_text$mn
.text$mn:0000AF70                 ;org 0AF70h
.text$mn:0000AF70 ; COMDAT (pick any)
.text$mn:0000AF70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF70
.text$mn:0000AF70 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF70
.text$mn:0000AF70 ; Attributes: bp-based frame
.text$mn:0000AF70
.text$mn:0000AF70 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000AF70                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000AF70 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000AF70                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000AF70                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000AF70
.text$mn:0000AF70 var_4           = dword ptr -4
.text$mn:0000AF70
.text$mn:0000AF70                 push    ebp
.text$mn:0000AF71                 mov     ebp, esp
.text$mn:0000AF73                 push    ecx
.text$mn:0000AF74                 mov     [ebp+var_4], ecx
.text$mn:0000AF77                 mov     eax, [ebp+var_4]
.text$mn:0000AF7A                 mov     eax, [eax]
.text$mn:0000AF7C                 mov     esp, ebp
.text$mn:0000AF7E                 pop     ebp
.text$mn:0000AF7F                 retn
.text$mn:0000AF7F ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000AF7F
.text$mn:0000AF7F _text$mn        ends
.text$mn:0000AF7F
.text$mn:0000AF80 ; ===========================================================================
.text$mn:0000AF80
.text$mn:0000AF80 ; Segment type: Pure code
.text$mn:0000AF80 ; Segment permissions: Read/Execute
.text$mn:0000AF80 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF80                 assume cs:_text$mn
.text$mn:0000AF80                 ;org 0AF80h
.text$mn:0000AF80 ; COMDAT (pick any)
.text$mn:0000AF80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF80
.text$mn:0000AF80 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF80
.text$mn:0000AF80 ; Attributes: bp-based frame
.text$mn:0000AF80
.text$mn:0000AF80 ; public: char __thiscall std::basic_ios<char, struct std::char_traits<char>>::widen(char)const
.text$mn:0000AF80                 public ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
.text$mn:0000AF80 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z proc near
.text$mn:0000AF80                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)+27p
.text$mn:0000AF80
.text$mn:0000AF80 var_20          = dword ptr -20h
.text$mn:0000AF80 var_1C          = byte ptr -1Ch
.text$mn:0000AF80 var_18          = dword ptr -18h
.text$mn:0000AF80 var_14          = dword ptr -14h
.text$mn:0000AF80 var_10          = dword ptr -10h
.text$mn:0000AF80 var_C           = dword ptr -0Ch
.text$mn:0000AF80 var_4           = dword ptr -4
.text$mn:0000AF80 arg_0           = byte ptr  8
.text$mn:0000AF80
.text$mn:0000AF80                 push    ebp
.text$mn:0000AF81                 mov     ebp, esp
.text$mn:0000AF83                 push    0FFFFFFFFh
.text$mn:0000AF85                 push    offset __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
.text$mn:0000AF8A                 mov     eax, large fs:0
.text$mn:0000AF90                 push    eax
.text$mn:0000AF91                 sub     esp, 14h
.text$mn:0000AF94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AF99                 xor     eax, ebp
.text$mn:0000AF9B                 push    eax
.text$mn:0000AF9C                 lea     eax, [ebp+var_C]
.text$mn:0000AF9F                 mov     large fs:0, eax
.text$mn:0000AFA5                 mov     [ebp+var_10], ecx
.text$mn:0000AFA8                 lea     eax, [ebp+var_1C]
.text$mn:0000AFAB                 push    eax
.text$mn:0000AFAC                 mov     ecx, [ebp+var_10]
.text$mn:0000AFAF                 call    ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc(void)
.text$mn:0000AFB4                 mov     [ebp+var_14], eax
.text$mn:0000AFB7                 mov     ecx, [ebp+var_14]
.text$mn:0000AFBA                 mov     [ebp+var_18], ecx
.text$mn:0000AFBD                 mov     [ebp+var_4], 0
.text$mn:0000AFC4                 mov     edx, [ebp+var_18]
.text$mn:0000AFC7                 push    edx             ; std::locale *
.text$mn:0000AFC8                 call    ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char>>(std::locale const &)
.text$mn:0000AFCD                 add     esp, 4
.text$mn:0000AFD0                 mov     [ebp+var_20], eax
.text$mn:0000AFD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000AFDA                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000AFDD                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:0000AFE2                 movzx   eax, [ebp+arg_0]
.text$mn:0000AFE6                 push    eax
.text$mn:0000AFE7                 mov     ecx, [ebp+var_20]
.text$mn:0000AFEA                 call    ?widen@?$ctype@D@std@@QBEDD@Z ; std::ctype<char>::widen(char)
.text$mn:0000AFEF                 mov     ecx, [ebp+var_C]
.text$mn:0000AFF2                 mov     large fs:0, ecx
.text$mn:0000AFF9                 pop     ecx
.text$mn:0000AFFA                 mov     esp, ebp
.text$mn:0000AFFC                 pop     ebp
.text$mn:0000AFFD                 retn    4
.text$mn:0000AFFD ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z endp
.text$mn:0000AFFD
.text$mn:0000AFFD _text$mn        ends
.text$mn:0000AFFD
.text$x:0000B000 ; ===========================================================================
.text$x:0000B000
.text$x:0000B000 ; Segment type: Pure code
.text$x:0000B000 ; Segment permissions: Read/Execute
.text$x:0000B000 _text$x         segment para public 'CODE' use32
.text$x:0000B000                 assume cs:_text$x
.text$x:0000B000                 ;org 0B000h
.text$x:0000B000 ; COMDAT (pick associative to section at AF80)
.text$x:0000B000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B000
.text$x:0000B000 ; =============== S U B R O U T I N E =======================================
.text$x:0000B000
.text$x:0000B000
.text$x:0000B000 __unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0 proc near
.text$x:0000B000                                         ; DATA XREF: .xdata$x:0000BC98o
.text$x:0000B000                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000B003                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:0000B003 __unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0 endp
.text$x:0000B003
.text$x:0000B008
.text$x:0000B008 ; =============== S U B R O U T I N E =======================================
.text$x:0000B008
.text$x:0000B008
.text$x:0000B008 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z proc near
.text$x:0000B008                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::widen(char)+5o
.text$x:0000B008
.text$x:0000B008 arg_4           = dword ptr  8
.text$x:0000B008
.text$x:0000B008                 mov     edx, [esp+arg_4]
.text$x:0000B00C                 lea     eax, [edx+0Ch]
.text$x:0000B00F                 mov     ecx, [edx-18h]
.text$x:0000B012                 xor     ecx, eax
.text$x:0000B014                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B019                 mov     eax, offset __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
.text$x:0000B01E                 jmp     ___CxxFrameHandler3
.text$x:0000B01E __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z endp
.text$x:0000B01E
.text$x:0000B01E ; ---------------------------------------------------------------------------
.text$x:0000B023                 align 4
.text$x:0000B023 _text$x         ends
.text$x:0000B023
.text$mn:0000B024 ; ===========================================================================
.text$mn:0000B024
.text$mn:0000B024 ; Segment type: Pure code
.text$mn:0000B024 ; Segment permissions: Read/Execute
.text$mn:0000B024 _text$mn        segment para public 'CODE' use32
.text$mn:0000B024                 assume cs:_text$mn
.text$mn:0000B024                 ;org 0B024h
.text$mn:0000B024 ; COMDAT (pick any)
.text$mn:0000B024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B024
.text$mn:0000B024 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B024
.text$mn:0000B024 ; Attributes: bp-based frame
.text$mn:0000B024
.text$mn:0000B024 ; public: char __thiscall std::ctype<char>::widen(char)const
.text$mn:0000B024                 public ?widen@?$ctype@D@std@@QBEDD@Z
.text$mn:0000B024 ?widen@?$ctype@D@std@@QBEDD@Z proc near ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::widen(char)+6Ap
.text$mn:0000B024
.text$mn:0000B024 var_4           = dword ptr -4
.text$mn:0000B024 arg_0           = byte ptr  8
.text$mn:0000B024
.text$mn:0000B024                 push    ebp
.text$mn:0000B025                 mov     ebp, esp
.text$mn:0000B027                 push    ecx
.text$mn:0000B028                 mov     [ebp+var_4], ecx
.text$mn:0000B02B                 movzx   eax, [ebp+arg_0]
.text$mn:0000B02F                 push    eax
.text$mn:0000B030                 mov     ecx, [ebp+var_4]
.text$mn:0000B033                 mov     edx, [ecx]
.text$mn:0000B035                 mov     ecx, [ebp+var_4]
.text$mn:0000B038                 mov     eax, [edx+20h]
.text$mn:0000B03B                 call    eax
.text$mn:0000B03D                 mov     esp, ebp
.text$mn:0000B03F                 pop     ebp
.text$mn:0000B040                 retn    4
.text$mn:0000B040 ?widen@?$ctype@D@std@@QBEDD@Z endp
.text$mn:0000B040
.text$mn:0000B040 ; ---------------------------------------------------------------------------
.text$mn:0000B043                 align 4
.text$mn:0000B043 _text$mn        ends
.text$mn:0000B043
.text$mn:0000B044 ; ===========================================================================
.text$mn:0000B044
.text$mn:0000B044 ; Segment type: Pure code
.text$mn:0000B044 ; Segment permissions: Read/Execute
.text$mn:0000B044 _text$mn        segment para public 'CODE' use32
.text$mn:0000B044                 assume cs:_text$mn
.text$mn:0000B044                 ;org 0B044h
.text$mn:0000B044 ; COMDAT (pick any)
.text$mn:0000B044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B044
.text$mn:0000B044 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B044
.text$mn:0000B044 ; Attributes: bp-based frame
.text$mn:0000B044
.text$mn:0000B044 ; __int64 __thiscall std::ios_base::width(std::ios_base *this, __int64)
.text$mn:0000B044                 public ?width@ios_base@std@@QAE_J_J@Z
.text$mn:0000B044 ?width@ios_base@std@@QAE_J_J@Z proc near
.text$mn:0000B044                                         ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+232p
.text$mn:0000B044                                         ; std::operator<<<std::char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const *)+26Dp
.text$mn:0000B044
.text$mn:0000B044 var_C           = dword ptr -0Ch
.text$mn:0000B044 var_8           = dword ptr -8
.text$mn:0000B044 var_4           = dword ptr -4
.text$mn:0000B044 arg_0           = qword ptr  8
.text$mn:0000B044
.text$mn:0000B044                 push    ebp
.text$mn:0000B045                 mov     ebp, esp
.text$mn:0000B047                 sub     esp, 0Ch
.text$mn:0000B04A                 mov     [ebp+var_4], ecx
.text$mn:0000B04D                 mov     eax, [ebp+var_4]
.text$mn:0000B050                 mov     ecx, [eax+20h]
.text$mn:0000B053                 mov     [ebp+var_C], ecx
.text$mn:0000B056                 mov     edx, [eax+24h]
.text$mn:0000B059                 mov     [ebp+var_8], edx
.text$mn:0000B05C                 mov     eax, [ebp+var_4]
.text$mn:0000B05F                 mov     ecx, dword ptr [ebp+arg_0]
.text$mn:0000B062                 mov     [eax+20h], ecx
.text$mn:0000B065                 mov     edx, dword ptr [ebp+arg_0+4]
.text$mn:0000B068                 mov     [eax+24h], edx
.text$mn:0000B06B                 mov     eax, [ebp+var_C]
.text$mn:0000B06E                 mov     edx, [ebp+var_8]
.text$mn:0000B071                 mov     esp, ebp
.text$mn:0000B073                 pop     ebp
.text$mn:0000B074                 retn    8
.text$mn:0000B074 ?width@ios_base@std@@QAE_J_J@Z endp
.text$mn:0000B074
.text$mn:0000B074 ; ---------------------------------------------------------------------------
.text$mn:0000B077                 align 4
.text$mn:0000B077 _text$mn        ends
.text$mn:0000B077
.text$mn:0000B078 ; ===========================================================================
.text$mn:0000B078
.text$mn:0000B078 ; Segment type: Pure code
.text$mn:0000B078 ; Segment permissions: Read/Execute
.text$mn:0000B078 _text$mn        segment para public 'CODE' use32
.text$mn:0000B078                 assume cs:_text$mn
.text$mn:0000B078                 ;org 0B078h
.text$mn:0000B078 ; COMDAT (pick any)
.text$mn:0000B078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B078
.text$mn:0000B078 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B078
.text$mn:0000B078 ; Attributes: bp-based frame
.text$mn:0000B078
.text$mn:0000B078 ; __int64 __thiscall std::ios_base::width(std::ios_base *__hidden this)
.text$mn:0000B078                 public ?width@ios_base@std@@QBE_JXZ
.text$mn:0000B078 ?width@ios_base@std@@QBE_JXZ proc near  ; CODE XREF: std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+4Bp
.text$mn:0000B078                                         ; std::operator<<<char,std::char_traits<char>,std::allocator<char>>(std::basic_ostream<char,std::char_traits<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+71p ...
.text$mn:0000B078
.text$mn:0000B078 var_4           = dword ptr -4
.text$mn:0000B078
.text$mn:0000B078                 push    ebp
.text$mn:0000B079                 mov     ebp, esp
.text$mn:0000B07B                 push    ecx
.text$mn:0000B07C                 mov     [ebp+var_4], ecx
.text$mn:0000B07F                 mov     ecx, [ebp+var_4]
.text$mn:0000B082                 mov     eax, [ecx+20h]
.text$mn:0000B085                 mov     edx, [ecx+24h]
.text$mn:0000B088                 mov     esp, ebp
.text$mn:0000B08A                 pop     ebp
.text$mn:0000B08B                 retn
.text$mn:0000B08B ?width@ios_base@std@@QBE_JXZ endp
.text$mn:0000B08B
.text$mn:0000B08B _text$mn        ends
.text$mn:0000B08B
.text$mn:0000B08C ; ===========================================================================
.text$mn:0000B08C
.text$mn:0000B08C ; Segment type: Pure code
.text$mn:0000B08C ; Segment permissions: Read/Execute
.text$mn:0000B08C _text$mn        segment para public 'CODE' use32
.text$mn:0000B08C                 assume cs:_text$mn
.text$mn:0000B08C                 ;org 0B08Ch
.text$mn:0000B08C ; COMDAT (pick any)
.text$mn:0000B08C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B08C
.text$mn:0000B08C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B08C
.text$mn:0000B08C ; Attributes: bp-based frame
.text$mn:0000B08C
.text$mn:0000B08C ; int __stdcall std::basic_streambuf<char,std::char_traits<char>>::xsgetn(void *Dst, int, int)
.text$mn:0000B08C                 public ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
.text$mn:0000B08C ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z proc near
.text$mn:0000B08C                                         ; DATA XREF: .rdata:0000CCE8o
.text$mn:0000B08C                                         ; .rdata:0000CE48o
.text$mn:0000B08C
.text$mn:0000B08C var_1C          = qword ptr -1Ch
.text$mn:0000B08C Size            = dword ptr -14h
.text$mn:0000B08C var_10          = dword ptr -10h
.text$mn:0000B08C var_C           = dword ptr -0Ch
.text$mn:0000B08C var_8           = dword ptr -8
.text$mn:0000B08C var_4           = dword ptr -4
.text$mn:0000B08C Dst             = dword ptr  8
.text$mn:0000B08C arg_4           = dword ptr  0Ch
.text$mn:0000B08C arg_8           = dword ptr  10h
.text$mn:0000B08C
.text$mn:0000B08C                 push    ebp
.text$mn:0000B08D                 mov     ebp, esp
.text$mn:0000B08F                 sub     esp, 1Ch
.text$mn:0000B092                 mov     [ebp+var_4], ecx
.text$mn:0000B095                 xorpd   xmm0, xmm0
.text$mn:0000B099                 movlpd  [ebp+var_1C], xmm0
.text$mn:0000B09E
.text$mn:0000B09E loc_B09E:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64):loc_B1B3j
.text$mn:0000B09E                 cmp     [ebp+arg_8], 0
.text$mn:0000B0A2                 jl      loc_B1B8
.text$mn:0000B0A8                 jg      short loc_B0B4
.text$mn:0000B0AA                 cmp     [ebp+arg_4], 0
.text$mn:0000B0AE                 jbe     loc_B1B8
.text$mn:0000B0B4
.text$mn:0000B0B4 loc_B0B4:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+1Cj
.text$mn:0000B0B4                 mov     ecx, [ebp+var_4]
.text$mn:0000B0B7                 call    ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Gnavail(void)
.text$mn:0000B0BC                 mov     [ebp+Size], eax
.text$mn:0000B0BF                 mov     [ebp+var_10], edx
.text$mn:0000B0C2                 cmp     [ebp+var_10], 0
.text$mn:0000B0C6                 jl      short loc_B142
.text$mn:0000B0C8                 jg      short loc_B0D0
.text$mn:0000B0CA                 cmp     [ebp+Size], 0
.text$mn:0000B0CE                 jbe     short loc_B142
.text$mn:0000B0D0
.text$mn:0000B0D0 loc_B0D0:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+3Cj
.text$mn:0000B0D0                 mov     eax, [ebp+arg_8]
.text$mn:0000B0D3                 cmp     eax, [ebp+var_10]
.text$mn:0000B0D6                 jg      short loc_B0EE
.text$mn:0000B0D8                 jl      short loc_B0E2
.text$mn:0000B0DA                 mov     ecx, [ebp+arg_4]
.text$mn:0000B0DD                 cmp     ecx, [ebp+Size]
.text$mn:0000B0E0                 jnb     short loc_B0EE
.text$mn:0000B0E2
.text$mn:0000B0E2 loc_B0E2:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+4Cj
.text$mn:0000B0E2                 mov     edx, [ebp+arg_4]
.text$mn:0000B0E5                 mov     [ebp+Size], edx
.text$mn:0000B0E8                 mov     eax, [ebp+arg_8]
.text$mn:0000B0EB                 mov     [ebp+var_10], eax
.text$mn:0000B0EE
.text$mn:0000B0EE loc_B0EE:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+4Aj
.text$mn:0000B0EE                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+54j
.text$mn:0000B0EE                 mov     ecx, [ebp+Size]
.text$mn:0000B0F1                 push    ecx             ; Size
.text$mn:0000B0F2                 mov     ecx, [ebp+var_4]
.text$mn:0000B0F5                 call    ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::gptr(void)
.text$mn:0000B0FA                 push    eax             ; Src
.text$mn:0000B0FB                 mov     edx, [ebp+Dst]
.text$mn:0000B0FE                 push    edx             ; Dst
.text$mn:0000B0FF                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000B104                 add     esp, 0Ch
.text$mn:0000B107                 mov     eax, [ebp+Size]
.text$mn:0000B10A                 add     eax, [ebp+Dst]
.text$mn:0000B10D                 mov     [ebp+Dst], eax
.text$mn:0000B110                 mov     ecx, dword ptr [ebp+var_1C]
.text$mn:0000B113                 add     ecx, [ebp+Size]
.text$mn:0000B116                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000B119                 adc     edx, [ebp+var_10]
.text$mn:0000B11C                 mov     dword ptr [ebp+var_1C], ecx
.text$mn:0000B11F                 mov     dword ptr [ebp+var_1C+4], edx
.text$mn:0000B122                 mov     eax, [ebp+arg_4]
.text$mn:0000B125                 sub     eax, [ebp+Size]
.text$mn:0000B128                 mov     ecx, [ebp+arg_8]
.text$mn:0000B12B                 sbb     ecx, [ebp+var_10]
.text$mn:0000B12E                 mov     [ebp+arg_4], eax
.text$mn:0000B131                 mov     [ebp+arg_8], ecx
.text$mn:0000B134                 mov     edx, [ebp+Size]
.text$mn:0000B137                 push    edx
.text$mn:0000B138                 mov     ecx, [ebp+var_4]
.text$mn:0000B13B                 call    ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::gbump(int)
.text$mn:0000B140                 jmp     short loc_B1B3
.text$mn:0000B142 ; ---------------------------------------------------------------------------
.text$mn:0000B142
.text$mn:0000B142 loc_B142:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+3Aj
.text$mn:0000B142                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+42j
.text$mn:0000B142                 mov     eax, [ebp+var_4]
.text$mn:0000B145                 mov     edx, [eax]
.text$mn:0000B147                 mov     ecx, [ebp+var_4]
.text$mn:0000B14A                 mov     eax, [edx+1Ch]
.text$mn:0000B14D                 call    eax
.text$mn:0000B14F                 mov     [ebp+var_8], eax
.text$mn:0000B152                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000B157                 mov     [ebp+var_C], eax
.text$mn:0000B15A                 lea     ecx, [ebp+var_8]
.text$mn:0000B15D                 push    ecx
.text$mn:0000B15E                 lea     edx, [ebp+var_C]
.text$mn:0000B161                 push    edx
.text$mn:0000B162                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:0000B167                 add     esp, 8
.text$mn:0000B16A                 movzx   eax, al
.text$mn:0000B16D                 test    eax, eax
.text$mn:0000B16F                 jz      short loc_B175
.text$mn:0000B171                 jmp     short loc_B1B8
.text$mn:0000B173 ; ---------------------------------------------------------------------------
.text$mn:0000B173                 jmp     short loc_B1B3
.text$mn:0000B175 ; ---------------------------------------------------------------------------
.text$mn:0000B175
.text$mn:0000B175 loc_B175:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+E3j
.text$mn:0000B175                 lea     ecx, [ebp+var_8]
.text$mn:0000B178                 push    ecx
.text$mn:0000B179                 call    ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type(int const &)
.text$mn:0000B17E                 add     esp, 4
.text$mn:0000B181                 mov     edx, [ebp+Dst]
.text$mn:0000B184                 mov     [edx], al
.text$mn:0000B186                 mov     eax, [ebp+Dst]
.text$mn:0000B189                 add     eax, 1
.text$mn:0000B18C                 mov     [ebp+Dst], eax
.text$mn:0000B18F                 mov     ecx, dword ptr [ebp+var_1C]
.text$mn:0000B192                 add     ecx, 1
.text$mn:0000B195                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000B198                 adc     edx, 0
.text$mn:0000B19B                 mov     dword ptr [ebp+var_1C], ecx
.text$mn:0000B19E                 mov     dword ptr [ebp+var_1C+4], edx
.text$mn:0000B1A1                 mov     eax, [ebp+arg_4]
.text$mn:0000B1A4                 sub     eax, 1
.text$mn:0000B1A7                 mov     ecx, [ebp+arg_8]
.text$mn:0000B1AA                 sbb     ecx, 0
.text$mn:0000B1AD                 mov     [ebp+arg_4], eax
.text$mn:0000B1B0                 mov     [ebp+arg_8], ecx
.text$mn:0000B1B3
.text$mn:0000B1B3 loc_B1B3:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+B4j
.text$mn:0000B1B3                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+E7j
.text$mn:0000B1B3                 jmp     loc_B09E
.text$mn:0000B1B8 ; ---------------------------------------------------------------------------
.text$mn:0000B1B8
.text$mn:0000B1B8 loc_B1B8:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+16j
.text$mn:0000B1B8                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)+22j ...
.text$mn:0000B1B8                 mov     eax, dword ptr [ebp+var_1C]
.text$mn:0000B1BB                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000B1BE                 mov     esp, ebp
.text$mn:0000B1C0                 pop     ebp
.text$mn:0000B1C1                 retn    0Ch
.text$mn:0000B1C1 ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z endp
.text$mn:0000B1C1
.text$mn:0000B1C1 _text$mn        ends
.text$mn:0000B1C1
.text$mn:0000B1C4 ; ===========================================================================
.text$mn:0000B1C4
.text$mn:0000B1C4 ; Segment type: Pure code
.text$mn:0000B1C4 ; Segment permissions: Read/Execute
.text$mn:0000B1C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B1C4                 assume cs:_text$mn
.text$mn:0000B1C4                 ;org 0B1C4h
.text$mn:0000B1C4 ; COMDAT (pick any)
.text$mn:0000B1C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B1C4
.text$mn:0000B1C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B1C4
.text$mn:0000B1C4 ; Attributes: bp-based frame
.text$mn:0000B1C4
.text$mn:0000B1C4 ; int __stdcall std::basic_streambuf<char,std::char_traits<char>>::xsputn(void *Src, int, int)
.text$mn:0000B1C4                 public ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
.text$mn:0000B1C4 ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z proc near
.text$mn:0000B1C4                                         ; DATA XREF: .rdata:0000CCECo
.text$mn:0000B1C4                                         ; .rdata:0000CE4Co
.text$mn:0000B1C4
.text$mn:0000B1C4 var_1C          = qword ptr -1Ch
.text$mn:0000B1C4 Size            = dword ptr -14h
.text$mn:0000B1C4 var_10          = dword ptr -10h
.text$mn:0000B1C4 var_C           = dword ptr -0Ch
.text$mn:0000B1C4 var_8           = dword ptr -8
.text$mn:0000B1C4 var_4           = dword ptr -4
.text$mn:0000B1C4 Src             = dword ptr  8
.text$mn:0000B1C4 arg_4           = dword ptr  0Ch
.text$mn:0000B1C4 arg_8           = dword ptr  10h
.text$mn:0000B1C4
.text$mn:0000B1C4                 push    ebp
.text$mn:0000B1C5                 mov     ebp, esp
.text$mn:0000B1C7                 sub     esp, 1Ch
.text$mn:0000B1CA                 mov     [ebp+var_4], ecx
.text$mn:0000B1CD                 xorpd   xmm0, xmm0
.text$mn:0000B1D1                 movlpd  [ebp+var_1C], xmm0
.text$mn:0000B1D6
.text$mn:0000B1D6 loc_B1D6:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64):loc_B2E7j
.text$mn:0000B1D6                 cmp     [ebp+arg_8], 0
.text$mn:0000B1DA                 jl      loc_B2EC
.text$mn:0000B1E0                 jg      short loc_B1EC
.text$mn:0000B1E2                 cmp     [ebp+arg_4], 0
.text$mn:0000B1E6                 jbe     loc_B2EC
.text$mn:0000B1EC
.text$mn:0000B1EC loc_B1EC:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+1Cj
.text$mn:0000B1EC                 mov     ecx, [ebp+var_4]
.text$mn:0000B1EF                 call    ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Pnavail(void)
.text$mn:0000B1F4                 mov     [ebp+Size], eax
.text$mn:0000B1F7                 mov     [ebp+var_10], edx
.text$mn:0000B1FA                 cmp     [ebp+var_10], 0
.text$mn:0000B1FE                 jl      short loc_B27A
.text$mn:0000B200                 jg      short loc_B208
.text$mn:0000B202                 cmp     [ebp+Size], 0
.text$mn:0000B206                 jbe     short loc_B27A
.text$mn:0000B208
.text$mn:0000B208 loc_B208:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+3Cj
.text$mn:0000B208                 mov     eax, [ebp+arg_8]
.text$mn:0000B20B                 cmp     eax, [ebp+var_10]
.text$mn:0000B20E                 jg      short loc_B226
.text$mn:0000B210                 jl      short loc_B21A
.text$mn:0000B212                 mov     ecx, [ebp+arg_4]
.text$mn:0000B215                 cmp     ecx, [ebp+Size]
.text$mn:0000B218                 jnb     short loc_B226
.text$mn:0000B21A
.text$mn:0000B21A loc_B21A:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+4Cj
.text$mn:0000B21A                 mov     edx, [ebp+arg_4]
.text$mn:0000B21D                 mov     [ebp+Size], edx
.text$mn:0000B220                 mov     eax, [ebp+arg_8]
.text$mn:0000B223                 mov     [ebp+var_10], eax
.text$mn:0000B226
.text$mn:0000B226 loc_B226:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+4Aj
.text$mn:0000B226                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+54j
.text$mn:0000B226                 mov     ecx, [ebp+Size]
.text$mn:0000B229                 push    ecx             ; Size
.text$mn:0000B22A                 mov     edx, [ebp+Src]
.text$mn:0000B22D                 push    edx             ; Src
.text$mn:0000B22E                 mov     ecx, [ebp+var_4]
.text$mn:0000B231                 call    ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char>>::pptr(void)
.text$mn:0000B236                 push    eax             ; Dst
.text$mn:0000B237                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000B23C                 add     esp, 0Ch
.text$mn:0000B23F                 mov     eax, [ebp+Size]
.text$mn:0000B242                 add     eax, [ebp+Src]
.text$mn:0000B245                 mov     [ebp+Src], eax
.text$mn:0000B248                 mov     ecx, dword ptr [ebp+var_1C]
.text$mn:0000B24B                 add     ecx, [ebp+Size]
.text$mn:0000B24E                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000B251                 adc     edx, [ebp+var_10]
.text$mn:0000B254                 mov     dword ptr [ebp+var_1C], ecx
.text$mn:0000B257                 mov     dword ptr [ebp+var_1C+4], edx
.text$mn:0000B25A                 mov     eax, [ebp+arg_4]
.text$mn:0000B25D                 sub     eax, [ebp+Size]
.text$mn:0000B260                 mov     ecx, [ebp+arg_8]
.text$mn:0000B263                 sbb     ecx, [ebp+var_10]
.text$mn:0000B266                 mov     [ebp+arg_4], eax
.text$mn:0000B269                 mov     [ebp+arg_8], ecx
.text$mn:0000B26C                 mov     edx, [ebp+Size]
.text$mn:0000B26F                 push    edx
.text$mn:0000B270                 mov     ecx, [ebp+var_4]
.text$mn:0000B273                 call    ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbump(int)
.text$mn:0000B278                 jmp     short loc_B2E7
.text$mn:0000B27A ; ---------------------------------------------------------------------------
.text$mn:0000B27A
.text$mn:0000B27A loc_B27A:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+3Aj
.text$mn:0000B27A                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+42j
.text$mn:0000B27A                 mov     eax, [ebp+Src]
.text$mn:0000B27D                 push    eax
.text$mn:0000B27E                 call    ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type(char const &)
.text$mn:0000B283                 add     esp, 4
.text$mn:0000B286                 push    eax
.text$mn:0000B287                 mov     ecx, [ebp+var_4]
.text$mn:0000B28A                 mov     edx, [ecx]
.text$mn:0000B28C                 mov     ecx, [ebp+var_4]
.text$mn:0000B28F                 mov     eax, [edx+0Ch]
.text$mn:0000B292                 call    eax
.text$mn:0000B294                 mov     [ebp+var_8], eax
.text$mn:0000B297                 call    ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof(void)
.text$mn:0000B29C                 mov     [ebp+var_C], eax
.text$mn:0000B29F                 lea     ecx, [ebp+var_8]
.text$mn:0000B2A2                 push    ecx
.text$mn:0000B2A3                 lea     edx, [ebp+var_C]
.text$mn:0000B2A6                 push    edx
.text$mn:0000B2A7                 call    ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type(int const &,int const &)
.text$mn:0000B2AC                 add     esp, 8
.text$mn:0000B2AF                 movzx   eax, al
.text$mn:0000B2B2                 test    eax, eax
.text$mn:0000B2B4                 jz      short loc_B2BA
.text$mn:0000B2B6                 jmp     short loc_B2EC
.text$mn:0000B2B8 ; ---------------------------------------------------------------------------
.text$mn:0000B2B8                 jmp     short loc_B2E7
.text$mn:0000B2BA ; ---------------------------------------------------------------------------
.text$mn:0000B2BA
.text$mn:0000B2BA loc_B2BA:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+F0j
.text$mn:0000B2BA                 mov     ecx, [ebp+Src]
.text$mn:0000B2BD                 add     ecx, 1
.text$mn:0000B2C0                 mov     [ebp+Src], ecx
.text$mn:0000B2C3                 mov     edx, dword ptr [ebp+var_1C]
.text$mn:0000B2C6                 add     edx, 1
.text$mn:0000B2C9                 mov     eax, dword ptr [ebp+var_1C+4]
.text$mn:0000B2CC                 adc     eax, 0
.text$mn:0000B2CF                 mov     dword ptr [ebp+var_1C], edx
.text$mn:0000B2D2                 mov     dword ptr [ebp+var_1C+4], eax
.text$mn:0000B2D5                 mov     ecx, [ebp+arg_4]
.text$mn:0000B2D8                 sub     ecx, 1
.text$mn:0000B2DB                 mov     edx, [ebp+arg_8]
.text$mn:0000B2DE                 sbb     edx, 0
.text$mn:0000B2E1                 mov     [ebp+arg_4], ecx
.text$mn:0000B2E4                 mov     [ebp+arg_8], edx
.text$mn:0000B2E7
.text$mn:0000B2E7 loc_B2E7:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+B4j
.text$mn:0000B2E7                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+F4j
.text$mn:0000B2E7                 jmp     loc_B1D6
.text$mn:0000B2EC ; ---------------------------------------------------------------------------
.text$mn:0000B2EC
.text$mn:0000B2EC loc_B2EC:                               ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+16j
.text$mn:0000B2EC                                         ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)+22j ...
.text$mn:0000B2EC                 mov     eax, dword ptr [ebp+var_1C]
.text$mn:0000B2EF                 mov     edx, dword ptr [ebp+var_1C+4]
.text$mn:0000B2F2                 mov     esp, ebp
.text$mn:0000B2F4                 pop     ebp
.text$mn:0000B2F5                 retn    0Ch
.text$mn:0000B2F5 ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z endp
.text$mn:0000B2F5
.text$mn:0000B2F5 _text$mn        ends
.text$mn:0000B2F5
.text$mn:0000B2F8 ; ===========================================================================
.text$mn:0000B2F8
.text$mn:0000B2F8 ; Segment type: Pure code
.text$mn:0000B2F8 ; Segment permissions: Read/Execute
.text$mn:0000B2F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2F8                 assume cs:_text$mn
.text$mn:0000B2F8                 ;org 0B2F8h
.text$mn:0000B2F8 ; COMDAT (pick any)
.text$mn:0000B2F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2F8
.text$mn:0000B2F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2F8
.text$mn:0000B2F8 ; Attributes: bp-based frame
.text$mn:0000B2F8
.text$mn:0000B2F8                 public _hypot
.text$mn:0000B2F8 _hypot          proc near
.text$mn:0000B2F8
.text$mn:0000B2F8 var_10          = qword ptr -10h
.text$mn:0000B2F8 var_8           = qword ptr -8
.text$mn:0000B2F8 arg_0           = qword ptr  8
.text$mn:0000B2F8 arg_8           = qword ptr  10h
.text$mn:0000B2F8
.text$mn:0000B2F8                 push    ebp
.text$mn:0000B2F9                 mov     ebp, esp
.text$mn:0000B2FB                 sub     esp, 8
.text$mn:0000B2FE                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000B303                 movsd   [esp+8+var_8], xmm0
.text$mn:0000B308                 sub     esp, 8
.text$mn:0000B30B                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000B310                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000B315                 call    __hypot
.text$mn:0000B31A                 add     esp, 10h
.text$mn:0000B31D                 pop     ebp
.text$mn:0000B31E                 retn
.text$mn:0000B31E _hypot          endp
.text$mn:0000B31E
.text$mn:0000B31E ; ---------------------------------------------------------------------------
.text$mn:0000B31F                 align 10h
.text$mn:0000B31F _text$mn        ends
.text$mn:0000B31F
.xdata$x:0000B320 ; ===========================================================================
.xdata$x:0000B320
.xdata$x:0000B320 ; Segment type: Pure data
.xdata$x:0000B320 ; Segment permissions: Read
.xdata$x:0000B320 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B320                 assume cs:_xdata$x
.xdata$x:0000B320                 ;org 0B320h
.xdata$x:0000B320 ; COMDAT (pick associative to section at 8714)
.xdata$x:0000B320 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000B320                                         ; DATA XREF: .xdata$x:0000B330o
.xdata$x:0000B321                 db 0FFh
.xdata$x:0000B322                 db 0FFh
.xdata$x:0000B323                 db 0FFh
.xdata$x:0000B324                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000B328 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000B328                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000B329                 db    5
.xdata$x:0000B32A                 db  93h ; ô
.xdata$x:0000B32B                 db  19h
.xdata$x:0000B32C                 db    1
.xdata$x:0000B32D                 db    0
.xdata$x:0000B32E                 db    0
.xdata$x:0000B32F                 db    0
.xdata$x:0000B330                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000B334                 db    0
.xdata$x:0000B335                 db    0
.xdata$x:0000B336                 db    0
.xdata$x:0000B337                 db    0
.xdata$x:0000B338                 db    0
.xdata$x:0000B339                 db    0
.xdata$x:0000B33A                 db    0
.xdata$x:0000B33B                 db    0
.xdata$x:0000B33C                 db    0
.xdata$x:0000B33D                 db    0
.xdata$x:0000B33E                 db    0
.xdata$x:0000B33F                 db    0
.xdata$x:0000B340                 db    0
.xdata$x:0000B341                 db    0
.xdata$x:0000B342                 db    0
.xdata$x:0000B343                 db    0
.xdata$x:0000B344                 db    0
.xdata$x:0000B345                 db    0
.xdata$x:0000B346                 db    0
.xdata$x:0000B347                 db    0
.xdata$x:0000B348                 db    0
.xdata$x:0000B349                 db    0
.xdata$x:0000B34A                 db    0
.xdata$x:0000B34B                 db    0
.xdata$x:0000B34B _xdata$x        ends
.xdata$x:0000B34B
.xdata$x:0000B34C ; ===========================================================================
.xdata$x:0000B34C
.xdata$x:0000B34C ; Segment type: Pure data
.xdata$x:0000B34C ; Segment permissions: Read
.xdata$x:0000B34C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B34C                 assume cs:_xdata$x
.xdata$x:0000B34C                 ;org 0B34Ch
.xdata$x:0000B34C ; COMDAT (pick associative to section at 4924)
.xdata$x:0000B34C __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B34C                                         ; DATA XREF: .xdata$x:0000B35Co
.xdata$x:0000B34D                 db 0FFh
.xdata$x:0000B34E                 db 0FFh
.xdata$x:0000B34F                 db 0FFh
.xdata$x:0000B350                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000B354 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B354                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000B355                 db    5
.xdata$x:0000B356                 db  93h ; ô
.xdata$x:0000B357                 db  19h
.xdata$x:0000B358                 db    1
.xdata$x:0000B359                 db    0
.xdata$x:0000B35A                 db    0
.xdata$x:0000B35B                 db    0
.xdata$x:0000B35C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000B360                 db    0
.xdata$x:0000B361                 db    0
.xdata$x:0000B362                 db    0
.xdata$x:0000B363                 db    0
.xdata$x:0000B364                 db    0
.xdata$x:0000B365                 db    0
.xdata$x:0000B366                 db    0
.xdata$x:0000B367                 db    0
.xdata$x:0000B368                 db    0
.xdata$x:0000B369                 db    0
.xdata$x:0000B36A                 db    0
.xdata$x:0000B36B                 db    0
.xdata$x:0000B36C                 db    0
.xdata$x:0000B36D                 db    0
.xdata$x:0000B36E                 db    0
.xdata$x:0000B36F                 db    0
.xdata$x:0000B370                 db    0
.xdata$x:0000B371                 db    0
.xdata$x:0000B372                 db    0
.xdata$x:0000B373                 db    0
.xdata$x:0000B374                 db    0
.xdata$x:0000B375                 db    0
.xdata$x:0000B376                 db    0
.xdata$x:0000B377                 db    0
.xdata$x:0000B377 _xdata$x        ends
.xdata$x:0000B377
.xdata$x:0000B378 ; ===========================================================================
.xdata$x:0000B378
.xdata$x:0000B378 ; Segment type: Pure data
.xdata$x:0000B378 ; Segment permissions: Read
.xdata$x:0000B378 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B378                 assume cs:_xdata$x
.xdata$x:0000B378                 ;org 0B378h
.xdata$x:0000B378 ; COMDAT (pick associative to section at 6284)
.xdata$x:0000B378 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B378                                         ; DATA XREF: .xdata$x:0000B388o
.xdata$x:0000B379                 db 0FFh
.xdata$x:0000B37A                 db 0FFh
.xdata$x:0000B37B                 db 0FFh
.xdata$x:0000B37C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000B380 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B380                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000B381                 db    5
.xdata$x:0000B382                 db  93h ; ô
.xdata$x:0000B383                 db  19h
.xdata$x:0000B384                 db    1
.xdata$x:0000B385                 db    0
.xdata$x:0000B386                 db    0
.xdata$x:0000B387                 db    0
.xdata$x:0000B388                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000B38C                 db    0
.xdata$x:0000B38D                 db    0
.xdata$x:0000B38E                 db    0
.xdata$x:0000B38F                 db    0
.xdata$x:0000B390                 db    0
.xdata$x:0000B391                 db    0
.xdata$x:0000B392                 db    0
.xdata$x:0000B393                 db    0
.xdata$x:0000B394                 db    0
.xdata$x:0000B395                 db    0
.xdata$x:0000B396                 db    0
.xdata$x:0000B397                 db    0
.xdata$x:0000B398                 db    0
.xdata$x:0000B399                 db    0
.xdata$x:0000B39A                 db    0
.xdata$x:0000B39B                 db    0
.xdata$x:0000B39C                 db    0
.xdata$x:0000B39D                 db    0
.xdata$x:0000B39E                 db    0
.xdata$x:0000B39F                 db    0
.xdata$x:0000B3A0                 db    0
.xdata$x:0000B3A1                 db    0
.xdata$x:0000B3A2                 db    0
.xdata$x:0000B3A3                 db    0
.xdata$x:0000B3A3 _xdata$x        ends
.xdata$x:0000B3A3
.xdata$x:0000B3A4 ; ===========================================================================
.xdata$x:0000B3A4
.xdata$x:0000B3A4 ; Segment type: Pure data
.xdata$x:0000B3A4 ; Segment permissions: Read
.xdata$x:0000B3A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3A4                 assume cs:_xdata$x
.xdata$x:0000B3A4                 ;org 0B3A4h
.xdata$x:0000B3A4 ; COMDAT (pick associative to section at 48A8)
.xdata$x:0000B3A4 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000B3A4                                         ; DATA XREF: .xdata$x:0000B3B4o
.xdata$x:0000B3A5                 db 0FFh
.xdata$x:0000B3A6                 db 0FFh
.xdata$x:0000B3A7                 db 0FFh
.xdata$x:0000B3A8                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000B3AC __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000B3AC                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000B3AD                 db    5
.xdata$x:0000B3AE                 db  93h ; ô
.xdata$x:0000B3AF                 db  19h
.xdata$x:0000B3B0                 db    1
.xdata$x:0000B3B1                 db    0
.xdata$x:0000B3B2                 db    0
.xdata$x:0000B3B3                 db    0
.xdata$x:0000B3B4                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000B3B8                 db    0
.xdata$x:0000B3B9                 db    0
.xdata$x:0000B3BA                 db    0
.xdata$x:0000B3BB                 db    0
.xdata$x:0000B3BC                 db    0
.xdata$x:0000B3BD                 db    0
.xdata$x:0000B3BE                 db    0
.xdata$x:0000B3BF                 db    0
.xdata$x:0000B3C0                 db    0
.xdata$x:0000B3C1                 db    0
.xdata$x:0000B3C2                 db    0
.xdata$x:0000B3C3                 db    0
.xdata$x:0000B3C4                 db    0
.xdata$x:0000B3C5                 db    0
.xdata$x:0000B3C6                 db    0
.xdata$x:0000B3C7                 db    0
.xdata$x:0000B3C8                 db    0
.xdata$x:0000B3C9                 db    0
.xdata$x:0000B3CA                 db    0
.xdata$x:0000B3CB                 db    0
.xdata$x:0000B3CC                 db    0
.xdata$x:0000B3CD                 db    0
.xdata$x:0000B3CE                 db    0
.xdata$x:0000B3CF                 db    0
.xdata$x:0000B3CF _xdata$x        ends
.xdata$x:0000B3CF
.xdata$x:0000B3D0 ; ===========================================================================
.xdata$x:0000B3D0
.xdata$x:0000B3D0 ; Segment type: Pure data
.xdata$x:0000B3D0 ; Segment permissions: Read
.xdata$x:0000B3D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3D0                 assume cs:_xdata$x
.xdata$x:0000B3D0                 ;org 0B3D0h
.xdata$x:0000B3D0 ; COMDAT (pick associative to section at 620C)
.xdata$x:0000B3D0 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B3D0                                         ; DATA XREF: .xdata$x:0000B3E0o
.xdata$x:0000B3D1                 db 0FFh
.xdata$x:0000B3D2                 db 0FFh
.xdata$x:0000B3D3                 db 0FFh
.xdata$x:0000B3D4                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000B3D8 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B3D8                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000B3D9                 db    5
.xdata$x:0000B3DA                 db  93h ; ô
.xdata$x:0000B3DB                 db  19h
.xdata$x:0000B3DC                 db    1
.xdata$x:0000B3DD                 db    0
.xdata$x:0000B3DE                 db    0
.xdata$x:0000B3DF                 db    0
.xdata$x:0000B3E0                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000B3E4                 db    0
.xdata$x:0000B3E5                 db    0
.xdata$x:0000B3E6                 db    0
.xdata$x:0000B3E7                 db    0
.xdata$x:0000B3E8                 db    0
.xdata$x:0000B3E9                 db    0
.xdata$x:0000B3EA                 db    0
.xdata$x:0000B3EB                 db    0
.xdata$x:0000B3EC                 db    0
.xdata$x:0000B3ED                 db    0
.xdata$x:0000B3EE                 db    0
.xdata$x:0000B3EF                 db    0
.xdata$x:0000B3F0                 db    0
.xdata$x:0000B3F1                 db    0
.xdata$x:0000B3F2                 db    0
.xdata$x:0000B3F3                 db    0
.xdata$x:0000B3F4                 db    0
.xdata$x:0000B3F5                 db    0
.xdata$x:0000B3F6                 db    0
.xdata$x:0000B3F7                 db    0
.xdata$x:0000B3F8                 db    0
.xdata$x:0000B3F9                 db    0
.xdata$x:0000B3FA                 db    0
.xdata$x:0000B3FB                 db    0
.xdata$x:0000B3FB _xdata$x        ends
.xdata$x:0000B3FB
.xdata$x:0000B3FC ; ===========================================================================
.xdata$x:0000B3FC
.xdata$x:0000B3FC ; Segment type: Pure data
.xdata$x:0000B3FC ; Segment permissions: Read
.xdata$x:0000B3FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3FC                 assume cs:_xdata$x
.xdata$x:0000B3FC                 ;org 0B3FCh
.xdata$x:0000B3FC ; COMDAT (pick associative to section at 4DE4)
.xdata$x:0000B3FC __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000B3FC                                         ; DATA XREF: .xdata$x:0000B40Co
.xdata$x:0000B3FD                 db 0FFh
.xdata$x:0000B3FE                 db 0FFh
.xdata$x:0000B3FF                 db 0FFh
.xdata$x:0000B400                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000B404 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000B404                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000B405                 db    5
.xdata$x:0000B406                 db  93h ; ô
.xdata$x:0000B407                 db  19h
.xdata$x:0000B408                 db    1
.xdata$x:0000B409                 db    0
.xdata$x:0000B40A                 db    0
.xdata$x:0000B40B                 db    0
.xdata$x:0000B40C                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.xdata$x:0000B410                 db    0
.xdata$x:0000B411                 db    0
.xdata$x:0000B412                 db    0
.xdata$x:0000B413                 db    0
.xdata$x:0000B414                 db    0
.xdata$x:0000B415                 db    0
.xdata$x:0000B416                 db    0
.xdata$x:0000B417                 db    0
.xdata$x:0000B418                 db    0
.xdata$x:0000B419                 db    0
.xdata$x:0000B41A                 db    0
.xdata$x:0000B41B                 db    0
.xdata$x:0000B41C                 db    0
.xdata$x:0000B41D                 db    0
.xdata$x:0000B41E                 db    0
.xdata$x:0000B41F                 db    0
.xdata$x:0000B420                 db    0
.xdata$x:0000B421                 db    0
.xdata$x:0000B422                 db    0
.xdata$x:0000B423                 db    0
.xdata$x:0000B424                 db    0
.xdata$x:0000B425                 db    0
.xdata$x:0000B426                 db    0
.xdata$x:0000B427                 db    0
.xdata$x:0000B427 _xdata$x        ends
.xdata$x:0000B427
.xdata$x:0000B428 ; ===========================================================================
.xdata$x:0000B428
.xdata$x:0000B428 ; Segment type: Pure data
.xdata$x:0000B428 ; Segment permissions: Read
.xdata$x:0000B428 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B428                 assume cs:_xdata$x
.xdata$x:0000B428                 ;org 0B428h
.xdata$x:0000B428 ; COMDAT (pick associative to section at 4FC8)
.xdata$x:0000B428 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B428                                         ; DATA XREF: .xdata$x:0000B438o
.xdata$x:0000B429                 db 0FFh
.xdata$x:0000B42A                 db 0FFh
.xdata$x:0000B42B                 db 0FFh
.xdata$x:0000B42C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000B430 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B430                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000B431                 db    5
.xdata$x:0000B432                 db  93h ; ô
.xdata$x:0000B433                 db  19h
.xdata$x:0000B434                 db    1
.xdata$x:0000B435                 db    0
.xdata$x:0000B436                 db    0
.xdata$x:0000B437                 db    0
.xdata$x:0000B438                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000B43C                 db    0
.xdata$x:0000B43D                 db    0
.xdata$x:0000B43E                 db    0
.xdata$x:0000B43F                 db    0
.xdata$x:0000B440                 db    0
.xdata$x:0000B441                 db    0
.xdata$x:0000B442                 db    0
.xdata$x:0000B443                 db    0
.xdata$x:0000B444                 db    0
.xdata$x:0000B445                 db    0
.xdata$x:0000B446                 db    0
.xdata$x:0000B447                 db    0
.xdata$x:0000B448                 db    0
.xdata$x:0000B449                 db    0
.xdata$x:0000B44A                 db    0
.xdata$x:0000B44B                 db    0
.xdata$x:0000B44C                 db    0
.xdata$x:0000B44D                 db    0
.xdata$x:0000B44E                 db    0
.xdata$x:0000B44F                 db    0
.xdata$x:0000B450                 db    0
.xdata$x:0000B451                 db    0
.xdata$x:0000B452                 db    0
.xdata$x:0000B453                 db    0
.xdata$x:0000B453 _xdata$x        ends
.xdata$x:0000B453
.xdata$x:0000B454 ; ===========================================================================
.xdata$x:0000B454
.xdata$x:0000B454 ; Segment type: Pure data
.xdata$x:0000B454 ; Segment permissions: Read
.xdata$x:0000B454 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B454                 assume cs:_xdata$x
.xdata$x:0000B454                 ;org 0B454h
.xdata$x:0000B454 ; COMDAT (pick associative to section at 4F2C)
.xdata$x:0000B454 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z db 0FFh
.xdata$x:0000B454                                         ; DATA XREF: .xdata$x:0000B464o
.xdata$x:0000B455                 db 0FFh
.xdata$x:0000B456                 db 0FFh
.xdata$x:0000B457                 db 0FFh
.xdata$x:0000B458                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0
.xdata$x:0000B45C __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z db  22h ; "
.xdata$x:0000B45C                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z+11o
.xdata$x:0000B45D                 db    5
.xdata$x:0000B45E                 db  93h ; ô
.xdata$x:0000B45F                 db  19h
.xdata$x:0000B460                 db    1
.xdata$x:0000B461                 db    0
.xdata$x:0000B462                 db    0
.xdata$x:0000B463                 db    0
.xdata$x:0000B464                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
.xdata$x:0000B468                 align 20h
.xdata$x:0000B468 _xdata$x        ends
.xdata$x:0000B468
.xdata$x:0000B480 ; ===========================================================================
.xdata$x:0000B480
.xdata$x:0000B480 ; Segment type: Pure data
.xdata$x:0000B480 ; Segment permissions: Read
.xdata$x:0000B480 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B480                 assume cs:_xdata$x
.xdata$x:0000B480                 ;org 0B480h
.xdata$x:0000B480 ; COMDAT (pick associative to section at 4E94)
.xdata$x:0000B480 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000B480                                         ; DATA XREF: .xdata$x:0000B490o
.xdata$x:0000B481                 db 0FFh
.xdata$x:0000B482                 db 0FFh
.xdata$x:0000B483                 db 0FFh
.xdata$x:0000B484                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000B488 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000B488                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000B489                 db    5
.xdata$x:0000B48A                 db  93h ; ô
.xdata$x:0000B48B                 db  19h
.xdata$x:0000B48C                 db    1
.xdata$x:0000B48D                 db    0
.xdata$x:0000B48E                 db    0
.xdata$x:0000B48F                 db    0
.xdata$x:0000B490                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000B494                 db    0
.xdata$x:0000B495                 db    0
.xdata$x:0000B496                 db    0
.xdata$x:0000B497                 db    0
.xdata$x:0000B498                 db    0
.xdata$x:0000B499                 db    0
.xdata$x:0000B49A                 db    0
.xdata$x:0000B49B                 db    0
.xdata$x:0000B49C                 db    0
.xdata$x:0000B49D                 db    0
.xdata$x:0000B49E                 db    0
.xdata$x:0000B49F                 db    0
.xdata$x:0000B4A0                 db    0
.xdata$x:0000B4A1                 db    0
.xdata$x:0000B4A2                 db    0
.xdata$x:0000B4A3                 db    0
.xdata$x:0000B4A4                 db    0
.xdata$x:0000B4A5                 db    0
.xdata$x:0000B4A6                 db    0
.xdata$x:0000B4A7                 db    0
.xdata$x:0000B4A8                 db    0
.xdata$x:0000B4A9                 db    0
.xdata$x:0000B4AA                 db    0
.xdata$x:0000B4AB                 db    0
.xdata$x:0000B4AB _xdata$x        ends
.xdata$x:0000B4AB
.xdata$x:0000B4AC ; ===========================================================================
.xdata$x:0000B4AC
.xdata$x:0000B4AC ; Segment type: Pure data
.xdata$x:0000B4AC ; Segment permissions: Read
.xdata$x:0000B4AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B4AC                 assume cs:_xdata$x
.xdata$x:0000B4AC                 ;org 0B4ACh
.xdata$x:0000B4AC ; COMDAT (pick associative to section at 4D40)
.xdata$x:0000B4AC __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000B4AC                                         ; DATA XREF: .xdata$x:0000B4BCo
.xdata$x:0000B4AD                 db 0FFh
.xdata$x:0000B4AE                 db 0FFh
.xdata$x:0000B4AF                 db 0FFh
.xdata$x:0000B4B0                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000B4B4 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000B4B4                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000B4B5                 db    5
.xdata$x:0000B4B6                 db  93h ; ô
.xdata$x:0000B4B7                 db  19h
.xdata$x:0000B4B8                 db    1
.xdata$x:0000B4B9                 db    0
.xdata$x:0000B4BA                 db    0
.xdata$x:0000B4BB                 db    0
.xdata$x:0000B4BC                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000B4C0                 db    0
.xdata$x:0000B4C1                 db    0
.xdata$x:0000B4C2                 db    0
.xdata$x:0000B4C3                 db    0
.xdata$x:0000B4C4                 db    0
.xdata$x:0000B4C5                 db    0
.xdata$x:0000B4C6                 db    0
.xdata$x:0000B4C7                 db    0
.xdata$x:0000B4C8                 db    0
.xdata$x:0000B4C9                 db    0
.xdata$x:0000B4CA                 db    0
.xdata$x:0000B4CB                 db    0
.xdata$x:0000B4CC                 db    0
.xdata$x:0000B4CD                 db    0
.xdata$x:0000B4CE                 db    0
.xdata$x:0000B4CF                 db    0
.xdata$x:0000B4D0                 db    0
.xdata$x:0000B4D1                 db    0
.xdata$x:0000B4D2                 db    0
.xdata$x:0000B4D3                 db    0
.xdata$x:0000B4D4                 db    0
.xdata$x:0000B4D5                 db    0
.xdata$x:0000B4D6                 db    0
.xdata$x:0000B4D7                 db    0
.xdata$x:0000B4D7 _xdata$x        ends
.xdata$x:0000B4D7
.xdata$x:0000B4D8 ; ===========================================================================
.xdata$x:0000B4D8
.xdata$x:0000B4D8 ; Segment type: Pure data
.xdata$x:0000B4D8 ; Segment permissions: Read
.xdata$x:0000B4D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B4D8                 assume cs:_xdata$x
.xdata$x:0000B4D8                 ;org 0B4D8h
.xdata$x:0000B4D8 ; COMDAT (pick associative to section at 64B8)
.xdata$x:0000B4D8 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B4D8                                         ; DATA XREF: .xdata$x:0000B4E8o
.xdata$x:0000B4D9                 db 0FFh
.xdata$x:0000B4DA                 db 0FFh
.xdata$x:0000B4DB                 db 0FFh
.xdata$x:0000B4DC                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000B4E0 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B4E0                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000B4E1                 db    5
.xdata$x:0000B4E2                 db  93h ; ô
.xdata$x:0000B4E3                 db  19h
.xdata$x:0000B4E4                 db    1
.xdata$x:0000B4E5                 db    0
.xdata$x:0000B4E6                 db    0
.xdata$x:0000B4E7                 db    0
.xdata$x:0000B4E8                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000B4EC                 db    0
.xdata$x:0000B4ED                 db    0
.xdata$x:0000B4EE                 db    0
.xdata$x:0000B4EF                 db    0
.xdata$x:0000B4F0                 db    0
.xdata$x:0000B4F1                 db    0
.xdata$x:0000B4F2                 db    0
.xdata$x:0000B4F3                 db    0
.xdata$x:0000B4F4                 db    0
.xdata$x:0000B4F5                 db    0
.xdata$x:0000B4F6                 db    0
.xdata$x:0000B4F7                 db    0
.xdata$x:0000B4F8                 db    0
.xdata$x:0000B4F9                 db    0
.xdata$x:0000B4FA                 db    0
.xdata$x:0000B4FB                 db    0
.xdata$x:0000B4FC                 db    0
.xdata$x:0000B4FD                 db    0
.xdata$x:0000B4FE                 db    0
.xdata$x:0000B4FF                 db    0
.xdata$x:0000B500                 db    0
.xdata$x:0000B501                 db    0
.xdata$x:0000B502                 db    0
.xdata$x:0000B503                 db    0
.xdata$x:0000B503 _xdata$x        ends
.xdata$x:0000B503
.xdata$x:0000B504 ; ===========================================================================
.xdata$x:0000B504
.xdata$x:0000B504 ; Segment type: Pure data
.xdata$x:0000B504 ; Segment permissions: Read
.xdata$x:0000B504 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B504                 assume cs:_xdata$x
.xdata$x:0000B504                 ;org 0B504h
.xdata$x:0000B504 ; COMDAT (pick associative to section at 7CB4)
.xdata$x:0000B504 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000B504                                         ; DATA XREF: .xdata$x:0000B58Co
.xdata$x:0000B505                 db    0
.xdata$x:0000B506                 db    0
.xdata$x:0000B507                 db    0
.xdata$x:0000B508                 db    0
.xdata$x:0000B509                 db    0
.xdata$x:0000B50A                 db    0
.xdata$x:0000B50B                 db    0
.xdata$x:0000B50C                 db    0
.xdata$x:0000B50D                 db    0
.xdata$x:0000B50E                 db    0
.xdata$x:0000B50F                 db    0
.xdata$x:0000B510                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000B514 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000B514                                         ; DATA XREF: .xdata$x:0000B578o
.xdata$x:0000B515                 db    0
.xdata$x:0000B516                 db    0
.xdata$x:0000B517                 db    0
.xdata$x:0000B518                 db    0
.xdata$x:0000B519                 db    0
.xdata$x:0000B51A                 db    0
.xdata$x:0000B51B                 db    0
.xdata$x:0000B51C                 db    0
.xdata$x:0000B51D                 db    0
.xdata$x:0000B51E                 db    0
.xdata$x:0000B51F                 db    0
.xdata$x:0000B520                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000B524 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000B524                                         ; DATA XREF: .xdata$x:0000B54Co
.xdata$x:0000B525                 db 0FFh
.xdata$x:0000B526                 db 0FFh
.xdata$x:0000B527                 db 0FFh
.xdata$x:0000B528                 db    0
.xdata$x:0000B529                 db    0
.xdata$x:0000B52A                 db    0
.xdata$x:0000B52B                 db    0
.xdata$x:0000B52C                 db 0FFh
.xdata$x:0000B52D                 db 0FFh
.xdata$x:0000B52E                 db 0FFh
.xdata$x:0000B52F                 db 0FFh
.xdata$x:0000B530                 db    0
.xdata$x:0000B531                 db    0
.xdata$x:0000B532                 db    0
.xdata$x:0000B533                 db    0
.xdata$x:0000B534                 db    1
.xdata$x:0000B535                 db    0
.xdata$x:0000B536                 db    0
.xdata$x:0000B537                 db    0
.xdata$x:0000B538                 db    0
.xdata$x:0000B539                 db    0
.xdata$x:0000B53A                 db    0
.xdata$x:0000B53B                 db    0
.xdata$x:0000B53C                 db    1
.xdata$x:0000B53D                 db    0
.xdata$x:0000B53E                 db    0
.xdata$x:0000B53F                 db    0
.xdata$x:0000B540                 db    0
.xdata$x:0000B541                 db    0
.xdata$x:0000B542                 db    0
.xdata$x:0000B543                 db    0
.xdata$x:0000B544 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000B544                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000B545                 db    5
.xdata$x:0000B546                 db  93h ; ô
.xdata$x:0000B547                 db  19h
.xdata$x:0000B548                 db    4
.xdata$x:0000B549                 db    0
.xdata$x:0000B54A                 db    0
.xdata$x:0000B54B                 db    0
.xdata$x:0000B54C                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000B550                 db    2
.xdata$x:0000B551                 db    0
.xdata$x:0000B552                 db    0
.xdata$x:0000B553                 db    0
.xdata$x:0000B554                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000B558                 db    0
.xdata$x:0000B559                 db    0
.xdata$x:0000B55A                 db    0
.xdata$x:0000B55B                 db    0
.xdata$x:0000B55C                 db    0
.xdata$x:0000B55D                 db    0
.xdata$x:0000B55E                 db    0
.xdata$x:0000B55F                 db    0
.xdata$x:0000B560                 db    0
.xdata$x:0000B561                 db    0
.xdata$x:0000B562                 db    0
.xdata$x:0000B563                 db    0
.xdata$x:0000B564                 db    0
.xdata$x:0000B565                 db    0
.xdata$x:0000B566                 db    0
.xdata$x:0000B567                 db    0
.xdata$x:0000B568 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000B568                                         ; DATA XREF: .xdata$x:0000B554o
.xdata$x:0000B569                 db    0
.xdata$x:0000B56A                 db    0
.xdata$x:0000B56B                 db    0
.xdata$x:0000B56C                 db    2
.xdata$x:0000B56D                 db    0
.xdata$x:0000B56E                 db    0
.xdata$x:0000B56F                 db    0
.xdata$x:0000B570                 db    3
.xdata$x:0000B571                 db    0
.xdata$x:0000B572                 db    0
.xdata$x:0000B573                 db    0
.xdata$x:0000B574                 db    1
.xdata$x:0000B575                 db    0
.xdata$x:0000B576                 db    0
.xdata$x:0000B577                 db    0
.xdata$x:0000B578                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000B57C                 db    0
.xdata$x:0000B57D                 db    0
.xdata$x:0000B57E                 db    0
.xdata$x:0000B57F                 db    0
.xdata$x:0000B580                 db    0
.xdata$x:0000B581                 db    0
.xdata$x:0000B582                 db    0
.xdata$x:0000B583                 db    0
.xdata$x:0000B584                 db    3
.xdata$x:0000B585                 db    0
.xdata$x:0000B586                 db    0
.xdata$x:0000B587                 db    0
.xdata$x:0000B588                 db    1
.xdata$x:0000B589                 db    0
.xdata$x:0000B58A                 db    0
.xdata$x:0000B58B                 db    0
.xdata$x:0000B58C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000B58C _xdata$x        ends
.xdata$x:0000B58C
.xdata$x:0000B590 ; ===========================================================================
.xdata$x:0000B590
.xdata$x:0000B590 ; Segment type: Pure data
.xdata$x:0000B590 ; Segment permissions: Read
.xdata$x:0000B590 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B590                 assume cs:_xdata$x
.xdata$x:0000B590                 ;org 0B590h
.xdata$x:0000B590 ; COMDAT (pick associative to section at 5EC4)
.xdata$x:0000B590 __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:0000B590                                         ; DATA XREF: .xdata$x:0000B5A0o
.xdata$x:0000B591                 db 0FFh
.xdata$x:0000B592                 db 0FFh
.xdata$x:0000B593                 db 0FFh
.xdata$x:0000B594                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:0000B598 __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:0000B598                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+11o
.xdata$x:0000B599                 db    5
.xdata$x:0000B59A                 db  93h ; ô
.xdata$x:0000B59B                 db  19h
.xdata$x:0000B59C                 db    1
.xdata$x:0000B59D                 db    0
.xdata$x:0000B59E                 db    0
.xdata$x:0000B59F                 db    0
.xdata$x:0000B5A0                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:0000B5A4                 db    0
.xdata$x:0000B5A5                 db    0
.xdata$x:0000B5A6                 db    0
.xdata$x:0000B5A7                 db    0
.xdata$x:0000B5A8                 db    0
.xdata$x:0000B5A9                 db    0
.xdata$x:0000B5AA                 db    0
.xdata$x:0000B5AB                 db    0
.xdata$x:0000B5AC                 db    0
.xdata$x:0000B5AD                 db    0
.xdata$x:0000B5AE                 db    0
.xdata$x:0000B5AF                 db    0
.xdata$x:0000B5B0                 db    0
.xdata$x:0000B5B1                 db    0
.xdata$x:0000B5B2                 db    0
.xdata$x:0000B5B3                 db    0
.xdata$x:0000B5B4                 db    0
.xdata$x:0000B5B5                 db    0
.xdata$x:0000B5B6                 db    0
.xdata$x:0000B5B7                 db    0
.xdata$x:0000B5B8                 db    0
.xdata$x:0000B5B9                 db    0
.xdata$x:0000B5BA                 db    0
.xdata$x:0000B5BB                 db    0
.xdata$x:0000B5BB _xdata$x        ends
.xdata$x:0000B5BB
.xdata$x:0000B5BC ; ===========================================================================
.xdata$x:0000B5BC
.xdata$x:0000B5BC ; Segment type: Pure data
.xdata$x:0000B5BC ; Segment permissions: Read
.xdata$x:0000B5BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B5BC                 assume cs:_xdata$x
.xdata$x:0000B5BC                 ;org 0B5BCh
.xdata$x:0000B5BC ; COMDAT (pick associative to section at 5F54)
.xdata$x:0000B5BC __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000B5BC                                         ; DATA XREF: .xdata$x:0000B5CCo
.xdata$x:0000B5BD                 db 0FFh
.xdata$x:0000B5BE                 db 0FFh
.xdata$x:0000B5BF                 db 0FFh
.xdata$x:0000B5C0                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:0000B5C4 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000B5C4                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:0000B5C5                 db    5
.xdata$x:0000B5C6                 db  93h ; ô
.xdata$x:0000B5C7                 db  19h
.xdata$x:0000B5C8                 db    1
.xdata$x:0000B5C9                 db    0
.xdata$x:0000B5CA                 db    0
.xdata$x:0000B5CB                 db    0
.xdata$x:0000B5CC                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:0000B5D0                 db    0
.xdata$x:0000B5D1                 db    0
.xdata$x:0000B5D2                 db    0
.xdata$x:0000B5D3                 db    0
.xdata$x:0000B5D4                 db    0
.xdata$x:0000B5D5                 db    0
.xdata$x:0000B5D6                 db    0
.xdata$x:0000B5D7                 db    0
.xdata$x:0000B5D8                 db    0
.xdata$x:0000B5D9                 db    0
.xdata$x:0000B5DA                 db    0
.xdata$x:0000B5DB                 db    0
.xdata$x:0000B5DC                 db    0
.xdata$x:0000B5DD                 db    0
.xdata$x:0000B5DE                 db    0
.xdata$x:0000B5DF                 db    0
.xdata$x:0000B5E0                 db    0
.xdata$x:0000B5E1                 db    0
.xdata$x:0000B5E2                 db    0
.xdata$x:0000B5E3                 db    0
.xdata$x:0000B5E4                 db    0
.xdata$x:0000B5E5                 db    0
.xdata$x:0000B5E6                 db    0
.xdata$x:0000B5E7                 db    0
.xdata$x:0000B5E7 _xdata$x        ends
.xdata$x:0000B5E7
.xdata$x:0000B5E8 ; ===========================================================================
.xdata$x:0000B5E8
.xdata$x:0000B5E8 ; Segment type: Pure data
.xdata$x:0000B5E8 ; Segment permissions: Read
.xdata$x:0000B5E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B5E8                 assume cs:_xdata$x
.xdata$x:0000B5E8                 ;org 0B5E8h
.xdata$x:0000B5E8 ; COMDAT (pick associative to section at 6ED0)
.xdata$x:0000B5E8 __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:0000B5E8                                         ; DATA XREF: .xdata$x:0000B5F8o
.xdata$x:0000B5E9                 db 0FFh
.xdata$x:0000B5EA                 db 0FFh
.xdata$x:0000B5EB                 db 0FFh
.xdata$x:0000B5EC                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:0000B5F0 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000B5F0                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:0000B5F1                 db    5
.xdata$x:0000B5F2                 db  93h ; ô
.xdata$x:0000B5F3                 db  19h
.xdata$x:0000B5F4                 db    1
.xdata$x:0000B5F5                 db    0
.xdata$x:0000B5F6                 db    0
.xdata$x:0000B5F7                 db    0
.xdata$x:0000B5F8                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:0000B5FC                 db    0
.xdata$x:0000B5FD                 db    0
.xdata$x:0000B5FE                 db    0
.xdata$x:0000B5FF                 db    0
.xdata$x:0000B600                 db    0
.xdata$x:0000B601                 db    0
.xdata$x:0000B602                 db    0
.xdata$x:0000B603                 db    0
.xdata$x:0000B604                 db    0
.xdata$x:0000B605                 db    0
.xdata$x:0000B606                 db    0
.xdata$x:0000B607                 db    0
.xdata$x:0000B608                 db    0
.xdata$x:0000B609                 db    0
.xdata$x:0000B60A                 db    0
.xdata$x:0000B60B                 db    0
.xdata$x:0000B60C                 db    0
.xdata$x:0000B60D                 db    0
.xdata$x:0000B60E                 db    0
.xdata$x:0000B60F                 db    0
.xdata$x:0000B610                 db    0
.xdata$x:0000B611                 db    0
.xdata$x:0000B612                 db    0
.xdata$x:0000B613                 db    0
.xdata$x:0000B613 _xdata$x        ends
.xdata$x:0000B613
.xdata$x:0000B614 ; ===========================================================================
.xdata$x:0000B614
.xdata$x:0000B614 ; Segment type: Pure data
.xdata$x:0000B614 ; Segment permissions: Read
.xdata$x:0000B614 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B614                 assume cs:_xdata$x
.xdata$x:0000B614                 ;org 0B614h
.xdata$x:0000B614 ; COMDAT (pick associative to section at 5E40)
.xdata$x:0000B614 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000B614                                         ; DATA XREF: .xdata$x:0000B624o
.xdata$x:0000B615                 db 0FFh
.xdata$x:0000B616                 db 0FFh
.xdata$x:0000B617                 db 0FFh
.xdata$x:0000B618                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000B61C __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000B61C                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000B61D                 db    5
.xdata$x:0000B61E                 db  93h ; ô
.xdata$x:0000B61F                 db  19h
.xdata$x:0000B620                 db    1
.xdata$x:0000B621                 db    0
.xdata$x:0000B622                 db    0
.xdata$x:0000B623                 db    0
.xdata$x:0000B624                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:0000B628                 align 20h
.xdata$x:0000B628 _xdata$x        ends
.xdata$x:0000B628
.xdata$x:0000B640 ; ===========================================================================
.xdata$x:0000B640
.xdata$x:0000B640 ; Segment type: Pure data
.xdata$x:0000B640 ; Segment permissions: Read
.xdata$x:0000B640 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B640                 assume cs:_xdata$x
.xdata$x:0000B640                 ;org 0B640h
.xdata$x:0000B640 ; COMDAT (pick associative to section at 577C)
.xdata$x:0000B640 __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000B640                                         ; DATA XREF: __ehhandler$??0_Locinfo@std@@QAE@PBD@Z+11o
.xdata$x:0000B641                 db    5
.xdata$x:0000B642                 db  93h ; ô
.xdata$x:0000B643                 db  19h
.xdata$x:0000B644                 db    7
.xdata$x:0000B645                 db    0
.xdata$x:0000B646                 db    0
.xdata$x:0000B647                 db    0
.xdata$x:0000B648                 dd offset __unwindtable$??0_Locinfo@std@@QAE@PBD@Z
.xdata$x:0000B64C                 db    0
.xdata$x:0000B64D                 db    0
.xdata$x:0000B64E                 db    0
.xdata$x:0000B64F                 db    0
.xdata$x:0000B650                 db    0
.xdata$x:0000B651                 db    0
.xdata$x:0000B652                 db    0
.xdata$x:0000B653                 db    0
.xdata$x:0000B654                 db    0
.xdata$x:0000B655                 db    0
.xdata$x:0000B656                 db    0
.xdata$x:0000B657                 db    0
.xdata$x:0000B658                 db    0
.xdata$x:0000B659                 db    0
.xdata$x:0000B65A                 db    0
.xdata$x:0000B65B                 db    0
.xdata$x:0000B65C                 db    0
.xdata$x:0000B65D                 db    0
.xdata$x:0000B65E                 db    0
.xdata$x:0000B65F                 db    0
.xdata$x:0000B660                 db    0
.xdata$x:0000B661                 db    0
.xdata$x:0000B662                 db    0
.xdata$x:0000B663                 db    0
.xdata$x:0000B664 __unwindtable$??0_Locinfo@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000B664                                         ; DATA XREF: .xdata$x:0000B648o
.xdata$x:0000B665                 db 0FFh
.xdata$x:0000B666                 db 0FFh
.xdata$x:0000B667                 db 0FFh
.xdata$x:0000B668                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
.xdata$x:0000B66C                 align 10h
.xdata$x:0000B670                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
.xdata$x:0000B674                 db    1
.xdata$x:0000B675                 db    0
.xdata$x:0000B676                 db    0
.xdata$x:0000B677                 db    0
.xdata$x:0000B678                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
.xdata$x:0000B67C                 db    2
.xdata$x:0000B67D                 db    0
.xdata$x:0000B67E                 db    0
.xdata$x:0000B67F                 db    0
.xdata$x:0000B680                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
.xdata$x:0000B684                 db    3
.xdata$x:0000B685                 db    0
.xdata$x:0000B686                 db    0
.xdata$x:0000B687                 db    0
.xdata$x:0000B688                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
.xdata$x:0000B68C                 db    4
.xdata$x:0000B68D                 db    0
.xdata$x:0000B68E                 db    0
.xdata$x:0000B68F                 db    0
.xdata$x:0000B690                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
.xdata$x:0000B694                 db    5
.xdata$x:0000B695                 db    0
.xdata$x:0000B696                 db    0
.xdata$x:0000B697                 db    0
.xdata$x:0000B698                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
.xdata$x:0000B698 _xdata$x        ends
.xdata$x:0000B698
.xdata$x:0000B69C ; ===========================================================================
.xdata$x:0000B69C
.xdata$x:0000B69C ; Segment type: Pure data
.xdata$x:0000B69C ; Segment permissions: Read
.xdata$x:0000B69C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B69C                 assume cs:_xdata$x
.xdata$x:0000B69C                 ;org 0B69Ch
.xdata$x:0000B69C ; COMDAT (pick associative to section at 6ABC)
.xdata$x:0000B69C __ehfuncinfo$??1_Locinfo@std@@QAE@XZ db  22h ; "
.xdata$x:0000B69C                                         ; DATA XREF: __ehhandler$??1_Locinfo@std@@QAE@XZ+11o
.xdata$x:0000B69D                 db    5
.xdata$x:0000B69E                 db  93h ; ô
.xdata$x:0000B69F                 db  19h
.xdata$x:0000B6A0                 db    7
.xdata$x:0000B6A1                 db    0
.xdata$x:0000B6A2                 db    0
.xdata$x:0000B6A3                 db    0
.xdata$x:0000B6A4                 dd offset __unwindtable$??1_Locinfo@std@@QAE@XZ
.xdata$x:0000B6A8                 align 20h
.xdata$x:0000B6C0 __unwindtable$??1_Locinfo@std@@QAE@XZ db 0FFh
.xdata$x:0000B6C0                                         ; DATA XREF: .xdata$x:0000B6A4o
.xdata$x:0000B6C1                 db 0FFh
.xdata$x:0000B6C2                 db 0FFh
.xdata$x:0000B6C3                 db 0FFh
.xdata$x:0000B6C4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
.xdata$x:0000B6C8                 db    0
.xdata$x:0000B6C9                 db    0
.xdata$x:0000B6CA                 db    0
.xdata$x:0000B6CB                 db    0
.xdata$x:0000B6CC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
.xdata$x:0000B6D0                 db    1
.xdata$x:0000B6D1                 db    0
.xdata$x:0000B6D2                 db    0
.xdata$x:0000B6D3                 db    0
.xdata$x:0000B6D4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
.xdata$x:0000B6D8                 db    2
.xdata$x:0000B6D9                 db    0
.xdata$x:0000B6DA                 db    0
.xdata$x:0000B6DB                 db    0
.xdata$x:0000B6DC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
.xdata$x:0000B6E0                 db    3
.xdata$x:0000B6E1                 db    0
.xdata$x:0000B6E2                 db    0
.xdata$x:0000B6E3                 db    0
.xdata$x:0000B6E4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
.xdata$x:0000B6E8                 db    4
.xdata$x:0000B6E9                 db    0
.xdata$x:0000B6EA                 db    0
.xdata$x:0000B6EB                 db    0
.xdata$x:0000B6EC                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5
.xdata$x:0000B6F0                 db    5
.xdata$x:0000B6F1                 db    0
.xdata$x:0000B6F2                 db    0
.xdata$x:0000B6F3                 db    0
.xdata$x:0000B6F4                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6
.xdata$x:0000B6F4 _xdata$x        ends
.xdata$x:0000B6F4
.xdata$x:0000B6F8 ; ===========================================================================
.xdata$x:0000B6F8
.xdata$x:0000B6F8 ; Segment type: Pure data
.xdata$x:0000B6F8 ; Segment permissions: Read
.xdata$x:0000B6F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B6F8                 assume cs:_xdata$x
.xdata$x:0000B6F8                 ;org 0B6F8h
.xdata$x:0000B6F8 ; COMDAT (pick associative to section at 7208)
.xdata$x:0000B6F8 __unwindtable$??Bid@locale@std@@QAEIXZ db 0FFh
.xdata$x:0000B6F8                                         ; DATA XREF: .xdata$x:0000B708o
.xdata$x:0000B6F9                 db 0FFh
.xdata$x:0000B6FA                 db 0FFh
.xdata$x:0000B6FB                 db 0FFh
.xdata$x:0000B6FC                 dd offset __unwindfunclet$??Bid@locale@std@@QAEIXZ$0
.xdata$x:0000B700 __ehfuncinfo$??Bid@locale@std@@QAEIXZ db  22h ; "
.xdata$x:0000B700                                         ; DATA XREF: __ehhandler$??Bid@locale@std@@QAEIXZ+11o
.xdata$x:0000B701                 db    5
.xdata$x:0000B702                 db  93h ; ô
.xdata$x:0000B703                 db  19h
.xdata$x:0000B704                 db    1
.xdata$x:0000B705                 db    0
.xdata$x:0000B706                 db    0
.xdata$x:0000B707                 db    0
.xdata$x:0000B708                 dd offset __unwindtable$??Bid@locale@std@@QAEIXZ
.xdata$x:0000B70C                 db    0
.xdata$x:0000B70D                 db    0
.xdata$x:0000B70E                 db    0
.xdata$x:0000B70F                 db    0
.xdata$x:0000B710                 db    0
.xdata$x:0000B711                 db    0
.xdata$x:0000B712                 db    0
.xdata$x:0000B713                 db    0
.xdata$x:0000B714                 db    0
.xdata$x:0000B715                 db    0
.xdata$x:0000B716                 db    0
.xdata$x:0000B717                 db    0
.xdata$x:0000B718                 db    0
.xdata$x:0000B719                 db    0
.xdata$x:0000B71A                 db    0
.xdata$x:0000B71B                 db    0
.xdata$x:0000B71C                 db    0
.xdata$x:0000B71D                 db    0
.xdata$x:0000B71E                 db    0
.xdata$x:0000B71F                 db    0
.xdata$x:0000B720                 db    0
.xdata$x:0000B721                 db    0
.xdata$x:0000B722                 db    0
.xdata$x:0000B723                 db    0
.xdata$x:0000B723 _xdata$x        ends
.xdata$x:0000B723
.xdata$x:0000B724 ; ===========================================================================
.xdata$x:0000B724
.xdata$x:0000B724 ; Segment type: Pure data
.xdata$x:0000B724 ; Segment permissions: Read
.xdata$x:0000B724 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B724                 assume cs:_xdata$x
.xdata$x:0000B724                 ;org 0B724h
.xdata$x:0000B724 ; COMDAT (pick associative to section at 5C24)
.xdata$x:0000B724 __unwindtable$??0facet@locale@std@@IAE@I@Z db 0FFh
.xdata$x:0000B724                                         ; DATA XREF: .xdata$x:0000B734o
.xdata$x:0000B725                 db 0FFh
.xdata$x:0000B726                 db 0FFh
.xdata$x:0000B727                 db 0FFh
.xdata$x:0000B728                 dd offset __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
.xdata$x:0000B72C __ehfuncinfo$??0facet@locale@std@@IAE@I@Z db  22h ; "
.xdata$x:0000B72C                                         ; DATA XREF: __ehhandler$??0facet@locale@std@@IAE@I@Z+11o
.xdata$x:0000B72D                 db    5
.xdata$x:0000B72E                 db  93h ; ô
.xdata$x:0000B72F                 db  19h
.xdata$x:0000B730                 db    1
.xdata$x:0000B731                 db    0
.xdata$x:0000B732                 db    0
.xdata$x:0000B733                 db    0
.xdata$x:0000B734                 dd offset __unwindtable$??0facet@locale@std@@IAE@I@Z
.xdata$x:0000B738                 db    0
.xdata$x:0000B739                 db    0
.xdata$x:0000B73A                 db    0
.xdata$x:0000B73B                 db    0
.xdata$x:0000B73C                 db    0
.xdata$x:0000B73D                 db    0
.xdata$x:0000B73E                 db    0
.xdata$x:0000B73F                 db    0
.xdata$x:0000B740                 db    0
.xdata$x:0000B741                 db    0
.xdata$x:0000B742                 db    0
.xdata$x:0000B743                 db    0
.xdata$x:0000B744                 db    0
.xdata$x:0000B745                 db    0
.xdata$x:0000B746                 db    0
.xdata$x:0000B747                 db    0
.xdata$x:0000B748                 db    0
.xdata$x:0000B749                 db    0
.xdata$x:0000B74A                 db    0
.xdata$x:0000B74B                 db    0
.xdata$x:0000B74C                 db    0
.xdata$x:0000B74D                 db    0
.xdata$x:0000B74E                 db    0
.xdata$x:0000B74F                 db    0
.xdata$x:0000B74F _xdata$x        ends
.xdata$x:0000B74F
.xdata$x:0000B750 ; ===========================================================================
.xdata$x:0000B750
.xdata$x:0000B750 ; Segment type: Pure data
.xdata$x:0000B750 ; Segment permissions: Read
.xdata$x:0000B750 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B750                 assume cs:_xdata$x
.xdata$x:0000B750                 ;org 0B750h
.xdata$x:0000B750 ; COMDAT (pick associative to section at 6D98)
.xdata$x:0000B750 __unwindtable$??1facet@locale@std@@MAE@XZ db 0FFh
.xdata$x:0000B750                                         ; DATA XREF: .xdata$x:0000B760o
.xdata$x:0000B751                 db 0FFh
.xdata$x:0000B752                 db 0FFh
.xdata$x:0000B753                 db 0FFh
.xdata$x:0000B754                 dd offset __unwindfunclet$??1facet@locale@std@@MAE@XZ$0
.xdata$x:0000B758 __ehfuncinfo$??1facet@locale@std@@MAE@XZ db  22h ; "
.xdata$x:0000B758                                         ; DATA XREF: __ehhandler$??1facet@locale@std@@MAE@XZ+11o
.xdata$x:0000B759                 db    5
.xdata$x:0000B75A                 db  93h ; ô
.xdata$x:0000B75B                 db  19h
.xdata$x:0000B75C                 db    1
.xdata$x:0000B75D                 db    0
.xdata$x:0000B75E                 db    0
.xdata$x:0000B75F                 db    0
.xdata$x:0000B760                 dd offset __unwindtable$??1facet@locale@std@@MAE@XZ
.xdata$x:0000B764                 db    0
.xdata$x:0000B765                 db    0
.xdata$x:0000B766                 db    0
.xdata$x:0000B767                 db    0
.xdata$x:0000B768                 db    0
.xdata$x:0000B769                 db    0
.xdata$x:0000B76A                 db    0
.xdata$x:0000B76B                 db    0
.xdata$x:0000B76C                 db    0
.xdata$x:0000B76D                 db    0
.xdata$x:0000B76E                 db    0
.xdata$x:0000B76F                 db    0
.xdata$x:0000B770                 db    0
.xdata$x:0000B771                 db    0
.xdata$x:0000B772                 db    0
.xdata$x:0000B773                 db    0
.xdata$x:0000B774                 db    0
.xdata$x:0000B775                 db    0
.xdata$x:0000B776                 db    0
.xdata$x:0000B777                 db    0
.xdata$x:0000B778                 db    0
.xdata$x:0000B779                 db    0
.xdata$x:0000B77A                 db    0
.xdata$x:0000B77B                 db    0
.xdata$x:0000B77B _xdata$x        ends
.xdata$x:0000B77B
.xdata$x:0000B77C ; ===========================================================================
.xdata$x:0000B77C
.xdata$x:0000B77C ; Segment type: Pure data
.xdata$x:0000B77C ; Segment permissions: Read
.xdata$x:0000B77C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B77C                 assume cs:_xdata$x
.xdata$x:0000B77C                 ;org 0B77Ch
.xdata$x:0000B77C ; COMDAT (pick associative to section at 5B40)
.xdata$x:0000B77C __unwindtable$??0ctype_base@std@@QAE@I@Z db 0FFh
.xdata$x:0000B77C                                         ; DATA XREF: .xdata$x:0000B78Co
.xdata$x:0000B77D                 db 0FFh
.xdata$x:0000B77E                 db 0FFh
.xdata$x:0000B77F                 db 0FFh
.xdata$x:0000B780                 dd offset __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0
.xdata$x:0000B784 __ehfuncinfo$??0ctype_base@std@@QAE@I@Z db  22h ; "
.xdata$x:0000B784                                         ; DATA XREF: __ehhandler$??0ctype_base@std@@QAE@I@Z+11o
.xdata$x:0000B785                 db    5
.xdata$x:0000B786                 db  93h ; ô
.xdata$x:0000B787                 db  19h
.xdata$x:0000B788                 db    1
.xdata$x:0000B789                 db    0
.xdata$x:0000B78A                 db    0
.xdata$x:0000B78B                 db    0
.xdata$x:0000B78C                 dd offset __unwindtable$??0ctype_base@std@@QAE@I@Z
.xdata$x:0000B790                 db    0
.xdata$x:0000B791                 db    0
.xdata$x:0000B792                 db    0
.xdata$x:0000B793                 db    0
.xdata$x:0000B794                 db    0
.xdata$x:0000B795                 db    0
.xdata$x:0000B796                 db    0
.xdata$x:0000B797                 db    0
.xdata$x:0000B798                 db    0
.xdata$x:0000B799                 db    0
.xdata$x:0000B79A                 db    0
.xdata$x:0000B79B                 db    0
.xdata$x:0000B79C                 db    0
.xdata$x:0000B79D                 db    0
.xdata$x:0000B79E                 db    0
.xdata$x:0000B79F                 db    0
.xdata$x:0000B7A0                 db    0
.xdata$x:0000B7A1                 db    0
.xdata$x:0000B7A2                 db    0
.xdata$x:0000B7A3                 db    0
.xdata$x:0000B7A4                 db    0
.xdata$x:0000B7A5                 db    0
.xdata$x:0000B7A6                 db    0
.xdata$x:0000B7A7                 db    0
.xdata$x:0000B7A7 _xdata$x        ends
.xdata$x:0000B7A7
.xdata$x:0000B7A8 ; ===========================================================================
.xdata$x:0000B7A8
.xdata$x:0000B7A8 ; Segment type: Pure data
.xdata$x:0000B7A8 ; Segment permissions: Read
.xdata$x:0000B7A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B7A8                 assume cs:_xdata$x
.xdata$x:0000B7A8                 ;org 0B7A8h
.xdata$x:0000B7A8 ; COMDAT (pick associative to section at 6D0C)
.xdata$x:0000B7A8 __unwindtable$??1ctype_base@std@@UAE@XZ db 0FFh
.xdata$x:0000B7A8                                         ; DATA XREF: .xdata$x:0000B7B8o
.xdata$x:0000B7A9                 db 0FFh
.xdata$x:0000B7AA                 db 0FFh
.xdata$x:0000B7AB                 db 0FFh
.xdata$x:0000B7AC                 dd offset __unwindfunclet$??1ctype_base@std@@UAE@XZ$0
.xdata$x:0000B7B0 __ehfuncinfo$??1ctype_base@std@@UAE@XZ db  22h ; "
.xdata$x:0000B7B0                                         ; DATA XREF: __ehhandler$??1ctype_base@std@@UAE@XZ+11o
.xdata$x:0000B7B1                 db    5
.xdata$x:0000B7B2                 db  93h ; ô
.xdata$x:0000B7B3                 db  19h
.xdata$x:0000B7B4                 db    1
.xdata$x:0000B7B5                 db    0
.xdata$x:0000B7B6                 db    0
.xdata$x:0000B7B7                 db    0
.xdata$x:0000B7B8                 dd offset __unwindtable$??1ctype_base@std@@UAE@XZ
.xdata$x:0000B7BC                 db    0
.xdata$x:0000B7BD                 db    0
.xdata$x:0000B7BE                 db    0
.xdata$x:0000B7BF                 db    0
.xdata$x:0000B7C0                 db    0
.xdata$x:0000B7C1                 db    0
.xdata$x:0000B7C2                 db    0
.xdata$x:0000B7C3                 db    0
.xdata$x:0000B7C4                 db    0
.xdata$x:0000B7C5                 db    0
.xdata$x:0000B7C6                 db    0
.xdata$x:0000B7C7                 db    0
.xdata$x:0000B7C8                 db    0
.xdata$x:0000B7C9                 db    0
.xdata$x:0000B7CA                 db    0
.xdata$x:0000B7CB                 db    0
.xdata$x:0000B7CC                 db    0
.xdata$x:0000B7CD                 db    0
.xdata$x:0000B7CE                 db    0
.xdata$x:0000B7CF                 db    0
.xdata$x:0000B7D0                 db    0
.xdata$x:0000B7D1                 db    0
.xdata$x:0000B7D2                 db    0
.xdata$x:0000B7D3                 db    0
.xdata$x:0000B7D3 _xdata$x        ends
.xdata$x:0000B7D3
.xdata$x:0000B7D4 ; ===========================================================================
.xdata$x:0000B7D4
.xdata$x:0000B7D4 ; Segment type: Pure data
.xdata$x:0000B7D4 ; Segment permissions: Read
.xdata$x:0000B7D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B7D4                 assume cs:_xdata$x
.xdata$x:0000B7D4                 ;org 0B7D4h
.xdata$x:0000B7D4 ; COMDAT (pick associative to section at 50F8)
.xdata$x:0000B7D4 __unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z db 0FFh
.xdata$x:0000B7D4                                         ; DATA XREF: .xdata$x:0000B7E4o
.xdata$x:0000B7D5                 db 0FFh
.xdata$x:0000B7D6                 db 0FFh
.xdata$x:0000B7D7                 db 0FFh
.xdata$x:0000B7D8                 dd offset __unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
.xdata$x:0000B7DC __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z db  22h ; "
.xdata$x:0000B7DC                                         ; DATA XREF: __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z+11o
.xdata$x:0000B7DD                 db    5
.xdata$x:0000B7DE                 db  93h ; ô
.xdata$x:0000B7DF                 db  19h
.xdata$x:0000B7E0                 db    1
.xdata$x:0000B7E1                 db    0
.xdata$x:0000B7E2                 db    0
.xdata$x:0000B7E3                 db    0
.xdata$x:0000B7E4                 dd offset __unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
.xdata$x:0000B7E8                 align 20h
.xdata$x:0000B7E8 _xdata$x        ends
.xdata$x:0000B7E8
.xdata$x:0000B800 ; ===========================================================================
.xdata$x:0000B800
.xdata$x:0000B800 ; Segment type: Pure data
.xdata$x:0000B800 ; Segment permissions: Read
.xdata$x:0000B800 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B800                 assume cs:_xdata$x
.xdata$x:0000B800                 ;org 0B800h
.xdata$x:0000B800 ; COMDAT (pick associative to section at 7F28)
.xdata$x:0000B800 __unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db 0FFh
.xdata$x:0000B800                                         ; DATA XREF: .xdata$x:0000B820o
.xdata$x:0000B801                 db 0FFh
.xdata$x:0000B802                 db 0FFh
.xdata$x:0000B803                 db 0FFh
.xdata$x:0000B804                 dd offset __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
.xdata$x:0000B808                 db    0
.xdata$x:0000B809                 db    0
.xdata$x:0000B80A                 db    0
.xdata$x:0000B80B                 db    0
.xdata$x:0000B80C                 dd offset __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000B810                 db 0FFh
.xdata$x:0000B811                 db 0FFh
.xdata$x:0000B812                 db 0FFh
.xdata$x:0000B813                 db 0FFh
.xdata$x:0000B814                 dd offset __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000B818 __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db  22h ; "
.xdata$x:0000B818                                         ; DATA XREF: __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z+11o
.xdata$x:0000B819                 db    5
.xdata$x:0000B81A                 db  93h ; ô
.xdata$x:0000B81B                 db  19h
.xdata$x:0000B81C                 db    3
.xdata$x:0000B81D                 db    0
.xdata$x:0000B81E                 db    0
.xdata$x:0000B81F                 db    0
.xdata$x:0000B820                 dd offset __unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.xdata$x:0000B824                 db    0
.xdata$x:0000B825                 db    0
.xdata$x:0000B826                 db    0
.xdata$x:0000B827                 db    0
.xdata$x:0000B828                 db    0
.xdata$x:0000B829                 db    0
.xdata$x:0000B82A                 db    0
.xdata$x:0000B82B                 db    0
.xdata$x:0000B82C                 db    0
.xdata$x:0000B82D                 db    0
.xdata$x:0000B82E                 db    0
.xdata$x:0000B82F                 db    0
.xdata$x:0000B830                 db    0
.xdata$x:0000B831                 db    0
.xdata$x:0000B832                 db    0
.xdata$x:0000B833                 db    0
.xdata$x:0000B834                 db    0
.xdata$x:0000B835                 db    0
.xdata$x:0000B836                 db    0
.xdata$x:0000B837                 db    0
.xdata$x:0000B838                 db    0
.xdata$x:0000B839                 db    0
.xdata$x:0000B83A                 db    0
.xdata$x:0000B83B                 db    0
.xdata$x:0000B83B _xdata$x        ends
.xdata$x:0000B83B
.xdata$x:0000B83C ; ===========================================================================
.xdata$x:0000B83C
.xdata$x:0000B83C ; Segment type: Pure data
.xdata$x:0000B83C ; Segment permissions: Read
.xdata$x:0000B83C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B83C                 assume cs:_xdata$x
.xdata$x:0000B83C                 ;org 0B83Ch
.xdata$x:0000B83C ; COMDAT (pick associative to section at 65B4)
.xdata$x:0000B83C __unwindtable$??1?$ctype@D@std@@MAE@XZ db 0FFh
.xdata$x:0000B83C                                         ; DATA XREF: .xdata$x:0000B84Co
.xdata$x:0000B83D                 db 0FFh
.xdata$x:0000B83E                 db 0FFh
.xdata$x:0000B83F                 db 0FFh
.xdata$x:0000B840                 dd offset __unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0
.xdata$x:0000B844 __ehfuncinfo$??1?$ctype@D@std@@MAE@XZ db  22h ; "
.xdata$x:0000B844                                         ; DATA XREF: __ehhandler$??1?$ctype@D@std@@MAE@XZ+11o
.xdata$x:0000B845                 db    5
.xdata$x:0000B846                 db  93h ; ô
.xdata$x:0000B847                 db  19h
.xdata$x:0000B848                 db    1
.xdata$x:0000B849                 db    0
.xdata$x:0000B84A                 db    0
.xdata$x:0000B84B                 db    0
.xdata$x:0000B84C                 dd offset __unwindtable$??1?$ctype@D@std@@MAE@XZ
.xdata$x:0000B850                 db    0
.xdata$x:0000B851                 db    0
.xdata$x:0000B852                 db    0
.xdata$x:0000B853                 db    0
.xdata$x:0000B854                 db    0
.xdata$x:0000B855                 db    0
.xdata$x:0000B856                 db    0
.xdata$x:0000B857                 db    0
.xdata$x:0000B858                 db    0
.xdata$x:0000B859                 db    0
.xdata$x:0000B85A                 db    0
.xdata$x:0000B85B                 db    0
.xdata$x:0000B85C                 db    0
.xdata$x:0000B85D                 db    0
.xdata$x:0000B85E                 db    0
.xdata$x:0000B85F                 db    0
.xdata$x:0000B860                 db    0
.xdata$x:0000B861                 db    0
.xdata$x:0000B862                 db    0
.xdata$x:0000B863                 db    0
.xdata$x:0000B864                 db    0
.xdata$x:0000B865                 db    0
.xdata$x:0000B866                 db    0
.xdata$x:0000B867                 db    0
.xdata$x:0000B867 _xdata$x        ends
.xdata$x:0000B867
.xdata$x:0000B868 ; ===========================================================================
.xdata$x:0000B868
.xdata$x:0000B868 ; Segment type: Pure data
.xdata$x:0000B868 ; Segment permissions: Read
.xdata$x:0000B868 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B868                 assume cs:_xdata$x
.xdata$x:0000B868                 ;org 0B868h
.xdata$x:0000B868 ; COMDAT (pick associative to section at 478C)
.xdata$x:0000B868 __unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z db 0FFh
.xdata$x:0000B868                                         ; DATA XREF: .xdata$x:0000B878o
.xdata$x:0000B869                 db 0FFh
.xdata$x:0000B86A                 db 0FFh
.xdata$x:0000B86B                 db 0FFh
.xdata$x:0000B86C                 dd offset __unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
.xdata$x:0000B870 __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z db  22h ; "
.xdata$x:0000B870                                         ; DATA XREF: __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z+11o
.xdata$x:0000B871                 db    5
.xdata$x:0000B872                 db  93h ; ô
.xdata$x:0000B873                 db  19h
.xdata$x:0000B874                 db    1
.xdata$x:0000B875                 db    0
.xdata$x:0000B876                 db    0
.xdata$x:0000B877                 db    0
.xdata$x:0000B878                 dd offset __unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
.xdata$x:0000B87C                 db    0
.xdata$x:0000B87D                 db    0
.xdata$x:0000B87E                 db    0
.xdata$x:0000B87F                 db    0
.xdata$x:0000B880                 db    0
.xdata$x:0000B881                 db    0
.xdata$x:0000B882                 db    0
.xdata$x:0000B883                 db    0
.xdata$x:0000B884                 db    0
.xdata$x:0000B885                 db    0
.xdata$x:0000B886                 db    0
.xdata$x:0000B887                 db    0
.xdata$x:0000B888                 db    0
.xdata$x:0000B889                 db    0
.xdata$x:0000B88A                 db    0
.xdata$x:0000B88B                 db    0
.xdata$x:0000B88C                 db    0
.xdata$x:0000B88D                 db    0
.xdata$x:0000B88E                 db    0
.xdata$x:0000B88F                 db    0
.xdata$x:0000B890                 db    0
.xdata$x:0000B891                 db    0
.xdata$x:0000B892                 db    0
.xdata$x:0000B893                 db    0
.xdata$x:0000B893 _xdata$x        ends
.xdata$x:0000B893
.xdata$x:0000B894 ; ===========================================================================
.xdata$x:0000B894
.xdata$x:0000B894 ; Segment type: Pure data
.xdata$x:0000B894 ; Segment permissions: Read
.xdata$x:0000B894 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B894                 assume cs:_xdata$x
.xdata$x:0000B894                 ;org 0B894h
.xdata$x:0000B894 ; COMDAT (pick associative to section at 9E48)
.xdata$x:0000B894 __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db 0FFh
.xdata$x:0000B894                                         ; DATA XREF: .xdata$x:0000B8A4o
.xdata$x:0000B895                 db 0FFh
.xdata$x:0000B896                 db 0FFh
.xdata$x:0000B897                 db 0FFh
.xdata$x:0000B898                 dd offset __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
.xdata$x:0000B89C __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db  22h ; "
.xdata$x:0000B89C                                         ; DATA XREF: __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ+11o
.xdata$x:0000B89D                 db    5
.xdata$x:0000B89E                 db  93h ; ô
.xdata$x:0000B89F                 db  19h
.xdata$x:0000B8A0                 db    1
.xdata$x:0000B8A1                 db    0
.xdata$x:0000B8A2                 db    0
.xdata$x:0000B8A3                 db    0
.xdata$x:0000B8A4                 dd offset __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.xdata$x:0000B8A8                 align 20h
.xdata$x:0000B8A8 _xdata$x        ends
.xdata$x:0000B8A8
.xdata$x:0000B8C0 ; ===========================================================================
.xdata$x:0000B8C0
.xdata$x:0000B8C0 ; Segment type: Pure data
.xdata$x:0000B8C0 ; Segment permissions: Read
.xdata$x:0000B8C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B8C0                 assume cs:_xdata$x
.xdata$x:0000B8C0                 ;org 0B8C0h
.xdata$x:0000B8C0 ; COMDAT (pick associative to section at 8594)
.xdata$x:0000B8C0 __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db 0FFh
.xdata$x:0000B8C0                                         ; DATA XREF: .xdata$x:0000B8E0o
.xdata$x:0000B8C1                 db 0FFh
.xdata$x:0000B8C2                 db 0FFh
.xdata$x:0000B8C3                 db 0FFh
.xdata$x:0000B8C4                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2
.xdata$x:0000B8C8                 db    0
.xdata$x:0000B8C9                 db    0
.xdata$x:0000B8CA                 db    0
.xdata$x:0000B8CB                 db    0
.xdata$x:0000B8CC                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
.xdata$x:0000B8D0                 db    1
.xdata$x:0000B8D1                 db    0
.xdata$x:0000B8D2                 db    0
.xdata$x:0000B8D3                 db    0
.xdata$x:0000B8D4                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
.xdata$x:0000B8D8 __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db  22h ; "
.xdata$x:0000B8D8                                         ; DATA XREF: __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+1Bo
.xdata$x:0000B8D9                 db    5
.xdata$x:0000B8DA                 db  93h ; ô
.xdata$x:0000B8DB                 db  19h
.xdata$x:0000B8DC                 db    3
.xdata$x:0000B8DD                 db    0
.xdata$x:0000B8DE                 db    0
.xdata$x:0000B8DF                 db    0
.xdata$x:0000B8E0                 dd offset __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.xdata$x:0000B8E4                 db    0
.xdata$x:0000B8E5                 db    0
.xdata$x:0000B8E6                 db    0
.xdata$x:0000B8E7                 db    0
.xdata$x:0000B8E8                 db    0
.xdata$x:0000B8E9                 db    0
.xdata$x:0000B8EA                 db    0
.xdata$x:0000B8EB                 db    0
.xdata$x:0000B8EC                 db    0
.xdata$x:0000B8ED                 db    0
.xdata$x:0000B8EE                 db    0
.xdata$x:0000B8EF                 db    0
.xdata$x:0000B8F0                 db    0
.xdata$x:0000B8F1                 db    0
.xdata$x:0000B8F2                 db    0
.xdata$x:0000B8F3                 db    0
.xdata$x:0000B8F4                 db    0
.xdata$x:0000B8F5                 db    0
.xdata$x:0000B8F6                 db    0
.xdata$x:0000B8F7                 db    0
.xdata$x:0000B8F8                 db    0
.xdata$x:0000B8F9                 db    0
.xdata$x:0000B8FA                 db    0
.xdata$x:0000B8FB                 db    0
.xdata$x:0000B8FB _xdata$x        ends
.xdata$x:0000B8FB
.xdata$x:0000B8FC ; ===========================================================================
.xdata$x:0000B8FC
.xdata$x:0000B8FC ; Segment type: Pure data
.xdata$x:0000B8FC ; Segment permissions: Read
.xdata$x:0000B8FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B8FC                 assume cs:_xdata$x
.xdata$x:0000B8FC                 ;org 0B8FCh
.xdata$x:0000B8FC ; COMDAT (pick associative to section at 5924)
.xdata$x:0000B8FC __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:0000B8FC                                         ; DATA XREF: .xdata$x:0000B924o
.xdata$x:0000B8FD                 db 0FFh
.xdata$x:0000B8FE                 db 0FFh
.xdata$x:0000B8FF                 db 0FFh
.xdata$x:0000B900                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:0000B904                 db 0FFh
.xdata$x:0000B905                 db 0FFh
.xdata$x:0000B906                 db 0FFh
.xdata$x:0000B907                 db 0FFh
.xdata$x:0000B908                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
.xdata$x:0000B90C                 db    1
.xdata$x:0000B90D                 db    0
.xdata$x:0000B90E                 db    0
.xdata$x:0000B90F                 db    0
.xdata$x:0000B910                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:0000B914                 db 0FFh
.xdata$x:0000B915                 db 0FFh
.xdata$x:0000B916                 db 0FFh
.xdata$x:0000B917                 db 0FFh
.xdata$x:0000B918                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:0000B91C __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:0000B91C                                         ; DATA XREF: __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+1Bo
.xdata$x:0000B91D                 db    5
.xdata$x:0000B91E                 db  93h ; ô
.xdata$x:0000B91F                 db  19h
.xdata$x:0000B920                 db    4
.xdata$x:0000B921                 db    0
.xdata$x:0000B922                 db    0
.xdata$x:0000B923                 db    0
.xdata$x:0000B924                 dd offset __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:0000B928                 align 20h
.xdata$x:0000B928 _xdata$x        ends
.xdata$x:0000B928
.xdata$x:0000B940 ; ===========================================================================
.xdata$x:0000B940
.xdata$x:0000B940 ; Segment type: Pure data
.xdata$x:0000B940 ; Segment permissions: Read
.xdata$x:0000B940 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B940                 assume cs:_xdata$x
.xdata$x:0000B940                 ;org 0B940h
.xdata$x:0000B940 ; COMDAT (pick associative to section at 6C2C)
.xdata$x:0000B940 __unwindtable$??1_System_error@std@@UAE@XZ db 0FFh
.xdata$x:0000B940                                         ; DATA XREF: .xdata$x:0000B950o
.xdata$x:0000B941                 db 0FFh
.xdata$x:0000B942                 db 0FFh
.xdata$x:0000B943                 db 0FFh
.xdata$x:0000B944                 dd offset __unwindfunclet$??1_System_error@std@@UAE@XZ$0
.xdata$x:0000B948 __ehfuncinfo$??1_System_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000B948                                         ; DATA XREF: __ehhandler$??1_System_error@std@@UAE@XZ+11o
.xdata$x:0000B949                 db    5
.xdata$x:0000B94A                 db  93h ; ô
.xdata$x:0000B94B                 db  19h
.xdata$x:0000B94C                 db    1
.xdata$x:0000B94D                 db    0
.xdata$x:0000B94E                 db    0
.xdata$x:0000B94F                 db    0
.xdata$x:0000B950                 dd offset __unwindtable$??1_System_error@std@@UAE@XZ
.xdata$x:0000B954                 db    0
.xdata$x:0000B955                 db    0
.xdata$x:0000B956                 db    0
.xdata$x:0000B957                 db    0
.xdata$x:0000B958                 db    0
.xdata$x:0000B959                 db    0
.xdata$x:0000B95A                 db    0
.xdata$x:0000B95B                 db    0
.xdata$x:0000B95C                 db    0
.xdata$x:0000B95D                 db    0
.xdata$x:0000B95E                 db    0
.xdata$x:0000B95F                 db    0
.xdata$x:0000B960                 db    0
.xdata$x:0000B961                 db    0
.xdata$x:0000B962                 db    0
.xdata$x:0000B963                 db    0
.xdata$x:0000B964                 db    0
.xdata$x:0000B965                 db    0
.xdata$x:0000B966                 db    0
.xdata$x:0000B967                 db    0
.xdata$x:0000B968                 db    0
.xdata$x:0000B969                 db    0
.xdata$x:0000B96A                 db    0
.xdata$x:0000B96B                 db    0
.xdata$x:0000B96B _xdata$x        ends
.xdata$x:0000B96B
.xdata$x:0000B96C ; ===========================================================================
.xdata$x:0000B96C
.xdata$x:0000B96C ; Segment type: Pure data
.xdata$x:0000B96C ; Segment permissions: Read
.xdata$x:0000B96C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B96C                 assume cs:_xdata$x
.xdata$x:0000B96C                 ;org 0B96Ch
.xdata$x:0000B96C ; COMDAT (pick associative to section at 5A30)
.xdata$x:0000B96C __unwindtable$??0_System_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000B96C                                         ; DATA XREF: .xdata$x:0000B97Co
.xdata$x:0000B96D                 db 0FFh
.xdata$x:0000B96E                 db 0FFh
.xdata$x:0000B96F                 db 0FFh
.xdata$x:0000B970                 dd offset __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000B974 __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000B974                                         ; DATA XREF: __ehhandler$??0_System_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000B975                 db    5
.xdata$x:0000B976                 db  93h ; ô
.xdata$x:0000B977                 db  19h
.xdata$x:0000B978                 db    1
.xdata$x:0000B979                 db    0
.xdata$x:0000B97A                 db    0
.xdata$x:0000B97B                 db    0
.xdata$x:0000B97C                 dd offset __unwindtable$??0_System_error@std@@QAE@ABV01@@Z
.xdata$x:0000B980                 db    0
.xdata$x:0000B981                 db    0
.xdata$x:0000B982                 db    0
.xdata$x:0000B983                 db    0
.xdata$x:0000B984                 db    0
.xdata$x:0000B985                 db    0
.xdata$x:0000B986                 db    0
.xdata$x:0000B987                 db    0
.xdata$x:0000B988                 db    0
.xdata$x:0000B989                 db    0
.xdata$x:0000B98A                 db    0
.xdata$x:0000B98B                 db    0
.xdata$x:0000B98C                 db    0
.xdata$x:0000B98D                 db    0
.xdata$x:0000B98E                 db    0
.xdata$x:0000B98F                 db    0
.xdata$x:0000B990                 db    0
.xdata$x:0000B991                 db    0
.xdata$x:0000B992                 db    0
.xdata$x:0000B993                 db    0
.xdata$x:0000B994                 db    0
.xdata$x:0000B995                 db    0
.xdata$x:0000B996                 db    0
.xdata$x:0000B997                 db    0
.xdata$x:0000B997 _xdata$x        ends
.xdata$x:0000B997
.xdata$x:0000B998 ; ===========================================================================
.xdata$x:0000B998
.xdata$x:0000B998 ; Segment type: Pure data
.xdata$x:0000B998 ; Segment permissions: Read
.xdata$x:0000B998 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B998                 assume cs:_xdata$x
.xdata$x:0000B998                 ;org 0B998h
.xdata$x:0000B998 ; COMDAT (pick associative to section at 6148)
.xdata$x:0000B998 __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z db 0FFh
.xdata$x:0000B998                                         ; DATA XREF: .xdata$x:0000B9B8o
.xdata$x:0000B999                 db 0FFh
.xdata$x:0000B99A                 db 0FFh
.xdata$x:0000B99B                 db 0FFh
.xdata$x:0000B99C                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
.xdata$x:0000B9A0                 db    0
.xdata$x:0000B9A1                 db    0
.xdata$x:0000B9A2                 db    0
.xdata$x:0000B9A3                 db    0
.xdata$x:0000B9A4                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:0000B9A8                 db 0FFh
.xdata$x:0000B9A9                 db 0FFh
.xdata$x:0000B9AA                 db 0FFh
.xdata$x:0000B9AB                 db 0FFh
.xdata$x:0000B9AC                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:0000B9B0 __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z db  22h ; "
.xdata$x:0000B9B0                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z+1Bo
.xdata$x:0000B9B1                 db    5
.xdata$x:0000B9B2                 db  93h ; ô
.xdata$x:0000B9B3                 db  19h
.xdata$x:0000B9B4                 db    3
.xdata$x:0000B9B5                 db    0
.xdata$x:0000B9B6                 db    0
.xdata$x:0000B9B7                 db    0
.xdata$x:0000B9B8                 dd offset __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.xdata$x:0000B9BC                 db    0
.xdata$x:0000B9BD                 db    0
.xdata$x:0000B9BE                 db    0
.xdata$x:0000B9BF                 db    0
.xdata$x:0000B9C0                 db    0
.xdata$x:0000B9C1                 db    0
.xdata$x:0000B9C2                 db    0
.xdata$x:0000B9C3                 db    0
.xdata$x:0000B9C4                 db    0
.xdata$x:0000B9C5                 db    0
.xdata$x:0000B9C6                 db    0
.xdata$x:0000B9C7                 db    0
.xdata$x:0000B9C8                 db    0
.xdata$x:0000B9C9                 db    0
.xdata$x:0000B9CA                 db    0
.xdata$x:0000B9CB                 db    0
.xdata$x:0000B9CC                 db    0
.xdata$x:0000B9CD                 db    0
.xdata$x:0000B9CE                 db    0
.xdata$x:0000B9CF                 db    0
.xdata$x:0000B9D0                 db    0
.xdata$x:0000B9D1                 db    0
.xdata$x:0000B9D2                 db    0
.xdata$x:0000B9D3                 db    0
.xdata$x:0000B9D3 _xdata$x        ends
.xdata$x:0000B9D3
.xdata$x:0000B9D4 ; ===========================================================================
.xdata$x:0000B9D4
.xdata$x:0000B9D4 ; Segment type: Pure data
.xdata$x:0000B9D4 ; Segment permissions: Read
.xdata$x:0000B9D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B9D4                 assume cs:_xdata$x
.xdata$x:0000B9D4                 ;org 0B9D4h
.xdata$x:0000B9D4 ; COMDAT (pick associative to section at 6FC8)
.xdata$x:0000B9D4 __unwindtable$??1system_error@std@@UAE@XZ db 0FFh
.xdata$x:0000B9D4                                         ; DATA XREF: .xdata$x:0000B9E4o
.xdata$x:0000B9D5                 db 0FFh
.xdata$x:0000B9D6                 db 0FFh
.xdata$x:0000B9D7                 db 0FFh
.xdata$x:0000B9D8                 dd offset __unwindfunclet$??1system_error@std@@UAE@XZ$0
.xdata$x:0000B9DC __ehfuncinfo$??1system_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000B9DC                                         ; DATA XREF: __ehhandler$??1system_error@std@@UAE@XZ+11o
.xdata$x:0000B9DD                 db    5
.xdata$x:0000B9DE                 db  93h ; ô
.xdata$x:0000B9DF                 db  19h
.xdata$x:0000B9E0                 db    1
.xdata$x:0000B9E1                 db    0
.xdata$x:0000B9E2                 db    0
.xdata$x:0000B9E3                 db    0
.xdata$x:0000B9E4                 dd offset __unwindtable$??1system_error@std@@UAE@XZ
.xdata$x:0000B9E8                 align 20h
.xdata$x:0000B9E8 _xdata$x        ends
.xdata$x:0000B9E8
.xdata$x:0000BA00 ; ===========================================================================
.xdata$x:0000BA00
.xdata$x:0000BA00 ; Segment type: Pure data
.xdata$x:0000BA00 ; Segment permissions: Read
.xdata$x:0000BA00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA00                 assume cs:_xdata$x
.xdata$x:0000BA00                 ;org 0BA00h
.xdata$x:0000BA00 ; COMDAT (pick associative to section at 60C4)
.xdata$x:0000BA00 __unwindtable$??0system_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000BA00                                         ; DATA XREF: .xdata$x:0000BA10o
.xdata$x:0000BA01                 db 0FFh
.xdata$x:0000BA02                 db 0FFh
.xdata$x:0000BA03                 db 0FFh
.xdata$x:0000BA04                 dd offset __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000BA08 __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000BA08                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000BA09                 db    5
.xdata$x:0000BA0A                 db  93h ; ô
.xdata$x:0000BA0B                 db  19h
.xdata$x:0000BA0C                 db    1
.xdata$x:0000BA0D                 db    0
.xdata$x:0000BA0E                 db    0
.xdata$x:0000BA0F                 db    0
.xdata$x:0000BA10                 dd offset __unwindtable$??0system_error@std@@QAE@ABV01@@Z
.xdata$x:0000BA14                 db    0
.xdata$x:0000BA15                 db    0
.xdata$x:0000BA16                 db    0
.xdata$x:0000BA17                 db    0
.xdata$x:0000BA18                 db    0
.xdata$x:0000BA19                 db    0
.xdata$x:0000BA1A                 db    0
.xdata$x:0000BA1B                 db    0
.xdata$x:0000BA1C                 db    0
.xdata$x:0000BA1D                 db    0
.xdata$x:0000BA1E                 db    0
.xdata$x:0000BA1F                 db    0
.xdata$x:0000BA20                 db    0
.xdata$x:0000BA21                 db    0
.xdata$x:0000BA22                 db    0
.xdata$x:0000BA23                 db    0
.xdata$x:0000BA24                 db    0
.xdata$x:0000BA25                 db    0
.xdata$x:0000BA26                 db    0
.xdata$x:0000BA27                 db    0
.xdata$x:0000BA28                 db    0
.xdata$x:0000BA29                 db    0
.xdata$x:0000BA2A                 db    0
.xdata$x:0000BA2B                 db    0
.xdata$x:0000BA2B _xdata$x        ends
.xdata$x:0000BA2B
.xdata$x:0000BA2C ; ===========================================================================
.xdata$x:0000BA2C
.xdata$x:0000BA2C ; Segment type: Pure data
.xdata$x:0000BA2C ; Segment permissions: Read
.xdata$x:0000BA2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA2C                 assume cs:_xdata$x
.xdata$x:0000BA2C                 ;org 0BA2Ch
.xdata$x:0000BA2C ; COMDAT (pick associative to section at 5684)
.xdata$x:0000BA2C __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000BA2C                                         ; DATA XREF: .xdata$x:0000BA3Co
.xdata$x:0000BA2D                 db 0FFh
.xdata$x:0000BA2E                 db 0FFh
.xdata$x:0000BA2F                 db 0FFh
.xdata$x:0000BA30                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000BA34 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000BA34                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000BA35                 db    5
.xdata$x:0000BA36                 db  93h ; ô
.xdata$x:0000BA37                 db  19h
.xdata$x:0000BA38                 db    1
.xdata$x:0000BA39                 db    0
.xdata$x:0000BA3A                 db    0
.xdata$x:0000BA3B                 db    0
.xdata$x:0000BA3C                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000BA40                 db    0
.xdata$x:0000BA41                 db    0
.xdata$x:0000BA42                 db    0
.xdata$x:0000BA43                 db    0
.xdata$x:0000BA44                 db    0
.xdata$x:0000BA45                 db    0
.xdata$x:0000BA46                 db    0
.xdata$x:0000BA47                 db    0
.xdata$x:0000BA48                 db    0
.xdata$x:0000BA49                 db    0
.xdata$x:0000BA4A                 db    0
.xdata$x:0000BA4B                 db    0
.xdata$x:0000BA4C                 db    0
.xdata$x:0000BA4D                 db    0
.xdata$x:0000BA4E                 db    0
.xdata$x:0000BA4F                 db    0
.xdata$x:0000BA50                 db    0
.xdata$x:0000BA51                 db    0
.xdata$x:0000BA52                 db    0
.xdata$x:0000BA53                 db    0
.xdata$x:0000BA54                 db    0
.xdata$x:0000BA55                 db    0
.xdata$x:0000BA56                 db    0
.xdata$x:0000BA57                 db    0
.xdata$x:0000BA57 _xdata$x        ends
.xdata$x:0000BA57
.xdata$x:0000BA58 ; ===========================================================================
.xdata$x:0000BA58
.xdata$x:0000BA58 ; Segment type: Pure data
.xdata$x:0000BA58 ; Segment permissions: Read
.xdata$x:0000BA58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA58                 assume cs:_xdata$x
.xdata$x:0000BA58                 ;org 0BA58h
.xdata$x:0000BA58 ; COMDAT (pick associative to section at 9C14)
.xdata$x:0000BA58 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000BA58                                         ; DATA XREF: .xdata$x:0000BA68o
.xdata$x:0000BA59                 db 0FFh
.xdata$x:0000BA5A                 db 0FFh
.xdata$x:0000BA5B                 db 0FFh
.xdata$x:0000BA5C                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000BA60 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000BA60                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000BA61                 db    5
.xdata$x:0000BA62                 db  93h ; ô
.xdata$x:0000BA63                 db  19h
.xdata$x:0000BA64                 db    1
.xdata$x:0000BA65                 db    0
.xdata$x:0000BA66                 db    0
.xdata$x:0000BA67                 db    0
.xdata$x:0000BA68                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000BA6C                 db    0
.xdata$x:0000BA6D                 db    0
.xdata$x:0000BA6E                 db    0
.xdata$x:0000BA6F                 db    0
.xdata$x:0000BA70                 db    0
.xdata$x:0000BA71                 db    0
.xdata$x:0000BA72                 db    0
.xdata$x:0000BA73                 db    0
.xdata$x:0000BA74                 db    0
.xdata$x:0000BA75                 db    0
.xdata$x:0000BA76                 db    0
.xdata$x:0000BA77                 db    0
.xdata$x:0000BA78                 db    0
.xdata$x:0000BA79                 db    0
.xdata$x:0000BA7A                 db    0
.xdata$x:0000BA7B                 db    0
.xdata$x:0000BA7C                 db    0
.xdata$x:0000BA7D                 db    0
.xdata$x:0000BA7E                 db    0
.xdata$x:0000BA7F                 db    0
.xdata$x:0000BA80                 db    0
.xdata$x:0000BA81                 db    0
.xdata$x:0000BA82                 db    0
.xdata$x:0000BA83                 db    0
.xdata$x:0000BA83 _xdata$x        ends
.xdata$x:0000BA83
.xdata$x:0000BA84 ; ===========================================================================
.xdata$x:0000BA84
.xdata$x:0000BA84 ; Segment type: Pure data
.xdata$x:0000BA84 ; Segment permissions: Read
.xdata$x:0000BA84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA84                 assume cs:_xdata$x
.xdata$x:0000BA84                 ;org 0BA84h
.xdata$x:0000BA84 ; COMDAT (pick associative to section at 69DC)
.xdata$x:0000BA84 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000BA84                                         ; DATA XREF: .xdata$x:0000BA94o
.xdata$x:0000BA85                 db 0FFh
.xdata$x:0000BA86                 db 0FFh
.xdata$x:0000BA87                 db 0FFh
.xdata$x:0000BA88                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000BA8C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000BA8C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000BA8D                 db    5
.xdata$x:0000BA8E                 db  93h ; ô
.xdata$x:0000BA8F                 db  19h
.xdata$x:0000BA90                 db    1
.xdata$x:0000BA91                 db    0
.xdata$x:0000BA92                 db    0
.xdata$x:0000BA93                 db    0
.xdata$x:0000BA94                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000BA98                 db    0
.xdata$x:0000BA99                 db    0
.xdata$x:0000BA9A                 db    0
.xdata$x:0000BA9B                 db    0
.xdata$x:0000BA9C                 db    0
.xdata$x:0000BA9D                 db    0
.xdata$x:0000BA9E                 db    0
.xdata$x:0000BA9F                 db    0
.xdata$x:0000BAA0                 db    0
.xdata$x:0000BAA1                 db    0
.xdata$x:0000BAA2                 db    0
.xdata$x:0000BAA3                 db    0
.xdata$x:0000BAA4                 db    0
.xdata$x:0000BAA5                 db    0
.xdata$x:0000BAA6                 db    0
.xdata$x:0000BAA7                 db    0
.xdata$x:0000BAA8                 db    0
.xdata$x:0000BAA9                 db    0
.xdata$x:0000BAAA                 db    0
.xdata$x:0000BAAB                 db    0
.xdata$x:0000BAAC                 db    0
.xdata$x:0000BAAD                 db    0
.xdata$x:0000BAAE                 db    0
.xdata$x:0000BAAF                 db    0
.xdata$x:0000BAAF _xdata$x        ends
.xdata$x:0000BAAF
.xdata$x:0000BAB0 ; ===========================================================================
.xdata$x:0000BAB0
.xdata$x:0000BAB0 ; Segment type: Pure data
.xdata$x:0000BAB0 ; Segment permissions: Read
.xdata$x:0000BAB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BAB0                 assume cs:_xdata$x
.xdata$x:0000BAB0                 ;org 0BAB0h
.xdata$x:0000BAB0 ; COMDAT (pick associative to section at 5700)
.xdata$x:0000BAB0 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000BAB0                                         ; DATA XREF: .xdata$x:0000BAC0o
.xdata$x:0000BAB1                 db 0FFh
.xdata$x:0000BAB2                 db 0FFh
.xdata$x:0000BAB3                 db 0FFh
.xdata$x:0000BAB4                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000BAB8 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000BAB8                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000BAB9                 db    5
.xdata$x:0000BABA                 db  93h ; ô
.xdata$x:0000BABB                 db  19h
.xdata$x:0000BABC                 db    1
.xdata$x:0000BABD                 db    0
.xdata$x:0000BABE                 db    0
.xdata$x:0000BABF                 db    0
.xdata$x:0000BAC0                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000BAC4                 db    0
.xdata$x:0000BAC5                 db    0
.xdata$x:0000BAC6                 db    0
.xdata$x:0000BAC7                 db    0
.xdata$x:0000BAC8                 db    0
.xdata$x:0000BAC9                 db    0
.xdata$x:0000BACA                 db    0
.xdata$x:0000BACB                 db    0
.xdata$x:0000BACC                 db    0
.xdata$x:0000BACD                 db    0
.xdata$x:0000BACE                 db    0
.xdata$x:0000BACF                 db    0
.xdata$x:0000BAD0                 db    0
.xdata$x:0000BAD1                 db    0
.xdata$x:0000BAD2                 db    0
.xdata$x:0000BAD3                 db    0
.xdata$x:0000BAD4                 db    0
.xdata$x:0000BAD5                 db    0
.xdata$x:0000BAD6                 db    0
.xdata$x:0000BAD7                 db    0
.xdata$x:0000BAD8                 db    0
.xdata$x:0000BAD9                 db    0
.xdata$x:0000BADA                 db    0
.xdata$x:0000BADB                 db    0
.xdata$x:0000BADB _xdata$x        ends
.xdata$x:0000BADB
.xdata$x:0000BADC ; ===========================================================================
.xdata$x:0000BADC
.xdata$x:0000BADC ; Segment type: Pure data
.xdata$x:0000BADC ; Segment permissions: Read
.xdata$x:0000BADC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BADC                 assume cs:_xdata$x
.xdata$x:0000BADC                 ;org 0BADCh
.xdata$x:0000BADC ; COMDAT (pick associative to section at 9CCC)
.xdata$x:0000BADC __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000BADC                                         ; DATA XREF: .xdata$x:0000BAECo
.xdata$x:0000BADD                 db 0FFh
.xdata$x:0000BADE                 db 0FFh
.xdata$x:0000BADF                 db 0FFh
.xdata$x:0000BAE0                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000BAE4 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000BAE4                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000BAE5                 db    5
.xdata$x:0000BAE6                 db  93h ; ô
.xdata$x:0000BAE7                 db  19h
.xdata$x:0000BAE8                 db    1
.xdata$x:0000BAE9                 db    0
.xdata$x:0000BAEA                 db    0
.xdata$x:0000BAEB                 db    0
.xdata$x:0000BAEC                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000BAF0                 db    0
.xdata$x:0000BAF1                 db    0
.xdata$x:0000BAF2                 db    0
.xdata$x:0000BAF3                 db    0
.xdata$x:0000BAF4                 db    0
.xdata$x:0000BAF5                 db    0
.xdata$x:0000BAF6                 db    0
.xdata$x:0000BAF7                 db    0
.xdata$x:0000BAF8                 db    0
.xdata$x:0000BAF9                 db    0
.xdata$x:0000BAFA                 db    0
.xdata$x:0000BAFB                 db    0
.xdata$x:0000BAFC                 db    0
.xdata$x:0000BAFD                 db    0
.xdata$x:0000BAFE                 db    0
.xdata$x:0000BAFF                 db    0
.xdata$x:0000BB00                 db    0
.xdata$x:0000BB01                 db    0
.xdata$x:0000BB02                 db    0
.xdata$x:0000BB03                 db    0
.xdata$x:0000BB04                 db    0
.xdata$x:0000BB05                 db    0
.xdata$x:0000BB06                 db    0
.xdata$x:0000BB07                 db    0
.xdata$x:0000BB07 _xdata$x        ends
.xdata$x:0000BB07
.xdata$x:0000BB08 ; ===========================================================================
.xdata$x:0000BB08
.xdata$x:0000BB08 ; Segment type: Pure data
.xdata$x:0000BB08 ; Segment permissions: Read
.xdata$x:0000BB08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB08                 assume cs:_xdata$x
.xdata$x:0000BB08                 ;org 0BB08h
.xdata$x:0000BB08 ; COMDAT (pick associative to section at 6A4C)
.xdata$x:0000BB08 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000BB08                                         ; DATA XREF: .xdata$x:0000BB18o
.xdata$x:0000BB09                 db 0FFh
.xdata$x:0000BB0A                 db 0FFh
.xdata$x:0000BB0B                 db 0FFh
.xdata$x:0000BB0C                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000BB10 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000BB10                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000BB11                 db    5
.xdata$x:0000BB12                 db  93h ; ô
.xdata$x:0000BB13                 db  19h
.xdata$x:0000BB14                 db    1
.xdata$x:0000BB15                 db    0
.xdata$x:0000BB16                 db    0
.xdata$x:0000BB17                 db    0
.xdata$x:0000BB18                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000BB1C                 db    0
.xdata$x:0000BB1D                 db    0
.xdata$x:0000BB1E                 db    0
.xdata$x:0000BB1F                 db    0
.xdata$x:0000BB20                 db    0
.xdata$x:0000BB21                 db    0
.xdata$x:0000BB22                 db    0
.xdata$x:0000BB23                 db    0
.xdata$x:0000BB24                 db    0
.xdata$x:0000BB25                 db    0
.xdata$x:0000BB26                 db    0
.xdata$x:0000BB27                 db    0
.xdata$x:0000BB28                 db    0
.xdata$x:0000BB29                 db    0
.xdata$x:0000BB2A                 db    0
.xdata$x:0000BB2B                 db    0
.xdata$x:0000BB2C                 db    0
.xdata$x:0000BB2D                 db    0
.xdata$x:0000BB2E                 db    0
.xdata$x:0000BB2F                 db    0
.xdata$x:0000BB30                 db    0
.xdata$x:0000BB31                 db    0
.xdata$x:0000BB32                 db    0
.xdata$x:0000BB33                 db    0
.xdata$x:0000BB33 _xdata$x        ends
.xdata$x:0000BB33
.xdata$x:0000BB34 ; ===========================================================================
.xdata$x:0000BB34
.xdata$x:0000BB34 ; Segment type: Pure data
.xdata$x:0000BB34 ; Segment permissions: Read
.xdata$x:0000BB34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB34                 assume cs:_xdata$x
.xdata$x:0000BB34                 ;org 0BB34h
.xdata$x:0000BB34 ; COMDAT (pick associative to section at 5AC4)
.xdata$x:0000BB34 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000BB34                                         ; DATA XREF: .xdata$x:0000BB44o
.xdata$x:0000BB35                 db 0FFh
.xdata$x:0000BB36                 db 0FFh
.xdata$x:0000BB37                 db 0FFh
.xdata$x:0000BB38                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000BB3C __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000BB3C                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000BB3D                 db    5
.xdata$x:0000BB3E                 db  93h ; ô
.xdata$x:0000BB3F                 db  19h
.xdata$x:0000BB40                 db    1
.xdata$x:0000BB41                 db    0
.xdata$x:0000BB42                 db    0
.xdata$x:0000BB43                 db    0
.xdata$x:0000BB44                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000BB48                 align 20h
.xdata$x:0000BB48 _xdata$x        ends
.xdata$x:0000BB48
.xdata$x:0000BB60 ; ===========================================================================
.xdata$x:0000BB60
.xdata$x:0000BB60 ; Segment type: Pure data
.xdata$x:0000BB60 ; Segment permissions: Read
.xdata$x:0000BB60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB60                 assume cs:_xdata$x
.xdata$x:0000BB60                 ;org 0BB60h
.xdata$x:0000BB60 ; COMDAT (pick associative to section at 9D90)
.xdata$x:0000BB60 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000BB60                                         ; DATA XREF: .xdata$x:0000BB70o
.xdata$x:0000BB61                 db 0FFh
.xdata$x:0000BB62                 db 0FFh
.xdata$x:0000BB63                 db 0FFh
.xdata$x:0000BB64                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000BB68 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000BB68                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000BB69                 db    5
.xdata$x:0000BB6A                 db  93h ; ô
.xdata$x:0000BB6B                 db  19h
.xdata$x:0000BB6C                 db    1
.xdata$x:0000BB6D                 db    0
.xdata$x:0000BB6E                 db    0
.xdata$x:0000BB6F                 db    0
.xdata$x:0000BB70                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000BB74                 db    0
.xdata$x:0000BB75                 db    0
.xdata$x:0000BB76                 db    0
.xdata$x:0000BB77                 db    0
.xdata$x:0000BB78                 db    0
.xdata$x:0000BB79                 db    0
.xdata$x:0000BB7A                 db    0
.xdata$x:0000BB7B                 db    0
.xdata$x:0000BB7C                 db    0
.xdata$x:0000BB7D                 db    0
.xdata$x:0000BB7E                 db    0
.xdata$x:0000BB7F                 db    0
.xdata$x:0000BB80                 db    0
.xdata$x:0000BB81                 db    0
.xdata$x:0000BB82                 db    0
.xdata$x:0000BB83                 db    0
.xdata$x:0000BB84                 db    0
.xdata$x:0000BB85                 db    0
.xdata$x:0000BB86                 db    0
.xdata$x:0000BB87                 db    0
.xdata$x:0000BB88                 db    0
.xdata$x:0000BB89                 db    0
.xdata$x:0000BB8A                 db    0
.xdata$x:0000BB8B                 db    0
.xdata$x:0000BB8B _xdata$x        ends
.xdata$x:0000BB8B
.xdata$x:0000BB8C ; ===========================================================================
.xdata$x:0000BB8C
.xdata$x:0000BB8C ; Segment type: Pure data
.xdata$x:0000BB8C ; Segment permissions: Read
.xdata$x:0000BB8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB8C                 assume cs:_xdata$x
.xdata$x:0000BB8C                 ;org 0BB8Ch
.xdata$x:0000BB8C ; COMDAT (pick associative to section at 6C9C)
.xdata$x:0000BB8C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000BB8C                                         ; DATA XREF: .xdata$x:0000BB9Co
.xdata$x:0000BB8D                 db 0FFh
.xdata$x:0000BB8E                 db 0FFh
.xdata$x:0000BB8F                 db 0FFh
.xdata$x:0000BB90                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000BB94 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000BB94                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000BB95                 db    5
.xdata$x:0000BB96                 db  93h ; ô
.xdata$x:0000BB97                 db  19h
.xdata$x:0000BB98                 db    1
.xdata$x:0000BB99                 db    0
.xdata$x:0000BB9A                 db    0
.xdata$x:0000BB9B                 db    0
.xdata$x:0000BB9C                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000BBA0                 db    0
.xdata$x:0000BBA1                 db    0
.xdata$x:0000BBA2                 db    0
.xdata$x:0000BBA3                 db    0
.xdata$x:0000BBA4                 db    0
.xdata$x:0000BBA5                 db    0
.xdata$x:0000BBA6                 db    0
.xdata$x:0000BBA7                 db    0
.xdata$x:0000BBA8                 db    0
.xdata$x:0000BBA9                 db    0
.xdata$x:0000BBAA                 db    0
.xdata$x:0000BBAB                 db    0
.xdata$x:0000BBAC                 db    0
.xdata$x:0000BBAD                 db    0
.xdata$x:0000BBAE                 db    0
.xdata$x:0000BBAF                 db    0
.xdata$x:0000BBB0                 db    0
.xdata$x:0000BBB1                 db    0
.xdata$x:0000BBB2                 db    0
.xdata$x:0000BBB3                 db    0
.xdata$x:0000BBB4                 db    0
.xdata$x:0000BBB5                 db    0
.xdata$x:0000BBB6                 db    0
.xdata$x:0000BBB7                 db    0
.xdata$x:0000BBB7 _xdata$x        ends
.xdata$x:0000BBB7
.xdata$x:0000BBB8 ; ===========================================================================
.xdata$x:0000BBB8
.xdata$x:0000BBB8 ; Segment type: Pure data
.xdata$x:0000BBB8 ; Segment permissions: Read
.xdata$x:0000BBB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BBB8                 assume cs:_xdata$x
.xdata$x:0000BBB8                 ;org 0BBB8h
.xdata$x:0000BBB8 ; COMDAT (pick associative to section at 5D38)
.xdata$x:0000BBB8 __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db 0FFh
.xdata$x:0000BBB8                                         ; DATA XREF: .xdata$x:0000BBC8o
.xdata$x:0000BBB9                 db 0FFh
.xdata$x:0000BBBA                 db 0FFh
.xdata$x:0000BBBB                 db 0FFh
.xdata$x:0000BBBC                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
.xdata$x:0000BBC0 __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db  22h ; "
.xdata$x:0000BBC0                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z+11o
.xdata$x:0000BBC1                 db    5
.xdata$x:0000BBC2                 db  93h ; ô
.xdata$x:0000BBC3                 db  19h
.xdata$x:0000BBC4                 db    1
.xdata$x:0000BBC5                 db    0
.xdata$x:0000BBC6                 db    0
.xdata$x:0000BBC7                 db    0
.xdata$x:0000BBC8                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.xdata$x:0000BBCC                 db    0
.xdata$x:0000BBCD                 db    0
.xdata$x:0000BBCE                 db    0
.xdata$x:0000BBCF                 db    0
.xdata$x:0000BBD0                 db    0
.xdata$x:0000BBD1                 db    0
.xdata$x:0000BBD2                 db    0
.xdata$x:0000BBD3                 db    0
.xdata$x:0000BBD4                 db    0
.xdata$x:0000BBD5                 db    0
.xdata$x:0000BBD6                 db    0
.xdata$x:0000BBD7                 db    0
.xdata$x:0000BBD8                 db    0
.xdata$x:0000BBD9                 db    0
.xdata$x:0000BBDA                 db    0
.xdata$x:0000BBDB                 db    0
.xdata$x:0000BBDC                 db    0
.xdata$x:0000BBDD                 db    0
.xdata$x:0000BBDE                 db    0
.xdata$x:0000BBDF                 db    0
.xdata$x:0000BBE0                 db    0
.xdata$x:0000BBE1                 db    0
.xdata$x:0000BBE2                 db    0
.xdata$x:0000BBE3                 db    0
.xdata$x:0000BBE3 _xdata$x        ends
.xdata$x:0000BBE3
.xdata$x:0000BBE4 ; ===========================================================================
.xdata$x:0000BBE4
.xdata$x:0000BBE4 ; Segment type: Pure data
.xdata$x:0000BBE4 ; Segment permissions: Read
.xdata$x:0000BBE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BBE4                 assume cs:_xdata$x
.xdata$x:0000BBE4                 ;org 0BBE4h
.xdata$x:0000BBE4 ; COMDAT (pick associative to section at 6E10)
.xdata$x:0000BBE4 __unwindtable$??1failure@ios_base@std@@UAE@XZ db 0FFh
.xdata$x:0000BBE4                                         ; DATA XREF: .xdata$x:0000BBF4o
.xdata$x:0000BBE5                 db 0FFh
.xdata$x:0000BBE6                 db 0FFh
.xdata$x:0000BBE7                 db 0FFh
.xdata$x:0000BBE8                 dd offset __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0
.xdata$x:0000BBEC __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ db  22h ; "
.xdata$x:0000BBEC                                         ; DATA XREF: __ehhandler$??1failure@ios_base@std@@UAE@XZ+11o
.xdata$x:0000BBED                 db    5
.xdata$x:0000BBEE                 db  93h ; ô
.xdata$x:0000BBEF                 db  19h
.xdata$x:0000BBF0                 db    1
.xdata$x:0000BBF1                 db    0
.xdata$x:0000BBF2                 db    0
.xdata$x:0000BBF3                 db    0
.xdata$x:0000BBF4                 dd offset __unwindtable$??1failure@ios_base@std@@UAE@XZ
.xdata$x:0000BBF8                 db    0
.xdata$x:0000BBF9                 db    0
.xdata$x:0000BBFA                 db    0
.xdata$x:0000BBFB                 db    0
.xdata$x:0000BBFC                 db    0
.xdata$x:0000BBFD                 db    0
.xdata$x:0000BBFE                 db    0
.xdata$x:0000BBFF                 db    0
.xdata$x:0000BC00                 db    0
.xdata$x:0000BC01                 db    0
.xdata$x:0000BC02                 db    0
.xdata$x:0000BC03                 db    0
.xdata$x:0000BC04                 db    0
.xdata$x:0000BC05                 db    0
.xdata$x:0000BC06                 db    0
.xdata$x:0000BC07                 db    0
.xdata$x:0000BC08                 db    0
.xdata$x:0000BC09                 db    0
.xdata$x:0000BC0A                 db    0
.xdata$x:0000BC0B                 db    0
.xdata$x:0000BC0C                 db    0
.xdata$x:0000BC0D                 db    0
.xdata$x:0000BC0E                 db    0
.xdata$x:0000BC0F                 db    0
.xdata$x:0000BC0F _xdata$x        ends
.xdata$x:0000BC0F
.xdata$x:0000BC10 ; ===========================================================================
.xdata$x:0000BC10
.xdata$x:0000BC10 ; Segment type: Pure data
.xdata$x:0000BC10 ; Segment permissions: Read
.xdata$x:0000BC10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC10                 assume cs:_xdata$x
.xdata$x:0000BC10                 ;org 0BC10h
.xdata$x:0000BC10 ; COMDAT (pick associative to section at 5CB4)
.xdata$x:0000BC10 __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z db 0FFh
.xdata$x:0000BC10                                         ; DATA XREF: .xdata$x:0000BC20o
.xdata$x:0000BC11                 db 0FFh
.xdata$x:0000BC12                 db 0FFh
.xdata$x:0000BC13                 db 0FFh
.xdata$x:0000BC14                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0
.xdata$x:0000BC18 __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z db  22h ; "
.xdata$x:0000BC18                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z+11o
.xdata$x:0000BC19                 db    5
.xdata$x:0000BC1A                 db  93h ; ô
.xdata$x:0000BC1B                 db  19h
.xdata$x:0000BC1C                 db    1
.xdata$x:0000BC1D                 db    0
.xdata$x:0000BC1E                 db    0
.xdata$x:0000BC1F                 db    0
.xdata$x:0000BC20                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z
.xdata$x:0000BC24                 db    0
.xdata$x:0000BC25                 db    0
.xdata$x:0000BC26                 db    0
.xdata$x:0000BC27                 db    0
.xdata$x:0000BC28                 db    0
.xdata$x:0000BC29                 db    0
.xdata$x:0000BC2A                 db    0
.xdata$x:0000BC2B                 db    0
.xdata$x:0000BC2C                 db    0
.xdata$x:0000BC2D                 db    0
.xdata$x:0000BC2E                 db    0
.xdata$x:0000BC2F                 db    0
.xdata$x:0000BC30                 db    0
.xdata$x:0000BC31                 db    0
.xdata$x:0000BC32                 db    0
.xdata$x:0000BC33                 db    0
.xdata$x:0000BC34                 db    0
.xdata$x:0000BC35                 db    0
.xdata$x:0000BC36                 db    0
.xdata$x:0000BC37                 db    0
.xdata$x:0000BC38                 db    0
.xdata$x:0000BC39                 db    0
.xdata$x:0000BC3A                 db    0
.xdata$x:0000BC3B                 db    0
.xdata$x:0000BC3B _xdata$x        ends
.xdata$x:0000BC3B
.xdata$x:0000BC3C ; ===========================================================================
.xdata$x:0000BC3C
.xdata$x:0000BC3C ; Segment type: Pure data
.xdata$x:0000BC3C ; Segment permissions: Read
.xdata$x:0000BC3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC3C                 assume cs:_xdata$x
.xdata$x:0000BC3C                 ;org 0BC3Ch
.xdata$x:0000BC3C ; COMDAT (pick associative to section at 99E4)
.xdata$x:0000BC3C __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db 0FFh
.xdata$x:0000BC3C                                         ; DATA XREF: .xdata$x:0000BC4Co
.xdata$x:0000BC3D                 db 0FFh
.xdata$x:0000BC3E                 db 0FFh
.xdata$x:0000BC3F                 db 0FFh
.xdata$x:0000BC40                 dd offset __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0
.xdata$x:0000BC44 __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db  22h ; "
.xdata$x:0000BC44                                         ; DATA XREF: __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ+11o
.xdata$x:0000BC45                 db    5
.xdata$x:0000BC46                 db  93h ; ô
.xdata$x:0000BC47                 db  19h
.xdata$x:0000BC48                 db    1
.xdata$x:0000BC49                 db    0
.xdata$x:0000BC4A                 db    0
.xdata$x:0000BC4B                 db    0
.xdata$x:0000BC4C                 dd offset __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.xdata$x:0000BC50                 db    0
.xdata$x:0000BC51                 db    0
.xdata$x:0000BC52                 db    0
.xdata$x:0000BC53                 db    0
.xdata$x:0000BC54                 db    0
.xdata$x:0000BC55                 db    0
.xdata$x:0000BC56                 db    0
.xdata$x:0000BC57                 db    0
.xdata$x:0000BC58                 db    0
.xdata$x:0000BC59                 db    0
.xdata$x:0000BC5A                 db    0
.xdata$x:0000BC5B                 db    0
.xdata$x:0000BC5C                 db    0
.xdata$x:0000BC5D                 db    0
.xdata$x:0000BC5E                 db    0
.xdata$x:0000BC5F                 db    0
.xdata$x:0000BC60                 db    0
.xdata$x:0000BC61                 db    0
.xdata$x:0000BC62                 db    0
.xdata$x:0000BC63                 db    0
.xdata$x:0000BC64                 db    0
.xdata$x:0000BC65                 db    0
.xdata$x:0000BC66                 db    0
.xdata$x:0000BC67                 db    0
.xdata$x:0000BC67 _xdata$x        ends
.xdata$x:0000BC67
.xdata$x:0000BC68 ; ===========================================================================
.xdata$x:0000BC68
.xdata$x:0000BC68 ; Segment type: Pure data
.xdata$x:0000BC68 ; Segment permissions: Read
.xdata$x:0000BC68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC68                 assume cs:_xdata$x
.xdata$x:0000BC68                 ;org 0BC68h
.xdata$x:0000BC68 ; COMDAT (pick associative to section at 631C)
.xdata$x:0000BC68 __unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ db 0FFh
.xdata$x:0000BC68                                         ; DATA XREF: .xdata$x:0000BC78o
.xdata$x:0000BC69                 db 0FFh
.xdata$x:0000BC6A                 db 0FFh
.xdata$x:0000BC6B                 db 0FFh
.xdata$x:0000BC6C                 dd offset __unwindfunclet$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ$0
.xdata$x:0000BC70 __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ db  22h ; "
.xdata$x:0000BC70                                         ; DATA XREF: __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ+11o
.xdata$x:0000BC71                 db    5
.xdata$x:0000BC72                 db  93h ; ô
.xdata$x:0000BC73                 db  19h
.xdata$x:0000BC74                 db    1
.xdata$x:0000BC75                 db    0
.xdata$x:0000BC76                 db    0
.xdata$x:0000BC77                 db    0
.xdata$x:0000BC78                 dd offset __unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
.xdata$x:0000BC7C                 db    0
.xdata$x:0000BC7D                 db    0
.xdata$x:0000BC7E                 db    0
.xdata$x:0000BC7F                 db    0
.xdata$x:0000BC80                 db    0
.xdata$x:0000BC81                 db    0
.xdata$x:0000BC82                 db    0
.xdata$x:0000BC83                 db    0
.xdata$x:0000BC84                 db    0
.xdata$x:0000BC85                 db    0
.xdata$x:0000BC86                 db    0
.xdata$x:0000BC87                 db    0
.xdata$x:0000BC88                 db    0
.xdata$x:0000BC89                 db    0
.xdata$x:0000BC8A                 db    0
.xdata$x:0000BC8B                 db    0
.xdata$x:0000BC8C                 db    0
.xdata$x:0000BC8D                 db    0
.xdata$x:0000BC8E                 db    0
.xdata$x:0000BC8F                 db    0
.xdata$x:0000BC90                 db    0
.xdata$x:0000BC91                 db    0
.xdata$x:0000BC92                 db    0
.xdata$x:0000BC93                 db    0
.xdata$x:0000BC93 _xdata$x        ends
.xdata$x:0000BC93
.xdata$x:0000BC94 ; ===========================================================================
.xdata$x:0000BC94
.xdata$x:0000BC94 ; Segment type: Pure data
.xdata$x:0000BC94 ; Segment permissions: Read
.xdata$x:0000BC94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC94                 assume cs:_xdata$x
.xdata$x:0000BC94                 ;org 0BC94h
.xdata$x:0000BC94 ; COMDAT (pick associative to section at AF80)
.xdata$x:0000BC94 __unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z db 0FFh
.xdata$x:0000BC94                                         ; DATA XREF: .xdata$x:0000BCA4o
.xdata$x:0000BC95                 db 0FFh
.xdata$x:0000BC96                 db 0FFh
.xdata$x:0000BC97                 db 0FFh
.xdata$x:0000BC98                 dd offset __unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
.xdata$x:0000BC9C __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z db  22h ; "
.xdata$x:0000BC9C                                         ; DATA XREF: __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z+11o
.xdata$x:0000BC9D                 db    5
.xdata$x:0000BC9E                 db  93h ; ô
.xdata$x:0000BC9F                 db  19h
.xdata$x:0000BCA0                 db    1
.xdata$x:0000BCA1                 db    0
.xdata$x:0000BCA2                 db    0
.xdata$x:0000BCA3                 db    0
.xdata$x:0000BCA4                 dd offset __unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
.xdata$x:0000BCA8                 align 20h
.xdata$x:0000BCA8 _xdata$x        ends
.xdata$x:0000BCA8
.xdata$x:0000BCC0 ; ===========================================================================
.xdata$x:0000BCC0
.xdata$x:0000BCC0 ; Segment type: Pure data
.xdata$x:0000BCC0 ; Segment permissions: Read
.xdata$x:0000BCC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BCC0                 assume cs:_xdata$x
.xdata$x:0000BCC0                 ;org 0BCC0h
.xdata$x:0000BCC0 ; COMDAT (pick associative to section at 4A50)
.xdata$x:0000BCC0 __unwindtable$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ db 0FFh
.xdata$x:0000BCC0                                         ; DATA XREF: .xdata$x:0000BCD0o
.xdata$x:0000BCC1                 db 0FFh
.xdata$x:0000BCC2                 db 0FFh
.xdata$x:0000BCC3                 db 0FFh
.xdata$x:0000BCC4                 dd offset __unwindfunclet$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ$0
.xdata$x:0000BCC8 __ehfuncinfo$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ db  22h ; "
.xdata$x:0000BCC8                                         ; DATA XREF: __ehhandler$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ+11o
.xdata$x:0000BCC9                 db    5
.xdata$x:0000BCCA                 db  93h ; ô
.xdata$x:0000BCCB                 db  19h
.xdata$x:0000BCCC                 db    1
.xdata$x:0000BCCD                 db    0
.xdata$x:0000BCCE                 db    0
.xdata$x:0000BCCF                 db    0
.xdata$x:0000BCD0                 dd offset __unwindtable$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
.xdata$x:0000BCD4                 db    0
.xdata$x:0000BCD5                 db    0
.xdata$x:0000BCD6                 db    0
.xdata$x:0000BCD7                 db    0
.xdata$x:0000BCD8                 db    0
.xdata$x:0000BCD9                 db    0
.xdata$x:0000BCDA                 db    0
.xdata$x:0000BCDB                 db    0
.xdata$x:0000BCDC                 db    0
.xdata$x:0000BCDD                 db    0
.xdata$x:0000BCDE                 db    0
.xdata$x:0000BCDF                 db    0
.xdata$x:0000BCE0                 db    0
.xdata$x:0000BCE1                 db    0
.xdata$x:0000BCE2                 db    0
.xdata$x:0000BCE3                 db    0
.xdata$x:0000BCE4                 db    0
.xdata$x:0000BCE5                 db    0
.xdata$x:0000BCE6                 db    0
.xdata$x:0000BCE7                 db    0
.xdata$x:0000BCE8                 db    0
.xdata$x:0000BCE9                 db    0
.xdata$x:0000BCEA                 db    0
.xdata$x:0000BCEB                 db    0
.xdata$x:0000BCEB _xdata$x        ends
.xdata$x:0000BCEB
.xdata$x:0000BCEC ; ===========================================================================
.xdata$x:0000BCEC
.xdata$x:0000BCEC ; Segment type: Pure data
.xdata$x:0000BCEC ; Segment permissions: Read
.xdata$x:0000BCEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BCEC                 assume cs:_xdata$x
.xdata$x:0000BCEC                 ;org 0BCECh
.xdata$x:0000BCEC ; COMDAT (pick associative to section at 4ACC)
.xdata$x:0000BCEC __unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z db 0FFh
.xdata$x:0000BCEC                                         ; DATA XREF: .xdata$x:0000BCFCo
.xdata$x:0000BCED                 db 0FFh
.xdata$x:0000BCEE                 db 0FFh
.xdata$x:0000BCEF                 db 0FFh
.xdata$x:0000BCF0                 dd offset __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
.xdata$x:0000BCF4 __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z db  22h ; "
.xdata$x:0000BCF4                                         ; DATA XREF: __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z+11o
.xdata$x:0000BCF5                 db    5
.xdata$x:0000BCF6                 db  93h ; ô
.xdata$x:0000BCF7                 db  19h
.xdata$x:0000BCF8                 db    1
.xdata$x:0000BCF9                 db    0
.xdata$x:0000BCFA                 db    0
.xdata$x:0000BCFB                 db    0
.xdata$x:0000BCFC                 dd offset __unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
.xdata$x:0000BD00                 db    0
.xdata$x:0000BD01                 db    0
.xdata$x:0000BD02                 db    0
.xdata$x:0000BD03                 db    0
.xdata$x:0000BD04                 db    0
.xdata$x:0000BD05                 db    0
.xdata$x:0000BD06                 db    0
.xdata$x:0000BD07                 db    0
.xdata$x:0000BD08                 db    0
.xdata$x:0000BD09                 db    0
.xdata$x:0000BD0A                 db    0
.xdata$x:0000BD0B                 db    0
.xdata$x:0000BD0C                 db    0
.xdata$x:0000BD0D                 db    0
.xdata$x:0000BD0E                 db    0
.xdata$x:0000BD0F                 db    0
.xdata$x:0000BD10                 db    0
.xdata$x:0000BD11                 db    0
.xdata$x:0000BD12                 db    0
.xdata$x:0000BD13                 db    0
.xdata$x:0000BD14                 db    0
.xdata$x:0000BD15                 db    0
.xdata$x:0000BD16                 db    0
.xdata$x:0000BD17                 db    0
.xdata$x:0000BD17 _xdata$x        ends
.xdata$x:0000BD17
.xdata$x:0000BD18 ; ===========================================================================
.xdata$x:0000BD18
.xdata$x:0000BD18 ; Segment type: Pure data
.xdata$x:0000BD18 ; Segment permissions: Read
.xdata$x:0000BD18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD18                 assume cs:_xdata$x
.xdata$x:0000BD18                 ;org 0BD18h
.xdata$x:0000BD18 ; COMDAT (pick associative to section at 87D4)
.xdata$x:0000BD18 __catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 db    0
.xdata$x:0000BD18                                         ; DATA XREF: .xdata$x:0000BD48o
.xdata$x:0000BD19                 db    0
.xdata$x:0000BD1A                 db    0
.xdata$x:0000BD1B                 db    0
.xdata$x:0000BD1C                 db    0
.xdata$x:0000BD1D                 db    0
.xdata$x:0000BD1E                 db    0
.xdata$x:0000BD1F                 db    0
.xdata$x:0000BD20                 db    0
.xdata$x:0000BD21                 db    0
.xdata$x:0000BD22                 db    0
.xdata$x:0000BD23                 db    0
.xdata$x:0000BD24                 dd offset __catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
.xdata$x:0000BD28 __unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ db 0FFh
.xdata$x:0000BD28                                         ; DATA XREF: .xdata$x:0000BD54o
.xdata$x:0000BD29                 db 0FFh
.xdata$x:0000BD2A                 db 0FFh
.xdata$x:0000BD2B                 db 0FFh
.xdata$x:0000BD2C                 db    0
.xdata$x:0000BD2D                 db    0
.xdata$x:0000BD2E                 db    0
.xdata$x:0000BD2F                 db    0
.xdata$x:0000BD30                 db 0FFh
.xdata$x:0000BD31                 db 0FFh
.xdata$x:0000BD32                 db 0FFh
.xdata$x:0000BD33                 db 0FFh
.xdata$x:0000BD34                 db    0
.xdata$x:0000BD35                 db    0
.xdata$x:0000BD36                 db    0
.xdata$x:0000BD37                 db    0
.xdata$x:0000BD38 __tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ db    0
.xdata$x:0000BD38                                         ; DATA XREF: .xdata$x:0000BD5Co
.xdata$x:0000BD39                 db    0
.xdata$x:0000BD3A                 db    0
.xdata$x:0000BD3B                 db    0
.xdata$x:0000BD3C                 db    0
.xdata$x:0000BD3D                 db    0
.xdata$x:0000BD3E                 db    0
.xdata$x:0000BD3F                 db    0
.xdata$x:0000BD40                 db    1
.xdata$x:0000BD41                 db    0
.xdata$x:0000BD42                 db    0
.xdata$x:0000BD43                 db    0
.xdata$x:0000BD44                 db    1
.xdata$x:0000BD45                 db    0
.xdata$x:0000BD46                 db    0
.xdata$x:0000BD47                 db    0
.xdata$x:0000BD48                 dd offset __catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
.xdata$x:0000BD4C __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ db  22h ; "
.xdata$x:0000BD4C                                         ; DATA XREF: __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ+11o
.xdata$x:0000BD4D                 db    5
.xdata$x:0000BD4E                 db  93h ; ô
.xdata$x:0000BD4F                 db  19h
.xdata$x:0000BD50                 db    2
.xdata$x:0000BD51                 db    0
.xdata$x:0000BD52                 db    0
.xdata$x:0000BD53                 db    0
.xdata$x:0000BD54                 dd offset __unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.xdata$x:0000BD58                 db    1
.xdata$x:0000BD59                 db    0
.xdata$x:0000BD5A                 db    0
.xdata$x:0000BD5B                 db    0
.xdata$x:0000BD5C                 dd offset __tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
.xdata$x:0000BD60                 db    0
.xdata$x:0000BD61                 db    0
.xdata$x:0000BD62                 db    0
.xdata$x:0000BD63                 db    0
.xdata$x:0000BD64                 db    0
.xdata$x:0000BD65                 db    0
.xdata$x:0000BD66                 db    0
.xdata$x:0000BD67                 db    0
.xdata$x:0000BD68                 db    0
.xdata$x:0000BD69                 db    0
.xdata$x:0000BD6A                 db    0
.xdata$x:0000BD6B                 db    0
.xdata$x:0000BD6C                 db    0
.xdata$x:0000BD6D                 db    0
.xdata$x:0000BD6E                 db    0
.xdata$x:0000BD6F                 db    0
.xdata$x:0000BD6F _xdata$x        ends
.xdata$x:0000BD6F
.xdata$x:0000BD70 ; ===========================================================================
.xdata$x:0000BD70
.xdata$x:0000BD70 ; Segment type: Pure data
.xdata$x:0000BD70 ; Segment permissions: Read
.xdata$x:0000BD70 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD70                 assume cs:_xdata$x
.xdata$x:0000BD70                 ;org 0BD70h
.xdata$x:0000BD70 ; COMDAT (pick associative to section at 98CC)
.xdata$x:0000BD70 __unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ db 0FFh
.xdata$x:0000BD70                                         ; DATA XREF: .xdata$x:0000BD80o
.xdata$x:0000BD71                 db 0FFh
.xdata$x:0000BD72                 db 0FFh
.xdata$x:0000BD73                 db 0FFh
.xdata$x:0000BD74                 dd offset __unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
.xdata$x:0000BD78 __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ db  22h ; "
.xdata$x:0000BD78                                         ; DATA XREF: __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ+11o
.xdata$x:0000BD79                 db    5
.xdata$x:0000BD7A                 db  93h ; ô
.xdata$x:0000BD7B                 db  19h
.xdata$x:0000BD7C                 db    1
.xdata$x:0000BD7D                 db    0
.xdata$x:0000BD7E                 db    0
.xdata$x:0000BD7F                 db    0
.xdata$x:0000BD80                 dd offset __unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
.xdata$x:0000BD84                 db    0
.xdata$x:0000BD85                 db    0
.xdata$x:0000BD86                 db    0
.xdata$x:0000BD87                 db    0
.xdata$x:0000BD88                 db    0
.xdata$x:0000BD89                 db    0
.xdata$x:0000BD8A                 db    0
.xdata$x:0000BD8B                 db    0
.xdata$x:0000BD8C                 db    0
.xdata$x:0000BD8D                 db    0
.xdata$x:0000BD8E                 db    0
.xdata$x:0000BD8F                 db    0
.xdata$x:0000BD90                 db    0
.xdata$x:0000BD91                 db    0
.xdata$x:0000BD92                 db    0
.xdata$x:0000BD93                 db    0
.xdata$x:0000BD94                 db    0
.xdata$x:0000BD95                 db    0
.xdata$x:0000BD96                 db    0
.xdata$x:0000BD97                 db    0
.xdata$x:0000BD98                 db    0
.xdata$x:0000BD99                 db    0
.xdata$x:0000BD9A                 db    0
.xdata$x:0000BD9B                 db    0
.xdata$x:0000BD9B _xdata$x        ends
.xdata$x:0000BD9B
.xdata$x:0000BD9C ; ===========================================================================
.xdata$x:0000BD9C
.xdata$x:0000BD9C ; Segment type: Pure data
.xdata$x:0000BD9C ; Segment permissions: Read
.xdata$x:0000BD9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD9C                 assume cs:_xdata$x
.xdata$x:0000BD9C                 ;org 0BD9Ch
.xdata$x:0000BD9C __unwindtable$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BD9C                                         ; DATA XREF: .xdata$x:0000BF14o
.xdata$x:0000BD9D                 db 0FFh
.xdata$x:0000BD9E                 db 0FFh
.xdata$x:0000BD9F                 db 0FFh
.xdata$x:0000BDA0                 dd offset __unwindfunclet$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDA4 __unwindtable$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z db 0FFh
.xdata$x:0000BDA4                                         ; DATA XREF: .xdata$x:0000BF38o
.xdata$x:0000BDA5                 db 0FFh
.xdata$x:0000BDA6                 db 0FFh
.xdata$x:0000BDA7                 db 0FFh
.xdata$x:0000BDA8                 dd offset __unwindfunclet$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z$0
.xdata$x:0000BDAC __unwindtable$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z db 0FFh
.xdata$x:0000BDAC                                         ; DATA XREF: .xdata$x:0000BF5Co
.xdata$x:0000BDAD                 db 0FFh
.xdata$x:0000BDAE                 db 0FFh
.xdata$x:0000BDAF                 db 0FFh
.xdata$x:0000BDB0                 dd offset __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z$0
.xdata$x:0000BDB4 __unwindtable$?SaveFile@TiXmlDocumentA@@QBE_NXZ db 0FFh
.xdata$x:0000BDB4                                         ; DATA XREF: .xdata$x:0000BF80o
.xdata$x:0000BDB5                 db 0FFh
.xdata$x:0000BDB6                 db 0FFh
.xdata$x:0000BDB7                 db 0FFh
.xdata$x:0000BDB8                 dd offset __unwindfunclet$?SaveFile@TiXmlDocumentA@@QBE_NXZ$0
.xdata$x:0000BDBC __unwindtable$?LoadFile@TiXmlDocumentA@@QAE_NXZ db 0FFh
.xdata$x:0000BDBC                                         ; DATA XREF: .xdata$x:0000BFA4o
.xdata$x:0000BDBD                 db 0FFh
.xdata$x:0000BDBE                 db 0FFh
.xdata$x:0000BDBF                 db 0FFh
.xdata$x:0000BDC0                 dd offset __unwindfunclet$?LoadFile@TiXmlDocumentA@@QAE_NXZ$0
.xdata$x:0000BDC4 __unwindtable$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BDC4                                         ; DATA XREF: .xdata$x:0000C010o
.xdata$x:0000BDC5                 db 0FFh
.xdata$x:0000BDC6                 db 0FFh
.xdata$x:0000BDC7                 db 0FFh
.xdata$x:0000BDC8                 dd offset __unwindfunclet$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDCC __unwindtable$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BDCC                                         ; DATA XREF: .xdata$x:0000C034o
.xdata$x:0000BDCD                 db 0FFh
.xdata$x:0000BDCE                 db 0FFh
.xdata$x:0000BDCF                 db 0FFh
.xdata$x:0000BDD0                 dd offset __unwindfunclet$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDD4 __unwindtable$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BDD4                                         ; DATA XREF: .xdata$x:0000C07Co
.xdata$x:0000BDD5                 db 0FFh
.xdata$x:0000BDD6                 db 0FFh
.xdata$x:0000BDD7                 db 0FFh
.xdata$x:0000BDD8                 dd offset __unwindfunclet$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDDC __unwindtable$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z db 0FFh
.xdata$x:0000BDDC                                         ; DATA XREF: .xdata$x:0000C0A0o
.xdata$x:0000BDDD                 db 0FFh
.xdata$x:0000BDDE                 db 0FFh
.xdata$x:0000BDDF                 db 0FFh
.xdata$x:0000BDE0                 dd offset __unwindfunclet$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z$0
.xdata$x:0000BDE4 __unwindtable$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BDE4                                         ; DATA XREF: .xdata$x:0000C0C4o
.xdata$x:0000BDE5                 db 0FFh
.xdata$x:0000BDE6                 db 0FFh
.xdata$x:0000BDE7                 db 0FFh
.xdata$x:0000BDE8                 dd offset __unwindfunclet$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDEC __unwindtable$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ db 0FFh
.xdata$x:0000BDEC                                         ; DATA XREF: .xdata$x:0000C0E8o
.xdata$x:0000BDED                 db 0FFh
.xdata$x:0000BDEE                 db 0FFh
.xdata$x:0000BDEF                 db 0FFh
.xdata$x:0000BDF0                 dd offset __unwindfunclet$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ$0
.xdata$x:0000BDF4 __unwindtable$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z db 0FFh
.xdata$x:0000BDF4                                         ; DATA XREF: .xdata$x:0000C10Co
.xdata$x:0000BDF5                 db 0FFh
.xdata$x:0000BDF6                 db 0FFh
.xdata$x:0000BDF7                 db 0FFh
.xdata$x:0000BDF8                 dd offset __unwindfunclet$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z$0
.xdata$x:0000BDFC __unwindtable$??1TiXmlAttributeSetA@@QAE@XZ db 0FFh
.xdata$x:0000BDFC                                         ; DATA XREF: .xdata$x:0000C178o
.xdata$x:0000BDFD                 db 0FFh
.xdata$x:0000BDFE                 db 0FFh
.xdata$x:0000BDFF                 db 0FFh
.xdata$x:0000BE00                 dd offset __unwindfunclet$??1TiXmlAttributeSetA@@QAE@XZ$0
.xdata$x:0000BE04 __unwindtable$??0TiXmlAttributeSetA@@QAE@XZ db 0FFh
.xdata$x:0000BE04                                         ; DATA XREF: .xdata$x:0000C19Co
.xdata$x:0000BE05                 db 0FFh
.xdata$x:0000BE06                 db 0FFh
.xdata$x:0000BE07                 db 0FFh
.xdata$x:0000BE08                 dd offset __unwindfunclet$??0TiXmlAttributeSetA@@QAE@XZ$0
.xdata$x:0000BE0C __unwindtable$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z db 0FFh
.xdata$x:0000BE0C                                         ; DATA XREF: .xdata$x:0000C2E0o
.xdata$x:0000BE0D                 db 0FFh
.xdata$x:0000BE0E                 db 0FFh
.xdata$x:0000BE0F                 db 0FFh
.xdata$x:0000BE10                 dd offset __unwindfunclet$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z$0
.xdata$x:0000BE14 __unwindtable$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z db 0FFh
.xdata$x:0000BE14                                         ; DATA XREF: .xdata$x:0000C304o
.xdata$x:0000BE15                 db 0FFh
.xdata$x:0000BE16                 db 0FFh
.xdata$x:0000BE17                 db 0FFh
.xdata$x:0000BE18                 dd offset __unwindfunclet$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z$0
.xdata$x:0000BE1C __unwindtable$??0TiXmlDocumentA@@QAE@PBD@Z db 0FFh
.xdata$x:0000BE1C                                         ; DATA XREF: .xdata$x:0000BFC8o
.xdata$x:0000BE1D                 db 0FFh
.xdata$x:0000BE1E                 db 0FFh
.xdata$x:0000BE1F                 db 0FFh
.xdata$x:0000BE20                 dd offset __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$0
.xdata$x:0000BE24                 align 8
.xdata$x:0000BE28                 dd offset __unwindfunclet$??0TiXmlDocumentA@@QAE@PBD@Z$1
.xdata$x:0000BE2C __unwindtable$??0TiXmlDocumentA@@QAE@XZ db 0FFh
.xdata$x:0000BE2C                                         ; DATA XREF: .xdata$x:0000BFECo
.xdata$x:0000BE2D                 db 0FFh
.xdata$x:0000BE2E                 db 0FFh
.xdata$x:0000BE2F                 db 0FFh
.xdata$x:0000BE30                 dd offset __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$0
.xdata$x:0000BE34                 align 8
.xdata$x:0000BE38                 dd offset __unwindfunclet$??0TiXmlDocumentA@@QAE@XZ$1
.xdata$x:0000BE3C __unwindtable$??1TiXmlElementA@@UAE@XZ db 0FFh
.xdata$x:0000BE3C                                         ; DATA XREF: .xdata$x:0000C130o
.xdata$x:0000BE3D                 db 0FFh
.xdata$x:0000BE3E                 db 0FFh
.xdata$x:0000BE3F                 db 0FFh
.xdata$x:0000BE40                 dd offset __unwindfunclet$??1TiXmlElementA@@UAE@XZ$0
.xdata$x:0000BE44                 align 8
.xdata$x:0000BE48                 dd offset __unwindfunclet$??1TiXmlElementA@@UAE@XZ$1
.xdata$x:0000BE4C __unwindtable$??0TiXmlElementA@@QAE@PBD@Z db 0FFh
.xdata$x:0000BE4C                                         ; DATA XREF: .xdata$x:0000C154o
.xdata$x:0000BE4D                 db 0FFh
.xdata$x:0000BE4E                 db 0FFh
.xdata$x:0000BE4F                 db 0FFh
.xdata$x:0000BE50                 dd offset __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$0
.xdata$x:0000BE54                 align 8
.xdata$x:0000BE58                 dd offset __unwindfunclet$??0TiXmlElementA@@QAE@PBD@Z$1
.xdata$x:0000BE5C __unwindtable$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z db 0FFh
.xdata$x:0000BE5C                                         ; DATA XREF: .xdata$x:0000C1E4o
.xdata$x:0000BE5D                 db 0FFh
.xdata$x:0000BE5E                 db 0FFh
.xdata$x:0000BE5F                 db 0FFh
.xdata$x:0000BE60                 dd offset __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$0
.xdata$x:0000BE64                 align 8
.xdata$x:0000BE68                 dd offset __unwindfunclet$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z$1
.xdata$x:0000BE6C __unwindtable$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z db 0FFh
.xdata$x:0000BE6C                                         ; DATA XREF: .xdata$x:0000C208o
.xdata$x:0000BE6D                 db 0FFh
.xdata$x:0000BE6E                 db 0FFh
.xdata$x:0000BE6F                 db 0FFh
.xdata$x:0000BE70                 dd offset __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0
.xdata$x:0000BE74                 align 8
.xdata$x:0000BE78                 dd offset __unwindfunclet$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1
.xdata$x:0000BE7C __unwindtable$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z db 0FFh
.xdata$x:0000BE7C                                         ; DATA XREF: .xdata$x:0000C22Co
.xdata$x:0000BE7D                 db 0FFh
.xdata$x:0000BE7E                 db 0FFh
.xdata$x:0000BE7F                 db 0FFh
.xdata$x:0000BE80                 dd offset __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$0
.xdata$x:0000BE84                 align 8
.xdata$x:0000BE88                 dd offset __unwindfunclet$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z$1
.xdata$x:0000BE8C __unwindtable$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z db 0FFh
.xdata$x:0000BE8C                                         ; DATA XREF: .xdata$x:0000C250o
.xdata$x:0000BE8D                 db 0FFh
.xdata$x:0000BE8E                 db 0FFh
.xdata$x:0000BE8F                 db 0FFh
.xdata$x:0000BE90                 dd offset __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0
.xdata$x:0000BE94                 align 8
.xdata$x:0000BE98                 dd offset __unwindfunclet$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1
.xdata$x:0000BE9C __unwindtable$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z db 0FFh
.xdata$x:0000BE9C                                         ; DATA XREF: .xdata$x:0000C274o
.xdata$x:0000BE9D                 db 0FFh
.xdata$x:0000BE9E                 db 0FFh
.xdata$x:0000BE9F                 db 0FFh
.xdata$x:0000BEA0                 dd offset __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$0
.xdata$x:0000BEA4                 align 8
.xdata$x:0000BEA8                 dd offset __unwindfunclet$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z$1
.xdata$x:0000BEAC __unwindtable$??1TiXmlNodeA@@UAE@XZ db 0FFh
.xdata$x:0000BEAC                                         ; DATA XREF: .xdata$x:0000C298o
.xdata$x:0000BEAD                 db 0FFh
.xdata$x:0000BEAE                 db 0FFh
.xdata$x:0000BEAF                 db 0FFh
.xdata$x:0000BEB0                 dd offset __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$0
.xdata$x:0000BEB4                 align 8
.xdata$x:0000BEB8                 dd offset __unwindfunclet$??1TiXmlNodeA@@UAE@XZ$1
.xdata$x:0000BEBC __unwindtable$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z db 0FFh
.xdata$x:0000BEBC                                         ; DATA XREF: .xdata$x:0000C2BCo
.xdata$x:0000BEBD                 db 0FFh
.xdata$x:0000BEBE                 db 0FFh
.xdata$x:0000BEBF                 db 0FFh
.xdata$x:0000BEC0                 dd offset __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$0
.xdata$x:0000BEC4                 align 8
.xdata$x:0000BEC8                 dd offset __unwindfunclet$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z$1
.xdata$x:0000BECC __unwindtable$??0TiXmlDeclarationA@@QAE@PBD00@Z db 0FFh
.xdata$x:0000BECC                                         ; DATA XREF: .xdata$x:0000C058o
.xdata$x:0000BECD                 db 0FFh
.xdata$x:0000BECE                 db 0FFh
.xdata$x:0000BECF                 db 0FFh
.xdata$x:0000BED0                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$0
.xdata$x:0000BED4                 align 8
.xdata$x:0000BED8                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$1
.xdata$x:0000BEDC                 db    1
.xdata$x:0000BEDD                 db    0
.xdata$x:0000BEDE                 db    0
.xdata$x:0000BEDF                 db    0
.xdata$x:0000BEE0                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$2
.xdata$x:0000BEE4                 db    2
.xdata$x:0000BEE5                 db    0
.xdata$x:0000BEE6                 db    0
.xdata$x:0000BEE7                 db    0
.xdata$x:0000BEE8                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@PBD00@Z$3
.xdata$x:0000BEEC __unwindtable$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z db 0FFh
.xdata$x:0000BEEC                                         ; DATA XREF: .xdata$x:0000C1C0o
.xdata$x:0000BEED                 db 0FFh
.xdata$x:0000BEEE                 db 0FFh
.xdata$x:0000BEEF                 db 0FFh
.xdata$x:0000BEF0                 dd offset __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$0
.xdata$x:0000BEF4                 align 8
.xdata$x:0000BEF8                 dd offset __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$1
.xdata$x:0000BEFC                 db    1
.xdata$x:0000BEFD                 db    0
.xdata$x:0000BEFE                 db    0
.xdata$x:0000BEFF                 db    0
.xdata$x:0000BF00                 dd offset __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$2
.xdata$x:0000BF04                 db    1
.xdata$x:0000BF05                 db    0
.xdata$x:0000BF06                 db    0
.xdata$x:0000BF07                 db    0
.xdata$x:0000BF08                 dd offset __unwindfunclet$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z$3
.xdata$x:0000BF0C __ehfuncinfo$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000BF0C                                         ; DATA XREF: __ehhandler$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000BF0D                 db    5
.xdata$x:0000BF0E                 db  93h ; ô
.xdata$x:0000BF0F                 db  19h
.xdata$x:0000BF10                 db    1
.xdata$x:0000BF11                 db    0
.xdata$x:0000BF12                 db    0
.xdata$x:0000BF13                 db    0
.xdata$x:0000BF14                 dd offset __unwindtable$?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ
.xdata$x:0000BF18                 db    0
.xdata$x:0000BF19                 db    0
.xdata$x:0000BF1A                 db    0
.xdata$x:0000BF1B                 db    0
.xdata$x:0000BF1C                 db    0
.xdata$x:0000BF1D                 db    0
.xdata$x:0000BF1E                 db    0
.xdata$x:0000BF1F                 db    0
.xdata$x:0000BF20                 db    0
.xdata$x:0000BF21                 db    0
.xdata$x:0000BF22                 db    0
.xdata$x:0000BF23                 db    0
.xdata$x:0000BF24                 db    0
.xdata$x:0000BF25                 db    0
.xdata$x:0000BF26                 db    0
.xdata$x:0000BF27                 db    0
.xdata$x:0000BF28                 db    0
.xdata$x:0000BF29                 db    0
.xdata$x:0000BF2A                 db    0
.xdata$x:0000BF2B                 db    0
.xdata$x:0000BF2C                 db    0
.xdata$x:0000BF2D                 db    0
.xdata$x:0000BF2E                 db    0
.xdata$x:0000BF2F                 db    0
.xdata$x:0000BF30 __ehfuncinfo$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z db  22h ; "
.xdata$x:0000BF30                                         ; DATA XREF: __ehhandler$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z+1Eo
.xdata$x:0000BF31                 db    5
.xdata$x:0000BF32                 db  93h ; ô
.xdata$x:0000BF33                 db  19h
.xdata$x:0000BF34                 db    1
.xdata$x:0000BF35                 db    0
.xdata$x:0000BF36                 db    0
.xdata$x:0000BF37                 db    0
.xdata$x:0000BF38                 dd offset __unwindtable$?LoadUnicodeFilePath@TiXmlDocumentA@@QAE_NPB_W@Z
.xdata$x:0000BF3C                 db    0
.xdata$x:0000BF3D                 db    0
.xdata$x:0000BF3E                 db    0
.xdata$x:0000BF3F                 db    0
.xdata$x:0000BF40                 db    0
.xdata$x:0000BF41                 db    0
.xdata$x:0000BF42                 db    0
.xdata$x:0000BF43                 db    0
.xdata$x:0000BF44                 db    0
.xdata$x:0000BF45                 db    0
.xdata$x:0000BF46                 db    0
.xdata$x:0000BF47                 db    0
.xdata$x:0000BF48                 db    0
.xdata$x:0000BF49                 db    0
.xdata$x:0000BF4A                 db    0
.xdata$x:0000BF4B                 db    0
.xdata$x:0000BF4C                 db    0
.xdata$x:0000BF4D                 db    0
.xdata$x:0000BF4E                 db    0
.xdata$x:0000BF4F                 db    0
.xdata$x:0000BF50                 db    0
.xdata$x:0000BF51                 db    0
.xdata$x:0000BF52                 db    0
.xdata$x:0000BF53                 db    0
.xdata$x:0000BF54 __ehfuncinfo$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z db  22h ; "
.xdata$x:0000BF54                                         ; DATA XREF: __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z+1Eo
.xdata$x:0000BF55                 db    5
.xdata$x:0000BF56                 db  93h ; ô
.xdata$x:0000BF57                 db  19h
.xdata$x:0000BF58                 db    1
.xdata$x:0000BF59                 db    0
.xdata$x:0000BF5A                 db    0
.xdata$x:0000BF5B                 db    0
.xdata$x:0000BF5C                 dd offset __unwindtable$?LoadFile@TiXmlDocumentA@@QAE_NPBD@Z
.xdata$x:0000BF60                 db    0
.xdata$x:0000BF61                 db    0
.xdata$x:0000BF62                 db    0
.xdata$x:0000BF63                 db    0
.xdata$x:0000BF64                 db    0
.xdata$x:0000BF65                 db    0
.xdata$x:0000BF66                 db    0
.xdata$x:0000BF67                 db    0
.xdata$x:0000BF68                 db    0
.xdata$x:0000BF69                 db    0
.xdata$x:0000BF6A                 db    0
.xdata$x:0000BF6B                 db    0
.xdata$x:0000BF6C                 db    0
.xdata$x:0000BF6D                 db    0
.xdata$x:0000BF6E                 db    0
.xdata$x:0000BF6F                 db    0
.xdata$x:0000BF70                 db    0
.xdata$x:0000BF71                 db    0
.xdata$x:0000BF72                 db    0
.xdata$x:0000BF73                 db    0
.xdata$x:0000BF74                 db    0
.xdata$x:0000BF75                 db    0
.xdata$x:0000BF76                 db    0
.xdata$x:0000BF77                 db    0
.xdata$x:0000BF78 __ehfuncinfo$?SaveFile@TiXmlDocumentA@@QBE_NXZ db  22h ; "
.xdata$x:0000BF78                                         ; DATA XREF: __ehhandler$?SaveFile@TiXmlDocumentA@@QBE_NXZ+11o
.xdata$x:0000BF79                 db    5
.xdata$x:0000BF7A                 db  93h ; ô
.xdata$x:0000BF7B                 db  19h
.xdata$x:0000BF7C                 db    1
.xdata$x:0000BF7D                 db    0
.xdata$x:0000BF7E                 db    0
.xdata$x:0000BF7F                 db    0
.xdata$x:0000BF80                 dd offset __unwindtable$?SaveFile@TiXmlDocumentA@@QBE_NXZ
.xdata$x:0000BF84                 db    0
.xdata$x:0000BF85                 db    0
.xdata$x:0000BF86                 db    0
.xdata$x:0000BF87                 db    0
.xdata$x:0000BF88                 db    0
.xdata$x:0000BF89                 db    0
.xdata$x:0000BF8A                 db    0
.xdata$x:0000BF8B                 db    0
.xdata$x:0000BF8C                 db    0
.xdata$x:0000BF8D                 db    0
.xdata$x:0000BF8E                 db    0
.xdata$x:0000BF8F                 db    0
.xdata$x:0000BF90                 db    0
.xdata$x:0000BF91                 db    0
.xdata$x:0000BF92                 db    0
.xdata$x:0000BF93                 db    0
.xdata$x:0000BF94                 db    0
.xdata$x:0000BF95                 db    0
.xdata$x:0000BF96                 db    0
.xdata$x:0000BF97                 db    0
.xdata$x:0000BF98                 db    0
.xdata$x:0000BF99                 db    0
.xdata$x:0000BF9A                 db    0
.xdata$x:0000BF9B                 db    0
.xdata$x:0000BF9C __ehfuncinfo$?LoadFile@TiXmlDocumentA@@QAE_NXZ db  22h ; "
.xdata$x:0000BF9C                                         ; DATA XREF: __ehhandler$?LoadFile@TiXmlDocumentA@@QAE_NXZ+11o
.xdata$x:0000BF9D                 db    5
.xdata$x:0000BF9E                 db  93h ; ô
.xdata$x:0000BF9F                 db  19h
.xdata$x:0000BFA0                 db    1
.xdata$x:0000BFA1                 db    0
.xdata$x:0000BFA2                 db    0
.xdata$x:0000BFA3                 db    0
.xdata$x:0000BFA4                 dd offset __unwindtable$?LoadFile@TiXmlDocumentA@@QAE_NXZ
.xdata$x:0000BFA8                 align 20h
.xdata$x:0000BFC0 __ehfuncinfo$??0TiXmlDocumentA@@QAE@PBD@Z db  22h ; "
.xdata$x:0000BFC0                                         ; DATA XREF: __ehhandler$??0TiXmlDocumentA@@QAE@PBD@Z+11o
.xdata$x:0000BFC1                 db    5
.xdata$x:0000BFC2                 db  93h ; ô
.xdata$x:0000BFC3                 db  19h
.xdata$x:0000BFC4                 db    2
.xdata$x:0000BFC5                 db    0
.xdata$x:0000BFC6                 db    0
.xdata$x:0000BFC7                 db    0
.xdata$x:0000BFC8                 dd offset __unwindtable$??0TiXmlDocumentA@@QAE@PBD@Z
.xdata$x:0000BFCC                 db    0
.xdata$x:0000BFCD                 db    0
.xdata$x:0000BFCE                 db    0
.xdata$x:0000BFCF                 db    0
.xdata$x:0000BFD0                 db    0
.xdata$x:0000BFD1                 db    0
.xdata$x:0000BFD2                 db    0
.xdata$x:0000BFD3                 db    0
.xdata$x:0000BFD4                 db    0
.xdata$x:0000BFD5                 db    0
.xdata$x:0000BFD6                 db    0
.xdata$x:0000BFD7                 db    0
.xdata$x:0000BFD8                 db    0
.xdata$x:0000BFD9                 db    0
.xdata$x:0000BFDA                 db    0
.xdata$x:0000BFDB                 db    0
.xdata$x:0000BFDC                 db    0
.xdata$x:0000BFDD                 db    0
.xdata$x:0000BFDE                 db    0
.xdata$x:0000BFDF                 db    0
.xdata$x:0000BFE0                 db    0
.xdata$x:0000BFE1                 db    0
.xdata$x:0000BFE2                 db    0
.xdata$x:0000BFE3                 db    0
.xdata$x:0000BFE4 __ehfuncinfo$??0TiXmlDocumentA@@QAE@XZ db  22h ; "
.xdata$x:0000BFE4                                         ; DATA XREF: __ehhandler$??0TiXmlDocumentA@@QAE@XZ+11o
.xdata$x:0000BFE5                 db    5
.xdata$x:0000BFE6                 db  93h ; ô
.xdata$x:0000BFE7                 db  19h
.xdata$x:0000BFE8                 db    2
.xdata$x:0000BFE9                 db    0
.xdata$x:0000BFEA                 db    0
.xdata$x:0000BFEB                 db    0
.xdata$x:0000BFEC                 dd offset __unwindtable$??0TiXmlDocumentA@@QAE@XZ
.xdata$x:0000BFF0                 db    0
.xdata$x:0000BFF1                 db    0
.xdata$x:0000BFF2                 db    0
.xdata$x:0000BFF3                 db    0
.xdata$x:0000BFF4                 db    0
.xdata$x:0000BFF5                 db    0
.xdata$x:0000BFF6                 db    0
.xdata$x:0000BFF7                 db    0
.xdata$x:0000BFF8                 db    0
.xdata$x:0000BFF9                 db    0
.xdata$x:0000BFFA                 db    0
.xdata$x:0000BFFB                 db    0
.xdata$x:0000BFFC                 db    0
.xdata$x:0000BFFD                 db    0
.xdata$x:0000BFFE                 db    0
.xdata$x:0000BFFF                 db    0
.xdata$x:0000C000                 db    0
.xdata$x:0000C001                 db    0
.xdata$x:0000C002                 db    0
.xdata$x:0000C003                 db    0
.xdata$x:0000C004                 db    0
.xdata$x:0000C005                 db    0
.xdata$x:0000C006                 db    0
.xdata$x:0000C007                 db    0
.xdata$x:0000C008 __ehfuncinfo$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000C008                                         ; DATA XREF: __ehhandler$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000C009                 db    5
.xdata$x:0000C00A                 db  93h ; ô
.xdata$x:0000C00B                 db  19h
.xdata$x:0000C00C                 db    1
.xdata$x:0000C00D                 db    0
.xdata$x:0000C00E                 db    0
.xdata$x:0000C00F                 db    0
.xdata$x:0000C010                 dd offset __unwindtable$?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ
.xdata$x:0000C014                 db    0
.xdata$x:0000C015                 db    0
.xdata$x:0000C016                 db    0
.xdata$x:0000C017                 db    0
.xdata$x:0000C018                 db    0
.xdata$x:0000C019                 db    0
.xdata$x:0000C01A                 db    0
.xdata$x:0000C01B                 db    0
.xdata$x:0000C01C                 db    0
.xdata$x:0000C01D                 db    0
.xdata$x:0000C01E                 db    0
.xdata$x:0000C01F                 db    0
.xdata$x:0000C020                 db    0
.xdata$x:0000C021                 db    0
.xdata$x:0000C022                 db    0
.xdata$x:0000C023                 db    0
.xdata$x:0000C024                 db    0
.xdata$x:0000C025                 db    0
.xdata$x:0000C026                 db    0
.xdata$x:0000C027                 db    0
.xdata$x:0000C028                 db    0
.xdata$x:0000C029                 db    0
.xdata$x:0000C02A                 db    0
.xdata$x:0000C02B                 db    0
.xdata$x:0000C02C __ehfuncinfo$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000C02C                                         ; DATA XREF: __ehhandler$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000C02D                 db    5
.xdata$x:0000C02E                 db  93h ; ô
.xdata$x:0000C02F                 db  19h
.xdata$x:0000C030                 db    1
.xdata$x:0000C031                 db    0
.xdata$x:0000C032                 db    0
.xdata$x:0000C033                 db    0
.xdata$x:0000C034                 dd offset __unwindtable$?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ
.xdata$x:0000C038                 db    0
.xdata$x:0000C039                 db    0
.xdata$x:0000C03A                 db    0
.xdata$x:0000C03B                 db    0
.xdata$x:0000C03C                 db    0
.xdata$x:0000C03D                 db    0
.xdata$x:0000C03E                 db    0
.xdata$x:0000C03F                 db    0
.xdata$x:0000C040                 db    0
.xdata$x:0000C041                 db    0
.xdata$x:0000C042                 db    0
.xdata$x:0000C043                 db    0
.xdata$x:0000C044                 db    0
.xdata$x:0000C045                 db    0
.xdata$x:0000C046                 db    0
.xdata$x:0000C047                 db    0
.xdata$x:0000C048                 db    0
.xdata$x:0000C049                 db    0
.xdata$x:0000C04A                 db    0
.xdata$x:0000C04B                 db    0
.xdata$x:0000C04C                 db    0
.xdata$x:0000C04D                 db    0
.xdata$x:0000C04E                 db    0
.xdata$x:0000C04F                 db    0
.xdata$x:0000C050 __ehfuncinfo$??0TiXmlDeclarationA@@QAE@PBD00@Z db  22h ; "
.xdata$x:0000C050                                         ; DATA XREF: __ehhandler$??0TiXmlDeclarationA@@QAE@PBD00@Z+11o
.xdata$x:0000C051                 db    5
.xdata$x:0000C052                 db  93h ; ô
.xdata$x:0000C053                 db  19h
.xdata$x:0000C054                 db    4
.xdata$x:0000C055                 db    0
.xdata$x:0000C056                 db    0
.xdata$x:0000C057                 db    0
.xdata$x:0000C058                 dd offset __unwindtable$??0TiXmlDeclarationA@@QAE@PBD00@Z
.xdata$x:0000C05C                 db    0
.xdata$x:0000C05D                 db    0
.xdata$x:0000C05E                 db    0
.xdata$x:0000C05F                 db    0
.xdata$x:0000C060                 db    0
.xdata$x:0000C061                 db    0
.xdata$x:0000C062                 db    0
.xdata$x:0000C063                 db    0
.xdata$x:0000C064                 db    0
.xdata$x:0000C065                 db    0
.xdata$x:0000C066                 db    0
.xdata$x:0000C067                 db    0
.xdata$x:0000C068                 db    0
.xdata$x:0000C069                 db    0
.xdata$x:0000C06A                 db    0
.xdata$x:0000C06B                 db    0
.xdata$x:0000C06C                 db    0
.xdata$x:0000C06D                 db    0
.xdata$x:0000C06E                 db    0
.xdata$x:0000C06F                 db    0
.xdata$x:0000C070                 db    0
.xdata$x:0000C071                 db    0
.xdata$x:0000C072                 db    0
.xdata$x:0000C073                 db    0
.xdata$x:0000C074 __ehfuncinfo$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000C074                                         ; DATA XREF: __ehhandler$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000C075                 db    5
.xdata$x:0000C076                 db  93h ; ô
.xdata$x:0000C077                 db  19h
.xdata$x:0000C078                 db    1
.xdata$x:0000C079                 db    0
.xdata$x:0000C07A                 db    0
.xdata$x:0000C07B                 db    0
.xdata$x:0000C07C                 dd offset __unwindtable$?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ
.xdata$x:0000C080                 db    0
.xdata$x:0000C081                 db    0
.xdata$x:0000C082                 db    0
.xdata$x:0000C083                 db    0
.xdata$x:0000C084                 db    0
.xdata$x:0000C085                 db    0
.xdata$x:0000C086                 db    0
.xdata$x:0000C087                 db    0
.xdata$x:0000C088                 db    0
.xdata$x:0000C089                 db    0
.xdata$x:0000C08A                 db    0
.xdata$x:0000C08B                 db    0
.xdata$x:0000C08C                 db    0
.xdata$x:0000C08D                 db    0
.xdata$x:0000C08E                 db    0
.xdata$x:0000C08F                 db    0
.xdata$x:0000C090                 db    0
.xdata$x:0000C091                 db    0
.xdata$x:0000C092                 db    0
.xdata$x:0000C093                 db    0
.xdata$x:0000C094                 db    0
.xdata$x:0000C095                 db    0
.xdata$x:0000C096                 db    0
.xdata$x:0000C097                 db    0
.xdata$x:0000C098 __ehfuncinfo$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z db  22h ; "
.xdata$x:0000C098                                         ; DATA XREF: __ehhandler$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z+1Bo
.xdata$x:0000C099                 db    5
.xdata$x:0000C09A                 db  93h ; ô
.xdata$x:0000C09B                 db  19h
.xdata$x:0000C09C                 db    1
.xdata$x:0000C09D                 db    0
.xdata$x:0000C09E                 db    0
.xdata$x:0000C09F                 db    0
.xdata$x:0000C0A0                 dd offset __unwindtable$?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z
.xdata$x:0000C0A4                 db    0
.xdata$x:0000C0A5                 db    0
.xdata$x:0000C0A6                 db    0
.xdata$x:0000C0A7                 db    0
.xdata$x:0000C0A8                 db    0
.xdata$x:0000C0A9                 db    0
.xdata$x:0000C0AA                 db    0
.xdata$x:0000C0AB                 db    0
.xdata$x:0000C0AC                 db    0
.xdata$x:0000C0AD                 db    0
.xdata$x:0000C0AE                 db    0
.xdata$x:0000C0AF                 db    0
.xdata$x:0000C0B0                 db    0
.xdata$x:0000C0B1                 db    0
.xdata$x:0000C0B2                 db    0
.xdata$x:0000C0B3                 db    0
.xdata$x:0000C0B4                 db    0
.xdata$x:0000C0B5                 db    0
.xdata$x:0000C0B6                 db    0
.xdata$x:0000C0B7                 db    0
.xdata$x:0000C0B8                 db    0
.xdata$x:0000C0B9                 db    0
.xdata$x:0000C0BA                 db    0
.xdata$x:0000C0BB                 db    0
.xdata$x:0000C0BC __ehfuncinfo$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000C0BC                                         ; DATA XREF: __ehhandler$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000C0BD                 db    5
.xdata$x:0000C0BE                 db  93h ; ô
.xdata$x:0000C0BF                 db  19h
.xdata$x:0000C0C0                 db    1
.xdata$x:0000C0C1                 db    0
.xdata$x:0000C0C2                 db    0
.xdata$x:0000C0C3                 db    0
.xdata$x:0000C0C4                 dd offset __unwindtable$?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ
.xdata$x:0000C0C8                 align 20h
.xdata$x:0000C0E0 __ehfuncinfo$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ db  22h ; "
.xdata$x:0000C0E0                                         ; DATA XREF: __ehhandler$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ+11o
.xdata$x:0000C0E1                 db    5
.xdata$x:0000C0E2                 db  93h ; ô
.xdata$x:0000C0E3                 db  19h
.xdata$x:0000C0E4                 db    1
.xdata$x:0000C0E5                 db    0
.xdata$x:0000C0E6                 db    0
.xdata$x:0000C0E7                 db    0
.xdata$x:0000C0E8                 dd offset __unwindtable$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ
.xdata$x:0000C0EC                 db    0
.xdata$x:0000C0ED                 db    0
.xdata$x:0000C0EE                 db    0
.xdata$x:0000C0EF                 db    0
.xdata$x:0000C0F0                 db    0
.xdata$x:0000C0F1                 db    0
.xdata$x:0000C0F2                 db    0
.xdata$x:0000C0F3                 db    0
.xdata$x:0000C0F4                 db    0
.xdata$x:0000C0F5                 db    0
.xdata$x:0000C0F6                 db    0
.xdata$x:0000C0F7                 db    0
.xdata$x:0000C0F8                 db    0
.xdata$x:0000C0F9                 db    0
.xdata$x:0000C0FA                 db    0
.xdata$x:0000C0FB                 db    0
.xdata$x:0000C0FC                 db    0
.xdata$x:0000C0FD                 db    0
.xdata$x:0000C0FE                 db    0
.xdata$x:0000C0FF                 db    0
.xdata$x:0000C100                 db    0
.xdata$x:0000C101                 db    0
.xdata$x:0000C102                 db    0
.xdata$x:0000C103                 db    0
.xdata$x:0000C104 __ehfuncinfo$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z db  22h ; "
.xdata$x:0000C104                                         ; DATA XREF: __ehhandler$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z+11o
.xdata$x:0000C105                 db    5
.xdata$x:0000C106                 db  93h ; ô
.xdata$x:0000C107                 db  19h
.xdata$x:0000C108                 db    1
.xdata$x:0000C109                 db    0
.xdata$x:0000C10A                 db    0
.xdata$x:0000C10B                 db    0
.xdata$x:0000C10C                 dd offset __unwindtable$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z
.xdata$x:0000C110                 db    0
.xdata$x:0000C111                 db    0
.xdata$x:0000C112                 db    0
.xdata$x:0000C113                 db    0
.xdata$x:0000C114                 db    0
.xdata$x:0000C115                 db    0
.xdata$x:0000C116                 db    0
.xdata$x:0000C117                 db    0
.xdata$x:0000C118                 db    0
.xdata$x:0000C119                 db    0
.xdata$x:0000C11A                 db    0
.xdata$x:0000C11B                 db    0
.xdata$x:0000C11C                 db    0
.xdata$x:0000C11D                 db    0
.xdata$x:0000C11E                 db    0
.xdata$x:0000C11F                 db    0
.xdata$x:0000C120                 db    0
.xdata$x:0000C121                 db    0
.xdata$x:0000C122                 db    0
.xdata$x:0000C123                 db    0
.xdata$x:0000C124                 db    0
.xdata$x:0000C125                 db    0
.xdata$x:0000C126                 db    0
.xdata$x:0000C127                 db    0
.xdata$x:0000C128 __ehfuncinfo$??1TiXmlElementA@@UAE@XZ db  22h ; "
.xdata$x:0000C128                                         ; DATA XREF: __ehhandler$??1TiXmlElementA@@UAE@XZ+11o
.xdata$x:0000C129                 db    5
.xdata$x:0000C12A                 db  93h ; ô
.xdata$x:0000C12B                 db  19h
.xdata$x:0000C12C                 db    2
.xdata$x:0000C12D                 db    0
.xdata$x:0000C12E                 db    0
.xdata$x:0000C12F                 db    0
.xdata$x:0000C130                 dd offset __unwindtable$??1TiXmlElementA@@UAE@XZ
.xdata$x:0000C134                 db    0
.xdata$x:0000C135                 db    0
.xdata$x:0000C136                 db    0
.xdata$x:0000C137                 db    0
.xdata$x:0000C138                 db    0
.xdata$x:0000C139                 db    0
.xdata$x:0000C13A                 db    0
.xdata$x:0000C13B                 db    0
.xdata$x:0000C13C                 db    0
.xdata$x:0000C13D                 db    0
.xdata$x:0000C13E                 db    0
.xdata$x:0000C13F                 db    0
.xdata$x:0000C140                 db    0
.xdata$x:0000C141                 db    0
.xdata$x:0000C142                 db    0
.xdata$x:0000C143                 db    0
.xdata$x:0000C144                 db    0
.xdata$x:0000C145                 db    0
.xdata$x:0000C146                 db    0
.xdata$x:0000C147                 db    0
.xdata$x:0000C148                 db    0
.xdata$x:0000C149                 db    0
.xdata$x:0000C14A                 db    0
.xdata$x:0000C14B                 db    0
.xdata$x:0000C14C __ehfuncinfo$??0TiXmlElementA@@QAE@PBD@Z db  22h ; "
.xdata$x:0000C14C                                         ; DATA XREF: __ehhandler$??0TiXmlElementA@@QAE@PBD@Z+11o
.xdata$x:0000C14D                 db    5
.xdata$x:0000C14E                 db  93h ; ô
.xdata$x:0000C14F                 db  19h
.xdata$x:0000C150                 db    2
.xdata$x:0000C151                 db    0
.xdata$x:0000C152                 db    0
.xdata$x:0000C153                 db    0
.xdata$x:0000C154                 dd offset __unwindtable$??0TiXmlElementA@@QAE@PBD@Z
.xdata$x:0000C158                 db    0
.xdata$x:0000C159                 db    0
.xdata$x:0000C15A                 db    0
.xdata$x:0000C15B                 db    0
.xdata$x:0000C15C                 db    0
.xdata$x:0000C15D                 db    0
.xdata$x:0000C15E                 db    0
.xdata$x:0000C15F                 db    0
.xdata$x:0000C160                 db    0
.xdata$x:0000C161                 db    0
.xdata$x:0000C162                 db    0
.xdata$x:0000C163                 db    0
.xdata$x:0000C164                 db    0
.xdata$x:0000C165                 db    0
.xdata$x:0000C166                 db    0
.xdata$x:0000C167                 db    0
.xdata$x:0000C168                 db    0
.xdata$x:0000C169                 db    0
.xdata$x:0000C16A                 db    0
.xdata$x:0000C16B                 db    0
.xdata$x:0000C16C                 db    0
.xdata$x:0000C16D                 db    0
.xdata$x:0000C16E                 db    0
.xdata$x:0000C16F                 db    0
.xdata$x:0000C170 __ehfuncinfo$??1TiXmlAttributeSetA@@QAE@XZ db  22h ; "
.xdata$x:0000C170                                         ; DATA XREF: __ehhandler$??1TiXmlAttributeSetA@@QAE@XZ+11o
.xdata$x:0000C171                 db    5
.xdata$x:0000C172                 db  93h ; ô
.xdata$x:0000C173                 db  19h
.xdata$x:0000C174                 db    1
.xdata$x:0000C175                 db    0
.xdata$x:0000C176                 db    0
.xdata$x:0000C177                 db    0
.xdata$x:0000C178                 dd offset __unwindtable$??1TiXmlAttributeSetA@@QAE@XZ
.xdata$x:0000C17C                 db    0
.xdata$x:0000C17D                 db    0
.xdata$x:0000C17E                 db    0
.xdata$x:0000C17F                 db    0
.xdata$x:0000C180                 db    0
.xdata$x:0000C181                 db    0
.xdata$x:0000C182                 db    0
.xdata$x:0000C183                 db    0
.xdata$x:0000C184                 db    0
.xdata$x:0000C185                 db    0
.xdata$x:0000C186                 db    0
.xdata$x:0000C187                 db    0
.xdata$x:0000C188                 db    0
.xdata$x:0000C189                 db    0
.xdata$x:0000C18A                 db    0
.xdata$x:0000C18B                 db    0
.xdata$x:0000C18C                 db    0
.xdata$x:0000C18D                 db    0
.xdata$x:0000C18E                 db    0
.xdata$x:0000C18F                 db    0
.xdata$x:0000C190                 db    0
.xdata$x:0000C191                 db    0
.xdata$x:0000C192                 db    0
.xdata$x:0000C193                 db    0
.xdata$x:0000C194 __ehfuncinfo$??0TiXmlAttributeSetA@@QAE@XZ db  22h ; "
.xdata$x:0000C194                                         ; DATA XREF: __ehhandler$??0TiXmlAttributeSetA@@QAE@XZ+11o
.xdata$x:0000C195                 db    5
.xdata$x:0000C196                 db  93h ; ô
.xdata$x:0000C197                 db  19h
.xdata$x:0000C198                 db    1
.xdata$x:0000C199                 db    0
.xdata$x:0000C19A                 db    0
.xdata$x:0000C19B                 db    0
.xdata$x:0000C19C                 dd offset __unwindtable$??0TiXmlAttributeSetA@@QAE@XZ
.xdata$x:0000C1A0                 db    0
.xdata$x:0000C1A1                 db    0
.xdata$x:0000C1A2                 db    0
.xdata$x:0000C1A3                 db    0
.xdata$x:0000C1A4                 db    0
.xdata$x:0000C1A5                 db    0
.xdata$x:0000C1A6                 db    0
.xdata$x:0000C1A7                 db    0
.xdata$x:0000C1A8                 db    0
.xdata$x:0000C1A9                 db    0
.xdata$x:0000C1AA                 db    0
.xdata$x:0000C1AB                 db    0
.xdata$x:0000C1AC                 db    0
.xdata$x:0000C1AD                 db    0
.xdata$x:0000C1AE                 db    0
.xdata$x:0000C1AF                 db    0
.xdata$x:0000C1B0                 db    0
.xdata$x:0000C1B1                 db    0
.xdata$x:0000C1B2                 db    0
.xdata$x:0000C1B3                 db    0
.xdata$x:0000C1B4                 db    0
.xdata$x:0000C1B5                 db    0
.xdata$x:0000C1B6                 db    0
.xdata$x:0000C1B7                 db    0
.xdata$x:0000C1B8 __ehfuncinfo$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z db  22h ; "
.xdata$x:0000C1B8                                         ; DATA XREF: __ehhandler$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z+1Bo
.xdata$x:0000C1B9                 db    5
.xdata$x:0000C1BA                 db  93h ; ô
.xdata$x:0000C1BB                 db  19h
.xdata$x:0000C1BC                 db    4
.xdata$x:0000C1BD                 db    0
.xdata$x:0000C1BE                 db    0
.xdata$x:0000C1BF                 db    0
.xdata$x:0000C1C0                 dd offset __unwindtable$?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z
.xdata$x:0000C1C4                 db    0
.xdata$x:0000C1C5                 db    0
.xdata$x:0000C1C6                 db    0
.xdata$x:0000C1C7                 db    0
.xdata$x:0000C1C8                 db    0
.xdata$x:0000C1C9                 db    0
.xdata$x:0000C1CA                 db    0
.xdata$x:0000C1CB                 db    0
.xdata$x:0000C1CC                 db    0
.xdata$x:0000C1CD                 db    0
.xdata$x:0000C1CE                 db    0
.xdata$x:0000C1CF                 db    0
.xdata$x:0000C1D0                 db    0
.xdata$x:0000C1D1                 db    0
.xdata$x:0000C1D2                 db    0
.xdata$x:0000C1D3                 db    0
.xdata$x:0000C1D4                 db    0
.xdata$x:0000C1D5                 db    0
.xdata$x:0000C1D6                 db    0
.xdata$x:0000C1D7                 db    0
.xdata$x:0000C1D8                 db    0
.xdata$x:0000C1D9                 db    0
.xdata$x:0000C1DA                 db    0
.xdata$x:0000C1DB                 db    0
.xdata$x:0000C1DC __ehfuncinfo$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z db  22h ; "
.xdata$x:0000C1DC                                         ; DATA XREF: __ehhandler$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z+11o
.xdata$x:0000C1DD                 db    5
.xdata$x:0000C1DE                 db  93h ; ô
.xdata$x:0000C1DF                 db  19h
.xdata$x:0000C1E0                 db    2
.xdata$x:0000C1E1                 db    0
.xdata$x:0000C1E2                 db    0
.xdata$x:0000C1E3                 db    0
.xdata$x:0000C1E4                 dd offset __unwindtable$??0TiXmlNodeA@@IAE@W4NodeType@0@@Z
.xdata$x:0000C1E8                 align 20h
.xdata$x:0000C200 __ehfuncinfo$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z db  22h ; "
.xdata$x:0000C200                                         ; DATA XREF: __ehhandler$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z+1Bo
.xdata$x:0000C201                 db    5
.xdata$x:0000C202                 db  93h ; ô
.xdata$x:0000C203                 db  19h
.xdata$x:0000C204                 db    2
.xdata$x:0000C205                 db    0
.xdata$x:0000C206                 db    0
.xdata$x:0000C207                 db    0
.xdata$x:0000C208                 dd offset __unwindtable$?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.xdata$x:0000C20C                 db    0
.xdata$x:0000C20D                 db    0
.xdata$x:0000C20E                 db    0
.xdata$x:0000C20F                 db    0
.xdata$x:0000C210                 db    0
.xdata$x:0000C211                 db    0
.xdata$x:0000C212                 db    0
.xdata$x:0000C213                 db    0
.xdata$x:0000C214                 db    0
.xdata$x:0000C215                 db    0
.xdata$x:0000C216                 db    0
.xdata$x:0000C217                 db    0
.xdata$x:0000C218                 db    0
.xdata$x:0000C219                 db    0
.xdata$x:0000C21A                 db    0
.xdata$x:0000C21B                 db    0
.xdata$x:0000C21C                 db    0
.xdata$x:0000C21D                 db    0
.xdata$x:0000C21E                 db    0
.xdata$x:0000C21F                 db    0
.xdata$x:0000C220                 db    0
.xdata$x:0000C221                 db    0
.xdata$x:0000C222                 db    0
.xdata$x:0000C223                 db    0
.xdata$x:0000C224 __ehfuncinfo$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z db  22h ; "
.xdata$x:0000C224                                         ; DATA XREF: __ehhandler$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z+1Bo
.xdata$x:0000C225                 db    5
.xdata$x:0000C226                 db  93h ; ô
.xdata$x:0000C227                 db  19h
.xdata$x:0000C228                 db    2
.xdata$x:0000C229                 db    0
.xdata$x:0000C22A                 db    0
.xdata$x:0000C22B                 db    0
.xdata$x:0000C22C                 dd offset __unwindtable$?PreviousSibling@TiXmlNodeA@@QBEPAV1@PBD@Z
.xdata$x:0000C230                 db    0
.xdata$x:0000C231                 db    0
.xdata$x:0000C232                 db    0
.xdata$x:0000C233                 db    0
.xdata$x:0000C234                 db    0
.xdata$x:0000C235                 db    0
.xdata$x:0000C236                 db    0
.xdata$x:0000C237                 db    0
.xdata$x:0000C238                 db    0
.xdata$x:0000C239                 db    0
.xdata$x:0000C23A                 db    0
.xdata$x:0000C23B                 db    0
.xdata$x:0000C23C                 db    0
.xdata$x:0000C23D                 db    0
.xdata$x:0000C23E                 db    0
.xdata$x:0000C23F                 db    0
.xdata$x:0000C240                 db    0
.xdata$x:0000C241                 db    0
.xdata$x:0000C242                 db    0
.xdata$x:0000C243                 db    0
.xdata$x:0000C244                 db    0
.xdata$x:0000C245                 db    0
.xdata$x:0000C246                 db    0
.xdata$x:0000C247                 db    0
.xdata$x:0000C248 __ehfuncinfo$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z db  22h ; "
.xdata$x:0000C248                                         ; DATA XREF: __ehhandler$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z+1Bo
.xdata$x:0000C249                 db    5
.xdata$x:0000C24A                 db  93h ; ô
.xdata$x:0000C24B                 db  19h
.xdata$x:0000C24C                 db    2
.xdata$x:0000C24D                 db    0
.xdata$x:0000C24E                 db    0
.xdata$x:0000C24F                 db    0
.xdata$x:0000C250                 dd offset __unwindtable$?LastChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.xdata$x:0000C254                 db    0
.xdata$x:0000C255                 db    0
.xdata$x:0000C256                 db    0
.xdata$x:0000C257                 db    0
.xdata$x:0000C258                 db    0
.xdata$x:0000C259                 db    0
.xdata$x:0000C25A                 db    0
.xdata$x:0000C25B                 db    0
.xdata$x:0000C25C                 db    0
.xdata$x:0000C25D                 db    0
.xdata$x:0000C25E                 db    0
.xdata$x:0000C25F                 db    0
.xdata$x:0000C260                 db    0
.xdata$x:0000C261                 db    0
.xdata$x:0000C262                 db    0
.xdata$x:0000C263                 db    0
.xdata$x:0000C264                 db    0
.xdata$x:0000C265                 db    0
.xdata$x:0000C266                 db    0
.xdata$x:0000C267                 db    0
.xdata$x:0000C268                 db    0
.xdata$x:0000C269                 db    0
.xdata$x:0000C26A                 db    0
.xdata$x:0000C26B                 db    0
.xdata$x:0000C26C __ehfuncinfo$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z db  22h ; "
.xdata$x:0000C26C                                         ; DATA XREF: __ehhandler$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z+1Bo
.xdata$x:0000C26D                 db    5
.xdata$x:0000C26E                 db  93h ; ô
.xdata$x:0000C26F                 db  19h
.xdata$x:0000C270                 db    2
.xdata$x:0000C271                 db    0
.xdata$x:0000C272                 db    0
.xdata$x:0000C273                 db    0
.xdata$x:0000C274                 dd offset __unwindtable$?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z
.xdata$x:0000C278                 db    0
.xdata$x:0000C279                 db    0
.xdata$x:0000C27A                 db    0
.xdata$x:0000C27B                 db    0
.xdata$x:0000C27C                 db    0
.xdata$x:0000C27D                 db    0
.xdata$x:0000C27E                 db    0
.xdata$x:0000C27F                 db    0
.xdata$x:0000C280                 db    0
.xdata$x:0000C281                 db    0
.xdata$x:0000C282                 db    0
.xdata$x:0000C283                 db    0
.xdata$x:0000C284                 db    0
.xdata$x:0000C285                 db    0
.xdata$x:0000C286                 db    0
.xdata$x:0000C287                 db    0
.xdata$x:0000C288                 db    0
.xdata$x:0000C289                 db    0
.xdata$x:0000C28A                 db    0
.xdata$x:0000C28B                 db    0
.xdata$x:0000C28C                 db    0
.xdata$x:0000C28D                 db    0
.xdata$x:0000C28E                 db    0
.xdata$x:0000C28F                 db    0
.xdata$x:0000C290 __ehfuncinfo$??1TiXmlNodeA@@UAE@XZ db  22h ; "
.xdata$x:0000C290                                         ; DATA XREF: __ehhandler$??1TiXmlNodeA@@UAE@XZ+11o
.xdata$x:0000C291                 db    5
.xdata$x:0000C292                 db  93h ; ô
.xdata$x:0000C293                 db  19h
.xdata$x:0000C294                 db    2
.xdata$x:0000C295                 db    0
.xdata$x:0000C296                 db    0
.xdata$x:0000C297                 db    0
.xdata$x:0000C298                 dd offset __unwindtable$??1TiXmlNodeA@@UAE@XZ
.xdata$x:0000C29C                 db    0
.xdata$x:0000C29D                 db    0
.xdata$x:0000C29E                 db    0
.xdata$x:0000C29F                 db    0
.xdata$x:0000C2A0                 db    0
.xdata$x:0000C2A1                 db    0
.xdata$x:0000C2A2                 db    0
.xdata$x:0000C2A3                 db    0
.xdata$x:0000C2A4                 db    0
.xdata$x:0000C2A5                 db    0
.xdata$x:0000C2A6                 db    0
.xdata$x:0000C2A7                 db    0
.xdata$x:0000C2A8                 db    0
.xdata$x:0000C2A9                 db    0
.xdata$x:0000C2AA                 db    0
.xdata$x:0000C2AB                 db    0
.xdata$x:0000C2AC                 db    0
.xdata$x:0000C2AD                 db    0
.xdata$x:0000C2AE                 db    0
.xdata$x:0000C2AF                 db    0
.xdata$x:0000C2B0                 db    0
.xdata$x:0000C2B1                 db    0
.xdata$x:0000C2B2                 db    0
.xdata$x:0000C2B3                 db    0
.xdata$x:0000C2B4 __ehfuncinfo$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z db  22h ; "
.xdata$x:0000C2B4                                         ; DATA XREF: __ehhandler$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z+1Eo
.xdata$x:0000C2B5                 db    5
.xdata$x:0000C2B6                 db  93h ; ô
.xdata$x:0000C2B7                 db  19h
.xdata$x:0000C2B8                 db    2
.xdata$x:0000C2B9                 db    0
.xdata$x:0000C2BA                 db    0
.xdata$x:0000C2BB                 db    0
.xdata$x:0000C2BC                 dd offset __unwindtable$??6@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV01@ABVTiXmlNodeA@@@Z
.xdata$x:0000C2C0                 db    0
.xdata$x:0000C2C1                 db    0
.xdata$x:0000C2C2                 db    0
.xdata$x:0000C2C3                 db    0
.xdata$x:0000C2C4                 db    0
.xdata$x:0000C2C5                 db    0
.xdata$x:0000C2C6                 db    0
.xdata$x:0000C2C7                 db    0
.xdata$x:0000C2C8                 db    0
.xdata$x:0000C2C9                 db    0
.xdata$x:0000C2CA                 db    0
.xdata$x:0000C2CB                 db    0
.xdata$x:0000C2CC                 db    0
.xdata$x:0000C2CD                 db    0
.xdata$x:0000C2CE                 db    0
.xdata$x:0000C2CF                 db    0
.xdata$x:0000C2D0                 db    0
.xdata$x:0000C2D1                 db    0
.xdata$x:0000C2D2                 db    0
.xdata$x:0000C2D3                 db    0
.xdata$x:0000C2D4                 db    0
.xdata$x:0000C2D5                 db    0
.xdata$x:0000C2D6                 db    0
.xdata$x:0000C2D7                 db    0
.xdata$x:0000C2D8 __ehfuncinfo$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z db  22h ; "
.xdata$x:0000C2D8                                         ; DATA XREF: __ehhandler$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z+1Bo
.xdata$x:0000C2D9                 db    5
.xdata$x:0000C2DA                 db  93h ; ô
.xdata$x:0000C2DB                 db  19h
.xdata$x:0000C2DC                 db    1
.xdata$x:0000C2DD                 db    0
.xdata$x:0000C2DE                 db    0
.xdata$x:0000C2DF                 db    0
.xdata$x:0000C2E0                 dd offset __unwindtable$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z
.xdata$x:0000C2E4                 db    0
.xdata$x:0000C2E5                 db    0
.xdata$x:0000C2E6                 db    0
.xdata$x:0000C2E7                 db    0
.xdata$x:0000C2E8                 db    0
.xdata$x:0000C2E9                 db    0
.xdata$x:0000C2EA                 db    0
.xdata$x:0000C2EB                 db    0
.xdata$x:0000C2EC                 db    0
.xdata$x:0000C2ED                 db    0
.xdata$x:0000C2EE                 db    0
.xdata$x:0000C2EF                 db    0
.xdata$x:0000C2F0                 db    0
.xdata$x:0000C2F1                 db    0
.xdata$x:0000C2F2                 db    0
.xdata$x:0000C2F3                 db    0
.xdata$x:0000C2F4                 db    0
.xdata$x:0000C2F5                 db    0
.xdata$x:0000C2F6                 db    0
.xdata$x:0000C2F7                 db    0
.xdata$x:0000C2F8                 db    0
.xdata$x:0000C2F9                 db    0
.xdata$x:0000C2FA                 db    0
.xdata$x:0000C2FB                 db    0
.xdata$x:0000C2FC __ehfuncinfo$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z db  22h ; "
.xdata$x:0000C2FC                                         ; DATA XREF: __ehhandler$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z+1Bo
.xdata$x:0000C2FD                 db    5
.xdata$x:0000C2FE                 db  93h ; ô
.xdata$x:0000C2FF                 db  19h
.xdata$x:0000C300                 db    1
.xdata$x:0000C301                 db    0
.xdata$x:0000C302                 db    0
.xdata$x:0000C303                 db    0
.xdata$x:0000C304                 dd offset __unwindtable$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z
.xdata$x:0000C308                 align 20h
.xdata$x:0000C308 _xdata$x        ends
.xdata$x:0000C308
.xdata$x:0000C320 ; ===========================================================================
.xdata$x:0000C320
.xdata$x:0000C320 ; Segment type: Pure data
.xdata$x:0000C320 ; Segment permissions: Read
.xdata$x:0000C320 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C320                 assume cs:_xdata$x
.xdata$x:0000C320                 ;org 0C320h
.xdata$x:0000C320 ; COMDAT (pick associative to section at 7A2C)
.xdata$x:0000C320 __unwindtable$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ db 0FFh
.xdata$x:0000C320                                         ; DATA XREF: .xdata$x:0000C330o
.xdata$x:0000C321                 db 0FFh
.xdata$x:0000C322                 db 0FFh
.xdata$x:0000C323                 db 0FFh
.xdata$x:0000C324                 dd offset __unwindfunclet$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
.xdata$x:0000C328 __ehfuncinfo$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ db  22h ; "
.xdata$x:0000C328                                         ; DATA XREF: __ehhandler$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ+11o
.xdata$x:0000C329                 db    5
.xdata$x:0000C32A                 db  93h ; ô
.xdata$x:0000C32B                 db  19h
.xdata$x:0000C32C                 db    1
.xdata$x:0000C32D                 db    0
.xdata$x:0000C32E                 db    0
.xdata$x:0000C32F                 db    0
.xdata$x:0000C330                 dd offset __unwindtable$?SValue@TiXmlNodeA@@IBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
.xdata$x:0000C334                 db    0
.xdata$x:0000C335                 db    0
.xdata$x:0000C336                 db    0
.xdata$x:0000C337                 db    0
.xdata$x:0000C338                 db    0
.xdata$x:0000C339                 db    0
.xdata$x:0000C33A                 db    0
.xdata$x:0000C33B                 db    0
.xdata$x:0000C33C                 db    0
.xdata$x:0000C33D                 db    0
.xdata$x:0000C33E                 db    0
.xdata$x:0000C33F                 db    0
.xdata$x:0000C340                 db    0
.xdata$x:0000C341                 db    0
.xdata$x:0000C342                 db    0
.xdata$x:0000C343                 db    0
.xdata$x:0000C344                 db    0
.xdata$x:0000C345                 db    0
.xdata$x:0000C346                 db    0
.xdata$x:0000C347                 db    0
.xdata$x:0000C348                 db    0
.xdata$x:0000C349                 db    0
.xdata$x:0000C34A                 db    0
.xdata$x:0000C34B                 db    0
.xdata$x:0000C34B _xdata$x        ends
.xdata$x:0000C34B
.xdata$x:0000C34C ; ===========================================================================
.xdata$x:0000C34C
.xdata$x:0000C34C ; Segment type: Pure data
.xdata$x:0000C34C ; Segment permissions: Read
.xdata$x:0000C34C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C34C                 assume cs:_xdata$x
.xdata$x:0000C34C                 ;org 0C34Ch
.xdata$x:0000C34C ; COMDAT (pick associative to section at 52B4)
.xdata$x:0000C34C __unwindtable$??0TiXmlAttributeA@@QAE@XZ db 0FFh
.xdata$x:0000C34C                                         ; DATA XREF: .xdata$x:0000C36Co
.xdata$x:0000C34D                 db 0FFh
.xdata$x:0000C34E                 db 0FFh
.xdata$x:0000C34F                 db 0FFh
.xdata$x:0000C350                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$0
.xdata$x:0000C354                 align 8
.xdata$x:0000C358                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$1
.xdata$x:0000C35C                 db    1
.xdata$x:0000C35D                 db    0
.xdata$x:0000C35E                 db    0
.xdata$x:0000C35F                 db    0
.xdata$x:0000C360                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@XZ$2
.xdata$x:0000C364 __ehfuncinfo$??0TiXmlAttributeA@@QAE@XZ db  22h ; "
.xdata$x:0000C364                                         ; DATA XREF: __ehhandler$??0TiXmlAttributeA@@QAE@XZ+11o
.xdata$x:0000C365                 db    5
.xdata$x:0000C366                 db  93h ; ô
.xdata$x:0000C367                 db  19h
.xdata$x:0000C368                 db    3
.xdata$x:0000C369                 db    0
.xdata$x:0000C36A                 db    0
.xdata$x:0000C36B                 db    0
.xdata$x:0000C36C                 dd offset __unwindtable$??0TiXmlAttributeA@@QAE@XZ
.xdata$x:0000C370                 db    0
.xdata$x:0000C371                 db    0
.xdata$x:0000C372                 db    0
.xdata$x:0000C373                 db    0
.xdata$x:0000C374                 db    0
.xdata$x:0000C375                 db    0
.xdata$x:0000C376                 db    0
.xdata$x:0000C377                 db    0
.xdata$x:0000C378                 db    0
.xdata$x:0000C379                 db    0
.xdata$x:0000C37A                 db    0
.xdata$x:0000C37B                 db    0
.xdata$x:0000C37C                 db    0
.xdata$x:0000C37D                 db    0
.xdata$x:0000C37E                 db    0
.xdata$x:0000C37F                 db    0
.xdata$x:0000C380                 db    0
.xdata$x:0000C381                 db    0
.xdata$x:0000C382                 db    0
.xdata$x:0000C383                 db    0
.xdata$x:0000C384                 db    0
.xdata$x:0000C385                 db    0
.xdata$x:0000C386                 db    0
.xdata$x:0000C387                 db    0
.xdata$x:0000C387 _xdata$x        ends
.xdata$x:0000C387
.xdata$x:0000C388 ; ===========================================================================
.xdata$x:0000C388
.xdata$x:0000C388 ; Segment type: Pure data
.xdata$x:0000C388 ; Segment permissions: Read
.xdata$x:0000C388 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C388                 assume cs:_xdata$x
.xdata$x:0000C388                 ;org 0C388h
.xdata$x:0000C388 ; COMDAT (pick associative to section at 51C4)
.xdata$x:0000C388 __unwindtable$??0TiXmlAttributeA@@QAE@PBD0@Z db 0FFh
.xdata$x:0000C388                                         ; DATA XREF: .xdata$x:0000C3A8o
.xdata$x:0000C389                 db 0FFh
.xdata$x:0000C38A                 db 0FFh
.xdata$x:0000C38B                 db 0FFh
.xdata$x:0000C38C                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$0
.xdata$x:0000C390                 db    0
.xdata$x:0000C391                 db    0
.xdata$x:0000C392                 db    0
.xdata$x:0000C393                 db    0
.xdata$x:0000C394                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$1
.xdata$x:0000C398                 db    1
.xdata$x:0000C399                 db    0
.xdata$x:0000C39A                 db    0
.xdata$x:0000C39B                 db    0
.xdata$x:0000C39C                 dd offset __unwindfunclet$??0TiXmlAttributeA@@QAE@PBD0@Z$2
.xdata$x:0000C3A0 __ehfuncinfo$??0TiXmlAttributeA@@QAE@PBD0@Z db  22h ; "
.xdata$x:0000C3A0                                         ; DATA XREF: __ehhandler$??0TiXmlAttributeA@@QAE@PBD0@Z+11o
.xdata$x:0000C3A1                 db    5
.xdata$x:0000C3A2                 db  93h ; ô
.xdata$x:0000C3A3                 db  19h
.xdata$x:0000C3A4                 db    3
.xdata$x:0000C3A5                 db    0
.xdata$x:0000C3A6                 db    0
.xdata$x:0000C3A7                 db    0
.xdata$x:0000C3A8                 dd offset __unwindtable$??0TiXmlAttributeA@@QAE@PBD0@Z
.xdata$x:0000C3AC                 db    0
.xdata$x:0000C3AD                 db    0
.xdata$x:0000C3AE                 db    0
.xdata$x:0000C3AF                 db    0
.xdata$x:0000C3B0                 db    0
.xdata$x:0000C3B1                 db    0
.xdata$x:0000C3B2                 db    0
.xdata$x:0000C3B3                 db    0
.xdata$x:0000C3B4                 db    0
.xdata$x:0000C3B5                 db    0
.xdata$x:0000C3B6                 db    0
.xdata$x:0000C3B7                 db    0
.xdata$x:0000C3B8                 db    0
.xdata$x:0000C3B9                 db    0
.xdata$x:0000C3BA                 db    0
.xdata$x:0000C3BB                 db    0
.xdata$x:0000C3BC                 db    0
.xdata$x:0000C3BD                 db    0
.xdata$x:0000C3BE                 db    0
.xdata$x:0000C3BF                 db    0
.xdata$x:0000C3C0                 db    0
.xdata$x:0000C3C1                 db    0
.xdata$x:0000C3C2                 db    0
.xdata$x:0000C3C3                 db    0
.xdata$x:0000C3C3 _xdata$x        ends
.xdata$x:0000C3C3
.xdata$x:0000C3C4 ; ===========================================================================
.xdata$x:0000C3C4
.xdata$x:0000C3C4 ; Segment type: Pure data
.xdata$x:0000C3C4 ; Segment permissions: Read
.xdata$x:0000C3C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C3C4                 assume cs:_xdata$x
.xdata$x:0000C3C4                 ;org 0C3C4h
.xdata$x:0000C3C4 ; COMDAT (pick associative to section at 6634)
.xdata$x:0000C3C4 __unwindtable$??1TiXmlAttributeA@@UAE@XZ db 0FFh
.xdata$x:0000C3C4                                         ; DATA XREF: .xdata$x:0000C3E4o
.xdata$x:0000C3C5                 db 0FFh
.xdata$x:0000C3C6                 db 0FFh
.xdata$x:0000C3C7                 db 0FFh
.xdata$x:0000C3C8                 dd offset __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$0
.xdata$x:0000C3CC                 align 10h
.xdata$x:0000C3D0                 dd offset __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$1
.xdata$x:0000C3D4                 db    1
.xdata$x:0000C3D5                 db    0
.xdata$x:0000C3D6                 db    0
.xdata$x:0000C3D7                 db    0
.xdata$x:0000C3D8                 dd offset __unwindfunclet$??1TiXmlAttributeA@@UAE@XZ$2
.xdata$x:0000C3DC __ehfuncinfo$??1TiXmlAttributeA@@UAE@XZ db  22h ; "
.xdata$x:0000C3DC                                         ; DATA XREF: __ehhandler$??1TiXmlAttributeA@@UAE@XZ+11o
.xdata$x:0000C3DD                 db    5
.xdata$x:0000C3DE                 db  93h ; ô
.xdata$x:0000C3DF                 db  19h
.xdata$x:0000C3E0                 db    3
.xdata$x:0000C3E1                 db    0
.xdata$x:0000C3E2                 db    0
.xdata$x:0000C3E3                 db    0
.xdata$x:0000C3E4                 dd offset __unwindtable$??1TiXmlAttributeA@@UAE@XZ
.xdata$x:0000C3E8                 align 20h
.xdata$x:0000C3E8 _xdata$x        ends
.xdata$x:0000C3E8
.xdata$x:0000C400 ; ===========================================================================
.xdata$x:0000C400
.xdata$x:0000C400 ; Segment type: Pure data
.xdata$x:0000C400 ; Segment permissions: Read
.xdata$x:0000C400 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C400                 assume cs:_xdata$x
.xdata$x:0000C400                 ;org 0C400h
.xdata$x:0000C400 ; COMDAT (pick associative to section at 53A8)
.xdata$x:0000C400 __unwindtable$??0TiXmlCommentA@@QAE@XZ db 0FFh
.xdata$x:0000C400                                         ; DATA XREF: .xdata$x:0000C410o
.xdata$x:0000C401                 db 0FFh
.xdata$x:0000C402                 db 0FFh
.xdata$x:0000C403                 db 0FFh
.xdata$x:0000C404                 dd offset __unwindfunclet$??0TiXmlCommentA@@QAE@XZ$0
.xdata$x:0000C408 __ehfuncinfo$??0TiXmlCommentA@@QAE@XZ db  22h ; "
.xdata$x:0000C408                                         ; DATA XREF: __ehhandler$??0TiXmlCommentA@@QAE@XZ+11o
.xdata$x:0000C409                 db    5
.xdata$x:0000C40A                 db  93h ; ô
.xdata$x:0000C40B                 db  19h
.xdata$x:0000C40C                 db    1
.xdata$x:0000C40D                 db    0
.xdata$x:0000C40E                 db    0
.xdata$x:0000C40F                 db    0
.xdata$x:0000C410                 dd offset __unwindtable$??0TiXmlCommentA@@QAE@XZ
.xdata$x:0000C414                 db    0
.xdata$x:0000C415                 db    0
.xdata$x:0000C416                 db    0
.xdata$x:0000C417                 db    0
.xdata$x:0000C418                 db    0
.xdata$x:0000C419                 db    0
.xdata$x:0000C41A                 db    0
.xdata$x:0000C41B                 db    0
.xdata$x:0000C41C                 db    0
.xdata$x:0000C41D                 db    0
.xdata$x:0000C41E                 db    0
.xdata$x:0000C41F                 db    0
.xdata$x:0000C420                 db    0
.xdata$x:0000C421                 db    0
.xdata$x:0000C422                 db    0
.xdata$x:0000C423                 db    0
.xdata$x:0000C424                 db    0
.xdata$x:0000C425                 db    0
.xdata$x:0000C426                 db    0
.xdata$x:0000C427                 db    0
.xdata$x:0000C428                 db    0
.xdata$x:0000C429                 db    0
.xdata$x:0000C42A                 db    0
.xdata$x:0000C42B                 db    0
.xdata$x:0000C42B _xdata$x        ends
.xdata$x:0000C42B
.xdata$x:0000C42C ; ===========================================================================
.xdata$x:0000C42C
.xdata$x:0000C42C ; Segment type: Pure data
.xdata$x:0000C42C ; Segment permissions: Read
.xdata$x:0000C42C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C42C                 assume cs:_xdata$x
.xdata$x:0000C42C                 ;org 0C42Ch
.xdata$x:0000C42C ; COMDAT (pick associative to section at 66F0)
.xdata$x:0000C42C __unwindtable$??1TiXmlCommentA@@UAE@XZ db 0FFh
.xdata$x:0000C42C                                         ; DATA XREF: .xdata$x:0000C43Co
.xdata$x:0000C42D                 db 0FFh
.xdata$x:0000C42E                 db 0FFh
.xdata$x:0000C42F                 db 0FFh
.xdata$x:0000C430                 dd offset __unwindfunclet$??1TiXmlCommentA@@UAE@XZ$0
.xdata$x:0000C434 __ehfuncinfo$??1TiXmlCommentA@@UAE@XZ db  22h ; "
.xdata$x:0000C434                                         ; DATA XREF: __ehhandler$??1TiXmlCommentA@@UAE@XZ+11o
.xdata$x:0000C435                 db    5
.xdata$x:0000C436                 db  93h ; ô
.xdata$x:0000C437                 db  19h
.xdata$x:0000C438                 db    1
.xdata$x:0000C439                 db    0
.xdata$x:0000C43A                 db    0
.xdata$x:0000C43B                 db    0
.xdata$x:0000C43C                 dd offset __unwindtable$??1TiXmlCommentA@@UAE@XZ
.xdata$x:0000C440                 db    0
.xdata$x:0000C441                 db    0
.xdata$x:0000C442                 db    0
.xdata$x:0000C443                 db    0
.xdata$x:0000C444                 db    0
.xdata$x:0000C445                 db    0
.xdata$x:0000C446                 db    0
.xdata$x:0000C447                 db    0
.xdata$x:0000C448                 db    0
.xdata$x:0000C449                 db    0
.xdata$x:0000C44A                 db    0
.xdata$x:0000C44B                 db    0
.xdata$x:0000C44C                 db    0
.xdata$x:0000C44D                 db    0
.xdata$x:0000C44E                 db    0
.xdata$x:0000C44F                 db    0
.xdata$x:0000C450                 db    0
.xdata$x:0000C451                 db    0
.xdata$x:0000C452                 db    0
.xdata$x:0000C453                 db    0
.xdata$x:0000C454                 db    0
.xdata$x:0000C455                 db    0
.xdata$x:0000C456                 db    0
.xdata$x:0000C457                 db    0
.xdata$x:0000C457 _xdata$x        ends
.xdata$x:0000C457
.xdata$x:0000C458 ; ===========================================================================
.xdata$x:0000C458
.xdata$x:0000C458 ; Segment type: Pure data
.xdata$x:0000C458 ; Segment permissions: Read
.xdata$x:0000C458 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C458                 assume cs:_xdata$x
.xdata$x:0000C458                 ;org 0C458h
.xdata$x:0000C458 ; COMDAT (pick associative to section at 5524)
.xdata$x:0000C458 __unwindtable$??0TiXmlTextA@@QAE@PBD@Z db 0FFh
.xdata$x:0000C458                                         ; DATA XREF: .xdata$x:0000C468o
.xdata$x:0000C459                 db 0FFh
.xdata$x:0000C45A                 db 0FFh
.xdata$x:0000C45B                 db 0FFh
.xdata$x:0000C45C                 dd offset __unwindfunclet$??0TiXmlTextA@@QAE@PBD@Z$0
.xdata$x:0000C460 __ehfuncinfo$??0TiXmlTextA@@QAE@PBD@Z db  22h ; "
.xdata$x:0000C460                                         ; DATA XREF: __ehhandler$??0TiXmlTextA@@QAE@PBD@Z+11o
.xdata$x:0000C461                 db    5
.xdata$x:0000C462                 db  93h ; ô
.xdata$x:0000C463                 db  19h
.xdata$x:0000C464                 db    1
.xdata$x:0000C465                 db    0
.xdata$x:0000C466                 db    0
.xdata$x:0000C467                 db    0
.xdata$x:0000C468                 dd offset __unwindtable$??0TiXmlTextA@@QAE@PBD@Z
.xdata$x:0000C46C                 db    0
.xdata$x:0000C46D                 db    0
.xdata$x:0000C46E                 db    0
.xdata$x:0000C46F                 db    0
.xdata$x:0000C470                 db    0
.xdata$x:0000C471                 db    0
.xdata$x:0000C472                 db    0
.xdata$x:0000C473                 db    0
.xdata$x:0000C474                 db    0
.xdata$x:0000C475                 db    0
.xdata$x:0000C476                 db    0
.xdata$x:0000C477                 db    0
.xdata$x:0000C478                 db    0
.xdata$x:0000C479                 db    0
.xdata$x:0000C47A                 db    0
.xdata$x:0000C47B                 db    0
.xdata$x:0000C47C                 db    0
.xdata$x:0000C47D                 db    0
.xdata$x:0000C47E                 db    0
.xdata$x:0000C47F                 db    0
.xdata$x:0000C480                 db    0
.xdata$x:0000C481                 db    0
.xdata$x:0000C482                 db    0
.xdata$x:0000C483                 db    0
.xdata$x:0000C483 _xdata$x        ends
.xdata$x:0000C483
.xdata$x:0000C484 ; ===========================================================================
.xdata$x:0000C484
.xdata$x:0000C484 ; Segment type: Pure data
.xdata$x:0000C484 ; Segment permissions: Read
.xdata$x:0000C484 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C484                 assume cs:_xdata$x
.xdata$x:0000C484                 ;org 0C484h
.xdata$x:0000C484 ; COMDAT (pick associative to section at 68C4)
.xdata$x:0000C484 __unwindtable$??1TiXmlTextA@@UAE@XZ db 0FFh
.xdata$x:0000C484                                         ; DATA XREF: .xdata$x:0000C494o
.xdata$x:0000C485                 db 0FFh
.xdata$x:0000C486                 db 0FFh
.xdata$x:0000C487                 db 0FFh
.xdata$x:0000C488                 dd offset __unwindfunclet$??1TiXmlTextA@@UAE@XZ$0
.xdata$x:0000C48C __ehfuncinfo$??1TiXmlTextA@@UAE@XZ db  22h ; "
.xdata$x:0000C48C                                         ; DATA XREF: __ehhandler$??1TiXmlTextA@@UAE@XZ+11o
.xdata$x:0000C48D                 db    5
.xdata$x:0000C48E                 db  93h ; ô
.xdata$x:0000C48F                 db  19h
.xdata$x:0000C490                 db    1
.xdata$x:0000C491                 db    0
.xdata$x:0000C492                 db    0
.xdata$x:0000C493                 db    0
.xdata$x:0000C494                 dd offset __unwindtable$??1TiXmlTextA@@UAE@XZ
.xdata$x:0000C498                 db    0
.xdata$x:0000C499                 db    0
.xdata$x:0000C49A                 db    0
.xdata$x:0000C49B                 db    0
.xdata$x:0000C49C                 db    0
.xdata$x:0000C49D                 db    0
.xdata$x:0000C49E                 db    0
.xdata$x:0000C49F                 db    0
.xdata$x:0000C4A0                 db    0
.xdata$x:0000C4A1                 db    0
.xdata$x:0000C4A2                 db    0
.xdata$x:0000C4A3                 db    0
.xdata$x:0000C4A4                 db    0
.xdata$x:0000C4A5                 db    0
.xdata$x:0000C4A6                 db    0
.xdata$x:0000C4A7                 db    0
.xdata$x:0000C4A8                 db    0
.xdata$x:0000C4A9                 db    0
.xdata$x:0000C4AA                 db    0
.xdata$x:0000C4AB                 db    0
.xdata$x:0000C4AC                 db    0
.xdata$x:0000C4AD                 db    0
.xdata$x:0000C4AE                 db    0
.xdata$x:0000C4AF                 db    0
.xdata$x:0000C4AF _xdata$x        ends
.xdata$x:0000C4AF
.xdata$x:0000C4B0 ; ===========================================================================
.xdata$x:0000C4B0
.xdata$x:0000C4B0 ; Segment type: Pure data
.xdata$x:0000C4B0 ; Segment permissions: Read
.xdata$x:0000C4B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C4B0                 assume cs:_xdata$x
.xdata$x:0000C4B0                 ;org 0C4B0h
.xdata$x:0000C4B0 ; COMDAT (pick associative to section at 5440)
.xdata$x:0000C4B0 __unwindtable$??0TiXmlDeclarationA@@QAE@XZ db 0FFh
.xdata$x:0000C4B0                                         ; DATA XREF: .xdata$x:0000C4D8o
.xdata$x:0000C4B1                 db 0FFh
.xdata$x:0000C4B2                 db 0FFh
.xdata$x:0000C4B3                 db 0FFh
.xdata$x:0000C4B4                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$0
.xdata$x:0000C4B8                 db    0
.xdata$x:0000C4B9                 db    0
.xdata$x:0000C4BA                 db    0
.xdata$x:0000C4BB                 db    0
.xdata$x:0000C4BC                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$1
.xdata$x:0000C4C0                 db    1
.xdata$x:0000C4C1                 db    0
.xdata$x:0000C4C2                 db    0
.xdata$x:0000C4C3                 db    0
.xdata$x:0000C4C4                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$2
.xdata$x:0000C4C8                 db    2
.xdata$x:0000C4C9                 db    0
.xdata$x:0000C4CA                 db    0
.xdata$x:0000C4CB                 db    0
.xdata$x:0000C4CC                 dd offset __unwindfunclet$??0TiXmlDeclarationA@@QAE@XZ$3
.xdata$x:0000C4D0 __ehfuncinfo$??0TiXmlDeclarationA@@QAE@XZ db  22h ; "
.xdata$x:0000C4D0                                         ; DATA XREF: __ehhandler$??0TiXmlDeclarationA@@QAE@XZ+11o
.xdata$x:0000C4D1                 db    5
.xdata$x:0000C4D2                 db  93h ; ô
.xdata$x:0000C4D3                 db  19h
.xdata$x:0000C4D4                 db    4
.xdata$x:0000C4D5                 db    0
.xdata$x:0000C4D6                 db    0
.xdata$x:0000C4D7                 db    0
.xdata$x:0000C4D8                 dd offset __unwindtable$??0TiXmlDeclarationA@@QAE@XZ
.xdata$x:0000C4DC                 db    0
.xdata$x:0000C4DD                 db    0
.xdata$x:0000C4DE                 db    0
.xdata$x:0000C4DF                 db    0
.xdata$x:0000C4E0                 db    0
.xdata$x:0000C4E1                 db    0
.xdata$x:0000C4E2                 db    0
.xdata$x:0000C4E3                 db    0
.xdata$x:0000C4E4                 db    0
.xdata$x:0000C4E5                 db    0
.xdata$x:0000C4E6                 db    0
.xdata$x:0000C4E7                 db    0
.xdata$x:0000C4E8                 db    0
.xdata$x:0000C4E9                 db    0
.xdata$x:0000C4EA                 db    0
.xdata$x:0000C4EB                 db    0
.xdata$x:0000C4EC                 db    0
.xdata$x:0000C4ED                 db    0
.xdata$x:0000C4EE                 db    0
.xdata$x:0000C4EF                 db    0
.xdata$x:0000C4F0                 db    0
.xdata$x:0000C4F1                 db    0
.xdata$x:0000C4F2                 db    0
.xdata$x:0000C4F3                 db    0
.xdata$x:0000C4F3 _xdata$x        ends
.xdata$x:0000C4F3
.xdata$x:0000C4F4 ; ===========================================================================
.xdata$x:0000C4F4
.xdata$x:0000C4F4 ; Segment type: Pure data
.xdata$x:0000C4F4 ; Segment permissions: Read
.xdata$x:0000C4F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C4F4                 assume cs:_xdata$x
.xdata$x:0000C4F4                 ;org 0C4F4h
.xdata$x:0000C4F4 ; COMDAT (pick associative to section at 6768)
.xdata$x:0000C4F4 __unwindtable$??1TiXmlDeclarationA@@UAE@XZ db 0FFh
.xdata$x:0000C4F4                                         ; DATA XREF: .xdata$x:0000C51Co
.xdata$x:0000C4F5                 db 0FFh
.xdata$x:0000C4F6                 db 0FFh
.xdata$x:0000C4F7                 db 0FFh
.xdata$x:0000C4F8                 dd offset __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$0
.xdata$x:0000C4FC                 align 10h
.xdata$x:0000C500                 dd offset __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$1
.xdata$x:0000C504                 db    1
.xdata$x:0000C505                 db    0
.xdata$x:0000C506                 db    0
.xdata$x:0000C507                 db    0
.xdata$x:0000C508                 dd offset __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$2
.xdata$x:0000C50C                 db    2
.xdata$x:0000C50D                 db    0
.xdata$x:0000C50E                 db    0
.xdata$x:0000C50F                 db    0
.xdata$x:0000C510                 dd offset __unwindfunclet$??1TiXmlDeclarationA@@UAE@XZ$3
.xdata$x:0000C514 __ehfuncinfo$??1TiXmlDeclarationA@@UAE@XZ db  22h ; "
.xdata$x:0000C514                                         ; DATA XREF: __ehhandler$??1TiXmlDeclarationA@@UAE@XZ+11o
.xdata$x:0000C515                 db    5
.xdata$x:0000C516                 db  93h ; ô
.xdata$x:0000C517                 db  19h
.xdata$x:0000C518                 db    4
.xdata$x:0000C519                 db    0
.xdata$x:0000C51A                 db    0
.xdata$x:0000C51B                 db    0
.xdata$x:0000C51C                 dd offset __unwindtable$??1TiXmlDeclarationA@@UAE@XZ
.xdata$x:0000C520                 db    0
.xdata$x:0000C521                 db    0
.xdata$x:0000C522                 db    0
.xdata$x:0000C523                 db    0
.xdata$x:0000C524                 db    0
.xdata$x:0000C525                 db    0
.xdata$x:0000C526                 db    0
.xdata$x:0000C527                 db    0
.xdata$x:0000C528                 db    0
.xdata$x:0000C529                 db    0
.xdata$x:0000C52A                 db    0
.xdata$x:0000C52B                 db    0
.xdata$x:0000C52C                 db    0
.xdata$x:0000C52D                 db    0
.xdata$x:0000C52E                 db    0
.xdata$x:0000C52F                 db    0
.xdata$x:0000C530                 db    0
.xdata$x:0000C531                 db    0
.xdata$x:0000C532                 db    0
.xdata$x:0000C533                 db    0
.xdata$x:0000C534                 db    0
.xdata$x:0000C535                 db    0
.xdata$x:0000C536                 db    0
.xdata$x:0000C537                 db    0
.xdata$x:0000C537 _xdata$x        ends
.xdata$x:0000C537
.xdata$x:0000C538 ; ===========================================================================
.xdata$x:0000C538
.xdata$x:0000C538 ; Segment type: Pure data
.xdata$x:0000C538 ; Segment permissions: Read
.xdata$x:0000C538 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C538                 assume cs:_xdata$x
.xdata$x:0000C538                 ;org 0C538h
.xdata$x:0000C538 ; COMDAT (pick associative to section at 55B0)
.xdata$x:0000C538 __unwindtable$??0TiXmlUnknownA@@QAE@XZ db 0FFh
.xdata$x:0000C538                                         ; DATA XREF: .xdata$x:0000C548o
.xdata$x:0000C539                 db 0FFh
.xdata$x:0000C53A                 db 0FFh
.xdata$x:0000C53B                 db 0FFh
.xdata$x:0000C53C                 dd offset __unwindfunclet$??0TiXmlUnknownA@@QAE@XZ$0
.xdata$x:0000C540 __ehfuncinfo$??0TiXmlUnknownA@@QAE@XZ db  22h ; "
.xdata$x:0000C540                                         ; DATA XREF: __ehhandler$??0TiXmlUnknownA@@QAE@XZ+11o
.xdata$x:0000C541                 db    5
.xdata$x:0000C542                 db  93h ; ô
.xdata$x:0000C543                 db  19h
.xdata$x:0000C544                 db    1
.xdata$x:0000C545                 db    0
.xdata$x:0000C546                 db    0
.xdata$x:0000C547                 db    0
.xdata$x:0000C548                 dd offset __unwindtable$??0TiXmlUnknownA@@QAE@XZ
.xdata$x:0000C54C                 db    0
.xdata$x:0000C54D                 db    0
.xdata$x:0000C54E                 db    0
.xdata$x:0000C54F                 db    0
.xdata$x:0000C550                 db    0
.xdata$x:0000C551                 db    0
.xdata$x:0000C552                 db    0
.xdata$x:0000C553                 db    0
.xdata$x:0000C554                 db    0
.xdata$x:0000C555                 db    0
.xdata$x:0000C556                 db    0
.xdata$x:0000C557                 db    0
.xdata$x:0000C558                 db    0
.xdata$x:0000C559                 db    0
.xdata$x:0000C55A                 db    0
.xdata$x:0000C55B                 db    0
.xdata$x:0000C55C                 db    0
.xdata$x:0000C55D                 db    0
.xdata$x:0000C55E                 db    0
.xdata$x:0000C55F                 db    0
.xdata$x:0000C560                 db    0
.xdata$x:0000C561                 db    0
.xdata$x:0000C562                 db    0
.xdata$x:0000C563                 db    0
.xdata$x:0000C563 _xdata$x        ends
.xdata$x:0000C563
.xdata$x:0000C564 ; ===========================================================================
.xdata$x:0000C564
.xdata$x:0000C564 ; Segment type: Pure data
.xdata$x:0000C564 ; Segment permissions: Read
.xdata$x:0000C564 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C564                 assume cs:_xdata$x
.xdata$x:0000C564                 ;org 0C564h
.xdata$x:0000C564 ; COMDAT (pick associative to section at 693C)
.xdata$x:0000C564 __unwindtable$??1TiXmlUnknownA@@UAE@XZ db 0FFh
.xdata$x:0000C564                                         ; DATA XREF: .xdata$x:0000C574o
.xdata$x:0000C565                 db 0FFh
.xdata$x:0000C566                 db 0FFh
.xdata$x:0000C567                 db 0FFh
.xdata$x:0000C568                 dd offset __unwindfunclet$??1TiXmlUnknownA@@UAE@XZ$0
.xdata$x:0000C56C __ehfuncinfo$??1TiXmlUnknownA@@UAE@XZ db  22h ; "
.xdata$x:0000C56C                                         ; DATA XREF: __ehhandler$??1TiXmlUnknownA@@UAE@XZ+11o
.xdata$x:0000C56D                 db    5
.xdata$x:0000C56E                 db  93h ; ô
.xdata$x:0000C56F                 db  19h
.xdata$x:0000C570                 db    1
.xdata$x:0000C571                 db    0
.xdata$x:0000C572                 db    0
.xdata$x:0000C573                 db    0
.xdata$x:0000C574                 dd offset __unwindtable$??1TiXmlUnknownA@@UAE@XZ
.xdata$x:0000C578                 db    0
.xdata$x:0000C579                 db    0
.xdata$x:0000C57A                 db    0
.xdata$x:0000C57B                 db    0
.xdata$x:0000C57C                 db    0
.xdata$x:0000C57D                 db    0
.xdata$x:0000C57E                 db    0
.xdata$x:0000C57F                 db    0
.xdata$x:0000C580                 db    0
.xdata$x:0000C581                 db    0
.xdata$x:0000C582                 db    0
.xdata$x:0000C583                 db    0
.xdata$x:0000C584                 db    0
.xdata$x:0000C585                 db    0
.xdata$x:0000C586                 db    0
.xdata$x:0000C587                 db    0
.xdata$x:0000C588                 db    0
.xdata$x:0000C589                 db    0
.xdata$x:0000C58A                 db    0
.xdata$x:0000C58B                 db    0
.xdata$x:0000C58C                 db    0
.xdata$x:0000C58D                 db    0
.xdata$x:0000C58E                 db    0
.xdata$x:0000C58F                 db    0
.xdata$x:0000C58F _xdata$x        ends
.xdata$x:0000C58F
.xdata$x:0000C590 ; ===========================================================================
.xdata$x:0000C590
.xdata$x:0000C590 ; Segment type: Pure data
.xdata$x:0000C590 ; Segment permissions: Read
.xdata$x:0000C590 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C590                 assume cs:_xdata$x
.xdata$x:0000C590                 ;org 0C590h
.xdata$x:0000C590 ; COMDAT (pick associative to section at 6830)
.xdata$x:0000C590 __unwindtable$??1TiXmlDocumentA@@UAE@XZ db 0FFh
.xdata$x:0000C590                                         ; DATA XREF: .xdata$x:0000C5A8o
.xdata$x:0000C591                 db 0FFh
.xdata$x:0000C592                 db 0FFh
.xdata$x:0000C593                 db 0FFh
.xdata$x:0000C594                 dd offset __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$0
.xdata$x:0000C598                 db    0
.xdata$x:0000C599                 db    0
.xdata$x:0000C59A                 db    0
.xdata$x:0000C59B                 db    0
.xdata$x:0000C59C                 dd offset __unwindfunclet$??1TiXmlDocumentA@@UAE@XZ$1
.xdata$x:0000C5A0 __ehfuncinfo$??1TiXmlDocumentA@@UAE@XZ db  22h ; "
.xdata$x:0000C5A0                                         ; DATA XREF: __ehhandler$??1TiXmlDocumentA@@UAE@XZ+11o
.xdata$x:0000C5A1                 db    5
.xdata$x:0000C5A2                 db  93h ; ô
.xdata$x:0000C5A3                 db  19h
.xdata$x:0000C5A4                 db    2
.xdata$x:0000C5A5                 db    0
.xdata$x:0000C5A6                 db    0
.xdata$x:0000C5A7                 db    0
.xdata$x:0000C5A8                 dd offset __unwindtable$??1TiXmlDocumentA@@UAE@XZ
.xdata$x:0000C5AC                 db    0
.xdata$x:0000C5AD                 db    0
.xdata$x:0000C5AE                 db    0
.xdata$x:0000C5AF                 db    0
.xdata$x:0000C5B0                 db    0
.xdata$x:0000C5B1                 db    0
.xdata$x:0000C5B2                 db    0
.xdata$x:0000C5B3                 db    0
.xdata$x:0000C5B4                 db    0
.xdata$x:0000C5B5                 db    0
.xdata$x:0000C5B6                 db    0
.xdata$x:0000C5B7                 db    0
.xdata$x:0000C5B8                 db    0
.xdata$x:0000C5B9                 db    0
.xdata$x:0000C5BA                 db    0
.xdata$x:0000C5BB                 db    0
.xdata$x:0000C5BC                 db    0
.xdata$x:0000C5BD                 db    0
.xdata$x:0000C5BE                 db    0
.xdata$x:0000C5BF                 db    0
.xdata$x:0000C5C0                 db    0
.xdata$x:0000C5C1                 db    0
.xdata$x:0000C5C2                 db    0
.xdata$x:0000C5C3                 db    0
.xdata$x:0000C5C3 _xdata$x        ends
.xdata$x:0000C5C3
.xdata$x:0000C5C4 ; ===========================================================================
.xdata$x:0000C5C4
.xdata$x:0000C5C4 ; Segment type: Pure data
.xdata$x:0000C5C4 ; Segment permissions: Read
.xdata$x:0000C5C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C5C4                 assume cs:_xdata$x
.xdata$x:0000C5C4                 ;org 0C5C4h
.xdata$x:0000C5C4 ; COMDAT (pick associative to section at 3FCC)
.xdata$x:0000C5C4 __catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 db    0
.xdata$x:0000C5C4                                         ; DATA XREF: .xdata$x:0000C5E4o
.xdata$x:0000C5C5                 db    0
.xdata$x:0000C5C6                 db    0
.xdata$x:0000C5C7                 db    0
.xdata$x:0000C5C8                 db    0
.xdata$x:0000C5C9                 db    0
.xdata$x:0000C5CA                 db    0
.xdata$x:0000C5CB                 db    0
.xdata$x:0000C5CC                 db    0
.xdata$x:0000C5CD                 db    0
.xdata$x:0000C5CE                 db    0
.xdata$x:0000C5CF                 db    0
.xdata$x:0000C5D0                 dd offset __catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
.xdata$x:0000C5D4 __tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z db    1
.xdata$x:0000C5D4                                         ; DATA XREF: .xdata$x:0000C610o
.xdata$x:0000C5D5                 db    0
.xdata$x:0000C5D6                 db    0
.xdata$x:0000C5D7                 db    0
.xdata$x:0000C5D8                 db    1
.xdata$x:0000C5D9                 db    0
.xdata$x:0000C5DA                 db    0
.xdata$x:0000C5DB                 db    0
.xdata$x:0000C5DC                 db    2
.xdata$x:0000C5DD                 db    0
.xdata$x:0000C5DE                 db    0
.xdata$x:0000C5DF                 db    0
.xdata$x:0000C5E0                 db    1
.xdata$x:0000C5E1                 db    0
.xdata$x:0000C5E2                 db    0
.xdata$x:0000C5E3                 db    0
.xdata$x:0000C5E4                 dd offset __catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
.xdata$x:0000C5E8 __unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z db 0FFh
.xdata$x:0000C5E8                                         ; DATA XREF: .xdata$x:0000C608o
.xdata$x:0000C5E9                 db 0FFh
.xdata$x:0000C5EA                 db 0FFh
.xdata$x:0000C5EB                 db 0FFh
.xdata$x:0000C5EC                 dd offset __unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
.xdata$x:0000C5F0                 align 20h
.xdata$x:0000C600 __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z db  22h ; "
.xdata$x:0000C600                                         ; DATA XREF: __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z+11o
.xdata$x:0000C601                 db    5
.xdata$x:0000C602                 db  93h ; ô
.xdata$x:0000C603                 db  19h
.xdata$x:0000C604                 db    3
.xdata$x:0000C605                 db    0
.xdata$x:0000C606                 db    0
.xdata$x:0000C607                 db    0
.xdata$x:0000C608                 dd offset __unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.xdata$x:0000C60C                 db    1
.xdata$x:0000C60D                 db    0
.xdata$x:0000C60E                 db    0
.xdata$x:0000C60F                 db    0
.xdata$x:0000C610                 dd offset __tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
.xdata$x:0000C614                 db    0
.xdata$x:0000C615                 db    0
.xdata$x:0000C616                 db    0
.xdata$x:0000C617                 db    0
.xdata$x:0000C618                 db    0
.xdata$x:0000C619                 db    0
.xdata$x:0000C61A                 db    0
.xdata$x:0000C61B                 db    0
.xdata$x:0000C61C                 db    0
.xdata$x:0000C61D                 db    0
.xdata$x:0000C61E                 db    0
.xdata$x:0000C61F                 db    0
.xdata$x:0000C620                 db    0
.xdata$x:0000C621                 db    0
.xdata$x:0000C622                 db    0
.xdata$x:0000C623                 db    0
.xdata$x:0000C623 _xdata$x        ends
.xdata$x:0000C623
.xdata$x:0000C624 ; ===========================================================================
.xdata$x:0000C624
.xdata$x:0000C624 ; Segment type: Pure data
.xdata$x:0000C624 ; Segment permissions: Read
.xdata$x:0000C624 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C624                 assume cs:_xdata$x
.xdata$x:0000C624                 ;org 0C624h
.xdata$x:0000C624 ; COMDAT (pick associative to section at 3D00)
.xdata$x:0000C624 __catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3 db    0
.xdata$x:0000C624                                         ; DATA XREF: .xdata$x:0000C644o
.xdata$x:0000C625                 db    0
.xdata$x:0000C626                 db    0
.xdata$x:0000C627                 db    0
.xdata$x:0000C628                 db    0
.xdata$x:0000C629                 db    0
.xdata$x:0000C62A                 db    0
.xdata$x:0000C62B                 db    0
.xdata$x:0000C62C                 db    0
.xdata$x:0000C62D                 db    0
.xdata$x:0000C62E                 db    0
.xdata$x:0000C62F                 db    0
.xdata$x:0000C630                 dd offset __catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
.xdata$x:0000C634 __tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z db    1
.xdata$x:0000C634                                         ; DATA XREF: .xdata$x:0000C670o
.xdata$x:0000C635                 db    0
.xdata$x:0000C636                 db    0
.xdata$x:0000C637                 db    0
.xdata$x:0000C638                 db    1
.xdata$x:0000C639                 db    0
.xdata$x:0000C63A                 db    0
.xdata$x:0000C63B                 db    0
.xdata$x:0000C63C                 db    2
.xdata$x:0000C63D                 db    0
.xdata$x:0000C63E                 db    0
.xdata$x:0000C63F                 db    0
.xdata$x:0000C640                 db    1
.xdata$x:0000C641                 db    0
.xdata$x:0000C642                 db    0
.xdata$x:0000C643                 db    0
.xdata$x:0000C644                 dd offset __catchsym$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3
.xdata$x:0000C648 __unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z db 0FFh
.xdata$x:0000C648                                         ; DATA XREF: .xdata$x:0000C668o
.xdata$x:0000C649                 db 0FFh
.xdata$x:0000C64A                 db 0FFh
.xdata$x:0000C64B                 db 0FFh
.xdata$x:0000C64C                 dd offset __unwindfunclet$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2
.xdata$x:0000C650                 align 20h
.xdata$x:0000C660 __ehfuncinfo$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z db  22h ; "
.xdata$x:0000C660                                         ; DATA XREF: __ehhandler$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+11o
.xdata$x:0000C661                 db    5
.xdata$x:0000C662                 db  93h ; ô
.xdata$x:0000C663                 db  19h
.xdata$x:0000C664                 db    3
.xdata$x:0000C665                 db    0
.xdata$x:0000C666                 db    0
.xdata$x:0000C667                 db    0
.xdata$x:0000C668                 dd offset __unwindtable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.xdata$x:0000C66C                 db    1
.xdata$x:0000C66D                 db    0
.xdata$x:0000C66E                 db    0
.xdata$x:0000C66F                 db    0
.xdata$x:0000C670                 dd offset __tryblocktable$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
.xdata$x:0000C674                 db    0
.xdata$x:0000C675                 db    0
.xdata$x:0000C676                 db    0
.xdata$x:0000C677                 db    0
.xdata$x:0000C678                 db    0
.xdata$x:0000C679                 db    0
.xdata$x:0000C67A                 db    0
.xdata$x:0000C67B                 db    0
.xdata$x:0000C67C                 db    0
.xdata$x:0000C67D                 db    0
.xdata$x:0000C67E                 db    0
.xdata$x:0000C67F                 db    0
.xdata$x:0000C680                 db    0
.xdata$x:0000C681                 db    0
.xdata$x:0000C682                 db    0
.xdata$x:0000C683                 db    0
.xdata$x:0000C683 _xdata$x        ends
.xdata$x:0000C683
.xdata$x:0000C684 ; ===========================================================================
.xdata$x:0000C684
.xdata$x:0000C684 ; Segment type: Pure data
.xdata$x:0000C684 ; Segment permissions: Read
.xdata$x:0000C684 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C684                 assume cs:_xdata$x
.xdata$x:0000C684                 ;org 0C684h
.xdata$x:0000C684 ; COMDAT (pick associative to section at 4BC0)
.xdata$x:0000C684 __unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z db 0FFh
.xdata$x:0000C684                                         ; DATA XREF: .xdata$x:0000C6A4o
.xdata$x:0000C685                 db 0FFh
.xdata$x:0000C686                 db 0FFh
.xdata$x:0000C687                 db 0FFh
.xdata$x:0000C688                 dd offset __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
.xdata$x:0000C68C                 align 10h
.xdata$x:0000C690                 dd offset __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
.xdata$x:0000C694                 db    1
.xdata$x:0000C695                 db    0
.xdata$x:0000C696                 db    0
.xdata$x:0000C697                 db    0
.xdata$x:0000C698                 dd offset __unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$2
.xdata$x:0000C69C __ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z db  22h ; "
.xdata$x:0000C69C                                         ; DATA XREF: __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z+11o
.xdata$x:0000C69D                 db    5
.xdata$x:0000C69E                 db  93h ; ô
.xdata$x:0000C69F                 db  19h
.xdata$x:0000C6A0                 db    3
.xdata$x:0000C6A1                 db    0
.xdata$x:0000C6A2                 db    0
.xdata$x:0000C6A3                 db    0
.xdata$x:0000C6A4                 dd offset __unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.xdata$x:0000C6A8                 align 20h
.xdata$x:0000C6A8 _xdata$x        ends
.xdata$x:0000C6A8
.xdata$x:0000C6C0 ; ===========================================================================
.xdata$x:0000C6C0
.xdata$x:0000C6C0 ; Segment type: Pure data
.xdata$x:0000C6C0 ; Segment permissions: Read
.xdata$x:0000C6C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C6C0                 assume cs:_xdata$x
.xdata$x:0000C6C0                 ;org 0C6C0h
.xdata$x:0000C6C0 ; COMDAT (pick associative to section at 63D0)
.xdata$x:0000C6C0 __unwindtable$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ db 0FFh
.xdata$x:0000C6C0                                         ; DATA XREF: .xdata$x:0000C6D8o
.xdata$x:0000C6C1                 db 0FFh
.xdata$x:0000C6C2                 db 0FFh
.xdata$x:0000C6C3                 db 0FFh
.xdata$x:0000C6C4                 dd offset __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
.xdata$x:0000C6C8                 db    0
.xdata$x:0000C6C9                 db    0
.xdata$x:0000C6CA                 db    0
.xdata$x:0000C6CB                 db    0
.xdata$x:0000C6CC                 dd offset __unwindfunclet$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$1
.xdata$x:0000C6D0 __ehfuncinfo$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ db  22h ; "
.xdata$x:0000C6D0                                         ; DATA XREF: __ehhandler$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ+11o
.xdata$x:0000C6D1                 db    5
.xdata$x:0000C6D2                 db  93h ; ô
.xdata$x:0000C6D3                 db  19h
.xdata$x:0000C6D4                 db    2
.xdata$x:0000C6D5                 db    0
.xdata$x:0000C6D6                 db    0
.xdata$x:0000C6D7                 db    0
.xdata$x:0000C6D8                 dd offset __unwindtable$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.xdata$x:0000C6DC                 db    0
.xdata$x:0000C6DD                 db    0
.xdata$x:0000C6DE                 db    0
.xdata$x:0000C6DF                 db    0
.xdata$x:0000C6E0                 db    0
.xdata$x:0000C6E1                 db    0
.xdata$x:0000C6E2                 db    0
.xdata$x:0000C6E3                 db    0
.xdata$x:0000C6E4                 db    0
.xdata$x:0000C6E5                 db    0
.xdata$x:0000C6E6                 db    0
.xdata$x:0000C6E7                 db    0
.xdata$x:0000C6E8                 db    0
.xdata$x:0000C6E9                 db    0
.xdata$x:0000C6EA                 db    0
.xdata$x:0000C6EB                 db    0
.xdata$x:0000C6EC                 db    0
.xdata$x:0000C6ED                 db    0
.xdata$x:0000C6EE                 db    0
.xdata$x:0000C6EF                 db    0
.xdata$x:0000C6F0                 db    0
.xdata$x:0000C6F1                 db    0
.xdata$x:0000C6F2                 db    0
.xdata$x:0000C6F3                 db    0
.xdata$x:0000C6F3 _xdata$x        ends
.xdata$x:0000C6F3
.xdata$x:0000C6F4 ; ===========================================================================
.xdata$x:0000C6F4
.xdata$x:0000C6F4 ; Segment type: Pure data
.xdata$x:0000C6F4 ; Segment permissions: Read
.xdata$x:0000C6F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C6F4                 assume cs:_xdata$x
.xdata$x:0000C6F4                 ;org 0C6F4h
.xdata$x:0000C6F4 ; COMDAT (pick associative to section at AB44)
.xdata$x:0000C6F4 __unwindtable$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db 0FFh
.xdata$x:0000C6F4                                         ; DATA XREF: .xdata$x:0000C704o
.xdata$x:0000C6F5                 db 0FFh
.xdata$x:0000C6F6                 db 0FFh
.xdata$x:0000C6F7                 db 0FFh
.xdata$x:0000C6F8                 dd offset __unwindfunclet$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
.xdata$x:0000C6FC __ehfuncinfo$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db  22h ; "
.xdata$x:0000C6FC                                         ; DATA XREF: __ehhandler$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ+11o
.xdata$x:0000C6FD                 db    5
.xdata$x:0000C6FE                 db  93h ; ô
.xdata$x:0000C6FF                 db  19h
.xdata$x:0000C700                 db    1
.xdata$x:0000C701                 db    0
.xdata$x:0000C702                 db    0
.xdata$x:0000C703                 db    0
.xdata$x:0000C704                 dd offset __unwindtable$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.xdata$x:0000C708                 align 20h
.xdata$x:0000C708 _xdata$x        ends
.xdata$x:0000C708
.xdata$x:0000C720 ; ===========================================================================
.xdata$x:0000C720
.xdata$x:0000C720 ; Segment type: Pure data
.xdata$x:0000C720 ; Segment permissions: Read
.xdata$x:0000C720 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C720                 assume cs:_xdata$x
.xdata$x:0000C720                 ;org 0C720h
.xdata$x:0000C720 ; COMDAT (pick associative to section at 5054)
.xdata$x:0000C720 __unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z db 0FFh
.xdata$x:0000C720                                         ; DATA XREF: .xdata$x:0000C730o
.xdata$x:0000C721                 db 0FFh
.xdata$x:0000C722                 db 0FFh
.xdata$x:0000C723                 db 0FFh
.xdata$x:0000C724                 dd offset __unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
.xdata$x:0000C728 __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z db  22h ; "
.xdata$x:0000C728                                         ; DATA XREF: __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z+11o
.xdata$x:0000C729                 db    5
.xdata$x:0000C72A                 db  93h ; ô
.xdata$x:0000C72B                 db  19h
.xdata$x:0000C72C                 db    1
.xdata$x:0000C72D                 db    0
.xdata$x:0000C72E                 db    0
.xdata$x:0000C72F                 db    0
.xdata$x:0000C730                 dd offset __unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
.xdata$x:0000C734                 db    0
.xdata$x:0000C735                 db    0
.xdata$x:0000C736                 db    0
.xdata$x:0000C737                 db    0
.xdata$x:0000C738                 db    0
.xdata$x:0000C739                 db    0
.xdata$x:0000C73A                 db    0
.xdata$x:0000C73B                 db    0
.xdata$x:0000C73C                 db    0
.xdata$x:0000C73D                 db    0
.xdata$x:0000C73E                 db    0
.xdata$x:0000C73F                 db    0
.xdata$x:0000C740                 db    0
.xdata$x:0000C741                 db    0
.xdata$x:0000C742                 db    0
.xdata$x:0000C743                 db    0
.xdata$x:0000C744                 db    0
.xdata$x:0000C745                 db    0
.xdata$x:0000C746                 db    0
.xdata$x:0000C747                 db    0
.xdata$x:0000C748                 db    0
.xdata$x:0000C749                 db    0
.xdata$x:0000C74A                 db    0
.xdata$x:0000C74B                 db    0
.xdata$x:0000C74B _xdata$x        ends
.xdata$x:0000C74B
.xdata$x:0000C74C ; ===========================================================================
.xdata$x:0000C74C
.xdata$x:0000C74C ; Segment type: Pure data
.xdata$x:0000C74C ; Segment permissions: Read
.xdata$x:0000C74C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C74C                 assume cs:_xdata$x
.xdata$x:0000C74C                 ;org 0C74Ch
.xdata$x:0000C74C ; COMDAT (pick associative to section at 6534)
.xdata$x:0000C74C __unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ db 0FFh
.xdata$x:0000C74C                                         ; DATA XREF: .xdata$x:0000C75Co
.xdata$x:0000C74D                 db 0FFh
.xdata$x:0000C74E                 db 0FFh
.xdata$x:0000C74F                 db 0FFh
.xdata$x:0000C750                 dd offset __unwindfunclet$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ$0
.xdata$x:0000C754 __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ db  22h ; "
.xdata$x:0000C754                                         ; DATA XREF: __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ+11o
.xdata$x:0000C755                 db    5
.xdata$x:0000C756                 db  93h ; ô
.xdata$x:0000C757                 db  19h
.xdata$x:0000C758                 db    1
.xdata$x:0000C759                 db    0
.xdata$x:0000C75A                 db    0
.xdata$x:0000C75B                 db    0
.xdata$x:0000C75C                 dd offset __unwindtable$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
.xdata$x:0000C760                 db    0
.xdata$x:0000C761                 db    0
.xdata$x:0000C762                 db    0
.xdata$x:0000C763                 db    0
.xdata$x:0000C764                 db    0
.xdata$x:0000C765                 db    0
.xdata$x:0000C766                 db    0
.xdata$x:0000C767                 db    0
.xdata$x:0000C768                 db    0
.xdata$x:0000C769                 db    0
.xdata$x:0000C76A                 db    0
.xdata$x:0000C76B                 db    0
.xdata$x:0000C76C                 db    0
.xdata$x:0000C76D                 db    0
.xdata$x:0000C76E                 db    0
.xdata$x:0000C76F                 db    0
.xdata$x:0000C770                 db    0
.xdata$x:0000C771                 db    0
.xdata$x:0000C772                 db    0
.xdata$x:0000C773                 db    0
.xdata$x:0000C774                 db    0
.xdata$x:0000C775                 db    0
.xdata$x:0000C776                 db    0
.xdata$x:0000C777                 db    0
.xdata$x:0000C777 _xdata$x        ends
.xdata$x:0000C777
.xdata$x:0000C778 ; ===========================================================================
.xdata$x:0000C778
.xdata$x:0000C778 ; Segment type: Pure data
.xdata$x:0000C778 ; Segment permissions: Read
.xdata$x:0000C778 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C778                 assume cs:_xdata$x
.xdata$x:0000C778                 ;org 0C778h
.xdata$x:0000C778 ; COMDAT (pick associative to section at ABDC)
.xdata$x:0000C778 __unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db 0FFh
.xdata$x:0000C778                                         ; DATA XREF: .xdata$x:0000C7A0o
.xdata$x:0000C779                 db 0FFh
.xdata$x:0000C77A                 db 0FFh
.xdata$x:0000C77B                 db 0FFh
.xdata$x:0000C77C                 dd offset __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1
.xdata$x:0000C780                 db    0
.xdata$x:0000C781                 db    0
.xdata$x:0000C782                 db    0
.xdata$x:0000C783                 db    0
.xdata$x:0000C784                 dd offset __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
.xdata$x:0000C788                 db    0
.xdata$x:0000C789                 db    0
.xdata$x:0000C78A                 db    0
.xdata$x:0000C78B                 db    0
.xdata$x:0000C78C                 dd offset __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$2
.xdata$x:0000C790                 db    0
.xdata$x:0000C791                 db    0
.xdata$x:0000C792                 db    0
.xdata$x:0000C793                 db    0
.xdata$x:0000C794                 dd offset __unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$3
.xdata$x:0000C798 __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db  22h ; "
.xdata$x:0000C798                                         ; DATA XREF: __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ+1Bo
.xdata$x:0000C799                 db    5
.xdata$x:0000C79A                 db  93h ; ô
.xdata$x:0000C79B                 db  19h
.xdata$x:0000C79C                 db    4
.xdata$x:0000C79D                 db    0
.xdata$x:0000C79E                 db    0
.xdata$x:0000C79F                 db    0
.xdata$x:0000C7A0                 dd offset __unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.xdata$x:0000C7A4                 db    0
.xdata$x:0000C7A5                 db    0
.xdata$x:0000C7A6                 db    0
.xdata$x:0000C7A7                 db    0
.xdata$x:0000C7A8                 db    0
.xdata$x:0000C7A9                 db    0
.xdata$x:0000C7AA                 db    0
.xdata$x:0000C7AB                 db    0
.xdata$x:0000C7AC                 db    0
.xdata$x:0000C7AD                 db    0
.xdata$x:0000C7AE                 db    0
.xdata$x:0000C7AF                 db    0
.xdata$x:0000C7B0                 db    0
.xdata$x:0000C7B1                 db    0
.xdata$x:0000C7B2                 db    0
.xdata$x:0000C7B3                 db    0
.xdata$x:0000C7B4                 db    0
.xdata$x:0000C7B5                 db    0
.xdata$x:0000C7B6                 db    0
.xdata$x:0000C7B7                 db    0
.xdata$x:0000C7B8                 db    0
.xdata$x:0000C7B9                 db    0
.xdata$x:0000C7BA                 db    0
.xdata$x:0000C7BB                 db    0
.xdata$x:0000C7BB _xdata$x        ends
.xdata$x:0000C7BB
.xdata$x:0000C7BC ; ===========================================================================
.xdata$x:0000C7BC
.xdata$x:0000C7BC ; Segment type: Pure data
.xdata$x:0000C7BC ; Segment permissions: Read
.xdata$x:0000C7BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C7BC                 assume cs:_xdata$x
.xdata$x:0000C7BC                 ;org 0C7BCh
.xdata$x:0000C7BC ; COMDAT (pick associative to section at 4668)
.xdata$x:0000C7BC __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000C7BC                                         ; DATA XREF: .xdata$x:0000C7CCo
.xdata$x:0000C7BD                 db 0FFh
.xdata$x:0000C7BE                 db 0FFh
.xdata$x:0000C7BF                 db 0FFh
.xdata$x:0000C7C0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000C7C4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000C7C4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000C7C5                 db    5
.xdata$x:0000C7C6                 db  93h ; ô
.xdata$x:0000C7C7                 db  19h
.xdata$x:0000C7C8                 db    1
.xdata$x:0000C7C9                 db    0
.xdata$x:0000C7CA                 db    0
.xdata$x:0000C7CB                 db    0
.xdata$x:0000C7CC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000C7D0                 db    0
.xdata$x:0000C7D1                 db    0
.xdata$x:0000C7D2                 db    0
.xdata$x:0000C7D3                 db    0
.xdata$x:0000C7D4                 db    0
.xdata$x:0000C7D5                 db    0
.xdata$x:0000C7D6                 db    0
.xdata$x:0000C7D7                 db    0
.xdata$x:0000C7D8                 db    0
.xdata$x:0000C7D9                 db    0
.xdata$x:0000C7DA                 db    0
.xdata$x:0000C7DB                 db    0
.xdata$x:0000C7DC                 db    0
.xdata$x:0000C7DD                 db    0
.xdata$x:0000C7DE                 db    0
.xdata$x:0000C7DF                 db    0
.xdata$x:0000C7E0                 db    0
.xdata$x:0000C7E1                 db    0
.xdata$x:0000C7E2                 db    0
.xdata$x:0000C7E3                 db    0
.xdata$x:0000C7E4                 db    0
.xdata$x:0000C7E5                 db    0
.xdata$x:0000C7E6                 db    0
.xdata$x:0000C7E7                 db    0
.xdata$x:0000C7E7 _xdata$x        ends
.xdata$x:0000C7E7
.xdata$x:0000C7E8 ; ===========================================================================
.xdata$x:0000C7E8
.xdata$x:0000C7E8 ; Segment type: Pure data
.xdata$x:0000C7E8 ; Segment permissions: Read
.xdata$x:0000C7E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C7E8                 assume cs:_xdata$x
.xdata$x:0000C7E8                 ;org 0C7E8h
.xdata$x:0000C7E8 ; COMDAT (pick associative to section at 5FD8)
.xdata$x:0000C7E8 __unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z db 0FFh
.xdata$x:0000C7E8                                         ; DATA XREF: .xdata$x:0000C7F8o
.xdata$x:0000C7E9                 db 0FFh
.xdata$x:0000C7EA                 db 0FFh
.xdata$x:0000C7EB                 db 0FFh
.xdata$x:0000C7EC                 dd offset __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
.xdata$x:0000C7F0 __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z db  22h ; "
.xdata$x:0000C7F0                                         ; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z+11o
.xdata$x:0000C7F1                 db    5
.xdata$x:0000C7F2                 db  93h ; ô
.xdata$x:0000C7F3                 db  19h
.xdata$x:0000C7F4                 db    1
.xdata$x:0000C7F5                 db    0
.xdata$x:0000C7F6                 db    0
.xdata$x:0000C7F7                 db    0
.xdata$x:0000C7F8                 dd offset __unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
.xdata$x:0000C7FC                 db    0
.xdata$x:0000C7FD                 db    0
.xdata$x:0000C7FE                 db    0
.xdata$x:0000C7FF                 db    0
.xdata$x:0000C800                 db    0
.xdata$x:0000C801                 db    0
.xdata$x:0000C802                 db    0
.xdata$x:0000C803                 db    0
.xdata$x:0000C804                 db    0
.xdata$x:0000C805                 db    0
.xdata$x:0000C806                 db    0
.xdata$x:0000C807                 db    0
.xdata$x:0000C808                 db    0
.xdata$x:0000C809                 db    0
.xdata$x:0000C80A                 db    0
.xdata$x:0000C80B                 db    0
.xdata$x:0000C80C                 db    0
.xdata$x:0000C80D                 db    0
.xdata$x:0000C80E                 db    0
.xdata$x:0000C80F                 db    0
.xdata$x:0000C810                 db    0
.xdata$x:0000C811                 db    0
.xdata$x:0000C812                 db    0
.xdata$x:0000C813                 db    0
.xdata$x:0000C813 _xdata$x        ends
.xdata$x:0000C813
.xdata$x:0000C814 ; ===========================================================================
.xdata$x:0000C814
.xdata$x:0000C814 ; Segment type: Pure data
.xdata$x:0000C814 ; Segment permissions: Read
.xdata$x:0000C814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C814                 assume cs:_xdata$x
.xdata$x:0000C814                 ;org 0C814h
.xdata$x:0000C814 ; COMDAT (pick associative to section at 6F40)
.xdata$x:0000C814 __unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C814                                         ; DATA XREF: .xdata$x:0000C824o
.xdata$x:0000C815                 db 0FFh
.xdata$x:0000C816                 db 0FFh
.xdata$x:0000C817                 db 0FFh
.xdata$x:0000C818                 dd offset __unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
.xdata$x:0000C81C __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C81C                                         ; DATA XREF: __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000C81D                 db    5
.xdata$x:0000C81E                 db  93h ; ô
.xdata$x:0000C81F                 db  19h
.xdata$x:0000C820                 db    1
.xdata$x:0000C821                 db    0
.xdata$x:0000C822                 db    0
.xdata$x:0000C823                 db    0
.xdata$x:0000C824                 dd offset __unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
.xdata$x:0000C828                 align 20h
.xdata$x:0000C828 _xdata$x        ends
.xdata$x:0000C828
.xdata$x:0000C840 ; ===========================================================================
.xdata$x:0000C840
.xdata$x:0000C840 ; Segment type: Pure data
.xdata$x:0000C840 ; Segment permissions: Read
.xdata$x:0000C840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C840                 assume cs:_xdata$x
.xdata$x:0000C840                 ;org 0C840h
.xdata$x:0000C840 ; COMDAT (pick associative to section at 4594)
.xdata$x:0000C840 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000C840                                         ; DATA XREF: .xdata$x:0000C850o
.xdata$x:0000C841                 db 0FFh
.xdata$x:0000C842                 db 0FFh
.xdata$x:0000C843                 db 0FFh
.xdata$x:0000C844                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000C848 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000C848                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000C849                 db    5
.xdata$x:0000C84A                 db  93h ; ô
.xdata$x:0000C84B                 db  19h
.xdata$x:0000C84C                 db    1
.xdata$x:0000C84D                 db    0
.xdata$x:0000C84E                 db    0
.xdata$x:0000C84F                 db    0
.xdata$x:0000C850                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000C854                 db    0
.xdata$x:0000C855                 db    0
.xdata$x:0000C856                 db    0
.xdata$x:0000C857                 db    0
.xdata$x:0000C858                 db    0
.xdata$x:0000C859                 db    0
.xdata$x:0000C85A                 db    0
.xdata$x:0000C85B                 db    0
.xdata$x:0000C85C                 db    0
.xdata$x:0000C85D                 db    0
.xdata$x:0000C85E                 db    0
.xdata$x:0000C85F                 db    0
.xdata$x:0000C860                 db    0
.xdata$x:0000C861                 db    0
.xdata$x:0000C862                 db    0
.xdata$x:0000C863                 db    0
.xdata$x:0000C864                 db    0
.xdata$x:0000C865                 db    0
.xdata$x:0000C866                 db    0
.xdata$x:0000C867                 db    0
.xdata$x:0000C868                 db    0
.xdata$x:0000C869                 db    0
.xdata$x:0000C86A                 db    0
.xdata$x:0000C86B                 db    0
.xdata$x:0000C86B _xdata$x        ends
.xdata$x:0000C86B
.bss:0000C86C ; ===========================================================================
.bss:0000C86C
.bss:0000C86C ; Segment type: Uninitialized
.bss:0000C86C ; Segment permissions: Read/Write
.bss:0000C86C _bss            segment byte public 'BSS' use32
.bss:0000C86C                 assume cs:_bss
.bss:0000C86C                 ;org 0C86Ch
.bss:0000C86C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C86C _allocator_arg  db    ? ;
.bss:0000C86D _piecewise_construct db    ? ;
.bss:0000C86E                 align 10h
.bss:0000C86E _bss            ends
.bss:0000C86E
.rdata:0000C870 ; ===========================================================================
.rdata:0000C870
.rdata:0000C870 ; Segment type: Pure data
.rdata:0000C870 ; Segment permissions: Read
.rdata:0000C870 _rdata          segment dword public 'DATA' use32
.rdata:0000C870                 assume cs:_rdata
.rdata:0000C870                 ;org 0C870h
.rdata:0000C870 ; COMDAT (pick any)
.rdata:0000C870                 public ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
.rdata:0000C870 ; size_t std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.rdata:0000C870 ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000C870                                         ; DATA XREF: TiXmlAttributeA::Print(_iobuf *,int)+C3r
.rdata:0000C870                                         ; TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)+16r ...
.rdata:0000C870 _rdata          ends
.rdata:0000C870
.rdata:0000C874 ; ===========================================================================
.rdata:0000C874
.rdata:0000C874 ; Segment type: Pure data
.rdata:0000C874 ; Segment permissions: Read
.rdata:0000C874 _rdata          segment dword public 'DATA' use32
.rdata:0000C874                 assume cs:_rdata
.rdata:0000C874                 ;org 0C874h
.rdata:0000C874 ; COMDAT (pick largest)
.rdata:0000C874                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:0000C878                 public ??_7runtime_error@std@@6B@
.rdata:0000C878 ; const std::runtime_error::`vftable'
.rdata:0000C878 ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:0000C878                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:0000C878                                         ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+49o ...
.rdata:0000C878                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:0000C87C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000C87C _rdata          ends
.rdata:0000C87C
.xdata$x:0000C880 ; ===========================================================================
.xdata$x:0000C880
.xdata$x:0000C880 ; Segment type: Pure data
.xdata$x:0000C880 ; Segment permissions: Read
.xdata$x:0000C880 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C880                 assume cs:_xdata$x
.xdata$x:0000C880                 ;org 0C880h
.xdata$x:0000C880 ; COMDAT (pick any)
.xdata$x:0000C880                 public __TI2?AVruntime_error@std@@
.xdata$x:0000C880 __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+A6o
.xdata$x:0000C881                 db    0
.xdata$x:0000C882                 db    0
.xdata$x:0000C883                 db    0
.xdata$x:0000C884                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:0000C888                 db    0
.xdata$x:0000C889                 db    0
.xdata$x:0000C88A                 db    0
.xdata$x:0000C88B                 db    0
.xdata$x:0000C88C                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:0000C88C _xdata$x        ends
.xdata$x:0000C88C
.xdata$x:0000C890 ; ===========================================================================
.xdata$x:0000C890
.xdata$x:0000C890 ; Segment type: Pure data
.xdata$x:0000C890 ; Segment permissions: Read
.xdata$x:0000C890 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C890                 assume cs:_xdata$x
.xdata$x:0000C890                 ;org 0C890h
.xdata$x:0000C890 ; COMDAT (pick any)
.xdata$x:0000C890                 public __CTA2?AVruntime_error@std@@
.xdata$x:0000C890 __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:0000C88Co
.xdata$x:0000C891                 db    0
.xdata$x:0000C892                 db    0
.xdata$x:0000C893                 db    0
.xdata$x:0000C894                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000C898                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000C898 _xdata$x        ends
.xdata$x:0000C898
.data$r:0000C89C ; ===========================================================================
.data$r:0000C89C
.data$r:0000C89C ; Segment type: Pure data
.data$r:0000C89C ; Segment permissions: Read/Write
.data$r:0000C89C _data$r         segment dword public 'DATA' use32
.data$r:0000C89C                 assume cs:_data$r
.data$r:0000C89C                 ;org 0C89Ch
.data$r:0000C89C ; COMDAT (pick any)
.data$r:0000C89C                 public ??_R0?AVruntime_error@std@@@8
.data$r:0000C89C ; class std::runtime_error `RTTI Type Descriptor'
.data$r:0000C89C ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000C89C                                         ; DATA XREF: .xdata$x:0000C8C0o
.data$r:0000C89C                                         ; .rdata$r:0000D4C8o ...
.data$r:0000C89C                                         ; const type_info::`vftable'
.data$r:0000C8A0                 db    0
.data$r:0000C8A1                 db    0
.data$r:0000C8A2                 db    0
.data$r:0000C8A3                 db    0
.data$r:0000C8A4                 db  2Eh ; .
.data$r:0000C8A5                 db  3Fh ; ?
.data$r:0000C8A6                 db  41h ; A
.data$r:0000C8A7                 db  56h ; V
.data$r:0000C8A8                 db  72h ; r
.data$r:0000C8A9                 db  75h ; u
.data$r:0000C8AA                 db  6Eh ; n
.data$r:0000C8AB                 db  74h ; t
.data$r:0000C8AC                 db  69h ; i
.data$r:0000C8AD                 db  6Dh ; m
.data$r:0000C8AE                 db  65h ; e
.data$r:0000C8AF                 db  5Fh ; _
.data$r:0000C8B0                 db  65h ; e
.data$r:0000C8B1                 db  72h ; r
.data$r:0000C8B2                 db  72h ; r
.data$r:0000C8B3                 db  6Fh ; o
.data$r:0000C8B4                 db  72h ; r
.data$r:0000C8B5                 db  40h ; @
.data$r:0000C8B6                 db  73h ; s
.data$r:0000C8B7                 db  74h ; t
.data$r:0000C8B8                 db  64h ; d
.data$r:0000C8B9                 db  40h ; @
.data$r:0000C8BA                 db  40h ; @
.data$r:0000C8BB                 db    0
.data$r:0000C8BB _data$r         ends
.data$r:0000C8BB
.xdata$x:0000C8BC ; ===========================================================================
.xdata$x:0000C8BC
.xdata$x:0000C8BC ; Segment type: Pure data
.xdata$x:0000C8BC ; Segment permissions: Read
.xdata$x:0000C8BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8BC                 assume cs:_xdata$x
.xdata$x:0000C8BC                 ;org 0C8BCh
.xdata$x:0000C8BC ; COMDAT (pick any)
.xdata$x:0000C8BC                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000C8BC __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000C8BC                                         ; DATA XREF: .xdata$x:0000C894o
.xdata$x:0000C8BC                                         ; .xdata$x:0000CB6Co
.xdata$x:0000C8BD                 db    0
.xdata$x:0000C8BE                 db    0
.xdata$x:0000C8BF                 db    0
.xdata$x:0000C8C0                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:0000C8C4                 align 8
.xdata$x:0000C8C8                 db 0FFh
.xdata$x:0000C8C9                 db 0FFh
.xdata$x:0000C8CA                 db 0FFh
.xdata$x:0000C8CB                 db 0FFh
.xdata$x:0000C8CC                 db    0
.xdata$x:0000C8CD                 db    0
.xdata$x:0000C8CE                 db    0
.xdata$x:0000C8CF                 db    0
.xdata$x:0000C8D0                 db  0Ch
.xdata$x:0000C8D1                 db    0
.xdata$x:0000C8D2                 db    0
.xdata$x:0000C8D3                 db    0
.xdata$x:0000C8D4                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:0000C8D4 _xdata$x        ends
.xdata$x:0000C8D4
.data$r:0000C8D8 ; ===========================================================================
.data$r:0000C8D8
.data$r:0000C8D8 ; Segment type: Pure data
.data$r:0000C8D8 ; Segment permissions: Read/Write
.data$r:0000C8D8 _data$r         segment dword public 'DATA' use32
.data$r:0000C8D8                 assume cs:_data$r
.data$r:0000C8D8                 ;org 0C8D8h
.data$r:0000C8D8 ; COMDAT (pick any)
.data$r:0000C8D8                 public ??_R0?AVexception@std@@@8
.data$r:0000C8D8 ; class std::exception `RTTI Type Descriptor'
.data$r:0000C8D8 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000C8D8                                         ; DATA XREF: .xdata$x:0000C8F8o
.data$r:0000C8D8                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000C8D8                                         ; const type_info::`vftable'
.data$r:0000C8DC                 align 10h
.data$r:0000C8E0 a_?avexception@ db '.?AVexception@std@@',0
.data$r:0000C8E0 _data$r         ends
.data$r:0000C8E0
.xdata$x:0000C8F4 ; ===========================================================================
.xdata$x:0000C8F4
.xdata$x:0000C8F4 ; Segment type: Pure data
.xdata$x:0000C8F4 ; Segment permissions: Read
.xdata$x:0000C8F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C8F4                 assume cs:_xdata$x
.xdata$x:0000C8F4                 ;org 0C8F4h
.xdata$x:0000C8F4 ; COMDAT (pick any)
.xdata$x:0000C8F4                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000C8F4 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000C8F4                                         ; DATA XREF: .xdata$x:0000C898o
.xdata$x:0000C8F4                                         ; .xdata$x:0000CB70o ...
.xdata$x:0000C8F5                 db    0
.xdata$x:0000C8F6                 db    0
.xdata$x:0000C8F7                 db    0
.xdata$x:0000C8F8                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:0000C8FC                 align 10h
.xdata$x:0000C900                 db 0FFh
.xdata$x:0000C901                 db 0FFh
.xdata$x:0000C902                 db 0FFh
.xdata$x:0000C903                 db 0FFh
.xdata$x:0000C904                 db    0
.xdata$x:0000C905                 db    0
.xdata$x:0000C906                 db    0
.xdata$x:0000C907                 db    0
.xdata$x:0000C908                 db  0Ch
.xdata$x:0000C909                 db    0
.xdata$x:0000C90A                 db    0
.xdata$x:0000C90B                 db    0
.xdata$x:0000C90C                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:0000C90C _xdata$x        ends
.xdata$x:0000C90C
.rdata:0000C910 ; ===========================================================================
.rdata:0000C910
.rdata:0000C910 ; Segment type: Pure data
.rdata:0000C910 ; Segment permissions: Read
.rdata:0000C910 _rdata          segment dword public 'DATA' use32
.rdata:0000C910                 assume cs:_rdata
.rdata:0000C910                 ;org 0C910h
.rdata:0000C910 ; COMDAT (pick any)
.rdata:0000C910                 public ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
.rdata:0000C910 ; char `string'[]
.rdata:0000C910 ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ db 'bad locale name',0
.rdata:0000C910                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+99o
.rdata:0000C910 _rdata          ends
.rdata:0000C910
.rdata:0000C920 ; ===========================================================================
.rdata:0000C920
.rdata:0000C920 ; Segment type: Pure data
.rdata:0000C920 ; Segment permissions: Read
.rdata:0000C920 _rdata          segment dword public 'DATA' use32
.rdata:0000C920                 assume cs:_rdata
.rdata:0000C920                 ;org 0C920h
.rdata:0000C920 ; COMDAT (pick largest)
.rdata:0000C920                 dd offset ??_R4_Facet_base@std@@6B@ ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata:0000C924                 public ??_7_Facet_base@std@@6B@
.rdata:0000C924 ; const std::_Facet_base::`vftable'
.rdata:0000C924 ??_7_Facet_base@std@@6B@ dd offset ??_E_Facet_base@std@@UAEPAXI@Z
.rdata:0000C924                                         ; DATA XREF: std::_Facet_base::_Facet_base(void)+Ao
.rdata:0000C924                                         ; std::_Facet_base::~_Facet_base(void)+Ao
.rdata:0000C924                                         ; std::_Facet_base::`vector deleting destructor'(uint)
.rdata:0000C928                 dd offset __purecall
.rdata:0000C92C                 dd offset __purecall
.rdata:0000C92C _rdata          ends
.rdata:0000C92C
.rdata:0000C930 ; ===========================================================================
.rdata:0000C930
.rdata:0000C930 ; Segment type: Pure data
.rdata:0000C930 ; Segment permissions: Read
.rdata:0000C930 _rdata          segment dword public 'DATA' use32
.rdata:0000C930                 assume cs:_rdata
.rdata:0000C930                 ;org 0C930h
.rdata:0000C930 ; COMDAT (pick largest)
.rdata:0000C930                 dd offset ??_R4facet@locale@std@@6B@ ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata:0000C934                 public ??_7facet@locale@std@@6B@
.rdata:0000C934 ; const std::locale::facet::`vftable'
.rdata:0000C934 ??_7facet@locale@std@@6B@ dd offset ??_Efacet@locale@std@@MAEPAXI@Z
.rdata:0000C934                                         ; DATA XREF: std::locale::facet::facet(uint)+38o
.rdata:0000C934                                         ; std::locale::facet::~facet(void)+29o
.rdata:0000C934                                         ; std::locale::facet::`vector deleting destructor'(uint)
.rdata:0000C938                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000C93C                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000C93C _rdata          ends
.rdata:0000C93C
.rdata:0000C940 ; ===========================================================================
.rdata:0000C940
.rdata:0000C940 ; Segment type: Pure data
.rdata:0000C940 ; Segment permissions: Read
.rdata:0000C940 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C940 _rdata          segment para public 'DATA' use32
.rdata:0000C940                 assume cs:_rdata
.rdata:0000C940                 ;org 0C940h
.rdata:0000C940 ; COMDAT (pick any)
.rdata:0000C940                 public ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000C940 ; char `string'[]
.rdata:0000C940 ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xl'
.rdata:0000C940                                         ; DATA XREF: std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+4Fo
.rdata:0000C940                                         ; __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+5o
.rdata:0000C940                 db 'ocale',0
.rdata:0000C987                 align 4
.rdata:0000C987 _rdata          ends
.rdata:0000C987
.rdata:0000C988 ; ===========================================================================
.rdata:0000C988
.rdata:0000C988 ; Segment type: Pure data
.rdata:0000C988 ; Segment permissions: Read
.rdata:0000C988 _rdata          segment byte public 'DATA' use32
.rdata:0000C988                 assume cs:_rdata
.rdata:0000C988                 ;org 0C988h
.rdata:0000C988 ; COMDAT (pick any)
.rdata:0000C988                 public ??_C@_00CNPNBAHC@?$AA@
.rdata:0000C988 ; char `string'
.rdata:0000C988 ??_C@_00CNPNBAHC@?$AA@ db 0             ; DATA XREF: TiXmlDocumentA::ClearError(void)+18o
.rdata:0000C988                                         ; std::locale::c_str(void)+11o
.rdata:0000C989                 align 4
.rdata:0000C989 _rdata          ends
.rdata:0000C989
.rdata:0000C98C ; ===========================================================================
.rdata:0000C98C
.rdata:0000C98C ; Segment type: Pure data
.rdata:0000C98C ; Segment permissions: Read
.rdata:0000C98C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C98C _rdata          segment para public 'DATA' use32
.rdata:0000C98C                 assume cs:_rdata
.rdata:0000C98C                 ;org 0C98Ch
.rdata:0000C98C ; COMDAT (pick any)
.rdata:0000C98C                 public ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000C98C ; wchar_t `string'
.rdata:0000C98C ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000C98C                                         ; DATA XREF: std::ctype<char>::do_narrow(char const *,char const *,char,char *)+Co
.rdata:0000C98C                                         ; std::ctype<char>::do_narrow(char const *,char const *,char,char *)+26o ...
.rdata:0000C98C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000C98C                 unicode 0, <clude\xlocale>,0
.rdata:0000CA1A                 align 4
.rdata:0000CA1A _rdata          ends
.rdata:0000CA1A
.rdata:0000CA1C ; ===========================================================================
.rdata:0000CA1C
.rdata:0000CA1C ; Segment type: Pure data
.rdata:0000CA1C ; Segment permissions: Read
.rdata:0000CA1C _rdata          segment dword public 'DATA' use32
.rdata:0000CA1C                 assume cs:_rdata
.rdata:0000CA1C                 ;org 0CA1Ch
.rdata:0000CA1C ; COMDAT (pick largest)
.rdata:0000CA1C                 dd offset ??_R4ctype_base@std@@6B@ ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata:0000CA20                 public ??_7ctype_base@std@@6B@
.rdata:0000CA20 ; const std::ctype_base::`vftable'
.rdata:0000CA20 ??_7ctype_base@std@@6B@ dd offset ??_Ectype_base@std@@UAEPAXI@Z
.rdata:0000CA20                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+3Co
.rdata:0000CA20                                         ; std::ctype_base::~ctype_base(void)+29o
.rdata:0000CA20                                         ; std::ctype_base::`vector deleting destructor'(uint)
.rdata:0000CA24                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000CA28                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000CA28 _rdata          ends
.rdata:0000CA28
.rdata:0000CA2C ; ===========================================================================
.rdata:0000CA2C
.rdata:0000CA2C ; Segment type: Pure data
.rdata:0000CA2C ; Segment permissions: Read
.rdata:0000CA2C _rdata          segment dword public 'DATA' use32
.rdata:0000CA2C                 assume cs:_rdata
.rdata:0000CA2C                 ;org 0CA2Ch
.rdata:0000CA2C ; COMDAT (pick largest)
.rdata:0000CA2C                 dd offset ??_R4?$ctype@D@std@@6B@ ; const std::ctype<char>::`RTTI Complete Object Locator'
.rdata:0000CA30                 public ??_7?$ctype@D@std@@6B@
.rdata:0000CA30 ; const std::ctype<char>::`vftable'
.rdata:0000CA30 ??_7?$ctype@D@std@@6B@ dd offset ??_E?$ctype@D@std@@MAEPAXI@Z
.rdata:0000CA30                                         ; DATA XREF: std::ctype<char>::ctype<char>(std::_Locinfo const &,uint)+3Co
.rdata:0000CA30                                         ; std::ctype<char>::~ctype<char>(void)+29o
.rdata:0000CA30                                         ; std::ctype<char>::`vector deleting destructor'(uint)
.rdata:0000CA34                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000CA38                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000CA3C                 dd offset ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ; std::ctype<char>::do_tolower(char *,char const *)
.rdata:0000CA40                 dd offset ?do_tolower@?$ctype@D@std@@MBEDD@Z ; std::ctype<char>::do_tolower(char)
.rdata:0000CA44                 dd offset ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ; std::ctype<char>::do_toupper(char *,char const *)
.rdata:0000CA48                 dd offset ?do_toupper@?$ctype@D@std@@MBEDD@Z ; std::ctype<char>::do_toupper(char)
.rdata:0000CA4C                 dd offset ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ; std::ctype<char>::do_widen(char const *,char const *,char *)
.rdata:0000CA50                 dd offset ?do_widen@?$ctype@D@std@@MBEDD@Z ; std::ctype<char>::do_widen(char)
.rdata:0000CA54                 dd offset ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ; std::ctype<char>::do_narrow(char const *,char const *,char,char *)
.rdata:0000CA58                 dd offset ?do_narrow@?$ctype@D@std@@MBEDDD@Z ; std::ctype<char>::do_narrow(char,char)
.rdata:0000CA58 _rdata          ends
.rdata:0000CA58
.rdata:0000CA5C ; ===========================================================================
.rdata:0000CA5C
.rdata:0000CA5C ; Segment type: Pure data
.rdata:0000CA5C ; Segment permissions: Read
.rdata:0000CA5C _rdata          segment dword public 'DATA' use32
.rdata:0000CA5C                 assume cs:_rdata
.rdata:0000CA5C                 ;org 0CA5Ch
.rdata:0000CA5C ; COMDAT (pick largest)
.rdata:0000CA5C                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000CA60                 public ??_7error_category@std@@6B@
.rdata:0000CA60 ; const std::error_category::`vftable'
.rdata:0000CA60 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000CA60                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000CA60                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000CA60                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000CA64                 dd offset __purecall
.rdata:0000CA68                 dd offset __purecall
.rdata:0000CA6C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000CA70                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000CA74                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000CA74 _rdata          ends
.rdata:0000CA74
.rdata:0000CA78 ; ===========================================================================
.rdata:0000CA78
.rdata:0000CA78 ; Segment type: Pure data
.rdata:0000CA78 ; Segment permissions: Read
.rdata:0000CA78 _rdata          segment dword public 'DATA' use32
.rdata:0000CA78                 assume cs:_rdata
.rdata:0000CA78                 ;org 0CA78h
.rdata:0000CA78 ; COMDAT (pick largest)
.rdata:0000CA78                 dd offset ??_R4_System_error@std@@6B@ ; const std::_System_error::`RTTI Complete Object Locator'
.rdata:0000CA7C                 public ??_7_System_error@std@@6B@
.rdata:0000CA7C ; const std::_System_error::`vftable'
.rdata:0000CA7C ??_7_System_error@std@@6B@ dd offset ??_E_System_error@std@@UAEPAXI@Z
.rdata:0000CA7C                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+92o
.rdata:0000CA7C                                         ; std::_System_error::_System_error(std::_System_error const &)+3Co
.rdata:0000CA7C                                         ; std::_System_error::`vector deleting destructor'(uint)
.rdata:0000CA80                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000CA80 _rdata          ends
.rdata:0000CA80
.rdata:0000CA84 ; ===========================================================================
.rdata:0000CA84
.rdata:0000CA84 ; Segment type: Pure data
.rdata:0000CA84 ; Segment permissions: Read
.rdata:0000CA84 _rdata          segment dword public 'DATA' use32
.rdata:0000CA84                 assume cs:_rdata
.rdata:0000CA84                 ;org 0CA84h
.rdata:0000CA84 ; COMDAT (pick any)
.rdata:0000CA84                 public ??_C@_02LMMGGCAJ@?3?5?$AA@
.rdata:0000CA84 ; char `string'[3]
.rdata:0000CA84 ??_C@_02LMMGGCAJ@?3?5?$AA@ db ': ',0    ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+45o
.rdata:0000CA87                 align 4
.rdata:0000CA87 _rdata          ends
.rdata:0000CA87
.rdata:0000CA88 ; ===========================================================================
.rdata:0000CA88
.rdata:0000CA88 ; Segment type: Pure data
.rdata:0000CA88 ; Segment permissions: Read
.rdata:0000CA88 _rdata          segment dword public 'DATA' use32
.rdata:0000CA88                 assume cs:_rdata
.rdata:0000CA88                 ;org 0CA88h
.rdata:0000CA88 ; COMDAT (pick largest)
.rdata:0000CA88                 dd offset ??_R4system_error@std@@6B@ ; const std::system_error::`RTTI Complete Object Locator'
.rdata:0000CA8C                 public ??_7system_error@std@@6B@
.rdata:0000CA8C ; const std::system_error::`vftable'
.rdata:0000CA8C ??_7system_error@std@@6B@ dd offset ??_Esystem_error@std@@UAEPAXI@Z
.rdata:0000CA8C                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+3Co
.rdata:0000CA8C                                         ; std::system_error::system_error(std::error_code,char const *)+61o
.rdata:0000CA8C                                         ; std::system_error::`vector deleting destructor'(uint)
.rdata:0000CA90                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000CA90 _rdata          ends
.rdata:0000CA90
.rdata:0000CA94 ; ===========================================================================
.rdata:0000CA94
.rdata:0000CA94 ; Segment type: Pure data
.rdata:0000CA94 ; Segment permissions: Read
.rdata:0000CA94 _rdata          segment dword public 'DATA' use32
.rdata:0000CA94                 assume cs:_rdata
.rdata:0000CA94                 ;org 0CA94h
.rdata:0000CA94 ; COMDAT (pick largest)
.rdata:0000CA94                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000CA98                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000CA98 ; const std::_Generic_error_category::`vftable'
.rdata:0000CA98 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000CA98                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000CA98                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000CA9C                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000CAA0                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000CAA4                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000CAA8                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000CAAC                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000CAAC _rdata          ends
.rdata:0000CAAC
.rdata:0000CAB0 ; ===========================================================================
.rdata:0000CAB0
.rdata:0000CAB0 ; Segment type: Pure data
.rdata:0000CAB0 ; Segment permissions: Read
.rdata:0000CAB0 _rdata          segment dword public 'DATA' use32
.rdata:0000CAB0                 assume cs:_rdata
.rdata:0000CAB0                 ;org 0CAB0h
.rdata:0000CAB0 ; COMDAT (pick any)
.rdata:0000CAB0                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000CAB0 ; `string'
.rdata:0000CAB0 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000CAB0                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000CAB0 _rdata          ends
.rdata:0000CAB0
.rdata:0000CAB8 ; ===========================================================================
.rdata:0000CAB8
.rdata:0000CAB8 ; Segment type: Pure data
.rdata:0000CAB8 ; Segment permissions: Read
.rdata:0000CAB8 _rdata          segment dword public 'DATA' use32
.rdata:0000CAB8                 assume cs:_rdata
.rdata:0000CAB8                 ;org 0CAB8h
.rdata:0000CAB8 ; COMDAT (pick any)
.rdata:0000CAB8                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000CAB8 ; `string'
.rdata:0000CAB8 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000CAB8                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_9C60o
.rdata:0000CAB8                                         ; std::_System_error_category::message(int):loc_9DDCo
.rdata:0000CAC6                 align 4
.rdata:0000CAC6 _rdata          ends
.rdata:0000CAC6
.rdata:0000CAC8 ; ===========================================================================
.rdata:0000CAC8
.rdata:0000CAC8 ; Segment type: Pure data
.rdata:0000CAC8 ; Segment permissions: Read
.rdata:0000CAC8 _rdata          segment dword public 'DATA' use32
.rdata:0000CAC8                 assume cs:_rdata
.rdata:0000CAC8                 ;org 0CAC8h
.rdata:0000CAC8 ; COMDAT (pick largest)
.rdata:0000CAC8                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000CACC                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000CACC ; const std::_Iostream_error_category::`vftable'
.rdata:0000CACC ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000CACC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000CACC                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000CAD0                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000CAD4                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000CAD8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000CADC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000CAE0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000CAE0 _rdata          ends
.rdata:0000CAE0
.rdata:0000CAE4 ; ===========================================================================
.rdata:0000CAE4
.rdata:0000CAE4 ; Segment type: Pure data
.rdata:0000CAE4 ; Segment permissions: Read
.rdata:0000CAE4 _rdata          segment dword public 'DATA' use32
.rdata:0000CAE4                 assume cs:_rdata
.rdata:0000CAE4                 ;org 0CAE4h
.rdata:0000CAE4 ; COMDAT (pick any)
.rdata:0000CAE4                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000CAE4 ; `string'
.rdata:0000CAE4 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000CAE4                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000CAED                 align 10h
.rdata:0000CAED _rdata          ends
.rdata:0000CAED
.rdata:0000CAF0 ; ===========================================================================
.rdata:0000CAF0
.rdata:0000CAF0 ; Segment type: Pure data
.rdata:0000CAF0 ; Segment permissions: Read
.rdata:0000CAF0 _rdata          segment dword public 'DATA' use32
.rdata:0000CAF0                 assume cs:_rdata
.rdata:0000CAF0                 ;org 0CAF0h
.rdata:0000CAF0 ; COMDAT (pick any)
.rdata:0000CAF0                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000CAF0 ; char `string'[]
.rdata:0000CAF0 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000CAF0                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000CB06                 align 4
.rdata:0000CB06 _rdata          ends
.rdata:0000CB06
.rdata:0000CB08 ; ===========================================================================
.rdata:0000CB08
.rdata:0000CB08 ; Segment type: Pure data
.rdata:0000CB08 ; Segment permissions: Read
.rdata:0000CB08 _rdata          segment dword public 'DATA' use32
.rdata:0000CB08                 assume cs:_rdata
.rdata:0000CB08                 ;org 0CB08h
.rdata:0000CB08 ; COMDAT (pick largest)
.rdata:0000CB08                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000CB0C                 public ??_7_System_error_category@std@@6B@
.rdata:0000CB0C ; const std::_System_error_category::`vftable'
.rdata:0000CB0C ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000CB0C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000CB0C                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000CB10                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000CB14                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000CB18                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000CB1C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000CB20                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000CB20 _rdata          ends
.rdata:0000CB20
.rdata:0000CB24 ; ===========================================================================
.rdata:0000CB24
.rdata:0000CB24 ; Segment type: Pure data
.rdata:0000CB24 ; Segment permissions: Read
.rdata:0000CB24 _rdata          segment dword public 'DATA' use32
.rdata:0000CB24                 assume cs:_rdata
.rdata:0000CB24                 ;org 0CB24h
.rdata:0000CB24 ; COMDAT (pick any)
.rdata:0000CB24                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000CB24 ; `string'
.rdata:0000CB24 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000CB24                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000CB2B                 align 4
.rdata:0000CB2B _rdata          ends
.rdata:0000CB2B
.bss:0000CB2C ; ===========================================================================
.bss:0000CB2C
.bss:0000CB2C ; Segment type: Uninitialized
.bss:0000CB2C ; Segment permissions: Read/Write
.bss:0000CB2C _bss            segment dword public 'BSS' use32
.bss:0000CB2C                 assume cs:_bss
.bss:0000CB2C                 ;org 0CB2Ch
.bss:0000CB2C ; COMDAT (pick any)
.bss:0000CB2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CB2C                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000CB2C ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000CB2C ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000CB2C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000CB2C                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000CB2D                 db    ? ;
.bss:0000CB2E                 db    ? ;
.bss:0000CB2F                 db    ? ;
.bss:0000CB2F _bss            ends
.bss:0000CB2F
.bss:0000CB30 ; ===========================================================================
.bss:0000CB30
.bss:0000CB30 ; Segment type: Uninitialized
.bss:0000CB30 ; Segment permissions: Read/Write
.bss:0000CB30 _bss            segment dword public 'BSS' use32
.bss:0000CB30                 assume cs:_bss
.bss:0000CB30                 ;org 0CB30h
.bss:0000CB30 ; COMDAT (pick any)
.bss:0000CB30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CB30                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000CB30 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000CB30 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000CB30                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000CB30                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o ...
.bss:0000CB31                 db    ? ;
.bss:0000CB32                 db    ? ;
.bss:0000CB33                 db    ? ;
.bss:0000CB33 _bss            ends
.bss:0000CB33
.bss:0000CB34 ; ===========================================================================
.bss:0000CB34
.bss:0000CB34 ; Segment type: Uninitialized
.bss:0000CB34 ; Segment permissions: Read/Write
.bss:0000CB34 _bss            segment dword public 'BSS' use32
.bss:0000CB34                 assume cs:_bss
.bss:0000CB34                 ;org 0CB34h
.bss:0000CB34 ; COMDAT (pick any)
.bss:0000CB34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CB34                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000CB34 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000CB34 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000CB34                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000CB34                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000CB35                 db    ? ;
.bss:0000CB36                 db    ? ;
.bss:0000CB37                 db    ? ;
.bss:0000CB37 _bss            ends
.bss:0000CB37
.rdata:0000CB38 ; ===========================================================================
.rdata:0000CB38
.rdata:0000CB38 ; Segment type: Pure data
.rdata:0000CB38 ; Segment permissions: Read
.rdata:0000CB38 _rdata          segment dword public 'DATA' use32
.rdata:0000CB38                 assume cs:_rdata
.rdata:0000CB38                 ;org 0CB38h
.rdata:0000CB38 ; COMDAT (pick largest)
.rdata:0000CB38                 dd offset ??_R4failure@ios_base@std@@6B@ ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata:0000CB3C                 public ??_7failure@ios_base@std@@6B@
.rdata:0000CB3C ; const std::ios_base::failure::`vftable'
.rdata:0000CB3C ??_7failure@ios_base@std@@6B@ dd offset ??_Efailure@ios_base@std@@UAEPAXI@Z
.rdata:0000CB3C                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+3Co
.rdata:0000CB3C                                         ; std::ios_base::failure::failure(char const *,std::error_code const &)+46o
.rdata:0000CB3C                                         ; std::ios_base::failure::`vector deleting destructor'(uint)
.rdata:0000CB40                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000CB40 _rdata          ends
.rdata:0000CB40
.rdata:0000CB44 ; ===========================================================================
.rdata:0000CB44
.rdata:0000CB44 ; Segment type: Pure data
.rdata:0000CB44 ; Segment permissions: Read
.rdata:0000CB44 _rdata          segment dword public 'DATA' use32
.rdata:0000CB44                 assume cs:_rdata
.rdata:0000CB44                 ;org 0CB44h
.rdata:0000CB44 ; COMDAT (pick largest)
.rdata:0000CB44                 dd offset ??_R4ios_base@std@@6B@ ; const std::ios_base::`RTTI Complete Object Locator'
.rdata:0000CB48                 public ??_7ios_base@std@@6B@
.rdata:0000CB48 ; const std::ios_base::`vftable'
.rdata:0000CB48 ??_7ios_base@std@@6B@ dd offset ??_Eios_base@std@@UAEPAXI@Z
.rdata:0000CB48                                         ; DATA XREF: std::ios_base::ios_base(void)+Ao
.rdata:0000CB48                                         ; std::ios_base::~ios_base(void)+Ao
.rdata:0000CB48 _rdata          ends                    ; std::ios_base::`vector deleting destructor'(uint)
.rdata:0000CB48
.xdata$x:0000CB4C ; ===========================================================================
.xdata$x:0000CB4C
.xdata$x:0000CB4C ; Segment type: Pure data
.xdata$x:0000CB4C ; Segment permissions: Read
.xdata$x:0000CB4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB4C                 assume cs:_xdata$x
.xdata$x:0000CB4C                 ;org 0CB4Ch
.xdata$x:0000CB4C ; COMDAT (pick any)
.xdata$x:0000CB4C                 public __TI5?AVfailure@ios_base@std@@
.xdata$x:0000CB4C __TI5?AVfailure@ios_base@std@@ db    0  ; DATA XREF: std::ios_base::clear(int,bool)+6Bo
.xdata$x:0000CB4C                                         ; std::ios_base::clear(int,bool)+A8o ...
.xdata$x:0000CB4D                 db    0
.xdata$x:0000CB4E                 db    0
.xdata$x:0000CB4F                 db    0
.xdata$x:0000CB50                 dd offset ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.xdata$x:0000CB54                 align 8
.xdata$x:0000CB58                 dd offset __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000CB58 _xdata$x        ends
.xdata$x:0000CB58
.xdata$x:0000CB5C ; ===========================================================================
.xdata$x:0000CB5C
.xdata$x:0000CB5C ; Segment type: Pure data
.xdata$x:0000CB5C ; Segment permissions: Read
.xdata$x:0000CB5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB5C                 assume cs:_xdata$x
.xdata$x:0000CB5C                 ;org 0CB5Ch
.xdata$x:0000CB5C ; COMDAT (pick any)
.xdata$x:0000CB5C                 public __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000CB5C __CTA5?AVfailure@ios_base@std@@ db    5 ; DATA XREF: .xdata$x:0000CB58o
.xdata$x:0000CB5D                 db    0
.xdata$x:0000CB5E                 db    0
.xdata$x:0000CB5F                 db    0
.xdata$x:0000CB60                 dd offset __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000CB64                 dd offset __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000CB68                 dd offset __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000CB6C                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000CB70                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000CB70 _xdata$x        ends
.xdata$x:0000CB70
.data$r:0000CB74 ; ===========================================================================
.data$r:0000CB74
.data$r:0000CB74 ; Segment type: Pure data
.data$r:0000CB74 ; Segment permissions: Read/Write
.data$r:0000CB74 _data$r         segment dword public 'DATA' use32
.data$r:0000CB74                 assume cs:_data$r
.data$r:0000CB74                 ;org 0CB74h
.data$r:0000CB74 ; COMDAT (pick any)
.data$r:0000CB74                 public ??_R0?AVfailure@ios_base@std@@@8
.data$r:0000CB74 ; class std::ios_base::failure `RTTI Type Descriptor'
.data$r:0000CB74 ??_R0?AVfailure@ios_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CB74                                         ; DATA XREF: .xdata$x:0000CB9Co
.data$r:0000CB74                                         ; .rdata$r:0000D948o ...
.data$r:0000CB74                                         ; const type_info::`vftable'
.data$r:0000CB78                 db    0
.data$r:0000CB79                 db    0
.data$r:0000CB7A                 db    0
.data$r:0000CB7B                 db    0
.data$r:0000CB7C                 db  2Eh ; .
.data$r:0000CB7D                 db  3Fh ; ?
.data$r:0000CB7E                 db  41h ; A
.data$r:0000CB7F                 db  56h ; V
.data$r:0000CB80                 db  66h ; f
.data$r:0000CB81                 db  61h ; a
.data$r:0000CB82                 db  69h ; i
.data$r:0000CB83                 db  6Ch ; l
.data$r:0000CB84                 db  75h ; u
.data$r:0000CB85                 db  72h ; r
.data$r:0000CB86                 db  65h ; e
.data$r:0000CB87                 db  40h ; @
.data$r:0000CB88                 db  69h ; i
.data$r:0000CB89                 db  6Fh ; o
.data$r:0000CB8A                 db  73h ; s
.data$r:0000CB8B                 db  5Fh ; _
.data$r:0000CB8C                 db  62h ; b
.data$r:0000CB8D                 db  61h ; a
.data$r:0000CB8E                 db  73h ; s
.data$r:0000CB8F                 db  65h ; e
.data$r:0000CB90                 db  40h ; @
.data$r:0000CB91                 db  73h ; s
.data$r:0000CB92                 db  74h ; t
.data$r:0000CB93                 db  64h ; d
.data$r:0000CB94                 db  40h ; @
.data$r:0000CB95                 db  40h ; @
.data$r:0000CB96                 db    0
.data$r:0000CB97                 align 4
.data$r:0000CB97 _data$r         ends
.data$r:0000CB97
.xdata$x:0000CB98 ; ===========================================================================
.xdata$x:0000CB98
.xdata$x:0000CB98 ; Segment type: Pure data
.xdata$x:0000CB98 ; Segment permissions: Read
.xdata$x:0000CB98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB98                 assume cs:_xdata$x
.xdata$x:0000CB98                 ;org 0CB98h
.xdata$x:0000CB98 ; COMDAT (pick any)
.xdata$x:0000CB98                 public __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000CB98 __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 db    0
.xdata$x:0000CB98                                         ; DATA XREF: .xdata$x:0000CB60o
.xdata$x:0000CB99                 db    0
.xdata$x:0000CB9A                 db    0
.xdata$x:0000CB9B                 db    0
.xdata$x:0000CB9C                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.xdata$x:0000CBA0                 db    0
.xdata$x:0000CBA1                 db    0
.xdata$x:0000CBA2                 db    0
.xdata$x:0000CBA3                 db    0
.xdata$x:0000CBA4                 db 0FFh
.xdata$x:0000CBA5                 db 0FFh
.xdata$x:0000CBA6                 db 0FFh
.xdata$x:0000CBA7                 db 0FFh
.xdata$x:0000CBA8                 db    0
.xdata$x:0000CBA9                 db    0
.xdata$x:0000CBAA                 db    0
.xdata$x:0000CBAB                 db    0
.xdata$x:0000CBAC                 db  14h
.xdata$x:0000CBAD                 db    0
.xdata$x:0000CBAE                 db    0
.xdata$x:0000CBAF                 db    0
.xdata$x:0000CBB0                 dd offset ??0failure@ios_base@std@@QAE@ABV012@@Z ; std::ios_base::failure::failure(std::ios_base::failure const &)
.xdata$x:0000CBB0 _xdata$x        ends
.xdata$x:0000CBB0
.data$r:0000CBB4 ; ===========================================================================
.data$r:0000CBB4
.data$r:0000CBB4 ; Segment type: Pure data
.data$r:0000CBB4 ; Segment permissions: Read/Write
.data$r:0000CBB4 _data$r         segment dword public 'DATA' use32
.data$r:0000CBB4                 assume cs:_data$r
.data$r:0000CBB4                 ;org 0CBB4h
.data$r:0000CBB4 ; COMDAT (pick any)
.data$r:0000CBB4                 public ??_R0?AVsystem_error@std@@@8
.data$r:0000CBB4 ; class std::system_error `RTTI Type Descriptor'
.data$r:0000CBB4 ??_R0?AVsystem_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CBB4                                         ; DATA XREF: .xdata$x:0000CBD8o
.data$r:0000CBB4                                         ; .rdata$r:0000D784o ...
.data$r:0000CBB4                                         ; const type_info::`vftable'
.data$r:0000CBB8                 db    0
.data$r:0000CBB9                 db    0
.data$r:0000CBBA                 db    0
.data$r:0000CBBB                 db    0
.data$r:0000CBBC                 db  2Eh ; .
.data$r:0000CBBD                 db  3Fh ; ?
.data$r:0000CBBE                 db  41h ; A
.data$r:0000CBBF                 db  56h ; V
.data$r:0000CBC0                 db  73h ; s
.data$r:0000CBC1                 db  79h ; y
.data$r:0000CBC2                 db  73h ; s
.data$r:0000CBC3                 db  74h ; t
.data$r:0000CBC4                 db  65h ; e
.data$r:0000CBC5                 db  6Dh ; m
.data$r:0000CBC6                 db  5Fh ; _
.data$r:0000CBC7                 db  65h ; e
.data$r:0000CBC8                 db  72h ; r
.data$r:0000CBC9                 db  72h ; r
.data$r:0000CBCA                 db  6Fh ; o
.data$r:0000CBCB                 db  72h ; r
.data$r:0000CBCC                 db  40h ; @
.data$r:0000CBCD                 db  73h ; s
.data$r:0000CBCE                 db  74h ; t
.data$r:0000CBCF                 db  64h ; d
.data$r:0000CBD0                 db  40h ; @
.data$r:0000CBD1                 db  40h ; @
.data$r:0000CBD2                 db    0
.data$r:0000CBD3                 align 4
.data$r:0000CBD3 _data$r         ends
.data$r:0000CBD3
.xdata$x:0000CBD4 ; ===========================================================================
.xdata$x:0000CBD4
.xdata$x:0000CBD4 ; Segment type: Pure data
.xdata$x:0000CBD4 ; Segment permissions: Read
.xdata$x:0000CBD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBD4                 assume cs:_xdata$x
.xdata$x:0000CBD4                 ;org 0CBD4h
.xdata$x:0000CBD4 ; COMDAT (pick any)
.xdata$x:0000CBD4                 public __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000CBD4 __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000CBD4                                         ; DATA XREF: .xdata$x:0000CB64o
.xdata$x:0000CBD5                 db    0
.xdata$x:0000CBD6                 db    0
.xdata$x:0000CBD7                 db    0
.xdata$x:0000CBD8                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.xdata$x:0000CBDC                 align 10h
.xdata$x:0000CBE0                 db 0FFh
.xdata$x:0000CBE1                 db 0FFh
.xdata$x:0000CBE2                 db 0FFh
.xdata$x:0000CBE3                 db 0FFh
.xdata$x:0000CBE4                 db    0
.xdata$x:0000CBE5                 db    0
.xdata$x:0000CBE6                 db    0
.xdata$x:0000CBE7                 db    0
.xdata$x:0000CBE8                 db  14h
.xdata$x:0000CBE9                 db    0
.xdata$x:0000CBEA                 db    0
.xdata$x:0000CBEB                 db    0
.xdata$x:0000CBEC                 dd offset ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.xdata$x:0000CBEC _xdata$x        ends
.xdata$x:0000CBEC
.data$r:0000CBF0 ; ===========================================================================
.data$r:0000CBF0
.data$r:0000CBF0 ; Segment type: Pure data
.data$r:0000CBF0 ; Segment permissions: Read/Write
.data$r:0000CBF0 _data$r         segment dword public 'DATA' use32
.data$r:0000CBF0                 assume cs:_data$r
.data$r:0000CBF0                 ;org 0CBF0h
.data$r:0000CBF0 ; COMDAT (pick any)
.data$r:0000CBF0                 public ??_R0?AV_System_error@std@@@8
.data$r:0000CBF0 ; class std::_System_error `RTTI Type Descriptor'
.data$r:0000CBF0 ??_R0?AV_System_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CBF0                                         ; DATA XREF: .xdata$x:0000CC14o
.data$r:0000CBF0                                         ; .rdata$r:0000D734o ...
.data$r:0000CBF0                                         ; const type_info::`vftable'
.data$r:0000CBF4                 align 8
.data$r:0000CBF8 a_?av_system_er db '.?AV_System_error@std@@',0
.data$r:0000CBF8 _data$r         ends
.data$r:0000CBF8
.xdata$x:0000CC10 ; ===========================================================================
.xdata$x:0000CC10
.xdata$x:0000CC10 ; Segment type: Pure data
.xdata$x:0000CC10 ; Segment permissions: Read
.xdata$x:0000CC10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC10                 assume cs:_xdata$x
.xdata$x:0000CC10                 ;org 0CC10h
.xdata$x:0000CC10 ; COMDAT (pick any)
.xdata$x:0000CC10                 public __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000CC10 __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000CC10                                         ; DATA XREF: .xdata$x:0000CB68o
.xdata$x:0000CC11                 db    0
.xdata$x:0000CC12                 db    0
.xdata$x:0000CC13                 db    0
.xdata$x:0000CC14                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.xdata$x:0000CC18                 db    0
.xdata$x:0000CC19                 db    0
.xdata$x:0000CC1A                 db    0
.xdata$x:0000CC1B                 db    0
.xdata$x:0000CC1C                 db 0FFh
.xdata$x:0000CC1D                 db 0FFh
.xdata$x:0000CC1E                 db 0FFh
.xdata$x:0000CC1F                 db 0FFh
.xdata$x:0000CC20                 db    0
.xdata$x:0000CC21                 db    0
.xdata$x:0000CC22                 db    0
.xdata$x:0000CC23                 db    0
.xdata$x:0000CC24                 db  14h
.xdata$x:0000CC25                 db    0
.xdata$x:0000CC26                 db    0
.xdata$x:0000CC27                 db    0
.xdata$x:0000CC28                 dd offset ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.xdata$x:0000CC28 _xdata$x        ends
.xdata$x:0000CC28
.rdata:0000CC2C ; ===========================================================================
.rdata:0000CC2C
.rdata:0000CC2C ; Segment type: Pure data
.rdata:0000CC2C ; Segment permissions: Read
.rdata:0000CC2C _rdata          segment dword public 'DATA' use32
.rdata:0000CC2C                 assume cs:_rdata
.rdata:0000CC2C                 ;org 0CC2Ch
.rdata:0000CC2C ; COMDAT (pick any)
.rdata:0000CC2C                 public ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
.rdata:0000CC2C ; char `string'[]
.rdata:0000CC2C ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ db 'ios_base::badbit set',0
.rdata:0000CC2C                                         ; DATA XREF: std::ios_base::clear(int,bool)+5Eo
.rdata:0000CC41                 align 4
.rdata:0000CC41 _rdata          ends
.rdata:0000CC41
.rdata:0000CC44 ; ===========================================================================
.rdata:0000CC44
.rdata:0000CC44 ; Segment type: Pure data
.rdata:0000CC44 ; Segment permissions: Read
.rdata:0000CC44 _rdata          segment dword public 'DATA' use32
.rdata:0000CC44                 assume cs:_rdata
.rdata:0000CC44                 ;org 0CC44h
.rdata:0000CC44 ; COMDAT (pick any)
.rdata:0000CC44                 public ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
.rdata:0000CC44 ; char `string'[]
.rdata:0000CC44 ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ db 'ios_base::failbit set',0
.rdata:0000CC44                                         ; DATA XREF: std::ios_base::clear(int,bool)+9Bo
.rdata:0000CC5A                 align 4
.rdata:0000CC5A _rdata          ends
.rdata:0000CC5A
.rdata:0000CC5C ; ===========================================================================
.rdata:0000CC5C
.rdata:0000CC5C ; Segment type: Pure data
.rdata:0000CC5C ; Segment permissions: Read
.rdata:0000CC5C _rdata          segment dword public 'DATA' use32
.rdata:0000CC5C                 assume cs:_rdata
.rdata:0000CC5C                 ;org 0CC5Ch
.rdata:0000CC5C ; COMDAT (pick any)
.rdata:0000CC5C                 public ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
.rdata:0000CC5C ; char `string'[]
.rdata:0000CC5C ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ db 'ios_base::eofbit set',0
.rdata:0000CC5C                                         ; DATA XREF: std::ios_base::clear(int,bool)+C7o
.rdata:0000CC71                 align 4
.rdata:0000CC71 _rdata          ends
.rdata:0000CC71
.rdata:0000CC74 ; ===========================================================================
.rdata:0000CC74
.rdata:0000CC74 ; Segment type: Pure data
.rdata:0000CC74 ; Segment permissions: Read
.rdata:0000CC74 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000CC74 _rdata          segment para public 'DATA' use32
.rdata:0000CC74                 assume cs:_rdata
.rdata:0000CC74                 ;org 0CC74h
.rdata:0000CC74 ; COMDAT (pick any)
.rdata:0000CC74                 public ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000CC74 ; char `string'[]
.rdata:0000CC74 ??_C@_0EI@HCLDFGI@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xi'
.rdata:0000CC74                                         ; DATA XREF: std::ios_base::_Init(void)+76o
.rdata:0000CC74                 db 'osbase',0
.rdata:0000CC74 _rdata          ends
.rdata:0000CC74
.rdata:0000CCBC ; ===========================================================================
.rdata:0000CCBC
.rdata:0000CCBC ; Segment type: Pure data
.rdata:0000CCBC ; Segment permissions: Read
.rdata:0000CCBC _rdata          segment dword public 'DATA' use32
.rdata:0000CCBC                 assume cs:_rdata
.rdata:0000CCBC                 ;org 0CCBCh
.rdata:0000CCBC ; COMDAT (pick largest)
.rdata:0000CCBC                 dd offset ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ios<char,std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata:0000CCC0                 public ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
.rdata:0000CCC0 ; const std::basic_ios<char, struct std::char_traits<char>>::`vftable'
.rdata:0000CCC0 ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ dd offset ??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
.rdata:0000CCC0                                         ; DATA XREF: std::basic_ios<char,std::char_traits<char>>::basic_ios<char,std::char_traits<char>>(void)+38o
.rdata:0000CCC0                                         ; std::basic_ios<char,std::char_traits<char>>::~basic_ios<char,std::char_traits<char>>(void)+29o
.rdata:0000CCC0 _rdata          ends                    ; std::basic_ios<char,std::char_traits<char>>::`vector deleting destructor'(uint)
.rdata:0000CCC0
.rdata:0000CCC4 ; ===========================================================================
.rdata:0000CCC4
.rdata:0000CCC4 ; Segment type: Pure data
.rdata:0000CCC4 ; Segment permissions: Read
.rdata:0000CCC4 _rdata          segment dword public 'DATA' use32
.rdata:0000CCC4                 assume cs:_rdata
.rdata:0000CCC4                 ;org 0CCC4h
.rdata:0000CCC4 ; COMDAT (pick largest)
.rdata:0000CCC4                 dd offset ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_streambuf<char,std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata:0000CCC8                 public ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
.rdata:0000CCC8 ; const std::basic_streambuf<char, struct std::char_traits<char>>::`vftable'
.rdata:0000CCC8 ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ dd offset ??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
.rdata:0000CCC8                                         ; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+Co
.rdata:0000CCC8                                         ; std::basic_streambuf<char,std::char_traits<char>>::~basic_streambuf<char,std::char_traits<char>>(void)+Ao
.rdata:0000CCC8                                         ; std::basic_streambuf<char,std::char_traits<char>>::`vector deleting destructor'(uint)
.rdata:0000CCCC                 dd offset ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)
.rdata:0000CCD0                 dd offset ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)
.rdata:0000CCD4                 dd offset ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char>>::overflow(int)
.rdata:0000CCD8                 dd offset ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char>>::pbackfail(int)
.rdata:0000CCDC                 dd offset ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)
.rdata:0000CCE0                 dd offset ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::underflow(void)
.rdata:0000CCE4                 dd offset ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::uflow(void)
.rdata:0000CCE8                 dd offset ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)
.rdata:0000CCEC                 dd offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)
.rdata:0000CCF0                 dd offset ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char>>::seekoff(__int64,int,int)
.rdata:0000CCF4                 dd offset ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char>>::seekpos(std::fpos<int>,int)
.rdata:0000CCF8                 dd offset ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)
.rdata:0000CCFC                 dd offset ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::sync(void)
.rdata:0000CD00                 dd offset ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const &)
.rdata:0000CD00 _rdata          ends
.rdata:0000CD00
.rdata:0000CD04 ; ===========================================================================
.rdata:0000CD04
.rdata:0000CD04 ; Segment type: Pure data
.rdata:0000CD04 ; Segment permissions: Read
.rdata:0000CD04 _rdata          segment dword public 'DATA' use32
.rdata:0000CD04                 assume cs:_rdata
.rdata:0000CD04                 ;org 0CD04h
.rdata:0000CD04 ; COMDAT (pick largest)
.rdata:0000CD04                 dd offset ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; const std::basic_ostream<char,std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata:0000CD08                 public ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
.rdata:0000CD08 ; const std::basic_ostream<char, struct std::char_traits<char>>::`vftable'
.rdata:0000CD08 ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ dd offset ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
.rdata:0000CD08                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+64o
.rdata:0000CD08                                         ; std::basic_ostream<char,std::char_traits<char>>::~basic_ostream<char,std::char_traits<char>>(void)+13o
.rdata:0000CD08 _rdata          ends                    ; [thunk]:std::basic_ostream<char,std::char_traits<char>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)
.rdata:0000CD08
.rdata:0000CD0C ; ===========================================================================
.rdata:0000CD0C
.rdata:0000CD0C ; Segment type: Pure data
.rdata:0000CD0C ; Segment permissions: Read
.rdata:0000CD0C _rdata          segment dword public 'DATA' use32
.rdata:0000CD0C                 assume cs:_rdata
.rdata:0000CD0C                 ;org 0CD0Ch
.rdata:0000CD0C ; COMDAT (pick any)
.rdata:0000CD0C                 public ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
.rdata:0000CD0C ; const std::basic_ostream<char, struct std::char_traits<char>>::`vbtable'
.rdata:0000CD0C ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ db    0
.rdata:0000CD0C                                         ; DATA XREF: std::basic_ostream<char,std::char_traits<char>>::basic_ostream<char,std::char_traits<char>>(std::basic_streambuf<char,std::char_traits<char>> *,bool)+38o
.rdata:0000CD0D                 db    0
.rdata:0000CD0E                 db    0
.rdata:0000CD0F                 db    0
.rdata:0000CD10                 db    8
.rdata:0000CD11                 db    0
.rdata:0000CD12                 db    0
.rdata:0000CD13                 db    0
.rdata:0000CD13 _rdata          ends
.rdata:0000CD13
.bss:0000CD14 ; ===========================================================================
.bss:0000CD14
.bss:0000CD14 ; Segment type: Uninitialized
.bss:0000CD14 ; Segment permissions: Read/Write
.bss:0000CD14 _bss            segment dword public 'BSS' use32
.bss:0000CD14                 assume cs:_bss
.bss:0000CD14                 ;org 0CD14h
.bss:0000CD14 ; COMDAT (pick any)
.bss:0000CD14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CD14                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000CD14 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000CD14 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000CD14                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000CD15                 db    ? ;
.bss:0000CD16                 db    ? ;
.bss:0000CD17                 db    ? ;
.bss:0000CD17 _bss            ends
.bss:0000CD17
.bss:0000CD18 ; ===========================================================================
.bss:0000CD18
.bss:0000CD18 ; Segment type: Uninitialized
.bss:0000CD18 ; Segment permissions: Read/Write
.bss:0000CD18 _bss            segment dword public 'BSS' use32
.bss:0000CD18                 assume cs:_bss
.bss:0000CD18                 ;org 0CD18h
.bss:0000CD18 ; COMDAT (pick any)
.bss:0000CD18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CD18                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000CD18 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000CD18 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000CD18                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000CD19                 db    ? ;
.bss:0000CD1A                 db    ? ;
.bss:0000CD1B                 db    ? ;
.bss:0000CD1B _bss            ends
.bss:0000CD1B
.rdata:0000CD1C ; ===========================================================================
.rdata:0000CD1C
.rdata:0000CD1C ; Segment type: Pure data
.rdata:0000CD1C ; Segment permissions: Read
.rdata:0000CD1C _rdata          segment dword public 'DATA' use32
.rdata:0000CD1C                 assume cs:_rdata
.rdata:0000CD1C                 ;org 0CD1Ch
.rdata:0000CD1C ; COMDAT (pick largest)
.rdata:0000CD1C                 dd offset ??_R4TiXmlBaseA@@6B@ ; const TiXmlBaseA::`RTTI Complete Object Locator'
.rdata:0000CD20                 public ??_7TiXmlBaseA@@6B@
.rdata:0000CD20 ; const TiXmlBaseA::`vftable'
.rdata:0000CD20 ??_7TiXmlBaseA@@6B@ dd offset ??_ETiXmlBaseA@@UAEPAXI@Z
.rdata:0000CD20                                         ; DATA XREF: TiXmlBaseA::TiXmlBaseA(void)+Ao
.rdata:0000CD20                                         ; TiXmlBaseA::~TiXmlBaseA(void)+Ao
.rdata:0000CD20                                         ; TiXmlBaseA::`vector deleting destructor'(uint)
.rdata:0000CD24                 dd offset __purecall
.rdata:0000CD28                 dd offset __purecall
.rdata:0000CD2C                 dd offset __purecall
.rdata:0000CD2C _rdata          ends
.rdata:0000CD2C
.rdata:0000CD30 ; ===========================================================================
.rdata:0000CD30
.rdata:0000CD30 ; Segment type: Pure data
.rdata:0000CD30 ; Segment permissions: Read
.rdata:0000CD30 _rdata          segment dword public 'DATA' use32
.rdata:0000CD30                 assume cs:_rdata
.rdata:0000CD30                 ;org 0CD30h
.rdata:0000CD30 ; COMDAT (pick largest)
.rdata:0000CD30                 dd offset ??_R4TiXmlNodeA@@6B@ ; const TiXmlNodeA::`RTTI Complete Object Locator'
.rdata:0000CD34                 public ??_7TiXmlNodeA@@6B@
.rdata:0000CD34 ; const TiXmlNodeA::`vftable'
.rdata:0000CD34 ??_7TiXmlNodeA@@6B@ dd offset ??_ETiXmlNodeA@@UAEPAXI@Z
.rdata:0000CD34                                         ; DATA XREF: TiXmlNodeA::~TiXmlNodeA(void)+2Bo
.rdata:0000CD34                                         ; TiXmlNodeA::TiXmlNodeA(TiXmlNodeA::NodeType)+38o
.rdata:0000CD34                                         ; TiXmlNodeA::`vector deleting destructor'(uint)
.rdata:0000CD38                 dd offset __purecall
.rdata:0000CD3C                 dd offset __purecall
.rdata:0000CD40                 dd offset __purecall
.rdata:0000CD44                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CD48                 dd offset __purecall
.rdata:0000CD4C                 dd offset __purecall
.rdata:0000CD4C _rdata          ends
.rdata:0000CD4C
.rdata:0000CD50 ; ===========================================================================
.rdata:0000CD50
.rdata:0000CD50 ; Segment type: Pure data
.rdata:0000CD50 ; Segment permissions: Read
.rdata:0000CD50 _rdata          segment dword public 'DATA' use32
.rdata:0000CD50                 assume cs:_rdata
.rdata:0000CD50                 ;org 0CD50h
.rdata:0000CD50 ; COMDAT (pick largest)
.rdata:0000CD50                 dd offset ??_R4TiXmlAttributeA@@6B@ ; const TiXmlAttributeA::`RTTI Complete Object Locator'
.rdata:0000CD54                 public ??_7TiXmlAttributeA@@6B@
.rdata:0000CD54 ; const TiXmlAttributeA::`vftable'
.rdata:0000CD54 ??_7TiXmlAttributeA@@6B@ dd offset ??_ETiXmlAttributeA@@UAEPAXI@Z
.rdata:0000CD54                                         ; DATA XREF: TiXmlAttributeA::TiXmlAttributeA(char const *,char const *)+38o
.rdata:0000CD54                                         ; TiXmlAttributeA::TiXmlAttributeA(void)+38o
.rdata:0000CD54                                         ; TiXmlAttributeA::`vector deleting destructor'(uint)
.rdata:0000CD58                 dd offset ?Print@TiXmlAttributeA@@UBEXPAU_iobuf@@H@Z ; TiXmlAttributeA::Print(_iobuf *,int)
.rdata:0000CD5C                 dd offset ?StreamOut@TiXmlAttributeA@@UBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlAttributeA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CD60                 dd offset ?Parse@TiXmlAttributeA@@UAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlAttributeA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CD60 _rdata          ends
.rdata:0000CD60
.rdata:0000CD64 ; ===========================================================================
.rdata:0000CD64
.rdata:0000CD64 ; Segment type: Pure data
.rdata:0000CD64 ; Segment permissions: Read
.rdata:0000CD64 _rdata          segment dword public 'DATA' use32
.rdata:0000CD64                 assume cs:_rdata
.rdata:0000CD64                 ;org 0CD64h
.rdata:0000CD64 ; COMDAT (pick largest)
.rdata:0000CD64                 dd offset ??_R4TiXmlElementA@@6B@ ; const TiXmlElementA::`RTTI Complete Object Locator'
.rdata:0000CD68                 public ??_7TiXmlElementA@@6B@
.rdata:0000CD68 ; const TiXmlElementA::`vftable'
.rdata:0000CD68 ??_7TiXmlElementA@@6B@ dd offset ??_ETiXmlElementA@@UAEPAXI@Z
.rdata:0000CD68                                         ; DATA XREF: TiXmlElementA::TiXmlElementA(char const *)+3Ao
.rdata:0000CD68                                         ; TiXmlElementA::~TiXmlElementA(void)+2Bo
.rdata:0000CD68                                         ; TiXmlElementA::`vector deleting destructor'(uint)
.rdata:0000CD6C                 dd offset ?Print@TiXmlElementA@@UBEXPAU_iobuf@@H@Z ; TiXmlElementA::Print(_iobuf *,int)
.rdata:0000CD70                 dd offset ?StreamOut@TiXmlElementA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlElementA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CD74                 dd offset ?Parse@TiXmlElementA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlElementA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CD78                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CD7C                 dd offset ?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ ; TiXmlElementA::Clone(void)
.rdata:0000CD80                 dd offset ?StreamIn@TiXmlElementA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlElementA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CD80 _rdata          ends
.rdata:0000CD80
.rdata:0000CD84 ; ===========================================================================
.rdata:0000CD84
.rdata:0000CD84 ; Segment type: Pure data
.rdata:0000CD84 ; Segment permissions: Read
.rdata:0000CD84 _rdata          segment dword public 'DATA' use32
.rdata:0000CD84                 assume cs:_rdata
.rdata:0000CD84                 ;org 0CD84h
.rdata:0000CD84 ; COMDAT (pick largest)
.rdata:0000CD84                 dd offset ??_R4TiXmlCommentA@@6B@ ; const TiXmlCommentA::`RTTI Complete Object Locator'
.rdata:0000CD88                 public ??_7TiXmlCommentA@@6B@
.rdata:0000CD88 ; const TiXmlCommentA::`vftable'
.rdata:0000CD88 ??_7TiXmlCommentA@@6B@ dd offset ??_ETiXmlCommentA@@UAEPAXI@Z
.rdata:0000CD88                                         ; DATA XREF: TiXmlCommentA::TiXmlCommentA(void)+3Ao
.rdata:0000CD88                                         ; TiXmlCommentA::~TiXmlCommentA(void)+29o
.rdata:0000CD88                                         ; TiXmlCommentA::`vector deleting destructor'(uint)
.rdata:0000CD8C                 dd offset ?Print@TiXmlCommentA@@UBEXPAU_iobuf@@H@Z ; TiXmlCommentA::Print(_iobuf *,int)
.rdata:0000CD90                 dd offset ?StreamOut@TiXmlCommentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlCommentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CD94                 dd offset ?Parse@TiXmlCommentA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlCommentA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CD98                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CD9C                 dd offset ?Clone@TiXmlCommentA@@UBEPAVTiXmlNodeA@@XZ ; TiXmlCommentA::Clone(void)
.rdata:0000CDA0                 dd offset ?StreamIn@TiXmlCommentA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlCommentA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CDA0 _rdata          ends
.rdata:0000CDA0
.rdata:0000CDA4 ; ===========================================================================
.rdata:0000CDA4
.rdata:0000CDA4 ; Segment type: Pure data
.rdata:0000CDA4 ; Segment permissions: Read
.rdata:0000CDA4 _rdata          segment dword public 'DATA' use32
.rdata:0000CDA4                 assume cs:_rdata
.rdata:0000CDA4                 ;org 0CDA4h
.rdata:0000CDA4 ; COMDAT (pick largest)
.rdata:0000CDA4                 dd offset ??_R4TiXmlTextA@@6B@ ; const TiXmlTextA::`RTTI Complete Object Locator'
.rdata:0000CDA8                 public ??_7TiXmlTextA@@6B@
.rdata:0000CDA8 ; const TiXmlTextA::`vftable'
.rdata:0000CDA8 ??_7TiXmlTextA@@6B@ dd offset ??_ETiXmlTextA@@UAEPAXI@Z
.rdata:0000CDA8                                         ; DATA XREF: TiXmlTextA::TiXmlTextA(char const *)+3Ao
.rdata:0000CDA8                                         ; TiXmlTextA::~TiXmlTextA(void)+29o
.rdata:0000CDA8                                         ; TiXmlTextA::`vector deleting destructor'(uint)
.rdata:0000CDAC                 dd offset ?Print@TiXmlTextA@@UBEXPAU_iobuf@@H@Z ; TiXmlTextA::Print(_iobuf *,int)
.rdata:0000CDB0                 dd offset ?StreamOut@TiXmlTextA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlTextA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CDB4                 dd offset ?Parse@TiXmlTextA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlTextA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CDB8                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CDBC                 dd offset ?Clone@TiXmlTextA@@MBEPAVTiXmlNodeA@@XZ ; TiXmlTextA::Clone(void)
.rdata:0000CDC0                 dd offset ?StreamIn@TiXmlTextA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlTextA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CDC0 _rdata          ends
.rdata:0000CDC0
.rdata:0000CDC4 ; ===========================================================================
.rdata:0000CDC4
.rdata:0000CDC4 ; Segment type: Pure data
.rdata:0000CDC4 ; Segment permissions: Read
.rdata:0000CDC4 _rdata          segment dword public 'DATA' use32
.rdata:0000CDC4                 assume cs:_rdata
.rdata:0000CDC4                 ;org 0CDC4h
.rdata:0000CDC4 ; COMDAT (pick largest)
.rdata:0000CDC4                 dd offset ??_R4TiXmlDeclarationA@@6B@ ; const TiXmlDeclarationA::`RTTI Complete Object Locator'
.rdata:0000CDC8                 public ??_7TiXmlDeclarationA@@6B@
.rdata:0000CDC8 ; const TiXmlDeclarationA::`vftable'
.rdata:0000CDC8 ??_7TiXmlDeclarationA@@6B@ dd offset ??_ETiXmlDeclarationA@@UAEPAXI@Z
.rdata:0000CDC8                                         ; DATA XREF: TiXmlDeclarationA::TiXmlDeclarationA(char const *,char const *,char const *)+3Ao
.rdata:0000CDC8                                         ; TiXmlDeclarationA::TiXmlDeclarationA(void)+3Ao ...
.rdata:0000CDC8                                         ; TiXmlDeclarationA::`vector deleting destructor'(uint)
.rdata:0000CDCC                 dd offset ?Print@TiXmlDeclarationA@@UBEXPAU_iobuf@@H@Z ; TiXmlDeclarationA::Print(_iobuf *,int)
.rdata:0000CDD0                 dd offset ?StreamOut@TiXmlDeclarationA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlDeclarationA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CDD4                 dd offset ?Parse@TiXmlDeclarationA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlDeclarationA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CDD8                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CDDC                 dd offset ?Clone@TiXmlDeclarationA@@UBEPAVTiXmlNodeA@@XZ ; TiXmlDeclarationA::Clone(void)
.rdata:0000CDE0                 dd offset ?StreamIn@TiXmlDeclarationA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlDeclarationA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CDE0 _rdata          ends
.rdata:0000CDE0
.rdata:0000CDE4 ; ===========================================================================
.rdata:0000CDE4
.rdata:0000CDE4 ; Segment type: Pure data
.rdata:0000CDE4 ; Segment permissions: Read
.rdata:0000CDE4 _rdata          segment dword public 'DATA' use32
.rdata:0000CDE4                 assume cs:_rdata
.rdata:0000CDE4                 ;org 0CDE4h
.rdata:0000CDE4 ; COMDAT (pick largest)
.rdata:0000CDE4                 dd offset ??_R4TiXmlUnknownA@@6B@ ; const TiXmlUnknownA::`RTTI Complete Object Locator'
.rdata:0000CDE8                 public ??_7TiXmlUnknownA@@6B@
.rdata:0000CDE8 ; const TiXmlUnknownA::`vftable'
.rdata:0000CDE8 ??_7TiXmlUnknownA@@6B@ dd offset ??_ETiXmlUnknownA@@UAEPAXI@Z
.rdata:0000CDE8                                         ; DATA XREF: TiXmlUnknownA::TiXmlUnknownA(void)+3Ao
.rdata:0000CDE8                                         ; TiXmlUnknownA::~TiXmlUnknownA(void)+29o
.rdata:0000CDE8                                         ; TiXmlUnknownA::`vector deleting destructor'(uint)
.rdata:0000CDEC                 dd offset ?Print@TiXmlUnknownA@@UBEXPAU_iobuf@@H@Z ; TiXmlUnknownA::Print(_iobuf *,int)
.rdata:0000CDF0                 dd offset ?StreamOut@TiXmlUnknownA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlUnknownA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CDF4                 dd offset ?Parse@TiXmlUnknownA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlUnknownA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CDF8                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CDFC                 dd offset ?Clone@TiXmlUnknownA@@UBEPAVTiXmlNodeA@@XZ ; TiXmlUnknownA::Clone(void)
.rdata:0000CE00                 dd offset ?StreamIn@TiXmlUnknownA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlUnknownA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CE00 _rdata          ends
.rdata:0000CE00
.rdata:0000CE04 ; ===========================================================================
.rdata:0000CE04
.rdata:0000CE04 ; Segment type: Pure data
.rdata:0000CE04 ; Segment permissions: Read
.rdata:0000CE04 _rdata          segment dword public 'DATA' use32
.rdata:0000CE04                 assume cs:_rdata
.rdata:0000CE04                 ;org 0CE04h
.rdata:0000CE04 ; COMDAT (pick largest)
.rdata:0000CE04                 dd offset ??_R4TiXmlDocumentA@@6B@ ; const TiXmlDocumentA::`RTTI Complete Object Locator'
.rdata:0000CE08                 public ??_7TiXmlDocumentA@@6B@
.rdata:0000CE08 ; const TiXmlDocumentA::`vftable'
.rdata:0000CE08 ??_7TiXmlDocumentA@@6B@ dd offset ??_ETiXmlDocumentA@@UAEPAXI@Z
.rdata:0000CE08                                         ; DATA XREF: TiXmlDocumentA::TiXmlDocumentA(void)+3Ao
.rdata:0000CE08                                         ; TiXmlDocumentA::TiXmlDocumentA(char const *)+3Ao ...
.rdata:0000CE08                                         ; TiXmlDocumentA::`vector deleting destructor'(uint)
.rdata:0000CE0C                 dd offset ?Print@TiXmlDocumentA@@UBEXPAU_iobuf@@H@Z ; TiXmlDocumentA::Print(_iobuf *,int)
.rdata:0000CE10                 dd offset ?StreamOut@TiXmlDocumentA@@MBEXPAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z ; TiXmlDocumentA::StreamOut(std::basic_ostream<char,std::char_traits<char>> *)
.rdata:0000CE14                 dd offset ?Parse@TiXmlDocumentA@@UAEPBDPBDPAVTiXmlParsingDataA@@@Z ; TiXmlDocumentA::Parse(char const *,TiXmlParsingDataA *)
.rdata:0000CE18                 dd offset ?Type@TiXmlNodeA@@UBEHXZ ; TiXmlNodeA::Type(void)
.rdata:0000CE1C                 dd offset ?Clone@TiXmlDocumentA@@MBEPAVTiXmlNodeA@@XZ ; TiXmlDocumentA::Clone(void)
.rdata:0000CE20                 dd offset ?StreamIn@TiXmlDocumentA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; TiXmlDocumentA::StreamIn(std::basic_istream<char,std::char_traits<char>> *,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)
.rdata:0000CE20 _rdata          ends
.rdata:0000CE20
.rdata:0000CE24 ; ===========================================================================
.rdata:0000CE24
.rdata:0000CE24 ; Segment type: Pure data
.rdata:0000CE24 ; Segment permissions: Read
.rdata:0000CE24 _rdata          segment dword public 'DATA' use32
.rdata:0000CE24                 assume cs:_rdata
.rdata:0000CE24                 ;org 0CE24h
.rdata:0000CE24 ; COMDAT (pick largest)
.rdata:0000CE24                 dd offset ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Complete Object Locator'
.rdata:0000CE28                 public ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
.rdata:0000CE28 ; const std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`vftable'
.rdata:0000CE28 ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ dd offset ??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
.rdata:0000CE28                                         ; DATA XREF: std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(int)+38o
.rdata:0000CE28                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>(void)+29o
.rdata:0000CE28                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'(uint)
.rdata:0000CE2C                 dd offset ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Lock(void)
.rdata:0000CE30                 dd offset ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char>>::_Unlock(void)
.rdata:0000CE34                 dd offset ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(int)
.rdata:0000CE38                 dd offset ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(int)
.rdata:0000CE3C                 dd offset ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char>>::showmanyc(void)
.rdata:0000CE40                 dd offset ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(void)
.rdata:0000CE44                 dd offset ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::uflow(void)
.rdata:0000CE48                 dd offset ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::xsgetn(char *,__int64)
.rdata:0000CE4C                 dd offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::xsputn(char const *,__int64)
.rdata:0000CE50                 dd offset ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff(__int64,int,int)
.rdata:0000CE54                 dd offset ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos(std::fpos<int>,int)
.rdata:0000CE58                 dd offset ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char>>::setbuf(char *,__int64)
.rdata:0000CE5C                 dd offset ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char>>::sync(void)
.rdata:0000CE60                 dd offset ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char>>::imbue(std::locale const &)
.rdata:0000CE60 _rdata          ends
.rdata:0000CE60
.rdata:0000CE64 ; ===========================================================================
.rdata:0000CE64
.rdata:0000CE64 ; Segment type: Pure data
.rdata:0000CE64 ; Segment permissions: Read
.rdata:0000CE64 _rdata          segment dword public 'DATA' use32
.rdata:0000CE64                 assume cs:_rdata
.rdata:0000CE64                 ;org 0CE64h
.rdata:0000CE64 ; COMDAT (pick largest)
.rdata:0000CE64                 dd offset ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; const std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Complete Object Locator'
.rdata:0000CE68                 public ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
.rdata:0000CE68 ; const std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vftable'
.rdata:0000CE68 ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ dd offset ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
.rdata:0000CE68                                         ; DATA XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+7Eo
.rdata:0000CE68                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(void)+32o
.rdata:0000CE68 _rdata          ends                    ; [thunk]:std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)
.rdata:0000CE68
.rdata:0000CE6C ; ===========================================================================
.rdata:0000CE6C
.rdata:0000CE6C ; Segment type: Pure data
.rdata:0000CE6C ; Segment permissions: Read
.rdata:0000CE6C _rdata          segment dword public 'DATA' use32
.rdata:0000CE6C                 assume cs:_rdata
.rdata:0000CE6C                 ;org 0CE6Ch
.rdata:0000CE6C ; COMDAT (pick any)
.rdata:0000CE6C                 public ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
.rdata:0000CE6C ; const std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vbtable'
.rdata:0000CE6C ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ db    0
.rdata:0000CE6C                                         ; DATA XREF: std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>(int)+38o
.rdata:0000CE6D                 db    0
.rdata:0000CE6E                 db    0
.rdata:0000CE6F                 db    0
.rdata:0000CE70                 db  50h ; P
.rdata:0000CE71                 db    0
.rdata:0000CE72                 db    0
.rdata:0000CE73                 db    0
.rdata:0000CE73 _rdata          ends
.rdata:0000CE73
.rdata:0000CE74 ; ===========================================================================
.rdata:0000CE74
.rdata:0000CE74 ; Segment type: Pure data
.rdata:0000CE74 ; Segment permissions: Read
.rdata:0000CE74 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000CE74 _rdata          segment para public 'DATA' use32
.rdata:0000CE74                 assume cs:_rdata
.rdata:0000CE74                 ;org 0CE74h
.rdata:0000CE74 ; COMDAT (pick any)
.rdata:0000CE74                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000CE74 ; wchar_t `string'
.rdata:0000CE74 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000CE74                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)+17o
.rdata:0000CE74                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+Co ...
.rdata:0000CE74                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000CE74                 unicode 0, <clude\xstring>,0
.rdata:0000CF02                 align 4
.rdata:0000CF02 _rdata          ends
.rdata:0000CF02
.rdata:0000CF04 ; ===========================================================================
.rdata:0000CF04
.rdata:0000CF04 ; Segment type: Pure data
.rdata:0000CF04 ; Segment permissions: Read
.rdata:0000CF04 _rdata          segment dword public 'DATA' use32
.rdata:0000CF04                 assume cs:_rdata
.rdata:0000CF04                 ;org 0CF04h
.rdata:0000CF04 ; COMDAT (pick any)
.rdata:0000CF04                 public ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000CF04 ; wchar_t `string'
.rdata:0000CF04 ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000CF04                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator[](uint)+1Co
.rdata:0000CF04                 unicode 0, <string subscript out of range>,0
.rdata:0000CF04 _rdata          ends
.rdata:0000CF04
.bss:0000CF40 ; ===========================================================================
.bss:0000CF40
.bss:0000CF40 ; Segment type: Uninitialized
.bss:0000CF40 ; Segment permissions: Read/Write
.bss:0000CF40 _bss            segment dword public 'BSS' use32
.bss:0000CF40                 assume cs:_bss
.bss:0000CF40                 ;org 0CF40h
.bss:0000CF40 ; COMDAT (pick any)
.bss:0000CF40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CF40                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000CF40 ; std::locale::id std::numpunct<char>::id
.bss:0000CF40 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000CF40                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000CF41                 db    ? ;
.bss:0000CF42                 db    ? ;
.bss:0000CF43                 db    ? ;
.bss:0000CF43 _bss            ends
.bss:0000CF43
.bss:0000CF44 ; ===========================================================================
.bss:0000CF44
.bss:0000CF44 ; Segment type: Uninitialized
.bss:0000CF44 ; Segment permissions: Read/Write
.bss:0000CF44 _bss            segment dword public 'BSS' use32
.bss:0000CF44                 assume cs:_bss
.bss:0000CF44                 ;org 0CF44h
.bss:0000CF44 ; COMDAT (pick any)
.bss:0000CF44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CF44                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000CF44 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000CF44 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000CF44                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000CF45                 db    ? ;
.bss:0000CF46                 db    ? ;
.bss:0000CF47                 db    ? ;
.bss:0000CF47 _bss            ends
.bss:0000CF47
.rdata:0000CF48 ; ===========================================================================
.rdata:0000CF48
.rdata:0000CF48 ; Segment type: Pure data
.rdata:0000CF48 ; Segment permissions: Read
.rdata:0000CF48 _rdata          segment dword public 'DATA' use32
.rdata:0000CF48                 assume cs:_rdata
.rdata:0000CF48                 ;org 0CF48h
.rdata:0000CF48 ; COMDAT (pick any)
.rdata:0000CF48                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000CF48 ; char `string'[]
.rdata:0000CF48 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000CF48                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000CF48 _rdata          ends
.rdata:0000CF48
.rdata:0000CF58 ; ===========================================================================
.rdata:0000CF58
.rdata:0000CF58 ; Segment type: Pure data
.rdata:0000CF58 ; Segment permissions: Read
.rdata:0000CF58 _rdata          segment dword public 'DATA' use32
.rdata:0000CF58                 assume cs:_rdata
.rdata:0000CF58                 ;org 0CF58h
.rdata:0000CF58 ; COMDAT (pick any)
.rdata:0000CF58                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000CF58 ; char `string'[]
.rdata:0000CF58 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000CF58                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000CF58 _rdata          ends
.rdata:0000CF58
.rdata:0000CF70 ; ===========================================================================
.rdata:0000CF70
.rdata:0000CF70 ; Segment type: Pure data
.rdata:0000CF70 ; Segment permissions: Read
.rdata:0000CF70 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000CF70 _rdata          segment para public 'DATA' use32
.rdata:0000CF70                 assume cs:_rdata
.rdata:0000CF70                 ;org 0CF70h
.rdata:0000CF70 ; COMDAT (pick any)
.rdata:0000CF70                 public ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000CF70 ; char `string'[]
.rdata:0000CF70 ??_C@_0EJ@IBPBNBIE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\st'
.rdata:0000CF70                                         ; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+14o
.rdata:0000CF70                 db 'reambuf',0
.rdata:0000CFB9                 align 4
.rdata:0000CFB9 _rdata          ends
.rdata:0000CFB9
.rdata:0000CFBC ; ===========================================================================
.rdata:0000CFBC
.rdata:0000CFBC ; Segment type: Pure data
.rdata:0000CFBC ; Segment permissions: Read
.rdata:0000CFBC _rdata          segment dword public 'DATA' use32
.rdata:0000CFBC                 assume cs:_rdata
.rdata:0000CFBC                 ;org 0CFBCh
.rdata:0000CFBC ; COMDAT (pick any)
.rdata:0000CFBC                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000CFBC ; wchar_t `string'
.rdata:0000CFBC ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000CFBC                                         ; DATA XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+11o
.rdata:0000CFBC                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000CFBC                 unicode 0, <invalid null pointer>,0
.rdata:0000CFE6                 align 4
.rdata:0000CFE6 _rdata          ends
.rdata:0000CFE6
.bss:0000CFE8 ; ===========================================================================
.bss:0000CFE8
.bss:0000CFE8 ; Segment type: Uninitialized
.bss:0000CFE8 ; Segment permissions: Read/Write
.bss:0000CFE8 _bss            segment dword public 'BSS' use32
.bss:0000CFE8                 assume cs:_bss
.bss:0000CFE8                 ;org 0CFE8h
.bss:0000CFE8 ; COMDAT (pick any)
.bss:0000CFE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000CFE8                 public ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
.bss:0000CFE8 ; public: static class std::locale::facet const * const std::_Facetptr<class std::ctype<char>>::_Psave
.bss:0000CFE8 ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B dd ?
.bss:0000CFE8                                         ; DATA XREF: std::use_facet<std::ctype<char>>(std::locale const &)+36r
.bss:0000CFE8                                         ; std::use_facet<std::ctype<char>>(std::locale const &)+ABw
.bss:0000CFE8 _bss            ends
.bss:0000CFE8
.xdata$x:0000CFEC ; ===========================================================================
.xdata$x:0000CFEC
.xdata$x:0000CFEC ; Segment type: Pure data
.xdata$x:0000CFEC ; Segment permissions: Read
.xdata$x:0000CFEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFEC                 assume cs:_xdata$x
.xdata$x:0000CFEC                 ;org 0CFECh
.xdata$x:0000CFEC ; COMDAT (pick any)
.xdata$x:0000CFEC                 public __TI2?AVbad_cast@std@@
.xdata$x:0000CFEC __TI2?AVbad_cast@std@@ db    0          ; DATA XREF: std::use_facet<std::ctype<char>>(std::locale const &)+92o
.xdata$x:0000CFED                 db    0
.xdata$x:0000CFEE                 db    0
.xdata$x:0000CFEF                 db    0
.xdata$x:0000CFF0                 dd offset ??1bad_cast@std@@UAE@XZ ; std::bad_cast::~bad_cast(void)
.xdata$x:0000CFF4                 align 8
.xdata$x:0000CFF8                 dd offset __CTA2?AVbad_cast@std@@
.xdata$x:0000CFF8 _xdata$x        ends
.xdata$x:0000CFF8
.xdata$x:0000CFFC ; ===========================================================================
.xdata$x:0000CFFC
.xdata$x:0000CFFC ; Segment type: Pure data
.xdata$x:0000CFFC ; Segment permissions: Read
.xdata$x:0000CFFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFFC                 assume cs:_xdata$x
.xdata$x:0000CFFC                 ;org 0CFFCh
.xdata$x:0000CFFC ; COMDAT (pick any)
.xdata$x:0000CFFC                 public __CTA2?AVbad_cast@std@@
.xdata$x:0000CFFC __CTA2?AVbad_cast@std@@ db    2         ; DATA XREF: .xdata$x:0000CFF8o
.xdata$x:0000CFFD                 db    0
.xdata$x:0000CFFE                 db    0
.xdata$x:0000CFFF                 db    0
.xdata$x:0000D000                 dd offset __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000D004                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000D004 _xdata$x        ends
.xdata$x:0000D004
.data$r:0000D008 ; ===========================================================================
.data$r:0000D008
.data$r:0000D008 ; Segment type: Pure data
.data$r:0000D008 ; Segment permissions: Read/Write
.data$r:0000D008 _data$r         segment dword public 'DATA' use32
.data$r:0000D008                 assume cs:_data$r
.data$r:0000D008                 ;org 0D008h
.data$r:0000D008 ; COMDAT (pick any)
.data$r:0000D008                 public ??_R0?AVbad_cast@std@@@8
.data$r:0000D008 ; class std::bad_cast `RTTI Type Descriptor'
.data$r:0000D008 ??_R0?AVbad_cast@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D008                                         ; DATA XREF: .xdata$x:0000D028o
.data$r:0000D008                                         ; const type_info::`vftable'
.data$r:0000D00C                 align 10h
.data$r:0000D010 a_?avbad_cast@s db '.?AVbad_cast@std@@',0
.data$r:0000D023                 align 4
.data$r:0000D023 _data$r         ends
.data$r:0000D023
.xdata$x:0000D024 ; ===========================================================================
.xdata$x:0000D024
.xdata$x:0000D024 ; Segment type: Pure data
.xdata$x:0000D024 ; Segment permissions: Read
.xdata$x:0000D024 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000D024                 assume cs:_xdata$x
.xdata$x:0000D024                 ;org 0D024h
.xdata$x:0000D024 ; COMDAT (pick any)
.xdata$x:0000D024                 public __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000D024 __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000D024                                         ; DATA XREF: .xdata$x:0000D000o
.xdata$x:0000D025                 db    0
.xdata$x:0000D026                 db    0
.xdata$x:0000D027                 db    0
.xdata$x:0000D028                 dd offset ??_R0?AVbad_cast@std@@@8 ; std::bad_cast `RTTI Type Descriptor'
.xdata$x:0000D02C                 align 10h
.xdata$x:0000D030                 db 0FFh
.xdata$x:0000D031                 db 0FFh
.xdata$x:0000D032                 db 0FFh
.xdata$x:0000D033                 db 0FFh
.xdata$x:0000D034                 db    0
.xdata$x:0000D035                 db    0
.xdata$x:0000D036                 db    0
.xdata$x:0000D037                 db    0
.xdata$x:0000D038                 db  0Ch
.xdata$x:0000D039                 db    0
.xdata$x:0000D03A                 db    0
.xdata$x:0000D03B                 db    0
.xdata$x:0000D03C                 dd offset ??0bad_cast@std@@QAE@ABV01@@Z ; std::bad_cast::bad_cast(std::bad_cast const &)
.xdata$x:0000D03C _xdata$x        ends
.xdata$x:0000D03C
.rdata:0000D040 ; ===========================================================================
.rdata:0000D040
.rdata:0000D040 ; Segment type: Pure data
.rdata:0000D040 ; Segment permissions: Read
.rdata:0000D040 _rdata          segment dword public 'DATA' use32
.rdata:0000D040                 assume cs:_rdata
.rdata:0000D040                 ;org 0D040h
.rdata:0000D040 ; COMDAT (pick any)
.rdata:0000D040                 public ??_C@_08EPJLHIJG@bad?5cast?$AA@
.rdata:0000D040 ; char `string'[]
.rdata:0000D040 ??_C@_08EPJLHIJG@bad?5cast?$AA@ db 'bad cast',0
.rdata:0000D040                                         ; DATA XREF: std::use_facet<std::ctype<char>>(std::locale const &)+85o
.rdata:0000D049                 align 4
.rdata:0000D049 _rdata          ends
.rdata:0000D049
.rdata:0000D04C ; ===========================================================================
.rdata:0000D04C
.rdata:0000D04C ; Segment type: Pure data
.rdata:0000D04C ; Segment permissions: Read
.rdata:0000D04C _rdata          segment dword public 'DATA' use32
.rdata:0000D04C                 assume cs:_rdata
.rdata:0000D04C                 ;org 0D04Ch
.rdata:0000D04C ; COMDAT (pick any)
.rdata:0000D04C                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000D04C ; wchar_t `string'
.rdata:0000D04C ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000D04C                                         ; DATA XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000D04C                 unicode 0, <invalid iterator range>,0
.rdata:0000D07A                 align 4
.rdata:0000D07A _rdata          ends
.rdata:0000D07A
.rdata$r:0000D07C ; ===========================================================================
.rdata$r:0000D07C
.rdata$r:0000D07C ; Segment type: Pure data
.rdata$r:0000D07C ; Segment permissions: Read
.rdata$r:0000D07C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D07C                 assume cs:_rdata$r
.rdata$r:0000D07C                 ;org 0D07Ch
.rdata$r:0000D07C ; COMDAT (pick any)
.rdata$r:0000D07C                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000D07C ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D07C ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:0000D07C                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:0000D07C                                         ; .rdata$r:0000D4E4o ...
.rdata$r:0000D07C                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:0000D080                 db    0
.rdata$r:0000D081                 db    0
.rdata$r:0000D082                 db    0
.rdata$r:0000D083                 db    0
.rdata$r:0000D084                 db    0
.rdata$r:0000D085                 db    0
.rdata$r:0000D086                 db    0
.rdata$r:0000D087                 db    0
.rdata$r:0000D088                 db 0FFh
.rdata$r:0000D089                 db 0FFh
.rdata$r:0000D08A                 db 0FFh
.rdata$r:0000D08B                 db 0FFh
.rdata$r:0000D08C                 db    0
.rdata$r:0000D08D                 db    0
.rdata$r:0000D08E                 db    0
.rdata$r:0000D08F                 db    0
.rdata$r:0000D090                 db  40h ; @
.rdata$r:0000D091                 db    0
.rdata$r:0000D092                 db    0
.rdata$r:0000D093                 db    0
.rdata$r:0000D094                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D094 _rdata$r        ends
.rdata$r:0000D094
.rdata$r:0000D098 ; ===========================================================================
.rdata$r:0000D098
.rdata$r:0000D098 ; Segment type: Pure data
.rdata$r:0000D098 ; Segment permissions: Read
.rdata$r:0000D098 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D098                 assume cs:_rdata$r
.rdata$r:0000D098                 ;org 0D098h
.rdata$r:0000D098 ; COMDAT (pick any)
.rdata$r:0000D098                 public ??_R3exception@std@@8
.rdata$r:0000D098 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D098 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:0000D094o
.rdata$r:0000D099                 db    0
.rdata$r:0000D09A                 db    0
.rdata$r:0000D09B                 db    0
.rdata$r:0000D09C                 db    0
.rdata$r:0000D09D                 db    0
.rdata$r:0000D09E                 db    0
.rdata$r:0000D09F                 db    0
.rdata$r:0000D0A0                 db    1
.rdata$r:0000D0A1                 db    0
.rdata$r:0000D0A2                 db    0
.rdata$r:0000D0A3                 db    0
.rdata$r:0000D0A4                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000D0A4 _rdata$r        ends
.rdata$r:0000D0A4
.rdata$r:0000D0A8 ; ===========================================================================
.rdata$r:0000D0A8
.rdata$r:0000D0A8 ; Segment type: Pure data
.rdata$r:0000D0A8 ; Segment permissions: Read
.rdata$r:0000D0A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D0A8                 assume cs:_rdata$r
.rdata$r:0000D0A8                 ;org 0D0A8h
.rdata$r:0000D0A8 ; COMDAT (pick any)
.rdata$r:0000D0A8                 public ??_R2exception@std@@8
.rdata$r:0000D0A8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000D0A8 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000D0A8                                         ; DATA XREF: .rdata$r:0000D0A4o
.rdata$r:0000D0A8                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D0AC                 db    0
.rdata$r:0000D0AD                 align 10h
.rdata$r:0000D0AD _rdata$r        ends
.rdata$r:0000D0AD
.rdata$r:0000D0B0 ; ===========================================================================
.rdata$r:0000D0B0
.rdata$r:0000D0B0 ; Segment type: Pure data
.rdata$r:0000D0B0 ; Segment permissions: Read
.rdata$r:0000D0B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D0B0                 assume cs:_rdata$r
.rdata$r:0000D0B0                 ;org 0D0B0h
.rdata$r:0000D0B0 ; COMDAT (pick any)
.rdata$r:0000D0B0                 public ??_R4ios_base@std@@6B@
.rdata$r:0000D0B0 ; const std::ios_base::`RTTI Complete Object Locator'
.rdata$r:0000D0B0 ??_R4ios_base@std@@6B@ db    0          ; DATA XREF: .rdata:0000CB44o
.rdata$r:0000D0B1                 db    0
.rdata$r:0000D0B2                 db    0
.rdata$r:0000D0B3                 db    0
.rdata$r:0000D0B4                 db    0
.rdata$r:0000D0B5                 db    0
.rdata$r:0000D0B6                 db    0
.rdata$r:0000D0B7                 db    0
.rdata$r:0000D0B8                 db    0
.rdata$r:0000D0B9                 db    0
.rdata$r:0000D0BA                 db    0
.rdata$r:0000D0BB                 db    0
.rdata$r:0000D0BC                 dd offset ??_R0?AVios_base@std@@@8 ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000D0C0                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D0C0 _rdata$r        ends
.rdata$r:0000D0C0
.data$r:0000D0C4 ; ===========================================================================
.data$r:0000D0C4
.data$r:0000D0C4 ; Segment type: Pure data
.data$r:0000D0C4 ; Segment permissions: Read/Write
.data$r:0000D0C4 _data$r         segment dword public 'DATA' use32
.data$r:0000D0C4                 assume cs:_data$r
.data$r:0000D0C4                 ;org 0D0C4h
.data$r:0000D0C4 ; COMDAT (pick any)
.data$r:0000D0C4                 public ??_R0?AVios_base@std@@@8
.data$r:0000D0C4 ; class std::ios_base `RTTI Type Descriptor'
.data$r:0000D0C4 ??_R0?AVios_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D0C4                                         ; DATA XREF: .rdata$r:0000D0BCo
.data$r:0000D0C4                                         ; .rdata$r:std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000D0C4                                         ; const type_info::`vftable'
.data$r:0000D0C8                 db    0
.data$r:0000D0C9                 db    0
.data$r:0000D0CA                 db    0
.data$r:0000D0CB                 db    0
.data$r:0000D0CC                 db  2Eh ; .
.data$r:0000D0CD                 db  3Fh ; ?
.data$r:0000D0CE                 db  41h ; A
.data$r:0000D0CF                 db  56h ; V
.data$r:0000D0D0                 db  69h ; i
.data$r:0000D0D1                 db  6Fh ; o
.data$r:0000D0D2                 db  73h ; s
.data$r:0000D0D3                 db  5Fh ; _
.data$r:0000D0D4                 db  62h ; b
.data$r:0000D0D5                 db  61h ; a
.data$r:0000D0D6                 db  73h ; s
.data$r:0000D0D7                 db  65h ; e
.data$r:0000D0D8                 db  40h ; @
.data$r:0000D0D9                 db  73h ; s
.data$r:0000D0DA                 db  74h ; t
.data$r:0000D0DB                 db  64h ; d
.data$r:0000D0DC                 db  40h ; @
.data$r:0000D0DD                 db  40h ; @
.data$r:0000D0DE                 db    0
.data$r:0000D0DF                 align 10h
.data$r:0000D0DF _data$r         ends
.data$r:0000D0DF
.rdata$r:0000D0E0 ; ===========================================================================
.rdata$r:0000D0E0
.rdata$r:0000D0E0 ; Segment type: Pure data
.rdata$r:0000D0E0 ; Segment permissions: Read
.rdata$r:0000D0E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D0E0                 assume cs:_rdata$r
.rdata$r:0000D0E0                 ;org 0D0E0h
.rdata$r:0000D0E0 ; COMDAT (pick any)
.rdata$r:0000D0E0                 public ??_R3ios_base@std@@8
.rdata$r:0000D0E0 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D0E0 ??_R3ios_base@std@@8 db    0            ; DATA XREF: .rdata$r:0000D0C0o
.rdata$r:0000D0E0                                         ; .rdata$r:0000D114o ...
.rdata$r:0000D0E1                 db    0
.rdata$r:0000D0E2                 db    0
.rdata$r:0000D0E3                 db    0
.rdata$r:0000D0E4                 db    0
.rdata$r:0000D0E5                 db    0
.rdata$r:0000D0E6                 db    0
.rdata$r:0000D0E7                 db    0
.rdata$r:0000D0E8                 db    2
.rdata$r:0000D0E9                 db    0
.rdata$r:0000D0EA                 db    0
.rdata$r:0000D0EB                 db    0
.rdata$r:0000D0EC                 dd offset ??_R2ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
.rdata$r:0000D0EC _rdata$r        ends
.rdata$r:0000D0EC
.rdata$r:0000D0F0 ; ===========================================================================
.rdata$r:0000D0F0
.rdata$r:0000D0F0 ; Segment type: Pure data
.rdata$r:0000D0F0 ; Segment permissions: Read
.rdata$r:0000D0F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D0F0                 assume cs:_rdata$r
.rdata$r:0000D0F0                 ;org 0D0F0h
.rdata$r:0000D0F0 ; COMDAT (pick any)
.rdata$r:0000D0F0                 public ??_R2ios_base@std@@8
.rdata$r:0000D0F0 ; std::ios_base::`RTTI Base Class Array'
.rdata$r:0000D0F0 ??_R2ios_base@std@@8 dd offset ??_R1A@?0A@EA@ios_base@std@@8
.rdata$r:0000D0F0                                         ; DATA XREF: .rdata$r:0000D0ECo
.rdata$r:0000D0F0                                         ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D0F4                 dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000D0F8                 db    0
.rdata$r:0000D0F9                 align 4
.rdata$r:0000D0F9 _rdata$r        ends
.rdata$r:0000D0F9
.rdata$r:0000D0FC ; ===========================================================================
.rdata$r:0000D0FC
.rdata$r:0000D0FC ; Segment type: Pure data
.rdata$r:0000D0FC ; Segment permissions: Read
.rdata$r:0000D0FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D0FC                 assume cs:_rdata$r
.rdata$r:0000D0FC                 ;org 0D0FCh
.rdata$r:0000D0FC ; COMDAT (pick any)
.rdata$r:0000D0FC                 public ??_R1A@?0A@EA@ios_base@std@@8
.rdata$r:0000D0FC ; std::ios_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D0FC ??_R1A@?0A@EA@ios_base@std@@8 dd offset ??_R0?AVios_base@std@@@8
.rdata$r:0000D0FC                                         ; DATA XREF: .rdata$r:std::ios_base::`RTTI Base Class Array'o
.rdata$r:0000D0FC                                         ; .rdata$r:0000D1E4o
.rdata$r:0000D0FC                                         ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000D100                 db    1
.rdata$r:0000D101                 db    0
.rdata$r:0000D102                 db    0
.rdata$r:0000D103                 db    0
.rdata$r:0000D104                 db    0
.rdata$r:0000D105                 db    0
.rdata$r:0000D106                 db    0
.rdata$r:0000D107                 db    0
.rdata$r:0000D108                 db 0FFh
.rdata$r:0000D109                 db 0FFh
.rdata$r:0000D10A                 db 0FFh
.rdata$r:0000D10B                 db 0FFh
.rdata$r:0000D10C                 db    0
.rdata$r:0000D10D                 db    0
.rdata$r:0000D10E                 db    0
.rdata$r:0000D10F                 db    0
.rdata$r:0000D110                 db  40h ; @
.rdata$r:0000D111                 db    0
.rdata$r:0000D112                 db    0
.rdata$r:0000D113                 db    0
.rdata$r:0000D114                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D114 _rdata$r        ends
.rdata$r:0000D114
.rdata$r:0000D118 ; ===========================================================================
.rdata$r:0000D118
.rdata$r:0000D118 ; Segment type: Pure data
.rdata$r:0000D118 ; Segment permissions: Read
.rdata$r:0000D118 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D118                 assume cs:_rdata$r
.rdata$r:0000D118                 ;org 0D118h
.rdata$r:0000D118 ; COMDAT (pick any)
.rdata$r:0000D118                 public ??_R17?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000D118 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000D118 ??_R17?0A@EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000D118                                         ; DATA XREF: .rdata$r:0000D0F4o
.rdata$r:0000D118                                         ; .rdata$r:0000D1E8o
.rdata$r:0000D118                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000D11C                 align 10h
.rdata$r:0000D120                 db    8
.rdata$r:0000D121                 db    0
.rdata$r:0000D122                 db    0
.rdata$r:0000D123                 db    0
.rdata$r:0000D124                 db 0FFh
.rdata$r:0000D125                 db 0FFh
.rdata$r:0000D126                 db 0FFh
.rdata$r:0000D127                 db 0FFh
.rdata$r:0000D128                 db    0
.rdata$r:0000D129                 db    0
.rdata$r:0000D12A                 db    0
.rdata$r:0000D12B                 db    0
.rdata$r:0000D12C                 db  40h ; @
.rdata$r:0000D12D                 db    0
.rdata$r:0000D12E                 db    0
.rdata$r:0000D12F                 db    0
.rdata$r:0000D130                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D130 _rdata$r        ends
.rdata$r:0000D130
.data$r:0000D134 ; ===========================================================================
.data$r:0000D134
.data$r:0000D134 ; Segment type: Pure data
.data$r:0000D134 ; Segment permissions: Read/Write
.data$r:0000D134 _data$r         segment dword public 'DATA' use32
.data$r:0000D134                 assume cs:_data$r
.data$r:0000D134                 ;org 0D134h
.data$r:0000D134 ; COMDAT (pick any)
.data$r:0000D134                 public ??_R0?AV?$_Iosb@H@std@@@8
.data$r:0000D134 ; class std::_Iosb<int> `RTTI Type Descriptor'
.data$r:0000D134 ??_R0?AV?$_Iosb@H@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D134                                         ; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data$r:0000D134                                         ; .rdata$r:std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000D134                                         ; const type_info::`vftable'
.data$r:0000D138                 db    0
.data$r:0000D139                 db    0
.data$r:0000D13A                 db    0
.data$r:0000D13B                 db    0
.data$r:0000D13C                 db  2Eh ; .
.data$r:0000D13D                 db  3Fh ; ?
.data$r:0000D13E                 db  41h ; A
.data$r:0000D13F                 db  56h ; V
.data$r:0000D140                 db  3Fh ; ?
.data$r:0000D141                 db  24h ; $
.data$r:0000D142                 db  5Fh ; _
.data$r:0000D143                 db  49h ; I
.data$r:0000D144                 db  6Fh ; o
.data$r:0000D145                 db  73h ; s
.data$r:0000D146                 db  62h ; b
.data$r:0000D147                 db  40h ; @
.data$r:0000D148                 db  48h ; H
.data$r:0000D149                 db  40h ; @
.data$r:0000D14A                 db  73h ; s
.data$r:0000D14B                 db  74h ; t
.data$r:0000D14C                 db  64h ; d
.data$r:0000D14D                 db  40h ; @
.data$r:0000D14E                 db  40h ; @
.data$r:0000D14F                 db    0
.data$r:0000D14F _data$r         ends
.data$r:0000D14F
.rdata$r:0000D150 ; ===========================================================================
.rdata$r:0000D150
.rdata$r:0000D150 ; Segment type: Pure data
.rdata$r:0000D150 ; Segment permissions: Read
.rdata$r:0000D150 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D150                 assume cs:_rdata$r
.rdata$r:0000D150                 ;org 0D150h
.rdata$r:0000D150 ; COMDAT (pick any)
.rdata$r:0000D150                 public ??_R3?$_Iosb@H@std@@8
.rdata$r:0000D150 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D150 ??_R3?$_Iosb@H@std@@8 db    0           ; DATA XREF: .rdata$r:0000D130o
.rdata$r:0000D150                                         ; .rdata$r:0000D180o ...
.rdata$r:0000D151                 db    0
.rdata$r:0000D152                 db    0
.rdata$r:0000D153                 db    0
.rdata$r:0000D154                 db    0
.rdata$r:0000D155                 db    0
.rdata$r:0000D156                 db    0
.rdata$r:0000D157                 db    0
.rdata$r:0000D158                 db    1
.rdata$r:0000D159                 db    0
.rdata$r:0000D15A                 db    0
.rdata$r:0000D15B                 db    0
.rdata$r:0000D15C                 dd offset ??_R2?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
.rdata$r:0000D15C _rdata$r        ends
.rdata$r:0000D15C
.rdata$r:0000D160 ; ===========================================================================
.rdata$r:0000D160
.rdata$r:0000D160 ; Segment type: Pure data
.rdata$r:0000D160 ; Segment permissions: Read
.rdata$r:0000D160 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D160                 assume cs:_rdata$r
.rdata$r:0000D160                 ;org 0D160h
.rdata$r:0000D160 ; COMDAT (pick any)
.rdata$r:0000D160                 public ??_R2?$_Iosb@H@std@@8
.rdata$r:0000D160 ; std::_Iosb<int>::`RTTI Base Class Array'
.rdata$r:0000D160 ??_R2?$_Iosb@H@std@@8 dd offset ??_R1A@?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000D160                                         ; DATA XREF: .rdata$r:0000D15Co
.rdata$r:0000D160                                         ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D164                 db    0
.rdata$r:0000D165                 align 4
.rdata$r:0000D165 _rdata$r        ends
.rdata$r:0000D165
.rdata$r:0000D168 ; ===========================================================================
.rdata$r:0000D168
.rdata$r:0000D168 ; Segment type: Pure data
.rdata$r:0000D168 ; Segment permissions: Read
.rdata$r:0000D168 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D168                 assume cs:_rdata$r
.rdata$r:0000D168                 ;org 0D168h
.rdata$r:0000D168 ; COMDAT (pick any)
.rdata$r:0000D168                 public ??_R1A@?0A@EA@?$_Iosb@H@std@@8
.rdata$r:0000D168 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D168 ??_R1A@?0A@EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000D168                                         ; DATA XREF: .rdata$r:std::_Iosb<int>::`RTTI Base Class Array'o
.rdata$r:0000D168                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000D16C                 db    0
.rdata$r:0000D16D                 db    0
.rdata$r:0000D16E                 db    0
.rdata$r:0000D16F                 db    0
.rdata$r:0000D170                 db    0
.rdata$r:0000D171                 db    0
.rdata$r:0000D172                 db    0
.rdata$r:0000D173                 db    0
.rdata$r:0000D174                 db 0FFh
.rdata$r:0000D175                 db 0FFh
.rdata$r:0000D176                 db 0FFh
.rdata$r:0000D177                 db 0FFh
.rdata$r:0000D178                 db    0
.rdata$r:0000D179                 db    0
.rdata$r:0000D17A                 db    0
.rdata$r:0000D17B                 db    0
.rdata$r:0000D17C                 db  40h ; @
.rdata$r:0000D17D                 db    0
.rdata$r:0000D17E                 db    0
.rdata$r:0000D17F                 db    0
.rdata$r:0000D180                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D180 _rdata$r        ends
.rdata$r:0000D180
.rdata$r:0000D184 ; ===========================================================================
.rdata$r:0000D184
.rdata$r:0000D184 ; Segment type: Pure data
.rdata$r:0000D184 ; Segment permissions: Read
.rdata$r:0000D184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D184                 assume cs:_rdata$r
.rdata$r:0000D184                 ;org 0D184h
.rdata$r:0000D184 ; COMDAT (pick any)
.rdata$r:0000D184                 public ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
.rdata$r:0000D184 ; const std::basic_ios<char, struct std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata$r:0000D184 ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ db    0
.rdata$r:0000D184                                         ; DATA XREF: .rdata:0000CCBCo
.rdata$r:0000D185                 db    0
.rdata$r:0000D186                 db    0
.rdata$r:0000D187                 db    0
.rdata$r:0000D188                 db    0
.rdata$r:0000D189                 db    0
.rdata$r:0000D18A                 db    0
.rdata$r:0000D18B                 db    0
.rdata$r:0000D18C                 db    0
.rdata$r:0000D18D                 db    0
.rdata$r:0000D18E                 db    0
.rdata$r:0000D18F                 db    0
.rdata$r:0000D190                 dd offset ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D194                 dd offset ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D194 _rdata$r        ends
.rdata$r:0000D194
.data$r:0000D198 ; ===========================================================================
.data$r:0000D198
.data$r:0000D198 ; Segment type: Pure data
.data$r:0000D198 ; Segment permissions: Read/Write
.data$r:0000D198 _data$r         segment dword public 'DATA' use32
.data$r:0000D198                 assume cs:_data$r
.data$r:0000D198                 ;org 0D198h
.data$r:0000D198 ; COMDAT (pick any)
.data$r:0000D198                 public ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
.data$r:0000D198 ; class std::basic_ios<char, struct std::char_traits<char>> `RTTI Type Descriptor'
.data$r:0000D198 ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D198                                         ; DATA XREF: .rdata$r:0000D190o
.data$r:0000D198                                         ; .rdata$r:std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data$r:0000D198                                         ; const type_info::`vftable'
.data$r:0000D19C                 align 10h
.data$r:0000D1A0 a_?av?Basic_ios db '.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@',0
.data$r:0000D1CE                 align 10h
.data$r:0000D1CE _data$r         ends
.data$r:0000D1CE
.rdata$r:0000D1D0 ; ===========================================================================
.rdata$r:0000D1D0
.rdata$r:0000D1D0 ; Segment type: Pure data
.rdata$r:0000D1D0 ; Segment permissions: Read
.rdata$r:0000D1D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D1D0                 assume cs:_rdata$r
.rdata$r:0000D1D0                 ;org 0D1D0h
.rdata$r:0000D1D0 ; COMDAT (pick any)
.rdata$r:0000D1D0                 public ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D1D0 ; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D1D0 ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 db    0
.rdata$r:0000D1D0                                         ; DATA XREF: .rdata$r:0000D194o
.rdata$r:0000D1D0                                         ; .rdata$r:0000D208o ...
.rdata$r:0000D1D1                 db    0
.rdata$r:0000D1D2                 db    0
.rdata$r:0000D1D3                 db    0
.rdata$r:0000D1D4                 db    0
.rdata$r:0000D1D5                 db    0
.rdata$r:0000D1D6                 db    0
.rdata$r:0000D1D7                 db    0
.rdata$r:0000D1D8                 db    3
.rdata$r:0000D1D9                 db    0
.rdata$r:0000D1DA                 db    0
.rdata$r:0000D1DB                 db    0
.rdata$r:0000D1DC                 dd offset ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D1DC _rdata$r        ends
.rdata$r:0000D1DC
.rdata$r:0000D1E0 ; ===========================================================================
.rdata$r:0000D1E0
.rdata$r:0000D1E0 ; Segment type: Pure data
.rdata$r:0000D1E0 ; Segment permissions: Read
.rdata$r:0000D1E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D1E0                 assume cs:_rdata$r
.rdata$r:0000D1E0                 ;org 0D1E0h
.rdata$r:0000D1E0 ; COMDAT (pick any)
.rdata$r:0000D1E0                 public ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D1E0 ; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D1E0 ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D1E0                                         ; DATA XREF: .rdata$r:0000D1DCo
.rdata$r:0000D1E0                                         ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D1E4                 dd offset ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D1E8                 dd offset ??_R17?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000D1EC                 db    0
.rdata$r:0000D1ED                 align 10h
.rdata$r:0000D1ED _rdata$r        ends
.rdata$r:0000D1ED
.rdata$r:0000D1F0 ; ===========================================================================
.rdata$r:0000D1F0
.rdata$r:0000D1F0 ; Segment type: Pure data
.rdata$r:0000D1F0 ; Segment permissions: Read
.rdata$r:0000D1F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D1F0                 assume cs:_rdata$r
.rdata$r:0000D1F0                 ;org 0D1F0h
.rdata$r:0000D1F0 ; COMDAT (pick any)
.rdata$r:0000D1F0                 public ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D1F0 ; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D1F0 ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
.rdata$r:0000D1F0                                         ; DATA XREF: .rdata$r:std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Array'o
.rdata$r:0000D1F0                                         ; std::basic_ios<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D1F4                 db    2
.rdata$r:0000D1F5                 db    0
.rdata$r:0000D1F6                 db    0
.rdata$r:0000D1F7                 db    0
.rdata$r:0000D1F8                 db    0
.rdata$r:0000D1F9                 db    0
.rdata$r:0000D1FA                 db    0
.rdata$r:0000D1FB                 db    0
.rdata$r:0000D1FC                 db 0FFh
.rdata$r:0000D1FD                 db 0FFh
.rdata$r:0000D1FE                 db 0FFh
.rdata$r:0000D1FF                 db 0FFh
.rdata$r:0000D200                 db    0
.rdata$r:0000D201                 db    0
.rdata$r:0000D202                 db    0
.rdata$r:0000D203                 db    0
.rdata$r:0000D204                 db  40h ; @
.rdata$r:0000D205                 db    0
.rdata$r:0000D206                 db    0
.rdata$r:0000D207                 db    0
.rdata$r:0000D208                 dd offset ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D208 _rdata$r        ends
.rdata$r:0000D208
.rdata$r:0000D20C ; ===========================================================================
.rdata$r:0000D20C
.rdata$r:0000D20C ; Segment type: Pure data
.rdata$r:0000D20C ; Segment permissions: Read
.rdata$r:0000D20C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D20C                 assume cs:_rdata$r
.rdata$r:0000D20C                 ;org 0D20Ch
.rdata$r:0000D20C ; COMDAT (pick any)
.rdata$r:0000D20C                 public ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
.rdata$r:0000D20C ; const std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata$r:0000D20C ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ db    0
.rdata$r:0000D20C                                         ; DATA XREF: .rdata:0000CCC4o
.rdata$r:0000D20D                 db    0
.rdata$r:0000D20E                 db    0
.rdata$r:0000D20F                 db    0
.rdata$r:0000D210                 db    0
.rdata$r:0000D211                 db    0
.rdata$r:0000D212                 db    0
.rdata$r:0000D213                 db    0
.rdata$r:0000D214                 db    0
.rdata$r:0000D215                 db    0
.rdata$r:0000D216                 db    0
.rdata$r:0000D217                 db    0
.rdata$r:0000D218                 dd offset ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D21C                 dd offset ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D21C _rdata$r        ends
.rdata$r:0000D21C
.data$r:0000D220 ; ===========================================================================
.data$r:0000D220
.data$r:0000D220 ; Segment type: Pure data
.data$r:0000D220 ; Segment permissions: Read/Write
.data$r:0000D220 _data$r         segment dword public 'DATA' use32
.data$r:0000D220                 assume cs:_data$r
.data$r:0000D220                 ;org 0D220h
.data$r:0000D220 ; COMDAT (pick any)
.data$r:0000D220                 public ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
.data$r:0000D220 ; class std::basic_streambuf<char, struct std::char_traits<char>> `RTTI Type Descriptor'
.data$r:0000D220 ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D220                                         ; DATA XREF: .rdata$r:0000D218o
.data$r:0000D220                                         ; .rdata$r:std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D220                                         ; const type_info::`vftable'
.data$r:0000D224                 align 8
.data$r:0000D228 a_?av?Basic_str db '.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@',0
.data$r:0000D228 _data$r         ends
.data$r:0000D228
.rdata$r:0000D25C ; ===========================================================================
.rdata$r:0000D25C
.rdata$r:0000D25C ; Segment type: Pure data
.rdata$r:0000D25C ; Segment permissions: Read
.rdata$r:0000D25C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D25C                 assume cs:_rdata$r
.rdata$r:0000D25C                 ;org 0D25Ch
.rdata$r:0000D25C ; COMDAT (pick any)
.rdata$r:0000D25C                 public ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D25C ; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D25C ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 db    0
.rdata$r:0000D25C                                         ; DATA XREF: .rdata$r:0000D21Co
.rdata$r:0000D25C                                         ; .rdata$r:0000D28Co
.rdata$r:0000D25D                 db    0
.rdata$r:0000D25E                 db    0
.rdata$r:0000D25F                 db    0
.rdata$r:0000D260                 db    0
.rdata$r:0000D261                 db    0
.rdata$r:0000D262                 db    0
.rdata$r:0000D263                 db    0
.rdata$r:0000D264                 db    1
.rdata$r:0000D265                 db    0
.rdata$r:0000D266                 db    0
.rdata$r:0000D267                 db    0
.rdata$r:0000D268                 dd offset ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D268 _rdata$r        ends
.rdata$r:0000D268
.rdata$r:0000D26C ; ===========================================================================
.rdata$r:0000D26C
.rdata$r:0000D26C ; Segment type: Pure data
.rdata$r:0000D26C ; Segment permissions: Read
.rdata$r:0000D26C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D26C                 assume cs:_rdata$r
.rdata$r:0000D26C                 ;org 0D26Ch
.rdata$r:0000D26C ; COMDAT (pick any)
.rdata$r:0000D26C                 public ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D26C ; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D26C ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D26C                                         ; DATA XREF: .rdata$r:0000D268o
.rdata$r:0000D26C                                         ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D270                 db    0
.rdata$r:0000D271                 align 4
.rdata$r:0000D271 _rdata$r        ends
.rdata$r:0000D271
.rdata$r:0000D274 ; ===========================================================================
.rdata$r:0000D274
.rdata$r:0000D274 ; Segment type: Pure data
.rdata$r:0000D274 ; Segment permissions: Read
.rdata$r:0000D274 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D274                 assume cs:_rdata$r
.rdata$r:0000D274                 ;org 0D274h
.rdata$r:0000D274 ; COMDAT (pick any)
.rdata$r:0000D274                 public ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D274 ; std::basic_streambuf<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D274 ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
.rdata$r:0000D274                                         ; DATA XREF: .rdata$r:std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Array'o
.rdata$r:0000D274                                         ; .rdata$r:0000D3ECo
.rdata$r:0000D274                                         ; std::basic_streambuf<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D278                 align 10h
.rdata$r:0000D280                 db 0FFh
.rdata$r:0000D281                 db 0FFh
.rdata$r:0000D282                 db 0FFh
.rdata$r:0000D283                 db 0FFh
.rdata$r:0000D284                 db    0
.rdata$r:0000D285                 db    0
.rdata$r:0000D286                 db    0
.rdata$r:0000D287                 db    0
.rdata$r:0000D288                 db  40h ; @
.rdata$r:0000D289                 db    0
.rdata$r:0000D28A                 db    0
.rdata$r:0000D28B                 db    0
.rdata$r:0000D28C                 dd offset ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D28C _rdata$r        ends
.rdata$r:0000D28C
.rdata$r:0000D290 ; ===========================================================================
.rdata$r:0000D290
.rdata$r:0000D290 ; Segment type: Pure data
.rdata$r:0000D290 ; Segment permissions: Read
.rdata$r:0000D290 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D290                 assume cs:_rdata$r
.rdata$r:0000D290                 ;org 0D290h
.rdata$r:0000D290 ; COMDAT (pick any)
.rdata$r:0000D290                 public ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D290 ; std::basic_ios<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, 0, 4, 80)'
.rdata$r:0000D290 ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
.rdata$r:0000D290                                         ; DATA XREF: .rdata$r:0000D348o
.rdata$r:0000D290                                         ; .rdata$r:0000D490o
.rdata$r:0000D290                                         ; std::basic_ios<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D294                 db    2
.rdata$r:0000D295                 db    0
.rdata$r:0000D296                 db    0
.rdata$r:0000D297                 db    0
.rdata$r:0000D298                 db    0
.rdata$r:0000D299                 db    0
.rdata$r:0000D29A                 db    0
.rdata$r:0000D29B                 db    0
.rdata$r:0000D29C                 db    0
.rdata$r:0000D29D                 db    0
.rdata$r:0000D29E                 db    0
.rdata$r:0000D29F                 db    0
.rdata$r:0000D2A0                 db    4
.rdata$r:0000D2A1                 db    0
.rdata$r:0000D2A2                 db    0
.rdata$r:0000D2A3                 db    0
.rdata$r:0000D2A4                 db  50h ; P
.rdata$r:0000D2A5                 db    0
.rdata$r:0000D2A6                 db    0
.rdata$r:0000D2A7                 db    0
.rdata$r:0000D2A8                 dd offset ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D2A8 _rdata$r        ends
.rdata$r:0000D2A8
.rdata$r:0000D2AC ; ===========================================================================
.rdata$r:0000D2AC
.rdata$r:0000D2AC ; Segment type: Pure data
.rdata$r:0000D2AC ; Segment permissions: Read
.rdata$r:0000D2AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D2AC                 assume cs:_rdata$r
.rdata$r:0000D2AC                 ;org 0D2ACh
.rdata$r:0000D2AC ; COMDAT (pick any)
.rdata$r:0000D2AC                 public ??_R1A@A@3EA@ios_base@std@@8
.rdata$r:0000D2AC ; std::ios_base::`RTTI Base Class Descriptor at (0, 0, 4, 64)'
.rdata$r:0000D2AC ??_R1A@A@3EA@ios_base@std@@8 dd offset ??_R0?AVios_base@std@@@8
.rdata$r:0000D2AC                                         ; DATA XREF: .rdata$r:0000D34Co
.rdata$r:0000D2AC                                         ; .rdata$r:0000D494o
.rdata$r:0000D2AC                                         ; std::ios_base `RTTI Type Descriptor'
.rdata$r:0000D2B0                 db    1
.rdata$r:0000D2B1                 db    0
.rdata$r:0000D2B2                 db    0
.rdata$r:0000D2B3                 db    0
.rdata$r:0000D2B4                 db    0
.rdata$r:0000D2B5                 db    0
.rdata$r:0000D2B6                 db    0
.rdata$r:0000D2B7                 db    0
.rdata$r:0000D2B8                 db    0
.rdata$r:0000D2B9                 db    0
.rdata$r:0000D2BA                 db    0
.rdata$r:0000D2BB                 db    0
.rdata$r:0000D2BC                 db    4
.rdata$r:0000D2BD                 db    0
.rdata$r:0000D2BE                 db    0
.rdata$r:0000D2BF                 db    0
.rdata$r:0000D2C0                 db  40h ; @
.rdata$r:0000D2C1                 db    0
.rdata$r:0000D2C2                 db    0
.rdata$r:0000D2C3                 db    0
.rdata$r:0000D2C4                 dd offset ??_R3ios_base@std@@8 ; std::ios_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D2C4 _rdata$r        ends
.rdata$r:0000D2C4
.rdata$r:0000D2C8 ; ===========================================================================
.rdata$r:0000D2C8
.rdata$r:0000D2C8 ; Segment type: Pure data
.rdata$r:0000D2C8 ; Segment permissions: Read
.rdata$r:0000D2C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D2C8                 assume cs:_rdata$r
.rdata$r:0000D2C8                 ;org 0D2C8h
.rdata$r:0000D2C8 ; COMDAT (pick any)
.rdata$r:0000D2C8                 public ??_R17A@3EA@?$_Iosb@H@std@@8
.rdata$r:0000D2C8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8, 0, 4, 64)'
.rdata$r:0000D2C8 ??_R17A@3EA@?$_Iosb@H@std@@8 dd offset ??_R0?AV?$_Iosb@H@std@@@8
.rdata$r:0000D2C8                                         ; DATA XREF: .rdata$r:0000D350o
.rdata$r:0000D2C8                                         ; .rdata$r:0000D498o
.rdata$r:0000D2C8                                         ; std::_Iosb<int> `RTTI Type Descriptor'
.rdata$r:0000D2CC                 align 10h
.rdata$r:0000D2D0                 db    8
.rdata$r:0000D2D1                 db    0
.rdata$r:0000D2D2                 db    0
.rdata$r:0000D2D3                 db    0
.rdata$r:0000D2D4                 db    0
.rdata$r:0000D2D5                 db    0
.rdata$r:0000D2D6                 db    0
.rdata$r:0000D2D7                 db    0
.rdata$r:0000D2D8                 db    4
.rdata$r:0000D2D9                 db    0
.rdata$r:0000D2DA                 db    0
.rdata$r:0000D2DB                 db    0
.rdata$r:0000D2DC                 db  40h ; @
.rdata$r:0000D2DD                 db    0
.rdata$r:0000D2DE                 db    0
.rdata$r:0000D2DF                 db    0
.rdata$r:0000D2E0                 dd offset ??_R3?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D2E0 _rdata$r        ends
.rdata$r:0000D2E0
.rdata$r:0000D2E4 ; ===========================================================================
.rdata$r:0000D2E4
.rdata$r:0000D2E4 ; Segment type: Pure data
.rdata$r:0000D2E4 ; Segment permissions: Read
.rdata$r:0000D2E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D2E4                 assume cs:_rdata$r
.rdata$r:0000D2E4                 ;org 0D2E4h
.rdata$r:0000D2E4 ; COMDAT (pick any)
.rdata$r:0000D2E4                 public ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
.rdata$r:0000D2E4 ; const std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Complete Object Locator'
.rdata$r:0000D2E4 ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ db    0
.rdata$r:0000D2E4                                         ; DATA XREF: .rdata:0000CD04o
.rdata$r:0000D2E5                 db    0
.rdata$r:0000D2E6                 db    0
.rdata$r:0000D2E7                 db    0
.rdata$r:0000D2E8                 db    8
.rdata$r:0000D2E9                 db    0
.rdata$r:0000D2EA                 db    0
.rdata$r:0000D2EB                 db    0
.rdata$r:0000D2EC                 db    4
.rdata$r:0000D2ED                 db    0
.rdata$r:0000D2EE                 db    0
.rdata$r:0000D2EF                 db    0
.rdata$r:0000D2F0                 dd offset ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D2F4                 dd offset ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D2F4 _rdata$r        ends
.rdata$r:0000D2F4
.data$r:0000D2F8 ; ===========================================================================
.data$r:0000D2F8
.data$r:0000D2F8 ; Segment type: Pure data
.data$r:0000D2F8 ; Segment permissions: Read/Write
.data$r:0000D2F8 _data$r         segment dword public 'DATA' use32
.data$r:0000D2F8                 assume cs:_data$r
.data$r:0000D2F8                 ;org 0D2F8h
.data$r:0000D2F8 ; COMDAT (pick any)
.data$r:0000D2F8                 public ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
.data$r:0000D2F8 ; class std::basic_ostream<char, struct std::char_traits<char>> `RTTI Type Descriptor'
.data$r:0000D2F8 ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D2F8                                         ; DATA XREF: .rdata$r:0000D2F0o
.data$r:0000D2F8                                         ; .rdata$r:std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D2F8                                         ; const type_info::`vftable'
.data$r:0000D2FC                 align 10h
.data$r:0000D300 a_?av?Basic_ost db '.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@',0
.data$r:0000D332                 align 4
.data$r:0000D332 _data$r         ends
.data$r:0000D332
.rdata$r:0000D334 ; ===========================================================================
.rdata$r:0000D334
.rdata$r:0000D334 ; Segment type: Pure data
.rdata$r:0000D334 ; Segment permissions: Read
.rdata$r:0000D334 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D334                 assume cs:_rdata$r
.rdata$r:0000D334                 ;org 0D334h
.rdata$r:0000D334 ; COMDAT (pick any)
.rdata$r:0000D334                 public ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D334 ; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D334 ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 db    0
.rdata$r:0000D334                                         ; DATA XREF: .rdata$r:0000D2F4o
.rdata$r:0000D334                                         ; .rdata$r:0000D370o
.rdata$r:0000D335                 db    0
.rdata$r:0000D336                 db    0
.rdata$r:0000D337                 db    0
.rdata$r:0000D338                 db    0
.rdata$r:0000D339                 db    0
.rdata$r:0000D33A                 db    0
.rdata$r:0000D33B                 db    0
.rdata$r:0000D33C                 db    4
.rdata$r:0000D33D                 db    0
.rdata$r:0000D33E                 db    0
.rdata$r:0000D33F                 db    0
.rdata$r:0000D340                 dd offset ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D340 _rdata$r        ends
.rdata$r:0000D340
.rdata$r:0000D344 ; ===========================================================================
.rdata$r:0000D344
.rdata$r:0000D344 ; Segment type: Pure data
.rdata$r:0000D344 ; Segment permissions: Read
.rdata$r:0000D344 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D344                 assume cs:_rdata$r
.rdata$r:0000D344                 ;org 0D344h
.rdata$r:0000D344 ; COMDAT (pick any)
.rdata$r:0000D344                 public ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D344 ; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Base Class Array'
.rdata$r:0000D344 ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D344                                         ; DATA XREF: .rdata$r:0000D340o
.rdata$r:0000D344                                         ; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D348                 dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,0,4,80)'
.rdata$r:0000D34C                 dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
.rdata$r:0000D350                 dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
.rdata$r:0000D354                 db    0
.rdata$r:0000D355                 align 4
.rdata$r:0000D355 _rdata$r        ends
.rdata$r:0000D355
.rdata$r:0000D358 ; ===========================================================================
.rdata$r:0000D358
.rdata$r:0000D358 ; Segment type: Pure data
.rdata$r:0000D358 ; Segment permissions: Read
.rdata$r:0000D358 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D358                 assume cs:_rdata$r
.rdata$r:0000D358                 ;org 0D358h
.rdata$r:0000D358 ; COMDAT (pick any)
.rdata$r:0000D358                 public ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
.rdata$r:0000D358 ; std::basic_ostream<char, struct std::char_traits<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D358 ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 dd offset ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
.rdata$r:0000D358                                         ; DATA XREF: .rdata$r:std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Array'o
.rdata$r:0000D358                                         ; .rdata$r:0000D48Co
.rdata$r:0000D358                                         ; std::basic_ostream<char,std::char_traits<char>> `RTTI Type Descriptor'
.rdata$r:0000D35C                 db    3
.rdata$r:0000D35D                 db    0
.rdata$r:0000D35E                 db    0
.rdata$r:0000D35F                 db    0
.rdata$r:0000D360                 db    0
.rdata$r:0000D361                 db    0
.rdata$r:0000D362                 db    0
.rdata$r:0000D363                 db    0
.rdata$r:0000D364                 db 0FFh
.rdata$r:0000D365                 db 0FFh
.rdata$r:0000D366                 db 0FFh
.rdata$r:0000D367                 db 0FFh
.rdata$r:0000D368                 db    0
.rdata$r:0000D369                 db    0
.rdata$r:0000D36A                 db    0
.rdata$r:0000D36B                 db    0
.rdata$r:0000D36C                 db  40h ; @
.rdata$r:0000D36D                 db    0
.rdata$r:0000D36E                 db    0
.rdata$r:0000D36F                 db    0
.rdata$r:0000D370                 dd offset ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D370 _rdata$r        ends
.rdata$r:0000D370
.rdata$r:0000D374 ; ===========================================================================
.rdata$r:0000D374
.rdata$r:0000D374 ; Segment type: Pure data
.rdata$r:0000D374 ; Segment permissions: Read
.rdata$r:0000D374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D374                 assume cs:_rdata$r
.rdata$r:0000D374                 ;org 0D374h
.rdata$r:0000D374 ; COMDAT (pick any)
.rdata$r:0000D374                 public ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
.rdata$r:0000D374 ; const std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Complete Object Locator'
.rdata$r:0000D374 ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ db    0
.rdata$r:0000D374                                         ; DATA XREF: .rdata:0000CE24o
.rdata$r:0000D375                 db    0
.rdata$r:0000D376                 db    0
.rdata$r:0000D377                 db    0
.rdata$r:0000D378                 db    0
.rdata$r:0000D379                 db    0
.rdata$r:0000D37A                 db    0
.rdata$r:0000D37B                 db    0
.rdata$r:0000D37C                 db    0
.rdata$r:0000D37D                 db    0
.rdata$r:0000D37E                 db    0
.rdata$r:0000D37F                 db    0
.rdata$r:0000D380                 dd offset ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
.rdata$r:0000D384                 dd offset ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D384 _rdata$r        ends
.rdata$r:0000D384
.data$r:0000D388 ; ===========================================================================
.data$r:0000D388
.data$r:0000D388 ; Segment type: Pure data
.data$r:0000D388 ; Segment permissions: Read/Write
.data$r:0000D388 ; Segment alignment 'qword' can not be represented in assembly
.data$r:0000D388 _data$r         segment para public 'DATA' use32
.data$r:0000D388                 assume cs:_data$r
.data$r:0000D388                 ;org 0D388h
.data$r:0000D388 ; COMDAT (pick any)
.data$r:0000D388                 public ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
.data$r:0000D388 ; class std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>> `RTTI Type Descriptor'
.data$r:0000D388 ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D388                                         ; DATA XREF: .rdata$r:0000D380o
.data$r:0000D388                                         ; .rdata$r:std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D388                                         ; const type_info::`vftable'
.data$r:0000D38C                 align 10h
.data$r:0000D390 a_?av?Basic_s_0 db '.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@st'
.data$r:0000D390                 db 'd@@',0
.data$r:0000D3D5                 align 4
.data$r:0000D3D5 _data$r         ends
.data$r:0000D3D5
.rdata$r:0000D3D8 ; ===========================================================================
.rdata$r:0000D3D8
.rdata$r:0000D3D8 ; Segment type: Pure data
.rdata$r:0000D3D8 ; Segment permissions: Read
.rdata$r:0000D3D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D3D8                 assume cs:_rdata$r
.rdata$r:0000D3D8                 ;org 0D3D8h
.rdata$r:0000D3D8 ; COMDAT (pick any)
.rdata$r:0000D3D8                 public ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D3D8 ; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D3D8 ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 db    0
.rdata$r:0000D3D8                                         ; DATA XREF: .rdata$r:0000D384o
.rdata$r:0000D3D8                                         ; .rdata$r:0000D40Co
.rdata$r:0000D3D9                 db    0
.rdata$r:0000D3DA                 db    0
.rdata$r:0000D3DB                 db    0
.rdata$r:0000D3DC                 db    0
.rdata$r:0000D3DD                 db    0
.rdata$r:0000D3DE                 db    0
.rdata$r:0000D3DF                 db    0
.rdata$r:0000D3E0                 db    2
.rdata$r:0000D3E1                 db    0
.rdata$r:0000D3E2                 db    0
.rdata$r:0000D3E3                 db    0
.rdata$r:0000D3E4                 dd offset ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'
.rdata$r:0000D3E4 _rdata$r        ends
.rdata$r:0000D3E4
.rdata$r:0000D3E8 ; ===========================================================================
.rdata$r:0000D3E8
.rdata$r:0000D3E8 ; Segment type: Pure data
.rdata$r:0000D3E8 ; Segment permissions: Read
.rdata$r:0000D3E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D3E8                 assume cs:_rdata$r
.rdata$r:0000D3E8                 ;org 0D3E8h
.rdata$r:0000D3E8 ; COMDAT (pick any)
.rdata$r:0000D3E8                 public ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D3E8 ; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Array'
.rdata$r:0000D3E8 ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D3E8                                         ; DATA XREF: .rdata$r:0000D3E4o
.rdata$r:0000D3E8                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D3EC                 dd offset ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D3F0                 db    0
.rdata$r:0000D3F1                 align 4
.rdata$r:0000D3F1 _rdata$r        ends
.rdata$r:0000D3F1
.rdata$r:0000D3F4 ; ===========================================================================
.rdata$r:0000D3F4
.rdata$r:0000D3F4 ; Segment type: Pure data
.rdata$r:0000D3F4 ; Segment permissions: Read
.rdata$r:0000D3F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D3F4                 assume cs:_rdata$r
.rdata$r:0000D3F4                 ;org 0D3F4h
.rdata$r:0000D3F4 ; COMDAT (pick any)
.rdata$r:0000D3F4                 public ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D3F4 ; std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D3F4 ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
.rdata$r:0000D3F4                                         ; DATA XREF: .rdata$r:std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'o
.rdata$r:0000D3F4                                         ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
.rdata$r:0000D3F8                 db    1
.rdata$r:0000D3F9                 db    0
.rdata$r:0000D3FA                 db    0
.rdata$r:0000D3FB                 db    0
.rdata$r:0000D3FC                 db    0
.rdata$r:0000D3FD                 db    0
.rdata$r:0000D3FE                 db    0
.rdata$r:0000D3FF                 db    0
.rdata$r:0000D400                 db 0FFh
.rdata$r:0000D401                 db 0FFh
.rdata$r:0000D402                 db 0FFh
.rdata$r:0000D403                 db 0FFh
.rdata$r:0000D404                 db    0
.rdata$r:0000D405                 db    0
.rdata$r:0000D406                 db    0
.rdata$r:0000D407                 db    0
.rdata$r:0000D408                 db  40h ; @
.rdata$r:0000D409                 db    0
.rdata$r:0000D40A                 db    0
.rdata$r:0000D40B                 db    0
.rdata$r:0000D40C                 dd offset ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D40C _rdata$r        ends
.rdata$r:0000D40C
.rdata$r:0000D410 ; ===========================================================================
.rdata$r:0000D410
.rdata$r:0000D410 ; Segment type: Pure data
.rdata$r:0000D410 ; Segment permissions: Read
.rdata$r:0000D410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D410                 assume cs:_rdata$r
.rdata$r:0000D410                 ;org 0D410h
.rdata$r:0000D410 ; COMDAT (pick any)
.rdata$r:0000D410                 public ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
.rdata$r:0000D410 ; const std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Complete Object Locator'
.rdata$r:0000D410 ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ db    0
.rdata$r:0000D410                                         ; DATA XREF: .rdata:0000CE64o
.rdata$r:0000D411                 db    0
.rdata$r:0000D412                 db    0
.rdata$r:0000D413                 db    0
.rdata$r:0000D414                 db  50h ; P
.rdata$r:0000D415                 db    0
.rdata$r:0000D416                 db    0
.rdata$r:0000D417                 db    0
.rdata$r:0000D418                 db    4
.rdata$r:0000D419                 db    0
.rdata$r:0000D41A                 db    0
.rdata$r:0000D41B                 db    0
.rdata$r:0000D41C                 dd offset ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
.rdata$r:0000D420                 dd offset ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D420 _rdata$r        ends
.rdata$r:0000D420
.data$r:0000D424 ; ===========================================================================
.data$r:0000D424
.data$r:0000D424 ; Segment type: Pure data
.data$r:0000D424 ; Segment permissions: Read/Write
.data$r:0000D424 ; Segment alignment 'qword' can not be represented in assembly
.data$r:0000D424 _data$r         segment para public 'DATA' use32
.data$r:0000D424                 assume cs:_data$r
.data$r:0000D424                 ;org 0D424h
.data$r:0000D424 ; COMDAT (pick any)
.data$r:0000D424                 public ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
.data$r:0000D424 ; class std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>> `RTTI Type Descriptor'
.data$r:0000D424 ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D424                                         ; DATA XREF: .rdata$r:0000D41Co
.data$r:0000D424                                         ; .rdata$r:std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D424                                         ; const type_info::`vftable'
.data$r:0000D428                 db    0
.data$r:0000D429                 db    0
.data$r:0000D42A                 db    0
.data$r:0000D42B                 db    0
.data$r:0000D42C                 db  2Eh ; .
.data$r:0000D42D                 db  3Fh ; ?
.data$r:0000D42E                 db  41h ; A
.data$r:0000D42F                 db  56h ; V
.data$r:0000D430                 db  3Fh ; ?
.data$r:0000D431                 db  24h ; $
.data$r:0000D432                 db  62h ; b
.data$r:0000D433                 db  61h ; a
.data$r:0000D434                 db  73h ; s
.data$r:0000D435                 db  69h ; i
.data$r:0000D436                 db  63h ; c
.data$r:0000D437                 db  5Fh ; _
.data$r:0000D438                 db  6Fh ; o
.data$r:0000D439                 db  73h ; s
.data$r:0000D43A                 db  74h ; t
.data$r:0000D43B                 db  72h ; r
.data$r:0000D43C                 db  69h ; i
.data$r:0000D43D                 db  6Eh ; n
.data$r:0000D43E                 db  67h ; g
.data$r:0000D43F                 db  73h ; s
.data$r:0000D440                 db  74h ; t
.data$r:0000D441                 db  72h ; r
.data$r:0000D442                 db  65h ; e
.data$r:0000D443                 db  61h ; a
.data$r:0000D444                 db  6Dh ; m
.data$r:0000D445                 db  40h ; @
.data$r:0000D446                 db  44h ; D
.data$r:0000D447                 db  55h ; U
.data$r:0000D448                 db  3Fh ; ?
.data$r:0000D449                 db  24h ; $
.data$r:0000D44A                 db  63h ; c
.data$r:0000D44B                 db  68h ; h
.data$r:0000D44C                 db  61h ; a
.data$r:0000D44D                 db  72h ; r
.data$r:0000D44E                 db  5Fh ; _
.data$r:0000D44F                 db  74h ; t
.data$r:0000D450                 db  72h ; r
.data$r:0000D451                 db  61h ; a
.data$r:0000D452                 db  69h ; i
.data$r:0000D453                 db  74h ; t
.data$r:0000D454                 db  73h ; s
.data$r:0000D455                 db  40h ; @
.data$r:0000D456                 db  44h ; D
.data$r:0000D457                 db  40h ; @
.data$r:0000D458                 db  73h ; s
.data$r:0000D459                 db  74h ; t
.data$r:0000D45A                 db  64h ; d
.data$r:0000D45B                 db  40h ; @
.data$r:0000D45C                 db  40h ; @
.data$r:0000D45D                 db  56h ; V
.data$r:0000D45E                 db  3Fh ; ?
.data$r:0000D45F                 db  24h ; $
.data$r:0000D460                 db  61h ; a
.data$r:0000D461                 db  6Ch ; l
.data$r:0000D462                 db  6Ch ; l
.data$r:0000D463                 db  6Fh ; o
.data$r:0000D464                 db  63h ; c
.data$r:0000D465                 db  61h ; a
.data$r:0000D466                 db  74h ; t
.data$r:0000D467                 db  6Fh ; o
.data$r:0000D468                 db  72h ; r
.data$r:0000D469                 db  40h ; @
.data$r:0000D46A                 db  44h ; D
.data$r:0000D46B                 db  40h ; @
.data$r:0000D46C                 db  32h ; 2
.data$r:0000D46D                 db  40h ; @
.data$r:0000D46E                 db  40h ; @
.data$r:0000D46F                 db  73h ; s
.data$r:0000D470                 db  74h ; t
.data$r:0000D471                 db  64h ; d
.data$r:0000D472                 db  40h ; @
.data$r:0000D473                 db  40h ; @
.data$r:0000D474                 db    0
.data$r:0000D475                 align 4
.data$r:0000D475 _data$r         ends
.data$r:0000D475
.rdata$r:0000D478 ; ===========================================================================
.rdata$r:0000D478
.rdata$r:0000D478 ; Segment type: Pure data
.rdata$r:0000D478 ; Segment permissions: Read
.rdata$r:0000D478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D478                 assume cs:_rdata$r
.rdata$r:0000D478                 ;org 0D478h
.rdata$r:0000D478 ; COMDAT (pick any)
.rdata$r:0000D478                 public ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D478 ; std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D478 ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 db    0
.rdata$r:0000D478                                         ; DATA XREF: .rdata$r:0000D420o
.rdata$r:0000D478                                         ; .rdata$r:0000D4B8o
.rdata$r:0000D479                 db    0
.rdata$r:0000D47A                 db    0
.rdata$r:0000D47B                 db    0
.rdata$r:0000D47C                 db    0
.rdata$r:0000D47D                 db    0
.rdata$r:0000D47E                 db    0
.rdata$r:0000D47F                 db    0
.rdata$r:0000D480                 db    5
.rdata$r:0000D481                 db    0
.rdata$r:0000D482                 db    0
.rdata$r:0000D483                 db    0
.rdata$r:0000D484                 dd offset ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'
.rdata$r:0000D484 _rdata$r        ends
.rdata$r:0000D484
.rdata$r:0000D488 ; ===========================================================================
.rdata$r:0000D488
.rdata$r:0000D488 ; Segment type: Pure data
.rdata$r:0000D488 ; Segment permissions: Read
.rdata$r:0000D488 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D488                 assume cs:_rdata$r
.rdata$r:0000D488                 ;org 0D488h
.rdata$r:0000D488 ; COMDAT (pick any)
.rdata$r:0000D488                 public ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D488 ; std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Array'
.rdata$r:0000D488 ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D488                                         ; DATA XREF: .rdata$r:0000D484o
.rdata$r:0000D488                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D48C                 dd offset ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D490                 dd offset ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char>>::`RTTI Base Class Descriptor at (0,0,4,80)'
.rdata$r:0000D494                 dd offset ??_R1A@A@3EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
.rdata$r:0000D498                 dd offset ??_R17A@3EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
.rdata$r:0000D49C                 db    0
.rdata$r:0000D49D                 align 10h
.rdata$r:0000D49D _rdata$r        ends
.rdata$r:0000D49D
.rdata$r:0000D4A0 ; ===========================================================================
.rdata$r:0000D4A0
.rdata$r:0000D4A0 ; Segment type: Pure data
.rdata$r:0000D4A0 ; Segment permissions: Read
.rdata$r:0000D4A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D4A0                 assume cs:_rdata$r
.rdata$r:0000D4A0                 ;org 0D4A0h
.rdata$r:0000D4A0 ; COMDAT (pick any)
.rdata$r:0000D4A0                 public ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
.rdata$r:0000D4A0 ; std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D4A0 ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 dd offset ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
.rdata$r:0000D4A0                                         ; DATA XREF: .rdata$r:std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Base Class Array'o
.rdata$r:0000D4A0                                         ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>> `RTTI Type Descriptor'
.rdata$r:0000D4A4                 db    4
.rdata$r:0000D4A5                 db    0
.rdata$r:0000D4A6                 db    0
.rdata$r:0000D4A7                 db    0
.rdata$r:0000D4A8                 db    0
.rdata$r:0000D4A9                 db    0
.rdata$r:0000D4AA                 db    0
.rdata$r:0000D4AB                 db    0
.rdata$r:0000D4AC                 db 0FFh
.rdata$r:0000D4AD                 db 0FFh
.rdata$r:0000D4AE                 db 0FFh
.rdata$r:0000D4AF                 db 0FFh
.rdata$r:0000D4B0                 db    0
.rdata$r:0000D4B1                 db    0
.rdata$r:0000D4B2                 db    0
.rdata$r:0000D4B3                 db    0
.rdata$r:0000D4B4                 db  40h ; @
.rdata$r:0000D4B5                 db    0
.rdata$r:0000D4B6                 db    0
.rdata$r:0000D4B7                 db    0
.rdata$r:0000D4B8                 dd offset ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D4B8 _rdata$r        ends
.rdata$r:0000D4B8
.rdata$r:0000D4BC ; ===========================================================================
.rdata$r:0000D4BC
.rdata$r:0000D4BC ; Segment type: Pure data
.rdata$r:0000D4BC ; Segment permissions: Read
.rdata$r:0000D4BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D4BC                 assume cs:_rdata$r
.rdata$r:0000D4BC                 ;org 0D4BCh
.rdata$r:0000D4BC ; COMDAT (pick any)
.rdata$r:0000D4BC                 public ??_R4runtime_error@std@@6B@
.rdata$r:0000D4BC ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:0000D4BC ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000C874o
.rdata$r:0000D4BD                 db    0
.rdata$r:0000D4BE                 db    0
.rdata$r:0000D4BF                 db    0
.rdata$r:0000D4C0                 db    0
.rdata$r:0000D4C1                 db    0
.rdata$r:0000D4C2                 db    0
.rdata$r:0000D4C3                 db    0
.rdata$r:0000D4C4                 db    0
.rdata$r:0000D4C5                 db    0
.rdata$r:0000D4C6                 db    0
.rdata$r:0000D4C7                 db    0
.rdata$r:0000D4C8                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000D4CC                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D4CC _rdata$r        ends
.rdata$r:0000D4CC
.rdata$r:0000D4D0 ; ===========================================================================
.rdata$r:0000D4D0
.rdata$r:0000D4D0 ; Segment type: Pure data
.rdata$r:0000D4D0 ; Segment permissions: Read
.rdata$r:0000D4D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D4D0                 assume cs:_rdata$r
.rdata$r:0000D4D0                 ;org 0D4D0h
.rdata$r:0000D4D0 ; COMDAT (pick any)
.rdata$r:0000D4D0                 public ??_R3runtime_error@std@@8
.rdata$r:0000D4D0 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D4D0 ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000D4CCo
.rdata$r:0000D4D0                                         ; .rdata$r:0000D504o
.rdata$r:0000D4D1                 db    0
.rdata$r:0000D4D2                 db    0
.rdata$r:0000D4D3                 db    0
.rdata$r:0000D4D4                 db    0
.rdata$r:0000D4D5                 db    0
.rdata$r:0000D4D6                 db    0
.rdata$r:0000D4D7                 db    0
.rdata$r:0000D4D8                 db    2
.rdata$r:0000D4D9                 db    0
.rdata$r:0000D4DA                 db    0
.rdata$r:0000D4DB                 db    0
.rdata$r:0000D4DC                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000D4DC _rdata$r        ends
.rdata$r:0000D4DC
.rdata$r:0000D4E0 ; ===========================================================================
.rdata$r:0000D4E0
.rdata$r:0000D4E0 ; Segment type: Pure data
.rdata$r:0000D4E0 ; Segment permissions: Read
.rdata$r:0000D4E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D4E0                 assume cs:_rdata$r
.rdata$r:0000D4E0                 ;org 0D4E0h
.rdata$r:0000D4E0 ; COMDAT (pick any)
.rdata$r:0000D4E0                 public ??_R2runtime_error@std@@8
.rdata$r:0000D4E0 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000D4E0 ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000D4E0                                         ; DATA XREF: .rdata$r:0000D4DCo
.rdata$r:0000D4E0                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D4E4                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D4E8                 db    0
.rdata$r:0000D4E9                 align 4
.rdata$r:0000D4E9 _rdata$r        ends
.rdata$r:0000D4E9
.rdata$r:0000D4EC ; ===========================================================================
.rdata$r:0000D4EC
.rdata$r:0000D4EC ; Segment type: Pure data
.rdata$r:0000D4EC ; Segment permissions: Read
.rdata$r:0000D4EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D4EC                 assume cs:_rdata$r
.rdata$r:0000D4EC                 ;org 0D4ECh
.rdata$r:0000D4EC ; COMDAT (pick any)
.rdata$r:0000D4EC                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000D4EC ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D4EC ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:0000D4EC                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:0000D4EC                                         ; .rdata$r:0000D750o ...
.rdata$r:0000D4EC                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000D4F0                 db    1
.rdata$r:0000D4F1                 db    0
.rdata$r:0000D4F2                 db    0
.rdata$r:0000D4F3                 db    0
.rdata$r:0000D4F4                 db    0
.rdata$r:0000D4F5                 db    0
.rdata$r:0000D4F6                 db    0
.rdata$r:0000D4F7                 db    0
.rdata$r:0000D4F8                 db 0FFh
.rdata$r:0000D4F9                 db 0FFh
.rdata$r:0000D4FA                 db 0FFh
.rdata$r:0000D4FB                 db 0FFh
.rdata$r:0000D4FC                 db    0
.rdata$r:0000D4FD                 db    0
.rdata$r:0000D4FE                 db    0
.rdata$r:0000D4FF                 db    0
.rdata$r:0000D500                 db  40h ; @
.rdata$r:0000D501                 db    0
.rdata$r:0000D502                 db    0
.rdata$r:0000D503                 db    0
.rdata$r:0000D504                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D504 _rdata$r        ends
.rdata$r:0000D504
.rdata$r:0000D508 ; ===========================================================================
.rdata$r:0000D508
.rdata$r:0000D508 ; Segment type: Pure data
.rdata$r:0000D508 ; Segment permissions: Read
.rdata$r:0000D508 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D508                 assume cs:_rdata$r
.rdata$r:0000D508                 ;org 0D508h
.rdata$r:0000D508 ; COMDAT (pick any)
.rdata$r:0000D508                 public ??_R4_Facet_base@std@@6B@
.rdata$r:0000D508 ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata$r:0000D508 ??_R4_Facet_base@std@@6B@ db    0       ; DATA XREF: .rdata:0000C920o
.rdata$r:0000D509                 db    0
.rdata$r:0000D50A                 db    0
.rdata$r:0000D50B                 db    0
.rdata$r:0000D50C                 db    0
.rdata$r:0000D50D                 db    0
.rdata$r:0000D50E                 db    0
.rdata$r:0000D50F                 db    0
.rdata$r:0000D510                 db    0
.rdata$r:0000D511                 db    0
.rdata$r:0000D512                 db    0
.rdata$r:0000D513                 db    0
.rdata$r:0000D514                 dd offset ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000D518                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D518 _rdata$r        ends
.rdata$r:0000D518
.data$r:0000D51C ; ===========================================================================
.data$r:0000D51C
.data$r:0000D51C ; Segment type: Pure data
.data$r:0000D51C ; Segment permissions: Read/Write
.data$r:0000D51C _data$r         segment dword public 'DATA' use32
.data$r:0000D51C                 assume cs:_data$r
.data$r:0000D51C                 ;org 0D51Ch
.data$r:0000D51C ; COMDAT (pick any)
.data$r:0000D51C                 public ??_R0?AV_Facet_base@std@@@8
.data$r:0000D51C ; class std::_Facet_base `RTTI Type Descriptor'
.data$r:0000D51C ??_R0?AV_Facet_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D51C                                         ; DATA XREF: .rdata$r:0000D514o
.data$r:0000D51C                                         ; .rdata$r:std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D51C                                         ; const type_info::`vftable'
.data$r:0000D520                 db    0
.data$r:0000D521                 db    0
.data$r:0000D522                 db    0
.data$r:0000D523                 db    0
.data$r:0000D524                 db  2Eh ; .
.data$r:0000D525                 db  3Fh ; ?
.data$r:0000D526                 db  41h ; A
.data$r:0000D527                 db  56h ; V
.data$r:0000D528                 db  5Fh ; _
.data$r:0000D529                 db  46h ; F
.data$r:0000D52A                 db  61h ; a
.data$r:0000D52B                 db  63h ; c
.data$r:0000D52C                 db  65h ; e
.data$r:0000D52D                 db  74h ; t
.data$r:0000D52E                 db  5Fh ; _
.data$r:0000D52F                 db  62h ; b
.data$r:0000D530                 db  61h ; a
.data$r:0000D531                 db  73h ; s
.data$r:0000D532                 db  65h ; e
.data$r:0000D533                 db  40h ; @
.data$r:0000D534                 db  73h ; s
.data$r:0000D535                 db  74h ; t
.data$r:0000D536                 db  64h ; d
.data$r:0000D537                 db  40h ; @
.data$r:0000D538                 db  40h ; @
.data$r:0000D539                 db    0
.data$r:0000D53A                 align 4
.data$r:0000D53A _data$r         ends
.data$r:0000D53A
.rdata$r:0000D53C ; ===========================================================================
.rdata$r:0000D53C
.rdata$r:0000D53C ; Segment type: Pure data
.rdata$r:0000D53C ; Segment permissions: Read
.rdata$r:0000D53C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D53C                 assume cs:_rdata$r
.rdata$r:0000D53C                 ;org 0D53Ch
.rdata$r:0000D53C ; COMDAT (pick any)
.rdata$r:0000D53C                 public ??_R3_Facet_base@std@@8
.rdata$r:0000D53C ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D53C ??_R3_Facet_base@std@@8 db    0         ; DATA XREF: .rdata$r:0000D518o
.rdata$r:0000D53C                                         ; .rdata$r:0000D56Co
.rdata$r:0000D53D                 db    0
.rdata$r:0000D53E                 db    0
.rdata$r:0000D53F                 db    0
.rdata$r:0000D540                 db    0
.rdata$r:0000D541                 db    0
.rdata$r:0000D542                 db    0
.rdata$r:0000D543                 db    0
.rdata$r:0000D544                 db    1
.rdata$r:0000D545                 db    0
.rdata$r:0000D546                 db    0
.rdata$r:0000D547                 db    0
.rdata$r:0000D548                 dd offset ??_R2_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000D548 _rdata$r        ends
.rdata$r:0000D548
.rdata$r:0000D54C ; ===========================================================================
.rdata$r:0000D54C
.rdata$r:0000D54C ; Segment type: Pure data
.rdata$r:0000D54C ; Segment permissions: Read
.rdata$r:0000D54C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D54C                 assume cs:_rdata$r
.rdata$r:0000D54C                 ;org 0D54Ch
.rdata$r:0000D54C ; COMDAT (pick any)
.rdata$r:0000D54C                 public ??_R2_Facet_base@std@@8
.rdata$r:0000D54C ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000D54C ??_R2_Facet_base@std@@8 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000D54C                                         ; DATA XREF: .rdata$r:0000D548o
.rdata$r:0000D54C                                         ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D550                 db    0
.rdata$r:0000D551                 align 4
.rdata$r:0000D551 _rdata$r        ends
.rdata$r:0000D551
.rdata$r:0000D554 ; ===========================================================================
.rdata$r:0000D554
.rdata$r:0000D554 ; Segment type: Pure data
.rdata$r:0000D554 ; Segment permissions: Read
.rdata$r:0000D554 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D554                 assume cs:_rdata$r
.rdata$r:0000D554                 ;org 0D554h
.rdata$r:0000D554 ; COMDAT (pick any)
.rdata$r:0000D554                 public ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000D554 ; std::_Facet_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D554 ??_R1A@?0A@EA@_Facet_base@std@@8 dd offset ??_R0?AV_Facet_base@std@@@8
.rdata$r:0000D554                                         ; DATA XREF: .rdata$r:std::_Facet_base::`RTTI Base Class Array'o
.rdata$r:0000D554                                         ; .rdata$r:0000D5C0o ...
.rdata$r:0000D554                                         ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000D558                 align 10h
.rdata$r:0000D560                 db 0FFh
.rdata$r:0000D561                 db 0FFh
.rdata$r:0000D562                 db 0FFh
.rdata$r:0000D563                 db 0FFh
.rdata$r:0000D564                 db    0
.rdata$r:0000D565                 db    0
.rdata$r:0000D566                 db    0
.rdata$r:0000D567                 db    0
.rdata$r:0000D568                 db  40h ; @
.rdata$r:0000D569                 db    0
.rdata$r:0000D56A                 db    0
.rdata$r:0000D56B                 db    0
.rdata$r:0000D56C                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D56C _rdata$r        ends
.rdata$r:0000D56C
.rdata$r:0000D570 ; ===========================================================================
.rdata$r:0000D570
.rdata$r:0000D570 ; Segment type: Pure data
.rdata$r:0000D570 ; Segment permissions: Read
.rdata$r:0000D570 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D570                 assume cs:_rdata$r
.rdata$r:0000D570                 ;org 0D570h
.rdata$r:0000D570 ; COMDAT (pick any)
.rdata$r:0000D570                 public ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000D570 ; std::locale::facet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D570 ??_R1A@?0A@EA@facet@locale@std@@8 dd offset ??_R0?AVfacet@locale@std@@@8
.rdata$r:0000D570                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Array'o
.rdata$r:0000D570                                         ; .rdata$r:0000D624o ...
.rdata$r:0000D570                                         ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000D574                 db    1
.rdata$r:0000D575                 db    0
.rdata$r:0000D576                 db    0
.rdata$r:0000D577                 db    0
.rdata$r:0000D578                 db    0
.rdata$r:0000D579                 db    0
.rdata$r:0000D57A                 db    0
.rdata$r:0000D57B                 db    0
.rdata$r:0000D57C                 db 0FFh
.rdata$r:0000D57D                 db 0FFh
.rdata$r:0000D57E                 db 0FFh
.rdata$r:0000D57F                 db 0FFh
.rdata$r:0000D580                 db    0
.rdata$r:0000D581                 db    0
.rdata$r:0000D582                 db    0
.rdata$r:0000D583                 db    0
.rdata$r:0000D584                 db  40h ; @
.rdata$r:0000D585                 db    0
.rdata$r:0000D586                 db    0
.rdata$r:0000D587                 db    0
.rdata$r:0000D588                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D588 _rdata$r        ends
.rdata$r:0000D588
.data$r:0000D58C ; ===========================================================================
.data$r:0000D58C
.data$r:0000D58C ; Segment type: Pure data
.data$r:0000D58C ; Segment permissions: Read/Write
.data$r:0000D58C _data$r         segment dword public 'DATA' use32
.data$r:0000D58C                 assume cs:_data$r
.data$r:0000D58C                 ;org 0D58Ch
.data$r:0000D58C ; COMDAT (pick any)
.data$r:0000D58C                 public ??_R0?AVfacet@locale@std@@@8
.data$r:0000D58C ; class std::locale::facet `RTTI Type Descriptor'
.data$r:0000D58C ??_R0?AVfacet@locale@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D58C                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D58C                                         ; .rdata$r:0000D5D4o
.data$r:0000D58C                                         ; const type_info::`vftable'
.data$r:0000D590                 db    0
.data$r:0000D591                 db    0
.data$r:0000D592                 db    0
.data$r:0000D593                 db    0
.data$r:0000D594                 db  2Eh ; .
.data$r:0000D595                 db  3Fh ; ?
.data$r:0000D596                 db  41h ; A
.data$r:0000D597                 db  56h ; V
.data$r:0000D598                 db  66h ; f
.data$r:0000D599                 db  61h ; a
.data$r:0000D59A                 db  63h ; c
.data$r:0000D59B                 db  65h ; e
.data$r:0000D59C                 db  74h ; t
.data$r:0000D59D                 db  40h ; @
.data$r:0000D59E                 db  6Ch ; l
.data$r:0000D59F                 db  6Fh ; o
.data$r:0000D5A0                 db  63h ; c
.data$r:0000D5A1                 db  61h ; a
.data$r:0000D5A2                 db  6Ch ; l
.data$r:0000D5A3                 db  65h ; e
.data$r:0000D5A4                 db  40h ; @
.data$r:0000D5A5                 db  73h ; s
.data$r:0000D5A6                 db  74h ; t
.data$r:0000D5A7                 db  64h ; d
.data$r:0000D5A8                 db  40h ; @
.data$r:0000D5A9                 db  40h ; @
.data$r:0000D5AA                 db    0
.data$r:0000D5AB                 align 4
.data$r:0000D5AB _data$r         ends
.data$r:0000D5AB
.rdata$r:0000D5AC ; ===========================================================================
.rdata$r:0000D5AC
.rdata$r:0000D5AC ; Segment type: Pure data
.rdata$r:0000D5AC ; Segment permissions: Read
.rdata$r:0000D5AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D5AC                 assume cs:_rdata$r
.rdata$r:0000D5AC                 ;org 0D5ACh
.rdata$r:0000D5AC ; COMDAT (pick any)
.rdata$r:0000D5AC                 public ??_R3facet@locale@std@@8
.rdata$r:0000D5AC ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D5AC ??_R3facet@locale@std@@8 db    0        ; DATA XREF: .rdata$r:0000D588o
.rdata$r:0000D5AC                                         ; .rdata$r:0000D5D8o
.rdata$r:0000D5AD                 db    0
.rdata$r:0000D5AE                 db    0
.rdata$r:0000D5AF                 db    0
.rdata$r:0000D5B0                 db    0
.rdata$r:0000D5B1                 db    0
.rdata$r:0000D5B2                 db    0
.rdata$r:0000D5B3                 db    0
.rdata$r:0000D5B4                 db    2
.rdata$r:0000D5B5                 db    0
.rdata$r:0000D5B6                 db    0
.rdata$r:0000D5B7                 db    0
.rdata$r:0000D5B8                 dd offset ??_R2facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000D5B8 _rdata$r        ends
.rdata$r:0000D5B8
.rdata$r:0000D5BC ; ===========================================================================
.rdata$r:0000D5BC
.rdata$r:0000D5BC ; Segment type: Pure data
.rdata$r:0000D5BC ; Segment permissions: Read
.rdata$r:0000D5BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D5BC                 assume cs:_rdata$r
.rdata$r:0000D5BC                 ;org 0D5BCh
.rdata$r:0000D5BC ; COMDAT (pick any)
.rdata$r:0000D5BC                 public ??_R2facet@locale@std@@8
.rdata$r:0000D5BC ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000D5BC ??_R2facet@locale@std@@8 dd offset ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000D5BC                                         ; DATA XREF: .rdata$r:0000D5B8o
.rdata$r:0000D5BC                                         ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D5C0                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D5C4                 db    0
.rdata$r:0000D5C5                 align 4
.rdata$r:0000D5C5 _rdata$r        ends
.rdata$r:0000D5C5
.rdata$r:0000D5C8 ; ===========================================================================
.rdata$r:0000D5C8
.rdata$r:0000D5C8 ; Segment type: Pure data
.rdata$r:0000D5C8 ; Segment permissions: Read
.rdata$r:0000D5C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D5C8                 assume cs:_rdata$r
.rdata$r:0000D5C8                 ;org 0D5C8h
.rdata$r:0000D5C8 ; COMDAT (pick any)
.rdata$r:0000D5C8                 public ??_R4facet@locale@std@@6B@
.rdata$r:0000D5C8 ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata$r:0000D5C8 ??_R4facet@locale@std@@6B@ db    0      ; DATA XREF: .rdata:0000C930o
.rdata$r:0000D5C9                 db    0
.rdata$r:0000D5CA                 db    0
.rdata$r:0000D5CB                 db    0
.rdata$r:0000D5CC                 db    0
.rdata$r:0000D5CD                 db    0
.rdata$r:0000D5CE                 db    0
.rdata$r:0000D5CF                 db    0
.rdata$r:0000D5D0                 db    0
.rdata$r:0000D5D1                 db    0
.rdata$r:0000D5D2                 db    0
.rdata$r:0000D5D3                 db    0
.rdata$r:0000D5D4                 dd offset ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000D5D8                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D5D8 _rdata$r        ends
.rdata$r:0000D5D8
.rdata$r:0000D5DC ; ===========================================================================
.rdata$r:0000D5DC
.rdata$r:0000D5DC ; Segment type: Pure data
.rdata$r:0000D5DC ; Segment permissions: Read
.rdata$r:0000D5DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D5DC                 assume cs:_rdata$r
.rdata$r:0000D5DC                 ;org 0D5DCh
.rdata$r:0000D5DC ; COMDAT (pick any)
.rdata$r:0000D5DC                 public ??_R4ctype_base@std@@6B@
.rdata$r:0000D5DC ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata$r:0000D5DC ??_R4ctype_base@std@@6B@ db    0        ; DATA XREF: .rdata:0000CA1Co
.rdata$r:0000D5DD                 db    0
.rdata$r:0000D5DE                 db    0
.rdata$r:0000D5DF                 db    0
.rdata$r:0000D5E0                 db    0
.rdata$r:0000D5E1                 db    0
.rdata$r:0000D5E2                 db    0
.rdata$r:0000D5E3                 db    0
.rdata$r:0000D5E4                 db    0
.rdata$r:0000D5E5                 db    0
.rdata$r:0000D5E6                 db    0
.rdata$r:0000D5E7                 db    0
.rdata$r:0000D5E8                 dd offset ??_R0?AUctype_base@std@@@8 ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000D5EC                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D5EC _rdata$r        ends
.rdata$r:0000D5EC
.data$r:0000D5F0 ; ===========================================================================
.data$r:0000D5F0
.data$r:0000D5F0 ; Segment type: Pure data
.data$r:0000D5F0 ; Segment permissions: Read/Write
.data$r:0000D5F0 _data$r         segment dword public 'DATA' use32
.data$r:0000D5F0                 assume cs:_data$r
.data$r:0000D5F0                 ;org 0D5F0h
.data$r:0000D5F0 ; COMDAT (pick any)
.data$r:0000D5F0                 public ??_R0?AUctype_base@std@@@8
.data$r:0000D5F0 ; struct std::ctype_base `RTTI Type Descriptor'
.data$r:0000D5F0 ??_R0?AUctype_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D5F0                                         ; DATA XREF: .rdata$r:0000D5E8o
.data$r:0000D5F0                                         ; .rdata$r:std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D5F0                                         ; const type_info::`vftable'
.data$r:0000D5F4                 align 8
.data$r:0000D5F8 a_?auctype_base db '.?AUctype_base@std@@',0
.data$r:0000D60D                 align 10h
.data$r:0000D60D _data$r         ends
.data$r:0000D60D
.rdata$r:0000D610 ; ===========================================================================
.rdata$r:0000D610
.rdata$r:0000D610 ; Segment type: Pure data
.rdata$r:0000D610 ; Segment permissions: Read
.rdata$r:0000D610 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D610                 assume cs:_rdata$r
.rdata$r:0000D610                 ;org 0D610h
.rdata$r:0000D610 ; COMDAT (pick any)
.rdata$r:0000D610                 public ??_R3ctype_base@std@@8
.rdata$r:0000D610 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D610 ??_R3ctype_base@std@@8 db    0          ; DATA XREF: .rdata$r:0000D5ECo
.rdata$r:0000D610                                         ; .rdata$r:0000D648o
.rdata$r:0000D611                 db    0
.rdata$r:0000D612                 db    0
.rdata$r:0000D613                 db    0
.rdata$r:0000D614                 db    0
.rdata$r:0000D615                 db    0
.rdata$r:0000D616                 db    0
.rdata$r:0000D617                 db    0
.rdata$r:0000D618                 db    3
.rdata$r:0000D619                 db    0
.rdata$r:0000D61A                 db    0
.rdata$r:0000D61B                 db    0
.rdata$r:0000D61C                 dd offset ??_R2ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000D61C _rdata$r        ends
.rdata$r:0000D61C
.rdata$r:0000D620 ; ===========================================================================
.rdata$r:0000D620
.rdata$r:0000D620 ; Segment type: Pure data
.rdata$r:0000D620 ; Segment permissions: Read
.rdata$r:0000D620 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D620                 assume cs:_rdata$r
.rdata$r:0000D620                 ;org 0D620h
.rdata$r:0000D620 ; COMDAT (pick any)
.rdata$r:0000D620                 public ??_R2ctype_base@std@@8
.rdata$r:0000D620 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000D620 ??_R2ctype_base@std@@8 dd offset ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000D620                                         ; DATA XREF: .rdata$r:0000D61Co
.rdata$r:0000D620                                         ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D624                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D628                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D62C                 db    0
.rdata$r:0000D62D                 align 10h
.rdata$r:0000D62D _rdata$r        ends
.rdata$r:0000D62D
.rdata$r:0000D630 ; ===========================================================================
.rdata$r:0000D630
.rdata$r:0000D630 ; Segment type: Pure data
.rdata$r:0000D630 ; Segment permissions: Read
.rdata$r:0000D630 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D630                 assume cs:_rdata$r
.rdata$r:0000D630                 ;org 0D630h
.rdata$r:0000D630 ; COMDAT (pick any)
.rdata$r:0000D630                 public ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000D630 ; std::ctype_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D630 ??_R1A@?0A@EA@ctype_base@std@@8 dd offset ??_R0?AUctype_base@std@@@8
.rdata$r:0000D630                                         ; DATA XREF: .rdata$r:std::ctype_base::`RTTI Base Class Array'o
.rdata$r:0000D630                                         ; .rdata$r:0000D690o
.rdata$r:0000D630                                         ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000D634                 db    2
.rdata$r:0000D635                 db    0
.rdata$r:0000D636                 db    0
.rdata$r:0000D637                 db    0
.rdata$r:0000D638                 db    0
.rdata$r:0000D639                 db    0
.rdata$r:0000D63A                 db    0
.rdata$r:0000D63B                 db    0
.rdata$r:0000D63C                 db 0FFh
.rdata$r:0000D63D                 db 0FFh
.rdata$r:0000D63E                 db 0FFh
.rdata$r:0000D63F                 db 0FFh
.rdata$r:0000D640                 db    0
.rdata$r:0000D641                 db    0
.rdata$r:0000D642                 db    0
.rdata$r:0000D643                 db    0
.rdata$r:0000D644                 db  40h ; @
.rdata$r:0000D645                 db    0
.rdata$r:0000D646                 db    0
.rdata$r:0000D647                 db    0
.rdata$r:0000D648                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D648 _rdata$r        ends
.rdata$r:0000D648
.rdata$r:0000D64C ; ===========================================================================
.rdata$r:0000D64C
.rdata$r:0000D64C ; Segment type: Pure data
.rdata$r:0000D64C ; Segment permissions: Read
.rdata$r:0000D64C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D64C                 assume cs:_rdata$r
.rdata$r:0000D64C                 ;org 0D64Ch
.rdata$r:0000D64C ; COMDAT (pick any)
.rdata$r:0000D64C                 public ??_R4?$ctype@D@std@@6B@
.rdata$r:0000D64C ; const std::ctype<char>::`RTTI Complete Object Locator'
.rdata$r:0000D64C ??_R4?$ctype@D@std@@6B@ db    0         ; DATA XREF: .rdata:0000CA2Co
.rdata$r:0000D64D                 db    0
.rdata$r:0000D64E                 db    0
.rdata$r:0000D64F                 db    0
.rdata$r:0000D650                 db    0
.rdata$r:0000D651                 db    0
.rdata$r:0000D652                 db    0
.rdata$r:0000D653                 db    0
.rdata$r:0000D654                 db    0
.rdata$r:0000D655                 db    0
.rdata$r:0000D656                 db    0
.rdata$r:0000D657                 db    0
.rdata$r:0000D658                 dd offset ??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char> `RTTI Type Descriptor'
.rdata$r:0000D65C                 dd offset ??_R3?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D65C _rdata$r        ends
.rdata$r:0000D65C
.data$r:0000D660 ; ===========================================================================
.data$r:0000D660
.data$r:0000D660 ; Segment type: Pure data
.data$r:0000D660 ; Segment permissions: Read/Write
.data$r:0000D660 _data$r         segment dword public 'DATA' use32
.data$r:0000D660                 assume cs:_data$r
.data$r:0000D660                 ;org 0D660h
.data$r:0000D660 ; COMDAT (pick any)
.data$r:0000D660                 public ??_R0?AV?$ctype@D@std@@@8
.data$r:0000D660 ; class std::ctype<char> `RTTI Type Descriptor'
.data$r:0000D660 ??_R0?AV?$ctype@D@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D660                                         ; DATA XREF: .rdata$r:0000D658o
.data$r:0000D660                                         ; .rdata$r:std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D660                                         ; const type_info::`vftable'
.data$r:0000D664                 align 8
.data$r:0000D668 a_?av?Ctype@d@s db '.?AV?$ctype@D@std@@',0
.data$r:0000D668 _data$r         ends
.data$r:0000D668
.rdata$r:0000D67C ; ===========================================================================
.rdata$r:0000D67C
.rdata$r:0000D67C ; Segment type: Pure data
.rdata$r:0000D67C ; Segment permissions: Read
.rdata$r:0000D67C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D67C                 assume cs:_rdata$r
.rdata$r:0000D67C                 ;org 0D67Ch
.rdata$r:0000D67C ; COMDAT (pick any)
.rdata$r:0000D67C                 public ??_R3?$ctype@D@std@@8
.rdata$r:0000D67C ; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D67C ??_R3?$ctype@D@std@@8 db    0           ; DATA XREF: .rdata$r:0000D65Co
.rdata$r:0000D67C                                         ; .rdata$r:0000D6B8o
.rdata$r:0000D67D                 db    0
.rdata$r:0000D67E                 db    0
.rdata$r:0000D67F                 db    0
.rdata$r:0000D680                 db    0
.rdata$r:0000D681                 db    0
.rdata$r:0000D682                 db    0
.rdata$r:0000D683                 db    0
.rdata$r:0000D684                 db    4
.rdata$r:0000D685                 db    0
.rdata$r:0000D686                 db    0
.rdata$r:0000D687                 db    0
.rdata$r:0000D688                 dd offset ??_R2?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
.rdata$r:0000D688 _rdata$r        ends
.rdata$r:0000D688
.rdata$r:0000D68C ; ===========================================================================
.rdata$r:0000D68C
.rdata$r:0000D68C ; Segment type: Pure data
.rdata$r:0000D68C ; Segment permissions: Read
.rdata$r:0000D68C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D68C                 assume cs:_rdata$r
.rdata$r:0000D68C                 ;org 0D68Ch
.rdata$r:0000D68C ; COMDAT (pick any)
.rdata$r:0000D68C                 public ??_R2?$ctype@D@std@@8
.rdata$r:0000D68C ; std::ctype<char>::`RTTI Base Class Array'
.rdata$r:0000D68C ??_R2?$ctype@D@std@@8 dd offset ??_R1A@?0A@EA@?$ctype@D@std@@8
.rdata$r:0000D68C                                         ; DATA XREF: .rdata$r:0000D688o
.rdata$r:0000D68C                                         ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D690                 dd offset ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D694                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D698                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D69C                 db    0
.rdata$r:0000D69D                 align 10h
.rdata$r:0000D69D _rdata$r        ends
.rdata$r:0000D69D
.rdata$r:0000D6A0 ; ===========================================================================
.rdata$r:0000D6A0
.rdata$r:0000D6A0 ; Segment type: Pure data
.rdata$r:0000D6A0 ; Segment permissions: Read
.rdata$r:0000D6A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D6A0                 assume cs:_rdata$r
.rdata$r:0000D6A0                 ;org 0D6A0h
.rdata$r:0000D6A0 ; COMDAT (pick any)
.rdata$r:0000D6A0                 public ??_R1A@?0A@EA@?$ctype@D@std@@8
.rdata$r:0000D6A0 ; std::ctype<char>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D6A0 ??_R1A@?0A@EA@?$ctype@D@std@@8 dd offset ??_R0?AV?$ctype@D@std@@@8
.rdata$r:0000D6A0                                         ; DATA XREF: .rdata$r:std::ctype<char>::`RTTI Base Class Array'o
.rdata$r:0000D6A0                                         ; std::ctype<char> `RTTI Type Descriptor'
.rdata$r:0000D6A4                 db    3
.rdata$r:0000D6A5                 db    0
.rdata$r:0000D6A6                 db    0
.rdata$r:0000D6A7                 db    0
.rdata$r:0000D6A8                 db    0
.rdata$r:0000D6A9                 db    0
.rdata$r:0000D6AA                 db    0
.rdata$r:0000D6AB                 db    0
.rdata$r:0000D6AC                 db 0FFh
.rdata$r:0000D6AD                 db 0FFh
.rdata$r:0000D6AE                 db 0FFh
.rdata$r:0000D6AF                 db 0FFh
.rdata$r:0000D6B0                 db    0
.rdata$r:0000D6B1                 db    0
.rdata$r:0000D6B2                 db    0
.rdata$r:0000D6B3                 db    0
.rdata$r:0000D6B4                 db  40h ; @
.rdata$r:0000D6B5                 db    0
.rdata$r:0000D6B6                 db    0
.rdata$r:0000D6B7                 db    0
.rdata$r:0000D6B8                 dd offset ??_R3?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D6B8 _rdata$r        ends
.rdata$r:0000D6B8
.rdata$r:0000D6BC ; ===========================================================================
.rdata$r:0000D6BC
.rdata$r:0000D6BC ; Segment type: Pure data
.rdata$r:0000D6BC ; Segment permissions: Read
.rdata$r:0000D6BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D6BC                 assume cs:_rdata$r
.rdata$r:0000D6BC                 ;org 0D6BCh
.rdata$r:0000D6BC ; COMDAT (pick any)
.rdata$r:0000D6BC                 public ??_R4error_category@std@@6B@
.rdata$r:0000D6BC ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000D6BC ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000CA5Co
.rdata$r:0000D6BD                 db    0
.rdata$r:0000D6BE                 db    0
.rdata$r:0000D6BF                 db    0
.rdata$r:0000D6C0                 db    0
.rdata$r:0000D6C1                 db    0
.rdata$r:0000D6C2                 db    0
.rdata$r:0000D6C3                 db    0
.rdata$r:0000D6C4                 db    0
.rdata$r:0000D6C5                 db    0
.rdata$r:0000D6C6                 db    0
.rdata$r:0000D6C7                 db    0
.rdata$r:0000D6C8                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000D6CC                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D6CC _rdata$r        ends
.rdata$r:0000D6CC
.data$r:0000D6D0 ; ===========================================================================
.data$r:0000D6D0
.data$r:0000D6D0 ; Segment type: Pure data
.data$r:0000D6D0 ; Segment permissions: Read/Write
.data$r:0000D6D0 _data$r         segment dword public 'DATA' use32
.data$r:0000D6D0                 assume cs:_data$r
.data$r:0000D6D0                 ;org 0D6D0h
.data$r:0000D6D0 ; COMDAT (pick any)
.data$r:0000D6D0                 public ??_R0?AVerror_category@std@@@8
.data$r:0000D6D0 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000D6D0 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D6D0                                         ; DATA XREF: .rdata$r:0000D6C8o
.data$r:0000D6D0                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D6D0                                         ; const type_info::`vftable'
.data$r:0000D6D4                 align 8
.data$r:0000D6D8 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:0000D6F1                 align 4
.data$r:0000D6F1 _data$r         ends
.data$r:0000D6F1
.rdata$r:0000D6F4 ; ===========================================================================
.rdata$r:0000D6F4
.rdata$r:0000D6F4 ; Segment type: Pure data
.rdata$r:0000D6F4 ; Segment permissions: Read
.rdata$r:0000D6F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D6F4                 assume cs:_rdata$r
.rdata$r:0000D6F4                 ;org 0D6F4h
.rdata$r:0000D6F4 ; COMDAT (pick any)
.rdata$r:0000D6F4                 public ??_R3error_category@std@@8
.rdata$r:0000D6F4 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D6F4 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000D6CCo
.rdata$r:0000D6F4                                         ; .rdata$r:0000D724o
.rdata$r:0000D6F5                 db    0
.rdata$r:0000D6F6                 db    0
.rdata$r:0000D6F7                 db    0
.rdata$r:0000D6F8                 db    0
.rdata$r:0000D6F9                 db    0
.rdata$r:0000D6FA                 db    0
.rdata$r:0000D6FB                 db    0
.rdata$r:0000D6FC                 db    1
.rdata$r:0000D6FD                 db    0
.rdata$r:0000D6FE                 db    0
.rdata$r:0000D6FF                 db    0
.rdata$r:0000D700                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000D700 _rdata$r        ends
.rdata$r:0000D700
.rdata$r:0000D704 ; ===========================================================================
.rdata$r:0000D704
.rdata$r:0000D704 ; Segment type: Pure data
.rdata$r:0000D704 ; Segment permissions: Read
.rdata$r:0000D704 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D704                 assume cs:_rdata$r
.rdata$r:0000D704                 ;org 0D704h
.rdata$r:0000D704 ; COMDAT (pick any)
.rdata$r:0000D704                 public ??_R2error_category@std@@8
.rdata$r:0000D704 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000D704 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000D704                                         ; DATA XREF: .rdata$r:0000D700o
.rdata$r:0000D704                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D708                 db    0
.rdata$r:0000D709                 align 4
.rdata$r:0000D709 _rdata$r        ends
.rdata$r:0000D709
.rdata$r:0000D70C ; ===========================================================================
.rdata$r:0000D70C
.rdata$r:0000D70C ; Segment type: Pure data
.rdata$r:0000D70C ; Segment permissions: Read
.rdata$r:0000D70C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D70C                 assume cs:_rdata$r
.rdata$r:0000D70C                 ;org 0D70Ch
.rdata$r:0000D70C ; COMDAT (pick any)
.rdata$r:0000D70C                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000D70C ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D70C ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000D70C                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000D70C                                         ; .rdata$r:0000D820o ...
.rdata$r:0000D70C                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000D710                 db    0
.rdata$r:0000D711                 db    0
.rdata$r:0000D712                 db    0
.rdata$r:0000D713                 db    0
.rdata$r:0000D714                 db    0
.rdata$r:0000D715                 db    0
.rdata$r:0000D716                 db    0
.rdata$r:0000D717                 db    0
.rdata$r:0000D718                 db 0FFh
.rdata$r:0000D719                 db 0FFh
.rdata$r:0000D71A                 db 0FFh
.rdata$r:0000D71B                 db 0FFh
.rdata$r:0000D71C                 db    0
.rdata$r:0000D71D                 db    0
.rdata$r:0000D71E                 db    0
.rdata$r:0000D71F                 db    0
.rdata$r:0000D720                 db  40h ; @
.rdata$r:0000D721                 db    0
.rdata$r:0000D722                 db    0
.rdata$r:0000D723                 db    0
.rdata$r:0000D724                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D724 _rdata$r        ends
.rdata$r:0000D724
.rdata$r:0000D728 ; ===========================================================================
.rdata$r:0000D728
.rdata$r:0000D728 ; Segment type: Pure data
.rdata$r:0000D728 ; Segment permissions: Read
.rdata$r:0000D728 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D728                 assume cs:_rdata$r
.rdata$r:0000D728                 ;org 0D728h
.rdata$r:0000D728 ; COMDAT (pick any)
.rdata$r:0000D728                 public ??_R4_System_error@std@@6B@
.rdata$r:0000D728 ; const std::_System_error::`RTTI Complete Object Locator'
.rdata$r:0000D728 ??_R4_System_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000CA78o
.rdata$r:0000D729                 db    0
.rdata$r:0000D72A                 db    0
.rdata$r:0000D72B                 db    0
.rdata$r:0000D72C                 db    0
.rdata$r:0000D72D                 db    0
.rdata$r:0000D72E                 db    0
.rdata$r:0000D72F                 db    0
.rdata$r:0000D730                 db    0
.rdata$r:0000D731                 db    0
.rdata$r:0000D732                 db    0
.rdata$r:0000D733                 db    0
.rdata$r:0000D734                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000D738                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D738 _rdata$r        ends
.rdata$r:0000D738
.rdata$r:0000D73C ; ===========================================================================
.rdata$r:0000D73C
.rdata$r:0000D73C ; Segment type: Pure data
.rdata$r:0000D73C ; Segment permissions: Read
.rdata$r:0000D73C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D73C                 assume cs:_rdata$r
.rdata$r:0000D73C                 ;org 0D73Ch
.rdata$r:0000D73C ; COMDAT (pick any)
.rdata$r:0000D73C                 public ??_R3_System_error@std@@8
.rdata$r:0000D73C ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D73C ??_R3_System_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000D738o
.rdata$r:0000D73C                                         ; .rdata$r:0000D774o
.rdata$r:0000D73D                 db    0
.rdata$r:0000D73E                 db    0
.rdata$r:0000D73F                 db    0
.rdata$r:0000D740                 db    0
.rdata$r:0000D741                 db    0
.rdata$r:0000D742                 db    0
.rdata$r:0000D743                 db    0
.rdata$r:0000D744                 db    3
.rdata$r:0000D745                 db    0
.rdata$r:0000D746                 db    0
.rdata$r:0000D747                 db    0
.rdata$r:0000D748                 dd offset ??_R2_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000D748 _rdata$r        ends
.rdata$r:0000D748
.rdata$r:0000D74C ; ===========================================================================
.rdata$r:0000D74C
.rdata$r:0000D74C ; Segment type: Pure data
.rdata$r:0000D74C ; Segment permissions: Read
.rdata$r:0000D74C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D74C                 assume cs:_rdata$r
.rdata$r:0000D74C                 ;org 0D74Ch
.rdata$r:0000D74C ; COMDAT (pick any)
.rdata$r:0000D74C                 public ??_R2_System_error@std@@8
.rdata$r:0000D74C ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000D74C ??_R2_System_error@std@@8 dd offset ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000D74C                                         ; DATA XREF: .rdata$r:0000D748o
.rdata$r:0000D74C                                         ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D750                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D754                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D758                 db    0
.rdata$r:0000D759                 align 4
.rdata$r:0000D759 _rdata$r        ends
.rdata$r:0000D759
.rdata$r:0000D75C ; ===========================================================================
.rdata$r:0000D75C
.rdata$r:0000D75C ; Segment type: Pure data
.rdata$r:0000D75C ; Segment permissions: Read
.rdata$r:0000D75C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D75C                 assume cs:_rdata$r
.rdata$r:0000D75C                 ;org 0D75Ch
.rdata$r:0000D75C ; COMDAT (pick any)
.rdata$r:0000D75C                 public ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000D75C ; std::_System_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D75C ??_R1A@?0A@EA@_System_error@std@@8 dd offset ??_R0?AV_System_error@std@@@8
.rdata$r:0000D75C                                         ; DATA XREF: .rdata$r:std::_System_error::`RTTI Base Class Array'o
.rdata$r:0000D75C                                         ; .rdata$r:0000D7A0o ...
.rdata$r:0000D75C                                         ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000D760                 db    2
.rdata$r:0000D761                 db    0
.rdata$r:0000D762                 db    0
.rdata$r:0000D763                 db    0
.rdata$r:0000D764                 db    0
.rdata$r:0000D765                 db    0
.rdata$r:0000D766                 db    0
.rdata$r:0000D767                 db    0
.rdata$r:0000D768                 db 0FFh
.rdata$r:0000D769                 db 0FFh
.rdata$r:0000D76A                 db 0FFh
.rdata$r:0000D76B                 db 0FFh
.rdata$r:0000D76C                 db    0
.rdata$r:0000D76D                 db    0
.rdata$r:0000D76E                 db    0
.rdata$r:0000D76F                 db    0
.rdata$r:0000D770                 db  40h ; @
.rdata$r:0000D771                 db    0
.rdata$r:0000D772                 db    0
.rdata$r:0000D773                 db    0
.rdata$r:0000D774                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D774 _rdata$r        ends
.rdata$r:0000D774
.rdata$r:0000D778 ; ===========================================================================
.rdata$r:0000D778
.rdata$r:0000D778 ; Segment type: Pure data
.rdata$r:0000D778 ; Segment permissions: Read
.rdata$r:0000D778 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D778                 assume cs:_rdata$r
.rdata$r:0000D778                 ;org 0D778h
.rdata$r:0000D778 ; COMDAT (pick any)
.rdata$r:0000D778                 public ??_R4system_error@std@@6B@
.rdata$r:0000D778 ; const std::system_error::`RTTI Complete Object Locator'
.rdata$r:0000D778 ??_R4system_error@std@@6B@ db    0      ; DATA XREF: .rdata:0000CA88o
.rdata$r:0000D779                 db    0
.rdata$r:0000D77A                 db    0
.rdata$r:0000D77B                 db    0
.rdata$r:0000D77C                 db    0
.rdata$r:0000D77D                 db    0
.rdata$r:0000D77E                 db    0
.rdata$r:0000D77F                 db    0
.rdata$r:0000D780                 db    0
.rdata$r:0000D781                 db    0
.rdata$r:0000D782                 db    0
.rdata$r:0000D783                 db    0
.rdata$r:0000D784                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000D788                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D788 _rdata$r        ends
.rdata$r:0000D788
.rdata$r:0000D78C ; ===========================================================================
.rdata$r:0000D78C
.rdata$r:0000D78C ; Segment type: Pure data
.rdata$r:0000D78C ; Segment permissions: Read
.rdata$r:0000D78C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D78C                 assume cs:_rdata$r
.rdata$r:0000D78C                 ;org 0D78Ch
.rdata$r:0000D78C ; COMDAT (pick any)
.rdata$r:0000D78C                 public ??_R3system_error@std@@8
.rdata$r:0000D78C ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D78C ??_R3system_error@std@@8 db    0        ; DATA XREF: .rdata$r:0000D788o
.rdata$r:0000D78C                                         ; .rdata$r:0000D7C8o
.rdata$r:0000D78D                 db    0
.rdata$r:0000D78E                 db    0
.rdata$r:0000D78F                 db    0
.rdata$r:0000D790                 db    0
.rdata$r:0000D791                 db    0
.rdata$r:0000D792                 db    0
.rdata$r:0000D793                 db    0
.rdata$r:0000D794                 db    4
.rdata$r:0000D795                 db    0
.rdata$r:0000D796                 db    0
.rdata$r:0000D797                 db    0
.rdata$r:0000D798                 dd offset ??_R2system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000D798 _rdata$r        ends
.rdata$r:0000D798
.rdata$r:0000D79C ; ===========================================================================
.rdata$r:0000D79C
.rdata$r:0000D79C ; Segment type: Pure data
.rdata$r:0000D79C ; Segment permissions: Read
.rdata$r:0000D79C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D79C                 assume cs:_rdata$r
.rdata$r:0000D79C                 ;org 0D79Ch
.rdata$r:0000D79C ; COMDAT (pick any)
.rdata$r:0000D79C                 public ??_R2system_error@std@@8
.rdata$r:0000D79C ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000D79C ??_R2system_error@std@@8 dd offset ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000D79C                                         ; DATA XREF: .rdata$r:0000D798o
.rdata$r:0000D79C                                         ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D7A0                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D7A4                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D7A8                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D7AC                 db    0
.rdata$r:0000D7AD                 align 10h
.rdata$r:0000D7AD _rdata$r        ends
.rdata$r:0000D7AD
.rdata$r:0000D7B0 ; ===========================================================================
.rdata$r:0000D7B0
.rdata$r:0000D7B0 ; Segment type: Pure data
.rdata$r:0000D7B0 ; Segment permissions: Read
.rdata$r:0000D7B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D7B0                 assume cs:_rdata$r
.rdata$r:0000D7B0                 ;org 0D7B0h
.rdata$r:0000D7B0 ; COMDAT (pick any)
.rdata$r:0000D7B0                 public ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000D7B0 ; std::system_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D7B0 ??_R1A@?0A@EA@system_error@std@@8 dd offset ??_R0?AVsystem_error@std@@@8
.rdata$r:0000D7B0                                         ; DATA XREF: .rdata$r:std::system_error::`RTTI Base Class Array'o
.rdata$r:0000D7B0                                         ; .rdata$r:0000D964o
.rdata$r:0000D7B0                                         ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000D7B4                 db    3
.rdata$r:0000D7B5                 db    0
.rdata$r:0000D7B6                 db    0
.rdata$r:0000D7B7                 db    0
.rdata$r:0000D7B8                 db    0
.rdata$r:0000D7B9                 db    0
.rdata$r:0000D7BA                 db    0
.rdata$r:0000D7BB                 db    0
.rdata$r:0000D7BC                 db 0FFh
.rdata$r:0000D7BD                 db 0FFh
.rdata$r:0000D7BE                 db 0FFh
.rdata$r:0000D7BF                 db 0FFh
.rdata$r:0000D7C0                 db    0
.rdata$r:0000D7C1                 db    0
.rdata$r:0000D7C2                 db    0
.rdata$r:0000D7C3                 db    0
.rdata$r:0000D7C4                 db  40h ; @
.rdata$r:0000D7C5                 db    0
.rdata$r:0000D7C6                 db    0
.rdata$r:0000D7C7                 db    0
.rdata$r:0000D7C8                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D7C8 _rdata$r        ends
.rdata$r:0000D7C8
.rdata$r:0000D7CC ; ===========================================================================
.rdata$r:0000D7CC
.rdata$r:0000D7CC ; Segment type: Pure data
.rdata$r:0000D7CC ; Segment permissions: Read
.rdata$r:0000D7CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D7CC                 assume cs:_rdata$r
.rdata$r:0000D7CC                 ;org 0D7CCh
.rdata$r:0000D7CC ; COMDAT (pick any)
.rdata$r:0000D7CC                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000D7CC ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000D7CC ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000D7CC                                         ; DATA XREF: .rdata:0000CA94o
.rdata$r:0000D7CD                 db    0
.rdata$r:0000D7CE                 db    0
.rdata$r:0000D7CF                 db    0
.rdata$r:0000D7D0                 db    0
.rdata$r:0000D7D1                 db    0
.rdata$r:0000D7D2                 db    0
.rdata$r:0000D7D3                 db    0
.rdata$r:0000D7D4                 db    0
.rdata$r:0000D7D5                 db    0
.rdata$r:0000D7D6                 db    0
.rdata$r:0000D7D7                 db    0
.rdata$r:0000D7D8                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000D7DC                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D7DC _rdata$r        ends
.rdata$r:0000D7DC
.data$r:0000D7E0 ; ===========================================================================
.data$r:0000D7E0
.data$r:0000D7E0 ; Segment type: Pure data
.data$r:0000D7E0 ; Segment permissions: Read/Write
.data$r:0000D7E0 _data$r         segment dword public 'DATA' use32
.data$r:0000D7E0                 assume cs:_data$r
.data$r:0000D7E0                 ;org 0D7E0h
.data$r:0000D7E0 ; COMDAT (pick any)
.data$r:0000D7E0                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000D7E0 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000D7E0 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D7E0                                         ; DATA XREF: .rdata$r:0000D7D8o
.data$r:0000D7E0                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D7E0                                         ; const type_info::`vftable'
.data$r:0000D7E4                 align 8
.data$r:0000D7E8 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:0000D80A                 align 4
.data$r:0000D80A _data$r         ends
.data$r:0000D80A
.rdata$r:0000D80C ; ===========================================================================
.rdata$r:0000D80C
.rdata$r:0000D80C ; Segment type: Pure data
.rdata$r:0000D80C ; Segment permissions: Read
.rdata$r:0000D80C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D80C                 assume cs:_rdata$r
.rdata$r:0000D80C                 ;org 0D80Ch
.rdata$r:0000D80C ; COMDAT (pick any)
.rdata$r:0000D80C                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000D80C ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D80C ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000D80C                                         ; DATA XREF: .rdata$r:0000D7DCo
.rdata$r:0000D80C                                         ; .rdata$r:0000D840o
.rdata$r:0000D80D                 db    0
.rdata$r:0000D80E                 db    0
.rdata$r:0000D80F                 db    0
.rdata$r:0000D810                 db    0
.rdata$r:0000D811                 db    0
.rdata$r:0000D812                 db    0
.rdata$r:0000D813                 db    0
.rdata$r:0000D814                 db    2
.rdata$r:0000D815                 db    0
.rdata$r:0000D816                 db    0
.rdata$r:0000D817                 db    0
.rdata$r:0000D818                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000D818 _rdata$r        ends
.rdata$r:0000D818
.rdata$r:0000D81C ; ===========================================================================
.rdata$r:0000D81C
.rdata$r:0000D81C ; Segment type: Pure data
.rdata$r:0000D81C ; Segment permissions: Read
.rdata$r:0000D81C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D81C                 assume cs:_rdata$r
.rdata$r:0000D81C                 ;org 0D81Ch
.rdata$r:0000D81C ; COMDAT (pick any)
.rdata$r:0000D81C                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000D81C ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000D81C ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000D81C                                         ; DATA XREF: .rdata$r:0000D818o
.rdata$r:0000D81C                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D820                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D824                 db    0
.rdata$r:0000D825                 align 4
.rdata$r:0000D825 _rdata$r        ends
.rdata$r:0000D825
.rdata$r:0000D828 ; ===========================================================================
.rdata$r:0000D828
.rdata$r:0000D828 ; Segment type: Pure data
.rdata$r:0000D828 ; Segment permissions: Read
.rdata$r:0000D828 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D828                 assume cs:_rdata$r
.rdata$r:0000D828                 ;org 0D828h
.rdata$r:0000D828 ; COMDAT (pick any)
.rdata$r:0000D828                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000D828 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D828 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000D828                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000D828                                         ; .rdata$r:0000D898o ...
.rdata$r:0000D828                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000D82C                 db    1
.rdata$r:0000D82D                 db    0
.rdata$r:0000D82E                 db    0
.rdata$r:0000D82F                 db    0
.rdata$r:0000D830                 db    0
.rdata$r:0000D831                 db    0
.rdata$r:0000D832                 db    0
.rdata$r:0000D833                 db    0
.rdata$r:0000D834                 db 0FFh
.rdata$r:0000D835                 db 0FFh
.rdata$r:0000D836                 db 0FFh
.rdata$r:0000D837                 db 0FFh
.rdata$r:0000D838                 db    0
.rdata$r:0000D839                 db    0
.rdata$r:0000D83A                 db    0
.rdata$r:0000D83B                 db    0
.rdata$r:0000D83C                 db  40h ; @
.rdata$r:0000D83D                 db    0
.rdata$r:0000D83E                 db    0
.rdata$r:0000D83F                 db    0
.rdata$r:0000D840                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D840 _rdata$r        ends
.rdata$r:0000D840
.rdata$r:0000D844 ; ===========================================================================
.rdata$r:0000D844
.rdata$r:0000D844 ; Segment type: Pure data
.rdata$r:0000D844 ; Segment permissions: Read
.rdata$r:0000D844 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D844                 assume cs:_rdata$r
.rdata$r:0000D844                 ;org 0D844h
.rdata$r:0000D844 ; COMDAT (pick any)
.rdata$r:0000D844                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000D844 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000D844 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000D844                                         ; DATA XREF: .rdata:0000CAC8o
.rdata$r:0000D845                 db    0
.rdata$r:0000D846                 db    0
.rdata$r:0000D847                 db    0
.rdata$r:0000D848                 db    0
.rdata$r:0000D849                 db    0
.rdata$r:0000D84A                 db    0
.rdata$r:0000D84B                 db    0
.rdata$r:0000D84C                 db    0
.rdata$r:0000D84D                 db    0
.rdata$r:0000D84E                 db    0
.rdata$r:0000D84F                 db    0
.rdata$r:0000D850                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000D854                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D854 _rdata$r        ends
.rdata$r:0000D854
.data$r:0000D858 ; ===========================================================================
.data$r:0000D858
.data$r:0000D858 ; Segment type: Pure data
.data$r:0000D858 ; Segment permissions: Read/Write
.data$r:0000D858 _data$r         segment dword public 'DATA' use32
.data$r:0000D858                 assume cs:_data$r
.data$r:0000D858                 ;org 0D858h
.data$r:0000D858 ; COMDAT (pick any)
.data$r:0000D858                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000D858 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000D858 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D858                                         ; DATA XREF: .rdata$r:0000D850o
.data$r:0000D858                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D858                                         ; const type_info::`vftable'
.data$r:0000D85C                 align 10h
.data$r:0000D860 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:0000D883                 align 4
.data$r:0000D883 _data$r         ends
.data$r:0000D883
.rdata$r:0000D884 ; ===========================================================================
.rdata$r:0000D884
.rdata$r:0000D884 ; Segment type: Pure data
.rdata$r:0000D884 ; Segment permissions: Read
.rdata$r:0000D884 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D884                 assume cs:_rdata$r
.rdata$r:0000D884                 ;org 0D884h
.rdata$r:0000D884 ; COMDAT (pick any)
.rdata$r:0000D884                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000D884 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D884 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000D884                                         ; DATA XREF: .rdata$r:0000D854o
.rdata$r:0000D884                                         ; .rdata$r:0000D8BCo
.rdata$r:0000D885                 db    0
.rdata$r:0000D886                 db    0
.rdata$r:0000D887                 db    0
.rdata$r:0000D888                 db    0
.rdata$r:0000D889                 db    0
.rdata$r:0000D88A                 db    0
.rdata$r:0000D88B                 db    0
.rdata$r:0000D88C                 db    3
.rdata$r:0000D88D                 db    0
.rdata$r:0000D88E                 db    0
.rdata$r:0000D88F                 db    0
.rdata$r:0000D890                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000D890 _rdata$r        ends
.rdata$r:0000D890
.rdata$r:0000D894 ; ===========================================================================
.rdata$r:0000D894
.rdata$r:0000D894 ; Segment type: Pure data
.rdata$r:0000D894 ; Segment permissions: Read
.rdata$r:0000D894 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D894                 assume cs:_rdata$r
.rdata$r:0000D894                 ;org 0D894h
.rdata$r:0000D894 ; COMDAT (pick any)
.rdata$r:0000D894                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000D894 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000D894 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000D894                                         ; DATA XREF: .rdata$r:0000D890o
.rdata$r:0000D894                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D898                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D89C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D8A0                 db    0
.rdata$r:0000D8A1                 align 4
.rdata$r:0000D8A1 _rdata$r        ends
.rdata$r:0000D8A1
.rdata$r:0000D8A4 ; ===========================================================================
.rdata$r:0000D8A4
.rdata$r:0000D8A4 ; Segment type: Pure data
.rdata$r:0000D8A4 ; Segment permissions: Read
.rdata$r:0000D8A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D8A4                 assume cs:_rdata$r
.rdata$r:0000D8A4                 ;org 0D8A4h
.rdata$r:0000D8A4 ; COMDAT (pick any)
.rdata$r:0000D8A4                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000D8A4 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D8A4 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000D8A4                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000D8A4                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000D8A8                 db    2
.rdata$r:0000D8A9                 db    0
.rdata$r:0000D8AA                 db    0
.rdata$r:0000D8AB                 db    0
.rdata$r:0000D8AC                 db    0
.rdata$r:0000D8AD                 db    0
.rdata$r:0000D8AE                 db    0
.rdata$r:0000D8AF                 db    0
.rdata$r:0000D8B0                 db 0FFh
.rdata$r:0000D8B1                 db 0FFh
.rdata$r:0000D8B2                 db 0FFh
.rdata$r:0000D8B3                 db 0FFh
.rdata$r:0000D8B4                 db    0
.rdata$r:0000D8B5                 db    0
.rdata$r:0000D8B6                 db    0
.rdata$r:0000D8B7                 db    0
.rdata$r:0000D8B8                 db  40h ; @
.rdata$r:0000D8B9                 db    0
.rdata$r:0000D8BA                 db    0
.rdata$r:0000D8BB                 db    0
.rdata$r:0000D8BC                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D8BC _rdata$r        ends
.rdata$r:0000D8BC
.rdata$r:0000D8C0 ; ===========================================================================
.rdata$r:0000D8C0
.rdata$r:0000D8C0 ; Segment type: Pure data
.rdata$r:0000D8C0 ; Segment permissions: Read
.rdata$r:0000D8C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D8C0                 assume cs:_rdata$r
.rdata$r:0000D8C0                 ;org 0D8C0h
.rdata$r:0000D8C0 ; COMDAT (pick any)
.rdata$r:0000D8C0                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000D8C0 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000D8C0 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000CB08o
.rdata$r:0000D8C1                 db    0
.rdata$r:0000D8C2                 db    0
.rdata$r:0000D8C3                 db    0
.rdata$r:0000D8C4                 db    0
.rdata$r:0000D8C5                 db    0
.rdata$r:0000D8C6                 db    0
.rdata$r:0000D8C7                 db    0
.rdata$r:0000D8C8                 db    0
.rdata$r:0000D8C9                 db    0
.rdata$r:0000D8CA                 db    0
.rdata$r:0000D8CB                 db    0
.rdata$r:0000D8CC                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000D8D0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D8D0 _rdata$r        ends
.rdata$r:0000D8D0
.data$r:0000D8D4 ; ===========================================================================
.data$r:0000D8D4
.data$r:0000D8D4 ; Segment type: Pure data
.data$r:0000D8D4 ; Segment permissions: Read/Write
.data$r:0000D8D4 _data$r         segment dword public 'DATA' use32
.data$r:0000D8D4                 assume cs:_data$r
.data$r:0000D8D4                 ;org 0D8D4h
.data$r:0000D8D4 ; COMDAT (pick any)
.data$r:0000D8D4                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000D8D4 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000D8D4 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D8D4                                         ; DATA XREF: .rdata$r:0000D8CCo
.data$r:0000D8D4                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D8D4                                         ; const type_info::`vftable'
.data$r:0000D8D8                 db    0
.data$r:0000D8D9                 db    0
.data$r:0000D8DA                 db    0
.data$r:0000D8DB                 db    0
.data$r:0000D8DC                 db  2Eh ; .
.data$r:0000D8DD                 db  3Fh ; ?
.data$r:0000D8DE                 db  41h ; A
.data$r:0000D8DF                 db  56h ; V
.data$r:0000D8E0                 db  5Fh ; _
.data$r:0000D8E1                 db  53h ; S
.data$r:0000D8E2                 db  79h ; y
.data$r:0000D8E3                 db  73h ; s
.data$r:0000D8E4                 db  74h ; t
.data$r:0000D8E5                 db  65h ; e
.data$r:0000D8E6                 db  6Dh ; m
.data$r:0000D8E7                 db  5Fh ; _
.data$r:0000D8E8                 db  65h ; e
.data$r:0000D8E9                 db  72h ; r
.data$r:0000D8EA                 db  72h ; r
.data$r:0000D8EB                 db  6Fh ; o
.data$r:0000D8EC                 db  72h ; r
.data$r:0000D8ED                 db  5Fh ; _
.data$r:0000D8EE                 db  63h ; c
.data$r:0000D8EF                 db  61h ; a
.data$r:0000D8F0                 db  74h ; t
.data$r:0000D8F1                 db  65h ; e
.data$r:0000D8F2                 db  67h ; g
.data$r:0000D8F3                 db  6Fh ; o
.data$r:0000D8F4                 db  72h ; r
.data$r:0000D8F5                 db  79h ; y
.data$r:0000D8F6                 db  40h ; @
.data$r:0000D8F7                 db  73h ; s
.data$r:0000D8F8                 db  74h ; t
.data$r:0000D8F9                 db  64h ; d
.data$r:0000D8FA                 db  40h ; @
.data$r:0000D8FB                 db  40h ; @
.data$r:0000D8FC                 db    0
.data$r:0000D8FD                 align 10h
.data$r:0000D8FD _data$r         ends
.data$r:0000D8FD
.rdata$r:0000D900 ; ===========================================================================
.rdata$r:0000D900
.rdata$r:0000D900 ; Segment type: Pure data
.rdata$r:0000D900 ; Segment permissions: Read
.rdata$r:0000D900 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D900                 assume cs:_rdata$r
.rdata$r:0000D900                 ;org 0D900h
.rdata$r:0000D900 ; COMDAT (pick any)
.rdata$r:0000D900                 public ??_R3_System_error_category@std@@8
.rdata$r:0000D900 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D900 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000D8D0o
.rdata$r:0000D900                                         ; .rdata$r:0000D938o
.rdata$r:0000D901                 db    0
.rdata$r:0000D902                 db    0
.rdata$r:0000D903                 db    0
.rdata$r:0000D904                 db    0
.rdata$r:0000D905                 db    0
.rdata$r:0000D906                 db    0
.rdata$r:0000D907                 db    0
.rdata$r:0000D908                 db    3
.rdata$r:0000D909                 db    0
.rdata$r:0000D90A                 db    0
.rdata$r:0000D90B                 db    0
.rdata$r:0000D90C                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000D90C _rdata$r        ends
.rdata$r:0000D90C
.rdata$r:0000D910 ; ===========================================================================
.rdata$r:0000D910
.rdata$r:0000D910 ; Segment type: Pure data
.rdata$r:0000D910 ; Segment permissions: Read
.rdata$r:0000D910 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D910                 assume cs:_rdata$r
.rdata$r:0000D910                 ;org 0D910h
.rdata$r:0000D910 ; COMDAT (pick any)
.rdata$r:0000D910                 public ??_R2_System_error_category@std@@8
.rdata$r:0000D910 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000D910 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000D910                                         ; DATA XREF: .rdata$r:0000D90Co
.rdata$r:0000D910                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D914                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D918                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D91C                 db    0
.rdata$r:0000D91D                 align 10h
.rdata$r:0000D91D _rdata$r        ends
.rdata$r:0000D91D
.rdata$r:0000D920 ; ===========================================================================
.rdata$r:0000D920
.rdata$r:0000D920 ; Segment type: Pure data
.rdata$r:0000D920 ; Segment permissions: Read
.rdata$r:0000D920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D920                 assume cs:_rdata$r
.rdata$r:0000D920                 ;org 0D920h
.rdata$r:0000D920 ; COMDAT (pick any)
.rdata$r:0000D920                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000D920 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D920 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000D920                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000D920                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000D924                 db    2
.rdata$r:0000D925                 db    0
.rdata$r:0000D926                 db    0
.rdata$r:0000D927                 db    0
.rdata$r:0000D928                 db    0
.rdata$r:0000D929                 db    0
.rdata$r:0000D92A                 db    0
.rdata$r:0000D92B                 db    0
.rdata$r:0000D92C                 db 0FFh
.rdata$r:0000D92D                 db 0FFh
.rdata$r:0000D92E                 db 0FFh
.rdata$r:0000D92F                 db 0FFh
.rdata$r:0000D930                 db    0
.rdata$r:0000D931                 db    0
.rdata$r:0000D932                 db    0
.rdata$r:0000D933                 db    0
.rdata$r:0000D934                 db  40h ; @
.rdata$r:0000D935                 db    0
.rdata$r:0000D936                 db    0
.rdata$r:0000D937                 db    0
.rdata$r:0000D938                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D938 _rdata$r        ends
.rdata$r:0000D938
.rdata$r:0000D93C ; ===========================================================================
.rdata$r:0000D93C
.rdata$r:0000D93C ; Segment type: Pure data
.rdata$r:0000D93C ; Segment permissions: Read
.rdata$r:0000D93C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D93C                 assume cs:_rdata$r
.rdata$r:0000D93C                 ;org 0D93Ch
.rdata$r:0000D93C ; COMDAT (pick any)
.rdata$r:0000D93C                 public ??_R4failure@ios_base@std@@6B@
.rdata$r:0000D93C ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata$r:0000D93C ??_R4failure@ios_base@std@@6B@ db    0  ; DATA XREF: .rdata:0000CB38o
.rdata$r:0000D93D                 db    0
.rdata$r:0000D93E                 db    0
.rdata$r:0000D93F                 db    0
.rdata$r:0000D940                 db    0
.rdata$r:0000D941                 db    0
.rdata$r:0000D942                 db    0
.rdata$r:0000D943                 db    0
.rdata$r:0000D944                 db    0
.rdata$r:0000D945                 db    0
.rdata$r:0000D946                 db    0
.rdata$r:0000D947                 db    0
.rdata$r:0000D948                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000D94C                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D94C _rdata$r        ends
.rdata$r:0000D94C
.rdata$r:0000D950 ; ===========================================================================
.rdata$r:0000D950
.rdata$r:0000D950 ; Segment type: Pure data
.rdata$r:0000D950 ; Segment permissions: Read
.rdata$r:0000D950 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D950                 assume cs:_rdata$r
.rdata$r:0000D950                 ;org 0D950h
.rdata$r:0000D950 ; COMDAT (pick any)
.rdata$r:0000D950                 public ??_R3failure@ios_base@std@@8
.rdata$r:0000D950 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D950 ??_R3failure@ios_base@std@@8 db    0    ; DATA XREF: .rdata$r:0000D94Co
.rdata$r:0000D950                                         ; .rdata$r:0000D990o
.rdata$r:0000D951                 db    0
.rdata$r:0000D952                 db    0
.rdata$r:0000D953                 db    0
.rdata$r:0000D954                 db    0
.rdata$r:0000D955                 db    0
.rdata$r:0000D956                 db    0
.rdata$r:0000D957                 db    0
.rdata$r:0000D958                 db    5
.rdata$r:0000D959                 db    0
.rdata$r:0000D95A                 db    0
.rdata$r:0000D95B                 db    0
.rdata$r:0000D95C                 dd offset ??_R2failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000D95C _rdata$r        ends
.rdata$r:0000D95C
.rdata$r:0000D960 ; ===========================================================================
.rdata$r:0000D960
.rdata$r:0000D960 ; Segment type: Pure data
.rdata$r:0000D960 ; Segment permissions: Read
.rdata$r:0000D960 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D960                 assume cs:_rdata$r
.rdata$r:0000D960                 ;org 0D960h
.rdata$r:0000D960 ; COMDAT (pick any)
.rdata$r:0000D960                 public ??_R2failure@ios_base@std@@8
.rdata$r:0000D960 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000D960 ??_R2failure@ios_base@std@@8 dd offset ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000D960                                         ; DATA XREF: .rdata$r:0000D95Co
.rdata$r:0000D960                                         ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D964                 dd offset ??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D968                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D96C                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D970                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D974                 db    0
.rdata$r:0000D975                 align 4
.rdata$r:0000D975 _rdata$r        ends
.rdata$r:0000D975
.rdata$r:0000D978 ; ===========================================================================
.rdata$r:0000D978
.rdata$r:0000D978 ; Segment type: Pure data
.rdata$r:0000D978 ; Segment permissions: Read
.rdata$r:0000D978 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D978                 assume cs:_rdata$r
.rdata$r:0000D978                 ;org 0D978h
.rdata$r:0000D978 ; COMDAT (pick any)
.rdata$r:0000D978                 public ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000D978 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D978 ??_R1A@?0A@EA@failure@ios_base@std@@8 dd offset ??_R0?AVfailure@ios_base@std@@@8
.rdata$r:0000D978                                         ; DATA XREF: .rdata$r:std::ios_base::failure::`RTTI Base Class Array'o
.rdata$r:0000D978                                         ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000D97C                 db    4
.rdata$r:0000D97D                 db    0
.rdata$r:0000D97E                 db    0
.rdata$r:0000D97F                 db    0
.rdata$r:0000D980                 db    0
.rdata$r:0000D981                 db    0
.rdata$r:0000D982                 db    0
.rdata$r:0000D983                 db    0
.rdata$r:0000D984                 db 0FFh
.rdata$r:0000D985                 db 0FFh
.rdata$r:0000D986                 db 0FFh
.rdata$r:0000D987                 db 0FFh
.rdata$r:0000D988                 db    0
.rdata$r:0000D989                 db    0
.rdata$r:0000D98A                 db    0
.rdata$r:0000D98B                 db    0
.rdata$r:0000D98C                 db  40h ; @
.rdata$r:0000D98D                 db    0
.rdata$r:0000D98E                 db    0
.rdata$r:0000D98F                 db    0
.rdata$r:0000D990                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D990 _rdata$r        ends
.rdata$r:0000D990
.rdata$r:0000D994 ; ===========================================================================
.rdata$r:0000D994
.rdata$r:0000D994 ; Segment type: Pure data
.rdata$r:0000D994 ; Segment permissions: Read
.rdata$r:0000D994 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D994                 assume cs:_rdata$r
.rdata$r:0000D994                 ;org 0D994h
.rdata$r:0000D994 ; COMDAT (pick any)
.rdata$r:0000D994                 public ??_R4TiXmlDocumentA@@6B@
.rdata$r:0000D994 ; const TiXmlDocumentA::`RTTI Complete Object Locator'
.rdata$r:0000D994 ??_R4TiXmlDocumentA@@6B@ db    0        ; DATA XREF: .rdata:0000CE04o
.rdata$r:0000D995                 db    0
.rdata$r:0000D996                 db    0
.rdata$r:0000D997                 db    0
.rdata$r:0000D998                 db    0
.rdata$r:0000D999                 db    0
.rdata$r:0000D99A                 db    0
.rdata$r:0000D99B                 db    0
.rdata$r:0000D99C                 db    0
.rdata$r:0000D99D                 db    0
.rdata$r:0000D99E                 db    0
.rdata$r:0000D99F                 db    0
.rdata$r:0000D9A0                 dd offset ??_R0?AVTiXmlDocumentA@@@8 ; TiXmlDocumentA `RTTI Type Descriptor'
.rdata$r:0000D9A4                 dd offset ??_R3TiXmlDocumentA@@8 ; TiXmlDocumentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D9A4 _rdata$r        ends
.rdata$r:0000D9A4
.data$r:0000D9A8 ; ===========================================================================
.data$r:0000D9A8
.data$r:0000D9A8 ; Segment type: Pure data
.data$r:0000D9A8 ; Segment permissions: Read/Write
.data$r:0000D9A8 _data$r         segment dword public 'DATA' use32
.data$r:0000D9A8                 assume cs:_data$r
.data$r:0000D9A8                 ;org 0D9A8h
.data$r:0000D9A8 ; COMDAT (pick any)
.data$r:0000D9A8                 public ??_R0?AVTiXmlDocumentA@@@8
.data$r:0000D9A8 ; class TiXmlDocumentA `RTTI Type Descriptor'
.data$r:0000D9A8 ??_R0?AVTiXmlDocumentA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000D9A8                                         ; DATA XREF: .rdata$r:0000D9A0o
.data$r:0000D9A8                                         ; .rdata$r:TiXmlDocumentA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000D9A8                                         ; const type_info::`vftable'
.data$r:0000D9AC                 align 10h
.data$r:0000D9B0 a_?avtixmldocum db '.?AVTiXmlDocumentA@@',0
.data$r:0000D9C5                 align 4
.data$r:0000D9C5 _data$r         ends
.data$r:0000D9C5
.rdata$r:0000D9C8 ; ===========================================================================
.rdata$r:0000D9C8
.rdata$r:0000D9C8 ; Segment type: Pure data
.rdata$r:0000D9C8 ; Segment permissions: Read
.rdata$r:0000D9C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D9C8                 assume cs:_rdata$r
.rdata$r:0000D9C8                 ;org 0D9C8h
.rdata$r:0000D9C8 ; COMDAT (pick any)
.rdata$r:0000D9C8                 public ??_R3TiXmlDocumentA@@8
.rdata$r:0000D9C8 ; TiXmlDocumentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000D9C8 ??_R3TiXmlDocumentA@@8 db    0          ; DATA XREF: .rdata$r:0000D9A4o
.rdata$r:0000D9C8                                         ; .rdata$r:0000DA00o
.rdata$r:0000D9C9                 db    0
.rdata$r:0000D9CA                 db    0
.rdata$r:0000D9CB                 db    0
.rdata$r:0000D9CC                 db    0
.rdata$r:0000D9CD                 db    0
.rdata$r:0000D9CE                 db    0
.rdata$r:0000D9CF                 db    0
.rdata$r:0000D9D0                 db    3
.rdata$r:0000D9D1                 db    0
.rdata$r:0000D9D2                 db    0
.rdata$r:0000D9D3                 db    0
.rdata$r:0000D9D4                 dd offset ??_R2TiXmlDocumentA@@8 ; TiXmlDocumentA::`RTTI Base Class Array'
.rdata$r:0000D9D4 _rdata$r        ends
.rdata$r:0000D9D4
.rdata$r:0000D9D8 ; ===========================================================================
.rdata$r:0000D9D8
.rdata$r:0000D9D8 ; Segment type: Pure data
.rdata$r:0000D9D8 ; Segment permissions: Read
.rdata$r:0000D9D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D9D8                 assume cs:_rdata$r
.rdata$r:0000D9D8                 ;org 0D9D8h
.rdata$r:0000D9D8 ; COMDAT (pick any)
.rdata$r:0000D9D8                 public ??_R2TiXmlDocumentA@@8
.rdata$r:0000D9D8 ; TiXmlDocumentA::`RTTI Base Class Array'
.rdata$r:0000D9D8 ??_R2TiXmlDocumentA@@8 dd offset ??_R1A@?0A@EA@TiXmlDocumentA@@8
.rdata$r:0000D9D8                                         ; DATA XREF: .rdata$r:0000D9D4o
.rdata$r:0000D9D8                                         ; TiXmlDocumentA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D9DC                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D9E0                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000D9E4                 db    0
.rdata$r:0000D9E5                 align 4
.rdata$r:0000D9E5 _rdata$r        ends
.rdata$r:0000D9E5
.rdata$r:0000D9E8 ; ===========================================================================
.rdata$r:0000D9E8
.rdata$r:0000D9E8 ; Segment type: Pure data
.rdata$r:0000D9E8 ; Segment permissions: Read
.rdata$r:0000D9E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000D9E8                 assume cs:_rdata$r
.rdata$r:0000D9E8                 ;org 0D9E8h
.rdata$r:0000D9E8 ; COMDAT (pick any)
.rdata$r:0000D9E8                 public ??_R1A@?0A@EA@TiXmlDocumentA@@8
.rdata$r:0000D9E8 ; TiXmlDocumentA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000D9E8 ??_R1A@?0A@EA@TiXmlDocumentA@@8 dd offset ??_R0?AVTiXmlDocumentA@@@8
.rdata$r:0000D9E8                                         ; DATA XREF: .rdata$r:TiXmlDocumentA::`RTTI Base Class Array'o
.rdata$r:0000D9E8                                         ; TiXmlDocumentA `RTTI Type Descriptor'
.rdata$r:0000D9EC                 db    2
.rdata$r:0000D9ED                 db    0
.rdata$r:0000D9EE                 db    0
.rdata$r:0000D9EF                 db    0
.rdata$r:0000D9F0                 db    0
.rdata$r:0000D9F1                 db    0
.rdata$r:0000D9F2                 db    0
.rdata$r:0000D9F3                 db    0
.rdata$r:0000D9F4                 db 0FFh
.rdata$r:0000D9F5                 db 0FFh
.rdata$r:0000D9F6                 db 0FFh
.rdata$r:0000D9F7                 db 0FFh
.rdata$r:0000D9F8                 db    0
.rdata$r:0000D9F9                 db    0
.rdata$r:0000D9FA                 db    0
.rdata$r:0000D9FB                 db    0
.rdata$r:0000D9FC                 db  40h ; @
.rdata$r:0000D9FD                 db    0
.rdata$r:0000D9FE                 db    0
.rdata$r:0000D9FF                 db    0
.rdata$r:0000DA00                 dd offset ??_R3TiXmlDocumentA@@8 ; TiXmlDocumentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA00 _rdata$r        ends
.rdata$r:0000DA00
.rdata$r:0000DA04 ; ===========================================================================
.rdata$r:0000DA04
.rdata$r:0000DA04 ; Segment type: Pure data
.rdata$r:0000DA04 ; Segment permissions: Read
.rdata$r:0000DA04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA04                 assume cs:_rdata$r
.rdata$r:0000DA04                 ;org 0DA04h
.rdata$r:0000DA04 ; COMDAT (pick any)
.rdata$r:0000DA04                 public ??_R1A@?0A@EA@TiXmlNodeA@@8
.rdata$r:0000DA04 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DA04 ??_R1A@?0A@EA@TiXmlNodeA@@8 dd offset ??_R0?AVTiXmlNodeA@@@8
.rdata$r:0000DA04                                         ; DATA XREF: .rdata$r:0000D9DCo
.rdata$r:0000DA04                                         ; .rdata$r:TiXmlNodeA::`RTTI Base Class Array'o ...
.rdata$r:0000DA04                                         ; TiXmlNodeA `RTTI Type Descriptor'
.rdata$r:0000DA08                 db    1
.rdata$r:0000DA09                 db    0
.rdata$r:0000DA0A                 db    0
.rdata$r:0000DA0B                 db    0
.rdata$r:0000DA0C                 db    0
.rdata$r:0000DA0D                 db    0
.rdata$r:0000DA0E                 db    0
.rdata$r:0000DA0F                 db    0
.rdata$r:0000DA10                 db 0FFh
.rdata$r:0000DA11                 db 0FFh
.rdata$r:0000DA12                 db 0FFh
.rdata$r:0000DA13                 db 0FFh
.rdata$r:0000DA14                 db    0
.rdata$r:0000DA15                 db    0
.rdata$r:0000DA16                 db    0
.rdata$r:0000DA17                 db    0
.rdata$r:0000DA18                 db  40h ; @
.rdata$r:0000DA19                 db    0
.rdata$r:0000DA1A                 db    0
.rdata$r:0000DA1B                 db    0
.rdata$r:0000DA1C                 dd offset ??_R3TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA1C _rdata$r        ends
.rdata$r:0000DA1C
.data$r:0000DA20 ; ===========================================================================
.data$r:0000DA20
.data$r:0000DA20 ; Segment type: Pure data
.data$r:0000DA20 ; Segment permissions: Read/Write
.data$r:0000DA20 _data$r         segment dword public 'DATA' use32
.data$r:0000DA20                 assume cs:_data$r
.data$r:0000DA20                 ;org 0DA20h
.data$r:0000DA20 ; COMDAT (pick any)
.data$r:0000DA20                 public ??_R0?AVTiXmlNodeA@@@8
.data$r:0000DA20 ; class TiXmlNodeA `RTTI Type Descriptor'
.data$r:0000DA20 ??_R0?AVTiXmlNodeA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DA20                                         ; DATA XREF: .rdata$r:TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DA20                                         ; .rdata$r:0000DD54o
.data$r:0000DA20                                         ; const type_info::`vftable'
.data$r:0000DA24                 align 8
.data$r:0000DA28 a_?avtixmlnodea db '.?AVTiXmlNodeA@@',0
.data$r:0000DA39                 align 4
.data$r:0000DA39 _data$r         ends
.data$r:0000DA39
.rdata$r:0000DA3C ; ===========================================================================
.rdata$r:0000DA3C
.rdata$r:0000DA3C ; Segment type: Pure data
.rdata$r:0000DA3C ; Segment permissions: Read
.rdata$r:0000DA3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA3C                 assume cs:_rdata$r
.rdata$r:0000DA3C                 ;org 0DA3Ch
.rdata$r:0000DA3C ; COMDAT (pick any)
.rdata$r:0000DA3C                 public ??_R3TiXmlNodeA@@8
.rdata$r:0000DA3C ; TiXmlNodeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA3C ??_R3TiXmlNodeA@@8 db    0              ; DATA XREF: .rdata$r:0000DA1Co
.rdata$r:0000DA3C                                         ; .rdata$r:0000DD58o
.rdata$r:0000DA3D                 db    0
.rdata$r:0000DA3E                 db    0
.rdata$r:0000DA3F                 db    0
.rdata$r:0000DA40                 db    0
.rdata$r:0000DA41                 db    0
.rdata$r:0000DA42                 db    0
.rdata$r:0000DA43                 db    0
.rdata$r:0000DA44                 db    2
.rdata$r:0000DA45                 db    0
.rdata$r:0000DA46                 db    0
.rdata$r:0000DA47                 db    0
.rdata$r:0000DA48                 dd offset ??_R2TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Array'
.rdata$r:0000DA48 _rdata$r        ends
.rdata$r:0000DA48
.rdata$r:0000DA4C ; ===========================================================================
.rdata$r:0000DA4C
.rdata$r:0000DA4C ; Segment type: Pure data
.rdata$r:0000DA4C ; Segment permissions: Read
.rdata$r:0000DA4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA4C                 assume cs:_rdata$r
.rdata$r:0000DA4C                 ;org 0DA4Ch
.rdata$r:0000DA4C ; COMDAT (pick any)
.rdata$r:0000DA4C                 public ??_R2TiXmlNodeA@@8
.rdata$r:0000DA4C ; TiXmlNodeA::`RTTI Base Class Array'
.rdata$r:0000DA4C ??_R2TiXmlNodeA@@8 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8
.rdata$r:0000DA4C                                         ; DATA XREF: .rdata$r:0000DA48o
.rdata$r:0000DA4C                                         ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DA50                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DA54                 db    0
.rdata$r:0000DA55                 align 4
.rdata$r:0000DA55 _rdata$r        ends
.rdata$r:0000DA55
.rdata$r:0000DA58 ; ===========================================================================
.rdata$r:0000DA58
.rdata$r:0000DA58 ; Segment type: Pure data
.rdata$r:0000DA58 ; Segment permissions: Read
.rdata$r:0000DA58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA58                 assume cs:_rdata$r
.rdata$r:0000DA58                 ;org 0DA58h
.rdata$r:0000DA58 ; COMDAT (pick any)
.rdata$r:0000DA58                 public ??_R1A@?0A@EA@TiXmlBaseA@@8
.rdata$r:0000DA58 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DA58 ??_R1A@?0A@EA@TiXmlBaseA@@8 dd offset ??_R0?AVTiXmlBaseA@@@8
.rdata$r:0000DA58                                         ; DATA XREF: .rdata$r:0000D9E0o
.rdata$r:0000DA58                                         ; .rdata$r:0000DA50o ...
.rdata$r:0000DA58                                         ; TiXmlBaseA `RTTI Type Descriptor'
.rdata$r:0000DA5C                 db    0
.rdata$r:0000DA5D                 db    0
.rdata$r:0000DA5E                 db    0
.rdata$r:0000DA5F                 db    0
.rdata$r:0000DA60                 db    0
.rdata$r:0000DA61                 db    0
.rdata$r:0000DA62                 db    0
.rdata$r:0000DA63                 db    0
.rdata$r:0000DA64                 db 0FFh
.rdata$r:0000DA65                 db 0FFh
.rdata$r:0000DA66                 db 0FFh
.rdata$r:0000DA67                 db 0FFh
.rdata$r:0000DA68                 db    0
.rdata$r:0000DA69                 db    0
.rdata$r:0000DA6A                 db    0
.rdata$r:0000DA6B                 db    0
.rdata$r:0000DA6C                 db  40h ; @
.rdata$r:0000DA6D                 db    0
.rdata$r:0000DA6E                 db    0
.rdata$r:0000DA6F                 db    0
.rdata$r:0000DA70                 dd offset ??_R3TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA70 _rdata$r        ends
.rdata$r:0000DA70
.data$r:0000DA74 ; ===========================================================================
.data$r:0000DA74
.data$r:0000DA74 ; Segment type: Pure data
.data$r:0000DA74 ; Segment permissions: Read/Write
.data$r:0000DA74 _data$r         segment dword public 'DATA' use32
.data$r:0000DA74                 assume cs:_data$r
.data$r:0000DA74                 ;org 0DA74h
.data$r:0000DA74 ; COMDAT (pick any)
.data$r:0000DA74                 public ??_R0?AVTiXmlBaseA@@@8
.data$r:0000DA74 ; class TiXmlBaseA `RTTI Type Descriptor'
.data$r:0000DA74 ??_R0?AVTiXmlBaseA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DA74                                         ; DATA XREF: .rdata$r:TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DA74                                         ; .rdata$r:0000DD40o
.data$r:0000DA74                                         ; const type_info::`vftable'
.data$r:0000DA78                 db    0
.data$r:0000DA79                 db    0
.data$r:0000DA7A                 db    0
.data$r:0000DA7B                 db    0
.data$r:0000DA7C                 db  2Eh ; .
.data$r:0000DA7D                 db  3Fh ; ?
.data$r:0000DA7E                 db  41h ; A
.data$r:0000DA7F                 db  56h ; V
.data$r:0000DA80                 db  54h ; T
.data$r:0000DA81                 db  69h ; i
.data$r:0000DA82                 db  58h ; X
.data$r:0000DA83                 db  6Dh ; m
.data$r:0000DA84                 db  6Ch ; l
.data$r:0000DA85                 db  42h ; B
.data$r:0000DA86                 db  61h ; a
.data$r:0000DA87                 db  73h ; s
.data$r:0000DA88                 db  65h ; e
.data$r:0000DA89                 db  41h ; A
.data$r:0000DA8A                 db  40h ; @
.data$r:0000DA8B                 db  40h ; @
.data$r:0000DA8C                 db    0
.data$r:0000DA8D                 align 10h
.data$r:0000DA8D _data$r         ends
.data$r:0000DA8D
.rdata$r:0000DA90 ; ===========================================================================
.rdata$r:0000DA90
.rdata$r:0000DA90 ; Segment type: Pure data
.rdata$r:0000DA90 ; Segment permissions: Read
.rdata$r:0000DA90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA90                 assume cs:_rdata$r
.rdata$r:0000DA90                 ;org 0DA90h
.rdata$r:0000DA90 ; COMDAT (pick any)
.rdata$r:0000DA90                 public ??_R3TiXmlBaseA@@8
.rdata$r:0000DA90 ; TiXmlBaseA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DA90 ??_R3TiXmlBaseA@@8 db    0              ; DATA XREF: .rdata$r:0000DA70o
.rdata$r:0000DA90                                         ; .rdata$r:0000DD44o
.rdata$r:0000DA91                 db    0
.rdata$r:0000DA92                 db    0
.rdata$r:0000DA93                 db    0
.rdata$r:0000DA94                 db    0
.rdata$r:0000DA95                 db    0
.rdata$r:0000DA96                 db    0
.rdata$r:0000DA97                 db    0
.rdata$r:0000DA98                 db    1
.rdata$r:0000DA99                 db    0
.rdata$r:0000DA9A                 db    0
.rdata$r:0000DA9B                 db    0
.rdata$r:0000DA9C                 dd offset ??_R2TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Array'
.rdata$r:0000DA9C _rdata$r        ends
.rdata$r:0000DA9C
.rdata$r:0000DAA0 ; ===========================================================================
.rdata$r:0000DAA0
.rdata$r:0000DAA0 ; Segment type: Pure data
.rdata$r:0000DAA0 ; Segment permissions: Read
.rdata$r:0000DAA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAA0                 assume cs:_rdata$r
.rdata$r:0000DAA0                 ;org 0DAA0h
.rdata$r:0000DAA0 ; COMDAT (pick any)
.rdata$r:0000DAA0                 public ??_R2TiXmlBaseA@@8
.rdata$r:0000DAA0 ; TiXmlBaseA::`RTTI Base Class Array'
.rdata$r:0000DAA0 ??_R2TiXmlBaseA@@8 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8
.rdata$r:0000DAA0                                         ; DATA XREF: .rdata$r:0000DA9Co
.rdata$r:0000DAA0                                         ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DAA4                 db    0
.rdata$r:0000DAA5                 align 4
.rdata$r:0000DAA5 _rdata$r        ends
.rdata$r:0000DAA5
.rdata$r:0000DAA8 ; ===========================================================================
.rdata$r:0000DAA8
.rdata$r:0000DAA8 ; Segment type: Pure data
.rdata$r:0000DAA8 ; Segment permissions: Read
.rdata$r:0000DAA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAA8                 assume cs:_rdata$r
.rdata$r:0000DAA8                 ;org 0DAA8h
.rdata$r:0000DAA8 ; COMDAT (pick any)
.rdata$r:0000DAA8                 public ??_R4TiXmlElementA@@6B@
.rdata$r:0000DAA8 ; const TiXmlElementA::`RTTI Complete Object Locator'
.rdata$r:0000DAA8 ??_R4TiXmlElementA@@6B@ db    0         ; DATA XREF: .rdata:0000CD64o
.rdata$r:0000DAA9                 db    0
.rdata$r:0000DAAA                 db    0
.rdata$r:0000DAAB                 db    0
.rdata$r:0000DAAC                 db    0
.rdata$r:0000DAAD                 db    0
.rdata$r:0000DAAE                 db    0
.rdata$r:0000DAAF                 db    0
.rdata$r:0000DAB0                 db    0
.rdata$r:0000DAB1                 db    0
.rdata$r:0000DAB2                 db    0
.rdata$r:0000DAB3                 db    0
.rdata$r:0000DAB4                 dd offset ??_R0?AVTiXmlElementA@@@8 ; TiXmlElementA `RTTI Type Descriptor'
.rdata$r:0000DAB8                 dd offset ??_R3TiXmlElementA@@8 ; TiXmlElementA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAB8 _rdata$r        ends
.rdata$r:0000DAB8
.data$r:0000DABC ; ===========================================================================
.data$r:0000DABC
.data$r:0000DABC ; Segment type: Pure data
.data$r:0000DABC ; Segment permissions: Read/Write
.data$r:0000DABC _data$r         segment dword public 'DATA' use32
.data$r:0000DABC                 assume cs:_data$r
.data$r:0000DABC                 ;org 0DABCh
.data$r:0000DABC ; COMDAT (pick any)
.data$r:0000DABC                 public ??_R0?AVTiXmlElementA@@@8
.data$r:0000DABC ; class TiXmlElementA `RTTI Type Descriptor'
.data$r:0000DABC ??_R0?AVTiXmlElementA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DABC                                         ; DATA XREF: .rdata$r:0000DAB4o
.data$r:0000DABC                                         ; .rdata$r:TiXmlElementA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DABC                                         ; const type_info::`vftable'
.data$r:0000DAC0                 db    0
.data$r:0000DAC1                 db    0
.data$r:0000DAC2                 db    0
.data$r:0000DAC3                 db    0
.data$r:0000DAC4                 db  2Eh ; .
.data$r:0000DAC5                 db  3Fh ; ?
.data$r:0000DAC6                 db  41h ; A
.data$r:0000DAC7                 db  56h ; V
.data$r:0000DAC8                 db  54h ; T
.data$r:0000DAC9                 db  69h ; i
.data$r:0000DACA                 db  58h ; X
.data$r:0000DACB                 db  6Dh ; m
.data$r:0000DACC                 db  6Ch ; l
.data$r:0000DACD                 db  45h ; E
.data$r:0000DACE                 db  6Ch ; l
.data$r:0000DACF                 db  65h ; e
.data$r:0000DAD0                 db  6Dh ; m
.data$r:0000DAD1                 db  65h ; e
.data$r:0000DAD2                 db  6Eh ; n
.data$r:0000DAD3                 db  74h ; t
.data$r:0000DAD4                 db  41h ; A
.data$r:0000DAD5                 db  40h ; @
.data$r:0000DAD6                 db  40h ; @
.data$r:0000DAD7                 db    0
.data$r:0000DAD7 _data$r         ends
.data$r:0000DAD7
.rdata$r:0000DAD8 ; ===========================================================================
.rdata$r:0000DAD8
.rdata$r:0000DAD8 ; Segment type: Pure data
.rdata$r:0000DAD8 ; Segment permissions: Read
.rdata$r:0000DAD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAD8                 assume cs:_rdata$r
.rdata$r:0000DAD8                 ;org 0DAD8h
.rdata$r:0000DAD8 ; COMDAT (pick any)
.rdata$r:0000DAD8                 public ??_R3TiXmlElementA@@8
.rdata$r:0000DAD8 ; TiXmlElementA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAD8 ??_R3TiXmlElementA@@8 db    0           ; DATA XREF: .rdata$r:0000DAB8o
.rdata$r:0000DAD8                                         ; .rdata$r:0000DB10o
.rdata$r:0000DAD9                 db    0
.rdata$r:0000DADA                 db    0
.rdata$r:0000DADB                 db    0
.rdata$r:0000DADC                 db    0
.rdata$r:0000DADD                 db    0
.rdata$r:0000DADE                 db    0
.rdata$r:0000DADF                 db    0
.rdata$r:0000DAE0                 db    3
.rdata$r:0000DAE1                 db    0
.rdata$r:0000DAE2                 db    0
.rdata$r:0000DAE3                 db    0
.rdata$r:0000DAE4                 dd offset ??_R2TiXmlElementA@@8 ; TiXmlElementA::`RTTI Base Class Array'
.rdata$r:0000DAE4 _rdata$r        ends
.rdata$r:0000DAE4
.rdata$r:0000DAE8 ; ===========================================================================
.rdata$r:0000DAE8
.rdata$r:0000DAE8 ; Segment type: Pure data
.rdata$r:0000DAE8 ; Segment permissions: Read
.rdata$r:0000DAE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAE8                 assume cs:_rdata$r
.rdata$r:0000DAE8                 ;org 0DAE8h
.rdata$r:0000DAE8 ; COMDAT (pick any)
.rdata$r:0000DAE8                 public ??_R2TiXmlElementA@@8
.rdata$r:0000DAE8 ; TiXmlElementA::`RTTI Base Class Array'
.rdata$r:0000DAE8 ??_R2TiXmlElementA@@8 dd offset ??_R1A@?0A@EA@TiXmlElementA@@8
.rdata$r:0000DAE8                                         ; DATA XREF: .rdata$r:0000DAE4o
.rdata$r:0000DAE8                                         ; TiXmlElementA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DAEC                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DAF0                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DAF4                 db    0
.rdata$r:0000DAF5                 align 4
.rdata$r:0000DAF5 _rdata$r        ends
.rdata$r:0000DAF5
.rdata$r:0000DAF8 ; ===========================================================================
.rdata$r:0000DAF8
.rdata$r:0000DAF8 ; Segment type: Pure data
.rdata$r:0000DAF8 ; Segment permissions: Read
.rdata$r:0000DAF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAF8                 assume cs:_rdata$r
.rdata$r:0000DAF8                 ;org 0DAF8h
.rdata$r:0000DAF8 ; COMDAT (pick any)
.rdata$r:0000DAF8                 public ??_R1A@?0A@EA@TiXmlElementA@@8
.rdata$r:0000DAF8 ; TiXmlElementA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DAF8 ??_R1A@?0A@EA@TiXmlElementA@@8 dd offset ??_R0?AVTiXmlElementA@@@8
.rdata$r:0000DAF8                                         ; DATA XREF: .rdata$r:TiXmlElementA::`RTTI Base Class Array'o
.rdata$r:0000DAF8                                         ; TiXmlElementA `RTTI Type Descriptor'
.rdata$r:0000DAFC                 db    2
.rdata$r:0000DAFD                 db    0
.rdata$r:0000DAFE                 db    0
.rdata$r:0000DAFF                 db    0
.rdata$r:0000DB00                 db    0
.rdata$r:0000DB01                 db    0
.rdata$r:0000DB02                 db    0
.rdata$r:0000DB03                 db    0
.rdata$r:0000DB04                 db 0FFh
.rdata$r:0000DB05                 db 0FFh
.rdata$r:0000DB06                 db 0FFh
.rdata$r:0000DB07                 db 0FFh
.rdata$r:0000DB08                 db    0
.rdata$r:0000DB09                 db    0
.rdata$r:0000DB0A                 db    0
.rdata$r:0000DB0B                 db    0
.rdata$r:0000DB0C                 db  40h ; @
.rdata$r:0000DB0D                 db    0
.rdata$r:0000DB0E                 db    0
.rdata$r:0000DB0F                 db    0
.rdata$r:0000DB10                 dd offset ??_R3TiXmlElementA@@8 ; TiXmlElementA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB10 _rdata$r        ends
.rdata$r:0000DB10
.rdata$r:0000DB14 ; ===========================================================================
.rdata$r:0000DB14
.rdata$r:0000DB14 ; Segment type: Pure data
.rdata$r:0000DB14 ; Segment permissions: Read
.rdata$r:0000DB14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB14                 assume cs:_rdata$r
.rdata$r:0000DB14                 ;org 0DB14h
.rdata$r:0000DB14 ; COMDAT (pick any)
.rdata$r:0000DB14                 public ??_R4TiXmlCommentA@@6B@
.rdata$r:0000DB14 ; const TiXmlCommentA::`RTTI Complete Object Locator'
.rdata$r:0000DB14 ??_R4TiXmlCommentA@@6B@ db    0         ; DATA XREF: .rdata:0000CD84o
.rdata$r:0000DB15                 db    0
.rdata$r:0000DB16                 db    0
.rdata$r:0000DB17                 db    0
.rdata$r:0000DB18                 db    0
.rdata$r:0000DB19                 db    0
.rdata$r:0000DB1A                 db    0
.rdata$r:0000DB1B                 db    0
.rdata$r:0000DB1C                 db    0
.rdata$r:0000DB1D                 db    0
.rdata$r:0000DB1E                 db    0
.rdata$r:0000DB1F                 db    0
.rdata$r:0000DB20                 dd offset ??_R0?AVTiXmlCommentA@@@8 ; TiXmlCommentA `RTTI Type Descriptor'
.rdata$r:0000DB24                 dd offset ??_R3TiXmlCommentA@@8 ; TiXmlCommentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB24 _rdata$r        ends
.rdata$r:0000DB24
.data$r:0000DB28 ; ===========================================================================
.data$r:0000DB28
.data$r:0000DB28 ; Segment type: Pure data
.data$r:0000DB28 ; Segment permissions: Read/Write
.data$r:0000DB28 _data$r         segment dword public 'DATA' use32
.data$r:0000DB28                 assume cs:_data$r
.data$r:0000DB28                 ;org 0DB28h
.data$r:0000DB28 ; COMDAT (pick any)
.data$r:0000DB28                 public ??_R0?AVTiXmlCommentA@@@8
.data$r:0000DB28 ; class TiXmlCommentA `RTTI Type Descriptor'
.data$r:0000DB28 ??_R0?AVTiXmlCommentA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DB28                                         ; DATA XREF: .rdata$r:0000DB20o
.data$r:0000DB28                                         ; .rdata$r:TiXmlCommentA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DB28                                         ; const type_info::`vftable'
.data$r:0000DB2C                 align 10h
.data$r:0000DB30 a_?avtixmlcomme db '.?AVTiXmlCommentA@@',0
.data$r:0000DB30 _data$r         ends
.data$r:0000DB30
.rdata$r:0000DB44 ; ===========================================================================
.rdata$r:0000DB44
.rdata$r:0000DB44 ; Segment type: Pure data
.rdata$r:0000DB44 ; Segment permissions: Read
.rdata$r:0000DB44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB44                 assume cs:_rdata$r
.rdata$r:0000DB44                 ;org 0DB44h
.rdata$r:0000DB44 ; COMDAT (pick any)
.rdata$r:0000DB44                 public ??_R3TiXmlCommentA@@8
.rdata$r:0000DB44 ; TiXmlCommentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB44 ??_R3TiXmlCommentA@@8 db    0           ; DATA XREF: .rdata$r:0000DB24o
.rdata$r:0000DB44                                         ; .rdata$r:0000DB7Co
.rdata$r:0000DB45                 db    0
.rdata$r:0000DB46                 db    0
.rdata$r:0000DB47                 db    0
.rdata$r:0000DB48                 db    0
.rdata$r:0000DB49                 db    0
.rdata$r:0000DB4A                 db    0
.rdata$r:0000DB4B                 db    0
.rdata$r:0000DB4C                 db    3
.rdata$r:0000DB4D                 db    0
.rdata$r:0000DB4E                 db    0
.rdata$r:0000DB4F                 db    0
.rdata$r:0000DB50                 dd offset ??_R2TiXmlCommentA@@8 ; TiXmlCommentA::`RTTI Base Class Array'
.rdata$r:0000DB50 _rdata$r        ends
.rdata$r:0000DB50
.rdata$r:0000DB54 ; ===========================================================================
.rdata$r:0000DB54
.rdata$r:0000DB54 ; Segment type: Pure data
.rdata$r:0000DB54 ; Segment permissions: Read
.rdata$r:0000DB54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB54                 assume cs:_rdata$r
.rdata$r:0000DB54                 ;org 0DB54h
.rdata$r:0000DB54 ; COMDAT (pick any)
.rdata$r:0000DB54                 public ??_R2TiXmlCommentA@@8
.rdata$r:0000DB54 ; TiXmlCommentA::`RTTI Base Class Array'
.rdata$r:0000DB54 ??_R2TiXmlCommentA@@8 dd offset ??_R1A@?0A@EA@TiXmlCommentA@@8
.rdata$r:0000DB54                                         ; DATA XREF: .rdata$r:0000DB50o
.rdata$r:0000DB54                                         ; TiXmlCommentA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB58                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB5C                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB60                 db    0
.rdata$r:0000DB61                 align 4
.rdata$r:0000DB61 _rdata$r        ends
.rdata$r:0000DB61
.rdata$r:0000DB64 ; ===========================================================================
.rdata$r:0000DB64
.rdata$r:0000DB64 ; Segment type: Pure data
.rdata$r:0000DB64 ; Segment permissions: Read
.rdata$r:0000DB64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB64                 assume cs:_rdata$r
.rdata$r:0000DB64                 ;org 0DB64h
.rdata$r:0000DB64 ; COMDAT (pick any)
.rdata$r:0000DB64                 public ??_R1A@?0A@EA@TiXmlCommentA@@8
.rdata$r:0000DB64 ; TiXmlCommentA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DB64 ??_R1A@?0A@EA@TiXmlCommentA@@8 dd offset ??_R0?AVTiXmlCommentA@@@8
.rdata$r:0000DB64                                         ; DATA XREF: .rdata$r:TiXmlCommentA::`RTTI Base Class Array'o
.rdata$r:0000DB64                                         ; TiXmlCommentA `RTTI Type Descriptor'
.rdata$r:0000DB68                 db    2
.rdata$r:0000DB69                 db    0
.rdata$r:0000DB6A                 db    0
.rdata$r:0000DB6B                 db    0
.rdata$r:0000DB6C                 db    0
.rdata$r:0000DB6D                 db    0
.rdata$r:0000DB6E                 db    0
.rdata$r:0000DB6F                 db    0
.rdata$r:0000DB70                 db 0FFh
.rdata$r:0000DB71                 db 0FFh
.rdata$r:0000DB72                 db 0FFh
.rdata$r:0000DB73                 db 0FFh
.rdata$r:0000DB74                 db    0
.rdata$r:0000DB75                 db    0
.rdata$r:0000DB76                 db    0
.rdata$r:0000DB77                 db    0
.rdata$r:0000DB78                 db  40h ; @
.rdata$r:0000DB79                 db    0
.rdata$r:0000DB7A                 db    0
.rdata$r:0000DB7B                 db    0
.rdata$r:0000DB7C                 dd offset ??_R3TiXmlCommentA@@8 ; TiXmlCommentA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB7C _rdata$r        ends
.rdata$r:0000DB7C
.rdata$r:0000DB80 ; ===========================================================================
.rdata$r:0000DB80
.rdata$r:0000DB80 ; Segment type: Pure data
.rdata$r:0000DB80 ; Segment permissions: Read
.rdata$r:0000DB80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB80                 assume cs:_rdata$r
.rdata$r:0000DB80                 ;org 0DB80h
.rdata$r:0000DB80 ; COMDAT (pick any)
.rdata$r:0000DB80                 public ??_R4TiXmlUnknownA@@6B@
.rdata$r:0000DB80 ; const TiXmlUnknownA::`RTTI Complete Object Locator'
.rdata$r:0000DB80 ??_R4TiXmlUnknownA@@6B@ db    0         ; DATA XREF: .rdata:0000CDE4o
.rdata$r:0000DB81                 db    0
.rdata$r:0000DB82                 db    0
.rdata$r:0000DB83                 db    0
.rdata$r:0000DB84                 db    0
.rdata$r:0000DB85                 db    0
.rdata$r:0000DB86                 db    0
.rdata$r:0000DB87                 db    0
.rdata$r:0000DB88                 db    0
.rdata$r:0000DB89                 db    0
.rdata$r:0000DB8A                 db    0
.rdata$r:0000DB8B                 db    0
.rdata$r:0000DB8C                 dd offset ??_R0?AVTiXmlUnknownA@@@8 ; TiXmlUnknownA `RTTI Type Descriptor'
.rdata$r:0000DB90                 dd offset ??_R3TiXmlUnknownA@@8 ; TiXmlUnknownA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB90 _rdata$r        ends
.rdata$r:0000DB90
.data$r:0000DB94 ; ===========================================================================
.data$r:0000DB94
.data$r:0000DB94 ; Segment type: Pure data
.data$r:0000DB94 ; Segment permissions: Read/Write
.data$r:0000DB94 _data$r         segment dword public 'DATA' use32
.data$r:0000DB94                 assume cs:_data$r
.data$r:0000DB94                 ;org 0DB94h
.data$r:0000DB94 ; COMDAT (pick any)
.data$r:0000DB94                 public ??_R0?AVTiXmlUnknownA@@@8
.data$r:0000DB94 ; class TiXmlUnknownA `RTTI Type Descriptor'
.data$r:0000DB94 ??_R0?AVTiXmlUnknownA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DB94                                         ; DATA XREF: .rdata$r:0000DB8Co
.data$r:0000DB94                                         ; .rdata$r:TiXmlUnknownA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DB94                                         ; const type_info::`vftable'
.data$r:0000DB98                 db    0
.data$r:0000DB99                 db    0
.data$r:0000DB9A                 db    0
.data$r:0000DB9B                 db    0
.data$r:0000DB9C                 db  2Eh ; .
.data$r:0000DB9D                 db  3Fh ; ?
.data$r:0000DB9E                 db  41h ; A
.data$r:0000DB9F                 db  56h ; V
.data$r:0000DBA0                 db  54h ; T
.data$r:0000DBA1                 db  69h ; i
.data$r:0000DBA2                 db  58h ; X
.data$r:0000DBA3                 db  6Dh ; m
.data$r:0000DBA4                 db  6Ch ; l
.data$r:0000DBA5                 db  55h ; U
.data$r:0000DBA6                 db  6Eh ; n
.data$r:0000DBA7                 db  6Bh ; k
.data$r:0000DBA8                 db  6Eh ; n
.data$r:0000DBA9                 db  6Fh ; o
.data$r:0000DBAA                 db  77h ; w
.data$r:0000DBAB                 db  6Eh ; n
.data$r:0000DBAC                 db  41h ; A
.data$r:0000DBAD                 db  40h ; @
.data$r:0000DBAE                 db  40h ; @
.data$r:0000DBAF                 db    0
.data$r:0000DBAF _data$r         ends
.data$r:0000DBAF
.rdata$r:0000DBB0 ; ===========================================================================
.rdata$r:0000DBB0
.rdata$r:0000DBB0 ; Segment type: Pure data
.rdata$r:0000DBB0 ; Segment permissions: Read
.rdata$r:0000DBB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBB0                 assume cs:_rdata$r
.rdata$r:0000DBB0                 ;org 0DBB0h
.rdata$r:0000DBB0 ; COMDAT (pick any)
.rdata$r:0000DBB0                 public ??_R3TiXmlUnknownA@@8
.rdata$r:0000DBB0 ; TiXmlUnknownA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBB0 ??_R3TiXmlUnknownA@@8 db    0           ; DATA XREF: .rdata$r:0000DB90o
.rdata$r:0000DBB0                                         ; .rdata$r:0000DBE8o
.rdata$r:0000DBB1                 db    0
.rdata$r:0000DBB2                 db    0
.rdata$r:0000DBB3                 db    0
.rdata$r:0000DBB4                 db    0
.rdata$r:0000DBB5                 db    0
.rdata$r:0000DBB6                 db    0
.rdata$r:0000DBB7                 db    0
.rdata$r:0000DBB8                 db    3
.rdata$r:0000DBB9                 db    0
.rdata$r:0000DBBA                 db    0
.rdata$r:0000DBBB                 db    0
.rdata$r:0000DBBC                 dd offset ??_R2TiXmlUnknownA@@8 ; TiXmlUnknownA::`RTTI Base Class Array'
.rdata$r:0000DBBC _rdata$r        ends
.rdata$r:0000DBBC
.rdata$r:0000DBC0 ; ===========================================================================
.rdata$r:0000DBC0
.rdata$r:0000DBC0 ; Segment type: Pure data
.rdata$r:0000DBC0 ; Segment permissions: Read
.rdata$r:0000DBC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBC0                 assume cs:_rdata$r
.rdata$r:0000DBC0                 ;org 0DBC0h
.rdata$r:0000DBC0 ; COMDAT (pick any)
.rdata$r:0000DBC0                 public ??_R2TiXmlUnknownA@@8
.rdata$r:0000DBC0 ; TiXmlUnknownA::`RTTI Base Class Array'
.rdata$r:0000DBC0 ??_R2TiXmlUnknownA@@8 dd offset ??_R1A@?0A@EA@TiXmlUnknownA@@8
.rdata$r:0000DBC0                                         ; DATA XREF: .rdata$r:0000DBBCo
.rdata$r:0000DBC0                                         ; TiXmlUnknownA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBC4                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBC8                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBCC                 db    0
.rdata$r:0000DBCD                 align 10h
.rdata$r:0000DBCD _rdata$r        ends
.rdata$r:0000DBCD
.rdata$r:0000DBD0 ; ===========================================================================
.rdata$r:0000DBD0
.rdata$r:0000DBD0 ; Segment type: Pure data
.rdata$r:0000DBD0 ; Segment permissions: Read
.rdata$r:0000DBD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBD0                 assume cs:_rdata$r
.rdata$r:0000DBD0                 ;org 0DBD0h
.rdata$r:0000DBD0 ; COMDAT (pick any)
.rdata$r:0000DBD0                 public ??_R1A@?0A@EA@TiXmlUnknownA@@8
.rdata$r:0000DBD0 ; TiXmlUnknownA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DBD0 ??_R1A@?0A@EA@TiXmlUnknownA@@8 dd offset ??_R0?AVTiXmlUnknownA@@@8
.rdata$r:0000DBD0                                         ; DATA XREF: .rdata$r:TiXmlUnknownA::`RTTI Base Class Array'o
.rdata$r:0000DBD0                                         ; TiXmlUnknownA `RTTI Type Descriptor'
.rdata$r:0000DBD4                 db    2
.rdata$r:0000DBD5                 db    0
.rdata$r:0000DBD6                 db    0
.rdata$r:0000DBD7                 db    0
.rdata$r:0000DBD8                 db    0
.rdata$r:0000DBD9                 db    0
.rdata$r:0000DBDA                 db    0
.rdata$r:0000DBDB                 db    0
.rdata$r:0000DBDC                 db 0FFh
.rdata$r:0000DBDD                 db 0FFh
.rdata$r:0000DBDE                 db 0FFh
.rdata$r:0000DBDF                 db 0FFh
.rdata$r:0000DBE0                 db    0
.rdata$r:0000DBE1                 db    0
.rdata$r:0000DBE2                 db    0
.rdata$r:0000DBE3                 db    0
.rdata$r:0000DBE4                 db  40h ; @
.rdata$r:0000DBE5                 db    0
.rdata$r:0000DBE6                 db    0
.rdata$r:0000DBE7                 db    0
.rdata$r:0000DBE8                 dd offset ??_R3TiXmlUnknownA@@8 ; TiXmlUnknownA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBE8 _rdata$r        ends
.rdata$r:0000DBE8
.rdata$r:0000DBEC ; ===========================================================================
.rdata$r:0000DBEC
.rdata$r:0000DBEC ; Segment type: Pure data
.rdata$r:0000DBEC ; Segment permissions: Read
.rdata$r:0000DBEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBEC                 assume cs:_rdata$r
.rdata$r:0000DBEC                 ;org 0DBECh
.rdata$r:0000DBEC ; COMDAT (pick any)
.rdata$r:0000DBEC                 public ??_R4TiXmlAttributeA@@6B@
.rdata$r:0000DBEC ; const TiXmlAttributeA::`RTTI Complete Object Locator'
.rdata$r:0000DBEC ??_R4TiXmlAttributeA@@6B@ db    0       ; DATA XREF: .rdata:0000CD50o
.rdata$r:0000DBED                 db    0
.rdata$r:0000DBEE                 db    0
.rdata$r:0000DBEF                 db    0
.rdata$r:0000DBF0                 db    0
.rdata$r:0000DBF1                 db    0
.rdata$r:0000DBF2                 db    0
.rdata$r:0000DBF3                 db    0
.rdata$r:0000DBF4                 db    0
.rdata$r:0000DBF5                 db    0
.rdata$r:0000DBF6                 db    0
.rdata$r:0000DBF7                 db    0
.rdata$r:0000DBF8                 dd offset ??_R0?AVTiXmlAttributeA@@@8 ; TiXmlAttributeA `RTTI Type Descriptor'
.rdata$r:0000DBFC                 dd offset ??_R3TiXmlAttributeA@@8 ; TiXmlAttributeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBFC _rdata$r        ends
.rdata$r:0000DBFC
.data$r:0000DC00 ; ===========================================================================
.data$r:0000DC00
.data$r:0000DC00 ; Segment type: Pure data
.data$r:0000DC00 ; Segment permissions: Read/Write
.data$r:0000DC00 _data$r         segment dword public 'DATA' use32
.data$r:0000DC00                 assume cs:_data$r
.data$r:0000DC00                 ;org 0DC00h
.data$r:0000DC00 ; COMDAT (pick any)
.data$r:0000DC00                 public ??_R0?AVTiXmlAttributeA@@@8
.data$r:0000DC00 ; class TiXmlAttributeA `RTTI Type Descriptor'
.data$r:0000DC00 ??_R0?AVTiXmlAttributeA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DC00                                         ; DATA XREF: .rdata$r:0000DBF8o
.data$r:0000DC00                                         ; .rdata$r:TiXmlAttributeA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DC00                                         ; const type_info::`vftable'
.data$r:0000DC04                 align 8
.data$r:0000DC08 a_?avtixmlattri db '.?AVTiXmlAttributeA@@',0
.data$r:0000DC1E                 align 10h
.data$r:0000DC1E _data$r         ends
.data$r:0000DC1E
.rdata$r:0000DC20 ; ===========================================================================
.rdata$r:0000DC20
.rdata$r:0000DC20 ; Segment type: Pure data
.rdata$r:0000DC20 ; Segment permissions: Read
.rdata$r:0000DC20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC20                 assume cs:_rdata$r
.rdata$r:0000DC20                 ;org 0DC20h
.rdata$r:0000DC20 ; COMDAT (pick any)
.rdata$r:0000DC20                 public ??_R3TiXmlAttributeA@@8
.rdata$r:0000DC20 ; TiXmlAttributeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC20 ??_R3TiXmlAttributeA@@8 db    0         ; DATA XREF: .rdata$r:0000DBFCo
.rdata$r:0000DC20                                         ; .rdata$r:0000DC54o
.rdata$r:0000DC21                 db    0
.rdata$r:0000DC22                 db    0
.rdata$r:0000DC23                 db    0
.rdata$r:0000DC24                 db    0
.rdata$r:0000DC25                 db    0
.rdata$r:0000DC26                 db    0
.rdata$r:0000DC27                 db    0
.rdata$r:0000DC28                 db    2
.rdata$r:0000DC29                 db    0
.rdata$r:0000DC2A                 db    0
.rdata$r:0000DC2B                 db    0
.rdata$r:0000DC2C                 dd offset ??_R2TiXmlAttributeA@@8 ; TiXmlAttributeA::`RTTI Base Class Array'
.rdata$r:0000DC2C _rdata$r        ends
.rdata$r:0000DC2C
.rdata$r:0000DC30 ; ===========================================================================
.rdata$r:0000DC30
.rdata$r:0000DC30 ; Segment type: Pure data
.rdata$r:0000DC30 ; Segment permissions: Read
.rdata$r:0000DC30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC30                 assume cs:_rdata$r
.rdata$r:0000DC30                 ;org 0DC30h
.rdata$r:0000DC30 ; COMDAT (pick any)
.rdata$r:0000DC30                 public ??_R2TiXmlAttributeA@@8
.rdata$r:0000DC30 ; TiXmlAttributeA::`RTTI Base Class Array'
.rdata$r:0000DC30 ??_R2TiXmlAttributeA@@8 dd offset ??_R1A@?0A@EA@TiXmlAttributeA@@8
.rdata$r:0000DC30                                         ; DATA XREF: .rdata$r:0000DC2Co
.rdata$r:0000DC30                                         ; TiXmlAttributeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC34                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC38                 db    0
.rdata$r:0000DC39                 align 4
.rdata$r:0000DC39 _rdata$r        ends
.rdata$r:0000DC39
.rdata$r:0000DC3C ; ===========================================================================
.rdata$r:0000DC3C
.rdata$r:0000DC3C ; Segment type: Pure data
.rdata$r:0000DC3C ; Segment permissions: Read
.rdata$r:0000DC3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC3C                 assume cs:_rdata$r
.rdata$r:0000DC3C                 ;org 0DC3Ch
.rdata$r:0000DC3C ; COMDAT (pick any)
.rdata$r:0000DC3C                 public ??_R1A@?0A@EA@TiXmlAttributeA@@8
.rdata$r:0000DC3C ; TiXmlAttributeA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DC3C ??_R1A@?0A@EA@TiXmlAttributeA@@8 dd offset ??_R0?AVTiXmlAttributeA@@@8
.rdata$r:0000DC3C                                         ; DATA XREF: .rdata$r:TiXmlAttributeA::`RTTI Base Class Array'o
.rdata$r:0000DC3C                                         ; TiXmlAttributeA `RTTI Type Descriptor'
.rdata$r:0000DC40                 db    1
.rdata$r:0000DC41                 db    0
.rdata$r:0000DC42                 db    0
.rdata$r:0000DC43                 db    0
.rdata$r:0000DC44                 db    0
.rdata$r:0000DC45                 db    0
.rdata$r:0000DC46                 db    0
.rdata$r:0000DC47                 db    0
.rdata$r:0000DC48                 db 0FFh
.rdata$r:0000DC49                 db 0FFh
.rdata$r:0000DC4A                 db 0FFh
.rdata$r:0000DC4B                 db 0FFh
.rdata$r:0000DC4C                 db    0
.rdata$r:0000DC4D                 db    0
.rdata$r:0000DC4E                 db    0
.rdata$r:0000DC4F                 db    0
.rdata$r:0000DC50                 db  40h ; @
.rdata$r:0000DC51                 db    0
.rdata$r:0000DC52                 db    0
.rdata$r:0000DC53                 db    0
.rdata$r:0000DC54                 dd offset ??_R3TiXmlAttributeA@@8 ; TiXmlAttributeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC54 _rdata$r        ends
.rdata$r:0000DC54
.rdata$r:0000DC58 ; ===========================================================================
.rdata$r:0000DC58
.rdata$r:0000DC58 ; Segment type: Pure data
.rdata$r:0000DC58 ; Segment permissions: Read
.rdata$r:0000DC58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC58                 assume cs:_rdata$r
.rdata$r:0000DC58                 ;org 0DC58h
.rdata$r:0000DC58 ; COMDAT (pick any)
.rdata$r:0000DC58                 public ??_R4TiXmlTextA@@6B@
.rdata$r:0000DC58 ; const TiXmlTextA::`RTTI Complete Object Locator'
.rdata$r:0000DC58 ??_R4TiXmlTextA@@6B@ db    0            ; DATA XREF: .rdata:0000CDA4o
.rdata$r:0000DC59                 db    0
.rdata$r:0000DC5A                 db    0
.rdata$r:0000DC5B                 db    0
.rdata$r:0000DC5C                 db    0
.rdata$r:0000DC5D                 db    0
.rdata$r:0000DC5E                 db    0
.rdata$r:0000DC5F                 db    0
.rdata$r:0000DC60                 db    0
.rdata$r:0000DC61                 db    0
.rdata$r:0000DC62                 db    0
.rdata$r:0000DC63                 db    0
.rdata$r:0000DC64                 dd offset ??_R0?AVTiXmlTextA@@@8 ; TiXmlTextA `RTTI Type Descriptor'
.rdata$r:0000DC68                 dd offset ??_R3TiXmlTextA@@8 ; TiXmlTextA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC68 _rdata$r        ends
.rdata$r:0000DC68
.data$r:0000DC6C ; ===========================================================================
.data$r:0000DC6C
.data$r:0000DC6C ; Segment type: Pure data
.data$r:0000DC6C ; Segment permissions: Read/Write
.data$r:0000DC6C _data$r         segment dword public 'DATA' use32
.data$r:0000DC6C                 assume cs:_data$r
.data$r:0000DC6C                 ;org 0DC6Ch
.data$r:0000DC6C ; COMDAT (pick any)
.data$r:0000DC6C                 public ??_R0?AVTiXmlTextA@@@8
.data$r:0000DC6C ; class TiXmlTextA `RTTI Type Descriptor'
.data$r:0000DC6C ??_R0?AVTiXmlTextA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DC6C                                         ; DATA XREF: .rdata$r:0000DC64o
.data$r:0000DC6C                                         ; .rdata$r:TiXmlTextA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DC6C                                         ; const type_info::`vftable'
.data$r:0000DC70                 db    0
.data$r:0000DC71                 db    0
.data$r:0000DC72                 db    0
.data$r:0000DC73                 db    0
.data$r:0000DC74                 db  2Eh ; .
.data$r:0000DC75                 db  3Fh ; ?
.data$r:0000DC76                 db  41h ; A
.data$r:0000DC77                 db  56h ; V
.data$r:0000DC78                 db  54h ; T
.data$r:0000DC79                 db  69h ; i
.data$r:0000DC7A                 db  58h ; X
.data$r:0000DC7B                 db  6Dh ; m
.data$r:0000DC7C                 db  6Ch ; l
.data$r:0000DC7D                 db  54h ; T
.data$r:0000DC7E                 db  65h ; e
.data$r:0000DC7F                 db  78h ; x
.data$r:0000DC80                 db  74h ; t
.data$r:0000DC81                 db  41h ; A
.data$r:0000DC82                 db  40h ; @
.data$r:0000DC83                 db  40h ; @
.data$r:0000DC84                 db    0
.data$r:0000DC85                 align 4
.data$r:0000DC85 _data$r         ends
.data$r:0000DC85
.rdata$r:0000DC88 ; ===========================================================================
.rdata$r:0000DC88
.rdata$r:0000DC88 ; Segment type: Pure data
.rdata$r:0000DC88 ; Segment permissions: Read
.rdata$r:0000DC88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC88                 assume cs:_rdata$r
.rdata$r:0000DC88                 ;org 0DC88h
.rdata$r:0000DC88 ; COMDAT (pick any)
.rdata$r:0000DC88                 public ??_R3TiXmlTextA@@8
.rdata$r:0000DC88 ; TiXmlTextA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC88 ??_R3TiXmlTextA@@8 db    0              ; DATA XREF: .rdata$r:0000DC68o
.rdata$r:0000DC88                                         ; .rdata$r:0000DCC0o
.rdata$r:0000DC89                 db    0
.rdata$r:0000DC8A                 db    0
.rdata$r:0000DC8B                 db    0
.rdata$r:0000DC8C                 db    0
.rdata$r:0000DC8D                 db    0
.rdata$r:0000DC8E                 db    0
.rdata$r:0000DC8F                 db    0
.rdata$r:0000DC90                 db    3
.rdata$r:0000DC91                 db    0
.rdata$r:0000DC92                 db    0
.rdata$r:0000DC93                 db    0
.rdata$r:0000DC94                 dd offset ??_R2TiXmlTextA@@8 ; TiXmlTextA::`RTTI Base Class Array'
.rdata$r:0000DC94 _rdata$r        ends
.rdata$r:0000DC94
.rdata$r:0000DC98 ; ===========================================================================
.rdata$r:0000DC98
.rdata$r:0000DC98 ; Segment type: Pure data
.rdata$r:0000DC98 ; Segment permissions: Read
.rdata$r:0000DC98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC98                 assume cs:_rdata$r
.rdata$r:0000DC98                 ;org 0DC98h
.rdata$r:0000DC98 ; COMDAT (pick any)
.rdata$r:0000DC98                 public ??_R2TiXmlTextA@@8
.rdata$r:0000DC98 ; TiXmlTextA::`RTTI Base Class Array'
.rdata$r:0000DC98 ??_R2TiXmlTextA@@8 dd offset ??_R1A@?0A@EA@TiXmlTextA@@8
.rdata$r:0000DC98                                         ; DATA XREF: .rdata$r:0000DC94o
.rdata$r:0000DC98                                         ; TiXmlTextA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC9C                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DCA0                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DCA4                 db    0
.rdata$r:0000DCA5                 align 4
.rdata$r:0000DCA5 _rdata$r        ends
.rdata$r:0000DCA5
.rdata$r:0000DCA8 ; ===========================================================================
.rdata$r:0000DCA8
.rdata$r:0000DCA8 ; Segment type: Pure data
.rdata$r:0000DCA8 ; Segment permissions: Read
.rdata$r:0000DCA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCA8                 assume cs:_rdata$r
.rdata$r:0000DCA8                 ;org 0DCA8h
.rdata$r:0000DCA8 ; COMDAT (pick any)
.rdata$r:0000DCA8                 public ??_R1A@?0A@EA@TiXmlTextA@@8
.rdata$r:0000DCA8 ; TiXmlTextA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DCA8 ??_R1A@?0A@EA@TiXmlTextA@@8 dd offset ??_R0?AVTiXmlTextA@@@8
.rdata$r:0000DCA8                                         ; DATA XREF: .rdata$r:TiXmlTextA::`RTTI Base Class Array'o
.rdata$r:0000DCA8                                         ; TiXmlTextA `RTTI Type Descriptor'
.rdata$r:0000DCAC                 db    2
.rdata$r:0000DCAD                 db    0
.rdata$r:0000DCAE                 db    0
.rdata$r:0000DCAF                 db    0
.rdata$r:0000DCB0                 db    0
.rdata$r:0000DCB1                 db    0
.rdata$r:0000DCB2                 db    0
.rdata$r:0000DCB3                 db    0
.rdata$r:0000DCB4                 db 0FFh
.rdata$r:0000DCB5                 db 0FFh
.rdata$r:0000DCB6                 db 0FFh
.rdata$r:0000DCB7                 db 0FFh
.rdata$r:0000DCB8                 db    0
.rdata$r:0000DCB9                 db    0
.rdata$r:0000DCBA                 db    0
.rdata$r:0000DCBB                 db    0
.rdata$r:0000DCBC                 db  40h ; @
.rdata$r:0000DCBD                 db    0
.rdata$r:0000DCBE                 db    0
.rdata$r:0000DCBF                 db    0
.rdata$r:0000DCC0                 dd offset ??_R3TiXmlTextA@@8 ; TiXmlTextA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCC0 _rdata$r        ends
.rdata$r:0000DCC0
.rdata$r:0000DCC4 ; ===========================================================================
.rdata$r:0000DCC4
.rdata$r:0000DCC4 ; Segment type: Pure data
.rdata$r:0000DCC4 ; Segment permissions: Read
.rdata$r:0000DCC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCC4                 assume cs:_rdata$r
.rdata$r:0000DCC4                 ;org 0DCC4h
.rdata$r:0000DCC4 ; COMDAT (pick any)
.rdata$r:0000DCC4                 public ??_R4TiXmlDeclarationA@@6B@
.rdata$r:0000DCC4 ; const TiXmlDeclarationA::`RTTI Complete Object Locator'
.rdata$r:0000DCC4 ??_R4TiXmlDeclarationA@@6B@ db    0     ; DATA XREF: .rdata:0000CDC4o
.rdata$r:0000DCC5                 db    0
.rdata$r:0000DCC6                 db    0
.rdata$r:0000DCC7                 db    0
.rdata$r:0000DCC8                 db    0
.rdata$r:0000DCC9                 db    0
.rdata$r:0000DCCA                 db    0
.rdata$r:0000DCCB                 db    0
.rdata$r:0000DCCC                 db    0
.rdata$r:0000DCCD                 db    0
.rdata$r:0000DCCE                 db    0
.rdata$r:0000DCCF                 db    0
.rdata$r:0000DCD0                 dd offset ??_R0?AVTiXmlDeclarationA@@@8 ; TiXmlDeclarationA `RTTI Type Descriptor'
.rdata$r:0000DCD4                 dd offset ??_R3TiXmlDeclarationA@@8 ; TiXmlDeclarationA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCD4 _rdata$r        ends
.rdata$r:0000DCD4
.data$r:0000DCD8 ; ===========================================================================
.data$r:0000DCD8
.data$r:0000DCD8 ; Segment type: Pure data
.data$r:0000DCD8 ; Segment permissions: Read/Write
.data$r:0000DCD8 _data$r         segment dword public 'DATA' use32
.data$r:0000DCD8                 assume cs:_data$r
.data$r:0000DCD8                 ;org 0DCD8h
.data$r:0000DCD8 ; COMDAT (pick any)
.data$r:0000DCD8                 public ??_R0?AVTiXmlDeclarationA@@@8
.data$r:0000DCD8 ; class TiXmlDeclarationA `RTTI Type Descriptor'
.data$r:0000DCD8 ??_R0?AVTiXmlDeclarationA@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DCD8                                         ; DATA XREF: .rdata$r:0000DCD0o
.data$r:0000DCD8                                         ; .rdata$r:TiXmlDeclarationA::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DCD8                                         ; const type_info::`vftable'
.data$r:0000DCDC                 align 10h
.data$r:0000DCE0 a_?avtixmldecla db '.?AVTiXmlDeclarationA@@',0
.data$r:0000DCE0 _data$r         ends
.data$r:0000DCE0
.rdata$r:0000DCF8 ; ===========================================================================
.rdata$r:0000DCF8
.rdata$r:0000DCF8 ; Segment type: Pure data
.rdata$r:0000DCF8 ; Segment permissions: Read
.rdata$r:0000DCF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCF8                 assume cs:_rdata$r
.rdata$r:0000DCF8                 ;org 0DCF8h
.rdata$r:0000DCF8 ; COMDAT (pick any)
.rdata$r:0000DCF8                 public ??_R3TiXmlDeclarationA@@8
.rdata$r:0000DCF8 ; TiXmlDeclarationA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCF8 ??_R3TiXmlDeclarationA@@8 db    0       ; DATA XREF: .rdata$r:0000DCD4o
.rdata$r:0000DCF8                                         ; .rdata$r:0000DD30o
.rdata$r:0000DCF9                 db    0
.rdata$r:0000DCFA                 db    0
.rdata$r:0000DCFB                 db    0
.rdata$r:0000DCFC                 db    0
.rdata$r:0000DCFD                 db    0
.rdata$r:0000DCFE                 db    0
.rdata$r:0000DCFF                 db    0
.rdata$r:0000DD00                 db    3
.rdata$r:0000DD01                 db    0
.rdata$r:0000DD02                 db    0
.rdata$r:0000DD03                 db    0
.rdata$r:0000DD04                 dd offset ??_R2TiXmlDeclarationA@@8 ; TiXmlDeclarationA::`RTTI Base Class Array'
.rdata$r:0000DD04 _rdata$r        ends
.rdata$r:0000DD04
.rdata$r:0000DD08 ; ===========================================================================
.rdata$r:0000DD08
.rdata$r:0000DD08 ; Segment type: Pure data
.rdata$r:0000DD08 ; Segment permissions: Read
.rdata$r:0000DD08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD08                 assume cs:_rdata$r
.rdata$r:0000DD08                 ;org 0DD08h
.rdata$r:0000DD08 ; COMDAT (pick any)
.rdata$r:0000DD08                 public ??_R2TiXmlDeclarationA@@8
.rdata$r:0000DD08 ; TiXmlDeclarationA::`RTTI Base Class Array'
.rdata$r:0000DD08 ??_R2TiXmlDeclarationA@@8 dd offset ??_R1A@?0A@EA@TiXmlDeclarationA@@8
.rdata$r:0000DD08                                         ; DATA XREF: .rdata$r:0000DD04o
.rdata$r:0000DD08                                         ; TiXmlDeclarationA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD0C                 dd offset ??_R1A@?0A@EA@TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD10                 dd offset ??_R1A@?0A@EA@TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD14                 db    0
.rdata$r:0000DD15                 align 4
.rdata$r:0000DD15 _rdata$r        ends
.rdata$r:0000DD15
.rdata$r:0000DD18 ; ===========================================================================
.rdata$r:0000DD18
.rdata$r:0000DD18 ; Segment type: Pure data
.rdata$r:0000DD18 ; Segment permissions: Read
.rdata$r:0000DD18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD18                 assume cs:_rdata$r
.rdata$r:0000DD18                 ;org 0DD18h
.rdata$r:0000DD18 ; COMDAT (pick any)
.rdata$r:0000DD18                 public ??_R1A@?0A@EA@TiXmlDeclarationA@@8
.rdata$r:0000DD18 ; TiXmlDeclarationA::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DD18 ??_R1A@?0A@EA@TiXmlDeclarationA@@8 dd offset ??_R0?AVTiXmlDeclarationA@@@8
.rdata$r:0000DD18                                         ; DATA XREF: .rdata$r:TiXmlDeclarationA::`RTTI Base Class Array'o
.rdata$r:0000DD18                                         ; TiXmlDeclarationA `RTTI Type Descriptor'
.rdata$r:0000DD1C                 db    2
.rdata$r:0000DD1D                 db    0
.rdata$r:0000DD1E                 db    0
.rdata$r:0000DD1F                 db    0
.rdata$r:0000DD20                 db    0
.rdata$r:0000DD21                 db    0
.rdata$r:0000DD22                 db    0
.rdata$r:0000DD23                 db    0
.rdata$r:0000DD24                 db 0FFh
.rdata$r:0000DD25                 db 0FFh
.rdata$r:0000DD26                 db 0FFh
.rdata$r:0000DD27                 db 0FFh
.rdata$r:0000DD28                 db    0
.rdata$r:0000DD29                 db    0
.rdata$r:0000DD2A                 db    0
.rdata$r:0000DD2B                 db    0
.rdata$r:0000DD2C                 db  40h ; @
.rdata$r:0000DD2D                 db    0
.rdata$r:0000DD2E                 db    0
.rdata$r:0000DD2F                 db    0
.rdata$r:0000DD30                 dd offset ??_R3TiXmlDeclarationA@@8 ; TiXmlDeclarationA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD30 _rdata$r        ends
.rdata$r:0000DD30
.rdata$r:0000DD34 ; ===========================================================================
.rdata$r:0000DD34
.rdata$r:0000DD34 ; Segment type: Pure data
.rdata$r:0000DD34 ; Segment permissions: Read
.rdata$r:0000DD34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD34                 assume cs:_rdata$r
.rdata$r:0000DD34                 ;org 0DD34h
.rdata$r:0000DD34 ; COMDAT (pick any)
.rdata$r:0000DD34                 public ??_R4TiXmlBaseA@@6B@
.rdata$r:0000DD34 ; const TiXmlBaseA::`RTTI Complete Object Locator'
.rdata$r:0000DD34 ??_R4TiXmlBaseA@@6B@ db    0            ; DATA XREF: .rdata:0000CD1Co
.rdata$r:0000DD35                 db    0
.rdata$r:0000DD36                 db    0
.rdata$r:0000DD37                 db    0
.rdata$r:0000DD38                 db    0
.rdata$r:0000DD39                 db    0
.rdata$r:0000DD3A                 db    0
.rdata$r:0000DD3B                 db    0
.rdata$r:0000DD3C                 db    0
.rdata$r:0000DD3D                 db    0
.rdata$r:0000DD3E                 db    0
.rdata$r:0000DD3F                 db    0
.rdata$r:0000DD40                 dd offset ??_R0?AVTiXmlBaseA@@@8 ; TiXmlBaseA `RTTI Type Descriptor'
.rdata$r:0000DD44                 dd offset ??_R3TiXmlBaseA@@8 ; TiXmlBaseA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD44 _rdata$r        ends
.rdata$r:0000DD44
.rdata$r:0000DD48 ; ===========================================================================
.rdata$r:0000DD48
.rdata$r:0000DD48 ; Segment type: Pure data
.rdata$r:0000DD48 ; Segment permissions: Read
.rdata$r:0000DD48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD48                 assume cs:_rdata$r
.rdata$r:0000DD48                 ;org 0DD48h
.rdata$r:0000DD48 ; COMDAT (pick any)
.rdata$r:0000DD48                 public ??_R4TiXmlNodeA@@6B@
.rdata$r:0000DD48 ; const TiXmlNodeA::`RTTI Complete Object Locator'
.rdata$r:0000DD48 ??_R4TiXmlNodeA@@6B@ db    0            ; DATA XREF: .rdata:0000CD30o
.rdata$r:0000DD49                 db    0
.rdata$r:0000DD4A                 db    0
.rdata$r:0000DD4B                 db    0
.rdata$r:0000DD4C                 db    0
.rdata$r:0000DD4D                 db    0
.rdata$r:0000DD4E                 db    0
.rdata$r:0000DD4F                 db    0
.rdata$r:0000DD50                 db    0
.rdata$r:0000DD51                 db    0
.rdata$r:0000DD52                 db    0
.rdata$r:0000DD53                 db    0
.rdata$r:0000DD54                 dd offset ??_R0?AVTiXmlNodeA@@@8 ; TiXmlNodeA `RTTI Type Descriptor'
.rdata$r:0000DD58                 dd offset ??_R3TiXmlNodeA@@8 ; TiXmlNodeA::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD58 _rdata$r        ends
.rdata$r:0000DD58
.rdata:0000DD5C ; ===========================================================================
.rdata:0000DD5C
.rdata:0000DD5C ; Segment type: Pure data
.rdata:0000DD5C ; Segment permissions: Read
.rdata:0000DD5C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000DD5C _rdata          segment para public 'DATA' use32
.rdata:0000DD5C                 assume cs:_rdata
.rdata:0000DD5C                 ;org 0DD5Ch
.rdata:0000DD5C ; COMDAT (pick any)
.rdata:0000DD5C                 public __real@0000000000000000
.rdata:0000DD5C __real@0000000000000000 dq 0            ; DATA XREF: TiXmlElementA::Attribute(char const *,double *)+3Ar
.rdata:0000DD5C _rdata          ends
.rdata:0000DD5C
.CRT$XCU:0000DD64 ; ===========================================================================
.CRT$XCU:0000DD64
.CRT$XCU:0000DD64 ; Segment type: Pure data
.CRT$XCU:0000DD64 ; Segment permissions: Read
.CRT$XCU:0000DD64 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD64                 assume cs:_CRT$XCU
.CRT$XCU:0000DD64                 ;org 0DD64h
.CRT$XCU:0000DD64 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000DD68 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000DD68 _CRT$XCU        ends
.CRT$XCU:0000DD68
.CRT$XCU:0000DD6C ; ===========================================================================
.CRT$XCU:0000DD6C
.CRT$XCU:0000DD6C ; Segment type: Pure data
.CRT$XCU:0000DD6C ; Segment permissions: Read
.CRT$XCU:0000DD6C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD6C                 assume cs:_CRT$XCU
.CRT$XCU:0000DD6C                 ;org 0DD6Ch
.CRT$XCU:0000DD6C ; COMDAT (pick associative to section at CB2C)
.CRT$XCU:0000DD6C ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000DD6C ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000DD6C _CRT$XCU        ends
.CRT$XCU:0000DD6C
.CRT$XCU:0000DD70 ; ===========================================================================
.CRT$XCU:0000DD70
.CRT$XCU:0000DD70 ; Segment type: Pure data
.CRT$XCU:0000DD70 ; Segment permissions: Read
.CRT$XCU:0000DD70 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD70                 assume cs:_CRT$XCU
.CRT$XCU:0000DD70                 ;org 0DD70h
.CRT$XCU:0000DD70 ; COMDAT (pick associative to section at CB30)
.CRT$XCU:0000DD70 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000DD70 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000DD70 _CRT$XCU        ends
.CRT$XCU:0000DD70
.CRT$XCU:0000DD74 ; ===========================================================================
.CRT$XCU:0000DD74
.CRT$XCU:0000DD74 ; Segment type: Pure data
.CRT$XCU:0000DD74 ; Segment permissions: Read
.CRT$XCU:0000DD74 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD74                 assume cs:_CRT$XCU
.CRT$XCU:0000DD74                 ;org 0DD74h
.CRT$XCU:0000DD74 ; COMDAT (pick associative to section at CB34)
.CRT$XCU:0000DD74 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000DD74 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000DD74 _CRT$XCU        ends
.CRT$XCU:0000DD74
.CRT$XCU:0000DD78 ; ===========================================================================
.CRT$XCU:0000DD78
.CRT$XCU:0000DD78 ; Segment type: Pure data
.CRT$XCU:0000DD78 ; Segment permissions: Read
.CRT$XCU:0000DD78 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD78                 assume cs:_CRT$XCU
.CRT$XCU:0000DD78                 ;org 0DD78h
.CRT$XCU:0000DD78 ; COMDAT (pick associative to section at CD14)
.CRT$XCU:0000DD78 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000DD78 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000DD78 _CRT$XCU        ends
.CRT$XCU:0000DD78
.CRT$XCU:0000DD7C ; ===========================================================================
.CRT$XCU:0000DD7C
.CRT$XCU:0000DD7C ; Segment type: Pure data
.CRT$XCU:0000DD7C ; Segment permissions: Read
.CRT$XCU:0000DD7C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD7C                 assume cs:_CRT$XCU
.CRT$XCU:0000DD7C                 ;org 0DD7Ch
.CRT$XCU:0000DD7C ; COMDAT (pick associative to section at CD18)
.CRT$XCU:0000DD7C ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000DD7C ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000DD7C _CRT$XCU        ends
.CRT$XCU:0000DD7C
.CRT$XCU:0000DD80 ; ===========================================================================
.CRT$XCU:0000DD80
.CRT$XCU:0000DD80 ; Segment type: Pure data
.CRT$XCU:0000DD80 ; Segment permissions: Read
.CRT$XCU:0000DD80 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD80                 assume cs:_CRT$XCU
.CRT$XCU:0000DD80                 ;org 0DD80h
.CRT$XCU:0000DD80 ; COMDAT (pick associative to section at CF40)
.CRT$XCU:0000DD80 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000DD80 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000DD80 _CRT$XCU        ends
.CRT$XCU:0000DD80
.CRT$XCU:0000DD84 ; ===========================================================================
.CRT$XCU:0000DD84
.CRT$XCU:0000DD84 ; Segment type: Pure data
.CRT$XCU:0000DD84 ; Segment permissions: Read
.CRT$XCU:0000DD84 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DD84                 assume cs:_CRT$XCU
.CRT$XCU:0000DD84                 ;org 0DD84h
.CRT$XCU:0000DD84 ; COMDAT (pick associative to section at CF44)
.CRT$XCU:0000DD84 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000DD84 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000DD84 _CRT$XCU        ends
.CRT$XCU:0000DD84
UNDEF:0000DD90 ; ===========================================================================
UNDEF:0000DD90
UNDEF:0000DD90 ; Segment type: Externs
UNDEF:0000DD90 ; UNDEF
UNDEF:0000DD90                 extrn __purecall:near   ; DATA XREF: .rdata:0000C928o
UNDEF:0000DD90                                         ; .rdata:0000C92Co ...
UNDEF:0000DD94 ; void *__cdecl operator new(unsigned int)
UNDEF:0000DD94                 extrn ??2@YAPAXI@Z:near ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+50p
UNDEF:0000DD94                                         ; TiXmlElementA::Clone(void)+2Dp ...
UNDEF:0000DD98 ; void __cdecl operator delete(void *)
UNDEF:0000DD98                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?SetAttribute@TiXmlElementA@@QAEXPBD0@Z$0+4p
UNDEF:0000DD98                                         ; __unwindfunclet$?Clone@TiXmlElementA@@UBEPAVTiXmlNodeA@@XZ$0+4p ...
UNDEF:0000DD9C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000DD9C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000DD9C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000DDA0 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000DDA0                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000DDA0                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+2Ap
UNDEF:0000DDA0                                         ; std::_Locinfo::_Locinfo(char const *)+2Dp ...
UNDEF:0000DDA4 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000DDA4                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000DDA4                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+E0p
UNDEF:0000DDA4                                         ; __unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0+3j ...
UNDEF:0000DDA8 ; double __cdecl atof(const char *String)
UNDEF:0000DDA8                 extrn _atof:near        ; CODE XREF: TiXmlAttributeA::DoubleValue(void)+13p
UNDEF:0000DDA8                                         ; TiXmlElementA::Attribute(char const *,double *)+28p
UNDEF:0000DDAC ; int __cdecl atoi(const char *Str)
UNDEF:0000DDAC                 extrn _atoi:near        ; CODE XREF: TiXmlAttributeA::IntValue(void)+13p
UNDEF:0000DDAC                                         ; TiXmlElementA::Attribute(char const *,int *)+28p
UNDEF:0000DDB0 ; void __cdecl free(void *Memory)
UNDEF:0000DDB0                 extrn _free:near        ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+1Bp
UNDEF:0000DDB0                                         ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+1Bp ...
UNDEF:0000DDB4                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000DDB8 ; FILE *__cdecl _wfopen(const wchar_t *Filename, const wchar_t *Mode)
UNDEF:0000DDB8                 extrn __wfopen:near     ; CODE XREF: TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+53p
UNDEF:0000DDB8                                         ; TiXmlDocumentA::SaveUnicodeFilePath(wchar_t const *)+12p
UNDEF:0000DDBC ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000DDBC                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000DDC0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000DDC0                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000DDC0                                         ; std::ctype<char>::do_narrow(char const *,char const *,char,char *)+46p ...
UNDEF:0000DDC4 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
UNDEF:0000DDC4                 extrn _memchr:near      ; CODE XREF: std::char_traits<char>::find(char const *,uint,char const &)+22p
UNDEF:0000DDC8 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000DDC8                 extrn _memcmp:near      ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+1Fp
UNDEF:0000DDCC ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:0000DDCC                 extrn _strcpy:near      ; CODE XREF: TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Fp
UNDEF:0000DDD0 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000DDD0                 extrn _strlen:near      ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+213p
UNDEF:0000DDD0                                         ; std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000DDD4 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:0000DDD4                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:0000DDD4                                         ; CODE XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
UNDEF:0000DDD4                                         ; std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0000DDD8 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000DDD8                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000DDD8                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0000DDD8                                         ; DATA XREF: .xdata$x:0000C90Co
UNDEF:0000DDDC ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:0000DDDC                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:0000DDDC                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:0000DDDC                                         ; __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0+3j ...
UNDEF:0000DDE0 ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:0000DDE0                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:0000DDE0                                         ; DATA XREF: .rdata:0000C87Co
UNDEF:0000DDE0                                         ; .rdata:0000CA80o ...
UNDEF:0000DDE4 ; bool __cdecl std::uncaught_exception()
UNDEF:0000DDE4                 extrn ?uncaught_exception@std@@YA_NXZ:near
UNDEF:0000DDE4                                         ; CODE XREF: std::basic_ostream<char,std::char_traits<char>>::sentry::~sentry(void)+2Dp
UNDEF:0000DDE8 ; void __cdecl operator delete[](void *)
UNDEF:0000DDE8                 extrn ??_V@YAXPAX@Z:near
UNDEF:0000DDE8                                         ; CODE XREF: TiXmlBaseA::StringToBuffer::~StringToBuffer(void)+15p
UNDEF:0000DDE8                                         ; std::ctype<char>::_Tidy(void)+39p
UNDEF:0000DDEC ; void *__cdecl operator new[](unsigned int)
UNDEF:0000DDEC                 extrn ??_U@YAPAXI@Z:near
UNDEF:0000DDEC                                         ; CODE XREF: TiXmlBaseA::StringToBuffer::StringToBuffer(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+15p
UNDEF:0000DDF0 ; int __cdecl fclose(FILE *File)
UNDEF:0000DDF0                 extrn _fclose:near      ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+E0p
UNDEF:0000DDF0                                         ; TiXmlDocumentA::LoadFile(char const *)+157p ...
UNDEF:0000DDF4 ; char *__cdecl fgets(char *Buf, int MaxCount, FILE *File)
UNDEF:0000DDF4                 extrn _fgets:near       ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+130p
UNDEF:0000DDF4                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+113p
UNDEF:0000DDF8 ; FILE *__cdecl fopen(const char *Filename, const char *Mode)
UNDEF:0000DDF8                 extrn _fopen:near       ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+70p
UNDEF:0000DDF8                                         ; TiXmlDocumentA::SaveFile(char const *)+12p
UNDEF:0000DDFC ; int fprintf(FILE *File, const char *Format, ...)
UNDEF:0000DDFC                 extrn _fprintf:near     ; CODE XREF: TiXmlAttributeA::Print(_iobuf *,int)+E6p
UNDEF:0000DDFC                                         ; TiXmlAttributeA::Print(_iobuf *,int)+10Bp ...
UNDEF:0000DE00 ; int __cdecl fputs(const char *Str, FILE *File)
UNDEF:0000DE00                 extrn _fputs:near       ; CODE XREF: TiXmlCommentA::Print(_iobuf *,int)+2Cp
UNDEF:0000DE04 ; int __cdecl fseek(FILE *File, __int32 Offset, int Origin)
UNDEF:0000DE04                 extrn _fseek:near       ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+A0p
UNDEF:0000DE04                                         ; TiXmlDocumentA::LoadFile(char const *)+C8p ...
UNDEF:0000DE08 ; __int32 __cdecl ftell(FILE *File)
UNDEF:0000DE08                 extrn _ftell:near       ; CODE XREF: TiXmlDocumentA::LoadFile(char const *)+AFp
UNDEF:0000DE08                                         ; TiXmlDocumentA::LoadUnicodeFilePath(wchar_t const *)+92p
UNDEF:0000DE0C ; int sscanf(const char *Src, const char *Format, ...)
UNDEF:0000DE0C                 extrn _sscanf:near      ; CODE XREF: TiXmlAttributeA::QueryIntValue(int *)+1Cp
UNDEF:0000DE0C                                         ; TiXmlAttributeA::QueryDoubleValue(double *)+1Cp
UNDEF:0000DE10 ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:0000DE10                 extrn _sprintf:near     ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+207p
UNDEF:0000DE10                                         ; TiXmlAttributeA::SetIntValue(int)+20p ...
UNDEF:0000DE14                 extrn __free_dbg:near   ; CODE XREF: std::_Yarn<char>::_Tidy(void)+17p
UNDEF:0000DE14                                         ; std::_Yarn<wchar_t>::_Tidy(void)+17p
UNDEF:0000DE18 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000DE18                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000DE18                                         ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+16p
UNDEF:0000DE18                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p ...
UNDEF:0000DE1C ; void __cdecl std::_Xbad_alloc()
UNDEF:0000DE1C                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000DE1C                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_43BEp
UNDEF:0000DE1C                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_4400p
UNDEF:0000DE20 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000DE20                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000DE20                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000DE24 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000DE24                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000DE24                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000DE28 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:0000DE28                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE28                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:0000DE2C ; _DWORD __thiscall std::bad_cast::bad_cast(std::bad_cast *__hidden this, const char *)
UNDEF:0000DE2C                 extrn ??0bad_cast@std@@QAE@PBD@Z:near
UNDEF:0000DE2C                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+8Dp
UNDEF:0000DE30 ; public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)
UNDEF:0000DE30                 extrn ??0bad_cast@std@@QAE@ABV01@@Z:near
UNDEF:0000DE30                                         ; DATA XREF: .xdata$x:0000D03Co
UNDEF:0000DE34 ; public: virtual __thiscall std::bad_cast::~bad_cast(void)
UNDEF:0000DE34                 extrn ??1bad_cast@std@@UAE@XZ:near
UNDEF:0000DE34                                         ; DATA XREF: .xdata$x:0000CFF0o
UNDEF:0000DE38                 extrn __Getctype:near   ; CODE XREF: std::_Locinfo::_Getctype(void)+Dp
UNDEF:0000DE3C                 extrn __Tolower:near    ; CODE XREF: std::ctype<char>::do_tolower(char)+13p
UNDEF:0000DE3C                                         ; std::ctype<char>::do_tolower(char *,char const *)+42p
UNDEF:0000DE40                 extrn __Toupper:near    ; CODE XREF: std::ctype<char>::do_toupper(char)+13p
UNDEF:0000DE40                                         ; std::ctype<char>::do_toupper(char *,char const *)+42p
UNDEF:0000DE44 ; void __cdecl static std::_Locinfo::_Locinfo_ctor(struct std::_Locinfo *, const char *)
UNDEF:0000DE44                 extrn ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:near
UNDEF:0000DE44                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+BCp
UNDEF:0000DE48 ; void __cdecl static std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *)
UNDEF:0000DE48                 extrn ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:near
UNDEF:0000DE48                                         ; CODE XREF: std::_Locinfo::~_Locinfo(void)+31p
UNDEF:0000DE4C ; void *__cdecl operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
UNDEF:0000DE4C                 extrn ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z:near
UNDEF:0000DE4C                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+21p
UNDEF:0000DE4C                                         ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)+13p ...
UNDEF:0000DE50 ; const struct std::_DebugHeapTag_t *__cdecl std::_DebugHeapTag_func()
UNDEF:0000DE50                 extrn ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ:near
UNDEF:0000DE50                                         ; CODE XREF: std::basic_streambuf<char,std::char_traits<char>>::basic_streambuf<char,std::char_traits<char>>(void)+19p
UNDEF:0000DE50                                         ; std::ctype<char>::_Getcat(std::locale::facet const * *,std::locale const *)+42p ...
UNDEF:0000DE54 ; public: virtual void * __thiscall std::_Facet_base::`vector deleting destructor'(unsigned int)
UNDEF:0000DE54                 extrn ??_E_Facet_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE54                                         ; DATA XREF: .rdata:const std::_Facet_base::`vftable'o
UNDEF:0000DE58 ; void __cdecl std::_Facet_Register(struct std::_Facet_base *)
UNDEF:0000DE58                 extrn ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:near
UNDEF:0000DE58                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+C8p
UNDEF:0000DE5C ; protected: virtual void * __thiscall std::locale::facet::`vector deleting destructor'(unsigned int)
UNDEF:0000DE5C                 extrn ??_Efacet@locale@std@@MAEPAXI@Z:near ; weak
UNDEF:0000DE5C                                         ; DATA XREF: .rdata:const std::locale::facet::`vftable'o
UNDEF:0000DE60 ; struct std::locale::_Locimp *__cdecl static std::locale::_Init(bool)
UNDEF:0000DE60                 extrn ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:near
UNDEF:0000DE60                                         ; CODE XREF: std::locale::locale(void)+9p
UNDEF:0000DE64 ; struct std::locale::_Locimp *__cdecl static std::locale::_Getgloballocale()
UNDEF:0000DE64                 extrn ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:near
UNDEF:0000DE64                                         ; CODE XREF: std::locale::_Getfacet(uint):loc_8110p
UNDEF:0000DE68 ; public: virtual void * __thiscall std::ctype_base::`vector deleting destructor'(unsigned int)
UNDEF:0000DE68                 extrn ??_Ectype_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE68                                         ; DATA XREF: .rdata:const std::ctype_base::`vftable'o
UNDEF:0000DE6C ; protected: virtual void * __thiscall std::ctype<char>::`vector deleting destructor'(unsigned int)
UNDEF:0000DE6C                 extrn ??_E?$ctype@D@std@@MAEPAXI@Z:near ; weak
UNDEF:0000DE6C                                         ; DATA XREF: .rdata:const std::ctype<char>::`vftable'o
UNDEF:0000DE70 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DE70                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE70                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000DE74 ; public: virtual void * __thiscall std::_System_error::`vector deleting destructor'(unsigned int)
UNDEF:0000DE74                 extrn ??_E_System_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE74                                         ; DATA XREF: .rdata:const std::_System_error::`vftable'o
UNDEF:0000DE78 ; public: virtual void * __thiscall std::system_error::`vector deleting destructor'(unsigned int)
UNDEF:0000DE78                 extrn ??_Esystem_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE78                                         ; DATA XREF: .rdata:const std::system_error::`vftable'o
UNDEF:0000DE7C ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000DE7C                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000DE7C                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000DE7C                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000DE80 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000DE80                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000DE80                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000DE84 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DE84                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE84                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000DE88 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DE88                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE88                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000DE8C ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DE8C                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE8C                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000DE90 ; public: virtual void * __thiscall std::ios_base::failure::`vector deleting destructor'(unsigned int)
UNDEF:0000DE90                 extrn ??_Efailure@ios_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE90                                         ; DATA XREF: .rdata:const std::ios_base::failure::`vftable'o
UNDEF:0000DE94 ; void __cdecl static std::ios_base::_Addstd(struct std::ios_base *)
UNDEF:0000DE94                 extrn ?_Addstd@ios_base@std@@SAXPAV12@@Z:near
UNDEF:0000DE94                                         ; CODE XREF: std::basic_ios<char,std::char_traits<char>>::init(std::basic_streambuf<char,std::char_traits<char>> *,bool)+53p
UNDEF:0000DE98 ; void __cdecl static std::ios_base::_Ios_base_dtor(struct std::ios_base *)
UNDEF:0000DE98                 extrn ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:near
UNDEF:0000DE98                                         ; CODE XREF: std::ios_base::~ios_base(void)+14p
UNDEF:0000DE9C ; public: virtual void * __thiscall std::ios_base::`vector deleting destructor'(unsigned int)
UNDEF:0000DE9C                 extrn ??_Eios_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DE9C                                         ; DATA XREF: .rdata:const std::ios_base::`vftable'o
UNDEF:0000DEA0 ; public: virtual void * __thiscall std::basic_ios<char, struct std::char_traits<char>>::`vector deleting destructor'(unsigned int)
UNDEF:0000DEA0                 extrn ??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DEA0                                         ; DATA XREF: .rdata:const std::basic_ios<char,std::char_traits<char>>::`vftable'o
UNDEF:0000DEA4 ; public: virtual void * __thiscall std::basic_streambuf<char, struct std::char_traits<char>>::`vector deleting destructor'(unsigned int)
UNDEF:0000DEA4                 extrn ??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DEA4                                         ; DATA XREF: .rdata:const std::basic_streambuf<char,std::char_traits<char>>::`vftable'o
UNDEF:0000DEA8 ; public: virtual void * __thiscall std::basic_ostream<char, struct std::char_traits<char>>::`vector deleting destructor'(unsigned int)
UNDEF:0000DEA8                 extrn ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DEA8                                         ; CODE XREF: [thunk]:std::basic_ostream<char,std::char_traits<char>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)+3j
UNDEF:0000DEAC ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:0000DEAC                 extrn __wassert:near    ; CODE XREF: TiXmlNodeA::IterateChildren(TiXmlNodeA *)+33p
UNDEF:0000DEAC                                         ; TiXmlNodeA::IterateChildren(char const *,TiXmlNodeA *)+37p ...
UNDEF:0000DEB0 ; public: virtual void * __thiscall TiXmlBaseA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEB0                 extrn ??_ETiXmlBaseA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEB0                                         ; DATA XREF: .rdata:const TiXmlBaseA::`vftable'o
UNDEF:0000DEB4 ; public: virtual void * __thiscall TiXmlNodeA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEB4                 extrn ??_ETiXmlNodeA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEB4                                         ; DATA XREF: .rdata:const TiXmlNodeA::`vftable'o
UNDEF:0000DEB8 ; public: virtual char const * __thiscall TiXmlAttributeA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DEB8                 extrn ?Parse@TiXmlAttributeA@@UAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DEB8                                         ; DATA XREF: .rdata:0000CD60o
UNDEF:0000DEBC ; public: virtual void * __thiscall TiXmlAttributeA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEBC                 extrn ??_ETiXmlAttributeA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEBC                                         ; DATA XREF: .rdata:const TiXmlAttributeA::`vftable'o
UNDEF:0000DEC0 ; protected: virtual void __thiscall TiXmlElementA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DEC0                 extrn ?StreamIn@TiXmlElementA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DEC0                                         ; DATA XREF: .rdata:0000CD80o
UNDEF:0000DEC4 ; protected: virtual char const * __thiscall TiXmlElementA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DEC4                 extrn ?Parse@TiXmlElementA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DEC4                                         ; DATA XREF: .rdata:0000CD74o
UNDEF:0000DEC8 ; public: virtual void * __thiscall TiXmlElementA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEC8                 extrn ??_ETiXmlElementA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEC8                                         ; DATA XREF: .rdata:const TiXmlElementA::`vftable'o
UNDEF:0000DECC ; protected: virtual void __thiscall TiXmlCommentA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DECC                 extrn ?StreamIn@TiXmlCommentA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DECC                                         ; DATA XREF: .rdata:0000CDA0o
UNDEF:0000DED0 ; protected: virtual char const * __thiscall TiXmlCommentA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DED0                 extrn ?Parse@TiXmlCommentA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DED0                                         ; DATA XREF: .rdata:0000CD94o
UNDEF:0000DED4 ; public: virtual void * __thiscall TiXmlCommentA::`vector deleting destructor'(unsigned int)
UNDEF:0000DED4                 extrn ??_ETiXmlCommentA@@UAEPAXI@Z:near ; weak
UNDEF:0000DED4                                         ; DATA XREF: .rdata:const TiXmlCommentA::`vftable'o
UNDEF:0000DED8 ; protected: virtual char const * __thiscall TiXmlTextA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DED8                 extrn ?Parse@TiXmlTextA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DED8                                         ; DATA XREF: .rdata:0000CDB4o
UNDEF:0000DEDC ; protected: virtual void __thiscall TiXmlTextA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DEDC                 extrn ?StreamIn@TiXmlTextA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DEDC                                         ; DATA XREF: .rdata:0000CDC0o
UNDEF:0000DEE0 ; public: virtual void * __thiscall TiXmlTextA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEE0                 extrn ??_ETiXmlTextA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEE0                                         ; DATA XREF: .rdata:const TiXmlTextA::`vftable'o
UNDEF:0000DEE4 ; protected: virtual void __thiscall TiXmlDeclarationA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DEE4                 extrn ?StreamIn@TiXmlDeclarationA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DEE4                                         ; DATA XREF: .rdata:0000CDE0o
UNDEF:0000DEE8 ; protected: virtual char const * __thiscall TiXmlDeclarationA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DEE8                 extrn ?Parse@TiXmlDeclarationA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DEE8                                         ; DATA XREF: .rdata:0000CDD4o
UNDEF:0000DEEC ; public: virtual void * __thiscall TiXmlDeclarationA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEEC                 extrn ??_ETiXmlDeclarationA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEEC                                         ; DATA XREF: .rdata:const TiXmlDeclarationA::`vftable'o
UNDEF:0000DEF0 ; protected: virtual void __thiscall TiXmlUnknownA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DEF0                 extrn ?StreamIn@TiXmlUnknownA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DEF0                                         ; DATA XREF: .rdata:0000CE00o
UNDEF:0000DEF4 ; protected: virtual char const * __thiscall TiXmlUnknownA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DEF4                 extrn ?Parse@TiXmlUnknownA@@MAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DEF4                                         ; DATA XREF: .rdata:0000CDF4o
UNDEF:0000DEF8 ; public: virtual void * __thiscall TiXmlUnknownA::`vector deleting destructor'(unsigned int)
UNDEF:0000DEF8                 extrn ??_ETiXmlUnknownA@@UAEPAXI@Z:near ; weak
UNDEF:0000DEF8                                         ; DATA XREF: .rdata:const TiXmlUnknownA::`vftable'o
UNDEF:0000DEFC ; public: virtual char const * __thiscall TiXmlDocumentA::Parse(char const *, class TiXmlParsingDataA *)
UNDEF:0000DEFC                 extrn ?Parse@TiXmlDocumentA@@UAEPBDPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DEFC                                         ; DATA XREF: .rdata:0000CE14o
UNDEF:0000DF00 ; void __thiscall TiXmlDocumentA::SetError(TiXmlDocumentA *__hidden this, int, const char *, struct TiXmlParsingDataA *)
UNDEF:0000DF00                 extrn ?SetError@TiXmlDocumentA@@QAEXHPBDPAVTiXmlParsingDataA@@@Z:near
UNDEF:0000DF00                                         ; CODE XREF: TiXmlElementA::SetAttribute(char const *,char const *)+C8p
UNDEF:0000DF00                                         ; TiXmlDocumentA::LoadFile(char const *)+1F4p ...
UNDEF:0000DF04 ; protected: virtual void __thiscall TiXmlDocumentA::StreamIn(class std::basic_istream<char, struct std::char_traits<char>> *, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> *)
UNDEF:0000DF04                 extrn ?StreamIn@TiXmlDocumentA@@MAEXPAV?$basic_istream@DU?$char_traits@D@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:near
UNDEF:0000DF04                                         ; DATA XREF: .rdata:0000CE20o
UNDEF:0000DF08 ; public: virtual void * __thiscall TiXmlDocumentA::`vector deleting destructor'(unsigned int)
UNDEF:0000DF08                 extrn ??_ETiXmlDocumentA@@UAEPAXI@Z:near ; weak
UNDEF:0000DF08                                         ; DATA XREF: .rdata:const TiXmlDocumentA::`vftable'o
UNDEF:0000DF0C ; public: virtual void * __thiscall std::basic_stringbuf<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'(unsigned int)
UNDEF:0000DF0C                 extrn ??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DF0C                                         ; DATA XREF: .rdata:const std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char>>::`vftable'o
UNDEF:0000DF10 ; public: virtual void * __thiscall std::basic_ostringstream<char, struct std::char_traits<char>, class std::allocator<char>>::`vector deleting destructor'(unsigned int)
UNDEF:0000DF10                 extrn ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DF10                                         ; CODE XREF: [thunk]:std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char>>::`vector deleting destructor'`vtordisp{4294967292,0}' (uint)+3j
UNDEF:0000DF14 ; __fastcall __security_check_cookie(x)
UNDEF:0000DF14                 extrn @__security_check_cookie@4:near
UNDEF:0000DF14                                         ; CODE XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+76p
UNDEF:0000DF14                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+25Ap ...
UNDEF:0000DF18 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000DF18                 extrn __CxxThrowException@8:near
UNDEF:0000DF18                                         ; CODE XREF: std::use_facet<std::ctype<char>>(std::locale const &)+9Bp
UNDEF:0000DF18                                         ; std::_Locinfo::_Locinfo(char const *)+AFp ...
UNDEF:0000DF1C                 extrn ___CxxFrameHandler3:near
UNDEF:0000DF1C                                         ; CODE XREF: __ehhandler$?PutString@TiXmlBaseA@@KAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV?$basic_ostream@DU?$char_traits@D@std@@@3@@Z+20j
UNDEF:0000DF1C                                         ; __ehhandler$??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVTiXmlNodeA@@@Z+20j ...
UNDEF:0000DF20 ; __int64 const std::_BADOFF
UNDEF:0000DF20                 extrn ?_BADOFF@std@@3_JB:near
UNDEF:0000DF20                                         ; DATA XREF: std::basic_streambuf<char,std::char_traits<char>>::seekoff(__int64,int,int)+7r
UNDEF:0000DF20                                         ; std::basic_streambuf<char,std::char_traits<char>>::seekoff(__int64,int,int)+Dr ...
UNDEF:0000DF24 ; const type_info::`vftable'
UNDEF:0000DF24                 extrn ??_7type_info@@6B@:near
UNDEF:0000DF24                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:0000DF24                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:0000DF28 ; private: static int std::locale::id::_Id_cnt
UNDEF:0000DF28                 extrn ?_Id_cnt@id@locale@std@@0HA:near
UNDEF:0000DF28                                         ; DATA XREF: std::locale::id::operator uint(void)+49r
UNDEF:0000DF28                                         ; std::locale::id::operator uint(void)+52w ...
UNDEF:0000DF2C ; public: static class std::locale::id std::ctype<char>::id
UNDEF:0000DF2C                 extrn ?id@?$ctype@D@std@@2V0locale@2@A:near
UNDEF:0000DF2C                                         ; DATA XREF: std::use_facet<std::ctype<char>>(std::locale const &)+3Eo
UNDEF:0000DF30 ; private: static struct TiXmlBaseA::Entity * TiXmlBaseA::entity
UNDEF:0000DF30                 extrn ?entity@TiXmlBaseA@@0PAUEntity@1@A:near
UNDEF:0000DF30                                         ; DATA XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+D9r
UNDEF:0000DF30                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+E8r ...
UNDEF:0000DF34                 extrn ___security_cookie:near
UNDEF:0000DF34                                         ; DATA XREF: TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_ostream<char,std::char_traits<char>> *)+14r
UNDEF:0000DF34                                         ; TiXmlBaseA::PutString(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> *)+6r ...
UNDEF:0000DF38                 extrn __fltused:near
UNDEF:0000DF38
UNDEF:0000DF38
UNDEF:0000DF38                 end