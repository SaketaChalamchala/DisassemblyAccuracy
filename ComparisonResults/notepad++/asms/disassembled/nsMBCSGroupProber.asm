.text$mn:00000000 ;
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : E94A3584F1FA3FA5B0352A5D5CE22A51
.text$mn:00000000 ; Input CRC32 : 685EB225
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\nsMBCSGroupProber.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; public: __thiscall nsMBCSGroupProber::nsMBCSGroupProber(unsigned int)
.text$mn:00000000                 public ??0nsMBCSGroupProber@@QAE@I@Z
.text$mn:00000000 ??0nsMBCSGroupProber@@QAE@I@Z proc near
.text$mn:00000000
.text$mn:00000000 var_70          = dword ptr -70h
.text$mn:00000000 var_6C          = dword ptr -6Ch
.text$mn:00000000 var_68          = dword ptr -68h
.text$mn:00000000 var_64          = dword ptr -64h
.text$mn:00000000 var_60          = dword ptr -60h
.text$mn:00000000 var_5C          = dword ptr -5Ch
.text$mn:00000000 var_58          = dword ptr -58h
.text$mn:00000000 var_54          = dword ptr -54h
.text$mn:00000000 var_50          = dword ptr -50h
.text$mn:00000000 var_4C          = dword ptr -4Ch
.text$mn:00000000 var_48          = dword ptr -48h
.text$mn:00000000 var_44          = dword ptr -44h
.text$mn:00000000 var_40          = dword ptr -40h
.text$mn:00000000 var_3C          = dword ptr -3Ch
.text$mn:00000000 var_38          = dword ptr -38h
.text$mn:00000000 var_34          = dword ptr -34h
.text$mn:00000000 var_30          = dword ptr -30h
.text$mn:00000000 var_2C          = dword ptr -2Ch
.text$mn:00000000 var_28          = dword ptr -28h
.text$mn:00000000 var_24          = dword ptr -24h
.text$mn:00000000 var_20          = dword ptr -20h
.text$mn:00000000 var_1C          = dword ptr -1Ch
.text$mn:00000000 var_18          = dword ptr -18h
.text$mn:00000000 var_12          = byte ptr -12h
.text$mn:00000000 var_11          = byte ptr -11h
.text$mn:00000000 var_10          = byte ptr -10h
.text$mn:00000000 var_F           = byte ptr -0Fh
.text$mn:00000000 var_E           = byte ptr -0Eh
.text$mn:00000000 var_D           = byte ptr -0Dh
.text$mn:00000000 var_C           = dword ptr -0Ch
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000 arg_0           = dword ptr  8
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 push    0FFFFFFFFh
.text$mn:00000005                 push    offset __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z
.text$mn:0000000A                 mov     eax, large fs:0
.text$mn:00000010                 push    eax
.text$mn:00000011                 sub     esp, 64h
.text$mn:00000014                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000019                 xor     eax, ebp
.text$mn:0000001B                 push    eax
.text$mn:0000001C                 lea     eax, [ebp+var_C]
.text$mn:0000001F                 mov     large fs:0, eax
.text$mn:00000025                 mov     [ebp+var_18], ecx
.text$mn:00000028                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000002B                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000030                 mov     [ebp+var_4], 0
.text$mn:00000037                 mov     eax, [ebp+var_18]
.text$mn:0000003A                 mov     dword ptr [eax], offset ??_7nsMBCSGroupProber@@6B@ ; const nsMBCSGroupProber::`vftable'
.text$mn:00000040                 mov     [ebp+var_1C], 0
.text$mn:00000047                 jmp     short loc_52
.text$mn:00000049 ; ---------------------------------------------------------------------------
.text$mn:00000049
.text$mn:00000049 loc_49:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+66j
.text$mn:00000049                 mov     ecx, [ebp+var_1C]
.text$mn:0000004C                 add     ecx, 1
.text$mn:0000004F                 mov     [ebp+var_1C], ecx
.text$mn:00000052
.text$mn:00000052 loc_52:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+47j
.text$mn:00000052                 cmp     [ebp+var_1C], 7
.text$mn:00000056                 jnb     short loc_68
.text$mn:00000058                 mov     edx, [ebp+var_1C]
.text$mn:0000005B                 mov     eax, [ebp+var_18]
.text$mn:0000005E                 mov     dword ptr [eax+edx*4+8], 0
.text$mn:00000066                 jmp     short loc_49
.text$mn:00000068 ; ---------------------------------------------------------------------------
.text$mn:00000068
.text$mn:00000068 loc_68:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+56j
.text$mn:00000068                 push    10h             ; unsigned int
.text$mn:0000006A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000006F                 add     esp, 4
.text$mn:00000072                 mov     [ebp+var_20], eax
.text$mn:00000075                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000079                 cmp     [ebp+var_20], 0
.text$mn:0000007D                 jz      short loc_8C
.text$mn:0000007F                 mov     ecx, [ebp+var_20]
.text$mn:00000082                 call    ??0nsUTF8Prober@@QAE@XZ ; nsUTF8Prober::nsUTF8Prober(void)
.text$mn:00000087                 mov     [ebp+var_24], eax
.text$mn:0000008A                 jmp     short loc_93
.text$mn:0000008C ; ---------------------------------------------------------------------------
.text$mn:0000008C
.text$mn:0000008C loc_8C:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+7Dj
.text$mn:0000008C                 mov     [ebp+var_24], 0
.text$mn:00000093
.text$mn:00000093 loc_93:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+8Aj
.text$mn:00000093                 mov     ecx, [ebp+var_24]
.text$mn:00000096                 mov     [ebp+var_58], ecx
.text$mn:00000099                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000009D                 mov     edx, 4
.text$mn:000000A2                 imul    eax, edx, 0
.text$mn:000000A5                 mov     ecx, [ebp+var_18]
.text$mn:000000A8                 mov     edx, [ebp+var_58]
.text$mn:000000AB                 mov     [ecx+eax+8], edx
.text$mn:000000AF                 mov     eax, [ebp+arg_0]
.text$mn:000000B2                 and     eax, 4
.text$mn:000000B5                 jz      loc_172
.text$mn:000000BB                 push    60h ; '`'       ; unsigned int
.text$mn:000000BD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000000C2                 add     esp, 4
.text$mn:000000C5                 mov     [ebp+var_28], eax
.text$mn:000000C8                 mov     byte ptr [ebp+var_4], 2
.text$mn:000000CC                 cmp     [ebp+var_28], 0
.text$mn:000000D0                 jz      short loc_F4
.text$mn:000000D2                 cmp     [ebp+arg_0], 4
.text$mn:000000D6                 jnz     short loc_DE
.text$mn:000000D8                 mov     [ebp+var_D], 1
.text$mn:000000DC                 jmp     short loc_E2
.text$mn:000000DE ; ---------------------------------------------------------------------------
.text$mn:000000DE
.text$mn:000000DE loc_DE:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+D6j
.text$mn:000000DE                 mov     [ebp+var_D], 0
.text$mn:000000E2
.text$mn:000000E2 loc_E2:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+DCj
.text$mn:000000E2                 movzx   ecx, [ebp+var_D]
.text$mn:000000E6                 push    ecx
.text$mn:000000E7                 mov     ecx, [ebp+var_28]
.text$mn:000000EA                 call    ??0nsSJISProber@@QAE@_N@Z ; nsSJISProber::nsSJISProber(bool)
.text$mn:000000EF                 mov     [ebp+var_2C], eax
.text$mn:000000F2                 jmp     short loc_FB
.text$mn:000000F4 ; ---------------------------------------------------------------------------
.text$mn:000000F4
.text$mn:000000F4 loc_F4:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+D0j
.text$mn:000000F4                 mov     [ebp+var_2C], 0
.text$mn:000000FB
.text$mn:000000FB loc_FB:                                 ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+F2j
.text$mn:000000FB                 mov     edx, [ebp+var_2C]
.text$mn:000000FE                 mov     [ebp+var_5C], edx
.text$mn:00000101                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000105                 mov     eax, 4
.text$mn:0000010A                 shl     eax, 0
.text$mn:0000010D                 mov     ecx, [ebp+var_18]
.text$mn:00000110                 mov     edx, [ebp+var_5C]
.text$mn:00000113                 mov     [ecx+eax+8], edx
.text$mn:00000117                 push    60h ; '`'       ; unsigned int
.text$mn:00000119                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000011E                 add     esp, 4
.text$mn:00000121                 mov     [ebp+var_30], eax
.text$mn:00000124                 mov     byte ptr [ebp+var_4], 3
.text$mn:00000128                 cmp     [ebp+var_30], 0
.text$mn:0000012C                 jz      short loc_150
.text$mn:0000012E                 cmp     [ebp+arg_0], 4
.text$mn:00000132                 jnz     short loc_13A
.text$mn:00000134                 mov     [ebp+var_E], 1
.text$mn:00000138                 jmp     short loc_13E
.text$mn:0000013A ; ---------------------------------------------------------------------------
.text$mn:0000013A
.text$mn:0000013A loc_13A:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+132j
.text$mn:0000013A                 mov     [ebp+var_E], 0
.text$mn:0000013E
.text$mn:0000013E loc_13E:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+138j
.text$mn:0000013E                 movzx   eax, [ebp+var_E]
.text$mn:00000142                 push    eax
.text$mn:00000143                 mov     ecx, [ebp+var_30]
.text$mn:00000146                 call    ??0nsEUCJPProber@@QAE@_N@Z ; nsEUCJPProber::nsEUCJPProber(bool)
.text$mn:0000014B                 mov     [ebp+var_34], eax
.text$mn:0000014E                 jmp     short loc_157
.text$mn:00000150 ; ---------------------------------------------------------------------------
.text$mn:00000150
.text$mn:00000150 loc_150:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+12Cj
.text$mn:00000150                 mov     [ebp+var_34], 0
.text$mn:00000157
.text$mn:00000157 loc_157:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+14Ej
.text$mn:00000157                 mov     ecx, [ebp+var_34]
.text$mn:0000015A                 mov     [ebp+var_60], ecx
.text$mn:0000015D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000161                 mov     edx, 4
.text$mn:00000166                 shl     edx, 1
.text$mn:00000168                 mov     eax, [ebp+var_18]
.text$mn:0000016B                 mov     ecx, [ebp+var_60]
.text$mn:0000016E                 mov     [eax+edx+8], ecx
.text$mn:00000172
.text$mn:00000172 loc_172:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+B5j
.text$mn:00000172                 mov     edx, [ebp+arg_0]
.text$mn:00000175                 and     edx, 1
.text$mn:00000178                 jz      short loc_1D6
.text$mn:0000017A                 push    30h ; '0'       ; unsigned int
.text$mn:0000017C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000181                 add     esp, 4
.text$mn:00000184                 mov     [ebp+var_38], eax
.text$mn:00000187                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000018B                 cmp     [ebp+var_38], 0
.text$mn:0000018F                 jz      short loc_1B3
.text$mn:00000191                 cmp     [ebp+arg_0], 1
.text$mn:00000195                 jnz     short loc_19D
.text$mn:00000197                 mov     [ebp+var_F], 1
.text$mn:0000019B                 jmp     short loc_1A1
.text$mn:0000019D ; ---------------------------------------------------------------------------
.text$mn:0000019D
.text$mn:0000019D loc_19D:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+195j
.text$mn:0000019D                 mov     [ebp+var_F], 0
.text$mn:000001A1
.text$mn:000001A1 loc_1A1:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+19Bj
.text$mn:000001A1                 movzx   eax, [ebp+var_F]
.text$mn:000001A5                 push    eax
.text$mn:000001A6                 mov     ecx, [ebp+var_38]
.text$mn:000001A9                 call    ??0nsGB18030Prober@@QAE@_N@Z ; nsGB18030Prober::nsGB18030Prober(bool)
.text$mn:000001AE                 mov     [ebp+var_3C], eax
.text$mn:000001B1                 jmp     short loc_1BA
.text$mn:000001B3 ; ---------------------------------------------------------------------------
.text$mn:000001B3
.text$mn:000001B3 loc_1B3:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+18Fj
.text$mn:000001B3                 mov     [ebp+var_3C], 0
.text$mn:000001BA
.text$mn:000001BA loc_1BA:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1B1j
.text$mn:000001BA                 mov     ecx, [ebp+var_3C]
.text$mn:000001BD                 mov     [ebp+var_64], ecx
.text$mn:000001C0                 mov     byte ptr [ebp+var_4], 0
.text$mn:000001C4                 mov     edx, 4
.text$mn:000001C9                 imul    eax, edx, 3
.text$mn:000001CC                 mov     ecx, [ebp+var_18]
.text$mn:000001CF                 mov     edx, [ebp+var_64]
.text$mn:000001D2                 mov     [ecx+eax+8], edx
.text$mn:000001D6
.text$mn:000001D6 loc_1D6:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+178j
.text$mn:000001D6                 mov     eax, [ebp+arg_0]
.text$mn:000001D9                 and     eax, 8
.text$mn:000001DC                 jz      short loc_23A
.text$mn:000001DE                 push    30h ; '0'       ; unsigned int
.text$mn:000001E0                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000001E5                 add     esp, 4
.text$mn:000001E8                 mov     [ebp+var_40], eax
.text$mn:000001EB                 mov     byte ptr [ebp+var_4], 5
.text$mn:000001EF                 cmp     [ebp+var_40], 0
.text$mn:000001F3                 jz      short loc_217
.text$mn:000001F5                 cmp     [ebp+arg_0], 8
.text$mn:000001F9                 jnz     short loc_201
.text$mn:000001FB                 mov     [ebp+var_10], 1
.text$mn:000001FF                 jmp     short loc_205
.text$mn:00000201 ; ---------------------------------------------------------------------------
.text$mn:00000201
.text$mn:00000201 loc_201:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1F9j
.text$mn:00000201                 mov     [ebp+var_10], 0
.text$mn:00000205
.text$mn:00000205 loc_205:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1FFj
.text$mn:00000205                 movzx   ecx, [ebp+var_10]
.text$mn:00000209                 push    ecx
.text$mn:0000020A                 mov     ecx, [ebp+var_40]
.text$mn:0000020D                 call    ??0nsEUCKRProber@@QAE@_N@Z ; nsEUCKRProber::nsEUCKRProber(bool)
.text$mn:00000212                 mov     [ebp+var_44], eax
.text$mn:00000215                 jmp     short loc_21E
.text$mn:00000217 ; ---------------------------------------------------------------------------
.text$mn:00000217
.text$mn:00000217 loc_217:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1F3j
.text$mn:00000217                 mov     [ebp+var_44], 0
.text$mn:0000021E
.text$mn:0000021E loc_21E:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+215j
.text$mn:0000021E                 mov     edx, [ebp+var_44]
.text$mn:00000221                 mov     [ebp+var_68], edx
.text$mn:00000224                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000228                 mov     eax, 4
.text$mn:0000022D                 shl     eax, 2
.text$mn:00000230                 mov     ecx, [ebp+var_18]
.text$mn:00000233                 mov     edx, [ebp+var_68]
.text$mn:00000236                 mov     [ecx+eax+8], edx
.text$mn:0000023A
.text$mn:0000023A loc_23A:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1DCj
.text$mn:0000023A                 mov     eax, [ebp+arg_0]
.text$mn:0000023D                 and     eax, 2
.text$mn:00000240                 jz      loc_2FE
.text$mn:00000246                 push    30h ; '0'       ; unsigned int
.text$mn:00000248                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000024D                 add     esp, 4
.text$mn:00000250                 mov     [ebp+var_48], eax
.text$mn:00000253                 mov     byte ptr [ebp+var_4], 6
.text$mn:00000257                 cmp     [ebp+var_48], 0
.text$mn:0000025B                 jz      short loc_27F
.text$mn:0000025D                 cmp     [ebp+arg_0], 2
.text$mn:00000261                 jnz     short loc_269
.text$mn:00000263                 mov     [ebp+var_11], 1
.text$mn:00000267                 jmp     short loc_26D
.text$mn:00000269 ; ---------------------------------------------------------------------------
.text$mn:00000269
.text$mn:00000269 loc_269:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+261j
.text$mn:00000269                 mov     [ebp+var_11], 0
.text$mn:0000026D
.text$mn:0000026D loc_26D:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+267j
.text$mn:0000026D                 movzx   ecx, [ebp+var_11]
.text$mn:00000271                 push    ecx
.text$mn:00000272                 mov     ecx, [ebp+var_48]
.text$mn:00000275                 call    ??0nsBig5Prober@@QAE@_N@Z ; nsBig5Prober::nsBig5Prober(bool)
.text$mn:0000027A                 mov     [ebp+var_4C], eax
.text$mn:0000027D                 jmp     short loc_286
.text$mn:0000027F ; ---------------------------------------------------------------------------
.text$mn:0000027F
.text$mn:0000027F loc_27F:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+25Bj
.text$mn:0000027F                 mov     [ebp+var_4C], 0
.text$mn:00000286
.text$mn:00000286 loc_286:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+27Dj
.text$mn:00000286                 mov     edx, [ebp+var_4C]
.text$mn:00000289                 mov     [ebp+var_6C], edx
.text$mn:0000028C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000290                 mov     eax, 4
.text$mn:00000295                 imul    ecx, eax, 5
.text$mn:00000298                 mov     edx, [ebp+var_18]
.text$mn:0000029B                 mov     eax, [ebp+var_6C]
.text$mn:0000029E                 mov     [edx+ecx+8], eax
.text$mn:000002A2                 push    30h ; '0'       ; unsigned int
.text$mn:000002A4                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000002A9                 add     esp, 4
.text$mn:000002AC                 mov     [ebp+var_50], eax
.text$mn:000002AF                 mov     byte ptr [ebp+var_4], 7
.text$mn:000002B3                 cmp     [ebp+var_50], 0
.text$mn:000002B7                 jz      short loc_2DB
.text$mn:000002B9                 cmp     [ebp+arg_0], 2
.text$mn:000002BD                 jnz     short loc_2C5
.text$mn:000002BF                 mov     [ebp+var_12], 1
.text$mn:000002C3                 jmp     short loc_2C9
.text$mn:000002C5 ; ---------------------------------------------------------------------------
.text$mn:000002C5
.text$mn:000002C5 loc_2C5:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2BDj
.text$mn:000002C5                 mov     [ebp+var_12], 0
.text$mn:000002C9
.text$mn:000002C9 loc_2C9:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2C3j
.text$mn:000002C9                 movzx   ecx, [ebp+var_12]
.text$mn:000002CD                 push    ecx
.text$mn:000002CE                 mov     ecx, [ebp+var_50]
.text$mn:000002D1                 call    ??0nsEUCTWProber@@QAE@_N@Z ; nsEUCTWProber::nsEUCTWProber(bool)
.text$mn:000002D6                 mov     [ebp+var_54], eax
.text$mn:000002D9                 jmp     short loc_2E2
.text$mn:000002DB ; ---------------------------------------------------------------------------
.text$mn:000002DB
.text$mn:000002DB loc_2DB:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2B7j
.text$mn:000002DB                 mov     [ebp+var_54], 0
.text$mn:000002E2
.text$mn:000002E2 loc_2E2:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2D9j
.text$mn:000002E2                 mov     edx, [ebp+var_54]
.text$mn:000002E5                 mov     [ebp+var_70], edx
.text$mn:000002E8                 mov     byte ptr [ebp+var_4], 0
.text$mn:000002EC                 mov     eax, 4
.text$mn:000002F1                 imul    ecx, eax, 6
.text$mn:000002F4                 mov     edx, [ebp+var_18]
.text$mn:000002F7                 mov     eax, [ebp+var_70]
.text$mn:000002FA                 mov     [edx+ecx+8], eax
.text$mn:000002FE
.text$mn:000002FE loc_2FE:                                ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+240j
.text$mn:000002FE                 mov     ecx, [ebp+var_18] ; this
.text$mn:00000301                 call    ?Reset@nsMBCSGroupProber@@UAEXXZ ; nsMBCSGroupProber::Reset(void)
.text$mn:00000306                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000030D                 mov     eax, [ebp+var_18]
.text$mn:00000310                 mov     ecx, [ebp+var_C]
.text$mn:00000313                 mov     large fs:0, ecx
.text$mn:0000031A                 pop     ecx
.text$mn:0000031B                 mov     esp, ebp
.text$mn:0000031D                 pop     ebp
.text$mn:0000031E                 retn    4
.text$mn:0000031E ??0nsMBCSGroupProber@@QAE@I@Z endp
.text$mn:0000031E
.text$mn:0000031E ; ---------------------------------------------------------------------------
.text$mn:00000321                 align 10h
.text$mn:00000330
.text$mn:00000330 ; =============== S U B R O U T I N E =======================================
.text$mn:00000330
.text$mn:00000330 ; Attributes: bp-based frame
.text$mn:00000330
.text$mn:00000330 ; _DWORD __thiscall nsMBCSGroupProber::~nsMBCSGroupProber(nsMBCSGroupProber *__hidden this)
.text$mn:00000330                 public ??1nsMBCSGroupProber@@UAE@XZ
.text$mn:00000330 ??1nsMBCSGroupProber@@UAE@XZ proc near  ; CODE XREF: nsMBCSGroupProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00000330
.text$mn:00000330 var_20          = dword ptr -20h
.text$mn:00000330 var_1C          = dword ptr -1Ch
.text$mn:00000330 var_18          = dword ptr -18h
.text$mn:00000330 var_14          = dword ptr -14h
.text$mn:00000330 var_10          = dword ptr -10h
.text$mn:00000330 var_C           = dword ptr -0Ch
.text$mn:00000330 var_4           = dword ptr -4
.text$mn:00000330
.text$mn:00000330                 push    ebp
.text$mn:00000331                 mov     ebp, esp
.text$mn:00000333                 push    0FFFFFFFFh
.text$mn:00000335                 push    offset __ehhandler$??1nsMBCSGroupProber@@UAE@XZ
.text$mn:0000033A                 mov     eax, large fs:0
.text$mn:00000340                 push    eax
.text$mn:00000341                 sub     esp, 14h
.text$mn:00000344                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000349                 xor     eax, ebp
.text$mn:0000034B                 push    eax
.text$mn:0000034C                 lea     eax, [ebp+var_C]
.text$mn:0000034F                 mov     large fs:0, eax
.text$mn:00000355                 mov     [ebp+var_18], ecx
.text$mn:00000358                 mov     eax, [ebp+var_18]
.text$mn:0000035B                 mov     dword ptr [eax], offset ??_7nsMBCSGroupProber@@6B@ ; const nsMBCSGroupProber::`vftable'
.text$mn:00000361                 mov     [ebp+var_4], 0
.text$mn:00000368                 mov     [ebp+var_10], 0
.text$mn:0000036F                 jmp     short loc_37A
.text$mn:00000371 ; ---------------------------------------------------------------------------
.text$mn:00000371
.text$mn:00000371 loc_371:                                ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void):loc_3B3j
.text$mn:00000371                 mov     ecx, [ebp+var_10]
.text$mn:00000374                 add     ecx, 1
.text$mn:00000377                 mov     [ebp+var_10], ecx
.text$mn:0000037A
.text$mn:0000037A loc_37A:                                ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+3Fj
.text$mn:0000037A                 cmp     [ebp+var_10], 7
.text$mn:0000037E                 jnb     short loc_3B5
.text$mn:00000380                 mov     edx, [ebp+var_10]
.text$mn:00000383                 mov     eax, [ebp+var_18]
.text$mn:00000386                 mov     ecx, [eax+edx*4+8]
.text$mn:0000038A                 mov     [ebp+var_1C], ecx
.text$mn:0000038D                 mov     edx, [ebp+var_1C]
.text$mn:00000390                 mov     [ebp+var_14], edx
.text$mn:00000393                 cmp     [ebp+var_14], 0
.text$mn:00000397                 jz      short loc_3AC
.text$mn:00000399                 push    1
.text$mn:0000039B                 mov     eax, [ebp+var_14]
.text$mn:0000039E                 mov     edx, [eax]
.text$mn:000003A0                 mov     ecx, [ebp+var_14]
.text$mn:000003A3                 mov     eax, [edx]
.text$mn:000003A5                 call    eax
.text$mn:000003A7                 mov     [ebp+var_20], eax
.text$mn:000003AA                 jmp     short loc_3B3
.text$mn:000003AC ; ---------------------------------------------------------------------------
.text$mn:000003AC
.text$mn:000003AC loc_3AC:                                ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+67j
.text$mn:000003AC                 mov     [ebp+var_20], 0
.text$mn:000003B3
.text$mn:000003B3 loc_3B3:                                ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+7Aj
.text$mn:000003B3                 jmp     short loc_371
.text$mn:000003B5 ; ---------------------------------------------------------------------------
.text$mn:000003B5
.text$mn:000003B5 loc_3B5:                                ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+4Ej
.text$mn:000003B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000003BC                 mov     ecx, [ebp+var_18] ; this
.text$mn:000003BF                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:000003C4                 mov     ecx, [ebp+var_C]
.text$mn:000003C7                 mov     large fs:0, ecx
.text$mn:000003CE                 pop     ecx
.text$mn:000003CF                 mov     esp, ebp
.text$mn:000003D1                 pop     ebp
.text$mn:000003D2                 retn
.text$mn:000003D2 ??1nsMBCSGroupProber@@UAE@XZ endp
.text$mn:000003D2
.text$mn:000003D2 ; ---------------------------------------------------------------------------
.text$mn:000003D3                 align 10h
.text$mn:000003E0
.text$mn:000003E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000003E0
.text$mn:000003E0 ; Attributes: bp-based frame
.text$mn:000003E0
.text$mn:000003E0 ; public: virtual enum  nsProbingState __thiscall nsMBCSGroupProber::HandleData(char const *, unsigned int)
.text$mn:000003E0                 public ?HandleData@nsMBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z
.text$mn:000003E0 ?HandleData@nsMBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z proc near
.text$mn:000003E0                                         ; DATA XREF: .rdata:00001B00o
.text$mn:000003E0
.text$mn:000003E0 var_1C          = dword ptr -1Ch
.text$mn:000003E0 var_18          = dword ptr -18h
.text$mn:000003E0 var_14          = dword ptr -14h
.text$mn:000003E0 var_10          = dword ptr -10h
.text$mn:000003E0 var_C           = dword ptr -0Ch
.text$mn:000003E0 var_8           = dword ptr -8
.text$mn:000003E0 var_4           = dword ptr -4
.text$mn:000003E0 arg_0           = dword ptr  8
.text$mn:000003E0 arg_4           = dword ptr  0Ch
.text$mn:000003E0
.text$mn:000003E0                 push    ebp
.text$mn:000003E1                 mov     ebp, esp
.text$mn:000003E3                 sub     esp, 1Ch
.text$mn:000003E6                 mov     [ebp+var_4], ecx
.text$mn:000003E9                 mov     [ebp+var_18], 0
.text$mn:000003F0                 mov     eax, [ebp+var_4]
.text$mn:000003F3                 mov     ecx, [eax+34h]
.text$mn:000003F6                 mov     [ebp+var_8], ecx
.text$mn:000003F9                 mov     [ebp+var_14], 0
.text$mn:00000400                 jmp     short loc_40B
.text$mn:00000402 ; ---------------------------------------------------------------------------
.text$mn:00000402
.text$mn:00000402 loc_402:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint):loc_4D2j
.text$mn:00000402                 mov     edx, [ebp+var_14]
.text$mn:00000405                 add     edx, 1
.text$mn:00000408                 mov     [ebp+var_14], edx
.text$mn:0000040B
.text$mn:0000040B loc_40B:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+20j
.text$mn:0000040B                 mov     eax, [ebp+var_14]
.text$mn:0000040E                 cmp     eax, [ebp+arg_4]
.text$mn:00000411                 jnb     loc_4D7
.text$mn:00000417                 mov     ecx, [ebp+arg_0]
.text$mn:0000041A                 add     ecx, [ebp+var_14]
.text$mn:0000041D                 movsx   edx, byte ptr [ecx]
.text$mn:00000420                 and     edx, 80h
.text$mn:00000426                 jz      short loc_440
.text$mn:00000428                 cmp     [ebp+var_8], 0
.text$mn:0000042C                 jnz     short loc_434
.text$mn:0000042E                 mov     eax, [ebp+var_14]
.text$mn:00000431                 mov     [ebp+var_18], eax
.text$mn:00000434
.text$mn:00000434 loc_434:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+4Cj
.text$mn:00000434                 mov     [ebp+var_8], 2
.text$mn:0000043B                 jmp     loc_4D2
.text$mn:00000440 ; ---------------------------------------------------------------------------
.text$mn:00000440
.text$mn:00000440 loc_440:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+46j
.text$mn:00000440                 cmp     [ebp+var_8], 0
.text$mn:00000444                 jz      loc_4D2
.text$mn:0000044A                 mov     ecx, [ebp+var_8]
.text$mn:0000044D                 sub     ecx, 1
.text$mn:00000450                 mov     [ebp+var_8], ecx
.text$mn:00000453                 jnz     short loc_4D2
.text$mn:00000455                 mov     [ebp+var_C], 0
.text$mn:0000045C                 jmp     short loc_467
.text$mn:0000045E ; ---------------------------------------------------------------------------
.text$mn:0000045E
.text$mn:0000045E loc_45E:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+9Bj
.text$mn:0000045E                                         ; nsMBCSGroupProber::HandleData(char const *,uint):loc_4D0j
.text$mn:0000045E                 mov     edx, [ebp+var_C]
.text$mn:00000461                 add     edx, 1
.text$mn:00000464                 mov     [ebp+var_C], edx
.text$mn:00000467
.text$mn:00000467 loc_467:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+7Cj
.text$mn:00000467                 cmp     [ebp+var_C], 7
.text$mn:0000046B                 jnb     short loc_4D2
.text$mn:0000046D                 mov     eax, [ebp+var_4]
.text$mn:00000470                 add     eax, [ebp+var_C]
.text$mn:00000473                 movzx   ecx, byte ptr [eax+24h]
.text$mn:00000477                 test    ecx, ecx
.text$mn:00000479                 jnz     short loc_47D
.text$mn:0000047B                 jmp     short loc_45E
.text$mn:0000047D ; ---------------------------------------------------------------------------
.text$mn:0000047D
.text$mn:0000047D loc_47D:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+99j
.text$mn:0000047D                 mov     edx, [ebp+var_14]
.text$mn:00000480                 add     edx, 1
.text$mn:00000483                 sub     edx, [ebp+var_18]
.text$mn:00000486                 push    edx
.text$mn:00000487                 mov     eax, [ebp+arg_0]
.text$mn:0000048A                 add     eax, [ebp+var_18]
.text$mn:0000048D                 push    eax
.text$mn:0000048E                 mov     ecx, [ebp+var_C]
.text$mn:00000491                 mov     edx, [ebp+var_4]
.text$mn:00000494                 mov     eax, [edx+ecx*4+8]
.text$mn:00000498                 mov     ecx, [ebp+var_C]
.text$mn:0000049B                 mov     edx, [ebp+var_4]
.text$mn:0000049E                 mov     eax, [eax]
.text$mn:000004A0                 mov     ecx, [edx+ecx*4+8]
.text$mn:000004A4                 mov     edx, [eax+8]
.text$mn:000004A7                 call    edx
.text$mn:000004A9                 mov     [ebp+var_1C], eax
.text$mn:000004AC                 cmp     [ebp+var_1C], 1
.text$mn:000004B0                 jnz     short loc_4D0
.text$mn:000004B2                 mov     eax, [ebp+var_4]
.text$mn:000004B5                 mov     ecx, [ebp+var_C]
.text$mn:000004B8                 mov     [eax+2Ch], ecx
.text$mn:000004BB                 mov     edx, [ebp+var_4]
.text$mn:000004BE                 mov     dword ptr [edx+4], 1
.text$mn:000004C5                 mov     eax, [ebp+var_4]
.text$mn:000004C8                 mov     eax, [eax+4]
.text$mn:000004CB                 jmp     loc_563
.text$mn:000004D0 ; ---------------------------------------------------------------------------
.text$mn:000004D0
.text$mn:000004D0 loc_4D0:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+D0j
.text$mn:000004D0                 jmp     short loc_45E
.text$mn:000004D2 ; ---------------------------------------------------------------------------
.text$mn:000004D2
.text$mn:000004D2 loc_4D2:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+5Bj
.text$mn:000004D2                                         ; nsMBCSGroupProber::HandleData(char const *,uint)+64j ...
.text$mn:000004D2                 jmp     loc_402
.text$mn:000004D7 ; ---------------------------------------------------------------------------
.text$mn:000004D7
.text$mn:000004D7 loc_4D7:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+31j
.text$mn:000004D7                 cmp     [ebp+var_8], 0
.text$mn:000004DB                 jz      short loc_554
.text$mn:000004DD                 mov     [ebp+var_10], 0
.text$mn:000004E4                 jmp     short loc_4EF
.text$mn:000004E6 ; ---------------------------------------------------------------------------
.text$mn:000004E6
.text$mn:000004E6 loc_4E6:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+123j
.text$mn:000004E6                                         ; nsMBCSGroupProber::HandleData(char const *,uint):loc_552j
.text$mn:000004E6                 mov     ecx, [ebp+var_10]
.text$mn:000004E9                 add     ecx, 1
.text$mn:000004EC                 mov     [ebp+var_10], ecx
.text$mn:000004EF
.text$mn:000004EF loc_4EF:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+104j
.text$mn:000004EF                 cmp     [ebp+var_10], 7
.text$mn:000004F3                 jnb     short loc_554
.text$mn:000004F5                 mov     edx, [ebp+var_4]
.text$mn:000004F8                 add     edx, [ebp+var_10]
.text$mn:000004FB                 movzx   eax, byte ptr [edx+24h]
.text$mn:000004FF                 test    eax, eax
.text$mn:00000501                 jnz     short loc_505
.text$mn:00000503                 jmp     short loc_4E6
.text$mn:00000505 ; ---------------------------------------------------------------------------
.text$mn:00000505
.text$mn:00000505 loc_505:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+121j
.text$mn:00000505                 mov     ecx, [ebp+arg_4]
.text$mn:00000508                 sub     ecx, [ebp+var_18]
.text$mn:0000050B                 push    ecx
.text$mn:0000050C                 mov     edx, [ebp+arg_0]
.text$mn:0000050F                 add     edx, [ebp+var_18]
.text$mn:00000512                 push    edx
.text$mn:00000513                 mov     eax, [ebp+var_10]
.text$mn:00000516                 mov     ecx, [ebp+var_4]
.text$mn:00000519                 mov     edx, [ecx+eax*4+8]
.text$mn:0000051D                 mov     eax, [ebp+var_10]
.text$mn:00000520                 mov     ecx, [ebp+var_4]
.text$mn:00000523                 mov     edx, [edx]
.text$mn:00000525                 mov     ecx, [ecx+eax*4+8]
.text$mn:00000529                 mov     eax, [edx+8]
.text$mn:0000052C                 call    eax
.text$mn:0000052E                 mov     [ebp+var_1C], eax
.text$mn:00000531                 cmp     [ebp+var_1C], 1
.text$mn:00000535                 jnz     short loc_552
.text$mn:00000537                 mov     ecx, [ebp+var_4]
.text$mn:0000053A                 mov     edx, [ebp+var_10]
.text$mn:0000053D                 mov     [ecx+2Ch], edx
.text$mn:00000540                 mov     eax, [ebp+var_4]
.text$mn:00000543                 mov     dword ptr [eax+4], 1
.text$mn:0000054A                 mov     ecx, [ebp+var_4]
.text$mn:0000054D                 mov     eax, [ecx+4]
.text$mn:00000550                 jmp     short loc_563
.text$mn:00000552 ; ---------------------------------------------------------------------------
.text$mn:00000552
.text$mn:00000552 loc_552:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+155j
.text$mn:00000552                 jmp     short loc_4E6
.text$mn:00000554 ; ---------------------------------------------------------------------------
.text$mn:00000554
.text$mn:00000554 loc_554:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+FBj
.text$mn:00000554                                         ; nsMBCSGroupProber::HandleData(char const *,uint)+113j
.text$mn:00000554                 mov     edx, [ebp+var_4]
.text$mn:00000557                 mov     eax, [ebp+var_8]
.text$mn:0000055A                 mov     [edx+34h], eax
.text$mn:0000055D                 mov     ecx, [ebp+var_4]
.text$mn:00000560                 mov     eax, [ecx+4]
.text$mn:00000563
.text$mn:00000563 loc_563:                                ; CODE XREF: nsMBCSGroupProber::HandleData(char const *,uint)+EBj
.text$mn:00000563                                         ; nsMBCSGroupProber::HandleData(char const *,uint)+170j
.text$mn:00000563                 mov     esp, ebp
.text$mn:00000565                 pop     ebp
.text$mn:00000566                 retn    8
.text$mn:00000566 ?HandleData@nsMBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z endp
.text$mn:00000566
.text$mn:00000566 ; ---------------------------------------------------------------------------
.text$mn:00000569                 align 10h
.text$mn:00000570
.text$mn:00000570 ; =============== S U B R O U T I N E =======================================
.text$mn:00000570
.text$mn:00000570 ; Attributes: bp-based frame
.text$mn:00000570
.text$mn:00000570 ; const char *__thiscall nsMBCSGroupProber::GetCharSetName(nsMBCSGroupProber *__hidden this)
.text$mn:00000570                 public ?GetCharSetName@nsMBCSGroupProber@@UAEPBDXZ
.text$mn:00000570 ?GetCharSetName@nsMBCSGroupProber@@UAEPBDXZ proc near
.text$mn:00000570                                         ; DATA XREF: .rdata:00001AFCo
.text$mn:00000570
.text$mn:00000570 var_4           = dword ptr -4
.text$mn:00000570
.text$mn:00000570                 push    ebp
.text$mn:00000571                 mov     ebp, esp
.text$mn:00000573                 push    ecx
.text$mn:00000574                 mov     [ebp+var_4], ecx
.text$mn:00000577                 mov     eax, [ebp+var_4]
.text$mn:0000057A                 cmp     dword ptr [eax+2Ch], 0FFFFFFFFh
.text$mn:0000057E                 jnz     short loc_5A2
.text$mn:00000580                 mov     ecx, [ebp+var_4]
.text$mn:00000583                 mov     edx, [ecx]
.text$mn:00000585                 mov     ecx, [ebp+var_4]
.text$mn:00000588                 mov     eax, [edx+14h]
.text$mn:0000058B                 call    eax
.text$mn:0000058D                 fstp    st
.text$mn:0000058F                 mov     ecx, [ebp+var_4]
.text$mn:00000592                 cmp     dword ptr [ecx+2Ch], 0FFFFFFFFh
.text$mn:00000596                 jnz     short loc_5A2
.text$mn:00000598                 mov     edx, [ebp+var_4]
.text$mn:0000059B                 mov     dword ptr [edx+2Ch], 0
.text$mn:000005A2
.text$mn:000005A2 loc_5A2:                                ; CODE XREF: nsMBCSGroupProber::GetCharSetName(void)+Ej
.text$mn:000005A2                                         ; nsMBCSGroupProber::GetCharSetName(void)+26j
.text$mn:000005A2                 mov     eax, [ebp+var_4]
.text$mn:000005A5                 mov     ecx, [eax+2Ch]
.text$mn:000005A8                 mov     edx, [ebp+var_4]
.text$mn:000005AB                 mov     eax, [edx+ecx*4+8]
.text$mn:000005AF                 mov     ecx, [ebp+var_4]
.text$mn:000005B2                 mov     edx, [ecx+2Ch]
.text$mn:000005B5                 mov     ecx, [ebp+var_4]
.text$mn:000005B8                 mov     eax, [eax]
.text$mn:000005BA                 mov     ecx, [ecx+edx*4+8]
.text$mn:000005BE                 mov     edx, [eax+4]
.text$mn:000005C1                 call    edx
.text$mn:000005C3                 mov     esp, ebp
.text$mn:000005C5                 pop     ebp
.text$mn:000005C6                 retn
.text$mn:000005C6 ?GetCharSetName@nsMBCSGroupProber@@UAEPBDXZ endp
.text$mn:000005C6
.text$mn:000005C6 ; ---------------------------------------------------------------------------
.text$mn:000005C7                 align 10h
.text$mn:000005D0
.text$mn:000005D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000005D0
.text$mn:000005D0 ; Attributes: bp-based frame
.text$mn:000005D0
.text$mn:000005D0 ; void __thiscall nsMBCSGroupProber::Reset(nsMBCSGroupProber *__hidden this)
.text$mn:000005D0                 public ?Reset@nsMBCSGroupProber@@UAEXXZ
.text$mn:000005D0 ?Reset@nsMBCSGroupProber@@UAEXXZ proc near
.text$mn:000005D0                                         ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+301p
.text$mn:000005D0                                         ; DATA XREF: .rdata:00001B08o
.text$mn:000005D0
.text$mn:000005D0 var_8           = dword ptr -8
.text$mn:000005D0 var_4           = dword ptr -4
.text$mn:000005D0
.text$mn:000005D0                 push    ebp
.text$mn:000005D1                 mov     ebp, esp
.text$mn:000005D3                 sub     esp, 8
.text$mn:000005D6                 mov     [ebp+var_4], ecx
.text$mn:000005D9                 mov     eax, [ebp+var_4]
.text$mn:000005DC                 mov     dword ptr [eax+30h], 0
.text$mn:000005E3                 mov     [ebp+var_8], 0
.text$mn:000005EA                 jmp     short loc_5F5
.text$mn:000005EC ; ---------------------------------------------------------------------------
.text$mn:000005EC
.text$mn:000005EC loc_5EC:                                ; CODE XREF: nsMBCSGroupProber::Reset(void):loc_648j
.text$mn:000005EC                 mov     ecx, [ebp+var_8]
.text$mn:000005EF                 add     ecx, 1
.text$mn:000005F2                 mov     [ebp+var_8], ecx
.text$mn:000005F5
.text$mn:000005F5 loc_5F5:                                ; CODE XREF: nsMBCSGroupProber::Reset(void)+1Aj
.text$mn:000005F5                 cmp     [ebp+var_8], 7
.text$mn:000005F9                 jnb     short loc_64A
.text$mn:000005FB                 mov     edx, [ebp+var_8]
.text$mn:000005FE                 mov     eax, [ebp+var_4]
.text$mn:00000601                 cmp     dword ptr [eax+edx*4+8], 0
.text$mn:00000606                 jz      short loc_63E
.text$mn:00000608                 mov     ecx, [ebp+var_8]
.text$mn:0000060B                 mov     edx, [ebp+var_4]
.text$mn:0000060E                 mov     eax, [edx+ecx*4+8]
.text$mn:00000612                 mov     ecx, [ebp+var_8]
.text$mn:00000615                 mov     edx, [ebp+var_4]
.text$mn:00000618                 mov     eax, [eax]
.text$mn:0000061A                 mov     ecx, [edx+ecx*4+8]
.text$mn:0000061E                 mov     edx, [eax+10h]
.text$mn:00000621                 call    edx
.text$mn:00000623                 mov     eax, [ebp+var_4]
.text$mn:00000626                 add     eax, [ebp+var_8]
.text$mn:00000629                 mov     byte ptr [eax+24h], 1
.text$mn:0000062D                 mov     ecx, [ebp+var_4]
.text$mn:00000630                 mov     edx, [ecx+30h]
.text$mn:00000633                 add     edx, 1
.text$mn:00000636                 mov     eax, [ebp+var_4]
.text$mn:00000639                 mov     [eax+30h], edx
.text$mn:0000063C                 jmp     short loc_648
.text$mn:0000063E ; ---------------------------------------------------------------------------
.text$mn:0000063E
.text$mn:0000063E loc_63E:                                ; CODE XREF: nsMBCSGroupProber::Reset(void)+36j
.text$mn:0000063E                 mov     ecx, [ebp+var_4]
.text$mn:00000641                 add     ecx, [ebp+var_8]
.text$mn:00000644                 mov     byte ptr [ecx+24h], 0
.text$mn:00000648
.text$mn:00000648 loc_648:                                ; CODE XREF: nsMBCSGroupProber::Reset(void)+6Cj
.text$mn:00000648                 jmp     short loc_5EC
.text$mn:0000064A ; ---------------------------------------------------------------------------
.text$mn:0000064A
.text$mn:0000064A loc_64A:                                ; CODE XREF: nsMBCSGroupProber::Reset(void)+29j
.text$mn:0000064A                 mov     edx, [ebp+var_4]
.text$mn:0000064D                 mov     dword ptr [edx+2Ch], 0FFFFFFFFh
.text$mn:00000654                 mov     eax, [ebp+var_4]
.text$mn:00000657                 mov     dword ptr [eax+4], 0
.text$mn:0000065E                 mov     ecx, [ebp+var_4]
.text$mn:00000661                 mov     dword ptr [ecx+34h], 0
.text$mn:00000668                 mov     esp, ebp
.text$mn:0000066A                 pop     ebp
.text$mn:0000066B                 retn
.text$mn:0000066B ?Reset@nsMBCSGroupProber@@UAEXXZ endp
.text$mn:0000066B
.text$mn:0000066B ; ---------------------------------------------------------------------------
.text$mn:0000066C                 align 10h
.text$mn:00000670
.text$mn:00000670 ; =============== S U B R O U T I N E =======================================
.text$mn:00000670
.text$mn:00000670 ; Attributes: bp-based frame
.text$mn:00000670
.text$mn:00000670 ; float __thiscall nsMBCSGroupProber::GetConfidence(nsMBCSGroupProber *__hidden this)
.text$mn:00000670                 public ?GetConfidence@nsMBCSGroupProber@@UAEMXZ
.text$mn:00000670 ?GetConfidence@nsMBCSGroupProber@@UAEMXZ proc near
.text$mn:00000670                                         ; DATA XREF: .rdata:00001B0Co
.text$mn:00000670
.text$mn:00000670 var_14          = dword ptr -14h
.text$mn:00000670 var_10          = dword ptr -10h
.text$mn:00000670 var_C           = dword ptr -0Ch
.text$mn:00000670 var_8           = dword ptr -8
.text$mn:00000670 var_4           = dword ptr -4
.text$mn:00000670
.text$mn:00000670                 push    ebp
.text$mn:00000671                 mov     ebp, esp
.text$mn:00000673                 sub     esp, 14h
.text$mn:00000676                 push    esi
.text$mn:00000677                 mov     [ebp+var_8], ecx
.text$mn:0000067A                 movss   xmm0, ds:__real@00000000
.text$mn:00000682                 movss   [ebp+var_C], xmm0
.text$mn:00000687                 mov     eax, [ebp+var_8]
.text$mn:0000068A                 mov     ecx, [eax+4]
.text$mn:0000068D                 mov     [ebp+var_10], ecx
.text$mn:00000690                 cmp     [ebp+var_10], 1
.text$mn:00000694                 jz      short loc_69E
.text$mn:00000696                 cmp     [ebp+var_10], 2
.text$mn:0000069A                 jz      short loc_6A6
.text$mn:0000069C                 jmp     short loc_6AE
.text$mn:0000069E ; ---------------------------------------------------------------------------
.text$mn:0000069E
.text$mn:0000069E loc_69E:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+24j
.text$mn:0000069E                 fld     ds:__real@3f7d70a4
.text$mn:000006A4                 jmp     short loc_717
.text$mn:000006A6 ; ---------------------------------------------------------------------------
.text$mn:000006A6
.text$mn:000006A6 loc_6A6:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+2Aj
.text$mn:000006A6                 fld     ds:__real@3c23d70a
.text$mn:000006AC                 jmp     short loc_717
.text$mn:000006AE ; ---------------------------------------------------------------------------
.text$mn:000006AE
.text$mn:000006AE loc_6AE:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+2Cj
.text$mn:000006AE                 mov     [ebp+var_4], 0
.text$mn:000006B5                 jmp     short loc_6C0
.text$mn:000006B7 ; ---------------------------------------------------------------------------
.text$mn:000006B7
.text$mn:000006B7 loc_6B7:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+64j
.text$mn:000006B7                                         ; nsMBCSGroupProber::GetConfidence(void):loc_712j
.text$mn:000006B7                 mov     edx, [ebp+var_4]
.text$mn:000006BA                 add     edx, 1
.text$mn:000006BD                 mov     [ebp+var_4], edx
.text$mn:000006C0
.text$mn:000006C0 loc_6C0:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+45j
.text$mn:000006C0                 cmp     [ebp+var_4], 7
.text$mn:000006C4                 jnb     short loc_714
.text$mn:000006C6                 mov     eax, [ebp+var_8]
.text$mn:000006C9                 add     eax, [ebp+var_4]
.text$mn:000006CC                 movzx   ecx, byte ptr [eax+24h]
.text$mn:000006D0                 test    ecx, ecx
.text$mn:000006D2                 jnz     short loc_6D6
.text$mn:000006D4                 jmp     short loc_6B7
.text$mn:000006D6 ; ---------------------------------------------------------------------------
.text$mn:000006D6
.text$mn:000006D6 loc_6D6:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+62j
.text$mn:000006D6                 mov     edx, [ebp+var_4]
.text$mn:000006D9                 mov     eax, [ebp+var_8]
.text$mn:000006DC                 mov     ecx, [eax+edx*4+8]
.text$mn:000006E0                 mov     edx, [ebp+var_4]
.text$mn:000006E3                 mov     eax, [ebp+var_8]
.text$mn:000006E6                 mov     esi, [ecx]
.text$mn:000006E8                 mov     ecx, [eax+edx*4+8]
.text$mn:000006EC                 mov     edx, [esi+14h]
.text$mn:000006EF                 call    edx
.text$mn:000006F1                 fstp    [ebp+var_14]
.text$mn:000006F4                 movss   xmm0, [ebp+var_14]
.text$mn:000006F9                 comiss  xmm0, [ebp+var_C]
.text$mn:000006FD                 jbe     short loc_712
.text$mn:000006FF                 movss   xmm0, [ebp+var_14]
.text$mn:00000704                 movss   [ebp+var_C], xmm0
.text$mn:00000709                 mov     eax, [ebp+var_8]
.text$mn:0000070C                 mov     ecx, [ebp+var_4]
.text$mn:0000070F                 mov     [eax+2Ch], ecx
.text$mn:00000712
.text$mn:00000712 loc_712:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+8Dj
.text$mn:00000712                 jmp     short loc_6B7
.text$mn:00000714 ; ---------------------------------------------------------------------------
.text$mn:00000714
.text$mn:00000714 loc_714:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+54j
.text$mn:00000714                 fld     [ebp+var_C]
.text$mn:00000717
.text$mn:00000717 loc_717:                                ; CODE XREF: nsMBCSGroupProber::GetConfidence(void)+34j
.text$mn:00000717                                         ; nsMBCSGroupProber::GetConfidence(void)+3Cj
.text$mn:00000717                 pop     esi
.text$mn:00000718                 mov     esp, ebp
.text$mn:0000071A                 pop     ebp
.text$mn:0000071B                 retn
.text$mn:0000071B ?GetConfidence@nsMBCSGroupProber@@UAEMXZ endp
.text$mn:0000071B
.text$mn:0000071B _text$mn        ends
.text$mn:0000071B
.text$x:0000071C ; ===========================================================================
.text$x:0000071C
.text$x:0000071C ; Segment type: Pure code
.text$x:0000071C ; Segment permissions: Read/Execute
.text$x:0000071C _text$x         segment para public 'CODE' use32
.text$x:0000071C                 assume cs:_text$x
.text$x:0000071C                 ;org 71Ch
.text$x:0000071C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:0000071C
.text$x:0000071C ; =============== S U B R O U T I N E =======================================
.text$x:0000071C
.text$x:0000071C
.text$x:0000071C __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$0 proc near
.text$x:0000071C                                         ; DATA XREF: .xdata$x:00001954o
.text$x:0000071C                 mov     ecx, [ebp-18h]  ; this
.text$x:0000071F                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:0000071F __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$0 endp
.text$x:0000071F
.text$x:00000724
.text$x:00000724 ; =============== S U B R O U T I N E =======================================
.text$x:00000724
.text$x:00000724
.text$x:00000724 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$1 proc near
.text$x:00000724                                         ; DATA XREF: .xdata$x:0000195Co
.text$x:00000724                 mov     eax, [ebp-20h]
.text$x:00000727                 push    eax             ; void *
.text$x:00000728                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000072D                 pop     ecx
.text$x:0000072E                 retn
.text$x:0000072E __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$1 endp
.text$x:0000072E
.text$x:0000072F
.text$x:0000072F ; =============== S U B R O U T I N E =======================================
.text$x:0000072F
.text$x:0000072F
.text$x:0000072F __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$2 proc near
.text$x:0000072F                                         ; DATA XREF: .xdata$x:00001964o
.text$x:0000072F                 mov     eax, [ebp-28h]
.text$x:00000732                 push    eax             ; void *
.text$x:00000733                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000738                 pop     ecx
.text$x:00000739                 retn
.text$x:00000739 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$2 endp
.text$x:00000739
.text$x:0000073A
.text$x:0000073A ; =============== S U B R O U T I N E =======================================
.text$x:0000073A
.text$x:0000073A
.text$x:0000073A __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$3 proc near
.text$x:0000073A                                         ; DATA XREF: .xdata$x:0000196Co
.text$x:0000073A                 mov     eax, [ebp-30h]
.text$x:0000073D                 push    eax             ; void *
.text$x:0000073E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000743                 pop     ecx
.text$x:00000744                 retn
.text$x:00000744 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$3 endp
.text$x:00000744
.text$x:00000745
.text$x:00000745 ; =============== S U B R O U T I N E =======================================
.text$x:00000745
.text$x:00000745
.text$x:00000745 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$4 proc near
.text$x:00000745                                         ; DATA XREF: .xdata$x:00001974o
.text$x:00000745                 mov     eax, [ebp-38h]
.text$x:00000748                 push    eax             ; void *
.text$x:00000749                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000074E                 pop     ecx
.text$x:0000074F                 retn
.text$x:0000074F __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$4 endp
.text$x:0000074F
.text$x:00000750
.text$x:00000750 ; =============== S U B R O U T I N E =======================================
.text$x:00000750
.text$x:00000750
.text$x:00000750 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$5 proc near
.text$x:00000750                                         ; DATA XREF: .xdata$x:0000197Co
.text$x:00000750                 mov     eax, [ebp-40h]
.text$x:00000753                 push    eax             ; void *
.text$x:00000754                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000759                 pop     ecx
.text$x:0000075A                 retn
.text$x:0000075A __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$5 endp
.text$x:0000075A
.text$x:0000075B
.text$x:0000075B ; =============== S U B R O U T I N E =======================================
.text$x:0000075B
.text$x:0000075B
.text$x:0000075B __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$6 proc near
.text$x:0000075B                                         ; DATA XREF: .xdata$x:00001984o
.text$x:0000075B                 mov     eax, [ebp-48h]
.text$x:0000075E                 push    eax             ; void *
.text$x:0000075F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000764                 pop     ecx
.text$x:00000765                 retn
.text$x:00000765 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$6 endp
.text$x:00000765
.text$x:00000766
.text$x:00000766 ; =============== S U B R O U T I N E =======================================
.text$x:00000766
.text$x:00000766
.text$x:00000766 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$7 proc near
.text$x:00000766                                         ; DATA XREF: .xdata$x:0000198Co
.text$x:00000766                 mov     eax, [ebp-50h]
.text$x:00000769                 push    eax             ; void *
.text$x:0000076A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000076F                 pop     ecx
.text$x:00000770                 retn
.text$x:00000770 __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$7 endp
.text$x:00000770
.text$x:00000771
.text$x:00000771 ; =============== S U B R O U T I N E =======================================
.text$x:00000771
.text$x:00000771
.text$x:00000771 __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z proc near
.text$x:00000771                                         ; DATA XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+5o
.text$x:00000771
.text$x:00000771 arg_4           = dword ptr  8
.text$x:00000771
.text$x:00000771                 mov     edx, [esp+arg_4]
.text$x:00000775                 lea     eax, [edx+0Ch]
.text$x:00000778                 mov     ecx, [edx-68h]
.text$x:0000077B                 xor     ecx, eax
.text$x:0000077D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000782                 mov     eax, offset __ehfuncinfo$??0nsMBCSGroupProber@@QAE@I@Z
.text$x:00000787                 jmp     ___CxxFrameHandler3
.text$x:00000787 __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z endp
.text$x:00000787
.text$x:0000078C
.text$x:0000078C ; =============== S U B R O U T I N E =======================================
.text$x:0000078C
.text$x:0000078C
.text$x:0000078C __unwindfunclet$??1nsMBCSGroupProber@@UAE@XZ$0 proc near
.text$x:0000078C                                         ; DATA XREF: .xdata$x:00001904o
.text$x:0000078C                 mov     ecx, [ebp-18h]  ; this
.text$x:0000078F                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:0000078F __unwindfunclet$??1nsMBCSGroupProber@@UAE@XZ$0 endp
.text$x:0000078F
.text$x:00000794
.text$x:00000794 ; =============== S U B R O U T I N E =======================================
.text$x:00000794
.text$x:00000794
.text$x:00000794 __ehhandler$??1nsMBCSGroupProber@@UAE@XZ proc near
.text$x:00000794                                         ; DATA XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+5o
.text$x:00000794
.text$x:00000794 arg_4           = dword ptr  8
.text$x:00000794
.text$x:00000794                 mov     edx, [esp+arg_4]
.text$x:00000798                 lea     eax, [edx+0Ch]
.text$x:0000079B                 mov     ecx, [edx-18h]
.text$x:0000079E                 xor     ecx, eax
.text$x:000007A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007A5                 mov     eax, offset __ehfuncinfo$??1nsMBCSGroupProber@@UAE@XZ
.text$x:000007AA                 jmp     ___CxxFrameHandler3
.text$x:000007AA __ehhandler$??1nsMBCSGroupProber@@UAE@XZ endp
.text$x:000007AA
.text$x:000007AA ; ---------------------------------------------------------------------------
.text$x:000007AF                 align 10h
.text$x:000007AF _text$x         ends
.text$x:000007AF
.text$mn:000007B0 ; ===========================================================================
.text$mn:000007B0
.text$mn:000007B0 ; Segment type: Pure code
.text$mn:000007B0 ; Segment permissions: Read/Execute
.text$mn:000007B0 _text$mn        segment para public 'CODE' use32
.text$mn:000007B0                 assume cs:_text$mn
.text$mn:000007B0                 ;org 7B0h
.text$mn:000007B0 ; COMDAT (pick any)
.text$mn:000007B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000007B0
.text$mn:000007B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000007B0
.text$mn:000007B0 ; Attributes: bp-based frame
.text$mn:000007B0
.text$mn:000007B0 ; public: __thiscall EUCJPContextAnalysis::EUCJPContextAnalysis(void)
.text$mn:000007B0                 public ??0EUCJPContextAnalysis@@QAE@XZ
.text$mn:000007B0 ??0EUCJPContextAnalysis@@QAE@XZ proc near
.text$mn:000007B0                                         ; CODE XREF: nsEUCJPProber::nsEUCJPProber(bool)+46p
.text$mn:000007B0
.text$mn:000007B0 var_4           = dword ptr -4
.text$mn:000007B0
.text$mn:000007B0                 push    ebp
.text$mn:000007B1                 mov     ebp, esp
.text$mn:000007B3                 push    ecx
.text$mn:000007B4                 mov     [ebp+var_4], ecx
.text$mn:000007B7                 mov     ecx, [ebp+var_4]
.text$mn:000007BA                 call    ??0JapaneseContextAnalysis@@QAE@XZ ; JapaneseContextAnalysis::JapaneseContextAnalysis(void)
.text$mn:000007BF                 mov     eax, [ebp+var_4]
.text$mn:000007C2                 mov     dword ptr [eax], offset ??_7EUCJPContextAnalysis@@6B@ ; const EUCJPContextAnalysis::`vftable'
.text$mn:000007C8                 mov     eax, [ebp+var_4]
.text$mn:000007CB                 mov     esp, ebp
.text$mn:000007CD                 pop     ebp
.text$mn:000007CE                 retn
.text$mn:000007CE ??0EUCJPContextAnalysis@@QAE@XZ endp
.text$mn:000007CE
.text$mn:000007CE ; ---------------------------------------------------------------------------
.text$mn:000007CF                 align 10h
.text$mn:000007CF _text$mn        ends
.text$mn:000007CF
.text$mn:000007D0 ; ===========================================================================
.text$mn:000007D0
.text$mn:000007D0 ; Segment type: Pure code
.text$mn:000007D0 ; Segment permissions: Read/Execute
.text$mn:000007D0 _text$mn        segment para public 'CODE' use32
.text$mn:000007D0                 assume cs:_text$mn
.text$mn:000007D0                 ;org 7D0h
.text$mn:000007D0 ; COMDAT (pick any)
.text$mn:000007D0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000007D0
.text$mn:000007D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000007D0
.text$mn:000007D0 ; Attributes: bp-based frame
.text$mn:000007D0
.text$mn:000007D0 ; public: __thiscall JapaneseContextAnalysis::JapaneseContextAnalysis(void)
.text$mn:000007D0                 public ??0JapaneseContextAnalysis@@QAE@XZ
.text$mn:000007D0 ??0JapaneseContextAnalysis@@QAE@XZ proc near
.text$mn:000007D0                                         ; CODE XREF: EUCJPContextAnalysis::EUCJPContextAnalysis(void)+Ap
.text$mn:000007D0                                         ; SJISContextAnalysis::SJISContextAnalysis(void)+Ap
.text$mn:000007D0
.text$mn:000007D0 var_4           = dword ptr -4
.text$mn:000007D0
.text$mn:000007D0                 push    ebp
.text$mn:000007D1                 mov     ebp, esp
.text$mn:000007D3                 push    ecx
.text$mn:000007D4                 mov     [ebp+var_4], ecx
.text$mn:000007D7                 mov     eax, [ebp+var_4]
.text$mn:000007DA                 mov     dword ptr [eax], offset ??_7JapaneseContextAnalysis@@6B@ ; const JapaneseContextAnalysis::`vftable'
.text$mn:000007E0                 push    0               ; bool
.text$mn:000007E2                 mov     ecx, [ebp+var_4] ; this
.text$mn:000007E5                 call    ?Reset@JapaneseContextAnalysis@@QAEX_N@Z ; JapaneseContextAnalysis::Reset(bool)
.text$mn:000007EA                 mov     eax, [ebp+var_4]
.text$mn:000007ED                 mov     esp, ebp
.text$mn:000007EF                 pop     ebp
.text$mn:000007F0                 retn
.text$mn:000007F0 ??0JapaneseContextAnalysis@@QAE@XZ endp
.text$mn:000007F0
.text$mn:000007F0 ; ---------------------------------------------------------------------------
.text$mn:000007F1                 align 4
.text$mn:000007F1 _text$mn        ends
.text$mn:000007F1
.text$mn:000007F4 ; ===========================================================================
.text$mn:000007F4
.text$mn:000007F4 ; Segment type: Pure code
.text$mn:000007F4 ; Segment permissions: Read/Execute
.text$mn:000007F4 _text$mn        segment para public 'CODE' use32
.text$mn:000007F4                 assume cs:_text$mn
.text$mn:000007F4                 ;org 7F4h
.text$mn:000007F4 ; COMDAT (pick any)
.text$mn:000007F4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000007F4
.text$mn:000007F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000007F4
.text$mn:000007F4 ; Attributes: bp-based frame
.text$mn:000007F4
.text$mn:000007F4 ; public: __thiscall SJISContextAnalysis::SJISContextAnalysis(void)
.text$mn:000007F4                 public ??0SJISContextAnalysis@@QAE@XZ
.text$mn:000007F4 ??0SJISContextAnalysis@@QAE@XZ proc near
.text$mn:000007F4                                         ; CODE XREF: nsSJISProber::nsSJISProber(bool)+46p
.text$mn:000007F4
.text$mn:000007F4 var_4           = dword ptr -4
.text$mn:000007F4
.text$mn:000007F4                 push    ebp
.text$mn:000007F5                 mov     ebp, esp
.text$mn:000007F7                 push    ecx
.text$mn:000007F8                 mov     [ebp+var_4], ecx
.text$mn:000007FB                 mov     ecx, [ebp+var_4]
.text$mn:000007FE                 call    ??0JapaneseContextAnalysis@@QAE@XZ ; JapaneseContextAnalysis::JapaneseContextAnalysis(void)
.text$mn:00000803                 mov     eax, [ebp+var_4]
.text$mn:00000806                 mov     dword ptr [eax], offset ??_7SJISContextAnalysis@@6B@ ; const SJISContextAnalysis::`vftable'
.text$mn:0000080C                 mov     eax, [ebp+var_4]
.text$mn:0000080F                 mov     esp, ebp
.text$mn:00000811                 pop     ebp
.text$mn:00000812                 retn
.text$mn:00000812 ??0SJISContextAnalysis@@QAE@XZ endp
.text$mn:00000812
.text$mn:00000812 ; ---------------------------------------------------------------------------
.text$mn:00000813                 align 4
.text$mn:00000813 _text$mn        ends
.text$mn:00000813
.text$mn:00000814 ; ===========================================================================
.text$mn:00000814
.text$mn:00000814 ; Segment type: Pure code
.text$mn:00000814 ; Segment permissions: Read/Execute
.text$mn:00000814 _text$mn        segment para public 'CODE' use32
.text$mn:00000814                 assume cs:_text$mn
.text$mn:00000814                 ;org 814h
.text$mn:00000814 ; COMDAT (pick any)
.text$mn:00000814                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000814
.text$mn:00000814 ; =============== S U B R O U T I N E =======================================
.text$mn:00000814
.text$mn:00000814 ; Attributes: bp-based frame
.text$mn:00000814
.text$mn:00000814 ; public: __thiscall nsBig5Prober::nsBig5Prober(bool)
.text$mn:00000814                 public ??0nsBig5Prober@@QAE@_N@Z
.text$mn:00000814 ??0nsBig5Prober@@QAE@_N@Z proc near     ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+275p
.text$mn:00000814
.text$mn:00000814 var_1C          = dword ptr -1Ch
.text$mn:00000814 var_18          = dword ptr -18h
.text$mn:00000814 var_14          = dword ptr -14h
.text$mn:00000814 var_10          = dword ptr -10h
.text$mn:00000814 var_C           = dword ptr -0Ch
.text$mn:00000814 var_4           = dword ptr -4
.text$mn:00000814 arg_0           = byte ptr  8
.text$mn:00000814
.text$mn:00000814                 push    ebp
.text$mn:00000815                 mov     ebp, esp
.text$mn:00000817                 push    0FFFFFFFFh
.text$mn:00000819                 push    offset __ehhandler$??0nsBig5Prober@@QAE@_N@Z
.text$mn:0000081E                 mov     eax, large fs:0
.text$mn:00000824                 push    eax
.text$mn:00000825                 sub     esp, 10h
.text$mn:00000828                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000082D                 xor     eax, ebp
.text$mn:0000082F                 push    eax
.text$mn:00000830                 lea     eax, [ebp+var_C]
.text$mn:00000833                 mov     large fs:0, eax
.text$mn:00000839                 mov     [ebp+var_10], ecx
.text$mn:0000083C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000083F                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000844                 mov     [ebp+var_4], 0
.text$mn:0000084B                 mov     eax, [ebp+var_10]
.text$mn:0000084E                 mov     dword ptr [eax], offset ??_7nsBig5Prober@@6B@ ; const nsBig5Prober::`vftable'
.text$mn:00000854                 mov     ecx, [ebp+var_10]
.text$mn:00000857                 add     ecx, 0Ch        ; this
.text$mn:0000085A                 call    ??0Big5DistributionAnalysis@@QAE@XZ ; Big5DistributionAnalysis::Big5DistributionAnalysis(void)
.text$mn:0000085F                 mov     ecx, [ebp+var_10]
.text$mn:00000862                 mov     dl, [ebp+arg_0]
.text$mn:00000865                 mov     [ecx+2Eh], dl
.text$mn:00000868                 push    10h             ; unsigned int
.text$mn:0000086A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000086F                 add     esp, 4
.text$mn:00000872                 mov     [ebp+var_14], eax
.text$mn:00000875                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000879                 cmp     [ebp+var_14], 0
.text$mn:0000087D                 jz      short loc_891
.text$mn:0000087F                 push    offset ?Big5SMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000884                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000887                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:0000088C                 mov     [ebp+var_18], eax
.text$mn:0000088F                 jmp     short loc_898
.text$mn:00000891 ; ---------------------------------------------------------------------------
.text$mn:00000891
.text$mn:00000891 loc_891:                                ; CODE XREF: nsBig5Prober::nsBig5Prober(bool)+69j
.text$mn:00000891                 mov     [ebp+var_18], 0
.text$mn:00000898
.text$mn:00000898 loc_898:                                ; CODE XREF: nsBig5Prober::nsBig5Prober(bool)+7Bj
.text$mn:00000898                 mov     eax, [ebp+var_18]
.text$mn:0000089B                 mov     [ebp+var_1C], eax
.text$mn:0000089E                 mov     byte ptr [ebp+var_4], 0
.text$mn:000008A2                 mov     ecx, [ebp+var_10]
.text$mn:000008A5                 mov     edx, [ebp+var_1C]
.text$mn:000008A8                 mov     [ecx+4], edx
.text$mn:000008AB                 mov     ecx, [ebp+var_10] ; this
.text$mn:000008AE                 call    ?Reset@nsBig5Prober@@UAEXXZ ; nsBig5Prober::Reset(void)
.text$mn:000008B3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000008BA                 mov     eax, [ebp+var_10]
.text$mn:000008BD                 mov     ecx, [ebp+var_C]
.text$mn:000008C0                 mov     large fs:0, ecx
.text$mn:000008C7                 pop     ecx
.text$mn:000008C8                 mov     esp, ebp
.text$mn:000008CA                 pop     ebp
.text$mn:000008CB                 retn    4
.text$mn:000008CB ??0nsBig5Prober@@QAE@_N@Z endp
.text$mn:000008CB
.text$mn:000008CB ; ---------------------------------------------------------------------------
.text$mn:000008CE                 align 10h
.text$mn:000008CE _text$mn        ends
.text$mn:000008CE
.text$x:000008D0 ; ===========================================================================
.text$x:000008D0
.text$x:000008D0 ; Segment type: Pure code
.text$x:000008D0 ; Segment permissions: Read/Execute
.text$x:000008D0 _text$x         segment para public 'CODE' use32
.text$x:000008D0                 assume cs:_text$x
.text$x:000008D0                 ;org 8D0h
.text$x:000008D0 ; COMDAT (pick associative to section at 814)
.text$x:000008D0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:000008D0
.text$x:000008D0 ; =============== S U B R O U T I N E =======================================
.text$x:000008D0
.text$x:000008D0
.text$x:000008D0 __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$0 proc near
.text$x:000008D0                                         ; DATA XREF: .xdata$x:00001844o
.text$x:000008D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000008D3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:000008D3 __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$0 endp
.text$x:000008D3
.text$x:000008D8
.text$x:000008D8 ; =============== S U B R O U T I N E =======================================
.text$x:000008D8
.text$x:000008D8
.text$x:000008D8 __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$1 proc near
.text$x:000008D8                                         ; DATA XREF: .xdata$x:0000184Co
.text$x:000008D8                 mov     eax, [ebp-14h]
.text$x:000008DB                 push    eax             ; void *
.text$x:000008DC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000008E1                 pop     ecx
.text$x:000008E2                 retn
.text$x:000008E2 __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$1 endp
.text$x:000008E2
.text$x:000008E3
.text$x:000008E3 ; =============== S U B R O U T I N E =======================================
.text$x:000008E3
.text$x:000008E3
.text$x:000008E3 __ehhandler$??0nsBig5Prober@@QAE@_N@Z proc near
.text$x:000008E3                                         ; DATA XREF: nsBig5Prober::nsBig5Prober(bool)+5o
.text$x:000008E3
.text$x:000008E3 arg_4           = dword ptr  8
.text$x:000008E3
.text$x:000008E3                 mov     edx, [esp+arg_4]
.text$x:000008E7                 lea     eax, [edx+0Ch]
.text$x:000008EA                 mov     ecx, [edx-14h]
.text$x:000008ED                 xor     ecx, eax
.text$x:000008EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000008F4                 mov     eax, offset __ehfuncinfo$??0nsBig5Prober@@QAE@_N@Z
.text$x:000008F9                 jmp     ___CxxFrameHandler3
.text$x:000008F9 __ehhandler$??0nsBig5Prober@@QAE@_N@Z endp
.text$x:000008F9
.text$x:000008F9 ; ---------------------------------------------------------------------------
.text$x:000008FE                 align 10h
.text$x:000008FE _text$x         ends
.text$x:000008FE
.text$mn:00000900 ; ===========================================================================
.text$mn:00000900
.text$mn:00000900 ; Segment type: Pure code
.text$mn:00000900 ; Segment permissions: Read/Execute
.text$mn:00000900 _text$mn        segment para public 'CODE' use32
.text$mn:00000900                 assume cs:_text$mn
.text$mn:00000900                 ;org 900h
.text$mn:00000900 ; COMDAT (pick any)
.text$mn:00000900                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000900
.text$mn:00000900 ; =============== S U B R O U T I N E =======================================
.text$mn:00000900
.text$mn:00000900 ; Attributes: bp-based frame
.text$mn:00000900
.text$mn:00000900 ; _DWORD __thiscall nsCharSetProber::nsCharSetProber(nsCharSetProber *__hidden this)
.text$mn:00000900                 public ??0nsCharSetProber@@QAE@XZ
.text$mn:00000900 ??0nsCharSetProber@@QAE@XZ proc near    ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2Bp
.text$mn:00000900                                         ; nsBig5Prober::nsBig5Prober(bool)+2Bp ...
.text$mn:00000900
.text$mn:00000900 var_4           = dword ptr -4
.text$mn:00000900
.text$mn:00000900                 push    ebp
.text$mn:00000901                 mov     ebp, esp
.text$mn:00000903                 push    ecx
.text$mn:00000904                 mov     [ebp+var_4], ecx
.text$mn:00000907                 mov     eax, [ebp+var_4]
.text$mn:0000090A                 mov     dword ptr [eax], offset ??_7nsCharSetProber@@6B@ ; const nsCharSetProber::`vftable'
.text$mn:00000910                 mov     eax, [ebp+var_4]
.text$mn:00000913                 mov     esp, ebp
.text$mn:00000915                 pop     ebp
.text$mn:00000916                 retn
.text$mn:00000916 ??0nsCharSetProber@@QAE@XZ endp
.text$mn:00000916
.text$mn:00000916 ; ---------------------------------------------------------------------------
.text$mn:00000917                 align 4
.text$mn:00000917 _text$mn        ends
.text$mn:00000917
.text$mn:00000918 ; ===========================================================================
.text$mn:00000918
.text$mn:00000918 ; Segment type: Pure code
.text$mn:00000918 ; Segment permissions: Read/Execute
.text$mn:00000918 _text$mn        segment para public 'CODE' use32
.text$mn:00000918                 assume cs:_text$mn
.text$mn:00000918                 ;org 918h
.text$mn:00000918 ; COMDAT (pick any)
.text$mn:00000918                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000918
.text$mn:00000918 ; =============== S U B R O U T I N E =======================================
.text$mn:00000918
.text$mn:00000918 ; Attributes: bp-based frame
.text$mn:00000918
.text$mn:00000918 ; _DWORD __thiscall nsCodingStateMachine::nsCodingStateMachine(nsCodingStateMachine *this, const struct SMModel *)
.text$mn:00000918                 public ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z
.text$mn:00000918 ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z proc near
.text$mn:00000918                                         ; CODE XREF: nsBig5Prober::nsBig5Prober(bool)+73p
.text$mn:00000918                                         ; nsEUCJPProber::nsEUCJPProber(bool)+7Ep ...
.text$mn:00000918
.text$mn:00000918 var_4           = dword ptr -4
.text$mn:00000918 arg_0           = dword ptr  8
.text$mn:00000918
.text$mn:00000918                 push    ebp
.text$mn:00000919                 mov     ebp, esp
.text$mn:0000091B                 push    ecx
.text$mn:0000091C                 mov     [ebp+var_4], ecx
.text$mn:0000091F                 mov     eax, [ebp+var_4]
.text$mn:00000922                 mov     ecx, [ebp+arg_0]
.text$mn:00000925                 mov     [eax+0Ch], ecx
.text$mn:00000928                 mov     edx, [ebp+var_4]
.text$mn:0000092B                 mov     dword ptr [edx], 0
.text$mn:00000931                 mov     eax, [ebp+var_4]
.text$mn:00000934                 mov     esp, ebp
.text$mn:00000936                 pop     ebp
.text$mn:00000937                 retn    4
.text$mn:00000937 ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z endp
.text$mn:00000937
.text$mn:00000937 ; ---------------------------------------------------------------------------
.text$mn:0000093A                 align 4
.text$mn:0000093A _text$mn        ends
.text$mn:0000093A
.text$mn:0000093C ; ===========================================================================
.text$mn:0000093C
.text$mn:0000093C ; Segment type: Pure code
.text$mn:0000093C ; Segment permissions: Read/Execute
.text$mn:0000093C _text$mn        segment para public 'CODE' use32
.text$mn:0000093C                 assume cs:_text$mn
.text$mn:0000093C                 ;org 93Ch
.text$mn:0000093C ; COMDAT (pick any)
.text$mn:0000093C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:0000093C
.text$mn:0000093C ; =============== S U B R O U T I N E =======================================
.text$mn:0000093C
.text$mn:0000093C ; Attributes: bp-based frame
.text$mn:0000093C
.text$mn:0000093C ; public: __thiscall nsEUCJPProber::nsEUCJPProber(bool)
.text$mn:0000093C                 public ??0nsEUCJPProber@@QAE@_N@Z
.text$mn:0000093C ??0nsEUCJPProber@@QAE@_N@Z proc near    ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+146p
.text$mn:0000093C
.text$mn:0000093C var_1C          = dword ptr -1Ch
.text$mn:0000093C var_18          = dword ptr -18h
.text$mn:0000093C var_14          = dword ptr -14h
.text$mn:0000093C var_10          = dword ptr -10h
.text$mn:0000093C var_C           = dword ptr -0Ch
.text$mn:0000093C var_4           = dword ptr -4
.text$mn:0000093C arg_0           = byte ptr  8
.text$mn:0000093C
.text$mn:0000093C                 push    ebp
.text$mn:0000093D                 mov     ebp, esp
.text$mn:0000093F                 push    0FFFFFFFFh
.text$mn:00000941                 push    offset __ehhandler$??0nsEUCJPProber@@QAE@_N@Z
.text$mn:00000946                 mov     eax, large fs:0
.text$mn:0000094C                 push    eax
.text$mn:0000094D                 sub     esp, 10h
.text$mn:00000950                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000955                 xor     eax, ebp
.text$mn:00000957                 push    eax
.text$mn:00000958                 lea     eax, [ebp+var_C]
.text$mn:0000095B                 mov     large fs:0, eax
.text$mn:00000961                 mov     [ebp+var_10], ecx
.text$mn:00000964                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000967                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:0000096C                 mov     [ebp+var_4], 0
.text$mn:00000973                 mov     eax, [ebp+var_10]
.text$mn:00000976                 mov     dword ptr [eax], offset ??_7nsEUCJPProber@@6B@ ; const nsEUCJPProber::`vftable'
.text$mn:0000097C                 mov     ecx, [ebp+var_10]
.text$mn:0000097F                 add     ecx, 0Ch
.text$mn:00000982                 call    ??0EUCJPContextAnalysis@@QAE@XZ ; EUCJPContextAnalysis::EUCJPContextAnalysis(void)
.text$mn:00000987                 mov     ecx, [ebp+var_10]
.text$mn:0000098A                 add     ecx, 3Ch ; '<'  ; this
.text$mn:0000098D                 call    ??0EUCJPDistributionAnalysis@@QAE@XZ ; EUCJPDistributionAnalysis::EUCJPDistributionAnalysis(void)
.text$mn:00000992                 mov     ecx, [ebp+var_10]
.text$mn:00000995                 mov     dl, [ebp+arg_0]
.text$mn:00000998                 mov     [ecx+5Eh], dl
.text$mn:0000099B                 push    10h             ; unsigned int
.text$mn:0000099D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000009A2                 add     esp, 4
.text$mn:000009A5                 mov     [ebp+var_14], eax
.text$mn:000009A8                 mov     byte ptr [ebp+var_4], 1
.text$mn:000009AC                 cmp     [ebp+var_14], 0
.text$mn:000009B0                 jz      short loc_9C4
.text$mn:000009B2                 push    offset ?EUCJPSMModel@@3USMModel@@B ; struct SMModel *
.text$mn:000009B7                 mov     ecx, [ebp+var_14] ; this
.text$mn:000009BA                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:000009BF                 mov     [ebp+var_18], eax
.text$mn:000009C2                 jmp     short loc_9CB
.text$mn:000009C4 ; ---------------------------------------------------------------------------
.text$mn:000009C4
.text$mn:000009C4 loc_9C4:                                ; CODE XREF: nsEUCJPProber::nsEUCJPProber(bool)+74j
.text$mn:000009C4                 mov     [ebp+var_18], 0
.text$mn:000009CB
.text$mn:000009CB loc_9CB:                                ; CODE XREF: nsEUCJPProber::nsEUCJPProber(bool)+86j
.text$mn:000009CB                 mov     eax, [ebp+var_18]
.text$mn:000009CE                 mov     [ebp+var_1C], eax
.text$mn:000009D1                 mov     byte ptr [ebp+var_4], 0
.text$mn:000009D5                 mov     ecx, [ebp+var_10]
.text$mn:000009D8                 mov     edx, [ebp+var_1C]
.text$mn:000009DB                 mov     [ecx+4], edx
.text$mn:000009DE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000009E1                 call    ?Reset@nsEUCJPProber@@UAEXXZ ; nsEUCJPProber::Reset(void)
.text$mn:000009E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000009ED                 mov     eax, [ebp+var_10]
.text$mn:000009F0                 mov     ecx, [ebp+var_C]
.text$mn:000009F3                 mov     large fs:0, ecx
.text$mn:000009FA                 pop     ecx
.text$mn:000009FB                 mov     esp, ebp
.text$mn:000009FD                 pop     ebp
.text$mn:000009FE                 retn    4
.text$mn:000009FE ??0nsEUCJPProber@@QAE@_N@Z endp
.text$mn:000009FE
.text$mn:000009FE ; ---------------------------------------------------------------------------
.text$mn:00000A01                 align 4
.text$mn:00000A01 _text$mn        ends
.text$mn:00000A01
.text$x:00000A04 ; ===========================================================================
.text$x:00000A04
.text$x:00000A04 ; Segment type: Pure code
.text$x:00000A04 ; Segment permissions: Read/Execute
.text$x:00000A04 _text$x         segment para public 'CODE' use32
.text$x:00000A04                 assume cs:_text$x
.text$x:00000A04                 ;org 0A04h
.text$x:00000A04 ; COMDAT (pick associative to section at 93C)
.text$x:00000A04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000A04
.text$x:00000A04 ; =============== S U B R O U T I N E =======================================
.text$x:00000A04
.text$x:00000A04
.text$x:00000A04 __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$0 proc near
.text$x:00000A04                                         ; DATA XREF: .xdata$x:00001724o
.text$x:00000A04                 mov     ecx, [ebp-10h]  ; this
.text$x:00000A07                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000A07 __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$0 endp
.text$x:00000A07
.text$x:00000A0C
.text$x:00000A0C ; =============== S U B R O U T I N E =======================================
.text$x:00000A0C
.text$x:00000A0C
.text$x:00000A0C __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$1 proc near
.text$x:00000A0C                                         ; DATA XREF: .xdata$x:0000172Co
.text$x:00000A0C                 mov     eax, [ebp-14h]
.text$x:00000A0F                 push    eax             ; void *
.text$x:00000A10                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000A15                 pop     ecx
.text$x:00000A16                 retn
.text$x:00000A16 __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$1 endp
.text$x:00000A16
.text$x:00000A17
.text$x:00000A17 ; =============== S U B R O U T I N E =======================================
.text$x:00000A17
.text$x:00000A17
.text$x:00000A17 __ehhandler$??0nsEUCJPProber@@QAE@_N@Z proc near
.text$x:00000A17                                         ; DATA XREF: nsEUCJPProber::nsEUCJPProber(bool)+5o
.text$x:00000A17
.text$x:00000A17 arg_4           = dword ptr  8
.text$x:00000A17
.text$x:00000A17                 mov     edx, [esp+arg_4]
.text$x:00000A1B                 lea     eax, [edx+0Ch]
.text$x:00000A1E                 mov     ecx, [edx-14h]
.text$x:00000A21                 xor     ecx, eax
.text$x:00000A23                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A28                 mov     eax, offset __ehfuncinfo$??0nsEUCJPProber@@QAE@_N@Z
.text$x:00000A2D                 jmp     ___CxxFrameHandler3
.text$x:00000A2D __ehhandler$??0nsEUCJPProber@@QAE@_N@Z endp
.text$x:00000A2D
.text$x:00000A2D ; ---------------------------------------------------------------------------
.text$x:00000A32                 align 4
.text$x:00000A32 _text$x         ends
.text$x:00000A32
.text$mn:00000A34 ; ===========================================================================
.text$mn:00000A34
.text$mn:00000A34 ; Segment type: Pure code
.text$mn:00000A34 ; Segment permissions: Read/Execute
.text$mn:00000A34 _text$mn        segment para public 'CODE' use32
.text$mn:00000A34                 assume cs:_text$mn
.text$mn:00000A34                 ;org 0A34h
.text$mn:00000A34 ; COMDAT (pick any)
.text$mn:00000A34                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000A34
.text$mn:00000A34 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A34
.text$mn:00000A34 ; Attributes: bp-based frame
.text$mn:00000A34
.text$mn:00000A34 ; public: __thiscall nsEUCKRProber::nsEUCKRProber(bool)
.text$mn:00000A34                 public ??0nsEUCKRProber@@QAE@_N@Z
.text$mn:00000A34 ??0nsEUCKRProber@@QAE@_N@Z proc near    ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+20Dp
.text$mn:00000A34
.text$mn:00000A34 var_1C          = dword ptr -1Ch
.text$mn:00000A34 var_18          = dword ptr -18h
.text$mn:00000A34 var_14          = dword ptr -14h
.text$mn:00000A34 var_10          = dword ptr -10h
.text$mn:00000A34 var_C           = dword ptr -0Ch
.text$mn:00000A34 var_4           = dword ptr -4
.text$mn:00000A34 arg_0           = byte ptr  8
.text$mn:00000A34
.text$mn:00000A34                 push    ebp
.text$mn:00000A35                 mov     ebp, esp
.text$mn:00000A37                 push    0FFFFFFFFh
.text$mn:00000A39                 push    offset __ehhandler$??0nsEUCKRProber@@QAE@_N@Z
.text$mn:00000A3E                 mov     eax, large fs:0
.text$mn:00000A44                 push    eax
.text$mn:00000A45                 sub     esp, 10h
.text$mn:00000A48                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000A4D                 xor     eax, ebp
.text$mn:00000A4F                 push    eax
.text$mn:00000A50                 lea     eax, [ebp+var_C]
.text$mn:00000A53                 mov     large fs:0, eax
.text$mn:00000A59                 mov     [ebp+var_10], ecx
.text$mn:00000A5C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000A5F                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000A64                 mov     [ebp+var_4], 0
.text$mn:00000A6B                 mov     eax, [ebp+var_10]
.text$mn:00000A6E                 mov     dword ptr [eax], offset ??_7nsEUCKRProber@@6B@ ; const nsEUCKRProber::`vftable'
.text$mn:00000A74                 mov     ecx, [ebp+var_10]
.text$mn:00000A77                 add     ecx, 0Ch        ; this
.text$mn:00000A7A                 call    ??0EUCKRDistributionAnalysis@@QAE@XZ ; EUCKRDistributionAnalysis::EUCKRDistributionAnalysis(void)
.text$mn:00000A7F                 mov     ecx, [ebp+var_10]
.text$mn:00000A82                 mov     dl, [ebp+arg_0]
.text$mn:00000A85                 mov     [ecx+2Eh], dl
.text$mn:00000A88                 push    10h             ; unsigned int
.text$mn:00000A8A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000A8F                 add     esp, 4
.text$mn:00000A92                 mov     [ebp+var_14], eax
.text$mn:00000A95                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000A99                 cmp     [ebp+var_14], 0
.text$mn:00000A9D                 jz      short loc_AB1
.text$mn:00000A9F                 push    offset ?EUCKRSMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000AA4                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000AA7                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:00000AAC                 mov     [ebp+var_18], eax
.text$mn:00000AAF                 jmp     short loc_AB8
.text$mn:00000AB1 ; ---------------------------------------------------------------------------
.text$mn:00000AB1
.text$mn:00000AB1 loc_AB1:                                ; CODE XREF: nsEUCKRProber::nsEUCKRProber(bool)+69j
.text$mn:00000AB1                 mov     [ebp+var_18], 0
.text$mn:00000AB8
.text$mn:00000AB8 loc_AB8:                                ; CODE XREF: nsEUCKRProber::nsEUCKRProber(bool)+7Bj
.text$mn:00000AB8                 mov     eax, [ebp+var_18]
.text$mn:00000ABB                 mov     [ebp+var_1C], eax
.text$mn:00000ABE                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000AC2                 mov     ecx, [ebp+var_10]
.text$mn:00000AC5                 mov     edx, [ebp+var_1C]
.text$mn:00000AC8                 mov     [ecx+4], edx
.text$mn:00000ACB                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000ACE                 call    ?Reset@nsEUCKRProber@@UAEXXZ ; nsEUCKRProber::Reset(void)
.text$mn:00000AD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000ADA                 mov     eax, [ebp+var_10]
.text$mn:00000ADD                 mov     ecx, [ebp+var_C]
.text$mn:00000AE0                 mov     large fs:0, ecx
.text$mn:00000AE7                 pop     ecx
.text$mn:00000AE8                 mov     esp, ebp
.text$mn:00000AEA                 pop     ebp
.text$mn:00000AEB                 retn    4
.text$mn:00000AEB ??0nsEUCKRProber@@QAE@_N@Z endp
.text$mn:00000AEB
.text$mn:00000AEB ; ---------------------------------------------------------------------------
.text$mn:00000AEE                 align 10h
.text$mn:00000AEE _text$mn        ends
.text$mn:00000AEE
.text$x:00000AF0 ; ===========================================================================
.text$x:00000AF0
.text$x:00000AF0 ; Segment type: Pure code
.text$x:00000AF0 ; Segment permissions: Read/Execute
.text$x:00000AF0 _text$x         segment para public 'CODE' use32
.text$x:00000AF0                 assume cs:_text$x
.text$x:00000AF0                 ;org 0AF0h
.text$x:00000AF0 ; COMDAT (pick associative to section at A34)
.text$x:00000AF0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000AF0
.text$x:00000AF0 ; =============== S U B R O U T I N E =======================================
.text$x:00000AF0
.text$x:00000AF0
.text$x:00000AF0 __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$0 proc near
.text$x:00000AF0                                         ; DATA XREF: .xdata$x:000017E4o
.text$x:00000AF0                 mov     ecx, [ebp-10h]  ; this
.text$x:00000AF3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000AF3 __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$0 endp
.text$x:00000AF3
.text$x:00000AF8
.text$x:00000AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00000AF8
.text$x:00000AF8
.text$x:00000AF8 __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$1 proc near
.text$x:00000AF8                                         ; DATA XREF: .xdata$x:000017ECo
.text$x:00000AF8                 mov     eax, [ebp-14h]
.text$x:00000AFB                 push    eax             ; void *
.text$x:00000AFC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000B01                 pop     ecx
.text$x:00000B02                 retn
.text$x:00000B02 __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$1 endp
.text$x:00000B02
.text$x:00000B03
.text$x:00000B03 ; =============== S U B R O U T I N E =======================================
.text$x:00000B03
.text$x:00000B03
.text$x:00000B03 __ehhandler$??0nsEUCKRProber@@QAE@_N@Z proc near
.text$x:00000B03                                         ; DATA XREF: nsEUCKRProber::nsEUCKRProber(bool)+5o
.text$x:00000B03
.text$x:00000B03 arg_4           = dword ptr  8
.text$x:00000B03
.text$x:00000B03                 mov     edx, [esp+arg_4]
.text$x:00000B07                 lea     eax, [edx+0Ch]
.text$x:00000B0A                 mov     ecx, [edx-14h]
.text$x:00000B0D                 xor     ecx, eax
.text$x:00000B0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B14                 mov     eax, offset __ehfuncinfo$??0nsEUCKRProber@@QAE@_N@Z
.text$x:00000B19                 jmp     ___CxxFrameHandler3
.text$x:00000B19 __ehhandler$??0nsEUCKRProber@@QAE@_N@Z endp
.text$x:00000B19
.text$x:00000B19 ; ---------------------------------------------------------------------------
.text$x:00000B1E                 align 10h
.text$x:00000B1E _text$x         ends
.text$x:00000B1E
.text$mn:00000B20 ; ===========================================================================
.text$mn:00000B20
.text$mn:00000B20 ; Segment type: Pure code
.text$mn:00000B20 ; Segment permissions: Read/Execute
.text$mn:00000B20 _text$mn        segment para public 'CODE' use32
.text$mn:00000B20                 assume cs:_text$mn
.text$mn:00000B20                 ;org 0B20h
.text$mn:00000B20 ; COMDAT (pick any)
.text$mn:00000B20                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000B20
.text$mn:00000B20 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B20
.text$mn:00000B20 ; Attributes: bp-based frame
.text$mn:00000B20
.text$mn:00000B20 ; public: __thiscall nsEUCTWProber::nsEUCTWProber(bool)
.text$mn:00000B20                 public ??0nsEUCTWProber@@QAE@_N@Z
.text$mn:00000B20 ??0nsEUCTWProber@@QAE@_N@Z proc near    ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+2D1p
.text$mn:00000B20
.text$mn:00000B20 var_1C          = dword ptr -1Ch
.text$mn:00000B20 var_18          = dword ptr -18h
.text$mn:00000B20 var_14          = dword ptr -14h
.text$mn:00000B20 var_10          = dword ptr -10h
.text$mn:00000B20 var_C           = dword ptr -0Ch
.text$mn:00000B20 var_4           = dword ptr -4
.text$mn:00000B20 arg_0           = byte ptr  8
.text$mn:00000B20
.text$mn:00000B20                 push    ebp
.text$mn:00000B21                 mov     ebp, esp
.text$mn:00000B23                 push    0FFFFFFFFh
.text$mn:00000B25                 push    offset __ehhandler$??0nsEUCTWProber@@QAE@_N@Z
.text$mn:00000B2A                 mov     eax, large fs:0
.text$mn:00000B30                 push    eax
.text$mn:00000B31                 sub     esp, 10h
.text$mn:00000B34                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000B39                 xor     eax, ebp
.text$mn:00000B3B                 push    eax
.text$mn:00000B3C                 lea     eax, [ebp+var_C]
.text$mn:00000B3F                 mov     large fs:0, eax
.text$mn:00000B45                 mov     [ebp+var_10], ecx
.text$mn:00000B48                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000B4B                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000B50                 mov     [ebp+var_4], 0
.text$mn:00000B57                 mov     eax, [ebp+var_10]
.text$mn:00000B5A                 mov     dword ptr [eax], offset ??_7nsEUCTWProber@@6B@ ; const nsEUCTWProber::`vftable'
.text$mn:00000B60                 mov     ecx, [ebp+var_10]
.text$mn:00000B63                 add     ecx, 0Ch        ; this
.text$mn:00000B66                 call    ??0EUCTWDistributionAnalysis@@QAE@XZ ; EUCTWDistributionAnalysis::EUCTWDistributionAnalysis(void)
.text$mn:00000B6B                 mov     ecx, [ebp+var_10]
.text$mn:00000B6E                 mov     dl, [ebp+arg_0]
.text$mn:00000B71                 mov     [ecx+2Eh], dl
.text$mn:00000B74                 push    10h             ; unsigned int
.text$mn:00000B76                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000B7B                 add     esp, 4
.text$mn:00000B7E                 mov     [ebp+var_14], eax
.text$mn:00000B81                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000B85                 cmp     [ebp+var_14], 0
.text$mn:00000B89                 jz      short loc_B9D
.text$mn:00000B8B                 push    offset ?EUCTWSMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000B90                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000B93                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:00000B98                 mov     [ebp+var_18], eax
.text$mn:00000B9B                 jmp     short loc_BA4
.text$mn:00000B9D ; ---------------------------------------------------------------------------
.text$mn:00000B9D
.text$mn:00000B9D loc_B9D:                                ; CODE XREF: nsEUCTWProber::nsEUCTWProber(bool)+69j
.text$mn:00000B9D                 mov     [ebp+var_18], 0
.text$mn:00000BA4
.text$mn:00000BA4 loc_BA4:                                ; CODE XREF: nsEUCTWProber::nsEUCTWProber(bool)+7Bj
.text$mn:00000BA4                 mov     eax, [ebp+var_18]
.text$mn:00000BA7                 mov     [ebp+var_1C], eax
.text$mn:00000BAA                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000BAE                 mov     ecx, [ebp+var_10]
.text$mn:00000BB1                 mov     edx, [ebp+var_1C]
.text$mn:00000BB4                 mov     [ecx+4], edx
.text$mn:00000BB7                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000BBA                 call    ?Reset@nsEUCTWProber@@UAEXXZ ; nsEUCTWProber::Reset(void)
.text$mn:00000BBF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000BC6                 mov     eax, [ebp+var_10]
.text$mn:00000BC9                 mov     ecx, [ebp+var_C]
.text$mn:00000BCC                 mov     large fs:0, ecx
.text$mn:00000BD3                 pop     ecx
.text$mn:00000BD4                 mov     esp, ebp
.text$mn:00000BD6                 pop     ebp
.text$mn:00000BD7                 retn    4
.text$mn:00000BD7 ??0nsEUCTWProber@@QAE@_N@Z endp
.text$mn:00000BD7
.text$mn:00000BD7 ; ---------------------------------------------------------------------------
.text$mn:00000BDA                 align 4
.text$mn:00000BDA _text$mn        ends
.text$mn:00000BDA
.text$x:00000BDC ; ===========================================================================
.text$x:00000BDC
.text$x:00000BDC ; Segment type: Pure code
.text$x:00000BDC ; Segment permissions: Read/Execute
.text$x:00000BDC _text$x         segment para public 'CODE' use32
.text$x:00000BDC                 assume cs:_text$x
.text$x:00000BDC                 ;org 0BDCh
.text$x:00000BDC ; COMDAT (pick associative to section at B20)
.text$x:00000BDC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000BDC
.text$x:00000BDC ; =============== S U B R O U T I N E =======================================
.text$x:00000BDC
.text$x:00000BDC
.text$x:00000BDC __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$0 proc near
.text$x:00000BDC                                         ; DATA XREF: .xdata$x:000018A4o
.text$x:00000BDC                 mov     ecx, [ebp-10h]  ; this
.text$x:00000BDF                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000BDF __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$0 endp
.text$x:00000BDF
.text$x:00000BE4
.text$x:00000BE4 ; =============== S U B R O U T I N E =======================================
.text$x:00000BE4
.text$x:00000BE4
.text$x:00000BE4 __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$1 proc near
.text$x:00000BE4                                         ; DATA XREF: .xdata$x:000018ACo
.text$x:00000BE4                 mov     eax, [ebp-14h]
.text$x:00000BE7                 push    eax             ; void *
.text$x:00000BE8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000BED                 pop     ecx
.text$x:00000BEE                 retn
.text$x:00000BEE __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$1 endp
.text$x:00000BEE
.text$x:00000BEF
.text$x:00000BEF ; =============== S U B R O U T I N E =======================================
.text$x:00000BEF
.text$x:00000BEF
.text$x:00000BEF __ehhandler$??0nsEUCTWProber@@QAE@_N@Z proc near
.text$x:00000BEF                                         ; DATA XREF: nsEUCTWProber::nsEUCTWProber(bool)+5o
.text$x:00000BEF
.text$x:00000BEF arg_4           = dword ptr  8
.text$x:00000BEF
.text$x:00000BEF                 mov     edx, [esp+arg_4]
.text$x:00000BF3                 lea     eax, [edx+0Ch]
.text$x:00000BF6                 mov     ecx, [edx-14h]
.text$x:00000BF9                 xor     ecx, eax
.text$x:00000BFB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C00                 mov     eax, offset __ehfuncinfo$??0nsEUCTWProber@@QAE@_N@Z
.text$x:00000C05                 jmp     ___CxxFrameHandler3
.text$x:00000C05 __ehhandler$??0nsEUCTWProber@@QAE@_N@Z endp
.text$x:00000C05
.text$x:00000C05 ; ---------------------------------------------------------------------------
.text$x:00000C0A                 align 4
.text$x:00000C0A _text$x         ends
.text$x:00000C0A
.text$mn:00000C0C ; ===========================================================================
.text$mn:00000C0C
.text$mn:00000C0C ; Segment type: Pure code
.text$mn:00000C0C ; Segment permissions: Read/Execute
.text$mn:00000C0C _text$mn        segment para public 'CODE' use32
.text$mn:00000C0C                 assume cs:_text$mn
.text$mn:00000C0C                 ;org 0C0Ch
.text$mn:00000C0C ; COMDAT (pick any)
.text$mn:00000C0C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000C0C
.text$mn:00000C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00000C0C
.text$mn:00000C0C ; Attributes: bp-based frame
.text$mn:00000C0C
.text$mn:00000C0C ; public: __thiscall nsGB18030Prober::nsGB18030Prober(bool)
.text$mn:00000C0C                 public ??0nsGB18030Prober@@QAE@_N@Z
.text$mn:00000C0C ??0nsGB18030Prober@@QAE@_N@Z proc near  ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+1A9p
.text$mn:00000C0C
.text$mn:00000C0C var_1C          = dword ptr -1Ch
.text$mn:00000C0C var_18          = dword ptr -18h
.text$mn:00000C0C var_14          = dword ptr -14h
.text$mn:00000C0C var_10          = dword ptr -10h
.text$mn:00000C0C var_C           = dword ptr -0Ch
.text$mn:00000C0C var_4           = dword ptr -4
.text$mn:00000C0C arg_0           = byte ptr  8
.text$mn:00000C0C
.text$mn:00000C0C                 push    ebp
.text$mn:00000C0D                 mov     ebp, esp
.text$mn:00000C0F                 push    0FFFFFFFFh
.text$mn:00000C11                 push    offset __ehhandler$??0nsGB18030Prober@@QAE@_N@Z
.text$mn:00000C16                 mov     eax, large fs:0
.text$mn:00000C1C                 push    eax
.text$mn:00000C1D                 sub     esp, 10h
.text$mn:00000C20                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000C25                 xor     eax, ebp
.text$mn:00000C27                 push    eax
.text$mn:00000C28                 lea     eax, [ebp+var_C]
.text$mn:00000C2B                 mov     large fs:0, eax
.text$mn:00000C31                 mov     [ebp+var_10], ecx
.text$mn:00000C34                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000C37                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000C3C                 mov     [ebp+var_4], 0
.text$mn:00000C43                 mov     eax, [ebp+var_10]
.text$mn:00000C46                 mov     dword ptr [eax], offset ??_7nsGB18030Prober@@6B@ ; const nsGB18030Prober::`vftable'
.text$mn:00000C4C                 mov     ecx, [ebp+var_10]
.text$mn:00000C4F                 add     ecx, 0Ch        ; this
.text$mn:00000C52                 call    ??0GB2312DistributionAnalysis@@QAE@XZ ; GB2312DistributionAnalysis::GB2312DistributionAnalysis(void)
.text$mn:00000C57                 mov     ecx, [ebp+var_10]
.text$mn:00000C5A                 mov     dl, [ebp+arg_0]
.text$mn:00000C5D                 mov     [ecx+2Eh], dl
.text$mn:00000C60                 push    10h             ; unsigned int
.text$mn:00000C62                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000C67                 add     esp, 4
.text$mn:00000C6A                 mov     [ebp+var_14], eax
.text$mn:00000C6D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000C71                 cmp     [ebp+var_14], 0
.text$mn:00000C75                 jz      short loc_C89
.text$mn:00000C77                 push    offset ?GB18030SMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000C7C                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000C7F                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:00000C84                 mov     [ebp+var_18], eax
.text$mn:00000C87                 jmp     short loc_C90
.text$mn:00000C89 ; ---------------------------------------------------------------------------
.text$mn:00000C89
.text$mn:00000C89 loc_C89:                                ; CODE XREF: nsGB18030Prober::nsGB18030Prober(bool)+69j
.text$mn:00000C89                 mov     [ebp+var_18], 0
.text$mn:00000C90
.text$mn:00000C90 loc_C90:                                ; CODE XREF: nsGB18030Prober::nsGB18030Prober(bool)+7Bj
.text$mn:00000C90                 mov     eax, [ebp+var_18]
.text$mn:00000C93                 mov     [ebp+var_1C], eax
.text$mn:00000C96                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000C9A                 mov     ecx, [ebp+var_10]
.text$mn:00000C9D                 mov     edx, [ebp+var_1C]
.text$mn:00000CA0                 mov     [ecx+4], edx
.text$mn:00000CA3                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000CA6                 call    ?Reset@nsGB18030Prober@@UAEXXZ ; nsGB18030Prober::Reset(void)
.text$mn:00000CAB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000CB2                 mov     eax, [ebp+var_10]
.text$mn:00000CB5                 mov     ecx, [ebp+var_C]
.text$mn:00000CB8                 mov     large fs:0, ecx
.text$mn:00000CBF                 pop     ecx
.text$mn:00000CC0                 mov     esp, ebp
.text$mn:00000CC2                 pop     ebp
.text$mn:00000CC3                 retn    4
.text$mn:00000CC3 ??0nsGB18030Prober@@QAE@_N@Z endp
.text$mn:00000CC3
.text$mn:00000CC3 ; ---------------------------------------------------------------------------
.text$mn:00000CC6                 align 4
.text$mn:00000CC6 _text$mn        ends
.text$mn:00000CC6
.text$x:00000CC8 ; ===========================================================================
.text$x:00000CC8
.text$x:00000CC8 ; Segment type: Pure code
.text$x:00000CC8 ; Segment permissions: Read/Execute
.text$x:00000CC8 _text$x         segment para public 'CODE' use32
.text$x:00000CC8                 assume cs:_text$x
.text$x:00000CC8                 ;org 0CC8h
.text$x:00000CC8 ; COMDAT (pick associative to section at C0C)
.text$x:00000CC8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000CC8
.text$x:00000CC8 ; =============== S U B R O U T I N E =======================================
.text$x:00000CC8
.text$x:00000CC8
.text$x:00000CC8 __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$0 proc near
.text$x:00000CC8                                         ; DATA XREF: .xdata$x:00001784o
.text$x:00000CC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00000CCB                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000CCB __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$0 endp
.text$x:00000CCB
.text$x:00000CD0
.text$x:00000CD0 ; =============== S U B R O U T I N E =======================================
.text$x:00000CD0
.text$x:00000CD0
.text$x:00000CD0 __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$1 proc near
.text$x:00000CD0                                         ; DATA XREF: .xdata$x:0000178Co
.text$x:00000CD0                 mov     eax, [ebp-14h]
.text$x:00000CD3                 push    eax             ; void *
.text$x:00000CD4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000CD9                 pop     ecx
.text$x:00000CDA                 retn
.text$x:00000CDA __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$1 endp
.text$x:00000CDA
.text$x:00000CDB
.text$x:00000CDB ; =============== S U B R O U T I N E =======================================
.text$x:00000CDB
.text$x:00000CDB
.text$x:00000CDB __ehhandler$??0nsGB18030Prober@@QAE@_N@Z proc near
.text$x:00000CDB                                         ; DATA XREF: nsGB18030Prober::nsGB18030Prober(bool)+5o
.text$x:00000CDB
.text$x:00000CDB arg_4           = dword ptr  8
.text$x:00000CDB
.text$x:00000CDB                 mov     edx, [esp+arg_4]
.text$x:00000CDF                 lea     eax, [edx+0Ch]
.text$x:00000CE2                 mov     ecx, [edx-14h]
.text$x:00000CE5                 xor     ecx, eax
.text$x:00000CE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000CEC                 mov     eax, offset __ehfuncinfo$??0nsGB18030Prober@@QAE@_N@Z
.text$x:00000CF1                 jmp     ___CxxFrameHandler3
.text$x:00000CF1 __ehhandler$??0nsGB18030Prober@@QAE@_N@Z endp
.text$x:00000CF1
.text$x:00000CF1 ; ---------------------------------------------------------------------------
.text$x:00000CF6                 align 4
.text$x:00000CF6 _text$x         ends
.text$x:00000CF6
.text$mn:00000CF8 ; ===========================================================================
.text$mn:00000CF8
.text$mn:00000CF8 ; Segment type: Pure code
.text$mn:00000CF8 ; Segment permissions: Read/Execute
.text$mn:00000CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00000CF8                 assume cs:_text$mn
.text$mn:00000CF8                 ;org 0CF8h
.text$mn:00000CF8 ; COMDAT (pick any)
.text$mn:00000CF8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000CF8
.text$mn:00000CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000CF8
.text$mn:00000CF8 ; Attributes: bp-based frame
.text$mn:00000CF8
.text$mn:00000CF8 ; public: __thiscall nsSJISProber::nsSJISProber(bool)
.text$mn:00000CF8                 public ??0nsSJISProber@@QAE@_N@Z
.text$mn:00000CF8 ??0nsSJISProber@@QAE@_N@Z proc near     ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+EAp
.text$mn:00000CF8
.text$mn:00000CF8 var_1C          = dword ptr -1Ch
.text$mn:00000CF8 var_18          = dword ptr -18h
.text$mn:00000CF8 var_14          = dword ptr -14h
.text$mn:00000CF8 var_10          = dword ptr -10h
.text$mn:00000CF8 var_C           = dword ptr -0Ch
.text$mn:00000CF8 var_4           = dword ptr -4
.text$mn:00000CF8 arg_0           = byte ptr  8
.text$mn:00000CF8
.text$mn:00000CF8                 push    ebp
.text$mn:00000CF9                 mov     ebp, esp
.text$mn:00000CFB                 push    0FFFFFFFFh
.text$mn:00000CFD                 push    offset __ehhandler$??0nsSJISProber@@QAE@_N@Z
.text$mn:00000D02                 mov     eax, large fs:0
.text$mn:00000D08                 push    eax
.text$mn:00000D09                 sub     esp, 10h
.text$mn:00000D0C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000D11                 xor     eax, ebp
.text$mn:00000D13                 push    eax
.text$mn:00000D14                 lea     eax, [ebp+var_C]
.text$mn:00000D17                 mov     large fs:0, eax
.text$mn:00000D1D                 mov     [ebp+var_10], ecx
.text$mn:00000D20                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000D23                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000D28                 mov     [ebp+var_4], 0
.text$mn:00000D2F                 mov     eax, [ebp+var_10]
.text$mn:00000D32                 mov     dword ptr [eax], offset ??_7nsSJISProber@@6B@ ; const nsSJISProber::`vftable'
.text$mn:00000D38                 mov     ecx, [ebp+var_10]
.text$mn:00000D3B                 add     ecx, 0Ch
.text$mn:00000D3E                 call    ??0SJISContextAnalysis@@QAE@XZ ; SJISContextAnalysis::SJISContextAnalysis(void)
.text$mn:00000D43                 mov     ecx, [ebp+var_10]
.text$mn:00000D46                 add     ecx, 3Ch ; '<'  ; this
.text$mn:00000D49                 call    ??0SJISDistributionAnalysis@@QAE@XZ ; SJISDistributionAnalysis::SJISDistributionAnalysis(void)
.text$mn:00000D4E                 mov     ecx, [ebp+var_10]
.text$mn:00000D51                 mov     dl, [ebp+arg_0]
.text$mn:00000D54                 mov     [ecx+5Eh], dl
.text$mn:00000D57                 push    10h             ; unsigned int
.text$mn:00000D59                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000D5E                 add     esp, 4
.text$mn:00000D61                 mov     [ebp+var_14], eax
.text$mn:00000D64                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000D68                 cmp     [ebp+var_14], 0
.text$mn:00000D6C                 jz      short loc_D80
.text$mn:00000D6E                 push    offset ?SJISSMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000D73                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000D76                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:00000D7B                 mov     [ebp+var_18], eax
.text$mn:00000D7E                 jmp     short loc_D87
.text$mn:00000D80 ; ---------------------------------------------------------------------------
.text$mn:00000D80
.text$mn:00000D80 loc_D80:                                ; CODE XREF: nsSJISProber::nsSJISProber(bool)+74j
.text$mn:00000D80                 mov     [ebp+var_18], 0
.text$mn:00000D87
.text$mn:00000D87 loc_D87:                                ; CODE XREF: nsSJISProber::nsSJISProber(bool)+86j
.text$mn:00000D87                 mov     eax, [ebp+var_18]
.text$mn:00000D8A                 mov     [ebp+var_1C], eax
.text$mn:00000D8D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000D91                 mov     ecx, [ebp+var_10]
.text$mn:00000D94                 mov     edx, [ebp+var_1C]
.text$mn:00000D97                 mov     [ecx+4], edx
.text$mn:00000D9A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000D9D                 call    ?Reset@nsSJISProber@@UAEXXZ ; nsSJISProber::Reset(void)
.text$mn:00000DA2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000DA9                 mov     eax, [ebp+var_10]
.text$mn:00000DAC                 mov     ecx, [ebp+var_C]
.text$mn:00000DAF                 mov     large fs:0, ecx
.text$mn:00000DB6                 pop     ecx
.text$mn:00000DB7                 mov     esp, ebp
.text$mn:00000DB9                 pop     ebp
.text$mn:00000DBA                 retn    4
.text$mn:00000DBA ??0nsSJISProber@@QAE@_N@Z endp
.text$mn:00000DBA
.text$mn:00000DBA ; ---------------------------------------------------------------------------
.text$mn:00000DBD                 align 10h
.text$mn:00000DBD _text$mn        ends
.text$mn:00000DBD
.text$x:00000DC0 ; ===========================================================================
.text$x:00000DC0
.text$x:00000DC0 ; Segment type: Pure code
.text$x:00000DC0 ; Segment permissions: Read/Execute
.text$x:00000DC0 _text$x         segment para public 'CODE' use32
.text$x:00000DC0                 assume cs:_text$x
.text$x:00000DC0                 ;org 0DC0h
.text$x:00000DC0 ; COMDAT (pick associative to section at CF8)
.text$x:00000DC0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000DC0
.text$x:00000DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00000DC0
.text$x:00000DC0
.text$x:00000DC0 __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$0 proc near
.text$x:00000DC0                                         ; DATA XREF: .xdata$x:00001664o
.text$x:00000DC0                 mov     ecx, [ebp-10h]  ; this
.text$x:00000DC3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000DC3 __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$0 endp
.text$x:00000DC3
.text$x:00000DC8
.text$x:00000DC8 ; =============== S U B R O U T I N E =======================================
.text$x:00000DC8
.text$x:00000DC8
.text$x:00000DC8 __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$1 proc near
.text$x:00000DC8                                         ; DATA XREF: .xdata$x:0000166Co
.text$x:00000DC8                 mov     eax, [ebp-14h]
.text$x:00000DCB                 push    eax             ; void *
.text$x:00000DCC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000DD1                 pop     ecx
.text$x:00000DD2                 retn
.text$x:00000DD2 __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$1 endp
.text$x:00000DD2
.text$x:00000DD3
.text$x:00000DD3 ; =============== S U B R O U T I N E =======================================
.text$x:00000DD3
.text$x:00000DD3
.text$x:00000DD3 __ehhandler$??0nsSJISProber@@QAE@_N@Z proc near
.text$x:00000DD3                                         ; DATA XREF: nsSJISProber::nsSJISProber(bool)+5o
.text$x:00000DD3
.text$x:00000DD3 arg_4           = dword ptr  8
.text$x:00000DD3
.text$x:00000DD3                 mov     edx, [esp+arg_4]
.text$x:00000DD7                 lea     eax, [edx+0Ch]
.text$x:00000DDA                 mov     ecx, [edx-14h]
.text$x:00000DDD                 xor     ecx, eax
.text$x:00000DDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000DE4                 mov     eax, offset __ehfuncinfo$??0nsSJISProber@@QAE@_N@Z
.text$x:00000DE9                 jmp     ___CxxFrameHandler3
.text$x:00000DE9 __ehhandler$??0nsSJISProber@@QAE@_N@Z endp
.text$x:00000DE9
.text$x:00000DE9 ; ---------------------------------------------------------------------------
.text$x:00000DEE                 align 10h
.text$x:00000DEE _text$x         ends
.text$x:00000DEE
.text$mn:00000DF0 ; ===========================================================================
.text$mn:00000DF0
.text$mn:00000DF0 ; Segment type: Pure code
.text$mn:00000DF0 ; Segment permissions: Read/Execute
.text$mn:00000DF0 _text$mn        segment para public 'CODE' use32
.text$mn:00000DF0                 assume cs:_text$mn
.text$mn:00000DF0                 ;org 0DF0h
.text$mn:00000DF0 ; COMDAT (pick any)
.text$mn:00000DF0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000DF0
.text$mn:00000DF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DF0
.text$mn:00000DF0 ; Attributes: bp-based frame
.text$mn:00000DF0
.text$mn:00000DF0 ; public: __thiscall nsUTF8Prober::nsUTF8Prober(void)
.text$mn:00000DF0                 public ??0nsUTF8Prober@@QAE@XZ
.text$mn:00000DF0 ??0nsUTF8Prober@@QAE@XZ proc near       ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+82p
.text$mn:00000DF0
.text$mn:00000DF0 var_1C          = dword ptr -1Ch
.text$mn:00000DF0 var_18          = dword ptr -18h
.text$mn:00000DF0 var_14          = dword ptr -14h
.text$mn:00000DF0 var_10          = dword ptr -10h
.text$mn:00000DF0 var_C           = dword ptr -0Ch
.text$mn:00000DF0 var_4           = dword ptr -4
.text$mn:00000DF0
.text$mn:00000DF0                 push    ebp
.text$mn:00000DF1                 mov     ebp, esp
.text$mn:00000DF3                 push    0FFFFFFFFh
.text$mn:00000DF5                 push    offset __ehhandler$??0nsUTF8Prober@@QAE@XZ
.text$mn:00000DFA                 mov     eax, large fs:0
.text$mn:00000E00                 push    eax
.text$mn:00000E01                 sub     esp, 10h
.text$mn:00000E04                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000E09                 xor     eax, ebp
.text$mn:00000E0B                 push    eax
.text$mn:00000E0C                 lea     eax, [ebp+var_C]
.text$mn:00000E0F                 mov     large fs:0, eax
.text$mn:00000E15                 mov     [ebp+var_10], ecx
.text$mn:00000E18                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000E1B                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000E20                 mov     [ebp+var_4], 0
.text$mn:00000E27                 mov     eax, [ebp+var_10]
.text$mn:00000E2A                 mov     dword ptr [eax], offset ??_7nsUTF8Prober@@6B@ ; const nsUTF8Prober::`vftable'
.text$mn:00000E30                 mov     ecx, [ebp+var_10]
.text$mn:00000E33                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00000E3A                 push    10h             ; unsigned int
.text$mn:00000E3C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000E41                 add     esp, 4
.text$mn:00000E44                 mov     [ebp+var_14], eax
.text$mn:00000E47                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000E4B                 cmp     [ebp+var_14], 0
.text$mn:00000E4F                 jz      short loc_E63
.text$mn:00000E51                 push    offset ?UTF8SMModel@@3USMModel@@B ; struct SMModel *
.text$mn:00000E56                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000E59                 call    ??0nsCodingStateMachine@@QAE@PBUSMModel@@@Z ; nsCodingStateMachine::nsCodingStateMachine(SMModel const *)
.text$mn:00000E5E                 mov     [ebp+var_18], eax
.text$mn:00000E61                 jmp     short loc_E6A
.text$mn:00000E63 ; ---------------------------------------------------------------------------
.text$mn:00000E63
.text$mn:00000E63 loc_E63:                                ; CODE XREF: nsUTF8Prober::nsUTF8Prober(void)+5Fj
.text$mn:00000E63                 mov     [ebp+var_18], 0
.text$mn:00000E6A
.text$mn:00000E6A loc_E6A:                                ; CODE XREF: nsUTF8Prober::nsUTF8Prober(void)+71j
.text$mn:00000E6A                 mov     edx, [ebp+var_18]
.text$mn:00000E6D                 mov     [ebp+var_1C], edx
.text$mn:00000E70                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000E74                 mov     eax, [ebp+var_10]
.text$mn:00000E77                 mov     ecx, [ebp+var_1C]
.text$mn:00000E7A                 mov     [eax+4], ecx
.text$mn:00000E7D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000E80                 call    ?Reset@nsUTF8Prober@@UAEXXZ ; nsUTF8Prober::Reset(void)
.text$mn:00000E85                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000E8C                 mov     eax, [ebp+var_10]
.text$mn:00000E8F                 mov     ecx, [ebp+var_C]
.text$mn:00000E92                 mov     large fs:0, ecx
.text$mn:00000E99                 pop     ecx
.text$mn:00000E9A                 mov     esp, ebp
.text$mn:00000E9C                 pop     ebp
.text$mn:00000E9D                 retn
.text$mn:00000E9D ??0nsUTF8Prober@@QAE@XZ endp
.text$mn:00000E9D
.text$mn:00000E9D ; ---------------------------------------------------------------------------
.text$mn:00000E9E                 align 10h
.text$mn:00000E9E _text$mn        ends
.text$mn:00000E9E
.text$x:00000EA0 ; ===========================================================================
.text$x:00000EA0
.text$x:00000EA0 ; Segment type: Pure code
.text$x:00000EA0 ; Segment permissions: Read/Execute
.text$x:00000EA0 _text$x         segment para public 'CODE' use32
.text$x:00000EA0                 assume cs:_text$x
.text$x:00000EA0                 ;org 0EA0h
.text$x:00000EA0 ; COMDAT (pick associative to section at DF0)
.text$x:00000EA0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000EA0
.text$x:00000EA0 ; =============== S U B R O U T I N E =======================================
.text$x:00000EA0
.text$x:00000EA0
.text$x:00000EA0 __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$0 proc near
.text$x:00000EA0                                         ; DATA XREF: .xdata$x:000016C4o
.text$x:00000EA0                 mov     ecx, [ebp-10h]  ; this
.text$x:00000EA3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000EA3 __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$0 endp
.text$x:00000EA3
.text$x:00000EA8
.text$x:00000EA8 ; =============== S U B R O U T I N E =======================================
.text$x:00000EA8
.text$x:00000EA8
.text$x:00000EA8 __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$1 proc near
.text$x:00000EA8                                         ; DATA XREF: .xdata$x:000016CCo
.text$x:00000EA8                 mov     eax, [ebp-14h]
.text$x:00000EAB                 push    eax             ; void *
.text$x:00000EAC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000EB1                 pop     ecx
.text$x:00000EB2                 retn
.text$x:00000EB2 __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$1 endp
.text$x:00000EB2
.text$x:00000EB3
.text$x:00000EB3 ; =============== S U B R O U T I N E =======================================
.text$x:00000EB3
.text$x:00000EB3
.text$x:00000EB3 __ehhandler$??0nsUTF8Prober@@QAE@XZ proc near
.text$x:00000EB3                                         ; DATA XREF: nsUTF8Prober::nsUTF8Prober(void)+5o
.text$x:00000EB3
.text$x:00000EB3 arg_4           = dword ptr  8
.text$x:00000EB3
.text$x:00000EB3                 mov     edx, [esp+arg_4]
.text$x:00000EB7                 lea     eax, [edx+0Ch]
.text$x:00000EBA                 mov     ecx, [edx-14h]
.text$x:00000EBD                 xor     ecx, eax
.text$x:00000EBF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000EC4                 mov     eax, offset __ehfuncinfo$??0nsUTF8Prober@@QAE@XZ
.text$x:00000EC9                 jmp     ___CxxFrameHandler3
.text$x:00000EC9 __ehhandler$??0nsUTF8Prober@@QAE@XZ endp
.text$x:00000EC9
.text$x:00000EC9 ; ---------------------------------------------------------------------------
.text$x:00000ECE                 align 10h
.text$x:00000ECE _text$x         ends
.text$x:00000ECE
.text$mn:00000ED0 ; ===========================================================================
.text$mn:00000ED0
.text$mn:00000ED0 ; Segment type: Pure code
.text$mn:00000ED0 ; Segment permissions: Read/Execute
.text$mn:00000ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00000ED0                 assume cs:_text$mn
.text$mn:00000ED0                 ;org 0ED0h
.text$mn:00000ED0 ; COMDAT (pick any)
.text$mn:00000ED0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000ED0
.text$mn:00000ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000ED0
.text$mn:00000ED0 ; Attributes: bp-based frame
.text$mn:00000ED0
.text$mn:00000ED0 ; _DWORD __thiscall nsBig5Prober::~nsBig5Prober(nsBig5Prober *__hidden this)
.text$mn:00000ED0                 public ??1nsBig5Prober@@UAE@XZ
.text$mn:00000ED0 ??1nsBig5Prober@@UAE@XZ proc near       ; CODE XREF: nsBig5Prober::`scalar deleting destructor'(uint)+Ap
.text$mn:00000ED0
.text$mn:00000ED0 var_14          = dword ptr -14h
.text$mn:00000ED0 var_10          = dword ptr -10h
.text$mn:00000ED0 var_C           = dword ptr -0Ch
.text$mn:00000ED0 var_4           = dword ptr -4
.text$mn:00000ED0
.text$mn:00000ED0                 push    ebp
.text$mn:00000ED1                 mov     ebp, esp
.text$mn:00000ED3                 push    0FFFFFFFFh
.text$mn:00000ED5                 push    offset __ehhandler$??1nsBig5Prober@@UAE@XZ
.text$mn:00000EDA                 mov     eax, large fs:0
.text$mn:00000EE0                 push    eax
.text$mn:00000EE1                 sub     esp, 8
.text$mn:00000EE4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000EE9                 xor     eax, ebp
.text$mn:00000EEB                 push    eax
.text$mn:00000EEC                 lea     eax, [ebp+var_C]
.text$mn:00000EEF                 mov     large fs:0, eax
.text$mn:00000EF5                 mov     [ebp+var_10], ecx
.text$mn:00000EF8                 mov     eax, [ebp+var_10]
.text$mn:00000EFB                 mov     dword ptr [eax], offset ??_7nsBig5Prober@@6B@ ; const nsBig5Prober::`vftable'
.text$mn:00000F01                 mov     [ebp+var_4], 0
.text$mn:00000F08                 mov     ecx, [ebp+var_10]
.text$mn:00000F0B                 mov     edx, [ecx+4]
.text$mn:00000F0E                 mov     [ebp+var_14], edx
.text$mn:00000F11                 mov     eax, [ebp+var_14]
.text$mn:00000F14                 push    eax             ; void *
.text$mn:00000F15                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000F1A                 add     esp, 4
.text$mn:00000F1D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000F24                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000F27                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000F2C                 mov     ecx, [ebp+var_C]
.text$mn:00000F2F                 mov     large fs:0, ecx
.text$mn:00000F36                 pop     ecx
.text$mn:00000F37                 mov     esp, ebp
.text$mn:00000F39                 pop     ebp
.text$mn:00000F3A                 retn
.text$mn:00000F3A ??1nsBig5Prober@@UAE@XZ endp
.text$mn:00000F3A
.text$mn:00000F3A ; ---------------------------------------------------------------------------
.text$mn:00000F3B                 align 4
.text$mn:00000F3B _text$mn        ends
.text$mn:00000F3B
.text$x:00000F3C ; ===========================================================================
.text$x:00000F3C
.text$x:00000F3C ; Segment type: Pure code
.text$x:00000F3C ; Segment permissions: Read/Execute
.text$x:00000F3C _text$x         segment para public 'CODE' use32
.text$x:00000F3C                 assume cs:_text$x
.text$x:00000F3C                 ;org 0F3Ch
.text$x:00000F3C ; COMDAT (pick associative to section at ED0)
.text$x:00000F3C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000F3C
.text$x:00000F3C ; =============== S U B R O U T I N E =======================================
.text$x:00000F3C
.text$x:00000F3C
.text$x:00000F3C __unwindfunclet$??1nsBig5Prober@@UAE@XZ$0 proc near
.text$x:00000F3C                                         ; DATA XREF: .xdata$x:00001878o
.text$x:00000F3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00000F3F                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000F3F __unwindfunclet$??1nsBig5Prober@@UAE@XZ$0 endp
.text$x:00000F3F
.text$x:00000F44
.text$x:00000F44 ; =============== S U B R O U T I N E =======================================
.text$x:00000F44
.text$x:00000F44
.text$x:00000F44 __ehhandler$??1nsBig5Prober@@UAE@XZ proc near
.text$x:00000F44                                         ; DATA XREF: nsBig5Prober::~nsBig5Prober(void)+5o
.text$x:00000F44
.text$x:00000F44 arg_4           = dword ptr  8
.text$x:00000F44
.text$x:00000F44                 mov     edx, [esp+arg_4]
.text$x:00000F48                 lea     eax, [edx+0Ch]
.text$x:00000F4B                 mov     ecx, [edx-0Ch]
.text$x:00000F4E                 xor     ecx, eax
.text$x:00000F50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000F55                 mov     eax, offset __ehfuncinfo$??1nsBig5Prober@@UAE@XZ
.text$x:00000F5A                 jmp     ___CxxFrameHandler3
.text$x:00000F5A __ehhandler$??1nsBig5Prober@@UAE@XZ endp
.text$x:00000F5A
.text$x:00000F5A ; ---------------------------------------------------------------------------
.text$x:00000F5F                 align 10h
.text$x:00000F5F _text$x         ends
.text$x:00000F5F
.text$mn:00000F60 ; ===========================================================================
.text$mn:00000F60
.text$mn:00000F60 ; Segment type: Pure code
.text$mn:00000F60 ; Segment permissions: Read/Execute
.text$mn:00000F60 _text$mn        segment para public 'CODE' use32
.text$mn:00000F60                 assume cs:_text$mn
.text$mn:00000F60                 ;org 0F60h
.text$mn:00000F60 ; COMDAT (pick any)
.text$mn:00000F60                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000F60
.text$mn:00000F60 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F60
.text$mn:00000F60 ; Attributes: bp-based frame
.text$mn:00000F60
.text$mn:00000F60 ; _DWORD __thiscall nsCharSetProber::~nsCharSetProber(nsCharSetProber *__hidden this)
.text$mn:00000F60                 public ??1nsCharSetProber@@UAE@XZ
.text$mn:00000F60 ??1nsCharSetProber@@UAE@XZ proc near    ; CODE XREF: nsMBCSGroupProber::~nsMBCSGroupProber(void)+8Fp
.text$mn:00000F60                                         ; __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$0+3j ...
.text$mn:00000F60
.text$mn:00000F60 var_4           = dword ptr -4
.text$mn:00000F60
.text$mn:00000F60                 push    ebp
.text$mn:00000F61                 mov     ebp, esp
.text$mn:00000F63                 push    ecx
.text$mn:00000F64                 mov     [ebp+var_4], ecx
.text$mn:00000F67                 mov     eax, [ebp+var_4]
.text$mn:00000F6A                 mov     dword ptr [eax], offset ??_7nsCharSetProber@@6B@ ; const nsCharSetProber::`vftable'
.text$mn:00000F70                 mov     esp, ebp
.text$mn:00000F72                 pop     ebp
.text$mn:00000F73                 retn
.text$mn:00000F73 ??1nsCharSetProber@@UAE@XZ endp
.text$mn:00000F73
.text$mn:00000F73 _text$mn        ends
.text$mn:00000F73
.text$mn:00000F74 ; ===========================================================================
.text$mn:00000F74
.text$mn:00000F74 ; Segment type: Pure code
.text$mn:00000F74 ; Segment permissions: Read/Execute
.text$mn:00000F74 _text$mn        segment para public 'CODE' use32
.text$mn:00000F74                 assume cs:_text$mn
.text$mn:00000F74                 ;org 0F74h
.text$mn:00000F74 ; COMDAT (pick any)
.text$mn:00000F74                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000F74
.text$mn:00000F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F74
.text$mn:00000F74 ; Attributes: bp-based frame
.text$mn:00000F74
.text$mn:00000F74 ; _DWORD __thiscall nsEUCJPProber::~nsEUCJPProber(nsEUCJPProber *__hidden this)
.text$mn:00000F74                 public ??1nsEUCJPProber@@UAE@XZ
.text$mn:00000F74 ??1nsEUCJPProber@@UAE@XZ proc near      ; CODE XREF: nsEUCJPProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00000F74
.text$mn:00000F74 var_14          = dword ptr -14h
.text$mn:00000F74 var_10          = dword ptr -10h
.text$mn:00000F74 var_C           = dword ptr -0Ch
.text$mn:00000F74 var_4           = dword ptr -4
.text$mn:00000F74
.text$mn:00000F74                 push    ebp
.text$mn:00000F75                 mov     ebp, esp
.text$mn:00000F77                 push    0FFFFFFFFh
.text$mn:00000F79                 push    offset __ehhandler$??1nsEUCJPProber@@UAE@XZ
.text$mn:00000F7E                 mov     eax, large fs:0
.text$mn:00000F84                 push    eax
.text$mn:00000F85                 sub     esp, 8
.text$mn:00000F88                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000F8D                 xor     eax, ebp
.text$mn:00000F8F                 push    eax
.text$mn:00000F90                 lea     eax, [ebp+var_C]
.text$mn:00000F93                 mov     large fs:0, eax
.text$mn:00000F99                 mov     [ebp+var_10], ecx
.text$mn:00000F9C                 mov     eax, [ebp+var_10]
.text$mn:00000F9F                 mov     dword ptr [eax], offset ??_7nsEUCJPProber@@6B@ ; const nsEUCJPProber::`vftable'
.text$mn:00000FA5                 mov     [ebp+var_4], 0
.text$mn:00000FAC                 mov     ecx, [ebp+var_10]
.text$mn:00000FAF                 mov     edx, [ecx+4]
.text$mn:00000FB2                 mov     [ebp+var_14], edx
.text$mn:00000FB5                 mov     eax, [ebp+var_14]
.text$mn:00000FB8                 push    eax             ; void *
.text$mn:00000FB9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000FBE                 add     esp, 4
.text$mn:00000FC1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000FC8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000FCB                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000FD0                 mov     ecx, [ebp+var_C]
.text$mn:00000FD3                 mov     large fs:0, ecx
.text$mn:00000FDA                 pop     ecx
.text$mn:00000FDB                 mov     esp, ebp
.text$mn:00000FDD                 pop     ebp
.text$mn:00000FDE                 retn
.text$mn:00000FDE ??1nsEUCJPProber@@UAE@XZ endp
.text$mn:00000FDE
.text$mn:00000FDE ; ---------------------------------------------------------------------------
.text$mn:00000FDF                 align 10h
.text$mn:00000FDF _text$mn        ends
.text$mn:00000FDF
.text$x:00000FE0 ; ===========================================================================
.text$x:00000FE0
.text$x:00000FE0 ; Segment type: Pure code
.text$x:00000FE0 ; Segment permissions: Read/Execute
.text$x:00000FE0 _text$x         segment para public 'CODE' use32
.text$x:00000FE0                 assume cs:_text$x
.text$x:00000FE0                 ;org 0FE0h
.text$x:00000FE0 ; COMDAT (pick associative to section at F74)
.text$x:00000FE0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000FE0
.text$x:00000FE0 ; =============== S U B R O U T I N E =======================================
.text$x:00000FE0
.text$x:00000FE0
.text$x:00000FE0 __unwindfunclet$??1nsEUCJPProber@@UAE@XZ$0 proc near
.text$x:00000FE0                                         ; DATA XREF: .xdata$x:00001758o
.text$x:00000FE0                 mov     ecx, [ebp-10h]  ; this
.text$x:00000FE3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000FE3 __unwindfunclet$??1nsEUCJPProber@@UAE@XZ$0 endp
.text$x:00000FE3
.text$x:00000FE8
.text$x:00000FE8 ; =============== S U B R O U T I N E =======================================
.text$x:00000FE8
.text$x:00000FE8
.text$x:00000FE8 __ehhandler$??1nsEUCJPProber@@UAE@XZ proc near
.text$x:00000FE8                                         ; DATA XREF: nsEUCJPProber::~nsEUCJPProber(void)+5o
.text$x:00000FE8
.text$x:00000FE8 arg_4           = dword ptr  8
.text$x:00000FE8
.text$x:00000FE8                 mov     edx, [esp+arg_4]
.text$x:00000FEC                 lea     eax, [edx+0Ch]
.text$x:00000FEF                 mov     ecx, [edx-0Ch]
.text$x:00000FF2                 xor     ecx, eax
.text$x:00000FF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000FF9                 mov     eax, offset __ehfuncinfo$??1nsEUCJPProber@@UAE@XZ
.text$x:00000FFE                 jmp     ___CxxFrameHandler3
.text$x:00000FFE __ehhandler$??1nsEUCJPProber@@UAE@XZ endp
.text$x:00000FFE
.text$x:00000FFE ; ---------------------------------------------------------------------------
.text$x:00001003                 align 4
.text$x:00001003 _text$x         ends
.text$x:00001003
.text$mn:00001004 ; ===========================================================================
.text$mn:00001004
.text$mn:00001004 ; Segment type: Pure code
.text$mn:00001004 ; Segment permissions: Read/Execute
.text$mn:00001004 _text$mn        segment para public 'CODE' use32
.text$mn:00001004                 assume cs:_text$mn
.text$mn:00001004                 ;org 1004h
.text$mn:00001004 ; COMDAT (pick any)
.text$mn:00001004                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001004
.text$mn:00001004 ; =============== S U B R O U T I N E =======================================
.text$mn:00001004
.text$mn:00001004 ; Attributes: bp-based frame
.text$mn:00001004
.text$mn:00001004 ; _DWORD __thiscall nsEUCKRProber::~nsEUCKRProber(nsEUCKRProber *__hidden this)
.text$mn:00001004                 public ??1nsEUCKRProber@@UAE@XZ
.text$mn:00001004 ??1nsEUCKRProber@@UAE@XZ proc near      ; CODE XREF: nsEUCKRProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00001004
.text$mn:00001004 var_14          = dword ptr -14h
.text$mn:00001004 var_10          = dword ptr -10h
.text$mn:00001004 var_C           = dword ptr -0Ch
.text$mn:00001004 var_4           = dword ptr -4
.text$mn:00001004
.text$mn:00001004                 push    ebp
.text$mn:00001005                 mov     ebp, esp
.text$mn:00001007                 push    0FFFFFFFFh
.text$mn:00001009                 push    offset __ehhandler$??1nsEUCKRProber@@UAE@XZ
.text$mn:0000100E                 mov     eax, large fs:0
.text$mn:00001014                 push    eax
.text$mn:00001015                 sub     esp, 8
.text$mn:00001018                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000101D                 xor     eax, ebp
.text$mn:0000101F                 push    eax
.text$mn:00001020                 lea     eax, [ebp+var_C]
.text$mn:00001023                 mov     large fs:0, eax
.text$mn:00001029                 mov     [ebp+var_10], ecx
.text$mn:0000102C                 mov     eax, [ebp+var_10]
.text$mn:0000102F                 mov     dword ptr [eax], offset ??_7nsEUCKRProber@@6B@ ; const nsEUCKRProber::`vftable'
.text$mn:00001035                 mov     [ebp+var_4], 0
.text$mn:0000103C                 mov     ecx, [ebp+var_10]
.text$mn:0000103F                 mov     edx, [ecx+4]
.text$mn:00001042                 mov     [ebp+var_14], edx
.text$mn:00001045                 mov     eax, [ebp+var_14]
.text$mn:00001048                 push    eax             ; void *
.text$mn:00001049                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000104E                 add     esp, 4
.text$mn:00001051                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001058                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000105B                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00001060                 mov     ecx, [ebp+var_C]
.text$mn:00001063                 mov     large fs:0, ecx
.text$mn:0000106A                 pop     ecx
.text$mn:0000106B                 mov     esp, ebp
.text$mn:0000106D                 pop     ebp
.text$mn:0000106E                 retn
.text$mn:0000106E ??1nsEUCKRProber@@UAE@XZ endp
.text$mn:0000106E
.text$mn:0000106E ; ---------------------------------------------------------------------------
.text$mn:0000106F                 align 10h
.text$mn:0000106F _text$mn        ends
.text$mn:0000106F
.text$x:00001070 ; ===========================================================================
.text$x:00001070
.text$x:00001070 ; Segment type: Pure code
.text$x:00001070 ; Segment permissions: Read/Execute
.text$x:00001070 _text$x         segment para public 'CODE' use32
.text$x:00001070                 assume cs:_text$x
.text$x:00001070                 ;org 1070h
.text$x:00001070 ; COMDAT (pick associative to section at 1004)
.text$x:00001070                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00001070
.text$x:00001070 ; =============== S U B R O U T I N E =======================================
.text$x:00001070
.text$x:00001070
.text$x:00001070 __unwindfunclet$??1nsEUCKRProber@@UAE@XZ$0 proc near
.text$x:00001070                                         ; DATA XREF: .xdata$x:00001818o
.text$x:00001070                 mov     ecx, [ebp-10h]  ; this
.text$x:00001073                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00001073 __unwindfunclet$??1nsEUCKRProber@@UAE@XZ$0 endp
.text$x:00001073
.text$x:00001078
.text$x:00001078 ; =============== S U B R O U T I N E =======================================
.text$x:00001078
.text$x:00001078
.text$x:00001078 __ehhandler$??1nsEUCKRProber@@UAE@XZ proc near
.text$x:00001078                                         ; DATA XREF: nsEUCKRProber::~nsEUCKRProber(void)+5o
.text$x:00001078
.text$x:00001078 arg_4           = dword ptr  8
.text$x:00001078
.text$x:00001078                 mov     edx, [esp+arg_4]
.text$x:0000107C                 lea     eax, [edx+0Ch]
.text$x:0000107F                 mov     ecx, [edx-0Ch]
.text$x:00001082                 xor     ecx, eax
.text$x:00001084                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001089                 mov     eax, offset __ehfuncinfo$??1nsEUCKRProber@@UAE@XZ
.text$x:0000108E                 jmp     ___CxxFrameHandler3
.text$x:0000108E __ehhandler$??1nsEUCKRProber@@UAE@XZ endp
.text$x:0000108E
.text$x:0000108E ; ---------------------------------------------------------------------------
.text$x:00001093                 align 4
.text$x:00001093 _text$x         ends
.text$x:00001093
.text$mn:00001094 ; ===========================================================================
.text$mn:00001094
.text$mn:00001094 ; Segment type: Pure code
.text$mn:00001094 ; Segment permissions: Read/Execute
.text$mn:00001094 _text$mn        segment para public 'CODE' use32
.text$mn:00001094                 assume cs:_text$mn
.text$mn:00001094                 ;org 1094h
.text$mn:00001094 ; COMDAT (pick any)
.text$mn:00001094                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001094
.text$mn:00001094 ; =============== S U B R O U T I N E =======================================
.text$mn:00001094
.text$mn:00001094 ; Attributes: bp-based frame
.text$mn:00001094
.text$mn:00001094 ; _DWORD __thiscall nsEUCTWProber::~nsEUCTWProber(nsEUCTWProber *__hidden this)
.text$mn:00001094                 public ??1nsEUCTWProber@@UAE@XZ
.text$mn:00001094 ??1nsEUCTWProber@@UAE@XZ proc near      ; CODE XREF: nsEUCTWProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00001094
.text$mn:00001094 var_14          = dword ptr -14h
.text$mn:00001094 var_10          = dword ptr -10h
.text$mn:00001094 var_C           = dword ptr -0Ch
.text$mn:00001094 var_4           = dword ptr -4
.text$mn:00001094
.text$mn:00001094                 push    ebp
.text$mn:00001095                 mov     ebp, esp
.text$mn:00001097                 push    0FFFFFFFFh
.text$mn:00001099                 push    offset __ehhandler$??1nsEUCTWProber@@UAE@XZ
.text$mn:0000109E                 mov     eax, large fs:0
.text$mn:000010A4                 push    eax
.text$mn:000010A5                 sub     esp, 8
.text$mn:000010A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000010AD                 xor     eax, ebp
.text$mn:000010AF                 push    eax
.text$mn:000010B0                 lea     eax, [ebp+var_C]
.text$mn:000010B3                 mov     large fs:0, eax
.text$mn:000010B9                 mov     [ebp+var_10], ecx
.text$mn:000010BC                 mov     eax, [ebp+var_10]
.text$mn:000010BF                 mov     dword ptr [eax], offset ??_7nsEUCTWProber@@6B@ ; const nsEUCTWProber::`vftable'
.text$mn:000010C5                 mov     [ebp+var_4], 0
.text$mn:000010CC                 mov     ecx, [ebp+var_10]
.text$mn:000010CF                 mov     edx, [ecx+4]
.text$mn:000010D2                 mov     [ebp+var_14], edx
.text$mn:000010D5                 mov     eax, [ebp+var_14]
.text$mn:000010D8                 push    eax             ; void *
.text$mn:000010D9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000010DE                 add     esp, 4
.text$mn:000010E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000010E8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000010EB                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:000010F0                 mov     ecx, [ebp+var_C]
.text$mn:000010F3                 mov     large fs:0, ecx
.text$mn:000010FA                 pop     ecx
.text$mn:000010FB                 mov     esp, ebp
.text$mn:000010FD                 pop     ebp
.text$mn:000010FE                 retn
.text$mn:000010FE ??1nsEUCTWProber@@UAE@XZ endp
.text$mn:000010FE
.text$mn:000010FE ; ---------------------------------------------------------------------------
.text$mn:000010FF                 align 10h
.text$mn:000010FF _text$mn        ends
.text$mn:000010FF
.text$x:00001100 ; ===========================================================================
.text$x:00001100
.text$x:00001100 ; Segment type: Pure code
.text$x:00001100 ; Segment permissions: Read/Execute
.text$x:00001100 _text$x         segment para public 'CODE' use32
.text$x:00001100                 assume cs:_text$x
.text$x:00001100                 ;org 1100h
.text$x:00001100 ; COMDAT (pick associative to section at 1094)
.text$x:00001100                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00001100
.text$x:00001100 ; =============== S U B R O U T I N E =======================================
.text$x:00001100
.text$x:00001100
.text$x:00001100 __unwindfunclet$??1nsEUCTWProber@@UAE@XZ$0 proc near
.text$x:00001100                                         ; DATA XREF: .xdata$x:000018D8o
.text$x:00001100                 mov     ecx, [ebp-10h]  ; this
.text$x:00001103                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00001103 __unwindfunclet$??1nsEUCTWProber@@UAE@XZ$0 endp
.text$x:00001103
.text$x:00001108
.text$x:00001108 ; =============== S U B R O U T I N E =======================================
.text$x:00001108
.text$x:00001108
.text$x:00001108 __ehhandler$??1nsEUCTWProber@@UAE@XZ proc near
.text$x:00001108                                         ; DATA XREF: nsEUCTWProber::~nsEUCTWProber(void)+5o
.text$x:00001108
.text$x:00001108 arg_4           = dword ptr  8
.text$x:00001108
.text$x:00001108                 mov     edx, [esp+arg_4]
.text$x:0000110C                 lea     eax, [edx+0Ch]
.text$x:0000110F                 mov     ecx, [edx-0Ch]
.text$x:00001112                 xor     ecx, eax
.text$x:00001114                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001119                 mov     eax, offset __ehfuncinfo$??1nsEUCTWProber@@UAE@XZ
.text$x:0000111E                 jmp     ___CxxFrameHandler3
.text$x:0000111E __ehhandler$??1nsEUCTWProber@@UAE@XZ endp
.text$x:0000111E
.text$x:0000111E ; ---------------------------------------------------------------------------
.text$x:00001123                 align 4
.text$x:00001123 _text$x         ends
.text$x:00001123
.text$mn:00001124 ; ===========================================================================
.text$mn:00001124
.text$mn:00001124 ; Segment type: Pure code
.text$mn:00001124 ; Segment permissions: Read/Execute
.text$mn:00001124 _text$mn        segment para public 'CODE' use32
.text$mn:00001124                 assume cs:_text$mn
.text$mn:00001124                 ;org 1124h
.text$mn:00001124 ; COMDAT (pick any)
.text$mn:00001124                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001124
.text$mn:00001124 ; =============== S U B R O U T I N E =======================================
.text$mn:00001124
.text$mn:00001124 ; Attributes: bp-based frame
.text$mn:00001124
.text$mn:00001124 ; _DWORD __thiscall nsGB18030Prober::~nsGB18030Prober(nsGB18030Prober *__hidden this)
.text$mn:00001124                 public ??1nsGB18030Prober@@UAE@XZ
.text$mn:00001124 ??1nsGB18030Prober@@UAE@XZ proc near    ; CODE XREF: nsGB18030Prober::`scalar deleting destructor'(uint)+Ap
.text$mn:00001124
.text$mn:00001124 var_14          = dword ptr -14h
.text$mn:00001124 var_10          = dword ptr -10h
.text$mn:00001124 var_C           = dword ptr -0Ch
.text$mn:00001124 var_4           = dword ptr -4
.text$mn:00001124
.text$mn:00001124                 push    ebp
.text$mn:00001125                 mov     ebp, esp
.text$mn:00001127                 push    0FFFFFFFFh
.text$mn:00001129                 push    offset __ehhandler$??1nsGB18030Prober@@UAE@XZ
.text$mn:0000112E                 mov     eax, large fs:0
.text$mn:00001134                 push    eax
.text$mn:00001135                 sub     esp, 8
.text$mn:00001138                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000113D                 xor     eax, ebp
.text$mn:0000113F                 push    eax
.text$mn:00001140                 lea     eax, [ebp+var_C]
.text$mn:00001143                 mov     large fs:0, eax
.text$mn:00001149                 mov     [ebp+var_10], ecx
.text$mn:0000114C                 mov     eax, [ebp+var_10]
.text$mn:0000114F                 mov     dword ptr [eax], offset ??_7nsGB18030Prober@@6B@ ; const nsGB18030Prober::`vftable'
.text$mn:00001155                 mov     [ebp+var_4], 0
.text$mn:0000115C                 mov     ecx, [ebp+var_10]
.text$mn:0000115F                 mov     edx, [ecx+4]
.text$mn:00001162                 mov     [ebp+var_14], edx
.text$mn:00001165                 mov     eax, [ebp+var_14]
.text$mn:00001168                 push    eax             ; void *
.text$mn:00001169                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000116E                 add     esp, 4
.text$mn:00001171                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001178                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000117B                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00001180                 mov     ecx, [ebp+var_C]
.text$mn:00001183                 mov     large fs:0, ecx
.text$mn:0000118A                 pop     ecx
.text$mn:0000118B                 mov     esp, ebp
.text$mn:0000118D                 pop     ebp
.text$mn:0000118E                 retn
.text$mn:0000118E ??1nsGB18030Prober@@UAE@XZ endp
.text$mn:0000118E
.text$mn:0000118E ; ---------------------------------------------------------------------------
.text$mn:0000118F                 align 10h
.text$mn:0000118F _text$mn        ends
.text$mn:0000118F
.text$x:00001190 ; ===========================================================================
.text$x:00001190
.text$x:00001190 ; Segment type: Pure code
.text$x:00001190 ; Segment permissions: Read/Execute
.text$x:00001190 _text$x         segment para public 'CODE' use32
.text$x:00001190                 assume cs:_text$x
.text$x:00001190                 ;org 1190h
.text$x:00001190 ; COMDAT (pick associative to section at 1124)
.text$x:00001190                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00001190
.text$x:00001190 ; =============== S U B R O U T I N E =======================================
.text$x:00001190
.text$x:00001190
.text$x:00001190 __unwindfunclet$??1nsGB18030Prober@@UAE@XZ$0 proc near
.text$x:00001190                                         ; DATA XREF: .xdata$x:000017B8o
.text$x:00001190                 mov     ecx, [ebp-10h]  ; this
.text$x:00001193                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00001193 __unwindfunclet$??1nsGB18030Prober@@UAE@XZ$0 endp
.text$x:00001193
.text$x:00001198
.text$x:00001198 ; =============== S U B R O U T I N E =======================================
.text$x:00001198
.text$x:00001198
.text$x:00001198 __ehhandler$??1nsGB18030Prober@@UAE@XZ proc near
.text$x:00001198                                         ; DATA XREF: nsGB18030Prober::~nsGB18030Prober(void)+5o
.text$x:00001198
.text$x:00001198 arg_4           = dword ptr  8
.text$x:00001198
.text$x:00001198                 mov     edx, [esp+arg_4]
.text$x:0000119C                 lea     eax, [edx+0Ch]
.text$x:0000119F                 mov     ecx, [edx-0Ch]
.text$x:000011A2                 xor     ecx, eax
.text$x:000011A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000011A9                 mov     eax, offset __ehfuncinfo$??1nsGB18030Prober@@UAE@XZ
.text$x:000011AE                 jmp     ___CxxFrameHandler3
.text$x:000011AE __ehhandler$??1nsGB18030Prober@@UAE@XZ endp
.text$x:000011AE
.text$x:000011AE ; ---------------------------------------------------------------------------
.text$x:000011B3                 align 4
.text$x:000011B3 _text$x         ends
.text$x:000011B3
.text$mn:000011B4 ; ===========================================================================
.text$mn:000011B4
.text$mn:000011B4 ; Segment type: Pure code
.text$mn:000011B4 ; Segment permissions: Read/Execute
.text$mn:000011B4 _text$mn        segment para public 'CODE' use32
.text$mn:000011B4                 assume cs:_text$mn
.text$mn:000011B4                 ;org 11B4h
.text$mn:000011B4 ; COMDAT (pick any)
.text$mn:000011B4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000011B4
.text$mn:000011B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000011B4
.text$mn:000011B4 ; Attributes: bp-based frame
.text$mn:000011B4
.text$mn:000011B4 ; _DWORD __thiscall nsSJISProber::~nsSJISProber(nsSJISProber *__hidden this)
.text$mn:000011B4                 public ??1nsSJISProber@@UAE@XZ
.text$mn:000011B4 ??1nsSJISProber@@UAE@XZ proc near       ; CODE XREF: nsSJISProber::`scalar deleting destructor'(uint)+Ap
.text$mn:000011B4
.text$mn:000011B4 var_14          = dword ptr -14h
.text$mn:000011B4 var_10          = dword ptr -10h
.text$mn:000011B4 var_C           = dword ptr -0Ch
.text$mn:000011B4 var_4           = dword ptr -4
.text$mn:000011B4
.text$mn:000011B4                 push    ebp
.text$mn:000011B5                 mov     ebp, esp
.text$mn:000011B7                 push    0FFFFFFFFh
.text$mn:000011B9                 push    offset __ehhandler$??1nsSJISProber@@UAE@XZ
.text$mn:000011BE                 mov     eax, large fs:0
.text$mn:000011C4                 push    eax
.text$mn:000011C5                 sub     esp, 8
.text$mn:000011C8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000011CD                 xor     eax, ebp
.text$mn:000011CF                 push    eax
.text$mn:000011D0                 lea     eax, [ebp+var_C]
.text$mn:000011D3                 mov     large fs:0, eax
.text$mn:000011D9                 mov     [ebp+var_10], ecx
.text$mn:000011DC                 mov     eax, [ebp+var_10]
.text$mn:000011DF                 mov     dword ptr [eax], offset ??_7nsSJISProber@@6B@ ; const nsSJISProber::`vftable'
.text$mn:000011E5                 mov     [ebp+var_4], 0
.text$mn:000011EC                 mov     ecx, [ebp+var_10]
.text$mn:000011EF                 mov     edx, [ecx+4]
.text$mn:000011F2                 mov     [ebp+var_14], edx
.text$mn:000011F5                 mov     eax, [ebp+var_14]
.text$mn:000011F8                 push    eax             ; void *
.text$mn:000011F9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000011FE                 add     esp, 4
.text$mn:00001201                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001208                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000120B                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00001210                 mov     ecx, [ebp+var_C]
.text$mn:00001213                 mov     large fs:0, ecx
.text$mn:0000121A                 pop     ecx
.text$mn:0000121B                 mov     esp, ebp
.text$mn:0000121D                 pop     ebp
.text$mn:0000121E                 retn
.text$mn:0000121E ??1nsSJISProber@@UAE@XZ endp
.text$mn:0000121E
.text$mn:0000121E ; ---------------------------------------------------------------------------
.text$mn:0000121F                 align 10h
.text$mn:0000121F _text$mn        ends
.text$mn:0000121F
.text$x:00001220 ; ===========================================================================
.text$x:00001220
.text$x:00001220 ; Segment type: Pure code
.text$x:00001220 ; Segment permissions: Read/Execute
.text$x:00001220 _text$x         segment para public 'CODE' use32
.text$x:00001220                 assume cs:_text$x
.text$x:00001220                 ;org 1220h
.text$x:00001220 ; COMDAT (pick associative to section at 11B4)
.text$x:00001220                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00001220
.text$x:00001220 ; =============== S U B R O U T I N E =======================================
.text$x:00001220
.text$x:00001220
.text$x:00001220 __unwindfunclet$??1nsSJISProber@@UAE@XZ$0 proc near
.text$x:00001220                                         ; DATA XREF: .xdata$x:00001698o
.text$x:00001220                 mov     ecx, [ebp-10h]  ; this
.text$x:00001223                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00001223 __unwindfunclet$??1nsSJISProber@@UAE@XZ$0 endp
.text$x:00001223
.text$x:00001228
.text$x:00001228 ; =============== S U B R O U T I N E =======================================
.text$x:00001228
.text$x:00001228
.text$x:00001228 __ehhandler$??1nsSJISProber@@UAE@XZ proc near
.text$x:00001228                                         ; DATA XREF: nsSJISProber::~nsSJISProber(void)+5o
.text$x:00001228
.text$x:00001228 arg_4           = dword ptr  8
.text$x:00001228
.text$x:00001228                 mov     edx, [esp+arg_4]
.text$x:0000122C                 lea     eax, [edx+0Ch]
.text$x:0000122F                 mov     ecx, [edx-0Ch]
.text$x:00001232                 xor     ecx, eax
.text$x:00001234                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001239                 mov     eax, offset __ehfuncinfo$??1nsSJISProber@@UAE@XZ
.text$x:0000123E                 jmp     ___CxxFrameHandler3
.text$x:0000123E __ehhandler$??1nsSJISProber@@UAE@XZ endp
.text$x:0000123E
.text$x:0000123E ; ---------------------------------------------------------------------------
.text$x:00001243                 align 4
.text$x:00001243 _text$x         ends
.text$x:00001243
.text$mn:00001244 ; ===========================================================================
.text$mn:00001244
.text$mn:00001244 ; Segment type: Pure code
.text$mn:00001244 ; Segment permissions: Read/Execute
.text$mn:00001244 _text$mn        segment para public 'CODE' use32
.text$mn:00001244                 assume cs:_text$mn
.text$mn:00001244                 ;org 1244h
.text$mn:00001244 ; COMDAT (pick any)
.text$mn:00001244                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001244
.text$mn:00001244 ; =============== S U B R O U T I N E =======================================
.text$mn:00001244
.text$mn:00001244 ; Attributes: bp-based frame
.text$mn:00001244
.text$mn:00001244 ; _DWORD __thiscall nsUTF8Prober::~nsUTF8Prober(nsUTF8Prober *__hidden this)
.text$mn:00001244                 public ??1nsUTF8Prober@@UAE@XZ
.text$mn:00001244 ??1nsUTF8Prober@@UAE@XZ proc near       ; CODE XREF: nsUTF8Prober::`scalar deleting destructor'(uint)+Ap
.text$mn:00001244
.text$mn:00001244 var_14          = dword ptr -14h
.text$mn:00001244 var_10          = dword ptr -10h
.text$mn:00001244 var_C           = dword ptr -0Ch
.text$mn:00001244 var_4           = dword ptr -4
.text$mn:00001244
.text$mn:00001244                 push    ebp
.text$mn:00001245                 mov     ebp, esp
.text$mn:00001247                 push    0FFFFFFFFh
.text$mn:00001249                 push    offset __ehhandler$??1nsUTF8Prober@@UAE@XZ
.text$mn:0000124E                 mov     eax, large fs:0
.text$mn:00001254                 push    eax
.text$mn:00001255                 sub     esp, 8
.text$mn:00001258                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000125D                 xor     eax, ebp
.text$mn:0000125F                 push    eax
.text$mn:00001260                 lea     eax, [ebp+var_C]
.text$mn:00001263                 mov     large fs:0, eax
.text$mn:00001269                 mov     [ebp+var_10], ecx
.text$mn:0000126C                 mov     eax, [ebp+var_10]
.text$mn:0000126F                 mov     dword ptr [eax], offset ??_7nsUTF8Prober@@6B@ ; const nsUTF8Prober::`vftable'
.text$mn:00001275                 mov     [ebp+var_4], 0
.text$mn:0000127C                 mov     ecx, [ebp+var_10]
.text$mn:0000127F                 mov     edx, [ecx+4]
.text$mn:00001282                 mov     [ebp+var_14], edx
.text$mn:00001285                 mov     eax, [ebp+var_14]
.text$mn:00001288                 push    eax             ; void *
.text$mn:00001289                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000128E                 add     esp, 4
.text$mn:00001291                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001298                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000129B                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:000012A0                 mov     ecx, [ebp+var_C]
.text$mn:000012A3                 mov     large fs:0, ecx
.text$mn:000012AA                 pop     ecx
.text$mn:000012AB                 mov     esp, ebp
.text$mn:000012AD                 pop     ebp
.text$mn:000012AE                 retn
.text$mn:000012AE ??1nsUTF8Prober@@UAE@XZ endp
.text$mn:000012AE
.text$mn:000012AE ; ---------------------------------------------------------------------------
.text$mn:000012AF                 align 10h
.text$mn:000012AF _text$mn        ends
.text$mn:000012AF
.text$x:000012B0 ; ===========================================================================
.text$x:000012B0
.text$x:000012B0 ; Segment type: Pure code
.text$x:000012B0 ; Segment permissions: Read/Execute
.text$x:000012B0 _text$x         segment para public 'CODE' use32
.text$x:000012B0                 assume cs:_text$x
.text$x:000012B0                 ;org 12B0h
.text$x:000012B0 ; COMDAT (pick associative to section at 1244)
.text$x:000012B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:000012B0
.text$x:000012B0 ; =============== S U B R O U T I N E =======================================
.text$x:000012B0
.text$x:000012B0
.text$x:000012B0 __unwindfunclet$??1nsUTF8Prober@@UAE@XZ$0 proc near
.text$x:000012B0                                         ; DATA XREF: .xdata$x:000016F8o
.text$x:000012B0                 mov     ecx, [ebp-10h]  ; this
.text$x:000012B3                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:000012B3 __unwindfunclet$??1nsUTF8Prober@@UAE@XZ$0 endp
.text$x:000012B3
.text$x:000012B8
.text$x:000012B8 ; =============== S U B R O U T I N E =======================================
.text$x:000012B8
.text$x:000012B8
.text$x:000012B8 __ehhandler$??1nsUTF8Prober@@UAE@XZ proc near
.text$x:000012B8                                         ; DATA XREF: nsUTF8Prober::~nsUTF8Prober(void)+5o
.text$x:000012B8
.text$x:000012B8 arg_4           = dword ptr  8
.text$x:000012B8
.text$x:000012B8                 mov     edx, [esp+arg_4]
.text$x:000012BC                 lea     eax, [edx+0Ch]
.text$x:000012BF                 mov     ecx, [edx-0Ch]
.text$x:000012C2                 xor     ecx, eax
.text$x:000012C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000012C9                 mov     eax, offset __ehfuncinfo$??1nsUTF8Prober@@UAE@XZ
.text$x:000012CE                 jmp     ___CxxFrameHandler3
.text$x:000012CE __ehhandler$??1nsUTF8Prober@@UAE@XZ endp
.text$x:000012CE
.text$x:000012CE ; ---------------------------------------------------------------------------
.text$x:000012D3                 align 4
.text$x:000012D3 _text$x         ends
.text$x:000012D3
.text$mn:000012D4 ; ===========================================================================
.text$mn:000012D4
.text$mn:000012D4 ; Segment type: Pure code
.text$mn:000012D4 ; Segment permissions: Read/Execute
.text$mn:000012D4 _text$mn        segment para public 'CODE' use32
.text$mn:000012D4                 assume cs:_text$mn
.text$mn:000012D4                 ;org 12D4h
.text$mn:000012D4 ; COMDAT (pick any)
.text$mn:000012D4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000012D4
.text$mn:000012D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000012D4
.text$mn:000012D4 ; Attributes: bp-based frame
.text$mn:000012D4
.text$mn:000012D4 ; public: virtual void * __thiscall nsBig5Prober::`scalar deleting destructor'(unsigned int)
.text$mn:000012D4                 public ??_GnsBig5Prober@@UAEPAXI@Z
.text$mn:000012D4 ??_GnsBig5Prober@@UAEPAXI@Z proc near
.text$mn:000012D4
.text$mn:000012D4 var_4           = dword ptr -4
.text$mn:000012D4 arg_0           = dword ptr  8
.text$mn:000012D4
.text$mn:000012D4                 push    ebp
.text$mn:000012D5                 mov     ebp, esp
.text$mn:000012D7                 push    ecx
.text$mn:000012D8                 mov     [ebp+var_4], ecx
.text$mn:000012DB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000012DE                 call    ??1nsBig5Prober@@UAE@XZ ; nsBig5Prober::~nsBig5Prober(void)
.text$mn:000012E3                 mov     eax, [ebp+arg_0]
.text$mn:000012E6                 and     eax, 1
.text$mn:000012E9                 jz      short loc_12F7
.text$mn:000012EB                 mov     ecx, [ebp+var_4]
.text$mn:000012EE                 push    ecx             ; void *
.text$mn:000012EF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000012F4                 add     esp, 4
.text$mn:000012F7
.text$mn:000012F7 loc_12F7:                               ; CODE XREF: nsBig5Prober::`scalar deleting destructor'(uint)+15j
.text$mn:000012F7                 mov     eax, [ebp+var_4]
.text$mn:000012FA                 mov     esp, ebp
.text$mn:000012FC                 pop     ebp
.text$mn:000012FD                 retn    4
.text$mn:000012FD ??_GnsBig5Prober@@UAEPAXI@Z endp
.text$mn:000012FD
.text$mn:000012FD _text$mn        ends
.text$mn:000012FD
.text$mn:00001300 ; ===========================================================================
.text$mn:00001300
.text$mn:00001300 ; Segment type: Pure code
.text$mn:00001300 ; Segment permissions: Read/Execute
.text$mn:00001300 _text$mn        segment para public 'CODE' use32
.text$mn:00001300                 assume cs:_text$mn
.text$mn:00001300                 ;org 1300h
.text$mn:00001300 ; COMDAT (pick any)
.text$mn:00001300                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001300
.text$mn:00001300 ; =============== S U B R O U T I N E =======================================
.text$mn:00001300
.text$mn:00001300 ; Attributes: bp-based frame
.text$mn:00001300
.text$mn:00001300 ; public: virtual void * __thiscall nsCharSetProber::`scalar deleting destructor'(unsigned int)
.text$mn:00001300                 public ??_GnsCharSetProber@@UAEPAXI@Z
.text$mn:00001300 ??_GnsCharSetProber@@UAEPAXI@Z proc near
.text$mn:00001300
.text$mn:00001300 var_4           = dword ptr -4
.text$mn:00001300 arg_0           = dword ptr  8
.text$mn:00001300
.text$mn:00001300                 push    ebp
.text$mn:00001301                 mov     ebp, esp
.text$mn:00001303                 push    ecx
.text$mn:00001304                 mov     [ebp+var_4], ecx
.text$mn:00001307                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000130A                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:0000130F                 mov     eax, [ebp+arg_0]
.text$mn:00001312                 and     eax, 1
.text$mn:00001315                 jz      short loc_1323
.text$mn:00001317                 mov     ecx, [ebp+var_4]
.text$mn:0000131A                 push    ecx             ; void *
.text$mn:0000131B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001320                 add     esp, 4
.text$mn:00001323
.text$mn:00001323 loc_1323:                               ; CODE XREF: nsCharSetProber::`scalar deleting destructor'(uint)+15j
.text$mn:00001323                 mov     eax, [ebp+var_4]
.text$mn:00001326                 mov     esp, ebp
.text$mn:00001328                 pop     ebp
.text$mn:00001329                 retn    4
.text$mn:00001329 ??_GnsCharSetProber@@UAEPAXI@Z endp
.text$mn:00001329
.text$mn:00001329 _text$mn        ends
.text$mn:00001329
.text$mn:0000132C ; ===========================================================================
.text$mn:0000132C
.text$mn:0000132C ; Segment type: Pure code
.text$mn:0000132C ; Segment permissions: Read/Execute
.text$mn:0000132C _text$mn        segment para public 'CODE' use32
.text$mn:0000132C                 assume cs:_text$mn
.text$mn:0000132C                 ;org 132Ch
.text$mn:0000132C ; COMDAT (pick any)
.text$mn:0000132C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:0000132C
.text$mn:0000132C ; =============== S U B R O U T I N E =======================================
.text$mn:0000132C
.text$mn:0000132C ; Attributes: bp-based frame
.text$mn:0000132C
.text$mn:0000132C ; public: virtual void * __thiscall nsEUCJPProber::`scalar deleting destructor'(unsigned int)
.text$mn:0000132C                 public ??_GnsEUCJPProber@@UAEPAXI@Z
.text$mn:0000132C ??_GnsEUCJPProber@@UAEPAXI@Z proc near
.text$mn:0000132C
.text$mn:0000132C var_4           = dword ptr -4
.text$mn:0000132C arg_0           = dword ptr  8
.text$mn:0000132C
.text$mn:0000132C                 push    ebp
.text$mn:0000132D                 mov     ebp, esp
.text$mn:0000132F                 push    ecx
.text$mn:00001330                 mov     [ebp+var_4], ecx
.text$mn:00001333                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001336                 call    ??1nsEUCJPProber@@UAE@XZ ; nsEUCJPProber::~nsEUCJPProber(void)
.text$mn:0000133B                 mov     eax, [ebp+arg_0]
.text$mn:0000133E                 and     eax, 1
.text$mn:00001341                 jz      short loc_134F
.text$mn:00001343                 mov     ecx, [ebp+var_4]
.text$mn:00001346                 push    ecx             ; void *
.text$mn:00001347                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000134C                 add     esp, 4
.text$mn:0000134F
.text$mn:0000134F loc_134F:                               ; CODE XREF: nsEUCJPProber::`scalar deleting destructor'(uint)+15j
.text$mn:0000134F                 mov     eax, [ebp+var_4]
.text$mn:00001352                 mov     esp, ebp
.text$mn:00001354                 pop     ebp
.text$mn:00001355                 retn    4
.text$mn:00001355 ??_GnsEUCJPProber@@UAEPAXI@Z endp
.text$mn:00001355
.text$mn:00001355 _text$mn        ends
.text$mn:00001355
.text$mn:00001358 ; ===========================================================================
.text$mn:00001358
.text$mn:00001358 ; Segment type: Pure code
.text$mn:00001358 ; Segment permissions: Read/Execute
.text$mn:00001358 _text$mn        segment para public 'CODE' use32
.text$mn:00001358                 assume cs:_text$mn
.text$mn:00001358                 ;org 1358h
.text$mn:00001358 ; COMDAT (pick any)
.text$mn:00001358                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001358
.text$mn:00001358 ; =============== S U B R O U T I N E =======================================
.text$mn:00001358
.text$mn:00001358 ; Attributes: bp-based frame
.text$mn:00001358
.text$mn:00001358 ; public: virtual void * __thiscall nsEUCKRProber::`scalar deleting destructor'(unsigned int)
.text$mn:00001358                 public ??_GnsEUCKRProber@@UAEPAXI@Z
.text$mn:00001358 ??_GnsEUCKRProber@@UAEPAXI@Z proc near
.text$mn:00001358
.text$mn:00001358 var_4           = dword ptr -4
.text$mn:00001358 arg_0           = dword ptr  8
.text$mn:00001358
.text$mn:00001358                 push    ebp
.text$mn:00001359                 mov     ebp, esp
.text$mn:0000135B                 push    ecx
.text$mn:0000135C                 mov     [ebp+var_4], ecx
.text$mn:0000135F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001362                 call    ??1nsEUCKRProber@@UAE@XZ ; nsEUCKRProber::~nsEUCKRProber(void)
.text$mn:00001367                 mov     eax, [ebp+arg_0]
.text$mn:0000136A                 and     eax, 1
.text$mn:0000136D                 jz      short loc_137B
.text$mn:0000136F                 mov     ecx, [ebp+var_4]
.text$mn:00001372                 push    ecx             ; void *
.text$mn:00001373                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001378                 add     esp, 4
.text$mn:0000137B
.text$mn:0000137B loc_137B:                               ; CODE XREF: nsEUCKRProber::`scalar deleting destructor'(uint)+15j
.text$mn:0000137B                 mov     eax, [ebp+var_4]
.text$mn:0000137E                 mov     esp, ebp
.text$mn:00001380                 pop     ebp
.text$mn:00001381                 retn    4
.text$mn:00001381 ??_GnsEUCKRProber@@UAEPAXI@Z endp
.text$mn:00001381
.text$mn:00001381 _text$mn        ends
.text$mn:00001381
.text$mn:00001384 ; ===========================================================================
.text$mn:00001384
.text$mn:00001384 ; Segment type: Pure code
.text$mn:00001384 ; Segment permissions: Read/Execute
.text$mn:00001384 _text$mn        segment para public 'CODE' use32
.text$mn:00001384                 assume cs:_text$mn
.text$mn:00001384                 ;org 1384h
.text$mn:00001384 ; COMDAT (pick any)
.text$mn:00001384                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001384
.text$mn:00001384 ; =============== S U B R O U T I N E =======================================
.text$mn:00001384
.text$mn:00001384 ; Attributes: bp-based frame
.text$mn:00001384
.text$mn:00001384 ; public: virtual void * __thiscall nsEUCTWProber::`scalar deleting destructor'(unsigned int)
.text$mn:00001384                 public ??_GnsEUCTWProber@@UAEPAXI@Z
.text$mn:00001384 ??_GnsEUCTWProber@@UAEPAXI@Z proc near
.text$mn:00001384
.text$mn:00001384 var_4           = dword ptr -4
.text$mn:00001384 arg_0           = dword ptr  8
.text$mn:00001384
.text$mn:00001384                 push    ebp
.text$mn:00001385                 mov     ebp, esp
.text$mn:00001387                 push    ecx
.text$mn:00001388                 mov     [ebp+var_4], ecx
.text$mn:0000138B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000138E                 call    ??1nsEUCTWProber@@UAE@XZ ; nsEUCTWProber::~nsEUCTWProber(void)
.text$mn:00001393                 mov     eax, [ebp+arg_0]
.text$mn:00001396                 and     eax, 1
.text$mn:00001399                 jz      short loc_13A7
.text$mn:0000139B                 mov     ecx, [ebp+var_4]
.text$mn:0000139E                 push    ecx             ; void *
.text$mn:0000139F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000013A4                 add     esp, 4
.text$mn:000013A7
.text$mn:000013A7 loc_13A7:                               ; CODE XREF: nsEUCTWProber::`scalar deleting destructor'(uint)+15j
.text$mn:000013A7                 mov     eax, [ebp+var_4]
.text$mn:000013AA                 mov     esp, ebp
.text$mn:000013AC                 pop     ebp
.text$mn:000013AD                 retn    4
.text$mn:000013AD ??_GnsEUCTWProber@@UAEPAXI@Z endp
.text$mn:000013AD
.text$mn:000013AD _text$mn        ends
.text$mn:000013AD
.text$mn:000013B0 ; ===========================================================================
.text$mn:000013B0
.text$mn:000013B0 ; Segment type: Pure code
.text$mn:000013B0 ; Segment permissions: Read/Execute
.text$mn:000013B0 _text$mn        segment para public 'CODE' use32
.text$mn:000013B0                 assume cs:_text$mn
.text$mn:000013B0                 ;org 13B0h
.text$mn:000013B0 ; COMDAT (pick any)
.text$mn:000013B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000013B0
.text$mn:000013B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000013B0
.text$mn:000013B0 ; Attributes: bp-based frame
.text$mn:000013B0
.text$mn:000013B0 ; public: virtual void * __thiscall nsGB18030Prober::`scalar deleting destructor'(unsigned int)
.text$mn:000013B0                 public ??_GnsGB18030Prober@@UAEPAXI@Z
.text$mn:000013B0 ??_GnsGB18030Prober@@UAEPAXI@Z proc near
.text$mn:000013B0
.text$mn:000013B0 var_4           = dword ptr -4
.text$mn:000013B0 arg_0           = dword ptr  8
.text$mn:000013B0
.text$mn:000013B0                 push    ebp
.text$mn:000013B1                 mov     ebp, esp
.text$mn:000013B3                 push    ecx
.text$mn:000013B4                 mov     [ebp+var_4], ecx
.text$mn:000013B7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013BA                 call    ??1nsGB18030Prober@@UAE@XZ ; nsGB18030Prober::~nsGB18030Prober(void)
.text$mn:000013BF                 mov     eax, [ebp+arg_0]
.text$mn:000013C2                 and     eax, 1
.text$mn:000013C5                 jz      short loc_13D3
.text$mn:000013C7                 mov     ecx, [ebp+var_4]
.text$mn:000013CA                 push    ecx             ; void *
.text$mn:000013CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000013D0                 add     esp, 4
.text$mn:000013D3
.text$mn:000013D3 loc_13D3:                               ; CODE XREF: nsGB18030Prober::`scalar deleting destructor'(uint)+15j
.text$mn:000013D3                 mov     eax, [ebp+var_4]
.text$mn:000013D6                 mov     esp, ebp
.text$mn:000013D8                 pop     ebp
.text$mn:000013D9                 retn    4
.text$mn:000013D9 ??_GnsGB18030Prober@@UAEPAXI@Z endp
.text$mn:000013D9
.text$mn:000013D9 _text$mn        ends
.text$mn:000013D9
.text$mn:000013DC ; ===========================================================================
.text$mn:000013DC
.text$mn:000013DC ; Segment type: Pure code
.text$mn:000013DC ; Segment permissions: Read/Execute
.text$mn:000013DC _text$mn        segment para public 'CODE' use32
.text$mn:000013DC                 assume cs:_text$mn
.text$mn:000013DC                 ;org 13DCh
.text$mn:000013DC ; COMDAT (pick any)
.text$mn:000013DC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000013DC
.text$mn:000013DC ; =============== S U B R O U T I N E =======================================
.text$mn:000013DC
.text$mn:000013DC ; Attributes: bp-based frame
.text$mn:000013DC
.text$mn:000013DC ; public: virtual void * __thiscall nsMBCSGroupProber::`scalar deleting destructor'(unsigned int)
.text$mn:000013DC                 public ??_GnsMBCSGroupProber@@UAEPAXI@Z
.text$mn:000013DC ??_GnsMBCSGroupProber@@UAEPAXI@Z proc near
.text$mn:000013DC
.text$mn:000013DC var_4           = dword ptr -4
.text$mn:000013DC arg_0           = dword ptr  8
.text$mn:000013DC
.text$mn:000013DC                 push    ebp
.text$mn:000013DD                 mov     ebp, esp
.text$mn:000013DF                 push    ecx
.text$mn:000013E0                 mov     [ebp+var_4], ecx
.text$mn:000013E3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000013E6                 call    ??1nsMBCSGroupProber@@UAE@XZ ; nsMBCSGroupProber::~nsMBCSGroupProber(void)
.text$mn:000013EB                 mov     eax, [ebp+arg_0]
.text$mn:000013EE                 and     eax, 1
.text$mn:000013F1                 jz      short loc_13FF
.text$mn:000013F3                 mov     ecx, [ebp+var_4]
.text$mn:000013F6                 push    ecx             ; void *
.text$mn:000013F7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000013FC                 add     esp, 4
.text$mn:000013FF
.text$mn:000013FF loc_13FF:                               ; CODE XREF: nsMBCSGroupProber::`scalar deleting destructor'(uint)+15j
.text$mn:000013FF                 mov     eax, [ebp+var_4]
.text$mn:00001402                 mov     esp, ebp
.text$mn:00001404                 pop     ebp
.text$mn:00001405                 retn    4
.text$mn:00001405 ??_GnsMBCSGroupProber@@UAEPAXI@Z endp
.text$mn:00001405
.text$mn:00001405 _text$mn        ends
.text$mn:00001405
.text$mn:00001408 ; ===========================================================================
.text$mn:00001408
.text$mn:00001408 ; Segment type: Pure code
.text$mn:00001408 ; Segment permissions: Read/Execute
.text$mn:00001408 _text$mn        segment para public 'CODE' use32
.text$mn:00001408                 assume cs:_text$mn
.text$mn:00001408                 ;org 1408h
.text$mn:00001408 ; COMDAT (pick any)
.text$mn:00001408                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001408
.text$mn:00001408 ; =============== S U B R O U T I N E =======================================
.text$mn:00001408
.text$mn:00001408 ; Attributes: bp-based frame
.text$mn:00001408
.text$mn:00001408 ; public: virtual void * __thiscall nsSJISProber::`scalar deleting destructor'(unsigned int)
.text$mn:00001408                 public ??_GnsSJISProber@@UAEPAXI@Z
.text$mn:00001408 ??_GnsSJISProber@@UAEPAXI@Z proc near
.text$mn:00001408
.text$mn:00001408 var_4           = dword ptr -4
.text$mn:00001408 arg_0           = dword ptr  8
.text$mn:00001408
.text$mn:00001408                 push    ebp
.text$mn:00001409                 mov     ebp, esp
.text$mn:0000140B                 push    ecx
.text$mn:0000140C                 mov     [ebp+var_4], ecx
.text$mn:0000140F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001412                 call    ??1nsSJISProber@@UAE@XZ ; nsSJISProber::~nsSJISProber(void)
.text$mn:00001417                 mov     eax, [ebp+arg_0]
.text$mn:0000141A                 and     eax, 1
.text$mn:0000141D                 jz      short loc_142B
.text$mn:0000141F                 mov     ecx, [ebp+var_4]
.text$mn:00001422                 push    ecx             ; void *
.text$mn:00001423                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001428                 add     esp, 4
.text$mn:0000142B
.text$mn:0000142B loc_142B:                               ; CODE XREF: nsSJISProber::`scalar deleting destructor'(uint)+15j
.text$mn:0000142B                 mov     eax, [ebp+var_4]
.text$mn:0000142E                 mov     esp, ebp
.text$mn:00001430                 pop     ebp
.text$mn:00001431                 retn    4
.text$mn:00001431 ??_GnsSJISProber@@UAEPAXI@Z endp
.text$mn:00001431
.text$mn:00001431 _text$mn        ends
.text$mn:00001431
.text$mn:00001434 ; ===========================================================================
.text$mn:00001434
.text$mn:00001434 ; Segment type: Pure code
.text$mn:00001434 ; Segment permissions: Read/Execute
.text$mn:00001434 _text$mn        segment para public 'CODE' use32
.text$mn:00001434                 assume cs:_text$mn
.text$mn:00001434                 ;org 1434h
.text$mn:00001434 ; COMDAT (pick any)
.text$mn:00001434                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001434
.text$mn:00001434 ; =============== S U B R O U T I N E =======================================
.text$mn:00001434
.text$mn:00001434 ; Attributes: bp-based frame
.text$mn:00001434
.text$mn:00001434 ; public: virtual void * __thiscall nsUTF8Prober::`scalar deleting destructor'(unsigned int)
.text$mn:00001434                 public ??_GnsUTF8Prober@@UAEPAXI@Z
.text$mn:00001434 ??_GnsUTF8Prober@@UAEPAXI@Z proc near
.text$mn:00001434
.text$mn:00001434 var_4           = dword ptr -4
.text$mn:00001434 arg_0           = dword ptr  8
.text$mn:00001434
.text$mn:00001434                 push    ebp
.text$mn:00001435                 mov     ebp, esp
.text$mn:00001437                 push    ecx
.text$mn:00001438                 mov     [ebp+var_4], ecx
.text$mn:0000143B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000143E                 call    ??1nsUTF8Prober@@UAE@XZ ; nsUTF8Prober::~nsUTF8Prober(void)
.text$mn:00001443                 mov     eax, [ebp+arg_0]
.text$mn:00001446                 and     eax, 1
.text$mn:00001449                 jz      short loc_1457
.text$mn:0000144B                 mov     ecx, [ebp+var_4]
.text$mn:0000144E                 push    ecx             ; void *
.text$mn:0000144F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001454                 add     esp, 4
.text$mn:00001457
.text$mn:00001457 loc_1457:                               ; CODE XREF: nsUTF8Prober::`scalar deleting destructor'(uint)+15j
.text$mn:00001457                 mov     eax, [ebp+var_4]
.text$mn:0000145A                 mov     esp, ebp
.text$mn:0000145C                 pop     ebp
.text$mn:0000145D                 retn    4
.text$mn:0000145D ??_GnsUTF8Prober@@UAEPAXI@Z endp
.text$mn:0000145D
.text$mn:0000145D _text$mn        ends
.text$mn:0000145D
.text$mn:00001460 ; ===========================================================================
.text$mn:00001460
.text$mn:00001460 ; Segment type: Pure code
.text$mn:00001460 ; Segment permissions: Read/Execute
.text$mn:00001460 _text$mn        segment para public 'CODE' use32
.text$mn:00001460                 assume cs:_text$mn
.text$mn:00001460                 ;org 1460h
.text$mn:00001460 ; COMDAT (pick any)
.text$mn:00001460                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001460
.text$mn:00001460 ; =============== S U B R O U T I N E =======================================
.text$mn:00001460
.text$mn:00001460 ; Attributes: bp-based frame
.text$mn:00001460
.text$mn:00001460 ; const char *__thiscall nsBig5Prober::GetCharSetName(nsBig5Prober *__hidden this)
.text$mn:00001460                 public ?GetCharSetName@nsBig5Prober@@UAEPBDXZ
.text$mn:00001460 ?GetCharSetName@nsBig5Prober@@UAEPBDXZ proc near
.text$mn:00001460                                         ; DATA XREF: .rdata:00001AA8o
.text$mn:00001460
.text$mn:00001460 var_4           = dword ptr -4
.text$mn:00001460
.text$mn:00001460                 push    ebp
.text$mn:00001461                 mov     ebp, esp
.text$mn:00001463                 push    ecx
.text$mn:00001464                 mov     [ebp+var_4], ecx
.text$mn:00001467                 mov     eax, offset ??_C@_04LCGJKEFB@Big5?$AA@ ; "Big5"
.text$mn:0000146C                 mov     esp, ebp
.text$mn:0000146E                 pop     ebp
.text$mn:0000146F                 retn
.text$mn:0000146F ?GetCharSetName@nsBig5Prober@@UAEPBDXZ endp
.text$mn:0000146F
.text$mn:0000146F _text$mn        ends
.text$mn:0000146F
.text$mn:00001470 ; ===========================================================================
.text$mn:00001470
.text$mn:00001470 ; Segment type: Pure code
.text$mn:00001470 ; Segment permissions: Read/Execute
.text$mn:00001470 _text$mn        segment para public 'CODE' use32
.text$mn:00001470                 assume cs:_text$mn
.text$mn:00001470                 ;org 1470h
.text$mn:00001470 ; COMDAT (pick any)
.text$mn:00001470                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001470
.text$mn:00001470 ; =============== S U B R O U T I N E =======================================
.text$mn:00001470
.text$mn:00001470 ; Attributes: bp-based frame
.text$mn:00001470
.text$mn:00001470 ; const char *__thiscall nsEUCJPProber::GetCharSetName(nsEUCJPProber *__hidden this)
.text$mn:00001470                 public ?GetCharSetName@nsEUCJPProber@@UAEPBDXZ
.text$mn:00001470 ?GetCharSetName@nsEUCJPProber@@UAEPBDXZ proc near
.text$mn:00001470                                         ; DATA XREF: .rdata:00001A30o
.text$mn:00001470
.text$mn:00001470 var_4           = dword ptr -4
.text$mn:00001470
.text$mn:00001470                 push    ebp
.text$mn:00001471                 mov     ebp, esp
.text$mn:00001473                 push    ecx
.text$mn:00001474                 mov     [ebp+var_4], ecx
.text$mn:00001477                 mov     eax, offset ??_C@_06KCFOODCD@EUC?9JP?$AA@ ; "EUC-JP"
.text$mn:0000147C                 mov     esp, ebp
.text$mn:0000147E                 pop     ebp
.text$mn:0000147F                 retn
.text$mn:0000147F ?GetCharSetName@nsEUCJPProber@@UAEPBDXZ endp
.text$mn:0000147F
.text$mn:0000147F _text$mn        ends
.text$mn:0000147F
.text$mn:00001480 ; ===========================================================================
.text$mn:00001480
.text$mn:00001480 ; Segment type: Pure code
.text$mn:00001480 ; Segment permissions: Read/Execute
.text$mn:00001480 _text$mn        segment para public 'CODE' use32
.text$mn:00001480                 assume cs:_text$mn
.text$mn:00001480                 ;org 1480h
.text$mn:00001480 ; COMDAT (pick any)
.text$mn:00001480                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001480
.text$mn:00001480 ; =============== S U B R O U T I N E =======================================
.text$mn:00001480
.text$mn:00001480 ; Attributes: bp-based frame
.text$mn:00001480
.text$mn:00001480 ; const char *__thiscall nsEUCKRProber::GetCharSetName(nsEUCKRProber *__hidden this)
.text$mn:00001480                 public ?GetCharSetName@nsEUCKRProber@@UAEPBDXZ
.text$mn:00001480 ?GetCharSetName@nsEUCKRProber@@UAEPBDXZ proc near
.text$mn:00001480                                         ; DATA XREF: .rdata:00001A80o
.text$mn:00001480
.text$mn:00001480 var_4           = dword ptr -4
.text$mn:00001480
.text$mn:00001480                 push    ebp
.text$mn:00001481                 mov     ebp, esp
.text$mn:00001483                 push    ecx
.text$mn:00001484                 mov     [ebp+var_4], ecx
.text$mn:00001487                 mov     eax, offset ??_C@_06JBKKOLJG@EUC?9KR?$AA@ ; "EUC-KR"
.text$mn:0000148C                 mov     esp, ebp
.text$mn:0000148E                 pop     ebp
.text$mn:0000148F                 retn
.text$mn:0000148F ?GetCharSetName@nsEUCKRProber@@UAEPBDXZ endp
.text$mn:0000148F
.text$mn:0000148F _text$mn        ends
.text$mn:0000148F
.text$mn:00001490 ; ===========================================================================
.text$mn:00001490
.text$mn:00001490 ; Segment type: Pure code
.text$mn:00001490 ; Segment permissions: Read/Execute
.text$mn:00001490 _text$mn        segment para public 'CODE' use32
.text$mn:00001490                 assume cs:_text$mn
.text$mn:00001490                 ;org 1490h
.text$mn:00001490 ; COMDAT (pick any)
.text$mn:00001490                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001490
.text$mn:00001490 ; =============== S U B R O U T I N E =======================================
.text$mn:00001490
.text$mn:00001490 ; Attributes: bp-based frame
.text$mn:00001490
.text$mn:00001490 ; const char *__thiscall nsEUCTWProber::GetCharSetName(nsEUCTWProber *__hidden this)
.text$mn:00001490                 public ?GetCharSetName@nsEUCTWProber@@UAEPBDXZ
.text$mn:00001490 ?GetCharSetName@nsEUCTWProber@@UAEPBDXZ proc near
.text$mn:00001490                                         ; DATA XREF: .rdata:00001AD0o
.text$mn:00001490
.text$mn:00001490 var_4           = dword ptr -4
.text$mn:00001490
.text$mn:00001490                 push    ebp
.text$mn:00001491                 mov     ebp, esp
.text$mn:00001493                 push    ecx
.text$mn:00001494                 mov     [ebp+var_4], ecx
.text$mn:00001497                 mov     eax, offset ??_C@_08NNDFHOI@x?9euc?9tw?$AA@ ; "x-euc-tw"
.text$mn:0000149C                 mov     esp, ebp
.text$mn:0000149E                 pop     ebp
.text$mn:0000149F                 retn
.text$mn:0000149F ?GetCharSetName@nsEUCTWProber@@UAEPBDXZ endp
.text$mn:0000149F
.text$mn:0000149F _text$mn        ends
.text$mn:0000149F
.text$mn:000014A0 ; ===========================================================================
.text$mn:000014A0
.text$mn:000014A0 ; Segment type: Pure code
.text$mn:000014A0 ; Segment permissions: Read/Execute
.text$mn:000014A0 _text$mn        segment para public 'CODE' use32
.text$mn:000014A0                 assume cs:_text$mn
.text$mn:000014A0                 ;org 14A0h
.text$mn:000014A0 ; COMDAT (pick any)
.text$mn:000014A0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000014A0
.text$mn:000014A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000014A0
.text$mn:000014A0 ; Attributes: bp-based frame
.text$mn:000014A0
.text$mn:000014A0 ; const char *__thiscall nsGB18030Prober::GetCharSetName(nsGB18030Prober *__hidden this)
.text$mn:000014A0                 public ?GetCharSetName@nsGB18030Prober@@UAEPBDXZ
.text$mn:000014A0 ?GetCharSetName@nsGB18030Prober@@UAEPBDXZ proc near
.text$mn:000014A0                                         ; DATA XREF: .rdata:00001A58o
.text$mn:000014A0
.text$mn:000014A0 var_4           = dword ptr -4
.text$mn:000014A0
.text$mn:000014A0                 push    ebp
.text$mn:000014A1                 mov     ebp, esp
.text$mn:000014A3                 push    ecx
.text$mn:000014A4                 mov     [ebp+var_4], ecx
.text$mn:000014A7                 mov     eax, offset ??_C@_07LONGGCM@gb18030?$AA@ ; "gb18030"
.text$mn:000014AC                 mov     esp, ebp
.text$mn:000014AE                 pop     ebp
.text$mn:000014AF                 retn
.text$mn:000014AF ?GetCharSetName@nsGB18030Prober@@UAEPBDXZ endp
.text$mn:000014AF
.text$mn:000014AF _text$mn        ends
.text$mn:000014AF
.text$mn:000014B0 ; ===========================================================================
.text$mn:000014B0
.text$mn:000014B0 ; Segment type: Pure code
.text$mn:000014B0 ; Segment permissions: Read/Execute
.text$mn:000014B0 _text$mn        segment para public 'CODE' use32
.text$mn:000014B0                 assume cs:_text$mn
.text$mn:000014B0                 ;org 14B0h
.text$mn:000014B0 ; COMDAT (pick any)
.text$mn:000014B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000014B0
.text$mn:000014B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000014B0
.text$mn:000014B0 ; Attributes: bp-based frame
.text$mn:000014B0
.text$mn:000014B0 ; const char *__thiscall nsSJISProber::GetCharSetName(nsSJISProber *__hidden this)
.text$mn:000014B0                 public ?GetCharSetName@nsSJISProber@@UAEPBDXZ
.text$mn:000014B0 ?GetCharSetName@nsSJISProber@@UAEPBDXZ proc near
.text$mn:000014B0                                         ; DATA XREF: .rdata:000019DCo
.text$mn:000014B0
.text$mn:000014B0 var_4           = dword ptr -4
.text$mn:000014B0
.text$mn:000014B0                 push    ebp
.text$mn:000014B1                 mov     ebp, esp
.text$mn:000014B3                 push    ecx
.text$mn:000014B4                 mov     [ebp+var_4], ecx
.text$mn:000014B7                 mov     eax, offset ??_C@_09LOKLFMHN@Shift_JIS?$AA@ ; "Shift_JIS"
.text$mn:000014BC                 mov     esp, ebp
.text$mn:000014BE                 pop     ebp
.text$mn:000014BF                 retn
.text$mn:000014BF ?GetCharSetName@nsSJISProber@@UAEPBDXZ endp
.text$mn:000014BF
.text$mn:000014BF _text$mn        ends
.text$mn:000014BF
.text$mn:000014C0 ; ===========================================================================
.text$mn:000014C0
.text$mn:000014C0 ; Segment type: Pure code
.text$mn:000014C0 ; Segment permissions: Read/Execute
.text$mn:000014C0 _text$mn        segment para public 'CODE' use32
.text$mn:000014C0                 assume cs:_text$mn
.text$mn:000014C0                 ;org 14C0h
.text$mn:000014C0 ; COMDAT (pick any)
.text$mn:000014C0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000014C0
.text$mn:000014C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000014C0
.text$mn:000014C0 ; Attributes: bp-based frame
.text$mn:000014C0
.text$mn:000014C0 ; const char *__thiscall nsUTF8Prober::GetCharSetName(nsUTF8Prober *__hidden this)
.text$mn:000014C0                 public ?GetCharSetName@nsUTF8Prober@@UAEPBDXZ
.text$mn:000014C0 ?GetCharSetName@nsUTF8Prober@@UAEPBDXZ proc near
.text$mn:000014C0                                         ; DATA XREF: .rdata:00001A08o
.text$mn:000014C0
.text$mn:000014C0 var_4           = dword ptr -4
.text$mn:000014C0
.text$mn:000014C0                 push    ebp
.text$mn:000014C1                 mov     ebp, esp
.text$mn:000014C3                 push    ecx
.text$mn:000014C4                 mov     [ebp+var_4], ecx
.text$mn:000014C7                 mov     eax, offset ??_C@_05EGJIMALK@UTF?98?$AA@ ; "UTF-8"
.text$mn:000014CC                 mov     esp, ebp
.text$mn:000014CE                 pop     ebp
.text$mn:000014CF                 retn
.text$mn:000014CF ?GetCharSetName@nsUTF8Prober@@UAEPBDXZ endp
.text$mn:000014CF
.text$mn:000014CF _text$mn        ends
.text$mn:000014CF
.text$mn:000014D0 ; ===========================================================================
.text$mn:000014D0
.text$mn:000014D0 ; Segment type: Pure code
.text$mn:000014D0 ; Segment permissions: Read/Execute
.text$mn:000014D0 _text$mn        segment para public 'CODE' use32
.text$mn:000014D0                 assume cs:_text$mn
.text$mn:000014D0                 ;org 14D0h
.text$mn:000014D0 ; COMDAT (pick any)
.text$mn:000014D0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000014D0
.text$mn:000014D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000014D0
.text$mn:000014D0 ; Attributes: bp-based frame
.text$mn:000014D0
.text$mn:000014D0 ; int __thiscall EUCJPContextAnalysis::GetOrder(EUCJPContextAnalysis *this, const char *)
.text$mn:000014D0                 public ?GetOrder@EUCJPContextAnalysis@@MAEHPBD@Z
.text$mn:000014D0 ?GetOrder@EUCJPContextAnalysis@@MAEHPBD@Z proc near
.text$mn:000014D0                                         ; DATA XREF: .rdata:const EUCJPContextAnalysis::`vftable'o
.text$mn:000014D0
.text$mn:000014D0 var_4           = dword ptr -4
.text$mn:000014D0 arg_0           = dword ptr  8
.text$mn:000014D0
.text$mn:000014D0                 push    ebp
.text$mn:000014D1                 mov     ebp, esp
.text$mn:000014D3                 push    ecx
.text$mn:000014D4                 mov     [ebp+var_4], ecx
.text$mn:000014D7                 mov     eax, [ebp+arg_0]
.text$mn:000014DA                 movsx   ecx, byte ptr [eax]
.text$mn:000014DD                 cmp     ecx, 0FFFFFFA4h
.text$mn:000014E0                 jnz     short loc_150D
.text$mn:000014E2                 mov     edx, [ebp+arg_0]
.text$mn:000014E5                 movzx   eax, byte ptr [edx+1]
.text$mn:000014E9                 cmp     eax, 0A1h ; 'í'
.text$mn:000014EE                 jl      short loc_150D
.text$mn:000014F0                 mov     ecx, [ebp+arg_0]
.text$mn:000014F3                 movzx   edx, byte ptr [ecx+1]
.text$mn:000014F7                 cmp     edx, 0F3h ; '='
.text$mn:000014FD                 jg      short loc_150D
.text$mn:000014FF                 mov     eax, [ebp+arg_0]
.text$mn:00001502                 movzx   eax, byte ptr [eax+1]
.text$mn:00001506                 sub     eax, 0A1h ; 'í'
.text$mn:0000150B                 jmp     short loc_1510
.text$mn:0000150D ; ---------------------------------------------------------------------------
.text$mn:0000150D
.text$mn:0000150D loc_150D:                               ; CODE XREF: EUCJPContextAnalysis::GetOrder(char const *)+10j
.text$mn:0000150D                                         ; EUCJPContextAnalysis::GetOrder(char const *)+1Ej ...
.text$mn:0000150D                 or      eax, 0FFFFFFFFh
.text$mn:00001510
.text$mn:00001510 loc_1510:                               ; CODE XREF: EUCJPContextAnalysis::GetOrder(char const *)+3Bj
.text$mn:00001510                 mov     esp, ebp
.text$mn:00001512                 pop     ebp
.text$mn:00001513                 retn    4
.text$mn:00001513 ?GetOrder@EUCJPContextAnalysis@@MAEHPBD@Z endp
.text$mn:00001513
.text$mn:00001513 ; ---------------------------------------------------------------------------
.text$mn:00001516                 align 4
.text$mn:00001516 _text$mn        ends
.text$mn:00001516
.text$mn:00001518 ; ===========================================================================
.text$mn:00001518
.text$mn:00001518 ; Segment type: Pure code
.text$mn:00001518 ; Segment permissions: Read/Execute
.text$mn:00001518 _text$mn        segment para public 'CODE' use32
.text$mn:00001518                 assume cs:_text$mn
.text$mn:00001518                 ;org 1518h
.text$mn:00001518 ; COMDAT (pick any)
.text$mn:00001518                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001518
.text$mn:00001518 ; =============== S U B R O U T I N E =======================================
.text$mn:00001518
.text$mn:00001518 ; Attributes: bp-based frame
.text$mn:00001518
.text$mn:00001518 ; int __thiscall SJISContextAnalysis::GetOrder(SJISContextAnalysis *this, const char *)
.text$mn:00001518                 public ?GetOrder@SJISContextAnalysis@@MAEHPBD@Z
.text$mn:00001518 ?GetOrder@SJISContextAnalysis@@MAEHPBD@Z proc near
.text$mn:00001518                                         ; DATA XREF: .rdata:const SJISContextAnalysis::`vftable'o
.text$mn:00001518
.text$mn:00001518 var_4           = dword ptr -4
.text$mn:00001518 arg_0           = dword ptr  8
.text$mn:00001518
.text$mn:00001518                 push    ebp
.text$mn:00001519                 mov     ebp, esp
.text$mn:0000151B                 push    ecx
.text$mn:0000151C                 mov     [ebp+var_4], ecx
.text$mn:0000151F                 mov     eax, [ebp+arg_0]
.text$mn:00001522                 movsx   ecx, byte ptr [eax]
.text$mn:00001525                 cmp     ecx, 0FFFFFF82h
.text$mn:00001528                 jnz     short loc_1555
.text$mn:0000152A                 mov     edx, [ebp+arg_0]
.text$mn:0000152D                 movzx   eax, byte ptr [edx+1]
.text$mn:00001531                 cmp     eax, 9Fh ; 'ƒ'
.text$mn:00001536                 jl      short loc_1555
.text$mn:00001538                 mov     ecx, [ebp+arg_0]
.text$mn:0000153B                 movzx   edx, byte ptr [ecx+1]
.text$mn:0000153F                 cmp     edx, 0F1h ; '±'
.text$mn:00001545                 jg      short loc_1555
.text$mn:00001547                 mov     eax, [ebp+arg_0]
.text$mn:0000154A                 movzx   eax, byte ptr [eax+1]
.text$mn:0000154E                 sub     eax, 9Fh ; 'ƒ'
.text$mn:00001553                 jmp     short loc_1558
.text$mn:00001555 ; ---------------------------------------------------------------------------
.text$mn:00001555
.text$mn:00001555 loc_1555:                               ; CODE XREF: SJISContextAnalysis::GetOrder(char const *)+10j
.text$mn:00001555                                         ; SJISContextAnalysis::GetOrder(char const *)+1Ej ...
.text$mn:00001555                 or      eax, 0FFFFFFFFh
.text$mn:00001558
.text$mn:00001558 loc_1558:                               ; CODE XREF: SJISContextAnalysis::GetOrder(char const *)+3Bj
.text$mn:00001558                 mov     esp, ebp
.text$mn:0000155A                 pop     ebp
.text$mn:0000155B                 retn    4
.text$mn:0000155B ?GetOrder@SJISContextAnalysis@@MAEHPBD@Z endp
.text$mn:0000155B
.text$mn:0000155B ; ---------------------------------------------------------------------------
.text$mn:0000155E                 align 10h
.text$mn:0000155E _text$mn        ends
.text$mn:0000155E
.text$mn:00001560 ; ===========================================================================
.text$mn:00001560
.text$mn:00001560 ; Segment type: Pure code
.text$mn:00001560 ; Segment permissions: Read/Execute
.text$mn:00001560 _text$mn        segment para public 'CODE' use32
.text$mn:00001560                 assume cs:_text$mn
.text$mn:00001560                 ;org 1560h
.text$mn:00001560 ; COMDAT (pick any)
.text$mn:00001560                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001560
.text$mn:00001560 ; =============== S U B R O U T I N E =======================================
.text$mn:00001560
.text$mn:00001560 ; Attributes: bp-based frame
.text$mn:00001560
.text$mn:00001560 ; public: virtual enum  nsProbingState __thiscall nsBig5Prober::GetState(void)
.text$mn:00001560                 public ?GetState@nsBig5Prober@@UAE?AW4nsProbingState@@XZ
.text$mn:00001560 ?GetState@nsBig5Prober@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00001560                                         ; DATA XREF: .rdata:00001AB0o
.text$mn:00001560
.text$mn:00001560 var_4           = dword ptr -4
.text$mn:00001560
.text$mn:00001560                 push    ebp
.text$mn:00001561                 mov     ebp, esp
.text$mn:00001563                 push    ecx
.text$mn:00001564                 mov     [ebp+var_4], ecx
.text$mn:00001567                 mov     eax, [ebp+var_4]
.text$mn:0000156A                 mov     eax, [eax+8]
.text$mn:0000156D                 mov     esp, ebp
.text$mn:0000156F                 pop     ebp
.text$mn:00001570                 retn
.text$mn:00001570 ?GetState@nsBig5Prober@@UAE?AW4nsProbingState@@XZ endp
.text$mn:00001570
.text$mn:00001570 ; ---------------------------------------------------------------------------
.text$mn:00001571                 align 4
.text$mn:00001571 _text$mn        ends
.text$mn:00001571
.text$mn:00001574 ; ===========================================================================
.text$mn:00001574
.text$mn:00001574 ; Segment type: Pure code
.text$mn:00001574 ; Segment permissions: Read/Execute
.text$mn:00001574 _text$mn        segment para public 'CODE' use32
.text$mn:00001574                 assume cs:_text$mn
.text$mn:00001574                 ;org 1574h
.text$mn:00001574 ; COMDAT (pick any)
.text$mn:00001574                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001574
.text$mn:00001574 ; =============== S U B R O U T I N E =======================================
.text$mn:00001574
.text$mn:00001574 ; Attributes: bp-based frame
.text$mn:00001574
.text$mn:00001574 ; public: virtual enum  nsProbingState __thiscall nsEUCJPProber::GetState(void)
.text$mn:00001574                 public ?GetState@nsEUCJPProber@@UAE?AW4nsProbingState@@XZ
.text$mn:00001574 ?GetState@nsEUCJPProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00001574                                         ; DATA XREF: .rdata:00001A38o
.text$mn:00001574
.text$mn:00001574 var_4           = dword ptr -4
.text$mn:00001574
.text$mn:00001574                 push    ebp
.text$mn:00001575                 mov     ebp, esp
.text$mn:00001577                 push    ecx
.text$mn:00001578                 mov     [ebp+var_4], ecx
.text$mn:0000157B                 mov     eax, [ebp+var_4]
.text$mn:0000157E                 mov     eax, [eax+8]
.text$mn:00001581                 mov     esp, ebp
.text$mn:00001583                 pop     ebp
.text$mn:00001584                 retn
.text$mn:00001584 ?GetState@nsEUCJPProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:00001584
.text$mn:00001584 ; ---------------------------------------------------------------------------
.text$mn:00001585                 align 4
.text$mn:00001585 _text$mn        ends
.text$mn:00001585
.text$mn:00001588 ; ===========================================================================
.text$mn:00001588
.text$mn:00001588 ; Segment type: Pure code
.text$mn:00001588 ; Segment permissions: Read/Execute
.text$mn:00001588 _text$mn        segment para public 'CODE' use32
.text$mn:00001588                 assume cs:_text$mn
.text$mn:00001588                 ;org 1588h
.text$mn:00001588 ; COMDAT (pick any)
.text$mn:00001588                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001588
.text$mn:00001588 ; =============== S U B R O U T I N E =======================================
.text$mn:00001588
.text$mn:00001588 ; Attributes: bp-based frame
.text$mn:00001588
.text$mn:00001588 ; public: virtual enum  nsProbingState __thiscall nsEUCKRProber::GetState(void)
.text$mn:00001588                 public ?GetState@nsEUCKRProber@@UAE?AW4nsProbingState@@XZ
.text$mn:00001588 ?GetState@nsEUCKRProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00001588                                         ; DATA XREF: .rdata:00001A88o
.text$mn:00001588
.text$mn:00001588 var_4           = dword ptr -4
.text$mn:00001588
.text$mn:00001588                 push    ebp
.text$mn:00001589                 mov     ebp, esp
.text$mn:0000158B                 push    ecx
.text$mn:0000158C                 mov     [ebp+var_4], ecx
.text$mn:0000158F                 mov     eax, [ebp+var_4]
.text$mn:00001592                 mov     eax, [eax+8]
.text$mn:00001595                 mov     esp, ebp
.text$mn:00001597                 pop     ebp
.text$mn:00001598                 retn
.text$mn:00001598 ?GetState@nsEUCKRProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:00001598
.text$mn:00001598 ; ---------------------------------------------------------------------------
.text$mn:00001599                 align 4
.text$mn:00001599 _text$mn        ends
.text$mn:00001599
.text$mn:0000159C ; ===========================================================================
.text$mn:0000159C
.text$mn:0000159C ; Segment type: Pure code
.text$mn:0000159C ; Segment permissions: Read/Execute
.text$mn:0000159C _text$mn        segment para public 'CODE' use32
.text$mn:0000159C                 assume cs:_text$mn
.text$mn:0000159C                 ;org 159Ch
.text$mn:0000159C ; COMDAT (pick any)
.text$mn:0000159C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:0000159C
.text$mn:0000159C ; =============== S U B R O U T I N E =======================================
.text$mn:0000159C
.text$mn:0000159C ; Attributes: bp-based frame
.text$mn:0000159C
.text$mn:0000159C ; public: virtual enum  nsProbingState __thiscall nsEUCTWProber::GetState(void)
.text$mn:0000159C                 public ?GetState@nsEUCTWProber@@UAE?AW4nsProbingState@@XZ
.text$mn:0000159C ?GetState@nsEUCTWProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:0000159C                                         ; DATA XREF: .rdata:00001AD8o
.text$mn:0000159C
.text$mn:0000159C var_4           = dword ptr -4
.text$mn:0000159C
.text$mn:0000159C                 push    ebp
.text$mn:0000159D                 mov     ebp, esp
.text$mn:0000159F                 push    ecx
.text$mn:000015A0                 mov     [ebp+var_4], ecx
.text$mn:000015A3                 mov     eax, [ebp+var_4]
.text$mn:000015A6                 mov     eax, [eax+8]
.text$mn:000015A9                 mov     esp, ebp
.text$mn:000015AB                 pop     ebp
.text$mn:000015AC                 retn
.text$mn:000015AC ?GetState@nsEUCTWProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000015AC
.text$mn:000015AC ; ---------------------------------------------------------------------------
.text$mn:000015AD                 align 10h
.text$mn:000015AD _text$mn        ends
.text$mn:000015AD
.text$mn:000015B0 ; ===========================================================================
.text$mn:000015B0
.text$mn:000015B0 ; Segment type: Pure code
.text$mn:000015B0 ; Segment permissions: Read/Execute
.text$mn:000015B0 _text$mn        segment para public 'CODE' use32
.text$mn:000015B0                 assume cs:_text$mn
.text$mn:000015B0                 ;org 15B0h
.text$mn:000015B0 ; COMDAT (pick any)
.text$mn:000015B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000015B0
.text$mn:000015B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000015B0
.text$mn:000015B0 ; Attributes: bp-based frame
.text$mn:000015B0
.text$mn:000015B0 ; public: virtual enum  nsProbingState __thiscall nsGB18030Prober::GetState(void)
.text$mn:000015B0                 public ?GetState@nsGB18030Prober@@UAE?AW4nsProbingState@@XZ
.text$mn:000015B0 ?GetState@nsGB18030Prober@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:000015B0                                         ; DATA XREF: .rdata:00001A60o
.text$mn:000015B0
.text$mn:000015B0 var_4           = dword ptr -4
.text$mn:000015B0
.text$mn:000015B0                 push    ebp
.text$mn:000015B1                 mov     ebp, esp
.text$mn:000015B3                 push    ecx
.text$mn:000015B4                 mov     [ebp+var_4], ecx
.text$mn:000015B7                 mov     eax, [ebp+var_4]
.text$mn:000015BA                 mov     eax, [eax+8]
.text$mn:000015BD                 mov     esp, ebp
.text$mn:000015BF                 pop     ebp
.text$mn:000015C0                 retn
.text$mn:000015C0 ?GetState@nsGB18030Prober@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000015C0
.text$mn:000015C0 ; ---------------------------------------------------------------------------
.text$mn:000015C1                 align 4
.text$mn:000015C1 _text$mn        ends
.text$mn:000015C1
.text$mn:000015C4 ; ===========================================================================
.text$mn:000015C4
.text$mn:000015C4 ; Segment type: Pure code
.text$mn:000015C4 ; Segment permissions: Read/Execute
.text$mn:000015C4 _text$mn        segment para public 'CODE' use32
.text$mn:000015C4                 assume cs:_text$mn
.text$mn:000015C4                 ;org 15C4h
.text$mn:000015C4 ; COMDAT (pick any)
.text$mn:000015C4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000015C4
.text$mn:000015C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000015C4
.text$mn:000015C4 ; Attributes: bp-based frame
.text$mn:000015C4
.text$mn:000015C4 ; public: virtual enum  nsProbingState __thiscall nsMBCSGroupProber::GetState(void)
.text$mn:000015C4                 public ?GetState@nsMBCSGroupProber@@UAE?AW4nsProbingState@@XZ
.text$mn:000015C4 ?GetState@nsMBCSGroupProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:000015C4                                         ; DATA XREF: .rdata:00001B04o
.text$mn:000015C4
.text$mn:000015C4 var_4           = dword ptr -4
.text$mn:000015C4
.text$mn:000015C4                 push    ebp
.text$mn:000015C5                 mov     ebp, esp
.text$mn:000015C7                 push    ecx
.text$mn:000015C8                 mov     [ebp+var_4], ecx
.text$mn:000015CB                 mov     eax, [ebp+var_4]
.text$mn:000015CE                 mov     eax, [eax+4]
.text$mn:000015D1                 mov     esp, ebp
.text$mn:000015D3                 pop     ebp
.text$mn:000015D4                 retn
.text$mn:000015D4 ?GetState@nsMBCSGroupProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000015D4
.text$mn:000015D4 ; ---------------------------------------------------------------------------
.text$mn:000015D5                 align 4
.text$mn:000015D5 _text$mn        ends
.text$mn:000015D5
.text$mn:000015D8 ; ===========================================================================
.text$mn:000015D8
.text$mn:000015D8 ; Segment type: Pure code
.text$mn:000015D8 ; Segment permissions: Read/Execute
.text$mn:000015D8 _text$mn        segment para public 'CODE' use32
.text$mn:000015D8                 assume cs:_text$mn
.text$mn:000015D8                 ;org 15D8h
.text$mn:000015D8 ; COMDAT (pick any)
.text$mn:000015D8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000015D8
.text$mn:000015D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015D8
.text$mn:000015D8 ; Attributes: bp-based frame
.text$mn:000015D8
.text$mn:000015D8 ; public: virtual enum  nsProbingState __thiscall nsSJISProber::GetState(void)
.text$mn:000015D8                 public ?GetState@nsSJISProber@@UAE?AW4nsProbingState@@XZ
.text$mn:000015D8 ?GetState@nsSJISProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:000015D8                                         ; DATA XREF: .rdata:000019E4o
.text$mn:000015D8
.text$mn:000015D8 var_4           = dword ptr -4
.text$mn:000015D8
.text$mn:000015D8                 push    ebp
.text$mn:000015D9                 mov     ebp, esp
.text$mn:000015DB                 push    ecx
.text$mn:000015DC                 mov     [ebp+var_4], ecx
.text$mn:000015DF                 mov     eax, [ebp+var_4]
.text$mn:000015E2                 mov     eax, [eax+8]
.text$mn:000015E5                 mov     esp, ebp
.text$mn:000015E7                 pop     ebp
.text$mn:000015E8                 retn
.text$mn:000015E8 ?GetState@nsSJISProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000015E8
.text$mn:000015E8 ; ---------------------------------------------------------------------------
.text$mn:000015E9                 align 4
.text$mn:000015E9 _text$mn        ends
.text$mn:000015E9
.text$mn:000015EC ; ===========================================================================
.text$mn:000015EC
.text$mn:000015EC ; Segment type: Pure code
.text$mn:000015EC ; Segment permissions: Read/Execute
.text$mn:000015EC _text$mn        segment para public 'CODE' use32
.text$mn:000015EC                 assume cs:_text$mn
.text$mn:000015EC                 ;org 15ECh
.text$mn:000015EC ; COMDAT (pick any)
.text$mn:000015EC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:000015EC
.text$mn:000015EC ; =============== S U B R O U T I N E =======================================
.text$mn:000015EC
.text$mn:000015EC ; Attributes: bp-based frame
.text$mn:000015EC
.text$mn:000015EC ; public: virtual enum  nsProbingState __thiscall nsUTF8Prober::GetState(void)
.text$mn:000015EC                 public ?GetState@nsUTF8Prober@@UAE?AW4nsProbingState@@XZ
.text$mn:000015EC ?GetState@nsUTF8Prober@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:000015EC                                         ; DATA XREF: .rdata:00001A10o
.text$mn:000015EC
.text$mn:000015EC var_4           = dword ptr -4
.text$mn:000015EC
.text$mn:000015EC                 push    ebp
.text$mn:000015ED                 mov     ebp, esp
.text$mn:000015EF                 push    ecx
.text$mn:000015F0                 mov     [ebp+var_4], ecx
.text$mn:000015F3                 mov     eax, [ebp+var_4]
.text$mn:000015F6                 mov     eax, [eax+8]
.text$mn:000015F9                 mov     esp, ebp
.text$mn:000015FB                 pop     ebp
.text$mn:000015FC                 retn
.text$mn:000015FC ?GetState@nsUTF8Prober@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000015FC
.text$mn:000015FC ; ---------------------------------------------------------------------------
.text$mn:000015FD                 align 10h
.text$mn:000015FD _text$mn        ends
.text$mn:000015FD
.text$mn:00001600 ; ===========================================================================
.text$mn:00001600
.text$mn:00001600 ; Segment type: Pure code
.text$mn:00001600 ; Segment permissions: Read/Execute
.text$mn:00001600 _text$mn        segment para public 'CODE' use32
.text$mn:00001600                 assume cs:_text$mn
.text$mn:00001600                 ;org 1600h
.text$mn:00001600 ; COMDAT (pick any)
.text$mn:00001600                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001600
.text$mn:00001600 ; =============== S U B R O U T I N E =======================================
.text$mn:00001600
.text$mn:00001600 ; Attributes: bp-based frame
.text$mn:00001600
.text$mn:00001600 ; void __thiscall nsBig5Prober::SetOpion(nsBig5Prober *__hidden this)
.text$mn:00001600                 public ?SetOpion@nsBig5Prober@@UAEXXZ
.text$mn:00001600 ?SetOpion@nsBig5Prober@@UAEXXZ proc near ; DATA XREF: .rdata:00001ABCo
.text$mn:00001600
.text$mn:00001600 var_4           = dword ptr -4
.text$mn:00001600
.text$mn:00001600                 push    ebp
.text$mn:00001601                 mov     ebp, esp
.text$mn:00001603                 push    ecx
.text$mn:00001604                 mov     [ebp+var_4], ecx
.text$mn:00001607                 mov     esp, ebp
.text$mn:00001609                 pop     ebp
.text$mn:0000160A                 retn
.text$mn:0000160A ?SetOpion@nsBig5Prober@@UAEXXZ endp
.text$mn:0000160A
.text$mn:0000160A ; ---------------------------------------------------------------------------
.text$mn:0000160B                 align 4
.text$mn:0000160B _text$mn        ends
.text$mn:0000160B
.text$mn:0000160C ; ===========================================================================
.text$mn:0000160C
.text$mn:0000160C ; Segment type: Pure code
.text$mn:0000160C ; Segment permissions: Read/Execute
.text$mn:0000160C _text$mn        segment para public 'CODE' use32
.text$mn:0000160C                 assume cs:_text$mn
.text$mn:0000160C                 ;org 160Ch
.text$mn:0000160C ; COMDAT (pick any)
.text$mn:0000160C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:0000160C
.text$mn:0000160C ; =============== S U B R O U T I N E =======================================
.text$mn:0000160C
.text$mn:0000160C ; Attributes: bp-based frame
.text$mn:0000160C
.text$mn:0000160C ; void __thiscall nsEUCJPProber::SetOpion(nsEUCJPProber *__hidden this)
.text$mn:0000160C                 public ?SetOpion@nsEUCJPProber@@UAEXXZ
.text$mn:0000160C ?SetOpion@nsEUCJPProber@@UAEXXZ proc near ; DATA XREF: .rdata:00001A44o
.text$mn:0000160C
.text$mn:0000160C var_4           = dword ptr -4
.text$mn:0000160C
.text$mn:0000160C                 push    ebp
.text$mn:0000160D                 mov     ebp, esp
.text$mn:0000160F                 push    ecx
.text$mn:00001610                 mov     [ebp+var_4], ecx
.text$mn:00001613                 mov     esp, ebp
.text$mn:00001615                 pop     ebp
.text$mn:00001616                 retn
.text$mn:00001616 ?SetOpion@nsEUCJPProber@@UAEXXZ endp
.text$mn:00001616
.text$mn:00001616 ; ---------------------------------------------------------------------------
.text$mn:00001617                 align 4
.text$mn:00001617 _text$mn        ends
.text$mn:00001617
.text$mn:00001618 ; ===========================================================================
.text$mn:00001618
.text$mn:00001618 ; Segment type: Pure code
.text$mn:00001618 ; Segment permissions: Read/Execute
.text$mn:00001618 _text$mn        segment para public 'CODE' use32
.text$mn:00001618                 assume cs:_text$mn
.text$mn:00001618                 ;org 1618h
.text$mn:00001618 ; COMDAT (pick any)
.text$mn:00001618                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001618
.text$mn:00001618 ; =============== S U B R O U T I N E =======================================
.text$mn:00001618
.text$mn:00001618 ; Attributes: bp-based frame
.text$mn:00001618
.text$mn:00001618 ; void __thiscall nsEUCKRProber::SetOpion(nsEUCKRProber *__hidden this)
.text$mn:00001618                 public ?SetOpion@nsEUCKRProber@@UAEXXZ
.text$mn:00001618 ?SetOpion@nsEUCKRProber@@UAEXXZ proc near ; DATA XREF: .rdata:00001A94o
.text$mn:00001618
.text$mn:00001618 var_4           = dword ptr -4
.text$mn:00001618
.text$mn:00001618                 push    ebp
.text$mn:00001619                 mov     ebp, esp
.text$mn:0000161B                 push    ecx
.text$mn:0000161C                 mov     [ebp+var_4], ecx
.text$mn:0000161F                 mov     esp, ebp
.text$mn:00001621                 pop     ebp
.text$mn:00001622                 retn
.text$mn:00001622 ?SetOpion@nsEUCKRProber@@UAEXXZ endp
.text$mn:00001622
.text$mn:00001622 ; ---------------------------------------------------------------------------
.text$mn:00001623                 align 4
.text$mn:00001623 _text$mn        ends
.text$mn:00001623
.text$mn:00001624 ; ===========================================================================
.text$mn:00001624
.text$mn:00001624 ; Segment type: Pure code
.text$mn:00001624 ; Segment permissions: Read/Execute
.text$mn:00001624 _text$mn        segment para public 'CODE' use32
.text$mn:00001624                 assume cs:_text$mn
.text$mn:00001624                 ;org 1624h
.text$mn:00001624 ; COMDAT (pick any)
.text$mn:00001624                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001624
.text$mn:00001624 ; =============== S U B R O U T I N E =======================================
.text$mn:00001624
.text$mn:00001624 ; Attributes: bp-based frame
.text$mn:00001624
.text$mn:00001624 ; void __thiscall nsEUCTWProber::SetOpion(nsEUCTWProber *__hidden this)
.text$mn:00001624                 public ?SetOpion@nsEUCTWProber@@UAEXXZ
.text$mn:00001624 ?SetOpion@nsEUCTWProber@@UAEXXZ proc near ; DATA XREF: .rdata:00001AE4o
.text$mn:00001624
.text$mn:00001624 var_4           = dword ptr -4
.text$mn:00001624
.text$mn:00001624                 push    ebp
.text$mn:00001625                 mov     ebp, esp
.text$mn:00001627                 push    ecx
.text$mn:00001628                 mov     [ebp+var_4], ecx
.text$mn:0000162B                 mov     esp, ebp
.text$mn:0000162D                 pop     ebp
.text$mn:0000162E                 retn
.text$mn:0000162E ?SetOpion@nsEUCTWProber@@UAEXXZ endp
.text$mn:0000162E
.text$mn:0000162E ; ---------------------------------------------------------------------------
.text$mn:0000162F                 align 10h
.text$mn:0000162F _text$mn        ends
.text$mn:0000162F
.text$mn:00001630 ; ===========================================================================
.text$mn:00001630
.text$mn:00001630 ; Segment type: Pure code
.text$mn:00001630 ; Segment permissions: Read/Execute
.text$mn:00001630 _text$mn        segment para public 'CODE' use32
.text$mn:00001630                 assume cs:_text$mn
.text$mn:00001630                 ;org 1630h
.text$mn:00001630 ; COMDAT (pick any)
.text$mn:00001630                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001630
.text$mn:00001630 ; =============== S U B R O U T I N E =======================================
.text$mn:00001630
.text$mn:00001630 ; Attributes: bp-based frame
.text$mn:00001630
.text$mn:00001630 ; void __thiscall nsGB18030Prober::SetOpion(nsGB18030Prober *__hidden this)
.text$mn:00001630                 public ?SetOpion@nsGB18030Prober@@UAEXXZ
.text$mn:00001630 ?SetOpion@nsGB18030Prober@@UAEXXZ proc near ; DATA XREF: .rdata:00001A6Co
.text$mn:00001630
.text$mn:00001630 var_4           = dword ptr -4
.text$mn:00001630
.text$mn:00001630                 push    ebp
.text$mn:00001631                 mov     ebp, esp
.text$mn:00001633                 push    ecx
.text$mn:00001634                 mov     [ebp+var_4], ecx
.text$mn:00001637                 mov     esp, ebp
.text$mn:00001639                 pop     ebp
.text$mn:0000163A                 retn
.text$mn:0000163A ?SetOpion@nsGB18030Prober@@UAEXXZ endp
.text$mn:0000163A
.text$mn:0000163A ; ---------------------------------------------------------------------------
.text$mn:0000163B                 align 4
.text$mn:0000163B _text$mn        ends
.text$mn:0000163B
.text$mn:0000163C ; ===========================================================================
.text$mn:0000163C
.text$mn:0000163C ; Segment type: Pure code
.text$mn:0000163C ; Segment permissions: Read/Execute
.text$mn:0000163C _text$mn        segment para public 'CODE' use32
.text$mn:0000163C                 assume cs:_text$mn
.text$mn:0000163C                 ;org 163Ch
.text$mn:0000163C ; COMDAT (pick any)
.text$mn:0000163C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:0000163C
.text$mn:0000163C ; =============== S U B R O U T I N E =======================================
.text$mn:0000163C
.text$mn:0000163C ; Attributes: bp-based frame
.text$mn:0000163C
.text$mn:0000163C ; void __thiscall nsMBCSGroupProber::SetOpion(nsMBCSGroupProber *__hidden this)
.text$mn:0000163C                 public ?SetOpion@nsMBCSGroupProber@@UAEXXZ
.text$mn:0000163C ?SetOpion@nsMBCSGroupProber@@UAEXXZ proc near
.text$mn:0000163C                                         ; DATA XREF: .rdata:00001B10o
.text$mn:0000163C
.text$mn:0000163C var_4           = dword ptr -4
.text$mn:0000163C
.text$mn:0000163C                 push    ebp
.text$mn:0000163D                 mov     ebp, esp
.text$mn:0000163F                 push    ecx
.text$mn:00001640                 mov     [ebp+var_4], ecx
.text$mn:00001643                 mov     esp, ebp
.text$mn:00001645                 pop     ebp
.text$mn:00001646                 retn
.text$mn:00001646 ?SetOpion@nsMBCSGroupProber@@UAEXXZ endp
.text$mn:00001646
.text$mn:00001646 ; ---------------------------------------------------------------------------
.text$mn:00001647                 align 4
.text$mn:00001647 _text$mn        ends
.text$mn:00001647
.text$mn:00001648 ; ===========================================================================
.text$mn:00001648
.text$mn:00001648 ; Segment type: Pure code
.text$mn:00001648 ; Segment permissions: Read/Execute
.text$mn:00001648 _text$mn        segment para public 'CODE' use32
.text$mn:00001648                 assume cs:_text$mn
.text$mn:00001648                 ;org 1648h
.text$mn:00001648 ; COMDAT (pick any)
.text$mn:00001648                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001648
.text$mn:00001648 ; =============== S U B R O U T I N E =======================================
.text$mn:00001648
.text$mn:00001648 ; Attributes: bp-based frame
.text$mn:00001648
.text$mn:00001648 ; void __thiscall nsSJISProber::SetOpion(nsSJISProber *__hidden this)
.text$mn:00001648                 public ?SetOpion@nsSJISProber@@UAEXXZ
.text$mn:00001648 ?SetOpion@nsSJISProber@@UAEXXZ proc near ; DATA XREF: .rdata:000019F0o
.text$mn:00001648
.text$mn:00001648 var_4           = dword ptr -4
.text$mn:00001648
.text$mn:00001648                 push    ebp
.text$mn:00001649                 mov     ebp, esp
.text$mn:0000164B                 push    ecx
.text$mn:0000164C                 mov     [ebp+var_4], ecx
.text$mn:0000164F                 mov     esp, ebp
.text$mn:00001651                 pop     ebp
.text$mn:00001652                 retn
.text$mn:00001652 ?SetOpion@nsSJISProber@@UAEXXZ endp
.text$mn:00001652
.text$mn:00001652 ; ---------------------------------------------------------------------------
.text$mn:00001653                 align 4
.text$mn:00001653 _text$mn        ends
.text$mn:00001653
.text$mn:00001654 ; ===========================================================================
.text$mn:00001654
.text$mn:00001654 ; Segment type: Pure code
.text$mn:00001654 ; Segment permissions: Read/Execute
.text$mn:00001654 _text$mn        segment para public 'CODE' use32
.text$mn:00001654                 assume cs:_text$mn
.text$mn:00001654                 ;org 1654h
.text$mn:00001654 ; COMDAT (pick any)
.text$mn:00001654                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00001654
.text$mn:00001654 ; =============== S U B R O U T I N E =======================================
.text$mn:00001654
.text$mn:00001654 ; Attributes: bp-based frame
.text$mn:00001654
.text$mn:00001654 ; void __thiscall nsUTF8Prober::SetOpion(nsUTF8Prober *__hidden this)
.text$mn:00001654                 public ?SetOpion@nsUTF8Prober@@UAEXXZ
.text$mn:00001654 ?SetOpion@nsUTF8Prober@@UAEXXZ proc near ; DATA XREF: .rdata:00001A1Co
.text$mn:00001654
.text$mn:00001654 var_4           = dword ptr -4
.text$mn:00001654
.text$mn:00001654                 push    ebp
.text$mn:00001655                 mov     ebp, esp
.text$mn:00001657                 push    ecx
.text$mn:00001658                 mov     [ebp+var_4], ecx
.text$mn:0000165B                 mov     esp, ebp
.text$mn:0000165D                 pop     ebp
.text$mn:0000165E                 retn
.text$mn:0000165E ?SetOpion@nsUTF8Prober@@UAEXXZ endp
.text$mn:0000165E
.text$mn:0000165E ; ---------------------------------------------------------------------------
.text$mn:0000165F                 align 10h
.text$mn:0000165F _text$mn        ends
.text$mn:0000165F
.xdata$x:00001660 ; ===========================================================================
.xdata$x:00001660
.xdata$x:00001660 ; Segment type: Pure data
.xdata$x:00001660 ; Segment permissions: Read
.xdata$x:00001660 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001660                 assume cs:_xdata$x
.xdata$x:00001660                 ;org 1660h
.xdata$x:00001660 ; COMDAT (pick associative to section at CF8)
.xdata$x:00001660 __unwindtable$??0nsSJISProber@@QAE@_N@Z db 0FFh
.xdata$x:00001660                                         ; DATA XREF: .xdata$x:00001678o
.xdata$x:00001661                 db 0FFh
.xdata$x:00001662                 db 0FFh
.xdata$x:00001663                 db 0FFh
.xdata$x:00001664                 dd offset __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$0
.xdata$x:00001668                 db    0
.xdata$x:00001669                 db    0
.xdata$x:0000166A                 db    0
.xdata$x:0000166B                 db    0
.xdata$x:0000166C                 dd offset __unwindfunclet$??0nsSJISProber@@QAE@_N@Z$1
.xdata$x:00001670 __ehfuncinfo$??0nsSJISProber@@QAE@_N@Z db  22h ; "
.xdata$x:00001670                                         ; DATA XREF: __ehhandler$??0nsSJISProber@@QAE@_N@Z+11o
.xdata$x:00001671                 db    5
.xdata$x:00001672                 db  93h ; ô
.xdata$x:00001673                 db  19h
.xdata$x:00001674                 db    2
.xdata$x:00001675                 db    0
.xdata$x:00001676                 db    0
.xdata$x:00001677                 db    0
.xdata$x:00001678                 dd offset __unwindtable$??0nsSJISProber@@QAE@_N@Z
.xdata$x:0000167C                 db    0
.xdata$x:0000167D                 db    0
.xdata$x:0000167E                 db    0
.xdata$x:0000167F                 db    0
.xdata$x:00001680                 db    0
.xdata$x:00001681                 db    0
.xdata$x:00001682                 db    0
.xdata$x:00001683                 db    0
.xdata$x:00001684                 db    0
.xdata$x:00001685                 db    0
.xdata$x:00001686                 db    0
.xdata$x:00001687                 db    0
.xdata$x:00001688                 db    0
.xdata$x:00001689                 db    0
.xdata$x:0000168A                 db    0
.xdata$x:0000168B                 db    0
.xdata$x:0000168C                 db    0
.xdata$x:0000168D                 db    0
.xdata$x:0000168E                 db    0
.xdata$x:0000168F                 db    0
.xdata$x:00001690                 db    0
.xdata$x:00001691                 db    0
.xdata$x:00001692                 db    0
.xdata$x:00001693                 db    0
.xdata$x:00001693 _xdata$x        ends
.xdata$x:00001693
.xdata$x:00001694 ; ===========================================================================
.xdata$x:00001694
.xdata$x:00001694 ; Segment type: Pure data
.xdata$x:00001694 ; Segment permissions: Read
.xdata$x:00001694 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001694                 assume cs:_xdata$x
.xdata$x:00001694                 ;org 1694h
.xdata$x:00001694 ; COMDAT (pick associative to section at 11B4)
.xdata$x:00001694 __unwindtable$??1nsSJISProber@@UAE@XZ db 0FFh
.xdata$x:00001694                                         ; DATA XREF: .xdata$x:000016A4o
.xdata$x:00001695                 db 0FFh
.xdata$x:00001696                 db 0FFh
.xdata$x:00001697                 db 0FFh
.xdata$x:00001698                 dd offset __unwindfunclet$??1nsSJISProber@@UAE@XZ$0
.xdata$x:0000169C __ehfuncinfo$??1nsSJISProber@@UAE@XZ db  22h ; "
.xdata$x:0000169C                                         ; DATA XREF: __ehhandler$??1nsSJISProber@@UAE@XZ+11o
.xdata$x:0000169D                 db    5
.xdata$x:0000169E                 db  93h ; ô
.xdata$x:0000169F                 db  19h
.xdata$x:000016A0                 db    1
.xdata$x:000016A1                 db    0
.xdata$x:000016A2                 db    0
.xdata$x:000016A3                 db    0
.xdata$x:000016A4                 dd offset __unwindtable$??1nsSJISProber@@UAE@XZ
.xdata$x:000016A8                 align 20h
.xdata$x:000016A8 _xdata$x        ends
.xdata$x:000016A8
.xdata$x:000016C0 ; ===========================================================================
.xdata$x:000016C0
.xdata$x:000016C0 ; Segment type: Pure data
.xdata$x:000016C0 ; Segment permissions: Read
.xdata$x:000016C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016C0                 assume cs:_xdata$x
.xdata$x:000016C0                 ;org 16C0h
.xdata$x:000016C0 ; COMDAT (pick associative to section at DF0)
.xdata$x:000016C0 __unwindtable$??0nsUTF8Prober@@QAE@XZ db 0FFh
.xdata$x:000016C0                                         ; DATA XREF: .xdata$x:000016D8o
.xdata$x:000016C1                 db 0FFh
.xdata$x:000016C2                 db 0FFh
.xdata$x:000016C3                 db 0FFh
.xdata$x:000016C4                 dd offset __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$0
.xdata$x:000016C8                 db    0
.xdata$x:000016C9                 db    0
.xdata$x:000016CA                 db    0
.xdata$x:000016CB                 db    0
.xdata$x:000016CC                 dd offset __unwindfunclet$??0nsUTF8Prober@@QAE@XZ$1
.xdata$x:000016D0 __ehfuncinfo$??0nsUTF8Prober@@QAE@XZ db  22h ; "
.xdata$x:000016D0                                         ; DATA XREF: __ehhandler$??0nsUTF8Prober@@QAE@XZ+11o
.xdata$x:000016D1                 db    5
.xdata$x:000016D2                 db  93h ; ô
.xdata$x:000016D3                 db  19h
.xdata$x:000016D4                 db    2
.xdata$x:000016D5                 db    0
.xdata$x:000016D6                 db    0
.xdata$x:000016D7                 db    0
.xdata$x:000016D8                 dd offset __unwindtable$??0nsUTF8Prober@@QAE@XZ
.xdata$x:000016DC                 db    0
.xdata$x:000016DD                 db    0
.xdata$x:000016DE                 db    0
.xdata$x:000016DF                 db    0
.xdata$x:000016E0                 db    0
.xdata$x:000016E1                 db    0
.xdata$x:000016E2                 db    0
.xdata$x:000016E3                 db    0
.xdata$x:000016E4                 db    0
.xdata$x:000016E5                 db    0
.xdata$x:000016E6                 db    0
.xdata$x:000016E7                 db    0
.xdata$x:000016E8                 db    0
.xdata$x:000016E9                 db    0
.xdata$x:000016EA                 db    0
.xdata$x:000016EB                 db    0
.xdata$x:000016EC                 db    0
.xdata$x:000016ED                 db    0
.xdata$x:000016EE                 db    0
.xdata$x:000016EF                 db    0
.xdata$x:000016F0                 db    0
.xdata$x:000016F1                 db    0
.xdata$x:000016F2                 db    0
.xdata$x:000016F3                 db    0
.xdata$x:000016F3 _xdata$x        ends
.xdata$x:000016F3
.xdata$x:000016F4 ; ===========================================================================
.xdata$x:000016F4
.xdata$x:000016F4 ; Segment type: Pure data
.xdata$x:000016F4 ; Segment permissions: Read
.xdata$x:000016F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016F4                 assume cs:_xdata$x
.xdata$x:000016F4                 ;org 16F4h
.xdata$x:000016F4 ; COMDAT (pick associative to section at 1244)
.xdata$x:000016F4 __unwindtable$??1nsUTF8Prober@@UAE@XZ db 0FFh
.xdata$x:000016F4                                         ; DATA XREF: .xdata$x:00001704o
.xdata$x:000016F5                 db 0FFh
.xdata$x:000016F6                 db 0FFh
.xdata$x:000016F7                 db 0FFh
.xdata$x:000016F8                 dd offset __unwindfunclet$??1nsUTF8Prober@@UAE@XZ$0
.xdata$x:000016FC __ehfuncinfo$??1nsUTF8Prober@@UAE@XZ db  22h ; "
.xdata$x:000016FC                                         ; DATA XREF: __ehhandler$??1nsUTF8Prober@@UAE@XZ+11o
.xdata$x:000016FD                 db    5
.xdata$x:000016FE                 db  93h ; ô
.xdata$x:000016FF                 db  19h
.xdata$x:00001700                 db    1
.xdata$x:00001701                 db    0
.xdata$x:00001702                 db    0
.xdata$x:00001703                 db    0
.xdata$x:00001704                 dd offset __unwindtable$??1nsUTF8Prober@@UAE@XZ
.xdata$x:00001708                 align 20h
.xdata$x:00001708 _xdata$x        ends
.xdata$x:00001708
.xdata$x:00001720 ; ===========================================================================
.xdata$x:00001720
.xdata$x:00001720 ; Segment type: Pure data
.xdata$x:00001720 ; Segment permissions: Read
.xdata$x:00001720 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001720                 assume cs:_xdata$x
.xdata$x:00001720                 ;org 1720h
.xdata$x:00001720 ; COMDAT (pick associative to section at 93C)
.xdata$x:00001720 __unwindtable$??0nsEUCJPProber@@QAE@_N@Z db 0FFh
.xdata$x:00001720                                         ; DATA XREF: .xdata$x:00001738o
.xdata$x:00001721                 db 0FFh
.xdata$x:00001722                 db 0FFh
.xdata$x:00001723                 db 0FFh
.xdata$x:00001724                 dd offset __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$0
.xdata$x:00001728                 db    0
.xdata$x:00001729                 db    0
.xdata$x:0000172A                 db    0
.xdata$x:0000172B                 db    0
.xdata$x:0000172C                 dd offset __unwindfunclet$??0nsEUCJPProber@@QAE@_N@Z$1
.xdata$x:00001730 __ehfuncinfo$??0nsEUCJPProber@@QAE@_N@Z db  22h ; "
.xdata$x:00001730                                         ; DATA XREF: __ehhandler$??0nsEUCJPProber@@QAE@_N@Z+11o
.xdata$x:00001731                 db    5
.xdata$x:00001732                 db  93h ; ô
.xdata$x:00001733                 db  19h
.xdata$x:00001734                 db    2
.xdata$x:00001735                 db    0
.xdata$x:00001736                 db    0
.xdata$x:00001737                 db    0
.xdata$x:00001738                 dd offset __unwindtable$??0nsEUCJPProber@@QAE@_N@Z
.xdata$x:0000173C                 db    0
.xdata$x:0000173D                 db    0
.xdata$x:0000173E                 db    0
.xdata$x:0000173F                 db    0
.xdata$x:00001740                 db    0
.xdata$x:00001741                 db    0
.xdata$x:00001742                 db    0
.xdata$x:00001743                 db    0
.xdata$x:00001744                 db    0
.xdata$x:00001745                 db    0
.xdata$x:00001746                 db    0
.xdata$x:00001747                 db    0
.xdata$x:00001748                 db    0
.xdata$x:00001749                 db    0
.xdata$x:0000174A                 db    0
.xdata$x:0000174B                 db    0
.xdata$x:0000174C                 db    0
.xdata$x:0000174D                 db    0
.xdata$x:0000174E                 db    0
.xdata$x:0000174F                 db    0
.xdata$x:00001750                 db    0
.xdata$x:00001751                 db    0
.xdata$x:00001752                 db    0
.xdata$x:00001753                 db    0
.xdata$x:00001753 _xdata$x        ends
.xdata$x:00001753
.xdata$x:00001754 ; ===========================================================================
.xdata$x:00001754
.xdata$x:00001754 ; Segment type: Pure data
.xdata$x:00001754 ; Segment permissions: Read
.xdata$x:00001754 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001754                 assume cs:_xdata$x
.xdata$x:00001754                 ;org 1754h
.xdata$x:00001754 ; COMDAT (pick associative to section at F74)
.xdata$x:00001754 __unwindtable$??1nsEUCJPProber@@UAE@XZ db 0FFh
.xdata$x:00001754                                         ; DATA XREF: .xdata$x:00001764o
.xdata$x:00001755                 db 0FFh
.xdata$x:00001756                 db 0FFh
.xdata$x:00001757                 db 0FFh
.xdata$x:00001758                 dd offset __unwindfunclet$??1nsEUCJPProber@@UAE@XZ$0
.xdata$x:0000175C __ehfuncinfo$??1nsEUCJPProber@@UAE@XZ db  22h ; "
.xdata$x:0000175C                                         ; DATA XREF: __ehhandler$??1nsEUCJPProber@@UAE@XZ+11o
.xdata$x:0000175D                 db    5
.xdata$x:0000175E                 db  93h ; ô
.xdata$x:0000175F                 db  19h
.xdata$x:00001760                 db    1
.xdata$x:00001761                 db    0
.xdata$x:00001762                 db    0
.xdata$x:00001763                 db    0
.xdata$x:00001764                 dd offset __unwindtable$??1nsEUCJPProber@@UAE@XZ
.xdata$x:00001768                 align 20h
.xdata$x:00001768 _xdata$x        ends
.xdata$x:00001768
.xdata$x:00001780 ; ===========================================================================
.xdata$x:00001780
.xdata$x:00001780 ; Segment type: Pure data
.xdata$x:00001780 ; Segment permissions: Read
.xdata$x:00001780 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001780                 assume cs:_xdata$x
.xdata$x:00001780                 ;org 1780h
.xdata$x:00001780 ; COMDAT (pick associative to section at C0C)
.xdata$x:00001780 __unwindtable$??0nsGB18030Prober@@QAE@_N@Z db 0FFh
.xdata$x:00001780                                         ; DATA XREF: .xdata$x:00001798o
.xdata$x:00001781                 db 0FFh
.xdata$x:00001782                 db 0FFh
.xdata$x:00001783                 db 0FFh
.xdata$x:00001784                 dd offset __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$0
.xdata$x:00001788                 db    0
.xdata$x:00001789                 db    0
.xdata$x:0000178A                 db    0
.xdata$x:0000178B                 db    0
.xdata$x:0000178C                 dd offset __unwindfunclet$??0nsGB18030Prober@@QAE@_N@Z$1
.xdata$x:00001790 __ehfuncinfo$??0nsGB18030Prober@@QAE@_N@Z db  22h ; "
.xdata$x:00001790                                         ; DATA XREF: __ehhandler$??0nsGB18030Prober@@QAE@_N@Z+11o
.xdata$x:00001791                 db    5
.xdata$x:00001792                 db  93h ; ô
.xdata$x:00001793                 db  19h
.xdata$x:00001794                 db    2
.xdata$x:00001795                 db    0
.xdata$x:00001796                 db    0
.xdata$x:00001797                 db    0
.xdata$x:00001798                 dd offset __unwindtable$??0nsGB18030Prober@@QAE@_N@Z
.xdata$x:0000179C                 db    0
.xdata$x:0000179D                 db    0
.xdata$x:0000179E                 db    0
.xdata$x:0000179F                 db    0
.xdata$x:000017A0                 db    0
.xdata$x:000017A1                 db    0
.xdata$x:000017A2                 db    0
.xdata$x:000017A3                 db    0
.xdata$x:000017A4                 db    0
.xdata$x:000017A5                 db    0
.xdata$x:000017A6                 db    0
.xdata$x:000017A7                 db    0
.xdata$x:000017A8                 db    0
.xdata$x:000017A9                 db    0
.xdata$x:000017AA                 db    0
.xdata$x:000017AB                 db    0
.xdata$x:000017AC                 db    0
.xdata$x:000017AD                 db    0
.xdata$x:000017AE                 db    0
.xdata$x:000017AF                 db    0
.xdata$x:000017B0                 db    0
.xdata$x:000017B1                 db    0
.xdata$x:000017B2                 db    0
.xdata$x:000017B3                 db    0
.xdata$x:000017B3 _xdata$x        ends
.xdata$x:000017B3
.xdata$x:000017B4 ; ===========================================================================
.xdata$x:000017B4
.xdata$x:000017B4 ; Segment type: Pure data
.xdata$x:000017B4 ; Segment permissions: Read
.xdata$x:000017B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000017B4                 assume cs:_xdata$x
.xdata$x:000017B4                 ;org 17B4h
.xdata$x:000017B4 ; COMDAT (pick associative to section at 1124)
.xdata$x:000017B4 __unwindtable$??1nsGB18030Prober@@UAE@XZ db 0FFh
.xdata$x:000017B4                                         ; DATA XREF: .xdata$x:000017C4o
.xdata$x:000017B5                 db 0FFh
.xdata$x:000017B6                 db 0FFh
.xdata$x:000017B7                 db 0FFh
.xdata$x:000017B8                 dd offset __unwindfunclet$??1nsGB18030Prober@@UAE@XZ$0
.xdata$x:000017BC __ehfuncinfo$??1nsGB18030Prober@@UAE@XZ db  22h ; "
.xdata$x:000017BC                                         ; DATA XREF: __ehhandler$??1nsGB18030Prober@@UAE@XZ+11o
.xdata$x:000017BD                 db    5
.xdata$x:000017BE                 db  93h ; ô
.xdata$x:000017BF                 db  19h
.xdata$x:000017C0                 db    1
.xdata$x:000017C1                 db    0
.xdata$x:000017C2                 db    0
.xdata$x:000017C3                 db    0
.xdata$x:000017C4                 dd offset __unwindtable$??1nsGB18030Prober@@UAE@XZ
.xdata$x:000017C8                 align 20h
.xdata$x:000017C8 _xdata$x        ends
.xdata$x:000017C8
.xdata$x:000017E0 ; ===========================================================================
.xdata$x:000017E0
.xdata$x:000017E0 ; Segment type: Pure data
.xdata$x:000017E0 ; Segment permissions: Read
.xdata$x:000017E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000017E0                 assume cs:_xdata$x
.xdata$x:000017E0                 ;org 17E0h
.xdata$x:000017E0 ; COMDAT (pick associative to section at A34)
.xdata$x:000017E0 __unwindtable$??0nsEUCKRProber@@QAE@_N@Z db 0FFh
.xdata$x:000017E0                                         ; DATA XREF: .xdata$x:000017F8o
.xdata$x:000017E1                 db 0FFh
.xdata$x:000017E2                 db 0FFh
.xdata$x:000017E3                 db 0FFh
.xdata$x:000017E4                 dd offset __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$0
.xdata$x:000017E8                 db    0
.xdata$x:000017E9                 db    0
.xdata$x:000017EA                 db    0
.xdata$x:000017EB                 db    0
.xdata$x:000017EC                 dd offset __unwindfunclet$??0nsEUCKRProber@@QAE@_N@Z$1
.xdata$x:000017F0 __ehfuncinfo$??0nsEUCKRProber@@QAE@_N@Z db  22h ; "
.xdata$x:000017F0                                         ; DATA XREF: __ehhandler$??0nsEUCKRProber@@QAE@_N@Z+11o
.xdata$x:000017F1                 db    5
.xdata$x:000017F2                 db  93h ; ô
.xdata$x:000017F3                 db  19h
.xdata$x:000017F4                 db    2
.xdata$x:000017F5                 db    0
.xdata$x:000017F6                 db    0
.xdata$x:000017F7                 db    0
.xdata$x:000017F8                 dd offset __unwindtable$??0nsEUCKRProber@@QAE@_N@Z
.xdata$x:000017FC                 db    0
.xdata$x:000017FD                 db    0
.xdata$x:000017FE                 db    0
.xdata$x:000017FF                 db    0
.xdata$x:00001800                 db    0
.xdata$x:00001801                 db    0
.xdata$x:00001802                 db    0
.xdata$x:00001803                 db    0
.xdata$x:00001804                 db    0
.xdata$x:00001805                 db    0
.xdata$x:00001806                 db    0
.xdata$x:00001807                 db    0
.xdata$x:00001808                 db    0
.xdata$x:00001809                 db    0
.xdata$x:0000180A                 db    0
.xdata$x:0000180B                 db    0
.xdata$x:0000180C                 db    0
.xdata$x:0000180D                 db    0
.xdata$x:0000180E                 db    0
.xdata$x:0000180F                 db    0
.xdata$x:00001810                 db    0
.xdata$x:00001811                 db    0
.xdata$x:00001812                 db    0
.xdata$x:00001813                 db    0
.xdata$x:00001813 _xdata$x        ends
.xdata$x:00001813
.xdata$x:00001814 ; ===========================================================================
.xdata$x:00001814
.xdata$x:00001814 ; Segment type: Pure data
.xdata$x:00001814 ; Segment permissions: Read
.xdata$x:00001814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001814                 assume cs:_xdata$x
.xdata$x:00001814                 ;org 1814h
.xdata$x:00001814 ; COMDAT (pick associative to section at 1004)
.xdata$x:00001814 __unwindtable$??1nsEUCKRProber@@UAE@XZ db 0FFh
.xdata$x:00001814                                         ; DATA XREF: .xdata$x:00001824o
.xdata$x:00001815                 db 0FFh
.xdata$x:00001816                 db 0FFh
.xdata$x:00001817                 db 0FFh
.xdata$x:00001818                 dd offset __unwindfunclet$??1nsEUCKRProber@@UAE@XZ$0
.xdata$x:0000181C __ehfuncinfo$??1nsEUCKRProber@@UAE@XZ db  22h ; "
.xdata$x:0000181C                                         ; DATA XREF: __ehhandler$??1nsEUCKRProber@@UAE@XZ+11o
.xdata$x:0000181D                 db    5
.xdata$x:0000181E                 db  93h ; ô
.xdata$x:0000181F                 db  19h
.xdata$x:00001820                 db    1
.xdata$x:00001821                 db    0
.xdata$x:00001822                 db    0
.xdata$x:00001823                 db    0
.xdata$x:00001824                 dd offset __unwindtable$??1nsEUCKRProber@@UAE@XZ
.xdata$x:00001828                 align 20h
.xdata$x:00001828 _xdata$x        ends
.xdata$x:00001828
.xdata$x:00001840 ; ===========================================================================
.xdata$x:00001840
.xdata$x:00001840 ; Segment type: Pure data
.xdata$x:00001840 ; Segment permissions: Read
.xdata$x:00001840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001840                 assume cs:_xdata$x
.xdata$x:00001840                 ;org 1840h
.xdata$x:00001840 ; COMDAT (pick associative to section at 814)
.xdata$x:00001840 __unwindtable$??0nsBig5Prober@@QAE@_N@Z db 0FFh
.xdata$x:00001840                                         ; DATA XREF: .xdata$x:00001858o
.xdata$x:00001841                 db 0FFh
.xdata$x:00001842                 db 0FFh
.xdata$x:00001843                 db 0FFh
.xdata$x:00001844                 dd offset __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$0
.xdata$x:00001848                 db    0
.xdata$x:00001849                 db    0
.xdata$x:0000184A                 db    0
.xdata$x:0000184B                 db    0
.xdata$x:0000184C                 dd offset __unwindfunclet$??0nsBig5Prober@@QAE@_N@Z$1
.xdata$x:00001850 __ehfuncinfo$??0nsBig5Prober@@QAE@_N@Z db  22h ; "
.xdata$x:00001850                                         ; DATA XREF: __ehhandler$??0nsBig5Prober@@QAE@_N@Z+11o
.xdata$x:00001851                 db    5
.xdata$x:00001852                 db  93h ; ô
.xdata$x:00001853                 db  19h
.xdata$x:00001854                 db    2
.xdata$x:00001855                 db    0
.xdata$x:00001856                 db    0
.xdata$x:00001857                 db    0
.xdata$x:00001858                 dd offset __unwindtable$??0nsBig5Prober@@QAE@_N@Z
.xdata$x:0000185C                 db    0
.xdata$x:0000185D                 db    0
.xdata$x:0000185E                 db    0
.xdata$x:0000185F                 db    0
.xdata$x:00001860                 db    0
.xdata$x:00001861                 db    0
.xdata$x:00001862                 db    0
.xdata$x:00001863                 db    0
.xdata$x:00001864                 db    0
.xdata$x:00001865                 db    0
.xdata$x:00001866                 db    0
.xdata$x:00001867                 db    0
.xdata$x:00001868                 db    0
.xdata$x:00001869                 db    0
.xdata$x:0000186A                 db    0
.xdata$x:0000186B                 db    0
.xdata$x:0000186C                 db    0
.xdata$x:0000186D                 db    0
.xdata$x:0000186E                 db    0
.xdata$x:0000186F                 db    0
.xdata$x:00001870                 db    0
.xdata$x:00001871                 db    0
.xdata$x:00001872                 db    0
.xdata$x:00001873                 db    0
.xdata$x:00001873 _xdata$x        ends
.xdata$x:00001873
.xdata$x:00001874 ; ===========================================================================
.xdata$x:00001874
.xdata$x:00001874 ; Segment type: Pure data
.xdata$x:00001874 ; Segment permissions: Read
.xdata$x:00001874 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001874                 assume cs:_xdata$x
.xdata$x:00001874                 ;org 1874h
.xdata$x:00001874 ; COMDAT (pick associative to section at ED0)
.xdata$x:00001874 __unwindtable$??1nsBig5Prober@@UAE@XZ db 0FFh
.xdata$x:00001874                                         ; DATA XREF: .xdata$x:00001884o
.xdata$x:00001875                 db 0FFh
.xdata$x:00001876                 db 0FFh
.xdata$x:00001877                 db 0FFh
.xdata$x:00001878                 dd offset __unwindfunclet$??1nsBig5Prober@@UAE@XZ$0
.xdata$x:0000187C __ehfuncinfo$??1nsBig5Prober@@UAE@XZ db  22h ; "
.xdata$x:0000187C                                         ; DATA XREF: __ehhandler$??1nsBig5Prober@@UAE@XZ+11o
.xdata$x:0000187D                 db    5
.xdata$x:0000187E                 db  93h ; ô
.xdata$x:0000187F                 db  19h
.xdata$x:00001880                 db    1
.xdata$x:00001881                 db    0
.xdata$x:00001882                 db    0
.xdata$x:00001883                 db    0
.xdata$x:00001884                 dd offset __unwindtable$??1nsBig5Prober@@UAE@XZ
.xdata$x:00001888                 align 20h
.xdata$x:00001888 _xdata$x        ends
.xdata$x:00001888
.xdata$x:000018A0 ; ===========================================================================
.xdata$x:000018A0
.xdata$x:000018A0 ; Segment type: Pure data
.xdata$x:000018A0 ; Segment permissions: Read
.xdata$x:000018A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000018A0                 assume cs:_xdata$x
.xdata$x:000018A0                 ;org 18A0h
.xdata$x:000018A0 ; COMDAT (pick associative to section at B20)
.xdata$x:000018A0 __unwindtable$??0nsEUCTWProber@@QAE@_N@Z db 0FFh
.xdata$x:000018A0                                         ; DATA XREF: .xdata$x:000018B8o
.xdata$x:000018A1                 db 0FFh
.xdata$x:000018A2                 db 0FFh
.xdata$x:000018A3                 db 0FFh
.xdata$x:000018A4                 dd offset __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$0
.xdata$x:000018A8                 db    0
.xdata$x:000018A9                 db    0
.xdata$x:000018AA                 db    0
.xdata$x:000018AB                 db    0
.xdata$x:000018AC                 dd offset __unwindfunclet$??0nsEUCTWProber@@QAE@_N@Z$1
.xdata$x:000018B0 __ehfuncinfo$??0nsEUCTWProber@@QAE@_N@Z db  22h ; "
.xdata$x:000018B0                                         ; DATA XREF: __ehhandler$??0nsEUCTWProber@@QAE@_N@Z+11o
.xdata$x:000018B1                 db    5
.xdata$x:000018B2                 db  93h ; ô
.xdata$x:000018B3                 db  19h
.xdata$x:000018B4                 db    2
.xdata$x:000018B5                 db    0
.xdata$x:000018B6                 db    0
.xdata$x:000018B7                 db    0
.xdata$x:000018B8                 dd offset __unwindtable$??0nsEUCTWProber@@QAE@_N@Z
.xdata$x:000018BC                 db    0
.xdata$x:000018BD                 db    0
.xdata$x:000018BE                 db    0
.xdata$x:000018BF                 db    0
.xdata$x:000018C0                 db    0
.xdata$x:000018C1                 db    0
.xdata$x:000018C2                 db    0
.xdata$x:000018C3                 db    0
.xdata$x:000018C4                 db    0
.xdata$x:000018C5                 db    0
.xdata$x:000018C6                 db    0
.xdata$x:000018C7                 db    0
.xdata$x:000018C8                 db    0
.xdata$x:000018C9                 db    0
.xdata$x:000018CA                 db    0
.xdata$x:000018CB                 db    0
.xdata$x:000018CC                 db    0
.xdata$x:000018CD                 db    0
.xdata$x:000018CE                 db    0
.xdata$x:000018CF                 db    0
.xdata$x:000018D0                 db    0
.xdata$x:000018D1                 db    0
.xdata$x:000018D2                 db    0
.xdata$x:000018D3                 db    0
.xdata$x:000018D3 _xdata$x        ends
.xdata$x:000018D3
.xdata$x:000018D4 ; ===========================================================================
.xdata$x:000018D4
.xdata$x:000018D4 ; Segment type: Pure data
.xdata$x:000018D4 ; Segment permissions: Read
.xdata$x:000018D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000018D4                 assume cs:_xdata$x
.xdata$x:000018D4                 ;org 18D4h
.xdata$x:000018D4 ; COMDAT (pick associative to section at 1094)
.xdata$x:000018D4 __unwindtable$??1nsEUCTWProber@@UAE@XZ db 0FFh
.xdata$x:000018D4                                         ; DATA XREF: .xdata$x:000018E4o
.xdata$x:000018D5                 db 0FFh
.xdata$x:000018D6                 db 0FFh
.xdata$x:000018D7                 db 0FFh
.xdata$x:000018D8                 dd offset __unwindfunclet$??1nsEUCTWProber@@UAE@XZ$0
.xdata$x:000018DC __ehfuncinfo$??1nsEUCTWProber@@UAE@XZ db  22h ; "
.xdata$x:000018DC                                         ; DATA XREF: __ehhandler$??1nsEUCTWProber@@UAE@XZ+11o
.xdata$x:000018DD                 db    5
.xdata$x:000018DE                 db  93h ; ô
.xdata$x:000018DF                 db  19h
.xdata$x:000018E0                 db    1
.xdata$x:000018E1                 db    0
.xdata$x:000018E2                 db    0
.xdata$x:000018E3                 db    0
.xdata$x:000018E4                 dd offset __unwindtable$??1nsEUCTWProber@@UAE@XZ
.xdata$x:000018E8                 align 20h
.xdata$x:000018E8 _xdata$x        ends
.xdata$x:000018E8
.xdata$x:00001900 ; ===========================================================================
.xdata$x:00001900
.xdata$x:00001900 ; Segment type: Pure data
.xdata$x:00001900 ; Segment permissions: Read
.xdata$x:00001900 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001900                 assume cs:_xdata$x
.xdata$x:00001900                 ;org 1900h
.xdata$x:00001900 __unwindtable$??1nsMBCSGroupProber@@UAE@XZ db 0FFh
.xdata$x:00001900                                         ; DATA XREF: .xdata$x:00001910o
.xdata$x:00001901                 db 0FFh
.xdata$x:00001902                 db 0FFh
.xdata$x:00001903                 db 0FFh
.xdata$x:00001904                 dd offset __unwindfunclet$??1nsMBCSGroupProber@@UAE@XZ$0
.xdata$x:00001908 __ehfuncinfo$??1nsMBCSGroupProber@@UAE@XZ db  22h ; "
.xdata$x:00001908                                         ; DATA XREF: __ehhandler$??1nsMBCSGroupProber@@UAE@XZ+11o
.xdata$x:00001909                 db    5
.xdata$x:0000190A                 db  93h ; ô
.xdata$x:0000190B                 db  19h
.xdata$x:0000190C                 db    1
.xdata$x:0000190D                 db    0
.xdata$x:0000190E                 db    0
.xdata$x:0000190F                 db    0
.xdata$x:00001910                 dd offset __unwindtable$??1nsMBCSGroupProber@@UAE@XZ
.xdata$x:00001914                 db    0
.xdata$x:00001915                 db    0
.xdata$x:00001916                 db    0
.xdata$x:00001917                 db    0
.xdata$x:00001918                 db    0
.xdata$x:00001919                 db    0
.xdata$x:0000191A                 db    0
.xdata$x:0000191B                 db    0
.xdata$x:0000191C                 db    0
.xdata$x:0000191D                 db    0
.xdata$x:0000191E                 db    0
.xdata$x:0000191F                 db    0
.xdata$x:00001920                 db    0
.xdata$x:00001921                 db    0
.xdata$x:00001922                 db    0
.xdata$x:00001923                 db    0
.xdata$x:00001924                 db    0
.xdata$x:00001925                 db    0
.xdata$x:00001926                 db    0
.xdata$x:00001927                 db    0
.xdata$x:00001928                 db    0
.xdata$x:00001929                 db    0
.xdata$x:0000192A                 db    0
.xdata$x:0000192B                 db    0
.xdata$x:0000192C __ehfuncinfo$??0nsMBCSGroupProber@@QAE@I@Z db  22h ; "
.xdata$x:0000192C                                         ; DATA XREF: __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z+11o
.xdata$x:0000192D                 db    5
.xdata$x:0000192E                 db  93h ; ô
.xdata$x:0000192F                 db  19h
.xdata$x:00001930                 db    8
.xdata$x:00001931                 db    0
.xdata$x:00001932                 db    0
.xdata$x:00001933                 db    0
.xdata$x:00001934                 dd offset __unwindtable$??0nsMBCSGroupProber@@QAE@I@Z
.xdata$x:00001938                 db    0
.xdata$x:00001939                 db    0
.xdata$x:0000193A                 db    0
.xdata$x:0000193B                 db    0
.xdata$x:0000193C                 db    0
.xdata$x:0000193D                 db    0
.xdata$x:0000193E                 db    0
.xdata$x:0000193F                 db    0
.xdata$x:00001940                 db    0
.xdata$x:00001941                 db    0
.xdata$x:00001942                 db    0
.xdata$x:00001943                 db    0
.xdata$x:00001944                 db    0
.xdata$x:00001945                 db    0
.xdata$x:00001946                 db    0
.xdata$x:00001947                 db    0
.xdata$x:00001948                 db    0
.xdata$x:00001949                 db    0
.xdata$x:0000194A                 db    0
.xdata$x:0000194B                 db    0
.xdata$x:0000194C                 db    0
.xdata$x:0000194D                 db    0
.xdata$x:0000194E                 db    0
.xdata$x:0000194F                 db    0
.xdata$x:00001950 __unwindtable$??0nsMBCSGroupProber@@QAE@I@Z db 0FFh
.xdata$x:00001950                                         ; DATA XREF: .xdata$x:00001934o
.xdata$x:00001951                 db 0FFh
.xdata$x:00001952                 db 0FFh
.xdata$x:00001953                 db 0FFh
.xdata$x:00001954                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$0
.xdata$x:00001958                 db    0
.xdata$x:00001959                 db    0
.xdata$x:0000195A                 db    0
.xdata$x:0000195B                 db    0
.xdata$x:0000195C                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$1
.xdata$x:00001960                 db    0
.xdata$x:00001961                 db    0
.xdata$x:00001962                 db    0
.xdata$x:00001963                 db    0
.xdata$x:00001964                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$2
.xdata$x:00001968                 db    0
.xdata$x:00001969                 db    0
.xdata$x:0000196A                 db    0
.xdata$x:0000196B                 db    0
.xdata$x:0000196C                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$3
.xdata$x:00001970                 db    0
.xdata$x:00001971                 db    0
.xdata$x:00001972                 db    0
.xdata$x:00001973                 db    0
.xdata$x:00001974                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$4
.xdata$x:00001978                 db    0
.xdata$x:00001979                 db    0
.xdata$x:0000197A                 db    0
.xdata$x:0000197B                 db    0
.xdata$x:0000197C                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$5
.xdata$x:00001980                 db    0
.xdata$x:00001981                 db    0
.xdata$x:00001982                 db    0
.xdata$x:00001983                 db    0
.xdata$x:00001984                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$6
.xdata$x:00001988                 db    0
.xdata$x:00001989                 db    0
.xdata$x:0000198A                 db    0
.xdata$x:0000198B                 db    0
.xdata$x:0000198C                 dd offset __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$7
.xdata$x:0000198C _xdata$x        ends
.xdata$x:0000198C
.rdata:00001990 ; ===========================================================================
.rdata:00001990
.rdata:00001990 ; Segment type: Pure data
.rdata:00001990 ; Segment permissions: Read
.rdata:00001990 _rdata          segment dword public 'DATA' use32
.rdata:00001990                 assume cs:_rdata
.rdata:00001990                 ;org 1990h
.rdata:00001990 ; COMDAT (pick largest)
.rdata:00001990                 dd offset ??_R4nsCharSetProber@@6B@ ; const nsCharSetProber::`RTTI Complete Object Locator'
.rdata:00001994                 public ??_7nsCharSetProber@@6B@
.rdata:00001994 ; const nsCharSetProber::`vftable'
.rdata:00001994 ??_7nsCharSetProber@@6B@ dd offset ??_EnsCharSetProber@@UAEPAXI@Z
.rdata:00001994                                         ; DATA XREF: nsCharSetProber::nsCharSetProber(void)+Ao
.rdata:00001994                                         ; nsCharSetProber::~nsCharSetProber(void)+Ao
.rdata:00001994                                         ; nsCharSetProber::`vector deleting destructor'(uint)
.rdata:00001998                 dd offset __purecall
.rdata:0000199C                 dd offset __purecall
.rdata:000019A0                 dd offset __purecall
.rdata:000019A4                 dd offset __purecall
.rdata:000019A8                 dd offset __purecall
.rdata:000019AC                 dd offset __purecall
.rdata:000019AC _rdata          ends
.rdata:000019AC
.rdata:000019B0 ; ===========================================================================
.rdata:000019B0
.rdata:000019B0 ; Segment type: Pure data
.rdata:000019B0 ; Segment permissions: Read
.rdata:000019B0 _rdata          segment dword public 'DATA' use32
.rdata:000019B0                 assume cs:_rdata
.rdata:000019B0                 ;org 19B0h
.rdata:000019B0 ; COMDAT (pick largest)
.rdata:000019B0                 dd offset ??_R4JapaneseContextAnalysis@@6B@ ; const JapaneseContextAnalysis::`RTTI Complete Object Locator'
.rdata:000019B4                 public ??_7JapaneseContextAnalysis@@6B@
.rdata:000019B4 ; const JapaneseContextAnalysis::`vftable'
.rdata:000019B4 ??_7JapaneseContextAnalysis@@6B@ dd offset __purecall
.rdata:000019B4                                         ; DATA XREF: JapaneseContextAnalysis::JapaneseContextAnalysis(void)+Ao
.rdata:000019B8                 dd offset __purecall
.rdata:000019B8 _rdata          ends
.rdata:000019B8
.rdata:000019BC ; ===========================================================================
.rdata:000019BC
.rdata:000019BC ; Segment type: Pure data
.rdata:000019BC ; Segment permissions: Read
.rdata:000019BC _rdata          segment dword public 'DATA' use32
.rdata:000019BC                 assume cs:_rdata
.rdata:000019BC                 ;org 19BCh
.rdata:000019BC ; COMDAT (pick largest)
.rdata:000019BC                 dd offset ??_R4SJISContextAnalysis@@6B@ ; const SJISContextAnalysis::`RTTI Complete Object Locator'
.rdata:000019C0                 public ??_7SJISContextAnalysis@@6B@
.rdata:000019C0 ; const SJISContextAnalysis::`vftable'
.rdata:000019C0 ??_7SJISContextAnalysis@@6B@ dd offset ?GetOrder@SJISContextAnalysis@@MAEHPBD@Z
.rdata:000019C0                                         ; DATA XREF: SJISContextAnalysis::SJISContextAnalysis(void)+12o
.rdata:000019C0                                         ; SJISContextAnalysis::GetOrder(char const *)
.rdata:000019C4                 dd offset ?GetOrder@SJISContextAnalysis@@MAEHPBDPAI@Z ; SJISContextAnalysis::GetOrder(char const *,uint *)
.rdata:000019C4 _rdata          ends
.rdata:000019C4
.rdata:000019C8 ; ===========================================================================
.rdata:000019C8
.rdata:000019C8 ; Segment type: Pure data
.rdata:000019C8 ; Segment permissions: Read
.rdata:000019C8 _rdata          segment dword public 'DATA' use32
.rdata:000019C8                 assume cs:_rdata
.rdata:000019C8                 ;org 19C8h
.rdata:000019C8 ; COMDAT (pick largest)
.rdata:000019C8                 dd offset ??_R4EUCJPContextAnalysis@@6B@ ; const EUCJPContextAnalysis::`RTTI Complete Object Locator'
.rdata:000019CC                 public ??_7EUCJPContextAnalysis@@6B@
.rdata:000019CC ; const EUCJPContextAnalysis::`vftable'
.rdata:000019CC ??_7EUCJPContextAnalysis@@6B@ dd offset ?GetOrder@EUCJPContextAnalysis@@MAEHPBD@Z
.rdata:000019CC                                         ; DATA XREF: EUCJPContextAnalysis::EUCJPContextAnalysis(void)+12o
.rdata:000019CC                                         ; EUCJPContextAnalysis::GetOrder(char const *)
.rdata:000019D0                 dd offset ?GetOrder@EUCJPContextAnalysis@@MAEHPBDPAI@Z ; EUCJPContextAnalysis::GetOrder(char const *,uint *)
.rdata:000019D0 _rdata          ends
.rdata:000019D0
.rdata:000019D4 ; ===========================================================================
.rdata:000019D4
.rdata:000019D4 ; Segment type: Pure data
.rdata:000019D4 ; Segment permissions: Read
.rdata:000019D4 _rdata          segment dword public 'DATA' use32
.rdata:000019D4                 assume cs:_rdata
.rdata:000019D4                 ;org 19D4h
.rdata:000019D4 ; COMDAT (pick largest)
.rdata:000019D4                 dd offset ??_R4nsSJISProber@@6B@ ; const nsSJISProber::`RTTI Complete Object Locator'
.rdata:000019D8                 public ??_7nsSJISProber@@6B@
.rdata:000019D8 ; const nsSJISProber::`vftable'
.rdata:000019D8 ??_7nsSJISProber@@6B@ dd offset ??_EnsSJISProber@@UAEPAXI@Z
.rdata:000019D8                                         ; DATA XREF: nsSJISProber::nsSJISProber(bool)+3Ao
.rdata:000019D8                                         ; nsSJISProber::~nsSJISProber(void)+2Bo
.rdata:000019D8                                         ; nsSJISProber::`vector deleting destructor'(uint)
.rdata:000019DC                 dd offset ?GetCharSetName@nsSJISProber@@UAEPBDXZ ; nsSJISProber::GetCharSetName(void)
.rdata:000019E0                 dd offset ?HandleData@nsSJISProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsSJISProber::HandleData(char const *,uint)
.rdata:000019E4                 dd offset ?GetState@nsSJISProber@@UAE?AW4nsProbingState@@XZ ; nsSJISProber::GetState(void)
.rdata:000019E8                 dd offset ?Reset@nsSJISProber@@UAEXXZ ; nsSJISProber::Reset(void)
.rdata:000019EC                 dd offset ?GetConfidence@nsSJISProber@@UAEMXZ ; nsSJISProber::GetConfidence(void)
.rdata:000019F0                 dd offset ?SetOpion@nsSJISProber@@UAEXXZ ; nsSJISProber::SetOpion(void)
.rdata:000019F0 _rdata          ends
.rdata:000019F0
.rdata:000019F4 ; ===========================================================================
.rdata:000019F4
.rdata:000019F4 ; Segment type: Pure data
.rdata:000019F4 ; Segment permissions: Read
.rdata:000019F4 _rdata          segment dword public 'DATA' use32
.rdata:000019F4                 assume cs:_rdata
.rdata:000019F4                 ;org 19F4h
.rdata:000019F4 ; COMDAT (pick any)
.rdata:000019F4                 public ??_C@_09LOKLFMHN@Shift_JIS?$AA@
.rdata:000019F4 ; `string'
.rdata:000019F4 ??_C@_09LOKLFMHN@Shift_JIS?$AA@ db 'Shift_JIS',0
.rdata:000019F4                                         ; DATA XREF: nsSJISProber::GetCharSetName(void)+7o
.rdata:000019FE                 align 10h
.rdata:000019FE _rdata          ends
.rdata:000019FE
.rdata:00001A00 ; ===========================================================================
.rdata:00001A00
.rdata:00001A00 ; Segment type: Pure data
.rdata:00001A00 ; Segment permissions: Read
.rdata:00001A00 _rdata          segment dword public 'DATA' use32
.rdata:00001A00                 assume cs:_rdata
.rdata:00001A00                 ;org 1A00h
.rdata:00001A00 ; COMDAT (pick largest)
.rdata:00001A00                 dd offset ??_R4nsUTF8Prober@@6B@ ; const nsUTF8Prober::`RTTI Complete Object Locator'
.rdata:00001A04                 public ??_7nsUTF8Prober@@6B@
.rdata:00001A04 ; const nsUTF8Prober::`vftable'
.rdata:00001A04 ??_7nsUTF8Prober@@6B@ dd offset ??_EnsUTF8Prober@@UAEPAXI@Z
.rdata:00001A04                                         ; DATA XREF: nsUTF8Prober::nsUTF8Prober(void)+3Ao
.rdata:00001A04                                         ; nsUTF8Prober::~nsUTF8Prober(void)+2Bo
.rdata:00001A04                                         ; nsUTF8Prober::`vector deleting destructor'(uint)
.rdata:00001A08                 dd offset ?GetCharSetName@nsUTF8Prober@@UAEPBDXZ ; nsUTF8Prober::GetCharSetName(void)
.rdata:00001A0C                 dd offset ?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z ; nsUTF8Prober::HandleData(char const *,uint)
.rdata:00001A10                 dd offset ?GetState@nsUTF8Prober@@UAE?AW4nsProbingState@@XZ ; nsUTF8Prober::GetState(void)
.rdata:00001A14                 dd offset ?Reset@nsUTF8Prober@@UAEXXZ ; nsUTF8Prober::Reset(void)
.rdata:00001A18                 dd offset ?GetConfidence@nsUTF8Prober@@UAEMXZ ; nsUTF8Prober::GetConfidence(void)
.rdata:00001A1C                 dd offset ?SetOpion@nsUTF8Prober@@UAEXXZ ; nsUTF8Prober::SetOpion(void)
.rdata:00001A1C _rdata          ends
.rdata:00001A1C
.rdata:00001A20 ; ===========================================================================
.rdata:00001A20
.rdata:00001A20 ; Segment type: Pure data
.rdata:00001A20 ; Segment permissions: Read
.rdata:00001A20 _rdata          segment dword public 'DATA' use32
.rdata:00001A20                 assume cs:_rdata
.rdata:00001A20                 ;org 1A20h
.rdata:00001A20 ; COMDAT (pick any)
.rdata:00001A20                 public ??_C@_05EGJIMALK@UTF?98?$AA@
.rdata:00001A20 ; `string'
.rdata:00001A20 ??_C@_05EGJIMALK@UTF?98?$AA@ db 'UTF-8',0
.rdata:00001A20                                         ; DATA XREF: nsUTF8Prober::GetCharSetName(void)+7o
.rdata:00001A26                 align 4
.rdata:00001A26 _rdata          ends
.rdata:00001A26
.rdata:00001A28 ; ===========================================================================
.rdata:00001A28
.rdata:00001A28 ; Segment type: Pure data
.rdata:00001A28 ; Segment permissions: Read
.rdata:00001A28 _rdata          segment dword public 'DATA' use32
.rdata:00001A28                 assume cs:_rdata
.rdata:00001A28                 ;org 1A28h
.rdata:00001A28 ; COMDAT (pick largest)
.rdata:00001A28                 dd offset ??_R4nsEUCJPProber@@6B@ ; const nsEUCJPProber::`RTTI Complete Object Locator'
.rdata:00001A2C                 public ??_7nsEUCJPProber@@6B@
.rdata:00001A2C ; const nsEUCJPProber::`vftable'
.rdata:00001A2C ??_7nsEUCJPProber@@6B@ dd offset ??_EnsEUCJPProber@@UAEPAXI@Z
.rdata:00001A2C                                         ; DATA XREF: nsEUCJPProber::nsEUCJPProber(bool)+3Ao
.rdata:00001A2C                                         ; nsEUCJPProber::~nsEUCJPProber(void)+2Bo
.rdata:00001A2C                                         ; nsEUCJPProber::`vector deleting destructor'(uint)
.rdata:00001A30                 dd offset ?GetCharSetName@nsEUCJPProber@@UAEPBDXZ ; nsEUCJPProber::GetCharSetName(void)
.rdata:00001A34                 dd offset ?HandleData@nsEUCJPProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsEUCJPProber::HandleData(char const *,uint)
.rdata:00001A38                 dd offset ?GetState@nsEUCJPProber@@UAE?AW4nsProbingState@@XZ ; nsEUCJPProber::GetState(void)
.rdata:00001A3C                 dd offset ?Reset@nsEUCJPProber@@UAEXXZ ; nsEUCJPProber::Reset(void)
.rdata:00001A40                 dd offset ?GetConfidence@nsEUCJPProber@@UAEMXZ ; nsEUCJPProber::GetConfidence(void)
.rdata:00001A44                 dd offset ?SetOpion@nsEUCJPProber@@UAEXXZ ; nsEUCJPProber::SetOpion(void)
.rdata:00001A44 _rdata          ends
.rdata:00001A44
.rdata:00001A48 ; ===========================================================================
.rdata:00001A48
.rdata:00001A48 ; Segment type: Pure data
.rdata:00001A48 ; Segment permissions: Read
.rdata:00001A48 _rdata          segment dword public 'DATA' use32
.rdata:00001A48                 assume cs:_rdata
.rdata:00001A48                 ;org 1A48h
.rdata:00001A48 ; COMDAT (pick any)
.rdata:00001A48                 public ??_C@_06KCFOODCD@EUC?9JP?$AA@
.rdata:00001A48 ; `string'
.rdata:00001A48 ??_C@_06KCFOODCD@EUC?9JP?$AA@ db 'EUC-JP',0
.rdata:00001A48                                         ; DATA XREF: nsEUCJPProber::GetCharSetName(void)+7o
.rdata:00001A4F                 align 10h
.rdata:00001A4F _rdata          ends
.rdata:00001A4F
.rdata:00001A50 ; ===========================================================================
.rdata:00001A50
.rdata:00001A50 ; Segment type: Pure data
.rdata:00001A50 ; Segment permissions: Read
.rdata:00001A50 _rdata          segment dword public 'DATA' use32
.rdata:00001A50                 assume cs:_rdata
.rdata:00001A50                 ;org 1A50h
.rdata:00001A50 ; COMDAT (pick largest)
.rdata:00001A50                 dd offset ??_R4nsGB18030Prober@@6B@ ; const nsGB18030Prober::`RTTI Complete Object Locator'
.rdata:00001A54                 public ??_7nsGB18030Prober@@6B@
.rdata:00001A54 ; const nsGB18030Prober::`vftable'
.rdata:00001A54 ??_7nsGB18030Prober@@6B@ dd offset ??_EnsGB18030Prober@@UAEPAXI@Z
.rdata:00001A54                                         ; DATA XREF: nsGB18030Prober::nsGB18030Prober(bool)+3Ao
.rdata:00001A54                                         ; nsGB18030Prober::~nsGB18030Prober(void)+2Bo
.rdata:00001A54                                         ; nsGB18030Prober::`vector deleting destructor'(uint)
.rdata:00001A58                 dd offset ?GetCharSetName@nsGB18030Prober@@UAEPBDXZ ; nsGB18030Prober::GetCharSetName(void)
.rdata:00001A5C                 dd offset ?HandleData@nsGB18030Prober@@UAE?AW4nsProbingState@@PBDI@Z ; nsGB18030Prober::HandleData(char const *,uint)
.rdata:00001A60                 dd offset ?GetState@nsGB18030Prober@@UAE?AW4nsProbingState@@XZ ; nsGB18030Prober::GetState(void)
.rdata:00001A64                 dd offset ?Reset@nsGB18030Prober@@UAEXXZ ; nsGB18030Prober::Reset(void)
.rdata:00001A68                 dd offset ?GetConfidence@nsGB18030Prober@@UAEMXZ ; nsGB18030Prober::GetConfidence(void)
.rdata:00001A6C                 dd offset ?SetOpion@nsGB18030Prober@@UAEXXZ ; nsGB18030Prober::SetOpion(void)
.rdata:00001A6C _rdata          ends
.rdata:00001A6C
.rdata:00001A70 ; ===========================================================================
.rdata:00001A70
.rdata:00001A70 ; Segment type: Pure data
.rdata:00001A70 ; Segment permissions: Read
.rdata:00001A70 _rdata          segment dword public 'DATA' use32
.rdata:00001A70                 assume cs:_rdata
.rdata:00001A70                 ;org 1A70h
.rdata:00001A70 ; COMDAT (pick any)
.rdata:00001A70                 public ??_C@_07LONGGCM@gb18030?$AA@
.rdata:00001A70 ; `string'
.rdata:00001A70 ??_C@_07LONGGCM@gb18030?$AA@ db 'gb18030',0
.rdata:00001A70                                         ; DATA XREF: nsGB18030Prober::GetCharSetName(void)+7o
.rdata:00001A70 _rdata          ends
.rdata:00001A70
.rdata:00001A78 ; ===========================================================================
.rdata:00001A78
.rdata:00001A78 ; Segment type: Pure data
.rdata:00001A78 ; Segment permissions: Read
.rdata:00001A78 _rdata          segment dword public 'DATA' use32
.rdata:00001A78                 assume cs:_rdata
.rdata:00001A78                 ;org 1A78h
.rdata:00001A78 ; COMDAT (pick largest)
.rdata:00001A78                 dd offset ??_R4nsEUCKRProber@@6B@ ; const nsEUCKRProber::`RTTI Complete Object Locator'
.rdata:00001A7C                 public ??_7nsEUCKRProber@@6B@
.rdata:00001A7C ; const nsEUCKRProber::`vftable'
.rdata:00001A7C ??_7nsEUCKRProber@@6B@ dd offset ??_EnsEUCKRProber@@UAEPAXI@Z
.rdata:00001A7C                                         ; DATA XREF: nsEUCKRProber::nsEUCKRProber(bool)+3Ao
.rdata:00001A7C                                         ; nsEUCKRProber::~nsEUCKRProber(void)+2Bo
.rdata:00001A7C                                         ; nsEUCKRProber::`vector deleting destructor'(uint)
.rdata:00001A80                 dd offset ?GetCharSetName@nsEUCKRProber@@UAEPBDXZ ; nsEUCKRProber::GetCharSetName(void)
.rdata:00001A84                 dd offset ?HandleData@nsEUCKRProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsEUCKRProber::HandleData(char const *,uint)
.rdata:00001A88                 dd offset ?GetState@nsEUCKRProber@@UAE?AW4nsProbingState@@XZ ; nsEUCKRProber::GetState(void)
.rdata:00001A8C                 dd offset ?Reset@nsEUCKRProber@@UAEXXZ ; nsEUCKRProber::Reset(void)
.rdata:00001A90                 dd offset ?GetConfidence@nsEUCKRProber@@UAEMXZ ; nsEUCKRProber::GetConfidence(void)
.rdata:00001A94                 dd offset ?SetOpion@nsEUCKRProber@@UAEXXZ ; nsEUCKRProber::SetOpion(void)
.rdata:00001A94 _rdata          ends
.rdata:00001A94
.rdata:00001A98 ; ===========================================================================
.rdata:00001A98
.rdata:00001A98 ; Segment type: Pure data
.rdata:00001A98 ; Segment permissions: Read
.rdata:00001A98 _rdata          segment dword public 'DATA' use32
.rdata:00001A98                 assume cs:_rdata
.rdata:00001A98                 ;org 1A98h
.rdata:00001A98 ; COMDAT (pick any)
.rdata:00001A98                 public ??_C@_06JBKKOLJG@EUC?9KR?$AA@
.rdata:00001A98 ; `string'
.rdata:00001A98 ??_C@_06JBKKOLJG@EUC?9KR?$AA@ db 'EUC-KR',0
.rdata:00001A98                                         ; DATA XREF: nsEUCKRProber::GetCharSetName(void)+7o
.rdata:00001A9F                 align 10h
.rdata:00001A9F _rdata          ends
.rdata:00001A9F
.rdata:00001AA0 ; ===========================================================================
.rdata:00001AA0
.rdata:00001AA0 ; Segment type: Pure data
.rdata:00001AA0 ; Segment permissions: Read
.rdata:00001AA0 _rdata          segment dword public 'DATA' use32
.rdata:00001AA0                 assume cs:_rdata
.rdata:00001AA0                 ;org 1AA0h
.rdata:00001AA0 ; COMDAT (pick largest)
.rdata:00001AA0                 dd offset ??_R4nsBig5Prober@@6B@ ; const nsBig5Prober::`RTTI Complete Object Locator'
.rdata:00001AA4                 public ??_7nsBig5Prober@@6B@
.rdata:00001AA4 ; const nsBig5Prober::`vftable'
.rdata:00001AA4 ??_7nsBig5Prober@@6B@ dd offset ??_EnsBig5Prober@@UAEPAXI@Z
.rdata:00001AA4                                         ; DATA XREF: nsBig5Prober::nsBig5Prober(bool)+3Ao
.rdata:00001AA4                                         ; nsBig5Prober::~nsBig5Prober(void)+2Bo
.rdata:00001AA4                                         ; nsBig5Prober::`vector deleting destructor'(uint)
.rdata:00001AA8                 dd offset ?GetCharSetName@nsBig5Prober@@UAEPBDXZ ; nsBig5Prober::GetCharSetName(void)
.rdata:00001AAC                 dd offset ?HandleData@nsBig5Prober@@UAE?AW4nsProbingState@@PBDI@Z ; nsBig5Prober::HandleData(char const *,uint)
.rdata:00001AB0                 dd offset ?GetState@nsBig5Prober@@UAE?AW4nsProbingState@@XZ ; nsBig5Prober::GetState(void)
.rdata:00001AB4                 dd offset ?Reset@nsBig5Prober@@UAEXXZ ; nsBig5Prober::Reset(void)
.rdata:00001AB8                 dd offset ?GetConfidence@nsBig5Prober@@UAEMXZ ; nsBig5Prober::GetConfidence(void)
.rdata:00001ABC                 dd offset ?SetOpion@nsBig5Prober@@UAEXXZ ; nsBig5Prober::SetOpion(void)
.rdata:00001ABC _rdata          ends
.rdata:00001ABC
.rdata:00001AC0 ; ===========================================================================
.rdata:00001AC0
.rdata:00001AC0 ; Segment type: Pure data
.rdata:00001AC0 ; Segment permissions: Read
.rdata:00001AC0 _rdata          segment dword public 'DATA' use32
.rdata:00001AC0                 assume cs:_rdata
.rdata:00001AC0                 ;org 1AC0h
.rdata:00001AC0 ; COMDAT (pick any)
.rdata:00001AC0                 public ??_C@_04LCGJKEFB@Big5?$AA@
.rdata:00001AC0 ; `string'
.rdata:00001AC0 ??_C@_04LCGJKEFB@Big5?$AA@ db 'Big5',0  ; DATA XREF: nsBig5Prober::GetCharSetName(void)+7o
.rdata:00001AC5                 align 4
.rdata:00001AC5 _rdata          ends
.rdata:00001AC5
.rdata:00001AC8 ; ===========================================================================
.rdata:00001AC8
.rdata:00001AC8 ; Segment type: Pure data
.rdata:00001AC8 ; Segment permissions: Read
.rdata:00001AC8 _rdata          segment dword public 'DATA' use32
.rdata:00001AC8                 assume cs:_rdata
.rdata:00001AC8                 ;org 1AC8h
.rdata:00001AC8 ; COMDAT (pick largest)
.rdata:00001AC8                 dd offset ??_R4nsEUCTWProber@@6B@ ; const nsEUCTWProber::`RTTI Complete Object Locator'
.rdata:00001ACC                 public ??_7nsEUCTWProber@@6B@
.rdata:00001ACC ; const nsEUCTWProber::`vftable'
.rdata:00001ACC ??_7nsEUCTWProber@@6B@ dd offset ??_EnsEUCTWProber@@UAEPAXI@Z
.rdata:00001ACC                                         ; DATA XREF: nsEUCTWProber::nsEUCTWProber(bool)+3Ao
.rdata:00001ACC                                         ; nsEUCTWProber::~nsEUCTWProber(void)+2Bo
.rdata:00001ACC                                         ; nsEUCTWProber::`vector deleting destructor'(uint)
.rdata:00001AD0                 dd offset ?GetCharSetName@nsEUCTWProber@@UAEPBDXZ ; nsEUCTWProber::GetCharSetName(void)
.rdata:00001AD4                 dd offset ?HandleData@nsEUCTWProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsEUCTWProber::HandleData(char const *,uint)
.rdata:00001AD8                 dd offset ?GetState@nsEUCTWProber@@UAE?AW4nsProbingState@@XZ ; nsEUCTWProber::GetState(void)
.rdata:00001ADC                 dd offset ?Reset@nsEUCTWProber@@UAEXXZ ; nsEUCTWProber::Reset(void)
.rdata:00001AE0                 dd offset ?GetConfidence@nsEUCTWProber@@UAEMXZ ; nsEUCTWProber::GetConfidence(void)
.rdata:00001AE4                 dd offset ?SetOpion@nsEUCTWProber@@UAEXXZ ; nsEUCTWProber::SetOpion(void)
.rdata:00001AE4 _rdata          ends
.rdata:00001AE4
.rdata:00001AE8 ; ===========================================================================
.rdata:00001AE8
.rdata:00001AE8 ; Segment type: Pure data
.rdata:00001AE8 ; Segment permissions: Read
.rdata:00001AE8 _rdata          segment dword public 'DATA' use32
.rdata:00001AE8                 assume cs:_rdata
.rdata:00001AE8                 ;org 1AE8h
.rdata:00001AE8 ; COMDAT (pick any)
.rdata:00001AE8                 public ??_C@_08NNDFHOI@x?9euc?9tw?$AA@
.rdata:00001AE8 ; `string'
.rdata:00001AE8 ??_C@_08NNDFHOI@x?9euc?9tw?$AA@ db 'x-euc-tw',0
.rdata:00001AE8                                         ; DATA XREF: nsEUCTWProber::GetCharSetName(void)+7o
.rdata:00001AF1                 align 4
.rdata:00001AF1 _rdata          ends
.rdata:00001AF1
.rdata:00001AF4 ; ===========================================================================
.rdata:00001AF4
.rdata:00001AF4 ; Segment type: Pure data
.rdata:00001AF4 ; Segment permissions: Read
.rdata:00001AF4 _rdata          segment dword public 'DATA' use32
.rdata:00001AF4                 assume cs:_rdata
.rdata:00001AF4                 ;org 1AF4h
.rdata:00001AF4 ; COMDAT (pick largest)
.rdata:00001AF4                 dd offset ??_R4nsMBCSGroupProber@@6B@ ; const nsMBCSGroupProber::`RTTI Complete Object Locator'
.rdata:00001AF8                 public ??_7nsMBCSGroupProber@@6B@
.rdata:00001AF8 ; const nsMBCSGroupProber::`vftable'
.rdata:00001AF8 ??_7nsMBCSGroupProber@@6B@ dd offset ??_EnsMBCSGroupProber@@UAEPAXI@Z
.rdata:00001AF8                                         ; DATA XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+3Ao
.rdata:00001AF8                                         ; nsMBCSGroupProber::~nsMBCSGroupProber(void)+2Bo
.rdata:00001AF8                                         ; nsMBCSGroupProber::`vector deleting destructor'(uint)
.rdata:00001AFC                 dd offset ?GetCharSetName@nsMBCSGroupProber@@UAEPBDXZ ; nsMBCSGroupProber::GetCharSetName(void)
.rdata:00001B00                 dd offset ?HandleData@nsMBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsMBCSGroupProber::HandleData(char const *,uint)
.rdata:00001B04                 dd offset ?GetState@nsMBCSGroupProber@@UAE?AW4nsProbingState@@XZ ; nsMBCSGroupProber::GetState(void)
.rdata:00001B08                 dd offset ?Reset@nsMBCSGroupProber@@UAEXXZ ; nsMBCSGroupProber::Reset(void)
.rdata:00001B0C                 dd offset ?GetConfidence@nsMBCSGroupProber@@UAEMXZ ; nsMBCSGroupProber::GetConfidence(void)
.rdata:00001B10                 dd offset ?SetOpion@nsMBCSGroupProber@@UAEXXZ ; nsMBCSGroupProber::SetOpion(void)
.rdata:00001B10 _rdata          ends
.rdata:00001B10
.rdata$r:00001B14 ; ===========================================================================
.rdata$r:00001B14
.rdata$r:00001B14 ; Segment type: Pure data
.rdata$r:00001B14 ; Segment permissions: Read
.rdata$r:00001B14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B14                 assume cs:_rdata$r
.rdata$r:00001B14                 ;org 1B14h
.rdata$r:00001B14 ; COMDAT (pick any)
.rdata$r:00001B14                 public ??_R4nsCharSetProber@@6B@
.rdata$r:00001B14 ; const nsCharSetProber::`RTTI Complete Object Locator'
.rdata$r:00001B14 ??_R4nsCharSetProber@@6B@ db    0       ; DATA XREF: .rdata:00001990o
.rdata$r:00001B15                 db    0
.rdata$r:00001B16                 db    0
.rdata$r:00001B17                 db    0
.rdata$r:00001B18                 db    0
.rdata$r:00001B19                 db    0
.rdata$r:00001B1A                 db    0
.rdata$r:00001B1B                 db    0
.rdata$r:00001B1C                 db    0
.rdata$r:00001B1D                 db    0
.rdata$r:00001B1E                 db    0
.rdata$r:00001B1F                 db    0
.rdata$r:00001B20                 dd offset ??_R0?AVnsCharSetProber@@@8 ; nsCharSetProber `RTTI Type Descriptor'
.rdata$r:00001B24                 dd offset ??_R3nsCharSetProber@@8 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B24 _rdata$r        ends
.rdata$r:00001B24
.data$r:00001B28 ; ===========================================================================
.data$r:00001B28
.data$r:00001B28 ; Segment type: Pure data
.data$r:00001B28 ; Segment permissions: Read/Write
.data$r:00001B28 _data$r         segment dword public 'DATA' use32
.data$r:00001B28                 assume cs:_data$r
.data$r:00001B28                 ;org 1B28h
.data$r:00001B28 ; COMDAT (pick any)
.data$r:00001B28                 public ??_R0?AVnsCharSetProber@@@8
.data$r:00001B28 ; class nsCharSetProber `RTTI Type Descriptor'
.data$r:00001B28 ??_R0?AVnsCharSetProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001B28                                         ; DATA XREF: .rdata$r:00001B20o
.data$r:00001B28                                         ; .rdata$r:nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001B28                                         ; const type_info::`vftable'
.data$r:00001B2C                 align 10h
.data$r:00001B30 a_?avnscharsetp db '.?AVnsCharSetProber@@',0
.data$r:00001B46                 align 4
.data$r:00001B46 _data$r         ends
.data$r:00001B46
.rdata$r:00001B48 ; ===========================================================================
.rdata$r:00001B48
.rdata$r:00001B48 ; Segment type: Pure data
.rdata$r:00001B48 ; Segment permissions: Read
.rdata$r:00001B48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B48                 assume cs:_rdata$r
.rdata$r:00001B48                 ;org 1B48h
.rdata$r:00001B48 ; COMDAT (pick any)
.rdata$r:00001B48                 public ??_R3nsCharSetProber@@8
.rdata$r:00001B48 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B48 ??_R3nsCharSetProber@@8 db    0         ; DATA XREF: .rdata$r:00001B24o
.rdata$r:00001B48                                         ; .rdata$r:00001B78o
.rdata$r:00001B49                 db    0
.rdata$r:00001B4A                 db    0
.rdata$r:00001B4B                 db    0
.rdata$r:00001B4C                 db    0
.rdata$r:00001B4D                 db    0
.rdata$r:00001B4E                 db    0
.rdata$r:00001B4F                 db    0
.rdata$r:00001B50                 db    1
.rdata$r:00001B51                 db    0
.rdata$r:00001B52                 db    0
.rdata$r:00001B53                 db    0
.rdata$r:00001B54                 dd offset ??_R2nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Array'
.rdata$r:00001B54 _rdata$r        ends
.rdata$r:00001B54
.rdata$r:00001B58 ; ===========================================================================
.rdata$r:00001B58
.rdata$r:00001B58 ; Segment type: Pure data
.rdata$r:00001B58 ; Segment permissions: Read
.rdata$r:00001B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B58                 assume cs:_rdata$r
.rdata$r:00001B58                 ;org 1B58h
.rdata$r:00001B58 ; COMDAT (pick any)
.rdata$r:00001B58                 public ??_R2nsCharSetProber@@8
.rdata$r:00001B58 ; nsCharSetProber::`RTTI Base Class Array'
.rdata$r:00001B58 ??_R2nsCharSetProber@@8 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8
.rdata$r:00001B58                                         ; DATA XREF: .rdata$r:00001B54o
.rdata$r:00001B58                                         ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001B5C                 db    0
.rdata$r:00001B5D                 align 10h
.rdata$r:00001B5D _rdata$r        ends
.rdata$r:00001B5D
.rdata$r:00001B60 ; ===========================================================================
.rdata$r:00001B60
.rdata$r:00001B60 ; Segment type: Pure data
.rdata$r:00001B60 ; Segment permissions: Read
.rdata$r:00001B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B60                 assume cs:_rdata$r
.rdata$r:00001B60                 ;org 1B60h
.rdata$r:00001B60 ; COMDAT (pick any)
.rdata$r:00001B60                 public ??_R1A@?0A@EA@nsCharSetProber@@8
.rdata$r:00001B60 ; nsCharSetProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001B60 ??_R1A@?0A@EA@nsCharSetProber@@8 dd offset ??_R0?AVnsCharSetProber@@@8
.rdata$r:00001B60                                         ; DATA XREF: .rdata$r:nsCharSetProber::`RTTI Base Class Array'o
.rdata$r:00001B60                                         ; .rdata$r:00001D10o ...
.rdata$r:00001B60                                         ; nsCharSetProber `RTTI Type Descriptor'
.rdata$r:00001B64                 db    0
.rdata$r:00001B65                 db    0
.rdata$r:00001B66                 db    0
.rdata$r:00001B67                 db    0
.rdata$r:00001B68                 db    0
.rdata$r:00001B69                 db    0
.rdata$r:00001B6A                 db    0
.rdata$r:00001B6B                 db    0
.rdata$r:00001B6C                 db 0FFh
.rdata$r:00001B6D                 db 0FFh
.rdata$r:00001B6E                 db 0FFh
.rdata$r:00001B6F                 db 0FFh
.rdata$r:00001B70                 db    0
.rdata$r:00001B71                 db    0
.rdata$r:00001B72                 db    0
.rdata$r:00001B73                 db    0
.rdata$r:00001B74                 db  40h ; @
.rdata$r:00001B75                 db    0
.rdata$r:00001B76                 db    0
.rdata$r:00001B77                 db    0
.rdata$r:00001B78                 dd offset ??_R3nsCharSetProber@@8 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B78 _rdata$r        ends
.rdata$r:00001B78
.rdata$r:00001B7C ; ===========================================================================
.rdata$r:00001B7C
.rdata$r:00001B7C ; Segment type: Pure data
.rdata$r:00001B7C ; Segment permissions: Read
.rdata$r:00001B7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001B7C                 assume cs:_rdata$r
.rdata$r:00001B7C                 ;org 1B7Ch
.rdata$r:00001B7C ; COMDAT (pick any)
.rdata$r:00001B7C                 public ??_R4JapaneseContextAnalysis@@6B@
.rdata$r:00001B7C ; const JapaneseContextAnalysis::`RTTI Complete Object Locator'
.rdata$r:00001B7C ??_R4JapaneseContextAnalysis@@6B@ db    0 ; DATA XREF: .rdata:000019B0o
.rdata$r:00001B7D                 db    0
.rdata$r:00001B7E                 db    0
.rdata$r:00001B7F                 db    0
.rdata$r:00001B80                 db    0
.rdata$r:00001B81                 db    0
.rdata$r:00001B82                 db    0
.rdata$r:00001B83                 db    0
.rdata$r:00001B84                 db    0
.rdata$r:00001B85                 db    0
.rdata$r:00001B86                 db    0
.rdata$r:00001B87                 db    0
.rdata$r:00001B88                 dd offset ??_R0?AVJapaneseContextAnalysis@@@8 ; JapaneseContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001B8C                 dd offset ??_R3JapaneseContextAnalysis@@8 ; JapaneseContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001B8C _rdata$r        ends
.rdata$r:00001B8C
.data$r:00001B90 ; ===========================================================================
.data$r:00001B90
.data$r:00001B90 ; Segment type: Pure data
.data$r:00001B90 ; Segment permissions: Read/Write
.data$r:00001B90 _data$r         segment dword public 'DATA' use32
.data$r:00001B90                 assume cs:_data$r
.data$r:00001B90                 ;org 1B90h
.data$r:00001B90 ; COMDAT (pick any)
.data$r:00001B90                 public ??_R0?AVJapaneseContextAnalysis@@@8
.data$r:00001B90 ; class JapaneseContextAnalysis `RTTI Type Descriptor'
.data$r:00001B90 ??_R0?AVJapaneseContextAnalysis@@@8 dd offset ??_7type_info@@6B@
.data$r:00001B90                                         ; DATA XREF: .rdata$r:00001B88o
.data$r:00001B90                                         ; .rdata$r:JapaneseContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001B90                                         ; const type_info::`vftable'
.data$r:00001B94                 align 8
.data$r:00001B98 a_?avjapaneseco db '.?AVJapaneseContextAnalysis@@',0
.data$r:00001BB6                 align 4
.data$r:00001BB6 _data$r         ends
.data$r:00001BB6
.rdata$r:00001BB8 ; ===========================================================================
.rdata$r:00001BB8
.rdata$r:00001BB8 ; Segment type: Pure data
.rdata$r:00001BB8 ; Segment permissions: Read
.rdata$r:00001BB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BB8                 assume cs:_rdata$r
.rdata$r:00001BB8                 ;org 1BB8h
.rdata$r:00001BB8 ; COMDAT (pick any)
.rdata$r:00001BB8                 public ??_R3JapaneseContextAnalysis@@8
.rdata$r:00001BB8 ; JapaneseContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BB8 ??_R3JapaneseContextAnalysis@@8 db    0 ; DATA XREF: .rdata$r:00001B8Co
.rdata$r:00001BB8                                         ; .rdata$r:00001BE8o
.rdata$r:00001BB9                 db    0
.rdata$r:00001BBA                 db    0
.rdata$r:00001BBB                 db    0
.rdata$r:00001BBC                 db    0
.rdata$r:00001BBD                 db    0
.rdata$r:00001BBE                 db    0
.rdata$r:00001BBF                 db    0
.rdata$r:00001BC0                 db    1
.rdata$r:00001BC1                 db    0
.rdata$r:00001BC2                 db    0
.rdata$r:00001BC3                 db    0
.rdata$r:00001BC4                 dd offset ??_R2JapaneseContextAnalysis@@8 ; JapaneseContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001BC4 _rdata$r        ends
.rdata$r:00001BC4
.rdata$r:00001BC8 ; ===========================================================================
.rdata$r:00001BC8
.rdata$r:00001BC8 ; Segment type: Pure data
.rdata$r:00001BC8 ; Segment permissions: Read
.rdata$r:00001BC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BC8                 assume cs:_rdata$r
.rdata$r:00001BC8                 ;org 1BC8h
.rdata$r:00001BC8 ; COMDAT (pick any)
.rdata$r:00001BC8                 public ??_R2JapaneseContextAnalysis@@8
.rdata$r:00001BC8 ; JapaneseContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001BC8 ??_R2JapaneseContextAnalysis@@8 dd offset ??_R1A@?0A@EA@JapaneseContextAnalysis@@8
.rdata$r:00001BC8                                         ; DATA XREF: .rdata$r:00001BC4o
.rdata$r:00001BC8                                         ; JapaneseContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001BCC                 db    0
.rdata$r:00001BCD                 align 10h
.rdata$r:00001BCD _rdata$r        ends
.rdata$r:00001BCD
.rdata$r:00001BD0 ; ===========================================================================
.rdata$r:00001BD0
.rdata$r:00001BD0 ; Segment type: Pure data
.rdata$r:00001BD0 ; Segment permissions: Read
.rdata$r:00001BD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BD0                 assume cs:_rdata$r
.rdata$r:00001BD0                 ;org 1BD0h
.rdata$r:00001BD0 ; COMDAT (pick any)
.rdata$r:00001BD0                 public ??_R1A@?0A@EA@JapaneseContextAnalysis@@8
.rdata$r:00001BD0 ; JapaneseContextAnalysis::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001BD0 ??_R1A@?0A@EA@JapaneseContextAnalysis@@8 dd offset ??_R0?AVJapaneseContextAnalysis@@@8
.rdata$r:00001BD0                                         ; DATA XREF: .rdata$r:JapaneseContextAnalysis::`RTTI Base Class Array'o
.rdata$r:00001BD0                                         ; .rdata$r:00001C38o ...
.rdata$r:00001BD0                                         ; JapaneseContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001BD4                 db    0
.rdata$r:00001BD5                 db    0
.rdata$r:00001BD6                 db    0
.rdata$r:00001BD7                 db    0
.rdata$r:00001BD8                 db    0
.rdata$r:00001BD9                 db    0
.rdata$r:00001BDA                 db    0
.rdata$r:00001BDB                 db    0
.rdata$r:00001BDC                 db 0FFh
.rdata$r:00001BDD                 db 0FFh
.rdata$r:00001BDE                 db 0FFh
.rdata$r:00001BDF                 db 0FFh
.rdata$r:00001BE0                 db    0
.rdata$r:00001BE1                 db    0
.rdata$r:00001BE2                 db    0
.rdata$r:00001BE3                 db    0
.rdata$r:00001BE4                 db  40h ; @
.rdata$r:00001BE5                 db    0
.rdata$r:00001BE6                 db    0
.rdata$r:00001BE7                 db    0
.rdata$r:00001BE8                 dd offset ??_R3JapaneseContextAnalysis@@8 ; JapaneseContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BE8 _rdata$r        ends
.rdata$r:00001BE8
.rdata$r:00001BEC ; ===========================================================================
.rdata$r:00001BEC
.rdata$r:00001BEC ; Segment type: Pure data
.rdata$r:00001BEC ; Segment permissions: Read
.rdata$r:00001BEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001BEC                 assume cs:_rdata$r
.rdata$r:00001BEC                 ;org 1BECh
.rdata$r:00001BEC ; COMDAT (pick any)
.rdata$r:00001BEC                 public ??_R4SJISContextAnalysis@@6B@
.rdata$r:00001BEC ; const SJISContextAnalysis::`RTTI Complete Object Locator'
.rdata$r:00001BEC ??_R4SJISContextAnalysis@@6B@ db    0   ; DATA XREF: .rdata:000019BCo
.rdata$r:00001BED                 db    0
.rdata$r:00001BEE                 db    0
.rdata$r:00001BEF                 db    0
.rdata$r:00001BF0                 db    0
.rdata$r:00001BF1                 db    0
.rdata$r:00001BF2                 db    0
.rdata$r:00001BF3                 db    0
.rdata$r:00001BF4                 db    0
.rdata$r:00001BF5                 db    0
.rdata$r:00001BF6                 db    0
.rdata$r:00001BF7                 db    0
.rdata$r:00001BF8                 dd offset ??_R0?AVSJISContextAnalysis@@@8 ; SJISContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001BFC                 dd offset ??_R3SJISContextAnalysis@@8 ; SJISContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001BFC _rdata$r        ends
.rdata$r:00001BFC
.data$r:00001C00 ; ===========================================================================
.data$r:00001C00
.data$r:00001C00 ; Segment type: Pure data
.data$r:00001C00 ; Segment permissions: Read/Write
.data$r:00001C00 _data$r         segment dword public 'DATA' use32
.data$r:00001C00                 assume cs:_data$r
.data$r:00001C00                 ;org 1C00h
.data$r:00001C00 ; COMDAT (pick any)
.data$r:00001C00                 public ??_R0?AVSJISContextAnalysis@@@8
.data$r:00001C00 ; class SJISContextAnalysis `RTTI Type Descriptor'
.data$r:00001C00 ??_R0?AVSJISContextAnalysis@@@8 dd offset ??_7type_info@@6B@
.data$r:00001C00                                         ; DATA XREF: .rdata$r:00001BF8o
.data$r:00001C00                                         ; .rdata$r:SJISContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001C00                                         ; const type_info::`vftable'
.data$r:00001C04                 align 8
.data$r:00001C08 a_?avsjiscontex db '.?AVSJISContextAnalysis@@',0
.data$r:00001C22                 align 4
.data$r:00001C22 _data$r         ends
.data$r:00001C22
.rdata$r:00001C24 ; ===========================================================================
.rdata$r:00001C24
.rdata$r:00001C24 ; Segment type: Pure data
.rdata$r:00001C24 ; Segment permissions: Read
.rdata$r:00001C24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C24                 assume cs:_rdata$r
.rdata$r:00001C24                 ;org 1C24h
.rdata$r:00001C24 ; COMDAT (pick any)
.rdata$r:00001C24                 public ??_R3SJISContextAnalysis@@8
.rdata$r:00001C24 ; SJISContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C24 ??_R3SJISContextAnalysis@@8 db    0     ; DATA XREF: .rdata$r:00001BFCo
.rdata$r:00001C24                                         ; .rdata$r:00001C58o
.rdata$r:00001C25                 db    0
.rdata$r:00001C26                 db    0
.rdata$r:00001C27                 db    0
.rdata$r:00001C28                 db    0
.rdata$r:00001C29                 db    0
.rdata$r:00001C2A                 db    0
.rdata$r:00001C2B                 db    0
.rdata$r:00001C2C                 db    2
.rdata$r:00001C2D                 db    0
.rdata$r:00001C2E                 db    0
.rdata$r:00001C2F                 db    0
.rdata$r:00001C30                 dd offset ??_R2SJISContextAnalysis@@8 ; SJISContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001C30 _rdata$r        ends
.rdata$r:00001C30
.rdata$r:00001C34 ; ===========================================================================
.rdata$r:00001C34
.rdata$r:00001C34 ; Segment type: Pure data
.rdata$r:00001C34 ; Segment permissions: Read
.rdata$r:00001C34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C34                 assume cs:_rdata$r
.rdata$r:00001C34                 ;org 1C34h
.rdata$r:00001C34 ; COMDAT (pick any)
.rdata$r:00001C34                 public ??_R2SJISContextAnalysis@@8
.rdata$r:00001C34 ; SJISContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001C34 ??_R2SJISContextAnalysis@@8 dd offset ??_R1A@?0A@EA@SJISContextAnalysis@@8
.rdata$r:00001C34                                         ; DATA XREF: .rdata$r:00001C30o
.rdata$r:00001C34                                         ; SJISContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C38                 dd offset ??_R1A@?0A@EA@JapaneseContextAnalysis@@8 ; JapaneseContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001C3C                 db    0
.rdata$r:00001C3D                 align 10h
.rdata$r:00001C3D _rdata$r        ends
.rdata$r:00001C3D
.rdata$r:00001C40 ; ===========================================================================
.rdata$r:00001C40
.rdata$r:00001C40 ; Segment type: Pure data
.rdata$r:00001C40 ; Segment permissions: Read
.rdata$r:00001C40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C40                 assume cs:_rdata$r
.rdata$r:00001C40                 ;org 1C40h
.rdata$r:00001C40 ; COMDAT (pick any)
.rdata$r:00001C40                 public ??_R1A@?0A@EA@SJISContextAnalysis@@8
.rdata$r:00001C40 ; SJISContextAnalysis::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001C40 ??_R1A@?0A@EA@SJISContextAnalysis@@8 dd offset ??_R0?AVSJISContextAnalysis@@@8
.rdata$r:00001C40                                         ; DATA XREF: .rdata$r:SJISContextAnalysis::`RTTI Base Class Array'o
.rdata$r:00001C40                                         ; SJISContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001C44                 db    1
.rdata$r:00001C45                 db    0
.rdata$r:00001C46                 db    0
.rdata$r:00001C47                 db    0
.rdata$r:00001C48                 db    0
.rdata$r:00001C49                 db    0
.rdata$r:00001C4A                 db    0
.rdata$r:00001C4B                 db    0
.rdata$r:00001C4C                 db 0FFh
.rdata$r:00001C4D                 db 0FFh
.rdata$r:00001C4E                 db 0FFh
.rdata$r:00001C4F                 db 0FFh
.rdata$r:00001C50                 db    0
.rdata$r:00001C51                 db    0
.rdata$r:00001C52                 db    0
.rdata$r:00001C53                 db    0
.rdata$r:00001C54                 db  40h ; @
.rdata$r:00001C55                 db    0
.rdata$r:00001C56                 db    0
.rdata$r:00001C57                 db    0
.rdata$r:00001C58                 dd offset ??_R3SJISContextAnalysis@@8 ; SJISContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C58 _rdata$r        ends
.rdata$r:00001C58
.rdata$r:00001C5C ; ===========================================================================
.rdata$r:00001C5C
.rdata$r:00001C5C ; Segment type: Pure data
.rdata$r:00001C5C ; Segment permissions: Read
.rdata$r:00001C5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C5C                 assume cs:_rdata$r
.rdata$r:00001C5C                 ;org 1C5Ch
.rdata$r:00001C5C ; COMDAT (pick any)
.rdata$r:00001C5C                 public ??_R4EUCJPContextAnalysis@@6B@
.rdata$r:00001C5C ; const EUCJPContextAnalysis::`RTTI Complete Object Locator'
.rdata$r:00001C5C ??_R4EUCJPContextAnalysis@@6B@ db    0  ; DATA XREF: .rdata:000019C8o
.rdata$r:00001C5D                 db    0
.rdata$r:00001C5E                 db    0
.rdata$r:00001C5F                 db    0
.rdata$r:00001C60                 db    0
.rdata$r:00001C61                 db    0
.rdata$r:00001C62                 db    0
.rdata$r:00001C63                 db    0
.rdata$r:00001C64                 db    0
.rdata$r:00001C65                 db    0
.rdata$r:00001C66                 db    0
.rdata$r:00001C67                 db    0
.rdata$r:00001C68                 dd offset ??_R0?AVEUCJPContextAnalysis@@@8 ; EUCJPContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001C6C                 dd offset ??_R3EUCJPContextAnalysis@@8 ; EUCJPContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C6C _rdata$r        ends
.rdata$r:00001C6C
.data$r:00001C70 ; ===========================================================================
.data$r:00001C70
.data$r:00001C70 ; Segment type: Pure data
.data$r:00001C70 ; Segment permissions: Read/Write
.data$r:00001C70 _data$r         segment dword public 'DATA' use32
.data$r:00001C70                 assume cs:_data$r
.data$r:00001C70                 ;org 1C70h
.data$r:00001C70 ; COMDAT (pick any)
.data$r:00001C70                 public ??_R0?AVEUCJPContextAnalysis@@@8
.data$r:00001C70 ; class EUCJPContextAnalysis `RTTI Type Descriptor'
.data$r:00001C70 ??_R0?AVEUCJPContextAnalysis@@@8 dd offset ??_7type_info@@6B@
.data$r:00001C70                                         ; DATA XREF: .rdata$r:00001C68o
.data$r:00001C70                                         ; .rdata$r:EUCJPContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001C70                                         ; const type_info::`vftable'
.data$r:00001C74                 align 8
.data$r:00001C78 a_?aveucjpconte db '.?AVEUCJPContextAnalysis@@',0
.data$r:00001C93                 align 4
.data$r:00001C93 _data$r         ends
.data$r:00001C93
.rdata$r:00001C94 ; ===========================================================================
.rdata$r:00001C94
.rdata$r:00001C94 ; Segment type: Pure data
.rdata$r:00001C94 ; Segment permissions: Read
.rdata$r:00001C94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001C94                 assume cs:_rdata$r
.rdata$r:00001C94                 ;org 1C94h
.rdata$r:00001C94 ; COMDAT (pick any)
.rdata$r:00001C94                 public ??_R3EUCJPContextAnalysis@@8
.rdata$r:00001C94 ; EUCJPContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001C94 ??_R3EUCJPContextAnalysis@@8 db    0    ; DATA XREF: .rdata$r:00001C6Co
.rdata$r:00001C94                                         ; .rdata$r:00001CC8o
.rdata$r:00001C95                 db    0
.rdata$r:00001C96                 db    0
.rdata$r:00001C97                 db    0
.rdata$r:00001C98                 db    0
.rdata$r:00001C99                 db    0
.rdata$r:00001C9A                 db    0
.rdata$r:00001C9B                 db    0
.rdata$r:00001C9C                 db    2
.rdata$r:00001C9D                 db    0
.rdata$r:00001C9E                 db    0
.rdata$r:00001C9F                 db    0
.rdata$r:00001CA0                 dd offset ??_R2EUCJPContextAnalysis@@8 ; EUCJPContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001CA0 _rdata$r        ends
.rdata$r:00001CA0
.rdata$r:00001CA4 ; ===========================================================================
.rdata$r:00001CA4
.rdata$r:00001CA4 ; Segment type: Pure data
.rdata$r:00001CA4 ; Segment permissions: Read
.rdata$r:00001CA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CA4                 assume cs:_rdata$r
.rdata$r:00001CA4                 ;org 1CA4h
.rdata$r:00001CA4 ; COMDAT (pick any)
.rdata$r:00001CA4                 public ??_R2EUCJPContextAnalysis@@8
.rdata$r:00001CA4 ; EUCJPContextAnalysis::`RTTI Base Class Array'
.rdata$r:00001CA4 ??_R2EUCJPContextAnalysis@@8 dd offset ??_R1A@?0A@EA@EUCJPContextAnalysis@@8
.rdata$r:00001CA4                                         ; DATA XREF: .rdata$r:00001CA0o
.rdata$r:00001CA4                                         ; EUCJPContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001CA8                 dd offset ??_R1A@?0A@EA@JapaneseContextAnalysis@@8 ; JapaneseContextAnalysis::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001CAC                 db    0
.rdata$r:00001CAD                 align 10h
.rdata$r:00001CAD _rdata$r        ends
.rdata$r:00001CAD
.rdata$r:00001CB0 ; ===========================================================================
.rdata$r:00001CB0
.rdata$r:00001CB0 ; Segment type: Pure data
.rdata$r:00001CB0 ; Segment permissions: Read
.rdata$r:00001CB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CB0                 assume cs:_rdata$r
.rdata$r:00001CB0                 ;org 1CB0h
.rdata$r:00001CB0 ; COMDAT (pick any)
.rdata$r:00001CB0                 public ??_R1A@?0A@EA@EUCJPContextAnalysis@@8
.rdata$r:00001CB0 ; EUCJPContextAnalysis::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001CB0 ??_R1A@?0A@EA@EUCJPContextAnalysis@@8 dd offset ??_R0?AVEUCJPContextAnalysis@@@8
.rdata$r:00001CB0                                         ; DATA XREF: .rdata$r:EUCJPContextAnalysis::`RTTI Base Class Array'o
.rdata$r:00001CB0                                         ; EUCJPContextAnalysis `RTTI Type Descriptor'
.rdata$r:00001CB4                 db    1
.rdata$r:00001CB5                 db    0
.rdata$r:00001CB6                 db    0
.rdata$r:00001CB7                 db    0
.rdata$r:00001CB8                 db    0
.rdata$r:00001CB9                 db    0
.rdata$r:00001CBA                 db    0
.rdata$r:00001CBB                 db    0
.rdata$r:00001CBC                 db 0FFh
.rdata$r:00001CBD                 db 0FFh
.rdata$r:00001CBE                 db 0FFh
.rdata$r:00001CBF                 db 0FFh
.rdata$r:00001CC0                 db    0
.rdata$r:00001CC1                 db    0
.rdata$r:00001CC2                 db    0
.rdata$r:00001CC3                 db    0
.rdata$r:00001CC4                 db  40h ; @
.rdata$r:00001CC5                 db    0
.rdata$r:00001CC6                 db    0
.rdata$r:00001CC7                 db    0
.rdata$r:00001CC8                 dd offset ??_R3EUCJPContextAnalysis@@8 ; EUCJPContextAnalysis::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CC8 _rdata$r        ends
.rdata$r:00001CC8
.rdata$r:00001CCC ; ===========================================================================
.rdata$r:00001CCC
.rdata$r:00001CCC ; Segment type: Pure data
.rdata$r:00001CCC ; Segment permissions: Read
.rdata$r:00001CCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CCC                 assume cs:_rdata$r
.rdata$r:00001CCC                 ;org 1CCCh
.rdata$r:00001CCC ; COMDAT (pick any)
.rdata$r:00001CCC                 public ??_R4nsSJISProber@@6B@
.rdata$r:00001CCC ; const nsSJISProber::`RTTI Complete Object Locator'
.rdata$r:00001CCC ??_R4nsSJISProber@@6B@ db    0          ; DATA XREF: .rdata:000019D4o
.rdata$r:00001CCD                 db    0
.rdata$r:00001CCE                 db    0
.rdata$r:00001CCF                 db    0
.rdata$r:00001CD0                 db    0
.rdata$r:00001CD1                 db    0
.rdata$r:00001CD2                 db    0
.rdata$r:00001CD3                 db    0
.rdata$r:00001CD4                 db    0
.rdata$r:00001CD5                 db    0
.rdata$r:00001CD6                 db    0
.rdata$r:00001CD7                 db    0
.rdata$r:00001CD8                 dd offset ??_R0?AVnsSJISProber@@@8 ; nsSJISProber `RTTI Type Descriptor'
.rdata$r:00001CDC                 dd offset ??_R3nsSJISProber@@8 ; nsSJISProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CDC _rdata$r        ends
.rdata$r:00001CDC
.data$r:00001CE0 ; ===========================================================================
.data$r:00001CE0
.data$r:00001CE0 ; Segment type: Pure data
.data$r:00001CE0 ; Segment permissions: Read/Write
.data$r:00001CE0 _data$r         segment dword public 'DATA' use32
.data$r:00001CE0                 assume cs:_data$r
.data$r:00001CE0                 ;org 1CE0h
.data$r:00001CE0 ; COMDAT (pick any)
.data$r:00001CE0                 public ??_R0?AVnsSJISProber@@@8
.data$r:00001CE0 ; class nsSJISProber `RTTI Type Descriptor'
.data$r:00001CE0 ??_R0?AVnsSJISProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001CE0                                         ; DATA XREF: .rdata$r:00001CD8o
.data$r:00001CE0                                         ; .rdata$r:nsSJISProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001CE0                                         ; const type_info::`vftable'
.data$r:00001CE4                 align 8
.data$r:00001CE8 a_?avnssjisprob db '.?AVnsSJISProber@@',0
.data$r:00001CFB                 align 4
.data$r:00001CFB _data$r         ends
.data$r:00001CFB
.rdata$r:00001CFC ; ===========================================================================
.rdata$r:00001CFC
.rdata$r:00001CFC ; Segment type: Pure data
.rdata$r:00001CFC ; Segment permissions: Read
.rdata$r:00001CFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001CFC                 assume cs:_rdata$r
.rdata$r:00001CFC                 ;org 1CFCh
.rdata$r:00001CFC ; COMDAT (pick any)
.rdata$r:00001CFC                 public ??_R3nsSJISProber@@8
.rdata$r:00001CFC ; nsSJISProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001CFC ??_R3nsSJISProber@@8 db    0            ; DATA XREF: .rdata$r:00001CDCo
.rdata$r:00001CFC                                         ; .rdata$r:00001D30o
.rdata$r:00001CFD                 db    0
.rdata$r:00001CFE                 db    0
.rdata$r:00001CFF                 db    0
.rdata$r:00001D00                 db    0
.rdata$r:00001D01                 db    0
.rdata$r:00001D02                 db    0
.rdata$r:00001D03                 db    0
.rdata$r:00001D04                 db    2
.rdata$r:00001D05                 db    0
.rdata$r:00001D06                 db    0
.rdata$r:00001D07                 db    0
.rdata$r:00001D08                 dd offset ??_R2nsSJISProber@@8 ; nsSJISProber::`RTTI Base Class Array'
.rdata$r:00001D08 _rdata$r        ends
.rdata$r:00001D08
.rdata$r:00001D0C ; ===========================================================================
.rdata$r:00001D0C
.rdata$r:00001D0C ; Segment type: Pure data
.rdata$r:00001D0C ; Segment permissions: Read
.rdata$r:00001D0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D0C                 assume cs:_rdata$r
.rdata$r:00001D0C                 ;org 1D0Ch
.rdata$r:00001D0C ; COMDAT (pick any)
.rdata$r:00001D0C                 public ??_R2nsSJISProber@@8
.rdata$r:00001D0C ; nsSJISProber::`RTTI Base Class Array'
.rdata$r:00001D0C ??_R2nsSJISProber@@8 dd offset ??_R1A@?0A@EA@nsSJISProber@@8
.rdata$r:00001D0C                                         ; DATA XREF: .rdata$r:00001D08o
.rdata$r:00001D0C                                         ; nsSJISProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D10                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D14                 db    0
.rdata$r:00001D15                 align 4
.rdata$r:00001D15 _rdata$r        ends
.rdata$r:00001D15
.rdata$r:00001D18 ; ===========================================================================
.rdata$r:00001D18
.rdata$r:00001D18 ; Segment type: Pure data
.rdata$r:00001D18 ; Segment permissions: Read
.rdata$r:00001D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D18                 assume cs:_rdata$r
.rdata$r:00001D18                 ;org 1D18h
.rdata$r:00001D18 ; COMDAT (pick any)
.rdata$r:00001D18                 public ??_R1A@?0A@EA@nsSJISProber@@8
.rdata$r:00001D18 ; nsSJISProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001D18 ??_R1A@?0A@EA@nsSJISProber@@8 dd offset ??_R0?AVnsSJISProber@@@8
.rdata$r:00001D18                                         ; DATA XREF: .rdata$r:nsSJISProber::`RTTI Base Class Array'o
.rdata$r:00001D18                                         ; nsSJISProber `RTTI Type Descriptor'
.rdata$r:00001D1C                 db    1
.rdata$r:00001D1D                 db    0
.rdata$r:00001D1E                 db    0
.rdata$r:00001D1F                 db    0
.rdata$r:00001D20                 db    0
.rdata$r:00001D21                 db    0
.rdata$r:00001D22                 db    0
.rdata$r:00001D23                 db    0
.rdata$r:00001D24                 db 0FFh
.rdata$r:00001D25                 db 0FFh
.rdata$r:00001D26                 db 0FFh
.rdata$r:00001D27                 db 0FFh
.rdata$r:00001D28                 db    0
.rdata$r:00001D29                 db    0
.rdata$r:00001D2A                 db    0
.rdata$r:00001D2B                 db    0
.rdata$r:00001D2C                 db  40h ; @
.rdata$r:00001D2D                 db    0
.rdata$r:00001D2E                 db    0
.rdata$r:00001D2F                 db    0
.rdata$r:00001D30                 dd offset ??_R3nsSJISProber@@8 ; nsSJISProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D30 _rdata$r        ends
.rdata$r:00001D30
.rdata$r:00001D34 ; ===========================================================================
.rdata$r:00001D34
.rdata$r:00001D34 ; Segment type: Pure data
.rdata$r:00001D34 ; Segment permissions: Read
.rdata$r:00001D34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D34                 assume cs:_rdata$r
.rdata$r:00001D34                 ;org 1D34h
.rdata$r:00001D34 ; COMDAT (pick any)
.rdata$r:00001D34                 public ??_R4nsUTF8Prober@@6B@
.rdata$r:00001D34 ; const nsUTF8Prober::`RTTI Complete Object Locator'
.rdata$r:00001D34 ??_R4nsUTF8Prober@@6B@ db    0          ; DATA XREF: .rdata:00001A00o
.rdata$r:00001D35                 db    0
.rdata$r:00001D36                 db    0
.rdata$r:00001D37                 db    0
.rdata$r:00001D38                 db    0
.rdata$r:00001D39                 db    0
.rdata$r:00001D3A                 db    0
.rdata$r:00001D3B                 db    0
.rdata$r:00001D3C                 db    0
.rdata$r:00001D3D                 db    0
.rdata$r:00001D3E                 db    0
.rdata$r:00001D3F                 db    0
.rdata$r:00001D40                 dd offset ??_R0?AVnsUTF8Prober@@@8 ; nsUTF8Prober `RTTI Type Descriptor'
.rdata$r:00001D44                 dd offset ??_R3nsUTF8Prober@@8 ; nsUTF8Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D44 _rdata$r        ends
.rdata$r:00001D44
.data$r:00001D48 ; ===========================================================================
.data$r:00001D48
.data$r:00001D48 ; Segment type: Pure data
.data$r:00001D48 ; Segment permissions: Read/Write
.data$r:00001D48 _data$r         segment dword public 'DATA' use32
.data$r:00001D48                 assume cs:_data$r
.data$r:00001D48                 ;org 1D48h
.data$r:00001D48 ; COMDAT (pick any)
.data$r:00001D48                 public ??_R0?AVnsUTF8Prober@@@8
.data$r:00001D48 ; class nsUTF8Prober `RTTI Type Descriptor'
.data$r:00001D48 ??_R0?AVnsUTF8Prober@@@8 dd offset ??_7type_info@@6B@
.data$r:00001D48                                         ; DATA XREF: .rdata$r:00001D40o
.data$r:00001D48                                         ; .rdata$r:nsUTF8Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001D48                                         ; const type_info::`vftable'
.data$r:00001D4C                 align 10h
.data$r:00001D50 a_?avnsutf8prob db '.?AVnsUTF8Prober@@',0
.data$r:00001D63                 align 4
.data$r:00001D63 _data$r         ends
.data$r:00001D63
.rdata$r:00001D64 ; ===========================================================================
.rdata$r:00001D64
.rdata$r:00001D64 ; Segment type: Pure data
.rdata$r:00001D64 ; Segment permissions: Read
.rdata$r:00001D64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D64                 assume cs:_rdata$r
.rdata$r:00001D64                 ;org 1D64h
.rdata$r:00001D64 ; COMDAT (pick any)
.rdata$r:00001D64                 public ??_R3nsUTF8Prober@@8
.rdata$r:00001D64 ; nsUTF8Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D64 ??_R3nsUTF8Prober@@8 db    0            ; DATA XREF: .rdata$r:00001D44o
.rdata$r:00001D64                                         ; .rdata$r:00001D98o
.rdata$r:00001D65                 db    0
.rdata$r:00001D66                 db    0
.rdata$r:00001D67                 db    0
.rdata$r:00001D68                 db    0
.rdata$r:00001D69                 db    0
.rdata$r:00001D6A                 db    0
.rdata$r:00001D6B                 db    0
.rdata$r:00001D6C                 db    2
.rdata$r:00001D6D                 db    0
.rdata$r:00001D6E                 db    0
.rdata$r:00001D6F                 db    0
.rdata$r:00001D70                 dd offset ??_R2nsUTF8Prober@@8 ; nsUTF8Prober::`RTTI Base Class Array'
.rdata$r:00001D70 _rdata$r        ends
.rdata$r:00001D70
.rdata$r:00001D74 ; ===========================================================================
.rdata$r:00001D74
.rdata$r:00001D74 ; Segment type: Pure data
.rdata$r:00001D74 ; Segment permissions: Read
.rdata$r:00001D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D74                 assume cs:_rdata$r
.rdata$r:00001D74                 ;org 1D74h
.rdata$r:00001D74 ; COMDAT (pick any)
.rdata$r:00001D74                 public ??_R2nsUTF8Prober@@8
.rdata$r:00001D74 ; nsUTF8Prober::`RTTI Base Class Array'
.rdata$r:00001D74 ??_R2nsUTF8Prober@@8 dd offset ??_R1A@?0A@EA@nsUTF8Prober@@8
.rdata$r:00001D74                                         ; DATA XREF: .rdata$r:00001D70o
.rdata$r:00001D74                                         ; nsUTF8Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D78                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001D7C                 db    0
.rdata$r:00001D7D                 align 10h
.rdata$r:00001D7D _rdata$r        ends
.rdata$r:00001D7D
.rdata$r:00001D80 ; ===========================================================================
.rdata$r:00001D80
.rdata$r:00001D80 ; Segment type: Pure data
.rdata$r:00001D80 ; Segment permissions: Read
.rdata$r:00001D80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D80                 assume cs:_rdata$r
.rdata$r:00001D80                 ;org 1D80h
.rdata$r:00001D80 ; COMDAT (pick any)
.rdata$r:00001D80                 public ??_R1A@?0A@EA@nsUTF8Prober@@8
.rdata$r:00001D80 ; nsUTF8Prober::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001D80 ??_R1A@?0A@EA@nsUTF8Prober@@8 dd offset ??_R0?AVnsUTF8Prober@@@8
.rdata$r:00001D80                                         ; DATA XREF: .rdata$r:nsUTF8Prober::`RTTI Base Class Array'o
.rdata$r:00001D80                                         ; nsUTF8Prober `RTTI Type Descriptor'
.rdata$r:00001D84                 db    1
.rdata$r:00001D85                 db    0
.rdata$r:00001D86                 db    0
.rdata$r:00001D87                 db    0
.rdata$r:00001D88                 db    0
.rdata$r:00001D89                 db    0
.rdata$r:00001D8A                 db    0
.rdata$r:00001D8B                 db    0
.rdata$r:00001D8C                 db 0FFh
.rdata$r:00001D8D                 db 0FFh
.rdata$r:00001D8E                 db 0FFh
.rdata$r:00001D8F                 db 0FFh
.rdata$r:00001D90                 db    0
.rdata$r:00001D91                 db    0
.rdata$r:00001D92                 db    0
.rdata$r:00001D93                 db    0
.rdata$r:00001D94                 db  40h ; @
.rdata$r:00001D95                 db    0
.rdata$r:00001D96                 db    0
.rdata$r:00001D97                 db    0
.rdata$r:00001D98                 dd offset ??_R3nsUTF8Prober@@8 ; nsUTF8Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001D98 _rdata$r        ends
.rdata$r:00001D98
.rdata$r:00001D9C ; ===========================================================================
.rdata$r:00001D9C
.rdata$r:00001D9C ; Segment type: Pure data
.rdata$r:00001D9C ; Segment permissions: Read
.rdata$r:00001D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001D9C                 assume cs:_rdata$r
.rdata$r:00001D9C                 ;org 1D9Ch
.rdata$r:00001D9C ; COMDAT (pick any)
.rdata$r:00001D9C                 public ??_R4nsEUCJPProber@@6B@
.rdata$r:00001D9C ; const nsEUCJPProber::`RTTI Complete Object Locator'
.rdata$r:00001D9C ??_R4nsEUCJPProber@@6B@ db    0         ; DATA XREF: .rdata:00001A28o
.rdata$r:00001D9D                 db    0
.rdata$r:00001D9E                 db    0
.rdata$r:00001D9F                 db    0
.rdata$r:00001DA0                 db    0
.rdata$r:00001DA1                 db    0
.rdata$r:00001DA2                 db    0
.rdata$r:00001DA3                 db    0
.rdata$r:00001DA4                 db    0
.rdata$r:00001DA5                 db    0
.rdata$r:00001DA6                 db    0
.rdata$r:00001DA7                 db    0
.rdata$r:00001DA8                 dd offset ??_R0?AVnsEUCJPProber@@@8 ; nsEUCJPProber `RTTI Type Descriptor'
.rdata$r:00001DAC                 dd offset ??_R3nsEUCJPProber@@8 ; nsEUCJPProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001DAC _rdata$r        ends
.rdata$r:00001DAC
.data$r:00001DB0 ; ===========================================================================
.data$r:00001DB0
.data$r:00001DB0 ; Segment type: Pure data
.data$r:00001DB0 ; Segment permissions: Read/Write
.data$r:00001DB0 _data$r         segment dword public 'DATA' use32
.data$r:00001DB0                 assume cs:_data$r
.data$r:00001DB0                 ;org 1DB0h
.data$r:00001DB0 ; COMDAT (pick any)
.data$r:00001DB0                 public ??_R0?AVnsEUCJPProber@@@8
.data$r:00001DB0 ; class nsEUCJPProber `RTTI Type Descriptor'
.data$r:00001DB0 ??_R0?AVnsEUCJPProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001DB0                                         ; DATA XREF: .rdata$r:00001DA8o
.data$r:00001DB0                                         ; .rdata$r:nsEUCJPProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001DB0                                         ; const type_info::`vftable'
.data$r:00001DB4                 align 8
.data$r:00001DB8 a_?avnseucjppro db '.?AVnsEUCJPProber@@',0
.data$r:00001DB8 _data$r         ends
.data$r:00001DB8
.rdata$r:00001DCC ; ===========================================================================
.rdata$r:00001DCC
.rdata$r:00001DCC ; Segment type: Pure data
.rdata$r:00001DCC ; Segment permissions: Read
.rdata$r:00001DCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DCC                 assume cs:_rdata$r
.rdata$r:00001DCC                 ;org 1DCCh
.rdata$r:00001DCC ; COMDAT (pick any)
.rdata$r:00001DCC                 public ??_R3nsEUCJPProber@@8
.rdata$r:00001DCC ; nsEUCJPProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001DCC ??_R3nsEUCJPProber@@8 db    0           ; DATA XREF: .rdata$r:00001DACo
.rdata$r:00001DCC                                         ; .rdata$r:00001E00o
.rdata$r:00001DCD                 db    0
.rdata$r:00001DCE                 db    0
.rdata$r:00001DCF                 db    0
.rdata$r:00001DD0                 db    0
.rdata$r:00001DD1                 db    0
.rdata$r:00001DD2                 db    0
.rdata$r:00001DD3                 db    0
.rdata$r:00001DD4                 db    2
.rdata$r:00001DD5                 db    0
.rdata$r:00001DD6                 db    0
.rdata$r:00001DD7                 db    0
.rdata$r:00001DD8                 dd offset ??_R2nsEUCJPProber@@8 ; nsEUCJPProber::`RTTI Base Class Array'
.rdata$r:00001DD8 _rdata$r        ends
.rdata$r:00001DD8
.rdata$r:00001DDC ; ===========================================================================
.rdata$r:00001DDC
.rdata$r:00001DDC ; Segment type: Pure data
.rdata$r:00001DDC ; Segment permissions: Read
.rdata$r:00001DDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DDC                 assume cs:_rdata$r
.rdata$r:00001DDC                 ;org 1DDCh
.rdata$r:00001DDC ; COMDAT (pick any)
.rdata$r:00001DDC                 public ??_R2nsEUCJPProber@@8
.rdata$r:00001DDC ; nsEUCJPProber::`RTTI Base Class Array'
.rdata$r:00001DDC ??_R2nsEUCJPProber@@8 dd offset ??_R1A@?0A@EA@nsEUCJPProber@@8
.rdata$r:00001DDC                                         ; DATA XREF: .rdata$r:00001DD8o
.rdata$r:00001DDC                                         ; nsEUCJPProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001DE0                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001DE4                 db    0
.rdata$r:00001DE5                 align 4
.rdata$r:00001DE5 _rdata$r        ends
.rdata$r:00001DE5
.rdata$r:00001DE8 ; ===========================================================================
.rdata$r:00001DE8
.rdata$r:00001DE8 ; Segment type: Pure data
.rdata$r:00001DE8 ; Segment permissions: Read
.rdata$r:00001DE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001DE8                 assume cs:_rdata$r
.rdata$r:00001DE8                 ;org 1DE8h
.rdata$r:00001DE8 ; COMDAT (pick any)
.rdata$r:00001DE8                 public ??_R1A@?0A@EA@nsEUCJPProber@@8
.rdata$r:00001DE8 ; nsEUCJPProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001DE8 ??_R1A@?0A@EA@nsEUCJPProber@@8 dd offset ??_R0?AVnsEUCJPProber@@@8
.rdata$r:00001DE8                                         ; DATA XREF: .rdata$r:nsEUCJPProber::`RTTI Base Class Array'o
.rdata$r:00001DE8                                         ; nsEUCJPProber `RTTI Type Descriptor'
.rdata$r:00001DEC                 db    1
.rdata$r:00001DED                 db    0
.rdata$r:00001DEE                 db    0
.rdata$r:00001DEF                 db    0
.rdata$r:00001DF0                 db    0
.rdata$r:00001DF1                 db    0
.rdata$r:00001DF2                 db    0
.rdata$r:00001DF3                 db    0
.rdata$r:00001DF4                 db 0FFh
.rdata$r:00001DF5                 db 0FFh
.rdata$r:00001DF6                 db 0FFh
.rdata$r:00001DF7                 db 0FFh
.rdata$r:00001DF8                 db    0
.rdata$r:00001DF9                 db    0
.rdata$r:00001DFA                 db    0
.rdata$r:00001DFB                 db    0
.rdata$r:00001DFC                 db  40h ; @
.rdata$r:00001DFD                 db    0
.rdata$r:00001DFE                 db    0
.rdata$r:00001DFF                 db    0
.rdata$r:00001E00                 dd offset ??_R3nsEUCJPProber@@8 ; nsEUCJPProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E00 _rdata$r        ends
.rdata$r:00001E00
.rdata$r:00001E04 ; ===========================================================================
.rdata$r:00001E04
.rdata$r:00001E04 ; Segment type: Pure data
.rdata$r:00001E04 ; Segment permissions: Read
.rdata$r:00001E04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E04                 assume cs:_rdata$r
.rdata$r:00001E04                 ;org 1E04h
.rdata$r:00001E04 ; COMDAT (pick any)
.rdata$r:00001E04                 public ??_R4nsGB18030Prober@@6B@
.rdata$r:00001E04 ; const nsGB18030Prober::`RTTI Complete Object Locator'
.rdata$r:00001E04 ??_R4nsGB18030Prober@@6B@ db    0       ; DATA XREF: .rdata:00001A50o
.rdata$r:00001E05                 db    0
.rdata$r:00001E06                 db    0
.rdata$r:00001E07                 db    0
.rdata$r:00001E08                 db    0
.rdata$r:00001E09                 db    0
.rdata$r:00001E0A                 db    0
.rdata$r:00001E0B                 db    0
.rdata$r:00001E0C                 db    0
.rdata$r:00001E0D                 db    0
.rdata$r:00001E0E                 db    0
.rdata$r:00001E0F                 db    0
.rdata$r:00001E10                 dd offset ??_R0?AVnsGB18030Prober@@@8 ; nsGB18030Prober `RTTI Type Descriptor'
.rdata$r:00001E14                 dd offset ??_R3nsGB18030Prober@@8 ; nsGB18030Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E14 _rdata$r        ends
.rdata$r:00001E14
.data$r:00001E18 ; ===========================================================================
.data$r:00001E18
.data$r:00001E18 ; Segment type: Pure data
.data$r:00001E18 ; Segment permissions: Read/Write
.data$r:00001E18 _data$r         segment dword public 'DATA' use32
.data$r:00001E18                 assume cs:_data$r
.data$r:00001E18                 ;org 1E18h
.data$r:00001E18 ; COMDAT (pick any)
.data$r:00001E18                 public ??_R0?AVnsGB18030Prober@@@8
.data$r:00001E18 ; class nsGB18030Prober `RTTI Type Descriptor'
.data$r:00001E18 ??_R0?AVnsGB18030Prober@@@8 dd offset ??_7type_info@@6B@
.data$r:00001E18                                         ; DATA XREF: .rdata$r:00001E10o
.data$r:00001E18                                         ; .rdata$r:nsGB18030Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001E18                                         ; const type_info::`vftable'
.data$r:00001E1C                 align 10h
.data$r:00001E20 a_?avnsgb18030p db '.?AVnsGB18030Prober@@',0
.data$r:00001E36                 align 4
.data$r:00001E36 _data$r         ends
.data$r:00001E36
.rdata$r:00001E38 ; ===========================================================================
.rdata$r:00001E38
.rdata$r:00001E38 ; Segment type: Pure data
.rdata$r:00001E38 ; Segment permissions: Read
.rdata$r:00001E38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E38                 assume cs:_rdata$r
.rdata$r:00001E38                 ;org 1E38h
.rdata$r:00001E38 ; COMDAT (pick any)
.rdata$r:00001E38                 public ??_R3nsGB18030Prober@@8
.rdata$r:00001E38 ; nsGB18030Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E38 ??_R3nsGB18030Prober@@8 db    0         ; DATA XREF: .rdata$r:00001E14o
.rdata$r:00001E38                                         ; .rdata$r:00001E6Co
.rdata$r:00001E39                 db    0
.rdata$r:00001E3A                 db    0
.rdata$r:00001E3B                 db    0
.rdata$r:00001E3C                 db    0
.rdata$r:00001E3D                 db    0
.rdata$r:00001E3E                 db    0
.rdata$r:00001E3F                 db    0
.rdata$r:00001E40                 db    2
.rdata$r:00001E41                 db    0
.rdata$r:00001E42                 db    0
.rdata$r:00001E43                 db    0
.rdata$r:00001E44                 dd offset ??_R2nsGB18030Prober@@8 ; nsGB18030Prober::`RTTI Base Class Array'
.rdata$r:00001E44 _rdata$r        ends
.rdata$r:00001E44
.rdata$r:00001E48 ; ===========================================================================
.rdata$r:00001E48
.rdata$r:00001E48 ; Segment type: Pure data
.rdata$r:00001E48 ; Segment permissions: Read
.rdata$r:00001E48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E48                 assume cs:_rdata$r
.rdata$r:00001E48                 ;org 1E48h
.rdata$r:00001E48 ; COMDAT (pick any)
.rdata$r:00001E48                 public ??_R2nsGB18030Prober@@8
.rdata$r:00001E48 ; nsGB18030Prober::`RTTI Base Class Array'
.rdata$r:00001E48 ??_R2nsGB18030Prober@@8 dd offset ??_R1A@?0A@EA@nsGB18030Prober@@8
.rdata$r:00001E48                                         ; DATA XREF: .rdata$r:00001E44o
.rdata$r:00001E48                                         ; nsGB18030Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E4C                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001E50                 db    0
.rdata$r:00001E51                 align 4
.rdata$r:00001E51 _rdata$r        ends
.rdata$r:00001E51
.rdata$r:00001E54 ; ===========================================================================
.rdata$r:00001E54
.rdata$r:00001E54 ; Segment type: Pure data
.rdata$r:00001E54 ; Segment permissions: Read
.rdata$r:00001E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E54                 assume cs:_rdata$r
.rdata$r:00001E54                 ;org 1E54h
.rdata$r:00001E54 ; COMDAT (pick any)
.rdata$r:00001E54                 public ??_R1A@?0A@EA@nsGB18030Prober@@8
.rdata$r:00001E54 ; nsGB18030Prober::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001E54 ??_R1A@?0A@EA@nsGB18030Prober@@8 dd offset ??_R0?AVnsGB18030Prober@@@8
.rdata$r:00001E54                                         ; DATA XREF: .rdata$r:nsGB18030Prober::`RTTI Base Class Array'o
.rdata$r:00001E54                                         ; nsGB18030Prober `RTTI Type Descriptor'
.rdata$r:00001E58                 db    1
.rdata$r:00001E59                 db    0
.rdata$r:00001E5A                 db    0
.rdata$r:00001E5B                 db    0
.rdata$r:00001E5C                 db    0
.rdata$r:00001E5D                 db    0
.rdata$r:00001E5E                 db    0
.rdata$r:00001E5F                 db    0
.rdata$r:00001E60                 db 0FFh
.rdata$r:00001E61                 db 0FFh
.rdata$r:00001E62                 db 0FFh
.rdata$r:00001E63                 db 0FFh
.rdata$r:00001E64                 db    0
.rdata$r:00001E65                 db    0
.rdata$r:00001E66                 db    0
.rdata$r:00001E67                 db    0
.rdata$r:00001E68                 db  40h ; @
.rdata$r:00001E69                 db    0
.rdata$r:00001E6A                 db    0
.rdata$r:00001E6B                 db    0
.rdata$r:00001E6C                 dd offset ??_R3nsGB18030Prober@@8 ; nsGB18030Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E6C _rdata$r        ends
.rdata$r:00001E6C
.rdata$r:00001E70 ; ===========================================================================
.rdata$r:00001E70
.rdata$r:00001E70 ; Segment type: Pure data
.rdata$r:00001E70 ; Segment permissions: Read
.rdata$r:00001E70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001E70                 assume cs:_rdata$r
.rdata$r:00001E70                 ;org 1E70h
.rdata$r:00001E70 ; COMDAT (pick any)
.rdata$r:00001E70                 public ??_R4nsEUCKRProber@@6B@
.rdata$r:00001E70 ; const nsEUCKRProber::`RTTI Complete Object Locator'
.rdata$r:00001E70 ??_R4nsEUCKRProber@@6B@ db    0         ; DATA XREF: .rdata:00001A78o
.rdata$r:00001E71                 db    0
.rdata$r:00001E72                 db    0
.rdata$r:00001E73                 db    0
.rdata$r:00001E74                 db    0
.rdata$r:00001E75                 db    0
.rdata$r:00001E76                 db    0
.rdata$r:00001E77                 db    0
.rdata$r:00001E78                 db    0
.rdata$r:00001E79                 db    0
.rdata$r:00001E7A                 db    0
.rdata$r:00001E7B                 db    0
.rdata$r:00001E7C                 dd offset ??_R0?AVnsEUCKRProber@@@8 ; nsEUCKRProber `RTTI Type Descriptor'
.rdata$r:00001E80                 dd offset ??_R3nsEUCKRProber@@8 ; nsEUCKRProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001E80 _rdata$r        ends
.rdata$r:00001E80
.data$r:00001E84 ; ===========================================================================
.data$r:00001E84
.data$r:00001E84 ; Segment type: Pure data
.data$r:00001E84 ; Segment permissions: Read/Write
.data$r:00001E84 _data$r         segment dword public 'DATA' use32
.data$r:00001E84                 assume cs:_data$r
.data$r:00001E84                 ;org 1E84h
.data$r:00001E84 ; COMDAT (pick any)
.data$r:00001E84                 public ??_R0?AVnsEUCKRProber@@@8
.data$r:00001E84 ; class nsEUCKRProber `RTTI Type Descriptor'
.data$r:00001E84 ??_R0?AVnsEUCKRProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001E84                                         ; DATA XREF: .rdata$r:00001E7Co
.data$r:00001E84                                         ; .rdata$r:nsEUCKRProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001E84                                         ; const type_info::`vftable'
.data$r:00001E88                 db    0
.data$r:00001E89                 db    0
.data$r:00001E8A                 db    0
.data$r:00001E8B                 db    0
.data$r:00001E8C                 db  2Eh ; .
.data$r:00001E8D                 db  3Fh ; ?
.data$r:00001E8E                 db  41h ; A
.data$r:00001E8F                 db  56h ; V
.data$r:00001E90                 db  6Eh ; n
.data$r:00001E91                 db  73h ; s
.data$r:00001E92                 db  45h ; E
.data$r:00001E93                 db  55h ; U
.data$r:00001E94                 db  43h ; C
.data$r:00001E95                 db  4Bh ; K
.data$r:00001E96                 db  52h ; R
.data$r:00001E97                 db  50h ; P
.data$r:00001E98                 db  72h ; r
.data$r:00001E99                 db  6Fh ; o
.data$r:00001E9A                 db  62h ; b
.data$r:00001E9B                 db  65h ; e
.data$r:00001E9C                 db  72h ; r
.data$r:00001E9D                 db  40h ; @
.data$r:00001E9E                 db  40h ; @
.data$r:00001E9F                 db    0
.data$r:00001E9F _data$r         ends
.data$r:00001E9F
.rdata$r:00001EA0 ; ===========================================================================
.rdata$r:00001EA0
.rdata$r:00001EA0 ; Segment type: Pure data
.rdata$r:00001EA0 ; Segment permissions: Read
.rdata$r:00001EA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EA0                 assume cs:_rdata$r
.rdata$r:00001EA0                 ;org 1EA0h
.rdata$r:00001EA0 ; COMDAT (pick any)
.rdata$r:00001EA0                 public ??_R3nsEUCKRProber@@8
.rdata$r:00001EA0 ; nsEUCKRProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EA0 ??_R3nsEUCKRProber@@8 db    0           ; DATA XREF: .rdata$r:00001E80o
.rdata$r:00001EA0                                         ; .rdata$r:00001ED4o
.rdata$r:00001EA1                 db    0
.rdata$r:00001EA2                 db    0
.rdata$r:00001EA3                 db    0
.rdata$r:00001EA4                 db    0
.rdata$r:00001EA5                 db    0
.rdata$r:00001EA6                 db    0
.rdata$r:00001EA7                 db    0
.rdata$r:00001EA8                 db    2
.rdata$r:00001EA9                 db    0
.rdata$r:00001EAA                 db    0
.rdata$r:00001EAB                 db    0
.rdata$r:00001EAC                 dd offset ??_R2nsEUCKRProber@@8 ; nsEUCKRProber::`RTTI Base Class Array'
.rdata$r:00001EAC _rdata$r        ends
.rdata$r:00001EAC
.rdata$r:00001EB0 ; ===========================================================================
.rdata$r:00001EB0
.rdata$r:00001EB0 ; Segment type: Pure data
.rdata$r:00001EB0 ; Segment permissions: Read
.rdata$r:00001EB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EB0                 assume cs:_rdata$r
.rdata$r:00001EB0                 ;org 1EB0h
.rdata$r:00001EB0 ; COMDAT (pick any)
.rdata$r:00001EB0                 public ??_R2nsEUCKRProber@@8
.rdata$r:00001EB0 ; nsEUCKRProber::`RTTI Base Class Array'
.rdata$r:00001EB0 ??_R2nsEUCKRProber@@8 dd offset ??_R1A@?0A@EA@nsEUCKRProber@@8
.rdata$r:00001EB0                                         ; DATA XREF: .rdata$r:00001EACo
.rdata$r:00001EB0                                         ; nsEUCKRProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EB4                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001EB8                 db    0
.rdata$r:00001EB9                 align 4
.rdata$r:00001EB9 _rdata$r        ends
.rdata$r:00001EB9
.rdata$r:00001EBC ; ===========================================================================
.rdata$r:00001EBC
.rdata$r:00001EBC ; Segment type: Pure data
.rdata$r:00001EBC ; Segment permissions: Read
.rdata$r:00001EBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001EBC                 assume cs:_rdata$r
.rdata$r:00001EBC                 ;org 1EBCh
.rdata$r:00001EBC ; COMDAT (pick any)
.rdata$r:00001EBC                 public ??_R1A@?0A@EA@nsEUCKRProber@@8
.rdata$r:00001EBC ; nsEUCKRProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001EBC ??_R1A@?0A@EA@nsEUCKRProber@@8 dd offset ??_R0?AVnsEUCKRProber@@@8
.rdata$r:00001EBC                                         ; DATA XREF: .rdata$r:nsEUCKRProber::`RTTI Base Class Array'o
.rdata$r:00001EBC                                         ; nsEUCKRProber `RTTI Type Descriptor'
.rdata$r:00001EC0                 db    1
.rdata$r:00001EC1                 db    0
.rdata$r:00001EC2                 db    0
.rdata$r:00001EC3                 db    0
.rdata$r:00001EC4                 db    0
.rdata$r:00001EC5                 db    0
.rdata$r:00001EC6                 db    0
.rdata$r:00001EC7                 db    0
.rdata$r:00001EC8                 db 0FFh
.rdata$r:00001EC9                 db 0FFh
.rdata$r:00001ECA                 db 0FFh
.rdata$r:00001ECB                 db 0FFh
.rdata$r:00001ECC                 db    0
.rdata$r:00001ECD                 db    0
.rdata$r:00001ECE                 db    0
.rdata$r:00001ECF                 db    0
.rdata$r:00001ED0                 db  40h ; @
.rdata$r:00001ED1                 db    0
.rdata$r:00001ED2                 db    0
.rdata$r:00001ED3                 db    0
.rdata$r:00001ED4                 dd offset ??_R3nsEUCKRProber@@8 ; nsEUCKRProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001ED4 _rdata$r        ends
.rdata$r:00001ED4
.rdata$r:00001ED8 ; ===========================================================================
.rdata$r:00001ED8
.rdata$r:00001ED8 ; Segment type: Pure data
.rdata$r:00001ED8 ; Segment permissions: Read
.rdata$r:00001ED8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001ED8                 assume cs:_rdata$r
.rdata$r:00001ED8                 ;org 1ED8h
.rdata$r:00001ED8 ; COMDAT (pick any)
.rdata$r:00001ED8                 public ??_R4nsBig5Prober@@6B@
.rdata$r:00001ED8 ; const nsBig5Prober::`RTTI Complete Object Locator'
.rdata$r:00001ED8 ??_R4nsBig5Prober@@6B@ db    0          ; DATA XREF: .rdata:00001AA0o
.rdata$r:00001ED9                 db    0
.rdata$r:00001EDA                 db    0
.rdata$r:00001EDB                 db    0
.rdata$r:00001EDC                 db    0
.rdata$r:00001EDD                 db    0
.rdata$r:00001EDE                 db    0
.rdata$r:00001EDF                 db    0
.rdata$r:00001EE0                 db    0
.rdata$r:00001EE1                 db    0
.rdata$r:00001EE2                 db    0
.rdata$r:00001EE3                 db    0
.rdata$r:00001EE4                 dd offset ??_R0?AVnsBig5Prober@@@8 ; nsBig5Prober `RTTI Type Descriptor'
.rdata$r:00001EE8                 dd offset ??_R3nsBig5Prober@@8 ; nsBig5Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001EE8 _rdata$r        ends
.rdata$r:00001EE8
.data$r:00001EEC ; ===========================================================================
.data$r:00001EEC
.data$r:00001EEC ; Segment type: Pure data
.data$r:00001EEC ; Segment permissions: Read/Write
.data$r:00001EEC _data$r         segment dword public 'DATA' use32
.data$r:00001EEC                 assume cs:_data$r
.data$r:00001EEC                 ;org 1EECh
.data$r:00001EEC ; COMDAT (pick any)
.data$r:00001EEC                 public ??_R0?AVnsBig5Prober@@@8
.data$r:00001EEC ; class nsBig5Prober `RTTI Type Descriptor'
.data$r:00001EEC ??_R0?AVnsBig5Prober@@@8 dd offset ??_7type_info@@6B@
.data$r:00001EEC                                         ; DATA XREF: .rdata$r:00001EE4o
.data$r:00001EEC                                         ; .rdata$r:nsBig5Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001EEC                                         ; const type_info::`vftable'
.data$r:00001EF0                 db    0
.data$r:00001EF1                 db    0
.data$r:00001EF2                 db    0
.data$r:00001EF3                 db    0
.data$r:00001EF4                 db  2Eh ; .
.data$r:00001EF5                 db  3Fh ; ?
.data$r:00001EF6                 db  41h ; A
.data$r:00001EF7                 db  56h ; V
.data$r:00001EF8                 db  6Eh ; n
.data$r:00001EF9                 db  73h ; s
.data$r:00001EFA                 db  42h ; B
.data$r:00001EFB                 db  69h ; i
.data$r:00001EFC                 db  67h ; g
.data$r:00001EFD                 db  35h ; 5
.data$r:00001EFE                 db  50h ; P
.data$r:00001EFF                 db  72h ; r
.data$r:00001F00                 db  6Fh ; o
.data$r:00001F01                 db  62h ; b
.data$r:00001F02                 db  65h ; e
.data$r:00001F03                 db  72h ; r
.data$r:00001F04                 db  40h ; @
.data$r:00001F05                 db  40h ; @
.data$r:00001F06                 db    0
.data$r:00001F07                 align 4
.data$r:00001F07 _data$r         ends
.data$r:00001F07
.rdata$r:00001F08 ; ===========================================================================
.rdata$r:00001F08
.rdata$r:00001F08 ; Segment type: Pure data
.rdata$r:00001F08 ; Segment permissions: Read
.rdata$r:00001F08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F08                 assume cs:_rdata$r
.rdata$r:00001F08                 ;org 1F08h
.rdata$r:00001F08 ; COMDAT (pick any)
.rdata$r:00001F08                 public ??_R3nsBig5Prober@@8
.rdata$r:00001F08 ; nsBig5Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F08 ??_R3nsBig5Prober@@8 db    0            ; DATA XREF: .rdata$r:00001EE8o
.rdata$r:00001F08                                         ; .rdata$r:00001F3Co
.rdata$r:00001F09                 db    0
.rdata$r:00001F0A                 db    0
.rdata$r:00001F0B                 db    0
.rdata$r:00001F0C                 db    0
.rdata$r:00001F0D                 db    0
.rdata$r:00001F0E                 db    0
.rdata$r:00001F0F                 db    0
.rdata$r:00001F10                 db    2
.rdata$r:00001F11                 db    0
.rdata$r:00001F12                 db    0
.rdata$r:00001F13                 db    0
.rdata$r:00001F14                 dd offset ??_R2nsBig5Prober@@8 ; nsBig5Prober::`RTTI Base Class Array'
.rdata$r:00001F14 _rdata$r        ends
.rdata$r:00001F14
.rdata$r:00001F18 ; ===========================================================================
.rdata$r:00001F18
.rdata$r:00001F18 ; Segment type: Pure data
.rdata$r:00001F18 ; Segment permissions: Read
.rdata$r:00001F18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F18                 assume cs:_rdata$r
.rdata$r:00001F18                 ;org 1F18h
.rdata$r:00001F18 ; COMDAT (pick any)
.rdata$r:00001F18                 public ??_R2nsBig5Prober@@8
.rdata$r:00001F18 ; nsBig5Prober::`RTTI Base Class Array'
.rdata$r:00001F18 ??_R2nsBig5Prober@@8 dd offset ??_R1A@?0A@EA@nsBig5Prober@@8
.rdata$r:00001F18                                         ; DATA XREF: .rdata$r:00001F14o
.rdata$r:00001F18                                         ; nsBig5Prober::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F1C                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F20                 db    0
.rdata$r:00001F21                 align 4
.rdata$r:00001F21 _rdata$r        ends
.rdata$r:00001F21
.rdata$r:00001F24 ; ===========================================================================
.rdata$r:00001F24
.rdata$r:00001F24 ; Segment type: Pure data
.rdata$r:00001F24 ; Segment permissions: Read
.rdata$r:00001F24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F24                 assume cs:_rdata$r
.rdata$r:00001F24                 ;org 1F24h
.rdata$r:00001F24 ; COMDAT (pick any)
.rdata$r:00001F24                 public ??_R1A@?0A@EA@nsBig5Prober@@8
.rdata$r:00001F24 ; nsBig5Prober::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F24 ??_R1A@?0A@EA@nsBig5Prober@@8 dd offset ??_R0?AVnsBig5Prober@@@8
.rdata$r:00001F24                                         ; DATA XREF: .rdata$r:nsBig5Prober::`RTTI Base Class Array'o
.rdata$r:00001F24                                         ; nsBig5Prober `RTTI Type Descriptor'
.rdata$r:00001F28                 db    1
.rdata$r:00001F29                 db    0
.rdata$r:00001F2A                 db    0
.rdata$r:00001F2B                 db    0
.rdata$r:00001F2C                 db    0
.rdata$r:00001F2D                 db    0
.rdata$r:00001F2E                 db    0
.rdata$r:00001F2F                 db    0
.rdata$r:00001F30                 db 0FFh
.rdata$r:00001F31                 db 0FFh
.rdata$r:00001F32                 db 0FFh
.rdata$r:00001F33                 db 0FFh
.rdata$r:00001F34                 db    0
.rdata$r:00001F35                 db    0
.rdata$r:00001F36                 db    0
.rdata$r:00001F37                 db    0
.rdata$r:00001F38                 db  40h ; @
.rdata$r:00001F39                 db    0
.rdata$r:00001F3A                 db    0
.rdata$r:00001F3B                 db    0
.rdata$r:00001F3C                 dd offset ??_R3nsBig5Prober@@8 ; nsBig5Prober::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F3C _rdata$r        ends
.rdata$r:00001F3C
.rdata$r:00001F40 ; ===========================================================================
.rdata$r:00001F40
.rdata$r:00001F40 ; Segment type: Pure data
.rdata$r:00001F40 ; Segment permissions: Read
.rdata$r:00001F40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F40                 assume cs:_rdata$r
.rdata$r:00001F40                 ;org 1F40h
.rdata$r:00001F40 ; COMDAT (pick any)
.rdata$r:00001F40                 public ??_R4nsEUCTWProber@@6B@
.rdata$r:00001F40 ; const nsEUCTWProber::`RTTI Complete Object Locator'
.rdata$r:00001F40 ??_R4nsEUCTWProber@@6B@ db    0         ; DATA XREF: .rdata:00001AC8o
.rdata$r:00001F41                 db    0
.rdata$r:00001F42                 db    0
.rdata$r:00001F43                 db    0
.rdata$r:00001F44                 db    0
.rdata$r:00001F45                 db    0
.rdata$r:00001F46                 db    0
.rdata$r:00001F47                 db    0
.rdata$r:00001F48                 db    0
.rdata$r:00001F49                 db    0
.rdata$r:00001F4A                 db    0
.rdata$r:00001F4B                 db    0
.rdata$r:00001F4C                 dd offset ??_R0?AVnsEUCTWProber@@@8 ; nsEUCTWProber `RTTI Type Descriptor'
.rdata$r:00001F50                 dd offset ??_R3nsEUCTWProber@@8 ; nsEUCTWProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F50 _rdata$r        ends
.rdata$r:00001F50
.data$r:00001F54 ; ===========================================================================
.data$r:00001F54
.data$r:00001F54 ; Segment type: Pure data
.data$r:00001F54 ; Segment permissions: Read/Write
.data$r:00001F54 _data$r         segment dword public 'DATA' use32
.data$r:00001F54                 assume cs:_data$r
.data$r:00001F54                 ;org 1F54h
.data$r:00001F54 ; COMDAT (pick any)
.data$r:00001F54                 public ??_R0?AVnsEUCTWProber@@@8
.data$r:00001F54 ; class nsEUCTWProber `RTTI Type Descriptor'
.data$r:00001F54 ??_R0?AVnsEUCTWProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001F54                                         ; DATA XREF: .rdata$r:00001F4Co
.data$r:00001F54                                         ; .rdata$r:nsEUCTWProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001F54                                         ; const type_info::`vftable'
.data$r:00001F58                 db    0
.data$r:00001F59                 db    0
.data$r:00001F5A                 db    0
.data$r:00001F5B                 db    0
.data$r:00001F5C                 db  2Eh ; .
.data$r:00001F5D                 db  3Fh ; ?
.data$r:00001F5E                 db  41h ; A
.data$r:00001F5F                 db  56h ; V
.data$r:00001F60                 db  6Eh ; n
.data$r:00001F61                 db  73h ; s
.data$r:00001F62                 db  45h ; E
.data$r:00001F63                 db  55h ; U
.data$r:00001F64                 db  43h ; C
.data$r:00001F65                 db  54h ; T
.data$r:00001F66                 db  57h ; W
.data$r:00001F67                 db  50h ; P
.data$r:00001F68                 db  72h ; r
.data$r:00001F69                 db  6Fh ; o
.data$r:00001F6A                 db  62h ; b
.data$r:00001F6B                 db  65h ; e
.data$r:00001F6C                 db  72h ; r
.data$r:00001F6D                 db  40h ; @
.data$r:00001F6E                 db  40h ; @
.data$r:00001F6F                 db    0
.data$r:00001F6F _data$r         ends
.data$r:00001F6F
.rdata$r:00001F70 ; ===========================================================================
.rdata$r:00001F70
.rdata$r:00001F70 ; Segment type: Pure data
.rdata$r:00001F70 ; Segment permissions: Read
.rdata$r:00001F70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F70                 assume cs:_rdata$r
.rdata$r:00001F70                 ;org 1F70h
.rdata$r:00001F70 ; COMDAT (pick any)
.rdata$r:00001F70                 public ??_R3nsEUCTWProber@@8
.rdata$r:00001F70 ; nsEUCTWProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F70 ??_R3nsEUCTWProber@@8 db    0           ; DATA XREF: .rdata$r:00001F50o
.rdata$r:00001F70                                         ; .rdata$r:00001FA4o
.rdata$r:00001F71                 db    0
.rdata$r:00001F72                 db    0
.rdata$r:00001F73                 db    0
.rdata$r:00001F74                 db    0
.rdata$r:00001F75                 db    0
.rdata$r:00001F76                 db    0
.rdata$r:00001F77                 db    0
.rdata$r:00001F78                 db    2
.rdata$r:00001F79                 db    0
.rdata$r:00001F7A                 db    0
.rdata$r:00001F7B                 db    0
.rdata$r:00001F7C                 dd offset ??_R2nsEUCTWProber@@8 ; nsEUCTWProber::`RTTI Base Class Array'
.rdata$r:00001F7C _rdata$r        ends
.rdata$r:00001F7C
.rdata$r:00001F80 ; ===========================================================================
.rdata$r:00001F80
.rdata$r:00001F80 ; Segment type: Pure data
.rdata$r:00001F80 ; Segment permissions: Read
.rdata$r:00001F80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F80                 assume cs:_rdata$r
.rdata$r:00001F80                 ;org 1F80h
.rdata$r:00001F80 ; COMDAT (pick any)
.rdata$r:00001F80                 public ??_R2nsEUCTWProber@@8
.rdata$r:00001F80 ; nsEUCTWProber::`RTTI Base Class Array'
.rdata$r:00001F80 ??_R2nsEUCTWProber@@8 dd offset ??_R1A@?0A@EA@nsEUCTWProber@@8
.rdata$r:00001F80                                         ; DATA XREF: .rdata$r:00001F7Co
.rdata$r:00001F80                                         ; nsEUCTWProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F84                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001F88                 db    0
.rdata$r:00001F89                 align 4
.rdata$r:00001F89 _rdata$r        ends
.rdata$r:00001F89
.rdata$r:00001F8C ; ===========================================================================
.rdata$r:00001F8C
.rdata$r:00001F8C ; Segment type: Pure data
.rdata$r:00001F8C ; Segment permissions: Read
.rdata$r:00001F8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F8C                 assume cs:_rdata$r
.rdata$r:00001F8C                 ;org 1F8Ch
.rdata$r:00001F8C ; COMDAT (pick any)
.rdata$r:00001F8C                 public ??_R1A@?0A@EA@nsEUCTWProber@@8
.rdata$r:00001F8C ; nsEUCTWProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001F8C ??_R1A@?0A@EA@nsEUCTWProber@@8 dd offset ??_R0?AVnsEUCTWProber@@@8
.rdata$r:00001F8C                                         ; DATA XREF: .rdata$r:nsEUCTWProber::`RTTI Base Class Array'o
.rdata$r:00001F8C                                         ; nsEUCTWProber `RTTI Type Descriptor'
.rdata$r:00001F90                 db    1
.rdata$r:00001F91                 db    0
.rdata$r:00001F92                 db    0
.rdata$r:00001F93                 db    0
.rdata$r:00001F94                 db    0
.rdata$r:00001F95                 db    0
.rdata$r:00001F96                 db    0
.rdata$r:00001F97                 db    0
.rdata$r:00001F98                 db 0FFh
.rdata$r:00001F99                 db 0FFh
.rdata$r:00001F9A                 db 0FFh
.rdata$r:00001F9B                 db 0FFh
.rdata$r:00001F9C                 db    0
.rdata$r:00001F9D                 db    0
.rdata$r:00001F9E                 db    0
.rdata$r:00001F9F                 db    0
.rdata$r:00001FA0                 db  40h ; @
.rdata$r:00001FA1                 db    0
.rdata$r:00001FA2                 db    0
.rdata$r:00001FA3                 db    0
.rdata$r:00001FA4                 dd offset ??_R3nsEUCTWProber@@8 ; nsEUCTWProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FA4 _rdata$r        ends
.rdata$r:00001FA4
.rdata$r:00001FA8 ; ===========================================================================
.rdata$r:00001FA8
.rdata$r:00001FA8 ; Segment type: Pure data
.rdata$r:00001FA8 ; Segment permissions: Read
.rdata$r:00001FA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FA8                 assume cs:_rdata$r
.rdata$r:00001FA8                 ;org 1FA8h
.rdata$r:00001FA8 ; COMDAT (pick any)
.rdata$r:00001FA8                 public ??_R4nsMBCSGroupProber@@6B@
.rdata$r:00001FA8 ; const nsMBCSGroupProber::`RTTI Complete Object Locator'
.rdata$r:00001FA8 ??_R4nsMBCSGroupProber@@6B@ db    0     ; DATA XREF: .rdata:00001AF4o
.rdata$r:00001FA9                 db    0
.rdata$r:00001FAA                 db    0
.rdata$r:00001FAB                 db    0
.rdata$r:00001FAC                 db    0
.rdata$r:00001FAD                 db    0
.rdata$r:00001FAE                 db    0
.rdata$r:00001FAF                 db    0
.rdata$r:00001FB0                 db    0
.rdata$r:00001FB1                 db    0
.rdata$r:00001FB2                 db    0
.rdata$r:00001FB3                 db    0
.rdata$r:00001FB4                 dd offset ??_R0?AVnsMBCSGroupProber@@@8 ; nsMBCSGroupProber `RTTI Type Descriptor'
.rdata$r:00001FB8                 dd offset ??_R3nsMBCSGroupProber@@8 ; nsMBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FB8 _rdata$r        ends
.rdata$r:00001FB8
.data$r:00001FBC ; ===========================================================================
.data$r:00001FBC
.data$r:00001FBC ; Segment type: Pure data
.data$r:00001FBC ; Segment permissions: Read/Write
.data$r:00001FBC _data$r         segment dword public 'DATA' use32
.data$r:00001FBC                 assume cs:_data$r
.data$r:00001FBC                 ;org 1FBCh
.data$r:00001FBC ; COMDAT (pick any)
.data$r:00001FBC                 public ??_R0?AVnsMBCSGroupProber@@@8
.data$r:00001FBC ; class nsMBCSGroupProber `RTTI Type Descriptor'
.data$r:00001FBC ??_R0?AVnsMBCSGroupProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001FBC                                         ; DATA XREF: .rdata$r:00001FB4o
.data$r:00001FBC                                         ; .rdata$r:nsMBCSGroupProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001FBC                                         ; const type_info::`vftable'
.data$r:00001FC0                 db    0
.data$r:00001FC1                 db    0
.data$r:00001FC2                 db    0
.data$r:00001FC3                 db    0
.data$r:00001FC4                 db  2Eh ; .
.data$r:00001FC5                 db  3Fh ; ?
.data$r:00001FC6                 db  41h ; A
.data$r:00001FC7                 db  56h ; V
.data$r:00001FC8                 db  6Eh ; n
.data$r:00001FC9                 db  73h ; s
.data$r:00001FCA                 db  4Dh ; M
.data$r:00001FCB                 db  42h ; B
.data$r:00001FCC                 db  43h ; C
.data$r:00001FCD                 db  53h ; S
.data$r:00001FCE                 db  47h ; G
.data$r:00001FCF                 db  72h ; r
.data$r:00001FD0                 db  6Fh ; o
.data$r:00001FD1                 db  75h ; u
.data$r:00001FD2                 db  70h ; p
.data$r:00001FD3                 db  50h ; P
.data$r:00001FD4                 db  72h ; r
.data$r:00001FD5                 db  6Fh ; o
.data$r:00001FD6                 db  62h ; b
.data$r:00001FD7                 db  65h ; e
.data$r:00001FD8                 db  72h ; r
.data$r:00001FD9                 db  40h ; @
.data$r:00001FDA                 db  40h ; @
.data$r:00001FDB                 db    0
.data$r:00001FDB _data$r         ends
.data$r:00001FDB
.rdata$r:00001FDC ; ===========================================================================
.rdata$r:00001FDC
.rdata$r:00001FDC ; Segment type: Pure data
.rdata$r:00001FDC ; Segment permissions: Read
.rdata$r:00001FDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FDC                 assume cs:_rdata$r
.rdata$r:00001FDC                 ;org 1FDCh
.rdata$r:00001FDC ; COMDAT (pick any)
.rdata$r:00001FDC                 public ??_R3nsMBCSGroupProber@@8
.rdata$r:00001FDC ; nsMBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FDC ??_R3nsMBCSGroupProber@@8 db    0       ; DATA XREF: .rdata$r:00001FB8o
.rdata$r:00001FDC                                         ; .rdata$r:00002010o
.rdata$r:00001FDD                 db    0
.rdata$r:00001FDE                 db    0
.rdata$r:00001FDF                 db    0
.rdata$r:00001FE0                 db    0
.rdata$r:00001FE1                 db    0
.rdata$r:00001FE2                 db    0
.rdata$r:00001FE3                 db    0
.rdata$r:00001FE4                 db    2
.rdata$r:00001FE5                 db    0
.rdata$r:00001FE6                 db    0
.rdata$r:00001FE7                 db    0
.rdata$r:00001FE8                 dd offset ??_R2nsMBCSGroupProber@@8 ; nsMBCSGroupProber::`RTTI Base Class Array'
.rdata$r:00001FE8 _rdata$r        ends
.rdata$r:00001FE8
.rdata$r:00001FEC ; ===========================================================================
.rdata$r:00001FEC
.rdata$r:00001FEC ; Segment type: Pure data
.rdata$r:00001FEC ; Segment permissions: Read
.rdata$r:00001FEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FEC                 assume cs:_rdata$r
.rdata$r:00001FEC                 ;org 1FECh
.rdata$r:00001FEC ; COMDAT (pick any)
.rdata$r:00001FEC                 public ??_R2nsMBCSGroupProber@@8
.rdata$r:00001FEC ; nsMBCSGroupProber::`RTTI Base Class Array'
.rdata$r:00001FEC ??_R2nsMBCSGroupProber@@8 dd offset ??_R1A@?0A@EA@nsMBCSGroupProber@@8
.rdata$r:00001FEC                                         ; DATA XREF: .rdata$r:00001FE8o
.rdata$r:00001FEC                                         ; nsMBCSGroupProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001FF0                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001FF4                 db    0
.rdata$r:00001FF5                 align 4
.rdata$r:00001FF5 _rdata$r        ends
.rdata$r:00001FF5
.rdata$r:00001FF8 ; ===========================================================================
.rdata$r:00001FF8
.rdata$r:00001FF8 ; Segment type: Pure data
.rdata$r:00001FF8 ; Segment permissions: Read
.rdata$r:00001FF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FF8                 assume cs:_rdata$r
.rdata$r:00001FF8                 ;org 1FF8h
.rdata$r:00001FF8 ; COMDAT (pick any)
.rdata$r:00001FF8                 public ??_R1A@?0A@EA@nsMBCSGroupProber@@8
.rdata$r:00001FF8 ; nsMBCSGroupProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001FF8 ??_R1A@?0A@EA@nsMBCSGroupProber@@8 dd offset ??_R0?AVnsMBCSGroupProber@@@8
.rdata$r:00001FF8                                         ; DATA XREF: .rdata$r:nsMBCSGroupProber::`RTTI Base Class Array'o
.rdata$r:00001FF8                                         ; nsMBCSGroupProber `RTTI Type Descriptor'
.rdata$r:00001FFC                 db    1
.rdata$r:00001FFD                 db    0
.rdata$r:00001FFE                 db    0
.rdata$r:00001FFF                 db    0
.rdata$r:00002000                 db    0
.rdata$r:00002001                 db    0
.rdata$r:00002002                 db    0
.rdata$r:00002003                 db    0
.rdata$r:00002004                 db 0FFh
.rdata$r:00002005                 db 0FFh
.rdata$r:00002006                 db 0FFh
.rdata$r:00002007                 db 0FFh
.rdata$r:00002008                 db    0
.rdata$r:00002009                 db    0
.rdata$r:0000200A                 db    0
.rdata$r:0000200B                 db    0
.rdata$r:0000200C                 db  40h ; @
.rdata$r:0000200D                 db    0
.rdata$r:0000200E                 db    0
.rdata$r:0000200F                 db    0
.rdata$r:00002010                 dd offset ??_R3nsMBCSGroupProber@@8 ; nsMBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002010 _rdata$r        ends
.rdata$r:00002010
.rdata:00002014 ; ===========================================================================
.rdata:00002014
.rdata:00002014 ; Segment type: Pure data
.rdata:00002014 ; Segment permissions: Read
.rdata:00002014 _rdata          segment dword public 'DATA' use32
.rdata:00002014                 assume cs:_rdata
.rdata:00002014                 ;org 2014h
.rdata:00002014 ; COMDAT (pick any)
.rdata:00002014                 public __real@00000000
.rdata:00002014 __real@00000000 dd 0                    ; DATA XREF: nsMBCSGroupProber::GetConfidence(void)+Ar
.rdata:00002014 _rdata          ends
.rdata:00002014
.rdata:00002018 ; ===========================================================================
.rdata:00002018
.rdata:00002018 ; Segment type: Pure data
.rdata:00002018 ; Segment permissions: Read
.rdata:00002018 _rdata          segment dword public 'DATA' use32
.rdata:00002018                 assume cs:_rdata
.rdata:00002018                 ;org 2018h
.rdata:00002018 ; COMDAT (pick any)
.rdata:00002018                 public __real@3c23d70a
.rdata:00002018 __real@3c23d70a dd 0.0099999998         ; DATA XREF: nsMBCSGroupProber::GetConfidence(void):loc_6A6r
.rdata:00002018 _rdata          ends
.rdata:00002018
.rdata:0000201C ; ===========================================================================
.rdata:0000201C
.rdata:0000201C ; Segment type: Pure data
.rdata:0000201C ; Segment permissions: Read
.rdata:0000201C _rdata          segment dword public 'DATA' use32
.rdata:0000201C                 assume cs:_rdata
.rdata:0000201C                 ;org 201Ch
.rdata:0000201C ; COMDAT (pick any)
.rdata:0000201C                 public __real@3f7d70a4
.rdata:0000201C __real@3f7d70a4 dd 0.99000001           ; DATA XREF: nsMBCSGroupProber::GetConfidence(void):loc_69Er
.rdata:0000201C _rdata          ends
.rdata:0000201C
UNDEF:00002020 ; ===========================================================================
UNDEF:00002020
UNDEF:00002020 ; Segment type: Externs
UNDEF:00002020 ; UNDEF
UNDEF:00002020                 extrn __purecall:near   ; DATA XREF: .rdata:00001998o
UNDEF:00002020                                         ; .rdata:0000199Co ...
UNDEF:00002024 ; void *__cdecl operator new(unsigned int)
UNDEF:00002024                 extrn ??2@YAPAXI@Z:near ; CODE XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+6Ap
UNDEF:00002024                                         ; nsMBCSGroupProber::nsMBCSGroupProber(uint)+BDp ...
UNDEF:00002028 ; void __cdecl operator delete(void *)
UNDEF:00002028                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$1+4p
UNDEF:00002028                                         ; __unwindfunclet$??0nsMBCSGroupProber@@QAE@I@Z$2+4p ...
UNDEF:0000202C ; public: virtual void * __thiscall nsCharSetProber::`vector deleting destructor'(unsigned int)
UNDEF:0000202C                 extrn ??_EnsCharSetProber@@UAEPAXI@Z:near ; weak
UNDEF:0000202C                                         ; DATA XREF: .rdata:const nsCharSetProber::`vftable'o
UNDEF:00002030 ; void __thiscall JapaneseContextAnalysis::Reset(JapaneseContextAnalysis *__hidden this, bool)
UNDEF:00002030                 extrn ?Reset@JapaneseContextAnalysis@@QAEX_N@Z:near
UNDEF:00002030                                         ; CODE XREF: JapaneseContextAnalysis::JapaneseContextAnalysis(void)+15p
UNDEF:00002034 ; protected: virtual int __thiscall SJISContextAnalysis::GetOrder(char const *, unsigned int *)
UNDEF:00002034                 extrn ?GetOrder@SJISContextAnalysis@@MAEHPBDPAI@Z:near
UNDEF:00002034                                         ; DATA XREF: .rdata:000019C4o
UNDEF:00002038 ; protected: virtual int __thiscall EUCJPContextAnalysis::GetOrder(char const *, unsigned int *)
UNDEF:00002038                 extrn ?GetOrder@EUCJPContextAnalysis@@MAEHPBDPAI@Z:near
UNDEF:00002038                                         ; DATA XREF: .rdata:000019D0o
UNDEF:0000203C ; _DWORD __thiscall EUCTWDistributionAnalysis::EUCTWDistributionAnalysis(EUCTWDistributionAnalysis *__hidden this)
UNDEF:0000203C                 extrn ??0EUCTWDistributionAnalysis@@QAE@XZ:near
UNDEF:0000203C                                         ; CODE XREF: nsEUCTWProber::nsEUCTWProber(bool)+46p
UNDEF:00002040 ; _DWORD __thiscall EUCKRDistributionAnalysis::EUCKRDistributionAnalysis(EUCKRDistributionAnalysis *__hidden this)
UNDEF:00002040                 extrn ??0EUCKRDistributionAnalysis@@QAE@XZ:near
UNDEF:00002040                                         ; CODE XREF: nsEUCKRProber::nsEUCKRProber(bool)+46p
UNDEF:00002044 ; _DWORD __thiscall GB2312DistributionAnalysis::GB2312DistributionAnalysis(GB2312DistributionAnalysis *__hidden this)
UNDEF:00002044                 extrn ??0GB2312DistributionAnalysis@@QAE@XZ:near
UNDEF:00002044                                         ; CODE XREF: nsGB18030Prober::nsGB18030Prober(bool)+46p
UNDEF:00002048 ; _DWORD __thiscall Big5DistributionAnalysis::Big5DistributionAnalysis(Big5DistributionAnalysis *__hidden this)
UNDEF:00002048                 extrn ??0Big5DistributionAnalysis@@QAE@XZ:near
UNDEF:00002048                                         ; CODE XREF: nsBig5Prober::nsBig5Prober(bool)+46p
UNDEF:0000204C ; _DWORD __thiscall SJISDistributionAnalysis::SJISDistributionAnalysis(SJISDistributionAnalysis *__hidden this)
UNDEF:0000204C                 extrn ??0SJISDistributionAnalysis@@QAE@XZ:near
UNDEF:0000204C                                         ; CODE XREF: nsSJISProber::nsSJISProber(bool)+51p
UNDEF:00002050 ; _DWORD __thiscall EUCJPDistributionAnalysis::EUCJPDistributionAnalysis(EUCJPDistributionAnalysis *__hidden this)
UNDEF:00002050                 extrn ??0EUCJPDistributionAnalysis@@QAE@XZ:near
UNDEF:00002050                                         ; CODE XREF: nsEUCJPProber::nsEUCJPProber(bool)+51p
UNDEF:00002054 ; public: virtual enum  nsProbingState __thiscall nsSJISProber::HandleData(char const *, unsigned int)
UNDEF:00002054                 extrn ?HandleData@nsSJISProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00002054                                         ; DATA XREF: .rdata:000019E0o
UNDEF:00002058 ; void __thiscall nsSJISProber::Reset(nsSJISProber *__hidden this)
UNDEF:00002058                 extrn ?Reset@nsSJISProber@@UAEXXZ:near
UNDEF:00002058                                         ; CODE XREF: nsSJISProber::nsSJISProber(bool)+A5p
UNDEF:00002058                                         ; DATA XREF: .rdata:000019E8o
UNDEF:0000205C ; public: virtual float __thiscall nsSJISProber::GetConfidence(void)
UNDEF:0000205C                 extrn ?GetConfidence@nsSJISProber@@UAEMXZ:near
UNDEF:0000205C                                         ; DATA XREF: .rdata:000019ECo
UNDEF:00002060 ; public: virtual void * __thiscall nsSJISProber::`vector deleting destructor'(unsigned int)
UNDEF:00002060                 extrn ??_EnsSJISProber@@UAEPAXI@Z:near ; weak
UNDEF:00002060                                         ; DATA XREF: .rdata:const nsSJISProber::`vftable'o
UNDEF:00002064 ; public: virtual enum  nsProbingState __thiscall nsUTF8Prober::HandleData(char const *, unsigned int)
UNDEF:00002064                 extrn ?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00002064                                         ; DATA XREF: .rdata:00001A0Co
UNDEF:00002068 ; void __thiscall nsUTF8Prober::Reset(nsUTF8Prober *__hidden this)
UNDEF:00002068                 extrn ?Reset@nsUTF8Prober@@UAEXXZ:near
UNDEF:00002068                                         ; CODE XREF: nsUTF8Prober::nsUTF8Prober(void)+90p
UNDEF:00002068                                         ; DATA XREF: .rdata:00001A14o
UNDEF:0000206C ; public: virtual float __thiscall nsUTF8Prober::GetConfidence(void)
UNDEF:0000206C                 extrn ?GetConfidence@nsUTF8Prober@@UAEMXZ:near
UNDEF:0000206C                                         ; DATA XREF: .rdata:00001A18o
UNDEF:00002070 ; public: virtual void * __thiscall nsUTF8Prober::`vector deleting destructor'(unsigned int)
UNDEF:00002070                 extrn ??_EnsUTF8Prober@@UAEPAXI@Z:near ; weak
UNDEF:00002070                                         ; DATA XREF: .rdata:const nsUTF8Prober::`vftable'o
UNDEF:00002074 ; public: virtual enum  nsProbingState __thiscall nsEUCJPProber::HandleData(char const *, unsigned int)
UNDEF:00002074                 extrn ?HandleData@nsEUCJPProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00002074                                         ; DATA XREF: .rdata:00001A34o
UNDEF:00002078 ; void __thiscall nsEUCJPProber::Reset(nsEUCJPProber *__hidden this)
UNDEF:00002078                 extrn ?Reset@nsEUCJPProber@@UAEXXZ:near
UNDEF:00002078                                         ; CODE XREF: nsEUCJPProber::nsEUCJPProber(bool)+A5p
UNDEF:00002078                                         ; DATA XREF: .rdata:00001A3Co
UNDEF:0000207C ; public: virtual float __thiscall nsEUCJPProber::GetConfidence(void)
UNDEF:0000207C                 extrn ?GetConfidence@nsEUCJPProber@@UAEMXZ:near
UNDEF:0000207C                                         ; DATA XREF: .rdata:00001A40o
UNDEF:00002080 ; public: virtual void * __thiscall nsEUCJPProber::`vector deleting destructor'(unsigned int)
UNDEF:00002080                 extrn ??_EnsEUCJPProber@@UAEPAXI@Z:near ; weak
UNDEF:00002080                                         ; DATA XREF: .rdata:const nsEUCJPProber::`vftable'o
UNDEF:00002084 ; public: virtual enum  nsProbingState __thiscall nsGB18030Prober::HandleData(char const *, unsigned int)
UNDEF:00002084                 extrn ?HandleData@nsGB18030Prober@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00002084                                         ; DATA XREF: .rdata:00001A5Co
UNDEF:00002088 ; void __thiscall nsGB18030Prober::Reset(nsGB18030Prober *__hidden this)
UNDEF:00002088                 extrn ?Reset@nsGB18030Prober@@UAEXXZ:near
UNDEF:00002088                                         ; CODE XREF: nsGB18030Prober::nsGB18030Prober(bool)+9Ap
UNDEF:00002088                                         ; DATA XREF: .rdata:00001A64o
UNDEF:0000208C ; public: virtual float __thiscall nsGB18030Prober::GetConfidence(void)
UNDEF:0000208C                 extrn ?GetConfidence@nsGB18030Prober@@UAEMXZ:near
UNDEF:0000208C                                         ; DATA XREF: .rdata:00001A68o
UNDEF:00002090 ; public: virtual void * __thiscall nsGB18030Prober::`vector deleting destructor'(unsigned int)
UNDEF:00002090                 extrn ??_EnsGB18030Prober@@UAEPAXI@Z:near ; weak
UNDEF:00002090                                         ; DATA XREF: .rdata:const nsGB18030Prober::`vftable'o
UNDEF:00002094 ; public: virtual enum  nsProbingState __thiscall nsEUCKRProber::HandleData(char const *, unsigned int)
UNDEF:00002094                 extrn ?HandleData@nsEUCKRProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00002094                                         ; DATA XREF: .rdata:00001A84o
UNDEF:00002098 ; void __thiscall nsEUCKRProber::Reset(nsEUCKRProber *__hidden this)
UNDEF:00002098                 extrn ?Reset@nsEUCKRProber@@UAEXXZ:near
UNDEF:00002098                                         ; CODE XREF: nsEUCKRProber::nsEUCKRProber(bool)+9Ap
UNDEF:00002098                                         ; DATA XREF: .rdata:00001A8Co
UNDEF:0000209C ; public: virtual float __thiscall nsEUCKRProber::GetConfidence(void)
UNDEF:0000209C                 extrn ?GetConfidence@nsEUCKRProber@@UAEMXZ:near
UNDEF:0000209C                                         ; DATA XREF: .rdata:00001A90o
UNDEF:000020A0 ; public: virtual void * __thiscall nsEUCKRProber::`vector deleting destructor'(unsigned int)
UNDEF:000020A0                 extrn ??_EnsEUCKRProber@@UAEPAXI@Z:near ; weak
UNDEF:000020A0                                         ; DATA XREF: .rdata:const nsEUCKRProber::`vftable'o
UNDEF:000020A4 ; public: virtual enum  nsProbingState __thiscall nsBig5Prober::HandleData(char const *, unsigned int)
UNDEF:000020A4                 extrn ?HandleData@nsBig5Prober@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:000020A4                                         ; DATA XREF: .rdata:00001AACo
UNDEF:000020A8 ; void __thiscall nsBig5Prober::Reset(nsBig5Prober *__hidden this)
UNDEF:000020A8                 extrn ?Reset@nsBig5Prober@@UAEXXZ:near
UNDEF:000020A8                                         ; CODE XREF: nsBig5Prober::nsBig5Prober(bool)+9Ap
UNDEF:000020A8                                         ; DATA XREF: .rdata:00001AB4o
UNDEF:000020AC ; public: virtual float __thiscall nsBig5Prober::GetConfidence(void)
UNDEF:000020AC                 extrn ?GetConfidence@nsBig5Prober@@UAEMXZ:near
UNDEF:000020AC                                         ; DATA XREF: .rdata:00001AB8o
UNDEF:000020B0 ; public: virtual void * __thiscall nsBig5Prober::`vector deleting destructor'(unsigned int)
UNDEF:000020B0                 extrn ??_EnsBig5Prober@@UAEPAXI@Z:near ; weak
UNDEF:000020B0                                         ; DATA XREF: .rdata:const nsBig5Prober::`vftable'o
UNDEF:000020B4 ; public: virtual enum  nsProbingState __thiscall nsEUCTWProber::HandleData(char const *, unsigned int)
UNDEF:000020B4                 extrn ?HandleData@nsEUCTWProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:000020B4                                         ; DATA XREF: .rdata:00001AD4o
UNDEF:000020B8 ; void __thiscall nsEUCTWProber::Reset(nsEUCTWProber *__hidden this)
UNDEF:000020B8                 extrn ?Reset@nsEUCTWProber@@UAEXXZ:near
UNDEF:000020B8                                         ; CODE XREF: nsEUCTWProber::nsEUCTWProber(bool)+9Ap
UNDEF:000020B8                                         ; DATA XREF: .rdata:00001ADCo
UNDEF:000020BC ; public: virtual float __thiscall nsEUCTWProber::GetConfidence(void)
UNDEF:000020BC                 extrn ?GetConfidence@nsEUCTWProber@@UAEMXZ:near
UNDEF:000020BC                                         ; DATA XREF: .rdata:00001AE0o
UNDEF:000020C0 ; public: virtual void * __thiscall nsEUCTWProber::`vector deleting destructor'(unsigned int)
UNDEF:000020C0                 extrn ??_EnsEUCTWProber@@UAEPAXI@Z:near ; weak
UNDEF:000020C0                                         ; DATA XREF: .rdata:const nsEUCTWProber::`vftable'o
UNDEF:000020C4 ; public: virtual void * __thiscall nsMBCSGroupProber::`vector deleting destructor'(unsigned int)
UNDEF:000020C4                 extrn ??_EnsMBCSGroupProber@@UAEPAXI@Z:near ; weak
UNDEF:000020C4                                         ; DATA XREF: .rdata:const nsMBCSGroupProber::`vftable'o
UNDEF:000020C8 ; __fastcall __security_check_cookie(x)
UNDEF:000020C8                 extrn @__security_check_cookie@4:near
UNDEF:000020C8                                         ; CODE XREF: __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z+Cp
UNDEF:000020C8                                         ; __ehhandler$??1nsMBCSGroupProber@@UAE@XZ+Cp ...
UNDEF:000020CC                 extrn ___CxxFrameHandler3:near
UNDEF:000020CC                                         ; CODE XREF: __ehhandler$??0nsMBCSGroupProber@@QAE@I@Z+16j
UNDEF:000020CC                                         ; __ehhandler$??1nsMBCSGroupProber@@UAE@XZ+16j ...
UNDEF:000020D0 ; struct SMModel UTF8SMModel
UNDEF:000020D0                 extrn ?UTF8SMModel@@3USMModel@@B:near
UNDEF:000020D0                                         ; DATA XREF: nsUTF8Prober::nsUTF8Prober(void)+61o
UNDEF:000020D4 ; struct SMModel Big5SMModel
UNDEF:000020D4                 extrn ?Big5SMModel@@3USMModel@@B:near
UNDEF:000020D4                                         ; DATA XREF: nsBig5Prober::nsBig5Prober(bool)+6Bo
UNDEF:000020D8 ; struct SMModel EUCJPSMModel
UNDEF:000020D8                 extrn ?EUCJPSMModel@@3USMModel@@B:near
UNDEF:000020D8                                         ; DATA XREF: nsEUCJPProber::nsEUCJPProber(bool)+76o
UNDEF:000020DC ; struct SMModel EUCKRSMModel
UNDEF:000020DC                 extrn ?EUCKRSMModel@@3USMModel@@B:near
UNDEF:000020DC                                         ; DATA XREF: nsEUCKRProber::nsEUCKRProber(bool)+6Bo
UNDEF:000020E0 ; struct SMModel EUCTWSMModel
UNDEF:000020E0                 extrn ?EUCTWSMModel@@3USMModel@@B:near
UNDEF:000020E0                                         ; DATA XREF: nsEUCTWProber::nsEUCTWProber(bool)+6Bo
UNDEF:000020E4 ; struct SMModel GB18030SMModel
UNDEF:000020E4                 extrn ?GB18030SMModel@@3USMModel@@B:near
UNDEF:000020E4                                         ; DATA XREF: nsGB18030Prober::nsGB18030Prober(bool)+6Bo
UNDEF:000020E8 ; struct SMModel SJISSMModel
UNDEF:000020E8                 extrn ?SJISSMModel@@3USMModel@@B:near
UNDEF:000020E8                                         ; DATA XREF: nsSJISProber::nsSJISProber(bool)+76o
UNDEF:000020EC ; const type_info::`vftable'
UNDEF:000020EC                 extrn ??_7type_info@@6B@:near
UNDEF:000020EC                                         ; DATA XREF: .data$r:nsCharSetProber `RTTI Type Descriptor'o
UNDEF:000020EC                                         ; .data$r:JapaneseContextAnalysis `RTTI Type Descriptor'o ...
UNDEF:000020F0                 extrn ___security_cookie:near
UNDEF:000020F0                                         ; DATA XREF: nsMBCSGroupProber::nsMBCSGroupProber(uint)+14r
UNDEF:000020F0                                         ; nsMBCSGroupProber::~nsMBCSGroupProber(void)+14r ...
UNDEF:000020F4                 extrn __fltused:near
UNDEF:000020F4
UNDEF:000020F4
UNDEF:000020F4                 end