.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 7D6C0AE9EE44D1D2E9ABAF8B82F7E45A
.rdata:00000000 ; Input CRC32 : 854108DD
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\AutoCompletion.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG158923       dd offset $SG159145+15h ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+177o
.rdata:00000000                                         ; "䤀猀尀"
.rdata:00000004 $SG158927       dd offset $SG159159+5   ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+1C0o
.rdata:00000004                                         ; "漀䌀漀洀瀀氀攀琀攀"
.rdata:00000008 $SG158931       dd offset $SG159161+9   ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+209o
.rdata:00000008                                         ; "爀搀"
.rdata:0000000C $SG158938       dd offset $SG159145+0Eh ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2DDBo
.rdata:0000000C                                         ; "s\\APIs\\"
.rdata:00000010 $SG158945       dd offset $SG159145+13h ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2EA5o
.rdata:00000010                                         ; "倀䤀猀尀"
.rdata:00000014 ; const WCHAR _SG159145
.rdata:00000014 $SG159145:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+73o
.rdata:00000014                                         ; .rdata:$SG159209o ...
.rdata:00000014                 unicode 0, <\plugins\APIs\>,0
.rdata:00000032                 align 4
.rdata:00000034 ; const WCHAR _SG159146
.rdata:00000034 $SG159146:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+9Eo
.rdata:00000034                                         ; .rdata:$SG158430o
.rdata:00000034                 unicode 0, <.xml>,0
.rdata:0000003E                 align 10h
.rdata:00000040 ; wchar_t _SG159157
.rdata:00000040 $SG159157:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+1A6o
.rdata:00000040                 unicode 0, <NotepadPlus>,0
.rdata:00000058 ; wchar_t _SG159159
.rdata:00000058 $SG159159:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_17B7o
.rdata:00000058                                         ; .rdata:$SG158394o ...
.rdata:00000058                 unicode 0, <AutoComplete>,0
.rdata:00000072                 align 4
.rdata:00000074 ; wchar_t _SG159161
.rdata:00000074 $SG159161:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_17E9o
.rdata:00000074                                         ; .rdata:$SG158931o
.rdata:00000074                 unicode 0, <KeyWord>,0
.rdata:00000084 ; wchar_t _SG159166
.rdata:00000084 $SG159166       dw 0                    ; DATA XREF: AutoCompletion::setLanguage(LangType)+2C2o
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088 ; wchar_t _SG159168
.rdata:00000088 $SG159168:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+2D8o
.rdata:00000088                 unicode 0, <Environment>,0
.rdata:000000A0 ; wchar_t _SG159171
.rdata:000000A0 $SG159171:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+305o
.rdata:000000A0                 unicode 0, <ignoreCase>,0
.rdata:000000B6                 align 4
.rdata:000000B8 ; const WCHAR _SG159173
.rdata:000000B8 $SG159173:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+324o
.rdata:000000B8                 unicode 0, <no>,0
.rdata:000000BE                 align 10h
.rdata:000000C0 ; wchar_t _SG159174
.rdata:000000C0 $SG159174:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_1939o
.rdata:000000C0                 unicode 0, <startFunc>,0
.rdata:000000D4 ; wchar_t _SG159176
.rdata:000000D4 $SG159176:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_198Do
.rdata:000000D4                 unicode 0, <stopFunc>,0
.rdata:000000E6                 align 4
.rdata:000000E8 ; wchar_t _SG159178
.rdata:000000E8 $SG159178:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_19E1o
.rdata:000000E8                 unicode 0, <paramSeparator>,0
.rdata:00000106                 align 4
.rdata:00000108 ; wchar_t _SG159180
.rdata:00000108 $SG159180:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_1A35o
.rdata:00000108                 unicode 0, <terminal>,0
.rdata:0000011A                 align 4
.rdata:0000011C ; wchar_t _SG159182
.rdata:0000011C $SG159182:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_1A89o
.rdata:0000011C                 unicode 0, <additionalWordChar>,0
.rdata:00000142                 align 4
.rdata:00000144 ; wchar_t _SG159186
.rdata:00000144 $SG159186       dw 0                    ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_1B0Do
.rdata:00000146                 db    0
.rdata:00000147                 db    0
.rdata:00000148 ; wchar_t _SG159192
.rdata:00000148 $SG159192:                              ; DATA XREF: AutoCompletion::setLanguage(LangType):loc_1B50o
.rdata:00000148                 unicode 0, <KeyWord>,0
.rdata:00000158 ; wchar_t _SG159194
.rdata:00000158 $SG159194:                              ; DATA XREF: AutoCompletion::setLanguage(LangType)+58Bo
.rdata:00000158                 unicode 0, <name>,0
.rdata:00000162                 align 4
.rdata:00000164 ; wchar_t _SG159209
.rdata:00000164 $SG159209       dd offset $SG159145+0Ch ; DATA XREF: AutoCompletion::setLanguage(LangType)+6FEo
.rdata:00000164                                         ; "ns\\APIs\\"
.rdata:00000168 $SG147986       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:00000173                 align 4
.rdata:00000174 $SG147987       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000C30o
.rdata:00000180 $SG147988       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000C34o
.rdata:0000018C $SG147989       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00000C38o
.rdata:00000198 $SG147990       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000C3Co
.rdata:000001A4 $SG147991       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000C40o
.rdata:000001B0 $SG147992       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000C44o
.rdata:000001BC $SG147993       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00000C48o
.rdata:000001C8 $SG147994       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00000C4Co
.rdata:000001D4 $SG147995       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00000C50o
.rdata:000001E0 $SG147996       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00000C54o
.rdata:000001EC $SG147997       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00000C58o
.rdata:000001F8 $SG147998       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000C5Co
.rdata:00000204 $SG147999       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000C60o
.rdata:00000210 $SG148000       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000C64o
.rdata:0000021C $SG148001       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00000C68o
.rdata:00000228 $SG148002       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000C6Co
.rdata:00000234 $SG148003       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000C70o
.rdata:00000240 $SG148004       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000C74o
.rdata:0000024C $SG148005       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00000C78o
.rdata:00000258 $SG148006       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000C7Co
.rdata:00000264 $SG148007       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000C80o
.rdata:00000270 $SG148008       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000C84o
.rdata:0000027C $SG148009       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00000C88o
.rdata:00000288 $SG148010       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000C8Co
.rdata:00000294 $SG148011       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000C90o
.rdata:000002A0 $SG148012       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000C94o
.rdata:000002AC $SG148013       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00000C98o
.rdata:000002B8 $SG148014       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000C9Co
.rdata:000002C4 $SG148015       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000CA0o
.rdata:000002D0 $SG148016       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000CA4o
.rdata:000002DC $SG148017       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00000CA8o
.rdata:000002E8 $SG148018       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000CACo
.rdata:000002F4 $SG148019       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000CB0o
.rdata:00000300 $SG148020       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000CB4o
.rdata:0000030C $SG148021       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00000CB8o
.rdata:00000318 $SG148022       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000CBCo
.rdata:00000324 $SG148023       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000CC0o
.rdata:00000330 $SG148024       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000CC4o
.rdata:0000033C $SG148025       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00000CC8o
.rdata:00000348 $SG148026       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00000CCCo
.rdata:00000354 $SG148027       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00000CD0o
.rdata:00000360 $SG148028       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00000CD4o
.rdata:0000036C $SG148029       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00000CD8o
.rdata:00000378 $SG148030       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00000CDCo
.rdata:00000384 $SG148031       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00000CE0o
.rdata:00000390 $SG148032       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00000CE4o
.rdata:0000039C $SG148033       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00000CE8o
.rdata:000003A8 $SG148034       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00000CECo
.rdata:000003B4 $SG148035       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00000CF0o
.rdata:000003C0 $SG148036       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00000CF4o
.rdata:000003CC $SG148037       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00000CF8o
.rdata:000003D8 $SG148038       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00000CFCo
.rdata:000003E4 $SG148039       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00000D00o
.rdata:000003F0 $SG148040       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00000D04o
.rdata:000003FC $SG148041       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00000D08o
.rdata:00000408 $SG148042       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00000D0Co
.rdata:00000414 $SG148043       db '    .+      ',0     ; DATA XREF: .data:00000D10o
.rdata:00000421                 align 4
.rdata:00000424 $SG148044       db '    @#$     ',0     ; DATA XREF: .data:00000D14o
.rdata:00000431                 align 4
.rdata:00000434 $SG148045       db '    %&*=    ',0     ; DATA XREF: .data:00000D18o
.rdata:00000441                 align 4
.rdata:00000444 $SG148046       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00000D1Co
.rdata:00000451                 align 4
.rdata:00000454 $SG148047       db '    )!~{]^  ',0     ; DATA XREF: .data:00000D20o
.rdata:00000461                 align 4
.rdata:00000464 $SG148048       db '    /(_:<[} ',0     ; DATA XREF: .data:00000D24o
.rdata:00000471                 align 4
.rdata:00000474 $SG148049       db '    |123456 ',0     ; DATA XREF: .data:00000D28o
.rdata:00000481                 align 4
.rdata:00000484 $SG148050       db '    7890abc ',0     ; DATA XREF: .data:00000D2Co
.rdata:00000491                 align 4
.rdata:00000494 $SG148051       db '    defgh   ',0     ; DATA XREF: .data:00000D30o
.rdata:000004A1                 align 4
.rdata:000004A4 $SG148052       db '    ijkl    ',0     ; DATA XREF: .data:00000D34o
.rdata:000004B1                 align 4
.rdata:000004B4 $SG148053       db '    mno     ',0     ; DATA XREF: .data:00000D38o
.rdata:000004C1                 align 4
.rdata:000004C4 $SG148054       db '    pq      ',0     ; DATA XREF: .data:00000D3Co
.rdata:000004D1                 align 4
.rdata:000004D4 $SG148056       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:000004DF                 align 10h
.rdata:000004E0 $SG148057       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000D48o
.rdata:000004EC $SG148058       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000D4Co
.rdata:000004F8 $SG148059       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000D50o
.rdata:00000504 $SG148060       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000D54o
.rdata:00000510 $SG148061       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00000D58o
.rdata:0000051C $SG148062       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000D5Co
.rdata:00000528 $SG148063       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000D60o
.rdata:00000534 $SG148064       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000D64o
.rdata:00000540 $SG148065       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00000D68o
.rdata:0000054C $SG148066       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000D6Co
.rdata:00000558 $SG148067       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00000D70o
.rdata:00000564 $SG148068       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000D74o
.rdata:00000570 $SG148069       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00000D78o
.rdata:0000057C $SG148070       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000D7Co
.rdata:00000588 $SG148071       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000D80o
.rdata:00000594 $SG148072       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000D84o
.rdata:000005A0 $SG148073       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00000D88o
.rdata:000005AC $SG148074       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000D8Co
.rdata:000005B8 $SG148075       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000D90o
.rdata:000005C4 $SG148076       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000D94o
.rdata:000005D0 $SG148077       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00000D98o
.rdata:000005DC ; wchar_t _SG158318
.rdata:000005DC $SG158318       dw 0                    ; DATA XREF: AutoCompletion::showApiAndWordComplete(void)+28Fo
.rdata:000005DE                 db    0
.rdata:000005DF                 db    0
.rdata:000005E0 $SG148078       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000D9Co
.rdata:000005EC $SG148079       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000DA0o
.rdata:000005F8 $SG148080       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000DA4o
.rdata:00000604 $SG148081       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00000DA8o
.rdata:00000610 $SG148082       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000DACo
.rdata:0000061C $SG148083       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000DB0o
.rdata:00000628 $SG148084       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000DB4o
.rdata:00000634 ; wchar_t _SG158325
.rdata:00000634 $SG158325       dd offset $SG159145+0Ch ; DATA XREF: AutoCompletion::showApiAndWordComplete(void)+311o
.rdata:00000634                                         ; "ns\\APIs\\"
.rdata:00000638 $SG148085       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00000DB8o
.rdata:00000644 $SG148086       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000DBCo
.rdata:00000650 $SG148087       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000DC0o
.rdata:0000065C $SG148088       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000DC4o
.rdata:00000668 $SG148089       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00000DC8o
.rdata:00000674 $SG148090       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00000DCCo
.rdata:00000680 $SG148091       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00000DD0o
.rdata:0000068C $SG148092       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00000DD4o
.rdata:00000698 $SG148093       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00000DD8o
.rdata:000006A4 $SG148094       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00000DDCo
.rdata:000006B0 $SG148095       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:00000DE0o
.rdata:000006BC $SG148096       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00000DE4o
.rdata:000006C8 $SG148097       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00000DE8o
.rdata:000006D4 $SG148098       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00000DECo
.rdata:000006E0 $SG148099       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:00000DF0o
.rdata:000006EC $SG148100       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00000DF4o
.rdata:000006F8 $SG148101       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00000DF8o
.rdata:00000704 $SG148102       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00000DFCo
.rdata:00000710 $SG148103       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:00000E00o
.rdata:0000071C ; wchar_t _SG158344
.rdata:0000071C $SG158344:                              ; DATA XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+3Bo
.rdata:0000071C                 unicode 0, <\>
.rdata:0000071C                 dw 3Ch, 0
.rdata:00000722                 align 4
.rdata:00000724 $SG148104       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00000E04o
.rdata:00000730 ; wchar_t _SG158345
.rdata:00000730 $SG158345:                              ; DATA XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+61o
.rdata:00000730                 unicode 0, <[^ \t\n\r.,;:"()=>
.rdata:00000730                 dw 3Ch, 3Eh, 27h
.rdata:00000730                 unicode 0, <+!\[\]]*>,0
.rdata:0000076A                 align 4
.rdata:0000076C $SG148105       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00000E08o
.rdata:00000778 $SG148106       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00000E0Co
.rdata:00000784 $SG148107       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:00000E10o
.rdata:00000790 $SG148108       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00000E14o
.rdata:0000079C $SG148109       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00000E18o
.rdata:000007A8 $SG148110       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00000E1Co
.rdata:000007B4 $SG148111       db '         .+ ',0     ; DATA XREF: .data:00000E20o
.rdata:000007C1                 align 4
.rdata:000007C4 $SG148112       db '        @#$ ',0     ; DATA XREF: .data:00000E24o
.rdata:000007D1                 align 4
.rdata:000007D4 $SG148113       db '       %&*= L',0    ; DATA XREF: .data:00000E28o
.rdata:000007E2                 align 4
.rdata:000007E4 $SG148114       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00000E2Co
.rdata:000007F1                 align 4
.rdata:000007F4 $SG148115       db '     )!>~{] ',0     ; DATA XREF: .data:00000E30o
.rdata:00000801                 align 4
.rdata:00000804 $SG148116       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00000E34o
.rdata:00000811                 align 4
.rdata:00000814 $SG148117       db '    (}|1234 ',0     ; DATA XREF: .data:00000E38o
.rdata:00000821                 align 4
.rdata:00000824 $SG148118       db '    567890a ',0     ; DATA XREF: .data:00000E3Co
.rdata:00000831                 align 4
.rdata:00000834 $SG148119       db '      bcdef ',0     ; DATA XREF: .data:00000E40o
.rdata:00000841                 align 4
.rdata:00000844 $SG148120       db '       ghij ',0     ; DATA XREF: .data:00000E44o
.rdata:00000851                 align 4
.rdata:00000854 $SG148121       db '        klm ',0     ; DATA XREF: .data:00000E48o
.rdata:00000861                 align 4
.rdata:00000864 $SG148122       db '         no ',0     ; DATA XREF: .data:00000E4Co
.rdata:00000871                 align 4
.rdata:00000874 $SG148124       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:0000087F                 align 10h
.rdata:00000880 $SG148125       db ' ',9,'c None',0     ; DATA XREF: .data:00000E58o
.rdata:00000889                 align 4
.rdata:0000088C $SG148126       db '.',9,'c #545254',0  ; DATA XREF: .data:00000E5Co
.rdata:00000898 $SG148127       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00000E60o
.rdata:000008A4 $SG148128       db '@',9,'c #646464',0  ; DATA XREF: .data:00000E64o
.rdata:000008B0 $SG148129       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00000E68o
.rdata:000008BC $SG148130       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00000E6Co
.rdata:000008C8 $SG148131       db '%',9,'c #747284',0  ; DATA XREF: .data:00000E70o
.rdata:000008D4 $SG148132       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00000E74o
.rdata:000008E0 $SG148133       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00000E78o
.rdata:000008EC $SG148134       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00000E7Co
.rdata:000008F8 $SG148135       db '-',9,'c #403E58',0  ; DATA XREF: .data:00000E80o
.rdata:00000904 $SG148136       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00000E84o
.rdata:00000910 $SG148137       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:00000E88o
.rdata:0000091C $SG148138       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:00000E8Co
.rdata:00000928 $SG148139       db 27h,9,'c #242644',0  ; DATA XREF: .data:00000E90o
.rdata:00000934 $SG148140       db ')',9,'c #282668',0  ; DATA XREF: .data:00000E94o
.rdata:00000940 $SG148141       db '!',9,'c #24367C',0  ; DATA XREF: .data:00000E98o
.rdata:0000094C $SG148142       db '~',9,'c #244A84',0  ; DATA XREF: .data:00000E9Co
.rdata:00000958 $SG148143       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00000EA0o
.rdata:00000964 $SG148144       db ']',9,'c #14162C',0  ; DATA XREF: .data:00000EA4o
.rdata:00000970 $SG148145       db '^',9,'c #142E7C',0  ; DATA XREF: .data:00000EA8o
.rdata:0000097C $SG148146       db '/',9,'c #143789',0  ; DATA XREF: .data:00000EACo
.rdata:00000988 $SG148147       db '(',9,'c #204990',0  ; DATA XREF: .data:00000EB0o
.rdata:00000994 $SG148148       db '_',9,'c #174091',0  ; DATA XREF: .data:00000EB4o
.rdata:000009A0 $SG148149       db ':',9,'c #0C0630',0  ; DATA XREF: .data:00000EB8o
.rdata:000009AC $SG148150       db '<',9,'c #24327C',0  ; DATA XREF: .data:00000EBCo
.rdata:000009B8 $SG148151       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00000EC0o
.rdata:000009C4 $SG148152       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00000EC4o
.rdata:000009D0 $SG148153       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:00000EC8o
.rdata:000009DC ; wchar_t _SG158394
.rdata:000009DC $SG158394       dd offset $SG159159+4   ; DATA XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>):loc_38AAo
.rdata:000009DC                                         ; "toComplete"
.rdata:000009E0 $SG148154       db '1',9,'c #141244',0  ; DATA XREF: .data:00000ECCo
.rdata:000009EC $SG148155       db '2',9,'c #24428C',0  ; DATA XREF: .data:00000ED0o
.rdata:000009F8 $SG148156       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00000ED4o
.rdata:00000A04 $SG148157       db '4',9,'c #4470C4',0  ; DATA XREF: .data:00000ED8o
.rdata:00000A10 $SG148158       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:00000EDCo
.rdata:00000A1C $SG148159       db '6',9,'c #4472CC',0  ; DATA XREF: .data:00000EE0o
.rdata:00000A28 $SG148160       db '7',9,'c #24224C',0  ; DATA XREF: .data:00000EE4o
.rdata:00000A34 $SG148161       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00000EE8o
.rdata:00000A40 $SG148162       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00000EECo
.rdata:00000A4C $SG148163       db '0',9,'c #5482DF',0  ; DATA XREF: .data:00000EF0o
.rdata:00000A58 $SG148164       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00000EF4o
.rdata:00000A64 $SG148165       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00000EF8o
.rdata:00000A70 $SG148166       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00000EFCo
.rdata:00000A7C $SG148167       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:00000F00o
.rdata:00000A88 $SG148168       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00000F04o
.rdata:00000A94 $SG148169       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00000F08o
.rdata:00000AA0 $SG148170       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00000F0Co
.rdata:00000AAC $SG148171       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:00000F10o
.rdata:00000AB8 $SG148172       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00000F14o
.rdata:00000AC4 $SG148173       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:00000F18o
.rdata:00000AD0 $SG148174       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00000F1Co
.rdata:00000ADC $SG148175       db 'l',9,'c #243250',0  ; DATA XREF: .data:00000F20o
.rdata:00000AE8 $SG148176       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00000F24o
.rdata:00000AF4 $SG148177       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:00000F28o
.rdata:00000B00 $SG148178       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00000F2Co
.rdata:00000B0C $SG148179       db '     .+.     ',0    ; DATA XREF: .data:00000F30o
.rdata:00000B1A                 align 4
.rdata:00000B1C $SG148180       db '   @##$##@   ',0    ; DATA XREF: .data:00000F34o
.rdata:00000B2A                 align 4
.rdata:00000B2C $SG148181       db '  @%&***&%@  ',0    ; DATA XREF: .data:00000F38o
.rdata:00000B3A                 align 4
.rdata:00000B3C $SG148182       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00000F3Co
.rdata:00000B4A                 align 4
.rdata:00000B4C $SG148183       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000B4C                                         ; DATA XREF: .data:00000F40o
.rdata:00000B5A                 align 4
.rdata:00000B5C $SG148184       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00000F44o
.rdata:00000B6A                 align 4
.rdata:00000B6C $SG148185       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:00000F48o
.rdata:00000B7A                 align 4
.rdata:00000B7C $SG148186       db '12[3455563[21',0    ; DATA XREF: .data:00000F4Co
.rdata:00000B8A                 align 4
.rdata:00000B8C $SG148187       db '7_365899063_7',0    ; DATA XREF: .data:00000F50o
.rdata:00000B9A                 align 4
.rdata:00000B9C $SG148188       db ' /|09abc904/ ',0    ; DATA XREF: .data:00000F54o
.rdata:00000BAA                 align 4
.rdata:00000BAC $SG148189       db ' d}8efgfb83d ',0    ; DATA XREF: .data:00000F58o
.rdata:00000BBA                 align 4
.rdata:00000BBC ; wchar_t _SG158430
.rdata:00000BBC $SG158430       dd offset $SG159146+6   ; DATA XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+41o
.rdata:00000BBC                                         ; "l"
.rdata:00000BC0 $SG148190       db '  hiafjgakh  ',0    ; DATA XREF: .data:00000F5Co
.rdata:00000BCE                 align 10h
.rdata:00000BD0 $SG148191       db '   l~mnm~l   ',0    ; DATA XREF: .data:00000F60o
.rdata:00000BDE                 align 10h
.rdata:00000BE0 $SG148192       db '     o@o     ',0    ; DATA XREF: .data:00000F64o
.rdata:00000BEE                 align 10h
.rdata:00000BF0 ; wchar_t _SG158472
.rdata:00000BF0 $SG158472       dd offset $SG159159+4   ; DATA XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1F1o
.rdata:00000BF0                                         ; "toComplete"
.rdata:00000BF4 ; wchar_t _SG158498
.rdata:00000BF4 $SG158498:                              ; DATA XREF: AutoCompletion::showPathCompletion(void)+1EAo
.rdata:00000BF4                 unicode 0, <*.*>,0
.rdata:00000BFC ; wchar_t _SG158544
.rdata:00000BFC $SG158544       dd offset $SG159145+1Ah ; DATA XREF: AutoCompletion::showPathCompletion(void):loc_2831o
.rdata:00000BFC                                         ; "\\"
.rdata:00000C00 ; wchar_t _SG158545
.rdata:00000C00 $SG158545:                              ; DATA XREF: AutoCompletion::showPathCompletion(void)+2BBo
.rdata:00000C00                 unicode 0, <..>,0
.rdata:00000C06                 align 4
.rdata:00000C08 ; wchar_t _SG158547
.rdata:00000C08 $SG158547:                              ; DATA XREF: AutoCompletion::showPathCompletion(void)+399o
.rdata:00000C08                 dw 0Ah, 0
.rdata:00000C0C ; wchar_t _SG158549
.rdata:00000C0C $SG158549       dd offset $SG159159+4   ; DATA XREF: AutoCompletion::showPathCompletion(void)+3D8o
.rdata:00000C0C                                         ; "toComplete"
.rdata:00000C10 ; wchar_t _SG158576
.rdata:00000C10 $SG158576       dw 0                    ; DATA XREF: AutoCompletion::showWordComplete(bool)+273o
.rdata:00000C12                 db    0
.rdata:00000C13                 db    0
.rdata:00000C14 ; wchar_t _SG158583
.rdata:00000C14 $SG158583       dd offset $SG159145+0Ch ; DATA XREF: AutoCompletion::showWordComplete(bool)+2F5o
.rdata:00000C14                                         ; "ns\\APIs\\"
.rdata:00000C18 $SG158598       dd 5B003Ch              ; DATA XREF: AutoCompletion::getCloseTag(char *,uint,uint)+30r
.rdata:00000C1C dword_C1C       dd 5C005Eh              ; DATA XREF: AutoCompletion::getCloseTag(char *,uint,uint)+39r
.rdata:00000C20 dword_C20       dd 3E0073h              ; DATA XREF: AutoCompletion::getCloseTag(char *,uint,uint)+41r
.rdata:00000C24 dword_C24       dd 2A005Dh              ; DATA XREF: AutoCompletion::getCloseTag(char *,uint,uint)+4Ar
.rdata:00000C28 word_C28        dw 0                    ; DATA XREF: AutoCompletion::getCloseTag(char *,uint,uint)+53r
.rdata:00000C2A                 align 4
.rdata:00000C2A _rdata          ends
.rdata:00000C2A
.data:00000C2C ; ===========================================================================
.data:00000C2C
.data:00000C2C ; Segment type: Pure data
.data:00000C2C ; Segment permissions: Read/Write
.data:00000C2C ; Segment alignment 'qword' can not be represented in assembly
.data:00000C2C _data           segment para public 'DATA' use32
.data:00000C2C                 assume cs:_data
.data:00000C2C                 ;org 0C2Ch
.data:00000C2C _acTop_xpm      dd offset $SG147986     ; "12 12 56 1"
.data:00000C30                 dd offset $SG147987     ; " \tc #FFFFFF"
.data:00000C34                 dd offset $SG147988     ; ".\tc #8AB2E9"
.data:00000C38                 dd offset $SG147989     ; "+\tc #CCDCF6"
.data:00000C3C                 dd offset $SG147990     ; "@\tc #80ABEA"
.data:00000C40                 dd offset $SG147991     ; "#\tc #7DA9E8"
.data:00000C44                 dd offset $SG147992     ; "$\tc #C7DAF3"
.data:00000C48                 dd offset $SG147993     ; "%\tc #79A7E6"
.data:00000C4C                 dd offset $SG147994     ; "&\tc #ADC8EF"
.data:00000C50                 dd offset $SG147995     ; "*\tc #87B0E8"
.data:00000C54                 dd offset $SG147996     ; "=\tc #BBD2F0"
.data:00000C58                 dd offset $SG147997     ; "-\tc #6EA0E2"
.data:00000C5C                 dd offset $SG147998     ; ";\tc #A8C7EE"
.data:00000C60                 dd offset $SG147999     ; ">\tc #A3C2ED"
.data:00000C64                 dd offset $SG148000     ; ",\tc #75A4E3"
.data:00000C68                 dd offset $SG148001     ; "'\tc #A7C4EB"
.data:00000C6C                 dd offset $SG148002     ; ")\tc #6297E1"
.data:00000C70                 dd offset $SG148003     ; "!\tc #A1C1EC"
.data:00000C74                 dd offset $SG148004     ; "~\tc #92B7E8"
.data:00000C78                 dd offset $SG148005     ; "{\tc #99BBE9"
.data:00000C7C                 dd offset $SG148006     ; "]\tc #6197DD"
.data:00000C80                 dd offset $SG148007     ; "^\tc #96B9E6"
.data:00000C84                 dd offset $SG148008     ; "/\tc #538EDB"
.data:00000C88                 dd offset $SG148009     ; "(\tc #99BBEA"
.data:00000C8C                 dd offset $SG148010     ; "_\tc #80AAE3"
.data:00000C90                 dd offset $SG148011     ; ":\tc #81ABE3"
.data:00000C94                 dd offset $SG148012     ; "<\tc #8AB1E4"
.data:00000C98                 dd offset $SG148013     ; "[\tc #4B88D6"
.data:00000C9C                 dd offset $SG148014     ; "}\tc #4882D1"
.data:00000CA0                 dd offset $SG148015     ; "|\tc #4384D6"
.data:00000CA4                 dd offset $SG148016     ; "1\tc #90B5E7"
.data:00000CA8                 dd offset $SG148017     ; "2\tc #74A3E0"
.data:00000CAC                 dd offset $SG148018     ; "3\tc #77A4E0"
.data:00000CB0                 dd offset $SG148019     ; "4\tc #81ABE2"
.data:00000CB4                 dd offset $SG148020     ; "5\tc #437FD3"
.data:00000CB8                 dd offset $SG148021     ; "6\tc #7FA2DF"
.data:00000CBC                 dd offset $SG148022     ; "7\tc #3577D2"
.data:00000CC0                 dd offset $SG148023     ; "8\tc #87AFE4"
.data:00000CC4                 dd offset $SG148024     ; "9\tc #72A1DF"
.data:00000CC8                 dd offset $SG148025     ; "0\tc #7CA9E1"
.data:00000CCC                 dd offset $SG148026     ; "a\tc #3F7AD0"
.data:00000CD0                 dd offset $SG148027     ; "b\tc #85A4DE"
.data:00000CD4                 dd offset $SG148028     ; "c\tc #FBFCFE"
.data:00000CD8                 dd offset $SG148029     ; "d\tc #236ECD"
.data:00000CDC                 dd offset $SG148030     ; "e\tc #7EA8E1"
.data:00000CE0                 dd offset $SG148031     ; "f\tc #79A6E0"
.data:00000CE4                 dd offset $SG148032     ; "g\tc #3D77D0"
.data:00000CE8                 dd offset $SG148033     ; "h\tc #87A4DC"
.data:00000CEC                 dd offset $SG148034     ; "i\tc #1A62C9"
.data:00000CF0                 dd offset $SG148035     ; "j\tc #75A3DF"
.data:00000CF4                 dd offset $SG148036     ; "k\tc #3C74CF"
.data:00000CF8                 dd offset $SG148037     ; "l\tc #8DA6DE"
.data:00000CFC                 dd offset $SG148038     ; "m\tc #1859C4"
.data:00000D00                 dd offset $SG148039     ; "n\tc #3B71CC"
.data:00000D04                 dd offset $SG148040     ; "o\tc #8EA5DD"
.data:00000D08                 dd offset $SG148041     ; "p\tc #164EC0"
.data:00000D0C                 dd offset $SG148042     ; "q\tc #92A7DD"
.data:00000D10                 dd offset $SG148043     ; "    .+      "
.data:00000D14                 dd offset $SG148044     ; "    @#$     "
.data:00000D18                 dd offset $SG148045     ; "    %&*=    "
.data:00000D1C                 dd offset $SG148046     ; "    -;>,'   "
.data:00000D20                 dd offset $SG148047     ; "    )!~{]^  "
.data:00000D24                 dd offset $SG148048     ; "    /(_:<[} "
.data:00000D28                 dd offset $SG148049     ; "    |123456 "
.data:00000D2C                 dd offset $SG148050     ; "    7890abc "
.data:00000D30                 dd offset $SG148051     ; "    defgh   "
.data:00000D34                 dd offset $SG148052     ; "    ijkl    "
.data:00000D38                 dd offset $SG148053     ; "    mno     "
.data:00000D3C                 dd offset $SG148054     ; "    pq      "
.data:00000D40                 db    0
.data:00000D41                 db    0
.data:00000D42                 db    0
.data:00000D43                 db    0
.data:00000D44 _acBottom_xpm   dd offset $SG148056     ; "12 12 54 1"
.data:00000D48                 dd offset $SG148057     ; " \tc #FFFFFF"
.data:00000D4C                 dd offset $SG148058     ; ".\tc #C4D7F3"
.data:00000D50                 dd offset $SG148059     ; "+\tc #72A1E3"
.data:00000D54                 dd offset $SG148060     ; "@\tc #C1D6F2"
.data:00000D58                 dd offset $SG148061     ; "#\tc #6397E1"
.data:00000D5C                 dd offset $SG148062     ; "$\tc #5990DD"
.data:00000D60                 dd offset $SG148063     ; "%\tc #BBD2F0"
.data:00000D64                 dd offset $SG148064     ; "&\tc #7AA6E5"
.data:00000D68                 dd offset $SG148065     ; "*\tc #9ABDEA"
.data:00000D6C                 dd offset $SG148066     ; "=\tc #4A87D9"
.data:00000D70                 dd offset $SG148067     ; "-\tc #B1CAEE"
.data:00000D74                 dd offset $SG148068     ; ";\tc #75A4E3"
.data:00000D78                 dd offset $SG148069     ; ">\tc #99BBE9"
.data:00000D7C                 dd offset $SG148070     ; ",\tc #95B9E8"
.data:00000D80                 dd offset $SG148071     ; "'\tc #3A7CD4"
.data:00000D84                 dd offset $SG148072     ; ")\tc #A9C6EC"
.data:00000D88                 dd offset $SG148073     ; "!\tc #71A0E0"
.data:00000D8C                 dd offset $SG148074     ; "~\tc #86AFE5"
.data:00000D90                 dd offset $SG148075     ; "{\tc #8DB2E6"
.data:00000D94                 dd offset $SG148076     ; "]\tc #2A72CF"
.data:00000D98                 dd offset $SG148077     ; "^\tc #73A0E0"
.data:00000D9C                 dd offset $SG148078     ; "/\tc #6B9DE0"
.data:00000DA0                 dd offset $SG148079     ; "(\tc #95B8E8"
.data:00000DA4                 dd offset $SG148080     ; "_\tc #81ABE3"
.data:00000DA8                 dd offset $SG148081     ; ":\tc #72A1DF"
.data:00000DAC                 dd offset $SG148082     ; "<\tc #83ADE3"
.data:00000DB0                 dd offset $SG148083     ; "[\tc #1B65C9"
.data:00000DB4                 dd offset $SG148084     ; "}\tc #5F95DC"
.data:00000DB8                 dd offset $SG148085     ; "|\tc #8BB3E5"
.data:00000DBC                 dd offset $SG148086     ; "1\tc #77A4E0"
.data:00000DC0                 dd offset $SG148087     ; "2\tc #679ADC"
.data:00000DC4                 dd offset $SG148088     ; "3\tc #7AA6E1"
.data:00000DC8                 dd offset $SG148089     ; "4\tc #195CC6"
.data:00000DCC                 dd offset $SG148090     ; "5\tc #FCFDFE"
.data:00000DD0                 dd offset $SG148091     ; "6\tc #8DB2E4"
.data:00000DD4                 dd offset $SG148092     ; "7\tc #4885D6"
.data:00000DD8                 dd offset $SG148093     ; "8\tc #7CA9E1"
.data:00000DDC                 dd offset $SG148094     ; "9\tc #6698DB"
.data:00000DE0                 dd offset $SG148095     ; "0\tc #71A1DE"
.data:00000DE4                 dd offset $SG148096     ; "a\tc #1752C0"
.data:00000DE8                 dd offset $SG148097     ; "b\tc #88ABE0"
.data:00000DEC                 dd offset $SG148098     ; "c\tc #3D77D0"
.data:00000DF0                 dd offset $SG148099     ; "d\tc #6E9FDD"
.data:00000DF4                 dd offset $SG148100     ; "e\tc #699BDC"
.data:00000DF8                 dd offset $SG148101     ; "f\tc #1547BD"
.data:00000DFC                 dd offset $SG148102     ; "g\tc #8DA6DE"
.data:00000E00                 dd offset $SG148103     ; "h\tc #376BC9"
.data:00000E04                 dd offset $SG148104     ; "i\tc #6295DA"
.data:00000E08                 dd offset $SG148105     ; "j\tc #1440B9"
.data:00000E0C                 dd offset $SG148106     ; "k\tc #8DA0DB"
.data:00000E10                 dd offset $SG148107     ; "l\tc #315FC4"
.data:00000E14                 dd offset $SG148108     ; "m\tc #1339B7"
.data:00000E18                 dd offset $SG148109     ; "n\tc #909FDA"
.data:00000E1C                 dd offset $SG148110     ; "o\tc #1233B4"
.data:00000E20                 dd offset $SG148111     ; "         .+ "
.data:00000E24                 dd offset $SG148112     ; "        @#$ "
.data:00000E28                 dd offset $SG148113     ; "       %&*= L"
.data:00000E2C                 dd offset $SG148114     ; "      -;>,' "
.data:00000E30                 dd offset $SG148115     ; "     )!>~{] "
.data:00000E34                 dd offset $SG148116     ; "    ^/(_:<[ "
.data:00000E38                 dd offset $SG148117     ; "    (}|1234 "
.data:00000E3C                 dd offset $SG148118     ; "    567890a "
.data:00000E40                 dd offset $SG148119     ; "      bcdef "
.data:00000E44                 dd offset $SG148120     ; "       ghij "
.data:00000E48                 dd offset $SG148121     ; "        klm "
.data:00000E4C                 dd offset $SG148122     ; "         no "
.data:00000E50                 db    0
.data:00000E51                 db    0
.data:00000E52                 db    0
.data:00000E53                 db    0
.data:00000E54 _bookmark_xpm   dd offset $SG148124     ; "13 14 54 1"
.data:00000E58                 dd offset $SG148125     ; " \tc None"
.data:00000E5C                 dd offset $SG148126     ; ".\tc #545254"
.data:00000E60                 dd offset $SG148127     ; "+\tc #3C3E3C"
.data:00000E64                 dd offset $SG148128     ; "@\tc #646464"
.data:00000E68                 dd offset $SG148129     ; "#\tc #A4A4A4"
.data:00000E6C                 dd offset $SG148130     ; "$\tc #B7B8B7"
.data:00000E70                 dd offset $SG148131     ; "%\tc #747284"
.data:00000E74                 dd offset $SG148132     ; "&\tc #B4B2C4"
.data:00000E78                 dd offset $SG148133     ; "*\tc #DCD7E4"
.data:00000E7C                 dd offset $SG148134     ; "=\tc #1C1A1C"
.data:00000E80                 dd offset $SG148135     ; "-\tc #403E58"
.data:00000E84                 dd offset $SG148136     ; ";\tc #5C5A8C"
.data:00000E88                 dd offset $SG148137     ; ">\tc #7C7EAC"
.data:00000E8C                 dd offset $SG148138     ; ",\tc #7C8EBC"
.data:00000E90                 dd offset $SG148139     ; "'\tc #242644"
.data:00000E94                 dd offset $SG148140     ; ")\tc #282668"
.data:00000E98                 dd offset $SG148141     ; "!\tc #24367C"
.data:00000E9C                 dd offset $SG148142     ; "~\tc #244A84"
.data:00000EA0                 dd offset $SG148143     ; "{\tc #2C5098"
.data:00000EA4                 dd offset $SG148144     ; "]\tc #14162C"
.data:00000EA8                 dd offset $SG148145     ; "^\tc #142E7C"
.data:00000EAC                 dd offset $SG148146     ; "/\tc #143789"
.data:00000EB0                 dd offset $SG148147     ; "(\tc #204990"
.data:00000EB4                 dd offset $SG148148     ; "_\tc #174091"
.data:00000EB8                 dd offset $SG148149     ; ":\tc #0C0630"
.data:00000EBC                 dd offset $SG148150     ; "<\tc #24327C"
.data:00000EC0                 dd offset $SG148151     ; "[\tc #2450A0"
.data:00000EC4                 dd offset $SG148152     ; "}\tc #345DB4"
.data:00000EC8                 dd offset $SG148153     ; "|\tc #3C68B8"
.data:00000ECC                 dd offset $SG148154     ; "1\tc #141244"
.data:00000ED0                 dd offset $SG148155     ; "2\tc #24428C"
.data:00000ED4                 dd offset $SG148156     ; "3\tc #3462B9"
.data:00000ED8                 dd offset $SG148157     ; "4\tc #4470C4"
.data:00000EDC                 dd offset $SG148158     ; "5\tc #4C7FD6"
.data:00000EE0                 dd offset $SG148159     ; "6\tc #4472CC"
.data:00000EE4                 dd offset $SG148160     ; "7\tc #24224C"
.data:00000EE8                 dd offset $SG148161     ; "8\tc #5C8DEC"
.data:00000EEC                 dd offset $SG148162     ; "9\tc #5C94F6"
.data:00000EF0                 dd offset $SG148163     ; "0\tc #5482DF"
.data:00000EF4                 dd offset $SG148164     ; "a\tc #619DF7"
.data:00000EF8                 dd offset $SG148165     ; "b\tc #6CA6FC"
.data:00000EFC                 dd offset $SG148166     ; "c\tc #64A2FC"
.data:00000F00                 dd offset $SG148167     ; "d\tc #1C2E5C"
.data:00000F04                 dd offset $SG148168     ; "e\tc #6CA2FC"
.data:00000F08                 dd offset $SG148169     ; "f\tc #74B2FC"
.data:00000F0C                 dd offset $SG148170     ; "g\tc #7CB8FC"
.data:00000F10                 dd offset $SG148171     ; "h\tc #1C3264"
.data:00000F14                 dd offset $SG148172     ; "i\tc #346AD4"
.data:00000F18                 dd offset $SG148173     ; "j\tc #7CBEFC"
.data:00000F1C                 dd offset $SG148174     ; "k\tc #3C72DC"
.data:00000F20                 dd offset $SG148175     ; "l\tc #243250"
.data:00000F24                 dd offset $SG148176     ; "m\tc #346AB4"
.data:00000F28                 dd offset $SG148177     ; "n\tc #3C82DC"
.data:00000F2C                 dd offset $SG148178     ; "o\tc #6C6A6C"
.data:00000F30                 dd offset $SG148179     ; "     .+.     "
.data:00000F34                 dd offset $SG148180     ; "   @##$##@   "
.data:00000F38                 dd offset $SG148181     ; "  @%&***&%@  "
.data:00000F3C                 dd offset $SG148182     ; " =-;>,,,>;-= "
.data:00000F40                 dd offset $SG148183     ; " ')!~{{{~!)' "
.data:00000F44                 dd offset $SG148184     ; "])^/({{{(_^)]"
.data:00000F48                 dd offset $SG148185     ; ":<_[}|||}[_<:"
.data:00000F4C                 dd offset $SG148186     ; "12[3455563[21"
.data:00000F50                 dd offset $SG148187     ; "7_365899063_7"
.data:00000F54                 dd offset $SG148188     ; " /|09abc904/ "
.data:00000F58                 dd offset $SG148189     ; " d}8efgfb83d "
.data:00000F5C                 dd offset $SG148190     ; "  hiafjgakh  "
.data:00000F60                 dd offset $SG148191     ; "   l~mnm~l   "
.data:00000F64                 dd offset $SG148192     ; "     o@o     "
.data:00000F64 _data           ends
.data:00000F64
.text$mn:00000F68 ; ===========================================================================
.text$mn:00000F68
.text$mn:00000F68 ; Segment type: Pure code
.text$mn:00000F68 ; Segment permissions: Read/Execute
.text$mn:00000F68 _text$mn        segment para public 'CODE' use32
.text$mn:00000F68                 assume cs:_text$mn
.text$mn:00000F68                 ;org 0F68h
.text$mn:00000F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F68
.text$mn:00000F68 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F68
.text$mn:00000F68 ; Attributes: bp-based frame
.text$mn:00000F68
.text$mn:00000F68 ; public: void __thiscall InsertedMatchedChars::removeInvalidElements(struct MatchedCharInserted)
.text$mn:00000F68                 public ?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z
.text$mn:00000F68 ?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z proc near
.text$mn:00000F68                                         ; CODE XREF: InsertedMatchedChars::add(MatchedCharInserted)+12p
.text$mn:00000F68                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+55Bp
.text$mn:00000F68
.text$mn:00000F68 var_A4          = byte ptr -0A4h
.text$mn:00000F68 var_98          = byte ptr -98h
.text$mn:00000F68 var_8C          = byte ptr -8Ch
.text$mn:00000F68 var_80          = byte ptr -80h
.text$mn:00000F68 var_74          = byte ptr -74h
.text$mn:00000F68 var_68          = byte ptr -68h
.text$mn:00000F68 var_5C          = dword ptr -5Ch
.text$mn:00000F68 var_58          = dword ptr -58h
.text$mn:00000F68 var_54          = dword ptr -54h
.text$mn:00000F68 var_50          = dword ptr -50h
.text$mn:00000F68 var_4C          = dword ptr -4Ch
.text$mn:00000F68 var_48          = dword ptr -48h
.text$mn:00000F68 var_44          = dword ptr -44h
.text$mn:00000F68 var_40          = dword ptr -40h
.text$mn:00000F68 var_3C          = dword ptr -3Ch
.text$mn:00000F68 var_38          = dword ptr -38h
.text$mn:00000F68 var_34          = dword ptr -34h
.text$mn:00000F68 var_30          = dword ptr -30h
.text$mn:00000F68 var_2C          = dword ptr -2Ch
.text$mn:00000F68 var_28          = dword ptr -28h
.text$mn:00000F68 var_24          = dword ptr -24h
.text$mn:00000F68 var_20          = dword ptr -20h
.text$mn:00000F68 var_1C          = dword ptr -1Ch
.text$mn:00000F68 var_18          = dword ptr -18h
.text$mn:00000F68 var_14          = dword ptr -14h
.text$mn:00000F68 var_10          = dword ptr -10h
.text$mn:00000F68 var_C           = dword ptr -0Ch
.text$mn:00000F68 var_4           = dword ptr -4
.text$mn:00000F68 arg_0           = byte ptr  8
.text$mn:00000F68 arg_4           = dword ptr  0Ch
.text$mn:00000F68
.text$mn:00000F68                 push    ebp
.text$mn:00000F69                 mov     ebp, esp
.text$mn:00000F6B                 push    0FFFFFFFFh
.text$mn:00000F6D                 push    offset __ehhandler$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z
.text$mn:00000F72                 mov     eax, large fs:0
.text$mn:00000F78                 push    eax
.text$mn:00000F79                 sub     esp, 98h
.text$mn:00000F7F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000F84                 xor     eax, ebp
.text$mn:00000F86                 push    eax
.text$mn:00000F87                 lea     eax, [ebp+var_C]
.text$mn:00000F8A                 mov     large fs:0, eax
.text$mn:00000F90                 mov     [ebp+var_10], ecx
.text$mn:00000F93                 movsx   eax, [ebp+arg_0]
.text$mn:00000F97                 cmp     eax, 0Ah
.text$mn:00000F9A                 jz      short loc_FA5
.text$mn:00000F9C                 movsx   ecx, [ebp+arg_0]
.text$mn:00000FA0                 cmp     ecx, 0Dh
.text$mn:00000FA3                 jnz     short loc_FB2
.text$mn:00000FA5
.text$mn:00000FA5 loc_FA5:                                ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+32j
.text$mn:00000FA5                 mov     ecx, [ebp+var_10]
.text$mn:00000FA8                 call    ?clear@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::clear(void)
.text$mn:00000FAD                 jmp     loc_116D
.text$mn:00000FB2 ; ---------------------------------------------------------------------------
.text$mn:00000FB2
.text$mn:00000FB2 loc_FB2:                                ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+3Bj
.text$mn:00000FB2                 mov     ecx, [ebp+var_10]
.text$mn:00000FB5                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:00000FBA                 sub     eax, 1
.text$mn:00000FBD                 mov     [ebp+var_14], eax
.text$mn:00000FC0                 jmp     short loc_FCB
.text$mn:00000FC2 ; ---------------------------------------------------------------------------
.text$mn:00000FC2
.text$mn:00000FC2 loc_FC2:                                ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted):loc_1168j
.text$mn:00000FC2                 mov     edx, [ebp+var_14]
.text$mn:00000FC5                 sub     edx, 1
.text$mn:00000FC8                 mov     [ebp+var_14], edx
.text$mn:00000FCB
.text$mn:00000FCB loc_FCB:                                ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+58j
.text$mn:00000FCB                 cmp     [ebp+var_14], 0
.text$mn:00000FCF                 jl      loc_116D
.text$mn:00000FD5                 mov     eax, [ebp+var_14]
.text$mn:00000FD8                 push    eax
.text$mn:00000FD9                 mov     ecx, [ebp+var_10]
.text$mn:00000FDC                 call    ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)
.text$mn:00000FE1                 mov     ecx, [eax+4]
.text$mn:00000FE4                 cmp     ecx, [ebp+arg_4]
.text$mn:00000FE7                 jge     loc_10CF
.text$mn:00000FED                 push    0               ; __int32
.text$mn:00000FEF                 mov     edx, [ebp+arg_4]
.text$mn:00000FF2                 push    edx             ; unsigned int
.text$mn:00000FF3                 push    876h            ; unsigned int
.text$mn:00000FF8                 mov     eax, [ebp+var_10]
.text$mn:00000FFB                 mov     ecx, [eax+10h]  ; this
.text$mn:00000FFE                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001003                 mov     [ebp+var_3C], eax
.text$mn:00001006                 push    0               ; __int32
.text$mn:00001008                 mov     ecx, [ebp+var_14]
.text$mn:0000100B                 push    ecx
.text$mn:0000100C                 mov     ecx, [ebp+var_10]
.text$mn:0000100F                 call    ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)
.text$mn:00001014                 mov     edx, [eax+4]
.text$mn:00001017                 push    edx             ; unsigned int
.text$mn:00001018                 push    876h            ; unsigned int
.text$mn:0000101D                 mov     eax, [ebp+var_10]
.text$mn:00001020                 mov     ecx, [eax+10h]  ; this
.text$mn:00001023                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001028                 mov     [ebp+var_20], eax
.text$mn:0000102B                 mov     ecx, [ebp+var_3C]
.text$mn:0000102E                 cmp     ecx, [ebp+var_20]
.text$mn:00001031                 jz      loc_10CA
.text$mn:00001037                 mov     edx, [ebp+var_14]
.text$mn:0000103A                 push    edx
.text$mn:0000103B                 lea     eax, [ebp+var_80]
.text$mn:0000103E                 push    eax
.text$mn:0000103F                 lea     ecx, [ebp+var_98]
.text$mn:00001045                 push    ecx
.text$mn:00001046                 mov     ecx, [ebp+var_10]
.text$mn:00001049                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:0000104E                 mov     [ebp+var_40], eax
.text$mn:00001051                 mov     edx, [ebp+var_40]
.text$mn:00001054                 mov     [ebp+var_28], edx
.text$mn:00001057                 mov     [ebp+var_4], 0
.text$mn:0000105E                 mov     ecx, [ebp+var_28]
.text$mn:00001061                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:00001066                 mov     [ebp+var_38], eax
.text$mn:00001069                 mov     eax, [ebp+var_38]
.text$mn:0000106C                 mov     [ebp+var_30], eax
.text$mn:0000106F                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001073                 sub     esp, 0Ch
.text$mn:00001076                 mov     ecx, esp
.text$mn:00001078                 mov     [ebp+var_48], esp
.text$mn:0000107B                 mov     edx, [ebp+var_30]
.text$mn:0000107E                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000107F                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:00001084                 mov     [ebp+var_1C], eax
.text$mn:00001087                 mov     eax, [ebp+var_1C]
.text$mn:0000108A                 mov     [ebp+var_50], eax
.text$mn:0000108D                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001091                 lea     ecx, [ebp+var_68]
.text$mn:00001094                 push    ecx
.text$mn:00001095                 mov     ecx, [ebp+var_10]
.text$mn:00001098                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000109C                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:000010A1                 mov     [ebp+var_58], eax
.text$mn:000010A4                 lea     ecx, [ebp+var_68]
.text$mn:000010A7                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000010AC                 mov     byte ptr [ebp+var_4], 0
.text$mn:000010B0                 lea     ecx, [ebp+var_80]
.text$mn:000010B3                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000010B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000010BF                 lea     ecx, [ebp+var_98]
.text$mn:000010C5                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000010CA
.text$mn:000010CA loc_10CA:                               ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+C9j
.text$mn:000010CA                 jmp     loc_1168
.text$mn:000010CF ; ---------------------------------------------------------------------------
.text$mn:000010CF
.text$mn:000010CF loc_10CF:                               ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+7Fj
.text$mn:000010CF                 mov     edx, [ebp+var_14]
.text$mn:000010D2                 push    edx
.text$mn:000010D3                 lea     eax, [ebp+var_8C]
.text$mn:000010D9                 push    eax
.text$mn:000010DA                 lea     ecx, [ebp+var_A4]
.text$mn:000010E0                 push    ecx
.text$mn:000010E1                 mov     ecx, [ebp+var_10]
.text$mn:000010E4                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:000010E9                 mov     [ebp+var_24], eax
.text$mn:000010EC                 mov     edx, [ebp+var_24]
.text$mn:000010EF                 mov     [ebp+var_2C], edx
.text$mn:000010F2                 mov     [ebp+var_4], 3
.text$mn:000010F9                 mov     ecx, [ebp+var_2C]
.text$mn:000010FC                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:00001101                 mov     [ebp+var_34], eax
.text$mn:00001104                 mov     eax, [ebp+var_34]
.text$mn:00001107                 mov     [ebp+var_18], eax
.text$mn:0000110A                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000110E                 sub     esp, 0Ch
.text$mn:00001111                 mov     ecx, esp
.text$mn:00001113                 mov     [ebp+var_4C], esp
.text$mn:00001116                 mov     edx, [ebp+var_18]
.text$mn:00001119                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000111A                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000111F                 mov     [ebp+var_44], eax
.text$mn:00001122                 mov     eax, [ebp+var_44]
.text$mn:00001125                 mov     [ebp+var_54], eax
.text$mn:00001128                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000112C                 lea     ecx, [ebp+var_74]
.text$mn:0000112F                 push    ecx
.text$mn:00001130                 mov     ecx, [ebp+var_10]
.text$mn:00001133                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001137                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:0000113C                 mov     [ebp+var_5C], eax
.text$mn:0000113F                 lea     ecx, [ebp+var_74]
.text$mn:00001142                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001147                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000114B                 lea     ecx, [ebp+var_8C]
.text$mn:00001151                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001156                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000115D                 lea     ecx, [ebp+var_A4]
.text$mn:00001163                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001168
.text$mn:00001168 loc_1168:                               ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted):loc_10CAj
.text$mn:00001168                 jmp     loc_FC2
.text$mn:0000116D ; ---------------------------------------------------------------------------
.text$mn:0000116D
.text$mn:0000116D loc_116D:                               ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+45j
.text$mn:0000116D                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+67j
.text$mn:0000116D                 mov     ecx, [ebp+var_C]
.text$mn:00001170                 mov     large fs:0, ecx
.text$mn:00001177                 pop     ecx
.text$mn:00001178                 mov     esp, ebp
.text$mn:0000117A                 pop     ebp
.text$mn:0000117B                 retn    8
.text$mn:0000117B ?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z endp
.text$mn:0000117B
.text$mn:0000117B ; ---------------------------------------------------------------------------
.text$mn:0000117E                 db 0Ah dup(0CCh)
.text$mn:00001188
.text$mn:00001188 ; =============== S U B R O U T I N E =======================================
.text$mn:00001188
.text$mn:00001188 ; Attributes: bp-based frame
.text$mn:00001188
.text$mn:00001188 ; public: void __thiscall InsertedMatchedChars::add(struct MatchedCharInserted)
.text$mn:00001188                 public ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z
.text$mn:00001188 ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z proc near
.text$mn:00001188                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+1ABp
.text$mn:00001188                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+1F4p ...
.text$mn:00001188
.text$mn:00001188 var_4           = dword ptr -4
.text$mn:00001188 arg_0           = dword ptr  8
.text$mn:00001188 arg_4           = dword ptr  0Ch
.text$mn:00001188
.text$mn:00001188                 push    ebp
.text$mn:00001189                 mov     ebp, esp
.text$mn:0000118B                 push    ecx
.text$mn:0000118C                 mov     [ebp+var_4], ecx
.text$mn:0000118F                 mov     eax, [ebp+arg_4]
.text$mn:00001192                 push    eax
.text$mn:00001193                 mov     ecx, [ebp+arg_0]
.text$mn:00001196                 push    ecx
.text$mn:00001197                 mov     ecx, [ebp+var_4]
.text$mn:0000119A                 call    ?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)
.text$mn:0000119F                 lea     edx, [ebp+arg_0]
.text$mn:000011A2                 push    edx
.text$mn:000011A3                 mov     ecx, [ebp+var_4]
.text$mn:000011A6                 call    ?push_back@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXABUMatchedCharInserted@@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)
.text$mn:000011AB                 mov     esp, ebp
.text$mn:000011AD                 pop     ebp
.text$mn:000011AE                 retn    8
.text$mn:000011AE ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z endp
.text$mn:000011AE
.text$mn:000011AE ; ---------------------------------------------------------------------------
.text$mn:000011B1                 align 8
.text$mn:000011B8
.text$mn:000011B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000011B8
.text$mn:000011B8 ; Attributes: bp-based frame
.text$mn:000011B8
.text$mn:000011B8 ; int __thiscall InsertedMatchedChars::search(InsertedMatchedChars *this, char, char, int)
.text$mn:000011B8                 public ?search@InsertedMatchedChars@@QAEHDDH@Z
.text$mn:000011B8 ?search@InsertedMatchedChars@@QAEHDDH@Z proc near
.text$mn:000011B8                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+282p
.text$mn:000011B8                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+34Cp ...
.text$mn:000011B8
.text$mn:000011B8 var_138         = byte ptr -138h
.text$mn:000011B8 var_12C         = byte ptr -12Ch
.text$mn:000011B8 var_120         = byte ptr -120h
.text$mn:000011B8 var_114         = byte ptr -114h
.text$mn:000011B8 var_108         = byte ptr -108h
.text$mn:000011B8 var_FC          = byte ptr -0FCh
.text$mn:000011B8 var_F0          = byte ptr -0F0h
.text$mn:000011B8 var_E4          = byte ptr -0E4h
.text$mn:000011B8 var_D8          = byte ptr -0D8h
.text$mn:000011B8 var_CC          = byte ptr -0CCh
.text$mn:000011B8 var_C0          = byte ptr -0C0h
.text$mn:000011B8 var_B4          = byte ptr -0B4h
.text$mn:000011B8 var_A8          = dword ptr -0A8h
.text$mn:000011B8 var_A4          = dword ptr -0A4h
.text$mn:000011B8 var_A0          = dword ptr -0A0h
.text$mn:000011B8 var_9C          = dword ptr -9Ch
.text$mn:000011B8 var_98          = dword ptr -98h
.text$mn:000011B8 var_94          = dword ptr -94h
.text$mn:000011B8 var_90          = dword ptr -90h
.text$mn:000011B8 var_8C          = dword ptr -8Ch
.text$mn:000011B8 var_88          = dword ptr -88h
.text$mn:000011B8 var_84          = dword ptr -84h
.text$mn:000011B8 var_80          = dword ptr -80h
.text$mn:000011B8 var_7C          = dword ptr -7Ch
.text$mn:000011B8 var_78          = dword ptr -78h
.text$mn:000011B8 var_74          = dword ptr -74h
.text$mn:000011B8 var_70          = dword ptr -70h
.text$mn:000011B8 var_6C          = dword ptr -6Ch
.text$mn:000011B8 var_68          = dword ptr -68h
.text$mn:000011B8 var_64          = dword ptr -64h
.text$mn:000011B8 var_60          = dword ptr -60h
.text$mn:000011B8 var_5C          = dword ptr -5Ch
.text$mn:000011B8 var_58          = dword ptr -58h
.text$mn:000011B8 var_54          = dword ptr -54h
.text$mn:000011B8 var_50          = dword ptr -50h
.text$mn:000011B8 var_4C          = dword ptr -4Ch
.text$mn:000011B8 var_48          = dword ptr -48h
.text$mn:000011B8 var_44          = dword ptr -44h
.text$mn:000011B8 var_40          = dword ptr -40h
.text$mn:000011B8 var_3C          = dword ptr -3Ch
.text$mn:000011B8 var_38          = dword ptr -38h
.text$mn:000011B8 var_34          = dword ptr -34h
.text$mn:000011B8 var_30          = dword ptr -30h
.text$mn:000011B8 var_2C          = dword ptr -2Ch
.text$mn:000011B8 var_28          = dword ptr -28h
.text$mn:000011B8 var_24          = dword ptr -24h
.text$mn:000011B8 var_20          = dword ptr -20h
.text$mn:000011B8 var_1C          = dword ptr -1Ch
.text$mn:000011B8 var_18          = dword ptr -18h
.text$mn:000011B8 var_11          = byte ptr -11h
.text$mn:000011B8 var_10          = dword ptr -10h
.text$mn:000011B8 var_C           = dword ptr -0Ch
.text$mn:000011B8 var_4           = dword ptr -4
.text$mn:000011B8 arg_0           = byte ptr  8
.text$mn:000011B8 arg_4           = byte ptr  0Ch
.text$mn:000011B8 arg_8           = dword ptr  10h
.text$mn:000011B8
.text$mn:000011B8                 push    ebp
.text$mn:000011B9                 mov     ebp, esp
.text$mn:000011BB                 push    0FFFFFFFFh
.text$mn:000011BD                 push    offset __ehhandler$?search@InsertedMatchedChars@@QAEHDDH@Z
.text$mn:000011C2                 mov     eax, large fs:0
.text$mn:000011C8                 push    eax
.text$mn:000011C9                 sub     esp, 12Ch
.text$mn:000011CF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000011D4                 xor     eax, ebp
.text$mn:000011D6                 push    eax
.text$mn:000011D7                 lea     eax, [ebp+var_C]
.text$mn:000011DA                 mov     large fs:0, eax
.text$mn:000011E0                 mov     [ebp+var_10], ecx
.text$mn:000011E3                 mov     ecx, [ebp+var_10] ; this
.text$mn:000011E6                 call    ?isEmpty@InsertedMatchedChars@@QBE_NXZ ; InsertedMatchedChars::isEmpty(void)
.text$mn:000011EB                 movzx   eax, al
.text$mn:000011EE                 test    eax, eax
.text$mn:000011F0                 jz      short loc_11FA
.text$mn:000011F2                 or      eax, 0FFFFFFFFh
.text$mn:000011F5                 jmp     loc_15CC
.text$mn:000011FA ; ---------------------------------------------------------------------------
.text$mn:000011FA
.text$mn:000011FA loc_11FA:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+38j
.text$mn:000011FA                 push    0               ; __int32
.text$mn:000011FC                 mov     ecx, [ebp+arg_8]
.text$mn:000011FF                 push    ecx             ; unsigned int
.text$mn:00001200                 push    876h            ; unsigned int
.text$mn:00001205                 mov     edx, [ebp+var_10]
.text$mn:00001208                 mov     ecx, [edx+10h]  ; this
.text$mn:0000120B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001210                 mov     [ebp+var_70], eax
.text$mn:00001213                 mov     ecx, [ebp+var_10]
.text$mn:00001216                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:0000121B                 sub     eax, 1
.text$mn:0000121E                 mov     [ebp+var_18], eax
.text$mn:00001221                 jmp     short loc_122C
.text$mn:00001223 ; ---------------------------------------------------------------------------
.text$mn:00001223
.text$mn:00001223 loc_1223:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int):loc_15C4j
.text$mn:00001223                 mov     eax, [ebp+var_18]
.text$mn:00001226                 sub     eax, 1
.text$mn:00001229                 mov     [ebp+var_18], eax
.text$mn:0000122C
.text$mn:0000122C loc_122C:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+69j
.text$mn:0000122C                 cmp     [ebp+var_18], 0
.text$mn:00001230                 jl      loc_15C9
.text$mn:00001236                 mov     ecx, [ebp+var_18]
.text$mn:00001239                 push    ecx
.text$mn:0000123A                 mov     ecx, [ebp+var_10]
.text$mn:0000123D                 call    ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)
.text$mn:00001242                 movsx   edx, byte ptr [eax]
.text$mn:00001245                 movsx   eax, [ebp+arg_0]
.text$mn:00001249                 cmp     edx, eax
.text$mn:0000124B                 jnz     loc_15C4
.text$mn:00001251                 mov     ecx, [ebp+var_18]
.text$mn:00001254                 push    ecx
.text$mn:00001255                 mov     ecx, [ebp+var_10]
.text$mn:00001258                 call    ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)
.text$mn:0000125D                 mov     edx, [eax+4]
.text$mn:00001260                 cmp     edx, [ebp+arg_8]
.text$mn:00001263                 jge     loc_151C
.text$mn:00001269                 push    0               ; __int32
.text$mn:0000126B                 mov     eax, [ebp+var_18]
.text$mn:0000126E                 push    eax
.text$mn:0000126F                 mov     ecx, [ebp+var_10]
.text$mn:00001272                 call    ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)
.text$mn:00001277                 mov     ecx, [eax+4]
.text$mn:0000127A                 push    ecx             ; unsigned int
.text$mn:0000127B                 push    876h            ; unsigned int
.text$mn:00001280                 mov     edx, [ebp+var_10]
.text$mn:00001283                 mov     ecx, [edx+10h]  ; this
.text$mn:00001286                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000128B                 mov     [ebp+var_20], eax
.text$mn:0000128E                 mov     eax, [ebp+var_70]
.text$mn:00001291                 cmp     eax, [ebp+var_20]
.text$mn:00001294                 jnz     loc_1472
.text$mn:0000129A                 push    0               ; __int32
.text$mn:0000129C                 mov     ecx, [ebp+var_20]
.text$mn:0000129F                 push    ecx             ; unsigned int
.text$mn:000012A0                 push    858h            ; unsigned int
.text$mn:000012A5                 mov     edx, [ebp+var_10]
.text$mn:000012A8                 mov     ecx, [edx+10h]  ; this
.text$mn:000012AB                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000012B0                 mov     [ebp+var_2C], eax
.text$mn:000012B3                 mov     eax, [ebp+arg_8]
.text$mn:000012B6                 mov     [ebp+var_1C], eax
.text$mn:000012B9                 jmp     short loc_12C4
.text$mn:000012BB ; ---------------------------------------------------------------------------
.text$mn:000012BB
.text$mn:000012BB loc_12BB:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int):loc_1468j
.text$mn:000012BB                 mov     ecx, [ebp+var_1C]
.text$mn:000012BE                 add     ecx, 1
.text$mn:000012C1                 mov     [ebp+var_1C], ecx
.text$mn:000012C4
.text$mn:000012C4 loc_12C4:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+101j
.text$mn:000012C4                 mov     edx, [ebp+var_1C]
.text$mn:000012C7                 cmp     edx, [ebp+var_2C]
.text$mn:000012CA                 jg      loc_146D
.text$mn:000012D0                 push    0               ; __int32
.text$mn:000012D2                 mov     eax, [ebp+var_1C]
.text$mn:000012D5                 push    eax             ; unsigned int
.text$mn:000012D6                 push    7D7h            ; unsigned int
.text$mn:000012DB                 mov     ecx, [ebp+var_10]
.text$mn:000012DE                 mov     ecx, [ecx+10h]  ; this
.text$mn:000012E1                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000012E6                 mov     [ebp+var_11], al
.text$mn:000012E9                 movsx   edx, [ebp+var_11]
.text$mn:000012ED                 cmp     edx, 20h ; ' '
.text$mn:000012F0                 jz      loc_1468
.text$mn:000012F6                 movsx   eax, [ebp+var_11]
.text$mn:000012FA                 movsx   ecx, [ebp+arg_4]
.text$mn:000012FE                 cmp     eax, ecx
.text$mn:00001300                 jnz     loc_13B8
.text$mn:00001306                 mov     edx, [ebp+var_18]
.text$mn:00001309                 push    edx
.text$mn:0000130A                 lea     eax, [ebp+var_CC]
.text$mn:00001310                 push    eax
.text$mn:00001311                 lea     ecx, [ebp+var_12C]
.text$mn:00001317                 push    ecx
.text$mn:00001318                 mov     ecx, [ebp+var_10]
.text$mn:0000131B                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:00001320                 mov     [ebp+var_54], eax
.text$mn:00001323                 mov     edx, [ebp+var_54]
.text$mn:00001326                 mov     [ebp+var_34], edx
.text$mn:00001329                 mov     [ebp+var_4], 0
.text$mn:00001330                 mov     ecx, [ebp+var_34]
.text$mn:00001333                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:00001338                 mov     [ebp+var_74], eax
.text$mn:0000133B                 mov     eax, [ebp+var_74]
.text$mn:0000133E                 mov     [ebp+var_3C], eax
.text$mn:00001341                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001345                 sub     esp, 0Ch
.text$mn:00001348                 mov     ecx, esp
.text$mn:0000134A                 mov     [ebp+var_84], esp
.text$mn:00001350                 mov     edx, [ebp+var_3C]
.text$mn:00001353                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001354                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:00001359                 mov     [ebp+var_5C], eax
.text$mn:0000135C                 mov     eax, [ebp+var_5C]
.text$mn:0000135F                 mov     [ebp+var_7C], eax
.text$mn:00001362                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001366                 lea     ecx, [ebp+var_B4]
.text$mn:0000136C                 push    ecx
.text$mn:0000136D                 mov     ecx, [ebp+var_10]
.text$mn:00001370                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001374                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:00001379                 mov     [ebp+var_A4], eax
.text$mn:0000137F                 lea     ecx, [ebp+var_B4]
.text$mn:00001385                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000138A                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000138E                 lea     ecx, [ebp+var_CC]
.text$mn:00001394                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001399                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000013A0                 lea     ecx, [ebp+var_12C]
.text$mn:000013A6                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000013AB                 mov     eax, [ebp+var_1C]
.text$mn:000013AE                 jmp     loc_15CC
.text$mn:000013B3 ; ---------------------------------------------------------------------------
.text$mn:000013B3                 jmp     loc_1468
.text$mn:000013B8 ; ---------------------------------------------------------------------------
.text$mn:000013B8
.text$mn:000013B8 loc_13B8:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+148j
.text$mn:000013B8                 mov     edx, [ebp+var_18]
.text$mn:000013BB                 push    edx
.text$mn:000013BC                 lea     eax, [ebp+var_114]
.text$mn:000013C2                 push    eax
.text$mn:000013C3                 lea     ecx, [ebp+var_FC]
.text$mn:000013C9                 push    ecx
.text$mn:000013CA                 mov     ecx, [ebp+var_10]
.text$mn:000013CD                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:000013D2                 mov     [ebp+var_44], eax
.text$mn:000013D5                 mov     edx, [ebp+var_44]
.text$mn:000013D8                 mov     [ebp+var_6C], edx
.text$mn:000013DB                 mov     [ebp+var_4], 3
.text$mn:000013E2                 mov     ecx, [ebp+var_6C]
.text$mn:000013E5                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:000013EA                 mov     [ebp+var_4C], eax
.text$mn:000013ED                 mov     eax, [ebp+var_4C]
.text$mn:000013F0                 mov     [ebp+var_64], eax
.text$mn:000013F3                 mov     byte ptr [ebp+var_4], 4
.text$mn:000013F7                 sub     esp, 0Ch
.text$mn:000013FA                 mov     ecx, esp
.text$mn:000013FC                 mov     [ebp+var_8C], esp
.text$mn:00001402                 mov     edx, [ebp+var_64]
.text$mn:00001405                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001406                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000140B                 mov     [ebp+var_28], eax
.text$mn:0000140E                 mov     eax, [ebp+var_28]
.text$mn:00001411                 mov     [ebp+var_9C], eax
.text$mn:00001417                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000141B                 lea     ecx, [ebp+var_E4]
.text$mn:00001421                 push    ecx
.text$mn:00001422                 mov     ecx, [ebp+var_10]
.text$mn:00001425                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001429                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:0000142E                 mov     [ebp+var_94], eax
.text$mn:00001434                 lea     ecx, [ebp+var_E4]
.text$mn:0000143A                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000143F                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001443                 lea     ecx, [ebp+var_114]
.text$mn:00001449                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000144E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001455                 lea     ecx, [ebp+var_FC]
.text$mn:0000145B                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001460                 or      eax, 0FFFFFFFFh
.text$mn:00001463                 jmp     loc_15CC
.text$mn:00001468 ; ---------------------------------------------------------------------------
.text$mn:00001468
.text$mn:00001468 loc_1468:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+138j
.text$mn:00001468                                         ; InsertedMatchedChars::search(char,char,int)+1FBj
.text$mn:00001468                 jmp     loc_12BB
.text$mn:0000146D ; ---------------------------------------------------------------------------
.text$mn:0000146D
.text$mn:0000146D loc_146D:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+112j
.text$mn:0000146D                 jmp     loc_1517
.text$mn:00001472 ; ---------------------------------------------------------------------------
.text$mn:00001472
.text$mn:00001472 loc_1472:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+DCj
.text$mn:00001472                 mov     edx, [ebp+var_18]
.text$mn:00001475                 push    edx
.text$mn:00001476                 lea     eax, [ebp+var_D8]
.text$mn:0000147C                 push    eax
.text$mn:0000147D                 lea     ecx, [ebp+var_F0]
.text$mn:00001483                 push    ecx
.text$mn:00001484                 mov     ecx, [ebp+var_10]
.text$mn:00001487                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:0000148C                 mov     [ebp+var_30], eax
.text$mn:0000148F                 mov     edx, [ebp+var_30]
.text$mn:00001492                 mov     [ebp+var_38], edx
.text$mn:00001495                 mov     [ebp+var_4], 6
.text$mn:0000149C                 mov     ecx, [ebp+var_38]
.text$mn:0000149F                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:000014A4                 mov     [ebp+var_40], eax
.text$mn:000014A7                 mov     eax, [ebp+var_40]
.text$mn:000014AA                 mov     [ebp+var_48], eax
.text$mn:000014AD                 mov     byte ptr [ebp+var_4], 7
.text$mn:000014B1                 sub     esp, 0Ch
.text$mn:000014B4                 mov     ecx, esp
.text$mn:000014B6                 mov     [ebp+var_80], esp
.text$mn:000014B9                 mov     edx, [ebp+var_48]
.text$mn:000014BC                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000014BD                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:000014C2                 mov     [ebp+var_50], eax
.text$mn:000014C5                 mov     eax, [ebp+var_50]
.text$mn:000014C8                 mov     [ebp+var_88], eax
.text$mn:000014CE                 mov     byte ptr [ebp+var_4], 8
.text$mn:000014D2                 lea     ecx, [ebp+var_C0]
.text$mn:000014D8                 push    ecx
.text$mn:000014D9                 mov     ecx, [ebp+var_10]
.text$mn:000014DC                 mov     byte ptr [ebp+var_4], 7
.text$mn:000014E0                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:000014E5                 mov     [ebp+var_90], eax
.text$mn:000014EB                 lea     ecx, [ebp+var_C0]
.text$mn:000014F1                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000014F6                 mov     byte ptr [ebp+var_4], 6
.text$mn:000014FA                 lea     ecx, [ebp+var_D8]
.text$mn:00001500                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001505                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000150C                 lea     ecx, [ebp+var_F0]
.text$mn:00001512                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00001517
.text$mn:00001517 loc_1517:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int):loc_146Dj
.text$mn:00001517                 jmp     loc_15C4
.text$mn:0000151C ; ---------------------------------------------------------------------------
.text$mn:0000151C
.text$mn:0000151C loc_151C:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+ABj
.text$mn:0000151C                 mov     edx, [ebp+var_18]
.text$mn:0000151F                 push    edx
.text$mn:00001520                 lea     eax, [ebp+var_120]
.text$mn:00001526                 push    eax
.text$mn:00001527                 lea     ecx, [ebp+var_138]
.text$mn:0000152D                 push    ecx
.text$mn:0000152E                 mov     ecx, [ebp+var_10]
.text$mn:00001531                 call    ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)
.text$mn:00001536                 mov     [ebp+var_58], eax
.text$mn:00001539                 mov     edx, [ebp+var_58]
.text$mn:0000153C                 mov     [ebp+var_60], edx
.text$mn:0000153F                 mov     [ebp+var_4], 9
.text$mn:00001546                 mov     ecx, [ebp+var_60]
.text$mn:00001549                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)
.text$mn:0000154E                 mov     [ebp+var_68], eax
.text$mn:00001551                 mov     eax, [ebp+var_68]
.text$mn:00001554                 mov     [ebp+var_24], eax
.text$mn:00001557                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000155B                 sub     esp, 0Ch
.text$mn:0000155E                 mov     ecx, esp
.text$mn:00001560                 mov     [ebp+var_98], esp
.text$mn:00001566                 mov     edx, [ebp+var_24]
.text$mn:00001569                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000156A                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000156F                 mov     [ebp+var_78], eax
.text$mn:00001572                 mov     eax, [ebp+var_78]
.text$mn:00001575                 mov     [ebp+var_A0], eax
.text$mn:0000157B                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000157F                 lea     ecx, [ebp+var_108]
.text$mn:00001585                 push    ecx
.text$mn:00001586                 mov     ecx, [ebp+var_10]
.text$mn:00001589                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000158D                 call    ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:00001592                 mov     [ebp+var_A8], eax
.text$mn:00001598                 lea     ecx, [ebp+var_108]
.text$mn:0000159E                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000015A3                 mov     byte ptr [ebp+var_4], 9
.text$mn:000015A7                 lea     ecx, [ebp+var_120]
.text$mn:000015AD                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000015B2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000015B9                 lea     ecx, [ebp+var_138]
.text$mn:000015BF                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:000015C4
.text$mn:000015C4 loc_15C4:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+93j
.text$mn:000015C4                                         ; InsertedMatchedChars::search(char,char,int):loc_1517j
.text$mn:000015C4                 jmp     loc_1223
.text$mn:000015C9 ; ---------------------------------------------------------------------------
.text$mn:000015C9
.text$mn:000015C9 loc_15C9:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+78j
.text$mn:000015C9                 or      eax, 0FFFFFFFFh
.text$mn:000015CC
.text$mn:000015CC loc_15CC:                               ; CODE XREF: InsertedMatchedChars::search(char,char,int)+3Dj
.text$mn:000015CC                                         ; InsertedMatchedChars::search(char,char,int)+1F6j ...
.text$mn:000015CC                 mov     ecx, [ebp+var_C]
.text$mn:000015CF                 mov     large fs:0, ecx
.text$mn:000015D6                 pop     ecx
.text$mn:000015D7                 mov     esp, ebp
.text$mn:000015D9                 pop     ebp
.text$mn:000015DA                 retn    0Ch
.text$mn:000015DA ?search@InsertedMatchedChars@@QAEHDDH@Z endp
.text$mn:000015DA
.text$mn:000015DA ; ---------------------------------------------------------------------------
.text$mn:000015DD                 db 0Bh dup(0CCh)
.text$mn:000015E8
.text$mn:000015E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015E8
.text$mn:000015E8 ; Attributes: bp-based frame
.text$mn:000015E8
.text$mn:000015E8 ; public: bool __thiscall AutoCompletion::setLanguage(enum  LangType)
.text$mn:000015E8                 public ?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z
.text$mn:000015E8 ?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z proc near
.text$mn:000015E8
.text$mn:000015E8 var_28C         = dword ptr -28Ch
.text$mn:000015E8 var_288         = dword ptr -288h
.text$mn:000015E8 var_284         = dword ptr -284h
.text$mn:000015E8 var_280         = dword ptr -280h
.text$mn:000015E8 var_27C         = dword ptr -27Ch
.text$mn:000015E8 var_278         = dword ptr -278h
.text$mn:000015E8 var_274         = dword ptr -274h
.text$mn:000015E8 var_270         = dword ptr -270h
.text$mn:000015E8 var_26C         = dword ptr -26Ch
.text$mn:000015E8 var_268         = dword ptr -268h
.text$mn:000015E8 var_264         = dword ptr -264h
.text$mn:000015E8 var_260         = dword ptr -260h
.text$mn:000015E8 var_25C         = dword ptr -25Ch
.text$mn:000015E8 var_258         = dword ptr -258h
.text$mn:000015E8 lpString        = dword ptr -254h
.text$mn:000015E8 var_250         = dword ptr -250h
.text$mn:000015E8 var_24C         = dword ptr -24Ch
.text$mn:000015E8 var_248         = dword ptr -248h
.text$mn:000015E8 var_244         = dword ptr -244h
.text$mn:000015E8 var_240         = dword ptr -240h
.text$mn:000015E8 lpString1       = dword ptr -23Ch
.text$mn:000015E8 var_238         = dword ptr -238h
.text$mn:000015E8 var_234         = byte ptr -234h
.text$mn:000015E8 Filename        = word ptr -218h
.text$mn:000015E8 var_10          = dword ptr -10h
.text$mn:000015E8 var_C           = dword ptr -0Ch
.text$mn:000015E8 var_4           = dword ptr -4
.text$mn:000015E8 arg_0           = dword ptr  8
.text$mn:000015E8
.text$mn:000015E8                 push    ebp
.text$mn:000015E9                 mov     ebp, esp
.text$mn:000015EB                 push    0FFFFFFFFh
.text$mn:000015ED                 push    offset __ehhandler$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z
.text$mn:000015F2                 mov     eax, large fs:0
.text$mn:000015F8                 push    eax
.text$mn:000015F9                 sub     esp, 280h
.text$mn:000015FF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001604                 xor     eax, ebp
.text$mn:00001606                 mov     [ebp+var_10], eax
.text$mn:00001609                 push    eax
.text$mn:0000160A                 lea     eax, [ebp+var_C]
.text$mn:0000160D                 mov     large fs:0, eax
.text$mn:00001613                 mov     [ebp+var_238], ecx
.text$mn:00001619                 mov     eax, [ebp+var_238]
.text$mn:0000161F                 mov     ecx, [eax+8]
.text$mn:00001622                 cmp     ecx, [ebp+arg_0]
.text$mn:00001625                 jnz     short loc_162E
.text$mn:00001627                 mov     al, 1
.text$mn:00001629                 jmp     loc_1D03
.text$mn:0000162E ; ---------------------------------------------------------------------------
.text$mn:0000162E
.text$mn:0000162E loc_162E:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+3Dj
.text$mn:0000162E                 mov     edx, [ebp+var_238]
.text$mn:00001634                 mov     eax, [ebp+arg_0]
.text$mn:00001637                 mov     [edx+8], eax
.text$mn:0000163A                 push    104h            ; nSize
.text$mn:0000163F                 lea     ecx, [ebp+Filename]
.text$mn:00001645                 push    ecx             ; lpFilename
.text$mn:00001646                 push    0               ; hModule
.text$mn:00001648                 call    dword ptr ds:__imp__GetModuleFileNameW@12 ; GetModuleFileNameW(x,x,x)
.text$mn:0000164E                 lea     edx, [ebp+Filename]
.text$mn:00001654                 push    edx             ; pszPath
.text$mn:00001655                 call    dword ptr ds:__imp__PathRemoveFileSpecW@4 ; PathRemoveFileSpecW(x)
.text$mn:0000165B                 push    offset $SG159145 ; "\\plugins\\APIs\\"
.text$mn:00001660                 lea     eax, [ebp+Filename]
.text$mn:00001666                 push    eax             ; lpString1
.text$mn:00001667                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:0000166D                 mov     ecx, [ebp+var_238] ; this
.text$mn:00001673                 call    ?getApiFileName@AutoCompletion@@AAEPB_WXZ ; AutoCompletion::getApiFileName(void)
.text$mn:00001678                 push    eax             ; lpString2
.text$mn:00001679                 lea     ecx, [ebp+Filename]
.text$mn:0000167F                 push    ecx             ; lpString1
.text$mn:00001680                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001686                 push    offset $SG159146 ; ".xml"
.text$mn:0000168B                 lea     edx, [ebp+Filename]
.text$mn:00001691                 push    edx             ; lpString1
.text$mn:00001692                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001698                 mov     eax, [ebp+var_238]
.text$mn:0000169E                 cmp     dword ptr [eax+0Ch], 0
.text$mn:000016A2                 jz      short loc_16EE
.text$mn:000016A4                 mov     ecx, [ebp+var_238]
.text$mn:000016AA                 mov     edx, [ecx+0Ch]
.text$mn:000016AD                 mov     [ebp+var_26C], edx
.text$mn:000016B3                 mov     eax, [ebp+var_26C]
.text$mn:000016B9                 mov     [ebp+var_258], eax
.text$mn:000016BF                 cmp     [ebp+var_258], 0
.text$mn:000016C6                 jz      short loc_16E4
.text$mn:000016C8                 push    1
.text$mn:000016CA                 mov     ecx, [ebp+var_258]
.text$mn:000016D0                 mov     edx, [ecx]
.text$mn:000016D2                 mov     ecx, [ebp+var_258]
.text$mn:000016D8                 mov     eax, [edx]
.text$mn:000016DA                 call    eax
.text$mn:000016DC                 mov     [ebp+var_27C], eax
.text$mn:000016E2                 jmp     short loc_16EE
.text$mn:000016E4 ; ---------------------------------------------------------------------------
.text$mn:000016E4
.text$mn:000016E4 loc_16E4:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+DEj
.text$mn:000016E4                 mov     [ebp+var_27C], 0
.text$mn:000016EE
.text$mn:000016EE loc_16EE:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+BAj
.text$mn:000016EE                                         ; AutoCompletion::setLanguage(LangType)+FAj
.text$mn:000016EE                 push    74h ; 't'       ; unsigned int
.text$mn:000016F0                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000016F5                 add     esp, 4
.text$mn:000016F8                 mov     [ebp+var_260], eax
.text$mn:000016FE                 mov     [ebp+var_4], 0
.text$mn:00001705                 cmp     [ebp+var_260], 0
.text$mn:0000170C                 jz      short loc_1728
.text$mn:0000170E                 lea     ecx, [ebp+Filename]
.text$mn:00001714                 push    ecx             ; wchar_t *
.text$mn:00001715                 mov     ecx, [ebp+var_260] ; this
.text$mn:0000171B                 call    ??0TiXmlDocument@@QAE@PB_W@Z ; TiXmlDocument::TiXmlDocument(wchar_t const *)
.text$mn:00001720                 mov     [ebp+var_264], eax
.text$mn:00001726                 jmp     short loc_1732
.text$mn:00001728 ; ---------------------------------------------------------------------------
.text$mn:00001728
.text$mn:00001728 loc_1728:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+124j
.text$mn:00001728                 mov     [ebp+var_264], 0
.text$mn:00001732
.text$mn:00001732 loc_1732:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+13Ej
.text$mn:00001732                 mov     edx, [ebp+var_264]
.text$mn:00001738                 mov     [ebp+var_270], edx
.text$mn:0000173E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001745                 mov     eax, [ebp+var_238]
.text$mn:0000174B                 mov     ecx, [ebp+var_270]
.text$mn:00001751                 mov     [eax+0Ch], ecx
.text$mn:00001754                 mov     edx, [ebp+var_238]
.text$mn:0000175A                 mov     ecx, [edx+0Ch]  ; this
.text$mn:0000175D                 call    ?LoadFile@TiXmlDocument@@QAE_NXZ ; TiXmlDocument::LoadFile(void)
.text$mn:00001762                 mov     ecx, [ebp+var_238]
.text$mn:00001768                 mov     [ecx], al
.text$mn:0000176A                 mov     [ebp+var_25C], 0
.text$mn:00001774                 mov     edx, [ebp+var_238]
.text$mn:0000177A                 movzx   eax, byte ptr [edx]
.text$mn:0000177D                 test    eax, eax
.text$mn:0000177F                 jz      loc_183A
.text$mn:00001785                 mov     ecx, [ebp+var_238]
.text$mn:0000178B                 mov     byte ptr [ecx], 0
.text$mn:0000178E                 push    offset $SG159157 ; "NotepadPlus"
.text$mn:00001793                 mov     edx, [ebp+var_238]
.text$mn:00001799                 mov     ecx, [edx+0Ch]  ; this
.text$mn:0000179C                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000017A1                 mov     [ebp+var_240], eax
.text$mn:000017A7                 cmp     [ebp+var_240], 0
.text$mn:000017AE                 jnz     short loc_17B7
.text$mn:000017B0                 xor     al, al
.text$mn:000017B2                 jmp     loc_1D03
.text$mn:000017B7 ; ---------------------------------------------------------------------------
.text$mn:000017B7
.text$mn:000017B7 loc_17B7:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+1C6j
.text$mn:000017B7                 push    offset $SG159159 ; "AutoComplete"
.text$mn:000017BC                 mov     ecx, [ebp+var_240] ; this
.text$mn:000017C2                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000017C7                 mov     [ebp+var_240], eax
.text$mn:000017CD                 mov     eax, [ebp+var_240]
.text$mn:000017D3                 mov     [ebp+var_25C], eax
.text$mn:000017D9                 cmp     [ebp+var_240], 0
.text$mn:000017E0                 jnz     short loc_17E9
.text$mn:000017E2                 xor     al, al
.text$mn:000017E4                 jmp     loc_1D03
.text$mn:000017E9 ; ---------------------------------------------------------------------------
.text$mn:000017E9
.text$mn:000017E9 loc_17E9:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+1F8j
.text$mn:000017E9                 push    offset $SG159161 ; "KeyWord"
.text$mn:000017EE                 mov     ecx, [ebp+var_240] ; this
.text$mn:000017F4                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000017F9                 mov     [ebp+var_240], eax
.text$mn:000017FF                 cmp     [ebp+var_240], 0
.text$mn:00001806                 jnz     short loc_180F
.text$mn:00001808                 xor     al, al
.text$mn:0000180A                 jmp     loc_1D03
.text$mn:0000180F ; ---------------------------------------------------------------------------
.text$mn:0000180F
.text$mn:0000180F loc_180F:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+21Ej
.text$mn:0000180F                 mov     ecx, [ebp+var_238]
.text$mn:00001815                 mov     edx, [ebp+var_240]
.text$mn:0000181B                 mov     [ecx+10h], edx
.text$mn:0000181E                 mov     eax, [ebp+var_238]
.text$mn:00001824                 cmp     dword ptr [eax+10h], 0
.text$mn:00001828                 jnz     short loc_1831
.text$mn:0000182A                 xor     al, al
.text$mn:0000182C                 jmp     loc_1D03
.text$mn:00001831 ; ---------------------------------------------------------------------------
.text$mn:00001831
.text$mn:00001831 loc_1831:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+240j
.text$mn:00001831                 mov     ecx, [ebp+var_238]
.text$mn:00001837                 mov     byte ptr [ecx], 1
.text$mn:0000183A
.text$mn:0000183A loc_183A:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+197j
.text$mn:0000183A                 mov     edx, [ebp+var_238]
.text$mn:00001840                 movzx   eax, byte ptr [edx]
.text$mn:00001843                 test    eax, eax
.text$mn:00001845                 jz      loc_1AD6
.text$mn:0000184B                 mov     ecx, [ebp+var_238]
.text$mn:00001851                 mov     byte ptr [ecx+28h], 1
.text$mn:00001855                 mov     edx, 28h ; '('
.text$mn:0000185A                 mov     eax, [ebp+var_238]
.text$mn:00001860                 mov     [eax+0B0h], dx
.text$mn:00001867                 mov     ecx, 29h ; ')'
.text$mn:0000186C                 mov     edx, [ebp+var_238]
.text$mn:00001872                 mov     [edx+0B2h], cx
.text$mn:00001879                 mov     eax, 2Ch ; ','
.text$mn:0000187E                 mov     ecx, [ebp+var_238]
.text$mn:00001884                 mov     [ecx+0B4h], ax
.text$mn:0000188B                 mov     edx, 3Bh ; ';'
.text$mn:00001890                 mov     eax, [ebp+var_238]
.text$mn:00001896                 mov     [eax+0B6h], dx
.text$mn:0000189D                 mov     ecx, [ebp+var_238]
.text$mn:000018A3                 mov     byte ptr [ecx+0D4h], 1
.text$mn:000018AA                 push    offset $SG159166 ; Str
.text$mn:000018AF                 mov     ecx, [ebp+var_238]
.text$mn:000018B5                 add     ecx, 0B8h ; '+'
.text$mn:000018BB                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000018C0                 push    offset $SG159168 ; "Environment"
.text$mn:000018C5                 mov     ecx, [ebp+var_25C] ; this
.text$mn:000018CB                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000018D0                 mov     [ebp+var_244], eax
.text$mn:000018D6                 cmp     [ebp+var_244], 0
.text$mn:000018DD                 jz      loc_1AD6
.text$mn:000018E3                 mov     [ebp+lpString1], 0
.text$mn:000018ED                 push    offset $SG159171 ; "ignoreCase"
.text$mn:000018F2                 mov     ecx, [ebp+var_244] ; this
.text$mn:000018F8                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000018FD                 mov     [ebp+lpString1], eax
.text$mn:00001903                 cmp     [ebp+lpString1], 0
.text$mn:0000190A                 jz      short loc_1939
.text$mn:0000190C                 push    offset $SG159173 ; "no"
.text$mn:00001911                 mov     edx, [ebp+lpString1]
.text$mn:00001917                 push    edx             ; lpString1
.text$mn:00001918                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:0000191E                 test    eax, eax
.text$mn:00001920                 jnz     short loc_1939
.text$mn:00001922                 mov     eax, [ebp+var_238]
.text$mn:00001928                 mov     byte ptr [eax+28h], 0
.text$mn:0000192C                 mov     ecx, [ebp+var_238]
.text$mn:00001932                 mov     byte ptr [ecx+0D4h], 0
.text$mn:00001939
.text$mn:00001939 loc_1939:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+322j
.text$mn:00001939                                         ; AutoCompletion::setLanguage(LangType)+338j
.text$mn:00001939                 push    offset $SG159174 ; "startFunc"
.text$mn:0000193E                 mov     ecx, [ebp+var_244] ; this
.text$mn:00001944                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001949                 mov     [ebp+lpString1], eax
.text$mn:0000194F                 cmp     [ebp+lpString1], 0
.text$mn:00001956                 jz      short loc_198D
.text$mn:00001958                 mov     edx, 2
.text$mn:0000195D                 imul    eax, edx, 0
.text$mn:00001960                 mov     ecx, [ebp+lpString1]
.text$mn:00001966                 movzx   edx, word ptr [ecx+eax]
.text$mn:0000196A                 test    edx, edx
.text$mn:0000196C                 jz      short loc_198D
.text$mn:0000196E                 mov     eax, 2
.text$mn:00001973                 imul    ecx, eax, 0
.text$mn:00001976                 mov     edx, [ebp+var_238]
.text$mn:0000197C                 mov     eax, [ebp+lpString1]
.text$mn:00001982                 mov     cx, [eax+ecx]
.text$mn:00001986                 mov     [edx+0B0h], cx
.text$mn:0000198D
.text$mn:0000198D loc_198D:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+36Ej
.text$mn:0000198D                                         ; AutoCompletion::setLanguage(LangType)+384j
.text$mn:0000198D                 push    offset $SG159176 ; "stopFunc"
.text$mn:00001992                 mov     ecx, [ebp+var_244] ; this
.text$mn:00001998                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:0000199D                 mov     [ebp+lpString1], eax
.text$mn:000019A3                 cmp     [ebp+lpString1], 0
.text$mn:000019AA                 jz      short loc_19E1
.text$mn:000019AC                 mov     edx, 2
.text$mn:000019B1                 imul    eax, edx, 0
.text$mn:000019B4                 mov     ecx, [ebp+lpString1]
.text$mn:000019BA                 movzx   edx, word ptr [ecx+eax]
.text$mn:000019BE                 test    edx, edx
.text$mn:000019C0                 jz      short loc_19E1
.text$mn:000019C2                 mov     eax, 2
.text$mn:000019C7                 imul    ecx, eax, 0
.text$mn:000019CA                 mov     edx, [ebp+var_238]
.text$mn:000019D0                 mov     eax, [ebp+lpString1]
.text$mn:000019D6                 mov     cx, [eax+ecx]
.text$mn:000019DA                 mov     [edx+0B2h], cx
.text$mn:000019E1
.text$mn:000019E1 loc_19E1:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+3C2j
.text$mn:000019E1                                         ; AutoCompletion::setLanguage(LangType)+3D8j
.text$mn:000019E1                 push    offset $SG159178 ; "paramSeparator"
.text$mn:000019E6                 mov     ecx, [ebp+var_244] ; this
.text$mn:000019EC                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000019F1                 mov     [ebp+lpString1], eax
.text$mn:000019F7                 cmp     [ebp+lpString1], 0
.text$mn:000019FE                 jz      short loc_1A35
.text$mn:00001A00                 mov     edx, 2
.text$mn:00001A05                 imul    eax, edx, 0
.text$mn:00001A08                 mov     ecx, [ebp+lpString1]
.text$mn:00001A0E                 movzx   edx, word ptr [ecx+eax]
.text$mn:00001A12                 test    edx, edx
.text$mn:00001A14                 jz      short loc_1A35
.text$mn:00001A16                 mov     eax, 2
.text$mn:00001A1B                 imul    ecx, eax, 0
.text$mn:00001A1E                 mov     edx, [ebp+var_238]
.text$mn:00001A24                 mov     eax, [ebp+lpString1]
.text$mn:00001A2A                 mov     cx, [eax+ecx]
.text$mn:00001A2E                 mov     [edx+0B4h], cx
.text$mn:00001A35
.text$mn:00001A35 loc_1A35:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+416j
.text$mn:00001A35                                         ; AutoCompletion::setLanguage(LangType)+42Cj
.text$mn:00001A35                 push    offset $SG159180 ; "terminal"
.text$mn:00001A3A                 mov     ecx, [ebp+var_244] ; this
.text$mn:00001A40                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001A45                 mov     [ebp+lpString1], eax
.text$mn:00001A4B                 cmp     [ebp+lpString1], 0
.text$mn:00001A52                 jz      short loc_1A89
.text$mn:00001A54                 mov     edx, 2
.text$mn:00001A59                 imul    eax, edx, 0
.text$mn:00001A5C                 mov     ecx, [ebp+lpString1]
.text$mn:00001A62                 movzx   edx, word ptr [ecx+eax]
.text$mn:00001A66                 test    edx, edx
.text$mn:00001A68                 jz      short loc_1A89
.text$mn:00001A6A                 mov     eax, 2
.text$mn:00001A6F                 imul    ecx, eax, 0
.text$mn:00001A72                 mov     edx, [ebp+var_238]
.text$mn:00001A78                 mov     eax, [ebp+lpString1]
.text$mn:00001A7E                 mov     cx, [eax+ecx]
.text$mn:00001A82                 mov     [edx+0B6h], cx
.text$mn:00001A89
.text$mn:00001A89 loc_1A89:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+46Aj
.text$mn:00001A89                                         ; AutoCompletion::setLanguage(LangType)+480j
.text$mn:00001A89                 push    offset $SG159182 ; "additionalWordChar"
.text$mn:00001A8E                 mov     ecx, [ebp+var_244] ; this
.text$mn:00001A94                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001A99                 mov     [ebp+lpString1], eax
.text$mn:00001A9F                 cmp     [ebp+lpString1], 0
.text$mn:00001AA6                 jz      short loc_1AD6
.text$mn:00001AA8                 mov     edx, 2
.text$mn:00001AAD                 imul    eax, edx, 0
.text$mn:00001AB0                 mov     ecx, [ebp+lpString1]
.text$mn:00001AB6                 movzx   edx, word ptr [ecx+eax]
.text$mn:00001ABA                 test    edx, edx
.text$mn:00001ABC                 jz      short loc_1AD6
.text$mn:00001ABE                 mov     eax, [ebp+lpString1]
.text$mn:00001AC4                 push    eax             ; Str
.text$mn:00001AC5                 mov     ecx, [ebp+var_238]
.text$mn:00001ACB                 add     ecx, 0B8h ; '+'
.text$mn:00001AD1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001AD6
.text$mn:00001AD6 loc_1AD6:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+25Dj
.text$mn:00001AD6                                         ; AutoCompletion::setLanguage(LangType)+2F5j ...
.text$mn:00001AD6                 mov     ecx, [ebp+var_238]
.text$mn:00001ADC                 movzx   edx, byte ptr [ecx]
.text$mn:00001ADF                 test    edx, edx
.text$mn:00001AE1                 jz      short loc_1AFD
.text$mn:00001AE3                 mov     eax, [ebp+var_238]
.text$mn:00001AE9                 mov     ecx, [eax+10h]
.text$mn:00001AEC                 push    ecx             ; struct TiXmlElement *
.text$mn:00001AED                 mov     ecx, [ebp+var_238]
.text$mn:00001AF3                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00001AF6                 call    ?setLanguageXML@FunctionCallTip@@QAEXPAVTiXmlElement@@@Z ; FunctionCallTip::setLanguageXML(TiXmlElement *)
.text$mn:00001AFB                 jmp     short loc_1B0D
.text$mn:00001AFD ; ---------------------------------------------------------------------------
.text$mn:00001AFD
.text$mn:00001AFD loc_1AFD:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+4F9j
.text$mn:00001AFD                 push    0               ; struct TiXmlElement *
.text$mn:00001AFF                 mov     ecx, [ebp+var_238]
.text$mn:00001B05                 add     ecx, 5Ch ; '\'  ; this
.text$mn:00001B08                 call    ?setLanguageXML@FunctionCallTip@@QAEXPAVTiXmlElement@@@Z ; FunctionCallTip::setLanguageXML(TiXmlElement *)
.text$mn:00001B0D
.text$mn:00001B0D loc_1B0D:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+513j
.text$mn:00001B0D                 push    offset $SG159186 ; Str
.text$mn:00001B12                 mov     ecx, [ebp+var_238]
.text$mn:00001B18                 add     ecx, 3Ch ; '<'
.text$mn:00001B1B                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001B20                 mov     ecx, [ebp+var_238]
.text$mn:00001B26                 add     ecx, 2Ch ; ','
.text$mn:00001B29                 call    ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::clear(void)
.text$mn:00001B2E                 mov     edx, [ebp+var_238]
.text$mn:00001B34                 movzx   eax, byte ptr [edx]
.text$mn:00001B37                 test    eax, eax
.text$mn:00001B39                 jz      loc_1CFB
.text$mn:00001B3F                 mov     ecx, [ebp+var_238]
.text$mn:00001B45                 mov     edx, [ecx+10h]
.text$mn:00001B48                 mov     [ebp+var_24C], edx
.text$mn:00001B4E                 jmp     short loc_1B66
.text$mn:00001B50 ; ---------------------------------------------------------------------------
.text$mn:00001B50
.text$mn:00001B50 loc_1B50:                               ; CODE XREF: AutoCompletion::setLanguage(LangType):loc_1C0Ej
.text$mn:00001B50                 push    offset $SG159192 ; "KeyWord"
.text$mn:00001B55                 mov     ecx, [ebp+var_24C] ; this
.text$mn:00001B5B                 call    ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::NextSiblingElement(wchar_t const *)
.text$mn:00001B60                 mov     [ebp+var_24C], eax
.text$mn:00001B66
.text$mn:00001B66 loc_1B66:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+566j
.text$mn:00001B66                 cmp     [ebp+var_24C], 0
.text$mn:00001B6D                 jz      loc_1C13
.text$mn:00001B73                 push    offset $SG159194 ; "name"
.text$mn:00001B78                 mov     ecx, [ebp+var_24C] ; this
.text$mn:00001B7E                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00001B83                 mov     [ebp+lpString], eax
.text$mn:00001B89                 cmp     [ebp+lpString], 0
.text$mn:00001B90                 jz      short loc_1C0E
.text$mn:00001B92                 mov     eax, [ebp+lpString]
.text$mn:00001B98                 push    eax             ; lpString
.text$mn:00001B99                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001B9F                 mov     [ebp+var_250], eax
.text$mn:00001BA5                 cmp     [ebp+var_250], 0
.text$mn:00001BAC                 jz      short loc_1C0E
.text$mn:00001BAE                 mov     ecx, [ebp+lpString]
.text$mn:00001BB4                 push    ecx             ; Str
.text$mn:00001BB5                 lea     ecx, [ebp+var_234]
.text$mn:00001BBB                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001BC0                 mov     [ebp+var_4], 1
.text$mn:00001BC7                 lea     edx, [ebp+var_234]
.text$mn:00001BCD                 push    edx
.text$mn:00001BCE                 mov     ecx, [ebp+var_238]
.text$mn:00001BD4                 add     ecx, 2Ch ; ','
.text$mn:00001BD7                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001BDC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001BE3                 lea     ecx, [ebp+var_234]
.text$mn:00001BE9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001BEE                 mov     eax, [ebp+var_238]
.text$mn:00001BF4                 mov     ecx, [ebp+var_250]
.text$mn:00001BFA                 cmp     ecx, [eax+58h]
.text$mn:00001BFD                 jbe     short loc_1C0E
.text$mn:00001BFF                 mov     edx, [ebp+var_238]
.text$mn:00001C05                 mov     eax, [ebp+var_250]
.text$mn:00001C0B                 mov     [edx+58h], eax
.text$mn:00001C0E
.text$mn:00001C0E loc_1C0E:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+5A8j
.text$mn:00001C0E                                         ; AutoCompletion::setLanguage(LangType)+5C4j ...
.text$mn:00001C0E                 jmp     loc_1B50
.text$mn:00001C13 ; ---------------------------------------------------------------------------
.text$mn:00001C13
.text$mn:00001C13 loc_1C13:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+585j
.text$mn:00001C13                 sub     esp, 0Ch
.text$mn:00001C16                 mov     ecx, esp
.text$mn:00001C18                 mov     [ebp+var_284], esp
.text$mn:00001C1E                 push    ecx
.text$mn:00001C1F                 mov     ecx, [ebp+var_238]
.text$mn:00001C25                 add     ecx, 2Ch ; ','
.text$mn:00001C28                 call    ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)
.text$mn:00001C2D                 mov     [ebp+var_274], eax
.text$mn:00001C33                 mov     edx, [ebp+var_274]
.text$mn:00001C39                 mov     [ebp+var_280], edx
.text$mn:00001C3F                 mov     [ebp+var_4], 2
.text$mn:00001C46                 sub     esp, 0Ch
.text$mn:00001C49                 mov     eax, esp
.text$mn:00001C4B                 mov     [ebp+var_28C], esp
.text$mn:00001C51                 push    eax
.text$mn:00001C52                 mov     ecx, [ebp+var_238]
.text$mn:00001C58                 add     ecx, 2Ch ; ','
.text$mn:00001C5B                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:00001C60                 mov     [ebp+var_278], eax
.text$mn:00001C66                 mov     ecx, [ebp+var_278]
.text$mn:00001C6C                 mov     [ebp+var_288], ecx
.text$mn:00001C72                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001C76                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001C7D                 call    ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00001C82                 add     esp, 18h
.text$mn:00001C85                 mov     [ebp+var_248], 0
.text$mn:00001C8F                 mov     ecx, [ebp+var_238]
.text$mn:00001C95                 add     ecx, 2Ch ; ','
.text$mn:00001C98                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001C9D                 mov     [ebp+var_268], eax
.text$mn:00001CA3                 jmp     short loc_1CB4
.text$mn:00001CA5 ; ---------------------------------------------------------------------------
.text$mn:00001CA5
.text$mn:00001CA5 loc_1CA5:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+711j
.text$mn:00001CA5                 mov     edx, [ebp+var_248]
.text$mn:00001CAB                 add     edx, 1
.text$mn:00001CAE                 mov     [ebp+var_248], edx
.text$mn:00001CB4
.text$mn:00001CB4 loc_1CB4:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+6BBj
.text$mn:00001CB4                 mov     eax, [ebp+var_248]
.text$mn:00001CBA                 cmp     eax, [ebp+var_268]
.text$mn:00001CC0                 jnb     short loc_1CFB
.text$mn:00001CC2                 mov     ecx, [ebp+var_248]
.text$mn:00001CC8                 push    ecx
.text$mn:00001CC9                 mov     ecx, [ebp+var_238]
.text$mn:00001CCF                 add     ecx, 2Ch ; ','
.text$mn:00001CD2                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001CD7                 push    eax
.text$mn:00001CD8                 mov     ecx, [ebp+var_238]
.text$mn:00001CDE                 add     ecx, 3Ch ; '<'
.text$mn:00001CE1                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001CE6                 push    offset $SG159209 ; Str
.text$mn:00001CEB                 mov     ecx, [ebp+var_238]
.text$mn:00001CF1                 add     ecx, 3Ch ; '<'
.text$mn:00001CF4                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00001CF9                 jmp     short loc_1CA5
.text$mn:00001CFB ; ---------------------------------------------------------------------------
.text$mn:00001CFB
.text$mn:00001CFB loc_1CFB:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+551j
.text$mn:00001CFB                                         ; AutoCompletion::setLanguage(LangType)+6D8j
.text$mn:00001CFB                 mov     edx, [ebp+var_238]
.text$mn:00001D01                 mov     al, [edx]
.text$mn:00001D03
.text$mn:00001D03 loc_1D03:                               ; CODE XREF: AutoCompletion::setLanguage(LangType)+41j
.text$mn:00001D03                                         ; AutoCompletion::setLanguage(LangType)+1CAj ...
.text$mn:00001D03                 mov     ecx, [ebp+var_C]
.text$mn:00001D06                 mov     large fs:0, ecx
.text$mn:00001D0D                 pop     ecx
.text$mn:00001D0E                 mov     ecx, [ebp+var_10]
.text$mn:00001D11                 xor     ecx, ebp
.text$mn:00001D13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001D18                 mov     esp, ebp
.text$mn:00001D1A                 pop     ebp
.text$mn:00001D1B                 retn    4
.text$mn:00001D1B ?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z endp
.text$mn:00001D1B
.text$mn:00001D1B ; ---------------------------------------------------------------------------
.text$mn:00001D1E                 db 0Ah dup(0CCh)
.text$mn:00001D28
.text$mn:00001D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D28
.text$mn:00001D28 ; Attributes: bp-based frame
.text$mn:00001D28
.text$mn:00001D28 ; bool __thiscall AutoCompletion::showApiComplete(AutoCompletion *__hidden this)
.text$mn:00001D28                 public ?showApiComplete@AutoCompletion@@QAE_NXZ
.text$mn:00001D28 ?showApiComplete@AutoCompletion@@QAE_NXZ proc near
.text$mn:00001D28                                         ; CODE XREF: AutoCompletion::update(int)+12Cp
.text$mn:00001D28
.text$mn:00001D28 var_14          = dword ptr -14h
.text$mn:00001D28 var_10          = dword ptr -10h
.text$mn:00001D28 var_C           = dword ptr -0Ch
.text$mn:00001D28 var_8           = dword ptr -8
.text$mn:00001D28 var_4           = dword ptr -4
.text$mn:00001D28
.text$mn:00001D28                 push    ebp
.text$mn:00001D29                 mov     ebp, esp
.text$mn:00001D2B                 sub     esp, 14h
.text$mn:00001D2E                 mov     [ebp+var_4], ecx
.text$mn:00001D31                 mov     eax, [ebp+var_4]
.text$mn:00001D34                 movzx   ecx, byte ptr [eax]
.text$mn:00001D37                 test    ecx, ecx
.text$mn:00001D39                 jnz     short loc_1D42
.text$mn:00001D3B                 xor     al, al
.text$mn:00001D3D                 jmp     loc_1DFD
.text$mn:00001D42 ; ---------------------------------------------------------------------------
.text$mn:00001D42
.text$mn:00001D42 loc_1D42:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+11j
.text$mn:00001D42                 push    0               ; __int32
.text$mn:00001D44                 push    0               ; unsigned int
.text$mn:00001D46                 push    7D8h            ; unsigned int
.text$mn:00001D4B                 mov     edx, [ebp+var_4]
.text$mn:00001D4E                 mov     ecx, [edx+4]    ; this
.text$mn:00001D51                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001D56                 mov     [ebp+var_8], eax
.text$mn:00001D59                 push    1               ; __int32
.text$mn:00001D5B                 mov     eax, [ebp+var_8]
.text$mn:00001D5E                 push    eax             ; unsigned int
.text$mn:00001D5F                 push    8DAh            ; unsigned int
.text$mn:00001D64                 mov     ecx, [ebp+var_4]
.text$mn:00001D67                 mov     ecx, [ecx+4]    ; this
.text$mn:00001D6A                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001D6F                 mov     [ebp+var_C], eax
.text$mn:00001D72                 mov     edx, [ebp+var_8]
.text$mn:00001D75                 cmp     edx, [ebp+var_C]
.text$mn:00001D78                 jnz     short loc_1D7E
.text$mn:00001D7A                 xor     al, al
.text$mn:00001D7C                 jmp     short loc_1DFD
.text$mn:00001D7E ; ---------------------------------------------------------------------------
.text$mn:00001D7E
.text$mn:00001D7E loc_1D7E:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+50j
.text$mn:00001D7E                 mov     eax, [ebp+var_8]
.text$mn:00001D81                 cmp     eax, [ebp+var_C]
.text$mn:00001D84                 jle     short loc_1D91
.text$mn:00001D86                 mov     ecx, [ebp+var_8]
.text$mn:00001D89                 sub     ecx, [ebp+var_C]
.text$mn:00001D8C                 mov     [ebp+var_10], ecx
.text$mn:00001D8F                 jmp     short loc_1D9A
.text$mn:00001D91 ; ---------------------------------------------------------------------------
.text$mn:00001D91
.text$mn:00001D91 loc_1D91:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+5Cj
.text$mn:00001D91                 mov     edx, [ebp+var_C]
.text$mn:00001D94                 sub     edx, [ebp+var_8]
.text$mn:00001D97                 mov     [ebp+var_10], edx
.text$mn:00001D9A
.text$mn:00001D9A loc_1D9A:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+67j
.text$mn:00001D9A                 mov     eax, [ebp+var_10]
.text$mn:00001D9D                 mov     [ebp+var_14], eax
.text$mn:00001DA0                 mov     ecx, [ebp+var_4]
.text$mn:00001DA3                 mov     edx, [ebp+var_14]
.text$mn:00001DA6                 cmp     edx, [ecx+58h]
.text$mn:00001DA9                 jb      short loc_1DAF
.text$mn:00001DAB                 xor     al, al
.text$mn:00001DAD                 jmp     short loc_1DFD
.text$mn:00001DAF ; ---------------------------------------------------------------------------
.text$mn:00001DAF
.text$mn:00001DAF loc_1DAF:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+81j
.text$mn:00001DAF                 push    0               ; __int32
.text$mn:00001DB1                 push    20h ; ' '       ; unsigned int
.text$mn:00001DB3                 push    83Ah            ; unsigned int
.text$mn:00001DB8                 mov     eax, [ebp+var_4]
.text$mn:00001DBB                 mov     ecx, [eax+4]    ; this
.text$mn:00001DBE                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001DC3                 push    0               ; __int32
.text$mn:00001DC5                 mov     ecx, [ebp+var_4]
.text$mn:00001DC8                 movzx   edx, byte ptr [ecx+28h]
.text$mn:00001DCC                 push    edx             ; unsigned int
.text$mn:00001DCD                 push    843h            ; unsigned int
.text$mn:00001DD2                 mov     eax, [ebp+var_4]
.text$mn:00001DD5                 mov     ecx, [eax+4]    ; this
.text$mn:00001DD8                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001DDD                 mov     ecx, [ebp+var_4]
.text$mn:00001DE0                 add     ecx, 3Ch ; '<'
.text$mn:00001DE3                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001DE8                 push    eax             ; wchar_t *
.text$mn:00001DE9                 mov     ecx, [ebp+var_8]
.text$mn:00001DEC                 sub     ecx, [ebp+var_C]
.text$mn:00001DEF                 push    ecx             ; int
.text$mn:00001DF0                 mov     edx, [ebp+var_4]
.text$mn:00001DF3                 mov     ecx, [edx+4]    ; this
.text$mn:00001DF6                 call    ?showAutoComletion@ScintillaEditView@@QAEXHPB_W@Z ; ScintillaEditView::showAutoComletion(int,wchar_t const *)
.text$mn:00001DFB                 mov     al, 1
.text$mn:00001DFD
.text$mn:00001DFD loc_1DFD:                               ; CODE XREF: AutoCompletion::showApiComplete(void)+15j
.text$mn:00001DFD                                         ; AutoCompletion::showApiComplete(void)+54j ...
.text$mn:00001DFD                 mov     esp, ebp
.text$mn:00001DFF                 pop     ebp
.text$mn:00001E00                 retn
.text$mn:00001E00 ?showApiComplete@AutoCompletion@@QAE_NXZ endp
.text$mn:00001E00
.text$mn:00001E00 ; ---------------------------------------------------------------------------
.text$mn:00001E01                 align 8
.text$mn:00001E08
.text$mn:00001E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E08
.text$mn:00001E08 ; Attributes: bp-based frame
.text$mn:00001E08
.text$mn:00001E08 ; bool __thiscall AutoCompletion::showWordComplete(AutoCompletion *this, bool)
.text$mn:00001E08                 public ?showWordComplete@AutoCompletion@@QAE_N_N@Z
.text$mn:00001E08 ?showWordComplete@AutoCompletion@@QAE_N_N@Z proc near
.text$mn:00001E08                                         ; CODE XREF: AutoCompletion::update(int)+110p
.text$mn:00001E08
.text$mn:00001E08 var_278         = dword ptr -278h
.text$mn:00001E08 var_274         = dword ptr -274h
.text$mn:00001E08 var_270         = dword ptr -270h
.text$mn:00001E08 var_26C         = dword ptr -26Ch
.text$mn:00001E08 var_268         = dword ptr -268h
.text$mn:00001E08 var_264         = dword ptr -264h
.text$mn:00001E08 var_260         = dword ptr -260h
.text$mn:00001E08 var_25C         = dword ptr -25Ch
.text$mn:00001E08 var_258         = dword ptr -258h
.text$mn:00001E08 var_254         = dword ptr -254h
.text$mn:00001E08 var_250         = dword ptr -250h
.text$mn:00001E08 var_240         = dword ptr -240h
.text$mn:00001E08 var_23B         = byte ptr -23Bh
.text$mn:00001E08 var_23A         = byte ptr -23Ah
.text$mn:00001E08 var_239         = byte ptr -239h
.text$mn:00001E08 var_238         = dword ptr -238h
.text$mn:00001E08 var_234         = dword ptr -234h
.text$mn:00001E08 var_230         = dword ptr -230h
.text$mn:00001E08 var_22C         = byte ptr -22Ch
.text$mn:00001E08 String2         = word ptr -210h
.text$mn:00001E08 var_10          = dword ptr -10h
.text$mn:00001E08 var_C           = dword ptr -0Ch
.text$mn:00001E08 var_4           = dword ptr -4
.text$mn:00001E08 arg_0           = byte ptr  8
.text$mn:00001E08
.text$mn:00001E08                 push    ebp
.text$mn:00001E09                 mov     ebp, esp
.text$mn:00001E0B                 push    0FFFFFFFFh
.text$mn:00001E0D                 push    offset __ehhandler$?showWordComplete@AutoCompletion@@QAE_N_N@Z
.text$mn:00001E12                 mov     eax, large fs:0
.text$mn:00001E18                 push    eax
.text$mn:00001E19                 sub     esp, 26Ch
.text$mn:00001E1F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001E24                 xor     eax, ebp
.text$mn:00001E26                 mov     [ebp+var_10], eax
.text$mn:00001E29                 push    eax
.text$mn:00001E2A                 lea     eax, [ebp+var_C]
.text$mn:00001E2D                 mov     large fs:0, eax
.text$mn:00001E33                 mov     [ebp+var_230], ecx
.text$mn:00001E39                 push    0               ; __int32
.text$mn:00001E3B                 push    0               ; unsigned int
.text$mn:00001E3D                 push    7D8h            ; unsigned int
.text$mn:00001E42                 mov     eax, [ebp+var_230]
.text$mn:00001E48                 mov     ecx, [eax+4]    ; this
.text$mn:00001E4B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001E50                 mov     [ebp+var_238], eax
.text$mn:00001E56                 push    1               ; __int32
.text$mn:00001E58                 mov     ecx, [ebp+var_238]
.text$mn:00001E5E                 push    ecx             ; unsigned int
.text$mn:00001E5F                 push    8DAh            ; unsigned int
.text$mn:00001E64                 mov     edx, [ebp+var_230]
.text$mn:00001E6A                 mov     ecx, [edx+4]    ; this
.text$mn:00001E6D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001E72                 mov     [ebp+var_234], eax
.text$mn:00001E78                 mov     eax, [ebp+var_238]
.text$mn:00001E7E                 cmp     eax, [ebp+var_234]
.text$mn:00001E84                 jnz     short loc_1E8D
.text$mn:00001E86                 xor     al, al
.text$mn:00001E88                 jmp     loc_219B
.text$mn:00001E8D ; ---------------------------------------------------------------------------
.text$mn:00001E8D
.text$mn:00001E8D loc_1E8D:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+7Cj
.text$mn:00001E8D                 mov     [ebp+var_278], 100h
.text$mn:00001E97                 mov     ecx, [ebp+var_238]
.text$mn:00001E9D                 cmp     ecx, [ebp+var_234]
.text$mn:00001EA3                 jle     short loc_1EB9
.text$mn:00001EA5                 mov     edx, [ebp+var_238]
.text$mn:00001EAB                 sub     edx, [ebp+var_234]
.text$mn:00001EB1                 mov     [ebp+var_254], edx
.text$mn:00001EB7                 jmp     short loc_1ECB
.text$mn:00001EB9 ; ---------------------------------------------------------------------------
.text$mn:00001EB9
.text$mn:00001EB9 loc_1EB9:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+9Bj
.text$mn:00001EB9                 mov     eax, [ebp+var_234]
.text$mn:00001EBF                 sub     eax, [ebp+var_238]
.text$mn:00001EC5                 mov     [ebp+var_254], eax
.text$mn:00001ECB
.text$mn:00001ECB loc_1ECB:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+AFj
.text$mn:00001ECB                 mov     ecx, [ebp+var_254]
.text$mn:00001ED1                 mov     [ebp+var_25C], ecx
.text$mn:00001ED7                 cmp     [ebp+var_25C], 100h
.text$mn:00001EE1                 jb      short loc_1EEA
.text$mn:00001EE3                 xor     al, al
.text$mn:00001EE5                 jmp     loc_219B
.text$mn:00001EEA ; ---------------------------------------------------------------------------
.text$mn:00001EEA
.text$mn:00001EEA loc_1EEA:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+D9j
.text$mn:00001EEA                 lea     ecx, [ebp+var_250]
.text$mn:00001EF0                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001EF5                 mov     [ebp+var_4], 0
.text$mn:00001EFC                 mov     edx, [ebp+var_238]
.text$mn:00001F02                 push    edx             ; int
.text$mn:00001F03                 mov     eax, [ebp+var_234]
.text$mn:00001F09                 push    eax             ; int
.text$mn:00001F0A                 push    100h            ; unsigned int
.text$mn:00001F0F                 lea     ecx, [ebp+String2]
.text$mn:00001F15                 push    ecx             ; wchar_t *
.text$mn:00001F16                 mov     edx, [ebp+var_230]
.text$mn:00001F1C                 mov     ecx, [edx+4]    ; this
.text$mn:00001F1F                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:00001F24                 lea     eax, [ebp+String2]
.text$mn:00001F2A                 push    eax             ; lpString2
.text$mn:00001F2B                 lea     ecx, [ebp+var_250]
.text$mn:00001F31                 push    ecx             ; int
.text$mn:00001F32                 mov     ecx, [ebp+var_230]
.text$mn:00001F38                 call    ?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)
.text$mn:00001F3D                 lea     ecx, [ebp+var_250]
.text$mn:00001F43                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001F48                 test    eax, eax
.text$mn:00001F4A                 jnz     short loc_1F70
.text$mn:00001F4C                 mov     [ebp+var_23B], 0
.text$mn:00001F53                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F5A                 lea     ecx, [ebp+var_250]
.text$mn:00001F60                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001F65                 mov     al, [ebp+var_23B]
.text$mn:00001F6B                 jmp     loc_219B
.text$mn:00001F70 ; ---------------------------------------------------------------------------
.text$mn:00001F70
.text$mn:00001F70 loc_1F70:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+142j
.text$mn:00001F70                 lea     ecx, [ebp+var_250]
.text$mn:00001F76                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001F7B                 cmp     eax, 1
.text$mn:00001F7E                 jnz     loc_2015
.text$mn:00001F84                 movzx   edx, [ebp+arg_0]
.text$mn:00001F88                 test    edx, edx
.text$mn:00001F8A                 jz      loc_2015
.text$mn:00001F90                 mov     eax, [ebp+var_238]
.text$mn:00001F96                 push    eax             ; int
.text$mn:00001F97                 mov     ecx, [ebp+var_234]
.text$mn:00001F9D                 push    ecx             ; int
.text$mn:00001F9E                 push    0
.text$mn:00001FA0                 lea     ecx, [ebp+var_250]
.text$mn:00001FA6                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001FAB                 mov     ecx, eax
.text$mn:00001FAD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001FB2                 push    eax             ; wchar_t *
.text$mn:00001FB3                 mov     edx, [ebp+var_230]
.text$mn:00001FB9                 mov     ecx, [edx+4]    ; this
.text$mn:00001FBC                 call    ?replaceTargetRegExMode@ScintillaEditView@@QBEHPB_WHH@Z ; ScintillaEditView::replaceTargetRegExMode(wchar_t const *,int,int)
.text$mn:00001FC1                 push    0               ; __int32
.text$mn:00001FC3                 push    0
.text$mn:00001FC5                 lea     ecx, [ebp+var_250]
.text$mn:00001FCB                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001FD0                 mov     ecx, eax
.text$mn:00001FD2                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001FD7                 add     eax, [ebp+var_234]
.text$mn:00001FDD                 push    eax             ; unsigned int
.text$mn:00001FDE                 push    7E9h            ; unsigned int
.text$mn:00001FE3                 mov     eax, [ebp+var_230]
.text$mn:00001FE9                 mov     ecx, [eax+4]    ; this
.text$mn:00001FEC                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001FF1                 mov     [ebp+var_23A], 1
.text$mn:00001FF8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001FFF                 lea     ecx, [ebp+var_250]
.text$mn:00002005                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000200A                 mov     al, [ebp+var_23A]
.text$mn:00002010                 jmp     loc_219B
.text$mn:00002015 ; ---------------------------------------------------------------------------
.text$mn:00002015
.text$mn:00002015 loc_2015:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+176j
.text$mn:00002015                                         ; AutoCompletion::showWordComplete(bool)+182j
.text$mn:00002015                 sub     esp, 0Ch
.text$mn:00002018                 mov     ecx, esp
.text$mn:0000201A                 mov     [ebp+var_26C], esp
.text$mn:00002020                 push    ecx
.text$mn:00002021                 lea     ecx, [ebp+var_250]
.text$mn:00002027                 call    ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)
.text$mn:0000202C                 mov     [ebp+var_258], eax
.text$mn:00002032                 mov     edx, [ebp+var_258]
.text$mn:00002038                 mov     [ebp+var_270], edx
.text$mn:0000203E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002042                 sub     esp, 0Ch
.text$mn:00002045                 mov     eax, esp
.text$mn:00002047                 mov     [ebp+var_268], esp
.text$mn:0000204D                 push    eax
.text$mn:0000204E                 lea     ecx, [ebp+var_250]
.text$mn:00002054                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:00002059                 mov     [ebp+var_264], eax
.text$mn:0000205F                 mov     ecx, [ebp+var_264]
.text$mn:00002065                 mov     [ebp+var_274], ecx
.text$mn:0000206B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000206F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002073                 call    ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00002078                 add     esp, 18h
.text$mn:0000207B                 push    offset $SG158576 ; Str
.text$mn:00002080                 lea     ecx, [ebp+var_22C]
.text$mn:00002086                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000208B                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000208F                 mov     [ebp+var_240], 0
.text$mn:00002099                 lea     ecx, [ebp+var_250]
.text$mn:0000209F                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000020A4                 mov     [ebp+var_260], eax
.text$mn:000020AA                 jmp     short loc_20BB
.text$mn:000020AC ; ---------------------------------------------------------------------------
.text$mn:000020AC
.text$mn:000020AC loc_20AC:                               ; CODE XREF: AutoCompletion::showWordComplete(bool):loc_210Dj
.text$mn:000020AC                 mov     edx, [ebp+var_240]
.text$mn:000020B2                 add     edx, 1
.text$mn:000020B5                 mov     [ebp+var_240], edx
.text$mn:000020BB
.text$mn:000020BB loc_20BB:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+2A2j
.text$mn:000020BB                 mov     eax, [ebp+var_240]
.text$mn:000020C1                 cmp     eax, [ebp+var_260]
.text$mn:000020C7                 jnb     short loc_210F
.text$mn:000020C9                 mov     ecx, [ebp+var_240]
.text$mn:000020CF                 push    ecx
.text$mn:000020D0                 lea     ecx, [ebp+var_250]
.text$mn:000020D6                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000020DB                 push    eax
.text$mn:000020DC                 lea     ecx, [ebp+var_22C]
.text$mn:000020E2                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000020E7                 lea     ecx, [ebp+var_250]
.text$mn:000020ED                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000020F2                 sub     eax, 1
.text$mn:000020F5                 cmp     [ebp+var_240], eax
.text$mn:000020FB                 jz      short loc_210D
.text$mn:000020FD                 push    offset $SG158583 ; Str
.text$mn:00002102                 lea     ecx, [ebp+var_22C]
.text$mn:00002108                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000210D
.text$mn:0000210D loc_210D:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+2F3j
.text$mn:0000210D                 jmp     short loc_20AC
.text$mn:0000210F ; ---------------------------------------------------------------------------
.text$mn:0000210F
.text$mn:0000210F loc_210F:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+2BFj
.text$mn:0000210F                 push    0               ; __int32
.text$mn:00002111                 push    20h ; ' '       ; unsigned int
.text$mn:00002113                 push    83Ah            ; unsigned int
.text$mn:00002118                 mov     edx, [ebp+var_230]
.text$mn:0000211E                 mov     ecx, [edx+4]    ; this
.text$mn:00002121                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002126                 push    0               ; __int32
.text$mn:00002128                 mov     eax, [ebp+var_230]
.text$mn:0000212E                 movzx   ecx, byte ptr [eax+28h]
.text$mn:00002132                 push    ecx             ; unsigned int
.text$mn:00002133                 push    843h            ; unsigned int
.text$mn:00002138                 mov     edx, [ebp+var_230]
.text$mn:0000213E                 mov     ecx, [edx+4]    ; this
.text$mn:00002141                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002146                 lea     ecx, [ebp+var_22C]
.text$mn:0000214C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002151                 push    eax             ; wchar_t *
.text$mn:00002152                 mov     eax, [ebp+var_238]
.text$mn:00002158                 sub     eax, [ebp+var_234]
.text$mn:0000215E                 push    eax             ; int
.text$mn:0000215F                 mov     ecx, [ebp+var_230]
.text$mn:00002165                 mov     ecx, [ecx+4]    ; this
.text$mn:00002168                 call    ?showAutoComletion@ScintillaEditView@@QAEXHPB_W@Z ; ScintillaEditView::showAutoComletion(int,wchar_t const *)
.text$mn:0000216D                 mov     [ebp+var_239], 1
.text$mn:00002174                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002178                 lea     ecx, [ebp+var_22C]
.text$mn:0000217E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002183                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000218A                 lea     ecx, [ebp+var_250]
.text$mn:00002190                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002195                 mov     al, [ebp+var_239]
.text$mn:0000219B
.text$mn:0000219B loc_219B:                               ; CODE XREF: AutoCompletion::showWordComplete(bool)+80j
.text$mn:0000219B                                         ; AutoCompletion::showWordComplete(bool)+DDj ...
.text$mn:0000219B                 mov     ecx, [ebp+var_C]
.text$mn:0000219E                 mov     large fs:0, ecx
.text$mn:000021A5                 pop     ecx
.text$mn:000021A6                 mov     ecx, [ebp+var_10]
.text$mn:000021A9                 xor     ecx, ebp
.text$mn:000021AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000021B0                 mov     esp, ebp
.text$mn:000021B2                 pop     ebp
.text$mn:000021B3                 retn    4
.text$mn:000021B3 ?showWordComplete@AutoCompletion@@QAE_N_N@Z endp
.text$mn:000021B3
.text$mn:000021B3 ; ---------------------------------------------------------------------------
.text$mn:000021B6                 align 4
.text$mn:000021B8
.text$mn:000021B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021B8
.text$mn:000021B8 ; Attributes: bp-based frame
.text$mn:000021B8
.text$mn:000021B8 ; bool __thiscall AutoCompletion::showApiAndWordComplete(AutoCompletion *__hidden this)
.text$mn:000021B8                 public ?showApiAndWordComplete@AutoCompletion@@QAE_NXZ
.text$mn:000021B8 ?showApiAndWordComplete@AutoCompletion@@QAE_NXZ proc near
.text$mn:000021B8                                         ; CODE XREF: AutoCompletion::update(int)+148p
.text$mn:000021B8
.text$mn:000021B8 var_290         = dword ptr -290h
.text$mn:000021B8 var_28C         = dword ptr -28Ch
.text$mn:000021B8 var_288         = dword ptr -288h
.text$mn:000021B8 var_284         = dword ptr -284h
.text$mn:000021B8 var_280         = dword ptr -280h
.text$mn:000021B8 var_27C         = dword ptr -27Ch
.text$mn:000021B8 var_278         = dword ptr -278h
.text$mn:000021B8 var_274         = dword ptr -274h
.text$mn:000021B8 var_270         = dword ptr -270h
.text$mn:000021B8 var_26C         = dword ptr -26Ch
.text$mn:000021B8 var_268         = dword ptr -268h
.text$mn:000021B8 var_264         = dword ptr -264h
.text$mn:000021B8 var_260         = dword ptr -260h
.text$mn:000021B8 var_25C         = dword ptr -25Ch
.text$mn:000021B8 var_24C         = dword ptr -24Ch
.text$mn:000021B8 var_248         = dword ptr -248h
.text$mn:000021B8 var_244         = dword ptr -244h
.text$mn:000021B8 var_240         = dword ptr -240h
.text$mn:000021B8 var_239         = byte ptr -239h
.text$mn:000021B8 var_238         = dword ptr -238h
.text$mn:000021B8 var_231         = byte ptr -231h
.text$mn:000021B8 var_230         = dword ptr -230h
.text$mn:000021B8 var_22C         = byte ptr -22Ch
.text$mn:000021B8 Str             = word ptr -210h
.text$mn:000021B8 var_10          = dword ptr -10h
.text$mn:000021B8 var_C           = dword ptr -0Ch
.text$mn:000021B8 var_4           = dword ptr -4
.text$mn:000021B8
.text$mn:000021B8                 push    ebp
.text$mn:000021B9                 mov     ebp, esp
.text$mn:000021BB                 push    0FFFFFFFFh
.text$mn:000021BD                 push    offset __ehhandler$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ
.text$mn:000021C2                 mov     eax, large fs:0
.text$mn:000021C8                 push    eax
.text$mn:000021C9                 sub     esp, 284h
.text$mn:000021CF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000021D4                 xor     eax, ebp
.text$mn:000021D6                 mov     [ebp+var_10], eax
.text$mn:000021D9                 push    eax
.text$mn:000021DA                 lea     eax, [ebp+var_C]
.text$mn:000021DD                 mov     large fs:0, eax
.text$mn:000021E3                 mov     [ebp+var_230], ecx
.text$mn:000021E9                 push    0               ; __int32
.text$mn:000021EB                 push    0               ; unsigned int
.text$mn:000021ED                 push    7D8h            ; unsigned int
.text$mn:000021F2                 mov     eax, [ebp+var_230]
.text$mn:000021F8                 mov     ecx, [eax+4]    ; this
.text$mn:000021FB                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002200                 mov     [ebp+var_238], eax
.text$mn:00002206                 push    1               ; __int32
.text$mn:00002208                 mov     ecx, [ebp+var_238]
.text$mn:0000220E                 push    ecx             ; unsigned int
.text$mn:0000220F                 push    8DAh            ; unsigned int
.text$mn:00002214                 mov     edx, [ebp+var_230]
.text$mn:0000221A                 mov     ecx, [edx+4]    ; this
.text$mn:0000221D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002222                 mov     [ebp+var_240], eax
.text$mn:00002228                 mov     eax, [ebp+var_238]
.text$mn:0000222E                 cmp     eax, [ebp+var_240]
.text$mn:00002234                 jnz     short loc_223D
.text$mn:00002236                 xor     al, al
.text$mn:00002238                 jmp     loc_2567
.text$mn:0000223D ; ---------------------------------------------------------------------------
.text$mn:0000223D
.text$mn:0000223D loc_223D:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+7Cj
.text$mn:0000223D                 mov     [ebp+var_290], 100h
.text$mn:00002247                 mov     ecx, [ebp+var_238]
.text$mn:0000224D                 cmp     ecx, [ebp+var_240]
.text$mn:00002253                 jle     short loc_2269
.text$mn:00002255                 mov     edx, [ebp+var_238]
.text$mn:0000225B                 sub     edx, [ebp+var_240]
.text$mn:00002261                 mov     [ebp+var_24C], edx
.text$mn:00002267                 jmp     short loc_227B
.text$mn:00002269 ; ---------------------------------------------------------------------------
.text$mn:00002269
.text$mn:00002269 loc_2269:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+9Bj
.text$mn:00002269                 mov     eax, [ebp+var_240]
.text$mn:0000226F                 sub     eax, [ebp+var_238]
.text$mn:00002275                 mov     [ebp+var_24C], eax
.text$mn:0000227B
.text$mn:0000227B loc_227B:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+AFj
.text$mn:0000227B                 mov     ecx, [ebp+var_24C]
.text$mn:00002281                 mov     [ebp+var_268], ecx
.text$mn:00002287                 cmp     [ebp+var_268], 100h
.text$mn:00002291                 jb      short loc_229A
.text$mn:00002293                 xor     al, al
.text$mn:00002295                 jmp     loc_2567
.text$mn:0000229A ; ---------------------------------------------------------------------------
.text$mn:0000229A
.text$mn:0000229A loc_229A:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+D9j
.text$mn:0000229A                 lea     ecx, [ebp+var_25C]
.text$mn:000022A0                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000022A5                 mov     [ebp+var_4], 0
.text$mn:000022AC                 mov     edx, [ebp+var_238]
.text$mn:000022B2                 push    edx             ; int
.text$mn:000022B3                 mov     eax, [ebp+var_240]
.text$mn:000022B9                 push    eax             ; int
.text$mn:000022BA                 push    100h            ; unsigned int
.text$mn:000022BF                 lea     ecx, [ebp+Str]
.text$mn:000022C5                 push    ecx             ; wchar_t *
.text$mn:000022C6                 mov     edx, [ebp+var_230]
.text$mn:000022CC                 mov     ecx, [edx+4]    ; this
.text$mn:000022CF                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:000022D4                 lea     eax, [ebp+Str]
.text$mn:000022DA                 push    eax             ; lpString2
.text$mn:000022DB                 lea     ecx, [ebp+var_25C]
.text$mn:000022E1                 push    ecx             ; int
.text$mn:000022E2                 mov     ecx, [ebp+var_230]
.text$mn:000022E8                 call    ?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)
.text$mn:000022ED                 mov     [ebp+var_244], 0
.text$mn:000022F7                 mov     ecx, [ebp+var_230]
.text$mn:000022FD                 add     ecx, 2Ch ; ','
.text$mn:00002300                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00002305                 mov     [ebp+var_26C], eax
.text$mn:0000230B                 jmp     short loc_231C
.text$mn:0000230D ; ---------------------------------------------------------------------------
.text$mn:0000230D
.text$mn:0000230D loc_230D:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void):loc_23DCj
.text$mn:0000230D                 mov     edx, [ebp+var_244]
.text$mn:00002313                 add     edx, 1
.text$mn:00002316                 mov     [ebp+var_244], edx
.text$mn:0000231C
.text$mn:0000231C loc_231C:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+153j
.text$mn:0000231C                 mov     eax, [ebp+var_244]
.text$mn:00002322                 cmp     eax, [ebp+var_26C]
.text$mn:00002328                 jnb     loc_23E1
.text$mn:0000232E                 push    0               ; int
.text$mn:00002330                 lea     ecx, [ebp+Str]
.text$mn:00002336                 push    ecx             ; Str
.text$mn:00002337                 mov     edx, [ebp+var_244]
.text$mn:0000233D                 push    edx
.text$mn:0000233E                 mov     ecx, [ebp+var_230]
.text$mn:00002344                 add     ecx, 2Ch ; ','
.text$mn:00002347                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:0000234C                 mov     ecx, eax
.text$mn:0000234E                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:00002353                 test    eax, eax
.text$mn:00002355                 jnz     loc_23DC
.text$mn:0000235B                 lea     eax, [ebp+var_25C]
.text$mn:00002361                 push    eax
.text$mn:00002362                 mov     ecx, [ebp+var_244]
.text$mn:00002368                 push    ecx
.text$mn:00002369                 mov     ecx, [ebp+var_230]
.text$mn:0000236F                 add     ecx, 2Ch ; ','
.text$mn:00002372                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00002377                 sub     esp, 1Ch
.text$mn:0000237A                 mov     ecx, esp
.text$mn:0000237C                 mov     [ebp+var_280], esp
.text$mn:00002382                 push    eax
.text$mn:00002383                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002388                 mov     [ebp+var_274], eax
.text$mn:0000238E                 mov     edx, [ebp+var_274]
.text$mn:00002394                 mov     [ebp+var_288], edx
.text$mn:0000239A                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000239E                 mov     byte ptr [ebp+var_4], 0
.text$mn:000023A2                 call    ?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z ; isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:000023A7                 add     esp, 20h
.text$mn:000023AA                 mov     [ebp+var_239], al
.text$mn:000023B0                 movzx   eax, [ebp+var_239]
.text$mn:000023B7                 test    eax, eax
.text$mn:000023B9                 jnz     short loc_23DC
.text$mn:000023BB                 mov     ecx, [ebp+var_244]
.text$mn:000023C1                 push    ecx
.text$mn:000023C2                 mov     ecx, [ebp+var_230]
.text$mn:000023C8                 add     ecx, 2Ch ; ','
.text$mn:000023CB                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000023D0                 push    eax
.text$mn:000023D1                 lea     ecx, [ebp+var_25C]
.text$mn:000023D7                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000023DC
.text$mn:000023DC loc_23DC:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+19Dj
.text$mn:000023DC                                         ; AutoCompletion::showApiAndWordComplete(void)+201j
.text$mn:000023DC                 jmp     loc_230D
.text$mn:000023E1 ; ---------------------------------------------------------------------------
.text$mn:000023E1
.text$mn:000023E1 loc_23E1:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+170j
.text$mn:000023E1                 sub     esp, 0Ch
.text$mn:000023E4                 mov     edx, esp
.text$mn:000023E6                 mov     [ebp+var_278], esp
.text$mn:000023EC                 push    edx
.text$mn:000023ED                 lea     ecx, [ebp+var_25C]
.text$mn:000023F3                 call    ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)
.text$mn:000023F8                 mov     [ebp+var_260], eax
.text$mn:000023FE                 mov     eax, [ebp+var_260]
.text$mn:00002404                 mov     [ebp+var_28C], eax
.text$mn:0000240A                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000240E                 sub     esp, 0Ch
.text$mn:00002411                 mov     ecx, esp
.text$mn:00002413                 mov     [ebp+var_284], esp
.text$mn:00002419                 push    ecx
.text$mn:0000241A                 lea     ecx, [ebp+var_25C]
.text$mn:00002420                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:00002425                 mov     [ebp+var_264], eax
.text$mn:0000242B                 mov     edx, [ebp+var_264]
.text$mn:00002431                 mov     [ebp+var_27C], edx
.text$mn:00002437                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000243B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000243F                 call    ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00002444                 add     esp, 18h
.text$mn:00002447                 push    offset $SG158318 ; Str
.text$mn:0000244C                 lea     ecx, [ebp+var_22C]
.text$mn:00002452                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002457                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000245B                 mov     [ebp+var_248], 0
.text$mn:00002465                 lea     ecx, [ebp+var_25C]
.text$mn:0000246B                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00002470                 mov     [ebp+var_270], eax
.text$mn:00002476                 jmp     short loc_2487
.text$mn:00002478 ; ---------------------------------------------------------------------------
.text$mn:00002478
.text$mn:00002478 loc_2478:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void):loc_24D9j
.text$mn:00002478                 mov     eax, [ebp+var_248]
.text$mn:0000247E                 add     eax, 1
.text$mn:00002481                 mov     [ebp+var_248], eax
.text$mn:00002487
.text$mn:00002487 loc_2487:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+2BEj
.text$mn:00002487                 mov     ecx, [ebp+var_248]
.text$mn:0000248D                 cmp     ecx, [ebp+var_270]
.text$mn:00002493                 jnb     short loc_24DB
.text$mn:00002495                 mov     edx, [ebp+var_248]
.text$mn:0000249B                 push    edx
.text$mn:0000249C                 lea     ecx, [ebp+var_25C]
.text$mn:000024A2                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000024A7                 push    eax
.text$mn:000024A8                 lea     ecx, [ebp+var_22C]
.text$mn:000024AE                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000024B3                 lea     ecx, [ebp+var_25C]
.text$mn:000024B9                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000024BE                 sub     eax, 1
.text$mn:000024C1                 cmp     [ebp+var_248], eax
.text$mn:000024C7                 jz      short loc_24D9
.text$mn:000024C9                 push    offset $SG158325 ; Str
.text$mn:000024CE                 lea     ecx, [ebp+var_22C]
.text$mn:000024D4                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000024D9
.text$mn:000024D9 loc_24D9:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+30Fj
.text$mn:000024D9                 jmp     short loc_2478
.text$mn:000024DB ; ---------------------------------------------------------------------------
.text$mn:000024DB
.text$mn:000024DB loc_24DB:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+2DBj
.text$mn:000024DB                 push    0               ; __int32
.text$mn:000024DD                 push    20h ; ' '       ; unsigned int
.text$mn:000024DF                 push    83Ah            ; unsigned int
.text$mn:000024E4                 mov     eax, [ebp+var_230]
.text$mn:000024EA                 mov     ecx, [eax+4]    ; this
.text$mn:000024ED                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000024F2                 push    0               ; __int32
.text$mn:000024F4                 mov     ecx, [ebp+var_230]
.text$mn:000024FA                 movzx   edx, byte ptr [ecx+28h]
.text$mn:000024FE                 push    edx             ; unsigned int
.text$mn:000024FF                 push    843h            ; unsigned int
.text$mn:00002504                 mov     eax, [ebp+var_230]
.text$mn:0000250A                 mov     ecx, [eax+4]    ; this
.text$mn:0000250D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002512                 lea     ecx, [ebp+var_22C]
.text$mn:00002518                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000251D                 push    eax             ; wchar_t *
.text$mn:0000251E                 mov     ecx, [ebp+var_238]
.text$mn:00002524                 sub     ecx, [ebp+var_240]
.text$mn:0000252A                 push    ecx             ; int
.text$mn:0000252B                 mov     edx, [ebp+var_230]
.text$mn:00002531                 mov     ecx, [edx+4]    ; this
.text$mn:00002534                 call    ?showAutoComletion@ScintillaEditView@@QAEXHPB_W@Z ; ScintillaEditView::showAutoComletion(int,wchar_t const *)
.text$mn:00002539                 mov     [ebp+var_231], 1
.text$mn:00002540                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002544                 lea     ecx, [ebp+var_22C]
.text$mn:0000254A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000254F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002556                 lea     ecx, [ebp+var_25C]
.text$mn:0000255C                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002561                 mov     al, [ebp+var_231]
.text$mn:00002567
.text$mn:00002567 loc_2567:                               ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+80j
.text$mn:00002567                                         ; AutoCompletion::showApiAndWordComplete(void)+DDj
.text$mn:00002567                 mov     ecx, [ebp+var_C]
.text$mn:0000256A                 mov     large fs:0, ecx
.text$mn:00002571                 pop     ecx
.text$mn:00002572                 mov     ecx, [ebp+var_10]
.text$mn:00002575                 xor     ecx, ebp
.text$mn:00002577                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000257C                 mov     esp, ebp
.text$mn:0000257E                 pop     ebp
.text$mn:0000257F                 retn
.text$mn:0000257F ?showApiAndWordComplete@AutoCompletion@@QAE_NXZ endp
.text$mn:0000257F
.text$mn:0000257F ; ---------------------------------------------------------------------------
.text$mn:00002580                 db 8 dup(0CCh)
.text$mn:00002588
.text$mn:00002588 ; =============== S U B R O U T I N E =======================================
.text$mn:00002588
.text$mn:00002588 ; Attributes: bp-based frame
.text$mn:00002588
.text$mn:00002588 ; bool __thiscall AutoCompletion::showFunctionComplete(AutoCompletion *__hidden this)
.text$mn:00002588                 public ?showFunctionComplete@AutoCompletion@@QAE_NXZ
.text$mn:00002588 ?showFunctionComplete@AutoCompletion@@QAE_NXZ proc near
.text$mn:00002588
.text$mn:00002588 var_4           = dword ptr -4
.text$mn:00002588
.text$mn:00002588                 push    ebp
.text$mn:00002589                 mov     ebp, esp
.text$mn:0000258B                 push    ecx
.text$mn:0000258C                 mov     [ebp+var_4], ecx
.text$mn:0000258F                 mov     eax, [ebp+var_4]
.text$mn:00002592                 movzx   ecx, byte ptr [eax]
.text$mn:00002595                 test    ecx, ecx
.text$mn:00002597                 jnz     short loc_259D
.text$mn:00002599                 xor     al, al
.text$mn:0000259B                 jmp     short loc_25B9
.text$mn:0000259D ; ---------------------------------------------------------------------------
.text$mn:0000259D
.text$mn:0000259D loc_259D:                               ; CODE XREF: AutoCompletion::showFunctionComplete(void)+Fj
.text$mn:0000259D                 push    1               ; bool
.text$mn:0000259F                 push    0               ; int
.text$mn:000025A1                 mov     ecx, [ebp+var_4]
.text$mn:000025A4                 add     ecx, 5Ch ; '\'  ; this
.text$mn:000025A7                 call    ?updateCalltip@FunctionCallTip@@QAE_NH_N@Z ; FunctionCallTip::updateCalltip(int,bool)
.text$mn:000025AC                 movzx   edx, al
.text$mn:000025AF                 test    edx, edx
.text$mn:000025B1                 jz      short loc_25B7
.text$mn:000025B3                 mov     al, 1
.text$mn:000025B5                 jmp     short loc_25B9
.text$mn:000025B7 ; ---------------------------------------------------------------------------
.text$mn:000025B7
.text$mn:000025B7 loc_25B7:                               ; CODE XREF: AutoCompletion::showFunctionComplete(void)+29j
.text$mn:000025B7                 xor     al, al
.text$mn:000025B9
.text$mn:000025B9 loc_25B9:                               ; CODE XREF: AutoCompletion::showFunctionComplete(void)+13j
.text$mn:000025B9                                         ; AutoCompletion::showFunctionComplete(void)+2Dj
.text$mn:000025B9                 mov     esp, ebp
.text$mn:000025BB                 pop     ebp
.text$mn:000025BC                 retn
.text$mn:000025BC ?showFunctionComplete@AutoCompletion@@QAE_NXZ endp
.text$mn:000025BC
.text$mn:000025BC ; ---------------------------------------------------------------------------
.text$mn:000025BD                 db 0Bh dup(0CCh)
.text$mn:000025C8
.text$mn:000025C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000025C8
.text$mn:000025C8 ; Attributes: bp-based frame
.text$mn:000025C8
.text$mn:000025C8 ; void __thiscall AutoCompletion::showPathCompletion(AutoCompletion *__hidden this)
.text$mn:000025C8                 public ?showPathCompletion@AutoCompletion@@QAEXXZ
.text$mn:000025C8 ?showPathCompletion@AutoCompletion@@QAEXXZ proc near
.text$mn:000025C8
.text$mn:000025C8 var_5A4         = dword ptr -5A4h
.text$mn:000025C8 var_5A0         = dword ptr -5A0h
.text$mn:000025C8 var_59C         = dword ptr -59Ch
.text$mn:000025C8 var_598         = dword ptr -598h
.text$mn:000025C8 var_594         = dword ptr -594h
.text$mn:000025C8 var_590         = dword ptr -590h
.text$mn:000025C8 var_58C         = dword ptr -58Ch
.text$mn:000025C8 var_588         = dword ptr -588h
.text$mn:000025C8 var_584         = dword ptr -584h
.text$mn:000025C8 var_580         = dword ptr -580h
.text$mn:000025C8 var_57C         = dword ptr -57Ch
.text$mn:000025C8 var_578         = dword ptr -578h
.text$mn:000025C8 var_574         = dword ptr -574h
.text$mn:000025C8 var_570         = dword ptr -570h
.text$mn:000025C8 var_56C         = dword ptr -56Ch
.text$mn:000025C8 var_568         = dword ptr -568h
.text$mn:000025C8 hFindFile       = dword ptr -564h
.text$mn:000025C8 var_560         = dword ptr -560h
.text$mn:000025C8 var_55C         = dword ptr -55Ch
.text$mn:000025C8 var_558         = dword ptr -558h
.text$mn:000025C8 var_552         = byte ptr -552h
.text$mn:000025C8 var_551         = byte ptr -551h
.text$mn:000025C8 var_550         = dword ptr -550h
.text$mn:000025C8 FindFileData    = _WIN32_FIND_DATAW ptr -54Ch
.text$mn:000025C8 var_2FC         = byte ptr -2FCh
.text$mn:000025C8 var_2E0         = byte ptr -2E0h
.text$mn:000025C8 var_2C4         = dword ptr -2C4h
.text$mn:000025C8 var_2A8         = dword ptr -2A8h
.text$mn:000025C8 var_28C         = byte ptr -28Ch
.text$mn:000025C8 var_270         = byte ptr -270h
.text$mn:000025C8 var_254         = byte ptr -254h
.text$mn:000025C8 var_238         = byte ptr -238h
.text$mn:000025C8 Str             = word ptr -21Ch
.text$mn:000025C8 var_10          = dword ptr -10h
.text$mn:000025C8 var_C           = dword ptr -0Ch
.text$mn:000025C8 var_4           = dword ptr -4
.text$mn:000025C8
.text$mn:000025C8                 push    ebp
.text$mn:000025C9                 mov     ebp, esp
.text$mn:000025CB                 push    0FFFFFFFFh
.text$mn:000025CD                 push    offset __ehhandler$?showPathCompletion@AutoCompletion@@QAEXXZ
.text$mn:000025D2                 mov     eax, large fs:0
.text$mn:000025D8                 push    eax
.text$mn:000025D9                 sub     esp, 598h
.text$mn:000025DF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000025E4                 xor     eax, ebp
.text$mn:000025E6                 mov     [ebp+var_10], eax
.text$mn:000025E9                 push    eax
.text$mn:000025EA                 lea     eax, [ebp+var_C]
.text$mn:000025ED                 mov     large fs:0, eax
.text$mn:000025F3                 mov     [ebp+var_558], ecx
.text$mn:000025F9                 mov     [ebp+var_550], 0
.text$mn:00002603                 lea     ecx, [ebp+var_270]
.text$mn:00002609                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000260E                 mov     [ebp+var_4], 0
.text$mn:00002615                 mov     [ebp+var_58C], 104h
.text$mn:0000261F                 push    0               ; __int32
.text$mn:00002621                 push    0               ; unsigned int
.text$mn:00002623                 push    7D8h            ; unsigned int
.text$mn:00002628                 mov     eax, [ebp+var_558]
.text$mn:0000262E                 mov     ecx, [eax+4]    ; this
.text$mn:00002631                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002636                 mov     [ebp+var_560], eax
.text$mn:0000263C                 mov     ecx, [ebp+var_560]
.text$mn:00002642                 sub     ecx, 104h
.text$mn:00002648                 jns     short loc_2656
.text$mn:0000264A                 mov     [ebp+var_568], 0
.text$mn:00002654                 jmp     short loc_2668
.text$mn:00002656 ; ---------------------------------------------------------------------------
.text$mn:00002656
.text$mn:00002656 loc_2656:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+80j
.text$mn:00002656                 mov     edx, [ebp+var_560]
.text$mn:0000265C                 sub     edx, 104h
.text$mn:00002662                 mov     [ebp+var_568], edx
.text$mn:00002668
.text$mn:00002668 loc_2668:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+8Cj
.text$mn:00002668                 mov     eax, [ebp+var_568]
.text$mn:0000266E                 mov     [ebp+var_580], eax
.text$mn:00002674                 mov     ecx, [ebp+var_560]
.text$mn:0000267A                 push    ecx             ; int
.text$mn:0000267B                 mov     edx, [ebp+var_580]
.text$mn:00002681                 push    edx             ; int
.text$mn:00002682                 push    105h            ; unsigned int
.text$mn:00002687                 lea     eax, [ebp+Str]
.text$mn:0000268D                 push    eax             ; wchar_t *
.text$mn:0000268E                 mov     ecx, [ebp+var_558]
.text$mn:00002694                 mov     ecx, [ecx+4]    ; this
.text$mn:00002697                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:0000269C                 lea     edx, [ebp+Str]
.text$mn:000026A2                 push    edx             ; Str
.text$mn:000026A3                 lea     ecx, [ebp+var_270]
.text$mn:000026A9                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000026AE                 lea     ecx, [ebp+var_254]
.text$mn:000026B4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000026B9                 mov     byte ptr [ebp+var_4], 1
.text$mn:000026BD                 lea     ecx, [ebp+var_28C]
.text$mn:000026C3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000026C8                 mov     byte ptr [ebp+var_4], 2
.text$mn:000026CC                 lea     eax, [ebp+var_28C]
.text$mn:000026D2                 push    eax
.text$mn:000026D3                 lea     ecx, [ebp+var_254]
.text$mn:000026D9                 push    ecx
.text$mn:000026DA                 sub     esp, 1Ch
.text$mn:000026DD                 mov     ecx, esp
.text$mn:000026DF                 mov     [ebp+var_590], esp
.text$mn:000026E5                 lea     edx, [ebp+var_270]
.text$mn:000026EB                 push    edx
.text$mn:000026EC                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000026F1                 mov     [ebp+var_574], eax
.text$mn:000026F7                 mov     eax, [ebp+var_574]
.text$mn:000026FD                 mov     [ebp+var_594], eax
.text$mn:00002703                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002707                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000270B                 call    ?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00002710                 add     esp, 24h
.text$mn:00002713                 mov     [ebp+var_551], al
.text$mn:00002719                 movzx   ecx, [ebp+var_551]
.text$mn:00002720                 test    ecx, ecx
.text$mn:00002722                 jnz     short loc_2759
.text$mn:00002724                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002728                 lea     ecx, [ebp+var_28C]
.text$mn:0000272E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002733                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002737                 lea     ecx, [ebp+var_254]
.text$mn:0000273D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002742                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002749                 lea     ecx, [ebp+var_270]
.text$mn:0000274F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002754                 jmp     loc_2AEE
.text$mn:00002759 ; ---------------------------------------------------------------------------
.text$mn:00002759
.text$mn:00002759 loc_2759:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+15Aj
.text$mn:00002759                 lea     ecx, [ebp+var_238]
.text$mn:0000275F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002764                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002768                 sub     esp, 1Ch
.text$mn:0000276B                 mov     ecx, esp
.text$mn:0000276D                 mov     [ebp+var_59C], esp
.text$mn:00002773                 lea     edx, [ebp+var_28C]
.text$mn:00002779                 push    edx
.text$mn:0000277A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000277F                 mov     [ebp+var_578], eax
.text$mn:00002785                 mov     eax, [ebp+var_578]
.text$mn:0000278B                 mov     [ebp+var_5A4], eax
.text$mn:00002791                 mov     byte ptr [ebp+var_4], 5
.text$mn:00002795                 lea     ecx, [ebp+var_2A8]
.text$mn:0000279B                 push    ecx
.text$mn:0000279C                 mov     byte ptr [ebp+var_4], 4
.text$mn:000027A0                 call    ?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z ; addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000027A5                 add     esp, 20h
.text$mn:000027A8                 mov     [ebp+var_5A0], eax
.text$mn:000027AE                 mov     byte ptr [ebp+var_4], 6
.text$mn:000027B2                 push    offset $SG158498 ; "*.*"
.text$mn:000027B7                 lea     edx, [ebp+var_2A8]
.text$mn:000027BD                 push    edx             ; int
.text$mn:000027BE                 lea     eax, [ebp+var_2C4]
.text$mn:000027C4                 push    eax             ; int
.text$mn:000027C5                 call    ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000027CA                 add     esp, 0Ch
.text$mn:000027CD                 mov     byte ptr [ebp+var_4], 7
.text$mn:000027D1                 lea     ecx, [ebp+FindFileData]
.text$mn:000027D7                 push    ecx             ; lpFindFileData
.text$mn:000027D8                 lea     ecx, [ebp+var_2C4]
.text$mn:000027DE                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000027E3                 push    eax             ; lpFileName
.text$mn:000027E4                 call    dword ptr ds:__imp__FindFirstFileW@8 ; FindFirstFileW(x,x)
.text$mn:000027EA                 mov     [ebp+hFindFile], eax
.text$mn:000027F0                 cmp     [ebp+hFindFile], 0FFFFFFFFh
.text$mn:000027F7                 jz      loc_29DB
.text$mn:000027FD                 mov     [ebp+var_598], 7D0h
.text$mn:00002807                 mov     [ebp+var_55C], 0
.text$mn:00002811
.text$mn:00002811 loc_2811:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+3FEj
.text$mn:00002811                 mov     edx, [ebp+var_55C]
.text$mn:00002817                 add     edx, 1
.text$mn:0000281A                 mov     [ebp+var_55C], edx
.text$mn:00002820                 cmp     [ebp+var_55C], 7D0h
.text$mn:0000282A                 jbe     short loc_2831
.text$mn:0000282C                 jmp     loc_29CC
.text$mn:00002831 ; ---------------------------------------------------------------------------
.text$mn:00002831
.text$mn:00002831 loc_2831:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+262j
.text$mn:00002831                 push    offset $SG158544 ; Str
.text$mn:00002836                 lea     eax, [ebp+FindFileData.cFileName]
.text$mn:0000283C                 push    eax             ; Str
.text$mn:0000283D                 lea     ecx, [ebp+var_2E0]
.text$mn:00002843                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002848                 mov     [ebp+var_570], eax
.text$mn:0000284E                 mov     ecx, [ebp+var_570]
.text$mn:00002854                 mov     [ebp+var_588], ecx
.text$mn:0000285A                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000285E                 mov     edx, [ebp+var_550]
.text$mn:00002864                 or      edx, 1
.text$mn:00002867                 mov     [ebp+var_550], edx
.text$mn:0000286D                 mov     eax, [ebp+var_588]
.text$mn:00002873                 push    eax             ; int
.text$mn:00002874                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002879                 add     esp, 8
.text$mn:0000287C                 movzx   ecx, al
.text$mn:0000287F                 test    ecx, ecx
.text$mn:00002881                 jnz     short loc_28E4
.text$mn:00002883                 push    offset $SG158545 ; ".."
.text$mn:00002888                 lea     edx, [ebp+FindFileData.cFileName]
.text$mn:0000288E                 push    edx             ; Str
.text$mn:0000288F                 lea     ecx, [ebp+var_2FC]
.text$mn:00002895                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000289A                 mov     [ebp+var_584], eax
.text$mn:000028A0                 mov     eax, [ebp+var_584]
.text$mn:000028A6                 mov     [ebp+var_57C], eax
.text$mn:000028AC                 mov     [ebp+var_4], 9
.text$mn:000028B3                 mov     ecx, [ebp+var_550]
.text$mn:000028B9                 or      ecx, 2
.text$mn:000028BC                 mov     [ebp+var_550], ecx
.text$mn:000028C2                 mov     edx, [ebp+var_57C]
.text$mn:000028C8                 push    edx             ; int
.text$mn:000028C9                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000028CE                 add     esp, 8
.text$mn:000028D1                 movzx   eax, al
.text$mn:000028D4                 test    eax, eax
.text$mn:000028D6                 jnz     short loc_28E4
.text$mn:000028D8                 mov     [ebp+var_56C], 0
.text$mn:000028E2                 jmp     short loc_28EE
.text$mn:000028E4 ; ---------------------------------------------------------------------------
.text$mn:000028E4
.text$mn:000028E4 loc_28E4:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+2B9j
.text$mn:000028E4                                         ; AutoCompletion::showPathCompletion(void)+30Ej
.text$mn:000028E4                 mov     [ebp+var_56C], 1
.text$mn:000028EE
.text$mn:000028EE loc_28EE:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+31Aj
.text$mn:000028EE                 mov     cl, byte ptr [ebp+var_56C]
.text$mn:000028F4                 mov     [ebp+var_552], cl
.text$mn:000028FA                 mov     [ebp+var_4], 8
.text$mn:00002901                 mov     edx, [ebp+var_550]
.text$mn:00002907                 and     edx, 2
.text$mn:0000290A                 jz      short loc_291E
.text$mn:0000290C                 and     [ebp+var_550], 0FFFFFFFDh
.text$mn:00002913                 lea     ecx, [ebp+var_2FC]
.text$mn:00002919                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000291E
.text$mn:0000291E loc_291E:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+342j
.text$mn:0000291E                 mov     [ebp+var_4], 7
.text$mn:00002925                 mov     eax, [ebp+var_550]
.text$mn:0000292B                 and     eax, 1
.text$mn:0000292E                 jz      short loc_2942
.text$mn:00002930                 and     [ebp+var_550], 0FFFFFFFEh
.text$mn:00002937                 lea     ecx, [ebp+var_2E0]
.text$mn:0000293D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002942
.text$mn:00002942 loc_2942:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+366j
.text$mn:00002942                 movzx   ecx, [ebp+var_552]
.text$mn:00002949                 test    ecx, ecx
.text$mn:0000294B                 jz      short loc_294F
.text$mn:0000294D                 jmp     short loc_29B0
.text$mn:0000294F ; ---------------------------------------------------------------------------
.text$mn:0000294F
.text$mn:0000294F loc_294F:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+383j
.text$mn:0000294F                 lea     ecx, [ebp+var_238]
.text$mn:00002955                 call    ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)
.text$mn:0000295A                 movzx   edx, al
.text$mn:0000295D                 test    edx, edx
.text$mn:0000295F                 jnz     short loc_2971
.text$mn:00002961                 push    offset $SG158547 ; "\n"
.text$mn:00002966                 lea     ecx, [ebp+var_238]
.text$mn:0000296C                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002971
.text$mn:00002971 loc_2971:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+397j
.text$mn:00002971                 lea     eax, [ebp+var_2A8]
.text$mn:00002977                 push    eax
.text$mn:00002978                 lea     ecx, [ebp+var_238]
.text$mn:0000297E                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002983                 lea     ecx, [ebp+FindFileData.cFileName]
.text$mn:00002989                 push    ecx             ; Str
.text$mn:0000298A                 lea     ecx, [ebp+var_238]
.text$mn:00002990                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002995                 mov     edx, [ebp+FindFileData.dwFileAttributes]
.text$mn:0000299B                 and     edx, 10h
.text$mn:0000299E                 jz      short loc_29B0
.text$mn:000029A0                 push    offset $SG158549 ; Str
.text$mn:000029A5                 lea     ecx, [ebp+var_238]
.text$mn:000029AB                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000029B0
.text$mn:000029B0 loc_29B0:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+385j
.text$mn:000029B0                                         ; AutoCompletion::showPathCompletion(void)+3D6j
.text$mn:000029B0                 lea     eax, [ebp+FindFileData]
.text$mn:000029B6                 push    eax             ; lpFindFileData
.text$mn:000029B7                 mov     ecx, [ebp+hFindFile]
.text$mn:000029BD                 push    ecx             ; hFindFile
.text$mn:000029BE                 call    dword ptr ds:__imp__FindNextFileW@8 ; FindNextFileW(x,x)
.text$mn:000029C4                 test    eax, eax
.text$mn:000029C6                 jnz     loc_2811
.text$mn:000029CC
.text$mn:000029CC loc_29CC:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+264j
.text$mn:000029CC                 mov     edx, [ebp+hFindFile]
.text$mn:000029D2                 push    edx             ; hFindFile
.text$mn:000029D3                 call    dword ptr ds:__imp__FindClose@4 ; FindClose(x)
.text$mn:000029D9                 jmp     short loc_2A3D
.text$mn:000029DB ; ---------------------------------------------------------------------------
.text$mn:000029DB
.text$mn:000029DB loc_29DB:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+22Fj
.text$mn:000029DB                 mov     byte ptr [ebp+var_4], 6
.text$mn:000029DF                 lea     ecx, [ebp+var_2C4]
.text$mn:000029E5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000029EA                 mov     byte ptr [ebp+var_4], 4
.text$mn:000029EE                 lea     ecx, [ebp+var_2A8]
.text$mn:000029F4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000029F9                 mov     byte ptr [ebp+var_4], 2
.text$mn:000029FD                 lea     ecx, [ebp+var_238]
.text$mn:00002A03                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A08                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002A0C                 lea     ecx, [ebp+var_28C]
.text$mn:00002A12                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A17                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002A1B                 lea     ecx, [ebp+var_254]
.text$mn:00002A21                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A26                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A2D                 lea     ecx, [ebp+var_270]
.text$mn:00002A33                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A38                 jmp     loc_2AEE
.text$mn:00002A3D ; ---------------------------------------------------------------------------
.text$mn:00002A3D
.text$mn:00002A3D loc_2A3D:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+411j
.text$mn:00002A3D                 mov     byte ptr [ebp+var_4], 6
.text$mn:00002A41                 lea     ecx, [ebp+var_2C4]
.text$mn:00002A47                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A4C                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002A50                 lea     ecx, [ebp+var_2A8]
.text$mn:00002A56                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A5B                 push    0               ; __int32
.text$mn:00002A5D                 push    0Ah             ; unsigned int
.text$mn:00002A5F                 push    83Ah            ; unsigned int
.text$mn:00002A64                 mov     eax, [ebp+var_558]
.text$mn:00002A6A                 mov     ecx, [eax+4]    ; this
.text$mn:00002A6D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002A72                 push    0               ; __int32
.text$mn:00002A74                 push    1               ; unsigned int
.text$mn:00002A76                 push    843h            ; unsigned int
.text$mn:00002A7B                 mov     ecx, [ebp+var_558]
.text$mn:00002A81                 mov     ecx, [ecx+4]    ; this
.text$mn:00002A84                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002A89                 lea     ecx, [ebp+var_238]
.text$mn:00002A8F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002A94                 push    eax             ; wchar_t *
.text$mn:00002A95                 lea     ecx, [ebp+var_254]
.text$mn:00002A9B                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002AA0                 push    eax             ; int
.text$mn:00002AA1                 mov     edx, [ebp+var_558]
.text$mn:00002AA7                 mov     ecx, [edx+4]    ; this
.text$mn:00002AAA                 call    ?showAutoComletion@ScintillaEditView@@QAEXHPB_W@Z ; ScintillaEditView::showAutoComletion(int,wchar_t const *)
.text$mn:00002AAF                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002AB3                 lea     ecx, [ebp+var_238]
.text$mn:00002AB9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002ABE                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002AC2                 lea     ecx, [ebp+var_28C]
.text$mn:00002AC8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002ACD                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002AD1                 lea     ecx, [ebp+var_254]
.text$mn:00002AD7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002ADC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002AE3                 lea     ecx, [ebp+var_270]
.text$mn:00002AE9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002AEE
.text$mn:00002AEE loc_2AEE:                               ; CODE XREF: AutoCompletion::showPathCompletion(void)+18Cj
.text$mn:00002AEE                                         ; AutoCompletion::showPathCompletion(void)+470j
.text$mn:00002AEE                 mov     ecx, [ebp+var_C]
.text$mn:00002AF1                 mov     large fs:0, ecx
.text$mn:00002AF8                 pop     ecx
.text$mn:00002AF9                 mov     ecx, [ebp+var_10]
.text$mn:00002AFC                 xor     ecx, ebp
.text$mn:00002AFE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002B03                 mov     esp, ebp
.text$mn:00002B05                 pop     ebp
.text$mn:00002B06                 retn
.text$mn:00002B06 ?showPathCompletion@AutoCompletion@@QAEXXZ endp
.text$mn:00002B06
.text$mn:00002B06 ; ---------------------------------------------------------------------------
.text$mn:00002B07                 align 4
.text$mn:00002B08
.text$mn:00002B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B08
.text$mn:00002B08 ; Attributes: bp-based frame
.text$mn:00002B08
.text$mn:00002B08 ; void __thiscall AutoCompletion::insertMatchedChars(AutoCompletion *this, int, const struct MatchedPairConf *)
.text$mn:00002B08                 public ?insertMatchedChars@AutoCompletion@@QAEXHABUMatchedPairConf@@@Z
.text$mn:00002B08 ?insertMatchedChars@AutoCompletion@@QAEXHABUMatchedPairConf@@@Z proc near
.text$mn:00002B08
.text$mn:00002B08 var_16C         = byte ptr -16Ch
.text$mn:00002B08 var_164         = byte ptr -164h
.text$mn:00002B08 var_15C         = byte ptr -15Ch
.text$mn:00002B08 var_154         = byte ptr -154h
.text$mn:00002B08 var_14C         = byte ptr -14Ch
.text$mn:00002B08 var_144         = byte ptr -144h
.text$mn:00002B08 var_13C         = dword ptr -13Ch
.text$mn:00002B08 var_138         = dword ptr -138h
.text$mn:00002B08 var_134         = dword ptr -134h
.text$mn:00002B08 var_130         = dword ptr -130h
.text$mn:00002B08 var_12C         = dword ptr -12Ch
.text$mn:00002B08 var_128         = dword ptr -128h
.text$mn:00002B08 var_124         = dword ptr -124h
.text$mn:00002B08 var_120         = dword ptr -120h
.text$mn:00002B08 var_11C         = dword ptr -11Ch
.text$mn:00002B08 var_118         = dword ptr -118h
.text$mn:00002B08 var_114         = dword ptr -114h
.text$mn:00002B08 var_110         = dword ptr -110h
.text$mn:00002B08 var_109         = byte ptr -109h
.text$mn:00002B08 var_108         = dword ptr -108h
.text$mn:00002B08 var_104         = byte ptr -104h
.text$mn:00002B08 var_4           = dword ptr -4
.text$mn:00002B08 arg_0           = dword ptr  8
.text$mn:00002B08 arg_4           = dword ptr  0Ch
.text$mn:00002B08
.text$mn:00002B08                 push    ebp
.text$mn:00002B09                 mov     ebp, esp
.text$mn:00002B0B                 sub     esp, 16Ch
.text$mn:00002B11                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B16                 xor     eax, ebp
.text$mn:00002B18                 mov     [ebp+var_4], eax
.text$mn:00002B1B                 mov     [ebp+var_108], ecx
.text$mn:00002B21                 mov     eax, [ebp+arg_4]
.text$mn:00002B24                 mov     [ebp+var_128], eax
.text$mn:00002B2A                 push    0               ; __int32
.text$mn:00002B2C                 push    0               ; unsigned int
.text$mn:00002B2E                 push    7D8h            ; unsigned int
.text$mn:00002B33                 mov     ecx, [ebp+var_108]
.text$mn:00002B39                 mov     ecx, [ecx+4]    ; this
.text$mn:00002B3C                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002B41                 mov     [ebp+var_110], eax
.text$mn:00002B47                 mov     [ebp+var_114], 0
.text$mn:00002B51                 mov     [ebp+var_11C], 0
.text$mn:00002B5B                 mov     ecx, [ebp+var_128]
.text$mn:00002B61                 call    ?size@?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::size(void)
.text$mn:00002B66                 mov     [ebp+var_138], eax
.text$mn:00002B6C                 jmp     short loc_2B7D
.text$mn:00002B6E ; ---------------------------------------------------------------------------
.text$mn:00002B6E
.text$mn:00002B6E loc_2B6E:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2BFDj
.text$mn:00002B6E                 mov     edx, [ebp+var_11C]
.text$mn:00002B74                 add     edx, 1
.text$mn:00002B77                 mov     [ebp+var_11C], edx
.text$mn:00002B7D
.text$mn:00002B7D loc_2B7D:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+64j
.text$mn:00002B7D                 mov     eax, [ebp+var_11C]
.text$mn:00002B83                 cmp     eax, [ebp+var_138]
.text$mn:00002B89                 jnb     short loc_2C02
.text$mn:00002B8B                 mov     ecx, [ebp+var_11C]
.text$mn:00002B91                 push    ecx
.text$mn:00002B92                 mov     ecx, [ebp+var_128]
.text$mn:00002B98                 call    ??A?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEABU?$pair@DD@1@I@Z ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)
.text$mn:00002B9D                 movsx   edx, byte ptr [eax]
.text$mn:00002BA0                 cmp     edx, [ebp+arg_0]
.text$mn:00002BA3                 jnz     short loc_2BFD
.text$mn:00002BA5                 mov     byte ptr [ebp+var_118], 0
.text$mn:00002BAC                 mov     byte ptr [ebp+var_118+1], 0
.text$mn:00002BB3                 mov     eax, [ebp+var_11C]
.text$mn:00002BB9                 push    eax
.text$mn:00002BBA                 mov     ecx, [ebp+var_128]
.text$mn:00002BC0                 call    ??A?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEABU?$pair@DD@1@I@Z ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)
.text$mn:00002BC5                 mov     ecx, 1
.text$mn:00002BCA                 imul    edx, ecx, 0
.text$mn:00002BCD                 mov     al, [eax+1]
.text$mn:00002BD0                 mov     byte ptr [ebp+edx+var_118], al
.text$mn:00002BD7                 lea     ecx, [ebp+var_118]
.text$mn:00002BDD                 push    ecx             ; __int32
.text$mn:00002BDE                 mov     edx, [ebp+var_110]
.text$mn:00002BE4                 push    edx             ; unsigned int
.text$mn:00002BE5                 push    7D3h            ; unsigned int
.text$mn:00002BEA                 mov     eax, [ebp+var_108]
.text$mn:00002BF0                 mov     ecx, [eax+4]    ; this
.text$mn:00002BF3                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002BF8                 jmp     loc_3092
.text$mn:00002BFD ; ---------------------------------------------------------------------------
.text$mn:00002BFD
.text$mn:00002BFD loc_2BFD:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+9Bj
.text$mn:00002BFD                 jmp     loc_2B6E
.text$mn:00002C02 ; ---------------------------------------------------------------------------
.text$mn:00002C02
.text$mn:00002C02 loc_2C02:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+81j
.text$mn:00002C02                 mov     [ebp+var_13C], 100h
.text$mn:00002C0C                 mov     ecx, 1
.text$mn:00002C11                 imul    edx, ecx, 0
.text$mn:00002C14                 mov     [ebp+var_134], edx
.text$mn:00002C1A                 cmp     [ebp+var_134], 100h
.text$mn:00002C24                 jnb     short loc_2C28
.text$mn:00002C26                 jmp     short loc_2C2D
.text$mn:00002C28 ; ---------------------------------------------------------------------------
.text$mn:00002C28
.text$mn:00002C28 loc_2C28:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+11Cj
.text$mn:00002C28                 call    ___report_rangecheckfailure
.text$mn:00002C2D
.text$mn:00002C2D loc_2C2D:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+11Ej
.text$mn:00002C2D                 mov     eax, [ebp+var_134]
.text$mn:00002C33                 mov     [ebp+eax+var_104], 0
.text$mn:00002C3B                 mov     ecx, [ebp+arg_0]
.text$mn:00002C3E                 mov     [ebp+var_120], ecx
.text$mn:00002C44                 mov     edx, [ebp+var_120]
.text$mn:00002C4A                 sub     edx, 22h ; '"'
.text$mn:00002C4D                 mov     [ebp+var_120], edx
.text$mn:00002C53                 cmp     [ebp+var_120], 5Bh ; '[' ; switch 92 cases
.text$mn:00002C5A                 ja      $LN3            ; jumptable 00002C6D default case
.text$mn:00002C60                 mov     eax, [ebp+var_120]
.text$mn:00002C66                 movzx   ecx, ds:$LN42[eax]
.text$mn:00002C6D                 jmp     ds:$LN43[ecx*4] ; switch jump
.text$mn:00002C74 ; ---------------------------------------------------------------------------
.text$mn:00002C74
.text$mn:00002C74 $LN31:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002C74                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002C74                 mov     edx, [ebp+arg_4] ; jumptable 00002C6D case 6
.text$mn:00002C77                 movzx   eax, byte ptr [edx+21h]
.text$mn:00002C7B                 test    eax, eax
.text$mn:00002C7D                 jz      short loc_2CB8
.text$mn:00002C7F                 mov     [ebp+var_114], offset $SG158923
.text$mn:00002C89                 mov     ecx, [ebp+var_110]
.text$mn:00002C8F                 sub     ecx, 1
.text$mn:00002C92                 push    ecx             ; int
.text$mn:00002C93                 movzx   edx, byte ptr [ebp+arg_0]
.text$mn:00002C97                 push    edx             ; char
.text$mn:00002C98                 lea     ecx, [ebp+var_144] ; this
.text$mn:00002C9E                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00002CA3                 mov     ecx, [eax+4]
.text$mn:00002CA6                 push    ecx
.text$mn:00002CA7                 mov     edx, [eax]
.text$mn:00002CA9                 push    edx
.text$mn:00002CAA                 mov     ecx, [ebp+var_108]
.text$mn:00002CB0                 add     ecx, 14h
.text$mn:00002CB3                 call    ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::add(MatchedCharInserted)
.text$mn:00002CB8
.text$mn:00002CB8 loc_2CB8:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+175j
.text$mn:00002CB8                 jmp     loc_3068
.text$mn:00002CBD ; ---------------------------------------------------------------------------
.text$mn:00002CBD
.text$mn:00002CBD $LN29:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002CBD                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002CBD                 mov     eax, [ebp+arg_4] ; jumptable 00002C6D case 57
.text$mn:00002CC0                 movzx   ecx, byte ptr [eax+22h]
.text$mn:00002CC4                 test    ecx, ecx
.text$mn:00002CC6                 jz      short loc_2D01
.text$mn:00002CC8                 mov     [ebp+var_114], offset $SG158927
.text$mn:00002CD2                 mov     edx, [ebp+var_110]
.text$mn:00002CD8                 sub     edx, 1
.text$mn:00002CDB                 push    edx             ; int
.text$mn:00002CDC                 movzx   eax, byte ptr [ebp+arg_0]
.text$mn:00002CE0                 push    eax             ; char
.text$mn:00002CE1                 lea     ecx, [ebp+var_16C] ; this
.text$mn:00002CE7                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00002CEC                 mov     ecx, [eax+4]
.text$mn:00002CEF                 push    ecx
.text$mn:00002CF0                 mov     edx, [eax]
.text$mn:00002CF2                 push    edx
.text$mn:00002CF3                 mov     ecx, [ebp+var_108]
.text$mn:00002CF9                 add     ecx, 14h
.text$mn:00002CFC                 call    ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::add(MatchedCharInserted)
.text$mn:00002D01
.text$mn:00002D01 loc_2D01:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+1BEj
.text$mn:00002D01                 jmp     loc_3068
.text$mn:00002D06 ; ---------------------------------------------------------------------------
.text$mn:00002D06
.text$mn:00002D06 $LN27:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002D06                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002D06                 mov     eax, [ebp+arg_4] ; jumptable 00002C6D case 89
.text$mn:00002D09                 movzx   ecx, byte ptr [eax+23h]
.text$mn:00002D0D                 test    ecx, ecx
.text$mn:00002D0F                 jz      short loc_2D4A
.text$mn:00002D11                 mov     [ebp+var_114], offset $SG158931
.text$mn:00002D1B                 mov     edx, [ebp+var_110]
.text$mn:00002D21                 sub     edx, 1
.text$mn:00002D24                 push    edx             ; int
.text$mn:00002D25                 movzx   eax, byte ptr [ebp+arg_0]
.text$mn:00002D29                 push    eax             ; char
.text$mn:00002D2A                 lea     ecx, [ebp+var_154] ; this
.text$mn:00002D30                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00002D35                 mov     ecx, [eax+4]
.text$mn:00002D38                 push    ecx
.text$mn:00002D39                 mov     edx, [eax]
.text$mn:00002D3B                 push    edx
.text$mn:00002D3C                 mov     ecx, [ebp+var_108]
.text$mn:00002D42                 add     ecx, 14h
.text$mn:00002D45                 call    ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::add(MatchedCharInserted)
.text$mn:00002D4A
.text$mn:00002D4A loc_2D4A:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+207j
.text$mn:00002D4A                 jmp     loc_3068
.text$mn:00002D4F ; ---------------------------------------------------------------------------
.text$mn:00002D4F
.text$mn:00002D4F $LN25:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002D4F                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002D4F                 mov     eax, [ebp+arg_4] ; jumptable 00002C6D case 0
.text$mn:00002D52                 movzx   ecx, byte ptr [eax+25h]
.text$mn:00002D56                 test    ecx, ecx
.text$mn:00002D58                 jz      loc_2E14
.text$mn:00002D5E                 mov     ecx, [ebp+var_108]
.text$mn:00002D64                 add     ecx, 14h        ; this
.text$mn:00002D67                 call    ?isEmpty@InsertedMatchedChars@@QBE_NXZ ; InsertedMatchedChars::isEmpty(void)
.text$mn:00002D6C                 movzx   edx, al
.text$mn:00002D6F                 test    edx, edx
.text$mn:00002D71                 jnz     short loc_2DDB
.text$mn:00002D73                 mov     eax, [ebp+var_110]
.text$mn:00002D79                 push    eax             ; int
.text$mn:00002D7A                 movzx   ecx, byte ptr [ebp+arg_0]
.text$mn:00002D7E                 push    ecx             ; char
.text$mn:00002D7F                 push    22h ; '"'       ; char
.text$mn:00002D81                 mov     ecx, [ebp+var_108]
.text$mn:00002D87                 add     ecx, 14h        ; this
.text$mn:00002D8A                 call    ?search@InsertedMatchedChars@@QAEHDDH@Z ; InsertedMatchedChars::search(char,char,int)
.text$mn:00002D8F                 mov     [ebp+var_130], eax
.text$mn:00002D95                 cmp     [ebp+var_130], 0FFFFFFFFh
.text$mn:00002D9C                 jz      short loc_2DDB
.text$mn:00002D9E                 push    1               ; __int32
.text$mn:00002DA0                 mov     edx, [ebp+var_130]
.text$mn:00002DA6                 push    edx             ; unsigned int
.text$mn:00002DA7                 push    0A55h           ; unsigned int
.text$mn:00002DAC                 mov     eax, [ebp+var_108]
.text$mn:00002DB2                 mov     ecx, [eax+4]    ; this
.text$mn:00002DB5                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002DBA                 push    0               ; __int32
.text$mn:00002DBC                 mov     ecx, [ebp+var_130]
.text$mn:00002DC2                 push    ecx             ; unsigned int
.text$mn:00002DC3                 push    7E9h            ; unsigned int
.text$mn:00002DC8                 mov     edx, [ebp+var_108]
.text$mn:00002DCE                 mov     ecx, [edx+4]    ; this
.text$mn:00002DD1                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002DD6                 jmp     loc_3092
.text$mn:00002DDB ; ---------------------------------------------------------------------------
.text$mn:00002DDB
.text$mn:00002DDB loc_2DDB:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+269j
.text$mn:00002DDB                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+294j
.text$mn:00002DDB                 mov     [ebp+var_114], offset $SG158938
.text$mn:00002DE5                 mov     eax, [ebp+var_110]
.text$mn:00002DEB                 sub     eax, 1
.text$mn:00002DEE                 push    eax             ; int
.text$mn:00002DEF                 movzx   ecx, byte ptr [ebp+arg_0]
.text$mn:00002DF3                 push    ecx             ; char
.text$mn:00002DF4                 lea     ecx, [ebp+var_164] ; this
.text$mn:00002DFA                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00002DFF                 mov     edx, [eax+4]
.text$mn:00002E02                 push    edx
.text$mn:00002E03                 mov     eax, [eax]
.text$mn:00002E05                 push    eax
.text$mn:00002E06                 mov     ecx, [ebp+var_108]
.text$mn:00002E0C                 add     ecx, 14h
.text$mn:00002E0F                 call    ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::add(MatchedCharInserted)
.text$mn:00002E14
.text$mn:00002E14 loc_2E14:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+250j
.text$mn:00002E14                 jmp     loc_3068
.text$mn:00002E19 ; ---------------------------------------------------------------------------
.text$mn:00002E19
.text$mn:00002E19 $LN21:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002E19                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002E19                 mov     ecx, [ebp+arg_4] ; jumptable 00002C6D case 5
.text$mn:00002E1C                 movzx   edx, byte ptr [ecx+24h]
.text$mn:00002E20                 test    edx, edx
.text$mn:00002E22                 jz      loc_2EDE
.text$mn:00002E28                 mov     ecx, [ebp+var_108]
.text$mn:00002E2E                 add     ecx, 14h        ; this
.text$mn:00002E31                 call    ?isEmpty@InsertedMatchedChars@@QBE_NXZ ; InsertedMatchedChars::isEmpty(void)
.text$mn:00002E36                 movzx   eax, al
.text$mn:00002E39                 test    eax, eax
.text$mn:00002E3B                 jnz     short loc_2EA5
.text$mn:00002E3D                 mov     ecx, [ebp+var_110]
.text$mn:00002E43                 push    ecx             ; int
.text$mn:00002E44                 movzx   edx, byte ptr [ebp+arg_0]
.text$mn:00002E48                 push    edx             ; char
.text$mn:00002E49                 push    27h ; '''       ; char
.text$mn:00002E4B                 mov     ecx, [ebp+var_108]
.text$mn:00002E51                 add     ecx, 14h        ; this
.text$mn:00002E54                 call    ?search@InsertedMatchedChars@@QAEHDDH@Z ; InsertedMatchedChars::search(char,char,int)
.text$mn:00002E59                 mov     [ebp+var_12C], eax
.text$mn:00002E5F                 cmp     [ebp+var_12C], 0FFFFFFFFh
.text$mn:00002E66                 jz      short loc_2EA5
.text$mn:00002E68                 push    1               ; __int32
.text$mn:00002E6A                 mov     eax, [ebp+var_12C]
.text$mn:00002E70                 push    eax             ; unsigned int
.text$mn:00002E71                 push    0A55h           ; unsigned int
.text$mn:00002E76                 mov     ecx, [ebp+var_108]
.text$mn:00002E7C                 mov     ecx, [ecx+4]    ; this
.text$mn:00002E7F                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002E84                 push    0               ; __int32
.text$mn:00002E86                 mov     edx, [ebp+var_12C]
.text$mn:00002E8C                 push    edx             ; unsigned int
.text$mn:00002E8D                 push    7E9h            ; unsigned int
.text$mn:00002E92                 mov     eax, [ebp+var_108]
.text$mn:00002E98                 mov     ecx, [eax+4]    ; this
.text$mn:00002E9B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002EA0                 jmp     loc_3092
.text$mn:00002EA5 ; ---------------------------------------------------------------------------
.text$mn:00002EA5
.text$mn:00002EA5 loc_2EA5:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+333j
.text$mn:00002EA5                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+35Ej
.text$mn:00002EA5                 mov     [ebp+var_114], offset $SG158945
.text$mn:00002EAF                 mov     ecx, [ebp+var_110]
.text$mn:00002EB5                 sub     ecx, 1
.text$mn:00002EB8                 push    ecx             ; int
.text$mn:00002EB9                 movzx   edx, byte ptr [ebp+arg_0]
.text$mn:00002EBD                 push    edx             ; char
.text$mn:00002EBE                 lea     ecx, [ebp+var_14C] ; this
.text$mn:00002EC4                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00002EC9                 mov     ecx, [eax+4]
.text$mn:00002ECC                 push    ecx
.text$mn:00002ECD                 mov     edx, [eax]
.text$mn:00002ECF                 push    edx
.text$mn:00002ED0                 mov     ecx, [ebp+var_108]
.text$mn:00002ED6                 add     ecx, 14h
.text$mn:00002ED9                 call    ?add@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::add(MatchedCharInserted)
.text$mn:00002EDE
.text$mn:00002EDE loc_2EDE:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+31Aj
.text$mn:00002EDE                 jmp     loc_3068
.text$mn:00002EE3 ; ---------------------------------------------------------------------------
.text$mn:00002EE3
.text$mn:00002EE3 $LN17_1:                                ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002EE3                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002EE3                 mov     eax, [ebp+arg_4] ; jumptable 00002C6D case 28
.text$mn:00002EE6                 movzx   ecx, byte ptr [eax+20h]
.text$mn:00002EEA                 test    ecx, ecx
.text$mn:00002EEC                 jz      short loc_2F44
.text$mn:00002EEE                 mov     edx, [ebp+var_108]
.text$mn:00002EF4                 cmp     dword ptr [edx+8], 8
.text$mn:00002EF8                 jz      short loc_2F06
.text$mn:00002EFA                 mov     eax, [ebp+var_108]
.text$mn:00002F00                 cmp     dword ptr [eax+8], 9
.text$mn:00002F04                 jnz     short loc_2F44
.text$mn:00002F06
.text$mn:00002F06 loc_2F06:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+3F0j
.text$mn:00002F06                 mov     ecx, [ebp+var_110]
.text$mn:00002F0C                 push    ecx             ; unsigned int
.text$mn:00002F0D                 push    100h            ; unsigned int
.text$mn:00002F12                 lea     edx, [ebp+var_104]
.text$mn:00002F18                 push    edx             ; char *
.text$mn:00002F19                 mov     ecx, [ebp+var_108] ; this
.text$mn:00002F1F                 call    ?getCloseTag@AutoCompletion@@QAEXPADII@Z ; AutoCompletion::getCloseTag(char *,uint,uint)
.text$mn:00002F24                 mov     eax, 1
.text$mn:00002F29                 imul    ecx, eax, 0
.text$mn:00002F2C                 movsx   edx, [ebp+ecx+var_104]
.text$mn:00002F34                 test    edx, edx
.text$mn:00002F36                 jz      short loc_2F44
.text$mn:00002F38                 lea     eax, [ebp+var_104]
.text$mn:00002F3E                 mov     [ebp+var_114], eax
.text$mn:00002F44
.text$mn:00002F44 loc_2F44:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+3E4j
.text$mn:00002F44                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+3FCj ...
.text$mn:00002F44                 jmp     loc_3068
.text$mn:00002F49 ; ---------------------------------------------------------------------------
.text$mn:00002F49
.text$mn:00002F49 $LN13:                                  ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00002F49                                         ; DATA XREF: .text$mn:$LN43o
.text$mn:00002F49                 mov     ecx, [ebp+var_108] ; jumptable 00002C6D cases 7,59,91
.text$mn:00002F4F                 add     ecx, 14h        ; this
.text$mn:00002F52                 call    ?isEmpty@InsertedMatchedChars@@QBE_NXZ ; InsertedMatchedChars::isEmpty(void)
.text$mn:00002F57                 movzx   ecx, al
.text$mn:00002F5A                 test    ecx, ecx
.text$mn:00002F5C                 jnz     loc_3022
.text$mn:00002F62                 cmp     [ebp+arg_0], 29h ; ')'
.text$mn:00002F66                 jnz     short loc_2F81
.text$mn:00002F68                 mov     edx, [ebp+arg_4]
.text$mn:00002F6B                 movzx   eax, byte ptr [edx+21h]
.text$mn:00002F6F                 test    eax, eax
.text$mn:00002F71                 jnz     short loc_2F78
.text$mn:00002F73                 jmp     loc_3092
.text$mn:00002F78 ; ---------------------------------------------------------------------------
.text$mn:00002F78
.text$mn:00002F78 loc_2F78:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+469j
.text$mn:00002F78                 mov     [ebp+var_109], 28h ; '('
.text$mn:00002F7F                 jmp     short loc_2FB7
.text$mn:00002F81 ; ---------------------------------------------------------------------------
.text$mn:00002F81
.text$mn:00002F81 loc_2F81:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+45Ej
.text$mn:00002F81                 cmp     [ebp+arg_0], 5Dh ; ']'
.text$mn:00002F85                 jnz     short loc_2FA0
.text$mn:00002F87                 mov     ecx, [ebp+arg_4]
.text$mn:00002F8A                 movzx   edx, byte ptr [ecx+22h]
.text$mn:00002F8E                 test    edx, edx
.text$mn:00002F90                 jnz     short loc_2F97
.text$mn:00002F92                 jmp     loc_3092
.text$mn:00002F97 ; ---------------------------------------------------------------------------
.text$mn:00002F97
.text$mn:00002F97 loc_2F97:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+488j
.text$mn:00002F97                 mov     [ebp+var_109], 5Bh ; '['
.text$mn:00002F9E                 jmp     short loc_2FB7
.text$mn:00002FA0 ; ---------------------------------------------------------------------------
.text$mn:00002FA0
.text$mn:00002FA0 loc_2FA0:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+47Dj
.text$mn:00002FA0                 mov     eax, [ebp+arg_4]
.text$mn:00002FA3                 movzx   ecx, byte ptr [eax+23h]
.text$mn:00002FA7                 test    ecx, ecx
.text$mn:00002FA9                 jnz     short loc_2FB0
.text$mn:00002FAB                 jmp     loc_3092
.text$mn:00002FB0 ; ---------------------------------------------------------------------------
.text$mn:00002FB0
.text$mn:00002FB0 loc_2FB0:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+4A1j
.text$mn:00002FB0                 mov     [ebp+var_109], 7Bh ; '{'
.text$mn:00002FB7
.text$mn:00002FB7 loc_2FB7:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+477j
.text$mn:00002FB7                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+496j
.text$mn:00002FB7                 mov     edx, [ebp+var_110]
.text$mn:00002FBD                 push    edx             ; int
.text$mn:00002FBE                 movzx   eax, byte ptr [ebp+arg_0]
.text$mn:00002FC2                 push    eax             ; char
.text$mn:00002FC3                 movzx   ecx, [ebp+var_109]
.text$mn:00002FCA                 push    ecx             ; char
.text$mn:00002FCB                 mov     ecx, [ebp+var_108]
.text$mn:00002FD1                 add     ecx, 14h        ; this
.text$mn:00002FD4                 call    ?search@InsertedMatchedChars@@QAEHDDH@Z ; InsertedMatchedChars::search(char,char,int)
.text$mn:00002FD9                 mov     [ebp+var_124], eax
.text$mn:00002FDF                 cmp     [ebp+var_124], 0FFFFFFFFh
.text$mn:00002FE6                 jz      short loc_3020
.text$mn:00002FE8                 push    1               ; __int32
.text$mn:00002FEA                 mov     edx, [ebp+var_124]
.text$mn:00002FF0                 push    edx             ; unsigned int
.text$mn:00002FF1                 push    0A55h           ; unsigned int
.text$mn:00002FF6                 mov     eax, [ebp+var_108]
.text$mn:00002FFC                 mov     ecx, [eax+4]    ; this
.text$mn:00002FFF                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00003004                 push    0               ; __int32
.text$mn:00003006                 mov     ecx, [ebp+var_124]
.text$mn:0000300C                 push    ecx             ; unsigned int
.text$mn:0000300D                 push    7E9h            ; unsigned int
.text$mn:00003012                 mov     edx, [ebp+var_108]
.text$mn:00003018                 mov     ecx, [edx+4]    ; this
.text$mn:0000301B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00003020
.text$mn:00003020 loc_3020:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+4DEj
.text$mn:00003020                 jmp     short loc_3092
.text$mn:00003022 ; ---------------------------------------------------------------------------
.text$mn:00003022
.text$mn:00003022 loc_3022:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+454j
.text$mn:00003022                 jmp     short loc_3068
.text$mn:00003024 ; ---------------------------------------------------------------------------
.text$mn:00003024
.text$mn:00003024 $LN3:                                   ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+152j
.text$mn:00003024                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165j
.text$mn:00003024                                         ; DATA XREF: ...
.text$mn:00003024                 mov     ecx, [ebp+var_108] ; jumptable 00002C6D default case
.text$mn:0000302A                 add     ecx, 14h        ; this
.text$mn:0000302D                 call    ?isEmpty@InsertedMatchedChars@@QBE_NXZ ; InsertedMatchedChars::isEmpty(void)
.text$mn:00003032                 movzx   eax, al
.text$mn:00003035                 test    eax, eax
.text$mn:00003037                 jnz     short loc_3068
.text$mn:00003039                 mov     ecx, [ebp+var_110]
.text$mn:0000303F                 sub     ecx, 1
.text$mn:00003042                 push    ecx             ; int
.text$mn:00003043                 movzx   edx, byte ptr [ebp+arg_0]
.text$mn:00003047                 push    edx             ; char
.text$mn:00003048                 lea     ecx, [ebp+var_15C] ; this
.text$mn:0000304E                 call    ??0MatchedCharInserted@@QAE@DH@Z ; MatchedCharInserted::MatchedCharInserted(char,int)
.text$mn:00003053                 mov     ecx, [eax+4]
.text$mn:00003056                 push    ecx
.text$mn:00003057                 mov     edx, [eax]
.text$mn:00003059                 push    edx
.text$mn:0000305A                 mov     ecx, [ebp+var_108]
.text$mn:00003060                 add     ecx, 14h
.text$mn:00003063                 call    ?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)
.text$mn:00003068
.text$mn:00003068 loc_3068:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2CB8j
.text$mn:00003068                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2D01j ...
.text$mn:00003068                 cmp     [ebp+var_114], 0
.text$mn:0000306F                 jz      short loc_3092
.text$mn:00003071                 mov     eax, [ebp+var_114]
.text$mn:00003077                 push    eax             ; __int32
.text$mn:00003078                 mov     ecx, [ebp+var_110]
.text$mn:0000307E                 push    ecx             ; unsigned int
.text$mn:0000307F                 push    7D3h            ; unsigned int
.text$mn:00003084                 mov     edx, [ebp+var_108]
.text$mn:0000308A                 mov     ecx, [edx+4]    ; this
.text$mn:0000308D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00003092
.text$mn:00003092 loc_3092:                               ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+F0j
.text$mn:00003092                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+2CEj ...
.text$mn:00003092                 mov     ecx, [ebp+var_4]
.text$mn:00003095                 xor     ecx, ebp
.text$mn:00003097                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000309C                 mov     esp, ebp
.text$mn:0000309E                 pop     ebp
.text$mn:0000309F                 retn    8
.text$mn:0000309F ?insertMatchedChars@AutoCompletion@@QAEXHABUMatchedPairConf@@@Z endp
.text$mn:0000309F
.text$mn:0000309F ; ---------------------------------------------------------------------------
.text$mn:000030A2                 align 4
.text$mn:000030A4 $LN43           dd offset $LN25, offset $LN21, offset $LN31, offset $LN13
.text$mn:000030A4                                         ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+165r
.text$mn:000030A4                 dd offset $LN17_1, offset $LN29, offset $LN27, offset $LN3 ; jump table for switch statement
.text$mn:000030C4 $LN42           db      0,     7,     7,     7
.text$mn:000030C4                                         ; DATA XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+15Er
.text$mn:000030C4                 db      7,     1,     2,     3 ; indirect table for switch statement
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      4,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     5,     7,     3
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     7,     7,     7
.text$mn:000030C4                 db      7,     6,     7,     3
.text$mn:00003120                 db 8 dup(0CCh)
.text$mn:00003128
.text$mn:00003128 ; =============== S U B R O U T I N E =======================================
.text$mn:00003128
.text$mn:00003128 ; Attributes: bp-based frame
.text$mn:00003128
.text$mn:00003128 ; void __thiscall AutoCompletion::update(AutoCompletion *this, int)
.text$mn:00003128                 public ?update@AutoCompletion@@QAEXH@Z
.text$mn:00003128 ?update@AutoCompletion@@QAEXH@Z proc near
.text$mn:00003128
.text$mn:00003128 var_90          = dword ptr -90h
.text$mn:00003128 var_8C          = dword ptr -8Ch
.text$mn:00003128 var_88          = dword ptr -88h
.text$mn:00003128 String          = word ptr -84h
.text$mn:00003128 var_4           = dword ptr -4
.text$mn:00003128 arg_0           = dword ptr  8
.text$mn:00003128
.text$mn:00003128                 push    ebp
.text$mn:00003129                 mov     ebp, esp
.text$mn:0000312B                 sub     esp, 90h
.text$mn:00003131                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003136                 xor     eax, ebp
.text$mn:00003138                 mov     [ebp+var_4], eax
.text$mn:0000313B                 mov     [ebp+var_88], ecx
.text$mn:00003141                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00003146                 mov     ecx, eax        ; this
.text$mn:00003148                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:0000314D                 mov     [ebp+var_8C], eax
.text$mn:00003153                 mov     eax, [ebp+var_88]
.text$mn:00003159                 movzx   ecx, byte ptr [eax]
.text$mn:0000315C                 test    ecx, ecx
.text$mn:0000315E                 jnz     short loc_3174
.text$mn:00003160                 mov     edx, [ebp+var_8C]
.text$mn:00003166                 cmp     dword ptr [edx+1ECh], 1
.text$mn:0000316D                 jnz     short loc_3174
.text$mn:0000316F                 jmp     loc_3275
.text$mn:00003174 ; ---------------------------------------------------------------------------
.text$mn:00003174
.text$mn:00003174 loc_3174:                               ; CODE XREF: AutoCompletion::update(int)+36j
.text$mn:00003174                                         ; AutoCompletion::update(int)+45j
.text$mn:00003174                 mov     eax, [ebp+var_8C]
.text$mn:0000317A                 movzx   ecx, byte ptr [eax+1F4h]
.text$mn:00003181                 test    ecx, ecx
.text$mn:00003183                 jnz     short loc_319A
.text$mn:00003185                 mov     ecx, [ebp+var_88]
.text$mn:0000318B                 add     ecx, 5Ch ; '\'  ; this
.text$mn:0000318E                 call    ?isVisible@FunctionCallTip@@QAE_NXZ ; FunctionCallTip::isVisible(void)
.text$mn:00003193                 movzx   edx, al
.text$mn:00003196                 test    edx, edx
.text$mn:00003198                 jz      short loc_31BA
.text$mn:0000319A
.text$mn:0000319A loc_319A:                               ; CODE XREF: AutoCompletion::update(int)+5Bj
.text$mn:0000319A                 push    0               ; bool
.text$mn:0000319C                 mov     eax, [ebp+arg_0]
.text$mn:0000319F                 push    eax             ; int
.text$mn:000031A0                 mov     ecx, [ebp+var_88]
.text$mn:000031A6                 add     ecx, 5Ch ; '\'  ; this
.text$mn:000031A9                 call    ?updateCalltip@FunctionCallTip@@QAE_NH_N@Z ; FunctionCallTip::updateCalltip(int,bool)
.text$mn:000031AE                 movzx   ecx, al
.text$mn:000031B1                 test    ecx, ecx
.text$mn:000031B3                 jz      short loc_31BA
.text$mn:000031B5                 jmp     loc_3275
.text$mn:000031BA ; ---------------------------------------------------------------------------
.text$mn:000031BA
.text$mn:000031BA loc_31BA:                               ; CODE XREF: AutoCompletion::update(int)+70j
.text$mn:000031BA                                         ; AutoCompletion::update(int)+8Bj
.text$mn:000031BA                 cmp     [ebp+arg_0], 0
.text$mn:000031BE                 jnz     short loc_31C5
.text$mn:000031C0                 jmp     loc_3275
.text$mn:000031C5 ; ---------------------------------------------------------------------------
.text$mn:000031C5
.text$mn:000031C5 loc_31C5:                               ; CODE XREF: AutoCompletion::update(int)+96j
.text$mn:000031C5                 push    0               ; __int32
.text$mn:000031C7                 push    0               ; unsigned int
.text$mn:000031C9                 push    836h            ; unsigned int
.text$mn:000031CE                 mov     edx, [ebp+var_88]
.text$mn:000031D4                 mov     ecx, [edx+4]    ; this
.text$mn:000031D7                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000031DC                 test    eax, eax
.text$mn:000031DE                 jz      short loc_31E5
.text$mn:000031E0                 jmp     loc_3275
.text$mn:000031E5 ; ---------------------------------------------------------------------------
.text$mn:000031E5
.text$mn:000031E5 loc_31E5:                               ; CODE XREF: AutoCompletion::update(int)+B6j
.text$mn:000031E5                 mov     [ebp+var_90], 40h ; '@'
.text$mn:000031EF                 push    40h ; '@'       ; int
.text$mn:000031F1                 lea     eax, [ebp+String]
.text$mn:000031F7                 push    eax             ; wchar_t *
.text$mn:000031F8                 mov     ecx, [ebp+var_88]
.text$mn:000031FE                 mov     ecx, [ecx+4]    ; this
.text$mn:00003201                 call    ?getWordToCurrentPos@ScintillaEditView@@QBEXPA_WH@Z ; ScintillaEditView::getWordToCurrentPos(wchar_t *,int)
.text$mn:00003206                 lea     edx, [ebp+String]
.text$mn:0000320C                 push    edx             ; lpString
.text$mn:0000320D                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00003213                 mov     ecx, [ebp+var_8C]
.text$mn:00003219                 cmp     eax, [ecx+1F0h]
.text$mn:0000321F                 jl      short loc_3275
.text$mn:00003221                 mov     edx, [ebp+var_8C]
.text$mn:00003227                 cmp     dword ptr [edx+1ECh], 2
.text$mn:0000322E                 jnz     short loc_323F
.text$mn:00003230                 push    0               ; bool
.text$mn:00003232                 mov     ecx, [ebp+var_88] ; this
.text$mn:00003238                 call    ?showWordComplete@AutoCompletion@@QAE_N_N@Z ; AutoCompletion::showWordComplete(bool)
.text$mn:0000323D                 jmp     short loc_3275
.text$mn:0000323F ; ---------------------------------------------------------------------------
.text$mn:0000323F
.text$mn:0000323F loc_323F:                               ; CODE XREF: AutoCompletion::update(int)+106j
.text$mn:0000323F                 mov     eax, [ebp+var_8C]
.text$mn:00003245                 cmp     dword ptr [eax+1ECh], 1
.text$mn:0000324C                 jnz     short loc_325B
.text$mn:0000324E                 mov     ecx, [ebp+var_88] ; this
.text$mn:00003254                 call    ?showApiComplete@AutoCompletion@@QAE_NXZ ; AutoCompletion::showApiComplete(void)
.text$mn:00003259                 jmp     short loc_3275
.text$mn:0000325B ; ---------------------------------------------------------------------------
.text$mn:0000325B
.text$mn:0000325B loc_325B:                               ; CODE XREF: AutoCompletion::update(int)+124j
.text$mn:0000325B                 mov     ecx, [ebp+var_8C]
.text$mn:00003261                 cmp     dword ptr [ecx+1ECh], 3
.text$mn:00003268                 jnz     short loc_3275
.text$mn:0000326A                 mov     ecx, [ebp+var_88] ; this
.text$mn:00003270                 call    ?showApiAndWordComplete@AutoCompletion@@QAE_NXZ ; AutoCompletion::showApiAndWordComplete(void)
.text$mn:00003275
.text$mn:00003275 loc_3275:                               ; CODE XREF: AutoCompletion::update(int)+47j
.text$mn:00003275                                         ; AutoCompletion::update(int)+8Dj ...
.text$mn:00003275                 mov     ecx, [ebp+var_4]
.text$mn:00003278                 xor     ecx, ebp
.text$mn:0000327A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000327F                 mov     esp, ebp
.text$mn:00003281                 pop     ebp
.text$mn:00003282                 retn    4
.text$mn:00003282 ?update@AutoCompletion@@QAEXH@Z endp
.text$mn:00003282
.text$mn:00003282 ; ---------------------------------------------------------------------------
.text$mn:00003285                 align 4
.text$mn:00003288
.text$mn:00003288 ; =============== S U B R O U T I N E =======================================
.text$mn:00003288
.text$mn:00003288 ; Attributes: bp-based frame
.text$mn:00003288
.text$mn:00003288 ; void __thiscall AutoCompletion::callTipClick(AutoCompletion *this, int)
.text$mn:00003288                 public ?callTipClick@AutoCompletion@@QAEXH@Z
.text$mn:00003288 ?callTipClick@AutoCompletion@@QAEXH@Z proc near
.text$mn:00003288
.text$mn:00003288 var_4           = dword ptr -4
.text$mn:00003288 arg_0           = dword ptr  8
.text$mn:00003288
.text$mn:00003288                 push    ebp
.text$mn:00003289                 mov     ebp, esp
.text$mn:0000328B                 push    ecx
.text$mn:0000328C                 mov     [ebp+var_4], ecx
.text$mn:0000328F                 mov     eax, [ebp+var_4]
.text$mn:00003292                 movzx   ecx, byte ptr [eax]
.text$mn:00003295                 test    ecx, ecx
.text$mn:00003297                 jnz     short loc_329B
.text$mn:00003299                 jmp     short loc_32BF
.text$mn:0000329B ; ---------------------------------------------------------------------------
.text$mn:0000329B
.text$mn:0000329B loc_329B:                               ; CODE XREF: AutoCompletion::callTipClick(int)+Fj
.text$mn:0000329B                 cmp     [ebp+arg_0], 1
.text$mn:0000329F                 jnz     short loc_32AE
.text$mn:000032A1                 mov     ecx, [ebp+var_4]
.text$mn:000032A4                 add     ecx, 5Ch ; '\'  ; this
.text$mn:000032A7                 call    ?showPrevOverload@FunctionCallTip@@QAEXXZ ; FunctionCallTip::showPrevOverload(void)
.text$mn:000032AC                 jmp     short loc_32BF
.text$mn:000032AE ; ---------------------------------------------------------------------------
.text$mn:000032AE
.text$mn:000032AE loc_32AE:                               ; CODE XREF: AutoCompletion::callTipClick(int)+17j
.text$mn:000032AE                 cmp     [ebp+arg_0], 2
.text$mn:000032B2                 jnz     short loc_32BF
.text$mn:000032B4                 mov     ecx, [ebp+var_4]
.text$mn:000032B7                 add     ecx, 5Ch ; '\'  ; this
.text$mn:000032BA                 call    ?showNextOverload@FunctionCallTip@@QAEXXZ ; FunctionCallTip::showNextOverload(void)
.text$mn:000032BF
.text$mn:000032BF loc_32BF:                               ; CODE XREF: AutoCompletion::callTipClick(int)+11j
.text$mn:000032BF                                         ; AutoCompletion::callTipClick(int)+24j ...
.text$mn:000032BF                 mov     esp, ebp
.text$mn:000032C1                 pop     ebp
.text$mn:000032C2                 retn    4
.text$mn:000032C2 ?callTipClick@AutoCompletion@@QAEXH@Z endp
.text$mn:000032C2
.text$mn:000032C2 ; ---------------------------------------------------------------------------
.text$mn:000032C5                 align 4
.text$mn:000032C8
.text$mn:000032C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000032C8
.text$mn:000032C8 ; Attributes: bp-based frame
.text$mn:000032C8
.text$mn:000032C8 ; void __thiscall AutoCompletion::getCloseTag(AutoCompletion *this, char *, unsigned int, unsigned int)
.text$mn:000032C8                 public ?getCloseTag@AutoCompletion@@QAEXPADII@Z
.text$mn:000032C8 ?getCloseTag@AutoCompletion@@QAEXPADII@Z proc near
.text$mn:000032C8                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+417p
.text$mn:000032C8
.text$mn:000032C8 var_34          = dword ptr -34h
.text$mn:000032C8 var_30          = byte ptr -30h
.text$mn:000032C8 var_2C          = dword ptr -2Ch
.text$mn:000032C8 var_28          = byte ptr -28h
.text$mn:000032C8 var_24          = dword ptr -24h
.text$mn:000032C8 var_20          = dword ptr -20h
.text$mn:000032C8 var_1C          = dword ptr -1Ch
.text$mn:000032C8 String          = word ptr -18h
.text$mn:000032C8 var_14          = dword ptr -14h
.text$mn:000032C8 var_10          = dword ptr -10h
.text$mn:000032C8 var_C           = dword ptr -0Ch
.text$mn:000032C8 var_8           = word ptr -8
.text$mn:000032C8 var_4           = dword ptr -4
.text$mn:000032C8 arg_0           = dword ptr  8
.text$mn:000032C8 arg_4           = dword ptr  0Ch
.text$mn:000032C8 arg_8           = dword ptr  10h
.text$mn:000032C8
.text$mn:000032C8                 push    ebp
.text$mn:000032C9                 mov     ebp, esp
.text$mn:000032CB                 sub     esp, 34h
.text$mn:000032CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000032D3                 xor     eax, ebp
.text$mn:000032D5                 mov     [ebp+var_4], eax
.text$mn:000032D8                 mov     [ebp+var_1C], ecx
.text$mn:000032DB                 mov     [ebp+var_34], 600000h
.text$mn:000032E2                 push    0               ; __int32
.text$mn:000032E4                 mov     eax, [ebp+var_34]
.text$mn:000032E7                 push    eax             ; unsigned int
.text$mn:000032E8                 push    896h            ; unsigned int
.text$mn:000032ED                 mov     ecx, [ebp+var_1C]
.text$mn:000032F0                 mov     ecx, [ecx+4]    ; this
.text$mn:000032F3                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000032F8                 mov     edx, $SG158598
.text$mn:000032FE                 mov     dword ptr [ebp+String], edx
.text$mn:00003301                 mov     eax, dword_C1C
.text$mn:00003306                 mov     [ebp+var_14], eax
.text$mn:00003309                 mov     ecx, dword_C20
.text$mn:0000330F                 mov     [ebp+var_10], ecx
.text$mn:00003312                 mov     edx, dword_C24
.text$mn:00003318                 mov     [ebp+var_C], edx
.text$mn:0000331B                 mov     ax, word_C28
.text$mn:00003321                 mov     [ebp+var_8], ax
.text$mn:00003325                 push    0               ; int
.text$mn:00003327                 mov     ecx, [ebp+arg_8]
.text$mn:0000332A                 push    ecx             ; int
.text$mn:0000332B                 lea     edx, [ebp+String]
.text$mn:0000332E                 push    edx             ; lpString
.text$mn:0000332F                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00003335                 push    eax             ; int
.text$mn:00003336                 lea     eax, [ebp+String]
.text$mn:00003339                 push    eax             ; wchar_t *
.text$mn:0000333A                 mov     ecx, [ebp+var_1C]
.text$mn:0000333D                 mov     ecx, [ecx+4]    ; this
.text$mn:00003340                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00003345                 mov     [ebp+var_20], eax
.text$mn:00003348                 cmp     [ebp+var_20], 0FFFFFFFFh
.text$mn:0000334C                 jz      short loc_3354
.text$mn:0000334E                 cmp     [ebp+var_20], 0FFFFFFFEh
.text$mn:00003352                 jnz     short loc_3359
.text$mn:00003354
.text$mn:00003354 loc_3354:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+84j
.text$mn:00003354                 jmp     loc_3445
.text$mn:00003359 ; ---------------------------------------------------------------------------
.text$mn:00003359
.text$mn:00003359 loc_3359:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+8Aj
.text$mn:00003359                 push    0               ; __int32
.text$mn:0000335B                 push    0               ; unsigned int
.text$mn:0000335D                 push    891h            ; unsigned int
.text$mn:00003362                 mov     edx, [ebp+var_1C]
.text$mn:00003365                 mov     ecx, [edx+4]    ; this
.text$mn:00003368                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000336D                 mov     [ebp+var_2C], eax
.text$mn:00003370                 mov     eax, [ebp+var_2C]
.text$mn:00003373                 sub     eax, [ebp+var_20]
.text$mn:00003376                 mov     [ebp+var_24], eax
.text$mn:00003379                 cmp     [ebp+var_24], 2
.text$mn:0000337D                 jge     short loc_3384
.text$mn:0000337F                 jmp     loc_3445
.text$mn:00003384 ; ---------------------------------------------------------------------------
.text$mn:00003384
.text$mn:00003384 loc_3384:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+B5j
.text$mn:00003384                 mov     ecx, [ebp+arg_4]
.text$mn:00003387                 sub     ecx, 2
.text$mn:0000338A                 cmp     [ebp+var_24], ecx
.text$mn:0000338D                 jbe     short loc_3394
.text$mn:0000338F                 jmp     loc_3445
.text$mn:00003394 ; ---------------------------------------------------------------------------
.text$mn:00003394
.text$mn:00003394 loc_3394:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+C5j
.text$mn:00003394                 mov     edx, [ebp+var_20]
.text$mn:00003397                 add     edx, 2
.text$mn:0000339A                 push    edx             ; int
.text$mn:0000339B                 mov     eax, [ebp+var_20]
.text$mn:0000339E                 push    eax             ; int
.text$mn:0000339F                 lea     ecx, [ebp+var_30]
.text$mn:000033A2                 push    ecx             ; char *
.text$mn:000033A3                 mov     edx, [ebp+var_1C]
.text$mn:000033A6                 mov     ecx, [edx+4]    ; this
.text$mn:000033A9                 call    ?getText@ScintillaEditView@@QBEXPADHH@Z ; ScintillaEditView::getText(char *,int,int)
.text$mn:000033AE                 mov     eax, 1
.text$mn:000033B3                 shl     eax, 0
.text$mn:000033B6                 movsx   ecx, [ebp+eax+var_30]
.text$mn:000033BB                 cmp     ecx, 2Fh ; '/'
.text$mn:000033BE                 jnz     short loc_33C5
.text$mn:000033C0                 jmp     loc_3445
.text$mn:000033C5 ; ---------------------------------------------------------------------------
.text$mn:000033C5
.text$mn:000033C5 loc_33C5:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+F6j
.text$mn:000033C5                 mov     edx, [ebp+arg_8]
.text$mn:000033C8                 sub     edx, 1
.text$mn:000033CB                 push    edx             ; int
.text$mn:000033CC                 mov     eax, [ebp+arg_8]
.text$mn:000033CF                 sub     eax, 2
.text$mn:000033D2                 push    eax             ; int
.text$mn:000033D3                 lea     ecx, [ebp+var_28]
.text$mn:000033D6                 push    ecx             ; char *
.text$mn:000033D7                 mov     edx, [ebp+var_1C]
.text$mn:000033DA                 mov     ecx, [edx+4]    ; this
.text$mn:000033DD                 call    ?getText@ScintillaEditView@@QBEXPADHH@Z ; ScintillaEditView::getText(char *,int,int)
.text$mn:000033E2                 mov     eax, 1
.text$mn:000033E7                 imul    ecx, eax, 0
.text$mn:000033EA                 movsx   edx, [ebp+ecx+var_28]
.text$mn:000033EF                 cmp     edx, 2Fh ; '/'
.text$mn:000033F2                 jnz     short loc_33F6
.text$mn:000033F4                 jmp     short loc_3445
.text$mn:000033F6 ; ---------------------------------------------------------------------------
.text$mn:000033F6
.text$mn:000033F6 loc_33F6:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+12Aj
.text$mn:000033F6                 mov     eax, 1
.text$mn:000033FB                 imul    ecx, eax, 0
.text$mn:000033FE                 mov     edx, [ebp+arg_0]
.text$mn:00003401                 mov     byte ptr [edx+ecx], 3Ch ; '<'
.text$mn:00003405                 mov     eax, 1
.text$mn:0000340A                 shl     eax, 0
.text$mn:0000340D                 mov     ecx, [ebp+arg_0]
.text$mn:00003410                 mov     byte ptr [ecx+eax], 2Fh ; '/'
.text$mn:00003414                 mov     edx, [ebp+var_2C]
.text$mn:00003417                 push    edx             ; int
.text$mn:00003418                 mov     eax, [ebp+var_20]
.text$mn:0000341B                 add     eax, 1
.text$mn:0000341E                 push    eax             ; int
.text$mn:0000341F                 mov     ecx, [ebp+arg_0]
.text$mn:00003422                 add     ecx, 2
.text$mn:00003425                 push    ecx             ; char *
.text$mn:00003426                 mov     edx, [ebp+var_1C]
.text$mn:00003429                 mov     ecx, [edx+4]    ; this
.text$mn:0000342C                 call    ?getText@ScintillaEditView@@QBEXPADHH@Z ; ScintillaEditView::getText(char *,int,int)
.text$mn:00003431                 mov     eax, [ebp+arg_0]
.text$mn:00003434                 add     eax, [ebp+var_24]
.text$mn:00003437                 mov     byte ptr [eax+1], 3Eh ; '>'
.text$mn:0000343B                 mov     ecx, [ebp+arg_0]
.text$mn:0000343E                 add     ecx, [ebp+var_24]
.text$mn:00003441                 mov     byte ptr [ecx+2], 0
.text$mn:00003445
.text$mn:00003445 loc_3445:                               ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint):loc_3354j
.text$mn:00003445                                         ; AutoCompletion::getCloseTag(char *,uint,uint)+B7j ...
.text$mn:00003445                 mov     ecx, [ebp+var_4]
.text$mn:00003448                 xor     ecx, ebp
.text$mn:0000344A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000344F                 mov     esp, ebp
.text$mn:00003451                 pop     ebp
.text$mn:00003452                 retn    0Ch
.text$mn:00003452 ?getCloseTag@AutoCompletion@@QAEXPADII@Z endp
.text$mn:00003452
.text$mn:00003452 ; ---------------------------------------------------------------------------
.text$mn:00003455                 align 4
.text$mn:00003458
.text$mn:00003458 ; =============== S U B R O U T I N E =======================================
.text$mn:00003458
.text$mn:00003458 ; Attributes: bp-based frame
.text$mn:00003458
.text$mn:00003458 ; const wchar_t *__thiscall AutoCompletion::getApiFileName(AutoCompletion *__hidden this)
.text$mn:00003458                 public ?getApiFileName@AutoCompletion@@AAEPB_WXZ
.text$mn:00003458 ?getApiFileName@AutoCompletion@@AAEPB_WXZ proc near
.text$mn:00003458                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+8Bp
.text$mn:00003458
.text$mn:00003458 var_8           = dword ptr -8
.text$mn:00003458 var_4           = dword ptr -4
.text$mn:00003458
.text$mn:00003458                 push    ebp
.text$mn:00003459                 mov     ebp, esp
.text$mn:0000345B                 sub     esp, 8
.text$mn:0000345E                 mov     [ebp+var_4], ecx
.text$mn:00003461                 mov     eax, [ebp+var_4]
.text$mn:00003464                 cmp     dword ptr [eax+8], 0Fh
.text$mn:00003468                 jnz     short loc_3491
.text$mn:0000346A                 mov     ecx, [ebp+var_4]
.text$mn:0000346D                 mov     ecx, [ecx+4]    ; this
.text$mn:00003470                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:00003475                 mov     [ebp+var_8], eax
.text$mn:00003478                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000347B                 call    ?isUserDefineLangExt@Buffer@@QBE_NXZ ; Buffer::isUserDefineLangExt(void)
.text$mn:00003480                 movzx   edx, al
.text$mn:00003483                 test    edx, edx
.text$mn:00003485                 jz      short loc_3491
.text$mn:00003487                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000348A                 call    ?getUserDefineLangName@Buffer@@QBEPB_WXZ ; Buffer::getUserDefineLangName(void)
.text$mn:0000348F                 jmp     short loc_34E2
.text$mn:00003491 ; ---------------------------------------------------------------------------
.text$mn:00003491
.text$mn:00003491 loc_3491:                               ; CODE XREF: AutoCompletion::getApiFileName(void)+10j
.text$mn:00003491                                         ; AutoCompletion::getApiFileName(void)+2Dj
.text$mn:00003491                 mov     eax, [ebp+var_4]
.text$mn:00003494                 cmp     dword ptr [eax+8], 39h ; '9'
.text$mn:00003498                 jl      short loc_34C2
.text$mn:0000349A                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:0000349F                 mov     ecx, [ebp+var_4]
.text$mn:000034A2                 mov     edx, [ecx+8]
.text$mn:000034A5                 cmp     edx, [eax+4]
.text$mn:000034A8                 jge     short loc_34C2
.text$mn:000034AA                 mov     eax, [ebp+var_4]
.text$mn:000034AD                 mov     ecx, [eax+8]
.text$mn:000034B0                 sub     ecx, 39h ; '9'
.text$mn:000034B3                 push    ecx             ; int
.text$mn:000034B4                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000034B9                 mov     ecx, eax        ; this
.text$mn:000034BB                 call    ?getELCFromIndex@NppParameters@@QAEAAVExternalLangContainer@@H@Z ; NppParameters::getELCFromIndex(int)
.text$mn:000034C0                 jmp     short loc_34E2
.text$mn:000034C2 ; ---------------------------------------------------------------------------
.text$mn:000034C2
.text$mn:000034C2 loc_34C2:                               ; CODE XREF: AutoCompletion::getApiFileName(void)+40j
.text$mn:000034C2                                         ; AutoCompletion::getApiFileName(void)+50j
.text$mn:000034C2                 mov     edx, [ebp+var_4]
.text$mn:000034C5                 cmp     dword ptr [edx+8], 39h ; '9'
.text$mn:000034C9                 jle     short loc_34D5
.text$mn:000034CB                 mov     eax, [ebp+var_4]
.text$mn:000034CE                 mov     dword ptr [eax+8], 0
.text$mn:000034D5
.text$mn:000034D5 loc_34D5:                               ; CODE XREF: AutoCompletion::getApiFileName(void)+71j
.text$mn:000034D5                 mov     ecx, [ebp+var_4]
.text$mn:000034D8                 imul    edx, [ecx+8], 14h
.text$mn:000034DC                 mov     eax, dword ptr ds:?langNames@ScintillaEditView@@2PAULanguageName@@A[edx] ; LanguageName * ScintillaEditView::langNames
.text$mn:000034E2
.text$mn:000034E2 loc_34E2:                               ; CODE XREF: AutoCompletion::getApiFileName(void)+37j
.text$mn:000034E2                                         ; AutoCompletion::getApiFileName(void)+68j
.text$mn:000034E2                 mov     esp, ebp
.text$mn:000034E4                 pop     ebp
.text$mn:000034E5                 retn
.text$mn:000034E5 ?getApiFileName@AutoCompletion@@AAEPB_WXZ endp
.text$mn:000034E5
.text$mn:000034E5 ; ---------------------------------------------------------------------------
.text$mn:000034E6                 align 4
.text$mn:000034E8
.text$mn:000034E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000034E8
.text$mn:000034E8 ; Attributes: bp-based frame
.text$mn:000034E8
.text$mn:000034E8 ; int __stdcall AutoCompletion::getWordArray(int, LPCWSTR lpString2)
.text$mn:000034E8                 public ?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z
.text$mn:000034E8 ?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z proc near
.text$mn:000034E8                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+130p
.text$mn:000034E8                                         ; AutoCompletion::showApiAndWordComplete(void)+130p
.text$mn:000034E8
.text$mn:000034E8 var_278         = dword ptr -278h
.text$mn:000034E8 var_274         = dword ptr -274h
.text$mn:000034E8 var_270         = dword ptr -270h
.text$mn:000034E8 var_26C         = dword ptr -26Ch
.text$mn:000034E8 var_268         = dword ptr -268h
.text$mn:000034E8 var_264         = dword ptr -264h
.text$mn:000034E8 var_260         = dword ptr -260h
.text$mn:000034E8 var_25C         = dword ptr -25Ch
.text$mn:000034E8 var_258         = dword ptr -258h
.text$mn:000034E8 var_254         = dword ptr -254h
.text$mn:000034E8 var_24D         = byte ptr -24Dh
.text$mn:000034E8 var_24C         = dword ptr -24Ch
.text$mn:000034E8 var_248         = byte ptr -248h
.text$mn:000034E8 var_22C         = byte ptr -22Ch
.text$mn:000034E8 String1         = word ptr -210h
.text$mn:000034E8 var_10          = dword ptr -10h
.text$mn:000034E8 var_C           = dword ptr -0Ch
.text$mn:000034E8 var_4           = dword ptr -4
.text$mn:000034E8 arg_0           = dword ptr  8
.text$mn:000034E8 lpString2       = dword ptr  0Ch
.text$mn:000034E8
.text$mn:000034E8                 push    ebp
.text$mn:000034E9                 mov     ebp, esp
.text$mn:000034EB                 push    0FFFFFFFFh
.text$mn:000034ED                 push    offset __ehhandler$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z
.text$mn:000034F2                 mov     eax, large fs:0
.text$mn:000034F8                 push    eax
.text$mn:000034F9                 sub     esp, 26Ch
.text$mn:000034FF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003504                 xor     eax, ebp
.text$mn:00003506                 mov     [ebp+var_10], eax
.text$mn:00003509                 push    eax
.text$mn:0000350A                 lea     eax, [ebp+var_C]
.text$mn:0000350D                 mov     large fs:0, eax
.text$mn:00003513                 mov     [ebp+var_24C], ecx
.text$mn:00003519                 mov     [ebp+var_278], 100h
.text$mn:00003523                 push    offset $SG158344 ; "\\<"
.text$mn:00003528                 lea     ecx, [ebp+var_22C]
.text$mn:0000352E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003533                 mov     [ebp+var_4], 0
.text$mn:0000353A                 mov     eax, [ebp+lpString2]
.text$mn:0000353D                 push    eax             ; Str
.text$mn:0000353E                 lea     ecx, [ebp+var_22C]
.text$mn:00003544                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00003549                 push    offset $SG158345 ; "[^ \\t\\n\\r.,;:\"()=<>'+!\\[\\]]*"
.text$mn:0000354E                 lea     ecx, [ebp+var_22C]
.text$mn:00003554                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00003559                 push    0               ; __int32
.text$mn:0000355B                 push    0               ; unsigned int
.text$mn:0000355D                 push    7D6h            ; unsigned int
.text$mn:00003562                 mov     ecx, [ebp+var_24C]
.text$mn:00003568                 mov     ecx, [ecx+4]    ; this
.text$mn:0000356B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00003570                 mov     [ebp+var_260], eax
.text$mn:00003576                 mov     [ebp+var_268], 700004h
.text$mn:00003580                 push    0               ; __int32
.text$mn:00003582                 mov     edx, [ebp+var_268]
.text$mn:00003588                 push    edx             ; unsigned int
.text$mn:00003589                 push    896h            ; unsigned int
.text$mn:0000358E                 mov     eax, [ebp+var_24C]
.text$mn:00003594                 mov     ecx, [eax+4]    ; this
.text$mn:00003597                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000359C                 mov     ecx, [ebp+var_260]
.text$mn:000035A2                 push    ecx             ; int
.text$mn:000035A3                 push    0               ; int
.text$mn:000035A5                 lea     ecx, [ebp+var_22C]
.text$mn:000035AB                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000035B0                 push    eax             ; int
.text$mn:000035B1                 lea     ecx, [ebp+var_22C]
.text$mn:000035B7                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000035BC                 push    eax             ; wchar_t *
.text$mn:000035BD                 mov     edx, [ebp+var_24C]
.text$mn:000035C3                 mov     ecx, [edx+4]    ; this
.text$mn:000035C6                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:000035CB                 mov     [ebp+var_254], eax
.text$mn:000035D1
.text$mn:000035D1 loc_35D1:                               ; CODE XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+25Cj
.text$mn:000035D1                 cmp     [ebp+var_254], 0FFFFFFFFh
.text$mn:000035D8                 jz      loc_3749
.text$mn:000035DE                 cmp     [ebp+var_254], 0FFFFFFFEh
.text$mn:000035E5                 jz      loc_3749
.text$mn:000035EB                 push    0               ; __int32
.text$mn:000035ED                 push    0               ; unsigned int
.text$mn:000035EF                 push    88Fh            ; unsigned int
.text$mn:000035F4                 mov     eax, [ebp+var_24C]
.text$mn:000035FA                 mov     ecx, [eax+4]    ; this
.text$mn:000035FD                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00003602                 mov     [ebp+var_25C], eax
.text$mn:00003608                 push    0               ; __int32
.text$mn:0000360A                 push    0               ; unsigned int
.text$mn:0000360C                 push    891h            ; unsigned int
.text$mn:00003611                 mov     ecx, [ebp+var_24C]
.text$mn:00003617                 mov     ecx, [ecx+4]    ; this
.text$mn:0000361A                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000361F                 mov     [ebp+var_258], eax
.text$mn:00003625                 mov     edx, [ebp+var_258]
.text$mn:0000362B                 sub     edx, [ebp+var_25C]
.text$mn:00003631                 mov     [ebp+var_264], edx
.text$mn:00003637                 cmp     [ebp+var_264], 100h
.text$mn:00003641                 jnb     loc_370A
.text$mn:00003647                 mov     eax, [ebp+var_258]
.text$mn:0000364D                 push    eax             ; int
.text$mn:0000364E                 mov     ecx, [ebp+var_25C]
.text$mn:00003654                 push    ecx             ; int
.text$mn:00003655                 push    100h            ; unsigned int
.text$mn:0000365A                 lea     edx, [ebp+String1]
.text$mn:00003660                 push    edx             ; wchar_t *
.text$mn:00003661                 mov     eax, [ebp+var_24C]
.text$mn:00003667                 mov     ecx, [eax+4]    ; this
.text$mn:0000366A                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:0000366F                 mov     ecx, [ebp+lpString2]
.text$mn:00003672                 push    ecx             ; lpString2
.text$mn:00003673                 lea     edx, [ebp+String1]
.text$mn:00003679                 push    edx             ; lpString1
.text$mn:0000367A                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00003680                 test    eax, eax
.text$mn:00003682                 jz      loc_370A
.text$mn:00003688                 mov     eax, [ebp+arg_0]
.text$mn:0000368B                 push    eax
.text$mn:0000368C                 sub     esp, 1Ch
.text$mn:0000368F                 mov     ecx, esp
.text$mn:00003691                 mov     [ebp+var_270], esp
.text$mn:00003697                 lea     edx, [ebp+String1]
.text$mn:0000369D                 push    edx             ; Str
.text$mn:0000369E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000036A3                 mov     [ebp+var_26C], eax
.text$mn:000036A9                 mov     eax, [ebp+var_26C]
.text$mn:000036AF                 mov     [ebp+var_274], eax
.text$mn:000036B5                 mov     byte ptr [ebp+var_4], 1
.text$mn:000036B9                 mov     byte ptr [ebp+var_4], 0
.text$mn:000036BD                 call    ?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z ; isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:000036C2                 add     esp, 20h
.text$mn:000036C5                 mov     [ebp+var_24D], al
.text$mn:000036CB                 movzx   ecx, [ebp+var_24D]
.text$mn:000036D2                 test    ecx, ecx
.text$mn:000036D4                 jnz     short loc_370A
.text$mn:000036D6                 lea     edx, [ebp+String1]
.text$mn:000036DC                 push    edx             ; Str
.text$mn:000036DD                 lea     ecx, [ebp+var_248]
.text$mn:000036E3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000036E8                 mov     byte ptr [ebp+var_4], 2
.text$mn:000036EC                 lea     eax, [ebp+var_248]
.text$mn:000036F2                 push    eax
.text$mn:000036F3                 mov     ecx, [ebp+arg_0]
.text$mn:000036F6                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000036FB                 mov     byte ptr [ebp+var_4], 0
.text$mn:000036FF                 lea     ecx, [ebp+var_248]
.text$mn:00003705                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000370A
.text$mn:0000370A loc_370A:                               ; CODE XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+159j
.text$mn:0000370A                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+19Aj ...
.text$mn:0000370A                 mov     ecx, [ebp+var_260]
.text$mn:00003710                 push    ecx             ; int
.text$mn:00003711                 mov     edx, [ebp+var_258]
.text$mn:00003717                 push    edx             ; int
.text$mn:00003718                 lea     ecx, [ebp+var_22C]
.text$mn:0000371E                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00003723                 push    eax             ; int
.text$mn:00003724                 lea     ecx, [ebp+var_22C]
.text$mn:0000372A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000372F                 push    eax             ; wchar_t *
.text$mn:00003730                 mov     eax, [ebp+var_24C]
.text$mn:00003736                 mov     ecx, [eax+4]    ; this
.text$mn:00003739                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:0000373E                 mov     [ebp+var_254], eax
.text$mn:00003744                 jmp     loc_35D1
.text$mn:00003749 ; ---------------------------------------------------------------------------
.text$mn:00003749
.text$mn:00003749 loc_3749:                               ; CODE XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+F0j
.text$mn:00003749                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+FDj
.text$mn:00003749                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003750                 lea     ecx, [ebp+var_22C]
.text$mn:00003756                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000375B                 mov     ecx, [ebp+var_C]
.text$mn:0000375E                 mov     large fs:0, ecx
.text$mn:00003765                 pop     ecx
.text$mn:00003766                 mov     ecx, [ebp+var_10]
.text$mn:00003769                 xor     ecx, ebp
.text$mn:0000376B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003770                 mov     esp, ebp
.text$mn:00003772                 pop     ebp
.text$mn:00003773                 retn    8
.text$mn:00003773 ?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z endp
.text$mn:00003773
.text$mn:00003773 ; ---------------------------------------------------------------------------
.text$mn:00003776                 align 4
.text$mn:00003778
.text$mn:00003778 ; =============== S U B R O U T I N E =======================================
.text$mn:00003778
.text$mn:00003778 ; Attributes: bp-based frame
.text$mn:00003778
.text$mn:00003778 ; bool __cdecl isInList(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const &)
.text$mn:00003778 ?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z proc near
.text$mn:00003778                                         ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+1EAp
.text$mn:00003778                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+1D5p
.text$mn:00003778
.text$mn:00003778 var_18          = dword ptr -18h
.text$mn:00003778 var_14          = dword ptr -14h
.text$mn:00003778 var_E           = byte ptr -0Eh
.text$mn:00003778 var_D           = byte ptr -0Dh
.text$mn:00003778 var_C           = dword ptr -0Ch
.text$mn:00003778 var_4           = dword ptr -4
.text$mn:00003778 arg_0           = byte ptr  8
.text$mn:00003778 arg_1C          = dword ptr  24h
.text$mn:00003778
.text$mn:00003778                 push    ebp
.text$mn:00003779                 mov     ebp, esp
.text$mn:0000377B                 push    0FFFFFFFFh
.text$mn:0000377D                 push    offset __ehhandler$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z
.text$mn:00003782                 mov     eax, large fs:0
.text$mn:00003788                 push    eax
.text$mn:00003789                 sub     esp, 0Ch
.text$mn:0000378C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003791                 xor     eax, ebp
.text$mn:00003793                 push    eax
.text$mn:00003794                 lea     eax, [ebp+var_C]
.text$mn:00003797                 mov     large fs:0, eax
.text$mn:0000379D                 mov     [ebp+var_4], 0
.text$mn:000037A4                 mov     [ebp+var_14], 0
.text$mn:000037AB                 mov     ecx, [ebp+arg_1C]
.text$mn:000037AE                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000037B3                 mov     [ebp+var_18], eax
.text$mn:000037B6                 jmp     short loc_37C1
.text$mn:000037B8 ; ---------------------------------------------------------------------------
.text$mn:000037B8
.text$mn:000037B8 loc_37B8:                               ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &):loc_3801j
.text$mn:000037B8                 mov     eax, [ebp+var_14]
.text$mn:000037BB                 add     eax, 1
.text$mn:000037BE                 mov     [ebp+var_14], eax
.text$mn:000037C1
.text$mn:000037C1 loc_37C1:                               ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+3Ej
.text$mn:000037C1                 mov     ecx, [ebp+var_14]
.text$mn:000037C4                 cmp     ecx, [ebp+var_18]
.text$mn:000037C7                 jnb     short loc_3803
.text$mn:000037C9                 lea     edx, [ebp+arg_0]
.text$mn:000037CC                 push    edx
.text$mn:000037CD                 mov     eax, [ebp+var_14]
.text$mn:000037D0                 push    eax
.text$mn:000037D1                 mov     ecx, [ebp+arg_1C]
.text$mn:000037D4                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000037D9                 push    eax
.text$mn:000037DA                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000037DF                 add     esp, 8
.text$mn:000037E2                 movzx   ecx, al
.text$mn:000037E5                 test    ecx, ecx
.text$mn:000037E7                 jz      short loc_3801
.text$mn:000037E9                 mov     [ebp+var_D], 1
.text$mn:000037ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000037F4                 lea     ecx, [ebp+arg_0]
.text$mn:000037F7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000037FC                 mov     al, [ebp+var_D]
.text$mn:000037FF                 jmp     short loc_3819
.text$mn:00003801 ; ---------------------------------------------------------------------------
.text$mn:00003801
.text$mn:00003801 loc_3801:                               ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+6Fj
.text$mn:00003801                 jmp     short loc_37B8
.text$mn:00003803 ; ---------------------------------------------------------------------------
.text$mn:00003803
.text$mn:00003803 loc_3803:                               ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+4Fj
.text$mn:00003803                 mov     [ebp+var_E], 0
.text$mn:00003807                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000380E                 lea     ecx, [ebp+arg_0]
.text$mn:00003811                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003816                 mov     al, [ebp+var_E]
.text$mn:00003819
.text$mn:00003819 loc_3819:                               ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+87j
.text$mn:00003819                 mov     ecx, [ebp+var_C]
.text$mn:0000381C                 mov     large fs:0, ecx
.text$mn:00003823                 pop     ecx
.text$mn:00003824                 mov     esp, ebp
.text$mn:00003826                 pop     ebp
.text$mn:00003827                 retn
.text$mn:00003827 ?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z endp
.text$mn:00003827
.text$mn:00003828
.text$mn:00003828 ; =============== S U B R O U T I N E =======================================
.text$mn:00003828
.text$mn:00003828 ; Attributes: bp-based frame
.text$mn:00003828
.text$mn:00003828 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl addTrailingSlash(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00003828 ?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z proc near
.text$mn:00003828                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+1D8p
.text$mn:00003828
.text$mn:00003828 var_10          = dword ptr -10h
.text$mn:00003828 var_C           = dword ptr -0Ch
.text$mn:00003828 var_4           = dword ptr -4
.text$mn:00003828 arg_0           = dword ptr  8
.text$mn:00003828 arg_4           = dword ptr  0Ch
.text$mn:00003828
.text$mn:00003828                 push    ebp
.text$mn:00003829                 mov     ebp, esp
.text$mn:0000382B                 push    0FFFFFFFFh
.text$mn:0000382D                 push    offset __ehhandler$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.text$mn:00003832                 mov     eax, large fs:0
.text$mn:00003838                 push    eax
.text$mn:00003839                 push    ecx
.text$mn:0000383A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000383F                 xor     eax, ebp
.text$mn:00003841                 push    eax
.text$mn:00003842                 lea     eax, [ebp+var_C]
.text$mn:00003845                 mov     large fs:0, eax
.text$mn:0000384B                 mov     [ebp+var_10], 0
.text$mn:00003852                 mov     [ebp+var_4], 1
.text$mn:00003859                 lea     ecx, [ebp+arg_4]
.text$mn:0000385C                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00003861                 cmp     eax, 1
.text$mn:00003864                 jb      short loc_38AA
.text$mn:00003866                 lea     ecx, [ebp+arg_4]
.text$mn:00003869                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000386E                 sub     eax, 1
.text$mn:00003871                 push    eax
.text$mn:00003872                 lea     ecx, [ebp+arg_4]
.text$mn:00003875                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:0000387A                 movzx   eax, word ptr [eax]
.text$mn:0000387D                 cmp     eax, 5Ch ; '\'
.text$mn:00003880                 jnz     short loc_38AA
.text$mn:00003882                 lea     ecx, [ebp+arg_4]
.text$mn:00003885                 push    ecx
.text$mn:00003886                 mov     ecx, [ebp+arg_0]
.text$mn:00003889                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000388E                 mov     edx, [ebp+var_10]
.text$mn:00003891                 or      edx, 1
.text$mn:00003894                 mov     [ebp+var_10], edx
.text$mn:00003897                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000389B                 lea     ecx, [ebp+arg_4]
.text$mn:0000389E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000038A3                 mov     eax, [ebp+arg_0]
.text$mn:000038A6                 jmp     short loc_38E5
.text$mn:000038A8 ; ---------------------------------------------------------------------------
.text$mn:000038A8                 jmp     short loc_38D9
.text$mn:000038AA ; ---------------------------------------------------------------------------
.text$mn:000038AA
.text$mn:000038AA loc_38AA:                               ; CODE XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+3Cj
.text$mn:000038AA                                         ; addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+58j
.text$mn:000038AA                 push    offset $SG158394 ; Str
.text$mn:000038AF                 lea     eax, [ebp+arg_4]
.text$mn:000038B2                 push    eax             ; int
.text$mn:000038B3                 mov     ecx, [ebp+arg_0]
.text$mn:000038B6                 push    ecx             ; int
.text$mn:000038B7                 call    ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000038BC                 add     esp, 0Ch
.text$mn:000038BF                 mov     edx, [ebp+var_10]
.text$mn:000038C2                 or      edx, 1
.text$mn:000038C5                 mov     [ebp+var_10], edx
.text$mn:000038C8                 mov     byte ptr [ebp+var_4], 0
.text$mn:000038CC                 lea     ecx, [ebp+arg_4]
.text$mn:000038CF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000038D4                 mov     eax, [ebp+arg_0]
.text$mn:000038D7                 jmp     short loc_38E5
.text$mn:000038D9 ; ---------------------------------------------------------------------------
.text$mn:000038D9
.text$mn:000038D9 loc_38D9:                               ; CODE XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+80j
.text$mn:000038D9                 mov     byte ptr [ebp+var_4], 0
.text$mn:000038DD                 lea     ecx, [ebp+arg_4]
.text$mn:000038E0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000038E5
.text$mn:000038E5 loc_38E5:                               ; CODE XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+7Ej
.text$mn:000038E5                                         ; addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+AFj
.text$mn:000038E5                 mov     ecx, [ebp+var_C]
.text$mn:000038E8                 mov     large fs:0, ecx
.text$mn:000038EF                 pop     ecx
.text$mn:000038F0                 mov     esp, ebp
.text$mn:000038F2                 pop     ebp
.text$mn:000038F3                 retn
.text$mn:000038F3 ?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z endp
.text$mn:000038F3
.text$mn:000038F3 ; ---------------------------------------------------------------------------
.text$mn:000038F4                 align 8
.text$mn:000038F8
.text$mn:000038F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000038F8
.text$mn:000038F8 ; Attributes: bp-based frame
.text$mn:000038F8
.text$mn:000038F8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl removeTrailingSlash(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:000038F8 ?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z proc near
.text$mn:000038F8                                         ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+113p
.text$mn:000038F8
.text$mn:000038F8 var_10          = dword ptr -10h
.text$mn:000038F8 var_C           = dword ptr -0Ch
.text$mn:000038F8 var_4           = dword ptr -4
.text$mn:000038F8 arg_0           = dword ptr  8
.text$mn:000038F8 arg_4           = byte ptr  0Ch
.text$mn:000038F8
.text$mn:000038F8                 push    ebp
.text$mn:000038F9                 mov     ebp, esp
.text$mn:000038FB                 push    0FFFFFFFFh
.text$mn:000038FD                 push    offset __ehhandler$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.text$mn:00003902                 mov     eax, large fs:0
.text$mn:00003908                 push    eax
.text$mn:00003909                 push    ecx
.text$mn:0000390A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000390F                 xor     eax, ebp
.text$mn:00003911                 push    eax
.text$mn:00003912                 lea     eax, [ebp+var_C]
.text$mn:00003915                 mov     large fs:0, eax
.text$mn:0000391B                 mov     [ebp+var_10], 0
.text$mn:00003922                 mov     [ebp+var_4], 1
.text$mn:00003929                 lea     ecx, [ebp+arg_4]
.text$mn:0000392C                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00003931                 cmp     eax, 1
.text$mn:00003934                 jb      short loc_3988
.text$mn:00003936                 lea     ecx, [ebp+arg_4]
.text$mn:00003939                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000393E                 sub     eax, 1
.text$mn:00003941                 push    eax
.text$mn:00003942                 lea     ecx, [ebp+arg_4]
.text$mn:00003945                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:0000394A                 movzx   eax, word ptr [eax]
.text$mn:0000394D                 cmp     eax, 5Ch ; '\'
.text$mn:00003950                 jnz     short loc_3988
.text$mn:00003952                 lea     ecx, [ebp+arg_4]
.text$mn:00003955                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000395A                 sub     eax, 1
.text$mn:0000395D                 push    eax
.text$mn:0000395E                 push    0
.text$mn:00003960                 mov     ecx, [ebp+arg_0]
.text$mn:00003963                 push    ecx
.text$mn:00003964                 lea     ecx, [ebp+arg_4]
.text$mn:00003967                 call    ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)
.text$mn:0000396C                 mov     edx, [ebp+var_10]
.text$mn:0000396F                 or      edx, 1
.text$mn:00003972                 mov     [ebp+var_10], edx
.text$mn:00003975                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003979                 lea     ecx, [ebp+arg_4]
.text$mn:0000397C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003981                 mov     eax, [ebp+arg_0]
.text$mn:00003984                 jmp     short loc_39BA
.text$mn:00003986 ; ---------------------------------------------------------------------------
.text$mn:00003986                 jmp     short loc_39AE
.text$mn:00003988 ; ---------------------------------------------------------------------------
.text$mn:00003988
.text$mn:00003988 loc_3988:                               ; CODE XREF: removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+3Cj
.text$mn:00003988                                         ; removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+58j
.text$mn:00003988                 lea     eax, [ebp+arg_4]
.text$mn:0000398B                 push    eax
.text$mn:0000398C                 mov     ecx, [ebp+arg_0]
.text$mn:0000398F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003994                 mov     ecx, [ebp+var_10]
.text$mn:00003997                 or      ecx, 1
.text$mn:0000399A                 mov     [ebp+var_10], ecx
.text$mn:0000399D                 mov     byte ptr [ebp+var_4], 0
.text$mn:000039A1                 lea     ecx, [ebp+arg_4]
.text$mn:000039A4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000039A9                 mov     eax, [ebp+arg_0]
.text$mn:000039AC                 jmp     short loc_39BA
.text$mn:000039AE ; ---------------------------------------------------------------------------
.text$mn:000039AE
.text$mn:000039AE loc_39AE:                               ; CODE XREF: removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+8Ej
.text$mn:000039AE                 mov     byte ptr [ebp+var_4], 0
.text$mn:000039B2                 lea     ecx, [ebp+arg_4]
.text$mn:000039B5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000039BA
.text$mn:000039BA loc_39BA:                               ; CODE XREF: removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+8Cj
.text$mn:000039BA                                         ; removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+B4j
.text$mn:000039BA                 mov     ecx, [ebp+var_C]
.text$mn:000039BD                 mov     large fs:0, ecx
.text$mn:000039C4                 pop     ecx
.text$mn:000039C5                 mov     esp, ebp
.text$mn:000039C7                 pop     ebp
.text$mn:000039C8                 retn
.text$mn:000039C8 ?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z endp
.text$mn:000039C8
.text$mn:000039C8 ; ---------------------------------------------------------------------------
.text$mn:000039C9                 db 0Fh dup(0CCh)
.text$mn:000039D8
.text$mn:000039D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000039D8
.text$mn:000039D8 ; Attributes: bp-based frame
.text$mn:000039D8
.text$mn:000039D8 ; bool __cdecl isDirectory(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:000039D8 ?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:000039D8                                         ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+193p
.text$mn:000039D8
.text$mn:000039D8 var_18          = dword ptr -18h
.text$mn:000039D8 var_14          = dword ptr -14h
.text$mn:000039D8 var_D           = byte ptr -0Dh
.text$mn:000039D8 var_C           = dword ptr -0Ch
.text$mn:000039D8 var_4           = dword ptr -4
.text$mn:000039D8 arg_0           = byte ptr  8
.text$mn:000039D8
.text$mn:000039D8                 push    ebp
.text$mn:000039D9                 mov     ebp, esp
.text$mn:000039DB                 push    0FFFFFFFFh
.text$mn:000039DD                 push    offset __ehhandler$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:000039E2                 mov     eax, large fs:0
.text$mn:000039E8                 push    eax
.text$mn:000039E9                 sub     esp, 0Ch
.text$mn:000039EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000039F1                 xor     eax, ebp
.text$mn:000039F3                 push    eax
.text$mn:000039F4                 lea     eax, [ebp+var_C]
.text$mn:000039F7                 mov     large fs:0, eax
.text$mn:000039FD                 mov     [ebp+var_4], 0
.text$mn:00003A04                 lea     ecx, [ebp+arg_0]
.text$mn:00003A07                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003A0C                 push    eax             ; lpFileName
.text$mn:00003A0D                 call    dword ptr ds:__imp__GetFileAttributesW@4 ; GetFileAttributesW(x)
.text$mn:00003A13                 mov     [ebp+var_14], eax
.text$mn:00003A16                 cmp     [ebp+var_14], 0FFFFFFFFh
.text$mn:00003A1A                 jz      short loc_3A2D
.text$mn:00003A1C                 mov     eax, [ebp+var_14]
.text$mn:00003A1F                 and     eax, 10h
.text$mn:00003A22                 jz      short loc_3A2D
.text$mn:00003A24                 mov     [ebp+var_18], 1
.text$mn:00003A2B                 jmp     short loc_3A34
.text$mn:00003A2D ; ---------------------------------------------------------------------------
.text$mn:00003A2D
.text$mn:00003A2D loc_3A2D:                               ; CODE XREF: isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+42j
.text$mn:00003A2D                                         ; isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+4Aj
.text$mn:00003A2D                 mov     [ebp+var_18], 0
.text$mn:00003A34
.text$mn:00003A34 loc_3A34:                               ; CODE XREF: isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+53j
.text$mn:00003A34                 mov     cl, byte ptr [ebp+var_18]
.text$mn:00003A37                 mov     [ebp+var_D], cl
.text$mn:00003A3A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A41                 lea     ecx, [ebp+arg_0]
.text$mn:00003A44                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003A49                 mov     al, [ebp+var_D]
.text$mn:00003A4C                 mov     ecx, [ebp+var_C]
.text$mn:00003A4F                 mov     large fs:0, ecx
.text$mn:00003A56                 pop     ecx
.text$mn:00003A57                 mov     esp, ebp
.text$mn:00003A59                 pop     ebp
.text$mn:00003A5A                 retn
.text$mn:00003A5A ?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00003A5A
.text$mn:00003A5A ; ---------------------------------------------------------------------------
.text$mn:00003A5B                 db 0Dh dup(0CCh)
.text$mn:00003A68
.text$mn:00003A68 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A68
.text$mn:00003A68 ; Attributes: bp-based frame
.text$mn:00003A68
.text$mn:00003A68 ; bool __cdecl isFile(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00003A68 ?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00003A68                                         ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+CCp
.text$mn:00003A68                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+12Cp
.text$mn:00003A68
.text$mn:00003A68 var_18          = dword ptr -18h
.text$mn:00003A68 var_14          = dword ptr -14h
.text$mn:00003A68 var_D           = byte ptr -0Dh
.text$mn:00003A68 var_C           = dword ptr -0Ch
.text$mn:00003A68 var_4           = dword ptr -4
.text$mn:00003A68 arg_0           = byte ptr  8
.text$mn:00003A68
.text$mn:00003A68                 push    ebp
.text$mn:00003A69                 mov     ebp, esp
.text$mn:00003A6B                 push    0FFFFFFFFh
.text$mn:00003A6D                 push    offset __ehhandler$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00003A72                 mov     eax, large fs:0
.text$mn:00003A78                 push    eax
.text$mn:00003A79                 sub     esp, 0Ch
.text$mn:00003A7C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A81                 xor     eax, ebp
.text$mn:00003A83                 push    eax
.text$mn:00003A84                 lea     eax, [ebp+var_C]
.text$mn:00003A87                 mov     large fs:0, eax
.text$mn:00003A8D                 mov     [ebp+var_4], 0
.text$mn:00003A94                 lea     ecx, [ebp+arg_0]
.text$mn:00003A97                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003A9C                 push    eax             ; lpFileName
.text$mn:00003A9D                 call    dword ptr ds:__imp__GetFileAttributesW@4 ; GetFileAttributesW(x)
.text$mn:00003AA3                 mov     [ebp+var_14], eax
.text$mn:00003AA6                 cmp     [ebp+var_14], 0FFFFFFFFh
.text$mn:00003AAA                 jz      short loc_3ABD
.text$mn:00003AAC                 mov     eax, [ebp+var_14]
.text$mn:00003AAF                 and     eax, 10h
.text$mn:00003AB2                 jnz     short loc_3ABD
.text$mn:00003AB4                 mov     [ebp+var_18], 1
.text$mn:00003ABB                 jmp     short loc_3AC4
.text$mn:00003ABD ; ---------------------------------------------------------------------------
.text$mn:00003ABD
.text$mn:00003ABD loc_3ABD:                               ; CODE XREF: isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+42j
.text$mn:00003ABD                                         ; isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+4Aj
.text$mn:00003ABD                 mov     [ebp+var_18], 0
.text$mn:00003AC4
.text$mn:00003AC4 loc_3AC4:                               ; CODE XREF: isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+53j
.text$mn:00003AC4                 mov     cl, byte ptr [ebp+var_18]
.text$mn:00003AC7                 mov     [ebp+var_D], cl
.text$mn:00003ACA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003AD1                 lea     ecx, [ebp+arg_0]
.text$mn:00003AD4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003AD9                 mov     al, [ebp+var_D]
.text$mn:00003ADC                 mov     ecx, [ebp+var_C]
.text$mn:00003ADF                 mov     large fs:0, ecx
.text$mn:00003AE6                 pop     ecx
.text$mn:00003AE7                 mov     esp, ebp
.text$mn:00003AE9                 pop     ebp
.text$mn:00003AEA                 retn
.text$mn:00003AEA ?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00003AEA
.text$mn:00003AEA ; ---------------------------------------------------------------------------
.text$mn:00003AEB                 db 0Dh dup(0CCh)
.text$mn:00003AF8
.text$mn:00003AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AF8
.text$mn:00003AF8 ; Attributes: bp-based frame
.text$mn:00003AF8
.text$mn:00003AF8 ; bool __cdecl isAllowedBeforeDriveLetter(wchar_t)
.text$mn:00003AF8 ?isAllowedBeforeDriveLetter@@YA_N_W@Z proc near
.text$mn:00003AF8                                         ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+128p
.text$mn:00003AF8
.text$mn:00003AF8 var_18          = byte ptr -18h
.text$mn:00003AF8 var_14          = dword ptr -14h
.text$mn:00003AF8 var_D           = byte ptr -0Dh
.text$mn:00003AF8 var_C           = dword ptr -0Ch
.text$mn:00003AF8 var_4           = dword ptr -4
.text$mn:00003AF8 arg_0           = word ptr  8
.text$mn:00003AF8
.text$mn:00003AF8                 push    ebp
.text$mn:00003AF9                 mov     ebp, esp
.text$mn:00003AFB                 push    0FFFFFFFFh
.text$mn:00003AFD                 push    offset __ehhandler$?isAllowedBeforeDriveLetter@@YA_N_W@Z
.text$mn:00003B02                 mov     eax, large fs:0
.text$mn:00003B08                 push    eax
.text$mn:00003B09                 sub     esp, 0Ch
.text$mn:00003B0C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B11                 xor     eax, ebp
.text$mn:00003B13                 push    eax
.text$mn:00003B14                 lea     eax, [ebp+var_C]
.text$mn:00003B17                 mov     large fs:0, eax
.text$mn:00003B1D                 lea     ecx, [ebp+var_18] ; this
.text$mn:00003B20                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00003B25                 mov     [ebp+var_4], 0
.text$mn:00003B2C                 movzx   eax, [ebp+arg_0]
.text$mn:00003B30                 cmp     eax, 27h ; '''
.text$mn:00003B33                 jz      short loc_3B68
.text$mn:00003B35                 movzx   ecx, [ebp+arg_0]
.text$mn:00003B39                 cmp     ecx, 22h ; '"'
.text$mn:00003B3C                 jz      short loc_3B68
.text$mn:00003B3E                 movzx   edx, [ebp+arg_0]
.text$mn:00003B42                 cmp     edx, 28h ; '('
.text$mn:00003B45                 jz      short loc_3B68
.text$mn:00003B47                 lea     eax, [ebp+var_18]
.text$mn:00003B4A                 push    eax             ; std::locale *
.text$mn:00003B4B                 movzx   ecx, [ebp+arg_0]
.text$mn:00003B4F                 push    ecx             ; __int16
.text$mn:00003B50                 call    ??$isspace@_W@std@@YA_N_WABVlocale@0@@Z ; std::isspace<wchar_t>(wchar_t,std::locale const &)
.text$mn:00003B55                 add     esp, 8
.text$mn:00003B58                 movzx   edx, al
.text$mn:00003B5B                 test    edx, edx
.text$mn:00003B5D                 jnz     short loc_3B68
.text$mn:00003B5F                 mov     [ebp+var_14], 0
.text$mn:00003B66                 jmp     short loc_3B6F
.text$mn:00003B68 ; ---------------------------------------------------------------------------
.text$mn:00003B68
.text$mn:00003B68 loc_3B68:                               ; CODE XREF: isAllowedBeforeDriveLetter(wchar_t)+3Bj
.text$mn:00003B68                                         ; isAllowedBeforeDriveLetter(wchar_t)+44j ...
.text$mn:00003B68                 mov     [ebp+var_14], 1
.text$mn:00003B6F
.text$mn:00003B6F loc_3B6F:                               ; CODE XREF: isAllowedBeforeDriveLetter(wchar_t)+6Ej
.text$mn:00003B6F                 mov     al, byte ptr [ebp+var_14]
.text$mn:00003B72                 mov     [ebp+var_D], al
.text$mn:00003B75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003B7C                 lea     ecx, [ebp+var_18] ; this
.text$mn:00003B7F                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003B84                 mov     al, [ebp+var_D]
.text$mn:00003B87                 mov     ecx, [ebp+var_C]
.text$mn:00003B8A                 mov     large fs:0, ecx
.text$mn:00003B91                 pop     ecx
.text$mn:00003B92                 mov     esp, ebp
.text$mn:00003B94                 pop     ebp
.text$mn:00003B95                 retn
.text$mn:00003B95 ?isAllowedBeforeDriveLetter@@YA_N_W@Z endp
.text$mn:00003B95
.text$mn:00003B95 ; ---------------------------------------------------------------------------
.text$mn:00003B96                 align 4
.text$mn:00003B98
.text$mn:00003B98 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B98
.text$mn:00003B98 ; Attributes: bp-based frame
.text$mn:00003B98
.text$mn:00003B98 ; bool __cdecl getRawPath(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00003B98 ?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z proc near
.text$mn:00003B98                                         ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+68p
.text$mn:00003B98
.text$mn:00003B98 var_44          = dword ptr -44h
.text$mn:00003B98 var_40          = dword ptr -40h
.text$mn:00003B98 var_3C          = byte ptr -3Ch
.text$mn:00003B98 var_38          = dword ptr -38h
.text$mn:00003B98 var_31          = byte ptr -31h
.text$mn:00003B98 var_30          = byte ptr -30h
.text$mn:00003B98 var_2F          = byte ptr -2Fh
.text$mn:00003B98 var_2E          = byte ptr -2Eh
.text$mn:00003B98 var_2D          = byte ptr -2Dh
.text$mn:00003B98 var_2C          = byte ptr -2Ch
.text$mn:00003B98 var_10          = dword ptr -10h
.text$mn:00003B98 var_C           = dword ptr -0Ch
.text$mn:00003B98 var_4           = dword ptr -4
.text$mn:00003B98 arg_0           = byte ptr  8
.text$mn:00003B98 arg_1C          = dword ptr  24h
.text$mn:00003B98
.text$mn:00003B98                 push    ebp
.text$mn:00003B99                 mov     ebp, esp
.text$mn:00003B9B                 push    0FFFFFFFFh
.text$mn:00003B9D                 push    offset __ehhandler$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z
.text$mn:00003BA2                 mov     eax, large fs:0
.text$mn:00003BA8                 push    eax
.text$mn:00003BA9                 sub     esp, 38h
.text$mn:00003BAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003BB1                 xor     eax, ebp
.text$mn:00003BB3                 mov     [ebp+var_10], eax
.text$mn:00003BB6                 push    eax
.text$mn:00003BB7                 lea     eax, [ebp+var_C]
.text$mn:00003BBA                 mov     large fs:0, eax
.text$mn:00003BC0                 mov     [ebp+var_4], 0
.text$mn:00003BC7                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003BCA                 call    ??0locale@std@@QAE@XZ ; std::locale::locale(void)
.text$mn:00003BCF                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003BD3                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00003BD8                 push    eax             ; int
.text$mn:00003BD9                 push    offset $SG158430 ; Str
.text$mn:00003BDE                 lea     ecx, [ebp+arg_0]
.text$mn:00003BE1                 call    ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint)
.text$mn:00003BE6                 mov     [ebp+var_38], eax
.text$mn:00003BE9                 mov     ecx, [ebp+var_38]
.text$mn:00003BEC                 cmp     ecx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00003BF2                 jnz     short loc_3C20
.text$mn:00003BF4                 mov     [ebp+var_2F], 0
.text$mn:00003BF8                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003BFC                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003BFF                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003C04                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C0B                 lea     ecx, [ebp+arg_0]
.text$mn:00003C0E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003C13                 mov     al, [ebp+var_2F]
.text$mn:00003C16                 jmp     loc_3D54
.text$mn:00003C1B ; ---------------------------------------------------------------------------
.text$mn:00003C1B                 jmp     loc_3CF3
.text$mn:00003C20 ; ---------------------------------------------------------------------------
.text$mn:00003C20
.text$mn:00003C20 loc_3C20:                               ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5Aj
.text$mn:00003C20                 cmp     [ebp+var_38], 0
.text$mn:00003C24                 jnz     short loc_3C52
.text$mn:00003C26                 mov     [ebp+var_30], 0
.text$mn:00003C2A                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003C2E                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003C31                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003C36                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C3D                 lea     ecx, [ebp+arg_0]
.text$mn:00003C40                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003C45                 mov     al, [ebp+var_30]
.text$mn:00003C48                 jmp     loc_3D54
.text$mn:00003C4D ; ---------------------------------------------------------------------------
.text$mn:00003C4D                 jmp     loc_3CF3
.text$mn:00003C52 ; ---------------------------------------------------------------------------
.text$mn:00003C52
.text$mn:00003C52 loc_3C52:                               ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+8Cj
.text$mn:00003C52                 lea     edx, [ebp+var_3C]
.text$mn:00003C55                 push    edx             ; std::locale *
.text$mn:00003C56                 mov     eax, [ebp+var_38]
.text$mn:00003C59                 sub     eax, 1
.text$mn:00003C5C                 push    eax
.text$mn:00003C5D                 lea     ecx, [ebp+arg_0]
.text$mn:00003C60                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00003C65                 mov     cx, [eax]
.text$mn:00003C68                 movzx   edx, cx
.text$mn:00003C6B                 push    edx             ; __int16
.text$mn:00003C6C                 call    ??$isalpha@_W@std@@YA_N_WABVlocale@0@@Z ; std::isalpha<wchar_t>(wchar_t,std::locale const &)
.text$mn:00003C71                 add     esp, 8
.text$mn:00003C74                 movzx   eax, al
.text$mn:00003C77                 test    eax, eax
.text$mn:00003C79                 jnz     short loc_3CA4
.text$mn:00003C7B                 mov     [ebp+var_31], 0
.text$mn:00003C7F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003C83                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003C86                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003C8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C92                 lea     ecx, [ebp+arg_0]
.text$mn:00003C95                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003C9A                 mov     al, [ebp+var_31]
.text$mn:00003C9D                 jmp     loc_3D54
.text$mn:00003CA2 ; ---------------------------------------------------------------------------
.text$mn:00003CA2                 jmp     short loc_3CF3
.text$mn:00003CA4 ; ---------------------------------------------------------------------------
.text$mn:00003CA4
.text$mn:00003CA4 loc_3CA4:                               ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+E1j
.text$mn:00003CA4                 cmp     [ebp+var_38], 2
.text$mn:00003CA8                 jb      short loc_3CF3
.text$mn:00003CAA                 mov     ecx, [ebp+var_38]
.text$mn:00003CAD                 sub     ecx, 2
.text$mn:00003CB0                 push    ecx
.text$mn:00003CB1                 lea     ecx, [ebp+arg_0]
.text$mn:00003CB4                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00003CB9                 mov     dx, [eax]
.text$mn:00003CBC                 movzx   eax, dx
.text$mn:00003CBF                 push    eax
.text$mn:00003CC0                 call    ?isAllowedBeforeDriveLetter@@YA_N_W@Z ; isAllowedBeforeDriveLetter(wchar_t)
.text$mn:00003CC5                 add     esp, 4
.text$mn:00003CC8                 movzx   ecx, al
.text$mn:00003CCB                 test    ecx, ecx
.text$mn:00003CCD                 jnz     short loc_3CF3
.text$mn:00003CCF                 mov     [ebp+var_2E], 0
.text$mn:00003CD3                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003CD7                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003CDA                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003CDF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003CE6                 lea     ecx, [ebp+arg_0]
.text$mn:00003CE9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003CEE                 mov     al, [ebp+var_2E]
.text$mn:00003CF1                 jmp     short loc_3D54
.text$mn:00003CF3 ; ---------------------------------------------------------------------------
.text$mn:00003CF3
.text$mn:00003CF3 loc_3CF3:                               ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+83j
.text$mn:00003CF3                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+B5j ...
.text$mn:00003CF3                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00003CF9                 push    edx
.text$mn:00003CFA                 mov     eax, [ebp+var_38]
.text$mn:00003CFD                 sub     eax, 1
.text$mn:00003D00                 push    eax
.text$mn:00003D01                 lea     ecx, [ebp+var_2C]
.text$mn:00003D04                 push    ecx
.text$mn:00003D05                 lea     ecx, [ebp+arg_0]
.text$mn:00003D08                 call    ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)
.text$mn:00003D0D                 mov     [ebp+var_44], eax
.text$mn:00003D10                 mov     edx, [ebp+var_44]
.text$mn:00003D13                 mov     [ebp+var_40], edx
.text$mn:00003D16                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003D1A                 mov     eax, [ebp+var_40]
.text$mn:00003D1D                 push    eax
.text$mn:00003D1E                 mov     ecx, [ebp+arg_1C]
.text$mn:00003D21                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003D26                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003D2A                 lea     ecx, [ebp+var_2C]
.text$mn:00003D2D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003D32                 mov     [ebp+var_2D], 1
.text$mn:00003D36                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003D3A                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00003D3D                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:00003D42                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D49                 lea     ecx, [ebp+arg_0]
.text$mn:00003D4C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003D51                 mov     al, [ebp+var_2D]
.text$mn:00003D54
.text$mn:00003D54 loc_3D54:                               ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+7Ej
.text$mn:00003D54                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+B0j ...
.text$mn:00003D54                 mov     ecx, [ebp+var_C]
.text$mn:00003D57                 mov     large fs:0, ecx
.text$mn:00003D5E                 pop     ecx
.text$mn:00003D5F                 mov     ecx, [ebp+var_10]
.text$mn:00003D62                 xor     ecx, ebp
.text$mn:00003D64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003D69                 mov     esp, ebp
.text$mn:00003D6B                 pop     ebp
.text$mn:00003D6C                 retn
.text$mn:00003D6C ?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z endp
.text$mn:00003D6C
.text$mn:00003D6C ; ---------------------------------------------------------------------------
.text$mn:00003D6D                 db 0Bh dup(0CCh)
.text$mn:00003D78
.text$mn:00003D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D78
.text$mn:00003D78 ; Attributes: bp-based frame
.text$mn:00003D78
.text$mn:00003D78 ; bool __cdecl getPathsForPathCompletion(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00003D78 ?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z proc near
.text$mn:00003D78                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+143p
.text$mn:00003D78
.text$mn:00003D78 var_9C          = dword ptr -9Ch
.text$mn:00003D78 var_98          = dword ptr -98h
.text$mn:00003D78 var_94          = dword ptr -94h
.text$mn:00003D78 var_90          = dword ptr -90h
.text$mn:00003D78 var_8C          = dword ptr -8Ch
.text$mn:00003D78 var_88          = dword ptr -88h
.text$mn:00003D78 var_84          = dword ptr -84h
.text$mn:00003D78 var_80          = dword ptr -80h
.text$mn:00003D78 var_7C          = dword ptr -7Ch
.text$mn:00003D78 var_78          = dword ptr -78h
.text$mn:00003D78 var_74          = dword ptr -74h
.text$mn:00003D78 var_70          = dword ptr -70h
.text$mn:00003D78 var_6C          = dword ptr -6Ch
.text$mn:00003D78 var_68          = dword ptr -68h
.text$mn:00003D78 var_64          = dword ptr -64h
.text$mn:00003D78 var_60          = dword ptr -60h
.text$mn:00003D78 var_5C          = dword ptr -5Ch
.text$mn:00003D78 var_58          = dword ptr -58h
.text$mn:00003D78 var_51          = byte ptr -51h
.text$mn:00003D78 var_50          = byte ptr -50h
.text$mn:00003D78 var_4F          = byte ptr -4Fh
.text$mn:00003D78 var_4E          = byte ptr -4Eh
.text$mn:00003D78 var_4D          = byte ptr -4Dh
.text$mn:00003D78 var_4C          = byte ptr -4Ch
.text$mn:00003D78 var_4B          = byte ptr -4Bh
.text$mn:00003D78 var_4A          = byte ptr -4Ah
.text$mn:00003D78 var_49          = byte ptr -49h
.text$mn:00003D78 var_48          = byte ptr -48h
.text$mn:00003D78 var_2C          = byte ptr -2Ch
.text$mn:00003D78 var_10          = dword ptr -10h
.text$mn:00003D78 var_C           = dword ptr -0Ch
.text$mn:00003D78 var_4           = dword ptr -4
.text$mn:00003D78 arg_0           = byte ptr  8
.text$mn:00003D78 arg_1C          = dword ptr  24h
.text$mn:00003D78 arg_20          = dword ptr  28h
.text$mn:00003D78
.text$mn:00003D78                 push    ebp
.text$mn:00003D79                 mov     ebp, esp
.text$mn:00003D7B                 push    0FFFFFFFFh
.text$mn:00003D7D                 push    offset __ehhandler$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z
.text$mn:00003D82                 mov     eax, large fs:0
.text$mn:00003D88                 push    eax
.text$mn:00003D89                 sub     esp, 90h
.text$mn:00003D8F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D94                 xor     eax, ebp
.text$mn:00003D96                 mov     [ebp+var_10], eax
.text$mn:00003D99                 push    esi
.text$mn:00003D9A                 push    eax
.text$mn:00003D9B                 lea     eax, [ebp+var_C]
.text$mn:00003D9E                 mov     large fs:0, eax
.text$mn:00003DA4                 mov     [ebp+var_4], 0
.text$mn:00003DAB                 lea     ecx, [ebp+var_2C]
.text$mn:00003DAE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003DB3                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003DB7                 lea     eax, [ebp+var_2C]
.text$mn:00003DBA                 push    eax
.text$mn:00003DBB                 sub     esp, 1Ch
.text$mn:00003DBE                 mov     ecx, esp
.text$mn:00003DC0                 mov     [ebp+var_80], esp
.text$mn:00003DC3                 lea     edx, [ebp+arg_0]
.text$mn:00003DC6                 push    edx
.text$mn:00003DC7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003DCC                 mov     [ebp+var_68], eax
.text$mn:00003DCF                 mov     eax, [ebp+var_68]
.text$mn:00003DD2                 mov     [ebp+var_94], eax
.text$mn:00003DD8                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003DDC                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003DE0                 call    ?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003DE5                 add     esp, 20h
.text$mn:00003DE8                 mov     [ebp+var_51], al
.text$mn:00003DEB                 movzx   ecx, [ebp+var_51]
.text$mn:00003DEF                 test    ecx, ecx
.text$mn:00003DF1                 jnz     short loc_3E1F
.text$mn:00003DF3                 mov     [ebp+var_4D], 0
.text$mn:00003DF7                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003DFB                 lea     ecx, [ebp+var_2C]
.text$mn:00003DFE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003E03                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003E0A                 lea     ecx, [ebp+arg_0]
.text$mn:00003E0D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003E12                 mov     al, [ebp+var_4D]
.text$mn:00003E15                 jmp     loc_402F
.text$mn:00003E1A ; ---------------------------------------------------------------------------
.text$mn:00003E1A                 jmp     loc_4014
.text$mn:00003E1F ; ---------------------------------------------------------------------------
.text$mn:00003E1F
.text$mn:00003E1F loc_3E1F:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+79j
.text$mn:00003E1F                 sub     esp, 1Ch
.text$mn:00003E22                 mov     ecx, esp
.text$mn:00003E24                 mov     [ebp+var_9C], esp
.text$mn:00003E2A                 lea     edx, [ebp+var_2C]
.text$mn:00003E2D                 push    edx
.text$mn:00003E2E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003E33                 mov     [ebp+var_74], eax
.text$mn:00003E36                 mov     eax, [ebp+var_74]
.text$mn:00003E39                 mov     [ebp+var_78], eax
.text$mn:00003E3C                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003E40                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003E44                 call    ?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00003E49                 add     esp, 1Ch
.text$mn:00003E4C                 mov     [ebp+var_50], al
.text$mn:00003E4F                 movzx   ecx, [ebp+var_50]
.text$mn:00003E53                 test    ecx, ecx
.text$mn:00003E55                 jnz     short loc_3EB7
.text$mn:00003E57                 sub     esp, 1Ch
.text$mn:00003E5A                 mov     esi, esp
.text$mn:00003E5C                 mov     [ebp+var_90], esp
.text$mn:00003E62                 sub     esp, 1Ch
.text$mn:00003E65                 mov     ecx, esp
.text$mn:00003E67                 mov     [ebp+var_88], esp
.text$mn:00003E6D                 lea     edx, [ebp+var_2C]
.text$mn:00003E70                 push    edx
.text$mn:00003E71                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003E76                 mov     [ebp+var_70], eax
.text$mn:00003E79                 mov     eax, [ebp+var_70]
.text$mn:00003E7C                 mov     [ebp+var_98], eax
.text$mn:00003E82                 mov     byte ptr [ebp+var_4], 4
.text$mn:00003E86                 push    esi
.text$mn:00003E87                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003E8B                 call    ?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z ; removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00003E90                 add     esp, 20h
.text$mn:00003E93                 mov     [ebp+var_6C], eax
.text$mn:00003E96                 mov     ecx, [ebp+var_6C]
.text$mn:00003E99                 mov     [ebp+var_7C], ecx
.text$mn:00003E9C                 mov     byte ptr [ebp+var_4], 5
.text$mn:00003EA0                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003EA4                 call    ?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00003EA9                 add     esp, 1Ch
.text$mn:00003EAC                 mov     [ebp+var_4B], al
.text$mn:00003EAF                 movzx   edx, [ebp+var_4B]
.text$mn:00003EB3                 test    edx, edx
.text$mn:00003EB5                 jz      short loc_3EE3
.text$mn:00003EB7
.text$mn:00003EB7 loc_3EB7:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+DDj
.text$mn:00003EB7                 mov     [ebp+var_4F], 0
.text$mn:00003EBB                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003EBF                 lea     ecx, [ebp+var_2C]
.text$mn:00003EC2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003EC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003ECE                 lea     ecx, [ebp+arg_0]
.text$mn:00003ED1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003ED6                 mov     al, [ebp+var_4F]
.text$mn:00003ED9                 jmp     loc_402F
.text$mn:00003EDE ; ---------------------------------------------------------------------------
.text$mn:00003EDE                 jmp     loc_4014
.text$mn:00003EE3 ; ---------------------------------------------------------------------------
.text$mn:00003EE3
.text$mn:00003EE3 loc_3EE3:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+13Dj
.text$mn:00003EE3                 sub     esp, 1Ch
.text$mn:00003EE6                 mov     ecx, esp
.text$mn:00003EE8                 mov     [ebp+var_84], esp
.text$mn:00003EEE                 lea     eax, [ebp+var_2C]
.text$mn:00003EF1                 push    eax
.text$mn:00003EF2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003EF7                 mov     [ebp+var_5C], eax
.text$mn:00003EFA                 mov     ecx, [ebp+var_5C]
.text$mn:00003EFD                 mov     [ebp+var_8C], ecx
.text$mn:00003F03                 mov     byte ptr [ebp+var_4], 6
.text$mn:00003F07                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003F0B                 call    ?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00003F10                 add     esp, 1Ch
.text$mn:00003F13                 mov     [ebp+var_49], al
.text$mn:00003F16                 movzx   edx, [ebp+var_49]
.text$mn:00003F1A                 test    edx, edx
.text$mn:00003F1C                 jz      short loc_3F62
.text$mn:00003F1E                 lea     eax, [ebp+var_2C]
.text$mn:00003F21                 push    eax
.text$mn:00003F22                 mov     ecx, [ebp+arg_1C]
.text$mn:00003F25                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003F2A                 lea     ecx, [ebp+var_2C]
.text$mn:00003F2D                 push    ecx
.text$mn:00003F2E                 mov     ecx, [ebp+arg_20]
.text$mn:00003F31                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003F36                 mov     [ebp+var_4E], 1
.text$mn:00003F3A                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003F3E                 lea     ecx, [ebp+var_2C]
.text$mn:00003F41                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003F46                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F4D                 lea     ecx, [ebp+arg_0]
.text$mn:00003F50                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003F55                 mov     al, [ebp+var_4E]
.text$mn:00003F58                 jmp     loc_402F
.text$mn:00003F5D ; ---------------------------------------------------------------------------
.text$mn:00003F5D                 jmp     loc_4014
.text$mn:00003F62 ; ---------------------------------------------------------------------------
.text$mn:00003F62
.text$mn:00003F62 loc_3F62:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1A4j
.text$mn:00003F62                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00003F68                 push    edx             ; int
.text$mn:00003F69                 push    offset $SG158472 ; Str
.text$mn:00003F6E                 lea     ecx, [ebp+var_2C]
.text$mn:00003F71                 call    ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint)
.text$mn:00003F76                 mov     [ebp+var_58], eax
.text$mn:00003F79                 mov     eax, [ebp+var_58]
.text$mn:00003F7C                 cmp     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00003F82                 jnz     short loc_3FAD
.text$mn:00003F84                 mov     [ebp+var_4A], 0
.text$mn:00003F88                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003F8C                 lea     ecx, [ebp+var_2C]
.text$mn:00003F8F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003F94                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F9B                 lea     ecx, [ebp+arg_0]
.text$mn:00003F9E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003FA3                 mov     al, [ebp+var_4A]
.text$mn:00003FA6                 jmp     loc_402F
.text$mn:00003FAB ; ---------------------------------------------------------------------------
.text$mn:00003FAB                 jmp     short loc_4014
.text$mn:00003FAD ; ---------------------------------------------------------------------------
.text$mn:00003FAD
.text$mn:00003FAD loc_3FAD:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+20Aj
.text$mn:00003FAD                 lea     ecx, [ebp+var_2C]
.text$mn:00003FB0                 push    ecx
.text$mn:00003FB1                 mov     ecx, [ebp+arg_1C]
.text$mn:00003FB4                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003FB9                 mov     edx, [ebp+var_58]
.text$mn:00003FBC                 push    edx
.text$mn:00003FBD                 push    0
.text$mn:00003FBF                 lea     eax, [ebp+var_48]
.text$mn:00003FC2                 push    eax
.text$mn:00003FC3                 lea     ecx, [ebp+var_2C]
.text$mn:00003FC6                 call    ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)
.text$mn:00003FCB                 mov     [ebp+var_60], eax
.text$mn:00003FCE                 mov     ecx, [ebp+var_60]
.text$mn:00003FD1                 mov     [ebp+var_64], ecx
.text$mn:00003FD4                 mov     byte ptr [ebp+var_4], 7
.text$mn:00003FD8                 mov     edx, [ebp+var_64]
.text$mn:00003FDB                 push    edx
.text$mn:00003FDC                 mov     ecx, [ebp+arg_20]
.text$mn:00003FDF                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003FE4                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003FE8                 lea     ecx, [ebp+var_48]
.text$mn:00003FEB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003FF0                 mov     [ebp+var_4C], 1
.text$mn:00003FF4                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003FF8                 lea     ecx, [ebp+var_2C]
.text$mn:00003FFB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004000                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004007                 lea     ecx, [ebp+arg_0]
.text$mn:0000400A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000400F                 mov     al, [ebp+var_4C]
.text$mn:00004012                 jmp     short loc_402F
.text$mn:00004014 ; ---------------------------------------------------------------------------
.text$mn:00004014
.text$mn:00004014 loc_4014:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+A2j
.text$mn:00004014                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+166j ...
.text$mn:00004014                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004018                 lea     ecx, [ebp+var_2C]
.text$mn:0000401B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004020                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004027                 lea     ecx, [ebp+arg_0]
.text$mn:0000402A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000402F
.text$mn:0000402F loc_402F:                               ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+9Dj
.text$mn:0000402F                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+161j ...
.text$mn:0000402F                 mov     ecx, [ebp+var_C]
.text$mn:00004032                 mov     large fs:0, ecx
.text$mn:00004039                 pop     ecx
.text$mn:0000403A                 pop     esi
.text$mn:0000403B                 mov     ecx, [ebp+var_10]
.text$mn:0000403E                 xor     ecx, ebp
.text$mn:00004040                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00004045                 mov     esp, ebp
.text$mn:00004047                 pop     ebp
.text$mn:00004048                 retn
.text$mn:00004048 ?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z endp
.text$mn:00004048
.text$mn:00004048 ; ---------------------------------------------------------------------------
.text$mn:00004049                 align 4
.text$mn:00004049 _text$mn        ends
.text$mn:00004049
.text$x:0000404C ; ===========================================================================
.text$x:0000404C
.text$x:0000404C ; Segment type: Pure code
.text$x:0000404C ; Segment permissions: Read/Execute
.text$x:0000404C _text$x         segment para public 'CODE' use32
.text$x:0000404C                 assume cs:_text$x
.text$x:0000404C                 ;org 404Ch
.text$x:0000404C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000404C
.text$x:0000404C ; =============== S U B R O U T I N E =======================================
.text$x:0000404C
.text$x:0000404C
.text$x:0000404C __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$0 proc near
.text$x:0000404C                                         ; DATA XREF: .xdata$x:00010498o
.text$x:0000404C                 lea     ecx, [ebp-98h]
.text$x:00004052                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004052 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$0 endp
.text$x:00004052
.text$x:00004057
.text$x:00004057 ; =============== S U B R O U T I N E =======================================
.text$x:00004057
.text$x:00004057
.text$x:00004057 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$1 proc near
.text$x:00004057                                         ; DATA XREF: .xdata$x:000104A0o
.text$x:00004057                 lea     ecx, [ebp-80h]
.text$x:0000405A                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000405A __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$1 endp
.text$x:0000405A
.text$x:0000405F
.text$x:0000405F ; =============== S U B R O U T I N E =======================================
.text$x:0000405F
.text$x:0000405F
.text$x:0000405F __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$2 proc near
.text$x:0000405F                                         ; DATA XREF: .xdata$x:000104A8o
.text$x:0000405F                 mov     ecx, [ebp-48h]
.text$x:00004062                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004062 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$2 endp
.text$x:00004062
.text$x:00004067
.text$x:00004067 ; =============== S U B R O U T I N E =======================================
.text$x:00004067
.text$x:00004067
.text$x:00004067 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$4 proc near
.text$x:00004067                                         ; DATA XREF: .xdata$x:000104B0o
.text$x:00004067                 lea     ecx, [ebp-0A4h]
.text$x:0000406D                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000406D __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$4 endp
.text$x:0000406D
.text$x:00004072
.text$x:00004072 ; =============== S U B R O U T I N E =======================================
.text$x:00004072
.text$x:00004072
.text$x:00004072 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$5 proc near
.text$x:00004072                                         ; DATA XREF: .xdata$x:000104B8o
.text$x:00004072                 lea     ecx, [ebp-8Ch]
.text$x:00004078                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004078 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$5 endp
.text$x:00004078
.text$x:0000407D
.text$x:0000407D ; =============== S U B R O U T I N E =======================================
.text$x:0000407D
.text$x:0000407D
.text$x:0000407D __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$6 proc near
.text$x:0000407D                                         ; DATA XREF: .xdata$x:000104C0o
.text$x:0000407D                 mov     ecx, [ebp-4Ch]
.text$x:00004080                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004080 __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$6 endp
.text$x:00004080
.text$x:00004085
.text$x:00004085 ; =============== S U B R O U T I N E =======================================
.text$x:00004085
.text$x:00004085
.text$x:00004085 __ehhandler$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z proc near
.text$x:00004085                                         ; DATA XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+5o
.text$x:00004085
.text$x:00004085 arg_4           = dword ptr  8
.text$x:00004085
.text$x:00004085                 mov     edx, [esp+arg_4]
.text$x:00004089                 lea     eax, [edx+0Ch]
.text$x:0000408C                 mov     ecx, [edx-9Ch]
.text$x:00004092                 xor     ecx, eax
.text$x:00004094                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004099                 mov     eax, offset __ehfuncinfo$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z
.text$x:0000409E                 jmp     ___CxxFrameHandler3
.text$x:0000409E __ehhandler$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z endp
.text$x:0000409E
.text$x:000040A3
.text$x:000040A3 ; =============== S U B R O U T I N E =======================================
.text$x:000040A3
.text$x:000040A3
.text$x:000040A3 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$0 proc near
.text$x:000040A3                                         ; DATA XREF: .xdata$x:00010558o
.text$x:000040A3                 lea     ecx, [ebp-12Ch]
.text$x:000040A9                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040A9 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$0 endp
.text$x:000040A9
.text$x:000040AE
.text$x:000040AE ; =============== S U B R O U T I N E =======================================
.text$x:000040AE
.text$x:000040AE
.text$x:000040AE __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$1 proc near
.text$x:000040AE                                         ; DATA XREF: .xdata$x:00010560o
.text$x:000040AE                 lea     ecx, [ebp-0CCh]
.text$x:000040B4                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040B4 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$1 endp
.text$x:000040B4
.text$x:000040B9
.text$x:000040B9 ; =============== S U B R O U T I N E =======================================
.text$x:000040B9
.text$x:000040B9
.text$x:000040B9 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$2 proc near
.text$x:000040B9                                         ; DATA XREF: .xdata$x:00010568o
.text$x:000040B9                 mov     ecx, [ebp-84h]
.text$x:000040BF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040BF __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$2 endp
.text$x:000040BF
.text$x:000040C4
.text$x:000040C4 ; =============== S U B R O U T I N E =======================================
.text$x:000040C4
.text$x:000040C4
.text$x:000040C4 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$4 proc near
.text$x:000040C4                                         ; DATA XREF: .xdata$x:00010570o
.text$x:000040C4                 lea     ecx, [ebp-0FCh]
.text$x:000040CA                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040CA __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$4 endp
.text$x:000040CA
.text$x:000040CF
.text$x:000040CF ; =============== S U B R O U T I N E =======================================
.text$x:000040CF
.text$x:000040CF
.text$x:000040CF __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$5 proc near
.text$x:000040CF                                         ; DATA XREF: .xdata$x:00010578o
.text$x:000040CF                 lea     ecx, [ebp-114h]
.text$x:000040D5                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040D5 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$5 endp
.text$x:000040D5
.text$x:000040DA
.text$x:000040DA ; =============== S U B R O U T I N E =======================================
.text$x:000040DA
.text$x:000040DA
.text$x:000040DA __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$6 proc near
.text$x:000040DA                                         ; DATA XREF: .xdata$x:00010580o
.text$x:000040DA                 mov     ecx, [ebp-8Ch]
.text$x:000040E0                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040E0 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$6 endp
.text$x:000040E0
.text$x:000040E5
.text$x:000040E5 ; =============== S U B R O U T I N E =======================================
.text$x:000040E5
.text$x:000040E5
.text$x:000040E5 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$8 proc near
.text$x:000040E5                                         ; DATA XREF: .xdata$x:00010588o
.text$x:000040E5                 lea     ecx, [ebp-0F0h]
.text$x:000040EB                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040EB __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$8 endp
.text$x:000040EB
.text$x:000040F0
.text$x:000040F0 ; =============== S U B R O U T I N E =======================================
.text$x:000040F0
.text$x:000040F0
.text$x:000040F0 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$9 proc near
.text$x:000040F0                                         ; DATA XREF: .xdata$x:00010590o
.text$x:000040F0                 lea     ecx, [ebp-0D8h]
.text$x:000040F6                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040F6 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$9 endp
.text$x:000040F6
.text$x:000040FB
.text$x:000040FB ; =============== S U B R O U T I N E =======================================
.text$x:000040FB
.text$x:000040FB
.text$x:000040FB __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$10 proc near
.text$x:000040FB                                         ; DATA XREF: .xdata$x:00010598o
.text$x:000040FB                 mov     ecx, [ebp-80h]
.text$x:000040FE                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:000040FE __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$10 endp
.text$x:000040FE
.text$x:00004103
.text$x:00004103 ; =============== S U B R O U T I N E =======================================
.text$x:00004103
.text$x:00004103
.text$x:00004103 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$12 proc near
.text$x:00004103                                         ; DATA XREF: .xdata$x:000105A0o
.text$x:00004103                 lea     ecx, [ebp-138h]
.text$x:00004109                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004109 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$12 endp
.text$x:00004109
.text$x:0000410E
.text$x:0000410E ; =============== S U B R O U T I N E =======================================
.text$x:0000410E
.text$x:0000410E
.text$x:0000410E __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$13 proc near
.text$x:0000410E                                         ; DATA XREF: .xdata$x:000105A8o
.text$x:0000410E                 lea     ecx, [ebp-120h]
.text$x:00004114                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00004114 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$13 endp
.text$x:00004114
.text$x:00004119
.text$x:00004119 ; =============== S U B R O U T I N E =======================================
.text$x:00004119
.text$x:00004119
.text$x:00004119 __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$14 proc near
.text$x:00004119                                         ; DATA XREF: .xdata$x:000105B0o
.text$x:00004119                 mov     ecx, [ebp-98h]
.text$x:0000411F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000411F __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$14 endp
.text$x:0000411F
.text$x:00004124
.text$x:00004124 ; =============== S U B R O U T I N E =======================================
.text$x:00004124
.text$x:00004124
.text$x:00004124 __ehhandler$?search@InsertedMatchedChars@@QAEHDDH@Z proc near
.text$x:00004124                                         ; DATA XREF: InsertedMatchedChars::search(char,char,int)+5o
.text$x:00004124
.text$x:00004124 arg_4           = dword ptr  8
.text$x:00004124
.text$x:00004124                 mov     edx, [esp+arg_4]
.text$x:00004128                 lea     eax, [edx+0Ch]
.text$x:0000412B                 mov     ecx, [edx-130h]
.text$x:00004131                 xor     ecx, eax
.text$x:00004133                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004138                 mov     eax, offset __ehfuncinfo$?search@InsertedMatchedChars@@QAEHDDH@Z
.text$x:0000413D                 jmp     ___CxxFrameHandler3
.text$x:0000413D __ehhandler$?search@InsertedMatchedChars@@QAEHDDH@Z endp
.text$x:0000413D
.text$x:00004142
.text$x:00004142 ; =============== S U B R O U T I N E =======================================
.text$x:00004142
.text$x:00004142
.text$x:00004142 __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$0 proc near
.text$x:00004142                                         ; DATA XREF: .xdata$x:00010234o
.text$x:00004142                 mov     eax, [ebp-260h]
.text$x:00004148                 push    eax             ; void *
.text$x:00004149                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000414E                 pop     ecx
.text$x:0000414F                 retn
.text$x:0000414F __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$0 endp
.text$x:0000414F
.text$x:00004150
.text$x:00004150 ; =============== S U B R O U T I N E =======================================
.text$x:00004150
.text$x:00004150
.text$x:00004150 __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$1 proc near
.text$x:00004150                                         ; DATA XREF: .xdata$x:0001023Co
.text$x:00004150                 lea     ecx, [ebp-234h]
.text$x:00004156                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004156 __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$1 endp
.text$x:00004156
.text$x:0000415B
.text$x:0000415B ; =============== S U B R O U T I N E =======================================
.text$x:0000415B
.text$x:0000415B
.text$x:0000415B __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$2 proc near
.text$x:0000415B                                         ; DATA XREF: .xdata$x:00010244o
.text$x:0000415B                 mov     ecx, [ebp-284h]
.text$x:00004161                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004161 __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$2 endp
.text$x:00004161
.text$x:00004166
.text$x:00004166 ; =============== S U B R O U T I N E =======================================
.text$x:00004166
.text$x:00004166
.text$x:00004166 __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$3 proc near
.text$x:00004166                                         ; DATA XREF: .xdata$x:0001024Co
.text$x:00004166                 mov     ecx, [ebp-28Ch]
.text$x:0000416C                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000416C __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$3 endp
.text$x:0000416C
.text$x:00004171
.text$x:00004171 ; =============== S U B R O U T I N E =======================================
.text$x:00004171
.text$x:00004171
.text$x:00004171 __ehhandler$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z proc near
.text$x:00004171                                         ; DATA XREF: AutoCompletion::setLanguage(LangType)+5o
.text$x:00004171
.text$x:00004171 arg_4           = dword ptr  8
.text$x:00004171
.text$x:00004171                 mov     edx, [esp+arg_4]
.text$x:00004175                 lea     eax, [edx+0Ch]
.text$x:00004178                 mov     ecx, [edx-284h]
.text$x:0000417E                 xor     ecx, eax
.text$x:00004180                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004185                 mov     ecx, [edx-4]
.text$x:00004188                 xor     ecx, eax
.text$x:0000418A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000418F                 mov     eax, offset __ehfuncinfo$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z
.text$x:00004194                 jmp     ___CxxFrameHandler3
.text$x:00004194 __ehhandler$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z endp
.text$x:00004194
.text$x:00004199
.text$x:00004199 ; =============== S U B R O U T I N E =======================================
.text$x:00004199
.text$x:00004199
.text$x:00004199 __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$0 proc near
.text$x:00004199                                         ; DATA XREF: .xdata$x:00010214o
.text$x:00004199                 lea     ecx, [ebp-250h]
.text$x:0000419F                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000419F __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$0 endp
.text$x:0000419F
.text$x:000041A4
.text$x:000041A4 ; =============== S U B R O U T I N E =======================================
.text$x:000041A4
.text$x:000041A4
.text$x:000041A4 __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$1 proc near
.text$x:000041A4                                         ; DATA XREF: .xdata$x:0001021Co
.text$x:000041A4                 mov     ecx, [ebp-26Ch]
.text$x:000041AA                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000041AA __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$1 endp
.text$x:000041AA
.text$x:000041AF
.text$x:000041AF ; =============== S U B R O U T I N E =======================================
.text$x:000041AF
.text$x:000041AF
.text$x:000041AF __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$2 proc near
.text$x:000041AF                                         ; DATA XREF: .xdata$x:00010224o
.text$x:000041AF                 mov     ecx, [ebp-268h]
.text$x:000041B5                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000041B5 __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$2 endp
.text$x:000041B5
.text$x:000041BA
.text$x:000041BA ; =============== S U B R O U T I N E =======================================
.text$x:000041BA
.text$x:000041BA
.text$x:000041BA __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$3 proc near
.text$x:000041BA                                         ; DATA XREF: .xdata$x:0001022Co
.text$x:000041BA                 lea     ecx, [ebp-22Ch]
.text$x:000041C0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000041C0 __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$3 endp
.text$x:000041C0
.text$x:000041C5
.text$x:000041C5 ; =============== S U B R O U T I N E =======================================
.text$x:000041C5
.text$x:000041C5
.text$x:000041C5 __ehhandler$?showWordComplete@AutoCompletion@@QAE_N_N@Z proc near
.text$x:000041C5                                         ; DATA XREF: AutoCompletion::showWordComplete(bool)+5o
.text$x:000041C5
.text$x:000041C5 arg_4           = dword ptr  8
.text$x:000041C5
.text$x:000041C5                 mov     edx, [esp+arg_4]
.text$x:000041C9                 lea     eax, [edx+0Ch]
.text$x:000041CC                 mov     ecx, [edx-270h]
.text$x:000041D2                 xor     ecx, eax
.text$x:000041D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041D9                 mov     ecx, [edx-4]
.text$x:000041DC                 xor     ecx, eax
.text$x:000041DE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041E3                 mov     eax, offset __ehfuncinfo$?showWordComplete@AutoCompletion@@QAE_N_N@Z
.text$x:000041E8                 jmp     ___CxxFrameHandler3
.text$x:000041E8 __ehhandler$?showWordComplete@AutoCompletion@@QAE_N_N@Z endp
.text$x:000041E8
.text$x:000041ED
.text$x:000041ED ; =============== S U B R O U T I N E =======================================
.text$x:000041ED
.text$x:000041ED
.text$x:000041ED __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$0 proc near
.text$x:000041ED                                         ; DATA XREF: .xdata$x:00010470o
.text$x:000041ED                 lea     ecx, [ebp-25Ch]
.text$x:000041F3                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000041F3 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$0 endp
.text$x:000041F3
.text$x:000041F8
.text$x:000041F8 ; =============== S U B R O U T I N E =======================================
.text$x:000041F8
.text$x:000041F8
.text$x:000041F8 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$1 proc near
.text$x:000041F8                                         ; DATA XREF: .xdata$x:00010478o
.text$x:000041F8                 mov     ecx, [ebp-280h]
.text$x:000041FE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000041FE __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$1 endp
.text$x:000041FE
.text$x:00004203
.text$x:00004203 ; =============== S U B R O U T I N E =======================================
.text$x:00004203
.text$x:00004203
.text$x:00004203 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$2 proc near
.text$x:00004203                                         ; DATA XREF: .xdata$x:00010480o
.text$x:00004203                 mov     ecx, [ebp-278h]
.text$x:00004209                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004209 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$2 endp
.text$x:00004209
.text$x:0000420E
.text$x:0000420E ; =============== S U B R O U T I N E =======================================
.text$x:0000420E
.text$x:0000420E
.text$x:0000420E __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$3 proc near
.text$x:0000420E                                         ; DATA XREF: .xdata$x:00010488o
.text$x:0000420E                 mov     ecx, [ebp-284h]
.text$x:00004214                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004214 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$3 endp
.text$x:00004214
.text$x:00004219
.text$x:00004219 ; =============== S U B R O U T I N E =======================================
.text$x:00004219
.text$x:00004219
.text$x:00004219 __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$4 proc near
.text$x:00004219                                         ; DATA XREF: .xdata$x:00010490o
.text$x:00004219                 lea     ecx, [ebp-22Ch]
.text$x:0000421F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000421F __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$4 endp
.text$x:0000421F
.text$x:00004224
.text$x:00004224 ; =============== S U B R O U T I N E =======================================
.text$x:00004224
.text$x:00004224
.text$x:00004224 __ehhandler$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ proc near
.text$x:00004224                                         ; DATA XREF: AutoCompletion::showApiAndWordComplete(void)+5o
.text$x:00004224
.text$x:00004224 arg_4           = dword ptr  8
.text$x:00004224
.text$x:00004224                 mov     edx, [esp+arg_4]
.text$x:00004228                 lea     eax, [edx+0Ch]
.text$x:0000422B                 mov     ecx, [edx-288h]
.text$x:00004231                 xor     ecx, eax
.text$x:00004233                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004238                 mov     ecx, [edx-4]
.text$x:0000423B                 xor     ecx, eax
.text$x:0000423D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004242                 mov     eax, offset __ehfuncinfo$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ
.text$x:00004247                 jmp     ___CxxFrameHandler3
.text$x:00004247 __ehhandler$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ endp
.text$x:00004247
.text$x:0000424C
.text$x:0000424C ; =============== S U B R O U T I N E =======================================
.text$x:0000424C
.text$x:0000424C
.text$x:0000424C __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$0 proc near
.text$x:0000424C                                         ; DATA XREF: .xdata$x:00010508o
.text$x:0000424C                 lea     ecx, [ebp-270h]
.text$x:00004252                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004252 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$0 endp
.text$x:00004252
.text$x:00004257
.text$x:00004257 ; =============== S U B R O U T I N E =======================================
.text$x:00004257
.text$x:00004257
.text$x:00004257 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$1 proc near
.text$x:00004257                                         ; DATA XREF: .xdata$x:00010510o
.text$x:00004257                 lea     ecx, [ebp-254h]
.text$x:0000425D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000425D __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$1 endp
.text$x:0000425D
.text$x:00004262
.text$x:00004262 ; =============== S U B R O U T I N E =======================================
.text$x:00004262
.text$x:00004262
.text$x:00004262 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$2 proc near
.text$x:00004262                                         ; DATA XREF: .xdata$x:00010518o
.text$x:00004262                 lea     ecx, [ebp-28Ch]
.text$x:00004268                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004268 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$2 endp
.text$x:00004268
.text$x:0000426D
.text$x:0000426D ; =============== S U B R O U T I N E =======================================
.text$x:0000426D
.text$x:0000426D
.text$x:0000426D __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$3 proc near
.text$x:0000426D                                         ; DATA XREF: .xdata$x:00010520o
.text$x:0000426D                 mov     ecx, [ebp-590h]
.text$x:00004273                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004273 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$3 endp
.text$x:00004273
.text$x:00004278
.text$x:00004278 ; =============== S U B R O U T I N E =======================================
.text$x:00004278
.text$x:00004278
.text$x:00004278 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$4 proc near
.text$x:00004278                                         ; DATA XREF: .xdata$x:00010528o
.text$x:00004278                 lea     ecx, [ebp-238h]
.text$x:0000427E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000427E __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$4 endp
.text$x:0000427E
.text$x:00004283
.text$x:00004283 ; =============== S U B R O U T I N E =======================================
.text$x:00004283
.text$x:00004283
.text$x:00004283 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$5 proc near
.text$x:00004283                                         ; DATA XREF: .xdata$x:00010530o
.text$x:00004283                 mov     ecx, [ebp-59Ch]
.text$x:00004289                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004289 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$5 endp
.text$x:00004289
.text$x:0000428E
.text$x:0000428E ; =============== S U B R O U T I N E =======================================
.text$x:0000428E
.text$x:0000428E
.text$x:0000428E __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$6 proc near
.text$x:0000428E                                         ; DATA XREF: .xdata$x:00010538o
.text$x:0000428E                 lea     ecx, [ebp-2A8h]
.text$x:00004294                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004294 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$6 endp
.text$x:00004294
.text$x:00004299
.text$x:00004299 ; =============== S U B R O U T I N E =======================================
.text$x:00004299
.text$x:00004299
.text$x:00004299 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$7 proc near
.text$x:00004299                                         ; DATA XREF: .xdata$x:00010540o
.text$x:00004299                 lea     ecx, [ebp-2C4h]
.text$x:0000429F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000429F __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$7 endp
.text$x:0000429F
.text$x:000042A4
.text$x:000042A4 ; =============== S U B R O U T I N E =======================================
.text$x:000042A4
.text$x:000042A4
.text$x:000042A4 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$8 proc near
.text$x:000042A4                                         ; DATA XREF: .xdata$x:00010548o
.text$x:000042A4                 mov     eax, [ebp-550h]
.text$x:000042AA                 and     eax, 1
.text$x:000042AD                 jz      locret_42C5
.text$x:000042B3                 and     dword ptr [ebp-550h], 0FFFFFFFEh
.text$x:000042BA                 lea     ecx, [ebp-2E0h]
.text$x:000042C0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000042C5 ; ---------------------------------------------------------------------------
.text$x:000042C5
.text$x:000042C5 locret_42C5:                            ; CODE XREF: __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$8+9j
.text$x:000042C5                 retn
.text$x:000042C5 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$8 endp
.text$x:000042C5
.text$x:000042C6
.text$x:000042C6 ; =============== S U B R O U T I N E =======================================
.text$x:000042C6
.text$x:000042C6
.text$x:000042C6 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$9 proc near
.text$x:000042C6                                         ; DATA XREF: .xdata$x:00010550o
.text$x:000042C6                 mov     eax, [ebp-550h]
.text$x:000042CC                 and     eax, 2
.text$x:000042CF                 jz      locret_42E7
.text$x:000042D5                 and     dword ptr [ebp-550h], 0FFFFFFFDh
.text$x:000042DC                 lea     ecx, [ebp-2FCh]
.text$x:000042E2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000042E7 ; ---------------------------------------------------------------------------
.text$x:000042E7
.text$x:000042E7 locret_42E7:                            ; CODE XREF: __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$9+9j
.text$x:000042E7                 retn
.text$x:000042E7 __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$9 endp
.text$x:000042E7
.text$x:000042E8
.text$x:000042E8 ; =============== S U B R O U T I N E =======================================
.text$x:000042E8
.text$x:000042E8
.text$x:000042E8 __ehhandler$?showPathCompletion@AutoCompletion@@QAEXXZ proc near
.text$x:000042E8                                         ; DATA XREF: AutoCompletion::showPathCompletion(void)+5o
.text$x:000042E8
.text$x:000042E8 arg_4           = dword ptr  8
.text$x:000042E8
.text$x:000042E8                 mov     edx, [esp+arg_4]
.text$x:000042EC                 lea     eax, [edx+0Ch]
.text$x:000042EF                 mov     ecx, [edx-59Ch]
.text$x:000042F5                 xor     ecx, eax
.text$x:000042F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042FC                 mov     ecx, [edx-4]
.text$x:000042FF                 xor     ecx, eax
.text$x:00004301                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004306                 mov     eax, offset __ehfuncinfo$?showPathCompletion@AutoCompletion@@QAEXXZ
.text$x:0000430B                 jmp     ___CxxFrameHandler3
.text$x:0000430B __ehhandler$?showPathCompletion@AutoCompletion@@QAEXXZ endp
.text$x:0000430B
.text$x:00004310
.text$x:00004310 ; =============== S U B R O U T I N E =======================================
.text$x:00004310
.text$x:00004310
.text$x:00004310 __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$0 proc near
.text$x:00004310                                         ; DATA XREF: .xdata$x:000101FCo
.text$x:00004310                 lea     ecx, [ebp-22Ch]
.text$x:00004316                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004316 __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$0 endp
.text$x:00004316
.text$x:0000431B
.text$x:0000431B ; =============== S U B R O U T I N E =======================================
.text$x:0000431B
.text$x:0000431B
.text$x:0000431B __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$1 proc near
.text$x:0000431B                                         ; DATA XREF: .xdata$x:00010204o
.text$x:0000431B                 mov     ecx, [ebp-270h]
.text$x:00004321                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004321 __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$1 endp
.text$x:00004321
.text$x:00004326
.text$x:00004326 ; =============== S U B R O U T I N E =======================================
.text$x:00004326
.text$x:00004326
.text$x:00004326 __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$2 proc near
.text$x:00004326                                         ; DATA XREF: .xdata$x:0001020Co
.text$x:00004326                 lea     ecx, [ebp-248h]
.text$x:0000432C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000432C __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$2 endp
.text$x:0000432C
.text$x:00004331
.text$x:00004331 ; =============== S U B R O U T I N E =======================================
.text$x:00004331
.text$x:00004331
.text$x:00004331 __ehhandler$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z proc near
.text$x:00004331                                         ; DATA XREF: AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+5o
.text$x:00004331
.text$x:00004331 arg_4           = dword ptr  8
.text$x:00004331
.text$x:00004331                 mov     edx, [esp+arg_4]
.text$x:00004335                 lea     eax, [edx+0Ch]
.text$x:00004338                 mov     ecx, [edx-270h]
.text$x:0000433E                 xor     ecx, eax
.text$x:00004340                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004345                 mov     ecx, [edx-4]
.text$x:00004348                 xor     ecx, eax
.text$x:0000434A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000434F                 mov     eax, offset __ehfuncinfo$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z
.text$x:00004354                 jmp     ___CxxFrameHandler3
.text$x:00004354 __ehhandler$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z endp
.text$x:00004354
.text$x:00004359
.text$x:00004359 ; =============== S U B R O U T I N E =======================================
.text$x:00004359
.text$x:00004359
.text$x:00004359 __unwindfunclet$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z$0 proc near
.text$x:00004359                                         ; DATA XREF: .xdata$x:000101BCo
.text$x:00004359                 lea     ecx, [ebp+8]
.text$x:0000435C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000435C __unwindfunclet$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z$0 endp
.text$x:0000435C
.text$x:00004361
.text$x:00004361 ; =============== S U B R O U T I N E =======================================
.text$x:00004361
.text$x:00004361
.text$x:00004361 __ehhandler$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z proc near
.text$x:00004361                                         ; DATA XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+5o
.text$x:00004361
.text$x:00004361 arg_4           = dword ptr  8
.text$x:00004361
.text$x:00004361                 mov     edx, [esp+arg_4]
.text$x:00004365                 lea     eax, [edx+0Ch]
.text$x:00004368                 mov     ecx, [edx-10h]
.text$x:0000436B                 xor     ecx, eax
.text$x:0000436D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004372                 mov     eax, offset __ehfuncinfo$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z
.text$x:00004377                 jmp     ___CxxFrameHandler3
.text$x:00004377 __ehhandler$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z endp
.text$x:00004377
.text$x:0000437C
.text$x:0000437C ; =============== S U B R O U T I N E =======================================
.text$x:0000437C
.text$x:0000437C
.text$x:0000437C __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0 proc near
.text$x:0000437C                                         ; DATA XREF: .xdata$x:000101DCo
.text$x:0000437C                 lea     ecx, [ebp+0Ch]
.text$x:0000437F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000437F __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0 endp
.text$x:0000437F
.text$x:00004384
.text$x:00004384 ; =============== S U B R O U T I N E =======================================
.text$x:00004384
.text$x:00004384
.text$x:00004384 __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1 proc near
.text$x:00004384                                         ; DATA XREF: .xdata$x:000101D4o
.text$x:00004384                 mov     eax, [ebp-10h]
.text$x:00004387                 and     eax, 1
.text$x:0000438A                 jz      locret_439C
.text$x:00004390                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00004394                 mov     ecx, [ebp+8]
.text$x:00004397                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000439C ; ---------------------------------------------------------------------------
.text$x:0000439C
.text$x:0000439C locret_439C:                            ; CODE XREF: __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1+6j
.text$x:0000439C                 retn
.text$x:0000439C __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1 endp
.text$x:0000439C
.text$x:0000439D
.text$x:0000439D ; =============== S U B R O U T I N E =======================================
.text$x:0000439D
.text$x:0000439D
.text$x:0000439D __ehhandler$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z proc near
.text$x:0000439D                                         ; DATA XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:0000439D
.text$x:0000439D arg_4           = dword ptr  8
.text$x:0000439D
.text$x:0000439D                 mov     edx, [esp+arg_4]
.text$x:000043A1                 lea     eax, [edx+0Ch]
.text$x:000043A4                 mov     ecx, [edx-8]
.text$x:000043A7                 xor     ecx, eax
.text$x:000043A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000043AE                 mov     eax, offset __ehfuncinfo$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.text$x:000043B3                 jmp     ___CxxFrameHandler3
.text$x:000043B3 __ehhandler$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z endp
.text$x:000043B3
.text$x:000043B8
.text$x:000043B8 ; =============== S U B R O U T I N E =======================================
.text$x:000043B8
.text$x:000043B8
.text$x:000043B8 __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0 proc near
.text$x:000043B8                                         ; DATA XREF: .xdata$x:000101CCo
.text$x:000043B8                 lea     ecx, [ebp+0Ch]
.text$x:000043BB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000043BB __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0 endp
.text$x:000043BB
.text$x:000043C0
.text$x:000043C0 ; =============== S U B R O U T I N E =======================================
.text$x:000043C0
.text$x:000043C0
.text$x:000043C0 __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1 proc near
.text$x:000043C0                                         ; DATA XREF: .xdata$x:000101C4o
.text$x:000043C0                 mov     eax, [ebp-10h]
.text$x:000043C3                 and     eax, 1
.text$x:000043C6                 jz      locret_43D8
.text$x:000043CC                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:000043D0                 mov     ecx, [ebp+8]
.text$x:000043D3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000043D8 ; ---------------------------------------------------------------------------
.text$x:000043D8
.text$x:000043D8 locret_43D8:                            ; CODE XREF: __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1+6j
.text$x:000043D8                 retn
.text$x:000043D8 __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1 endp
.text$x:000043D8
.text$x:000043D9
.text$x:000043D9 ; =============== S U B R O U T I N E =======================================
.text$x:000043D9
.text$x:000043D9
.text$x:000043D9 __ehhandler$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z proc near
.text$x:000043D9                                         ; DATA XREF: removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:000043D9
.text$x:000043D9 arg_4           = dword ptr  8
.text$x:000043D9
.text$x:000043D9                 mov     edx, [esp+arg_4]
.text$x:000043DD                 lea     eax, [edx+0Ch]
.text$x:000043E0                 mov     ecx, [edx-8]
.text$x:000043E3                 xor     ecx, eax
.text$x:000043E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000043EA                 mov     eax, offset __ehfuncinfo$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.text$x:000043EF                 jmp     ___CxxFrameHandler3
.text$x:000043EF __ehhandler$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z endp
.text$x:000043EF
.text$x:000043F4
.text$x:000043F4 ; =============== S U B R O U T I N E =======================================
.text$x:000043F4
.text$x:000043F4
.text$x:000043F4 __unwindfunclet$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:000043F4                                         ; DATA XREF: .xdata$x:000101B4o
.text$x:000043F4                 lea     ecx, [ebp+8]
.text$x:000043F7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000043F7 __unwindfunclet$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:000043F7
.text$x:000043FC
.text$x:000043FC ; =============== S U B R O U T I N E =======================================
.text$x:000043FC
.text$x:000043FC
.text$x:000043FC __ehhandler$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:000043FC                                         ; DATA XREF: isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:000043FC
.text$x:000043FC arg_4           = dword ptr  8
.text$x:000043FC
.text$x:000043FC                 mov     edx, [esp+arg_4]
.text$x:00004400                 lea     eax, [edx+0Ch]
.text$x:00004403                 mov     ecx, [edx-10h]
.text$x:00004406                 xor     ecx, eax
.text$x:00004408                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000440D                 mov     eax, offset __ehfuncinfo$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:00004412                 jmp     ___CxxFrameHandler3
.text$x:00004412 __ehhandler$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:00004412
.text$x:00004417
.text$x:00004417 ; =============== S U B R O U T I N E =======================================
.text$x:00004417
.text$x:00004417
.text$x:00004417 __unwindfunclet$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:00004417                                         ; DATA XREF: .xdata$x:000101ACo
.text$x:00004417                 lea     ecx, [ebp+8]
.text$x:0000441A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000441A __unwindfunclet$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:0000441A
.text$x:0000441F
.text$x:0000441F ; =============== S U B R O U T I N E =======================================
.text$x:0000441F
.text$x:0000441F
.text$x:0000441F __ehhandler$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:0000441F                                         ; DATA XREF: isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:0000441F
.text$x:0000441F arg_4           = dword ptr  8
.text$x:0000441F
.text$x:0000441F                 mov     edx, [esp+arg_4]
.text$x:00004423                 lea     eax, [edx+0Ch]
.text$x:00004426                 mov     ecx, [edx-10h]
.text$x:00004429                 xor     ecx, eax
.text$x:0000442B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004430                 mov     eax, offset __ehfuncinfo$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:00004435                 jmp     ___CxxFrameHandler3
.text$x:00004435 __ehhandler$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:00004435
.text$x:0000443A
.text$x:0000443A ; =============== S U B R O U T I N E =======================================
.text$x:0000443A
.text$x:0000443A
.text$x:0000443A __unwindfunclet$?isAllowedBeforeDriveLetter@@YA_N_W@Z$0 proc near
.text$x:0000443A                                         ; DATA XREF: .xdata$x:000101A4o
.text$x:0000443A                 lea     ecx, [ebp-18h]  ; this
.text$x:0000443D                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:0000443D __unwindfunclet$?isAllowedBeforeDriveLetter@@YA_N_W@Z$0 endp
.text$x:0000443D
.text$x:00004442
.text$x:00004442 ; =============== S U B R O U T I N E =======================================
.text$x:00004442
.text$x:00004442
.text$x:00004442 __ehhandler$?isAllowedBeforeDriveLetter@@YA_N_W@Z proc near
.text$x:00004442                                         ; DATA XREF: isAllowedBeforeDriveLetter(wchar_t)+5o
.text$x:00004442
.text$x:00004442 arg_4           = dword ptr  8
.text$x:00004442
.text$x:00004442                 mov     edx, [esp+arg_4]
.text$x:00004446                 lea     eax, [edx+0Ch]
.text$x:00004449                 mov     ecx, [edx-10h]
.text$x:0000444C                 xor     ecx, eax
.text$x:0000444E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004453                 mov     eax, offset __ehfuncinfo$?isAllowedBeforeDriveLetter@@YA_N_W@Z
.text$x:00004458                 jmp     ___CxxFrameHandler3
.text$x:00004458 __ehhandler$?isAllowedBeforeDriveLetter@@YA_N_W@Z endp
.text$x:00004458
.text$x:0000445D
.text$x:0000445D ; =============== S U B R O U T I N E =======================================
.text$x:0000445D
.text$x:0000445D
.text$x:0000445D __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$0 proc near
.text$x:0000445D                                         ; DATA XREF: .xdata$x:000101E4o
.text$x:0000445D                 lea     ecx, [ebp+8]
.text$x:00004460                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004460 __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$0 endp
.text$x:00004460
.text$x:00004465
.text$x:00004465 ; =============== S U B R O U T I N E =======================================
.text$x:00004465
.text$x:00004465
.text$x:00004465 __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$1 proc near
.text$x:00004465                                         ; DATA XREF: .xdata$x:000101ECo
.text$x:00004465                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00004468                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:00004468 __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$1 endp
.text$x:00004468
.text$x:0000446D
.text$x:0000446D ; =============== S U B R O U T I N E =======================================
.text$x:0000446D
.text$x:0000446D
.text$x:0000446D __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$2 proc near
.text$x:0000446D                                         ; DATA XREF: .xdata$x:000101F4o
.text$x:0000446D                 lea     ecx, [ebp-2Ch]
.text$x:00004470                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004470 __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$2 endp
.text$x:00004470
.text$x:00004475
.text$x:00004475 ; =============== S U B R O U T I N E =======================================
.text$x:00004475
.text$x:00004475
.text$x:00004475 __ehhandler$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z proc near
.text$x:00004475                                         ; DATA XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:00004475
.text$x:00004475 arg_4           = dword ptr  8
.text$x:00004475
.text$x:00004475                 mov     edx, [esp+arg_4]
.text$x:00004479                 lea     eax, [edx+0Ch]
.text$x:0000447C                 mov     ecx, [edx-3Ch]
.text$x:0000447F                 xor     ecx, eax
.text$x:00004481                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004486                 mov     ecx, [edx-4]
.text$x:00004489                 xor     ecx, eax
.text$x:0000448B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004490                 mov     eax, offset __ehfuncinfo$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z
.text$x:00004495                 jmp     ___CxxFrameHandler3
.text$x:00004495 __ehhandler$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z endp
.text$x:00004495
.text$x:0000449A
.text$x:0000449A ; =============== S U B R O U T I N E =======================================
.text$x:0000449A
.text$x:0000449A
.text$x:0000449A __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$0 proc near
.text$x:0000449A                                         ; DATA XREF: .xdata$x:000104C8o
.text$x:0000449A                 lea     ecx, [ebp+8]
.text$x:0000449D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000449D __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$0 endp
.text$x:0000449D
.text$x:000044A2
.text$x:000044A2 ; =============== S U B R O U T I N E =======================================
.text$x:000044A2
.text$x:000044A2
.text$x:000044A2 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$1 proc near
.text$x:000044A2                                         ; DATA XREF: .xdata$x:000104D0o
.text$x:000044A2                 lea     ecx, [ebp-2Ch]
.text$x:000044A5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044A5 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$1 endp
.text$x:000044A5
.text$x:000044AA
.text$x:000044AA ; =============== S U B R O U T I N E =======================================
.text$x:000044AA
.text$x:000044AA
.text$x:000044AA __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$2 proc near
.text$x:000044AA                                         ; DATA XREF: .xdata$x:000104D8o
.text$x:000044AA                 mov     ecx, [ebp-80h]
.text$x:000044AD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044AD __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$2 endp
.text$x:000044AD
.text$x:000044B2
.text$x:000044B2 ; =============== S U B R O U T I N E =======================================
.text$x:000044B2
.text$x:000044B2
.text$x:000044B2 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$3 proc near
.text$x:000044B2                                         ; DATA XREF: .xdata$x:000104E0o
.text$x:000044B2                 mov     ecx, [ebp-9Ch]
.text$x:000044B8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044B8 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$3 endp
.text$x:000044B8
.text$x:000044BD
.text$x:000044BD ; =============== S U B R O U T I N E =======================================
.text$x:000044BD
.text$x:000044BD
.text$x:000044BD __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$4 proc near
.text$x:000044BD                                         ; DATA XREF: .xdata$x:000104E8o
.text$x:000044BD                 mov     ecx, [ebp-88h]
.text$x:000044C3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044C3 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$4 endp
.text$x:000044C3
.text$x:000044C8
.text$x:000044C8 ; =============== S U B R O U T I N E =======================================
.text$x:000044C8
.text$x:000044C8
.text$x:000044C8 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$5 proc near
.text$x:000044C8                                         ; DATA XREF: .xdata$x:000104F0o
.text$x:000044C8                 mov     ecx, [ebp-90h]
.text$x:000044CE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044CE __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$5 endp
.text$x:000044CE
.text$x:000044D3
.text$x:000044D3 ; =============== S U B R O U T I N E =======================================
.text$x:000044D3
.text$x:000044D3
.text$x:000044D3 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$6 proc near
.text$x:000044D3                                         ; DATA XREF: .xdata$x:000104F8o
.text$x:000044D3                 mov     ecx, [ebp-84h]
.text$x:000044D9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044D9 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$6 endp
.text$x:000044D9
.text$x:000044DE
.text$x:000044DE ; =============== S U B R O U T I N E =======================================
.text$x:000044DE
.text$x:000044DE
.text$x:000044DE __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$7 proc near
.text$x:000044DE                                         ; DATA XREF: .xdata$x:00010500o
.text$x:000044DE                 lea     ecx, [ebp-48h]
.text$x:000044E1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000044E1 __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$7 endp
.text$x:000044E1
.text$x:000044E6
.text$x:000044E6 ; =============== S U B R O U T I N E =======================================
.text$x:000044E6
.text$x:000044E6
.text$x:000044E6 __ehhandler$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z proc near
.text$x:000044E6                                         ; DATA XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:000044E6
.text$x:000044E6 arg_4           = dword ptr  8
.text$x:000044E6
.text$x:000044E6                 mov     edx, [esp+arg_4]
.text$x:000044EA                 lea     eax, [edx+0Ch]
.text$x:000044ED                 mov     ecx, [edx-98h]
.text$x:000044F3                 xor     ecx, eax
.text$x:000044F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044FA                 mov     ecx, [edx-4]
.text$x:000044FD                 xor     ecx, eax
.text$x:000044FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004504                 mov     eax, offset __ehfuncinfo$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z
.text$x:00004509                 jmp     ___CxxFrameHandler3
.text$x:00004509 __ehhandler$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z endp
.text$x:00004509
.text$x:00004509 ; ---------------------------------------------------------------------------
.text$x:0000450E                 align 10h
.text$x:0000450E _text$x         ends
.text$x:0000450E
.text$mn:00004510 ; ===========================================================================
.text$mn:00004510
.text$mn:00004510 ; Segment type: Pure code
.text$mn:00004510 ; Segment permissions: Read/Execute
.text$mn:00004510 _text$mn        segment para public 'CODE' use32
.text$mn:00004510                 assume cs:_text$mn
.text$mn:00004510                 ;org 4510h
.text$mn:00004510 ; COMDAT (pick any)
.text$mn:00004510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004510
.text$mn:00004510 ; =============== S U B R O U T I N E =======================================
.text$mn:00004510
.text$mn:00004510 ; Attributes: bp-based frame
.text$mn:00004510
.text$mn:00004510 ; public: __thiscall std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &)
.text$mn:00004510                 public ??$?0AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAPAV01@X@?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@QAE@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z
.text$mn:00004510 ??$?0AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAPAV01@X@?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@QAE@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z proc near
.text$mn:00004510                                         ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+22Dp
.text$mn:00004510
.text$mn:00004510 var_4           = dword ptr -4
.text$mn:00004510 arg_0           = dword ptr  8
.text$mn:00004510 arg_4           = dword ptr  0Ch
.text$mn:00004510
.text$mn:00004510                 push    ebp
.text$mn:00004511                 mov     ebp, esp
.text$mn:00004513                 push    ecx
.text$mn:00004514                 mov     [ebp+var_4], ecx
.text$mn:00004517                 mov     eax, [ebp+arg_0]
.text$mn:0000451A                 push    eax
.text$mn:0000451B                 call    ??$forward@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &)
.text$mn:00004520                 add     esp, 4
.text$mn:00004523                 mov     ecx, [ebp+var_4]
.text$mn:00004526                 mov     edx, [eax]
.text$mn:00004528                 mov     [ecx], edx
.text$mn:0000452A                 mov     eax, [ebp+arg_4]
.text$mn:0000452D                 push    eax
.text$mn:0000452E                 call    ??$forward@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &)
.text$mn:00004533                 add     esp, 4
.text$mn:00004536                 mov     ecx, [ebp+var_4]
.text$mn:00004539                 mov     edx, [eax]
.text$mn:0000453B                 mov     [ecx+4], edx
.text$mn:0000453E                 mov     eax, [ebp+var_4]
.text$mn:00004541                 mov     esp, ebp
.text$mn:00004543                 pop     ebp
.text$mn:00004544                 retn    8
.text$mn:00004544 ??$?0AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAPAV01@X@?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@QAE@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z endp
.text$mn:00004544
.text$mn:00004544 ; ---------------------------------------------------------------------------
.text$mn:00004547                 align 4
.text$mn:00004547 _text$mn        ends
.text$mn:00004547
.text$mn:00004548 ; ===========================================================================
.text$mn:00004548
.text$mn:00004548 ; Segment type: Pure code
.text$mn:00004548 ; Segment permissions: Read/Execute
.text$mn:00004548 _text$mn        segment para public 'CODE' use32
.text$mn:00004548                 assume cs:_text$mn
.text$mn:00004548                 ;org 4548h
.text$mn:00004548 ; COMDAT (pick any)
.text$mn:00004548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004548
.text$mn:00004548 ; =============== S U B R O U T I N E =======================================
.text$mn:00004548
.text$mn:00004548 ; Attributes: bp-based frame
.text$mn:00004548
.text$mn:00004548 ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00004548                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00004548 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00004548                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:00004548                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+52p
.text$mn:00004548
.text$mn:00004548 var_2           = byte ptr -2
.text$mn:00004548 var_1           = byte ptr -1
.text$mn:00004548 arg_0           = dword ptr  8
.text$mn:00004548 arg_4           = dword ptr  0Ch
.text$mn:00004548
.text$mn:00004548                 push    ebp
.text$mn:00004549                 mov     ebp, esp
.text$mn:0000454B                 push    ecx
.text$mn:0000454C                 mov     eax, [ebp+arg_4]
.text$mn:0000454F                 push    eax
.text$mn:00004550                 lea     ecx, [ebp+var_1]
.text$mn:00004553                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004558                 push    eax
.text$mn:00004559                 mov     ecx, [ebp+arg_0]
.text$mn:0000455C                 push    ecx
.text$mn:0000455D                 lea     ecx, [ebp+var_2]
.text$mn:00004560                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004565                 push    eax
.text$mn:00004566                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:0000456B                 add     esp, 8
.text$mn:0000456E                 mov     esp, ebp
.text$mn:00004570                 pop     ebp
.text$mn:00004571                 retn
.text$mn:00004571 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00004571
.text$mn:00004571 ; ---------------------------------------------------------------------------
.text$mn:00004572                 align 4
.text$mn:00004572 _text$mn        ends
.text$mn:00004572
.text$mn:00004574 ; ===========================================================================
.text$mn:00004574
.text$mn:00004574 ; Segment type: Pure code
.text$mn:00004574 ; Segment permissions: Read/Execute
.text$mn:00004574 _text$mn        segment para public 'CODE' use32
.text$mn:00004574                 assume cs:_text$mn
.text$mn:00004574                 ;org 4574h
.text$mn:00004574 ; COMDAT (pick any)
.text$mn:00004574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004574
.text$mn:00004574 ; =============== S U B R O U T I N E =======================================
.text$mn:00004574
.text$mn:00004574 ; Attributes: bp-based frame
.text$mn:00004574
.text$mn:00004574 ; bool __cdecl std::operator==<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004574                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00004574 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00004574                                         ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+62p
.text$mn:00004574
.text$mn:00004574 var_4           = dword ptr -4
.text$mn:00004574 arg_0           = dword ptr  8
.text$mn:00004574 arg_4           = dword ptr  0Ch
.text$mn:00004574
.text$mn:00004574                 push    ebp
.text$mn:00004575                 mov     ebp, esp
.text$mn:00004577                 push    ecx
.text$mn:00004578                 mov     eax, [ebp+arg_4]
.text$mn:0000457B                 push    eax
.text$mn:0000457C                 mov     ecx, [ebp+arg_0]
.text$mn:0000457F                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004584                 test    eax, eax
.text$mn:00004586                 jnz     short loc_4591
.text$mn:00004588                 mov     [ebp+var_4], 1
.text$mn:0000458F                 jmp     short loc_4598
.text$mn:00004591 ; ---------------------------------------------------------------------------
.text$mn:00004591
.text$mn:00004591 loc_4591:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:00004591                 mov     [ebp+var_4], 0
.text$mn:00004598
.text$mn:00004598 loc_4598:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:00004598                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000459B                 mov     esp, ebp
.text$mn:0000459D                 pop     ebp
.text$mn:0000459E                 retn
.text$mn:0000459E ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:0000459E
.text$mn:0000459E ; ---------------------------------------------------------------------------
.text$mn:0000459F                 align 10h
.text$mn:0000459F _text$mn        ends
.text$mn:0000459F
.text$mn:000045A0 ; ===========================================================================
.text$mn:000045A0
.text$mn:000045A0 ; Segment type: Pure code
.text$mn:000045A0 ; Segment permissions: Read/Execute
.text$mn:000045A0 _text$mn        segment para public 'CODE' use32
.text$mn:000045A0                 assume cs:_text$mn
.text$mn:000045A0                 ;org 45A0h
.text$mn:000045A0 ; COMDAT (pick any)
.text$mn:000045A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045A0
.text$mn:000045A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000045A0
.text$mn:000045A0 ; Attributes: bp-based frame
.text$mn:000045A0
.text$mn:000045A0 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:000045A0                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:000045A0 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:000045A0                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+2ACp
.text$mn:000045A0                                         ; AutoCompletion::showPathCompletion(void)+301p
.text$mn:000045A0
.text$mn:000045A0 var_4           = dword ptr -4
.text$mn:000045A0 arg_0           = dword ptr  8
.text$mn:000045A0 Str             = dword ptr  0Ch
.text$mn:000045A0
.text$mn:000045A0                 push    ebp
.text$mn:000045A1                 mov     ebp, esp
.text$mn:000045A3                 push    ecx
.text$mn:000045A4                 mov     eax, [ebp+Str]
.text$mn:000045A7                 push    eax             ; Str
.text$mn:000045A8                 mov     ecx, [ebp+arg_0]
.text$mn:000045AB                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:000045B0                 test    eax, eax
.text$mn:000045B2                 jnz     short loc_45BD
.text$mn:000045B4                 mov     [ebp+var_4], 1
.text$mn:000045BB                 jmp     short loc_45C4
.text$mn:000045BD ; ---------------------------------------------------------------------------
.text$mn:000045BD
.text$mn:000045BD loc_45BD:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:000045BD                 mov     [ebp+var_4], 0
.text$mn:000045C4
.text$mn:000045C4 loc_45C4:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:000045C4                 mov     al, byte ptr [ebp+var_4]
.text$mn:000045C7                 mov     esp, ebp
.text$mn:000045C9                 pop     ebp
.text$mn:000045CA                 retn
.text$mn:000045CA ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:000045CA
.text$mn:000045CA ; ---------------------------------------------------------------------------
.text$mn:000045CB                 align 4
.text$mn:000045CB _text$mn        ends
.text$mn:000045CB
.text$mn:000045CC ; ===========================================================================
.text$mn:000045CC
.text$mn:000045CC ; Segment type: Pure code
.text$mn:000045CC ; Segment permissions: Read/Execute
.text$mn:000045CC _text$mn        segment para public 'CODE' use32
.text$mn:000045CC                 assume cs:_text$mn
.text$mn:000045CC                 ;org 45CCh
.text$mn:000045CC ; COMDAT (pick any)
.text$mn:000045CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045CC
.text$mn:000045CC ; =============== S U B R O U T I N E =======================================
.text$mn:000045CC
.text$mn:000045CC ; Attributes: bp-based frame
.text$mn:000045CC
.text$mn:000045CC ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:000045CC                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:000045CC ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:000045CC                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:000045CC                 push    ebp
.text$mn:000045CD                 mov     ebp, esp
.text$mn:000045CF                 mov     al, 1
.text$mn:000045D1                 pop     ebp
.text$mn:000045D2                 retn
.text$mn:000045D2 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:000045D2
.text$mn:000045D2 ; ---------------------------------------------------------------------------
.text$mn:000045D3                 align 4
.text$mn:000045D3 _text$mn        ends
.text$mn:000045D3
.text$mn:000045D4 ; ===========================================================================
.text$mn:000045D4
.text$mn:000045D4 ; Segment type: Pure code
.text$mn:000045D4 ; Segment permissions: Read/Execute
.text$mn:000045D4 _text$mn        segment para public 'CODE' use32
.text$mn:000045D4                 assume cs:_text$mn
.text$mn:000045D4                 ;org 45D4h
.text$mn:000045D4 ; COMDAT (pick any)
.text$mn:000045D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045D4
.text$mn:000045D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000045D4
.text$mn:000045D4 ; Attributes: bp-based frame
.text$mn:000045D4
.text$mn:000045D4 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000045D4                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:000045D4 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:000045D4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:000045D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:000045D4
.text$mn:000045D4 var_4           = dword ptr -4
.text$mn:000045D4 arg_0           = dword ptr  8
.text$mn:000045D4 arg_4           = dword ptr  0Ch
.text$mn:000045D4
.text$mn:000045D4                 push    ebp
.text$mn:000045D5                 mov     ebp, esp
.text$mn:000045D7                 push    ecx
.text$mn:000045D8                 mov     eax, [ebp+arg_4]
.text$mn:000045DB                 push    eax
.text$mn:000045DC                 mov     ecx, [ebp+arg_0]
.text$mn:000045DF                 push    ecx
.text$mn:000045E0                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000045E5                 add     esp, 8
.text$mn:000045E8                 movzx   edx, al
.text$mn:000045EB                 test    edx, edx
.text$mn:000045ED                 jnz     short loc_45F8
.text$mn:000045EF                 mov     [ebp+var_4], 1
.text$mn:000045F6                 jmp     short loc_45FF
.text$mn:000045F8 ; ---------------------------------------------------------------------------
.text$mn:000045F8
.text$mn:000045F8 loc_45F8:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:000045F8                 mov     [ebp+var_4], 0
.text$mn:000045FF
.text$mn:000045FF loc_45FF:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:000045FF                 mov     al, byte ptr [ebp+var_4]
.text$mn:00004602                 mov     esp, ebp
.text$mn:00004604                 pop     ebp
.text$mn:00004605                 retn
.text$mn:00004605 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00004605
.text$mn:00004605 ; ---------------------------------------------------------------------------
.text$mn:00004606                 align 4
.text$mn:00004606 _text$mn        ends
.text$mn:00004606
.text$mn:00004608 ; ===========================================================================
.text$mn:00004608
.text$mn:00004608 ; Segment type: Pure code
.text$mn:00004608 ; Segment permissions: Read/Execute
.text$mn:00004608 _text$mn        segment para public 'CODE' use32
.text$mn:00004608                 assume cs:_text$mn
.text$mn:00004608                 ;org 4608h
.text$mn:00004608 ; COMDAT (pick any)
.text$mn:00004608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004608
.text$mn:00004608 ; =============== S U B R O U T I N E =======================================
.text$mn:00004608
.text$mn:00004608 ; Attributes: bp-based frame
.text$mn:00004608
.text$mn:00004608 ; int __cdecl std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, int, wchar_t *Str)
.text$mn:00004608                 public ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$mn:00004608 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z proc near
.text$mn:00004608                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+1FDp
.text$mn:00004608                                         ; addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+8Fp
.text$mn:00004608
.text$mn:00004608 var_30          = dword ptr -30h
.text$mn:00004608 var_2C          = byte ptr -2Ch
.text$mn:00004608 var_10          = dword ptr -10h
.text$mn:00004608 var_C           = dword ptr -0Ch
.text$mn:00004608 var_4           = dword ptr -4
.text$mn:00004608 arg_0           = dword ptr  8
.text$mn:00004608 arg_4           = dword ptr  0Ch
.text$mn:00004608 Str             = dword ptr  10h
.text$mn:00004608
.text$mn:00004608                 push    ebp
.text$mn:00004609                 mov     ebp, esp
.text$mn:0000460B                 push    0FFFFFFFFh
.text$mn:0000460D                 push    offset __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$mn:00004612                 mov     eax, large fs:0
.text$mn:00004618                 push    eax
.text$mn:00004619                 sub     esp, 24h
.text$mn:0000461C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004621                 xor     eax, ebp
.text$mn:00004623                 mov     [ebp+var_10], eax
.text$mn:00004626                 push    esi
.text$mn:00004627                 push    eax
.text$mn:00004628                 lea     eax, [ebp+var_C]
.text$mn:0000462B                 mov     large fs:0, eax
.text$mn:00004631                 mov     [ebp+var_30], 0
.text$mn:00004638                 lea     ecx, [ebp+var_2C]
.text$mn:0000463B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004640                 mov     [ebp+var_4], 1
.text$mn:00004647                 mov     ecx, [ebp+arg_4]
.text$mn:0000464A                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000464F                 mov     esi, eax
.text$mn:00004651                 mov     eax, [ebp+Str]
.text$mn:00004654                 push    eax             ; Str
.text$mn:00004655                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000465A                 add     esp, 4
.text$mn:0000465D                 add     esi, eax
.text$mn:0000465F                 push    esi
.text$mn:00004660                 lea     ecx, [ebp+var_2C]
.text$mn:00004663                 call    ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)
.text$mn:00004668                 mov     ecx, [ebp+arg_4]
.text$mn:0000466B                 push    ecx
.text$mn:0000466C                 lea     ecx, [ebp+var_2C]
.text$mn:0000466F                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004674                 mov     edx, [ebp+Str]
.text$mn:00004677                 push    edx             ; Str
.text$mn:00004678                 lea     ecx, [ebp+var_2C]
.text$mn:0000467B                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00004680                 lea     eax, [ebp+var_2C]
.text$mn:00004683                 push    eax
.text$mn:00004684                 mov     ecx, [ebp+arg_0]
.text$mn:00004687                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000468C                 mov     ecx, [ebp+var_30]
.text$mn:0000468F                 or      ecx, 1
.text$mn:00004692                 mov     [ebp+var_30], ecx
.text$mn:00004695                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004699                 lea     ecx, [ebp+var_2C]
.text$mn:0000469C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000046A1                 mov     eax, [ebp+arg_0]
.text$mn:000046A4                 mov     ecx, [ebp+var_C]
.text$mn:000046A7                 mov     large fs:0, ecx
.text$mn:000046AE                 pop     ecx
.text$mn:000046AF                 pop     esi
.text$mn:000046B0                 mov     ecx, [ebp+var_10]
.text$mn:000046B3                 xor     ecx, ebp
.text$mn:000046B5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000046BA                 mov     esp, ebp
.text$mn:000046BC                 pop     ebp
.text$mn:000046BD                 retn
.text$mn:000046BD ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z endp
.text$mn:000046BD
.text$mn:000046BD ; ---------------------------------------------------------------------------
.text$mn:000046BE                 align 10h
.text$mn:000046BE _text$mn        ends
.text$mn:000046BE
.text$x:000046C0 ; ===========================================================================
.text$x:000046C0
.text$x:000046C0 ; Segment type: Pure code
.text$x:000046C0 ; Segment permissions: Read/Execute
.text$x:000046C0 _text$x         segment para public 'CODE' use32
.text$x:000046C0                 assume cs:_text$x
.text$x:000046C0                 ;org 46C0h
.text$x:000046C0 ; COMDAT (pick associative to section at 4608)
.text$x:000046C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046C0
.text$x:000046C0 ; =============== S U B R O U T I N E =======================================
.text$x:000046C0
.text$x:000046C0
.text$x:000046C0 __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0 proc near
.text$x:000046C0                                         ; DATA XREF: .xdata$x:000108B0o
.text$x:000046C0                 lea     ecx, [ebp-2Ch]
.text$x:000046C3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000046C3 __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0 endp
.text$x:000046C3
.text$x:000046C8
.text$x:000046C8 ; =============== S U B R O U T I N E =======================================
.text$x:000046C8
.text$x:000046C8
.text$x:000046C8 __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1 proc near
.text$x:000046C8                                         ; DATA XREF: .xdata$x:000108A8o
.text$x:000046C8                 mov     eax, [ebp-30h]
.text$x:000046CB                 and     eax, 1
.text$x:000046CE                 jz      $LN5_0
.text$x:000046D4                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:000046D8                 mov     ecx, [ebp+8]
.text$x:000046DB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000046E0 ; ---------------------------------------------------------------------------
.text$x:000046E0
.text$x:000046E0 $LN5_0:                                 ; CODE XREF: __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1+6j
.text$x:000046E0                 retn
.text$x:000046E0 __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1 endp
.text$x:000046E0
.text$x:000046E1
.text$x:000046E1 ; =============== S U B R O U T I N E =======================================
.text$x:000046E1
.text$x:000046E1
.text$x:000046E1 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z proc near
.text$x:000046E1                                         ; DATA XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+5o
.text$x:000046E1
.text$x:000046E1 arg_4           = dword ptr  8
.text$x:000046E1
.text$x:000046E1                 mov     edx, [esp+arg_4]
.text$x:000046E5                 lea     eax, [edx+0Ch]
.text$x:000046E8                 mov     ecx, [edx-2Ch]
.text$x:000046EB                 xor     ecx, eax
.text$x:000046ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046F2                 mov     ecx, [edx-4]
.text$x:000046F5                 xor     ecx, eax
.text$x:000046F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046FC                 mov     eax, offset __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$x:00004701                 jmp     ___CxxFrameHandler3
.text$x:00004701 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z endp
.text$x:00004701
.text$x:00004701 ; ---------------------------------------------------------------------------
.text$x:00004706                 align 4
.text$x:00004706 _text$x         ends
.text$x:00004706
.text$mn:00004708 ; ===========================================================================
.text$mn:00004708
.text$mn:00004708 ; Segment type: Pure code
.text$mn:00004708 ; Segment permissions: Read/Execute
.text$mn:00004708 _text$mn        segment para public 'CODE' use32
.text$mn:00004708                 assume cs:_text$mn
.text$mn:00004708                 ;org 4708h
.text$mn:00004708 ; COMDAT (pick any)
.text$mn:00004708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004708
.text$mn:00004708 ; =============== S U B R O U T I N E =======================================
.text$mn:00004708
.text$mn:00004708 ; Attributes: bp-based frame
.text$mn:00004708
.text$mn:00004708 ; bool __cdecl std::operator<<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004708                 public ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00004708 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00004708                                         ; CODE XREF: std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+Fp
.text$mn:00004708
.text$mn:00004708 var_4           = dword ptr -4
.text$mn:00004708 arg_0           = dword ptr  8
.text$mn:00004708 arg_4           = dword ptr  0Ch
.text$mn:00004708
.text$mn:00004708                 push    ebp
.text$mn:00004709                 mov     ebp, esp
.text$mn:0000470B                 push    ecx
.text$mn:0000470C                 mov     eax, [ebp+arg_4]
.text$mn:0000470F                 push    eax
.text$mn:00004710                 mov     ecx, [ebp+arg_0]
.text$mn:00004713                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004718                 test    eax, eax
.text$mn:0000471A                 jge     short loc_4725
.text$mn:0000471C                 mov     [ebp+var_4], 1
.text$mn:00004723                 jmp     short loc_472C
.text$mn:00004725 ; ---------------------------------------------------------------------------
.text$mn:00004725
.text$mn:00004725 loc_4725:                               ; CODE XREF: std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:00004725                 mov     [ebp+var_4], 0
.text$mn:0000472C
.text$mn:0000472C loc_472C:                               ; CODE XREF: std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:0000472C                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000472F                 mov     esp, ebp
.text$mn:00004731                 pop     ebp
.text$mn:00004732                 retn
.text$mn:00004732 ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00004732
.text$mn:00004732 ; ---------------------------------------------------------------------------
.text$mn:00004733                 align 4
.text$mn:00004733 _text$mn        ends
.text$mn:00004733
.text$mn:00004734 ; ===========================================================================
.text$mn:00004734
.text$mn:00004734 ; Segment type: Pure code
.text$mn:00004734 ; Segment permissions: Read/Execute
.text$mn:00004734 _text$mn        segment para public 'CODE' use32
.text$mn:00004734                 assume cs:_text$mn
.text$mn:00004734                 ;org 4734h
.text$mn:00004734 ; COMDAT (pick any)
.text$mn:00004734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004734
.text$mn:00004734 ; =============== S U B R O U T I N E =======================================
.text$mn:00004734
.text$mn:00004734 ; Attributes: bp-based frame
.text$mn:00004734
.text$mn:00004734 ; public: bool __thiscall std::less<void>::operator()<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)const
.text$mn:00004734                 public ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z
.text$mn:00004734 ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z proc near
.text$mn:00004734                                         ; CODE XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+20p
.text$mn:00004734                                         ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+4Fp ...
.text$mn:00004734
.text$mn:00004734 var_4           = dword ptr -4
.text$mn:00004734 arg_0           = dword ptr  8
.text$mn:00004734 arg_4           = dword ptr  0Ch
.text$mn:00004734
.text$mn:00004734                 push    ebp
.text$mn:00004735                 mov     ebp, esp
.text$mn:00004737                 push    ecx
.text$mn:00004738                 mov     [ebp+var_4], ecx
.text$mn:0000473B                 mov     eax, [ebp+arg_4]
.text$mn:0000473E                 push    eax
.text$mn:0000473F                 mov     ecx, [ebp+arg_0]
.text$mn:00004742                 push    ecx
.text$mn:00004743                 call    ??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004748                 add     esp, 8
.text$mn:0000474B                 mov     esp, ebp
.text$mn:0000474D                 pop     ebp
.text$mn:0000474E                 retn    8
.text$mn:0000474E ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z endp
.text$mn:0000474E
.text$mn:0000474E ; ---------------------------------------------------------------------------
.text$mn:00004751                 align 4
.text$mn:00004751 _text$mn        ends
.text$mn:00004751
.text$mn:00004754 ; ===========================================================================
.text$mn:00004754
.text$mn:00004754 ; Segment type: Pure code
.text$mn:00004754 ; Segment permissions: Read/Execute
.text$mn:00004754 _text$mn        segment para public 'CODE' use32
.text$mn:00004754                 assume cs:_text$mn
.text$mn:00004754                 ;org 4754h
.text$mn:00004754 ; COMDAT (pick any)
.text$mn:00004754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004754
.text$mn:00004754 ; =============== S U B R O U T I N E =======================================
.text$mn:00004754
.text$mn:00004754 ; Attributes: bp-based frame
.text$mn:00004754
.text$mn:00004754 ; void __cdecl std::_Adjust_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&, struct std::less<void>)
.text$mn:00004754                 public ??$_Adjust_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z
.text$mn:00004754 ??$_Adjust_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z proc near
.text$mn:00004754                                         ; CODE XREF: std::_Make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,int *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+91p
.text$mn:00004754                                         ; std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>,int *)+3Fp
.text$mn:00004754
.text$mn:00004754 var_8           = dword ptr -8
.text$mn:00004754 var_4           = dword ptr -4
.text$mn:00004754 arg_0           = dword ptr  8
.text$mn:00004754 arg_4           = dword ptr  0Ch
.text$mn:00004754 arg_8           = dword ptr  10h
.text$mn:00004754 arg_C           = dword ptr  14h
.text$mn:00004754 arg_10          = byte ptr  18h
.text$mn:00004754
.text$mn:00004754                 push    ebp
.text$mn:00004755                 mov     ebp, esp
.text$mn:00004757                 sub     esp, 8
.text$mn:0000475A                 mov     eax, [ebp+arg_4]
.text$mn:0000475D                 mov     [ebp+var_8], eax
.text$mn:00004760                 mov     ecx, [ebp+arg_4]
.text$mn:00004763                 lea     edx, [ecx+ecx+2]
.text$mn:00004767                 mov     [ebp+var_4], edx
.text$mn:0000476A                 jmp     short loc_4776
.text$mn:0000476C ; ---------------------------------------------------------------------------
.text$mn:0000476C
.text$mn:0000476C loc_476C:                               ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+89j
.text$mn:0000476C                 mov     eax, [ebp+var_4]
.text$mn:0000476F                 lea     ecx, [eax+eax+2]
.text$mn:00004773                 mov     [ebp+var_4], ecx
.text$mn:00004776
.text$mn:00004776 loc_4776:                               ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+16j
.text$mn:00004776                 mov     edx, [ebp+var_4]
.text$mn:00004779                 cmp     edx, [ebp+arg_8]
.text$mn:0000477C                 jge     short loc_47DF
.text$mn:0000477E                 push    946h            ; unsigned int
.text$mn:00004783                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004788                 mov     eax, [ebp+var_4]
.text$mn:0000478B                 sub     eax, 1
.text$mn:0000478E                 imul    ecx, eax, 1Ch
.text$mn:00004791                 add     ecx, [ebp+arg_0]
.text$mn:00004794                 push    ecx             ; int
.text$mn:00004795                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00004799                 add     edx, [ebp+arg_0]
.text$mn:0000479C                 push    edx             ; int
.text$mn:0000479D                 movzx   eax, [ebp+arg_10]
.text$mn:000047A1                 push    eax             ; char
.text$mn:000047A2                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:000047A7                 add     esp, 14h
.text$mn:000047AA                 movzx   ecx, al
.text$mn:000047AD                 test    ecx, ecx
.text$mn:000047AF                 jz      short loc_47BA
.text$mn:000047B1                 mov     edx, [ebp+var_4]
.text$mn:000047B4                 sub     edx, 1
.text$mn:000047B7                 mov     [ebp+var_4], edx
.text$mn:000047BA
.text$mn:000047BA loc_47BA:                               ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+5Bj
.text$mn:000047BA                 imul    eax, [ebp+var_4], 1Ch
.text$mn:000047BE                 add     eax, [ebp+arg_0]
.text$mn:000047C1                 push    eax
.text$mn:000047C2                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000047C7                 add     esp, 4
.text$mn:000047CA                 push    eax
.text$mn:000047CB                 imul    ecx, [ebp+arg_4], 1Ch
.text$mn:000047CF                 add     ecx, [ebp+arg_0]
.text$mn:000047D2                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000047D7                 mov     ecx, [ebp+var_4]
.text$mn:000047DA                 mov     [ebp+arg_4], ecx
.text$mn:000047DD                 jmp     short loc_476C
.text$mn:000047DF ; ---------------------------------------------------------------------------
.text$mn:000047DF
.text$mn:000047DF loc_47DF:                               ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+28j
.text$mn:000047DF                 mov     edx, [ebp+var_4]
.text$mn:000047E2                 cmp     edx, [ebp+arg_8]
.text$mn:000047E5                 jnz     short loc_4812
.text$mn:000047E7                 mov     eax, [ebp+arg_8]
.text$mn:000047EA                 sub     eax, 1
.text$mn:000047ED                 imul    ecx, eax, 1Ch
.text$mn:000047F0                 add     ecx, [ebp+arg_0]
.text$mn:000047F3                 push    ecx
.text$mn:000047F4                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000047F9                 add     esp, 4
.text$mn:000047FC                 push    eax
.text$mn:000047FD                 imul    ecx, [ebp+arg_4], 1Ch
.text$mn:00004801                 add     ecx, [ebp+arg_0]
.text$mn:00004804                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00004809                 mov     edx, [ebp+arg_8]
.text$mn:0000480C                 sub     edx, 1
.text$mn:0000480F                 mov     [ebp+arg_4], edx
.text$mn:00004812
.text$mn:00004812 loc_4812:                               ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+91j
.text$mn:00004812                 movzx   eax, [ebp+arg_10]
.text$mn:00004816                 push    eax
.text$mn:00004817                 mov     ecx, [ebp+arg_C]
.text$mn:0000481A                 push    ecx
.text$mn:0000481B                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004820                 add     esp, 4
.text$mn:00004823                 push    eax
.text$mn:00004824                 mov     edx, [ebp+var_8]
.text$mn:00004827                 push    edx
.text$mn:00004828                 mov     eax, [ebp+arg_4]
.text$mn:0000482B                 push    eax
.text$mn:0000482C                 mov     ecx, [ebp+arg_0]
.text$mn:0000482F                 push    ecx
.text$mn:00004830                 call    ??$_Push_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Push_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)
.text$mn:00004835                 add     esp, 14h
.text$mn:00004838                 mov     esp, ebp
.text$mn:0000483A                 pop     ebp
.text$mn:0000483B                 retn
.text$mn:0000483B ??$_Adjust_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z endp
.text$mn:0000483B
.text$mn:0000483B _text$mn        ends
.text$mn:0000483B
.text$mn:0000483C ; ===========================================================================
.text$mn:0000483C
.text$mn:0000483C ; Segment type: Pure code
.text$mn:0000483C ; Segment permissions: Read/Execute
.text$mn:0000483C _text$mn        segment para public 'CODE' use32
.text$mn:0000483C                 assume cs:_text$mn
.text$mn:0000483C                 ;org 483Ch
.text$mn:0000483C ; COMDAT (pick any)
.text$mn:0000483C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000483C
.text$mn:0000483C ; =============== S U B R O U T I N E =======================================
.text$mn:0000483C
.text$mn:0000483C ; Attributes: bp-based frame
.text$mn:0000483C
.text$mn:0000483C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:0000483C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:0000483C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:0000483C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:0000483C
.text$mn:0000483C var_4           = dword ptr -4
.text$mn:0000483C arg_0           = dword ptr  8
.text$mn:0000483C
.text$mn:0000483C                 push    ebp
.text$mn:0000483D                 mov     ebp, esp
.text$mn:0000483F                 push    ecx
.text$mn:00004840                 mov     [ebp+var_4], 0
.text$mn:00004847                 cmp     [ebp+arg_0], 0
.text$mn:0000484B                 jnz     short loc_484F
.text$mn:0000484D                 jmp     short loc_486F
.text$mn:0000484F ; ---------------------------------------------------------------------------
.text$mn:0000484F
.text$mn:0000484F loc_484F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:0000484F                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00004853                 ja      short loc_486A
.text$mn:00004855                 mov     eax, [ebp+arg_0]
.text$mn:00004858                 push    eax             ; unsigned int
.text$mn:00004859                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000485E                 add     esp, 4
.text$mn:00004861                 mov     [ebp+var_4], eax
.text$mn:00004864                 cmp     [ebp+var_4], 0
.text$mn:00004868                 jnz     short loc_486F
.text$mn:0000486A
.text$mn:0000486A loc_486A:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:0000486A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000486F
.text$mn:0000486F loc_486F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:0000486F                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:0000486F                 mov     eax, [ebp+var_4]
.text$mn:00004872                 mov     esp, ebp
.text$mn:00004874                 pop     ebp
.text$mn:00004875                 retn
.text$mn:00004875 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00004875
.text$mn:00004875 ; ---------------------------------------------------------------------------
.text$mn:00004876                 align 4
.text$mn:00004876 _text$mn        ends
.text$mn:00004876
.text$mn:00004878 ; ===========================================================================
.text$mn:00004878
.text$mn:00004878 ; Segment type: Pure code
.text$mn:00004878 ; Segment permissions: Read/Execute
.text$mn:00004878 _text$mn        segment para public 'CODE' use32
.text$mn:00004878                 assume cs:_text$mn
.text$mn:00004878                 ;org 4878h
.text$mn:00004878 ; COMDAT (pick any)
.text$mn:00004878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004878
.text$mn:00004878 ; =============== S U B R O U T I N E =======================================
.text$mn:00004878
.text$mn:00004878 ; Attributes: bp-based frame
.text$mn:00004878
.text$mn:00004878 ; struct MatchedCharInserted * __cdecl std::_Allocate<struct MatchedCharInserted>(unsigned int, struct MatchedCharInserted *)
.text$mn:00004878                 public ??$_Allocate@UMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@IPAU1@@Z
.text$mn:00004878 ??$_Allocate@UMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@IPAU1@@Z proc near
.text$mn:00004878                                         ; CODE XREF: std::allocator<MatchedCharInserted>::allocate(uint)+Dp
.text$mn:00004878
.text$mn:00004878 var_4           = dword ptr -4
.text$mn:00004878 arg_0           = dword ptr  8
.text$mn:00004878
.text$mn:00004878                 push    ebp
.text$mn:00004879                 mov     ebp, esp
.text$mn:0000487B                 push    ecx
.text$mn:0000487C                 mov     [ebp+var_4], 0
.text$mn:00004883                 cmp     [ebp+arg_0], 0
.text$mn:00004887                 jnz     short loc_488B
.text$mn:00004889                 jmp     short loc_48B1
.text$mn:0000488B ; ---------------------------------------------------------------------------
.text$mn:0000488B
.text$mn:0000488B loc_488B:                               ; CODE XREF: std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *)+Fj
.text$mn:0000488B                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00004892                 ja      short loc_48AC
.text$mn:00004894                 mov     eax, [ebp+arg_0]
.text$mn:00004897                 shl     eax, 3
.text$mn:0000489A                 push    eax             ; unsigned int
.text$mn:0000489B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000048A0                 add     esp, 4
.text$mn:000048A3                 mov     [ebp+var_4], eax
.text$mn:000048A6                 cmp     [ebp+var_4], 0
.text$mn:000048AA                 jnz     short loc_48B1
.text$mn:000048AC
.text$mn:000048AC loc_48AC:                               ; CODE XREF: std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *)+1Aj
.text$mn:000048AC                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000048B1
.text$mn:000048B1 loc_48B1:                               ; CODE XREF: std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *)+11j
.text$mn:000048B1                                         ; std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *)+32j
.text$mn:000048B1                 mov     eax, [ebp+var_4]
.text$mn:000048B4                 mov     esp, ebp
.text$mn:000048B6                 pop     ebp
.text$mn:000048B7                 retn
.text$mn:000048B7 ??$_Allocate@UMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@IPAU1@@Z endp
.text$mn:000048B7
.text$mn:000048B7 _text$mn        ends
.text$mn:000048B7
.text$mn:000048B8 ; ===========================================================================
.text$mn:000048B8
.text$mn:000048B8 ; Segment type: Pure code
.text$mn:000048B8 ; Segment permissions: Read/Execute
.text$mn:000048B8 _text$mn        segment para public 'CODE' use32
.text$mn:000048B8                 assume cs:_text$mn
.text$mn:000048B8                 ;org 48B8h
.text$mn:000048B8 ; COMDAT (pick any)
.text$mn:000048B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048B8
.text$mn:000048B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048B8
.text$mn:000048B8 ; Attributes: bp-based frame
.text$mn:000048B8
.text$mn:000048B8 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:000048B8                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:000048B8 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:000048B8                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:000048B8
.text$mn:000048B8 var_4           = dword ptr -4
.text$mn:000048B8 arg_0           = dword ptr  8
.text$mn:000048B8
.text$mn:000048B8                 push    ebp
.text$mn:000048B9                 mov     ebp, esp
.text$mn:000048BB                 push    ecx
.text$mn:000048BC                 mov     [ebp+var_4], 0
.text$mn:000048C3                 cmp     [ebp+arg_0], 0
.text$mn:000048C7                 jnz     short loc_48CB
.text$mn:000048C9                 jmp     short loc_48F1
.text$mn:000048CB ; ---------------------------------------------------------------------------
.text$mn:000048CB
.text$mn:000048CB loc_48CB:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:000048CB                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:000048D2                 ja      short loc_48EC
.text$mn:000048D4                 mov     eax, [ebp+arg_0]
.text$mn:000048D7                 shl     eax, 3
.text$mn:000048DA                 push    eax             ; unsigned int
.text$mn:000048DB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000048E0                 add     esp, 4
.text$mn:000048E3                 mov     [ebp+var_4], eax
.text$mn:000048E6                 cmp     [ebp+var_4], 0
.text$mn:000048EA                 jnz     short loc_48F1
.text$mn:000048EC
.text$mn:000048EC loc_48EC:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:000048EC                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000048F1
.text$mn:000048F1 loc_48F1:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:000048F1                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:000048F1                 mov     eax, [ebp+var_4]
.text$mn:000048F4                 mov     esp, ebp
.text$mn:000048F6                 pop     ebp
.text$mn:000048F7                 retn
.text$mn:000048F7 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:000048F7
.text$mn:000048F7 _text$mn        ends
.text$mn:000048F7
.text$mn:000048F8 ; ===========================================================================
.text$mn:000048F8
.text$mn:000048F8 ; Segment type: Pure code
.text$mn:000048F8 ; Segment permissions: Read/Execute
.text$mn:000048F8 _text$mn        segment para public 'CODE' use32
.text$mn:000048F8                 assume cs:_text$mn
.text$mn:000048F8                 ;org 48F8h
.text$mn:000048F8 ; COMDAT (pick any)
.text$mn:000048F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048F8
.text$mn:000048F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048F8
.text$mn:000048F8 ; Attributes: bp-based frame
.text$mn:000048F8
.text$mn:000048F8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000048F8                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:000048F8 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:000048F8                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:000048F8
.text$mn:000048F8 var_4           = dword ptr -4
.text$mn:000048F8 arg_0           = dword ptr  8
.text$mn:000048F8
.text$mn:000048F8                 push    ebp
.text$mn:000048F9                 mov     ebp, esp
.text$mn:000048FB                 push    ecx
.text$mn:000048FC                 mov     [ebp+var_4], 0
.text$mn:00004903                 cmp     [ebp+arg_0], 0
.text$mn:00004907                 jnz     short loc_490B
.text$mn:00004909                 jmp     short loc_492F
.text$mn:0000490B ; ---------------------------------------------------------------------------
.text$mn:0000490B
.text$mn:0000490B loc_490B:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:0000490B                 cmp     [ebp+arg_0], 9249249h
.text$mn:00004912                 ja      short loc_492A
.text$mn:00004914                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00004918                 push    eax             ; unsigned int
.text$mn:00004919                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000491E                 add     esp, 4
.text$mn:00004921                 mov     [ebp+var_4], eax
.text$mn:00004924                 cmp     [ebp+var_4], 0
.text$mn:00004928                 jnz     short loc_492F
.text$mn:0000492A
.text$mn:0000492A loc_492A:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:0000492A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000492F
.text$mn:0000492F loc_492F:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:0000492F                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:0000492F                 mov     eax, [ebp+var_4]
.text$mn:00004932                 mov     esp, ebp
.text$mn:00004934                 pop     ebp
.text$mn:00004935                 retn
.text$mn:00004935 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:00004935
.text$mn:00004935 ; ---------------------------------------------------------------------------
.text$mn:00004936                 align 4
.text$mn:00004936 _text$mn        ends
.text$mn:00004936
.text$mn:00004938 ; ===========================================================================
.text$mn:00004938
.text$mn:00004938 ; Segment type: Pure code
.text$mn:00004938 ; Segment permissions: Read/Execute
.text$mn:00004938 _text$mn        segment para public 'CODE' use32
.text$mn:00004938                 assume cs:_text$mn
.text$mn:00004938                 ;org 4938h
.text$mn:00004938 ; COMDAT (pick any)
.text$mn:00004938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004938
.text$mn:00004938 ; =============== S U B R O U T I N E =======================================
.text$mn:00004938
.text$mn:00004938 ; Attributes: bp-based frame
.text$mn:00004938
.text$mn:00004938 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00004938                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00004938 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00004938                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00004938
.text$mn:00004938 var_4           = dword ptr -4
.text$mn:00004938 arg_0           = dword ptr  8
.text$mn:00004938
.text$mn:00004938                 push    ebp
.text$mn:00004939                 mov     ebp, esp
.text$mn:0000493B                 push    ecx
.text$mn:0000493C                 mov     [ebp+var_4], 0
.text$mn:00004943                 cmp     [ebp+arg_0], 0
.text$mn:00004947                 jnz     short loc_494B
.text$mn:00004949                 jmp     short loc_4970
.text$mn:0000494B ; ---------------------------------------------------------------------------
.text$mn:0000494B
.text$mn:0000494B loc_494B:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:0000494B                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:00004952                 ja      short loc_496B
.text$mn:00004954                 mov     eax, [ebp+arg_0]
.text$mn:00004957                 shl     eax, 1
.text$mn:00004959                 push    eax             ; unsigned int
.text$mn:0000495A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000495F                 add     esp, 4
.text$mn:00004962                 mov     [ebp+var_4], eax
.text$mn:00004965                 cmp     [ebp+var_4], 0
.text$mn:00004969                 jnz     short loc_4970
.text$mn:0000496B
.text$mn:0000496B loc_496B:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:0000496B                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004970
.text$mn:00004970 loc_4970:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00004970                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00004970                 mov     eax, [ebp+var_4]
.text$mn:00004973                 mov     esp, ebp
.text$mn:00004975                 pop     ebp
.text$mn:00004976                 retn
.text$mn:00004976 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00004976
.text$mn:00004976 ; ---------------------------------------------------------------------------
.text$mn:00004977                 align 4
.text$mn:00004977 _text$mn        ends
.text$mn:00004977
.text$mn:00004978 ; ===========================================================================
.text$mn:00004978
.text$mn:00004978 ; Segment type: Pure code
.text$mn:00004978 ; Segment permissions: Read/Execute
.text$mn:00004978 _text$mn        segment para public 'CODE' use32
.text$mn:00004978                 assume cs:_text$mn
.text$mn:00004978                 ;org 4978h
.text$mn:00004978 ; COMDAT (pick any)
.text$mn:00004978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004978
.text$mn:00004978 ; =============== S U B R O U T I N E =======================================
.text$mn:00004978
.text$mn:00004978 ; Attributes: bp-based frame
.text$mn:00004978
.text$mn:00004978 ; int __cdecl std::_DebugHeapDelete<std::_Facet_base>(void *Memory)
.text$mn:00004978                 public ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z
.text$mn:00004978 ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z proc near
.text$mn:00004978                                         ; CODE XREF: std::locale::~locale(void)+21p
.text$mn:00004978
.text$mn:00004978 Memory          = dword ptr  8
.text$mn:00004978
.text$mn:00004978                 push    ebp
.text$mn:00004979                 mov     ebp, esp
.text$mn:0000497B                 cmp     [ebp+Memory], 0
.text$mn:0000497F                 jz      short loc_499B
.text$mn:00004981                 push    0
.text$mn:00004983                 mov     eax, [ebp+Memory]
.text$mn:00004986                 mov     edx, [eax]
.text$mn:00004988                 mov     ecx, [ebp+Memory]
.text$mn:0000498B                 mov     eax, [edx]
.text$mn:0000498D                 call    eax
.text$mn:0000498F                 mov     ecx, [ebp+Memory]
.text$mn:00004992                 push    ecx             ; Memory
.text$mn:00004993                 call    _free
.text$mn:00004998                 add     esp, 4
.text$mn:0000499B
.text$mn:0000499B loc_499B:                               ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+7j
.text$mn:0000499B                 pop     ebp
.text$mn:0000499C                 retn
.text$mn:0000499C ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z endp
.text$mn:0000499C
.text$mn:0000499C ; ---------------------------------------------------------------------------
.text$mn:0000499D                 align 10h
.text$mn:0000499D _text$mn        ends
.text$mn:0000499D
.text$mn:000049A0 ; ===========================================================================
.text$mn:000049A0
.text$mn:000049A0 ; Segment type: Pure code
.text$mn:000049A0 ; Segment permissions: Read/Execute
.text$mn:000049A0 _text$mn        segment para public 'CODE' use32
.text$mn:000049A0                 assume cs:_text$mn
.text$mn:000049A0                 ;org 49A0h
.text$mn:000049A0 ; COMDAT (pick any)
.text$mn:000049A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049A0
.text$mn:000049A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049A0
.text$mn:000049A0 ; Attributes: bp-based frame
.text$mn:000049A0
.text$mn:000049A0 ; int __cdecl std::_DebugHeapDelete<std::locale::facet>(void *Memory)
.text$mn:000049A0                 public ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
.text$mn:000049A0 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z proc near
.text$mn:000049A0                                         ; CODE XREF: std::locale::facet::operator delete(void *)+7p
.text$mn:000049A0
.text$mn:000049A0 Memory          = dword ptr  8
.text$mn:000049A0
.text$mn:000049A0                 push    ebp
.text$mn:000049A1                 mov     ebp, esp
.text$mn:000049A3                 cmp     [ebp+Memory], 0
.text$mn:000049A7                 jz      short loc_49C3
.text$mn:000049A9                 push    0
.text$mn:000049AB                 mov     eax, [ebp+Memory]
.text$mn:000049AE                 mov     edx, [eax]
.text$mn:000049B0                 mov     ecx, [ebp+Memory]
.text$mn:000049B3                 mov     eax, [edx]
.text$mn:000049B5                 call    eax
.text$mn:000049B7                 mov     ecx, [ebp+Memory]
.text$mn:000049BA                 push    ecx             ; Memory
.text$mn:000049BB                 call    _free
.text$mn:000049C0                 add     esp, 4
.text$mn:000049C3
.text$mn:000049C3 loc_49C3:                               ; CODE XREF: std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+7j
.text$mn:000049C3                 pop     ebp
.text$mn:000049C4                 retn
.text$mn:000049C4 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z endp
.text$mn:000049C4
.text$mn:000049C4 ; ---------------------------------------------------------------------------
.text$mn:000049C5                 align 4
.text$mn:000049C5 _text$mn        ends
.text$mn:000049C5
.text$mn:000049C8 ; ===========================================================================
.text$mn:000049C8
.text$mn:000049C8 ; Segment type: Pure code
.text$mn:000049C8 ; Segment permissions: Read/Execute
.text$mn:000049C8 _text$mn        segment para public 'CODE' use32
.text$mn:000049C8                 assume cs:_text$mn
.text$mn:000049C8                 ;org 49C8h
.text$mn:000049C8 ; COMDAT (pick any)
.text$mn:000049C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049C8
.text$mn:000049C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000049C8
.text$mn:000049C8 ; Attributes: bp-based frame
.text$mn:000049C8
.text$mn:000049C8 ; void __cdecl std::_Debug_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:000049C8                 public ??$_Debug_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:000049C8 ??$_Debug_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:000049C8                                         ; CODE XREF: std::sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+52p
.text$mn:000049C8
.text$mn:000049C8 var_4           = dword ptr -4
.text$mn:000049C8 arg_0           = dword ptr  8
.text$mn:000049C8 arg_4           = dword ptr  0Ch
.text$mn:000049C8 arg_8           = byte ptr  10h
.text$mn:000049C8
.text$mn:000049C8                 push    ebp
.text$mn:000049C9                 mov     ebp, esp
.text$mn:000049CB                 push    ecx
.text$mn:000049CC                 mov     eax, [ebp+arg_0]
.text$mn:000049CF                 cmp     eax, [ebp+arg_4]
.text$mn:000049D2                 jz      loc_4A94
.text$mn:000049D8                 mov     ecx, [ebp+arg_0]
.text$mn:000049DB                 mov     [ebp+var_4], ecx
.text$mn:000049DE                 jmp     short loc_49E9
.text$mn:000049E0 ; ---------------------------------------------------------------------------
.text$mn:000049E0
.text$mn:000049E0 loc_49E0:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_4A8Fj
.text$mn:000049E0                 mov     edx, [ebp+var_4]
.text$mn:000049E3                 add     edx, 1Ch
.text$mn:000049E6                 mov     [ebp+var_4], edx
.text$mn:000049E9
.text$mn:000049E9 loc_49E9:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+16j
.text$mn:000049E9                 mov     eax, [ebp+arg_0]
.text$mn:000049EC                 add     eax, 1Ch
.text$mn:000049EF                 mov     [ebp+arg_0], eax
.text$mn:000049F2                 mov     ecx, [ebp+arg_0]
.text$mn:000049F5                 cmp     ecx, [ebp+arg_4]
.text$mn:000049F8                 jz      loc_4A94
.text$mn:000049FE                 push    8F0h            ; unsigned int
.text$mn:00004A03                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004A08                 mov     edx, [ebp+arg_0]
.text$mn:00004A0B                 push    edx             ; int
.text$mn:00004A0C                 mov     eax, [ebp+var_4]
.text$mn:00004A0F                 push    eax             ; int
.text$mn:00004A10                 movzx   ecx, [ebp+arg_8]
.text$mn:00004A14                 push    ecx             ; char
.text$mn:00004A15                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00004A1A                 add     esp, 14h
.text$mn:00004A1D                 movzx   edx, al
.text$mn:00004A20                 test    edx, edx
.text$mn:00004A22                 jz      short loc_4A3D
.text$mn:00004A24                 push    8F1h            ; unsigned int
.text$mn:00004A29                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004A2E                 push    offset ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; "invalid heap"
.text$mn:00004A33                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004A38                 add     esp, 0Ch
.text$mn:00004A3B                 jmp     short loc_4A8F
.text$mn:00004A3D ; ---------------------------------------------------------------------------
.text$mn:00004A3D
.text$mn:00004A3D loc_4A3D:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+5Aj
.text$mn:00004A3D                 mov     eax, [ebp+arg_0]
.text$mn:00004A40                 add     eax, 1Ch
.text$mn:00004A43                 mov     [ebp+arg_0], eax
.text$mn:00004A46                 mov     ecx, [ebp+arg_0]
.text$mn:00004A49                 cmp     ecx, [ebp+arg_4]
.text$mn:00004A4C                 jnz     short loc_4A52
.text$mn:00004A4E                 jmp     short loc_4A94
.text$mn:00004A50 ; ---------------------------------------------------------------------------
.text$mn:00004A50                 jmp     short loc_4A8F
.text$mn:00004A52 ; ---------------------------------------------------------------------------
.text$mn:00004A52
.text$mn:00004A52 loc_4A52:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+84j
.text$mn:00004A52                 push    8F4h            ; unsigned int
.text$mn:00004A57                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004A5C                 mov     edx, [ebp+arg_0]
.text$mn:00004A5F                 push    edx             ; int
.text$mn:00004A60                 mov     eax, [ebp+var_4]
.text$mn:00004A63                 push    eax             ; int
.text$mn:00004A64                 movzx   ecx, [ebp+arg_8]
.text$mn:00004A68                 push    ecx             ; char
.text$mn:00004A69                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00004A6E                 add     esp, 14h
.text$mn:00004A71                 movzx   edx, al
.text$mn:00004A74                 test    edx, edx
.text$mn:00004A76                 jz      short loc_4A8F
.text$mn:00004A78                 push    8F5h            ; unsigned int
.text$mn:00004A7D                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004A82                 push    offset ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; "invalid heap"
.text$mn:00004A87                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004A8C                 add     esp, 0Ch
.text$mn:00004A8F
.text$mn:00004A8F loc_4A8F:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+73j
.text$mn:00004A8F                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+88j ...
.text$mn:00004A8F                 jmp     loc_49E0
.text$mn:00004A94 ; ---------------------------------------------------------------------------
.text$mn:00004A94
.text$mn:00004A94 loc_4A94:                               ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+Aj
.text$mn:00004A94                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+30j ...
.text$mn:00004A94                 mov     esp, ebp
.text$mn:00004A96                 pop     ebp
.text$mn:00004A97                 retn
.text$mn:00004A97 ??$_Debug_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00004A97
.text$mn:00004A97 _text$mn        ends
.text$mn:00004A97
.text$mn:00004A98 ; ===========================================================================
.text$mn:00004A98
.text$mn:00004A98 ; Segment type: Pure code
.text$mn:00004A98 ; Segment permissions: Read/Execute
.text$mn:00004A98 _text$mn        segment para public 'CODE' use32
.text$mn:00004A98                 assume cs:_text$mn
.text$mn:00004A98                 ;org 4A98h
.text$mn:00004A98 ; COMDAT (pick any)
.text$mn:00004A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A98
.text$mn:00004A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A98
.text$mn:00004A98 ; Attributes: bp-based frame
.text$mn:00004A98
.text$mn:00004A98 ; int __cdecl std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(char, int, int, wchar_t *, unsigned int)
.text$mn:00004A98                 public ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z
.text$mn:00004A98 ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z proc near
.text$mn:00004A98                                         ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+4Ep
.text$mn:00004A98                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+4Dp ...
.text$mn:00004A98
.text$mn:00004A98 arg_0           = byte ptr  8
.text$mn:00004A98 arg_4           = dword ptr  0Ch
.text$mn:00004A98 arg_8           = dword ptr  10h
.text$mn:00004A98 arg_C           = dword ptr  14h
.text$mn:00004A98 arg_10          = dword ptr  18h
.text$mn:00004A98
.text$mn:00004A98                 push    ebp
.text$mn:00004A99                 mov     ebp, esp
.text$mn:00004A9B                 mov     eax, [ebp+arg_8]
.text$mn:00004A9E                 push    eax
.text$mn:00004A9F                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004AA4                 add     esp, 4
.text$mn:00004AA7                 push    eax
.text$mn:00004AA8                 mov     ecx, [ebp+arg_4]
.text$mn:00004AAB                 push    ecx
.text$mn:00004AAC                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004AB1                 add     esp, 4
.text$mn:00004AB4                 push    eax
.text$mn:00004AB5                 lea     ecx, [ebp+arg_0]
.text$mn:00004AB8                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004ABD                 movzx   edx, al
.text$mn:00004AC0                 test    edx, edx
.text$mn:00004AC2                 jnz     short loc_4ACA
.text$mn:00004AC4                 xor     al, al
.text$mn:00004AC6                 jmp     short loc_4B0A
.text$mn:00004AC8 ; ---------------------------------------------------------------------------
.text$mn:00004AC8                 jmp     short loc_4B08
.text$mn:00004ACA ; ---------------------------------------------------------------------------
.text$mn:00004ACA
.text$mn:00004ACA loc_4ACA:                               ; CODE XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+2Aj
.text$mn:00004ACA                 mov     eax, [ebp+arg_4]
.text$mn:00004ACD                 push    eax
.text$mn:00004ACE                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004AD3                 add     esp, 4
.text$mn:00004AD6                 push    eax
.text$mn:00004AD7                 mov     ecx, [ebp+arg_8]
.text$mn:00004ADA                 push    ecx
.text$mn:00004ADB                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004AE0                 add     esp, 4
.text$mn:00004AE3                 push    eax
.text$mn:00004AE4                 lea     ecx, [ebp+arg_0]
.text$mn:00004AE7                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004AEC                 movzx   edx, al
.text$mn:00004AEF                 test    edx, edx
.text$mn:00004AF1                 jz      short loc_4B08
.text$mn:00004AF3                 mov     eax, [ebp+arg_10]
.text$mn:00004AF6                 push    eax             ; unsigned int
.text$mn:00004AF7                 mov     ecx, [ebp+arg_C]
.text$mn:00004AFA                 push    ecx             ; wchar_t *
.text$mn:00004AFB                 push    offset ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; "invalid operator<"
.text$mn:00004B00                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004B05                 add     esp, 0Ch
.text$mn:00004B08
.text$mn:00004B08 loc_4B08:                               ; CODE XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+30j
.text$mn:00004B08                                         ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+59j
.text$mn:00004B08                 mov     al, 1
.text$mn:00004B0A
.text$mn:00004B0A loc_4B0A:                               ; CODE XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+2Ej
.text$mn:00004B0A                 pop     ebp
.text$mn:00004B0B                 retn
.text$mn:00004B0B ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z endp
.text$mn:00004B0B
.text$mn:00004B0B _text$mn        ends
.text$mn:00004B0B
.text$mn:00004B0C ; ===========================================================================
.text$mn:00004B0C
.text$mn:00004B0C ; Segment type: Pure code
.text$mn:00004B0C ; Segment permissions: Read/Execute
.text$mn:00004B0C _text$mn        segment para public 'CODE' use32
.text$mn:00004B0C                 assume cs:_text$mn
.text$mn:00004B0C                 ;org 4B0Ch
.text$mn:00004B0C ; COMDAT (pick any)
.text$mn:00004B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B0C
.text$mn:00004B0C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B0C
.text$mn:00004B0C ; Attributes: bp-based frame
.text$mn:00004B0C
.text$mn:00004B0C ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00004B0C                 public ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z
.text$mn:00004B0C ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z proc near
.text$mn:00004B0C                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+2Fp
.text$mn:00004B0C
.text$mn:00004B0C arg_0           = dword ptr  8
.text$mn:00004B0C arg_4           = dword ptr  0Ch
.text$mn:00004B0C arg_8           = dword ptr  10h
.text$mn:00004B0C
.text$mn:00004B0C                 push    ebp
.text$mn:00004B0D                 mov     ebp, esp
.text$mn:00004B0F                 cmp     [ebp+arg_0], 0
.text$mn:00004B13                 jnz     short loc_4B2A
.text$mn:00004B15                 mov     eax, [ebp+arg_8]
.text$mn:00004B18                 push    eax             ; unsigned int
.text$mn:00004B19                 mov     ecx, [ebp+arg_4]
.text$mn:00004B1C                 push    ecx             ; wchar_t *
.text$mn:00004B1D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004B22                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004B27                 add     esp, 0Ch
.text$mn:00004B2A
.text$mn:00004B2A loc_4B2A:                               ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+7j
.text$mn:00004B2A                 pop     ebp
.text$mn:00004B2B                 retn
.text$mn:00004B2B ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z endp
.text$mn:00004B2B
.text$mn:00004B2B _text$mn        ends
.text$mn:00004B2B
.text$mn:00004B2C ; ===========================================================================
.text$mn:00004B2C
.text$mn:00004B2C ; Segment type: Pure code
.text$mn:00004B2C ; Segment permissions: Read/Execute
.text$mn:00004B2C _text$mn        segment para public 'CODE' use32
.text$mn:00004B2C                 assume cs:_text$mn
.text$mn:00004B2C                 ;org 4B2Ch
.text$mn:00004B2C ; COMDAT (pick any)
.text$mn:00004B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B2C
.text$mn:00004B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B2C
.text$mn:00004B2C ; Attributes: bp-based frame
.text$mn:00004B2C
.text$mn:00004B2C ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00004B2C                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00004B2C ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00004B2C                                         ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004B2C                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004B2C
.text$mn:00004B2C arg_0           = dword ptr  8
.text$mn:00004B2C arg_4           = dword ptr  0Ch
.text$mn:00004B2C arg_8           = dword ptr  10h
.text$mn:00004B2C
.text$mn:00004B2C                 push    ebp
.text$mn:00004B2D                 mov     ebp, esp
.text$mn:00004B2F                 cmp     [ebp+arg_0], 0
.text$mn:00004B33                 jnz     short loc_4B4A
.text$mn:00004B35                 mov     eax, [ebp+arg_8]
.text$mn:00004B38                 push    eax             ; unsigned int
.text$mn:00004B39                 mov     ecx, [ebp+arg_4]
.text$mn:00004B3C                 push    ecx             ; wchar_t *
.text$mn:00004B3D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004B42                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004B47                 add     esp, 0Ch
.text$mn:00004B4A
.text$mn:00004B4A loc_4B4A:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00004B4A                 pop     ebp
.text$mn:00004B4B                 retn
.text$mn:00004B4B ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00004B4B
.text$mn:00004B4B _text$mn        ends
.text$mn:00004B4B
.text$mn:00004B4C ; ===========================================================================
.text$mn:00004B4C
.text$mn:00004B4C ; Segment type: Pure code
.text$mn:00004B4C ; Segment permissions: Read/Execute
.text$mn:00004B4C _text$mn        segment para public 'CODE' use32
.text$mn:00004B4C                 assume cs:_text$mn
.text$mn:00004B4C                 ;org 4B4Ch
.text$mn:00004B4C ; COMDAT (pick any)
.text$mn:00004B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B4C
.text$mn:00004B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B4C
.text$mn:00004B4C ; Attributes: bp-based frame
.text$mn:00004B4C
.text$mn:00004B4C ; int __cdecl std::_Debug_pointer<short>(int, wchar_t *, unsigned int)
.text$mn:00004B4C                 public ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z
.text$mn:00004B4C ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z proc near
.text$mn:00004B4C                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+2Fp
.text$mn:00004B4C
.text$mn:00004B4C arg_0           = dword ptr  8
.text$mn:00004B4C arg_4           = dword ptr  0Ch
.text$mn:00004B4C arg_8           = dword ptr  10h
.text$mn:00004B4C
.text$mn:00004B4C                 push    ebp
.text$mn:00004B4D                 mov     ebp, esp
.text$mn:00004B4F                 cmp     [ebp+arg_0], 0
.text$mn:00004B53                 jnz     short loc_4B6A
.text$mn:00004B55                 mov     eax, [ebp+arg_8]
.text$mn:00004B58                 push    eax             ; unsigned int
.text$mn:00004B59                 mov     ecx, [ebp+arg_4]
.text$mn:00004B5C                 push    ecx             ; wchar_t *
.text$mn:00004B5D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004B62                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004B67                 add     esp, 0Ch
.text$mn:00004B6A
.text$mn:00004B6A loc_4B6A:                               ; CODE XREF: std::_Debug_pointer<short>(short *,wchar_t const *,uint)+7j
.text$mn:00004B6A                 pop     ebp
.text$mn:00004B6B                 retn
.text$mn:00004B6B ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z endp
.text$mn:00004B6B
.text$mn:00004B6B _text$mn        ends
.text$mn:00004B6B
.text$mn:00004B6C ; ===========================================================================
.text$mn:00004B6C
.text$mn:00004B6C ; Segment type: Pure code
.text$mn:00004B6C ; Segment permissions: Read/Execute
.text$mn:00004B6C _text$mn        segment para public 'CODE' use32
.text$mn:00004B6C                 assume cs:_text$mn
.text$mn:00004B6C                 ;org 4B6Ch
.text$mn:00004B6C ; COMDAT (pick any)
.text$mn:00004B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B6C
.text$mn:00004B6C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B6C
.text$mn:00004B6C ; Attributes: bp-based frame
.text$mn:00004B6C
.text$mn:00004B6C ; void __cdecl std::_Debug_pointer<struct std::less<void>>(struct std::less<void> &, wchar_t const *, unsigned int)
.text$mn:00004B6C                 public ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z
.text$mn:00004B6C ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z proc near
.text$mn:00004B6C                                         ; CODE XREF: std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+2Bp
.text$mn:00004B6C                                         ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+8Cp ...
.text$mn:00004B6C                 push    ebp
.text$mn:00004B6D                 mov     ebp, esp
.text$mn:00004B6F                 pop     ebp
.text$mn:00004B70                 retn
.text$mn:00004B70 ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z endp
.text$mn:00004B70
.text$mn:00004B70 ; ---------------------------------------------------------------------------
.text$mn:00004B71                 align 4
.text$mn:00004B71 _text$mn        ends
.text$mn:00004B71
.text$mn:00004B74 ; ===========================================================================
.text$mn:00004B74
.text$mn:00004B74 ; Segment type: Pure code
.text$mn:00004B74 ; Segment permissions: Read/Execute
.text$mn:00004B74 _text$mn        segment para public 'CODE' use32
.text$mn:00004B74                 assume cs:_text$mn
.text$mn:00004B74                 ;org 4B74h
.text$mn:00004B74 ; COMDAT (pick any)
.text$mn:00004B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B74
.text$mn:00004B74 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B74
.text$mn:00004B74 ; Attributes: bp-based frame
.text$mn:00004B74
.text$mn:00004B74 ; int __cdecl std::_Debug_pointer<MatchedCharInserted>(int, wchar_t *, unsigned int)
.text$mn:00004B74                 public ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z
.text$mn:00004B74 ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z proc near
.text$mn:00004B74                                         ; CODE XREF: std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004B74                                         ; std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004B74
.text$mn:00004B74 arg_0           = dword ptr  8
.text$mn:00004B74 arg_4           = dword ptr  0Ch
.text$mn:00004B74 arg_8           = dword ptr  10h
.text$mn:00004B74
.text$mn:00004B74                 push    ebp
.text$mn:00004B75                 mov     ebp, esp
.text$mn:00004B77                 cmp     [ebp+arg_0], 0
.text$mn:00004B7B                 jnz     short loc_4B92
.text$mn:00004B7D                 mov     eax, [ebp+arg_8]
.text$mn:00004B80                 push    eax             ; unsigned int
.text$mn:00004B81                 mov     ecx, [ebp+arg_4]
.text$mn:00004B84                 push    ecx             ; wchar_t *
.text$mn:00004B85                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004B8A                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004B8F                 add     esp, 0Ch
.text$mn:00004B92
.text$mn:00004B92 loc_4B92:                               ; CODE XREF: std::_Debug_pointer<MatchedCharInserted>(MatchedCharInserted *,wchar_t const *,uint)+7j
.text$mn:00004B92                 pop     ebp
.text$mn:00004B93                 retn
.text$mn:00004B93 ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z endp
.text$mn:00004B93
.text$mn:00004B93 _text$mn        ends
.text$mn:00004B93
.text$mn:00004B94 ; ===========================================================================
.text$mn:00004B94
.text$mn:00004B94 ; Segment type: Pure code
.text$mn:00004B94 ; Segment permissions: Read/Execute
.text$mn:00004B94 _text$mn        segment para public 'CODE' use32
.text$mn:00004B94                 assume cs:_text$mn
.text$mn:00004B94                 ;org 4B94h
.text$mn:00004B94 ; COMDAT (pick any)
.text$mn:00004B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B94
.text$mn:00004B94 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B94
.text$mn:00004B94 ; Attributes: bp-based frame
.text$mn:00004B94
.text$mn:00004B94 ; void __cdecl std::_Debug_pointer<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> &, wchar_t const *, unsigned int)
.text$mn:00004B94                 public ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@PB_WI@Z
.text$mn:00004B94 ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@PB_WI@Z proc near
.text$mn:00004B94                                         ; CODE XREF: std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+48p
.text$mn:00004B94                                         ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+5Cp
.text$mn:00004B94                 push    ebp
.text$mn:00004B95                 mov     ebp, esp
.text$mn:00004B97                 pop     ebp
.text$mn:00004B98                 retn
.text$mn:00004B98 ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@PB_WI@Z endp
.text$mn:00004B98
.text$mn:00004B98 ; ---------------------------------------------------------------------------
.text$mn:00004B99                 align 4
.text$mn:00004B99 _text$mn        ends
.text$mn:00004B99
.text$mn:00004B9C ; ===========================================================================
.text$mn:00004B9C
.text$mn:00004B9C ; Segment type: Pure code
.text$mn:00004B9C ; Segment permissions: Read/Execute
.text$mn:00004B9C _text$mn        segment para public 'CODE' use32
.text$mn:00004B9C                 assume cs:_text$mn
.text$mn:00004B9C                 ;org 4B9Ch
.text$mn:00004B9C ; COMDAT (pick any)
.text$mn:00004B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B9C
.text$mn:00004B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B9C
.text$mn:00004B9C ; Attributes: bp-based frame
.text$mn:00004B9C
.text$mn:00004B9C ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:00004B9C                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:00004B9C ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:00004B9C                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004B9C                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004B9C
.text$mn:00004B9C arg_0           = dword ptr  8
.text$mn:00004B9C arg_4           = dword ptr  0Ch
.text$mn:00004B9C arg_8           = dword ptr  10h
.text$mn:00004B9C
.text$mn:00004B9C                 push    ebp
.text$mn:00004B9D                 mov     ebp, esp
.text$mn:00004B9F                 cmp     [ebp+arg_0], 0
.text$mn:00004BA3                 jnz     short loc_4BBA
.text$mn:00004BA5                 mov     eax, [ebp+arg_8]
.text$mn:00004BA8                 push    eax             ; unsigned int
.text$mn:00004BA9                 mov     ecx, [ebp+arg_4]
.text$mn:00004BAC                 push    ecx             ; wchar_t *
.text$mn:00004BAD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004BB2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004BB7                 add     esp, 0Ch
.text$mn:00004BBA
.text$mn:00004BBA loc_4BBA:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:00004BBA                 pop     ebp
.text$mn:00004BBB                 retn
.text$mn:00004BBB ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:00004BBB
.text$mn:00004BBB _text$mn        ends
.text$mn:00004BBB
.text$mn:00004BBC ; ===========================================================================
.text$mn:00004BBC
.text$mn:00004BBC ; Segment type: Pure code
.text$mn:00004BBC ; Segment permissions: Read/Execute
.text$mn:00004BBC _text$mn        segment para public 'CODE' use32
.text$mn:00004BBC                 assume cs:_text$mn
.text$mn:00004BBC                 ;org 4BBCh
.text$mn:00004BBC ; COMDAT (pick any)
.text$mn:00004BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BBC
.text$mn:00004BBC ; =============== S U B R O U T I N E =======================================
.text$mn:00004BBC
.text$mn:00004BBC ; Attributes: bp-based frame
.text$mn:00004BBC
.text$mn:00004BBC ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00004BBC                 public ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z
.text$mn:00004BBC ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z proc near
.text$mn:00004BBC                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+2Fp
.text$mn:00004BBC
.text$mn:00004BBC arg_0           = dword ptr  8
.text$mn:00004BBC arg_4           = dword ptr  0Ch
.text$mn:00004BBC arg_8           = dword ptr  10h
.text$mn:00004BBC
.text$mn:00004BBC                 push    ebp
.text$mn:00004BBD                 mov     ebp, esp
.text$mn:00004BBF                 cmp     [ebp+arg_0], 0
.text$mn:00004BC3                 jnz     short loc_4BDA
.text$mn:00004BC5                 mov     eax, [ebp+arg_8]
.text$mn:00004BC8                 push    eax             ; unsigned int
.text$mn:00004BC9                 mov     ecx, [ebp+arg_4]
.text$mn:00004BCC                 push    ecx             ; wchar_t *
.text$mn:00004BCD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004BD2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004BD7                 add     esp, 0Ch
.text$mn:00004BDA
.text$mn:00004BDA loc_4BDA:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)+7j
.text$mn:00004BDA                 pop     ebp
.text$mn:00004BDB                 retn
.text$mn:00004BDB ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z endp
.text$mn:00004BDB
.text$mn:00004BDB _text$mn        ends
.text$mn:00004BDB
.text$mn:00004BDC ; ===========================================================================
.text$mn:00004BDC
.text$mn:00004BDC ; Segment type: Pure code
.text$mn:00004BDC ; Segment permissions: Read/Execute
.text$mn:00004BDC _text$mn        segment para public 'CODE' use32
.text$mn:00004BDC                 assume cs:_text$mn
.text$mn:00004BDC                 ;org 4BDCh
.text$mn:00004BDC ; COMDAT (pick any)
.text$mn:00004BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BDC
.text$mn:00004BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00004BDC
.text$mn:00004BDC ; Attributes: bp-based frame
.text$mn:00004BDC
.text$mn:00004BDC ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00004BDC                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00004BDC ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00004BDC                                         ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004BDC                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004BDC
.text$mn:00004BDC arg_0           = dword ptr  8
.text$mn:00004BDC arg_4           = dword ptr  0Ch
.text$mn:00004BDC arg_8           = dword ptr  10h
.text$mn:00004BDC
.text$mn:00004BDC                 push    ebp
.text$mn:00004BDD                 mov     ebp, esp
.text$mn:00004BDF                 cmp     [ebp+arg_0], 0
.text$mn:00004BE3                 jnz     short loc_4BFA
.text$mn:00004BE5                 mov     eax, [ebp+arg_8]
.text$mn:00004BE8                 push    eax             ; unsigned int
.text$mn:00004BE9                 mov     ecx, [ebp+arg_4]
.text$mn:00004BEC                 push    ecx             ; wchar_t *
.text$mn:00004BED                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004BF2                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004BF7                 add     esp, 0Ch
.text$mn:00004BFA
.text$mn:00004BFA loc_4BFA:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:00004BFA                 pop     ebp
.text$mn:00004BFB                 retn
.text$mn:00004BFB ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:00004BFB
.text$mn:00004BFB _text$mn        ends
.text$mn:00004BFB
.text$mn:00004BFC ; ===========================================================================
.text$mn:00004BFC
.text$mn:00004BFC ; Segment type: Pure code
.text$mn:00004BFC ; Segment permissions: Read/Execute
.text$mn:00004BFC _text$mn        segment para public 'CODE' use32
.text$mn:00004BFC                 assume cs:_text$mn
.text$mn:00004BFC                 ;org 4BFCh
.text$mn:00004BFC ; COMDAT (pick any)
.text$mn:00004BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BFC
.text$mn:00004BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00004BFC
.text$mn:00004BFC ; Attributes: bp-based frame
.text$mn:00004BFC
.text$mn:00004BFC ; int __cdecl std::_Debug_range2<MatchedCharInserted *>(int, int, wchar_t *, unsigned int)
.text$mn:00004BFC                 public ??$_Debug_range2@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004BFC ??$_Debug_range2@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004BFC                                         ; CODE XREF: std::_Debug_range<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint)+2Ap
.text$mn:00004BFC
.text$mn:00004BFC arg_0           = dword ptr  8
.text$mn:00004BFC arg_4           = dword ptr  0Ch
.text$mn:00004BFC arg_8           = dword ptr  10h
.text$mn:00004BFC arg_C           = dword ptr  14h
.text$mn:00004BFC
.text$mn:00004BFC                 push    ebp
.text$mn:00004BFD                 mov     ebp, esp
.text$mn:00004BFF                 mov     eax, [ebp+arg_0]
.text$mn:00004C02                 cmp     eax, [ebp+arg_4]
.text$mn:00004C05                 jz      short loc_4C4C
.text$mn:00004C07                 mov     ecx, [ebp+arg_C]
.text$mn:00004C0A                 push    ecx             ; unsigned int
.text$mn:00004C0B                 mov     edx, [ebp+arg_8]
.text$mn:00004C0E                 push    edx             ; wchar_t *
.text$mn:00004C0F                 mov     eax, [ebp+arg_0]
.text$mn:00004C12                 push    eax             ; int
.text$mn:00004C13                 call    ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z ; std::_Debug_pointer<MatchedCharInserted>(MatchedCharInserted *,wchar_t const *,uint)
.text$mn:00004C18                 add     esp, 0Ch
.text$mn:00004C1B                 mov     ecx, [ebp+arg_C]
.text$mn:00004C1E                 push    ecx             ; unsigned int
.text$mn:00004C1F                 mov     edx, [ebp+arg_8]
.text$mn:00004C22                 push    edx             ; wchar_t *
.text$mn:00004C23                 mov     eax, [ebp+arg_4]
.text$mn:00004C26                 push    eax             ; int
.text$mn:00004C27                 call    ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z ; std::_Debug_pointer<MatchedCharInserted>(MatchedCharInserted *,wchar_t const *,uint)
.text$mn:00004C2C                 add     esp, 0Ch
.text$mn:00004C2F                 mov     ecx, [ebp+arg_4]
.text$mn:00004C32                 cmp     ecx, [ebp+arg_0]
.text$mn:00004C35                 jnb     short loc_4C4C
.text$mn:00004C37                 mov     edx, [ebp+arg_C]
.text$mn:00004C3A                 push    edx             ; unsigned int
.text$mn:00004C3B                 mov     eax, [ebp+arg_8]
.text$mn:00004C3E                 push    eax             ; wchar_t *
.text$mn:00004C3F                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004C44                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004C49                 add     esp, 0Ch
.text$mn:00004C4C
.text$mn:00004C4C loc_4C4C:                               ; CODE XREF: std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004C4C                                         ; std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004C4C                 pop     ebp
.text$mn:00004C4D                 retn
.text$mn:00004C4D ??$_Debug_range2@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004C4D
.text$mn:00004C4D ; ---------------------------------------------------------------------------
.text$mn:00004C4E                 align 10h
.text$mn:00004C4E _text$mn        ends
.text$mn:00004C4E
.text$mn:00004C50 ; ===========================================================================
.text$mn:00004C50
.text$mn:00004C50 ; Segment type: Pure code
.text$mn:00004C50 ; Segment permissions: Read/Execute
.text$mn:00004C50 _text$mn        segment para public 'CODE' use32
.text$mn:00004C50                 assume cs:_text$mn
.text$mn:00004C50                 ;org 4C50h
.text$mn:00004C50 ; COMDAT (pick any)
.text$mn:00004C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C50
.text$mn:00004C50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C50
.text$mn:00004C50 ; Attributes: bp-based frame
.text$mn:00004C50
.text$mn:00004C50 ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00004C50                 public ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004C50 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004C50                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+2Ap
.text$mn:00004C50
.text$mn:00004C50 arg_0           = dword ptr  8
.text$mn:00004C50 arg_4           = dword ptr  0Ch
.text$mn:00004C50 arg_8           = dword ptr  10h
.text$mn:00004C50 arg_C           = dword ptr  14h
.text$mn:00004C50
.text$mn:00004C50                 push    ebp
.text$mn:00004C51                 mov     ebp, esp
.text$mn:00004C53                 mov     eax, [ebp+arg_0]
.text$mn:00004C56                 cmp     eax, [ebp+arg_4]
.text$mn:00004C59                 jz      short loc_4CA0
.text$mn:00004C5B                 mov     ecx, [ebp+arg_C]
.text$mn:00004C5E                 push    ecx             ; unsigned int
.text$mn:00004C5F                 mov     edx, [ebp+arg_8]
.text$mn:00004C62                 push    edx             ; wchar_t *
.text$mn:00004C63                 mov     eax, [ebp+arg_0]
.text$mn:00004C66                 push    eax             ; int
.text$mn:00004C67                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00004C6C                 add     esp, 0Ch
.text$mn:00004C6F                 mov     ecx, [ebp+arg_C]
.text$mn:00004C72                 push    ecx             ; unsigned int
.text$mn:00004C73                 mov     edx, [ebp+arg_8]
.text$mn:00004C76                 push    edx             ; wchar_t *
.text$mn:00004C77                 mov     eax, [ebp+arg_4]
.text$mn:00004C7A                 push    eax             ; int
.text$mn:00004C7B                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00004C80                 add     esp, 0Ch
.text$mn:00004C83                 mov     ecx, [ebp+arg_4]
.text$mn:00004C86                 cmp     ecx, [ebp+arg_0]
.text$mn:00004C89                 jnb     short loc_4CA0
.text$mn:00004C8B                 mov     edx, [ebp+arg_C]
.text$mn:00004C8E                 push    edx             ; unsigned int
.text$mn:00004C8F                 mov     eax, [ebp+arg_8]
.text$mn:00004C92                 push    eax             ; wchar_t *
.text$mn:00004C93                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004C98                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004C9D                 add     esp, 0Ch
.text$mn:00004CA0
.text$mn:00004CA0 loc_4CA0:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004CA0                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004CA0                 pop     ebp
.text$mn:00004CA1                 retn
.text$mn:00004CA1 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004CA1
.text$mn:00004CA1 ; ---------------------------------------------------------------------------
.text$mn:00004CA2                 align 4
.text$mn:00004CA2 _text$mn        ends
.text$mn:00004CA2
.text$mn:00004CA4 ; ===========================================================================
.text$mn:00004CA4
.text$mn:00004CA4 ; Segment type: Pure code
.text$mn:00004CA4 ; Segment permissions: Read/Execute
.text$mn:00004CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00004CA4                 assume cs:_text$mn
.text$mn:00004CA4                 ;org 4CA4h
.text$mn:00004CA4 ; COMDAT (pick any)
.text$mn:00004CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CA4
.text$mn:00004CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CA4
.text$mn:00004CA4 ; Attributes: bp-based frame
.text$mn:00004CA4
.text$mn:00004CA4 ; int __cdecl std::_Debug_range2<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004CA4                 public ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004CA4 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004CA4                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+2Ap
.text$mn:00004CA4
.text$mn:00004CA4 arg_0           = dword ptr  8
.text$mn:00004CA4 arg_4           = dword ptr  0Ch
.text$mn:00004CA4 arg_8           = dword ptr  10h
.text$mn:00004CA4 arg_C           = dword ptr  14h
.text$mn:00004CA4
.text$mn:00004CA4                 push    ebp
.text$mn:00004CA5                 mov     ebp, esp
.text$mn:00004CA7                 mov     eax, [ebp+arg_0]
.text$mn:00004CAA                 cmp     eax, [ebp+arg_4]
.text$mn:00004CAD                 jz      short loc_4CF4
.text$mn:00004CAF                 mov     ecx, [ebp+arg_C]
.text$mn:00004CB2                 push    ecx             ; unsigned int
.text$mn:00004CB3                 mov     edx, [ebp+arg_8]
.text$mn:00004CB6                 push    edx             ; wchar_t *
.text$mn:00004CB7                 mov     eax, [ebp+arg_0]
.text$mn:00004CBA                 push    eax             ; int
.text$mn:00004CBB                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00004CC0                 add     esp, 0Ch
.text$mn:00004CC3                 mov     ecx, [ebp+arg_C]
.text$mn:00004CC6                 push    ecx             ; unsigned int
.text$mn:00004CC7                 mov     edx, [ebp+arg_8]
.text$mn:00004CCA                 push    edx             ; wchar_t *
.text$mn:00004CCB                 mov     eax, [ebp+arg_4]
.text$mn:00004CCE                 push    eax             ; int
.text$mn:00004CCF                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00004CD4                 add     esp, 0Ch
.text$mn:00004CD7                 mov     ecx, [ebp+arg_4]
.text$mn:00004CDA                 cmp     ecx, [ebp+arg_0]
.text$mn:00004CDD                 jnb     short loc_4CF4
.text$mn:00004CDF                 mov     edx, [ebp+arg_C]
.text$mn:00004CE2                 push    edx             ; unsigned int
.text$mn:00004CE3                 mov     eax, [ebp+arg_8]
.text$mn:00004CE6                 push    eax             ; wchar_t *
.text$mn:00004CE7                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004CEC                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004CF1                 add     esp, 0Ch
.text$mn:00004CF4
.text$mn:00004CF4 loc_4CF4:                               ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004CF4                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004CF4                 pop     ebp
.text$mn:00004CF5                 retn
.text$mn:00004CF5 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004CF5
.text$mn:00004CF5 ; ---------------------------------------------------------------------------
.text$mn:00004CF6                 align 4
.text$mn:00004CF6 _text$mn        ends
.text$mn:00004CF6
.text$mn:00004CF8 ; ===========================================================================
.text$mn:00004CF8
.text$mn:00004CF8 ; Segment type: Pure code
.text$mn:00004CF8 ; Segment permissions: Read/Execute
.text$mn:00004CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00004CF8                 assume cs:_text$mn
.text$mn:00004CF8                 ;org 4CF8h
.text$mn:00004CF8 ; COMDAT (pick any)
.text$mn:00004CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CF8
.text$mn:00004CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CF8
.text$mn:00004CF8 ; Attributes: bp-based frame
.text$mn:00004CF8
.text$mn:00004CF8 ; int __cdecl std::_Debug_range2<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004CF8                 public ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z
.text$mn:00004CF8 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004CF8                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+2Ap
.text$mn:00004CF8
.text$mn:00004CF8 arg_0           = dword ptr  8
.text$mn:00004CF8 arg_4           = dword ptr  0Ch
.text$mn:00004CF8 arg_8           = dword ptr  10h
.text$mn:00004CF8 arg_C           = dword ptr  14h
.text$mn:00004CF8
.text$mn:00004CF8                 push    ebp
.text$mn:00004CF9                 mov     ebp, esp
.text$mn:00004CFB                 mov     eax, [ebp+arg_0]
.text$mn:00004CFE                 cmp     eax, [ebp+arg_4]
.text$mn:00004D01                 jz      short loc_4D48
.text$mn:00004D03                 mov     ecx, [ebp+arg_C]
.text$mn:00004D06                 push    ecx             ; unsigned int
.text$mn:00004D07                 mov     edx, [ebp+arg_8]
.text$mn:00004D0A                 push    edx             ; wchar_t *
.text$mn:00004D0B                 mov     eax, [ebp+arg_0]
.text$mn:00004D0E                 push    eax             ; int
.text$mn:00004D0F                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00004D14                 add     esp, 0Ch
.text$mn:00004D17                 mov     ecx, [ebp+arg_C]
.text$mn:00004D1A                 push    ecx             ; unsigned int
.text$mn:00004D1B                 mov     edx, [ebp+arg_8]
.text$mn:00004D1E                 push    edx             ; wchar_t *
.text$mn:00004D1F                 mov     eax, [ebp+arg_4]
.text$mn:00004D22                 push    eax             ; int
.text$mn:00004D23                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00004D28                 add     esp, 0Ch
.text$mn:00004D2B                 mov     ecx, [ebp+arg_4]
.text$mn:00004D2E                 cmp     ecx, [ebp+arg_0]
.text$mn:00004D31                 jnb     short loc_4D48
.text$mn:00004D33                 mov     edx, [ebp+arg_C]
.text$mn:00004D36                 push    edx             ; unsigned int
.text$mn:00004D37                 mov     eax, [ebp+arg_8]
.text$mn:00004D3A                 push    eax             ; wchar_t *
.text$mn:00004D3B                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004D40                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004D45                 add     esp, 0Ch
.text$mn:00004D48
.text$mn:00004D48 loc_4D48:                               ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004D48                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004D48                 pop     ebp
.text$mn:00004D49                 retn
.text$mn:00004D49 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004D49
.text$mn:00004D49 ; ---------------------------------------------------------------------------
.text$mn:00004D4A                 align 4
.text$mn:00004D4A _text$mn        ends
.text$mn:00004D4A
.text$mn:00004D4C ; ===========================================================================
.text$mn:00004D4C
.text$mn:00004D4C ; Segment type: Pure code
.text$mn:00004D4C ; Segment permissions: Read/Execute
.text$mn:00004D4C _text$mn        segment para public 'CODE' use32
.text$mn:00004D4C                 assume cs:_text$mn
.text$mn:00004D4C                 ;org 4D4Ch
.text$mn:00004D4C ; COMDAT (pick any)
.text$mn:00004D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D4C
.text$mn:00004D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00004D4C
.text$mn:00004D4C ; Attributes: bp-based frame
.text$mn:00004D4C
.text$mn:00004D4C ; int __cdecl std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(char, int, int, char, int, int, wchar_t *, unsigned int)
.text$mn:00004D4C                 public ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004D4C ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004D4C                                         ; CODE XREF: std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)+8Ap
.text$mn:00004D4C
.text$mn:00004D4C var_C           = dword ptr -0Ch
.text$mn:00004D4C var_4           = dword ptr -4
.text$mn:00004D4C arg_0           = byte ptr  8
.text$mn:00004D4C arg_C           = byte ptr  14h
.text$mn:00004D4C arg_18          = dword ptr  20h
.text$mn:00004D4C arg_1C          = dword ptr  24h
.text$mn:00004D4C
.text$mn:00004D4C                 push    ebp
.text$mn:00004D4D                 mov     ebp, esp
.text$mn:00004D4F                 push    0FFFFFFFFh
.text$mn:00004D51                 push    offset __ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004D56                 mov     eax, large fs:0
.text$mn:00004D5C                 push    eax
.text$mn:00004D5D                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D62                 xor     eax, ebp
.text$mn:00004D64                 push    eax
.text$mn:00004D65                 lea     eax, [ebp+var_C]
.text$mn:00004D68                 mov     large fs:0, eax
.text$mn:00004D6E                 mov     [ebp+var_4], 1
.text$mn:00004D75                 lea     eax, [ebp+arg_C]
.text$mn:00004D78                 push    eax             ; std::_Iterator_base12 *
.text$mn:00004D79                 lea     ecx, [ebp+arg_0]
.text$mn:00004D7C                 call    ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator!=(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004D81                 movzx   ecx, al
.text$mn:00004D84                 test    ecx, ecx
.text$mn:00004D86                 jz      short loc_4DD8
.text$mn:00004D88                 mov     edx, [ebp+arg_1C]
.text$mn:00004D8B                 push    edx
.text$mn:00004D8C                 mov     eax, [ebp+arg_18]
.text$mn:00004D8F                 push    eax
.text$mn:00004D90                 lea     ecx, [ebp+arg_0]
.text$mn:00004D93                 push    ecx
.text$mn:00004D94                 call    ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,wchar_t const *,uint)
.text$mn:00004D99                 add     esp, 0Ch
.text$mn:00004D9C                 mov     edx, [ebp+arg_1C]
.text$mn:00004D9F                 push    edx
.text$mn:00004DA0                 mov     eax, [ebp+arg_18]
.text$mn:00004DA3                 push    eax
.text$mn:00004DA4                 lea     ecx, [ebp+arg_C]
.text$mn:00004DA7                 push    ecx
.text$mn:00004DA8                 call    ??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,wchar_t const *,uint)
.text$mn:00004DAD                 add     esp, 0Ch
.text$mn:00004DB0                 lea     edx, [ebp+arg_0]
.text$mn:00004DB3                 push    edx             ; std::_Iterator_base12 *
.text$mn:00004DB4                 lea     ecx, [ebp+arg_C]
.text$mn:00004DB7                 call    ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator<(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004DBC                 movzx   eax, al
.text$mn:00004DBF                 test    eax, eax
.text$mn:00004DC1                 jz      short loc_4DD8
.text$mn:00004DC3                 mov     ecx, [ebp+arg_1C]
.text$mn:00004DC6                 push    ecx             ; unsigned int
.text$mn:00004DC7                 mov     edx, [ebp+arg_18]
.text$mn:00004DCA                 push    edx             ; wchar_t *
.text$mn:00004DCB                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004DD0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004DD5                 add     esp, 0Ch
.text$mn:00004DD8
.text$mn:00004DD8 loc_4DD8:                               ; CODE XREF: std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+3Aj
.text$mn:00004DD8                                         ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+75j
.text$mn:00004DD8                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004DDC                 lea     ecx, [ebp+arg_0]
.text$mn:00004DDF                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004DE4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DEB                 lea     ecx, [ebp+arg_C]
.text$mn:00004DEE                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004DF3                 mov     ecx, [ebp+var_C]
.text$mn:00004DF6                 mov     large fs:0, ecx
.text$mn:00004DFD                 pop     ecx
.text$mn:00004DFE                 mov     esp, ebp
.text$mn:00004E00                 pop     ebp
.text$mn:00004E01                 retn
.text$mn:00004E01 ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004E01
.text$mn:00004E01 ; ---------------------------------------------------------------------------
.text$mn:00004E02                 align 4
.text$mn:00004E02 _text$mn        ends
.text$mn:00004E02
.text$x:00004E04 ; ===========================================================================
.text$x:00004E04
.text$x:00004E04 ; Segment type: Pure code
.text$x:00004E04 ; Segment permissions: Read/Execute
.text$x:00004E04 _text$x         segment para public 'CODE' use32
.text$x:00004E04                 assume cs:_text$x
.text$x:00004E04                 ;org 4E04h
.text$x:00004E04 ; COMDAT (pick associative to section at 4D4C)
.text$x:00004E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E04
.text$x:00004E04 ; =============== S U B R O U T I N E =======================================
.text$x:00004E04
.text$x:00004E04
.text$x:00004E04 __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 proc near
.text$x:00004E04                                         ; DATA XREF: .xdata$x:00010E94o
.text$x:00004E04                 lea     ecx, [ebp+14h]
.text$x:00004E07                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004E07 __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 endp
.text$x:00004E07
.text$x:00004E0C
.text$x:00004E0C ; =============== S U B R O U T I N E =======================================
.text$x:00004E0C
.text$x:00004E0C
.text$x:00004E0C __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 proc near
.text$x:00004E0C                                         ; DATA XREF: .xdata$x:00010E9Co
.text$x:00004E0C                 lea     ecx, [ebp+8]
.text$x:00004E0F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004E0F __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 endp
.text$x:00004E0F
.text$x:00004E14
.text$x:00004E14 ; =============== S U B R O U T I N E =======================================
.text$x:00004E14
.text$x:00004E14
.text$x:00004E14 __ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$x:00004E14                                         ; DATA XREF: std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+5o
.text$x:00004E14
.text$x:00004E14 arg_4           = dword ptr  8
.text$x:00004E14
.text$x:00004E14                 mov     edx, [esp+arg_4]
.text$x:00004E18                 lea     eax, [edx+0Ch]
.text$x:00004E1B                 mov     ecx, [edx-4]
.text$x:00004E1E                 xor     ecx, eax
.text$x:00004E20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E25                 mov     eax, offset __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$x:00004E2A                 jmp     ___CxxFrameHandler3
.text$x:00004E2A __ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$x:00004E2A
.text$x:00004E2A ; ---------------------------------------------------------------------------
.text$x:00004E2F                 align 10h
.text$x:00004E2F _text$x         ends
.text$x:00004E2F
.text$mn:00004E30 ; ===========================================================================
.text$mn:00004E30
.text$mn:00004E30 ; Segment type: Pure code
.text$mn:00004E30 ; Segment permissions: Read/Execute
.text$mn:00004E30 _text$mn        segment para public 'CODE' use32
.text$mn:00004E30                 assume cs:_text$mn
.text$mn:00004E30                 ;org 4E30h
.text$mn:00004E30 ; COMDAT (pick any)
.text$mn:00004E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E30
.text$mn:00004E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E30
.text$mn:00004E30 ; Attributes: bp-based frame
.text$mn:00004E30
.text$mn:00004E30 ; int __cdecl std::_Debug_range<MatchedCharInserted *>(int, int, wchar_t *, unsigned int)
.text$mn:00004E30                 public ??$_Debug_range@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WI@Z
.text$mn:00004E30 ??$_Debug_range@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WI@Z proc near
.text$mn:00004E30                                         ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00004E30
.text$mn:00004E30 var_1           = byte ptr -1
.text$mn:00004E30 arg_0           = dword ptr  8
.text$mn:00004E30 arg_4           = dword ptr  0Ch
.text$mn:00004E30 arg_8           = dword ptr  10h
.text$mn:00004E30 arg_C           = dword ptr  14h
.text$mn:00004E30
.text$mn:00004E30                 push    ebp
.text$mn:00004E31                 mov     ebp, esp
.text$mn:00004E33                 push    ecx
.text$mn:00004E34                 lea     eax, [ebp+arg_0]
.text$mn:00004E37                 push    eax
.text$mn:00004E38                 lea     ecx, [ebp+var_1]
.text$mn:00004E3B                 push    ecx
.text$mn:00004E3C                 call    ??$_Iter_cat@PAUMatchedCharInserted@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMatchedCharInserted@@@Z ; std::_Iter_cat<MatchedCharInserted *>(MatchedCharInserted * const &)
.text$mn:00004E41                 add     esp, 8
.text$mn:00004E44                 mov     dl, [eax]
.text$mn:00004E46                 movzx   eax, dl
.text$mn:00004E49                 push    eax
.text$mn:00004E4A                 mov     ecx, [ebp+arg_C]
.text$mn:00004E4D                 push    ecx             ; unsigned int
.text$mn:00004E4E                 mov     edx, [ebp+arg_8]
.text$mn:00004E51                 push    edx             ; wchar_t *
.text$mn:00004E52                 mov     eax, [ebp+arg_4]
.text$mn:00004E55                 push    eax             ; int
.text$mn:00004E56                 mov     ecx, [ebp+arg_0]
.text$mn:00004E59                 push    ecx             ; int
.text$mn:00004E5A                 call    ??$_Debug_range2@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004E5F                 add     esp, 14h
.text$mn:00004E62                 mov     esp, ebp
.text$mn:00004E64                 pop     ebp
.text$mn:00004E65                 retn
.text$mn:00004E65 ??$_Debug_range@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WI@Z endp
.text$mn:00004E65
.text$mn:00004E65 ; ---------------------------------------------------------------------------
.text$mn:00004E66                 align 4
.text$mn:00004E66 _text$mn        ends
.text$mn:00004E66
.text$mn:00004E68 ; ===========================================================================
.text$mn:00004E68
.text$mn:00004E68 ; Segment type: Pure code
.text$mn:00004E68 ; Segment permissions: Read/Execute
.text$mn:00004E68 _text$mn        segment para public 'CODE' use32
.text$mn:00004E68                 assume cs:_text$mn
.text$mn:00004E68                 ;org 4E68h
.text$mn:00004E68 ; COMDAT (pick any)
.text$mn:00004E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E68
.text$mn:00004E68 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E68
.text$mn:00004E68 ; Attributes: bp-based frame
.text$mn:00004E68
.text$mn:00004E68 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00004E68                 public ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:00004E68 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:00004E68                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00004E68                                         ; std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+15p ...
.text$mn:00004E68
.text$mn:00004E68 var_1           = byte ptr -1
.text$mn:00004E68 arg_0           = dword ptr  8
.text$mn:00004E68 arg_4           = dword ptr  0Ch
.text$mn:00004E68 arg_8           = dword ptr  10h
.text$mn:00004E68 arg_C           = dword ptr  14h
.text$mn:00004E68
.text$mn:00004E68                 push    ebp
.text$mn:00004E69                 mov     ebp, esp
.text$mn:00004E6B                 push    ecx
.text$mn:00004E6C                 lea     eax, [ebp+arg_0]
.text$mn:00004E6F                 push    eax
.text$mn:00004E70                 lea     ecx, [ebp+var_1]
.text$mn:00004E73                 push    ecx
.text$mn:00004E74                 call    ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * const &)
.text$mn:00004E79                 add     esp, 8
.text$mn:00004E7C                 mov     dl, [eax]
.text$mn:00004E7E                 movzx   eax, dl
.text$mn:00004E81                 push    eax
.text$mn:00004E82                 mov     ecx, [ebp+arg_C]
.text$mn:00004E85                 push    ecx             ; unsigned int
.text$mn:00004E86                 mov     edx, [ebp+arg_8]
.text$mn:00004E89                 push    edx             ; wchar_t *
.text$mn:00004E8A                 mov     eax, [ebp+arg_4]
.text$mn:00004E8D                 push    eax             ; int
.text$mn:00004E8E                 mov     ecx, [ebp+arg_0]
.text$mn:00004E91                 push    ecx             ; int
.text$mn:00004E92                 call    ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004E97                 add     esp, 14h
.text$mn:00004E9A                 mov     esp, ebp
.text$mn:00004E9C                 pop     ebp
.text$mn:00004E9D                 retn
.text$mn:00004E9D ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:00004E9D
.text$mn:00004E9D ; ---------------------------------------------------------------------------
.text$mn:00004E9E                 align 10h
.text$mn:00004E9E _text$mn        ends
.text$mn:00004E9E
.text$mn:00004EA0 ; ===========================================================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Segment type: Pure code
.text$mn:00004EA0 ; Segment permissions: Read/Execute
.text$mn:00004EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004EA0                 assume cs:_text$mn
.text$mn:00004EA0                 ;org 4EA0h
.text$mn:00004EA0 ; COMDAT (pick any)
.text$mn:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EA0
.text$mn:00004EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Attributes: bp-based frame
.text$mn:00004EA0
.text$mn:00004EA0 ; int __cdecl std::_Debug_range<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004EA0                 public ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z
.text$mn:00004EA0 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z proc near
.text$mn:00004EA0                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+19p
.text$mn:00004EA0
.text$mn:00004EA0 var_1           = byte ptr -1
.text$mn:00004EA0 arg_0           = dword ptr  8
.text$mn:00004EA0 arg_4           = dword ptr  0Ch
.text$mn:00004EA0 arg_8           = dword ptr  10h
.text$mn:00004EA0 arg_C           = dword ptr  14h
.text$mn:00004EA0
.text$mn:00004EA0                 push    ebp
.text$mn:00004EA1                 mov     ebp, esp
.text$mn:00004EA3                 push    ecx
.text$mn:00004EA4                 lea     eax, [ebp+arg_0]
.text$mn:00004EA7                 push    eax
.text$mn:00004EA8                 lea     ecx, [ebp+var_1]
.text$mn:00004EAB                 push    ecx
.text$mn:00004EAC                 call    ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ; std::_Iter_cat<char const *>(char const * const &)
.text$mn:00004EB1                 add     esp, 8
.text$mn:00004EB4                 mov     dl, [eax]
.text$mn:00004EB6                 movzx   eax, dl
.text$mn:00004EB9                 push    eax
.text$mn:00004EBA                 mov     ecx, [ebp+arg_C]
.text$mn:00004EBD                 push    ecx             ; unsigned int
.text$mn:00004EBE                 mov     edx, [ebp+arg_8]
.text$mn:00004EC1                 push    edx             ; wchar_t *
.text$mn:00004EC2                 mov     eax, [ebp+arg_4]
.text$mn:00004EC5                 push    eax             ; int
.text$mn:00004EC6                 mov     ecx, [ebp+arg_0]
.text$mn:00004EC9                 push    ecx             ; int
.text$mn:00004ECA                 call    ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004ECF                 add     esp, 14h
.text$mn:00004ED2                 mov     esp, ebp
.text$mn:00004ED4                 pop     ebp
.text$mn:00004ED5                 retn
.text$mn:00004ED5 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z endp
.text$mn:00004ED5
.text$mn:00004ED5 ; ---------------------------------------------------------------------------
.text$mn:00004ED6                 align 4
.text$mn:00004ED6 _text$mn        ends
.text$mn:00004ED6
.text$mn:00004ED8 ; ===========================================================================
.text$mn:00004ED8
.text$mn:00004ED8 ; Segment type: Pure code
.text$mn:00004ED8 ; Segment permissions: Read/Execute
.text$mn:00004ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00004ED8                 assume cs:_text$mn
.text$mn:00004ED8                 ;org 4ED8h
.text$mn:00004ED8 ; COMDAT (pick any)
.text$mn:00004ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004ED8
.text$mn:00004ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004ED8
.text$mn:00004ED8 ; Attributes: bp-based frame
.text$mn:00004ED8
.text$mn:00004ED8 ; int __cdecl std::_Debug_range<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004ED8                 public ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z
.text$mn:00004ED8 ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z proc near
.text$mn:00004ED8                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+19p
.text$mn:00004ED8                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+19p ...
.text$mn:00004ED8
.text$mn:00004ED8 var_1           = byte ptr -1
.text$mn:00004ED8 arg_0           = dword ptr  8
.text$mn:00004ED8 arg_4           = dword ptr  0Ch
.text$mn:00004ED8 arg_8           = dword ptr  10h
.text$mn:00004ED8 arg_C           = dword ptr  14h
.text$mn:00004ED8
.text$mn:00004ED8                 push    ebp
.text$mn:00004ED9                 mov     ebp, esp
.text$mn:00004EDB                 push    ecx
.text$mn:00004EDC                 lea     eax, [ebp+arg_0]
.text$mn:00004EDF                 push    eax
.text$mn:00004EE0                 lea     ecx, [ebp+var_1]
.text$mn:00004EE3                 push    ecx
.text$mn:00004EE4                 call    ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z ; std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:00004EE9                 add     esp, 8
.text$mn:00004EEC                 mov     dl, [eax]
.text$mn:00004EEE                 movzx   eax, dl
.text$mn:00004EF1                 push    eax
.text$mn:00004EF2                 mov     ecx, [ebp+arg_C]
.text$mn:00004EF5                 push    ecx             ; unsigned int
.text$mn:00004EF6                 mov     edx, [ebp+arg_8]
.text$mn:00004EF9                 push    edx             ; wchar_t *
.text$mn:00004EFA                 mov     eax, [ebp+arg_4]
.text$mn:00004EFD                 push    eax             ; int
.text$mn:00004EFE                 mov     ecx, [ebp+arg_0]
.text$mn:00004F01                 push    ecx             ; int
.text$mn:00004F02                 call    ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004F07                 add     esp, 14h
.text$mn:00004F0A                 mov     esp, ebp
.text$mn:00004F0C                 pop     ebp
.text$mn:00004F0D                 retn
.text$mn:00004F0D ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z endp
.text$mn:00004F0D
.text$mn:00004F0D ; ---------------------------------------------------------------------------
.text$mn:00004F0E                 align 10h
.text$mn:00004F0E _text$mn        ends
.text$mn:00004F0E
.text$mn:00004F10 ; ===========================================================================
.text$mn:00004F10
.text$mn:00004F10 ; Segment type: Pure code
.text$mn:00004F10 ; Segment permissions: Read/Execute
.text$mn:00004F10 _text$mn        segment para public 'CODE' use32
.text$mn:00004F10                 assume cs:_text$mn
.text$mn:00004F10                 ;org 4F10h
.text$mn:00004F10 ; COMDAT (pick any)
.text$mn:00004F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F10
.text$mn:00004F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F10
.text$mn:00004F10 ; Attributes: bp-based frame
.text$mn:00004F10
.text$mn:00004F10 ; int __cdecl std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(char, int, int, int, int, int, wchar_t *, unsigned int)
.text$mn:00004F10                 public ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z
.text$mn:00004F10 ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z proc near
.text$mn:00004F10                                         ; CODE XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+76p
.text$mn:00004F10
.text$mn:00004F10 var_28          = dword ptr -28h
.text$mn:00004F10 var_24          = dword ptr -24h
.text$mn:00004F10 var_20          = dword ptr -20h
.text$mn:00004F10 var_1C          = dword ptr -1Ch
.text$mn:00004F10 var_18          = dword ptr -18h
.text$mn:00004F10 var_14          = dword ptr -14h
.text$mn:00004F10 var_D           = byte ptr -0Dh
.text$mn:00004F10 var_C           = dword ptr -0Ch
.text$mn:00004F10 var_4           = dword ptr -4
.text$mn:00004F10 arg_0           = byte ptr  8
.text$mn:00004F10 arg_C           = dword ptr  14h
.text$mn:00004F10 arg_18          = dword ptr  20h
.text$mn:00004F10 arg_1C          = dword ptr  24h
.text$mn:00004F10
.text$mn:00004F10                 push    ebp
.text$mn:00004F11                 mov     ebp, esp
.text$mn:00004F13                 push    0FFFFFFFFh
.text$mn:00004F15                 push    offset __ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z
.text$mn:00004F1A                 mov     eax, large fs:0
.text$mn:00004F20                 push    eax
.text$mn:00004F21                 sub     esp, 1Ch
.text$mn:00004F24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F29                 xor     eax, ebp
.text$mn:00004F2B                 push    eax
.text$mn:00004F2C                 lea     eax, [ebp+var_C]
.text$mn:00004F2F                 mov     large fs:0, eax
.text$mn:00004F35                 mov     [ebp+var_4], 1
.text$mn:00004F3C                 lea     eax, [ebp+arg_0]
.text$mn:00004F3F                 push    eax
.text$mn:00004F40                 lea     ecx, [ebp+var_D]
.text$mn:00004F43                 push    ecx
.text$mn:00004F44                 call    ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004F49                 add     esp, 8
.text$mn:00004F4C                 mov     dl, [eax]
.text$mn:00004F4E                 movzx   eax, dl
.text$mn:00004F51                 push    eax
.text$mn:00004F52                 mov     ecx, [ebp+arg_1C]
.text$mn:00004F55                 push    ecx             ; unsigned int
.text$mn:00004F56                 mov     edx, [ebp+arg_18]
.text$mn:00004F59                 push    edx             ; wchar_t *
.text$mn:00004F5A                 sub     esp, 0Ch
.text$mn:00004F5D                 mov     ecx, esp
.text$mn:00004F5F                 mov     [ebp+var_1C], esp
.text$mn:00004F62                 lea     eax, [ebp+arg_C]
.text$mn:00004F65                 push    eax             ; int
.text$mn:00004F66                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004F6B                 mov     [ebp+var_14], eax
.text$mn:00004F6E                 mov     ecx, [ebp+var_14]
.text$mn:00004F71                 mov     [ebp+var_20], ecx
.text$mn:00004F74                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004F78                 sub     esp, 0Ch
.text$mn:00004F7B                 mov     ecx, esp
.text$mn:00004F7D                 mov     [ebp+var_24], esp
.text$mn:00004F80                 lea     edx, [ebp+arg_0]
.text$mn:00004F83                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004F84                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004F89                 mov     [ebp+var_18], eax
.text$mn:00004F8C                 mov     eax, [ebp+var_18]
.text$mn:00004F8F                 mov     [ebp+var_28], eax
.text$mn:00004F92                 mov     byte ptr [ebp+var_4], 3
.text$mn:00004F96                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004F9A                 call    ??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004F9F                 add     esp, 24h
.text$mn:00004FA2                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004FA6                 lea     ecx, [ebp+arg_0]
.text$mn:00004FA9                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004FAE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004FB5                 lea     ecx, [ebp+arg_C]
.text$mn:00004FB8                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004FBD                 mov     ecx, [ebp+var_C]
.text$mn:00004FC0                 mov     large fs:0, ecx
.text$mn:00004FC7                 pop     ecx
.text$mn:00004FC8                 mov     esp, ebp
.text$mn:00004FCA                 pop     ebp
.text$mn:00004FCB                 retn
.text$mn:00004FCB ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z endp
.text$mn:00004FCB
.text$mn:00004FCB _text$mn        ends
.text$mn:00004FCB
.text$x:00004FCC ; ===========================================================================
.text$x:00004FCC
.text$x:00004FCC ; Segment type: Pure code
.text$x:00004FCC ; Segment permissions: Read/Execute
.text$x:00004FCC _text$x         segment para public 'CODE' use32
.text$x:00004FCC                 assume cs:_text$x
.text$x:00004FCC                 ;org 4FCCh
.text$x:00004FCC ; COMDAT (pick associative to section at 4F10)
.text$x:00004FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FCC
.text$x:00004FCC ; =============== S U B R O U T I N E =======================================
.text$x:00004FCC
.text$x:00004FCC
.text$x:00004FCC __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$0 proc near
.text$x:00004FCC                                         ; DATA XREF: .xdata$x:00010D48o
.text$x:00004FCC                 lea     ecx, [ebp+14h]
.text$x:00004FCF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004FCF __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$0 endp
.text$x:00004FCF
.text$x:00004FD4
.text$x:00004FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FD4
.text$x:00004FD4
.text$x:00004FD4 __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$1 proc near
.text$x:00004FD4                                         ; DATA XREF: .xdata$x:00010D50o
.text$x:00004FD4                 lea     ecx, [ebp+8]
.text$x:00004FD7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004FD7 __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$1 endp
.text$x:00004FD7
.text$x:00004FDC
.text$x:00004FDC ; =============== S U B R O U T I N E =======================================
.text$x:00004FDC
.text$x:00004FDC
.text$x:00004FDC __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$2 proc near
.text$x:00004FDC                                         ; DATA XREF: .xdata$x:00010D58o
.text$x:00004FDC                 mov     ecx, [ebp-1Ch]
.text$x:00004FDF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004FDF __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$2 endp
.text$x:00004FDF
.text$x:00004FE4
.text$x:00004FE4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FE4
.text$x:00004FE4
.text$x:00004FE4 __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$3 proc near
.text$x:00004FE4                                         ; DATA XREF: .xdata$x:00010D60o
.text$x:00004FE4                 mov     ecx, [ebp-24h]
.text$x:00004FE7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004FE7 __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$3 endp
.text$x:00004FE7
.text$x:00004FEC
.text$x:00004FEC ; =============== S U B R O U T I N E =======================================
.text$x:00004FEC
.text$x:00004FEC
.text$x:00004FEC __ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z proc near
.text$x:00004FEC                                         ; DATA XREF: std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)+5o
.text$x:00004FEC
.text$x:00004FEC arg_4           = dword ptr  8
.text$x:00004FEC
.text$x:00004FEC                 mov     edx, [esp+arg_4]
.text$x:00004FF0                 lea     eax, [edx+0Ch]
.text$x:00004FF3                 mov     ecx, [edx-20h]
.text$x:00004FF6                 xor     ecx, eax
.text$x:00004FF8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FFD                 mov     eax, offset __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z
.text$x:00005002                 jmp     ___CxxFrameHandler3
.text$x:00005002 __ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z endp
.text$x:00005002
.text$x:00005002 ; ---------------------------------------------------------------------------
.text$x:00005007                 align 4
.text$x:00005007 _text$x         ends
.text$x:00005007
.text$mn:00005008 ; ===========================================================================
.text$mn:00005008
.text$mn:00005008 ; Segment type: Pure code
.text$mn:00005008 ; Segment permissions: Read/Execute
.text$mn:00005008 _text$mn        segment para public 'CODE' use32
.text$mn:00005008                 assume cs:_text$mn
.text$mn:00005008                 ;org 5008h
.text$mn:00005008 ; COMDAT (pick any)
.text$mn:00005008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005008
.text$mn:00005008 ; =============== S U B R O U T I N E =======================================
.text$mn:00005008
.text$mn:00005008 ; Attributes: bp-based frame
.text$mn:00005008
.text$mn:00005008 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>> &)
.text$mn:00005008                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z
.text$mn:00005008 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z proc near
.text$mn:00005008                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Destroy(MatchedCharInserted *,MatchedCharInserted *)+21p
.text$mn:00005008
.text$mn:00005008 var_1           = byte ptr -1
.text$mn:00005008 arg_0           = dword ptr  8
.text$mn:00005008 arg_4           = dword ptr  0Ch
.text$mn:00005008 arg_8           = dword ptr  10h
.text$mn:00005008
.text$mn:00005008                 push    ebp
.text$mn:00005009                 mov     ebp, esp
.text$mn:0000500B                 push    ecx
.text$mn:0000500C                 mov     eax, [ebp+arg_4]
.text$mn:0000500F                 push    eax
.text$mn:00005010                 mov     ecx, [ebp+arg_0]
.text$mn:00005013                 push    ecx
.text$mn:00005014                 call    ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z ; std::_Ptr_cat<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:00005019                 add     esp, 8
.text$mn:0000501C                 mov     [ebp+var_1], al
.text$mn:0000501F                 movzx   edx, [ebp+var_1]
.text$mn:00005023                 push    edx
.text$mn:00005024                 mov     eax, [ebp+arg_8]
.text$mn:00005027                 push    eax
.text$mn:00005028                 mov     ecx, [ebp+arg_4]
.text$mn:0000502B                 push    ecx
.text$mn:0000502C                 mov     edx, [ebp+arg_0]
.text$mn:0000502F                 push    edx
.text$mn:00005030                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005035                 add     esp, 10h
.text$mn:00005038                 mov     esp, ebp
.text$mn:0000503A                 pop     ebp
.text$mn:0000503B                 retn
.text$mn:0000503B ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z endp
.text$mn:0000503B
.text$mn:0000503B _text$mn        ends
.text$mn:0000503B
.text$mn:0000503C ; ===========================================================================
.text$mn:0000503C
.text$mn:0000503C ; Segment type: Pure code
.text$mn:0000503C ; Segment permissions: Read/Execute
.text$mn:0000503C _text$mn        segment para public 'CODE' use32
.text$mn:0000503C                 assume cs:_text$mn
.text$mn:0000503C                 ;org 503Ch
.text$mn:0000503C ; COMDAT (pick any)
.text$mn:0000503C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000503C
.text$mn:0000503C ; =============== S U B R O U T I N E =======================================
.text$mn:0000503C
.text$mn:0000503C ; Attributes: bp-based frame
.text$mn:0000503C
.text$mn:0000503C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000503C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000503C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:0000503C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+28p
.text$mn:0000503C
.text$mn:0000503C arg_0           = dword ptr  8
.text$mn:0000503C arg_4           = dword ptr  0Ch
.text$mn:0000503C arg_8           = dword ptr  10h
.text$mn:0000503C
.text$mn:0000503C                 push    ebp
.text$mn:0000503D                 mov     ebp, esp
.text$mn:0000503F                 jmp     short loc_504A
.text$mn:00005041 ; ---------------------------------------------------------------------------
.text$mn:00005041
.text$mn:00005041 loc_5041:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00005041                 mov     eax, [ebp+arg_0]
.text$mn:00005044                 add     eax, 8
.text$mn:00005047                 mov     [ebp+arg_0], eax
.text$mn:0000504A
.text$mn:0000504A loc_504A:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:0000504A                 mov     ecx, [ebp+arg_0]
.text$mn:0000504D                 cmp     ecx, [ebp+arg_4]
.text$mn:00005050                 jz      short loc_5060
.text$mn:00005052                 mov     edx, [ebp+arg_0]
.text$mn:00005055                 push    edx
.text$mn:00005056                 mov     ecx, [ebp+arg_8]
.text$mn:00005059                 call    ??$destroy@UMatchedCharInserted@@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::destroy<MatchedCharInserted>(MatchedCharInserted *)
.text$mn:0000505E                 jmp     short loc_5041
.text$mn:00005060 ; ---------------------------------------------------------------------------
.text$mn:00005060
.text$mn:00005060 loc_5060:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00005060                 pop     ebp
.text$mn:00005061                 retn
.text$mn:00005061 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005061
.text$mn:00005061 ; ---------------------------------------------------------------------------
.text$mn:00005062                 align 4
.text$mn:00005062 _text$mn        ends
.text$mn:00005062
.text$mn:00005064 ; ===========================================================================
.text$mn:00005064
.text$mn:00005064 ; Segment type: Pure code
.text$mn:00005064 ; Segment permissions: Read/Execute
.text$mn:00005064 _text$mn        segment para public 'CODE' use32
.text$mn:00005064                 assume cs:_text$mn
.text$mn:00005064                 ;org 5064h
.text$mn:00005064 ; COMDAT (pick any)
.text$mn:00005064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005064
.text$mn:00005064 ; =============== S U B R O U T I N E =======================================
.text$mn:00005064
.text$mn:00005064 ; Attributes: bp-based frame
.text$mn:00005064
.text$mn:00005064 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00005064                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00005064 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00005064                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:00005064
.text$mn:00005064 var_1           = byte ptr -1
.text$mn:00005064 arg_0           = dword ptr  8
.text$mn:00005064 arg_4           = dword ptr  0Ch
.text$mn:00005064 arg_8           = dword ptr  10h
.text$mn:00005064
.text$mn:00005064                 push    ebp
.text$mn:00005065                 mov     ebp, esp
.text$mn:00005067                 push    ecx
.text$mn:00005068                 mov     eax, [ebp+arg_4]
.text$mn:0000506B                 push    eax
.text$mn:0000506C                 mov     ecx, [ebp+arg_0]
.text$mn:0000506F                 push    ecx
.text$mn:00005070                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005075                 add     esp, 8
.text$mn:00005078                 mov     [ebp+var_1], al
.text$mn:0000507B                 movzx   edx, [ebp+var_1]
.text$mn:0000507F                 push    edx
.text$mn:00005080                 mov     eax, [ebp+arg_8]
.text$mn:00005083                 push    eax
.text$mn:00005084                 mov     ecx, [ebp+arg_4]
.text$mn:00005087                 push    ecx
.text$mn:00005088                 mov     edx, [ebp+arg_0]
.text$mn:0000508B                 push    edx
.text$mn:0000508C                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005091                 add     esp, 10h
.text$mn:00005094                 mov     esp, ebp
.text$mn:00005096                 pop     ebp
.text$mn:00005097                 retn
.text$mn:00005097 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00005097
.text$mn:00005097 _text$mn        ends
.text$mn:00005097
.text$mn:00005098 ; ===========================================================================
.text$mn:00005098
.text$mn:00005098 ; Segment type: Pure code
.text$mn:00005098 ; Segment permissions: Read/Execute
.text$mn:00005098 _text$mn        segment para public 'CODE' use32
.text$mn:00005098                 assume cs:_text$mn
.text$mn:00005098                 ;org 5098h
.text$mn:00005098 ; COMDAT (pick any)
.text$mn:00005098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005098
.text$mn:00005098 ; =============== S U B R O U T I N E =======================================
.text$mn:00005098
.text$mn:00005098 ; Attributes: bp-based frame
.text$mn:00005098
.text$mn:00005098 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005098                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005098 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005098                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:00005098
.text$mn:00005098 arg_0           = dword ptr  8
.text$mn:00005098 arg_4           = dword ptr  0Ch
.text$mn:00005098 arg_8           = dword ptr  10h
.text$mn:00005098
.text$mn:00005098                 push    ebp
.text$mn:00005099                 mov     ebp, esp
.text$mn:0000509B                 jmp     short loc_50A6
.text$mn:0000509D ; ---------------------------------------------------------------------------
.text$mn:0000509D
.text$mn:0000509D loc_509D:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:0000509D                 mov     eax, [ebp+arg_0]
.text$mn:000050A0                 add     eax, 1Ch
.text$mn:000050A3                 mov     [ebp+arg_0], eax
.text$mn:000050A6
.text$mn:000050A6 loc_50A6:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000050A6                 mov     ecx, [ebp+arg_0]
.text$mn:000050A9                 cmp     ecx, [ebp+arg_4]
.text$mn:000050AC                 jz      short loc_50BC
.text$mn:000050AE                 mov     edx, [ebp+arg_0]
.text$mn:000050B1                 push    edx
.text$mn:000050B2                 mov     ecx, [ebp+arg_8]
.text$mn:000050B5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000050BA                 jmp     short loc_509D
.text$mn:000050BC ; ---------------------------------------------------------------------------
.text$mn:000050BC
.text$mn:000050BC loc_50BC:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:000050BC                 pop     ebp
.text$mn:000050BD                 retn
.text$mn:000050BD ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000050BD
.text$mn:000050BD ; ---------------------------------------------------------------------------
.text$mn:000050BE                 align 10h
.text$mn:000050BE _text$mn        ends
.text$mn:000050BE
.text$mn:000050C0 ; ===========================================================================
.text$mn:000050C0
.text$mn:000050C0 ; Segment type: Pure code
.text$mn:000050C0 ; Segment permissions: Read/Execute
.text$mn:000050C0 _text$mn        segment para public 'CODE' use32
.text$mn:000050C0                 assume cs:_text$mn
.text$mn:000050C0                 ;org 50C0h
.text$mn:000050C0 ; COMDAT (pick any)
.text$mn:000050C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050C0
.text$mn:000050C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000050C0
.text$mn:000050C0 ; Attributes: bp-based frame
.text$mn:000050C0
.text$mn:000050C0 ; int * __cdecl std::_Dist_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000050C0                 public ??$_Dist_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAHPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:000050C0 ??$_Dist_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAHPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:000050C0                                         ; CODE XREF: std::_Pop_heap_0<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Bp
.text$mn:000050C0                                         ; std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+57p
.text$mn:000050C0                 push    ebp
.text$mn:000050C1                 mov     ebp, esp
.text$mn:000050C3                 xor     eax, eax
.text$mn:000050C5                 pop     ebp
.text$mn:000050C6                 retn
.text$mn:000050C6 ??$_Dist_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAHPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:000050C6
.text$mn:000050C6 ; ---------------------------------------------------------------------------
.text$mn:000050C7                 align 4
.text$mn:000050C7 _text$mn        ends
.text$mn:000050C7
.text$mn:000050C8 ; ===========================================================================
.text$mn:000050C8
.text$mn:000050C8 ; Segment type: Pure code
.text$mn:000050C8 ; Segment permissions: Read/Execute
.text$mn:000050C8 _text$mn        segment para public 'CODE' use32
.text$mn:000050C8                 assume cs:_text$mn
.text$mn:000050C8                 ;org 50C8h
.text$mn:000050C8 ; COMDAT (pick any)
.text$mn:000050C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050C8
.text$mn:000050C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000050C8
.text$mn:000050C8 ; Attributes: bp-based frame
.text$mn:000050C8
.text$mn:000050C8 ; void __cdecl std::_Insertion_sort1<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000050C8                 public ??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$mn:000050C8 ??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z proc near
.text$mn:000050C8                                         ; CODE XREF: std::_Insertion_sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1Dp
.text$mn:000050C8
.text$mn:000050C8 var_38          = dword ptr -38h
.text$mn:000050C8 var_34          = dword ptr -34h
.text$mn:000050C8 var_30          = dword ptr -30h
.text$mn:000050C8 var_2C          = dword ptr -2Ch
.text$mn:000050C8 var_10          = dword ptr -10h
.text$mn:000050C8 var_C           = dword ptr -0Ch
.text$mn:000050C8 var_4           = dword ptr -4
.text$mn:000050C8 arg_0           = dword ptr  8
.text$mn:000050C8 arg_4           = dword ptr  0Ch
.text$mn:000050C8 arg_8           = byte ptr  10h
.text$mn:000050C8
.text$mn:000050C8                 push    ebp
.text$mn:000050C9                 mov     ebp, esp
.text$mn:000050CB                 push    0FFFFFFFFh
.text$mn:000050CD                 push    offset __ehhandler$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$mn:000050D2                 mov     eax, large fs:0
.text$mn:000050D8                 push    eax
.text$mn:000050D9                 sub     esp, 2Ch
.text$mn:000050DC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000050E1                 xor     eax, ebp
.text$mn:000050E3                 mov     [ebp+var_10], eax
.text$mn:000050E6                 push    eax
.text$mn:000050E7                 lea     eax, [ebp+var_C]
.text$mn:000050EA                 mov     large fs:0, eax
.text$mn:000050F0                 mov     eax, [ebp+arg_0]
.text$mn:000050F3                 cmp     eax, [ebp+arg_4]
.text$mn:000050F6                 jz      loc_5210
.text$mn:000050FC                 mov     ecx, [ebp+arg_0]
.text$mn:000050FF                 mov     [ebp+var_34], ecx
.text$mn:00005102
.text$mn:00005102 loc_5102:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+143j
.text$mn:00005102                 mov     edx, [ebp+var_34]
.text$mn:00005105                 add     edx, 1Ch
.text$mn:00005108                 mov     [ebp+var_34], edx
.text$mn:0000510B                 mov     eax, [ebp+var_34]
.text$mn:0000510E                 cmp     eax, [ebp+arg_4]
.text$mn:00005111                 jz      loc_5210
.text$mn:00005117                 mov     ecx, [ebp+var_34]
.text$mn:0000511A                 mov     [ebp+var_30], ecx
.text$mn:0000511D                 mov     edx, [ebp+var_34]
.text$mn:00005120                 push    edx
.text$mn:00005121                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005126                 add     esp, 4
.text$mn:00005129                 push    eax
.text$mn:0000512A                 lea     ecx, [ebp+var_2C]
.text$mn:0000512D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005132                 mov     [ebp+var_4], 0
.text$mn:00005139                 push    0BBEh           ; unsigned int
.text$mn:0000513E                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005143                 mov     eax, [ebp+arg_0]
.text$mn:00005146                 push    eax             ; int
.text$mn:00005147                 lea     ecx, [ebp+var_2C]
.text$mn:0000514A                 push    ecx             ; int
.text$mn:0000514B                 movzx   edx, [ebp+arg_8]
.text$mn:0000514F                 push    edx             ; char
.text$mn:00005150                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005155                 add     esp, 14h
.text$mn:00005158                 movzx   eax, al
.text$mn:0000515B                 test    eax, eax
.text$mn:0000515D                 jz      short loc_5193
.text$mn:0000515F                 mov     ecx, [ebp+var_30]
.text$mn:00005162                 add     ecx, 1Ch
.text$mn:00005165                 mov     [ebp+var_30], ecx
.text$mn:00005168                 mov     edx, [ebp+var_30]
.text$mn:0000516B                 push    edx
.text$mn:0000516C                 mov     eax, [ebp+var_34]
.text$mn:0000516F                 push    eax
.text$mn:00005170                 mov     ecx, [ebp+arg_0]
.text$mn:00005173                 push    ecx
.text$mn:00005174                 call    ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z ; std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005179                 add     esp, 0Ch
.text$mn:0000517C                 lea     edx, [ebp+var_2C]
.text$mn:0000517F                 push    edx
.text$mn:00005180                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005185                 add     esp, 4
.text$mn:00005188                 push    eax
.text$mn:00005189                 mov     ecx, [ebp+arg_0]
.text$mn:0000518C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005191                 jmp     short loc_51FC
.text$mn:00005193 ; ---------------------------------------------------------------------------
.text$mn:00005193
.text$mn:00005193 loc_5193:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+95j
.text$mn:00005193                 mov     eax, [ebp+var_30]
.text$mn:00005196                 mov     [ebp+var_38], eax
.text$mn:00005199                 jmp     short loc_51A1
.text$mn:0000519B ; ---------------------------------------------------------------------------
.text$mn:0000519B
.text$mn:0000519B loc_519B:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11Dj
.text$mn:0000519B                 mov     ecx, [ebp+var_38]
.text$mn:0000519E                 mov     [ebp+var_30], ecx
.text$mn:000051A1
.text$mn:000051A1 loc_51A1:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+D1j
.text$mn:000051A1                 mov     edx, [ebp+var_38]
.text$mn:000051A4                 sub     edx, 1Ch
.text$mn:000051A7                 mov     [ebp+var_38], edx
.text$mn:000051AA                 push    0BC6h           ; unsigned int
.text$mn:000051AF                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000051B4                 mov     eax, [ebp+var_38]
.text$mn:000051B7                 push    eax             ; int
.text$mn:000051B8                 lea     ecx, [ebp+var_2C]
.text$mn:000051BB                 push    ecx             ; int
.text$mn:000051BC                 movzx   edx, [ebp+arg_8]
.text$mn:000051C0                 push    edx             ; char
.text$mn:000051C1                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:000051C6                 add     esp, 14h
.text$mn:000051C9                 movzx   eax, al
.text$mn:000051CC                 test    eax, eax
.text$mn:000051CE                 jz      short loc_51E7
.text$mn:000051D0                 mov     ecx, [ebp+var_38]
.text$mn:000051D3                 push    ecx
.text$mn:000051D4                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000051D9                 add     esp, 4
.text$mn:000051DC                 push    eax
.text$mn:000051DD                 mov     ecx, [ebp+var_30]
.text$mn:000051E0                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000051E5                 jmp     short loc_519B
.text$mn:000051E7 ; ---------------------------------------------------------------------------
.text$mn:000051E7
.text$mn:000051E7 loc_51E7:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+106j
.text$mn:000051E7                 lea     edx, [ebp+var_2C]
.text$mn:000051EA                 push    edx
.text$mn:000051EB                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000051F0                 add     esp, 4
.text$mn:000051F3                 push    eax
.text$mn:000051F4                 mov     ecx, [ebp+var_30]
.text$mn:000051F7                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000051FC
.text$mn:000051FC loc_51FC:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+C9j
.text$mn:000051FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005203                 lea     ecx, [ebp+var_2C]
.text$mn:00005206                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000520B                 jmp     loc_5102
.text$mn:00005210 ; ---------------------------------------------------------------------------
.text$mn:00005210
.text$mn:00005210 loc_5210:                               ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+2Ej
.text$mn:00005210                                         ; std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+49j
.text$mn:00005210                 mov     ecx, [ebp+var_C]
.text$mn:00005213                 mov     large fs:0, ecx
.text$mn:0000521A                 pop     ecx
.text$mn:0000521B                 mov     ecx, [ebp+var_10]
.text$mn:0000521E                 xor     ecx, ebp
.text$mn:00005220                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00005225                 mov     esp, ebp
.text$mn:00005227                 pop     ebp
.text$mn:00005228                 retn
.text$mn:00005228 ??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z endp
.text$mn:00005228
.text$mn:00005228 ; ---------------------------------------------------------------------------
.text$mn:00005229                 align 4
.text$mn:00005229 _text$mn        ends
.text$mn:00005229
.text$x:0000522C ; ===========================================================================
.text$x:0000522C
.text$x:0000522C ; Segment type: Pure code
.text$x:0000522C ; Segment permissions: Read/Execute
.text$x:0000522C _text$x         segment para public 'CODE' use32
.text$x:0000522C                 assume cs:_text$x
.text$x:0000522C                 ;org 522Ch
.text$x:0000522C ; COMDAT (pick associative to section at 50C8)
.text$x:0000522C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000522C
.text$x:0000522C ; =============== S U B R O U T I N E =======================================
.text$x:0000522C
.text$x:0000522C
.text$x:0000522C __unwindfunclet$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0 proc near
.text$x:0000522C                                         ; DATA XREF: .xdata$x:00010FA4o
.text$x:0000522C                 lea     ecx, [ebp-2Ch]
.text$x:0000522F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000522F __unwindfunclet$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0 endp
.text$x:0000522F
.text$x:00005234
.text$x:00005234 ; =============== S U B R O U T I N E =======================================
.text$x:00005234
.text$x:00005234
.text$x:00005234 __ehhandler$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z proc near
.text$x:00005234                                         ; DATA XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00005234
.text$x:00005234 arg_4           = dword ptr  8
.text$x:00005234
.text$x:00005234                 mov     edx, [esp+arg_4]
.text$x:00005238                 lea     eax, [edx+0Ch]
.text$x:0000523B                 mov     ecx, [edx-30h]
.text$x:0000523E                 xor     ecx, eax
.text$x:00005240                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005245                 mov     ecx, [edx-4]
.text$x:00005248                 xor     ecx, eax
.text$x:0000524A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000524F                 mov     eax, offset __ehfuncinfo$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$x:00005254                 jmp     ___CxxFrameHandler3
.text$x:00005254 __ehhandler$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z endp
.text$x:00005254
.text$x:00005254 ; ---------------------------------------------------------------------------
.text$x:00005259                 align 4
.text$x:00005259 _text$x         ends
.text$x:00005259
.text$mn:0000525C ; ===========================================================================
.text$mn:0000525C
.text$mn:0000525C ; Segment type: Pure code
.text$mn:0000525C ; Segment permissions: Read/Execute
.text$mn:0000525C _text$mn        segment para public 'CODE' use32
.text$mn:0000525C                 assume cs:_text$mn
.text$mn:0000525C                 ;org 525Ch
.text$mn:0000525C ; COMDAT (pick any)
.text$mn:0000525C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000525C
.text$mn:0000525C ; =============== S U B R O U T I N E =======================================
.text$mn:0000525C
.text$mn:0000525C ; Attributes: bp-based frame
.text$mn:0000525C
.text$mn:0000525C ; void __cdecl std::_Insertion_sort<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:0000525C                 public ??$_Insertion_sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:0000525C ??$_Insertion_sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:0000525C                                         ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+10Ap
.text$mn:0000525C
.text$mn:0000525C arg_0           = dword ptr  8
.text$mn:0000525C arg_4           = dword ptr  0Ch
.text$mn:0000525C arg_8           = byte ptr  10h
.text$mn:0000525C
.text$mn:0000525C                 push    ebp
.text$mn:0000525D                 mov     ebp, esp
.text$mn:0000525F                 mov     eax, [ebp+arg_0]
.text$mn:00005262                 push    eax
.text$mn:00005263                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005268                 add     esp, 4
.text$mn:0000526B                 push    eax
.text$mn:0000526C                 movzx   ecx, [ebp+arg_8]
.text$mn:00005270                 push    ecx
.text$mn:00005271                 mov     edx, [ebp+arg_4]
.text$mn:00005274                 push    edx
.text$mn:00005275                 mov     eax, [ebp+arg_0]
.text$mn:00005278                 push    eax
.text$mn:00005279                 call    ??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z ; std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000527E                 add     esp, 10h
.text$mn:00005281                 pop     ebp
.text$mn:00005282                 retn
.text$mn:00005282 ??$_Insertion_sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00005282
.text$mn:00005282 ; ---------------------------------------------------------------------------
.text$mn:00005283                 align 4
.text$mn:00005283 _text$mn        ends
.text$mn:00005283
.text$mn:00005284 ; ===========================================================================
.text$mn:00005284
.text$mn:00005284 ; Segment type: Pure code
.text$mn:00005284 ; Segment permissions: Read/Execute
.text$mn:00005284 _text$mn        segment para public 'CODE' use32
.text$mn:00005284                 assume cs:_text$mn
.text$mn:00005284                 ;org 5284h
.text$mn:00005284 ; COMDAT (pick any)
.text$mn:00005284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005284
.text$mn:00005284 ; =============== S U B R O U T I N E =======================================
.text$mn:00005284
.text$mn:00005284 ; Attributes: bp-based frame
.text$mn:00005284
.text$mn:00005284 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct MatchedCharInserted *>(struct MatchedCharInserted * const &)
.text$mn:00005284                 public ??$_Iter_cat@PAUMatchedCharInserted@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMatchedCharInserted@@@Z
.text$mn:00005284 ??$_Iter_cat@PAUMatchedCharInserted@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMatchedCharInserted@@@Z proc near
.text$mn:00005284                                         ; CODE XREF: std::_Debug_range<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint)+Cp
.text$mn:00005284
.text$mn:00005284 var_1           = byte ptr -1
.text$mn:00005284 arg_0           = dword ptr  8
.text$mn:00005284
.text$mn:00005284                 push    ebp
.text$mn:00005285                 mov     ebp, esp
.text$mn:00005287                 push    ecx
.text$mn:00005288                 mov     eax, [ebp+arg_0]
.text$mn:0000528B                 mov     cl, [ebp+var_1]
.text$mn:0000528E                 mov     [eax], cl
.text$mn:00005290                 mov     eax, [ebp+arg_0]
.text$mn:00005293                 mov     esp, ebp
.text$mn:00005295                 pop     ebp
.text$mn:00005296                 retn
.text$mn:00005296 ??$_Iter_cat@PAUMatchedCharInserted@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMatchedCharInserted@@@Z endp
.text$mn:00005296
.text$mn:00005296 ; ---------------------------------------------------------------------------
.text$mn:00005297                 align 4
.text$mn:00005297 _text$mn        ends
.text$mn:00005297
.text$mn:00005298 ; ===========================================================================
.text$mn:00005298
.text$mn:00005298 ; Segment type: Pure code
.text$mn:00005298 ; Segment permissions: Read/Execute
.text$mn:00005298 _text$mn        segment para public 'CODE' use32
.text$mn:00005298                 assume cs:_text$mn
.text$mn:00005298                 ;org 5298h
.text$mn:00005298 ; COMDAT (pick any)
.text$mn:00005298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005298
.text$mn:00005298 ; =============== S U B R O U T I N E =======================================
.text$mn:00005298
.text$mn:00005298 ; Attributes: bp-based frame
.text$mn:00005298
.text$mn:00005298 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * const &)
.text$mn:00005298                 public ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00005298 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00005298                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+Cp
.text$mn:00005298
.text$mn:00005298 var_1           = byte ptr -1
.text$mn:00005298 arg_0           = dword ptr  8
.text$mn:00005298
.text$mn:00005298                 push    ebp
.text$mn:00005299                 mov     ebp, esp
.text$mn:0000529B                 push    ecx
.text$mn:0000529C                 mov     eax, [ebp+arg_0]
.text$mn:0000529F                 mov     cl, [ebp+var_1]
.text$mn:000052A2                 mov     [eax], cl
.text$mn:000052A4                 mov     eax, [ebp+arg_0]
.text$mn:000052A7                 mov     esp, ebp
.text$mn:000052A9                 pop     ebp
.text$mn:000052AA                 retn
.text$mn:000052AA ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:000052AA
.text$mn:000052AA ; ---------------------------------------------------------------------------
.text$mn:000052AB                 align 4
.text$mn:000052AB _text$mn        ends
.text$mn:000052AB
.text$mn:000052AC ; ===========================================================================
.text$mn:000052AC
.text$mn:000052AC ; Segment type: Pure code
.text$mn:000052AC ; Segment permissions: Read/Execute
.text$mn:000052AC _text$mn        segment para public 'CODE' use32
.text$mn:000052AC                 assume cs:_text$mn
.text$mn:000052AC                 ;org 52ACh
.text$mn:000052AC ; COMDAT (pick any)
.text$mn:000052AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052AC
.text$mn:000052AC ; =============== S U B R O U T I N E =======================================
.text$mn:000052AC
.text$mn:000052AC ; Attributes: bp-based frame
.text$mn:000052AC
.text$mn:000052AC ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<char const *>(char const * const &)
.text$mn:000052AC                 public ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z
.text$mn:000052AC ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z proc near
.text$mn:000052AC                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+Cp
.text$mn:000052AC
.text$mn:000052AC var_1           = byte ptr -1
.text$mn:000052AC arg_0           = dword ptr  8
.text$mn:000052AC
.text$mn:000052AC                 push    ebp
.text$mn:000052AD                 mov     ebp, esp
.text$mn:000052AF                 push    ecx
.text$mn:000052B0                 mov     eax, [ebp+arg_0]
.text$mn:000052B3                 mov     cl, [ebp+var_1]
.text$mn:000052B6                 mov     [eax], cl
.text$mn:000052B8                 mov     eax, [ebp+arg_0]
.text$mn:000052BB                 mov     esp, ebp
.text$mn:000052BD                 pop     ebp
.text$mn:000052BE                 retn
.text$mn:000052BE ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z endp
.text$mn:000052BE
.text$mn:000052BE ; ---------------------------------------------------------------------------
.text$mn:000052BF                 align 10h
.text$mn:000052BF _text$mn        ends
.text$mn:000052BF
.text$mn:000052C0 ; ===========================================================================
.text$mn:000052C0
.text$mn:000052C0 ; Segment type: Pure code
.text$mn:000052C0 ; Segment permissions: Read/Execute
.text$mn:000052C0 _text$mn        segment para public 'CODE' use32
.text$mn:000052C0                 assume cs:_text$mn
.text$mn:000052C0                 ;org 52C0h
.text$mn:000052C0 ; COMDAT (pick any)
.text$mn:000052C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052C0
.text$mn:000052C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052C0
.text$mn:000052C0 ; Attributes: bp-based frame
.text$mn:000052C0
.text$mn:000052C0 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:000052C0                 public ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z
.text$mn:000052C0 ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z proc near
.text$mn:000052C0                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+Cp
.text$mn:000052C0
.text$mn:000052C0 var_1           = byte ptr -1
.text$mn:000052C0 arg_0           = dword ptr  8
.text$mn:000052C0
.text$mn:000052C0                 push    ebp
.text$mn:000052C1                 mov     ebp, esp
.text$mn:000052C3                 push    ecx
.text$mn:000052C4                 mov     eax, [ebp+arg_0]
.text$mn:000052C7                 mov     cl, [ebp+var_1]
.text$mn:000052CA                 mov     [eax], cl
.text$mn:000052CC                 mov     eax, [ebp+arg_0]
.text$mn:000052CF                 mov     esp, ebp
.text$mn:000052D1                 pop     ebp
.text$mn:000052D2                 retn
.text$mn:000052D2 ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z endp
.text$mn:000052D2
.text$mn:000052D2 ; ---------------------------------------------------------------------------
.text$mn:000052D3                 align 4
.text$mn:000052D3 _text$mn        ends
.text$mn:000052D3
.text$mn:000052D4 ; ===========================================================================
.text$mn:000052D4
.text$mn:000052D4 ; Segment type: Pure code
.text$mn:000052D4 ; Segment permissions: Read/Execute
.text$mn:000052D4 _text$mn        segment para public 'CODE' use32
.text$mn:000052D4                 assume cs:_text$mn
.text$mn:000052D4                 ;org 52D4h
.text$mn:000052D4 ; COMDAT (pick any)
.text$mn:000052D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052D4
.text$mn:000052D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000052D4
.text$mn:000052D4 ; Attributes: bp-based frame
.text$mn:000052D4
.text$mn:000052D4 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> const &)
.text$mn:000052D4                 public ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:000052D4 ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$mn:000052D4                                         ; CODE XREF: std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)+34p
.text$mn:000052D4
.text$mn:000052D4 var_1           = byte ptr -1
.text$mn:000052D4 arg_0           = dword ptr  8
.text$mn:000052D4
.text$mn:000052D4                 push    ebp
.text$mn:000052D5                 mov     ebp, esp
.text$mn:000052D7                 push    ecx
.text$mn:000052D8                 mov     eax, [ebp+arg_0]
.text$mn:000052DB                 mov     cl, [ebp+var_1]
.text$mn:000052DE                 mov     [eax], cl
.text$mn:000052E0                 mov     eax, [ebp+arg_0]
.text$mn:000052E3                 mov     esp, ebp
.text$mn:000052E5                 pop     ebp
.text$mn:000052E6                 retn
.text$mn:000052E6 ??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$mn:000052E6
.text$mn:000052E6 ; ---------------------------------------------------------------------------
.text$mn:000052E7                 align 4
.text$mn:000052E7 _text$mn        ends
.text$mn:000052E7
.text$mn:000052E8 ; ===========================================================================
.text$mn:000052E8
.text$mn:000052E8 ; Segment type: Pure code
.text$mn:000052E8 ; Segment permissions: Read/Execute
.text$mn:000052E8 _text$mn        segment para public 'CODE' use32
.text$mn:000052E8                 assume cs:_text$mn
.text$mn:000052E8                 ;org 52E8h
.text$mn:000052E8 ; COMDAT (pick any)
.text$mn:000052E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052E8
.text$mn:000052E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000052E8
.text$mn:000052E8 ; Attributes: bp-based frame
.text$mn:000052E8
.text$mn:000052E8 ; void __cdecl std::_Make_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>, int *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000052E8                 public ??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z
.text$mn:000052E8 ??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z proc near
.text$mn:000052E8                                         ; CODE XREF: std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+7Fp
.text$mn:000052E8
.text$mn:000052E8 var_34          = dword ptr -34h
.text$mn:000052E8 var_30          = dword ptr -30h
.text$mn:000052E8 var_2C          = byte ptr -2Ch
.text$mn:000052E8 var_10          = dword ptr -10h
.text$mn:000052E8 var_C           = dword ptr -0Ch
.text$mn:000052E8 var_4           = dword ptr -4
.text$mn:000052E8 arg_0           = dword ptr  8
.text$mn:000052E8 arg_4           = dword ptr  0Ch
.text$mn:000052E8 arg_8           = byte ptr  10h
.text$mn:000052E8
.text$mn:000052E8                 push    ebp
.text$mn:000052E9                 mov     ebp, esp
.text$mn:000052EB                 push    0FFFFFFFFh
.text$mn:000052ED                 push    offset __ehhandler$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z
.text$mn:000052F2                 mov     eax, large fs:0
.text$mn:000052F8                 push    eax
.text$mn:000052F9                 sub     esp, 28h
.text$mn:000052FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005301                 xor     eax, ebp
.text$mn:00005303                 mov     [ebp+var_10], eax
.text$mn:00005306                 push    eax
.text$mn:00005307                 lea     eax, [ebp+var_C]
.text$mn:0000530A                 mov     large fs:0, eax
.text$mn:00005310                 mov     eax, [ebp+arg_4]
.text$mn:00005313                 sub     eax, [ebp+arg_0]
.text$mn:00005316                 cdq
.text$mn:00005317                 mov     ecx, 1Ch
.text$mn:0000531C                 idiv    ecx
.text$mn:0000531E                 mov     [ebp+var_34], eax
.text$mn:00005321                 mov     eax, [ebp+var_34]
.text$mn:00005324                 cdq
.text$mn:00005325                 sub     eax, edx
.text$mn:00005327                 sar     eax, 1
.text$mn:00005329                 mov     [ebp+var_30], eax
.text$mn:0000532C
.text$mn:0000532C loc_532C:                               ; CODE XREF: std::_Make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,int *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+A8j
.text$mn:0000532C                 cmp     [ebp+var_30], 0
.text$mn:00005330                 jle     short loc_5392
.text$mn:00005332                 mov     edx, [ebp+var_30]
.text$mn:00005335                 sub     edx, 1
.text$mn:00005338                 mov     [ebp+var_30], edx
.text$mn:0000533B                 imul    eax, [ebp+var_30], 1Ch
.text$mn:0000533F                 add     eax, [ebp+arg_0]
.text$mn:00005342                 push    eax
.text$mn:00005343                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005348                 add     esp, 4
.text$mn:0000534B                 push    eax
.text$mn:0000534C                 lea     ecx, [ebp+var_2C]
.text$mn:0000534F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005354                 mov     [ebp+var_4], 0
.text$mn:0000535B                 movzx   ecx, [ebp+arg_8]
.text$mn:0000535F                 push    ecx
.text$mn:00005360                 lea     edx, [ebp+var_2C]
.text$mn:00005363                 push    edx
.text$mn:00005364                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005369                 add     esp, 4
.text$mn:0000536C                 push    eax
.text$mn:0000536D                 mov     eax, [ebp+var_34]
.text$mn:00005370                 push    eax
.text$mn:00005371                 mov     ecx, [ebp+var_30]
.text$mn:00005374                 push    ecx
.text$mn:00005375                 mov     edx, [ebp+arg_0]
.text$mn:00005378                 push    edx
.text$mn:00005379                 call    ??$_Adjust_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)
.text$mn:0000537E                 add     esp, 14h
.text$mn:00005381                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005388                 lea     ecx, [ebp+var_2C]
.text$mn:0000538B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005390                 jmp     short loc_532C
.text$mn:00005392 ; ---------------------------------------------------------------------------
.text$mn:00005392
.text$mn:00005392 loc_5392:                               ; CODE XREF: std::_Make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,int *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:00005392                 mov     ecx, [ebp+var_C]
.text$mn:00005395                 mov     large fs:0, ecx
.text$mn:0000539C                 pop     ecx
.text$mn:0000539D                 mov     ecx, [ebp+var_10]
.text$mn:000053A0                 xor     ecx, ebp
.text$mn:000053A2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000053A7                 mov     esp, ebp
.text$mn:000053A9                 pop     ebp
.text$mn:000053AA                 retn
.text$mn:000053AA ??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z endp
.text$mn:000053AA
.text$mn:000053AA ; ---------------------------------------------------------------------------
.text$mn:000053AB                 align 4
.text$mn:000053AB _text$mn        ends
.text$mn:000053AB
.text$x:000053AC ; ===========================================================================
.text$x:000053AC
.text$x:000053AC ; Segment type: Pure code
.text$x:000053AC ; Segment permissions: Read/Execute
.text$x:000053AC _text$x         segment para public 'CODE' use32
.text$x:000053AC                 assume cs:_text$x
.text$x:000053AC                 ;org 53ACh
.text$x:000053AC ; COMDAT (pick associative to section at 52E8)
.text$x:000053AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000053AC
.text$x:000053AC ; =============== S U B R O U T I N E =======================================
.text$x:000053AC
.text$x:000053AC
.text$x:000053AC __unwindfunclet$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z$0 proc near
.text$x:000053AC                                         ; DATA XREF: .xdata$x:00010F78o
.text$x:000053AC                 lea     ecx, [ebp-2Ch]
.text$x:000053AF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000053AF __unwindfunclet$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z$0 endp
.text$x:000053AF
.text$x:000053B4
.text$x:000053B4 ; =============== S U B R O U T I N E =======================================
.text$x:000053B4
.text$x:000053B4
.text$x:000053B4 __ehhandler$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z proc near
.text$x:000053B4                                         ; DATA XREF: std::_Make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,int *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:000053B4
.text$x:000053B4 arg_4           = dword ptr  8
.text$x:000053B4
.text$x:000053B4                 mov     edx, [esp+arg_4]
.text$x:000053B8                 lea     eax, [edx+0Ch]
.text$x:000053BB                 mov     ecx, [edx-2Ch]
.text$x:000053BE                 xor     ecx, eax
.text$x:000053C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053C5                 mov     ecx, [edx-4]
.text$x:000053C8                 xor     ecx, eax
.text$x:000053CA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053CF                 mov     eax, offset __ehfuncinfo$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z
.text$x:000053D4                 jmp     ___CxxFrameHandler3
.text$x:000053D4 __ehhandler$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z endp
.text$x:000053D4
.text$x:000053D4 ; ---------------------------------------------------------------------------
.text$x:000053D9                 align 4
.text$x:000053D9 _text$x         ends
.text$x:000053D9
.text$mn:000053DC ; ===========================================================================
.text$mn:000053DC
.text$mn:000053DC ; Segment type: Pure code
.text$mn:000053DC ; Segment permissions: Read/Execute
.text$mn:000053DC _text$mn        segment para public 'CODE' use32
.text$mn:000053DC                 assume cs:_text$mn
.text$mn:000053DC                 ;org 53DCh
.text$mn:000053DC ; COMDAT (pick any)
.text$mn:000053DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053DC
.text$mn:000053DC ; =============== S U B R O U T I N E =======================================
.text$mn:000053DC
.text$mn:000053DC ; Attributes: bp-based frame
.text$mn:000053DC
.text$mn:000053DC ; int __cdecl std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(struct std::_Container_base12 *, struct std::_Container_base12 *, int, char)
.text$mn:000053DC                 public ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z
.text$mn:000053DC ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z proc near
.text$mn:000053DC                                         ; CODE XREF: std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+55p
.text$mn:000053DC                                         ; std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+78p ...
.text$mn:000053DC
.text$mn:000053DC arg_0           = dword ptr  8
.text$mn:000053DC arg_4           = dword ptr  0Ch
.text$mn:000053DC arg_8           = dword ptr  10h
.text$mn:000053DC arg_C           = byte ptr  14h
.text$mn:000053DC
.text$mn:000053DC                 push    ebp
.text$mn:000053DD                 mov     ebp, esp
.text$mn:000053DF                 push    0BD9h           ; unsigned int
.text$mn:000053E4                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053E9                 mov     eax, [ebp+arg_0]
.text$mn:000053EC                 push    eax             ; int
.text$mn:000053ED                 mov     ecx, [ebp+arg_4]
.text$mn:000053F0                 push    ecx             ; int
.text$mn:000053F1                 movzx   edx, [ebp+arg_C]
.text$mn:000053F5                 push    edx             ; char
.text$mn:000053F6                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:000053FB                 add     esp, 14h
.text$mn:000053FE                 movzx   eax, al
.text$mn:00005401                 test    eax, eax
.text$mn:00005403                 jz      short loc_5415
.text$mn:00005405                 mov     ecx, [ebp+arg_0]
.text$mn:00005408                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005409                 mov     edx, [ebp+arg_4]
.text$mn:0000540C                 push    edx             ; int
.text$mn:0000540D                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005412                 add     esp, 8
.text$mn:00005415
.text$mn:00005415 loc_5415:                               ; CODE XREF: std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+27j
.text$mn:00005415                 push    0BDBh           ; unsigned int
.text$mn:0000541A                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000541F                 mov     eax, [ebp+arg_4]
.text$mn:00005422                 push    eax             ; int
.text$mn:00005423                 mov     ecx, [ebp+arg_8]
.text$mn:00005426                 push    ecx             ; int
.text$mn:00005427                 movzx   edx, [ebp+arg_C]
.text$mn:0000542B                 push    edx             ; char
.text$mn:0000542C                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005431                 add     esp, 14h
.text$mn:00005434                 movzx   eax, al
.text$mn:00005437                 test    eax, eax
.text$mn:00005439                 jz      short loc_5481
.text$mn:0000543B                 mov     ecx, [ebp+arg_4]
.text$mn:0000543E                 push    ecx             ; struct std::_Container_base12 *
.text$mn:0000543F                 mov     edx, [ebp+arg_8]
.text$mn:00005442                 push    edx             ; int
.text$mn:00005443                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005448                 add     esp, 8
.text$mn:0000544B                 push    0BDEh           ; unsigned int
.text$mn:00005450                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005455                 mov     eax, [ebp+arg_0]
.text$mn:00005458                 push    eax             ; int
.text$mn:00005459                 mov     ecx, [ebp+arg_4]
.text$mn:0000545C                 push    ecx             ; int
.text$mn:0000545D                 movzx   edx, [ebp+arg_C]
.text$mn:00005461                 push    edx             ; char
.text$mn:00005462                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005467                 add     esp, 14h
.text$mn:0000546A                 movzx   eax, al
.text$mn:0000546D                 test    eax, eax
.text$mn:0000546F                 jz      short loc_5481
.text$mn:00005471                 mov     ecx, [ebp+arg_0]
.text$mn:00005474                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005475                 mov     edx, [ebp+arg_4]
.text$mn:00005478                 push    edx             ; int
.text$mn:00005479                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000547E                 add     esp, 8
.text$mn:00005481
.text$mn:00005481 loc_5481:                               ; CODE XREF: std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+5Dj
.text$mn:00005481                                         ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+93j
.text$mn:00005481                 pop     ebp
.text$mn:00005482                 retn
.text$mn:00005482 ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z endp
.text$mn:00005482
.text$mn:00005482 ; ---------------------------------------------------------------------------
.text$mn:00005483                 align 4
.text$mn:00005483 _text$mn        ends
.text$mn:00005483
.text$mn:00005484 ; ===========================================================================
.text$mn:00005484
.text$mn:00005484 ; Segment type: Pure code
.text$mn:00005484 ; Segment permissions: Read/Execute
.text$mn:00005484 _text$mn        segment para public 'CODE' use32
.text$mn:00005484                 assume cs:_text$mn
.text$mn:00005484                 ;org 5484h
.text$mn:00005484 ; COMDAT (pick any)
.text$mn:00005484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005484
.text$mn:00005484 ; =============== S U B R O U T I N E =======================================
.text$mn:00005484
.text$mn:00005484 ; Attributes: bp-based frame
.text$mn:00005484
.text$mn:00005484 ; int __cdecl std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(struct std::_Container_base12 *, struct std::_Container_base12 *, int, char)
.text$mn:00005484                 public ??$_Median@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z
.text$mn:00005484 ??$_Median@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z proc near
.text$mn:00005484                                         ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+36p
.text$mn:00005484
.text$mn:00005484 var_4           = dword ptr -4
.text$mn:00005484 arg_0           = dword ptr  8
.text$mn:00005484 arg_4           = dword ptr  0Ch
.text$mn:00005484 arg_8           = dword ptr  10h
.text$mn:00005484 arg_C           = byte ptr  14h
.text$mn:00005484
.text$mn:00005484                 push    ebp
.text$mn:00005485                 mov     ebp, esp
.text$mn:00005487                 push    ecx
.text$mn:00005488                 mov     eax, [ebp+arg_8]
.text$mn:0000548B                 sub     eax, [ebp+arg_0]
.text$mn:0000548E                 cdq
.text$mn:0000548F                 mov     ecx, 1Ch
.text$mn:00005494                 idiv    ecx
.text$mn:00005496                 cmp     eax, 28h ; '('
.text$mn:00005499                 jle     loc_5552
.text$mn:0000549F                 mov     eax, [ebp+arg_8]
.text$mn:000054A2                 sub     eax, [ebp+arg_0]
.text$mn:000054A5                 cdq
.text$mn:000054A6                 mov     ecx, 1Ch
.text$mn:000054AB                 idiv    ecx
.text$mn:000054AD                 add     eax, 1
.text$mn:000054B0                 cdq
.text$mn:000054B1                 and     edx, 7
.text$mn:000054B4                 add     eax, edx
.text$mn:000054B6                 sar     eax, 3
.text$mn:000054B9                 mov     [ebp+var_4], eax
.text$mn:000054BC                 movzx   edx, [ebp+arg_C]
.text$mn:000054C0                 push    edx             ; char
.text$mn:000054C1                 mov     eax, [ebp+var_4]
.text$mn:000054C4                 shl     eax, 1
.text$mn:000054C6                 imul    ecx, eax, 1Ch
.text$mn:000054C9                 add     ecx, [ebp+arg_0]
.text$mn:000054CC                 push    ecx             ; int
.text$mn:000054CD                 imul    edx, [ebp+var_4], 1Ch
.text$mn:000054D1                 add     edx, [ebp+arg_0]
.text$mn:000054D4                 push    edx             ; struct std::_Container_base12 *
.text$mn:000054D5                 mov     eax, [ebp+arg_0]
.text$mn:000054D8                 push    eax             ; struct std::_Container_base12 *
.text$mn:000054D9                 call    ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:000054DE                 add     esp, 10h
.text$mn:000054E1                 movzx   ecx, [ebp+arg_C]
.text$mn:000054E5                 push    ecx             ; char
.text$mn:000054E6                 imul    edx, [ebp+var_4], 1Ch
.text$mn:000054EA                 add     edx, [ebp+arg_4]
.text$mn:000054ED                 push    edx             ; int
.text$mn:000054EE                 mov     eax, [ebp+arg_4]
.text$mn:000054F1                 push    eax             ; struct std::_Container_base12 *
.text$mn:000054F2                 imul    ecx, [ebp+var_4], 1Ch
.text$mn:000054F6                 mov     edx, [ebp+arg_4]
.text$mn:000054F9                 sub     edx, ecx
.text$mn:000054FB                 push    edx             ; struct std::_Container_base12 *
.text$mn:000054FC                 call    ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:00005501                 add     esp, 10h
.text$mn:00005504                 movzx   eax, [ebp+arg_C]
.text$mn:00005508                 push    eax             ; char
.text$mn:00005509                 mov     ecx, [ebp+arg_8]
.text$mn:0000550C                 push    ecx             ; int
.text$mn:0000550D                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00005511                 mov     eax, [ebp+arg_8]
.text$mn:00005514                 sub     eax, edx
.text$mn:00005516                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005517                 mov     ecx, [ebp+var_4]
.text$mn:0000551A                 shl     ecx, 1
.text$mn:0000551C                 imul    edx, ecx, 1Ch
.text$mn:0000551F                 mov     eax, [ebp+arg_8]
.text$mn:00005522                 sub     eax, edx
.text$mn:00005524                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005525                 call    ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:0000552A                 add     esp, 10h
.text$mn:0000552D                 movzx   ecx, [ebp+arg_C]
.text$mn:00005531                 push    ecx             ; char
.text$mn:00005532                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00005536                 mov     eax, [ebp+arg_8]
.text$mn:00005539                 sub     eax, edx
.text$mn:0000553B                 push    eax             ; int
.text$mn:0000553C                 mov     ecx, [ebp+arg_4]
.text$mn:0000553F                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005540                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00005544                 add     edx, [ebp+arg_0]
.text$mn:00005547                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005548                 call    ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:0000554D                 add     esp, 10h
.text$mn:00005550                 jmp     short loc_556B
.text$mn:00005552 ; ---------------------------------------------------------------------------
.text$mn:00005552
.text$mn:00005552 loc_5552:                               ; CODE XREF: std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+15j
.text$mn:00005552                 movzx   eax, [ebp+arg_C]
.text$mn:00005556                 push    eax             ; char
.text$mn:00005557                 mov     ecx, [ebp+arg_8]
.text$mn:0000555A                 push    ecx             ; int
.text$mn:0000555B                 mov     edx, [ebp+arg_4]
.text$mn:0000555E                 push    edx             ; struct std::_Container_base12 *
.text$mn:0000555F                 mov     eax, [ebp+arg_0]
.text$mn:00005562                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005563                 call    ??$_Med3@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:00005568                 add     esp, 10h
.text$mn:0000556B
.text$mn:0000556B loc_556B:                               ; CODE XREF: std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+CCj
.text$mn:0000556B                 mov     esp, ebp
.text$mn:0000556D                 pop     ebp
.text$mn:0000556E                 retn
.text$mn:0000556E ??$_Median@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z endp
.text$mn:0000556E
.text$mn:0000556E ; ---------------------------------------------------------------------------
.text$mn:0000556F                 align 10h
.text$mn:0000556F _text$mn        ends
.text$mn:0000556F
.text$mn:00005570 ; ===========================================================================
.text$mn:00005570
.text$mn:00005570 ; Segment type: Pure code
.text$mn:00005570 ; Segment permissions: Read/Execute
.text$mn:00005570 _text$mn        segment para public 'CODE' use32
.text$mn:00005570                 assume cs:_text$mn
.text$mn:00005570                 ;org 5570h
.text$mn:00005570 ; COMDAT (pick any)
.text$mn:00005570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005570
.text$mn:00005570 ; =============== S U B R O U T I N E =======================================
.text$mn:00005570
.text$mn:00005570 ; Attributes: bp-based frame
.text$mn:00005570
.text$mn:00005570 ; unsigned int && __cdecl std::_Move<unsigned int &>(unsigned int &)
.text$mn:00005570                 public ??$_Move@AAI@std@@YA$$QAIAAI@Z
.text$mn:00005570 ??$_Move@AAI@std@@YA$$QAIAAI@Z proc near
.text$mn:00005570                                         ; CODE XREF: std::swap<uint>(uint &,uint &)+8p
.text$mn:00005570                                         ; std::swap<uint>(uint &,uint &)+19p ...
.text$mn:00005570
.text$mn:00005570 arg_0           = dword ptr  8
.text$mn:00005570
.text$mn:00005570                 push    ebp
.text$mn:00005571                 mov     ebp, esp
.text$mn:00005573                 mov     eax, [ebp+arg_0]
.text$mn:00005576                 pop     ebp
.text$mn:00005577                 retn
.text$mn:00005577 ??$_Move@AAI@std@@YA$$QAIAAI@Z endp
.text$mn:00005577
.text$mn:00005577 _text$mn        ends
.text$mn:00005577
.text$mn:00005578 ; ===========================================================================
.text$mn:00005578
.text$mn:00005578 ; Segment type: Pure code
.text$mn:00005578 ; Segment permissions: Read/Execute
.text$mn:00005578 _text$mn        segment para public 'CODE' use32
.text$mn:00005578                 assume cs:_text$mn
.text$mn:00005578                 ;org 5578h
.text$mn:00005578 ; COMDAT (pick any)
.text$mn:00005578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005578
.text$mn:00005578 ; =============== S U B R O U T I N E =======================================
.text$mn:00005578
.text$mn:00005578 ; Attributes: bp-based frame
.text$mn:00005578
.text$mn:00005578 ; struct std::_Container_proxy * && __cdecl std::_Move<struct std::_Container_proxy * &>(struct std::_Container_proxy * &)
.text$mn:00005578                 public ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z
.text$mn:00005578 ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z proc near
.text$mn:00005578                                         ; CODE XREF: std::swap<std::_Container_proxy *>(std::_Container_proxy * &,std::_Container_proxy * &)+8p
.text$mn:00005578                                         ; std::swap<std::_Container_proxy *>(std::_Container_proxy * &,std::_Container_proxy * &)+19p ...
.text$mn:00005578
.text$mn:00005578 arg_0           = dword ptr  8
.text$mn:00005578
.text$mn:00005578                 push    ebp
.text$mn:00005579                 mov     ebp, esp
.text$mn:0000557B                 mov     eax, [ebp+arg_0]
.text$mn:0000557E                 pop     ebp
.text$mn:0000557F                 retn
.text$mn:0000557F ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z endp
.text$mn:0000557F
.text$mn:0000557F _text$mn        ends
.text$mn:0000557F
.text$mn:00005580 ; ===========================================================================
.text$mn:00005580
.text$mn:00005580 ; Segment type: Pure code
.text$mn:00005580 ; Segment permissions: Read/Execute
.text$mn:00005580 _text$mn        segment para public 'CODE' use32
.text$mn:00005580                 assume cs:_text$mn
.text$mn:00005580                 ;org 5580h
.text$mn:00005580 ; COMDAT (pick any)
.text$mn:00005580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005580
.text$mn:00005580 ; =============== S U B R O U T I N E =======================================
.text$mn:00005580
.text$mn:00005580 ; Attributes: bp-based frame
.text$mn:00005580
.text$mn:00005580 ; wchar_t * && __cdecl std::_Move<wchar_t * &>(wchar_t * &)
.text$mn:00005580                 public ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z
.text$mn:00005580 ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z proc near
.text$mn:00005580                                         ; CODE XREF: std::swap<wchar_t *>(wchar_t * &,wchar_t * &)+8p
.text$mn:00005580                                         ; std::swap<wchar_t *>(wchar_t * &,wchar_t * &)+19p ...
.text$mn:00005580
.text$mn:00005580 arg_0           = dword ptr  8
.text$mn:00005580
.text$mn:00005580                 push    ebp
.text$mn:00005581                 mov     ebp, esp
.text$mn:00005583                 mov     eax, [ebp+arg_0]
.text$mn:00005586                 pop     ebp
.text$mn:00005587                 retn
.text$mn:00005587 ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z endp
.text$mn:00005587
.text$mn:00005587 _text$mn        ends
.text$mn:00005587
.text$mn:00005588 ; ===========================================================================
.text$mn:00005588
.text$mn:00005588 ; Segment type: Pure code
.text$mn:00005588 ; Segment permissions: Read/Execute
.text$mn:00005588 _text$mn        segment para public 'CODE' use32
.text$mn:00005588                 assume cs:_text$mn
.text$mn:00005588                 ;org 5588h
.text$mn:00005588 ; COMDAT (pick any)
.text$mn:00005588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005588
.text$mn:00005588 ; =============== S U B R O U T I N E =======================================
.text$mn:00005588
.text$mn:00005588 ; Attributes: bp-based frame
.text$mn:00005588
.text$mn:00005588 ; union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty && __cdecl std::_Move<union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty &>(union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:00005588                 public ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z
.text$mn:00005588 ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z proc near
.text$mn:00005588                                         ; CODE XREF: std::swap<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &,std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)+14p
.text$mn:00005588                                         ; std::swap<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &,std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)+37p ...
.text$mn:00005588
.text$mn:00005588 arg_0           = dword ptr  8
.text$mn:00005588
.text$mn:00005588                 push    ebp
.text$mn:00005589                 mov     ebp, esp
.text$mn:0000558B                 mov     eax, [ebp+arg_0]
.text$mn:0000558E                 pop     ebp
.text$mn:0000558F                 retn
.text$mn:0000558F ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z endp
.text$mn:0000558F
.text$mn:0000558F _text$mn        ends
.text$mn:0000558F
.text$mn:00005590 ; ===========================================================================
.text$mn:00005590
.text$mn:00005590 ; Segment type: Pure code
.text$mn:00005590 ; Segment permissions: Read/Execute
.text$mn:00005590 _text$mn        segment para public 'CODE' use32
.text$mn:00005590                 assume cs:_text$mn
.text$mn:00005590                 ;org 5590h
.text$mn:00005590 ; COMDAT (pick any)
.text$mn:00005590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005590
.text$mn:00005590 ; =============== S U B R O U T I N E =======================================
.text$mn:00005590
.text$mn:00005590 ; Attributes: bp-based frame
.text$mn:00005590
.text$mn:00005590 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::_Move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005590                 public ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005590 ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005590                                         ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+6Ep
.text$mn:00005590                                         ; std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+A0p ...
.text$mn:00005590
.text$mn:00005590 arg_0           = dword ptr  8
.text$mn:00005590
.text$mn:00005590                 push    ebp
.text$mn:00005591                 mov     ebp, esp
.text$mn:00005593                 mov     eax, [ebp+arg_0]
.text$mn:00005596                 pop     ebp
.text$mn:00005597                 retn
.text$mn:00005597 ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00005597
.text$mn:00005597 _text$mn        ends
.text$mn:00005597
.text$mn:00005598 ; ===========================================================================
.text$mn:00005598
.text$mn:00005598 ; Segment type: Pure code
.text$mn:00005598 ; Segment permissions: Read/Execute
.text$mn:00005598 _text$mn        segment para public 'CODE' use32
.text$mn:00005598                 assume cs:_text$mn
.text$mn:00005598                 ;org 5598h
.text$mn:00005598 ; COMDAT (pick any)
.text$mn:00005598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005598
.text$mn:00005598 ; =============== S U B R O U T I N E =======================================
.text$mn:00005598
.text$mn:00005598 ; Attributes: bp-based frame
.text$mn:00005598
.text$mn:00005598 ; wchar_t && __cdecl std::_Move<wchar_t &>(wchar_t &)
.text$mn:00005598                 public ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z
.text$mn:00005598 ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z proc near
.text$mn:00005598                                         ; CODE XREF: std::swap<wchar_t>(wchar_t &,wchar_t &)+8p
.text$mn:00005598                                         ; std::swap<wchar_t>(wchar_t &,wchar_t &)+1Bp ...
.text$mn:00005598
.text$mn:00005598 arg_0           = dword ptr  8
.text$mn:00005598
.text$mn:00005598                 push    ebp
.text$mn:00005599                 mov     ebp, esp
.text$mn:0000559B                 mov     eax, [ebp+arg_0]
.text$mn:0000559E                 pop     ebp
.text$mn:0000559F                 retn
.text$mn:0000559F ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z endp
.text$mn:0000559F
.text$mn:0000559F _text$mn        ends
.text$mn:0000559F
.text$mn:000055A0 ; ===========================================================================
.text$mn:000055A0
.text$mn:000055A0 ; Segment type: Pure code
.text$mn:000055A0 ; Segment permissions: Read/Execute
.text$mn:000055A0 _text$mn        segment para public 'CODE' use32
.text$mn:000055A0                 assume cs:_text$mn
.text$mn:000055A0                 ;org 55A0h
.text$mn:000055A0 ; COMDAT (pick any)
.text$mn:000055A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055A0
.text$mn:000055A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000055A0
.text$mn:000055A0 ; Attributes: bp-based frame
.text$mn:000055A0
.text$mn:000055A0 ; struct MatchedCharInserted * __cdecl std::_Move<struct MatchedCharInserted *, struct MatchedCharInserted *>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct MatchedCharInserted *)
.text$mn:000055A0                 public ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00@Z
.text$mn:000055A0 ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00@Z proc near
.text$mn:000055A0                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+82p
.text$mn:000055A0
.text$mn:000055A0 var_1           = byte ptr -1
.text$mn:000055A0 arg_0           = dword ptr  8
.text$mn:000055A0 arg_4           = dword ptr  0Ch
.text$mn:000055A0 arg_8           = dword ptr  10h
.text$mn:000055A0
.text$mn:000055A0                 push    ebp
.text$mn:000055A1                 mov     ebp, esp
.text$mn:000055A3                 push    ecx
.text$mn:000055A4                 mov     eax, [ebp+arg_8]
.text$mn:000055A7                 push    eax
.text$mn:000055A8                 mov     ecx, [ebp+arg_0]
.text$mn:000055AB                 push    ecx
.text$mn:000055AC                 call    ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z ; std::_Ptr_cat<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:000055B1                 add     esp, 8
.text$mn:000055B4                 mov     [ebp+var_1], al
.text$mn:000055B7                 movzx   edx, [ebp+var_1]
.text$mn:000055BB                 push    edx
.text$mn:000055BC                 mov     eax, [ebp+arg_8]
.text$mn:000055BF                 push    eax
.text$mn:000055C0                 mov     ecx, [ebp+arg_4]
.text$mn:000055C3                 push    ecx
.text$mn:000055C4                 mov     edx, [ebp+arg_0]
.text$mn:000055C7                 push    edx
.text$mn:000055C8                 call    ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000055CD                 add     esp, 10h
.text$mn:000055D0                 mov     esp, ebp
.text$mn:000055D2                 pop     ebp
.text$mn:000055D3                 retn
.text$mn:000055D3 ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00@Z endp
.text$mn:000055D3
.text$mn:000055D3 _text$mn        ends
.text$mn:000055D3
.text$mn:000055D4 ; ===========================================================================
.text$mn:000055D4
.text$mn:000055D4 ; Segment type: Pure code
.text$mn:000055D4 ; Segment permissions: Read/Execute
.text$mn:000055D4 _text$mn        segment para public 'CODE' use32
.text$mn:000055D4                 assume cs:_text$mn
.text$mn:000055D4                 ;org 55D4h
.text$mn:000055D4 ; COMDAT (pick any)
.text$mn:000055D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055D4
.text$mn:000055D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000055D4
.text$mn:000055D4 ; Attributes: bp-based frame
.text$mn:000055D4
.text$mn:000055D4 ; struct MatchedCharInserted * __cdecl std::_Move<struct MatchedCharInserted *, struct MatchedCharInserted *>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct MatchedCharInserted *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000055D4                 public ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000055D4 ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000055D4                                         ; CODE XREF: std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)+28p
.text$mn:000055D4
.text$mn:000055D4 arg_0           = dword ptr  8
.text$mn:000055D4 arg_4           = dword ptr  0Ch
.text$mn:000055D4 arg_8           = dword ptr  10h
.text$mn:000055D4
.text$mn:000055D4                 push    ebp
.text$mn:000055D5                 mov     ebp, esp
.text$mn:000055D7                 jmp     short loc_55EB
.text$mn:000055D9 ; ---------------------------------------------------------------------------
.text$mn:000055D9
.text$mn:000055D9 loc_55D9:                               ; CODE XREF: std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+38j
.text$mn:000055D9                 mov     eax, [ebp+arg_8]
.text$mn:000055DC                 add     eax, 8
.text$mn:000055DF                 mov     [ebp+arg_8], eax
.text$mn:000055E2                 mov     ecx, [ebp+arg_0]
.text$mn:000055E5                 add     ecx, 8
.text$mn:000055E8                 mov     [ebp+arg_0], ecx
.text$mn:000055EB
.text$mn:000055EB loc_55EB:                               ; CODE XREF: std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000055EB                 mov     edx, [ebp+arg_0]
.text$mn:000055EE                 cmp     edx, [ebp+arg_4]
.text$mn:000055F1                 jz      short loc_560E
.text$mn:000055F3                 mov     eax, [ebp+arg_0]
.text$mn:000055F6                 push    eax
.text$mn:000055F7                 call    ??$move@AAUMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z ; std::move<MatchedCharInserted &>(MatchedCharInserted &)
.text$mn:000055FC                 add     esp, 4
.text$mn:000055FF                 mov     ecx, [eax]
.text$mn:00005601                 mov     edx, [eax+4]
.text$mn:00005604                 mov     eax, [ebp+arg_8]
.text$mn:00005607                 mov     [eax], ecx
.text$mn:00005609                 mov     [eax+4], edx
.text$mn:0000560C                 jmp     short loc_55D9
.text$mn:0000560E ; ---------------------------------------------------------------------------
.text$mn:0000560E
.text$mn:0000560E loc_560E:                               ; CODE XREF: std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+1Dj
.text$mn:0000560E                 mov     eax, [ebp+arg_8]
.text$mn:00005611                 pop     ebp
.text$mn:00005612                 retn
.text$mn:00005612 ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005612
.text$mn:00005612 ; ---------------------------------------------------------------------------
.text$mn:00005613                 align 4
.text$mn:00005613 _text$mn        ends
.text$mn:00005613
.text$mn:00005614 ; ===========================================================================
.text$mn:00005614
.text$mn:00005614 ; Segment type: Pure code
.text$mn:00005614 ; Segment permissions: Read/Execute
.text$mn:00005614 _text$mn        segment para public 'CODE' use32
.text$mn:00005614                 assume cs:_text$mn
.text$mn:00005614                 ;org 5614h
.text$mn:00005614 ; COMDAT (pick any)
.text$mn:00005614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005614
.text$mn:00005614 ; =============== S U B R O U T I N E =======================================
.text$mn:00005614
.text$mn:00005614 ; Attributes: bp-based frame
.text$mn:00005614
.text$mn:00005614 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move_backward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005614                 public ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z
.text$mn:00005614 ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z proc near
.text$mn:00005614                                         ; CODE XREF: std::_Insertion_sort1<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+ACp
.text$mn:00005614
.text$mn:00005614 var_1           = byte ptr -1
.text$mn:00005614 arg_0           = dword ptr  8
.text$mn:00005614 arg_4           = dword ptr  0Ch
.text$mn:00005614 arg_8           = dword ptr  10h
.text$mn:00005614
.text$mn:00005614                 push    ebp
.text$mn:00005615                 mov     ebp, esp
.text$mn:00005617                 push    ecx
.text$mn:00005618                 mov     eax, [ebp+arg_8]
.text$mn:0000561B                 push    eax
.text$mn:0000561C                 mov     ecx, [ebp+arg_0]
.text$mn:0000561F                 push    ecx
.text$mn:00005620                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005625                 add     esp, 8
.text$mn:00005628                 mov     [ebp+var_1], al
.text$mn:0000562B                 movzx   edx, [ebp+var_1]
.text$mn:0000562F                 push    edx
.text$mn:00005630                 mov     eax, [ebp+arg_8]
.text$mn:00005633                 push    eax
.text$mn:00005634                 mov     ecx, [ebp+arg_4]
.text$mn:00005637                 push    ecx
.text$mn:00005638                 mov     edx, [ebp+arg_0]
.text$mn:0000563B                 push    edx
.text$mn:0000563C                 call    ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005641                 add     esp, 10h
.text$mn:00005644                 mov     esp, ebp
.text$mn:00005646                 pop     ebp
.text$mn:00005647                 retn
.text$mn:00005647 ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z endp
.text$mn:00005647
.text$mn:00005647 _text$mn        ends
.text$mn:00005647
.text$mn:00005648 ; ===========================================================================
.text$mn:00005648
.text$mn:00005648 ; Segment type: Pure code
.text$mn:00005648 ; Segment permissions: Read/Execute
.text$mn:00005648 _text$mn        segment para public 'CODE' use32
.text$mn:00005648                 assume cs:_text$mn
.text$mn:00005648                 ;org 5648h
.text$mn:00005648 ; COMDAT (pick any)
.text$mn:00005648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005648
.text$mn:00005648 ; =============== S U B R O U T I N E =======================================
.text$mn:00005648
.text$mn:00005648 ; Attributes: bp-based frame
.text$mn:00005648
.text$mn:00005648 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move_backward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005648                 public ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005648 ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005648                                         ; CODE XREF: std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+28p
.text$mn:00005648
.text$mn:00005648 arg_0           = dword ptr  8
.text$mn:00005648 arg_4           = dword ptr  0Ch
.text$mn:00005648 arg_8           = dword ptr  10h
.text$mn:00005648
.text$mn:00005648                 push    ebp
.text$mn:00005649                 mov     ebp, esp
.text$mn:0000564B
.text$mn:0000564B loc_564B:                               ; CODE XREF: std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+32j
.text$mn:0000564B                 mov     eax, [ebp+arg_0]
.text$mn:0000564E                 cmp     eax, [ebp+arg_4]
.text$mn:00005651                 jz      short loc_567C
.text$mn:00005653                 mov     ecx, [ebp+arg_4]
.text$mn:00005656                 sub     ecx, 1Ch
.text$mn:00005659                 mov     [ebp+arg_4], ecx
.text$mn:0000565C                 mov     edx, [ebp+arg_8]
.text$mn:0000565F                 sub     edx, 1Ch
.text$mn:00005662                 mov     [ebp+arg_8], edx
.text$mn:00005665                 mov     eax, [ebp+arg_4]
.text$mn:00005668                 push    eax
.text$mn:00005669                 call    ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000566E                 add     esp, 4
.text$mn:00005671                 push    eax
.text$mn:00005672                 mov     ecx, [ebp+arg_8]
.text$mn:00005675                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000567A                 jmp     short loc_564B
.text$mn:0000567C ; ---------------------------------------------------------------------------
.text$mn:0000567C
.text$mn:0000567C loc_567C:                               ; CODE XREF: std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+9j
.text$mn:0000567C                 mov     eax, [ebp+arg_8]
.text$mn:0000567F                 pop     ebp
.text$mn:00005680                 retn
.text$mn:00005680 ??$_Move_backward@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005680
.text$mn:00005680 ; ---------------------------------------------------------------------------
.text$mn:00005681                 align 4
.text$mn:00005681 _text$mn        ends
.text$mn:00005681
.text$mn:00005684 ; ===========================================================================
.text$mn:00005684
.text$mn:00005684 ; Segment type: Pure code
.text$mn:00005684 ; Segment permissions: Read/Execute
.text$mn:00005684 _text$mn        segment para public 'CODE' use32
.text$mn:00005684                 assume cs:_text$mn
.text$mn:00005684                 ;org 5684h
.text$mn:00005684 ; COMDAT (pick any)
.text$mn:00005684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005684
.text$mn:00005684 ; =============== S U B R O U T I N E =======================================
.text$mn:00005684
.text$mn:00005684 ; Attributes: bp-based frame
.text$mn:00005684
.text$mn:00005684 ; void __cdecl std::_Pop_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&, struct std::less<void>, int *)
.text$mn:00005684                 public ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00$$QAV10@U?$less@X@0@PAH@Z
.text$mn:00005684 ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00$$QAV10@U?$less@X@0@PAH@Z proc near
.text$mn:00005684                                         ; CODE XREF: std::_Pop_heap_0<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+78p
.text$mn:00005684
.text$mn:00005684 arg_0           = dword ptr  8
.text$mn:00005684 arg_4           = dword ptr  0Ch
.text$mn:00005684 arg_8           = dword ptr  10h
.text$mn:00005684 arg_C           = dword ptr  14h
.text$mn:00005684 arg_10          = byte ptr  18h
.text$mn:00005684
.text$mn:00005684                 push    ebp
.text$mn:00005685                 mov     ebp, esp
.text$mn:00005687                 mov     eax, [ebp+arg_0]
.text$mn:0000568A                 push    eax
.text$mn:0000568B                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005690                 add     esp, 4
.text$mn:00005693                 push    eax
.text$mn:00005694                 mov     ecx, [ebp+arg_8]
.text$mn:00005697                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000569C                 movzx   ecx, [ebp+arg_10]
.text$mn:000056A0                 push    ecx
.text$mn:000056A1                 mov     edx, [ebp+arg_C]
.text$mn:000056A4                 push    edx
.text$mn:000056A5                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000056AA                 add     esp, 4
.text$mn:000056AD                 push    eax
.text$mn:000056AE                 mov     eax, [ebp+arg_4]
.text$mn:000056B1                 sub     eax, [ebp+arg_0]
.text$mn:000056B4                 cdq
.text$mn:000056B5                 mov     ecx, 1Ch
.text$mn:000056BA                 idiv    ecx
.text$mn:000056BC                 push    eax
.text$mn:000056BD                 push    0
.text$mn:000056BF                 mov     edx, [ebp+arg_0]
.text$mn:000056C2                 push    edx
.text$mn:000056C3                 call    ??$_Adjust_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z ; std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)
.text$mn:000056C8                 add     esp, 14h
.text$mn:000056CB                 pop     ebp
.text$mn:000056CC                 retn
.text$mn:000056CC ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00$$QAV10@U?$less@X@0@PAH@Z endp
.text$mn:000056CC
.text$mn:000056CC ; ---------------------------------------------------------------------------
.text$mn:000056CD                 align 10h
.text$mn:000056CD _text$mn        ends
.text$mn:000056CD
.text$mn:000056D0 ; ===========================================================================
.text$mn:000056D0
.text$mn:000056D0 ; Segment type: Pure code
.text$mn:000056D0 ; Segment permissions: Read/Execute
.text$mn:000056D0 _text$mn        segment para public 'CODE' use32
.text$mn:000056D0                 assume cs:_text$mn
.text$mn:000056D0                 ;org 56D0h
.text$mn:000056D0 ; COMDAT (pick any)
.text$mn:000056D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056D0
.text$mn:000056D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000056D0
.text$mn:000056D0 ; Attributes: bp-based frame
.text$mn:000056D0
.text$mn:000056D0 ; void __cdecl std::_Pop_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:000056D0                 public ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:000056D0 ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:000056D0                                         ; CODE XREF: std::_Sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+2Ep
.text$mn:000056D0
.text$mn:000056D0 arg_0           = dword ptr  8
.text$mn:000056D0 arg_4           = dword ptr  0Ch
.text$mn:000056D0 arg_8           = byte ptr  10h
.text$mn:000056D0
.text$mn:000056D0                 push    ebp
.text$mn:000056D1                 mov     ebp, esp
.text$mn:000056D3                 mov     eax, [ebp+arg_0]
.text$mn:000056D6                 push    eax
.text$mn:000056D7                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000056DC                 add     esp, 4
.text$mn:000056DF                 push    eax
.text$mn:000056E0                 movzx   ecx, [ebp+arg_8]
.text$mn:000056E4                 push    ecx
.text$mn:000056E5                 mov     edx, [ebp+arg_4]
.text$mn:000056E8                 push    edx
.text$mn:000056E9                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000056EE                 add     esp, 4
.text$mn:000056F1                 push    eax
.text$mn:000056F2                 mov     eax, [ebp+arg_0]
.text$mn:000056F5                 push    eax
.text$mn:000056F6                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000056FB                 add     esp, 4
.text$mn:000056FE                 push    eax
.text$mn:000056FF                 call    ??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z ; std::_Pop_heap_0<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005704                 add     esp, 10h
.text$mn:00005707                 pop     ebp
.text$mn:00005708                 retn
.text$mn:00005708 ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00005708
.text$mn:00005708 ; ---------------------------------------------------------------------------
.text$mn:00005709                 align 4
.text$mn:00005709 _text$mn        ends
.text$mn:00005709
.text$mn:0000570C ; ===========================================================================
.text$mn:0000570C
.text$mn:0000570C ; Segment type: Pure code
.text$mn:0000570C ; Segment permissions: Read/Execute
.text$mn:0000570C _text$mn        segment para public 'CODE' use32
.text$mn:0000570C                 assume cs:_text$mn
.text$mn:0000570C                 ;org 570Ch
.text$mn:0000570C ; COMDAT (pick any)
.text$mn:0000570C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000570C
.text$mn:0000570C ; =============== S U B R O U T I N E =======================================
.text$mn:0000570C
.text$mn:0000570C ; Attributes: bp-based frame
.text$mn:0000570C
.text$mn:0000570C ; void __cdecl std::_Pop_heap_0<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000570C                 public ??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$mn:0000570C ??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z proc near
.text$mn:0000570C                                         ; CODE XREF: std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+2Fp
.text$mn:0000570C
.text$mn:0000570C var_2C          = byte ptr -2Ch
.text$mn:0000570C var_10          = dword ptr -10h
.text$mn:0000570C var_C           = dword ptr -0Ch
.text$mn:0000570C var_4           = dword ptr -4
.text$mn:0000570C arg_0           = dword ptr  8
.text$mn:0000570C arg_4           = dword ptr  0Ch
.text$mn:0000570C arg_8           = byte ptr  10h
.text$mn:0000570C
.text$mn:0000570C                 push    ebp
.text$mn:0000570D                 mov     ebp, esp
.text$mn:0000570F                 push    0FFFFFFFFh
.text$mn:00005711                 push    offset __ehhandler$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$mn:00005716                 mov     eax, large fs:0
.text$mn:0000571C                 push    eax
.text$mn:0000571D                 sub     esp, 20h
.text$mn:00005720                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005725                 xor     eax, ebp
.text$mn:00005727                 mov     [ebp+var_10], eax
.text$mn:0000572A                 push    eax
.text$mn:0000572B                 lea     eax, [ebp+var_C]
.text$mn:0000572E                 mov     large fs:0, eax
.text$mn:00005734                 mov     eax, [ebp+arg_4]
.text$mn:00005737                 sub     eax, 1Ch
.text$mn:0000573A                 push    eax
.text$mn:0000573B                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005740                 add     esp, 4
.text$mn:00005743                 push    eax
.text$mn:00005744                 lea     ecx, [ebp+var_2C]
.text$mn:00005747                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000574C                 mov     [ebp+var_4], 0
.text$mn:00005753                 mov     ecx, [ebp+arg_0]
.text$mn:00005756                 push    ecx
.text$mn:00005757                 call    ??$_Dist_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAHPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Dist_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000575C                 add     esp, 4
.text$mn:0000575F                 push    eax
.text$mn:00005760                 movzx   edx, [ebp+arg_8]
.text$mn:00005764                 push    edx
.text$mn:00005765                 lea     eax, [ebp+var_2C]
.text$mn:00005768                 push    eax
.text$mn:00005769                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000576E                 add     esp, 4
.text$mn:00005771                 push    eax
.text$mn:00005772                 mov     ecx, [ebp+arg_4]
.text$mn:00005775                 sub     ecx, 1Ch
.text$mn:00005778                 push    ecx
.text$mn:00005779                 mov     edx, [ebp+arg_4]
.text$mn:0000577C                 sub     edx, 1Ch
.text$mn:0000577F                 push    edx
.text$mn:00005780                 mov     eax, [ebp+arg_0]
.text$mn:00005783                 push    eax
.text$mn:00005784                 call    ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00$$QAV10@U?$less@X@0@PAH@Z ; std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>,int *)
.text$mn:00005789                 add     esp, 18h
.text$mn:0000578C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005793                 lea     ecx, [ebp+var_2C]
.text$mn:00005796                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000579B                 mov     ecx, [ebp+var_C]
.text$mn:0000579E                 mov     large fs:0, ecx
.text$mn:000057A5                 pop     ecx
.text$mn:000057A6                 mov     ecx, [ebp+var_10]
.text$mn:000057A9                 xor     ecx, ebp
.text$mn:000057AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000057B0                 mov     esp, ebp
.text$mn:000057B2                 pop     ebp
.text$mn:000057B3                 retn
.text$mn:000057B3 ??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z endp
.text$mn:000057B3
.text$mn:000057B3 _text$mn        ends
.text$mn:000057B3
.text$x:000057B4 ; ===========================================================================
.text$x:000057B4
.text$x:000057B4 ; Segment type: Pure code
.text$x:000057B4 ; Segment permissions: Read/Execute
.text$x:000057B4 _text$x         segment para public 'CODE' use32
.text$x:000057B4                 assume cs:_text$x
.text$x:000057B4                 ;org 57B4h
.text$x:000057B4 ; COMDAT (pick associative to section at 570C)
.text$x:000057B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000057B4
.text$x:000057B4 ; =============== S U B R O U T I N E =======================================
.text$x:000057B4
.text$x:000057B4
.text$x:000057B4 __unwindfunclet$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0 proc near
.text$x:000057B4                                         ; DATA XREF: .xdata$x:00010FD0o
.text$x:000057B4                 lea     ecx, [ebp-2Ch]
.text$x:000057B7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000057B7 __unwindfunclet$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0 endp
.text$x:000057B7
.text$x:000057BC
.text$x:000057BC ; =============== S U B R O U T I N E =======================================
.text$x:000057BC
.text$x:000057BC
.text$x:000057BC __ehhandler$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z proc near
.text$x:000057BC                                         ; DATA XREF: std::_Pop_heap_0<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:000057BC
.text$x:000057BC arg_4           = dword ptr  8
.text$x:000057BC
.text$x:000057BC                 mov     edx, [esp+arg_4]
.text$x:000057C0                 lea     eax, [edx+0Ch]
.text$x:000057C3                 mov     ecx, [edx-24h]
.text$x:000057C6                 xor     ecx, eax
.text$x:000057C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000057CD                 mov     ecx, [edx-4]
.text$x:000057D0                 xor     ecx, eax
.text$x:000057D2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000057D7                 mov     eax, offset __ehfuncinfo$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.text$x:000057DC                 jmp     ___CxxFrameHandler3
.text$x:000057DC __ehhandler$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z endp
.text$x:000057DC
.text$x:000057DC ; ---------------------------------------------------------------------------
.text$x:000057E1                 align 4
.text$x:000057E1 _text$x         ends
.text$x:000057E1
.text$mn:000057E4 ; ===========================================================================
.text$mn:000057E4
.text$mn:000057E4 ; Segment type: Pure code
.text$mn:000057E4 ; Segment permissions: Read/Execute
.text$mn:000057E4 _text$mn        segment para public 'CODE' use32
.text$mn:000057E4                 assume cs:_text$mn
.text$mn:000057E4                 ;org 57E4h
.text$mn:000057E4 ; COMDAT (pick any)
.text$mn:000057E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057E4
.text$mn:000057E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057E4
.text$mn:000057E4 ; Attributes: bp-based frame
.text$mn:000057E4
.text$mn:000057E4 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct MatchedCharInserted, struct MatchedCharInserted>(struct MatchedCharInserted *, struct MatchedCharInserted *)
.text$mn:000057E4                 public ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z
.text$mn:000057E4 ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z proc near
.text$mn:000057E4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+Cp
.text$mn:000057E4                                         ; std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)+Cp ...
.text$mn:000057E4
.text$mn:000057E4 var_1           = byte ptr -1
.text$mn:000057E4
.text$mn:000057E4                 push    ebp
.text$mn:000057E5                 mov     ebp, esp
.text$mn:000057E7                 push    ecx
.text$mn:000057E8                 mov     al, [ebp+var_1]
.text$mn:000057EB                 mov     esp, ebp
.text$mn:000057ED                 pop     ebp
.text$mn:000057EE                 retn
.text$mn:000057EE ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z endp
.text$mn:000057EE
.text$mn:000057EE ; ---------------------------------------------------------------------------
.text$mn:000057EF                 align 10h
.text$mn:000057EF _text$mn        ends
.text$mn:000057EF
.text$mn:000057F0 ; ===========================================================================
.text$mn:000057F0
.text$mn:000057F0 ; Segment type: Pure code
.text$mn:000057F0 ; Segment permissions: Read/Execute
.text$mn:000057F0 _text$mn        segment para public 'CODE' use32
.text$mn:000057F0                 assume cs:_text$mn
.text$mn:000057F0                 ;org 57F0h
.text$mn:000057F0 ; COMDAT (pick any)
.text$mn:000057F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057F0
.text$mn:000057F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000057F0
.text$mn:000057F0 ; Attributes: bp-based frame
.text$mn:000057F0
.text$mn:000057F0 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000057F0                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:000057F0 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:000057F0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:000057F0                                         ; std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp ...
.text$mn:000057F0
.text$mn:000057F0 var_1           = byte ptr -1
.text$mn:000057F0
.text$mn:000057F0                 push    ebp
.text$mn:000057F1                 mov     ebp, esp
.text$mn:000057F3                 push    ecx
.text$mn:000057F4                 mov     al, [ebp+var_1]
.text$mn:000057F7                 mov     esp, ebp
.text$mn:000057F9                 pop     ebp
.text$mn:000057FA                 retn
.text$mn:000057FA ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:000057FA
.text$mn:000057FA ; ---------------------------------------------------------------------------
.text$mn:000057FB                 align 4
.text$mn:000057FB _text$mn        ends
.text$mn:000057FB
.text$mn:000057FC ; ===========================================================================
.text$mn:000057FC
.text$mn:000057FC ; Segment type: Pure code
.text$mn:000057FC ; Segment permissions: Read/Execute
.text$mn:000057FC _text$mn        segment para public 'CODE' use32
.text$mn:000057FC                 assume cs:_text$mn
.text$mn:000057FC                 ;org 57FCh
.text$mn:000057FC ; COMDAT (pick any)
.text$mn:000057FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057FC
.text$mn:000057FC ; =============== S U B R O U T I N E =======================================
.text$mn:000057FC
.text$mn:000057FC ; Attributes: bp-based frame
.text$mn:000057FC
.text$mn:000057FC ; void __cdecl std::_Push_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, int, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&, struct std::less<void>)
.text$mn:000057FC                 public ??$_Push_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z
.text$mn:000057FC ??$_Push_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z proc near
.text$mn:000057FC                                         ; CODE XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+DCp
.text$mn:000057FC
.text$mn:000057FC var_4           = dword ptr -4
.text$mn:000057FC arg_0           = dword ptr  8
.text$mn:000057FC arg_4           = dword ptr  0Ch
.text$mn:000057FC arg_8           = dword ptr  10h
.text$mn:000057FC arg_C           = dword ptr  14h
.text$mn:000057FC arg_10          = byte ptr  18h
.text$mn:000057FC
.text$mn:000057FC                 push    ebp
.text$mn:000057FD                 mov     ebp, esp
.text$mn:000057FF                 push    ecx
.text$mn:00005800                 mov     eax, [ebp+arg_4]
.text$mn:00005803                 sub     eax, 1
.text$mn:00005806                 cdq
.text$mn:00005807                 sub     eax, edx
.text$mn:00005809                 sar     eax, 1
.text$mn:0000580B                 mov     [ebp+var_4], eax
.text$mn:0000580E                 jmp     short loc_581E
.text$mn:00005810 ; ---------------------------------------------------------------------------
.text$mn:00005810
.text$mn:00005810 loc_5810:                               ; CODE XREF: std::_Push_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+77j
.text$mn:00005810                 mov     eax, [ebp+arg_4]
.text$mn:00005813                 sub     eax, 1
.text$mn:00005816                 cdq
.text$mn:00005817                 sub     eax, edx
.text$mn:00005819                 sar     eax, 1
.text$mn:0000581B                 mov     [ebp+var_4], eax
.text$mn:0000581E
.text$mn:0000581E loc_581E:                               ; CODE XREF: std::_Push_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+12j
.text$mn:0000581E                 mov     eax, [ebp+arg_8]
.text$mn:00005821                 cmp     eax, [ebp+arg_4]
.text$mn:00005824                 jge     short loc_5875
.text$mn:00005826                 push    90Bh            ; unsigned int
.text$mn:0000582B                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005830                 mov     ecx, [ebp+arg_C]
.text$mn:00005833                 push    ecx             ; int
.text$mn:00005834                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00005838                 add     edx, [ebp+arg_0]
.text$mn:0000583B                 push    edx             ; int
.text$mn:0000583C                 movzx   eax, [ebp+arg_10]
.text$mn:00005840                 push    eax             ; char
.text$mn:00005841                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005846                 add     esp, 14h
.text$mn:00005849                 movzx   ecx, al
.text$mn:0000584C                 test    ecx, ecx
.text$mn:0000584E                 jz      short loc_5875
.text$mn:00005850                 imul    edx, [ebp+var_4], 1Ch
.text$mn:00005854                 add     edx, [ebp+arg_0]
.text$mn:00005857                 push    edx
.text$mn:00005858                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000585D                 add     esp, 4
.text$mn:00005860                 push    eax
.text$mn:00005861                 imul    ecx, [ebp+arg_4], 1Ch
.text$mn:00005865                 add     ecx, [ebp+arg_0]
.text$mn:00005868                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000586D                 mov     eax, [ebp+var_4]
.text$mn:00005870                 mov     [ebp+arg_4], eax
.text$mn:00005873                 jmp     short loc_5810
.text$mn:00005875 ; ---------------------------------------------------------------------------
.text$mn:00005875
.text$mn:00005875 loc_5875:                               ; CODE XREF: std::_Push_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+28j
.text$mn:00005875                                         ; std::_Push_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+52j
.text$mn:00005875                 mov     ecx, [ebp+arg_C]
.text$mn:00005878                 push    ecx
.text$mn:00005879                 call    ??$_Move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000587E                 add     esp, 4
.text$mn:00005881                 push    eax
.text$mn:00005882                 imul    ecx, [ebp+arg_4], 1Ch
.text$mn:00005886                 add     ecx, [ebp+arg_0]
.text$mn:00005889                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000588E                 mov     esp, ebp
.text$mn:00005890                 pop     ebp
.text$mn:00005891                 retn
.text$mn:00005891 ??$_Push_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@HH$$QAV10@U?$less@X@0@@Z endp
.text$mn:00005891
.text$mn:00005891 ; ---------------------------------------------------------------------------
.text$mn:00005892                 align 4
.text$mn:00005892 _text$mn        ends
.text$mn:00005892
.text$mn:00005894 ; ===========================================================================
.text$mn:00005894
.text$mn:00005894 ; Segment type: Pure code
.text$mn:00005894 ; Segment permissions: Read/Execute
.text$mn:00005894 _text$mn        segment para public 'CODE' use32
.text$mn:00005894                 assume cs:_text$mn
.text$mn:00005894                 ;org 5894h
.text$mn:00005894 ; COMDAT (pick any)
.text$mn:00005894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005894
.text$mn:00005894 ; =============== S U B R O U T I N E =======================================
.text$mn:00005894
.text$mn:00005894 ; Attributes: bp-based frame
.text$mn:00005894
.text$mn:00005894 ; struct MatchedCharInserted * & __cdecl std::_Rechecked<struct MatchedCharInserted *, struct MatchedCharInserted *>(struct MatchedCharInserted * &, struct MatchedCharInserted *)
.text$mn:00005894                 public ??$_Rechecked@PAUMatchedCharInserted@@PAU1@@std@@YAAAPAUMatchedCharInserted@@AAPAU1@PAU1@@Z
.text$mn:00005894 ??$_Rechecked@PAUMatchedCharInserted@@PAU1@@std@@YAAAPAUMatchedCharInserted@@AAPAU1@PAU1@@Z proc near
.text$mn:00005894                                         ; CODE XREF: std::_Uninitialized_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+3Bp
.text$mn:00005894
.text$mn:00005894 arg_0           = dword ptr  8
.text$mn:00005894 arg_4           = dword ptr  0Ch
.text$mn:00005894
.text$mn:00005894                 push    ebp
.text$mn:00005895                 mov     ebp, esp
.text$mn:00005897                 mov     eax, [ebp+arg_0]
.text$mn:0000589A                 mov     ecx, [ebp+arg_4]
.text$mn:0000589D                 mov     [eax], ecx
.text$mn:0000589F                 mov     eax, [ebp+arg_0]
.text$mn:000058A2                 pop     ebp
.text$mn:000058A3                 retn
.text$mn:000058A3 ??$_Rechecked@PAUMatchedCharInserted@@PAU1@@std@@YAAAPAUMatchedCharInserted@@AAPAU1@PAU1@@Z endp
.text$mn:000058A3
.text$mn:000058A3 _text$mn        ends
.text$mn:000058A3
.text$mn:000058A4 ; ===========================================================================
.text$mn:000058A4
.text$mn:000058A4 ; Segment type: Pure code
.text$mn:000058A4 ; Segment permissions: Read/Execute
.text$mn:000058A4 _text$mn        segment para public 'CODE' use32
.text$mn:000058A4                 assume cs:_text$mn
.text$mn:000058A4                 ;org 58A4h
.text$mn:000058A4 ; COMDAT (pick any)
.text$mn:000058A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058A4
.text$mn:000058A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000058A4
.text$mn:000058A4 ; Attributes: bp-based frame
.text$mn:000058A4
.text$mn:000058A4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000058A4                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:000058A4 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:000058A4                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+3Bp
.text$mn:000058A4
.text$mn:000058A4 arg_0           = dword ptr  8
.text$mn:000058A4 arg_4           = dword ptr  0Ch
.text$mn:000058A4
.text$mn:000058A4                 push    ebp
.text$mn:000058A5                 mov     ebp, esp
.text$mn:000058A7                 mov     eax, [ebp+arg_0]
.text$mn:000058AA                 mov     ecx, [ebp+arg_4]
.text$mn:000058AD                 mov     [eax], ecx
.text$mn:000058AF                 mov     eax, [ebp+arg_0]
.text$mn:000058B2                 pop     ebp
.text$mn:000058B3                 retn
.text$mn:000058B3 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:000058B3
.text$mn:000058B3 _text$mn        ends
.text$mn:000058B3
.text$mn:000058B4 ; ===========================================================================
.text$mn:000058B4
.text$mn:000058B4 ; Segment type: Pure code
.text$mn:000058B4 ; Segment permissions: Read/Execute
.text$mn:000058B4 _text$mn        segment para public 'CODE' use32
.text$mn:000058B4                 assume cs:_text$mn
.text$mn:000058B4                 ;org 58B4h
.text$mn:000058B4 ; COMDAT (pick any)
.text$mn:000058B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058B4
.text$mn:000058B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000058B4
.text$mn:000058B4 ; Attributes: bp-based frame
.text$mn:000058B4
.text$mn:000058B4 ; int __cdecl std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(struct std::_Container_base12 *, int, int, char)
.text$mn:000058B4                 public ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z
.text$mn:000058B4 ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z proc near
.text$mn:000058B4                                         ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+91p
.text$mn:000058B4                                         ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+B2p ...
.text$mn:000058B4
.text$mn:000058B4 var_C           = dword ptr -0Ch
.text$mn:000058B4 var_8           = dword ptr -8
.text$mn:000058B4 var_4           = dword ptr -4
.text$mn:000058B4 arg_0           = dword ptr  8
.text$mn:000058B4 arg_4           = dword ptr  0Ch
.text$mn:000058B4 arg_8           = dword ptr  10h
.text$mn:000058B4 arg_C           = byte ptr  14h
.text$mn:000058B4
.text$mn:000058B4                 push    ebp
.text$mn:000058B5                 mov     ebp, esp
.text$mn:000058B7                 sub     esp, 0Ch
.text$mn:000058BA                 push    esi
.text$mn:000058BB
.text$mn:000058BB loc_58BB:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>):loc_5974j
.text$mn:000058BB                 mov     eax, [ebp+arg_4]
.text$mn:000058BE                 sub     eax, [ebp+arg_0]
.text$mn:000058C1                 cdq
.text$mn:000058C2                 mov     ecx, 1Ch
.text$mn:000058C7                 idiv    ecx
.text$mn:000058C9                 mov     [ebp+var_4], eax
.text$mn:000058CC                 cmp     [ebp+var_4], 20h ; ' '
.text$mn:000058D0                 jle     loc_5979
.text$mn:000058D6                 cmp     [ebp+arg_8], 0
.text$mn:000058DA                 jle     loc_5979
.text$mn:000058E0                 movzx   edx, [ebp+arg_C]
.text$mn:000058E4                 push    edx             ; char
.text$mn:000058E5                 mov     eax, [ebp+arg_4]
.text$mn:000058E8                 push    eax             ; int
.text$mn:000058E9                 mov     ecx, [ebp+arg_0]
.text$mn:000058EC                 push    ecx             ; struct std::_Container_base12 *
.text$mn:000058ED                 lea     edx, [ebp+var_C]
.text$mn:000058F0                 push    edx             ; int
.text$mn:000058F1                 call    ??$_Unguarded_partition@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:000058F6                 add     esp, 10h
.text$mn:000058F9                 mov     eax, [ebp+arg_8]
.text$mn:000058FC                 cdq
.text$mn:000058FD                 sub     eax, edx
.text$mn:000058FF                 sar     eax, 1
.text$mn:00005901                 mov     [ebp+arg_8], eax
.text$mn:00005904                 mov     eax, [ebp+arg_8]
.text$mn:00005907                 cdq
.text$mn:00005908                 sub     eax, edx
.text$mn:0000590A                 sar     eax, 1
.text$mn:0000590C                 add     eax, [ebp+arg_8]
.text$mn:0000590F                 mov     [ebp+arg_8], eax
.text$mn:00005912                 mov     eax, [ebp+var_C]
.text$mn:00005915                 sub     eax, [ebp+arg_0]
.text$mn:00005918                 cdq
.text$mn:00005919                 mov     ecx, 1Ch
.text$mn:0000591E                 idiv    ecx
.text$mn:00005920                 mov     ecx, eax
.text$mn:00005922                 mov     eax, [ebp+arg_4]
.text$mn:00005925                 sub     eax, [ebp+var_8]
.text$mn:00005928                 cdq
.text$mn:00005929                 mov     esi, 1Ch
.text$mn:0000592E                 idiv    esi
.text$mn:00005930                 cmp     ecx, eax
.text$mn:00005932                 jge     short loc_5955
.text$mn:00005934                 movzx   edx, [ebp+arg_C]
.text$mn:00005938                 push    edx             ; char
.text$mn:00005939                 mov     eax, [ebp+arg_8]
.text$mn:0000593C                 push    eax             ; int
.text$mn:0000593D                 mov     ecx, [ebp+var_C]
.text$mn:00005940                 push    ecx             ; int
.text$mn:00005941                 mov     edx, [ebp+arg_0]
.text$mn:00005944                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005945                 call    ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)
.text$mn:0000594A                 add     esp, 10h
.text$mn:0000594D                 mov     eax, [ebp+var_8]
.text$mn:00005950                 mov     [ebp+arg_0], eax
.text$mn:00005953                 jmp     short loc_5974
.text$mn:00005955 ; ---------------------------------------------------------------------------
.text$mn:00005955
.text$mn:00005955 loc_5955:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+7Ej
.text$mn:00005955                 movzx   ecx, [ebp+arg_C]
.text$mn:00005959                 push    ecx             ; char
.text$mn:0000595A                 mov     edx, [ebp+arg_8]
.text$mn:0000595D                 push    edx             ; int
.text$mn:0000595E                 mov     eax, [ebp+arg_4]
.text$mn:00005961                 push    eax             ; int
.text$mn:00005962                 mov     ecx, [ebp+var_8]
.text$mn:00005965                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005966                 call    ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)
.text$mn:0000596B                 add     esp, 10h
.text$mn:0000596E                 mov     edx, [ebp+var_C]
.text$mn:00005971                 mov     [ebp+arg_4], edx
.text$mn:00005974
.text$mn:00005974 loc_5974:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+9Fj
.text$mn:00005974                 jmp     loc_58BB
.text$mn:00005979 ; ---------------------------------------------------------------------------
.text$mn:00005979
.text$mn:00005979 loc_5979:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+1Cj
.text$mn:00005979                                         ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+26j
.text$mn:00005979                 cmp     [ebp+var_4], 20h ; ' '
.text$mn:0000597D                 jle     short loc_59AB
.text$mn:0000597F                 movzx   eax, [ebp+arg_C]
.text$mn:00005983                 push    eax
.text$mn:00005984                 mov     ecx, [ebp+arg_4]
.text$mn:00005987                 push    ecx
.text$mn:00005988                 mov     edx, [ebp+arg_0]
.text$mn:0000598B                 push    edx
.text$mn:0000598C                 call    ??$make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:00005991                 add     esp, 0Ch
.text$mn:00005994                 movzx   eax, [ebp+arg_C]
.text$mn:00005998                 push    eax
.text$mn:00005999                 mov     ecx, [ebp+arg_4]
.text$mn:0000599C                 push    ecx
.text$mn:0000599D                 mov     edx, [ebp+arg_0]
.text$mn:000059A0                 push    edx
.text$mn:000059A1                 call    ??$sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:000059A6                 add     esp, 0Ch
.text$mn:000059A9                 jmp     short loc_59C6
.text$mn:000059AB ; ---------------------------------------------------------------------------
.text$mn:000059AB
.text$mn:000059AB loc_59AB:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+C9j
.text$mn:000059AB                 cmp     [ebp+var_4], 1
.text$mn:000059AF                 jle     short loc_59C6
.text$mn:000059B1                 movzx   eax, [ebp+arg_C]
.text$mn:000059B5                 push    eax
.text$mn:000059B6                 mov     ecx, [ebp+arg_4]
.text$mn:000059B9                 push    ecx
.text$mn:000059BA                 mov     edx, [ebp+arg_0]
.text$mn:000059BD                 push    edx
.text$mn:000059BE                 call    ??$_Insertion_sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Insertion_sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:000059C3                 add     esp, 0Ch
.text$mn:000059C6
.text$mn:000059C6 loc_59C6:                               ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+F5j
.text$mn:000059C6                                         ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+FBj
.text$mn:000059C6                 pop     esi
.text$mn:000059C7                 mov     esp, ebp
.text$mn:000059C9                 pop     ebp
.text$mn:000059CA                 retn
.text$mn:000059CA ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z endp
.text$mn:000059CA
.text$mn:000059CA ; ---------------------------------------------------------------------------
.text$mn:000059CB                 align 4
.text$mn:000059CB _text$mn        ends
.text$mn:000059CB
.text$mn:000059CC ; ===========================================================================
.text$mn:000059CC
.text$mn:000059CC ; Segment type: Pure code
.text$mn:000059CC ; Segment permissions: Read/Execute
.text$mn:000059CC _text$mn        segment para public 'CODE' use32
.text$mn:000059CC                 assume cs:_text$mn
.text$mn:000059CC                 ;org 59CCh
.text$mn:000059CC ; COMDAT (pick any)
.text$mn:000059CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059CC
.text$mn:000059CC ; =============== S U B R O U T I N E =======================================
.text$mn:000059CC
.text$mn:000059CC ; Attributes: bp-based frame
.text$mn:000059CC
.text$mn:000059CC ; void __cdecl std::_Sort_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:000059CC                 public ??$_Sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:000059CC ??$_Sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:000059CC                                         ; CODE XREF: std::sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+79p
.text$mn:000059CC
.text$mn:000059CC arg_0           = dword ptr  8
.text$mn:000059CC arg_4           = dword ptr  0Ch
.text$mn:000059CC arg_8           = byte ptr  10h
.text$mn:000059CC
.text$mn:000059CC                 push    ebp
.text$mn:000059CD                 mov     ebp, esp
.text$mn:000059CF                 jmp     short loc_59DA
.text$mn:000059D1 ; ---------------------------------------------------------------------------
.text$mn:000059D1
.text$mn:000059D1 loc_59D1:                               ; CODE XREF: std::_Sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+36j
.text$mn:000059D1                 mov     eax, [ebp+arg_4]
.text$mn:000059D4                 sub     eax, 1Ch
.text$mn:000059D7                 mov     [ebp+arg_4], eax
.text$mn:000059DA
.text$mn:000059DA loc_59DA:                               ; CODE XREF: std::_Sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+3j
.text$mn:000059DA                 mov     eax, [ebp+arg_4]
.text$mn:000059DD                 sub     eax, [ebp+arg_0]
.text$mn:000059E0                 cdq
.text$mn:000059E1                 mov     ecx, 1Ch
.text$mn:000059E6                 idiv    ecx
.text$mn:000059E8                 cmp     eax, 1
.text$mn:000059EB                 jle     short loc_5A04
.text$mn:000059ED                 movzx   edx, [ebp+arg_8]
.text$mn:000059F1                 push    edx
.text$mn:000059F2                 mov     eax, [ebp+arg_4]
.text$mn:000059F5                 push    eax
.text$mn:000059F6                 mov     ecx, [ebp+arg_0]
.text$mn:000059F9                 push    ecx
.text$mn:000059FA                 call    ??$_Pop_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:000059FF                 add     esp, 0Ch
.text$mn:00005A02                 jmp     short loc_59D1
.text$mn:00005A04 ; ---------------------------------------------------------------------------
.text$mn:00005A04
.text$mn:00005A04 loc_5A04:                               ; CODE XREF: std::_Sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1Fj
.text$mn:00005A04                 pop     ebp
.text$mn:00005A05                 retn
.text$mn:00005A05 ??$_Sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00005A05
.text$mn:00005A05 ; ---------------------------------------------------------------------------
.text$mn:00005A06                 align 4
.text$mn:00005A06 _text$mn        ends
.text$mn:00005A06
.text$mn:00005A08 ; ===========================================================================
.text$mn:00005A08
.text$mn:00005A08 ; Segment type: Pure code
.text$mn:00005A08 ; Segment permissions: Read/Execute
.text$mn:00005A08 _text$mn        segment para public 'CODE' use32
.text$mn:00005A08                 assume cs:_text$mn
.text$mn:00005A08                 ;org 5A08h
.text$mn:00005A08 ; COMDAT (pick any)
.text$mn:00005A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A08
.text$mn:00005A08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A08
.text$mn:00005A08 ; Attributes: bp-based frame
.text$mn:00005A08
.text$mn:00005A08 ; void __cdecl std::_Swap_adl<struct std::_Container_proxy *>(struct std::_Container_proxy * &, struct std::_Container_proxy * &)
.text$mn:00005A08                 public ??$_Swap_adl@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z
.text$mn:00005A08 ??$_Swap_adl@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z proc near
.text$mn:00005A08                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Swap_alloc(std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>> &)+Fp
.text$mn:00005A08
.text$mn:00005A08 arg_0           = dword ptr  8
.text$mn:00005A08 arg_4           = dword ptr  0Ch
.text$mn:00005A08
.text$mn:00005A08                 push    ebp
.text$mn:00005A09                 mov     ebp, esp
.text$mn:00005A0B                 mov     eax, [ebp+arg_4]
.text$mn:00005A0E                 push    eax
.text$mn:00005A0F                 mov     ecx, [ebp+arg_0]
.text$mn:00005A12                 push    ecx
.text$mn:00005A13                 call    ??$swap@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z ; std::swap<std::_Container_proxy *>(std::_Container_proxy * &,std::_Container_proxy * &)
.text$mn:00005A18                 add     esp, 8
.text$mn:00005A1B                 pop     ebp
.text$mn:00005A1C                 retn
.text$mn:00005A1C ??$_Swap_adl@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z endp
.text$mn:00005A1C
.text$mn:00005A1C ; ---------------------------------------------------------------------------
.text$mn:00005A1D                 align 10h
.text$mn:00005A1D _text$mn        ends
.text$mn:00005A1D
.text$mn:00005A20 ; ===========================================================================
.text$mn:00005A20
.text$mn:00005A20 ; Segment type: Pure code
.text$mn:00005A20 ; Segment permissions: Read/Execute
.text$mn:00005A20 _text$mn        segment para public 'CODE' use32
.text$mn:00005A20                 assume cs:_text$mn
.text$mn:00005A20                 ;org 5A20h
.text$mn:00005A20 ; COMDAT (pick any)
.text$mn:00005A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A20
.text$mn:00005A20 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A20
.text$mn:00005A20 ; Attributes: bp-based frame
.text$mn:00005A20
.text$mn:00005A20 ; void __cdecl std::_Swap_adl<wchar_t *>(wchar_t * &, wchar_t * &)
.text$mn:00005A20                 public ??$_Swap_adl@PA_W@std@@YAXAAPA_W0@Z
.text$mn:00005A20 ??$_Swap_adl@PA_W@std@@YAXAAPA_W0@Z proc near
.text$mn:00005A20                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2Dp
.text$mn:00005A20
.text$mn:00005A20 arg_0           = dword ptr  8
.text$mn:00005A20 arg_4           = dword ptr  0Ch
.text$mn:00005A20
.text$mn:00005A20                 push    ebp
.text$mn:00005A21                 mov     ebp, esp
.text$mn:00005A23                 mov     eax, [ebp+arg_4]
.text$mn:00005A26                 push    eax
.text$mn:00005A27                 mov     ecx, [ebp+arg_0]
.text$mn:00005A2A                 push    ecx
.text$mn:00005A2B                 call    ??$swap@PA_W@std@@YAXAAPA_W0@Z ; std::swap<wchar_t *>(wchar_t * &,wchar_t * &)
.text$mn:00005A30                 add     esp, 8
.text$mn:00005A33                 pop     ebp
.text$mn:00005A34                 retn
.text$mn:00005A34 ??$_Swap_adl@PA_W@std@@YAXAAPA_W0@Z endp
.text$mn:00005A34
.text$mn:00005A34 ; ---------------------------------------------------------------------------
.text$mn:00005A35                 align 4
.text$mn:00005A35 _text$mn        ends
.text$mn:00005A35
.text$mn:00005A38 ; ===========================================================================
.text$mn:00005A38
.text$mn:00005A38 ; Segment type: Pure code
.text$mn:00005A38 ; Segment permissions: Read/Execute
.text$mn:00005A38 _text$mn        segment para public 'CODE' use32
.text$mn:00005A38                 assume cs:_text$mn
.text$mn:00005A38                 ;org 5A38h
.text$mn:00005A38 ; COMDAT (pick any)
.text$mn:00005A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A38
.text$mn:00005A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A38
.text$mn:00005A38 ; Attributes: bp-based frame
.text$mn:00005A38
.text$mn:00005A38 ; protected: struct MatchedCharInserted * __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Umove<struct MatchedCharInserted *>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct MatchedCharInserted *)
.text$mn:00005A38                 public ??$_Umove@PAUMatchedCharInserted@@@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEPAUMatchedCharInserted@@PAU2@00@Z
.text$mn:00005A38 ??$_Umove@PAUMatchedCharInserted@@@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEPAUMatchedCharInserted@@PAU2@00@Z proc near
.text$mn:00005A38                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+65p
.text$mn:00005A38
.text$mn:00005A38 var_8           = dword ptr -8
.text$mn:00005A38 var_1           = byte ptr -1
.text$mn:00005A38 arg_0           = dword ptr  8
.text$mn:00005A38 arg_4           = dword ptr  0Ch
.text$mn:00005A38 arg_8           = dword ptr  10h
.text$mn:00005A38
.text$mn:00005A38                 push    ebp
.text$mn:00005A39                 mov     ebp, esp
.text$mn:00005A3B                 sub     esp, 8
.text$mn:00005A3E                 mov     [ebp+var_8], ecx
.text$mn:00005A41                 lea     eax, [ebp+var_1]
.text$mn:00005A44                 push    eax
.text$mn:00005A45                 mov     ecx, [ebp+var_8]
.text$mn:00005A48                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:00005A4D                 lea     ecx, [ebp+var_1]
.text$mn:00005A50                 push    ecx
.text$mn:00005A51                 mov     edx, [ebp+arg_8]
.text$mn:00005A54                 push    edx
.text$mn:00005A55                 mov     eax, [ebp+arg_4]
.text$mn:00005A58                 push    eax
.text$mn:00005A59                 mov     ecx, [ebp+arg_0]
.text$mn:00005A5C                 push    ecx
.text$mn:00005A5D                 call    ??$_Uninitialized_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z ; std::_Uninitialized_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)
.text$mn:00005A62                 add     esp, 10h
.text$mn:00005A65                 mov     esp, ebp
.text$mn:00005A67                 pop     ebp
.text$mn:00005A68                 retn    0Ch
.text$mn:00005A68 ??$_Umove@PAUMatchedCharInserted@@@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEPAUMatchedCharInserted@@PAU2@00@Z endp
.text$mn:00005A68
.text$mn:00005A68 ; ---------------------------------------------------------------------------
.text$mn:00005A6B                 align 4
.text$mn:00005A6B _text$mn        ends
.text$mn:00005A6B
.text$mn:00005A6C ; ===========================================================================
.text$mn:00005A6C
.text$mn:00005A6C ; Segment type: Pure code
.text$mn:00005A6C ; Segment permissions: Read/Execute
.text$mn:00005A6C _text$mn        segment para public 'CODE' use32
.text$mn:00005A6C                 assume cs:_text$mn
.text$mn:00005A6C                 ;org 5A6Ch
.text$mn:00005A6C ; COMDAT (pick any)
.text$mn:00005A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A6C
.text$mn:00005A6C ; =============== S U B R O U T I N E =======================================
.text$mn:00005A6C
.text$mn:00005A6C ; Attributes: bp-based frame
.text$mn:00005A6C
.text$mn:00005A6C ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Umove<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005A6C                 public ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z
.text$mn:00005A6C ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z proc near
.text$mn:00005A6C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+65p
.text$mn:00005A6C
.text$mn:00005A6C var_8           = dword ptr -8
.text$mn:00005A6C var_1           = byte ptr -1
.text$mn:00005A6C arg_0           = dword ptr  8
.text$mn:00005A6C arg_4           = dword ptr  0Ch
.text$mn:00005A6C arg_8           = dword ptr  10h
.text$mn:00005A6C
.text$mn:00005A6C                 push    ebp
.text$mn:00005A6D                 mov     ebp, esp
.text$mn:00005A6F                 sub     esp, 8
.text$mn:00005A72                 mov     [ebp+var_8], ecx
.text$mn:00005A75                 lea     eax, [ebp+var_1]
.text$mn:00005A78                 push    eax
.text$mn:00005A79                 mov     ecx, [ebp+var_8]
.text$mn:00005A7C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00005A81                 lea     ecx, [ebp+var_1]
.text$mn:00005A84                 push    ecx
.text$mn:00005A85                 mov     edx, [ebp+arg_8]
.text$mn:00005A88                 push    edx
.text$mn:00005A89                 mov     eax, [ebp+arg_4]
.text$mn:00005A8C                 push    eax
.text$mn:00005A8D                 mov     ecx, [ebp+arg_0]
.text$mn:00005A90                 push    ecx
.text$mn:00005A91                 call    ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00005A96                 add     esp, 10h
.text$mn:00005A99                 mov     esp, ebp
.text$mn:00005A9B                 pop     ebp
.text$mn:00005A9C                 retn    0Ch
.text$mn:00005A9C ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z endp
.text$mn:00005A9C
.text$mn:00005A9C ; ---------------------------------------------------------------------------
.text$mn:00005A9F                 align 10h
.text$mn:00005A9F _text$mn        ends
.text$mn:00005A9F
.text$mn:00005AA0 ; ===========================================================================
.text$mn:00005AA0
.text$mn:00005AA0 ; Segment type: Pure code
.text$mn:00005AA0 ; Segment permissions: Read/Execute
.text$mn:00005AA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005AA0                 assume cs:_text$mn
.text$mn:00005AA0                 ;org 5AA0h
.text$mn:00005AA0 ; COMDAT (pick any)
.text$mn:00005AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AA0
.text$mn:00005AA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AA0
.text$mn:00005AA0 ; Attributes: bp-based frame
.text$mn:00005AA0
.text$mn:00005AA0 ; struct MatchedCharInserted * __cdecl std::_Unchecked<struct MatchedCharInserted *>(struct MatchedCharInserted *)
.text$mn:00005AA0                 public ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z
.text$mn:00005AA0 ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z proc near
.text$mn:00005AA0                                         ; CODE XREF: std::_Uninitialized_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+Bp
.text$mn:00005AA0                                         ; std::_Uninitialized_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+18p ...
.text$mn:00005AA0
.text$mn:00005AA0 arg_0           = dword ptr  8
.text$mn:00005AA0
.text$mn:00005AA0                 push    ebp
.text$mn:00005AA1                 mov     ebp, esp
.text$mn:00005AA3                 mov     eax, [ebp+arg_0]
.text$mn:00005AA6                 pop     ebp
.text$mn:00005AA7                 retn
.text$mn:00005AA7 ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z endp
.text$mn:00005AA7
.text$mn:00005AA7 _text$mn        ends
.text$mn:00005AA7
.text$mn:00005AA8 ; ===========================================================================
.text$mn:00005AA8
.text$mn:00005AA8 ; Segment type: Pure code
.text$mn:00005AA8 ; Segment permissions: Read/Execute
.text$mn:00005AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00005AA8                 assume cs:_text$mn
.text$mn:00005AA8                 ;org 5AA8h
.text$mn:00005AA8 ; COMDAT (pick any)
.text$mn:00005AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AA8
.text$mn:00005AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AA8
.text$mn:00005AA8 ; Attributes: bp-based frame
.text$mn:00005AA8
.text$mn:00005AA8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005AA8                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00005AA8 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00005AA8                                         ; CODE XREF: std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+19p
.text$mn:00005AA8                                         ; std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+26p ...
.text$mn:00005AA8
.text$mn:00005AA8 arg_0           = dword ptr  8
.text$mn:00005AA8
.text$mn:00005AA8                 push    ebp
.text$mn:00005AA9                 mov     ebp, esp
.text$mn:00005AAB                 mov     eax, [ebp+arg_0]
.text$mn:00005AAE                 pop     ebp
.text$mn:00005AAF                 retn
.text$mn:00005AAF ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00005AAF
.text$mn:00005AAF _text$mn        ends
.text$mn:00005AAF
.text$mn:00005AB0 ; ===========================================================================
.text$mn:00005AB0
.text$mn:00005AB0 ; Segment type: Pure code
.text$mn:00005AB0 ; Segment permissions: Read/Execute
.text$mn:00005AB0 _text$mn        segment para public 'CODE' use32
.text$mn:00005AB0                 assume cs:_text$mn
.text$mn:00005AB0                 ;org 5AB0h
.text$mn:00005AB0 ; COMDAT (pick any)
.text$mn:00005AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AB0
.text$mn:00005AB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AB0
.text$mn:00005AB0 ; Attributes: bp-based frame
.text$mn:00005AB0
.text$mn:00005AB0 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:00005AB0                 public ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00005AB0 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$mn:00005AB0                                         ; CODE XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+C8p
.text$mn:00005AB0                                         ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+F9p
.text$mn:00005AB0
.text$mn:00005AB0 var_10          = dword ptr -10h
.text$mn:00005AB0 var_C           = dword ptr -0Ch
.text$mn:00005AB0 var_4           = dword ptr -4
.text$mn:00005AB0 arg_0           = byte ptr  8
.text$mn:00005AB0
.text$mn:00005AB0                 push    ebp
.text$mn:00005AB1                 mov     ebp, esp
.text$mn:00005AB3                 push    0FFFFFFFFh
.text$mn:00005AB5                 push    offset __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00005ABA                 mov     eax, large fs:0
.text$mn:00005AC0                 push    eax
.text$mn:00005AC1                 push    ecx
.text$mn:00005AC2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005AC7                 xor     eax, ebp
.text$mn:00005AC9                 push    eax
.text$mn:00005ACA                 lea     eax, [ebp+var_C]
.text$mn:00005ACD                 mov     large fs:0, eax
.text$mn:00005AD3                 mov     [ebp+var_4], 0
.text$mn:00005ADA                 lea     ecx, [ebp+arg_0]
.text$mn:00005ADD                 call    ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Unchecked(void)
.text$mn:00005AE2                 mov     [ebp+var_10], eax
.text$mn:00005AE5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005AEC                 lea     ecx, [ebp+arg_0]
.text$mn:00005AEF                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00005AF4                 mov     eax, [ebp+var_10]
.text$mn:00005AF7                 mov     ecx, [ebp+var_C]
.text$mn:00005AFA                 mov     large fs:0, ecx
.text$mn:00005B01                 pop     ecx
.text$mn:00005B02                 mov     esp, ebp
.text$mn:00005B04                 pop     ebp
.text$mn:00005B05                 retn
.text$mn:00005B05 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$mn:00005B05
.text$mn:00005B05 ; ---------------------------------------------------------------------------
.text$mn:00005B06                 align 4
.text$mn:00005B06 _text$mn        ends
.text$mn:00005B06
.text$x:00005B08 ; ===========================================================================
.text$x:00005B08
.text$x:00005B08 ; Segment type: Pure code
.text$x:00005B08 ; Segment permissions: Read/Execute
.text$x:00005B08 _text$x         segment para public 'CODE' use32
.text$x:00005B08                 assume cs:_text$x
.text$x:00005B08                 ;org 5B08h
.text$x:00005B08 ; COMDAT (pick associative to section at 5AB0)
.text$x:00005B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B08
.text$x:00005B08 ; =============== S U B R O U T I N E =======================================
.text$x:00005B08
.text$x:00005B08
.text$x:00005B08 __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 proc near
.text$x:00005B08                                         ; DATA XREF: .xdata$x:00010D8Co
.text$x:00005B08                 lea     ecx, [ebp+8]
.text$x:00005B0B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00005B0B __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 endp
.text$x:00005B0B
.text$x:00005B10
.text$x:00005B10 ; =============== S U B R O U T I N E =======================================
.text$x:00005B10
.text$x:00005B10
.text$x:00005B10 __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$x:00005B10                                         ; DATA XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:00005B10
.text$x:00005B10 arg_4           = dword ptr  8
.text$x:00005B10
.text$x:00005B10                 mov     edx, [esp+arg_4]
.text$x:00005B14                 lea     eax, [edx+0Ch]
.text$x:00005B17                 mov     ecx, [edx-8]
.text$x:00005B1A                 xor     ecx, eax
.text$x:00005B1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B21                 mov     eax, offset __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$x:00005B26                 jmp     ___CxxFrameHandler3
.text$x:00005B26 __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$x:00005B26
.text$x:00005B26 ; ---------------------------------------------------------------------------
.text$x:00005B2B                 align 4
.text$x:00005B2B _text$x         ends
.text$x:00005B2B
.text$mn:00005B2C ; ===========================================================================
.text$mn:00005B2C
.text$mn:00005B2C ; Segment type: Pure code
.text$mn:00005B2C ; Segment permissions: Read/Execute
.text$mn:00005B2C _text$mn        segment para public 'CODE' use32
.text$mn:00005B2C                 assume cs:_text$mn
.text$mn:00005B2C                 ;org 5B2Ch
.text$mn:00005B2C ; COMDAT (pick any)
.text$mn:00005B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B2C
.text$mn:00005B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B2C
.text$mn:00005B2C ; Attributes: bp-based frame
.text$mn:00005B2C
.text$mn:00005B2C ; int __cdecl std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(int, struct std::_Container_base12 *, int, char)
.text$mn:00005B2C                 public ??$_Unguarded_partition@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:00005B2C ??$_Unguarded_partition@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:00005B2C                                         ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+3Dp
.text$mn:00005B2C
.text$mn:00005B2C var_28          = dword ptr -28h
.text$mn:00005B2C var_24          = dword ptr -24h
.text$mn:00005B2C var_20          = dword ptr -20h
.text$mn:00005B2C var_1C          = dword ptr -1Ch
.text$mn:00005B2C var_18          = dword ptr -18h
.text$mn:00005B2C var_14          = dword ptr -14h
.text$mn:00005B2C var_10          = dword ptr -10h
.text$mn:00005B2C var_C           = dword ptr -0Ch
.text$mn:00005B2C var_8           = dword ptr -8
.text$mn:00005B2C var_4           = dword ptr -4
.text$mn:00005B2C arg_0           = dword ptr  8
.text$mn:00005B2C arg_4           = dword ptr  0Ch
.text$mn:00005B2C arg_8           = dword ptr  10h
.text$mn:00005B2C arg_C           = byte ptr  14h
.text$mn:00005B2C
.text$mn:00005B2C                 push    ebp
.text$mn:00005B2D                 mov     ebp, esp
.text$mn:00005B2F                 sub     esp, 28h
.text$mn:00005B32                 mov     eax, [ebp+arg_8]
.text$mn:00005B35                 sub     eax, [ebp+arg_4]
.text$mn:00005B38                 cdq
.text$mn:00005B39                 mov     ecx, 1Ch
.text$mn:00005B3E                 idiv    ecx
.text$mn:00005B40                 cdq
.text$mn:00005B41                 sub     eax, edx
.text$mn:00005B43                 sar     eax, 1
.text$mn:00005B45                 imul    edx, eax, 1Ch
.text$mn:00005B48                 add     edx, [ebp+arg_4]
.text$mn:00005B4B                 mov     [ebp+var_14], edx
.text$mn:00005B4E                 movzx   eax, [ebp+arg_C]
.text$mn:00005B52                 push    eax             ; char
.text$mn:00005B53                 mov     ecx, [ebp+arg_8]
.text$mn:00005B56                 sub     ecx, 1Ch
.text$mn:00005B59                 push    ecx             ; int
.text$mn:00005B5A                 mov     edx, [ebp+var_14]
.text$mn:00005B5D                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005B5E                 mov     eax, [ebp+arg_4]
.text$mn:00005B61                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005B62                 call    ??$_Median@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@00U?$less@X@0@@Z ; std::_Median<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:00005B67                 add     esp, 10h
.text$mn:00005B6A                 mov     ecx, [ebp+var_14]
.text$mn:00005B6D                 mov     [ebp+var_4], ecx
.text$mn:00005B70                 mov     edx, [ebp+var_4]
.text$mn:00005B73                 add     edx, 1Ch
.text$mn:00005B76                 mov     [ebp+var_8], edx
.text$mn:00005B79
.text$mn:00005B79 loc_5B79:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+A1j
.text$mn:00005B79                 mov     eax, [ebp+arg_4]
.text$mn:00005B7C                 cmp     eax, [ebp+var_4]
.text$mn:00005B7F                 jnb     short loc_5BCF
.text$mn:00005B81                 push    0BFEh           ; unsigned int
.text$mn:00005B86                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005B8B                 mov     ecx, [ebp+var_4]
.text$mn:00005B8E                 push    ecx             ; int
.text$mn:00005B8F                 mov     edx, [ebp+var_4]
.text$mn:00005B92                 sub     edx, 1Ch
.text$mn:00005B95                 push    edx             ; int
.text$mn:00005B96                 movzx   eax, [ebp+arg_C]
.text$mn:00005B9A                 push    eax             ; char
.text$mn:00005B9B                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005BA0                 add     esp, 14h
.text$mn:00005BA3                 movzx   ecx, al
.text$mn:00005BA6                 test    ecx, ecx
.text$mn:00005BA8                 jnz     short loc_5BCF
.text$mn:00005BAA                 mov     edx, [ebp+var_4]
.text$mn:00005BAD                 sub     edx, 1Ch
.text$mn:00005BB0                 push    edx
.text$mn:00005BB1                 mov     eax, [ebp+var_4]
.text$mn:00005BB4                 push    eax
.text$mn:00005BB5                 lea     ecx, [ebp+arg_C]
.text$mn:00005BB8                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005BBD                 movzx   ecx, al
.text$mn:00005BC0                 test    ecx, ecx
.text$mn:00005BC2                 jnz     short loc_5BCF
.text$mn:00005BC4                 mov     edx, [ebp+var_4]
.text$mn:00005BC7                 sub     edx, 1Ch
.text$mn:00005BCA                 mov     [ebp+var_4], edx
.text$mn:00005BCD                 jmp     short loc_5B79
.text$mn:00005BCF ; ---------------------------------------------------------------------------
.text$mn:00005BCF
.text$mn:00005BCF loc_5BCF:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+53j
.text$mn:00005BCF                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+7Cj ...
.text$mn:00005BCF                 mov     eax, [ebp+var_8]
.text$mn:00005BD2                 cmp     eax, [ebp+arg_8]
.text$mn:00005BD5                 jnb     short loc_5C1F
.text$mn:00005BD7                 push    0C02h           ; unsigned int
.text$mn:00005BDC                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005BE1                 mov     ecx, [ebp+var_4]
.text$mn:00005BE4                 push    ecx             ; int
.text$mn:00005BE5                 mov     edx, [ebp+var_8]
.text$mn:00005BE8                 push    edx             ; int
.text$mn:00005BE9                 movzx   eax, [ebp+arg_C]
.text$mn:00005BED                 push    eax             ; char
.text$mn:00005BEE                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005BF3                 add     esp, 14h
.text$mn:00005BF6                 movzx   ecx, al
.text$mn:00005BF9                 test    ecx, ecx
.text$mn:00005BFB                 jnz     short loc_5C1F
.text$mn:00005BFD                 mov     edx, [ebp+var_8]
.text$mn:00005C00                 push    edx
.text$mn:00005C01                 mov     eax, [ebp+var_4]
.text$mn:00005C04                 push    eax
.text$mn:00005C05                 lea     ecx, [ebp+arg_C]
.text$mn:00005C08                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005C0D                 movzx   ecx, al
.text$mn:00005C10                 test    ecx, ecx
.text$mn:00005C12                 jnz     short loc_5C1F
.text$mn:00005C14                 mov     edx, [ebp+var_8]
.text$mn:00005C17                 add     edx, 1Ch
.text$mn:00005C1A                 mov     [ebp+var_8], edx
.text$mn:00005C1D                 jmp     short loc_5BCF
.text$mn:00005C1F ; ---------------------------------------------------------------------------
.text$mn:00005C1F
.text$mn:00005C1F loc_5C1F:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+A9j
.text$mn:00005C1F                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+CFj ...
.text$mn:00005C1F                 mov     eax, [ebp+var_8]
.text$mn:00005C22                 mov     [ebp+var_10], eax
.text$mn:00005C25                 mov     ecx, [ebp+var_4]
.text$mn:00005C28                 mov     [ebp+var_C], ecx
.text$mn:00005C2B
.text$mn:00005C2B loc_5C2B:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_5E34j
.text$mn:00005C2B                 jmp     short loc_5C36
.text$mn:00005C2D ; ---------------------------------------------------------------------------
.text$mn:00005C2D
.text$mn:00005C2D loc_5C2D:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_5CB1j
.text$mn:00005C2D                 mov     edx, [ebp+var_10]
.text$mn:00005C30                 add     edx, 1Ch
.text$mn:00005C33                 mov     [ebp+var_10], edx
.text$mn:00005C36
.text$mn:00005C36 loc_5C36:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_5C2Bj
.text$mn:00005C36                 mov     eax, [ebp+var_10]
.text$mn:00005C39                 cmp     eax, [ebp+arg_8]
.text$mn:00005C3C                 jnb     short loc_5CB6
.text$mn:00005C3E                 push    0C0Ch           ; unsigned int
.text$mn:00005C43                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005C48                 mov     ecx, [ebp+var_10]
.text$mn:00005C4B                 push    ecx             ; int
.text$mn:00005C4C                 mov     edx, [ebp+var_4]
.text$mn:00005C4F                 push    edx             ; int
.text$mn:00005C50                 movzx   eax, [ebp+arg_C]
.text$mn:00005C54                 push    eax             ; char
.text$mn:00005C55                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005C5A                 add     esp, 14h
.text$mn:00005C5D                 movzx   ecx, al
.text$mn:00005C60                 test    ecx, ecx
.text$mn:00005C62                 jz      short loc_5C66
.text$mn:00005C64                 jmp     short loc_5CB1
.text$mn:00005C66 ; ---------------------------------------------------------------------------
.text$mn:00005C66
.text$mn:00005C66 loc_5C66:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+136j
.text$mn:00005C66                 mov     edx, [ebp+var_4]
.text$mn:00005C69                 push    edx
.text$mn:00005C6A                 mov     eax, [ebp+var_10]
.text$mn:00005C6D                 push    eax
.text$mn:00005C6E                 lea     ecx, [ebp+arg_C]
.text$mn:00005C71                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005C76                 movzx   ecx, al
.text$mn:00005C79                 test    ecx, ecx
.text$mn:00005C7B                 jz      short loc_5C81
.text$mn:00005C7D                 jmp     short loc_5CB6
.text$mn:00005C7F ; ---------------------------------------------------------------------------
.text$mn:00005C7F                 jmp     short loc_5CB1
.text$mn:00005C81 ; ---------------------------------------------------------------------------
.text$mn:00005C81
.text$mn:00005C81 loc_5C81:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+14Fj
.text$mn:00005C81                 mov     edx, [ebp+var_8]
.text$mn:00005C84                 mov     [ebp+var_18], edx
.text$mn:00005C87                 mov     eax, [ebp+var_10]
.text$mn:00005C8A                 mov     [ebp+var_1C], eax
.text$mn:00005C8D                 mov     ecx, [ebp+var_8]
.text$mn:00005C90                 add     ecx, 1Ch
.text$mn:00005C93                 mov     [ebp+var_8], ecx
.text$mn:00005C96                 mov     edx, [ebp+var_18]
.text$mn:00005C99                 cmp     edx, [ebp+var_1C]
.text$mn:00005C9C                 jz      short loc_5CB1
.text$mn:00005C9E                 mov     eax, [ebp+var_10]
.text$mn:00005CA1                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005CA2                 mov     ecx, [ebp+var_8]
.text$mn:00005CA5                 sub     ecx, 1Ch
.text$mn:00005CA8                 push    ecx             ; int
.text$mn:00005CA9                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005CAE                 add     esp, 8
.text$mn:00005CB1
.text$mn:00005CB1 loc_5CB1:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+138j
.text$mn:00005CB1                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+153j ...
.text$mn:00005CB1                 jmp     loc_5C2D
.text$mn:00005CB6 ; ---------------------------------------------------------------------------
.text$mn:00005CB6
.text$mn:00005CB6 loc_5CB6:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+110j
.text$mn:00005CB6                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+151j
.text$mn:00005CB6                 jmp     short loc_5CC1
.text$mn:00005CB8 ; ---------------------------------------------------------------------------
.text$mn:00005CB8
.text$mn:00005CB8 loc_5CB8:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_5D39j
.text$mn:00005CB8                 mov     edx, [ebp+var_C]
.text$mn:00005CBB                 sub     edx, 1Ch
.text$mn:00005CBE                 mov     [ebp+var_C], edx
.text$mn:00005CC1
.text$mn:00005CC1 loc_5CC1:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>):loc_5CB6j
.text$mn:00005CC1                 mov     eax, [ebp+arg_4]
.text$mn:00005CC4                 cmp     eax, [ebp+var_C]
.text$mn:00005CC7                 jnb     short loc_5D3E
.text$mn:00005CC9                 push    0C13h           ; unsigned int
.text$mn:00005CCE                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005CD3                 mov     ecx, [ebp+var_4]
.text$mn:00005CD6                 push    ecx             ; int
.text$mn:00005CD7                 mov     edx, [ebp+var_C]
.text$mn:00005CDA                 sub     edx, 1Ch
.text$mn:00005CDD                 push    edx             ; int
.text$mn:00005CDE                 movzx   eax, [ebp+arg_C]
.text$mn:00005CE2                 push    eax             ; char
.text$mn:00005CE3                 call    ??$_Debug_lt_pred@U?$less@X@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AAV32@@std@@YA_NU?$less@X@0@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)
.text$mn:00005CE8                 add     esp, 14h
.text$mn:00005CEB                 movzx   ecx, al
.text$mn:00005CEE                 test    ecx, ecx
.text$mn:00005CF0                 jz      short loc_5CF4
.text$mn:00005CF2                 jmp     short loc_5D39
.text$mn:00005CF4 ; ---------------------------------------------------------------------------
.text$mn:00005CF4
.text$mn:00005CF4 loc_5CF4:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1C4j
.text$mn:00005CF4                 mov     edx, [ebp+var_C]
.text$mn:00005CF7                 sub     edx, 1Ch
.text$mn:00005CFA                 push    edx
.text$mn:00005CFB                 mov     eax, [ebp+var_4]
.text$mn:00005CFE                 push    eax
.text$mn:00005CFF                 lea     ecx, [ebp+arg_C]
.text$mn:00005D02                 call    ??$?RAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@@?$less@X@std@@QBE_NAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::less<void>::operator()<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005D07                 movzx   ecx, al
.text$mn:00005D0A                 test    ecx, ecx
.text$mn:00005D0C                 jz      short loc_5D12
.text$mn:00005D0E                 jmp     short loc_5D3E
.text$mn:00005D10 ; ---------------------------------------------------------------------------
.text$mn:00005D10                 jmp     short loc_5D39
.text$mn:00005D12 ; ---------------------------------------------------------------------------
.text$mn:00005D12
.text$mn:00005D12 loc_5D12:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1E0j
.text$mn:00005D12                 mov     edx, [ebp+var_4]
.text$mn:00005D15                 sub     edx, 1Ch
.text$mn:00005D18                 mov     [ebp+var_4], edx
.text$mn:00005D1B                 mov     eax, [ebp+var_C]
.text$mn:00005D1E                 sub     eax, 1Ch
.text$mn:00005D21                 cmp     [ebp+var_4], eax
.text$mn:00005D24                 jz      short loc_5D39
.text$mn:00005D26                 mov     ecx, [ebp+var_C]
.text$mn:00005D29                 sub     ecx, 1Ch
.text$mn:00005D2C                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005D2D                 mov     edx, [ebp+var_4]
.text$mn:00005D30                 push    edx             ; int
.text$mn:00005D31                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005D36                 add     esp, 8
.text$mn:00005D39
.text$mn:00005D39 loc_5D39:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1C6j
.text$mn:00005D39                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1E4j ...
.text$mn:00005D39                 jmp     loc_5CB8
.text$mn:00005D3E ; ---------------------------------------------------------------------------
.text$mn:00005D3E
.text$mn:00005D3E loc_5D3E:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+19Bj
.text$mn:00005D3E                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+1E2j
.text$mn:00005D3E                 mov     eax, [ebp+var_C]
.text$mn:00005D41                 cmp     eax, [ebp+arg_4]
.text$mn:00005D44                 jnz     short loc_5D66
.text$mn:00005D46                 mov     ecx, [ebp+var_10]
.text$mn:00005D49                 cmp     ecx, [ebp+arg_8]
.text$mn:00005D4C                 jnz     short loc_5D66
.text$mn:00005D4E                 lea     edx, [ebp+var_8]
.text$mn:00005D51                 push    edx
.text$mn:00005D52                 lea     eax, [ebp+var_4]
.text$mn:00005D55                 push    eax
.text$mn:00005D56                 mov     ecx, [ebp+arg_0]
.text$mn:00005D59                 call    ??$?0AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAPAV01@X@?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@QAE@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &)
.text$mn:00005D5E                 mov     eax, [ebp+arg_0]
.text$mn:00005D61                 jmp     loc_5E39
.text$mn:00005D66 ; ---------------------------------------------------------------------------
.text$mn:00005D66
.text$mn:00005D66 loc_5D66:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+218j
.text$mn:00005D66                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+220j
.text$mn:00005D66                 mov     ecx, [ebp+var_C]
.text$mn:00005D69                 cmp     ecx, [ebp+arg_4]
.text$mn:00005D6C                 jnz     short loc_5DBF
.text$mn:00005D6E                 mov     edx, [ebp+var_8]
.text$mn:00005D71                 cmp     edx, [ebp+var_10]
.text$mn:00005D74                 jz      short loc_5D86
.text$mn:00005D76                 mov     eax, [ebp+var_8]
.text$mn:00005D79                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005D7A                 mov     ecx, [ebp+var_4]
.text$mn:00005D7D                 push    ecx             ; int
.text$mn:00005D7E                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005D83                 add     esp, 8
.text$mn:00005D86
.text$mn:00005D86 loc_5D86:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+248j
.text$mn:00005D86                 mov     edx, [ebp+var_8]
.text$mn:00005D89                 add     edx, 1Ch
.text$mn:00005D8C                 mov     [ebp+var_8], edx
.text$mn:00005D8F                 mov     eax, [ebp+var_10]
.text$mn:00005D92                 mov     [ebp+var_20], eax
.text$mn:00005D95                 mov     ecx, [ebp+var_4]
.text$mn:00005D98                 mov     [ebp+var_24], ecx
.text$mn:00005D9B                 mov     edx, [ebp+var_4]
.text$mn:00005D9E                 add     edx, 1Ch
.text$mn:00005DA1                 mov     [ebp+var_4], edx
.text$mn:00005DA4                 mov     eax, [ebp+var_10]
.text$mn:00005DA7                 add     eax, 1Ch
.text$mn:00005DAA                 mov     [ebp+var_10], eax
.text$mn:00005DAD                 mov     ecx, [ebp+var_20]
.text$mn:00005DB0                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005DB1                 mov     edx, [ebp+var_24]
.text$mn:00005DB4                 push    edx             ; int
.text$mn:00005DB5                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005DBA                 add     esp, 8
.text$mn:00005DBD                 jmp     short loc_5E34
.text$mn:00005DBF ; ---------------------------------------------------------------------------
.text$mn:00005DBF
.text$mn:00005DBF loc_5DBF:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+240j
.text$mn:00005DBF                 mov     eax, [ebp+var_10]
.text$mn:00005DC2                 cmp     eax, [ebp+arg_8]
.text$mn:00005DC5                 jnz     short loc_5E0C
.text$mn:00005DC7                 mov     ecx, [ebp+var_C]
.text$mn:00005DCA                 sub     ecx, 1Ch
.text$mn:00005DCD                 mov     [ebp+var_C], ecx
.text$mn:00005DD0                 mov     edx, [ebp+var_4]
.text$mn:00005DD3                 sub     edx, 1Ch
.text$mn:00005DD6                 mov     [ebp+var_4], edx
.text$mn:00005DD9                 mov     eax, [ebp+var_C]
.text$mn:00005DDC                 cmp     eax, [ebp+var_4]
.text$mn:00005DDF                 jz      short loc_5DF1
.text$mn:00005DE1                 mov     ecx, [ebp+var_4]
.text$mn:00005DE4                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005DE5                 mov     edx, [ebp+var_C]
.text$mn:00005DE8                 push    edx             ; int
.text$mn:00005DE9                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005DEE                 add     esp, 8
.text$mn:00005DF1
.text$mn:00005DF1 loc_5DF1:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+2B3j
.text$mn:00005DF1                 mov     eax, [ebp+var_8]
.text$mn:00005DF4                 sub     eax, 1Ch
.text$mn:00005DF7                 mov     [ebp+var_8], eax
.text$mn:00005DFA                 mov     ecx, [ebp+var_8]
.text$mn:00005DFD                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00005DFE                 mov     edx, [ebp+var_4]
.text$mn:00005E01                 push    edx             ; int
.text$mn:00005E02                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005E07                 add     esp, 8
.text$mn:00005E0A                 jmp     short loc_5E34
.text$mn:00005E0C ; ---------------------------------------------------------------------------
.text$mn:00005E0C
.text$mn:00005E0C loc_5E0C:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+299j
.text$mn:00005E0C                 mov     eax, [ebp+var_C]
.text$mn:00005E0F                 sub     eax, 1Ch
.text$mn:00005E12                 mov     [ebp+var_C], eax
.text$mn:00005E15                 mov     ecx, [ebp+var_10]
.text$mn:00005E18                 mov     [ebp+var_28], ecx
.text$mn:00005E1B                 mov     edx, [ebp+var_C]
.text$mn:00005E1E                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005E1F                 mov     eax, [ebp+var_28]
.text$mn:00005E22                 push    eax             ; int
.text$mn:00005E23                 call    ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005E28                 add     esp, 8
.text$mn:00005E2B                 mov     ecx, [ebp+var_10]
.text$mn:00005E2E                 add     ecx, 1Ch
.text$mn:00005E31                 mov     [ebp+var_10], ecx
.text$mn:00005E34
.text$mn:00005E34 loc_5E34:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+291j
.text$mn:00005E34                                         ; std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+2DEj
.text$mn:00005E34                 jmp     loc_5C2B
.text$mn:00005E39 ; ---------------------------------------------------------------------------
.text$mn:00005E39
.text$mn:00005E39 loc_5E39:                               ; CODE XREF: std::_Unguarded_partition<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+235j
.text$mn:00005E39                 mov     esp, ebp
.text$mn:00005E3B                 pop     ebp
.text$mn:00005E3C                 retn
.text$mn:00005E3C ??$_Unguarded_partition@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00005E3C
.text$mn:00005E3C ; ---------------------------------------------------------------------------
.text$mn:00005E3D                 align 10h
.text$mn:00005E3D _text$mn        ends
.text$mn:00005E3D
.text$mn:00005E40 ; ===========================================================================
.text$mn:00005E40
.text$mn:00005E40 ; Segment type: Pure code
.text$mn:00005E40 ; Segment permissions: Read/Execute
.text$mn:00005E40 _text$mn        segment para public 'CODE' use32
.text$mn:00005E40                 assume cs:_text$mn
.text$mn:00005E40                 ;org 5E40h
.text$mn:00005E40 ; COMDAT (pick any)
.text$mn:00005E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E40
.text$mn:00005E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E40
.text$mn:00005E40 ; Attributes: bp-based frame
.text$mn:00005E40
.text$mn:00005E40 ; int __cdecl std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(int, int, void *, int)
.text$mn:00005E40                 public ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z
.text$mn:00005E40 ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z proc near
.text$mn:00005E40                                         ; CODE XREF: std::_Uninitialized_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+2Ep
.text$mn:00005E40
.text$mn:00005E40 var_1           = byte ptr -1
.text$mn:00005E40 arg_0           = dword ptr  8
.text$mn:00005E40 arg_4           = dword ptr  0Ch
.text$mn:00005E40 arg_8           = dword ptr  10h
.text$mn:00005E40 arg_C           = dword ptr  14h
.text$mn:00005E40
.text$mn:00005E40                 push    ebp
.text$mn:00005E41                 mov     ebp, esp
.text$mn:00005E43                 push    ecx
.text$mn:00005E44                 mov     eax, [ebp+arg_8]
.text$mn:00005E47                 push    eax
.text$mn:00005E48                 mov     ecx, [ebp+arg_0]
.text$mn:00005E4B                 push    ecx
.text$mn:00005E4C                 call    ??$_Ptr_cat@UMatchedCharInserted@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMatchedCharInserted@@0@Z ; std::_Ptr_cat<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:00005E51                 add     esp, 8
.text$mn:00005E54                 mov     [ebp+var_1], al
.text$mn:00005E57                 movzx   edx, [ebp+var_1]
.text$mn:00005E5B                 push    edx
.text$mn:00005E5C                 mov     eax, [ebp+arg_0]
.text$mn:00005E5F                 push    eax
.text$mn:00005E60                 call    ??$_Val_type@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z ; std::_Val_type<MatchedCharInserted *>(MatchedCharInserted *)
.text$mn:00005E65                 add     esp, 4
.text$mn:00005E68                 push    eax
.text$mn:00005E69                 mov     ecx, [ebp+arg_C]
.text$mn:00005E6C                 push    ecx             ; int
.text$mn:00005E6D                 mov     edx, [ebp+arg_8]
.text$mn:00005E70                 push    edx             ; void *
.text$mn:00005E71                 mov     eax, [ebp+arg_4]
.text$mn:00005E74                 push    eax             ; int
.text$mn:00005E75                 mov     ecx, [ebp+arg_0]
.text$mn:00005E78                 push    ecx             ; int
.text$mn:00005E79                 call    ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005E7E                 add     esp, 18h
.text$mn:00005E81                 mov     esp, ebp
.text$mn:00005E83                 pop     ebp
.text$mn:00005E84                 retn
.text$mn:00005E84 ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z endp
.text$mn:00005E84
.text$mn:00005E84 ; ---------------------------------------------------------------------------
.text$mn:00005E85                 align 4
.text$mn:00005E85 _text$mn        ends
.text$mn:00005E85
.text$mn:00005E88 ; ===========================================================================
.text$mn:00005E88
.text$mn:00005E88 ; Segment type: Pure code
.text$mn:00005E88 ; Segment permissions: Read/Execute
.text$mn:00005E88 _text$mn        segment para public 'CODE' use32
.text$mn:00005E88                 assume cs:_text$mn
.text$mn:00005E88                 ;org 5E88h
.text$mn:00005E88 ; COMDAT (pick any)
.text$mn:00005E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E88
.text$mn:00005E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E88
.text$mn:00005E88 ; Attributes: bp-based frame
.text$mn:00005E88
.text$mn:00005E88 ; int __cdecl std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(int, int, void *, int)
.text$mn:00005E88                 public ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005E88 ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005E88                                         ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+39p
.text$mn:00005E88
.text$mn:00005E88 var_14          = dword ptr -14h
.text$mn:00005E88 var_10          = dword ptr -10h
.text$mn:00005E88 var_C           = dword ptr -0Ch
.text$mn:00005E88 var_4           = dword ptr -4
.text$mn:00005E88 arg_0           = dword ptr  8
.text$mn:00005E88 arg_4           = dword ptr  0Ch
.text$mn:00005E88 arg_8           = dword ptr  10h
.text$mn:00005E88 arg_C           = dword ptr  14h
.text$mn:00005E88
.text$mn:00005E88 ; FUNCTION CHUNK AT .text$mn:00005F4F SIZE 00000009 BYTES
.text$mn:00005E88 ; FUNCTION CHUNK AT .text$mn:00005F5F SIZE 00000015 BYTES
.text$mn:00005E88
.text$mn:00005E88                 push    ebp
.text$mn:00005E89                 mov     ebp, esp
.text$mn:00005E8B                 push    0FFFFFFFFh
.text$mn:00005E8D                 push    offset __ehhandler$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005E92                 mov     eax, large fs:0
.text$mn:00005E98                 push    eax
.text$mn:00005E99                 push    ecx
.text$mn:00005E9A                 push    ecx
.text$mn:00005E9B                 push    ebx
.text$mn:00005E9C                 push    esi
.text$mn:00005E9D                 push    edi
.text$mn:00005E9E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EA3                 xor     eax, ebp
.text$mn:00005EA5                 push    eax
.text$mn:00005EA6                 lea     eax, [ebp+var_C]
.text$mn:00005EA9                 mov     large fs:0, eax
.text$mn:00005EAF                 mov     [ebp+var_10], esp
.text$mn:00005EB2                 push    1B6h            ; unsigned int
.text$mn:00005EB7                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005EBC                 mov     eax, [ebp+arg_4]
.text$mn:00005EBF                 push    eax             ; int
.text$mn:00005EC0                 mov     ecx, [ebp+arg_0]
.text$mn:00005EC3                 push    ecx             ; int
.text$mn:00005EC4                 call    ??$_Debug_range@PAUMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@0PB_WI@Z ; std::_Debug_range<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint)
.text$mn:00005EC9                 add     esp, 10h
.text$mn:00005ECC                 push    1B7h            ; unsigned int
.text$mn:00005ED1                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005ED6                 mov     edx, [ebp+arg_8]
.text$mn:00005ED9                 push    edx             ; int
.text$mn:00005EDA                 call    ??$_Debug_pointer@UMatchedCharInserted@@@std@@YAXPAUMatchedCharInserted@@PB_WI@Z ; std::_Debug_pointer<MatchedCharInserted>(MatchedCharInserted *,wchar_t const *,uint)
.text$mn:00005EDF                 add     esp, 0Ch
.text$mn:00005EE2                 mov     eax, [ebp+arg_8]
.text$mn:00005EE5                 mov     [ebp+var_14], eax
.text$mn:00005EE8                 mov     [ebp+var_4], 0
.text$mn:00005EEF                 jmp     short loc_5F03
.text$mn:00005EF1 ; ---------------------------------------------------------------------------
.text$mn:00005EF1
.text$mn:00005EF1 loc_5EF1:                               ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00005EF1                 mov     ecx, [ebp+arg_8]
.text$mn:00005EF4                 add     ecx, 8
.text$mn:00005EF7                 mov     [ebp+arg_8], ecx
.text$mn:00005EFA                 mov     edx, [ebp+arg_0]
.text$mn:00005EFD                 add     edx, 8
.text$mn:00005F00                 mov     [ebp+arg_0], edx
.text$mn:00005F03
.text$mn:00005F03 loc_5F03:                               ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00005F03                 mov     eax, [ebp+arg_0]
.text$mn:00005F06                 cmp     eax, [ebp+arg_4]
.text$mn:00005F09                 jz      short loc_5F1D
.text$mn:00005F0B                 mov     ecx, [ebp+arg_0]
.text$mn:00005F0E                 push    ecx             ; int
.text$mn:00005F0F                 mov     edx, [ebp+arg_8]
.text$mn:00005F12                 push    edx             ; void *
.text$mn:00005F13                 mov     ecx, [ebp+arg_C]
.text$mn:00005F16                 call    ??$construct@UMatchedCharInserted@@U1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)
.text$mn:00005F1B                 jmp     short loc_5EF1
.text$mn:00005F1D ; ---------------------------------------------------------------------------
.text$mn:00005F1D
.text$mn:00005F1D loc_5F1D:                               ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005F1D                 jmp     short loc_5F4F
.text$mn:00005F1D ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005F1D
.text$mn:00005F1F
.text$mn:00005F1F ; =============== S U B R O U T I N E =======================================
.text$mn:00005F1F
.text$mn:00005F1F ; Attributes: noreturn
.text$mn:00005F1F
.text$mn:00005F1F __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00005F1F                                         ; DATA XREF: .xdata$x:00010F28o
.text$mn:00005F1F                 jmp     short loc_5F2A
.text$mn:00005F21 ; ---------------------------------------------------------------------------
.text$mn:00005F21
.text$mn:00005F21 loc_5F21:                               ; CODE XREF: __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00005F21                 mov     eax, [ebp-14h]
.text$mn:00005F24                 add     eax, 8
.text$mn:00005F27                 mov     [ebp-14h], eax
.text$mn:00005F2A
.text$mn:00005F2A loc_5F2A:                               ; CODE XREF: __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00005F2A                 mov     ecx, [ebp-14h]
.text$mn:00005F2D                 cmp     ecx, [ebp+10h]
.text$mn:00005F30                 jz      short loc_5F40
.text$mn:00005F32                 mov     edx, [ebp-14h]
.text$mn:00005F35                 push    edx
.text$mn:00005F36                 mov     ecx, [ebp+14h]
.text$mn:00005F39                 call    ??$destroy@UMatchedCharInserted@@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::destroy<MatchedCharInserted>(MatchedCharInserted *)
.text$mn:00005F3E                 jmp     short loc_5F21
.text$mn:00005F40 ; ---------------------------------------------------------------------------
.text$mn:00005F40
.text$mn:00005F40 loc_5F40:                               ; CODE XREF: __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00005F40                 push    0
.text$mn:00005F42                 push    0
.text$mn:00005F44                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005F44 __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00005F44
.text$mn:00005F49 ; ---------------------------------------------------------------------------
.text$mn:00005F49                 mov     eax, offset $LN13_1
.text$mn:00005F4E                 retn
.text$mn:00005F4F ; ---------------------------------------------------------------------------
.text$mn:00005F4F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005F4F
.text$mn:00005F4F loc_5F4F:                               ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag):loc_5F1Dj
.text$mn:00005F4F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F56                 jmp     short loc_5F5F
.text$mn:00005F56 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005F58
.text$mn:00005F58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F58
.text$mn:00005F58
.text$mn:00005F58 $LN13_1         proc near               ; DATA XREF: .text$mn:00005F49o
.text$mn:00005F58                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005F58 $LN13_1         endp ; sp-analysis failed
.text$mn:00005F58
.text$mn:00005F5F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005F5F
.text$mn:00005F5F loc_5F5F:                               ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:00005F5F                 mov     eax, [ebp+arg_8]
.text$mn:00005F62                 mov     ecx, [ebp+var_C]
.text$mn:00005F65                 mov     large fs:0, ecx
.text$mn:00005F6C                 pop     ecx
.text$mn:00005F6D                 pop     edi
.text$mn:00005F6E                 pop     esi
.text$mn:00005F6F                 pop     ebx
.text$mn:00005F70                 mov     esp, ebp
.text$mn:00005F72                 pop     ebp
.text$mn:00005F73                 retn
.text$mn:00005F73 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005F73 _text$mn        ends
.text$mn:00005F73
.text$x:00005F74 ; ===========================================================================
.text$x:00005F74
.text$x:00005F74 ; Segment type: Pure code
.text$x:00005F74 ; Segment permissions: Read/Execute
.text$x:00005F74 _text$x         segment para public 'CODE' use32
.text$x:00005F74                 assume cs:_text$x
.text$x:00005F74                 ;org 5F74h
.text$x:00005F74 ; COMDAT (pick associative to section at 5E88)
.text$x:00005F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F74
.text$x:00005F74 ; =============== S U B R O U T I N E =======================================
.text$x:00005F74
.text$x:00005F74
.text$x:00005F74 __ehhandler$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00005F74                                         ; DATA XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00005F74
.text$x:00005F74 arg_4           = dword ptr  8
.text$x:00005F74
.text$x:00005F74                 mov     edx, [esp+arg_4]
.text$x:00005F78                 lea     eax, [edx+0Ch]
.text$x:00005F7B                 mov     ecx, [edx-18h]
.text$x:00005F7E                 xor     ecx, eax
.text$x:00005F80                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F85                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00005F8A                 jmp     ___CxxFrameHandler3
.text$x:00005F8A __ehhandler$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00005F8A
.text$x:00005F8A ; ---------------------------------------------------------------------------
.text$x:00005F8F                 align 10h
.text$x:00005F8F _text$x         ends
.text$x:00005F8F
.text$mn:00005F90 ; ===========================================================================
.text$mn:00005F90
.text$mn:00005F90 ; Segment type: Pure code
.text$mn:00005F90 ; Segment permissions: Read/Execute
.text$mn:00005F90 _text$mn        segment para public 'CODE' use32
.text$mn:00005F90                 assume cs:_text$mn
.text$mn:00005F90                 ;org 5F90h
.text$mn:00005F90 ; COMDAT (pick any)
.text$mn:00005F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F90
.text$mn:00005F90 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F90
.text$mn:00005F90 ; Attributes: bp-based frame
.text$mn:00005F90
.text$mn:00005F90 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00005F90                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00005F90 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00005F90                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Ep
.text$mn:00005F90
.text$mn:00005F90 var_1           = byte ptr -1
.text$mn:00005F90 arg_0           = dword ptr  8
.text$mn:00005F90 arg_4           = dword ptr  0Ch
.text$mn:00005F90 arg_8           = dword ptr  10h
.text$mn:00005F90 arg_C           = dword ptr  14h
.text$mn:00005F90
.text$mn:00005F90                 push    ebp
.text$mn:00005F91                 mov     ebp, esp
.text$mn:00005F93                 push    ecx
.text$mn:00005F94                 mov     eax, [ebp+arg_8]
.text$mn:00005F97                 push    eax
.text$mn:00005F98                 mov     ecx, [ebp+arg_0]
.text$mn:00005F9B                 push    ecx
.text$mn:00005F9C                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005FA1                 add     esp, 8
.text$mn:00005FA4                 mov     [ebp+var_1], al
.text$mn:00005FA7                 movzx   edx, [ebp+var_1]
.text$mn:00005FAB                 push    edx
.text$mn:00005FAC                 mov     eax, [ebp+arg_0]
.text$mn:00005FAF                 push    eax
.text$mn:00005FB0                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005FB5                 add     esp, 4
.text$mn:00005FB8                 push    eax
.text$mn:00005FB9                 mov     ecx, [ebp+arg_C]
.text$mn:00005FBC                 push    ecx             ; int
.text$mn:00005FBD                 mov     edx, [ebp+arg_8]
.text$mn:00005FC0                 push    edx             ; void *
.text$mn:00005FC1                 mov     eax, [ebp+arg_4]
.text$mn:00005FC4                 push    eax             ; int
.text$mn:00005FC5                 mov     ecx, [ebp+arg_0]
.text$mn:00005FC8                 push    ecx             ; int
.text$mn:00005FC9                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00005FCE                 add     esp, 18h
.text$mn:00005FD1                 mov     esp, ebp
.text$mn:00005FD3                 pop     ebp
.text$mn:00005FD4                 retn
.text$mn:00005FD4 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00005FD4
.text$mn:00005FD4 ; ---------------------------------------------------------------------------
.text$mn:00005FD5                 align 4
.text$mn:00005FD5 _text$mn        ends
.text$mn:00005FD5
.text$mn:00005FD8 ; ===========================================================================
.text$mn:00005FD8
.text$mn:00005FD8 ; Segment type: Pure code
.text$mn:00005FD8 ; Segment permissions: Read/Execute
.text$mn:00005FD8 _text$mn        segment para public 'CODE' use32
.text$mn:00005FD8                 assume cs:_text$mn
.text$mn:00005FD8                 ;org 5FD8h
.text$mn:00005FD8 ; COMDAT (pick any)
.text$mn:00005FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FD8
.text$mn:00005FD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FD8
.text$mn:00005FD8 ; Attributes: bp-based frame
.text$mn:00005FD8
.text$mn:00005FD8 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, int, void *, int)
.text$mn:00005FD8                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005FD8 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005FD8                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+39p
.text$mn:00005FD8
.text$mn:00005FD8 var_14          = dword ptr -14h
.text$mn:00005FD8 var_10          = dword ptr -10h
.text$mn:00005FD8 var_C           = dword ptr -0Ch
.text$mn:00005FD8 var_4           = dword ptr -4
.text$mn:00005FD8 arg_0           = dword ptr  8
.text$mn:00005FD8 arg_4           = dword ptr  0Ch
.text$mn:00005FD8 arg_8           = dword ptr  10h
.text$mn:00005FD8 arg_C           = dword ptr  14h
.text$mn:00005FD8
.text$mn:00005FD8 ; FUNCTION CHUNK AT .text$mn:0000609F SIZE 00000009 BYTES
.text$mn:00005FD8 ; FUNCTION CHUNK AT .text$mn:000060AF SIZE 00000015 BYTES
.text$mn:00005FD8
.text$mn:00005FD8                 push    ebp
.text$mn:00005FD9                 mov     ebp, esp
.text$mn:00005FDB                 push    0FFFFFFFFh
.text$mn:00005FDD                 push    offset __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005FE2                 mov     eax, large fs:0
.text$mn:00005FE8                 push    eax
.text$mn:00005FE9                 push    ecx
.text$mn:00005FEA                 push    ecx
.text$mn:00005FEB                 push    ebx
.text$mn:00005FEC                 push    esi
.text$mn:00005FED                 push    edi
.text$mn:00005FEE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FF3                 xor     eax, ebp
.text$mn:00005FF5                 push    eax
.text$mn:00005FF6                 lea     eax, [ebp+var_C]
.text$mn:00005FF9                 mov     large fs:0, eax
.text$mn:00005FFF                 mov     [ebp+var_10], esp
.text$mn:00006002                 push    1B6h            ; unsigned int
.text$mn:00006007                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000600C                 mov     eax, [ebp+arg_4]
.text$mn:0000600F                 push    eax             ; int
.text$mn:00006010                 mov     ecx, [ebp+arg_0]
.text$mn:00006013                 push    ecx             ; int
.text$mn:00006014                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00006019                 add     esp, 10h
.text$mn:0000601C                 push    1B7h            ; unsigned int
.text$mn:00006021                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006026                 mov     edx, [ebp+arg_8]
.text$mn:00006029                 push    edx             ; int
.text$mn:0000602A                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:0000602F                 add     esp, 0Ch
.text$mn:00006032                 mov     eax, [ebp+arg_8]
.text$mn:00006035                 mov     [ebp+var_14], eax
.text$mn:00006038                 mov     [ebp+var_4], 0
.text$mn:0000603F                 jmp     short loc_6053
.text$mn:00006041 ; ---------------------------------------------------------------------------
.text$mn:00006041
.text$mn:00006041 loc_6041:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00006041                 mov     ecx, [ebp+arg_8]
.text$mn:00006044                 add     ecx, 1Ch
.text$mn:00006047                 mov     [ebp+arg_8], ecx
.text$mn:0000604A                 mov     edx, [ebp+arg_0]
.text$mn:0000604D                 add     edx, 1Ch
.text$mn:00006050                 mov     [ebp+arg_0], edx
.text$mn:00006053
.text$mn:00006053 loc_6053:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00006053                 mov     eax, [ebp+arg_0]
.text$mn:00006056                 cmp     eax, [ebp+arg_4]
.text$mn:00006059                 jz      short loc_606D
.text$mn:0000605B                 mov     ecx, [ebp+arg_0]
.text$mn:0000605E                 push    ecx             ; int
.text$mn:0000605F                 mov     edx, [ebp+arg_8]
.text$mn:00006062                 push    edx             ; void *
.text$mn:00006063                 mov     ecx, [ebp+arg_C]
.text$mn:00006066                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000606B                 jmp     short loc_6041
.text$mn:0000606D ; ---------------------------------------------------------------------------
.text$mn:0000606D
.text$mn:0000606D loc_606D:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:0000606D                 jmp     short loc_609F
.text$mn:0000606D ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000606D
.text$mn:0000606F
.text$mn:0000606F ; =============== S U B R O U T I N E =======================================
.text$mn:0000606F
.text$mn:0000606F ; Attributes: noreturn
.text$mn:0000606F
.text$mn:0000606F __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000606F                                         ; DATA XREF: .xdata$x:00010ED0o
.text$mn:0000606F                 jmp     short loc_607A
.text$mn:00006071 ; ---------------------------------------------------------------------------
.text$mn:00006071
.text$mn:00006071 loc_6071:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00006071                 mov     eax, [ebp-14h]
.text$mn:00006074                 add     eax, 1Ch
.text$mn:00006077                 mov     [ebp-14h], eax
.text$mn:0000607A
.text$mn:0000607A loc_607A:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000607A                 mov     ecx, [ebp-14h]
.text$mn:0000607D                 cmp     ecx, [ebp+10h]
.text$mn:00006080                 jz      short loc_6090
.text$mn:00006082                 mov     edx, [ebp-14h]
.text$mn:00006085                 push    edx
.text$mn:00006086                 mov     ecx, [ebp+14h]
.text$mn:00006089                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000608E                 jmp     short loc_6071
.text$mn:00006090 ; ---------------------------------------------------------------------------
.text$mn:00006090
.text$mn:00006090 loc_6090:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00006090                 push    0
.text$mn:00006092                 push    0
.text$mn:00006094                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006094 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00006094
.text$mn:00006099 ; ---------------------------------------------------------------------------
.text$mn:00006099                 mov     eax, offset $LN13_0
.text$mn:0000609E                 retn
.text$mn:0000609F ; ---------------------------------------------------------------------------
.text$mn:0000609F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000609F
.text$mn:0000609F loc_609F:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag):loc_606Dj
.text$mn:0000609F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060A6                 jmp     short loc_60AF
.text$mn:000060A6 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000060A8
.text$mn:000060A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060A8
.text$mn:000060A8
.text$mn:000060A8 $LN13_0         proc near               ; DATA XREF: .text$mn:00006099o
.text$mn:000060A8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000060A8 $LN13_0         endp ; sp-analysis failed
.text$mn:000060A8
.text$mn:000060AF ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000060AF
.text$mn:000060AF loc_60AF:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:000060AF                 mov     eax, [ebp+arg_8]
.text$mn:000060B2                 mov     ecx, [ebp+var_C]
.text$mn:000060B5                 mov     large fs:0, ecx
.text$mn:000060BC                 pop     ecx
.text$mn:000060BD                 pop     edi
.text$mn:000060BE                 pop     esi
.text$mn:000060BF                 pop     ebx
.text$mn:000060C0                 mov     esp, ebp
.text$mn:000060C2                 pop     ebp
.text$mn:000060C3                 retn
.text$mn:000060C3 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000060C3 _text$mn        ends
.text$mn:000060C3
.text$x:000060C4 ; ===========================================================================
.text$x:000060C4
.text$x:000060C4 ; Segment type: Pure code
.text$x:000060C4 ; Segment permissions: Read/Execute
.text$x:000060C4 _text$x         segment para public 'CODE' use32
.text$x:000060C4                 assume cs:_text$x
.text$x:000060C4                 ;org 60C4h
.text$x:000060C4 ; COMDAT (pick associative to section at 5FD8)
.text$x:000060C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000060C4
.text$x:000060C4 ; =============== S U B R O U T I N E =======================================
.text$x:000060C4
.text$x:000060C4
.text$x:000060C4 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000060C4                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000060C4
.text$x:000060C4 arg_4           = dword ptr  8
.text$x:000060C4
.text$x:000060C4                 mov     edx, [esp+arg_4]
.text$x:000060C8                 lea     eax, [edx+0Ch]
.text$x:000060CB                 mov     ecx, [edx-18h]
.text$x:000060CE                 xor     ecx, eax
.text$x:000060D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060D5                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000060DA                 jmp     ___CxxFrameHandler3
.text$x:000060DA __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000060DA
.text$x:000060DA ; ---------------------------------------------------------------------------
.text$x:000060DF                 align 10h
.text$x:000060DF _text$x         ends
.text$x:000060DF
.text$mn:000060E0 ; ===========================================================================
.text$mn:000060E0
.text$mn:000060E0 ; Segment type: Pure code
.text$mn:000060E0 ; Segment permissions: Read/Execute
.text$mn:000060E0 _text$mn        segment para public 'CODE' use32
.text$mn:000060E0                 assume cs:_text$mn
.text$mn:000060E0                 ;org 60E0h
.text$mn:000060E0 ; COMDAT (pick any)
.text$mn:000060E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060E0
.text$mn:000060E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000060E0
.text$mn:000060E0 ; Attributes: bp-based frame
.text$mn:000060E0
.text$mn:000060E0 ; struct MatchedCharInserted * __cdecl std::_Uninitialized_move<struct MatchedCharInserted *, struct MatchedCharInserted *, struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>>(struct MatchedCharInserted *, struct MatchedCharInserted *, struct MatchedCharInserted *, struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>> &)
.text$mn:000060E0                 public ??$_Uninitialized_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z
.text$mn:000060E0 ??$_Uninitialized_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z proc near
.text$mn:000060E0                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Umove<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)+25p
.text$mn:000060E0
.text$mn:000060E0 arg_0           = dword ptr  8
.text$mn:000060E0 arg_4           = dword ptr  0Ch
.text$mn:000060E0 arg_8           = dword ptr  10h
.text$mn:000060E0 arg_C           = dword ptr  14h
.text$mn:000060E0
.text$mn:000060E0                 push    ebp
.text$mn:000060E1                 mov     ebp, esp
.text$mn:000060E3                 mov     eax, [ebp+arg_C]
.text$mn:000060E6                 push    eax             ; int
.text$mn:000060E7                 mov     ecx, [ebp+arg_8]
.text$mn:000060EA                 push    ecx
.text$mn:000060EB                 call    ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z ; std::_Unchecked<MatchedCharInserted *>(MatchedCharInserted *)
.text$mn:000060F0                 add     esp, 4
.text$mn:000060F3                 push    eax             ; void *
.text$mn:000060F4                 mov     edx, [ebp+arg_4]
.text$mn:000060F7                 push    edx
.text$mn:000060F8                 call    ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z ; std::_Unchecked<MatchedCharInserted *>(MatchedCharInserted *)
.text$mn:000060FD                 add     esp, 4
.text$mn:00006100                 push    eax             ; int
.text$mn:00006101                 mov     eax, [ebp+arg_0]
.text$mn:00006104                 push    eax
.text$mn:00006105                 call    ??$_Unchecked@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z ; std::_Unchecked<MatchedCharInserted *>(MatchedCharInserted *)
.text$mn:0000610A                 add     esp, 4
.text$mn:0000610D                 push    eax             ; int
.text$mn:0000610E                 call    ??$_Uninit_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z ; std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)
.text$mn:00006113                 add     esp, 10h
.text$mn:00006116                 push    eax
.text$mn:00006117                 lea     ecx, [ebp+arg_8]
.text$mn:0000611A                 push    ecx
.text$mn:0000611B                 call    ??$_Rechecked@PAUMatchedCharInserted@@PAU1@@std@@YAAAPAUMatchedCharInserted@@AAPAU1@PAU1@@Z ; std::_Rechecked<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted * &,MatchedCharInserted *)
.text$mn:00006120                 add     esp, 8
.text$mn:00006123                 mov     eax, [eax]
.text$mn:00006125                 pop     ebp
.text$mn:00006126                 retn
.text$mn:00006126 ??$_Uninitialized_move@PAUMatchedCharInserted@@PAU1@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z endp
.text$mn:00006126
.text$mn:00006126 ; ---------------------------------------------------------------------------
.text$mn:00006127                 align 4
.text$mn:00006127 _text$mn        ends
.text$mn:00006127
.text$mn:00006128 ; ===========================================================================
.text$mn:00006128
.text$mn:00006128 ; Segment type: Pure code
.text$mn:00006128 ; Segment permissions: Read/Execute
.text$mn:00006128 _text$mn        segment para public 'CODE' use32
.text$mn:00006128                 assume cs:_text$mn
.text$mn:00006128                 ;org 6128h
.text$mn:00006128 ; COMDAT (pick any)
.text$mn:00006128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006128
.text$mn:00006128 ; =============== S U B R O U T I N E =======================================
.text$mn:00006128
.text$mn:00006128 ; Attributes: bp-based frame
.text$mn:00006128
.text$mn:00006128 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00006128                 public ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00006128 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00006128                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
.text$mn:00006128
.text$mn:00006128 arg_0           = dword ptr  8
.text$mn:00006128 arg_4           = dword ptr  0Ch
.text$mn:00006128 arg_8           = dword ptr  10h
.text$mn:00006128 arg_C           = dword ptr  14h
.text$mn:00006128
.text$mn:00006128                 push    ebp
.text$mn:00006129                 mov     ebp, esp
.text$mn:0000612B                 mov     eax, [ebp+arg_C]
.text$mn:0000612E                 push    eax             ; int
.text$mn:0000612F                 mov     ecx, [ebp+arg_8]
.text$mn:00006132                 push    ecx
.text$mn:00006133                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006138                 add     esp, 4
.text$mn:0000613B                 push    eax             ; void *
.text$mn:0000613C                 mov     edx, [ebp+arg_4]
.text$mn:0000613F                 push    edx
.text$mn:00006140                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006145                 add     esp, 4
.text$mn:00006148                 push    eax             ; int
.text$mn:00006149                 mov     eax, [ebp+arg_0]
.text$mn:0000614C                 push    eax
.text$mn:0000614D                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006152                 add     esp, 4
.text$mn:00006155                 push    eax             ; int
.text$mn:00006156                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:0000615B                 add     esp, 10h
.text$mn:0000615E                 push    eax
.text$mn:0000615F                 lea     ecx, [ebp+arg_8]
.text$mn:00006162                 push    ecx
.text$mn:00006163                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006168                 add     esp, 8
.text$mn:0000616B                 mov     eax, [eax]
.text$mn:0000616D                 pop     ebp
.text$mn:0000616E                 retn
.text$mn:0000616E ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:0000616E
.text$mn:0000616E ; ---------------------------------------------------------------------------
.text$mn:0000616F                 align 10h
.text$mn:0000616F _text$mn        ends
.text$mn:0000616F
.text$mn:00006170 ; ===========================================================================
.text$mn:00006170
.text$mn:00006170 ; Segment type: Pure code
.text$mn:00006170 ; Segment permissions: Read/Execute
.text$mn:00006170 _text$mn        segment para public 'CODE' use32
.text$mn:00006170                 assume cs:_text$mn
.text$mn:00006170                 ;org 6170h
.text$mn:00006170 ; COMDAT (pick any)
.text$mn:00006170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006170
.text$mn:00006170 ; =============== S U B R O U T I N E =======================================
.text$mn:00006170
.text$mn:00006170 ; Attributes: bp-based frame
.text$mn:00006170
.text$mn:00006170 ; struct MatchedCharInserted * __cdecl std::_Val_type<struct MatchedCharInserted *>(struct MatchedCharInserted *)
.text$mn:00006170                 public ??$_Val_type@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z
.text$mn:00006170 ??$_Val_type@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z proc near
.text$mn:00006170                                         ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)+20p
.text$mn:00006170                 push    ebp
.text$mn:00006171                 mov     ebp, esp
.text$mn:00006173                 xor     eax, eax
.text$mn:00006175                 pop     ebp
.text$mn:00006176                 retn
.text$mn:00006176 ??$_Val_type@PAUMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@PAU1@@Z endp
.text$mn:00006176
.text$mn:00006176 ; ---------------------------------------------------------------------------
.text$mn:00006177                 align 4
.text$mn:00006177 _text$mn        ends
.text$mn:00006177
.text$mn:00006178 ; ===========================================================================
.text$mn:00006178
.text$mn:00006178 ; Segment type: Pure code
.text$mn:00006178 ; Segment permissions: Read/Execute
.text$mn:00006178 _text$mn        segment para public 'CODE' use32
.text$mn:00006178                 assume cs:_text$mn
.text$mn:00006178                 ;org 6178h
.text$mn:00006178 ; COMDAT (pick any)
.text$mn:00006178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006178
.text$mn:00006178 ; =============== S U B R O U T I N E =======================================
.text$mn:00006178
.text$mn:00006178 ; Attributes: bp-based frame
.text$mn:00006178
.text$mn:00006178 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Val_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006178                 public ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00006178 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00006178                                         ; CODE XREF: std::_Insertion_sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+7p
.text$mn:00006178                                         ; std::_Pop_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+7p ...
.text$mn:00006178                 push    ebp
.text$mn:00006179                 mov     ebp, esp
.text$mn:0000617B                 xor     eax, eax
.text$mn:0000617D                 pop     ebp
.text$mn:0000617E                 retn
.text$mn:0000617E ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:0000617E
.text$mn:0000617E ; ---------------------------------------------------------------------------
.text$mn:0000617F                 align 10h
.text$mn:0000617F _text$mn        ends
.text$mn:0000617F
.text$mn:00006180 ; ===========================================================================
.text$mn:00006180
.text$mn:00006180 ; Segment type: Pure code
.text$mn:00006180 ; Segment permissions: Read/Execute
.text$mn:00006180 _text$mn        segment para public 'CODE' use32
.text$mn:00006180                 assume cs:_text$mn
.text$mn:00006180                 ;org 6180h
.text$mn:00006180 ; COMDAT (pick any)
.text$mn:00006180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006180
.text$mn:00006180 ; =============== S U B R O U T I N E =======================================
.text$mn:00006180
.text$mn:00006180 ; Attributes: bp-based frame
.text$mn:00006180
.text$mn:00006180 ; struct MatchedCharInserted const * __cdecl std::addressof<struct MatchedCharInserted const>(struct MatchedCharInserted const &)
.text$mn:00006180                 public ??$addressof@$$CBUMatchedCharInserted@@@std@@YAPBUMatchedCharInserted@@ABU1@@Z
.text$mn:00006180 ??$addressof@$$CBUMatchedCharInserted@@@std@@YAPBUMatchedCharInserted@@ABU1@@Z proc near
.text$mn:00006180                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+Dp
.text$mn:00006180                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+29p
.text$mn:00006180
.text$mn:00006180 arg_0           = dword ptr  8
.text$mn:00006180
.text$mn:00006180                 push    ebp
.text$mn:00006181                 mov     ebp, esp
.text$mn:00006183                 mov     eax, [ebp+arg_0]
.text$mn:00006186                 pop     ebp
.text$mn:00006187                 retn
.text$mn:00006187 ??$addressof@$$CBUMatchedCharInserted@@@std@@YAPBUMatchedCharInserted@@ABU1@@Z endp
.text$mn:00006187
.text$mn:00006187 _text$mn        ends
.text$mn:00006187
.text$mn:00006188 ; ===========================================================================
.text$mn:00006188
.text$mn:00006188 ; Segment type: Pure code
.text$mn:00006188 ; Segment permissions: Read/Execute
.text$mn:00006188 _text$mn        segment para public 'CODE' use32
.text$mn:00006188                 assume cs:_text$mn
.text$mn:00006188                 ;org 6188h
.text$mn:00006188 ; COMDAT (pick any)
.text$mn:00006188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006188
.text$mn:00006188 ; =============== S U B R O U T I N E =======================================
.text$mn:00006188
.text$mn:00006188 ; Attributes: bp-based frame
.text$mn:00006188
.text$mn:00006188 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006188                 public ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
.text$mn:00006188 ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z proc near
.text$mn:00006188                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Dp
.text$mn:00006188                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Dp
.text$mn:00006188
.text$mn:00006188 arg_0           = dword ptr  8
.text$mn:00006188
.text$mn:00006188                 push    ebp
.text$mn:00006189                 mov     ebp, esp
.text$mn:0000618B                 mov     eax, [ebp+arg_0]
.text$mn:0000618E                 pop     ebp
.text$mn:0000618F                 retn
.text$mn:0000618F ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z endp
.text$mn:0000618F
.text$mn:0000618F _text$mn        ends
.text$mn:0000618F
.text$mn:00006190 ; ===========================================================================
.text$mn:00006190
.text$mn:00006190 ; Segment type: Pure code
.text$mn:00006190 ; Segment permissions: Read/Execute
.text$mn:00006190 _text$mn        segment para public 'CODE' use32
.text$mn:00006190                 assume cs:_text$mn
.text$mn:00006190                 ;org 6190h
.text$mn:00006190 ; COMDAT (pick any)
.text$mn:00006190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006190
.text$mn:00006190 ; =============== S U B R O U T I N E =======================================
.text$mn:00006190
.text$mn:00006190 ; Attributes: bp-based frame
.text$mn:00006190
.text$mn:00006190 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00006190                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00006190 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00006190                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00006190                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00006190
.text$mn:00006190 arg_0           = dword ptr  8
.text$mn:00006190
.text$mn:00006190                 push    ebp
.text$mn:00006191                 mov     ebp, esp
.text$mn:00006193                 mov     eax, [ebp+arg_0]
.text$mn:00006196                 pop     ebp
.text$mn:00006197                 retn
.text$mn:00006197 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00006197
.text$mn:00006197 _text$mn        ends
.text$mn:00006197
.text$mn:00006198 ; ===========================================================================
.text$mn:00006198
.text$mn:00006198 ; Segment type: Pure code
.text$mn:00006198 ; Segment permissions: Read/Execute
.text$mn:00006198 _text$mn        segment para public 'CODE' use32
.text$mn:00006198                 assume cs:_text$mn
.text$mn:00006198                 ;org 6198h
.text$mn:00006198 ; COMDAT (pick any)
.text$mn:00006198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006198
.text$mn:00006198 ; =============== S U B R O U T I N E =======================================
.text$mn:00006198
.text$mn:00006198 ; Attributes: bp-based frame
.text$mn:00006198
.text$mn:00006198 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00006198                 public ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00006198 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00006198                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Dp
.text$mn:00006198                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Dp
.text$mn:00006198
.text$mn:00006198 arg_0           = dword ptr  8
.text$mn:00006198
.text$mn:00006198                 push    ebp
.text$mn:00006199                 mov     ebp, esp
.text$mn:0000619B                 mov     eax, [ebp+arg_0]
.text$mn:0000619E                 pop     ebp
.text$mn:0000619F                 retn
.text$mn:0000619F ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:0000619F
.text$mn:0000619F _text$mn        ends
.text$mn:0000619F
.text$mn:000061A0 ; ===========================================================================
.text$mn:000061A0
.text$mn:000061A0 ; Segment type: Pure code
.text$mn:000061A0 ; Segment permissions: Read/Execute
.text$mn:000061A0 _text$mn        segment para public 'CODE' use32
.text$mn:000061A0                 assume cs:_text$mn
.text$mn:000061A0                 ;org 61A0h
.text$mn:000061A0 ; COMDAT (pick any)
.text$mn:000061A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061A0
.text$mn:000061A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000061A0
.text$mn:000061A0 ; Attributes: bp-based frame
.text$mn:000061A0
.text$mn:000061A0 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:000061A0                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:000061A0 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:000061A0                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:000061A0                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:000061A0
.text$mn:000061A0 arg_0           = dword ptr  8
.text$mn:000061A0
.text$mn:000061A0                 push    ebp
.text$mn:000061A1                 mov     ebp, esp
.text$mn:000061A3                 mov     eax, [ebp+arg_0]
.text$mn:000061A6                 pop     ebp
.text$mn:000061A7                 retn
.text$mn:000061A7 ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:000061A7
.text$mn:000061A7 _text$mn        ends
.text$mn:000061A7
.text$mn:000061A8 ; ===========================================================================
.text$mn:000061A8
.text$mn:000061A8 ; Segment type: Pure code
.text$mn:000061A8 ; Segment permissions: Read/Execute
.text$mn:000061A8 _text$mn        segment para public 'CODE' use32
.text$mn:000061A8                 assume cs:_text$mn
.text$mn:000061A8                 ;org 61A8h
.text$mn:000061A8 ; COMDAT (pick any)
.text$mn:000061A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061A8
.text$mn:000061A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000061A8
.text$mn:000061A8 ; Attributes: bp-based frame
.text$mn:000061A8
.text$mn:000061A8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:000061A8                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:000061A8 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:000061A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:000061A8
.text$mn:000061A8 var_70          = byte ptr -70h
.text$mn:000061A8 var_64          = byte ptr -64h
.text$mn:000061A8 var_58          = dword ptr -58h
.text$mn:000061A8 var_54          = dword ptr -54h
.text$mn:000061A8 var_50          = dword ptr -50h
.text$mn:000061A8 var_4C          = dword ptr -4Ch
.text$mn:000061A8 var_48          = dword ptr -48h
.text$mn:000061A8 var_44          = dword ptr -44h
.text$mn:000061A8 var_40          = dword ptr -40h
.text$mn:000061A8 var_3C          = dword ptr -3Ch
.text$mn:000061A8 var_38          = dword ptr -38h
.text$mn:000061A8 var_34          = dword ptr -34h
.text$mn:000061A8 var_30          = dword ptr -30h
.text$mn:000061A8 var_2C          = dword ptr -2Ch
.text$mn:000061A8 var_28          = dword ptr -28h
.text$mn:000061A8 var_24          = dword ptr -24h
.text$mn:000061A8 var_20          = dword ptr -20h
.text$mn:000061A8 var_1C          = dword ptr -1Ch
.text$mn:000061A8 var_18          = dword ptr -18h
.text$mn:000061A8 var_14          = dword ptr -14h
.text$mn:000061A8 var_10          = dword ptr -10h
.text$mn:000061A8 var_C           = dword ptr -0Ch
.text$mn:000061A8 var_4           = dword ptr -4
.text$mn:000061A8 arg_0           = byte ptr  8
.text$mn:000061A8 arg_C           = byte ptr  14h
.text$mn:000061A8
.text$mn:000061A8                 push    ebp
.text$mn:000061A9                 mov     ebp, esp
.text$mn:000061AB                 push    0FFFFFFFFh
.text$mn:000061AD                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:000061B2                 mov     eax, large fs:0
.text$mn:000061B8                 push    eax
.text$mn:000061B9                 sub     esp, 64h
.text$mn:000061BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000061C1                 xor     eax, ebp
.text$mn:000061C3                 push    eax
.text$mn:000061C4                 lea     eax, [ebp+var_C]
.text$mn:000061C7                 mov     large fs:0, eax
.text$mn:000061CD                 mov     [ebp+var_10], ecx
.text$mn:000061D0                 mov     [ebp+var_4], 1
.text$mn:000061D7                 sub     esp, 0Ch
.text$mn:000061DA                 mov     ecx, esp
.text$mn:000061DC                 mov     [ebp+var_3C], esp
.text$mn:000061DF                 lea     eax, [ebp+arg_C]
.text$mn:000061E2                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000061E3                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000061E8                 mov     [ebp+var_14], eax
.text$mn:000061EB                 mov     ecx, [ebp+var_14]
.text$mn:000061EE                 mov     [ebp+var_40], ecx
.text$mn:000061F1                 mov     byte ptr [ebp+var_4], 2
.text$mn:000061F5                 sub     esp, 0Ch
.text$mn:000061F8                 mov     ecx, esp
.text$mn:000061FA                 mov     [ebp+var_44], esp
.text$mn:000061FD                 lea     edx, [ebp+arg_0]
.text$mn:00006200                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006201                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006206                 mov     [ebp+var_18], eax
.text$mn:00006209                 mov     eax, [ebp+var_18]
.text$mn:0000620C                 mov     [ebp+var_48], eax
.text$mn:0000620F                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006213                 lea     ecx, [ebp+var_70]
.text$mn:00006216                 push    ecx
.text$mn:00006217                 mov     ecx, [ebp+var_10]
.text$mn:0000621A                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:0000621F                 mov     [ebp+var_1C], eax
.text$mn:00006222                 mov     edx, [ebp+var_1C]
.text$mn:00006225                 mov     [ebp+var_20], edx
.text$mn:00006228                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000622C                 sub     esp, 0Ch
.text$mn:0000622F                 mov     ecx, esp
.text$mn:00006231                 mov     [ebp+var_4C], esp
.text$mn:00006234                 mov     eax, [ebp+var_20]
.text$mn:00006237                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006238                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000623D                 mov     [ebp+var_24], eax
.text$mn:00006240                 mov     ecx, [ebp+var_24]
.text$mn:00006243                 mov     [ebp+var_50], ecx
.text$mn:00006246                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000624A                 lea     edx, [ebp+var_64]
.text$mn:0000624D                 push    edx
.text$mn:0000624E                 mov     ecx, [ebp+var_10]
.text$mn:00006251                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00006256                 mov     [ebp+var_28], eax
.text$mn:00006259                 mov     eax, [ebp+var_28]
.text$mn:0000625C                 mov     [ebp+var_2C], eax
.text$mn:0000625F                 mov     byte ptr [ebp+var_4], 6
.text$mn:00006263                 sub     esp, 0Ch
.text$mn:00006266                 mov     ecx, esp
.text$mn:00006268                 mov     [ebp+var_54], esp
.text$mn:0000626B                 mov     edx, [ebp+var_2C]
.text$mn:0000626E                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000626F                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006274                 mov     [ebp+var_30], eax
.text$mn:00006277                 mov     eax, [ebp+var_30]
.text$mn:0000627A                 mov     [ebp+var_58], eax
.text$mn:0000627D                 mov     byte ptr [ebp+var_4], 7
.text$mn:00006281                 mov     byte ptr [ebp+var_4], 9
.text$mn:00006285                 mov     ecx, [ebp+var_10]
.text$mn:00006288                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000628D                 mov     [ebp+var_34], eax
.text$mn:00006290                 mov     ecx, [ebp+var_34]
.text$mn:00006293                 mov     [ebp+var_38], ecx
.text$mn:00006296                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000629A                 lea     ecx, [ebp+var_64]
.text$mn:0000629D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000062A2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000062A6                 lea     ecx, [ebp+var_70]
.text$mn:000062A9                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000062AE                 mov     byte ptr [ebp+var_4], 0
.text$mn:000062B2                 lea     ecx, [ebp+arg_0]
.text$mn:000062B5                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000062BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062C1                 lea     ecx, [ebp+arg_C]
.text$mn:000062C4                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000062C9                 mov     eax, [ebp+var_38]
.text$mn:000062CC                 mov     ecx, [ebp+var_C]
.text$mn:000062CF                 mov     large fs:0, ecx
.text$mn:000062D6                 pop     ecx
.text$mn:000062D7                 mov     esp, ebp
.text$mn:000062D9                 pop     ebp
.text$mn:000062DA                 retn    18h
.text$mn:000062DA ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000062DA
.text$mn:000062DA ; ---------------------------------------------------------------------------
.text$mn:000062DD                 align 10h
.text$mn:000062DD _text$mn        ends
.text$mn:000062DD
.text$x:000062E0 ; ===========================================================================
.text$x:000062E0
.text$x:000062E0 ; Segment type: Pure code
.text$x:000062E0 ; Segment permissions: Read/Execute
.text$x:000062E0 _text$x         segment para public 'CODE' use32
.text$x:000062E0                 assume cs:_text$x
.text$x:000062E0                 ;org 62E0h
.text$x:000062E0 ; COMDAT (pick associative to section at 61A8)
.text$x:000062E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062E0
.text$x:000062E0 ; =============== S U B R O U T I N E =======================================
.text$x:000062E0
.text$x:000062E0
.text$x:000062E0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000062E0                                         ; DATA XREF: .xdata$x:00010C78o
.text$x:000062E0                 lea     ecx, [ebp+14h]
.text$x:000062E3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000062E3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000062E3
.text$x:000062E8
.text$x:000062E8 ; =============== S U B R O U T I N E =======================================
.text$x:000062E8
.text$x:000062E8
.text$x:000062E8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:000062E8                                         ; DATA XREF: .xdata$x:00010C80o
.text$x:000062E8                 lea     ecx, [ebp+8]
.text$x:000062EB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000062EB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:000062EB
.text$x:000062F0
.text$x:000062F0 ; =============== S U B R O U T I N E =======================================
.text$x:000062F0
.text$x:000062F0
.text$x:000062F0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:000062F0                                         ; DATA XREF: .xdata$x:00010C88o
.text$x:000062F0                 mov     ecx, [ebp-3Ch]
.text$x:000062F3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000062F3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:000062F3
.text$x:000062F8
.text$x:000062F8 ; =============== S U B R O U T I N E =======================================
.text$x:000062F8
.text$x:000062F8
.text$x:000062F8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:000062F8                                         ; DATA XREF: .xdata$x:00010C90o
.text$x:000062F8                 mov     ecx, [ebp-44h]
.text$x:000062FB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000062FB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:000062FB
.text$x:00006300
.text$x:00006300 ; =============== S U B R O U T I N E =======================================
.text$x:00006300
.text$x:00006300
.text$x:00006300 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:00006300                                         ; DATA XREF: .xdata$x:00010C98o
.text$x:00006300                                         ; .xdata$x:00010CB8o
.text$x:00006300                 lea     ecx, [ebp-70h]
.text$x:00006303                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006303 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:00006303
.text$x:00006308
.text$x:00006308 ; =============== S U B R O U T I N E =======================================
.text$x:00006308
.text$x:00006308
.text$x:00006308 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:00006308                                         ; DATA XREF: .xdata$x:00010CA0o
.text$x:00006308                 mov     ecx, [ebp-4Ch]
.text$x:0000630B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000630B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:0000630B
.text$x:00006310
.text$x:00006310 ; =============== S U B R O U T I N E =======================================
.text$x:00006310
.text$x:00006310
.text$x:00006310 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:00006310                                         ; DATA XREF: .xdata$x:00010CA8o
.text$x:00006310                                         ; .xdata$x:00010CC0o
.text$x:00006310                 lea     ecx, [ebp-64h]
.text$x:00006313                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006313 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:00006313
.text$x:00006318
.text$x:00006318 ; =============== S U B R O U T I N E =======================================
.text$x:00006318
.text$x:00006318
.text$x:00006318 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:00006318                                         ; DATA XREF: .xdata$x:00010CB0o
.text$x:00006318                 mov     ecx, [ebp-54h]
.text$x:0000631B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000631B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:0000631B
.text$x:00006320
.text$x:00006320 ; =============== S U B R O U T I N E =======================================
.text$x:00006320
.text$x:00006320
.text$x:00006320 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00006320                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00006320
.text$x:00006320 arg_4           = dword ptr  8
.text$x:00006320
.text$x:00006320                 mov     edx, [esp+arg_4]
.text$x:00006324                 lea     eax, [edx+0Ch]
.text$x:00006327                 mov     ecx, [edx-68h]
.text$x:0000632A                 xor     ecx, eax
.text$x:0000632C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006331                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:00006336                 jmp     ___CxxFrameHandler3
.text$x:00006336 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:00006336
.text$x:00006336 ; ---------------------------------------------------------------------------
.text$x:0000633B                 align 4
.text$x:0000633B _text$x         ends
.text$x:0000633B
.text$mn:0000633C ; ===========================================================================
.text$mn:0000633C
.text$mn:0000633C ; Segment type: Pure code
.text$mn:0000633C ; Segment permissions: Read/Execute
.text$mn:0000633C _text$mn        segment para public 'CODE' use32
.text$mn:0000633C                 assume cs:_text$mn
.text$mn:0000633C                 ;org 633Ch
.text$mn:0000633C ; COMDAT (pick any)
.text$mn:0000633C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000633C
.text$mn:0000633C ; =============== S U B R O U T I N E =======================================
.text$mn:0000633C
.text$mn:0000633C ; Attributes: bp-based frame
.text$mn:0000633C
.text$mn:0000633C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:0000633C                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:0000633C ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:0000633C                                         ; CODE XREF: $LN19+4Bp
.text$mn:0000633C
.text$mn:0000633C var_4           = dword ptr -4
.text$mn:0000633C arg_0           = dword ptr  8
.text$mn:0000633C arg_4           = dword ptr  0Ch
.text$mn:0000633C
.text$mn:0000633C                 push    ebp
.text$mn:0000633D                 mov     ebp, esp
.text$mn:0000633F                 push    ecx
.text$mn:00006340                 mov     [ebp+var_4], ecx
.text$mn:00006343                 mov     eax, [ebp+arg_4]
.text$mn:00006346                 push    eax
.text$mn:00006347                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000634C                 add     esp, 4
.text$mn:0000634F                 push    eax             ; int
.text$mn:00006350                 mov     ecx, [ebp+arg_0]
.text$mn:00006353                 push    ecx             ; void *
.text$mn:00006354                 mov     edx, [ebp+var_4]
.text$mn:00006357                 push    edx             ; int
.text$mn:00006358                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:0000635D                 add     esp, 0Ch
.text$mn:00006360                 mov     esp, ebp
.text$mn:00006362                 pop     ebp
.text$mn:00006363                 retn    8
.text$mn:00006363 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00006363
.text$mn:00006363 ; ---------------------------------------------------------------------------
.text$mn:00006366                 align 4
.text$mn:00006366 _text$mn        ends
.text$mn:00006366
.text$mn:00006368 ; ===========================================================================
.text$mn:00006368
.text$mn:00006368 ; Segment type: Pure code
.text$mn:00006368 ; Segment permissions: Read/Execute
.text$mn:00006368 _text$mn        segment para public 'CODE' use32
.text$mn:00006368                 assume cs:_text$mn
.text$mn:00006368                 ;org 6368h
.text$mn:00006368 ; COMDAT (pick any)
.text$mn:00006368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006368
.text$mn:00006368 ; =============== S U B R O U T I N E =======================================
.text$mn:00006368
.text$mn:00006368 ; Attributes: bp-based frame
.text$mn:00006368
.text$mn:00006368 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00006368                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00006368 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00006368                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00006368
.text$mn:00006368 var_1C          = dword ptr -1Ch
.text$mn:00006368 var_18          = dword ptr -18h
.text$mn:00006368 var_14          = dword ptr -14h
.text$mn:00006368 var_10          = dword ptr -10h
.text$mn:00006368 var_C           = dword ptr -0Ch
.text$mn:00006368 var_4           = dword ptr -4
.text$mn:00006368 arg_0           = dword ptr  8
.text$mn:00006368 arg_4           = dword ptr  0Ch
.text$mn:00006368
.text$mn:00006368                 push    ebp
.text$mn:00006369                 mov     ebp, esp
.text$mn:0000636B                 push    0FFFFFFFFh
.text$mn:0000636D                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00006372                 mov     eax, large fs:0
.text$mn:00006378                 push    eax
.text$mn:00006379                 sub     esp, 10h
.text$mn:0000637C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006381                 xor     eax, ebp
.text$mn:00006383                 push    eax
.text$mn:00006384                 lea     eax, [ebp+var_C]
.text$mn:00006387                 mov     large fs:0, eax
.text$mn:0000638D                 mov     [ebp+var_18], ecx
.text$mn:00006390                 mov     eax, [ebp+arg_0]
.text$mn:00006393                 push    eax             ; void *
.text$mn:00006394                 push    4               ; unsigned int
.text$mn:00006396                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000639B                 add     esp, 8
.text$mn:0000639E                 mov     [ebp+var_10], eax
.text$mn:000063A1                 mov     [ebp+var_4], 0
.text$mn:000063A8                 cmp     [ebp+var_10], 0
.text$mn:000063AC                 jz      short loc_63C9
.text$mn:000063AE                 mov     ecx, [ebp+arg_4]
.text$mn:000063B1                 push    ecx
.text$mn:000063B2                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000063B7                 add     esp, 4
.text$mn:000063BA                 mov     edx, [ebp+var_10]
.text$mn:000063BD                 mov     eax, [eax]
.text$mn:000063BF                 mov     [edx], eax
.text$mn:000063C1                 mov     ecx, [ebp+var_10]
.text$mn:000063C4                 mov     [ebp+var_14], ecx
.text$mn:000063C7                 jmp     short loc_63D0
.text$mn:000063C9 ; ---------------------------------------------------------------------------
.text$mn:000063C9
.text$mn:000063C9 loc_63C9:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:000063C9                 mov     [ebp+var_14], 0
.text$mn:000063D0
.text$mn:000063D0 loc_63D0:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:000063D0                 mov     edx, [ebp+var_14]
.text$mn:000063D3                 mov     [ebp+var_1C], edx
.text$mn:000063D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000063DD                 mov     ecx, [ebp+var_C]
.text$mn:000063E0                 mov     large fs:0, ecx
.text$mn:000063E7                 pop     ecx
.text$mn:000063E8                 mov     esp, ebp
.text$mn:000063EA                 pop     ebp
.text$mn:000063EB                 retn    8
.text$mn:000063EB ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000063EB
.text$mn:000063EB ; ---------------------------------------------------------------------------
.text$mn:000063EE                 align 10h
.text$mn:000063EE _text$mn        ends
.text$mn:000063EE
.text$x:000063F0 ; ===========================================================================
.text$x:000063F0
.text$x:000063F0 ; Segment type: Pure code
.text$x:000063F0 ; Segment permissions: Read/Execute
.text$x:000063F0 _text$x         segment para public 'CODE' use32
.text$x:000063F0                 assume cs:_text$x
.text$x:000063F0                 ;org 63F0h
.text$x:000063F0 ; COMDAT (pick associative to section at 6368)
.text$x:000063F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000063F0
.text$x:000063F0 ; =============== S U B R O U T I N E =======================================
.text$x:000063F0
.text$x:000063F0
.text$x:000063F0 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:000063F0                                         ; DATA XREF: .xdata$x:00010E3Co
.text$x:000063F0                 mov     eax, [ebp+8]
.text$x:000063F3                 push    eax
.text$x:000063F4                 mov     eax, [ebp-10h]
.text$x:000063F7                 push    eax             ; void *
.text$x:000063F8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000063FD                 add     esp, 8
.text$x:00006400                 retn
.text$x:00006400 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00006400
.text$x:00006401
.text$x:00006401 ; =============== S U B R O U T I N E =======================================
.text$x:00006401
.text$x:00006401
.text$x:00006401 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00006401                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00006401
.text$x:00006401 arg_4           = dword ptr  8
.text$x:00006401
.text$x:00006401                 mov     edx, [esp+arg_4]
.text$x:00006405                 lea     eax, [edx+0Ch]
.text$x:00006408                 mov     ecx, [edx-14h]
.text$x:0000640B                 xor     ecx, eax
.text$x:0000640D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006412                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00006417                 jmp     ___CxxFrameHandler3
.text$x:00006417 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00006417
.text$x:00006417 _text$x         ends
.text$x:00006417
.text$mn:0000641C ; ===========================================================================
.text$mn:0000641C
.text$mn:0000641C ; Segment type: Pure code
.text$mn:0000641C ; Segment permissions: Read/Execute
.text$mn:0000641C _text$mn        segment para public 'CODE' use32
.text$mn:0000641C                 assume cs:_text$mn
.text$mn:0000641C                 ;org 641Ch
.text$mn:0000641C ; COMDAT (pick any)
.text$mn:0000641C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000641C
.text$mn:0000641C ; =============== S U B R O U T I N E =======================================
.text$mn:0000641C
.text$mn:0000641C ; Attributes: bp-based frame
.text$mn:0000641C
.text$mn:0000641C ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:0000641C                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:0000641C ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:0000641C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:0000641C
.text$mn:0000641C arg_0           = dword ptr  8
.text$mn:0000641C arg_4           = dword ptr  0Ch
.text$mn:0000641C arg_8           = dword ptr  10h
.text$mn:0000641C
.text$mn:0000641C                 push    ebp
.text$mn:0000641D                 mov     ebp, esp
.text$mn:0000641F                 mov     eax, [ebp+arg_8]
.text$mn:00006422                 push    eax
.text$mn:00006423                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00006428                 add     esp, 4
.text$mn:0000642B                 push    eax             ; int
.text$mn:0000642C                 mov     ecx, [ebp+arg_4]
.text$mn:0000642F                 push    ecx             ; void *
.text$mn:00006430                 mov     ecx, [ebp+arg_0]
.text$mn:00006433                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00006438                 pop     ebp
.text$mn:00006439                 retn
.text$mn:00006439 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00006439
.text$mn:00006439 ; ---------------------------------------------------------------------------
.text$mn:0000643A                 align 4
.text$mn:0000643A _text$mn        ends
.text$mn:0000643A
.text$mn:0000643C ; ===========================================================================
.text$mn:0000643C
.text$mn:0000643C ; Segment type: Pure code
.text$mn:0000643C ; Segment permissions: Read/Execute
.text$mn:0000643C _text$mn        segment para public 'CODE' use32
.text$mn:0000643C                 assume cs:_text$mn
.text$mn:0000643C                 ;org 643Ch
.text$mn:0000643C ; COMDAT (pick any)
.text$mn:0000643C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000643C
.text$mn:0000643C ; =============== S U B R O U T I N E =======================================
.text$mn:0000643C
.text$mn:0000643C ; Attributes: bp-based frame
.text$mn:0000643C
.text$mn:0000643C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:0000643C                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000643C ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:0000643C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:0000643C                                         ; $LN19_0+4Bp ...
.text$mn:0000643C
.text$mn:0000643C var_4           = dword ptr -4
.text$mn:0000643C arg_0           = dword ptr  8
.text$mn:0000643C arg_4           = dword ptr  0Ch
.text$mn:0000643C
.text$mn:0000643C                 push    ebp
.text$mn:0000643D                 mov     ebp, esp
.text$mn:0000643F                 push    ecx
.text$mn:00006440                 mov     [ebp+var_4], ecx
.text$mn:00006443                 mov     eax, [ebp+arg_4]
.text$mn:00006446                 push    eax
.text$mn:00006447                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000644C                 add     esp, 4
.text$mn:0000644F                 push    eax             ; int
.text$mn:00006450                 mov     ecx, [ebp+arg_0]
.text$mn:00006453                 push    ecx             ; void *
.text$mn:00006454                 mov     edx, [ebp+var_4]
.text$mn:00006457                 push    edx             ; int
.text$mn:00006458                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:0000645D                 add     esp, 0Ch
.text$mn:00006460                 mov     esp, ebp
.text$mn:00006462                 pop     ebp
.text$mn:00006463                 retn    8
.text$mn:00006463 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00006463
.text$mn:00006463 ; ---------------------------------------------------------------------------
.text$mn:00006466                 align 4
.text$mn:00006466 _text$mn        ends
.text$mn:00006466
.text$mn:00006468 ; ===========================================================================
.text$mn:00006468
.text$mn:00006468 ; Segment type: Pure code
.text$mn:00006468 ; Segment permissions: Read/Execute
.text$mn:00006468 _text$mn        segment para public 'CODE' use32
.text$mn:00006468                 assume cs:_text$mn
.text$mn:00006468                 ;org 6468h
.text$mn:00006468 ; COMDAT (pick any)
.text$mn:00006468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006468
.text$mn:00006468 ; =============== S U B R O U T I N E =======================================
.text$mn:00006468
.text$mn:00006468 ; Attributes: bp-based frame
.text$mn:00006468
.text$mn:00006468 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00006468                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00006468 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00006468                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00006468
.text$mn:00006468 var_1C          = dword ptr -1Ch
.text$mn:00006468 var_18          = dword ptr -18h
.text$mn:00006468 var_14          = dword ptr -14h
.text$mn:00006468 var_10          = dword ptr -10h
.text$mn:00006468 var_C           = dword ptr -0Ch
.text$mn:00006468 var_4           = dword ptr -4
.text$mn:00006468 arg_0           = dword ptr  8
.text$mn:00006468 arg_4           = dword ptr  0Ch
.text$mn:00006468
.text$mn:00006468                 push    ebp
.text$mn:00006469                 mov     ebp, esp
.text$mn:0000646B                 push    0FFFFFFFFh
.text$mn:0000646D                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00006472                 mov     eax, large fs:0
.text$mn:00006478                 push    eax
.text$mn:00006479                 sub     esp, 10h
.text$mn:0000647C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006481                 xor     eax, ebp
.text$mn:00006483                 push    eax
.text$mn:00006484                 lea     eax, [ebp+var_C]
.text$mn:00006487                 mov     large fs:0, eax
.text$mn:0000648D                 mov     [ebp+var_18], ecx
.text$mn:00006490                 mov     eax, [ebp+arg_0]
.text$mn:00006493                 push    eax             ; void *
.text$mn:00006494                 push    4               ; unsigned int
.text$mn:00006496                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000649B                 add     esp, 8
.text$mn:0000649E                 mov     [ebp+var_10], eax
.text$mn:000064A1                 mov     [ebp+var_4], 0
.text$mn:000064A8                 cmp     [ebp+var_10], 0
.text$mn:000064AC                 jz      short loc_64C9
.text$mn:000064AE                 mov     ecx, [ebp+arg_4]
.text$mn:000064B1                 push    ecx
.text$mn:000064B2                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000064B7                 add     esp, 4
.text$mn:000064BA                 mov     edx, [ebp+var_10]
.text$mn:000064BD                 mov     eax, [eax]
.text$mn:000064BF                 mov     [edx], eax
.text$mn:000064C1                 mov     ecx, [ebp+var_10]
.text$mn:000064C4                 mov     [ebp+var_14], ecx
.text$mn:000064C7                 jmp     short loc_64D0
.text$mn:000064C9 ; ---------------------------------------------------------------------------
.text$mn:000064C9
.text$mn:000064C9 loc_64C9:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:000064C9                 mov     [ebp+var_14], 0
.text$mn:000064D0
.text$mn:000064D0 loc_64D0:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:000064D0                 mov     edx, [ebp+var_14]
.text$mn:000064D3                 mov     [ebp+var_1C], edx
.text$mn:000064D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000064DD                 mov     ecx, [ebp+var_C]
.text$mn:000064E0                 mov     large fs:0, ecx
.text$mn:000064E7                 pop     ecx
.text$mn:000064E8                 mov     esp, ebp
.text$mn:000064EA                 pop     ebp
.text$mn:000064EB                 retn    8
.text$mn:000064EB ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000064EB
.text$mn:000064EB ; ---------------------------------------------------------------------------
.text$mn:000064EE                 align 10h
.text$mn:000064EE _text$mn        ends
.text$mn:000064EE
.text$x:000064F0 ; ===========================================================================
.text$x:000064F0
.text$x:000064F0 ; Segment type: Pure code
.text$x:000064F0 ; Segment permissions: Read/Execute
.text$x:000064F0 _text$x         segment para public 'CODE' use32
.text$x:000064F0                 assume cs:_text$x
.text$x:000064F0                 ;org 64F0h
.text$x:000064F0 ; COMDAT (pick associative to section at 6468)
.text$x:000064F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000064F0
.text$x:000064F0 ; =============== S U B R O U T I N E =======================================
.text$x:000064F0
.text$x:000064F0
.text$x:000064F0 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:000064F0                                         ; DATA XREF: .xdata$x:00010E68o
.text$x:000064F0                 mov     eax, [ebp+8]
.text$x:000064F3                 push    eax
.text$x:000064F4                 mov     eax, [ebp-10h]
.text$x:000064F7                 push    eax             ; void *
.text$x:000064F8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000064FD                 add     esp, 8
.text$x:00006500                 retn
.text$x:00006500 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00006500
.text$x:00006501
.text$x:00006501 ; =============== S U B R O U T I N E =======================================
.text$x:00006501
.text$x:00006501
.text$x:00006501 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00006501                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00006501
.text$x:00006501 arg_4           = dword ptr  8
.text$x:00006501
.text$x:00006501                 mov     edx, [esp+arg_4]
.text$x:00006505                 lea     eax, [edx+0Ch]
.text$x:00006508                 mov     ecx, [edx-14h]
.text$x:0000650B                 xor     ecx, eax
.text$x:0000650D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006512                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00006517                 jmp     ___CxxFrameHandler3
.text$x:00006517 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00006517
.text$x:00006517 _text$x         ends
.text$x:00006517
.text$mn:0000651C ; ===========================================================================
.text$mn:0000651C
.text$mn:0000651C ; Segment type: Pure code
.text$mn:0000651C ; Segment permissions: Read/Execute
.text$mn:0000651C _text$mn        segment para public 'CODE' use32
.text$mn:0000651C                 assume cs:_text$mn
.text$mn:0000651C                 ;org 651Ch
.text$mn:0000651C ; COMDAT (pick any)
.text$mn:0000651C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000651C
.text$mn:0000651C ; =============== S U B R O U T I N E =======================================
.text$mn:0000651C
.text$mn:0000651C ; Attributes: bp-based frame
.text$mn:0000651C
.text$mn:0000651C ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:0000651C                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:0000651C ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:0000651C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:0000651C
.text$mn:0000651C arg_0           = dword ptr  8
.text$mn:0000651C arg_4           = dword ptr  0Ch
.text$mn:0000651C arg_8           = dword ptr  10h
.text$mn:0000651C
.text$mn:0000651C                 push    ebp
.text$mn:0000651D                 mov     ebp, esp
.text$mn:0000651F                 mov     eax, [ebp+arg_8]
.text$mn:00006522                 push    eax
.text$mn:00006523                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00006528                 add     esp, 4
.text$mn:0000652B                 push    eax             ; int
.text$mn:0000652C                 mov     ecx, [ebp+arg_4]
.text$mn:0000652F                 push    ecx             ; void *
.text$mn:00006530                 mov     ecx, [ebp+arg_0]
.text$mn:00006533                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00006538                 pop     ebp
.text$mn:00006539                 retn
.text$mn:00006539 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00006539
.text$mn:00006539 ; ---------------------------------------------------------------------------
.text$mn:0000653A                 align 4
.text$mn:0000653A _text$mn        ends
.text$mn:0000653A
.text$mn:0000653C ; ===========================================================================
.text$mn:0000653C
.text$mn:0000653C ; Segment type: Pure code
.text$mn:0000653C ; Segment permissions: Read/Execute
.text$mn:0000653C _text$mn        segment para public 'CODE' use32
.text$mn:0000653C                 assume cs:_text$mn
.text$mn:0000653C                 ;org 653Ch
.text$mn:0000653C ; COMDAT (pick any)
.text$mn:0000653C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000653C
.text$mn:0000653C ; =============== S U B R O U T I N E =======================================
.text$mn:0000653C
.text$mn:0000653C ; Attributes: bp-based frame
.text$mn:0000653C
.text$mn:0000653C ; int __stdcall std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(void *, int)
.text$mn:0000653C                 public ??$construct@UMatchedCharInserted@@AAU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z
.text$mn:0000653C ??$construct@UMatchedCharInserted@@AAU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z proc near
.text$mn:0000653C                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+8Dp
.text$mn:0000653C
.text$mn:0000653C var_4           = dword ptr -4
.text$mn:0000653C arg_0           = dword ptr  8
.text$mn:0000653C arg_4           = dword ptr  0Ch
.text$mn:0000653C
.text$mn:0000653C                 push    ebp
.text$mn:0000653D                 mov     ebp, esp
.text$mn:0000653F                 push    ecx
.text$mn:00006540                 mov     [ebp+var_4], ecx
.text$mn:00006543                 mov     eax, [ebp+arg_4]
.text$mn:00006546                 push    eax
.text$mn:00006547                 call    ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted &>(MatchedCharInserted &)
.text$mn:0000654C                 add     esp, 4
.text$mn:0000654F                 push    eax             ; int
.text$mn:00006550                 mov     ecx, [ebp+arg_0]
.text$mn:00006553                 push    ecx             ; void *
.text$mn:00006554                 mov     edx, [ebp+var_4]
.text$mn:00006557                 push    edx             ; int
.text$mn:00006558                 call    ??$construct@UMatchedCharInserted@@AAU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@AAU3@@Z ; std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted &)
.text$mn:0000655D                 add     esp, 0Ch
.text$mn:00006560                 mov     esp, ebp
.text$mn:00006562                 pop     ebp
.text$mn:00006563                 retn    8
.text$mn:00006563 ??$construct@UMatchedCharInserted@@AAU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z endp
.text$mn:00006563
.text$mn:00006563 ; ---------------------------------------------------------------------------
.text$mn:00006566                 align 4
.text$mn:00006566 _text$mn        ends
.text$mn:00006566
.text$mn:00006568 ; ===========================================================================
.text$mn:00006568
.text$mn:00006568 ; Segment type: Pure code
.text$mn:00006568 ; Segment permissions: Read/Execute
.text$mn:00006568 _text$mn        segment para public 'CODE' use32
.text$mn:00006568                 assume cs:_text$mn
.text$mn:00006568                 ;org 6568h
.text$mn:00006568 ; COMDAT (pick any)
.text$mn:00006568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006568
.text$mn:00006568 ; =============== S U B R O U T I N E =======================================
.text$mn:00006568
.text$mn:00006568 ; Attributes: bp-based frame
.text$mn:00006568
.text$mn:00006568 ; int __stdcall std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(void *, int)
.text$mn:00006568                 public ??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z
.text$mn:00006568 ??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z proc near
.text$mn:00006568                                         ; CODE XREF: std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted &)+17p
.text$mn:00006568
.text$mn:00006568 var_1C          = dword ptr -1Ch
.text$mn:00006568 var_18          = dword ptr -18h
.text$mn:00006568 var_14          = dword ptr -14h
.text$mn:00006568 var_10          = dword ptr -10h
.text$mn:00006568 var_C           = dword ptr -0Ch
.text$mn:00006568 var_4           = dword ptr -4
.text$mn:00006568 arg_0           = dword ptr  8
.text$mn:00006568 arg_4           = dword ptr  0Ch
.text$mn:00006568
.text$mn:00006568                 push    ebp
.text$mn:00006569                 mov     ebp, esp
.text$mn:0000656B                 push    0FFFFFFFFh
.text$mn:0000656D                 push    offset __ehhandler$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z
.text$mn:00006572                 mov     eax, large fs:0
.text$mn:00006578                 push    eax
.text$mn:00006579                 sub     esp, 10h
.text$mn:0000657C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006581                 xor     eax, ebp
.text$mn:00006583                 push    eax
.text$mn:00006584                 lea     eax, [ebp+var_C]
.text$mn:00006587                 mov     large fs:0, eax
.text$mn:0000658D                 mov     [ebp+var_18], ecx
.text$mn:00006590                 mov     eax, [ebp+arg_0]
.text$mn:00006593                 push    eax             ; void *
.text$mn:00006594                 push    8               ; unsigned int
.text$mn:00006596                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000659B                 add     esp, 8
.text$mn:0000659E                 mov     [ebp+var_10], eax
.text$mn:000065A1                 mov     [ebp+var_4], 0
.text$mn:000065A8                 cmp     [ebp+var_10], 0
.text$mn:000065AC                 jz      short loc_65CF
.text$mn:000065AE                 mov     ecx, [ebp+arg_4]
.text$mn:000065B1                 push    ecx
.text$mn:000065B2                 call    ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted &>(MatchedCharInserted &)
.text$mn:000065B7                 add     esp, 4
.text$mn:000065BA                 mov     edx, [eax]
.text$mn:000065BC                 mov     eax, [eax+4]
.text$mn:000065BF                 mov     ecx, [ebp+var_10]
.text$mn:000065C2                 mov     [ecx], edx
.text$mn:000065C4                 mov     [ecx+4], eax
.text$mn:000065C7                 mov     edx, [ebp+var_10]
.text$mn:000065CA                 mov     [ebp+var_14], edx
.text$mn:000065CD                 jmp     short loc_65D6
.text$mn:000065CF ; ---------------------------------------------------------------------------
.text$mn:000065CF
.text$mn:000065CF loc_65CF:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+44j
.text$mn:000065CF                 mov     [ebp+var_14], 0
.text$mn:000065D6
.text$mn:000065D6 loc_65D6:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+65j
.text$mn:000065D6                 mov     eax, [ebp+var_14]
.text$mn:000065D9                 mov     [ebp+var_1C], eax
.text$mn:000065DC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000065E3                 mov     ecx, [ebp+var_C]
.text$mn:000065E6                 mov     large fs:0, ecx
.text$mn:000065ED                 pop     ecx
.text$mn:000065EE                 mov     esp, ebp
.text$mn:000065F0                 pop     ebp
.text$mn:000065F1                 retn    8
.text$mn:000065F1 ??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z endp
.text$mn:000065F1
.text$mn:000065F1 _text$mn        ends
.text$mn:000065F1
.text$x:000065F4 ; ===========================================================================
.text$x:000065F4
.text$x:000065F4 ; Segment type: Pure code
.text$x:000065F4 ; Segment permissions: Read/Execute
.text$x:000065F4 _text$x         segment para public 'CODE' use32
.text$x:000065F4                 assume cs:_text$x
.text$x:000065F4                 ;org 65F4h
.text$x:000065F4 ; COMDAT (pick associative to section at 6568)
.text$x:000065F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000065F4
.text$x:000065F4 ; =============== S U B R O U T I N E =======================================
.text$x:000065F4
.text$x:000065F4
.text$x:000065F4 __unwindfunclet$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z$0 proc near
.text$x:000065F4                                         ; DATA XREF: .xdata$x:00010E10o
.text$x:000065F4                 mov     eax, [ebp+8]
.text$x:000065F7                 push    eax
.text$x:000065F8                 mov     eax, [ebp-10h]
.text$x:000065FB                 push    eax             ; void *
.text$x:000065FC                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006601                 add     esp, 8
.text$x:00006604                 retn
.text$x:00006604 __unwindfunclet$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z$0 endp
.text$x:00006604
.text$x:00006605
.text$x:00006605 ; =============== S U B R O U T I N E =======================================
.text$x:00006605
.text$x:00006605
.text$x:00006605 __ehhandler$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z proc near
.text$x:00006605                                         ; DATA XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+5o
.text$x:00006605
.text$x:00006605 arg_4           = dword ptr  8
.text$x:00006605
.text$x:00006605                 mov     edx, [esp+arg_4]
.text$x:00006609                 lea     eax, [edx+0Ch]
.text$x:0000660C                 mov     ecx, [edx-14h]
.text$x:0000660F                 xor     ecx, eax
.text$x:00006611                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006616                 mov     eax, offset __ehfuncinfo$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z
.text$x:0000661B                 jmp     ___CxxFrameHandler3
.text$x:0000661B __ehhandler$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z endp
.text$x:0000661B
.text$x:0000661B _text$x         ends
.text$x:0000661B
.text$mn:00006620 ; ===========================================================================
.text$mn:00006620
.text$mn:00006620 ; Segment type: Pure code
.text$mn:00006620 ; Segment permissions: Read/Execute
.text$mn:00006620 _text$mn        segment para public 'CODE' use32
.text$mn:00006620                 assume cs:_text$mn
.text$mn:00006620                 ;org 6620h
.text$mn:00006620 ; COMDAT (pick any)
.text$mn:00006620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006620
.text$mn:00006620 ; =============== S U B R O U T I N E =======================================
.text$mn:00006620
.text$mn:00006620 ; Attributes: bp-based frame
.text$mn:00006620
.text$mn:00006620 ; int __cdecl std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(int, void *, int)
.text$mn:00006620                 public ??$construct@UMatchedCharInserted@@AAU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@AAU3@@Z
.text$mn:00006620 ??$construct@UMatchedCharInserted@@AAU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@AAU3@@Z proc near
.text$mn:00006620                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+1Cp
.text$mn:00006620
.text$mn:00006620 arg_0           = dword ptr  8
.text$mn:00006620 arg_4           = dword ptr  0Ch
.text$mn:00006620 arg_8           = dword ptr  10h
.text$mn:00006620
.text$mn:00006620                 push    ebp
.text$mn:00006621                 mov     ebp, esp
.text$mn:00006623                 mov     eax, [ebp+arg_8]
.text$mn:00006626                 push    eax
.text$mn:00006627                 call    ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted &>(MatchedCharInserted &)
.text$mn:0000662C                 add     esp, 4
.text$mn:0000662F                 push    eax             ; int
.text$mn:00006630                 mov     ecx, [ebp+arg_4]
.text$mn:00006633                 push    ecx             ; void *
.text$mn:00006634                 mov     ecx, [ebp+arg_0]
.text$mn:00006637                 call    ??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z ; std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)
.text$mn:0000663C                 pop     ebp
.text$mn:0000663D                 retn
.text$mn:0000663D ??$construct@UMatchedCharInserted@@AAU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@AAU3@@Z endp
.text$mn:0000663D
.text$mn:0000663D ; ---------------------------------------------------------------------------
.text$mn:0000663E                 align 10h
.text$mn:0000663E _text$mn        ends
.text$mn:0000663E
.text$mn:00006640 ; ===========================================================================
.text$mn:00006640
.text$mn:00006640 ; Segment type: Pure code
.text$mn:00006640 ; Segment permissions: Read/Execute
.text$mn:00006640 _text$mn        segment para public 'CODE' use32
.text$mn:00006640                 assume cs:_text$mn
.text$mn:00006640                 ;org 6640h
.text$mn:00006640 ; COMDAT (pick any)
.text$mn:00006640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006640
.text$mn:00006640 ; =============== S U B R O U T I N E =======================================
.text$mn:00006640
.text$mn:00006640 ; Attributes: bp-based frame
.text$mn:00006640
.text$mn:00006640 ; int __stdcall std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(void *, int)
.text$mn:00006640                 public ??$construct@UMatchedCharInserted@@ABU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@ABU2@@Z
.text$mn:00006640 ??$construct@UMatchedCharInserted@@ABU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@ABU2@@Z proc near
.text$mn:00006640                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+EAp
.text$mn:00006640
.text$mn:00006640 var_4           = dword ptr -4
.text$mn:00006640 arg_0           = dword ptr  8
.text$mn:00006640 arg_4           = dword ptr  0Ch
.text$mn:00006640
.text$mn:00006640                 push    ebp
.text$mn:00006641                 mov     ebp, esp
.text$mn:00006643                 push    ecx
.text$mn:00006644                 mov     [ebp+var_4], ecx
.text$mn:00006647                 mov     eax, [ebp+arg_4]
.text$mn:0000664A                 push    eax
.text$mn:0000664B                 call    ??$forward@ABUMatchedCharInserted@@@std@@YAABUMatchedCharInserted@@ABU1@@Z ; std::forward<MatchedCharInserted const &>(MatchedCharInserted const &)
.text$mn:00006650                 add     esp, 4
.text$mn:00006653                 push    eax             ; int
.text$mn:00006654                 mov     ecx, [ebp+arg_0]
.text$mn:00006657                 push    ecx             ; void *
.text$mn:00006658                 mov     edx, [ebp+var_4]
.text$mn:0000665B                 push    edx             ; int
.text$mn:0000665C                 call    ??$construct@UMatchedCharInserted@@ABU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@ABU3@@Z ; std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted const &)
.text$mn:00006661                 add     esp, 0Ch
.text$mn:00006664                 mov     esp, ebp
.text$mn:00006666                 pop     ebp
.text$mn:00006667                 retn    8
.text$mn:00006667 ??$construct@UMatchedCharInserted@@ABU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@ABU2@@Z endp
.text$mn:00006667
.text$mn:00006667 ; ---------------------------------------------------------------------------
.text$mn:0000666A                 align 4
.text$mn:0000666A _text$mn        ends
.text$mn:0000666A
.text$mn:0000666C ; ===========================================================================
.text$mn:0000666C
.text$mn:0000666C ; Segment type: Pure code
.text$mn:0000666C ; Segment permissions: Read/Execute
.text$mn:0000666C _text$mn        segment para public 'CODE' use32
.text$mn:0000666C                 assume cs:_text$mn
.text$mn:0000666C                 ;org 666Ch
.text$mn:0000666C ; COMDAT (pick any)
.text$mn:0000666C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000666C
.text$mn:0000666C ; =============== S U B R O U T I N E =======================================
.text$mn:0000666C
.text$mn:0000666C ; Attributes: bp-based frame
.text$mn:0000666C
.text$mn:0000666C ; int __cdecl std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(int, void *, int)
.text$mn:0000666C                 public ??$construct@UMatchedCharInserted@@ABU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@ABU3@@Z
.text$mn:0000666C ??$construct@UMatchedCharInserted@@ABU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@ABU3@@Z proc near
.text$mn:0000666C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(MatchedCharInserted *,MatchedCharInserted const &)+1Cp
.text$mn:0000666C
.text$mn:0000666C arg_0           = dword ptr  8
.text$mn:0000666C arg_4           = dword ptr  0Ch
.text$mn:0000666C arg_8           = dword ptr  10h
.text$mn:0000666C
.text$mn:0000666C                 push    ebp
.text$mn:0000666D                 mov     ebp, esp
.text$mn:0000666F                 mov     eax, [ebp+arg_8]
.text$mn:00006672                 push    eax
.text$mn:00006673                 call    ??$forward@ABUMatchedCharInserted@@@std@@YAABUMatchedCharInserted@@ABU1@@Z ; std::forward<MatchedCharInserted const &>(MatchedCharInserted const &)
.text$mn:00006678                 add     esp, 4
.text$mn:0000667B                 push    eax             ; int
.text$mn:0000667C                 mov     ecx, [ebp+arg_4]
.text$mn:0000667F                 push    ecx             ; void *
.text$mn:00006680                 mov     ecx, [ebp+arg_0]
.text$mn:00006683                 call    ?construct@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@ABU3@@Z ; std::allocator<MatchedCharInserted>::construct(MatchedCharInserted *,MatchedCharInserted const &)
.text$mn:00006688                 pop     ebp
.text$mn:00006689                 retn
.text$mn:00006689 ??$construct@UMatchedCharInserted@@ABU1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@ABU3@@Z endp
.text$mn:00006689
.text$mn:00006689 ; ---------------------------------------------------------------------------
.text$mn:0000668A                 align 4
.text$mn:0000668A _text$mn        ends
.text$mn:0000668A
.text$mn:0000668C ; ===========================================================================
.text$mn:0000668C
.text$mn:0000668C ; Segment type: Pure code
.text$mn:0000668C ; Segment permissions: Read/Execute
.text$mn:0000668C _text$mn        segment para public 'CODE' use32
.text$mn:0000668C                 assume cs:_text$mn
.text$mn:0000668C                 ;org 668Ch
.text$mn:0000668C ; COMDAT (pick any)
.text$mn:0000668C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000668C
.text$mn:0000668C ; =============== S U B R O U T I N E =======================================
.text$mn:0000668C
.text$mn:0000668C ; Attributes: bp-based frame
.text$mn:0000668C
.text$mn:0000668C ; int __stdcall std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(void *, int)
.text$mn:0000668C                 public ??$construct@UMatchedCharInserted@@U1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z
.text$mn:0000668C ??$construct@UMatchedCharInserted@@U1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z proc near
.text$mn:0000668C                                         ; CODE XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:0000668C
.text$mn:0000668C var_4           = dword ptr -4
.text$mn:0000668C arg_0           = dword ptr  8
.text$mn:0000668C arg_4           = dword ptr  0Ch
.text$mn:0000668C
.text$mn:0000668C                 push    ebp
.text$mn:0000668D                 mov     ebp, esp
.text$mn:0000668F                 push    ecx
.text$mn:00006690                 mov     [ebp+var_4], ecx
.text$mn:00006693                 mov     eax, [ebp+arg_4]
.text$mn:00006696                 push    eax
.text$mn:00006697                 call    ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted>(MatchedCharInserted &)
.text$mn:0000669C                 add     esp, 4
.text$mn:0000669F                 push    eax             ; int
.text$mn:000066A0                 mov     ecx, [ebp+arg_0]
.text$mn:000066A3                 push    ecx             ; void *
.text$mn:000066A4                 mov     edx, [ebp+var_4]
.text$mn:000066A7                 push    edx             ; int
.text$mn:000066A8                 call    ??$construct@UMatchedCharInserted@@U1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@$$QAU3@@Z ; std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted &&)
.text$mn:000066AD                 add     esp, 0Ch
.text$mn:000066B0                 mov     esp, ebp
.text$mn:000066B2                 pop     ebp
.text$mn:000066B3                 retn    8
.text$mn:000066B3 ??$construct@UMatchedCharInserted@@U1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z endp
.text$mn:000066B3
.text$mn:000066B3 ; ---------------------------------------------------------------------------
.text$mn:000066B6                 align 4
.text$mn:000066B6 _text$mn        ends
.text$mn:000066B6
.text$mn:000066B8 ; ===========================================================================
.text$mn:000066B8
.text$mn:000066B8 ; Segment type: Pure code
.text$mn:000066B8 ; Segment permissions: Read/Execute
.text$mn:000066B8 _text$mn        segment para public 'CODE' use32
.text$mn:000066B8                 assume cs:_text$mn
.text$mn:000066B8                 ;org 66B8h
.text$mn:000066B8 ; COMDAT (pick any)
.text$mn:000066B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066B8
.text$mn:000066B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066B8
.text$mn:000066B8 ; Attributes: bp-based frame
.text$mn:000066B8
.text$mn:000066B8 ; int __stdcall std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(void *, int)
.text$mn:000066B8                 public ??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z
.text$mn:000066B8 ??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z proc near
.text$mn:000066B8                                         ; CODE XREF: std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted &&)+17p
.text$mn:000066B8
.text$mn:000066B8 var_1C          = dword ptr -1Ch
.text$mn:000066B8 var_18          = dword ptr -18h
.text$mn:000066B8 var_14          = dword ptr -14h
.text$mn:000066B8 var_10          = dword ptr -10h
.text$mn:000066B8 var_C           = dword ptr -0Ch
.text$mn:000066B8 var_4           = dword ptr -4
.text$mn:000066B8 arg_0           = dword ptr  8
.text$mn:000066B8 arg_4           = dword ptr  0Ch
.text$mn:000066B8
.text$mn:000066B8                 push    ebp
.text$mn:000066B9                 mov     ebp, esp
.text$mn:000066BB                 push    0FFFFFFFFh
.text$mn:000066BD                 push    offset __ehhandler$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z
.text$mn:000066C2                 mov     eax, large fs:0
.text$mn:000066C8                 push    eax
.text$mn:000066C9                 sub     esp, 10h
.text$mn:000066CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000066D1                 xor     eax, ebp
.text$mn:000066D3                 push    eax
.text$mn:000066D4                 lea     eax, [ebp+var_C]
.text$mn:000066D7                 mov     large fs:0, eax
.text$mn:000066DD                 mov     [ebp+var_18], ecx
.text$mn:000066E0                 mov     eax, [ebp+arg_0]
.text$mn:000066E3                 push    eax             ; void *
.text$mn:000066E4                 push    8               ; unsigned int
.text$mn:000066E6                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000066EB                 add     esp, 8
.text$mn:000066EE                 mov     [ebp+var_10], eax
.text$mn:000066F1                 mov     [ebp+var_4], 0
.text$mn:000066F8                 cmp     [ebp+var_10], 0
.text$mn:000066FC                 jz      short loc_671F
.text$mn:000066FE                 mov     ecx, [ebp+arg_4]
.text$mn:00006701                 push    ecx
.text$mn:00006702                 call    ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted>(MatchedCharInserted &)
.text$mn:00006707                 add     esp, 4
.text$mn:0000670A                 mov     edx, [eax]
.text$mn:0000670C                 mov     eax, [eax+4]
.text$mn:0000670F                 mov     ecx, [ebp+var_10]
.text$mn:00006712                 mov     [ecx], edx
.text$mn:00006714                 mov     [ecx+4], eax
.text$mn:00006717                 mov     edx, [ebp+var_10]
.text$mn:0000671A                 mov     [ebp+var_14], edx
.text$mn:0000671D                 jmp     short loc_6726
.text$mn:0000671F ; ---------------------------------------------------------------------------
.text$mn:0000671F
.text$mn:0000671F loc_671F:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+44j
.text$mn:0000671F                 mov     [ebp+var_14], 0
.text$mn:00006726
.text$mn:00006726 loc_6726:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+65j
.text$mn:00006726                 mov     eax, [ebp+var_14]
.text$mn:00006729                 mov     [ebp+var_1C], eax
.text$mn:0000672C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006733                 mov     ecx, [ebp+var_C]
.text$mn:00006736                 mov     large fs:0, ecx
.text$mn:0000673D                 pop     ecx
.text$mn:0000673E                 mov     esp, ebp
.text$mn:00006740                 pop     ebp
.text$mn:00006741                 retn    8
.text$mn:00006741 ??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z endp
.text$mn:00006741
.text$mn:00006741 _text$mn        ends
.text$mn:00006741
.text$x:00006744 ; ===========================================================================
.text$x:00006744
.text$x:00006744 ; Segment type: Pure code
.text$x:00006744 ; Segment permissions: Read/Execute
.text$x:00006744 _text$x         segment para public 'CODE' use32
.text$x:00006744                 assume cs:_text$x
.text$x:00006744                 ;org 6744h
.text$x:00006744 ; COMDAT (pick associative to section at 66B8)
.text$x:00006744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006744
.text$x:00006744 ; =============== S U B R O U T I N E =======================================
.text$x:00006744
.text$x:00006744
.text$x:00006744 __unwindfunclet$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z$0 proc near
.text$x:00006744                                         ; DATA XREF: .xdata$x:00010FFCo
.text$x:00006744                 mov     eax, [ebp+8]
.text$x:00006747                 push    eax
.text$x:00006748                 mov     eax, [ebp-10h]
.text$x:0000674B                 push    eax             ; void *
.text$x:0000674C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006751                 add     esp, 8
.text$x:00006754                 retn
.text$x:00006754 __unwindfunclet$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z$0 endp
.text$x:00006754
.text$x:00006755
.text$x:00006755 ; =============== S U B R O U T I N E =======================================
.text$x:00006755
.text$x:00006755
.text$x:00006755 __ehhandler$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z proc near
.text$x:00006755                                         ; DATA XREF: std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+5o
.text$x:00006755
.text$x:00006755 arg_4           = dword ptr  8
.text$x:00006755
.text$x:00006755                 mov     edx, [esp+arg_4]
.text$x:00006759                 lea     eax, [edx+0Ch]
.text$x:0000675C                 mov     ecx, [edx-14h]
.text$x:0000675F                 xor     ecx, eax
.text$x:00006761                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006766                 mov     eax, offset __ehfuncinfo$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z
.text$x:0000676B                 jmp     ___CxxFrameHandler3
.text$x:0000676B __ehhandler$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z endp
.text$x:0000676B
.text$x:0000676B _text$x         ends
.text$x:0000676B
.text$mn:00006770 ; ===========================================================================
.text$mn:00006770
.text$mn:00006770 ; Segment type: Pure code
.text$mn:00006770 ; Segment permissions: Read/Execute
.text$mn:00006770 _text$mn        segment para public 'CODE' use32
.text$mn:00006770                 assume cs:_text$mn
.text$mn:00006770                 ;org 6770h
.text$mn:00006770 ; COMDAT (pick any)
.text$mn:00006770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006770
.text$mn:00006770 ; =============== S U B R O U T I N E =======================================
.text$mn:00006770
.text$mn:00006770 ; Attributes: bp-based frame
.text$mn:00006770
.text$mn:00006770 ; int __cdecl std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(int, void *, int)
.text$mn:00006770                 public ??$construct@UMatchedCharInserted@@U1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@$$QAU3@@Z
.text$mn:00006770 ??$construct@UMatchedCharInserted@@U1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@$$QAU3@@Z proc near
.text$mn:00006770                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+1Cp
.text$mn:00006770
.text$mn:00006770 arg_0           = dword ptr  8
.text$mn:00006770 arg_4           = dword ptr  0Ch
.text$mn:00006770 arg_8           = dword ptr  10h
.text$mn:00006770
.text$mn:00006770                 push    ebp
.text$mn:00006771                 mov     ebp, esp
.text$mn:00006773                 mov     eax, [ebp+arg_8]
.text$mn:00006776                 push    eax
.text$mn:00006777                 call    ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z ; std::forward<MatchedCharInserted>(MatchedCharInserted &)
.text$mn:0000677C                 add     esp, 4
.text$mn:0000677F                 push    eax             ; int
.text$mn:00006780                 mov     ecx, [ebp+arg_4]
.text$mn:00006783                 push    ecx             ; void *
.text$mn:00006784                 mov     ecx, [ebp+arg_0]
.text$mn:00006787                 call    ??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z ; std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)
.text$mn:0000678C                 pop     ebp
.text$mn:0000678D                 retn
.text$mn:0000678D ??$construct@UMatchedCharInserted@@U1@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@$$QAU3@@Z endp
.text$mn:0000678D
.text$mn:0000678D ; ---------------------------------------------------------------------------
.text$mn:0000678E                 align 10h
.text$mn:0000678E _text$mn        ends
.text$mn:0000678E
.text$mn:00006790 ; ===========================================================================
.text$mn:00006790
.text$mn:00006790 ; Segment type: Pure code
.text$mn:00006790 ; Segment permissions: Read/Execute
.text$mn:00006790 _text$mn        segment para public 'CODE' use32
.text$mn:00006790                 assume cs:_text$mn
.text$mn:00006790                 ;org 6790h
.text$mn:00006790 ; COMDAT (pick any)
.text$mn:00006790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006790
.text$mn:00006790 ; =============== S U B R O U T I N E =======================================
.text$mn:00006790
.text$mn:00006790 ; Attributes: bp-based frame
.text$mn:00006790
.text$mn:00006790 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00006790                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00006790 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00006790                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+32p
.text$mn:00006790
.text$mn:00006790 var_4           = dword ptr -4
.text$mn:00006790 arg_0           = dword ptr  8
.text$mn:00006790 arg_4           = dword ptr  0Ch
.text$mn:00006790
.text$mn:00006790                 push    ebp
.text$mn:00006791                 mov     ebp, esp
.text$mn:00006793                 push    ecx
.text$mn:00006794                 mov     [ebp+var_4], ecx
.text$mn:00006797                 mov     eax, [ebp+arg_4]
.text$mn:0000679A                 push    eax
.text$mn:0000679B                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000067A0                 add     esp, 4
.text$mn:000067A3                 push    eax             ; int
.text$mn:000067A4                 mov     ecx, [ebp+arg_0]
.text$mn:000067A7                 push    ecx             ; void *
.text$mn:000067A8                 mov     edx, [ebp+var_4]
.text$mn:000067AB                 push    edx             ; int
.text$mn:000067AC                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000067B1                 add     esp, 0Ch
.text$mn:000067B4                 mov     esp, ebp
.text$mn:000067B6                 pop     ebp
.text$mn:000067B7                 retn    8
.text$mn:000067B7 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:000067B7
.text$mn:000067B7 ; ---------------------------------------------------------------------------
.text$mn:000067BA                 align 4
.text$mn:000067BA _text$mn        ends
.text$mn:000067BA
.text$mn:000067BC ; ===========================================================================
.text$mn:000067BC
.text$mn:000067BC ; Segment type: Pure code
.text$mn:000067BC ; Segment permissions: Read/Execute
.text$mn:000067BC _text$mn        segment para public 'CODE' use32
.text$mn:000067BC                 assume cs:_text$mn
.text$mn:000067BC                 ;org 67BCh
.text$mn:000067BC ; COMDAT (pick any)
.text$mn:000067BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067BC
.text$mn:000067BC ; =============== S U B R O U T I N E =======================================
.text$mn:000067BC
.text$mn:000067BC ; Attributes: bp-based frame
.text$mn:000067BC
.text$mn:000067BC ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:000067BC                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000067BC ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:000067BC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:000067BC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:000067BC
.text$mn:000067BC var_1C          = dword ptr -1Ch
.text$mn:000067BC var_18          = dword ptr -18h
.text$mn:000067BC var_14          = dword ptr -14h
.text$mn:000067BC var_10          = dword ptr -10h
.text$mn:000067BC var_C           = dword ptr -0Ch
.text$mn:000067BC var_4           = dword ptr -4
.text$mn:000067BC arg_0           = dword ptr  8
.text$mn:000067BC arg_4           = dword ptr  0Ch
.text$mn:000067BC
.text$mn:000067BC                 push    ebp
.text$mn:000067BD                 mov     ebp, esp
.text$mn:000067BF                 push    0FFFFFFFFh
.text$mn:000067C1                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000067C6                 mov     eax, large fs:0
.text$mn:000067CC                 push    eax
.text$mn:000067CD                 sub     esp, 10h
.text$mn:000067D0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067D5                 xor     eax, ebp
.text$mn:000067D7                 push    eax
.text$mn:000067D8                 lea     eax, [ebp+var_C]
.text$mn:000067DB                 mov     large fs:0, eax
.text$mn:000067E1                 mov     [ebp+var_18], ecx
.text$mn:000067E4                 mov     eax, [ebp+arg_0]
.text$mn:000067E7                 push    eax             ; void *
.text$mn:000067E8                 push    8               ; unsigned int
.text$mn:000067EA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000067EF                 add     esp, 8
.text$mn:000067F2                 mov     [ebp+var_10], eax
.text$mn:000067F5                 mov     [ebp+var_4], 0
.text$mn:000067FC                 cmp     [ebp+var_10], 0
.text$mn:00006800                 jz      short loc_6823
.text$mn:00006802                 mov     ecx, [ebp+arg_4]
.text$mn:00006805                 push    ecx
.text$mn:00006806                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:0000680B                 add     esp, 4
.text$mn:0000680E                 mov     edx, [eax]
.text$mn:00006810                 mov     eax, [eax+4]
.text$mn:00006813                 mov     ecx, [ebp+var_10]
.text$mn:00006816                 mov     [ecx], edx
.text$mn:00006818                 mov     [ecx+4], eax
.text$mn:0000681B                 mov     edx, [ebp+var_10]
.text$mn:0000681E                 mov     [ebp+var_14], edx
.text$mn:00006821                 jmp     short loc_682A
.text$mn:00006823 ; ---------------------------------------------------------------------------
.text$mn:00006823
.text$mn:00006823 loc_6823:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00006823                 mov     [ebp+var_14], 0
.text$mn:0000682A
.text$mn:0000682A loc_682A:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:0000682A                 mov     eax, [ebp+var_14]
.text$mn:0000682D                 mov     [ebp+var_1C], eax
.text$mn:00006830                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006837                 mov     ecx, [ebp+var_C]
.text$mn:0000683A                 mov     large fs:0, ecx
.text$mn:00006841                 pop     ecx
.text$mn:00006842                 mov     esp, ebp
.text$mn:00006844                 pop     ebp
.text$mn:00006845                 retn    8
.text$mn:00006845 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00006845
.text$mn:00006845 _text$mn        ends
.text$mn:00006845
.text$x:00006848 ; ===========================================================================
.text$x:00006848
.text$x:00006848 ; Segment type: Pure code
.text$x:00006848 ; Segment permissions: Read/Execute
.text$x:00006848 _text$x         segment para public 'CODE' use32
.text$x:00006848                 assume cs:_text$x
.text$x:00006848                 ;org 6848h
.text$x:00006848 ; COMDAT (pick associative to section at 67BC)
.text$x:00006848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006848
.text$x:00006848 ; =============== S U B R O U T I N E =======================================
.text$x:00006848
.text$x:00006848
.text$x:00006848 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00006848                                         ; DATA XREF: .xdata$x:00010CC8o
.text$x:00006848                 mov     eax, [ebp+8]
.text$x:0000684B                 push    eax
.text$x:0000684C                 mov     eax, [ebp-10h]
.text$x:0000684F                 push    eax             ; void *
.text$x:00006850                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006855                 add     esp, 8
.text$x:00006858                 retn
.text$x:00006858 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00006858
.text$x:00006859
.text$x:00006859 ; =============== S U B R O U T I N E =======================================
.text$x:00006859
.text$x:00006859
.text$x:00006859 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00006859                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00006859
.text$x:00006859 arg_4           = dword ptr  8
.text$x:00006859
.text$x:00006859                 mov     edx, [esp+arg_4]
.text$x:0000685D                 lea     eax, [edx+0Ch]
.text$x:00006860                 mov     ecx, [edx-14h]
.text$x:00006863                 xor     ecx, eax
.text$x:00006865                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000686A                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:0000686F                 jmp     ___CxxFrameHandler3
.text$x:0000686F __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:0000686F
.text$x:0000686F _text$x         ends
.text$x:0000686F
.text$mn:00006874 ; ===========================================================================
.text$mn:00006874
.text$mn:00006874 ; Segment type: Pure code
.text$mn:00006874 ; Segment permissions: Read/Execute
.text$mn:00006874 _text$mn        segment para public 'CODE' use32
.text$mn:00006874                 assume cs:_text$mn
.text$mn:00006874                 ;org 6874h
.text$mn:00006874 ; COMDAT (pick any)
.text$mn:00006874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006874
.text$mn:00006874 ; =============== S U B R O U T I N E =======================================
.text$mn:00006874
.text$mn:00006874 ; Attributes: bp-based frame
.text$mn:00006874
.text$mn:00006874 ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00006874                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00006874 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00006874                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00006874
.text$mn:00006874 arg_0           = dword ptr  8
.text$mn:00006874 arg_4           = dword ptr  0Ch
.text$mn:00006874 arg_8           = dword ptr  10h
.text$mn:00006874
.text$mn:00006874                 push    ebp
.text$mn:00006875                 mov     ebp, esp
.text$mn:00006877                 mov     eax, [ebp+arg_8]
.text$mn:0000687A                 push    eax
.text$mn:0000687B                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00006880                 add     esp, 4
.text$mn:00006883                 push    eax             ; int
.text$mn:00006884                 mov     ecx, [ebp+arg_4]
.text$mn:00006887                 push    ecx             ; void *
.text$mn:00006888                 mov     ecx, [ebp+arg_0]
.text$mn:0000688B                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00006890                 pop     ebp
.text$mn:00006891                 retn
.text$mn:00006891 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00006891
.text$mn:00006891 ; ---------------------------------------------------------------------------
.text$mn:00006892                 align 4
.text$mn:00006892 _text$mn        ends
.text$mn:00006892
.text$mn:00006894 ; ===========================================================================
.text$mn:00006894
.text$mn:00006894 ; Segment type: Pure code
.text$mn:00006894 ; Segment permissions: Read/Execute
.text$mn:00006894 _text$mn        segment para public 'CODE' use32
.text$mn:00006894                 assume cs:_text$mn
.text$mn:00006894                 ;org 6894h
.text$mn:00006894 ; COMDAT (pick any)
.text$mn:00006894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006894
.text$mn:00006894 ; =============== S U B R O U T I N E =======================================
.text$mn:00006894
.text$mn:00006894 ; Attributes: bp-based frame
.text$mn:00006894
.text$mn:00006894 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(void *, int)
.text$mn:00006894                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$mn:00006894 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z proc near
.text$mn:00006894                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+94p
.text$mn:00006894
.text$mn:00006894 var_4           = dword ptr -4
.text$mn:00006894 arg_0           = dword ptr  8
.text$mn:00006894 arg_4           = dword ptr  0Ch
.text$mn:00006894
.text$mn:00006894                 push    ebp
.text$mn:00006895                 mov     ebp, esp
.text$mn:00006897                 push    ecx
.text$mn:00006898                 mov     [ebp+var_4], ecx
.text$mn:0000689B                 mov     eax, [ebp+arg_4]
.text$mn:0000689E                 push    eax
.text$mn:0000689F                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000068A4                 add     esp, 4
.text$mn:000068A7                 push    eax             ; int
.text$mn:000068A8                 mov     ecx, [ebp+arg_0]
.text$mn:000068AB                 push    ecx             ; void *
.text$mn:000068AC                 mov     edx, [ebp+var_4]
.text$mn:000068AF                 push    edx             ; int
.text$mn:000068B0                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000068B5                 add     esp, 0Ch
.text$mn:000068B8                 mov     esp, ebp
.text$mn:000068BA                 pop     ebp
.text$mn:000068BB                 retn    8
.text$mn:000068BB ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z endp
.text$mn:000068BB
.text$mn:000068BB ; ---------------------------------------------------------------------------
.text$mn:000068BE                 align 10h
.text$mn:000068BE _text$mn        ends
.text$mn:000068BE
.text$mn:000068C0 ; ===========================================================================
.text$mn:000068C0
.text$mn:000068C0 ; Segment type: Pure code
.text$mn:000068C0 ; Segment permissions: Read/Execute
.text$mn:000068C0 _text$mn        segment para public 'CODE' use32
.text$mn:000068C0                 assume cs:_text$mn
.text$mn:000068C0                 ;org 68C0h
.text$mn:000068C0 ; COMDAT (pick any)
.text$mn:000068C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068C0
.text$mn:000068C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000068C0
.text$mn:000068C0 ; Attributes: bp-based frame
.text$mn:000068C0
.text$mn:000068C0 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(void *, int)
.text$mn:000068C0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$mn:000068C0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z proc near
.text$mn:000068C0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+17p
.text$mn:000068C0
.text$mn:000068C0 var_1C          = dword ptr -1Ch
.text$mn:000068C0 var_18          = dword ptr -18h
.text$mn:000068C0 var_14          = dword ptr -14h
.text$mn:000068C0 var_10          = dword ptr -10h
.text$mn:000068C0 var_C           = dword ptr -0Ch
.text$mn:000068C0 var_4           = dword ptr -4
.text$mn:000068C0 arg_0           = dword ptr  8
.text$mn:000068C0 arg_4           = dword ptr  0Ch
.text$mn:000068C0
.text$mn:000068C0                 push    ebp
.text$mn:000068C1                 mov     ebp, esp
.text$mn:000068C3                 push    0FFFFFFFFh
.text$mn:000068C5                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$mn:000068CA                 mov     eax, large fs:0
.text$mn:000068D0                 push    eax
.text$mn:000068D1                 sub     esp, 10h
.text$mn:000068D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068D9                 xor     eax, ebp
.text$mn:000068DB                 push    eax
.text$mn:000068DC                 lea     eax, [ebp+var_C]
.text$mn:000068DF                 mov     large fs:0, eax
.text$mn:000068E5                 mov     [ebp+var_18], ecx
.text$mn:000068E8                 mov     eax, [ebp+arg_0]
.text$mn:000068EB                 push    eax             ; void *
.text$mn:000068EC                 push    1Ch             ; unsigned int
.text$mn:000068EE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000068F3                 add     esp, 8
.text$mn:000068F6                 mov     [ebp+var_10], eax
.text$mn:000068F9                 mov     [ebp+var_4], 0
.text$mn:00006900                 cmp     [ebp+var_10], 0
.text$mn:00006904                 jz      short loc_6920
.text$mn:00006906                 mov     ecx, [ebp+arg_4]
.text$mn:00006909                 push    ecx
.text$mn:0000690A                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000690F                 add     esp, 4
.text$mn:00006912                 push    eax
.text$mn:00006913                 mov     ecx, [ebp+var_10]
.text$mn:00006916                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000691B                 mov     [ebp+var_14], eax
.text$mn:0000691E                 jmp     short loc_6927
.text$mn:00006920 ; ---------------------------------------------------------------------------
.text$mn:00006920
.text$mn:00006920 loc_6920:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+44j
.text$mn:00006920                 mov     [ebp+var_14], 0
.text$mn:00006927
.text$mn:00006927 loc_6927:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5Ej
.text$mn:00006927                 mov     edx, [ebp+var_14]
.text$mn:0000692A                 mov     [ebp+var_1C], edx
.text$mn:0000692D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006934                 mov     ecx, [ebp+var_C]
.text$mn:00006937                 mov     large fs:0, ecx
.text$mn:0000693E                 pop     ecx
.text$mn:0000693F                 mov     esp, ebp
.text$mn:00006941                 pop     ebp
.text$mn:00006942                 retn    8
.text$mn:00006942 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z endp
.text$mn:00006942
.text$mn:00006942 ; ---------------------------------------------------------------------------
.text$mn:00006945                 align 4
.text$mn:00006945 _text$mn        ends
.text$mn:00006945
.text$x:00006948 ; ===========================================================================
.text$x:00006948
.text$x:00006948 ; Segment type: Pure code
.text$x:00006948 ; Segment permissions: Read/Execute
.text$x:00006948 _text$x         segment para public 'CODE' use32
.text$x:00006948                 assume cs:_text$x
.text$x:00006948                 ;org 6948h
.text$x:00006948 ; COMDAT (pick associative to section at 68C0)
.text$x:00006948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006948
.text$x:00006948 ; =============== S U B R O U T I N E =======================================
.text$x:00006948
.text$x:00006948
.text$x:00006948 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0 proc near
.text$x:00006948                                         ; DATA XREF: .xdata$x:00010DE4o
.text$x:00006948                 mov     eax, [ebp+8]
.text$x:0000694B                 push    eax
.text$x:0000694C                 mov     eax, [ebp-10h]
.text$x:0000694F                 push    eax             ; void *
.text$x:00006950                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006955                 add     esp, 8
.text$x:00006958                 retn
.text$x:00006958 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0 endp
.text$x:00006958
.text$x:00006959
.text$x:00006959 ; =============== S U B R O U T I N E =======================================
.text$x:00006959
.text$x:00006959
.text$x:00006959 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z proc near
.text$x:00006959                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:00006959
.text$x:00006959 arg_4           = dword ptr  8
.text$x:00006959
.text$x:00006959                 mov     edx, [esp+arg_4]
.text$x:0000695D                 lea     eax, [edx+0Ch]
.text$x:00006960                 mov     ecx, [edx-14h]
.text$x:00006963                 xor     ecx, eax
.text$x:00006965                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000696A                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$x:0000696F                 jmp     ___CxxFrameHandler3
.text$x:0000696F __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z endp
.text$x:0000696F
.text$x:0000696F _text$x         ends
.text$x:0000696F
.text$mn:00006974 ; ===========================================================================
.text$mn:00006974
.text$mn:00006974 ; Segment type: Pure code
.text$mn:00006974 ; Segment permissions: Read/Execute
.text$mn:00006974 _text$mn        segment para public 'CODE' use32
.text$mn:00006974                 assume cs:_text$mn
.text$mn:00006974                 ;org 6974h
.text$mn:00006974 ; COMDAT (pick any)
.text$mn:00006974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006974
.text$mn:00006974 ; =============== S U B R O U T I N E =======================================
.text$mn:00006974
.text$mn:00006974 ; Attributes: bp-based frame
.text$mn:00006974
.text$mn:00006974 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(int, void *, int)
.text$mn:00006974                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV31@@Z
.text$mn:00006974 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV31@@Z proc near
.text$mn:00006974                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1Cp
.text$mn:00006974
.text$mn:00006974 arg_0           = dword ptr  8
.text$mn:00006974 arg_4           = dword ptr  0Ch
.text$mn:00006974 arg_8           = dword ptr  10h
.text$mn:00006974
.text$mn:00006974                 push    ebp
.text$mn:00006975                 mov     ebp, esp
.text$mn:00006977                 mov     eax, [ebp+arg_8]
.text$mn:0000697A                 push    eax
.text$mn:0000697B                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006980                 add     esp, 4
.text$mn:00006983                 push    eax             ; int
.text$mn:00006984                 mov     ecx, [ebp+arg_4]
.text$mn:00006987                 push    ecx             ; void *
.text$mn:00006988                 mov     ecx, [ebp+arg_0]
.text$mn:0000698B                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006990                 pop     ebp
.text$mn:00006991                 retn
.text$mn:00006991 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV31@@Z endp
.text$mn:00006991
.text$mn:00006991 ; ---------------------------------------------------------------------------
.text$mn:00006992                 align 4
.text$mn:00006992 _text$mn        ends
.text$mn:00006992
.text$mn:00006994 ; ===========================================================================
.text$mn:00006994
.text$mn:00006994 ; Segment type: Pure code
.text$mn:00006994 ; Segment permissions: Read/Execute
.text$mn:00006994 _text$mn        segment para public 'CODE' use32
.text$mn:00006994                 assume cs:_text$mn
.text$mn:00006994                 ;org 6994h
.text$mn:00006994 ; COMDAT (pick any)
.text$mn:00006994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006994
.text$mn:00006994 ; =============== S U B R O U T I N E =======================================
.text$mn:00006994
.text$mn:00006994 ; Attributes: bp-based frame
.text$mn:00006994
.text$mn:00006994 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(void *, int)
.text$mn:00006994                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z
.text$mn:00006994 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z proc near
.text$mn:00006994                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+F1p
.text$mn:00006994
.text$mn:00006994 var_4           = dword ptr -4
.text$mn:00006994 arg_0           = dword ptr  8
.text$mn:00006994 arg_4           = dword ptr  0Ch
.text$mn:00006994
.text$mn:00006994                 push    ebp
.text$mn:00006995                 mov     ebp, esp
.text$mn:00006997                 push    ecx
.text$mn:00006998                 mov     [ebp+var_4], ecx
.text$mn:0000699B                 mov     eax, [ebp+arg_4]
.text$mn:0000699E                 push    eax
.text$mn:0000699F                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000069A4                 add     esp, 4
.text$mn:000069A7                 push    eax             ; int
.text$mn:000069A8                 mov     ecx, [ebp+arg_0]
.text$mn:000069AB                 push    ecx             ; void *
.text$mn:000069AC                 mov     edx, [ebp+var_4]
.text$mn:000069AF                 push    edx             ; int
.text$mn:000069B0                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000069B5                 add     esp, 0Ch
.text$mn:000069B8                 mov     esp, ebp
.text$mn:000069BA                 pop     ebp
.text$mn:000069BB                 retn    8
.text$mn:000069BB ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z endp
.text$mn:000069BB
.text$mn:000069BB ; ---------------------------------------------------------------------------
.text$mn:000069BE                 align 10h
.text$mn:000069BE _text$mn        ends
.text$mn:000069BE
.text$mn:000069C0 ; ===========================================================================
.text$mn:000069C0
.text$mn:000069C0 ; Segment type: Pure code
.text$mn:000069C0 ; Segment permissions: Read/Execute
.text$mn:000069C0 _text$mn        segment para public 'CODE' use32
.text$mn:000069C0                 assume cs:_text$mn
.text$mn:000069C0                 ;org 69C0h
.text$mn:000069C0 ; COMDAT (pick any)
.text$mn:000069C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069C0
.text$mn:000069C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000069C0
.text$mn:000069C0 ; Attributes: bp-based frame
.text$mn:000069C0
.text$mn:000069C0 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(int, void *, int)
.text$mn:000069C0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z
.text$mn:000069C0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z proc near
.text$mn:000069C0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Cp
.text$mn:000069C0
.text$mn:000069C0 arg_0           = dword ptr  8
.text$mn:000069C0 arg_4           = dword ptr  0Ch
.text$mn:000069C0 arg_8           = dword ptr  10h
.text$mn:000069C0
.text$mn:000069C0                 push    ebp
.text$mn:000069C1                 mov     ebp, esp
.text$mn:000069C3                 mov     eax, [ebp+arg_8]
.text$mn:000069C6                 push    eax
.text$mn:000069C7                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000069CC                 add     esp, 4
.text$mn:000069CF                 push    eax             ; int
.text$mn:000069D0                 mov     ecx, [ebp+arg_4]
.text$mn:000069D3                 push    ecx             ; void *
.text$mn:000069D4                 mov     ecx, [ebp+arg_0]
.text$mn:000069D7                 call    ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000069DC                 pop     ebp
.text$mn:000069DD                 retn
.text$mn:000069DD ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z endp
.text$mn:000069DD
.text$mn:000069DD ; ---------------------------------------------------------------------------
.text$mn:000069DE                 align 10h
.text$mn:000069DE _text$mn        ends
.text$mn:000069DE
.text$mn:000069E0 ; ===========================================================================
.text$mn:000069E0
.text$mn:000069E0 ; Segment type: Pure code
.text$mn:000069E0 ; Segment permissions: Read/Execute
.text$mn:000069E0 _text$mn        segment para public 'CODE' use32
.text$mn:000069E0                 assume cs:_text$mn
.text$mn:000069E0                 ;org 69E0h
.text$mn:000069E0 ; COMDAT (pick any)
.text$mn:000069E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069E0
.text$mn:000069E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000069E0
.text$mn:000069E0 ; Attributes: bp-based frame
.text$mn:000069E0
.text$mn:000069E0 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:000069E0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:000069E0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:000069E0                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:000069E0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+9Dp ...
.text$mn:000069E0
.text$mn:000069E0 var_4           = dword ptr -4
.text$mn:000069E0 arg_0           = dword ptr  8
.text$mn:000069E0 arg_4           = dword ptr  0Ch
.text$mn:000069E0
.text$mn:000069E0                 push    ebp
.text$mn:000069E1                 mov     ebp, esp
.text$mn:000069E3                 push    ecx
.text$mn:000069E4                 mov     [ebp+var_4], ecx
.text$mn:000069E7                 mov     eax, [ebp+arg_4]
.text$mn:000069EA                 push    eax
.text$mn:000069EB                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000069F0                 add     esp, 4
.text$mn:000069F3                 push    eax             ; int
.text$mn:000069F4                 mov     ecx, [ebp+arg_0]
.text$mn:000069F7                 push    ecx             ; void *
.text$mn:000069F8                 mov     edx, [ebp+var_4]
.text$mn:000069FB                 push    edx             ; int
.text$mn:000069FC                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006A01                 add     esp, 0Ch
.text$mn:00006A04                 mov     esp, ebp
.text$mn:00006A06                 pop     ebp
.text$mn:00006A07                 retn    8
.text$mn:00006A07 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00006A07
.text$mn:00006A07 ; ---------------------------------------------------------------------------
.text$mn:00006A0A                 align 4
.text$mn:00006A0A _text$mn        ends
.text$mn:00006A0A
.text$mn:00006A0C ; ===========================================================================
.text$mn:00006A0C
.text$mn:00006A0C ; Segment type: Pure code
.text$mn:00006A0C ; Segment permissions: Read/Execute
.text$mn:00006A0C _text$mn        segment para public 'CODE' use32
.text$mn:00006A0C                 assume cs:_text$mn
.text$mn:00006A0C                 ;org 6A0Ch
.text$mn:00006A0C ; COMDAT (pick any)
.text$mn:00006A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A0C
.text$mn:00006A0C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A0C
.text$mn:00006A0C ; Attributes: bp-based frame
.text$mn:00006A0C
.text$mn:00006A0C ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00006A0C                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00006A0C ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00006A0C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+17p
.text$mn:00006A0C
.text$mn:00006A0C var_1C          = dword ptr -1Ch
.text$mn:00006A0C var_18          = dword ptr -18h
.text$mn:00006A0C var_14          = dword ptr -14h
.text$mn:00006A0C var_10          = dword ptr -10h
.text$mn:00006A0C var_C           = dword ptr -0Ch
.text$mn:00006A0C var_4           = dword ptr -4
.text$mn:00006A0C arg_0           = dword ptr  8
.text$mn:00006A0C arg_4           = dword ptr  0Ch
.text$mn:00006A0C
.text$mn:00006A0C                 push    ebp
.text$mn:00006A0D                 mov     ebp, esp
.text$mn:00006A0F                 push    0FFFFFFFFh
.text$mn:00006A11                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00006A16                 mov     eax, large fs:0
.text$mn:00006A1C                 push    eax
.text$mn:00006A1D                 sub     esp, 10h
.text$mn:00006A20                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A25                 xor     eax, ebp
.text$mn:00006A27                 push    eax
.text$mn:00006A28                 lea     eax, [ebp+var_C]
.text$mn:00006A2B                 mov     large fs:0, eax
.text$mn:00006A31                 mov     [ebp+var_18], ecx
.text$mn:00006A34                 mov     eax, [ebp+arg_0]
.text$mn:00006A37                 push    eax             ; void *
.text$mn:00006A38                 push    1Ch             ; unsigned int
.text$mn:00006A3A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00006A3F                 add     esp, 8
.text$mn:00006A42                 mov     [ebp+var_10], eax
.text$mn:00006A45                 mov     [ebp+var_4], 0
.text$mn:00006A4C                 cmp     [ebp+var_10], 0
.text$mn:00006A50                 jz      short loc_6A6C
.text$mn:00006A52                 mov     ecx, [ebp+arg_4]
.text$mn:00006A55                 push    ecx
.text$mn:00006A56                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006A5B                 add     esp, 4
.text$mn:00006A5E                 push    eax
.text$mn:00006A5F                 mov     ecx, [ebp+var_10]
.text$mn:00006A62                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006A67                 mov     [ebp+var_14], eax
.text$mn:00006A6A                 jmp     short loc_6A73
.text$mn:00006A6C ; ---------------------------------------------------------------------------
.text$mn:00006A6C
.text$mn:00006A6C loc_6A6C:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+44j
.text$mn:00006A6C                 mov     [ebp+var_14], 0
.text$mn:00006A73
.text$mn:00006A73 loc_6A73:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5Ej
.text$mn:00006A73                 mov     edx, [ebp+var_14]
.text$mn:00006A76                 mov     [ebp+var_1C], edx
.text$mn:00006A79                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A80                 mov     ecx, [ebp+var_C]
.text$mn:00006A83                 mov     large fs:0, ecx
.text$mn:00006A8A                 pop     ecx
.text$mn:00006A8B                 mov     esp, ebp
.text$mn:00006A8D                 pop     ebp
.text$mn:00006A8E                 retn    8
.text$mn:00006A8E ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00006A8E
.text$mn:00006A8E ; ---------------------------------------------------------------------------
.text$mn:00006A91                 align 4
.text$mn:00006A91 _text$mn        ends
.text$mn:00006A91
.text$x:00006A94 ; ===========================================================================
.text$x:00006A94
.text$x:00006A94 ; Segment type: Pure code
.text$x:00006A94 ; Segment permissions: Read/Execute
.text$x:00006A94 _text$x         segment para public 'CODE' use32
.text$x:00006A94                 assume cs:_text$x
.text$x:00006A94                 ;org 6A94h
.text$x:00006A94 ; COMDAT (pick associative to section at 6A0C)
.text$x:00006A94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A94
.text$x:00006A94 ; =============== S U B R O U T I N E =======================================
.text$x:00006A94
.text$x:00006A94
.text$x:00006A94 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 proc near
.text$x:00006A94                                         ; DATA XREF: .xdata$x:00010DB8o
.text$x:00006A94                 mov     eax, [ebp+8]
.text$x:00006A97                 push    eax
.text$x:00006A98                 mov     eax, [ebp-10h]
.text$x:00006A9B                 push    eax             ; void *
.text$x:00006A9C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006AA1                 add     esp, 8
.text$x:00006AA4                 retn
.text$x:00006AA4 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 endp
.text$x:00006AA4
.text$x:00006AA5
.text$x:00006AA5 ; =============== S U B R O U T I N E =======================================
.text$x:00006AA5
.text$x:00006AA5
.text$x:00006AA5 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$x:00006AA5                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00006AA5
.text$x:00006AA5 arg_4           = dword ptr  8
.text$x:00006AA5
.text$x:00006AA5                 mov     edx, [esp+arg_4]
.text$x:00006AA9                 lea     eax, [edx+0Ch]
.text$x:00006AAC                 mov     ecx, [edx-14h]
.text$x:00006AAF                 xor     ecx, eax
.text$x:00006AB1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AB6                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$x:00006ABB                 jmp     ___CxxFrameHandler3
.text$x:00006ABB __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$x:00006ABB
.text$x:00006ABB _text$x         ends
.text$x:00006ABB
.text$mn:00006AC0 ; ===========================================================================
.text$mn:00006AC0
.text$mn:00006AC0 ; Segment type: Pure code
.text$mn:00006AC0 ; Segment permissions: Read/Execute
.text$mn:00006AC0 _text$mn        segment para public 'CODE' use32
.text$mn:00006AC0                 assume cs:_text$mn
.text$mn:00006AC0                 ;org 6AC0h
.text$mn:00006AC0 ; COMDAT (pick any)
.text$mn:00006AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AC0
.text$mn:00006AC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AC0
.text$mn:00006AC0 ; Attributes: bp-based frame
.text$mn:00006AC0
.text$mn:00006AC0 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, void *, int)
.text$mn:00006AC0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
.text$mn:00006AC0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z proc near
.text$mn:00006AC0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+1Cp
.text$mn:00006AC0
.text$mn:00006AC0 arg_0           = dword ptr  8
.text$mn:00006AC0 arg_4           = dword ptr  0Ch
.text$mn:00006AC0 arg_8           = dword ptr  10h
.text$mn:00006AC0
.text$mn:00006AC0                 push    ebp
.text$mn:00006AC1                 mov     ebp, esp
.text$mn:00006AC3                 mov     eax, [ebp+arg_8]
.text$mn:00006AC6                 push    eax
.text$mn:00006AC7                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006ACC                 add     esp, 4
.text$mn:00006ACF                 push    eax             ; int
.text$mn:00006AD0                 mov     ecx, [ebp+arg_4]
.text$mn:00006AD3                 push    ecx             ; void *
.text$mn:00006AD4                 mov     ecx, [ebp+arg_0]
.text$mn:00006AD7                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006ADC                 pop     ebp
.text$mn:00006ADD                 retn
.text$mn:00006ADD ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z endp
.text$mn:00006ADD
.text$mn:00006ADD ; ---------------------------------------------------------------------------
.text$mn:00006ADE                 align 10h
.text$mn:00006ADE _text$mn        ends
.text$mn:00006ADE
.text$mn:00006AE0 ; ===========================================================================
.text$mn:00006AE0
.text$mn:00006AE0 ; Segment type: Pure code
.text$mn:00006AE0 ; Segment permissions: Read/Execute
.text$mn:00006AE0 _text$mn        segment para public 'CODE' use32
.text$mn:00006AE0                 assume cs:_text$mn
.text$mn:00006AE0                 ;org 6AE0h
.text$mn:00006AE0 ; COMDAT (pick any)
.text$mn:00006AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AE0
.text$mn:00006AE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AE0
.text$mn:00006AE0 ; Attributes: bp-based frame
.text$mn:00006AE0
.text$mn:00006AE0 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00006AE0                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00006AE0 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00006AE0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00006AE0
.text$mn:00006AE0 var_4           = dword ptr -4
.text$mn:00006AE0 arg_0           = dword ptr  8
.text$mn:00006AE0
.text$mn:00006AE0                 push    ebp
.text$mn:00006AE1                 mov     ebp, esp
.text$mn:00006AE3                 push    ecx
.text$mn:00006AE4                 mov     [ebp+var_4], ecx
.text$mn:00006AE7                 mov     eax, [ebp+arg_0]
.text$mn:00006AEA                 push    eax
.text$mn:00006AEB                 mov     ecx, [ebp+var_4]
.text$mn:00006AEE                 push    ecx
.text$mn:00006AEF                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00006AF4                 add     esp, 8
.text$mn:00006AF7                 mov     esp, ebp
.text$mn:00006AF9                 pop     ebp
.text$mn:00006AFA                 retn    4
.text$mn:00006AFA ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00006AFA
.text$mn:00006AFA ; ---------------------------------------------------------------------------
.text$mn:00006AFD                 align 10h
.text$mn:00006AFD _text$mn        ends
.text$mn:00006AFD
.text$mn:00006B00 ; ===========================================================================
.text$mn:00006B00
.text$mn:00006B00 ; Segment type: Pure code
.text$mn:00006B00 ; Segment permissions: Read/Execute
.text$mn:00006B00 _text$mn        segment para public 'CODE' use32
.text$mn:00006B00                 assume cs:_text$mn
.text$mn:00006B00                 ;org 6B00h
.text$mn:00006B00 ; COMDAT (pick any)
.text$mn:00006B00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B00
.text$mn:00006B00 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B00
.text$mn:00006B00 ; Attributes: bp-based frame
.text$mn:00006B00
.text$mn:00006B00 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00006B00                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00006B00 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00006B00                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00006B00
.text$mn:00006B00 var_4           = dword ptr -4
.text$mn:00006B00
.text$mn:00006B00                 push    ebp
.text$mn:00006B01                 mov     ebp, esp
.text$mn:00006B03                 push    ecx
.text$mn:00006B04                 mov     [ebp+var_4], ecx
.text$mn:00006B07                 mov     esp, ebp
.text$mn:00006B09                 pop     ebp
.text$mn:00006B0A                 retn    4
.text$mn:00006B0A ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00006B0A
.text$mn:00006B0A ; ---------------------------------------------------------------------------
.text$mn:00006B0D                 align 10h
.text$mn:00006B0D _text$mn        ends
.text$mn:00006B0D
.text$mn:00006B10 ; ===========================================================================
.text$mn:00006B10
.text$mn:00006B10 ; Segment type: Pure code
.text$mn:00006B10 ; Segment permissions: Read/Execute
.text$mn:00006B10 _text$mn        segment para public 'CODE' use32
.text$mn:00006B10                 assume cs:_text$mn
.text$mn:00006B10                 ;org 6B10h
.text$mn:00006B10 ; COMDAT (pick any)
.text$mn:00006B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B10
.text$mn:00006B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B10
.text$mn:00006B10 ; Attributes: bp-based frame
.text$mn:00006B10
.text$mn:00006B10 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00006B10                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00006B10 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00006B10                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00006B10
.text$mn:00006B10 arg_0           = dword ptr  8
.text$mn:00006B10 arg_4           = dword ptr  0Ch
.text$mn:00006B10
.text$mn:00006B10                 push    ebp
.text$mn:00006B11                 mov     ebp, esp
.text$mn:00006B13                 mov     eax, [ebp+arg_4]
.text$mn:00006B16                 push    eax
.text$mn:00006B17                 mov     ecx, [ebp+arg_0]
.text$mn:00006B1A                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00006B1F                 pop     ebp
.text$mn:00006B20                 retn
.text$mn:00006B20 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00006B20
.text$mn:00006B20 ; ---------------------------------------------------------------------------
.text$mn:00006B21                 align 4
.text$mn:00006B21 _text$mn        ends
.text$mn:00006B21
.text$mn:00006B24 ; ===========================================================================
.text$mn:00006B24
.text$mn:00006B24 ; Segment type: Pure code
.text$mn:00006B24 ; Segment permissions: Read/Execute
.text$mn:00006B24 _text$mn        segment para public 'CODE' use32
.text$mn:00006B24                 assume cs:_text$mn
.text$mn:00006B24                 ;org 6B24h
.text$mn:00006B24 ; COMDAT (pick any)
.text$mn:00006B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B24
.text$mn:00006B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B24
.text$mn:00006B24 ; Attributes: bp-based frame
.text$mn:00006B24
.text$mn:00006B24 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006B24                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00006B24 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00006B24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+55p
.text$mn:00006B24                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+DCp ...
.text$mn:00006B24
.text$mn:00006B24 var_4           = dword ptr -4
.text$mn:00006B24 arg_0           = dword ptr  8
.text$mn:00006B24
.text$mn:00006B24                 push    ebp
.text$mn:00006B25                 mov     ebp, esp
.text$mn:00006B27                 push    ecx
.text$mn:00006B28                 mov     [ebp+var_4], ecx
.text$mn:00006B2B                 mov     eax, [ebp+arg_0]
.text$mn:00006B2E                 push    eax
.text$mn:00006B2F                 mov     ecx, [ebp+var_4]
.text$mn:00006B32                 push    ecx
.text$mn:00006B33                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00006B38                 add     esp, 8
.text$mn:00006B3B                 mov     esp, ebp
.text$mn:00006B3D                 pop     ebp
.text$mn:00006B3E                 retn    4
.text$mn:00006B3E ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00006B3E
.text$mn:00006B3E ; ---------------------------------------------------------------------------
.text$mn:00006B41                 align 4
.text$mn:00006B41 _text$mn        ends
.text$mn:00006B41
.text$mn:00006B44 ; ===========================================================================
.text$mn:00006B44
.text$mn:00006B44 ; Segment type: Pure code
.text$mn:00006B44 ; Segment permissions: Read/Execute
.text$mn:00006B44 _text$mn        segment para public 'CODE' use32
.text$mn:00006B44                 assume cs:_text$mn
.text$mn:00006B44                 ;org 6B44h
.text$mn:00006B44 ; COMDAT (pick any)
.text$mn:00006B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B44
.text$mn:00006B44 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B44
.text$mn:00006B44 ; Attributes: bp-based frame
.text$mn:00006B44
.text$mn:00006B44 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006B44                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00006B44 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00006B44                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00006B44
.text$mn:00006B44 var_4           = dword ptr -4
.text$mn:00006B44
.text$mn:00006B44                 push    ebp
.text$mn:00006B45                 mov     ebp, esp
.text$mn:00006B47                 push    ecx
.text$mn:00006B48                 mov     [ebp+var_4], ecx
.text$mn:00006B4B                 mov     esp, ebp
.text$mn:00006B4D                 pop     ebp
.text$mn:00006B4E                 retn    4
.text$mn:00006B4E ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00006B4E
.text$mn:00006B4E ; ---------------------------------------------------------------------------
.text$mn:00006B51                 align 4
.text$mn:00006B51 _text$mn        ends
.text$mn:00006B51
.text$mn:00006B54 ; ===========================================================================
.text$mn:00006B54
.text$mn:00006B54 ; Segment type: Pure code
.text$mn:00006B54 ; Segment permissions: Read/Execute
.text$mn:00006B54 _text$mn        segment para public 'CODE' use32
.text$mn:00006B54                 assume cs:_text$mn
.text$mn:00006B54                 ;org 6B54h
.text$mn:00006B54 ; COMDAT (pick any)
.text$mn:00006B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B54
.text$mn:00006B54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B54
.text$mn:00006B54 ; Attributes: bp-based frame
.text$mn:00006B54
.text$mn:00006B54 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00006B54                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00006B54 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00006B54                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00006B54
.text$mn:00006B54 arg_0           = dword ptr  8
.text$mn:00006B54 arg_4           = dword ptr  0Ch
.text$mn:00006B54
.text$mn:00006B54                 push    ebp
.text$mn:00006B55                 mov     ebp, esp
.text$mn:00006B57                 mov     eax, [ebp+arg_4]
.text$mn:00006B5A                 push    eax
.text$mn:00006B5B                 mov     ecx, [ebp+arg_0]
.text$mn:00006B5E                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006B63                 pop     ebp
.text$mn:00006B64                 retn
.text$mn:00006B64 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00006B64
.text$mn:00006B64 ; ---------------------------------------------------------------------------
.text$mn:00006B65                 align 4
.text$mn:00006B65 _text$mn        ends
.text$mn:00006B65
.text$mn:00006B68 ; ===========================================================================
.text$mn:00006B68
.text$mn:00006B68 ; Segment type: Pure code
.text$mn:00006B68 ; Segment permissions: Read/Execute
.text$mn:00006B68 _text$mn        segment para public 'CODE' use32
.text$mn:00006B68                 assume cs:_text$mn
.text$mn:00006B68                 ;org 6B68h
.text$mn:00006B68 ; COMDAT (pick any)
.text$mn:00006B68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B68
.text$mn:00006B68 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B68
.text$mn:00006B68 ; Attributes: bp-based frame
.text$mn:00006B68
.text$mn:00006B68 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>::destroy<struct MatchedCharInserted>(struct MatchedCharInserted *)
.text$mn:00006B68                 public ??$destroy@UMatchedCharInserted@@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@@Z
.text$mn:00006B68 ??$destroy@UMatchedCharInserted@@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@@Z proc near
.text$mn:00006B68                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00006B68                                         ; __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00006B68
.text$mn:00006B68 var_4           = dword ptr -4
.text$mn:00006B68 arg_0           = dword ptr  8
.text$mn:00006B68
.text$mn:00006B68                 push    ebp
.text$mn:00006B69                 mov     ebp, esp
.text$mn:00006B6B                 push    ecx
.text$mn:00006B6C                 mov     [ebp+var_4], ecx
.text$mn:00006B6F                 mov     eax, [ebp+arg_0]
.text$mn:00006B72                 push    eax
.text$mn:00006B73                 mov     ecx, [ebp+var_4]
.text$mn:00006B76                 push    ecx
.text$mn:00006B77                 call    ??$destroy@UMatchedCharInserted@@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@@Z ; std::allocator_traits<std::allocator<MatchedCharInserted>>::destroy<MatchedCharInserted>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *)
.text$mn:00006B7C                 add     esp, 8
.text$mn:00006B7F                 mov     esp, ebp
.text$mn:00006B81                 pop     ebp
.text$mn:00006B82                 retn    4
.text$mn:00006B82 ??$destroy@UMatchedCharInserted@@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@@Z endp
.text$mn:00006B82
.text$mn:00006B82 ; ---------------------------------------------------------------------------
.text$mn:00006B85                 align 4
.text$mn:00006B85 _text$mn        ends
.text$mn:00006B85
.text$mn:00006B88 ; ===========================================================================
.text$mn:00006B88
.text$mn:00006B88 ; Segment type: Pure code
.text$mn:00006B88 ; Segment permissions: Read/Execute
.text$mn:00006B88 _text$mn        segment para public 'CODE' use32
.text$mn:00006B88                 assume cs:_text$mn
.text$mn:00006B88                 ;org 6B88h
.text$mn:00006B88 ; COMDAT (pick any)
.text$mn:00006B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B88
.text$mn:00006B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B88
.text$mn:00006B88 ; Attributes: bp-based frame
.text$mn:00006B88
.text$mn:00006B88 ; public: void __thiscall std::allocator<struct MatchedCharInserted>::destroy<struct MatchedCharInserted>(struct MatchedCharInserted *)
.text$mn:00006B88                 public ??$destroy@UMatchedCharInserted@@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@@Z
.text$mn:00006B88 ??$destroy@UMatchedCharInserted@@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@@Z proc near
.text$mn:00006B88                                         ; CODE XREF: std::allocator_traits<std::allocator<MatchedCharInserted>>::destroy<MatchedCharInserted>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *)+Ap
.text$mn:00006B88
.text$mn:00006B88 var_4           = dword ptr -4
.text$mn:00006B88
.text$mn:00006B88                 push    ebp
.text$mn:00006B89                 mov     ebp, esp
.text$mn:00006B8B                 push    ecx
.text$mn:00006B8C                 mov     [ebp+var_4], ecx
.text$mn:00006B8F                 mov     esp, ebp
.text$mn:00006B91                 pop     ebp
.text$mn:00006B92                 retn    4
.text$mn:00006B92 ??$destroy@UMatchedCharInserted@@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@@Z endp
.text$mn:00006B92
.text$mn:00006B92 ; ---------------------------------------------------------------------------
.text$mn:00006B95                 align 4
.text$mn:00006B95 _text$mn        ends
.text$mn:00006B95
.text$mn:00006B98 ; ===========================================================================
.text$mn:00006B98
.text$mn:00006B98 ; Segment type: Pure code
.text$mn:00006B98 ; Segment permissions: Read/Execute
.text$mn:00006B98 _text$mn        segment para public 'CODE' use32
.text$mn:00006B98                 assume cs:_text$mn
.text$mn:00006B98                 ;org 6B98h
.text$mn:00006B98 ; COMDAT (pick any)
.text$mn:00006B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B98
.text$mn:00006B98 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B98
.text$mn:00006B98 ; Attributes: bp-based frame
.text$mn:00006B98
.text$mn:00006B98 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct MatchedCharInserted>>::destroy<struct MatchedCharInserted>(class std::allocator<struct MatchedCharInserted> &, struct MatchedCharInserted *)
.text$mn:00006B98                 public ??$destroy@UMatchedCharInserted@@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@@Z
.text$mn:00006B98 ??$destroy@UMatchedCharInserted@@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@@Z proc near
.text$mn:00006B98                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::destroy<MatchedCharInserted>(MatchedCharInserted *)+Fp
.text$mn:00006B98
.text$mn:00006B98 arg_0           = dword ptr  8
.text$mn:00006B98 arg_4           = dword ptr  0Ch
.text$mn:00006B98
.text$mn:00006B98                 push    ebp
.text$mn:00006B99                 mov     ebp, esp
.text$mn:00006B9B                 mov     eax, [ebp+arg_4]
.text$mn:00006B9E                 push    eax
.text$mn:00006B9F                 mov     ecx, [ebp+arg_0]
.text$mn:00006BA2                 call    ??$destroy@UMatchedCharInserted@@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@@Z ; std::allocator<MatchedCharInserted>::destroy<MatchedCharInserted>(MatchedCharInserted *)
.text$mn:00006BA7                 pop     ebp
.text$mn:00006BA8                 retn
.text$mn:00006BA8 ??$destroy@UMatchedCharInserted@@@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAXAAV?$allocator@UMatchedCharInserted@@@1@PAUMatchedCharInserted@@@Z endp
.text$mn:00006BA8
.text$mn:00006BA8 ; ---------------------------------------------------------------------------
.text$mn:00006BA9                 align 4
.text$mn:00006BA9 _text$mn        ends
.text$mn:00006BA9
.text$mn:00006BAC ; ===========================================================================
.text$mn:00006BAC
.text$mn:00006BAC ; Segment type: Pure code
.text$mn:00006BAC ; Segment permissions: Read/Execute
.text$mn:00006BAC _text$mn        segment para public 'CODE' use32
.text$mn:00006BAC                 assume cs:_text$mn
.text$mn:00006BAC                 ;org 6BACh
.text$mn:00006BAC ; COMDAT (pick any)
.text$mn:00006BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BAC
.text$mn:00006BAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BAC
.text$mn:00006BAC ; Attributes: bp-based frame
.text$mn:00006BAC
.text$mn:00006BAC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00006BAC                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00006BAC ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00006BAC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+22p
.text$mn:00006BAC
.text$mn:00006BAC var_4           = dword ptr -4
.text$mn:00006BAC arg_0           = dword ptr  8
.text$mn:00006BAC
.text$mn:00006BAC                 push    ebp
.text$mn:00006BAD                 mov     ebp, esp
.text$mn:00006BAF                 push    ecx
.text$mn:00006BB0                 mov     [ebp+var_4], ecx
.text$mn:00006BB3                 mov     eax, [ebp+arg_0]
.text$mn:00006BB6                 push    eax
.text$mn:00006BB7                 mov     ecx, [ebp+var_4]
.text$mn:00006BBA                 push    ecx
.text$mn:00006BBB                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:00006BC0                 add     esp, 8
.text$mn:00006BC3                 mov     esp, ebp
.text$mn:00006BC5                 pop     ebp
.text$mn:00006BC6                 retn    4
.text$mn:00006BC6 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00006BC6
.text$mn:00006BC6 ; ---------------------------------------------------------------------------
.text$mn:00006BC9                 align 4
.text$mn:00006BC9 _text$mn        ends
.text$mn:00006BC9
.text$mn:00006BCC ; ===========================================================================
.text$mn:00006BCC
.text$mn:00006BCC ; Segment type: Pure code
.text$mn:00006BCC ; Segment permissions: Read/Execute
.text$mn:00006BCC _text$mn        segment para public 'CODE' use32
.text$mn:00006BCC                 assume cs:_text$mn
.text$mn:00006BCC                 ;org 6BCCh
.text$mn:00006BCC ; COMDAT (pick any)
.text$mn:00006BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BCC
.text$mn:00006BCC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BCC
.text$mn:00006BCC ; Attributes: bp-based frame
.text$mn:00006BCC
.text$mn:00006BCC ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00006BCC                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00006BCC ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00006BCC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:00006BCC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:00006BCC
.text$mn:00006BCC var_4           = dword ptr -4
.text$mn:00006BCC
.text$mn:00006BCC                 push    ebp
.text$mn:00006BCD                 mov     ebp, esp
.text$mn:00006BCF                 push    ecx
.text$mn:00006BD0                 mov     [ebp+var_4], ecx
.text$mn:00006BD3                 mov     esp, ebp
.text$mn:00006BD5                 pop     ebp
.text$mn:00006BD6                 retn    4
.text$mn:00006BD6 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00006BD6
.text$mn:00006BD6 ; ---------------------------------------------------------------------------
.text$mn:00006BD9                 align 4
.text$mn:00006BD9 _text$mn        ends
.text$mn:00006BD9
.text$mn:00006BDC ; ===========================================================================
.text$mn:00006BDC
.text$mn:00006BDC ; Segment type: Pure code
.text$mn:00006BDC ; Segment permissions: Read/Execute
.text$mn:00006BDC _text$mn        segment para public 'CODE' use32
.text$mn:00006BDC                 assume cs:_text$mn
.text$mn:00006BDC                 ;org 6BDCh
.text$mn:00006BDC ; COMDAT (pick any)
.text$mn:00006BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BDC
.text$mn:00006BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BDC
.text$mn:00006BDC ; Attributes: bp-based frame
.text$mn:00006BDC
.text$mn:00006BDC ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:00006BDC                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:00006BDC ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:00006BDC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:00006BDC
.text$mn:00006BDC arg_0           = dword ptr  8
.text$mn:00006BDC arg_4           = dword ptr  0Ch
.text$mn:00006BDC
.text$mn:00006BDC                 push    ebp
.text$mn:00006BDD                 mov     ebp, esp
.text$mn:00006BDF                 mov     eax, [ebp+arg_4]
.text$mn:00006BE2                 push    eax
.text$mn:00006BE3                 mov     ecx, [ebp+arg_0]
.text$mn:00006BE6                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00006BEB                 pop     ebp
.text$mn:00006BEC                 retn
.text$mn:00006BEC ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:00006BEC
.text$mn:00006BEC ; ---------------------------------------------------------------------------
.text$mn:00006BED                 align 10h
.text$mn:00006BED _text$mn        ends
.text$mn:00006BED
.text$mn:00006BF0 ; ===========================================================================
.text$mn:00006BF0
.text$mn:00006BF0 ; Segment type: Pure code
.text$mn:00006BF0 ; Segment permissions: Read/Execute
.text$mn:00006BF0 _text$mn        segment para public 'CODE' use32
.text$mn:00006BF0                 assume cs:_text$mn
.text$mn:00006BF0                 ;org 6BF0h
.text$mn:00006BF0 ; COMDAT (pick any)
.text$mn:00006BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BF0
.text$mn:00006BF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BF0
.text$mn:00006BF0 ; Attributes: bp-based frame
.text$mn:00006BF0
.text$mn:00006BF0 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006BF0                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006BF0 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006BF0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00006BF0                                         ; __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00006BF0
.text$mn:00006BF0 var_4           = dword ptr -4
.text$mn:00006BF0 arg_0           = dword ptr  8
.text$mn:00006BF0
.text$mn:00006BF0                 push    ebp
.text$mn:00006BF1                 mov     ebp, esp
.text$mn:00006BF3                 push    ecx
.text$mn:00006BF4                 mov     [ebp+var_4], ecx
.text$mn:00006BF7                 mov     eax, [ebp+arg_0]
.text$mn:00006BFA                 push    eax
.text$mn:00006BFB                 mov     ecx, [ebp+var_4]
.text$mn:00006BFE                 push    ecx
.text$mn:00006BFF                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006C04                 add     esp, 8
.text$mn:00006C07                 mov     esp, ebp
.text$mn:00006C09                 pop     ebp
.text$mn:00006C0A                 retn    4
.text$mn:00006C0A ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006C0A
.text$mn:00006C0A ; ---------------------------------------------------------------------------
.text$mn:00006C0D                 align 10h
.text$mn:00006C0D _text$mn        ends
.text$mn:00006C0D
.text$mn:00006C10 ; ===========================================================================
.text$mn:00006C10
.text$mn:00006C10 ; Segment type: Pure code
.text$mn:00006C10 ; Segment permissions: Read/Execute
.text$mn:00006C10 _text$mn        segment para public 'CODE' use32
.text$mn:00006C10                 assume cs:_text$mn
.text$mn:00006C10                 ;org 6C10h
.text$mn:00006C10 ; COMDAT (pick any)
.text$mn:00006C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C10
.text$mn:00006C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C10
.text$mn:00006C10 ; Attributes: bp-based frame
.text$mn:00006C10
.text$mn:00006C10 ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006C10                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006C10 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006C10                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:00006C10
.text$mn:00006C10 var_4           = dword ptr -4
.text$mn:00006C10 arg_0           = dword ptr  8
.text$mn:00006C10
.text$mn:00006C10                 push    ebp
.text$mn:00006C11                 mov     ebp, esp
.text$mn:00006C13                 push    ecx
.text$mn:00006C14                 mov     [ebp+var_4], ecx
.text$mn:00006C17                 push    0
.text$mn:00006C19                 mov     ecx, [ebp+arg_0]
.text$mn:00006C1C                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:00006C21                 mov     esp, ebp
.text$mn:00006C23                 pop     ebp
.text$mn:00006C24                 retn    4
.text$mn:00006C24 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006C24
.text$mn:00006C24 ; ---------------------------------------------------------------------------
.text$mn:00006C27                 align 4
.text$mn:00006C27 _text$mn        ends
.text$mn:00006C27
.text$mn:00006C28 ; ===========================================================================
.text$mn:00006C28
.text$mn:00006C28 ; Segment type: Pure code
.text$mn:00006C28 ; Segment permissions: Read/Execute
.text$mn:00006C28 _text$mn        segment para public 'CODE' use32
.text$mn:00006C28                 assume cs:_text$mn
.text$mn:00006C28                 ;org 6C28h
.text$mn:00006C28 ; COMDAT (pick any)
.text$mn:00006C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C28
.text$mn:00006C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C28
.text$mn:00006C28 ; Attributes: bp-based frame
.text$mn:00006C28
.text$mn:00006C28 ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006C28                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006C28 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006C28                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:00006C28
.text$mn:00006C28 arg_0           = dword ptr  8
.text$mn:00006C28 arg_4           = dword ptr  0Ch
.text$mn:00006C28
.text$mn:00006C28                 push    ebp
.text$mn:00006C29                 mov     ebp, esp
.text$mn:00006C2B                 mov     eax, [ebp+arg_4]
.text$mn:00006C2E                 push    eax
.text$mn:00006C2F                 mov     ecx, [ebp+arg_0]
.text$mn:00006C32                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006C37                 pop     ebp
.text$mn:00006C38                 retn
.text$mn:00006C38 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006C38
.text$mn:00006C38 ; ---------------------------------------------------------------------------
.text$mn:00006C39                 align 4
.text$mn:00006C39 _text$mn        ends
.text$mn:00006C39
.text$mn:00006C3C ; ===========================================================================
.text$mn:00006C3C
.text$mn:00006C3C ; Segment type: Pure code
.text$mn:00006C3C ; Segment permissions: Read/Execute
.text$mn:00006C3C _text$mn        segment para public 'CODE' use32
.text$mn:00006C3C                 assume cs:_text$mn
.text$mn:00006C3C                 ;org 6C3Ch
.text$mn:00006C3C ; COMDAT (pick any)
.text$mn:00006C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C3C
.text$mn:00006C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C3C
.text$mn:00006C3C ; Attributes: bp-based frame
.text$mn:00006C3C
.text$mn:00006C3C ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00006C3C                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00006C3C ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00006C3C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00006C3C                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00006C3C
.text$mn:00006C3C arg_0           = dword ptr  8
.text$mn:00006C3C
.text$mn:00006C3C                 push    ebp
.text$mn:00006C3D                 mov     ebp, esp
.text$mn:00006C3F                 mov     eax, [ebp+arg_0]
.text$mn:00006C42                 pop     ebp
.text$mn:00006C43                 retn
.text$mn:00006C43 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00006C43
.text$mn:00006C43 _text$mn        ends
.text$mn:00006C43
.text$mn:00006C44 ; ===========================================================================
.text$mn:00006C44
.text$mn:00006C44 ; Segment type: Pure code
.text$mn:00006C44 ; Segment permissions: Read/Execute
.text$mn:00006C44 _text$mn        segment para public 'CODE' use32
.text$mn:00006C44                 assume cs:_text$mn
.text$mn:00006C44                 ;org 6C44h
.text$mn:00006C44 ; COMDAT (pick any)
.text$mn:00006C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C44
.text$mn:00006C44 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C44
.text$mn:00006C44 ; Attributes: bp-based frame
.text$mn:00006C44
.text$mn:00006C44 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &)
.text$mn:00006C44                 public ??$forward@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@@Z
.text$mn:00006C44 ??$forward@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@@Z proc near
.text$mn:00006C44                                         ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &)+Bp
.text$mn:00006C44                                         ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &)+1Ep
.text$mn:00006C44
.text$mn:00006C44 arg_0           = dword ptr  8
.text$mn:00006C44
.text$mn:00006C44                 push    ebp
.text$mn:00006C45                 mov     ebp, esp
.text$mn:00006C47                 mov     eax, [ebp+arg_0]
.text$mn:00006C4A                 pop     ebp
.text$mn:00006C4B                 retn
.text$mn:00006C4B ??$forward@AAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@@Z endp
.text$mn:00006C4B
.text$mn:00006C4B _text$mn        ends
.text$mn:00006C4B
.text$mn:00006C4C ; ===========================================================================
.text$mn:00006C4C
.text$mn:00006C4C ; Segment type: Pure code
.text$mn:00006C4C ; Segment permissions: Read/Execute
.text$mn:00006C4C _text$mn        segment para public 'CODE' use32
.text$mn:00006C4C                 assume cs:_text$mn
.text$mn:00006C4C                 ;org 6C4Ch
.text$mn:00006C4C ; COMDAT (pick any)
.text$mn:00006C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C4C
.text$mn:00006C4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C4C
.text$mn:00006C4C ; Attributes: bp-based frame
.text$mn:00006C4C
.text$mn:00006C4C ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00006C4C                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00006C4C ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00006C4C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00006C4C                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00006C4C
.text$mn:00006C4C arg_0           = dword ptr  8
.text$mn:00006C4C
.text$mn:00006C4C                 push    ebp
.text$mn:00006C4D                 mov     ebp, esp
.text$mn:00006C4F                 mov     eax, [ebp+arg_0]
.text$mn:00006C52                 pop     ebp
.text$mn:00006C53                 retn
.text$mn:00006C53 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00006C53
.text$mn:00006C53 _text$mn        ends
.text$mn:00006C53
.text$mn:00006C54 ; ===========================================================================
.text$mn:00006C54
.text$mn:00006C54 ; Segment type: Pure code
.text$mn:00006C54 ; Segment permissions: Read/Execute
.text$mn:00006C54 _text$mn        segment para public 'CODE' use32
.text$mn:00006C54                 assume cs:_text$mn
.text$mn:00006C54                 ;org 6C54h
.text$mn:00006C54 ; COMDAT (pick any)
.text$mn:00006C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C54
.text$mn:00006C54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C54
.text$mn:00006C54 ; Attributes: bp-based frame
.text$mn:00006C54
.text$mn:00006C54 ; struct MatchedCharInserted & __cdecl std::forward<struct MatchedCharInserted &>(struct MatchedCharInserted &)
.text$mn:00006C54                 public ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z
.text$mn:00006C54 ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z proc near
.text$mn:00006C54                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+Bp
.text$mn:00006C54                                         ; std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)+4Ap ...
.text$mn:00006C54
.text$mn:00006C54 arg_0           = dword ptr  8
.text$mn:00006C54
.text$mn:00006C54                 push    ebp
.text$mn:00006C55                 mov     ebp, esp
.text$mn:00006C57                 mov     eax, [ebp+arg_0]
.text$mn:00006C5A                 pop     ebp
.text$mn:00006C5B                 retn
.text$mn:00006C5B ??$forward@AAUMatchedCharInserted@@@std@@YAAAUMatchedCharInserted@@AAU1@@Z endp
.text$mn:00006C5B
.text$mn:00006C5B _text$mn        ends
.text$mn:00006C5B
.text$mn:00006C5C ; ===========================================================================
.text$mn:00006C5C
.text$mn:00006C5C ; Segment type: Pure code
.text$mn:00006C5C ; Segment permissions: Read/Execute
.text$mn:00006C5C _text$mn        segment para public 'CODE' use32
.text$mn:00006C5C                 assume cs:_text$mn
.text$mn:00006C5C                 ;org 6C5Ch
.text$mn:00006C5C ; COMDAT (pick any)
.text$mn:00006C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C5C
.text$mn:00006C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C5C
.text$mn:00006C5C ; Attributes: bp-based frame
.text$mn:00006C5C
.text$mn:00006C5C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00006C5C                 public ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00006C5C ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00006C5C                                         ; CODE XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+7p
.text$mn:00006C5C                                         ; std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+14p ...
.text$mn:00006C5C
.text$mn:00006C5C arg_0           = dword ptr  8
.text$mn:00006C5C
.text$mn:00006C5C                 push    ebp
.text$mn:00006C5D                 mov     ebp, esp
.text$mn:00006C5F                 mov     eax, [ebp+arg_0]
.text$mn:00006C62                 pop     ebp
.text$mn:00006C63                 retn
.text$mn:00006C63 ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00006C63
.text$mn:00006C63 _text$mn        ends
.text$mn:00006C63
.text$mn:00006C64 ; ===========================================================================
.text$mn:00006C64
.text$mn:00006C64 ; Segment type: Pure code
.text$mn:00006C64 ; Segment permissions: Read/Execute
.text$mn:00006C64 _text$mn        segment para public 'CODE' use32
.text$mn:00006C64                 assume cs:_text$mn
.text$mn:00006C64                 ;org 6C64h
.text$mn:00006C64 ; COMDAT (pick any)
.text$mn:00006C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C64
.text$mn:00006C64 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C64
.text$mn:00006C64 ; Attributes: bp-based frame
.text$mn:00006C64
.text$mn:00006C64 ; struct MatchedCharInserted const & __cdecl std::forward<struct MatchedCharInserted const &>(struct MatchedCharInserted const &)
.text$mn:00006C64                 public ??$forward@ABUMatchedCharInserted@@@std@@YAABUMatchedCharInserted@@ABU1@@Z
.text$mn:00006C64 ??$forward@ABUMatchedCharInserted@@@std@@YAABUMatchedCharInserted@@ABU1@@Z proc near
.text$mn:00006C64                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(MatchedCharInserted *,MatchedCharInserted const &)+Bp
.text$mn:00006C64                                         ; std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted const &)+7p
.text$mn:00006C64
.text$mn:00006C64 arg_0           = dword ptr  8
.text$mn:00006C64
.text$mn:00006C64                 push    ebp
.text$mn:00006C65                 mov     ebp, esp
.text$mn:00006C67                 mov     eax, [ebp+arg_0]
.text$mn:00006C6A                 pop     ebp
.text$mn:00006C6B                 retn
.text$mn:00006C6B ??$forward@ABUMatchedCharInserted@@@std@@YAABUMatchedCharInserted@@ABU1@@Z endp
.text$mn:00006C6B
.text$mn:00006C6B _text$mn        ends
.text$mn:00006C6B
.text$mn:00006C6C ; ===========================================================================
.text$mn:00006C6C
.text$mn:00006C6C ; Segment type: Pure code
.text$mn:00006C6C ; Segment permissions: Read/Execute
.text$mn:00006C6C _text$mn        segment para public 'CODE' use32
.text$mn:00006C6C                 assume cs:_text$mn
.text$mn:00006C6C                 ;org 6C6Ch
.text$mn:00006C6C ; COMDAT (pick any)
.text$mn:00006C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C6C
.text$mn:00006C6C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C6C
.text$mn:00006C6C ; Attributes: bp-based frame
.text$mn:00006C6C
.text$mn:00006C6C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006C6C                 public ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
.text$mn:00006C6C ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z proc near
.text$mn:00006C6C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:00006C6C                                         ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7p
.text$mn:00006C6C
.text$mn:00006C6C arg_0           = dword ptr  8
.text$mn:00006C6C
.text$mn:00006C6C                 push    ebp
.text$mn:00006C6D                 mov     ebp, esp
.text$mn:00006C6F                 mov     eax, [ebp+arg_0]
.text$mn:00006C72                 pop     ebp
.text$mn:00006C73                 retn
.text$mn:00006C73 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z endp
.text$mn:00006C73
.text$mn:00006C73 _text$mn        ends
.text$mn:00006C73
.text$mn:00006C74 ; ===========================================================================
.text$mn:00006C74
.text$mn:00006C74 ; Segment type: Pure code
.text$mn:00006C74 ; Segment permissions: Read/Execute
.text$mn:00006C74 _text$mn        segment para public 'CODE' use32
.text$mn:00006C74                 assume cs:_text$mn
.text$mn:00006C74                 ;org 6C74h
.text$mn:00006C74 ; COMDAT (pick any)
.text$mn:00006C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C74
.text$mn:00006C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C74
.text$mn:00006C74 ; Attributes: bp-based frame
.text$mn:00006C74
.text$mn:00006C74 ; struct MatchedCharInserted && __cdecl std::forward<struct MatchedCharInserted>(struct MatchedCharInserted &)
.text$mn:00006C74                 public ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z
.text$mn:00006C74 ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z proc near
.text$mn:00006C74                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+Bp
.text$mn:00006C74                                         ; std::allocator<MatchedCharInserted>::construct<MatchedCharInserted,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted &&)+4Ap ...
.text$mn:00006C74
.text$mn:00006C74 arg_0           = dword ptr  8
.text$mn:00006C74
.text$mn:00006C74                 push    ebp
.text$mn:00006C75                 mov     ebp, esp
.text$mn:00006C77                 mov     eax, [ebp+arg_0]
.text$mn:00006C7A                 pop     ebp
.text$mn:00006C7B                 retn
.text$mn:00006C7B ??$forward@UMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z endp
.text$mn:00006C7B
.text$mn:00006C7B _text$mn        ends
.text$mn:00006C7B
.text$mn:00006C7C ; ===========================================================================
.text$mn:00006C7C
.text$mn:00006C7C ; Segment type: Pure code
.text$mn:00006C7C ; Segment permissions: Read/Execute
.text$mn:00006C7C _text$mn        segment para public 'CODE' use32
.text$mn:00006C7C                 assume cs:_text$mn
.text$mn:00006C7C                 ;org 6C7Ch
.text$mn:00006C7C ; COMDAT (pick any)
.text$mn:00006C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C7C
.text$mn:00006C7C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C7C
.text$mn:00006C7C ; Attributes: bp-based frame
.text$mn:00006C7C
.text$mn:00006C7C ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00006C7C                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00006C7C ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00006C7C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00006C7C                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00006C7C
.text$mn:00006C7C arg_0           = dword ptr  8
.text$mn:00006C7C
.text$mn:00006C7C                 push    ebp
.text$mn:00006C7D                 mov     ebp, esp
.text$mn:00006C7F                 mov     eax, [ebp+arg_0]
.text$mn:00006C82                 pop     ebp
.text$mn:00006C83                 retn
.text$mn:00006C83 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00006C83
.text$mn:00006C83 _text$mn        ends
.text$mn:00006C83
.text$mn:00006C84 ; ===========================================================================
.text$mn:00006C84
.text$mn:00006C84 ; Segment type: Pure code
.text$mn:00006C84 ; Segment permissions: Read/Execute
.text$mn:00006C84 _text$mn        segment para public 'CODE' use32
.text$mn:00006C84                 assume cs:_text$mn
.text$mn:00006C84                 ;org 6C84h
.text$mn:00006C84 ; COMDAT (pick any)
.text$mn:00006C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C84
.text$mn:00006C84 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C84
.text$mn:00006C84 ; Attributes: bp-based frame
.text$mn:00006C84
.text$mn:00006C84 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00006C84                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00006C84 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00006C84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Bp
.text$mn:00006C84                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Ap ...
.text$mn:00006C84
.text$mn:00006C84 arg_0           = dword ptr  8
.text$mn:00006C84
.text$mn:00006C84                 push    ebp
.text$mn:00006C85                 mov     ebp, esp
.text$mn:00006C87                 mov     eax, [ebp+arg_0]
.text$mn:00006C8A                 pop     ebp
.text$mn:00006C8B                 retn
.text$mn:00006C8B ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00006C8B
.text$mn:00006C8B _text$mn        ends
.text$mn:00006C8B
.text$mn:00006C8C ; ===========================================================================
.text$mn:00006C8C
.text$mn:00006C8C ; Segment type: Pure code
.text$mn:00006C8C ; Segment permissions: Read/Execute
.text$mn:00006C8C _text$mn        segment para public 'CODE' use32
.text$mn:00006C8C                 assume cs:_text$mn
.text$mn:00006C8C                 ;org 6C8Ch
.text$mn:00006C8C ; COMDAT (pick any)
.text$mn:00006C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C8C
.text$mn:00006C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C8C
.text$mn:00006C8C ; Attributes: bp-based frame
.text$mn:00006C8C
.text$mn:00006C8C ; int __cdecl std::isalpha<wchar_t>(__int16, std::locale *)
.text$mn:00006C8C                 public ??$isalpha@_W@std@@YA_N_WABVlocale@0@@Z
.text$mn:00006C8C ??$isalpha@_W@std@@YA_N_WABVlocale@0@@Z proc near
.text$mn:00006C8C                                         ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+D4p
.text$mn:00006C8C
.text$mn:00006C8C arg_0           = word ptr  8
.text$mn:00006C8C arg_4           = dword ptr  0Ch
.text$mn:00006C8C
.text$mn:00006C8C                 push    ebp
.text$mn:00006C8D                 mov     ebp, esp
.text$mn:00006C8F                 movzx   eax, [ebp+arg_0]
.text$mn:00006C93                 push    eax
.text$mn:00006C94                 push    103h
.text$mn:00006C99                 mov     ecx, [ebp+arg_4]
.text$mn:00006C9C                 push    ecx             ; std::locale *
.text$mn:00006C9D                 call    ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)
.text$mn:00006CA2                 add     esp, 4
.text$mn:00006CA5                 mov     ecx, eax
.text$mn:00006CA7                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:00006CAC                 pop     ebp
.text$mn:00006CAD                 retn
.text$mn:00006CAD ??$isalpha@_W@std@@YA_N_WABVlocale@0@@Z endp
.text$mn:00006CAD
.text$mn:00006CAD ; ---------------------------------------------------------------------------
.text$mn:00006CAE                 align 10h
.text$mn:00006CAE _text$mn        ends
.text$mn:00006CAE
.text$mn:00006CB0 ; ===========================================================================
.text$mn:00006CB0
.text$mn:00006CB0 ; Segment type: Pure code
.text$mn:00006CB0 ; Segment permissions: Read/Execute
.text$mn:00006CB0 _text$mn        segment para public 'CODE' use32
.text$mn:00006CB0                 assume cs:_text$mn
.text$mn:00006CB0                 ;org 6CB0h
.text$mn:00006CB0 ; COMDAT (pick any)
.text$mn:00006CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CB0
.text$mn:00006CB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CB0
.text$mn:00006CB0 ; Attributes: bp-based frame
.text$mn:00006CB0
.text$mn:00006CB0 ; int __cdecl std::isspace<wchar_t>(__int16, std::locale *)
.text$mn:00006CB0                 public ??$isspace@_W@std@@YA_N_WABVlocale@0@@Z
.text$mn:00006CB0 ??$isspace@_W@std@@YA_N_WABVlocale@0@@Z proc near
.text$mn:00006CB0                                         ; CODE XREF: isAllowedBeforeDriveLetter(wchar_t)+58p
.text$mn:00006CB0
.text$mn:00006CB0 arg_0           = word ptr  8
.text$mn:00006CB0 arg_4           = dword ptr  0Ch
.text$mn:00006CB0
.text$mn:00006CB0                 push    ebp
.text$mn:00006CB1                 mov     ebp, esp
.text$mn:00006CB3                 movzx   eax, [ebp+arg_0]
.text$mn:00006CB7                 push    eax
.text$mn:00006CB8                 push    48h ; 'H'
.text$mn:00006CBA                 mov     ecx, [ebp+arg_4]
.text$mn:00006CBD                 push    ecx             ; std::locale *
.text$mn:00006CBE                 call    ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)
.text$mn:00006CC3                 add     esp, 4
.text$mn:00006CC6                 mov     ecx, eax
.text$mn:00006CC8                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:00006CCD                 pop     ebp
.text$mn:00006CCE                 retn
.text$mn:00006CCE ??$isspace@_W@std@@YA_N_WABVlocale@0@@Z endp
.text$mn:00006CCE
.text$mn:00006CCE ; ---------------------------------------------------------------------------
.text$mn:00006CCF                 align 10h
.text$mn:00006CCF _text$mn        ends
.text$mn:00006CCF
.text$mn:00006CD0 ; ===========================================================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Segment type: Pure code
.text$mn:00006CD0 ; Segment permissions: Read/Execute
.text$mn:00006CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00006CD0                 assume cs:_text$mn
.text$mn:00006CD0                 ;org 6CD0h
.text$mn:00006CD0 ; COMDAT (pick any)
.text$mn:00006CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CD0
.text$mn:00006CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Attributes: bp-based frame
.text$mn:00006CD0
.text$mn:00006CD0 ; int __cdecl std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, struct std::_Container_base12 *)
.text$mn:00006CD0                 public ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00006CD0 ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00006CD0                                         ; CODE XREF: std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+31p
.text$mn:00006CD0                                         ; std::_Med3<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+67p ...
.text$mn:00006CD0
.text$mn:00006CD0 arg_0           = dword ptr  8
.text$mn:00006CD0 arg_4           = dword ptr  0Ch
.text$mn:00006CD0
.text$mn:00006CD0                 push    ebp
.text$mn:00006CD1                 mov     ebp, esp
.text$mn:00006CD3                 mov     eax, [ebp+arg_4]
.text$mn:00006CD6                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006CD7                 mov     ecx, [ebp+arg_0]
.text$mn:00006CDA                 push    ecx             ; int
.text$mn:00006CDB                 call    ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006CE0                 add     esp, 8
.text$mn:00006CE3                 pop     ebp
.text$mn:00006CE4                 retn
.text$mn:00006CE4 ??$iter_swap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00006CE4
.text$mn:00006CE4 ; ---------------------------------------------------------------------------
.text$mn:00006CE5                 align 4
.text$mn:00006CE5 _text$mn        ends
.text$mn:00006CE5
.text$mn:00006CE8 ; ===========================================================================
.text$mn:00006CE8
.text$mn:00006CE8 ; Segment type: Pure code
.text$mn:00006CE8 ; Segment permissions: Read/Execute
.text$mn:00006CE8 _text$mn        segment para public 'CODE' use32
.text$mn:00006CE8                 assume cs:_text$mn
.text$mn:00006CE8                 ;org 6CE8h
.text$mn:00006CE8 ; COMDAT (pick any)
.text$mn:00006CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CE8
.text$mn:00006CE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CE8
.text$mn:00006CE8 ; Attributes: bp-based frame
.text$mn:00006CE8
.text$mn:00006CE8 ; void __cdecl std::iter_swap<wchar_t *, wchar_t *>(wchar_t *, wchar_t *)
.text$mn:00006CE8                 public ??$iter_swap@PA_WPA_W@std@@YAXPA_W0@Z
.text$mn:00006CE8 ??$iter_swap@PA_WPA_W@std@@YAXPA_W0@Z proc near
.text$mn:00006CE8                                         ; CODE XREF: std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])+47p
.text$mn:00006CE8
.text$mn:00006CE8 arg_0           = dword ptr  8
.text$mn:00006CE8 arg_4           = dword ptr  0Ch
.text$mn:00006CE8
.text$mn:00006CE8                 push    ebp
.text$mn:00006CE9                 mov     ebp, esp
.text$mn:00006CEB                 mov     eax, [ebp+arg_4]
.text$mn:00006CEE                 push    eax
.text$mn:00006CEF                 mov     ecx, [ebp+arg_0]
.text$mn:00006CF2                 push    ecx
.text$mn:00006CF3                 call    ??$swap@_W@std@@YAXAA_W0@Z ; std::swap<wchar_t>(wchar_t &,wchar_t &)
.text$mn:00006CF8                 add     esp, 8
.text$mn:00006CFB                 pop     ebp
.text$mn:00006CFC                 retn
.text$mn:00006CFC ??$iter_swap@PA_WPA_W@std@@YAXPA_W0@Z endp
.text$mn:00006CFC
.text$mn:00006CFC ; ---------------------------------------------------------------------------
.text$mn:00006CFD                 align 10h
.text$mn:00006CFD _text$mn        ends
.text$mn:00006CFD
.text$mn:00006D00 ; ===========================================================================
.text$mn:00006D00
.text$mn:00006D00 ; Segment type: Pure code
.text$mn:00006D00 ; Segment permissions: Read/Execute
.text$mn:00006D00 _text$mn        segment para public 'CODE' use32
.text$mn:00006D00                 assume cs:_text$mn
.text$mn:00006D00                 ;org 6D00h
.text$mn:00006D00 ; COMDAT (pick any)
.text$mn:00006D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D00
.text$mn:00006D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D00
.text$mn:00006D00 ; Attributes: bp-based frame
.text$mn:00006D00
.text$mn:00006D00 ; void __cdecl std::make_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:00006D00                 public ??$make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:00006D00 ??$make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:00006D00                                         ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+D8p
.text$mn:00006D00
.text$mn:00006D00 arg_0           = dword ptr  8
.text$mn:00006D00 arg_4           = dword ptr  0Ch
.text$mn:00006D00 arg_8           = byte ptr  10h
.text$mn:00006D00
.text$mn:00006D00                 push    ebp
.text$mn:00006D01                 mov     ebp, esp
.text$mn:00006D03                 push    999h            ; unsigned int
.text$mn:00006D08                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006D0D                 mov     eax, [ebp+arg_4]
.text$mn:00006D10                 push    eax             ; int
.text$mn:00006D11                 mov     ecx, [ebp+arg_0]
.text$mn:00006D14                 push    ecx             ; int
.text$mn:00006D15                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00006D1A                 add     esp, 10h
.text$mn:00006D1D                 push    99Ah
.text$mn:00006D22                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006D27                 lea     edx, [ebp+arg_8]
.text$mn:00006D2A                 push    edx
.text$mn:00006D2B                 call    ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z ; std::_Debug_pointer<std::less<void>>(std::less<void> &,wchar_t const *,uint)
.text$mn:00006D30                 add     esp, 0Ch
.text$mn:00006D33                 mov     eax, [ebp+arg_4]
.text$mn:00006D36                 sub     eax, [ebp+arg_0]
.text$mn:00006D39                 cdq
.text$mn:00006D3A                 mov     ecx, 1Ch
.text$mn:00006D3F                 idiv    ecx
.text$mn:00006D41                 cmp     eax, 1
.text$mn:00006D44                 jle     short loc_6D87
.text$mn:00006D46                 mov     edx, [ebp+arg_0]
.text$mn:00006D49                 push    edx
.text$mn:00006D4A                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006D4F                 add     esp, 4
.text$mn:00006D52                 push    eax
.text$mn:00006D53                 mov     eax, [ebp+arg_0]
.text$mn:00006D56                 push    eax
.text$mn:00006D57                 call    ??$_Dist_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAHPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Dist_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006D5C                 add     esp, 4
.text$mn:00006D5F                 push    eax
.text$mn:00006D60                 movzx   ecx, [ebp+arg_8]
.text$mn:00006D64                 push    ecx
.text$mn:00006D65                 mov     edx, [ebp+arg_4]
.text$mn:00006D68                 push    edx
.text$mn:00006D69                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006D6E                 add     esp, 4
.text$mn:00006D71                 push    eax
.text$mn:00006D72                 mov     eax, [ebp+arg_0]
.text$mn:00006D75                 push    eax
.text$mn:00006D76                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006D7B                 add     esp, 4
.text$mn:00006D7E                 push    eax
.text$mn:00006D7F                 call    ??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z ; std::_Make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>,int *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006D84                 add     esp, 14h
.text$mn:00006D87
.text$mn:00006D87 loc_6D87:                               ; CODE XREF: std::make_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+44j
.text$mn:00006D87                 pop     ebp
.text$mn:00006D88                 retn
.text$mn:00006D88 ??$make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:00006D88
.text$mn:00006D88 ; ---------------------------------------------------------------------------
.text$mn:00006D89                 align 4
.text$mn:00006D89 _text$mn        ends
.text$mn:00006D89
.text$mn:00006D8C ; ===========================================================================
.text$mn:00006D8C
.text$mn:00006D8C ; Segment type: Pure code
.text$mn:00006D8C ; Segment permissions: Read/Execute
.text$mn:00006D8C _text$mn        segment para public 'CODE' use32
.text$mn:00006D8C                 assume cs:_text$mn
.text$mn:00006D8C                 ;org 6D8Ch
.text$mn:00006D8C ; COMDAT (pick any)
.text$mn:00006D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D8C
.text$mn:00006D8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D8C
.text$mn:00006D8C ; Attributes: bp-based frame
.text$mn:00006D8C
.text$mn:00006D8C ; struct MatchedCharInserted && __cdecl std::move<struct MatchedCharInserted &>(struct MatchedCharInserted &)
.text$mn:00006D8C                 public ??$move@AAUMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z
.text$mn:00006D8C ??$move@AAUMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z proc near
.text$mn:00006D8C                                         ; CODE XREF: std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+23p
.text$mn:00006D8C
.text$mn:00006D8C arg_0           = dword ptr  8
.text$mn:00006D8C
.text$mn:00006D8C                 push    ebp
.text$mn:00006D8D                 mov     ebp, esp
.text$mn:00006D8F                 mov     eax, [ebp+arg_0]
.text$mn:00006D92                 pop     ebp
.text$mn:00006D93                 retn
.text$mn:00006D93 ??$move@AAUMatchedCharInserted@@@std@@YA$$QAUMatchedCharInserted@@AAU1@@Z endp
.text$mn:00006D93
.text$mn:00006D93 _text$mn        ends
.text$mn:00006D93
.text$mn:00006D94 ; ===========================================================================
.text$mn:00006D94
.text$mn:00006D94 ; Segment type: Pure code
.text$mn:00006D94 ; Segment permissions: Read/Execute
.text$mn:00006D94 _text$mn        segment para public 'CODE' use32
.text$mn:00006D94                 assume cs:_text$mn
.text$mn:00006D94                 ;org 6D94h
.text$mn:00006D94 ; COMDAT (pick any)
.text$mn:00006D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D94
.text$mn:00006D94 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D94
.text$mn:00006D94 ; Attributes: bp-based frame
.text$mn:00006D94
.text$mn:00006D94 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00006D94                 public ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00006D94 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00006D94                                         ; CODE XREF: std::_Move_backward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+21p
.text$mn:00006D94
.text$mn:00006D94 arg_0           = dword ptr  8
.text$mn:00006D94
.text$mn:00006D94                 push    ebp
.text$mn:00006D95                 mov     ebp, esp
.text$mn:00006D97                 mov     eax, [ebp+arg_0]
.text$mn:00006D9A                 pop     ebp
.text$mn:00006D9B                 retn
.text$mn:00006D9B ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00006D9B
.text$mn:00006D9B _text$mn        ends
.text$mn:00006D9B
.text$mn:00006D9C ; ===========================================================================
.text$mn:00006D9C
.text$mn:00006D9C ; Segment type: Pure code
.text$mn:00006D9C ; Segment permissions: Read/Execute
.text$mn:00006D9C _text$mn        segment para public 'CODE' use32
.text$mn:00006D9C                 assume cs:_text$mn
.text$mn:00006D9C                 ;org 6D9Ch
.text$mn:00006D9C ; COMDAT (pick any)
.text$mn:00006D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D9C
.text$mn:00006D9C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D9C
.text$mn:00006D9C ; Attributes: bp-based frame
.text$mn:00006D9C
.text$mn:00006D9C ; void __cdecl std::sort<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:00006D9C                 public ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z
.text$mn:00006D9C ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z proc near
.text$mn:00006D9C                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+695p
.text$mn:00006D9C                                         ; AutoCompletion::showWordComplete(bool)+26Bp ...
.text$mn:00006D9C
.text$mn:00006D9C var_28          = dword ptr -28h
.text$mn:00006D9C var_24          = dword ptr -24h
.text$mn:00006D9C var_20          = dword ptr -20h
.text$mn:00006D9C var_1C          = dword ptr -1Ch
.text$mn:00006D9C var_18          = dword ptr -18h
.text$mn:00006D9C var_14          = dword ptr -14h
.text$mn:00006D9C var_D           = byte ptr -0Dh
.text$mn:00006D9C var_C           = dword ptr -0Ch
.text$mn:00006D9C var_4           = dword ptr -4
.text$mn:00006D9C arg_0           = byte ptr  8
.text$mn:00006D9C arg_C           = byte ptr  14h
.text$mn:00006D9C
.text$mn:00006D9C                 push    ebp
.text$mn:00006D9D                 mov     ebp, esp
.text$mn:00006D9F                 push    0FFFFFFFFh
.text$mn:00006DA1                 push    offset __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z
.text$mn:00006DA6                 mov     eax, large fs:0
.text$mn:00006DAC                 push    eax
.text$mn:00006DAD                 sub     esp, 1Ch
.text$mn:00006DB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006DB5                 xor     eax, ebp
.text$mn:00006DB7                 push    eax
.text$mn:00006DB8                 lea     eax, [ebp+var_C]
.text$mn:00006DBB                 mov     large fs:0, eax
.text$mn:00006DC1                 mov     [ebp+var_4], 1
.text$mn:00006DC8                 xor     eax, eax
.text$mn:00006DCA                 mov     [ebp+var_D], al
.text$mn:00006DCD                 movzx   ecx, [ebp+var_D]
.text$mn:00006DD1                 push    ecx
.text$mn:00006DD2                 sub     esp, 0Ch
.text$mn:00006DD5                 mov     ecx, esp
.text$mn:00006DD7                 mov     [ebp+var_1C], esp
.text$mn:00006DDA                 lea     edx, [ebp+arg_C]
.text$mn:00006DDD                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006DDE                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006DE3                 mov     [ebp+var_14], eax
.text$mn:00006DE6                 mov     eax, [ebp+var_14]
.text$mn:00006DE9                 mov     [ebp+var_20], eax
.text$mn:00006DEC                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006DF0                 sub     esp, 0Ch
.text$mn:00006DF3                 mov     ecx, esp
.text$mn:00006DF5                 mov     [ebp+var_24], esp
.text$mn:00006DF8                 lea     edx, [ebp+arg_0]
.text$mn:00006DFB                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006DFC                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006E01                 mov     [ebp+var_18], eax
.text$mn:00006E04                 mov     eax, [ebp+var_18]
.text$mn:00006E07                 mov     [ebp+var_28], eax
.text$mn:00006E0A                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006E0E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006E12                 call    ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)
.text$mn:00006E17                 add     esp, 1Ch
.text$mn:00006E1A                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006E1E                 lea     ecx, [ebp+arg_0]
.text$mn:00006E21                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00006E26                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E2D                 lea     ecx, [ebp+arg_C]
.text$mn:00006E30                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00006E35                 mov     ecx, [ebp+var_C]
.text$mn:00006E38                 mov     large fs:0, ecx
.text$mn:00006E3F                 pop     ecx
.text$mn:00006E40                 mov     esp, ebp
.text$mn:00006E42                 pop     ebp
.text$mn:00006E43                 retn
.text$mn:00006E43 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z endp
.text$mn:00006E43
.text$mn:00006E43 _text$mn        ends
.text$mn:00006E43
.text$x:00006E44 ; ===========================================================================
.text$x:00006E44
.text$x:00006E44 ; Segment type: Pure code
.text$x:00006E44 ; Segment permissions: Read/Execute
.text$x:00006E44 _text$x         segment para public 'CODE' use32
.text$x:00006E44                 assume cs:_text$x
.text$x:00006E44                 ;org 6E44h
.text$x:00006E44 ; COMDAT (pick associative to section at 6D9C)
.text$x:00006E44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E44
.text$x:00006E44 ; =============== S U B R O U T I N E =======================================
.text$x:00006E44
.text$x:00006E44
.text$x:00006E44 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$0 proc near
.text$x:00006E44                                         ; DATA XREF: .xdata$x:00010864o
.text$x:00006E44                 lea     ecx, [ebp+14h]
.text$x:00006E47                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006E47 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$0 endp
.text$x:00006E47
.text$x:00006E4C
.text$x:00006E4C ; =============== S U B R O U T I N E =======================================
.text$x:00006E4C
.text$x:00006E4C
.text$x:00006E4C __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$1 proc near
.text$x:00006E4C                                         ; DATA XREF: .xdata$x:0001086Co
.text$x:00006E4C                 lea     ecx, [ebp+8]
.text$x:00006E4F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006E4F __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$1 endp
.text$x:00006E4F
.text$x:00006E54
.text$x:00006E54 ; =============== S U B R O U T I N E =======================================
.text$x:00006E54
.text$x:00006E54
.text$x:00006E54 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$2 proc near
.text$x:00006E54                                         ; DATA XREF: .xdata$x:00010874o
.text$x:00006E54                 mov     ecx, [ebp-1Ch]
.text$x:00006E57                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006E57 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$2 endp
.text$x:00006E57
.text$x:00006E5C
.text$x:00006E5C ; =============== S U B R O U T I N E =======================================
.text$x:00006E5C
.text$x:00006E5C
.text$x:00006E5C __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$3 proc near
.text$x:00006E5C                                         ; DATA XREF: .xdata$x:0001087Co
.text$x:00006E5C                 mov     ecx, [ebp-24h]
.text$x:00006E5F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006E5F __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$3 endp
.text$x:00006E5F
.text$x:00006E64
.text$x:00006E64 ; =============== S U B R O U T I N E =======================================
.text$x:00006E64
.text$x:00006E64
.text$x:00006E64 __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z proc near
.text$x:00006E64                                         ; DATA XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:00006E64
.text$x:00006E64 arg_4           = dword ptr  8
.text$x:00006E64
.text$x:00006E64                 mov     edx, [esp+arg_4]
.text$x:00006E68                 lea     eax, [edx+0Ch]
.text$x:00006E6B                 mov     ecx, [edx-20h]
.text$x:00006E6E                 xor     ecx, eax
.text$x:00006E70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E75                 mov     eax, offset __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z
.text$x:00006E7A                 jmp     ___CxxFrameHandler3
.text$x:00006E7A __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z endp
.text$x:00006E7A
.text$x:00006E7A ; ---------------------------------------------------------------------------
.text$x:00006E7F                 align 10h
.text$x:00006E7F _text$x         ends
.text$x:00006E7F
.text$mn:00006E80 ; ===========================================================================
.text$mn:00006E80
.text$mn:00006E80 ; Segment type: Pure code
.text$mn:00006E80 ; Segment permissions: Read/Execute
.text$mn:00006E80 _text$mn        segment para public 'CODE' use32
.text$mn:00006E80                 assume cs:_text$mn
.text$mn:00006E80                 ;org 6E80h
.text$mn:00006E80 ; COMDAT (pick any)
.text$mn:00006E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E80
.text$mn:00006E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E80
.text$mn:00006E80 ; Attributes: bp-based frame
.text$mn:00006E80
.text$mn:00006E80 ; void __cdecl std::sort<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, struct std::less<void>>(class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, struct std::less<void>)
.text$mn:00006E80                 public ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z
.text$mn:00006E80 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z proc near
.text$mn:00006E80                                         ; CODE XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+76p
.text$mn:00006E80
.text$mn:00006E80 var_44          = dword ptr -44h
.text$mn:00006E80 var_40          = dword ptr -40h
.text$mn:00006E80 var_3C          = dword ptr -3Ch
.text$mn:00006E80 var_38          = dword ptr -38h
.text$mn:00006E80 var_34          = dword ptr -34h
.text$mn:00006E80 var_30          = dword ptr -30h
.text$mn:00006E80 var_2C          = dword ptr -2Ch
.text$mn:00006E80 var_28          = dword ptr -28h
.text$mn:00006E80 var_24          = dword ptr -24h
.text$mn:00006E80 var_20          = dword ptr -20h
.text$mn:00006E80 var_1C          = dword ptr -1Ch
.text$mn:00006E80 var_18          = dword ptr -18h
.text$mn:00006E80 var_14          = dword ptr -14h
.text$mn:00006E80 var_10          = dword ptr -10h
.text$mn:00006E80 var_C           = dword ptr -0Ch
.text$mn:00006E80 var_4           = dword ptr -4
.text$mn:00006E80 arg_0           = byte ptr  8
.text$mn:00006E80 arg_C           = dword ptr  14h
.text$mn:00006E80 arg_18          = byte ptr  20h
.text$mn:00006E80
.text$mn:00006E80                 push    ebp
.text$mn:00006E81                 mov     ebp, esp
.text$mn:00006E83                 push    0FFFFFFFFh
.text$mn:00006E85                 push    offset __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z
.text$mn:00006E8A                 mov     eax, large fs:0
.text$mn:00006E90                 push    eax
.text$mn:00006E91                 sub     esp, 38h
.text$mn:00006E94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E99                 xor     eax, ebp
.text$mn:00006E9B                 push    eax
.text$mn:00006E9C                 lea     eax, [ebp+var_C]
.text$mn:00006E9F                 mov     large fs:0, eax
.text$mn:00006EA5                 mov     [ebp+var_4], 1
.text$mn:00006EAC                 push    0C53h           ; unsigned int
.text$mn:00006EB1                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006EB6                 sub     esp, 0Ch
.text$mn:00006EB9                 mov     ecx, esp
.text$mn:00006EBB                 mov     [ebp+var_28], esp
.text$mn:00006EBE                 lea     eax, [ebp+arg_C]
.text$mn:00006EC1                 push    eax             ; int
.text$mn:00006EC2                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006EC7                 mov     [ebp+var_10], eax
.text$mn:00006ECA                 mov     ecx, [ebp+var_10]
.text$mn:00006ECD                 mov     [ebp+var_2C], ecx
.text$mn:00006ED0                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006ED4                 sub     esp, 0Ch
.text$mn:00006ED7                 mov     ecx, esp
.text$mn:00006ED9                 mov     [ebp+var_30], esp
.text$mn:00006EDC                 lea     edx, [ebp+arg_0]
.text$mn:00006EDF                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006EE0                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006EE5                 mov     [ebp+var_14], eax
.text$mn:00006EE8                 mov     eax, [ebp+var_14]
.text$mn:00006EEB                 mov     [ebp+var_34], eax
.text$mn:00006EEE                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006EF2                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006EF6                 call    ??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)
.text$mn:00006EFB                 add     esp, 20h
.text$mn:00006EFE                 push    0C54h
.text$mn:00006F03                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006F08                 lea     ecx, [ebp+arg_18]
.text$mn:00006F0B                 push    ecx
.text$mn:00006F0C                 call    ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z ; std::_Debug_pointer<std::less<void>>(std::less<void> &,wchar_t const *,uint)
.text$mn:00006F11                 add     esp, 0Ch
.text$mn:00006F14                 movzx   edx, [ebp+arg_18]
.text$mn:00006F18                 push    edx             ; char
.text$mn:00006F19                 lea     eax, [ebp+arg_0]
.text$mn:00006F1C                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006F1D                 lea     ecx, [ebp+arg_C]
.text$mn:00006F20                 call    ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006F25                 push    eax             ; int
.text$mn:00006F26                 sub     esp, 0Ch
.text$mn:00006F29                 mov     ecx, esp
.text$mn:00006F2B                 mov     [ebp+var_38], esp
.text$mn:00006F2E                 lea     edx, [ebp+arg_C]
.text$mn:00006F31                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006F32                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006F37                 mov     [ebp+var_18], eax
.text$mn:00006F3A                 mov     eax, [ebp+var_18]
.text$mn:00006F3D                 mov     [ebp+var_3C], eax
.text$mn:00006F40                 mov     byte ptr [ebp+var_4], 4
.text$mn:00006F44                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006F48                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00006F4D                 add     esp, 0Ch
.text$mn:00006F50                 mov     [ebp+var_1C], eax
.text$mn:00006F53                 mov     ecx, [ebp+var_1C]
.text$mn:00006F56                 push    ecx             ; int
.text$mn:00006F57                 sub     esp, 0Ch
.text$mn:00006F5A                 mov     ecx, esp
.text$mn:00006F5C                 mov     [ebp+var_40], esp
.text$mn:00006F5F                 lea     edx, [ebp+arg_0]
.text$mn:00006F62                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006F63                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00006F68                 mov     [ebp+var_20], eax
.text$mn:00006F6B                 mov     eax, [ebp+var_20]
.text$mn:00006F6E                 mov     [ebp+var_44], eax
.text$mn:00006F71                 mov     byte ptr [ebp+var_4], 5
.text$mn:00006F75                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006F79                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00006F7E                 add     esp, 0Ch
.text$mn:00006F81                 mov     [ebp+var_24], eax
.text$mn:00006F84                 mov     ecx, [ebp+var_24]
.text$mn:00006F87                 push    ecx             ; struct std::_Container_base12 *
.text$mn:00006F88                 call    ??$_Sort@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HU?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0HU?$less@X@0@@Z ; std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)
.text$mn:00006F8D                 add     esp, 10h
.text$mn:00006F90                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006F94                 lea     ecx, [ebp+arg_0]
.text$mn:00006F97                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00006F9C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006FA3                 lea     ecx, [ebp+arg_C]
.text$mn:00006FA6                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00006FAB                 mov     ecx, [ebp+var_C]
.text$mn:00006FAE                 mov     large fs:0, ecx
.text$mn:00006FB5                 pop     ecx
.text$mn:00006FB6                 mov     esp, ebp
.text$mn:00006FB8                 pop     ebp
.text$mn:00006FB9                 retn
.text$mn:00006FB9 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z endp
.text$mn:00006FB9
.text$mn:00006FB9 ; ---------------------------------------------------------------------------
.text$mn:00006FBA                 align 4
.text$mn:00006FBA _text$mn        ends
.text$mn:00006FBA
.text$x:00006FBC ; ===========================================================================
.text$x:00006FBC
.text$x:00006FBC ; Segment type: Pure code
.text$x:00006FBC ; Segment permissions: Read/Execute
.text$x:00006FBC _text$x         segment para public 'CODE' use32
.text$x:00006FBC                 assume cs:_text$x
.text$x:00006FBC                 ;org 6FBCh
.text$x:00006FBC ; COMDAT (pick associative to section at 6E80)
.text$x:00006FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FBC
.text$x:00006FBC ; =============== S U B R O U T I N E =======================================
.text$x:00006FBC
.text$x:00006FBC
.text$x:00006FBC __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$0 proc near
.text$x:00006FBC                                         ; DATA XREF: .xdata$x:00010D18o
.text$x:00006FBC                 lea     ecx, [ebp+14h]
.text$x:00006FBF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FBF __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$0 endp
.text$x:00006FBF
.text$x:00006FC4
.text$x:00006FC4 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC4
.text$x:00006FC4
.text$x:00006FC4 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$1 proc near
.text$x:00006FC4                                         ; DATA XREF: .xdata$x:00010D20o
.text$x:00006FC4                 lea     ecx, [ebp+8]
.text$x:00006FC7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FC7 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$1 endp
.text$x:00006FC7
.text$x:00006FCC
.text$x:00006FCC ; =============== S U B R O U T I N E =======================================
.text$x:00006FCC
.text$x:00006FCC
.text$x:00006FCC __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$2 proc near
.text$x:00006FCC                                         ; DATA XREF: .xdata$x:00010D28o
.text$x:00006FCC                 mov     ecx, [ebp-28h]
.text$x:00006FCF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FCF __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$2 endp
.text$x:00006FCF
.text$x:00006FD4
.text$x:00006FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD4
.text$x:00006FD4
.text$x:00006FD4 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$3 proc near
.text$x:00006FD4                                         ; DATA XREF: .xdata$x:00010D30o
.text$x:00006FD4                 mov     ecx, [ebp-30h]
.text$x:00006FD7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FD7 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$3 endp
.text$x:00006FD7
.text$x:00006FDC
.text$x:00006FDC ; =============== S U B R O U T I N E =======================================
.text$x:00006FDC
.text$x:00006FDC
.text$x:00006FDC __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$4 proc near
.text$x:00006FDC                                         ; DATA XREF: .xdata$x:00010D38o
.text$x:00006FDC                 mov     ecx, [ebp-38h]
.text$x:00006FDF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FDF __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$4 endp
.text$x:00006FDF
.text$x:00006FE4
.text$x:00006FE4 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE4
.text$x:00006FE4
.text$x:00006FE4 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$5 proc near
.text$x:00006FE4                                         ; DATA XREF: .xdata$x:00010D40o
.text$x:00006FE4                 mov     ecx, [ebp-40h]
.text$x:00006FE7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006FE7 __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$5 endp
.text$x:00006FE7
.text$x:00006FEC
.text$x:00006FEC ; =============== S U B R O U T I N E =======================================
.text$x:00006FEC
.text$x:00006FEC
.text$x:00006FEC __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z proc near
.text$x:00006FEC                                         ; DATA XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+5o
.text$x:00006FEC
.text$x:00006FEC arg_4           = dword ptr  8
.text$x:00006FEC
.text$x:00006FEC                 mov     edx, [esp+arg_4]
.text$x:00006FF0                 lea     eax, [edx+0Ch]
.text$x:00006FF3                 mov     ecx, [edx-3Ch]
.text$x:00006FF6                 xor     ecx, eax
.text$x:00006FF8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FFD                 mov     eax, offset __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z
.text$x:00007002                 jmp     ___CxxFrameHandler3
.text$x:00007002 __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z endp
.text$x:00007002
.text$x:00007002 ; ---------------------------------------------------------------------------
.text$x:00007007                 align 4
.text$x:00007007 _text$x         ends
.text$x:00007007
.text$mn:00007008 ; ===========================================================================
.text$mn:00007008
.text$mn:00007008 ; Segment type: Pure code
.text$mn:00007008 ; Segment permissions: Read/Execute
.text$mn:00007008 _text$mn        segment para public 'CODE' use32
.text$mn:00007008                 assume cs:_text$mn
.text$mn:00007008                 ;org 7008h
.text$mn:00007008 ; COMDAT (pick any)
.text$mn:00007008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007008
.text$mn:00007008 ; =============== S U B R O U T I N E =======================================
.text$mn:00007008
.text$mn:00007008 ; Attributes: bp-based frame
.text$mn:00007008
.text$mn:00007008 ; void __cdecl std::sort_heap<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::less<void>)
.text$mn:00007008                 public ??$sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z
.text$mn:00007008 ??$sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z proc near
.text$mn:00007008                                         ; CODE XREF: std::_Sort<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::less<void>)+EDp
.text$mn:00007008
.text$mn:00007008 arg_0           = dword ptr  8
.text$mn:00007008 arg_4           = dword ptr  0Ch
.text$mn:00007008 arg_8           = byte ptr  10h
.text$mn:00007008
.text$mn:00007008                 push    ebp
.text$mn:00007009                 mov     ebp, esp
.text$mn:0000700B                 push    9B4h            ; unsigned int
.text$mn:00007010                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007015                 mov     eax, [ebp+arg_4]
.text$mn:00007018                 push    eax             ; int
.text$mn:00007019                 mov     ecx, [ebp+arg_0]
.text$mn:0000701C                 push    ecx             ; int
.text$mn:0000701D                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00007022                 add     esp, 10h
.text$mn:00007025                 push    9B5h
.text$mn:0000702A                 push    offset ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000702F                 lea     edx, [ebp+arg_8]
.text$mn:00007032                 push    edx
.text$mn:00007033                 call    ??$_Debug_pointer@U?$less@X@std@@@std@@YAXAAU?$less@X@0@PB_WI@Z ; std::_Debug_pointer<std::less<void>>(std::less<void> &,wchar_t const *,uint)
.text$mn:00007038                 add     esp, 0Ch
.text$mn:0000703B                 movzx   eax, [ebp+arg_8]
.text$mn:0000703F                 push    eax
.text$mn:00007040                 mov     ecx, [ebp+arg_4]
.text$mn:00007043                 push    ecx
.text$mn:00007044                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00007049                 add     esp, 4
.text$mn:0000704C                 push    eax
.text$mn:0000704D                 mov     edx, [ebp+arg_0]
.text$mn:00007050                 push    edx
.text$mn:00007051                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00007056                 add     esp, 4
.text$mn:00007059                 push    eax
.text$mn:0000705A                 call    ??$_Debug_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:0000705F                 add     esp, 0Ch
.text$mn:00007062                 movzx   eax, [ebp+arg_8]
.text$mn:00007066                 push    eax
.text$mn:00007067                 mov     ecx, [ebp+arg_4]
.text$mn:0000706A                 push    ecx
.text$mn:0000706B                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00007070                 add     esp, 4
.text$mn:00007073                 push    eax
.text$mn:00007074                 mov     edx, [ebp+arg_0]
.text$mn:00007077                 push    edx
.text$mn:00007078                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000707D                 add     esp, 4
.text$mn:00007080                 push    eax
.text$mn:00007081                 call    ??$_Sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z ; std::_Sort_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)
.text$mn:00007086                 add     esp, 0Ch
.text$mn:00007089                 pop     ebp
.text$mn:0000708A                 retn
.text$mn:0000708A ??$sort_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@@Z endp
.text$mn:0000708A
.text$mn:0000708A ; ---------------------------------------------------------------------------
.text$mn:0000708B                 align 4
.text$mn:0000708B _text$mn        ends
.text$mn:0000708B
.text$mn:0000708C ; ===========================================================================
.text$mn:0000708C
.text$mn:0000708C ; Segment type: Pure code
.text$mn:0000708C ; Segment permissions: Read/Execute
.text$mn:0000708C _text$mn        segment para public 'CODE' use32
.text$mn:0000708C                 assume cs:_text$mn
.text$mn:0000708C                 ;org 708Ch
.text$mn:0000708C ; COMDAT (pick any)
.text$mn:0000708C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000708C
.text$mn:0000708C ; =============== S U B R O U T I N E =======================================
.text$mn:0000708C
.text$mn:0000708C ; Attributes: bp-based frame
.text$mn:0000708C
.text$mn:0000708C ; void __cdecl std::swap<unsigned int>(unsigned int &, unsigned int &)
.text$mn:0000708C                 public ??$swap@I@std@@YAXAAI0@Z
.text$mn:0000708C ??$swap@I@std@@YAXAAI0@Z proc near      ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+87p
.text$mn:0000708C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+9Dp ...
.text$mn:0000708C
.text$mn:0000708C var_4           = dword ptr -4
.text$mn:0000708C arg_0           = dword ptr  8
.text$mn:0000708C arg_4           = dword ptr  0Ch
.text$mn:0000708C
.text$mn:0000708C                 push    ebp
.text$mn:0000708D                 mov     ebp, esp
.text$mn:0000708F                 push    ecx
.text$mn:00007090                 mov     eax, [ebp+arg_0]
.text$mn:00007093                 push    eax
.text$mn:00007094                 call    ??$_Move@AAI@std@@YA$$QAIAAI@Z ; std::_Move<uint &>(uint &)
.text$mn:00007099                 add     esp, 4
.text$mn:0000709C                 mov     ecx, [eax]
.text$mn:0000709E                 mov     [ebp+var_4], ecx
.text$mn:000070A1                 mov     edx, [ebp+arg_4]
.text$mn:000070A4                 push    edx
.text$mn:000070A5                 call    ??$_Move@AAI@std@@YA$$QAIAAI@Z ; std::_Move<uint &>(uint &)
.text$mn:000070AA                 add     esp, 4
.text$mn:000070AD                 mov     ecx, [ebp+arg_0]
.text$mn:000070B0                 mov     edx, [eax]
.text$mn:000070B2                 mov     [ecx], edx
.text$mn:000070B4                 lea     eax, [ebp+var_4]
.text$mn:000070B7                 push    eax
.text$mn:000070B8                 call    ??$_Move@AAI@std@@YA$$QAIAAI@Z ; std::_Move<uint &>(uint &)
.text$mn:000070BD                 add     esp, 4
.text$mn:000070C0                 mov     ecx, [ebp+arg_4]
.text$mn:000070C3                 mov     edx, [eax]
.text$mn:000070C5                 mov     [ecx], edx
.text$mn:000070C7                 mov     esp, ebp
.text$mn:000070C9                 pop     ebp
.text$mn:000070CA                 retn
.text$mn:000070CA ??$swap@I@std@@YAXAAI0@Z endp
.text$mn:000070CA
.text$mn:000070CA ; ---------------------------------------------------------------------------
.text$mn:000070CB                 align 4
.text$mn:000070CB _text$mn        ends
.text$mn:000070CB
.text$mn:000070CC ; ===========================================================================
.text$mn:000070CC
.text$mn:000070CC ; Segment type: Pure code
.text$mn:000070CC ; Segment permissions: Read/Execute
.text$mn:000070CC _text$mn        segment para public 'CODE' use32
.text$mn:000070CC                 assume cs:_text$mn
.text$mn:000070CC                 ;org 70CCh
.text$mn:000070CC ; COMDAT (pick any)
.text$mn:000070CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070CC
.text$mn:000070CC ; =============== S U B R O U T I N E =======================================
.text$mn:000070CC
.text$mn:000070CC ; Attributes: bp-based frame
.text$mn:000070CC
.text$mn:000070CC ; void __cdecl std::swap<struct std::_Container_proxy *>(struct std::_Container_proxy * &, struct std::_Container_proxy * &)
.text$mn:000070CC                 public ??$swap@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z
.text$mn:000070CC ??$swap@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z proc near
.text$mn:000070CC                                         ; CODE XREF: std::_Swap_adl<std::_Container_proxy *>(std::_Container_proxy * &,std::_Container_proxy * &)+Bp
.text$mn:000070CC
.text$mn:000070CC var_4           = dword ptr -4
.text$mn:000070CC arg_0           = dword ptr  8
.text$mn:000070CC arg_4           = dword ptr  0Ch
.text$mn:000070CC
.text$mn:000070CC                 push    ebp
.text$mn:000070CD                 mov     ebp, esp
.text$mn:000070CF                 push    ecx
.text$mn:000070D0                 mov     eax, [ebp+arg_0]
.text$mn:000070D3                 push    eax
.text$mn:000070D4                 call    ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z ; std::_Move<std::_Container_proxy * &>(std::_Container_proxy * &)
.text$mn:000070D9                 add     esp, 4
.text$mn:000070DC                 mov     ecx, [eax]
.text$mn:000070DE                 mov     [ebp+var_4], ecx
.text$mn:000070E1                 mov     edx, [ebp+arg_4]
.text$mn:000070E4                 push    edx
.text$mn:000070E5                 call    ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z ; std::_Move<std::_Container_proxy * &>(std::_Container_proxy * &)
.text$mn:000070EA                 add     esp, 4
.text$mn:000070ED                 mov     ecx, [ebp+arg_0]
.text$mn:000070F0                 mov     edx, [eax]
.text$mn:000070F2                 mov     [ecx], edx
.text$mn:000070F4                 lea     eax, [ebp+var_4]
.text$mn:000070F7                 push    eax
.text$mn:000070F8                 call    ??$_Move@AAPAU_Container_proxy@std@@@std@@YA$$QAPAU_Container_proxy@0@AAPAU10@@Z ; std::_Move<std::_Container_proxy * &>(std::_Container_proxy * &)
.text$mn:000070FD                 add     esp, 4
.text$mn:00007100                 mov     ecx, [ebp+arg_4]
.text$mn:00007103                 mov     edx, [eax]
.text$mn:00007105                 mov     [ecx], edx
.text$mn:00007107                 mov     esp, ebp
.text$mn:00007109                 pop     ebp
.text$mn:0000710A                 retn
.text$mn:0000710A ??$swap@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z endp
.text$mn:0000710A
.text$mn:0000710A ; ---------------------------------------------------------------------------
.text$mn:0000710B                 align 4
.text$mn:0000710B _text$mn        ends
.text$mn:0000710B
.text$mn:0000710C ; ===========================================================================
.text$mn:0000710C
.text$mn:0000710C ; Segment type: Pure code
.text$mn:0000710C ; Segment permissions: Read/Execute
.text$mn:0000710C _text$mn        segment para public 'CODE' use32
.text$mn:0000710C                 assume cs:_text$mn
.text$mn:0000710C                 ;org 710Ch
.text$mn:0000710C ; COMDAT (pick any)
.text$mn:0000710C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000710C
.text$mn:0000710C ; =============== S U B R O U T I N E =======================================
.text$mn:0000710C
.text$mn:0000710C ; Attributes: bp-based frame
.text$mn:0000710C
.text$mn:0000710C ; void __cdecl std::swap<wchar_t *>(wchar_t * &, wchar_t * &)
.text$mn:0000710C                 public ??$swap@PA_W@std@@YAXAAPA_W0@Z
.text$mn:0000710C ??$swap@PA_W@std@@YAXAAPA_W0@Z proc near
.text$mn:0000710C                                         ; CODE XREF: std::_Swap_adl<wchar_t *>(wchar_t * &,wchar_t * &)+Bp
.text$mn:0000710C
.text$mn:0000710C var_4           = dword ptr -4
.text$mn:0000710C arg_0           = dword ptr  8
.text$mn:0000710C arg_4           = dword ptr  0Ch
.text$mn:0000710C
.text$mn:0000710C                 push    ebp
.text$mn:0000710D                 mov     ebp, esp
.text$mn:0000710F                 push    ecx
.text$mn:00007110                 mov     eax, [ebp+arg_0]
.text$mn:00007113                 push    eax
.text$mn:00007114                 call    ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z ; std::_Move<wchar_t * &>(wchar_t * &)
.text$mn:00007119                 add     esp, 4
.text$mn:0000711C                 mov     ecx, [eax]
.text$mn:0000711E                 mov     [ebp+var_4], ecx
.text$mn:00007121                 mov     edx, [ebp+arg_4]
.text$mn:00007124                 push    edx
.text$mn:00007125                 call    ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z ; std::_Move<wchar_t * &>(wchar_t * &)
.text$mn:0000712A                 add     esp, 4
.text$mn:0000712D                 mov     ecx, [ebp+arg_0]
.text$mn:00007130                 mov     edx, [eax]
.text$mn:00007132                 mov     [ecx], edx
.text$mn:00007134                 lea     eax, [ebp+var_4]
.text$mn:00007137                 push    eax
.text$mn:00007138                 call    ??$_Move@AAPA_W@std@@YA$$QAPA_WAAPA_W@Z ; std::_Move<wchar_t * &>(wchar_t * &)
.text$mn:0000713D                 add     esp, 4
.text$mn:00007140                 mov     ecx, [ebp+arg_4]
.text$mn:00007143                 mov     edx, [eax]
.text$mn:00007145                 mov     [ecx], edx
.text$mn:00007147                 mov     esp, ebp
.text$mn:00007149                 pop     ebp
.text$mn:0000714A                 retn
.text$mn:0000714A ??$swap@PA_W@std@@YAXAAPA_W0@Z endp
.text$mn:0000714A
.text$mn:0000714A ; ---------------------------------------------------------------------------
.text$mn:0000714B                 align 4
.text$mn:0000714B _text$mn        ends
.text$mn:0000714B
.text$mn:0000714C ; ===========================================================================
.text$mn:0000714C
.text$mn:0000714C ; Segment type: Pure code
.text$mn:0000714C ; Segment permissions: Read/Execute
.text$mn:0000714C _text$mn        segment para public 'CODE' use32
.text$mn:0000714C                 assume cs:_text$mn
.text$mn:0000714C                 ;org 714Ch
.text$mn:0000714C ; COMDAT (pick any)
.text$mn:0000714C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000714C
.text$mn:0000714C ; =============== S U B R O U T I N E =======================================
.text$mn:0000714C
.text$mn:0000714C ; Attributes: bp-based frame
.text$mn:0000714C
.text$mn:0000714C ; void __cdecl std::swap<union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty>(union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty &, union std::_String_val<struct std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:0000714C                 public ??$swap@T_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@0@Z
.text$mn:0000714C ??$swap@T_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@0@Z proc near
.text$mn:0000714C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+D4p
.text$mn:0000714C
.text$mn:0000714C var_14          = dword ptr -14h
.text$mn:0000714C var_10          = dword ptr -10h
.text$mn:0000714C var_C           = dword ptr -0Ch
.text$mn:0000714C var_8           = dword ptr -8
.text$mn:0000714C var_4           = dword ptr -4
.text$mn:0000714C arg_0           = dword ptr  8
.text$mn:0000714C arg_4           = dword ptr  0Ch
.text$mn:0000714C
.text$mn:0000714C                 push    ebp
.text$mn:0000714D                 mov     ebp, esp
.text$mn:0000714F                 sub     esp, 14h
.text$mn:00007152                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007157                 xor     eax, ebp
.text$mn:00007159                 mov     [ebp+var_4], eax
.text$mn:0000715C                 mov     eax, [ebp+arg_0]
.text$mn:0000715F                 push    eax
.text$mn:00007160                 call    ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z ; std::_Move<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:00007165                 add     esp, 4
.text$mn:00007168                 mov     ecx, [eax]
.text$mn:0000716A                 mov     [ebp+var_14], ecx
.text$mn:0000716D                 mov     edx, [eax+4]
.text$mn:00007170                 mov     [ebp+var_10], edx
.text$mn:00007173                 mov     ecx, [eax+8]
.text$mn:00007176                 mov     [ebp+var_C], ecx
.text$mn:00007179                 mov     edx, [eax+0Ch]
.text$mn:0000717C                 mov     [ebp+var_8], edx
.text$mn:0000717F                 mov     eax, [ebp+arg_4]
.text$mn:00007182                 push    eax
.text$mn:00007183                 call    ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z ; std::_Move<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:00007188                 add     esp, 4
.text$mn:0000718B                 mov     ecx, [ebp+arg_0]
.text$mn:0000718E                 mov     edx, [eax]
.text$mn:00007190                 mov     [ecx], edx
.text$mn:00007192                 mov     edx, [eax+4]
.text$mn:00007195                 mov     [ecx+4], edx
.text$mn:00007198                 mov     edx, [eax+8]
.text$mn:0000719B                 mov     [ecx+8], edx
.text$mn:0000719E                 mov     eax, [eax+0Ch]
.text$mn:000071A1                 mov     [ecx+0Ch], eax
.text$mn:000071A4                 lea     ecx, [ebp+var_14]
.text$mn:000071A7                 push    ecx
.text$mn:000071A8                 call    ??$_Move@AAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@AAT120@@Z ; std::_Move<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:000071AD                 add     esp, 4
.text$mn:000071B0                 mov     edx, [ebp+arg_4]
.text$mn:000071B3                 mov     ecx, [eax]
.text$mn:000071B5                 mov     [edx], ecx
.text$mn:000071B7                 mov     ecx, [eax+4]
.text$mn:000071BA                 mov     [edx+4], ecx
.text$mn:000071BD                 mov     ecx, [eax+8]
.text$mn:000071C0                 mov     [edx+8], ecx
.text$mn:000071C3                 mov     eax, [eax+0Ch]
.text$mn:000071C6                 mov     [edx+0Ch], eax
.text$mn:000071C9                 mov     ecx, [ebp+var_4]
.text$mn:000071CC                 xor     ecx, ebp
.text$mn:000071CE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000071D3                 mov     esp, ebp
.text$mn:000071D5                 pop     ebp
.text$mn:000071D6                 retn
.text$mn:000071D6 ??$swap@T_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@0@Z endp
.text$mn:000071D6
.text$mn:000071D6 ; ---------------------------------------------------------------------------
.text$mn:000071D7                 align 4
.text$mn:000071D7 _text$mn        ends
.text$mn:000071D7
.text$mn:000071D8 ; ===========================================================================
.text$mn:000071D8
.text$mn:000071D8 ; Segment type: Pure code
.text$mn:000071D8 ; Segment permissions: Read/Execute
.text$mn:000071D8 _text$mn        segment para public 'CODE' use32
.text$mn:000071D8                 assume cs:_text$mn
.text$mn:000071D8                 ;org 71D8h
.text$mn:000071D8 ; COMDAT (pick any)
.text$mn:000071D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071D8
.text$mn:000071D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000071D8
.text$mn:000071D8 ; Attributes: bp-based frame
.text$mn:000071D8
.text$mn:000071D8 ; void __cdecl std::swap<wchar_t, 8>(wchar_t (&)[8], wchar_t (&)[8])
.text$mn:000071D8                 public ??$swap@_W$07@std@@YAXAAY07_W0@Z
.text$mn:000071D8 ??$swap@_W$07@std@@YAXAAY07_W0@Z proc near
.text$mn:000071D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+B4p
.text$mn:000071D8
.text$mn:000071D8 var_C           = dword ptr -0Ch
.text$mn:000071D8 var_8           = dword ptr -8
.text$mn:000071D8 var_4           = dword ptr -4
.text$mn:000071D8 arg_0           = dword ptr  8
.text$mn:000071D8 arg_4           = dword ptr  0Ch
.text$mn:000071D8
.text$mn:000071D8                 push    ebp
.text$mn:000071D9                 mov     ebp, esp
.text$mn:000071DB                 sub     esp, 0Ch
.text$mn:000071DE                 mov     eax, [ebp+arg_0]
.text$mn:000071E1                 cmp     eax, [ebp+arg_4]
.text$mn:000071E4                 jz      short loc_7229
.text$mn:000071E6                 mov     ecx, [ebp+arg_0]
.text$mn:000071E9                 mov     [ebp+var_4], ecx
.text$mn:000071EC                 mov     edx, [ebp+var_4]
.text$mn:000071EF                 add     edx, 10h
.text$mn:000071F2                 mov     [ebp+var_C], edx
.text$mn:000071F5                 mov     eax, [ebp+arg_4]
.text$mn:000071F8                 mov     [ebp+var_8], eax
.text$mn:000071FB                 jmp     short loc_720F
.text$mn:000071FD ; ---------------------------------------------------------------------------
.text$mn:000071FD
.text$mn:000071FD loc_71FD:                               ; CODE XREF: std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])+4Fj
.text$mn:000071FD                 mov     ecx, [ebp+var_4]
.text$mn:00007200                 add     ecx, 2
.text$mn:00007203                 mov     [ebp+var_4], ecx
.text$mn:00007206                 mov     edx, [ebp+var_8]
.text$mn:00007209                 add     edx, 2
.text$mn:0000720C                 mov     [ebp+var_8], edx
.text$mn:0000720F
.text$mn:0000720F loc_720F:                               ; CODE XREF: std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])+23j
.text$mn:0000720F                 mov     eax, [ebp+var_4]
.text$mn:00007212                 cmp     eax, [ebp+var_C]
.text$mn:00007215                 jz      short loc_7229
.text$mn:00007217                 mov     ecx, [ebp+var_8]
.text$mn:0000721A                 push    ecx
.text$mn:0000721B                 mov     edx, [ebp+var_4]
.text$mn:0000721E                 push    edx
.text$mn:0000721F                 call    ??$iter_swap@PA_WPA_W@std@@YAXPA_W0@Z ; std::iter_swap<wchar_t *,wchar_t *>(wchar_t *,wchar_t *)
.text$mn:00007224                 add     esp, 8
.text$mn:00007227                 jmp     short loc_71FD
.text$mn:00007229 ; ---------------------------------------------------------------------------
.text$mn:00007229
.text$mn:00007229 loc_7229:                               ; CODE XREF: std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])+Cj
.text$mn:00007229                                         ; std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])+3Dj
.text$mn:00007229                 mov     esp, ebp
.text$mn:0000722B                 pop     ebp
.text$mn:0000722C                 retn
.text$mn:0000722C ??$swap@_W$07@std@@YAXAAY07_W0@Z endp
.text$mn:0000722C
.text$mn:0000722C ; ---------------------------------------------------------------------------
.text$mn:0000722D                 align 10h
.text$mn:0000722D _text$mn        ends
.text$mn:0000722D
.text$mn:00007230 ; ===========================================================================
.text$mn:00007230
.text$mn:00007230 ; Segment type: Pure code
.text$mn:00007230 ; Segment permissions: Read/Execute
.text$mn:00007230 _text$mn        segment para public 'CODE' use32
.text$mn:00007230                 assume cs:_text$mn
.text$mn:00007230                 ;org 7230h
.text$mn:00007230 ; COMDAT (pick any)
.text$mn:00007230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007230
.text$mn:00007230 ; =============== S U B R O U T I N E =======================================
.text$mn:00007230
.text$mn:00007230 ; Attributes: bp-based frame
.text$mn:00007230
.text$mn:00007230 ; void __cdecl std::swap<wchar_t>(wchar_t &, wchar_t &)
.text$mn:00007230                 public ??$swap@_W@std@@YAXAA_W0@Z
.text$mn:00007230 ??$swap@_W@std@@YAXAA_W0@Z proc near    ; CODE XREF: std::iter_swap<wchar_t *,wchar_t *>(wchar_t *,wchar_t *)+Bp
.text$mn:00007230
.text$mn:00007230 var_4           = word ptr -4
.text$mn:00007230 arg_0           = dword ptr  8
.text$mn:00007230 arg_4           = dword ptr  0Ch
.text$mn:00007230
.text$mn:00007230                 push    ebp
.text$mn:00007231                 mov     ebp, esp
.text$mn:00007233                 push    ecx
.text$mn:00007234                 mov     eax, [ebp+arg_0]
.text$mn:00007237                 push    eax
.text$mn:00007238                 call    ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z ; std::_Move<wchar_t &>(wchar_t &)
.text$mn:0000723D                 add     esp, 4
.text$mn:00007240                 mov     cx, [eax]
.text$mn:00007243                 mov     [ebp+var_4], cx
.text$mn:00007247                 mov     edx, [ebp+arg_4]
.text$mn:0000724A                 push    edx
.text$mn:0000724B                 call    ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z ; std::_Move<wchar_t &>(wchar_t &)
.text$mn:00007250                 add     esp, 4
.text$mn:00007253                 mov     ecx, [ebp+arg_0]
.text$mn:00007256                 mov     dx, [eax]
.text$mn:00007259                 mov     [ecx], dx
.text$mn:0000725C                 lea     eax, [ebp+var_4]
.text$mn:0000725F                 push    eax
.text$mn:00007260                 call    ??$_Move@AA_W@std@@YA$$QA_WAA_W@Z ; std::_Move<wchar_t &>(wchar_t &)
.text$mn:00007265                 add     esp, 4
.text$mn:00007268                 mov     ecx, [ebp+arg_4]
.text$mn:0000726B                 mov     dx, [eax]
.text$mn:0000726E                 mov     [ecx], dx
.text$mn:00007271                 mov     esp, ebp
.text$mn:00007273                 pop     ebp
.text$mn:00007274                 retn
.text$mn:00007274 ??$swap@_W@std@@YAXAA_W0@Z endp
.text$mn:00007274
.text$mn:00007274 ; ---------------------------------------------------------------------------
.text$mn:00007275                 align 4
.text$mn:00007275 _text$mn        ends
.text$mn:00007275
.text$mn:00007278 ; ===========================================================================
.text$mn:00007278
.text$mn:00007278 ; Segment type: Pure code
.text$mn:00007278 ; Segment permissions: Read/Execute
.text$mn:00007278 _text$mn        segment para public 'CODE' use32
.text$mn:00007278                 assume cs:_text$mn
.text$mn:00007278                 ;org 7278h
.text$mn:00007278 ; COMDAT (pick any)
.text$mn:00007278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007278
.text$mn:00007278 ; =============== S U B R O U T I N E =======================================
.text$mn:00007278
.text$mn:00007278 ; Attributes: bp-based frame
.text$mn:00007278
.text$mn:00007278 ; int __cdecl std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, struct std::_Container_base12 *)
.text$mn:00007278                 public ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00007278 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00007278                                         ; CODE XREF: std::iter_swap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Bp
.text$mn:00007278
.text$mn:00007278 arg_0           = dword ptr  8
.text$mn:00007278 arg_4           = dword ptr  0Ch
.text$mn:00007278
.text$mn:00007278                 push    ebp
.text$mn:00007279                 mov     ebp, esp
.text$mn:0000727B                 mov     eax, [ebp+arg_4]
.text$mn:0000727E                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000727F                 mov     ecx, [ebp+arg_0]
.text$mn:00007282                 call    ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00007287                 pop     ebp
.text$mn:00007288                 retn
.text$mn:00007288 ??$swap@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00007288
.text$mn:00007288 ; ---------------------------------------------------------------------------
.text$mn:00007289                 align 4
.text$mn:00007289 _text$mn        ends
.text$mn:00007289
.text$mn:0000728C ; ===========================================================================
.text$mn:0000728C
.text$mn:0000728C ; Segment type: Pure code
.text$mn:0000728C ; Segment permissions: Read/Execute
.text$mn:0000728C _text$mn        segment para public 'CODE' use32
.text$mn:0000728C                 assume cs:_text$mn
.text$mn:0000728C                 ;org 728Ch
.text$mn:0000728C ; COMDAT (pick any)
.text$mn:0000728C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000728C
.text$mn:0000728C ; =============== S U B R O U T I N E =======================================
.text$mn:0000728C
.text$mn:0000728C ; Attributes: bp-based frame
.text$mn:0000728C
.text$mn:0000728C ; int __cdecl std::use_facet<std::ctype<wchar_t>>(std::locale *)
.text$mn:0000728C                 public ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:0000728C ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$mn:0000728C                                         ; CODE XREF: std::isalpha<wchar_t>(wchar_t,std::locale const &)+11p
.text$mn:0000728C                                         ; std::isspace<wchar_t>(wchar_t,std::locale const &)+Ep
.text$mn:0000728C
.text$mn:0000728C var_30          = byte ptr -30h
.text$mn:0000728C var_24          = dword ptr -24h
.text$mn:0000728C var_20          = byte ptr -20h
.text$mn:0000728C var_1C          = dword ptr -1Ch
.text$mn:0000728C var_18          = dword ptr -18h
.text$mn:0000728C var_14          = dword ptr -14h
.text$mn:0000728C var_10          = dword ptr -10h
.text$mn:0000728C var_C           = dword ptr -0Ch
.text$mn:0000728C var_4           = dword ptr -4
.text$mn:0000728C arg_0           = dword ptr  8
.text$mn:0000728C
.text$mn:0000728C                 push    ebp
.text$mn:0000728D                 mov     ebp, esp
.text$mn:0000728F                 push    0FFFFFFFFh
.text$mn:00007291                 push    offset __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:00007296                 mov     eax, large fs:0
.text$mn:0000729C                 push    eax
.text$mn:0000729D                 sub     esp, 24h
.text$mn:000072A0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072A5                 xor     eax, ebp
.text$mn:000072A7                 push    eax
.text$mn:000072A8                 lea     eax, [ebp+var_C]
.text$mn:000072AB                 mov     large fs:0, eax
.text$mn:000072B1                 push    0               ; int
.text$mn:000072B3                 lea     ecx, [ebp+var_20] ; this
.text$mn:000072B6                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000072BB                 mov     [ebp+var_4], 0
.text$mn:000072C2                 mov     eax, ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:000072C7                 mov     [ebp+var_10], eax
.text$mn:000072CA                 mov     ecx, offset ?id@?$ctype@_W@std@@2V0locale@2@A ; std::locale::id std::ctype<wchar_t>::id
.text$mn:000072CF                 call    ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator uint(void)
.text$mn:000072D4                 mov     [ebp+var_1C], eax
.text$mn:000072D7                 mov     ecx, [ebp+var_1C]
.text$mn:000072DA                 push    ecx             ; unsigned int
.text$mn:000072DB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000072DE                 call    ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet(uint)
.text$mn:000072E3                 mov     [ebp+var_14], eax
.text$mn:000072E6                 cmp     [ebp+var_14], 0
.text$mn:000072EA                 jz      short loc_72EE
.text$mn:000072EC                 jmp     short loc_735C
.text$mn:000072EE ; ---------------------------------------------------------------------------
.text$mn:000072EE
.text$mn:000072EE loc_72EE:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5Ej
.text$mn:000072EE                 cmp     [ebp+var_10], 0
.text$mn:000072F2                 jz      short loc_72FC
.text$mn:000072F4                 mov     edx, [ebp+var_10]
.text$mn:000072F7                 mov     [ebp+var_14], edx
.text$mn:000072FA                 jmp     short loc_735C
.text$mn:000072FC ; ---------------------------------------------------------------------------
.text$mn:000072FC
.text$mn:000072FC loc_72FC:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+66j
.text$mn:000072FC                 mov     eax, [ebp+arg_0]
.text$mn:000072FF                 push    eax             ; std::locale *
.text$mn:00007300                 lea     ecx, [ebp+var_10]
.text$mn:00007303                 push    ecx             ; int
.text$mn:00007304                 call    ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)
.text$mn:00007309                 add     esp, 8
.text$mn:0000730C                 cmp     eax, 0FFFFFFFFh
.text$mn:0000730F                 jnz     short loc_732E
.text$mn:00007311                 push    offset ??_C@_08EPJLHIJG@bad?5cast?$AA@ ; "bad cast"
.text$mn:00007316                 lea     ecx, [ebp+var_30] ; this
.text$mn:00007319                 call    ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast(char const *)
.text$mn:0000731E                 push    offset __TI2?AVbad_cast@std@@
.text$mn:00007323                 lea     edx, [ebp+var_30]
.text$mn:00007326                 push    edx
.text$mn:00007327                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000732C ; ---------------------------------------------------------------------------
.text$mn:0000732C                 jmp     short loc_735C
.text$mn:0000732E ; ---------------------------------------------------------------------------
.text$mn:0000732E
.text$mn:0000732E loc_732E:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+83j
.text$mn:0000732E                 mov     eax, [ebp+var_10]
.text$mn:00007331                 mov     [ebp+var_14], eax
.text$mn:00007334                 mov     ecx, [ebp+var_10]
.text$mn:00007337                 mov     ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:0000733D                 mov     edx, [ebp+var_10]
.text$mn:00007340                 mov     [ebp+var_18], edx
.text$mn:00007343                 mov     eax, [ebp+var_18]
.text$mn:00007346                 mov     edx, [eax]
.text$mn:00007348                 mov     ecx, [ebp+var_18]
.text$mn:0000734B                 mov     eax, [edx+4]
.text$mn:0000734E                 call    eax
.text$mn:00007350                 mov     ecx, [ebp+var_18]
.text$mn:00007353                 push    ecx             ; struct std::_Facet_base *
.text$mn:00007354                 call    ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register(std::_Facet_base *)
.text$mn:00007359                 add     esp, 4
.text$mn:0000735C
.text$mn:0000735C loc_735C:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+60j
.text$mn:0000735C                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+6Ej ...
.text$mn:0000735C                 mov     edx, [ebp+var_14]
.text$mn:0000735F                 mov     [ebp+var_24], edx
.text$mn:00007362                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007369                 lea     ecx, [ebp+var_20] ; this
.text$mn:0000736C                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00007371                 mov     eax, [ebp+var_24]
.text$mn:00007374                 mov     ecx, [ebp+var_C]
.text$mn:00007377                 mov     large fs:0, ecx
.text$mn:0000737E                 pop     ecx
.text$mn:0000737F                 mov     esp, ebp
.text$mn:00007381                 pop     ebp
.text$mn:00007382                 retn
.text$mn:00007382 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$mn:00007382
.text$mn:00007382 ; ---------------------------------------------------------------------------
.text$mn:00007383                 align 4
.text$mn:00007383 _text$mn        ends
.text$mn:00007383
.text$x:00007384 ; ===========================================================================
.text$x:00007384
.text$x:00007384 ; Segment type: Pure code
.text$x:00007384 ; Segment permissions: Read/Execute
.text$x:00007384 _text$x         segment para public 'CODE' use32
.text$x:00007384                 assume cs:_text$x
.text$x:00007384                 ;org 7384h
.text$x:00007384 ; COMDAT (pick associative to section at 728C)
.text$x:00007384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007384
.text$x:00007384 ; =============== S U B R O U T I N E =======================================
.text$x:00007384
.text$x:00007384
.text$x:00007384 __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 proc near
.text$x:00007384                                         ; DATA XREF: .xdata$x:0000FB78o
.text$x:00007384                 lea     ecx, [ebp-20h]  ; this
.text$x:00007387                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007387 __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 endp
.text$x:00007387
.text$x:0000738C
.text$x:0000738C ; =============== S U B R O U T I N E =======================================
.text$x:0000738C
.text$x:0000738C
.text$x:0000738C __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$x:0000738C                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5o
.text$x:0000738C
.text$x:0000738C arg_4           = dword ptr  8
.text$x:0000738C
.text$x:0000738C                 mov     edx, [esp+arg_4]
.text$x:00007390                 lea     eax, [edx+0Ch]
.text$x:00007393                 mov     ecx, [edx-28h]
.text$x:00007396                 xor     ecx, eax
.text$x:00007398                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000739D                 mov     eax, offset __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$x:000073A2                 jmp     ___CxxFrameHandler3
.text$x:000073A2 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$x:000073A2
.text$x:000073A2 ; ---------------------------------------------------------------------------
.text$x:000073A7                 align 4
.text$x:000073A7 _text$x         ends
.text$x:000073A7
.text$mn:000073A8 ; ===========================================================================
.text$mn:000073A8
.text$mn:000073A8 ; Segment type: Pure code
.text$mn:000073A8 ; Segment permissions: Read/Execute
.text$mn:000073A8 _text$mn        segment para public 'CODE' use32
.text$mn:000073A8                 assume cs:_text$mn
.text$mn:000073A8                 ;org 73A8h
.text$mn:000073A8 ; COMDAT (pick any)
.text$mn:000073A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073A8
.text$mn:000073A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000073A8
.text$mn:000073A8 ; Attributes: bp-based frame
.text$mn:000073A8
.text$mn:000073A8 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:000073A8                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000073A8 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:000073A8                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)+2Dp
.text$mn:000073A8
.text$mn:000073A8 var_10          = dword ptr -10h
.text$mn:000073A8 var_C           = dword ptr -0Ch
.text$mn:000073A8 var_4           = dword ptr -4
.text$mn:000073A8 arg_0           = dword ptr  8
.text$mn:000073A8
.text$mn:000073A8                 push    ebp
.text$mn:000073A9                 mov     ebp, esp
.text$mn:000073AB                 push    0FFFFFFFFh
.text$mn:000073AD                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000073B2                 mov     eax, large fs:0
.text$mn:000073B8                 push    eax
.text$mn:000073B9                 push    ecx
.text$mn:000073BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000073BF                 xor     eax, ebp
.text$mn:000073C1                 push    eax
.text$mn:000073C2                 lea     eax, [ebp+var_C]
.text$mn:000073C5                 mov     large fs:0, eax
.text$mn:000073CB                 mov     [ebp+var_10], ecx
.text$mn:000073CE                 mov     eax, [ebp+arg_0]
.text$mn:000073D1                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000073D2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000073D5                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:000073DA                 mov     [ebp+var_4], 0
.text$mn:000073E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000073E8                 mov     eax, [ebp+var_10]
.text$mn:000073EB                 mov     ecx, [ebp+var_C]
.text$mn:000073EE                 mov     large fs:0, ecx
.text$mn:000073F5                 pop     ecx
.text$mn:000073F6                 mov     esp, ebp
.text$mn:000073F8                 pop     ebp
.text$mn:000073F9                 retn    4
.text$mn:000073F9 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:000073F9
.text$mn:000073F9 _text$mn        ends
.text$mn:000073F9
.text$x:000073FC ; ===========================================================================
.text$x:000073FC
.text$x:000073FC ; Segment type: Pure code
.text$x:000073FC ; Segment permissions: Read/Execute
.text$x:000073FC _text$x         segment para public 'CODE' use32
.text$x:000073FC                 assume cs:_text$x
.text$x:000073FC                 ;org 73FCh
.text$x:000073FC ; COMDAT (pick associative to section at 73A8)
.text$x:000073FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073FC
.text$x:000073FC ; =============== S U B R O U T I N E =======================================
.text$x:000073FC
.text$x:000073FC
.text$x:000073FC __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:000073FC                                         ; DATA XREF: .xdata$x:00010934o
.text$x:000073FC                 mov     ecx, [ebp-10h]  ; this
.text$x:000073FF                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000073FF __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:000073FF
.text$x:00007404
.text$x:00007404 ; =============== S U B R O U T I N E =======================================
.text$x:00007404
.text$x:00007404
.text$x:00007404 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00007404                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12> const &)+5o
.text$x:00007404
.text$x:00007404 arg_4           = dword ptr  8
.text$x:00007404
.text$x:00007404                 mov     edx, [esp+arg_4]
.text$x:00007408                 lea     eax, [edx+0Ch]
.text$x:0000740B                 mov     ecx, [edx-8]
.text$x:0000740E                 xor     ecx, eax
.text$x:00007410                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007415                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:0000741A                 jmp     ___CxxFrameHandler3
.text$x:0000741A __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:0000741A
.text$x:0000741A ; ---------------------------------------------------------------------------
.text$x:0000741F                 align 10h
.text$x:0000741F _text$x         ends
.text$x:0000741F
.text$mn:00007420 ; ===========================================================================
.text$mn:00007420
.text$mn:00007420 ; Segment type: Pure code
.text$mn:00007420 ; Segment permissions: Read/Execute
.text$mn:00007420 _text$mn        segment para public 'CODE' use32
.text$mn:00007420                 assume cs:_text$mn
.text$mn:00007420                 ;org 7420h
.text$mn:00007420 ; COMDAT (pick any)
.text$mn:00007420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007420
.text$mn:00007420 ; =============== S U B R O U T I N E =======================================
.text$mn:00007420
.text$mn:00007420 ; Attributes: bp-based frame
.text$mn:00007420
.text$mn:00007420 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct MatchedCharInserted, int, struct MatchedCharInserted const *, struct MatchedCharInserted const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, struct MatchedCharInserted, int, struct MatchedCharInserted const *, struct MatchedCharInserted const &, struct std::_Iterator_base12>(void)
.text$mn:00007420                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00007420 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00007420                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)+29p
.text$mn:00007420
.text$mn:00007420 var_10          = dword ptr -10h
.text$mn:00007420 var_C           = dword ptr -0Ch
.text$mn:00007420 var_4           = dword ptr -4
.text$mn:00007420
.text$mn:00007420                 push    ebp
.text$mn:00007421                 mov     ebp, esp
.text$mn:00007423                 push    0FFFFFFFFh
.text$mn:00007425                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000742A                 mov     eax, large fs:0
.text$mn:00007430                 push    eax
.text$mn:00007431                 push    ecx
.text$mn:00007432                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007437                 xor     eax, ebp
.text$mn:00007439                 push    eax
.text$mn:0000743A                 lea     eax, [ebp+var_C]
.text$mn:0000743D                 mov     large fs:0, eax
.text$mn:00007443                 mov     [ebp+var_10], ecx
.text$mn:00007446                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007449                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:0000744E                 mov     [ebp+var_4], 0
.text$mn:00007455                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000745C                 mov     eax, [ebp+var_10]
.text$mn:0000745F                 mov     ecx, [ebp+var_C]
.text$mn:00007462                 mov     large fs:0, ecx
.text$mn:00007469                 pop     ecx
.text$mn:0000746A                 mov     esp, ebp
.text$mn:0000746C                 pop     ebp
.text$mn:0000746D                 retn
.text$mn:0000746D ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:0000746D
.text$mn:0000746D ; ---------------------------------------------------------------------------
.text$mn:0000746E                 align 10h
.text$mn:0000746E _text$mn        ends
.text$mn:0000746E
.text$x:00007470 ; ===========================================================================
.text$x:00007470
.text$x:00007470 ; Segment type: Pure code
.text$x:00007470 ; Segment permissions: Read/Execute
.text$x:00007470 _text$x         segment para public 'CODE' use32
.text$x:00007470                 assume cs:_text$x
.text$x:00007470                 ;org 7470h
.text$x:00007470 ; COMDAT (pick associative to section at 7420)
.text$x:00007470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007470
.text$x:00007470 ; =============== S U B R O U T I N E =======================================
.text$x:00007470
.text$x:00007470
.text$x:00007470 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00007470                                         ; DATA XREF: .xdata$x:000108DCo
.text$x:00007470                 mov     ecx, [ebp-10h]  ; this
.text$x:00007473                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00007473 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00007473
.text$x:00007478
.text$x:00007478 ; =============== S U B R O U T I N E =======================================
.text$x:00007478
.text$x:00007478
.text$x:00007478 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00007478                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)+5o
.text$x:00007478
.text$x:00007478 arg_4           = dword ptr  8
.text$x:00007478
.text$x:00007478                 mov     edx, [esp+arg_4]
.text$x:0000747C                 lea     eax, [edx+0Ch]
.text$x:0000747F                 mov     ecx, [edx-8]
.text$x:00007482                 xor     ecx, eax
.text$x:00007484                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007489                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:0000748E                 jmp     ___CxxFrameHandler3
.text$x:0000748E __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:0000748E
.text$x:0000748E ; ---------------------------------------------------------------------------
.text$x:00007493                 align 4
.text$x:00007493 _text$x         ends
.text$x:00007493
.text$mn:00007494 ; ===========================================================================
.text$mn:00007494
.text$mn:00007494 ; Segment type: Pure code
.text$mn:00007494 ; Segment permissions: Read/Execute
.text$mn:00007494 _text$mn        segment para public 'CODE' use32
.text$mn:00007494                 assume cs:_text$mn
.text$mn:00007494                 ;org 7494h
.text$mn:00007494 ; COMDAT (pick any)
.text$mn:00007494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007494
.text$mn:00007494 ; =============== S U B R O U T I N E =======================================
.text$mn:00007494
.text$mn:00007494 ; Attributes: bp-based frame
.text$mn:00007494
.text$mn:00007494 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00007494                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00007494 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00007494                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Dp
.text$mn:00007494
.text$mn:00007494 var_10          = dword ptr -10h
.text$mn:00007494 var_C           = dword ptr -0Ch
.text$mn:00007494 var_4           = dword ptr -4
.text$mn:00007494 arg_0           = dword ptr  8
.text$mn:00007494
.text$mn:00007494                 push    ebp
.text$mn:00007495                 mov     ebp, esp
.text$mn:00007497                 push    0FFFFFFFFh
.text$mn:00007499                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000749E                 mov     eax, large fs:0
.text$mn:000074A4                 push    eax
.text$mn:000074A5                 push    ecx
.text$mn:000074A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000074AB                 xor     eax, ebp
.text$mn:000074AD                 push    eax
.text$mn:000074AE                 lea     eax, [ebp+var_C]
.text$mn:000074B1                 mov     large fs:0, eax
.text$mn:000074B7                 mov     [ebp+var_10], ecx
.text$mn:000074BA                 mov     eax, [ebp+arg_0]
.text$mn:000074BD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000074BE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000074C1                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:000074C6                 mov     [ebp+var_4], 0
.text$mn:000074CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000074D4                 mov     eax, [ebp+var_10]
.text$mn:000074D7                 mov     ecx, [ebp+var_C]
.text$mn:000074DA                 mov     large fs:0, ecx
.text$mn:000074E1                 pop     ecx
.text$mn:000074E2                 mov     esp, ebp
.text$mn:000074E4                 pop     ebp
.text$mn:000074E5                 retn    4
.text$mn:000074E5 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:000074E5
.text$mn:000074E5 _text$mn        ends
.text$mn:000074E5
.text$x:000074E8 ; ===========================================================================
.text$x:000074E8
.text$x:000074E8 ; Segment type: Pure code
.text$x:000074E8 ; Segment permissions: Read/Execute
.text$x:000074E8 _text$x         segment para public 'CODE' use32
.text$x:000074E8                 assume cs:_text$x
.text$x:000074E8                 ;org 74E8h
.text$x:000074E8 ; COMDAT (pick associative to section at 7494)
.text$x:000074E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000074E8
.text$x:000074E8 ; =============== S U B R O U T I N E =======================================
.text$x:000074E8
.text$x:000074E8
.text$x:000074E8 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:000074E8                                         ; DATA XREF: .xdata$x:00010730o
.text$x:000074E8                 mov     ecx, [ebp-10h]  ; this
.text$x:000074EB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000074EB __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:000074EB
.text$x:000074F0
.text$x:000074F0 ; =============== S U B R O U T I N E =======================================
.text$x:000074F0
.text$x:000074F0
.text$x:000074F0 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:000074F0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+5o
.text$x:000074F0
.text$x:000074F0 arg_4           = dword ptr  8
.text$x:000074F0
.text$x:000074F0                 mov     edx, [esp+arg_4]
.text$x:000074F4                 lea     eax, [edx+0Ch]
.text$x:000074F7                 mov     ecx, [edx-8]
.text$x:000074FA                 xor     ecx, eax
.text$x:000074FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007501                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00007506                 jmp     ___CxxFrameHandler3
.text$x:00007506 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00007506
.text$x:00007506 ; ---------------------------------------------------------------------------
.text$x:0000750B                 align 4
.text$x:0000750B _text$x         ends
.text$x:0000750B
.text$mn:0000750C ; ===========================================================================
.text$mn:0000750C
.text$mn:0000750C ; Segment type: Pure code
.text$mn:0000750C ; Segment permissions: Read/Execute
.text$mn:0000750C _text$mn        segment para public 'CODE' use32
.text$mn:0000750C                 assume cs:_text$mn
.text$mn:0000750C                 ;org 750Ch
.text$mn:0000750C ; COMDAT (pick any)
.text$mn:0000750C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000750C
.text$mn:0000750C ; =============== S U B R O U T I N E =======================================
.text$mn:0000750C
.text$mn:0000750C ; Attributes: bp-based frame
.text$mn:0000750C
.text$mn:0000750C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:0000750C                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000750C ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:0000750C                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+29p
.text$mn:0000750C
.text$mn:0000750C var_10          = dword ptr -10h
.text$mn:0000750C var_C           = dword ptr -0Ch
.text$mn:0000750C var_4           = dword ptr -4
.text$mn:0000750C
.text$mn:0000750C                 push    ebp
.text$mn:0000750D                 mov     ebp, esp
.text$mn:0000750F                 push    0FFFFFFFFh
.text$mn:00007511                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00007516                 mov     eax, large fs:0
.text$mn:0000751C                 push    eax
.text$mn:0000751D                 push    ecx
.text$mn:0000751E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007523                 xor     eax, ebp
.text$mn:00007525                 push    eax
.text$mn:00007526                 lea     eax, [ebp+var_C]
.text$mn:00007529                 mov     large fs:0, eax
.text$mn:0000752F                 mov     [ebp+var_10], ecx
.text$mn:00007532                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007535                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:0000753A                 mov     [ebp+var_4], 0
.text$mn:00007541                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007548                 mov     eax, [ebp+var_10]
.text$mn:0000754B                 mov     ecx, [ebp+var_C]
.text$mn:0000754E                 mov     large fs:0, ecx
.text$mn:00007555                 pop     ecx
.text$mn:00007556                 mov     esp, ebp
.text$mn:00007558                 pop     ebp
.text$mn:00007559                 retn
.text$mn:00007559 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00007559
.text$mn:00007559 ; ---------------------------------------------------------------------------
.text$mn:0000755A                 align 4
.text$mn:0000755A _text$mn        ends
.text$mn:0000755A
.text$x:0000755C ; ===========================================================================
.text$x:0000755C
.text$x:0000755C ; Segment type: Pure code
.text$x:0000755C ; Segment permissions: Read/Execute
.text$x:0000755C _text$x         segment para public 'CODE' use32
.text$x:0000755C                 assume cs:_text$x
.text$x:0000755C                 ;org 755Ch
.text$x:0000755C ; COMDAT (pick associative to section at 750C)
.text$x:0000755C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000755C
.text$x:0000755C ; =============== S U B R O U T I N E =======================================
.text$x:0000755C
.text$x:0000755C
.text$x:0000755C __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:0000755C                                         ; DATA XREF: .xdata$x:000106D8o
.text$x:0000755C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000755F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000755F __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000755F
.text$x:00007564
.text$x:00007564 ; =============== S U B R O U T I N E =======================================
.text$x:00007564
.text$x:00007564
.text$x:00007564 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00007564                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:00007564
.text$x:00007564 arg_4           = dword ptr  8
.text$x:00007564
.text$x:00007564                 mov     edx, [esp+arg_4]
.text$x:00007568                 lea     eax, [edx+0Ch]
.text$x:0000756B                 mov     ecx, [edx-8]
.text$x:0000756E                 xor     ecx, eax
.text$x:00007570                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007575                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:0000757A                 jmp     ___CxxFrameHandler3
.text$x:0000757A __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:0000757A
.text$x:0000757A ; ---------------------------------------------------------------------------
.text$x:0000757F                 align 10h
.text$x:0000757F _text$x         ends
.text$x:0000757F
.text$mn:00007580 ; ===========================================================================
.text$mn:00007580
.text$mn:00007580 ; Segment type: Pure code
.text$mn:00007580 ; Segment permissions: Read/Execute
.text$mn:00007580 _text$mn        segment para public 'CODE' use32
.text$mn:00007580                 assume cs:_text$mn
.text$mn:00007580                 ;org 7580h
.text$mn:00007580 ; COMDAT (pick any)
.text$mn:00007580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007580
.text$mn:00007580 ; =============== S U B R O U T I N E =======================================
.text$mn:00007580
.text$mn:00007580 ; Attributes: bp-based frame
.text$mn:00007580
.text$mn:00007580 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00007580                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00007580 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00007580                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:00007580
.text$mn:00007580 var_10          = dword ptr -10h
.text$mn:00007580 var_C           = dword ptr -0Ch
.text$mn:00007580 var_4           = dword ptr -4
.text$mn:00007580 arg_0           = dword ptr  8
.text$mn:00007580
.text$mn:00007580                 push    ebp
.text$mn:00007581                 mov     ebp, esp
.text$mn:00007583                 push    0FFFFFFFFh
.text$mn:00007585                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000758A                 mov     eax, large fs:0
.text$mn:00007590                 push    eax
.text$mn:00007591                 push    ecx
.text$mn:00007592                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007597                 xor     eax, ebp
.text$mn:00007599                 push    eax
.text$mn:0000759A                 lea     eax, [ebp+var_C]
.text$mn:0000759D                 mov     large fs:0, eax
.text$mn:000075A3                 mov     [ebp+var_10], ecx
.text$mn:000075A6                 mov     eax, [ebp+arg_0]
.text$mn:000075A9                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000075AA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000075AD                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:000075B2                 mov     [ebp+var_4], 0
.text$mn:000075B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000075C0                 mov     eax, [ebp+var_10]
.text$mn:000075C3                 mov     ecx, [ebp+var_C]
.text$mn:000075C6                 mov     large fs:0, ecx
.text$mn:000075CD                 pop     ecx
.text$mn:000075CE                 mov     esp, ebp
.text$mn:000075D0                 pop     ebp
.text$mn:000075D1                 retn    4
.text$mn:000075D1 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:000075D1
.text$mn:000075D1 _text$mn        ends
.text$mn:000075D1
.text$x:000075D4 ; ===========================================================================
.text$x:000075D4
.text$x:000075D4 ; Segment type: Pure code
.text$x:000075D4 ; Segment permissions: Read/Execute
.text$x:000075D4 _text$x         segment para public 'CODE' use32
.text$x:000075D4                 assume cs:_text$x
.text$x:000075D4                 ;org 75D4h
.text$x:000075D4 ; COMDAT (pick associative to section at 7580)
.text$x:000075D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000075D4
.text$x:000075D4 ; =============== S U B R O U T I N E =======================================
.text$x:000075D4
.text$x:000075D4
.text$x:000075D4 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:000075D4                                         ; DATA XREF: .xdata$x:00010AF4o
.text$x:000075D4                 mov     ecx, [ebp-10h]  ; this
.text$x:000075D7                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000075D7 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:000075D7
.text$x:000075DC
.text$x:000075DC ; =============== S U B R O U T I N E =======================================
.text$x:000075DC
.text$x:000075DC
.text$x:000075DC __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:000075DC                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:000075DC
.text$x:000075DC arg_4           = dword ptr  8
.text$x:000075DC
.text$x:000075DC                 mov     edx, [esp+arg_4]
.text$x:000075E0                 lea     eax, [edx+0Ch]
.text$x:000075E3                 mov     ecx, [edx-8]
.text$x:000075E6                 xor     ecx, eax
.text$x:000075E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000075ED                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:000075F2                 jmp     ___CxxFrameHandler3
.text$x:000075F2 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:000075F2
.text$x:000075F2 ; ---------------------------------------------------------------------------
.text$x:000075F7                 align 4
.text$x:000075F7 _text$x         ends
.text$x:000075F7
.text$mn:000075F8 ; ===========================================================================
.text$mn:000075F8
.text$mn:000075F8 ; Segment type: Pure code
.text$mn:000075F8 ; Segment permissions: Read/Execute
.text$mn:000075F8 _text$mn        segment para public 'CODE' use32
.text$mn:000075F8                 assume cs:_text$mn
.text$mn:000075F8                 ;org 75F8h
.text$mn:000075F8 ; COMDAT (pick any)
.text$mn:000075F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075F8
.text$mn:000075F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000075F8
.text$mn:000075F8 ; Attributes: bp-based frame
.text$mn:000075F8
.text$mn:000075F8 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:000075F8                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000075F8 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000075F8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:000075F8
.text$mn:000075F8 var_10          = dword ptr -10h
.text$mn:000075F8 var_C           = dword ptr -0Ch
.text$mn:000075F8 var_4           = dword ptr -4
.text$mn:000075F8
.text$mn:000075F8                 push    ebp
.text$mn:000075F9                 mov     ebp, esp
.text$mn:000075FB                 push    0FFFFFFFFh
.text$mn:000075FD                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00007602                 mov     eax, large fs:0
.text$mn:00007608                 push    eax
.text$mn:00007609                 push    ecx
.text$mn:0000760A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000760F                 xor     eax, ebp
.text$mn:00007611                 push    eax
.text$mn:00007612                 lea     eax, [ebp+var_C]
.text$mn:00007615                 mov     large fs:0, eax
.text$mn:0000761B                 mov     [ebp+var_10], ecx
.text$mn:0000761E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007621                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00007626                 mov     [ebp+var_4], 0
.text$mn:0000762D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007634                 mov     eax, [ebp+var_10]
.text$mn:00007637                 mov     ecx, [ebp+var_C]
.text$mn:0000763A                 mov     large fs:0, ecx
.text$mn:00007641                 pop     ecx
.text$mn:00007642                 mov     esp, ebp
.text$mn:00007644                 pop     ebp
.text$mn:00007645                 retn
.text$mn:00007645 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00007645
.text$mn:00007645 ; ---------------------------------------------------------------------------
.text$mn:00007646                 align 4
.text$mn:00007646 _text$mn        ends
.text$mn:00007646
.text$x:00007648 ; ===========================================================================
.text$x:00007648
.text$x:00007648 ; Segment type: Pure code
.text$x:00007648 ; Segment permissions: Read/Execute
.text$x:00007648 _text$x         segment para public 'CODE' use32
.text$x:00007648                 assume cs:_text$x
.text$x:00007648                 ;org 7648h
.text$x:00007648 ; COMDAT (pick associative to section at 75F8)
.text$x:00007648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007648
.text$x:00007648 ; =============== S U B R O U T I N E =======================================
.text$x:00007648
.text$x:00007648
.text$x:00007648 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00007648                                         ; DATA XREF: .xdata$x:00010A9Co
.text$x:00007648                 mov     ecx, [ebp-10h]  ; this
.text$x:0000764B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000764B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000764B
.text$x:00007650
.text$x:00007650 ; =============== S U B R O U T I N E =======================================
.text$x:00007650
.text$x:00007650
.text$x:00007650 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00007650                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00007650
.text$x:00007650 arg_4           = dword ptr  8
.text$x:00007650
.text$x:00007650                 mov     edx, [esp+arg_4]
.text$x:00007654                 lea     eax, [edx+0Ch]
.text$x:00007657                 mov     ecx, [edx-8]
.text$x:0000765A                 xor     ecx, eax
.text$x:0000765C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007661                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00007666                 jmp     ___CxxFrameHandler3
.text$x:00007666 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00007666
.text$x:00007666 ; ---------------------------------------------------------------------------
.text$x:0000766B                 align 4
.text$x:0000766B _text$x         ends
.text$x:0000766B
.text$mn:0000766C ; ===========================================================================
.text$mn:0000766C
.text$mn:0000766C ; Segment type: Pure code
.text$mn:0000766C ; Segment permissions: Read/Execute
.text$mn:0000766C _text$mn        segment para public 'CODE' use32
.text$mn:0000766C                 assume cs:_text$mn
.text$mn:0000766C                 ;org 766Ch
.text$mn:0000766C ; COMDAT (pick any)
.text$mn:0000766C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000766C
.text$mn:0000766C ; =============== S U B R O U T I N E =======================================
.text$mn:0000766C
.text$mn:0000766C ; Attributes: bp-based frame
.text$mn:0000766C
.text$mn:0000766C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:0000766C                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000766C ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:0000766C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:0000766C
.text$mn:0000766C var_10          = dword ptr -10h
.text$mn:0000766C var_C           = dword ptr -0Ch
.text$mn:0000766C var_4           = dword ptr -4
.text$mn:0000766C
.text$mn:0000766C                 push    ebp
.text$mn:0000766D                 mov     ebp, esp
.text$mn:0000766F                 push    0FFFFFFFFh
.text$mn:00007671                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00007676                 mov     eax, large fs:0
.text$mn:0000767C                 push    eax
.text$mn:0000767D                 push    ecx
.text$mn:0000767E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007683                 xor     eax, ebp
.text$mn:00007685                 push    eax
.text$mn:00007686                 lea     eax, [ebp+var_C]
.text$mn:00007689                 mov     large fs:0, eax
.text$mn:0000768F                 mov     [ebp+var_10], ecx
.text$mn:00007692                 mov     ecx, [ebp+var_10]
.text$mn:00007695                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:0000769A                 mov     [ebp+var_4], 0
.text$mn:000076A1                 mov     ecx, [ebp+var_10]
.text$mn:000076A4                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000076A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000076B0                 mov     eax, [ebp+var_10]
.text$mn:000076B3                 mov     ecx, [ebp+var_C]
.text$mn:000076B6                 mov     large fs:0, ecx
.text$mn:000076BD                 pop     ecx
.text$mn:000076BE                 mov     esp, ebp
.text$mn:000076C0                 pop     ebp
.text$mn:000076C1                 retn    4
.text$mn:000076C1 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000076C1
.text$mn:000076C1 _text$mn        ends
.text$mn:000076C1
.text$x:000076C4 ; ===========================================================================
.text$x:000076C4
.text$x:000076C4 ; Segment type: Pure code
.text$x:000076C4 ; Segment permissions: Read/Execute
.text$x:000076C4 _text$x         segment para public 'CODE' use32
.text$x:000076C4                 assume cs:_text$x
.text$x:000076C4                 ;org 76C4h
.text$x:000076C4 ; COMDAT (pick associative to section at 766C)
.text$x:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000076C4
.text$x:000076C4 ; =============== S U B R O U T I N E =======================================
.text$x:000076C4
.text$x:000076C4
.text$x:000076C4 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:000076C4                                         ; DATA XREF: .xdata$x:0000F604o
.text$x:000076C4                 mov     ecx, [ebp-10h]
.text$x:000076C7                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000076C7 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:000076C7
.text$x:000076CC
.text$x:000076CC ; =============== S U B R O U T I N E =======================================
.text$x:000076CC
.text$x:000076CC
.text$x:000076CC __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:000076CC                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:000076CC
.text$x:000076CC arg_4           = dword ptr  8
.text$x:000076CC
.text$x:000076CC                 mov     edx, [esp+arg_4]
.text$x:000076D0                 lea     eax, [edx+0Ch]
.text$x:000076D3                 mov     ecx, [edx-8]
.text$x:000076D6                 xor     ecx, eax
.text$x:000076D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000076DD                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:000076E2                 jmp     ___CxxFrameHandler3
.text$x:000076E2 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:000076E2
.text$x:000076E2 ; ---------------------------------------------------------------------------
.text$x:000076E7                 align 4
.text$x:000076E7 _text$x         ends
.text$x:000076E7
.text$mn:000076E8 ; ===========================================================================
.text$mn:000076E8
.text$mn:000076E8 ; Segment type: Pure code
.text$mn:000076E8 ; Segment permissions: Read/Execute
.text$mn:000076E8 _text$mn        segment para public 'CODE' use32
.text$mn:000076E8                 assume cs:_text$mn
.text$mn:000076E8                 ;org 76E8h
.text$mn:000076E8 ; COMDAT (pick any)
.text$mn:000076E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076E8
.text$mn:000076E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000076E8
.text$mn:000076E8 ; Attributes: bp-based frame
.text$mn:000076E8
.text$mn:000076E8 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000076E8                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000076E8 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000076E8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:000076E8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:000076E8
.text$mn:000076E8 var_10          = dword ptr -10h
.text$mn:000076E8 var_C           = dword ptr -0Ch
.text$mn:000076E8 var_4           = dword ptr -4
.text$mn:000076E8
.text$mn:000076E8                 push    ebp
.text$mn:000076E9                 mov     ebp, esp
.text$mn:000076EB                 push    0FFFFFFFFh
.text$mn:000076ED                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000076F2                 mov     eax, large fs:0
.text$mn:000076F8                 push    eax
.text$mn:000076F9                 push    ecx
.text$mn:000076FA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000076FF                 xor     eax, ebp
.text$mn:00007701                 push    eax
.text$mn:00007702                 lea     eax, [ebp+var_C]
.text$mn:00007705                 mov     large fs:0, eax
.text$mn:0000770B                 mov     [ebp+var_10], ecx
.text$mn:0000770E                 mov     ecx, [ebp+var_10]
.text$mn:00007711                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00007716                 mov     [ebp+var_4], 0
.text$mn:0000771D                 mov     ecx, [ebp+var_10]
.text$mn:00007720                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00007725                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000772C                 mov     eax, [ebp+var_10]
.text$mn:0000772F                 mov     ecx, [ebp+var_C]
.text$mn:00007732                 mov     large fs:0, ecx
.text$mn:00007739                 pop     ecx
.text$mn:0000773A                 mov     esp, ebp
.text$mn:0000773C                 pop     ebp
.text$mn:0000773D                 retn    4
.text$mn:0000773D ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:0000773D
.text$mn:0000773D _text$mn        ends
.text$mn:0000773D
.text$x:00007740 ; ===========================================================================
.text$x:00007740
.text$x:00007740 ; Segment type: Pure code
.text$x:00007740 ; Segment permissions: Read/Execute
.text$x:00007740 _text$x         segment para public 'CODE' use32
.text$x:00007740                 assume cs:_text$x
.text$x:00007740                 ;org 7740h
.text$x:00007740 ; COMDAT (pick associative to section at 76E8)
.text$x:00007740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007740
.text$x:00007740 ; =============== S U B R O U T I N E =======================================
.text$x:00007740
.text$x:00007740
.text$x:00007740 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00007740                                         ; DATA XREF: .xdata$x:0000FBFCo
.text$x:00007740                 mov     ecx, [ebp-10h]
.text$x:00007743                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00007743 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00007743
.text$x:00007748
.text$x:00007748 ; =============== S U B R O U T I N E =======================================
.text$x:00007748
.text$x:00007748
.text$x:00007748 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00007748                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00007748
.text$x:00007748 arg_4           = dword ptr  8
.text$x:00007748
.text$x:00007748                 mov     edx, [esp+arg_4]
.text$x:0000774C                 lea     eax, [edx+0Ch]
.text$x:0000774F                 mov     ecx, [edx-8]
.text$x:00007752                 xor     ecx, eax
.text$x:00007754                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007759                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:0000775E                 jmp     ___CxxFrameHandler3
.text$x:0000775E __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:0000775E
.text$x:0000775E ; ---------------------------------------------------------------------------
.text$x:00007763                 align 4
.text$x:00007763 _text$x         ends
.text$x:00007763
.text$mn:00007764 ; ===========================================================================
.text$mn:00007764
.text$mn:00007764 ; Segment type: Pure code
.text$mn:00007764 ; Segment permissions: Read/Execute
.text$mn:00007764 _text$mn        segment para public 'CODE' use32
.text$mn:00007764                 assume cs:_text$mn
.text$mn:00007764                 ;org 7764h
.text$mn:00007764 ; COMDAT (pick any)
.text$mn:00007764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007764
.text$mn:00007764 ; =============== S U B R O U T I N E =======================================
.text$mn:00007764
.text$mn:00007764 ; Attributes: bp-based frame
.text$mn:00007764
.text$mn:00007764 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00007764                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007764 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007764                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:00007764                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:00007764
.text$mn:00007764 var_10          = dword ptr -10h
.text$mn:00007764 var_C           = dword ptr -0Ch
.text$mn:00007764 var_4           = dword ptr -4
.text$mn:00007764 arg_0           = dword ptr  8
.text$mn:00007764
.text$mn:00007764                 push    ebp
.text$mn:00007765                 mov     ebp, esp
.text$mn:00007767                 push    0FFFFFFFFh
.text$mn:00007769                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000776E                 mov     eax, large fs:0
.text$mn:00007774                 push    eax
.text$mn:00007775                 push    ecx
.text$mn:00007776                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000777B                 xor     eax, ebp
.text$mn:0000777D                 push    eax
.text$mn:0000777E                 lea     eax, [ebp+var_C]
.text$mn:00007781                 mov     large fs:0, eax
.text$mn:00007787                 mov     [ebp+var_10], ecx
.text$mn:0000778A                 mov     eax, [ebp+arg_0]
.text$mn:0000778D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000778E                 mov     ecx, [ebp+var_10]
.text$mn:00007791                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:00007796                 mov     [ebp+var_4], 0
.text$mn:0000779D                 mov     ecx, [ebp+var_10]
.text$mn:000077A0                 mov     edx, [ebp+arg_0]
.text$mn:000077A3                 mov     eax, [edx+8]
.text$mn:000077A6                 mov     [ecx+8], eax
.text$mn:000077A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000077B0                 mov     eax, [ebp+var_10]
.text$mn:000077B3                 mov     ecx, [ebp+var_C]
.text$mn:000077B6                 mov     large fs:0, ecx
.text$mn:000077BD                 pop     ecx
.text$mn:000077BE                 mov     esp, ebp
.text$mn:000077C0                 pop     ebp
.text$mn:000077C1                 retn    4
.text$mn:000077C1 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000077C1
.text$mn:000077C1 _text$mn        ends
.text$mn:000077C1
.text$x:000077C4 ; ===========================================================================
.text$x:000077C4
.text$x:000077C4 ; Segment type: Pure code
.text$x:000077C4 ; Segment permissions: Read/Execute
.text$x:000077C4 _text$x         segment para public 'CODE' use32
.text$x:000077C4                 assume cs:_text$x
.text$x:000077C4                 ;org 77C4h
.text$x:000077C4 ; COMDAT (pick associative to section at 7764)
.text$x:000077C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000077C4
.text$x:000077C4 ; =============== S U B R O U T I N E =======================================
.text$x:000077C4
.text$x:000077C4
.text$x:000077C4 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000077C4                                         ; DATA XREF: .xdata$x:00010B78o
.text$x:000077C4                 mov     ecx, [ebp-10h]
.text$x:000077C7                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:000077C7 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:000077C7
.text$x:000077CC
.text$x:000077CC ; =============== S U B R O U T I N E =======================================
.text$x:000077CC
.text$x:000077CC
.text$x:000077CC __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:000077CC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:000077CC
.text$x:000077CC arg_4           = dword ptr  8
.text$x:000077CC
.text$x:000077CC                 mov     edx, [esp+arg_4]
.text$x:000077D0                 lea     eax, [edx+0Ch]
.text$x:000077D3                 mov     ecx, [edx-8]
.text$x:000077D6                 xor     ecx, eax
.text$x:000077D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000077DD                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000077E2                 jmp     ___CxxFrameHandler3
.text$x:000077E2 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000077E2
.text$x:000077E2 ; ---------------------------------------------------------------------------
.text$x:000077E7                 align 4
.text$x:000077E7 _text$x         ends
.text$x:000077E7
.text$mn:000077E8 ; ===========================================================================
.text$mn:000077E8
.text$mn:000077E8 ; Segment type: Pure code
.text$mn:000077E8 ; Segment permissions: Read/Execute
.text$mn:000077E8 _text$mn        segment para public 'CODE' use32
.text$mn:000077E8                 assume cs:_text$mn
.text$mn:000077E8                 ;org 77E8h
.text$mn:000077E8 ; COMDAT (pick any)
.text$mn:000077E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077E8
.text$mn:000077E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000077E8
.text$mn:000077E8 ; Attributes: bp-based frame
.text$mn:000077E8
.text$mn:000077E8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000077E8                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000077E8 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:000077E8                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:000077E8
.text$mn:000077E8 var_10          = dword ptr -10h
.text$mn:000077E8 var_C           = dword ptr -0Ch
.text$mn:000077E8 var_4           = dword ptr -4
.text$mn:000077E8 arg_0           = dword ptr  8
.text$mn:000077E8 arg_4           = dword ptr  0Ch
.text$mn:000077E8
.text$mn:000077E8                 push    ebp
.text$mn:000077E9                 mov     ebp, esp
.text$mn:000077EB                 push    0FFFFFFFFh
.text$mn:000077ED                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000077F2                 mov     eax, large fs:0
.text$mn:000077F8                 push    eax
.text$mn:000077F9                 push    ecx
.text$mn:000077FA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000077FF                 xor     eax, ebp
.text$mn:00007801                 push    eax
.text$mn:00007802                 lea     eax, [ebp+var_C]
.text$mn:00007805                 mov     large fs:0, eax
.text$mn:0000780B                 mov     [ebp+var_10], ecx
.text$mn:0000780E                 mov     ecx, [ebp+var_10]
.text$mn:00007811                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00007816                 mov     [ebp+var_4], 0
.text$mn:0000781D                 mov     eax, [ebp+arg_4]
.text$mn:00007820                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007821                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007824                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00007829                 mov     ecx, [ebp+var_10]
.text$mn:0000782C                 mov     edx, [ebp+arg_0]
.text$mn:0000782F                 mov     [ecx+8], edx
.text$mn:00007832                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007839                 mov     eax, [ebp+var_10]
.text$mn:0000783C                 mov     ecx, [ebp+var_C]
.text$mn:0000783F                 mov     large fs:0, ecx
.text$mn:00007846                 pop     ecx
.text$mn:00007847                 mov     esp, ebp
.text$mn:00007849                 pop     ebp
.text$mn:0000784A                 retn    8
.text$mn:0000784A ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:0000784A
.text$mn:0000784A ; ---------------------------------------------------------------------------
.text$mn:0000784D                 align 10h
.text$mn:0000784D _text$mn        ends
.text$mn:0000784D
.text$x:00007850 ; ===========================================================================
.text$x:00007850
.text$x:00007850 ; Segment type: Pure code
.text$x:00007850 ; Segment permissions: Read/Execute
.text$x:00007850 _text$x         segment para public 'CODE' use32
.text$x:00007850                 assume cs:_text$x
.text$x:00007850                 ;org 7850h
.text$x:00007850 ; COMDAT (pick associative to section at 77E8)
.text$x:00007850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007850
.text$x:00007850 ; =============== S U B R O U T I N E =======================================
.text$x:00007850
.text$x:00007850
.text$x:00007850 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00007850                                         ; DATA XREF: .xdata$x:00010B20o
.text$x:00007850                 mov     ecx, [ebp-10h]
.text$x:00007853                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00007853 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00007853
.text$x:00007858
.text$x:00007858 ; =============== S U B R O U T I N E =======================================
.text$x:00007858
.text$x:00007858
.text$x:00007858 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00007858                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00007858
.text$x:00007858 arg_4           = dword ptr  8
.text$x:00007858
.text$x:00007858                 mov     edx, [esp+arg_4]
.text$x:0000785C                 lea     eax, [edx+0Ch]
.text$x:0000785F                 mov     ecx, [edx-8]
.text$x:00007862                 xor     ecx, eax
.text$x:00007864                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007869                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:0000786E                 jmp     ___CxxFrameHandler3
.text$x:0000786E __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:0000786E
.text$x:0000786E ; ---------------------------------------------------------------------------
.text$x:00007873                 align 4
.text$x:00007873 _text$x         ends
.text$x:00007873
.text$mn:00007874 ; ===========================================================================
.text$mn:00007874
.text$mn:00007874 ; Segment type: Pure code
.text$mn:00007874 ; Segment permissions: Read/Execute
.text$mn:00007874 _text$mn        segment para public 'CODE' use32
.text$mn:00007874                 assume cs:_text$mn
.text$mn:00007874                 ;org 7874h
.text$mn:00007874 ; COMDAT (pick any)
.text$mn:00007874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007874
.text$mn:00007874 ; =============== S U B R O U T I N E =======================================
.text$mn:00007874
.text$mn:00007874 ; Attributes: bp-based frame
.text$mn:00007874
.text$mn:00007874 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00007874                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007874 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007874                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:00007874                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:00007874
.text$mn:00007874 var_10          = dword ptr -10h
.text$mn:00007874 var_C           = dword ptr -0Ch
.text$mn:00007874 var_4           = dword ptr -4
.text$mn:00007874 arg_0           = dword ptr  8
.text$mn:00007874
.text$mn:00007874                 push    ebp
.text$mn:00007875                 mov     ebp, esp
.text$mn:00007877                 push    0FFFFFFFFh
.text$mn:00007879                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:0000787E                 mov     eax, large fs:0
.text$mn:00007884                 push    eax
.text$mn:00007885                 push    ecx
.text$mn:00007886                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000788B                 xor     eax, ebp
.text$mn:0000788D                 push    eax
.text$mn:0000788E                 lea     eax, [ebp+var_C]
.text$mn:00007891                 mov     large fs:0, eax
.text$mn:00007897                 mov     [ebp+var_10], ecx
.text$mn:0000789A                 mov     eax, [ebp+arg_0]
.text$mn:0000789D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000789E                 mov     ecx, [ebp+var_10]
.text$mn:000078A1                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000078A6                 mov     [ebp+var_4], 0
.text$mn:000078AD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000078B4                 mov     eax, [ebp+var_10]
.text$mn:000078B7                 mov     ecx, [ebp+var_C]
.text$mn:000078BA                 mov     large fs:0, ecx
.text$mn:000078C1                 pop     ecx
.text$mn:000078C2                 mov     esp, ebp
.text$mn:000078C4                 pop     ebp
.text$mn:000078C5                 retn    4
.text$mn:000078C5 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000078C5
.text$mn:000078C5 _text$mn        ends
.text$mn:000078C5
.text$x:000078C8 ; ===========================================================================
.text$x:000078C8
.text$x:000078C8 ; Segment type: Pure code
.text$x:000078C8 ; Segment permissions: Read/Execute
.text$x:000078C8 _text$x         segment para public 'CODE' use32
.text$x:000078C8                 assume cs:_text$x
.text$x:000078C8                 ;org 78C8h
.text$x:000078C8 ; COMDAT (pick associative to section at 7874)
.text$x:000078C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000078C8
.text$x:000078C8 ; =============== S U B R O U T I N E =======================================
.text$x:000078C8
.text$x:000078C8
.text$x:000078C8 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000078C8                                         ; DATA XREF: .xdata$x:00010C28o
.text$x:000078C8                 mov     ecx, [ebp-10h]
.text$x:000078CB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000078CB __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:000078CB
.text$x:000078D0
.text$x:000078D0 ; =============== S U B R O U T I N E =======================================
.text$x:000078D0
.text$x:000078D0
.text$x:000078D0 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:000078D0                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:000078D0
.text$x:000078D0 arg_4           = dword ptr  8
.text$x:000078D0
.text$x:000078D0                 mov     edx, [esp+arg_4]
.text$x:000078D4                 lea     eax, [edx+0Ch]
.text$x:000078D7                 mov     ecx, [edx-8]
.text$x:000078DA                 xor     ecx, eax
.text$x:000078DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000078E1                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000078E6                 jmp     ___CxxFrameHandler3
.text$x:000078E6 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000078E6
.text$x:000078E6 ; ---------------------------------------------------------------------------
.text$x:000078EB                 align 4
.text$x:000078EB _text$x         ends
.text$x:000078EB
.text$mn:000078EC ; ===========================================================================
.text$mn:000078EC
.text$mn:000078EC ; Segment type: Pure code
.text$mn:000078EC ; Segment permissions: Read/Execute
.text$mn:000078EC _text$mn        segment para public 'CODE' use32
.text$mn:000078EC                 assume cs:_text$mn
.text$mn:000078EC                 ;org 78ECh
.text$mn:000078EC ; COMDAT (pick any)
.text$mn:000078EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078EC
.text$mn:000078EC ; =============== S U B R O U T I N E =======================================
.text$mn:000078EC
.text$mn:000078EC ; Attributes: bp-based frame
.text$mn:000078EC
.text$mn:000078EC ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000078EC                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000078EC ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:000078EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:000078EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:000078EC
.text$mn:000078EC var_10          = dword ptr -10h
.text$mn:000078EC var_C           = dword ptr -0Ch
.text$mn:000078EC var_4           = dword ptr -4
.text$mn:000078EC arg_0           = dword ptr  8
.text$mn:000078EC arg_4           = dword ptr  0Ch
.text$mn:000078EC
.text$mn:000078EC                 push    ebp
.text$mn:000078ED                 mov     ebp, esp
.text$mn:000078EF                 push    0FFFFFFFFh
.text$mn:000078F1                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000078F6                 mov     eax, large fs:0
.text$mn:000078FC                 push    eax
.text$mn:000078FD                 push    ecx
.text$mn:000078FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007903                 xor     eax, ebp
.text$mn:00007905                 push    eax
.text$mn:00007906                 lea     eax, [ebp+var_C]
.text$mn:00007909                 mov     large fs:0, eax
.text$mn:0000790F                 mov     [ebp+var_10], ecx
.text$mn:00007912                 mov     eax, [ebp+arg_4]
.text$mn:00007915                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007916                 mov     ecx, [ebp+arg_0]
.text$mn:00007919                 push    ecx             ; int
.text$mn:0000791A                 mov     ecx, [ebp+var_10]
.text$mn:0000791D                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:00007922                 mov     [ebp+var_4], 0
.text$mn:00007929                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007930                 mov     eax, [ebp+var_10]
.text$mn:00007933                 mov     ecx, [ebp+var_C]
.text$mn:00007936                 mov     large fs:0, ecx
.text$mn:0000793D                 pop     ecx
.text$mn:0000793E                 mov     esp, ebp
.text$mn:00007940                 pop     ebp
.text$mn:00007941                 retn    8
.text$mn:00007941 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:00007941
.text$mn:00007941 _text$mn        ends
.text$mn:00007941
.text$x:00007944 ; ===========================================================================
.text$x:00007944
.text$x:00007944 ; Segment type: Pure code
.text$x:00007944 ; Segment permissions: Read/Execute
.text$x:00007944 _text$x         segment para public 'CODE' use32
.text$x:00007944                 assume cs:_text$x
.text$x:00007944                 ;org 7944h
.text$x:00007944 ; COMDAT (pick associative to section at 78EC)
.text$x:00007944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007944
.text$x:00007944 ; =============== S U B R O U T I N E =======================================
.text$x:00007944
.text$x:00007944
.text$x:00007944 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00007944                                         ; DATA XREF: .xdata$x:00010BA4o
.text$x:00007944                 mov     ecx, [ebp-10h]
.text$x:00007947                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007947 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:00007947
.text$x:0000794C
.text$x:0000794C ; =============== S U B R O U T I N E =======================================
.text$x:0000794C
.text$x:0000794C
.text$x:0000794C __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:0000794C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:0000794C
.text$x:0000794C arg_4           = dword ptr  8
.text$x:0000794C
.text$x:0000794C                 mov     edx, [esp+arg_4]
.text$x:00007950                 lea     eax, [edx+0Ch]
.text$x:00007953                 mov     ecx, [edx-8]
.text$x:00007956                 xor     ecx, eax
.text$x:00007958                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000795D                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:00007962                 jmp     ___CxxFrameHandler3
.text$x:00007962 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:00007962
.text$x:00007962 ; ---------------------------------------------------------------------------
.text$x:00007967                 align 4
.text$x:00007967 _text$x         ends
.text$x:00007967
.text$mn:00007968 ; ===========================================================================
.text$mn:00007968
.text$mn:00007968 ; Segment type: Pure code
.text$mn:00007968 ; Segment permissions: Read/Execute
.text$mn:00007968 _text$mn        segment para public 'CODE' use32
.text$mn:00007968                 assume cs:_text$mn
.text$mn:00007968                 ;org 7968h
.text$mn:00007968 ; COMDAT (pick any)
.text$mn:00007968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007968
.text$mn:00007968 ; =============== S U B R O U T I N E =======================================
.text$mn:00007968
.text$mn:00007968 ; Attributes: bp-based frame
.text$mn:00007968
.text$mn:00007968 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00007968                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00007968 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00007968                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00007968
.text$mn:00007968 var_10          = dword ptr -10h
.text$mn:00007968 var_C           = dword ptr -0Ch
.text$mn:00007968 var_4           = dword ptr -4
.text$mn:00007968
.text$mn:00007968                 push    ebp
.text$mn:00007969                 mov     ebp, esp
.text$mn:0000796B                 push    0FFFFFFFFh
.text$mn:0000796D                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00007972                 mov     eax, large fs:0
.text$mn:00007978                 push    eax
.text$mn:00007979                 push    ecx
.text$mn:0000797A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000797F                 xor     eax, ebp
.text$mn:00007981                 push    eax
.text$mn:00007982                 lea     eax, [ebp+var_C]
.text$mn:00007985                 mov     large fs:0, eax
.text$mn:0000798B                 mov     [ebp+var_10], ecx
.text$mn:0000798E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007991                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00007996                 mov     [ebp+var_4], 0
.text$mn:0000799D                 mov     eax, [ebp+var_10]
.text$mn:000079A0                 mov     dword ptr [eax+14h], 0
.text$mn:000079A7                 mov     ecx, [ebp+var_10]
.text$mn:000079AA                 mov     dword ptr [ecx+18h], 0
.text$mn:000079B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000079B8                 mov     eax, [ebp+var_10]
.text$mn:000079BB                 mov     ecx, [ebp+var_C]
.text$mn:000079BE                 mov     large fs:0, ecx
.text$mn:000079C5                 pop     ecx
.text$mn:000079C6                 mov     esp, ebp
.text$mn:000079C8                 pop     ebp
.text$mn:000079C9                 retn
.text$mn:000079C9 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000079C9
.text$mn:000079C9 ; ---------------------------------------------------------------------------
.text$mn:000079CA                 align 4
.text$mn:000079CA _text$mn        ends
.text$mn:000079CA
.text$x:000079CC ; ===========================================================================
.text$x:000079CC
.text$x:000079CC ; Segment type: Pure code
.text$x:000079CC ; Segment permissions: Read/Execute
.text$x:000079CC _text$x         segment para public 'CODE' use32
.text$x:000079CC                 assume cs:_text$x
.text$x:000079CC                 ;org 79CCh
.text$x:000079CC ; COMDAT (pick associative to section at 7968)
.text$x:000079CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000079CC
.text$x:000079CC ; =============== S U B R O U T I N E =======================================
.text$x:000079CC
.text$x:000079CC
.text$x:000079CC __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000079CC                                         ; DATA XREF: .xdata$x:0000F5ACo
.text$x:000079CC                 mov     ecx, [ebp-10h]  ; this
.text$x:000079CF                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000079CF __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000079CF
.text$x:000079D4
.text$x:000079D4 ; =============== S U B R O U T I N E =======================================
.text$x:000079D4
.text$x:000079D4
.text$x:000079D4 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000079D4                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000079D4
.text$x:000079D4 arg_4           = dword ptr  8
.text$x:000079D4
.text$x:000079D4                 mov     edx, [esp+arg_4]
.text$x:000079D8                 lea     eax, [edx+0Ch]
.text$x:000079DB                 mov     ecx, [edx-8]
.text$x:000079DE                 xor     ecx, eax
.text$x:000079E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000079E5                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000079EA                 jmp     ___CxxFrameHandler3
.text$x:000079EA __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000079EA
.text$x:000079EA ; ---------------------------------------------------------------------------
.text$x:000079EF                 align 10h
.text$x:000079EF _text$x         ends
.text$x:000079EF
.text$mn:000079F0 ; ===========================================================================
.text$mn:000079F0
.text$mn:000079F0 ; Segment type: Pure code
.text$mn:000079F0 ; Segment permissions: Read/Execute
.text$mn:000079F0 _text$mn        segment para public 'CODE' use32
.text$mn:000079F0                 assume cs:_text$mn
.text$mn:000079F0                 ;org 79F0h
.text$mn:000079F0 ; COMDAT (pick any)
.text$mn:000079F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079F0
.text$mn:000079F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000079F0
.text$mn:000079F0 ; Attributes: bp-based frame
.text$mn:000079F0
.text$mn:000079F0 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000079F0                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000079F0 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000079F0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000079F0
.text$mn:000079F0 var_10          = dword ptr -10h
.text$mn:000079F0 var_C           = dword ptr -0Ch
.text$mn:000079F0 var_4           = dword ptr -4
.text$mn:000079F0
.text$mn:000079F0                 push    ebp
.text$mn:000079F1                 mov     ebp, esp
.text$mn:000079F3                 push    0FFFFFFFFh
.text$mn:000079F5                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000079FA                 mov     eax, large fs:0
.text$mn:00007A00                 push    eax
.text$mn:00007A01                 push    ecx
.text$mn:00007A02                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A07                 xor     eax, ebp
.text$mn:00007A09                 push    eax
.text$mn:00007A0A                 lea     eax, [ebp+var_C]
.text$mn:00007A0D                 mov     large fs:0, eax
.text$mn:00007A13                 mov     [ebp+var_10], ecx
.text$mn:00007A16                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007A19                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00007A1E                 mov     [ebp+var_4], 0
.text$mn:00007A25                 mov     eax, [ebp+var_10]
.text$mn:00007A28                 mov     dword ptr [eax+14h], 0
.text$mn:00007A2F                 mov     ecx, [ebp+var_10]
.text$mn:00007A32                 mov     dword ptr [ecx+18h], 0
.text$mn:00007A39                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007A40                 mov     eax, [ebp+var_10]
.text$mn:00007A43                 mov     ecx, [ebp+var_C]
.text$mn:00007A46                 mov     large fs:0, ecx
.text$mn:00007A4D                 pop     ecx
.text$mn:00007A4E                 mov     esp, ebp
.text$mn:00007A50                 pop     ebp
.text$mn:00007A51                 retn
.text$mn:00007A51 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00007A51
.text$mn:00007A51 ; ---------------------------------------------------------------------------
.text$mn:00007A52                 align 4
.text$mn:00007A52 _text$mn        ends
.text$mn:00007A52
.text$x:00007A54 ; ===========================================================================
.text$x:00007A54
.text$x:00007A54 ; Segment type: Pure code
.text$x:00007A54 ; Segment permissions: Read/Execute
.text$x:00007A54 _text$x         segment para public 'CODE' use32
.text$x:00007A54                 assume cs:_text$x
.text$x:00007A54                 ;org 7A54h
.text$x:00007A54 ; COMDAT (pick associative to section at 79F0)
.text$x:00007A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A54
.text$x:00007A54 ; =============== S U B R O U T I N E =======================================
.text$x:00007A54
.text$x:00007A54
.text$x:00007A54 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00007A54                                         ; DATA XREF: .xdata$x:0000FBA4o
.text$x:00007A54                 mov     ecx, [ebp-10h]  ; this
.text$x:00007A57                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00007A57 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00007A57
.text$x:00007A5C
.text$x:00007A5C ; =============== S U B R O U T I N E =======================================
.text$x:00007A5C
.text$x:00007A5C
.text$x:00007A5C __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00007A5C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00007A5C
.text$x:00007A5C arg_4           = dword ptr  8
.text$x:00007A5C
.text$x:00007A5C                 mov     edx, [esp+arg_4]
.text$x:00007A60                 lea     eax, [edx+0Ch]
.text$x:00007A63                 mov     ecx, [edx-8]
.text$x:00007A66                 xor     ecx, eax
.text$x:00007A68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007A6D                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00007A72                 jmp     ___CxxFrameHandler3
.text$x:00007A72 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00007A72
.text$x:00007A72 ; ---------------------------------------------------------------------------
.text$x:00007A77                 align 4
.text$x:00007A77 _text$x         ends
.text$x:00007A77
.text$mn:00007A78 ; ===========================================================================
.text$mn:00007A78
.text$mn:00007A78 ; Segment type: Pure code
.text$mn:00007A78 ; Segment permissions: Read/Execute
.text$mn:00007A78 _text$mn        segment para public 'CODE' use32
.text$mn:00007A78                 assume cs:_text$mn
.text$mn:00007A78                 ;org 7A78h
.text$mn:00007A78 ; COMDAT (pick any)
.text$mn:00007A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A78
.text$mn:00007A78 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A78
.text$mn:00007A78 ; Attributes: bp-based frame
.text$mn:00007A78
.text$mn:00007A78 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00007A78                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00007A78 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00007A78                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+34p
.text$mn:00007A78
.text$mn:00007A78 var_10          = dword ptr -10h
.text$mn:00007A78 var_C           = dword ptr -0Ch
.text$mn:00007A78 var_4           = dword ptr -4
.text$mn:00007A78
.text$mn:00007A78                 push    ebp
.text$mn:00007A79                 mov     ebp, esp
.text$mn:00007A7B                 push    0FFFFFFFFh
.text$mn:00007A7D                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00007A82                 mov     eax, large fs:0
.text$mn:00007A88                 push    eax
.text$mn:00007A89                 push    ecx
.text$mn:00007A8A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A8F                 xor     eax, ebp
.text$mn:00007A91                 push    eax
.text$mn:00007A92                 lea     eax, [ebp+var_C]
.text$mn:00007A95                 mov     large fs:0, eax
.text$mn:00007A9B                 mov     [ebp+var_10], ecx
.text$mn:00007A9E                 mov     ecx, [ebp+var_10]
.text$mn:00007AA1                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007AA6                 mov     [ebp+var_4], 0
.text$mn:00007AAD                 mov     ecx, [ebp+var_10]
.text$mn:00007AB0                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00007AB5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007ABC                 mov     eax, [ebp+var_10]
.text$mn:00007ABF                 mov     ecx, [ebp+var_C]
.text$mn:00007AC2                 mov     large fs:0, ecx
.text$mn:00007AC9                 pop     ecx
.text$mn:00007ACA                 mov     esp, ebp
.text$mn:00007ACC                 pop     ebp
.text$mn:00007ACD                 retn    4
.text$mn:00007ACD ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00007ACD
.text$mn:00007ACD _text$mn        ends
.text$mn:00007ACD
.text$x:00007AD0 ; ===========================================================================
.text$x:00007AD0
.text$x:00007AD0 ; Segment type: Pure code
.text$x:00007AD0 ; Segment permissions: Read/Execute
.text$x:00007AD0 _text$x         segment para public 'CODE' use32
.text$x:00007AD0                 assume cs:_text$x
.text$x:00007AD0                 ;org 7AD0h
.text$x:00007AD0 ; COMDAT (pick associative to section at 7A78)
.text$x:00007AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007AD0
.text$x:00007AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00007AD0
.text$x:00007AD0
.text$x:00007AD0 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00007AD0                                         ; DATA XREF: .xdata$x:00010018o
.text$x:00007AD0                 mov     ecx, [ebp-10h]
.text$x:00007AD3                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007AD3 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00007AD3
.text$x:00007AD8
.text$x:00007AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00007AD8
.text$x:00007AD8
.text$x:00007AD8 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00007AD8                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00007AD8
.text$x:00007AD8 arg_4           = dword ptr  8
.text$x:00007AD8
.text$x:00007AD8                 mov     edx, [esp+arg_4]
.text$x:00007ADC                 lea     eax, [edx+0Ch]
.text$x:00007ADF                 mov     ecx, [edx-8]
.text$x:00007AE2                 xor     ecx, eax
.text$x:00007AE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007AE9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:00007AEE                 jmp     ___CxxFrameHandler3
.text$x:00007AEE __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:00007AEE
.text$x:00007AEE ; ---------------------------------------------------------------------------
.text$x:00007AF3                 align 4
.text$x:00007AF3 _text$x         ends
.text$x:00007AF3
.text$mn:00007AF4 ; ===========================================================================
.text$mn:00007AF4
.text$mn:00007AF4 ; Segment type: Pure code
.text$mn:00007AF4 ; Segment permissions: Read/Execute
.text$mn:00007AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00007AF4                 assume cs:_text$mn
.text$mn:00007AF4                 ;org 7AF4h
.text$mn:00007AF4 ; COMDAT (pick any)
.text$mn:00007AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AF4
.text$mn:00007AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AF4
.text$mn:00007AF4 ; Attributes: bp-based frame
.text$mn:00007AF4
.text$mn:00007AF4 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(struct std::_Iterator_base12 *)
.text$mn:00007AF4                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007AF4 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007AF4                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+117p
.text$mn:00007AF4                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+1B2p ...
.text$mn:00007AF4
.text$mn:00007AF4 var_10          = dword ptr -10h
.text$mn:00007AF4 var_C           = dword ptr -0Ch
.text$mn:00007AF4 var_4           = dword ptr -4
.text$mn:00007AF4 arg_0           = dword ptr  8
.text$mn:00007AF4
.text$mn:00007AF4                 push    ebp
.text$mn:00007AF5                 mov     ebp, esp
.text$mn:00007AF7                 push    0FFFFFFFFh
.text$mn:00007AF9                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007AFE                 mov     eax, large fs:0
.text$mn:00007B04                 push    eax
.text$mn:00007B05                 push    ecx
.text$mn:00007B06                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007B0B                 xor     eax, ebp
.text$mn:00007B0D                 push    eax
.text$mn:00007B0E                 lea     eax, [ebp+var_C]
.text$mn:00007B11                 mov     large fs:0, eax
.text$mn:00007B17                 mov     [ebp+var_10], ecx
.text$mn:00007B1A                 mov     eax, [ebp+arg_0]
.text$mn:00007B1D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00007B1E                 mov     ecx, [ebp+var_10]
.text$mn:00007B21                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12> const &)
.text$mn:00007B26                 mov     [ebp+var_4], 0
.text$mn:00007B2D                 mov     ecx, [ebp+var_10]
.text$mn:00007B30                 mov     edx, [ebp+arg_0]
.text$mn:00007B33                 mov     eax, [edx+8]
.text$mn:00007B36                 mov     [ecx+8], eax
.text$mn:00007B39                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007B40                 mov     eax, [ebp+var_10]
.text$mn:00007B43                 mov     ecx, [ebp+var_C]
.text$mn:00007B46                 mov     large fs:0, ecx
.text$mn:00007B4D                 pop     ecx
.text$mn:00007B4E                 mov     esp, ebp
.text$mn:00007B50                 pop     ebp
.text$mn:00007B51                 retn    4
.text$mn:00007B51 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00007B51
.text$mn:00007B51 _text$mn        ends
.text$mn:00007B51
.text$x:00007B54 ; ===========================================================================
.text$x:00007B54
.text$x:00007B54 ; Segment type: Pure code
.text$x:00007B54 ; Segment permissions: Read/Execute
.text$x:00007B54 _text$x         segment para public 'CODE' use32
.text$x:00007B54                 assume cs:_text$x
.text$x:00007B54                 ;org 7B54h
.text$x:00007B54 ; COMDAT (pick associative to section at 7AF4)
.text$x:00007B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007B54
.text$x:00007B54 ; =============== S U B R O U T I N E =======================================
.text$x:00007B54
.text$x:00007B54
.text$x:00007B54 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00007B54                                         ; DATA XREF: .xdata$x:000109B8o
.text$x:00007B54                 mov     ecx, [ebp-10h]
.text$x:00007B57                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)
.text$x:00007B57 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00007B57
.text$x:00007B5C
.text$x:00007B5C ; =============== S U B R O U T I N E =======================================
.text$x:00007B5C
.text$x:00007B5C
.text$x:00007B5C __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00007B5C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)+5o
.text$x:00007B5C
.text$x:00007B5C arg_4           = dword ptr  8
.text$x:00007B5C
.text$x:00007B5C                 mov     edx, [esp+arg_4]
.text$x:00007B60                 lea     eax, [edx+0Ch]
.text$x:00007B63                 mov     ecx, [edx-8]
.text$x:00007B66                 xor     ecx, eax
.text$x:00007B68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B6D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00007B72                 jmp     ___CxxFrameHandler3
.text$x:00007B72 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00007B72
.text$x:00007B72 ; ---------------------------------------------------------------------------
.text$x:00007B77                 align 4
.text$x:00007B77 _text$x         ends
.text$x:00007B77
.text$mn:00007B78 ; ===========================================================================
.text$mn:00007B78
.text$mn:00007B78 ; Segment type: Pure code
.text$mn:00007B78 ; Segment permissions: Read/Execute
.text$mn:00007B78 _text$mn        segment para public 'CODE' use32
.text$mn:00007B78                 assume cs:_text$mn
.text$mn:00007B78                 ;org 7B78h
.text$mn:00007B78 ; COMDAT (pick any)
.text$mn:00007B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B78
.text$mn:00007B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B78
.text$mn:00007B78 ; Attributes: bp-based frame
.text$mn:00007B78
.text$mn:00007B78 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(int, struct std::_Container_base12 *)
.text$mn:00007B78                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$mn:00007B78 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z proc near
.text$mn:00007B78                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)+31p
.text$mn:00007B78
.text$mn:00007B78 var_10          = dword ptr -10h
.text$mn:00007B78 var_C           = dword ptr -0Ch
.text$mn:00007B78 var_4           = dword ptr -4
.text$mn:00007B78 arg_0           = dword ptr  8
.text$mn:00007B78 arg_4           = dword ptr  0Ch
.text$mn:00007B78
.text$mn:00007B78                 push    ebp
.text$mn:00007B79                 mov     ebp, esp
.text$mn:00007B7B                 push    0FFFFFFFFh
.text$mn:00007B7D                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$mn:00007B82                 mov     eax, large fs:0
.text$mn:00007B88                 push    eax
.text$mn:00007B89                 push    ecx
.text$mn:00007B8A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007B8F                 xor     eax, ebp
.text$mn:00007B91                 push    eax
.text$mn:00007B92                 lea     eax, [ebp+var_C]
.text$mn:00007B95                 mov     large fs:0, eax
.text$mn:00007B9B                 mov     [ebp+var_10], ecx
.text$mn:00007B9E                 mov     ecx, [ebp+var_10]
.text$mn:00007BA1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)
.text$mn:00007BA6                 mov     [ebp+var_4], 0
.text$mn:00007BAD                 mov     eax, [ebp+var_10]
.text$mn:00007BB0                 mov     ecx, [ebp+arg_0]
.text$mn:00007BB3                 mov     [eax+8], ecx
.text$mn:00007BB6                 mov     edx, [ebp+arg_4]
.text$mn:00007BB9                 push    edx             ; struct std::_Container_base12 *
.text$mn:00007BBA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007BBD                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00007BC2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007BC9                 mov     eax, [ebp+var_10]
.text$mn:00007BCC                 mov     ecx, [ebp+var_C]
.text$mn:00007BCF                 mov     large fs:0, ecx
.text$mn:00007BD6                 pop     ecx
.text$mn:00007BD7                 mov     esp, ebp
.text$mn:00007BD9                 pop     ebp
.text$mn:00007BDA                 retn    8
.text$mn:00007BDA ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z endp
.text$mn:00007BDA
.text$mn:00007BDA ; ---------------------------------------------------------------------------
.text$mn:00007BDD                 align 10h
.text$mn:00007BDD _text$mn        ends
.text$mn:00007BDD
.text$x:00007BE0 ; ===========================================================================
.text$x:00007BE0
.text$x:00007BE0 ; Segment type: Pure code
.text$x:00007BE0 ; Segment permissions: Read/Execute
.text$x:00007BE0 _text$x         segment para public 'CODE' use32
.text$x:00007BE0                 assume cs:_text$x
.text$x:00007BE0                 ;org 7BE0h
.text$x:00007BE0 ; COMDAT (pick associative to section at 7B78)
.text$x:00007BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007BE0
.text$x:00007BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00007BE0
.text$x:00007BE0
.text$x:00007BE0 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0 proc near
.text$x:00007BE0                                         ; DATA XREF: .xdata$x:00010960o
.text$x:00007BE0                 mov     ecx, [ebp-10h]
.text$x:00007BE3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)
.text$x:00007BE3 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0 endp
.text$x:00007BE3
.text$x:00007BE8
.text$x:00007BE8 ; =============== S U B R O U T I N E =======================================
.text$x:00007BE8
.text$x:00007BE8
.text$x:00007BE8 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z proc near
.text$x:00007BE8                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)+5o
.text$x:00007BE8
.text$x:00007BE8 arg_4           = dword ptr  8
.text$x:00007BE8
.text$x:00007BE8                 mov     edx, [esp+arg_4]
.text$x:00007BEC                 lea     eax, [edx+0Ch]
.text$x:00007BEF                 mov     ecx, [edx-8]
.text$x:00007BF2                 xor     ecx, eax
.text$x:00007BF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007BF9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$x:00007BFE                 jmp     ___CxxFrameHandler3
.text$x:00007BFE __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z endp
.text$x:00007BFE
.text$x:00007BFE ; ---------------------------------------------------------------------------
.text$x:00007C03                 align 4
.text$x:00007C03 _text$x         ends
.text$x:00007C03
.text$mn:00007C04 ; ===========================================================================
.text$mn:00007C04
.text$mn:00007C04 ; Segment type: Pure code
.text$mn:00007C04 ; Segment permissions: Read/Execute
.text$mn:00007C04 _text$mn        segment para public 'CODE' use32
.text$mn:00007C04                 assume cs:_text$mn
.text$mn:00007C04                 ;org 7C04h
.text$mn:00007C04 ; COMDAT (pick any)
.text$mn:00007C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C04
.text$mn:00007C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C04
.text$mn:00007C04 ; Attributes: bp-based frame
.text$mn:00007C04
.text$mn:00007C04 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(struct std::_Iterator_base12 *)
.text$mn:00007C04                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007C04 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007C04                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Dp
.text$mn:00007C04
.text$mn:00007C04 var_10          = dword ptr -10h
.text$mn:00007C04 var_C           = dword ptr -0Ch
.text$mn:00007C04 var_4           = dword ptr -4
.text$mn:00007C04 arg_0           = dword ptr  8
.text$mn:00007C04
.text$mn:00007C04                 push    ebp
.text$mn:00007C05                 mov     ebp, esp
.text$mn:00007C07                 push    0FFFFFFFFh
.text$mn:00007C09                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007C0E                 mov     eax, large fs:0
.text$mn:00007C14                 push    eax
.text$mn:00007C15                 push    ecx
.text$mn:00007C16                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007C1B                 xor     eax, ebp
.text$mn:00007C1D                 push    eax
.text$mn:00007C1E                 lea     eax, [ebp+var_C]
.text$mn:00007C21                 mov     large fs:0, eax
.text$mn:00007C27                 mov     [ebp+var_10], ecx
.text$mn:00007C2A                 mov     eax, [ebp+arg_0]
.text$mn:00007C2D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00007C2E                 mov     ecx, [ebp+var_10]
.text$mn:00007C31                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)
.text$mn:00007C36                 mov     [ebp+var_4], 0
.text$mn:00007C3D                 mov     ecx, [ebp+var_10]
.text$mn:00007C40                 mov     edx, [ebp+arg_0]
.text$mn:00007C43                 mov     eax, [edx+8]
.text$mn:00007C46                 mov     [ecx+8], eax
.text$mn:00007C49                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007C50                 mov     eax, [ebp+var_10]
.text$mn:00007C53                 mov     ecx, [ebp+var_C]
.text$mn:00007C56                 mov     large fs:0, ecx
.text$mn:00007C5D                 pop     ecx
.text$mn:00007C5E                 mov     esp, ebp
.text$mn:00007C60                 pop     ebp
.text$mn:00007C61                 retn    4
.text$mn:00007C61 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00007C61
.text$mn:00007C61 _text$mn        ends
.text$mn:00007C61
.text$x:00007C64 ; ===========================================================================
.text$x:00007C64
.text$x:00007C64 ; Segment type: Pure code
.text$x:00007C64 ; Segment permissions: Read/Execute
.text$x:00007C64 _text$x         segment para public 'CODE' use32
.text$x:00007C64                 assume cs:_text$x
.text$x:00007C64                 ;org 7C64h
.text$x:00007C64 ; COMDAT (pick associative to section at 7C04)
.text$x:00007C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007C64
.text$x:00007C64 ; =============== S U B R O U T I N E =======================================
.text$x:00007C64
.text$x:00007C64
.text$x:00007C64 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00007C64                                         ; DATA XREF: .xdata$x:000107B4o
.text$x:00007C64                 mov     ecx, [ebp-10h]
.text$x:00007C67                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00007C67 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00007C67
.text$x:00007C6C
.text$x:00007C6C ; =============== S U B R O U T I N E =======================================
.text$x:00007C6C
.text$x:00007C6C
.text$x:00007C6C __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00007C6C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+5o
.text$x:00007C6C
.text$x:00007C6C arg_4           = dword ptr  8
.text$x:00007C6C
.text$x:00007C6C                 mov     edx, [esp+arg_4]
.text$x:00007C70                 lea     eax, [edx+0Ch]
.text$x:00007C73                 mov     ecx, [edx-8]
.text$x:00007C76                 xor     ecx, eax
.text$x:00007C78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007C7D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00007C82                 jmp     ___CxxFrameHandler3
.text$x:00007C82 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00007C82
.text$x:00007C82 ; ---------------------------------------------------------------------------
.text$x:00007C87                 align 4
.text$x:00007C87 _text$x         ends
.text$x:00007C87
.text$mn:00007C88 ; ===========================================================================
.text$mn:00007C88
.text$mn:00007C88 ; Segment type: Pure code
.text$mn:00007C88 ; Segment permissions: Read/Execute
.text$mn:00007C88 _text$mn        segment para public 'CODE' use32
.text$mn:00007C88                 assume cs:_text$mn
.text$mn:00007C88                 ;org 7C88h
.text$mn:00007C88 ; COMDAT (pick any)
.text$mn:00007C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C88
.text$mn:00007C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C88
.text$mn:00007C88 ; Attributes: bp-based frame
.text$mn:00007C88
.text$mn:00007C88 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00007C88                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00007C88 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00007C88                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+31p
.text$mn:00007C88
.text$mn:00007C88 var_10          = dword ptr -10h
.text$mn:00007C88 var_C           = dword ptr -0Ch
.text$mn:00007C88 var_4           = dword ptr -4
.text$mn:00007C88 arg_0           = dword ptr  8
.text$mn:00007C88 arg_4           = dword ptr  0Ch
.text$mn:00007C88
.text$mn:00007C88                 push    ebp
.text$mn:00007C89                 mov     ebp, esp
.text$mn:00007C8B                 push    0FFFFFFFFh
.text$mn:00007C8D                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00007C92                 mov     eax, large fs:0
.text$mn:00007C98                 push    eax
.text$mn:00007C99                 push    ecx
.text$mn:00007C9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007C9F                 xor     eax, ebp
.text$mn:00007CA1                 push    eax
.text$mn:00007CA2                 lea     eax, [ebp+var_C]
.text$mn:00007CA5                 mov     large fs:0, eax
.text$mn:00007CAB                 mov     [ebp+var_10], ecx
.text$mn:00007CAE                 mov     ecx, [ebp+var_10]
.text$mn:00007CB1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:00007CB6                 mov     [ebp+var_4], 0
.text$mn:00007CBD                 mov     eax, [ebp+var_10]
.text$mn:00007CC0                 mov     ecx, [ebp+arg_0]
.text$mn:00007CC3                 mov     [eax+8], ecx
.text$mn:00007CC6                 mov     edx, [ebp+arg_4]
.text$mn:00007CC9                 push    edx             ; struct std::_Container_base12 *
.text$mn:00007CCA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007CCD                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00007CD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007CD9                 mov     eax, [ebp+var_10]
.text$mn:00007CDC                 mov     ecx, [ebp+var_C]
.text$mn:00007CDF                 mov     large fs:0, ecx
.text$mn:00007CE6                 pop     ecx
.text$mn:00007CE7                 mov     esp, ebp
.text$mn:00007CE9                 pop     ebp
.text$mn:00007CEA                 retn    8
.text$mn:00007CEA ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00007CEA
.text$mn:00007CEA ; ---------------------------------------------------------------------------
.text$mn:00007CED                 align 10h
.text$mn:00007CED _text$mn        ends
.text$mn:00007CED
.text$x:00007CF0 ; ===========================================================================
.text$x:00007CF0
.text$x:00007CF0 ; Segment type: Pure code
.text$x:00007CF0 ; Segment permissions: Read/Execute
.text$x:00007CF0 _text$x         segment para public 'CODE' use32
.text$x:00007CF0                 assume cs:_text$x
.text$x:00007CF0                 ;org 7CF0h
.text$x:00007CF0 ; COMDAT (pick associative to section at 7C88)
.text$x:00007CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007CF0
.text$x:00007CF0 ; =============== S U B R O U T I N E =======================================
.text$x:00007CF0
.text$x:00007CF0
.text$x:00007CF0 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00007CF0                                         ; DATA XREF: .xdata$x:0001075Co
.text$x:00007CF0                 mov     ecx, [ebp-10h]
.text$x:00007CF3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00007CF3 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00007CF3
.text$x:00007CF8
.text$x:00007CF8 ; =============== S U B R O U T I N E =======================================
.text$x:00007CF8
.text$x:00007CF8
.text$x:00007CF8 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00007CF8                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00007CF8
.text$x:00007CF8 arg_4           = dword ptr  8
.text$x:00007CF8
.text$x:00007CF8                 mov     edx, [esp+arg_4]
.text$x:00007CFC                 lea     eax, [edx+0Ch]
.text$x:00007CFF                 mov     ecx, [edx-8]
.text$x:00007D02                 xor     ecx, eax
.text$x:00007D04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D09                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00007D0E                 jmp     ___CxxFrameHandler3
.text$x:00007D0E __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00007D0E
.text$x:00007D0E ; ---------------------------------------------------------------------------
.text$x:00007D13                 align 4
.text$x:00007D13 _text$x         ends
.text$x:00007D13
.text$mn:00007D14 ; ===========================================================================
.text$mn:00007D14
.text$mn:00007D14 ; Segment type: Pure code
.text$mn:00007D14 ; Segment permissions: Read/Execute
.text$mn:00007D14 _text$mn        segment para public 'CODE' use32
.text$mn:00007D14                 assume cs:_text$mn
.text$mn:00007D14                 ;org 7D14h
.text$mn:00007D14 ; COMDAT (pick any)
.text$mn:00007D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D14
.text$mn:00007D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D14
.text$mn:00007D14 ; Attributes: bp-based frame
.text$mn:00007D14
.text$mn:00007D14 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(struct std::_Iterator_base12 *)
.text$mn:00007D14                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007D14 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007D14                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)+36p
.text$mn:00007D14                                         ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)+52p
.text$mn:00007D14
.text$mn:00007D14 var_10          = dword ptr -10h
.text$mn:00007D14 var_C           = dword ptr -0Ch
.text$mn:00007D14 var_4           = dword ptr -4
.text$mn:00007D14 arg_0           = dword ptr  8
.text$mn:00007D14
.text$mn:00007D14                 push    ebp
.text$mn:00007D15                 mov     ebp, esp
.text$mn:00007D17                 push    0FFFFFFFFh
.text$mn:00007D19                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007D1E                 mov     eax, large fs:0
.text$mn:00007D24                 push    eax
.text$mn:00007D25                 push    ecx
.text$mn:00007D26                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007D2B                 xor     eax, ebp
.text$mn:00007D2D                 push    eax
.text$mn:00007D2E                 lea     eax, [ebp+var_C]
.text$mn:00007D31                 mov     large fs:0, eax
.text$mn:00007D37                 mov     [ebp+var_10], ecx
.text$mn:00007D3A                 mov     eax, [ebp+arg_0]
.text$mn:00007D3D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00007D3E                 mov     ecx, [ebp+var_10]
.text$mn:00007D41                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:00007D46                 mov     [ebp+var_4], 0
.text$mn:00007D4D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007D54                 mov     eax, [ebp+var_10]
.text$mn:00007D57                 mov     ecx, [ebp+var_C]
.text$mn:00007D5A                 mov     large fs:0, ecx
.text$mn:00007D61                 pop     ecx
.text$mn:00007D62                 mov     esp, ebp
.text$mn:00007D64                 pop     ebp
.text$mn:00007D65                 retn    4
.text$mn:00007D65 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00007D65
.text$mn:00007D65 _text$mn        ends
.text$mn:00007D65
.text$x:00007D68 ; ===========================================================================
.text$x:00007D68
.text$x:00007D68 ; Segment type: Pure code
.text$x:00007D68 ; Segment permissions: Read/Execute
.text$x:00007D68 _text$x         segment para public 'CODE' use32
.text$x:00007D68                 assume cs:_text$x
.text$x:00007D68                 ;org 7D68h
.text$x:00007D68 ; COMDAT (pick associative to section at 7D14)
.text$x:00007D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007D68
.text$x:00007D68 ; =============== S U B R O U T I N E =======================================
.text$x:00007D68
.text$x:00007D68
.text$x:00007D68 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00007D68                                         ; DATA XREF: .xdata$x:00010A70o
.text$x:00007D68                 mov     ecx, [ebp-10h]
.text$x:00007D6B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00007D6B __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00007D6B
.text$x:00007D70
.text$x:00007D70 ; =============== S U B R O U T I N E =======================================
.text$x:00007D70
.text$x:00007D70
.text$x:00007D70 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00007D70                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)+5o
.text$x:00007D70
.text$x:00007D70 arg_4           = dword ptr  8
.text$x:00007D70
.text$x:00007D70                 mov     edx, [esp+arg_4]
.text$x:00007D74                 lea     eax, [edx+0Ch]
.text$x:00007D77                 mov     ecx, [edx-8]
.text$x:00007D7A                 xor     ecx, eax
.text$x:00007D7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D81                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00007D86                 jmp     ___CxxFrameHandler3
.text$x:00007D86 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00007D86
.text$x:00007D86 ; ---------------------------------------------------------------------------
.text$x:00007D8B                 align 4
.text$x:00007D8B _text$x         ends
.text$x:00007D8B
.text$mn:00007D8C ; ===========================================================================
.text$mn:00007D8C
.text$mn:00007D8C ; Segment type: Pure code
.text$mn:00007D8C ; Segment permissions: Read/Execute
.text$mn:00007D8C _text$mn        segment para public 'CODE' use32
.text$mn:00007D8C                 assume cs:_text$mn
.text$mn:00007D8C                 ;org 7D8Ch
.text$mn:00007D8C ; COMDAT (pick any)
.text$mn:00007D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D8C
.text$mn:00007D8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007D8C
.text$mn:00007D8C ; Attributes: bp-based frame
.text$mn:00007D8C
.text$mn:00007D8C ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(int, struct std::_Container_base12 *)
.text$mn:00007D8C                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$mn:00007D8C ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z proc near
.text$mn:00007D8C                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+41p
.text$mn:00007D8C                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)+3Dp
.text$mn:00007D8C
.text$mn:00007D8C var_10          = dword ptr -10h
.text$mn:00007D8C var_C           = dword ptr -0Ch
.text$mn:00007D8C var_4           = dword ptr -4
.text$mn:00007D8C arg_0           = dword ptr  8
.text$mn:00007D8C arg_4           = dword ptr  0Ch
.text$mn:00007D8C
.text$mn:00007D8C                 push    ebp
.text$mn:00007D8D                 mov     ebp, esp
.text$mn:00007D8F                 push    0FFFFFFFFh
.text$mn:00007D91                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$mn:00007D96                 mov     eax, large fs:0
.text$mn:00007D9C                 push    eax
.text$mn:00007D9D                 push    ecx
.text$mn:00007D9E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007DA3                 xor     eax, ebp
.text$mn:00007DA5                 push    eax
.text$mn:00007DA6                 lea     eax, [ebp+var_C]
.text$mn:00007DA9                 mov     large fs:0, eax
.text$mn:00007DAF                 mov     [ebp+var_10], ecx
.text$mn:00007DB2                 mov     eax, [ebp+arg_4]
.text$mn:00007DB5                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007DB6                 mov     ecx, [ebp+arg_0]
.text$mn:00007DB9                 push    ecx             ; int
.text$mn:00007DBA                 mov     ecx, [ebp+var_10]
.text$mn:00007DBD                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)
.text$mn:00007DC2                 mov     [ebp+var_4], 0
.text$mn:00007DC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007DD0                 mov     eax, [ebp+var_10]
.text$mn:00007DD3                 mov     ecx, [ebp+var_C]
.text$mn:00007DD6                 mov     large fs:0, ecx
.text$mn:00007DDD                 pop     ecx
.text$mn:00007DDE                 mov     esp, ebp
.text$mn:00007DE0                 pop     ebp
.text$mn:00007DE1                 retn    8
.text$mn:00007DE1 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z endp
.text$mn:00007DE1
.text$mn:00007DE1 _text$mn        ends
.text$mn:00007DE1
.text$x:00007DE4 ; ===========================================================================
.text$x:00007DE4
.text$x:00007DE4 ; Segment type: Pure code
.text$x:00007DE4 ; Segment permissions: Read/Execute
.text$x:00007DE4 _text$x         segment para public 'CODE' use32
.text$x:00007DE4                 assume cs:_text$x
.text$x:00007DE4                 ;org 7DE4h
.text$x:00007DE4 ; COMDAT (pick associative to section at 7D8C)
.text$x:00007DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007DE4
.text$x:00007DE4 ; =============== S U B R O U T I N E =======================================
.text$x:00007DE4
.text$x:00007DE4
.text$x:00007DE4 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0 proc near
.text$x:00007DE4                                         ; DATA XREF: .xdata$x:000109E4o
.text$x:00007DE4                 mov     ecx, [ebp-10h]
.text$x:00007DE7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00007DE7 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0 endp
.text$x:00007DE7
.text$x:00007DEC
.text$x:00007DEC ; =============== S U B R O U T I N E =======================================
.text$x:00007DEC
.text$x:00007DEC
.text$x:00007DEC __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z proc near
.text$x:00007DEC                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)+5o
.text$x:00007DEC
.text$x:00007DEC arg_4           = dword ptr  8
.text$x:00007DEC
.text$x:00007DEC                 mov     edx, [esp+arg_4]
.text$x:00007DF0                 lea     eax, [edx+0Ch]
.text$x:00007DF3                 mov     ecx, [edx-8]
.text$x:00007DF6                 xor     ecx, eax
.text$x:00007DF8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007DFD                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.text$x:00007E02                 jmp     ___CxxFrameHandler3
.text$x:00007E02 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z endp
.text$x:00007E02
.text$x:00007E02 ; ---------------------------------------------------------------------------
.text$x:00007E07                 align 4
.text$x:00007E07 _text$x         ends
.text$x:00007E07
.text$mn:00007E08 ; ===========================================================================
.text$mn:00007E08
.text$mn:00007E08 ; Segment type: Pure code
.text$mn:00007E08 ; Segment permissions: Read/Execute
.text$mn:00007E08 _text$mn        segment para public 'CODE' use32
.text$mn:00007E08                 assume cs:_text$mn
.text$mn:00007E08                 ;org 7E08h
.text$mn:00007E08 ; COMDAT (pick any)
.text$mn:00007E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E08
.text$mn:00007E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E08
.text$mn:00007E08 ; Attributes: bp-based frame
.text$mn:00007E08
.text$mn:00007E08 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(struct std::_Iterator_base12 *)
.text$mn:00007E08                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007E08 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00007E08                                         ; CODE XREF: std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)+56p
.text$mn:00007E08                                         ; std::_Debug_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint)+74p ...
.text$mn:00007E08
.text$mn:00007E08 var_10          = dword ptr -10h
.text$mn:00007E08 var_C           = dword ptr -0Ch
.text$mn:00007E08 var_4           = dword ptr -4
.text$mn:00007E08 arg_0           = dword ptr  8
.text$mn:00007E08
.text$mn:00007E08                 push    ebp
.text$mn:00007E09                 mov     ebp, esp
.text$mn:00007E0B                 push    0FFFFFFFFh
.text$mn:00007E0D                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00007E12                 mov     eax, large fs:0
.text$mn:00007E18                 push    eax
.text$mn:00007E19                 push    ecx
.text$mn:00007E1A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007E1F                 xor     eax, ebp
.text$mn:00007E21                 push    eax
.text$mn:00007E22                 lea     eax, [ebp+var_C]
.text$mn:00007E25                 mov     large fs:0, eax
.text$mn:00007E2B                 mov     [ebp+var_10], ecx
.text$mn:00007E2E                 mov     eax, [ebp+arg_0]
.text$mn:00007E31                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00007E32                 mov     ecx, [ebp+var_10]
.text$mn:00007E35                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00007E3A                 mov     [ebp+var_4], 0
.text$mn:00007E41                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007E48                 mov     eax, [ebp+var_10]
.text$mn:00007E4B                 mov     ecx, [ebp+var_C]
.text$mn:00007E4E                 mov     large fs:0, ecx
.text$mn:00007E55                 pop     ecx
.text$mn:00007E56                 mov     esp, ebp
.text$mn:00007E58                 pop     ebp
.text$mn:00007E59                 retn    4
.text$mn:00007E59 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00007E59
.text$mn:00007E59 _text$mn        ends
.text$mn:00007E59
.text$x:00007E5C ; ===========================================================================
.text$x:00007E5C
.text$x:00007E5C ; Segment type: Pure code
.text$x:00007E5C ; Segment permissions: Read/Execute
.text$x:00007E5C _text$x         segment para public 'CODE' use32
.text$x:00007E5C                 assume cs:_text$x
.text$x:00007E5C                 ;org 7E5Ch
.text$x:00007E5C ; COMDAT (pick associative to section at 7E08)
.text$x:00007E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007E5C
.text$x:00007E5C ; =============== S U B R O U T I N E =======================================
.text$x:00007E5C
.text$x:00007E5C
.text$x:00007E5C __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00007E5C                                         ; DATA XREF: .xdata$x:00010838o
.text$x:00007E5C                 mov     ecx, [ebp-10h]
.text$x:00007E5F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00007E5F __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00007E5F
.text$x:00007E64
.text$x:00007E64 ; =============== S U B R O U T I N E =======================================
.text$x:00007E64
.text$x:00007E64
.text$x:00007E64 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00007E64                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+5o
.text$x:00007E64
.text$x:00007E64 arg_4           = dword ptr  8
.text$x:00007E64
.text$x:00007E64                 mov     edx, [esp+arg_4]
.text$x:00007E68                 lea     eax, [edx+0Ch]
.text$x:00007E6B                 mov     ecx, [edx-8]
.text$x:00007E6E                 xor     ecx, eax
.text$x:00007E70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007E75                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00007E7A                 jmp     ___CxxFrameHandler3
.text$x:00007E7A __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00007E7A
.text$x:00007E7A ; ---------------------------------------------------------------------------
.text$x:00007E7F                 align 10h
.text$x:00007E7F _text$x         ends
.text$x:00007E7F
.text$mn:00007E80 ; ===========================================================================
.text$mn:00007E80
.text$mn:00007E80 ; Segment type: Pure code
.text$mn:00007E80 ; Segment permissions: Read/Execute
.text$mn:00007E80 _text$mn        segment para public 'CODE' use32
.text$mn:00007E80                 assume cs:_text$mn
.text$mn:00007E80                 ;org 7E80h
.text$mn:00007E80 ; COMDAT (pick any)
.text$mn:00007E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E80
.text$mn:00007E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E80
.text$mn:00007E80 ; Attributes: bp-based frame
.text$mn:00007E80
.text$mn:00007E80 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00007E80                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00007E80 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00007E80                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+3Dp
.text$mn:00007E80                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)+3Dp
.text$mn:00007E80
.text$mn:00007E80 var_10          = dword ptr -10h
.text$mn:00007E80 var_C           = dword ptr -0Ch
.text$mn:00007E80 var_4           = dword ptr -4
.text$mn:00007E80 arg_0           = dword ptr  8
.text$mn:00007E80 arg_4           = dword ptr  0Ch
.text$mn:00007E80
.text$mn:00007E80                 push    ebp
.text$mn:00007E81                 mov     ebp, esp
.text$mn:00007E83                 push    0FFFFFFFFh
.text$mn:00007E85                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00007E8A                 mov     eax, large fs:0
.text$mn:00007E90                 push    eax
.text$mn:00007E91                 push    ecx
.text$mn:00007E92                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007E97                 xor     eax, ebp
.text$mn:00007E99                 push    eax
.text$mn:00007E9A                 lea     eax, [ebp+var_C]
.text$mn:00007E9D                 mov     large fs:0, eax
.text$mn:00007EA3                 mov     [ebp+var_10], ecx
.text$mn:00007EA6                 mov     eax, [ebp+arg_4]
.text$mn:00007EA9                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007EAA                 mov     ecx, [ebp+arg_0]
.text$mn:00007EAD                 push    ecx             ; int
.text$mn:00007EAE                 mov     ecx, [ebp+var_10]
.text$mn:00007EB1                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:00007EB6                 mov     [ebp+var_4], 0
.text$mn:00007EBD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007EC4                 mov     eax, [ebp+var_10]
.text$mn:00007EC7                 mov     ecx, [ebp+var_C]
.text$mn:00007ECA                 mov     large fs:0, ecx
.text$mn:00007ED1                 pop     ecx
.text$mn:00007ED2                 mov     esp, ebp
.text$mn:00007ED4                 pop     ebp
.text$mn:00007ED5                 retn    8
.text$mn:00007ED5 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00007ED5
.text$mn:00007ED5 _text$mn        ends
.text$mn:00007ED5
.text$x:00007ED8 ; ===========================================================================
.text$x:00007ED8
.text$x:00007ED8 ; Segment type: Pure code
.text$x:00007ED8 ; Segment permissions: Read/Execute
.text$x:00007ED8 _text$x         segment para public 'CODE' use32
.text$x:00007ED8                 assume cs:_text$x
.text$x:00007ED8                 ;org 7ED8h
.text$x:00007ED8 ; COMDAT (pick associative to section at 7E80)
.text$x:00007ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007ED8
.text$x:00007ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00007ED8
.text$x:00007ED8
.text$x:00007ED8 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00007ED8                                         ; DATA XREF: .xdata$x:000107E0o
.text$x:00007ED8                 mov     ecx, [ebp-10h]
.text$x:00007EDB                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00007EDB __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00007EDB
.text$x:00007EE0
.text$x:00007EE0 ; =============== S U B R O U T I N E =======================================
.text$x:00007EE0
.text$x:00007EE0
.text$x:00007EE0 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00007EE0                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00007EE0
.text$x:00007EE0 arg_4           = dword ptr  8
.text$x:00007EE0
.text$x:00007EE0                 mov     edx, [esp+arg_4]
.text$x:00007EE4                 lea     eax, [edx+0Ch]
.text$x:00007EE7                 mov     ecx, [edx-8]
.text$x:00007EEA                 xor     ecx, eax
.text$x:00007EEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007EF1                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00007EF6                 jmp     ___CxxFrameHandler3
.text$x:00007EF6 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00007EF6
.text$x:00007EF6 ; ---------------------------------------------------------------------------
.text$x:00007EFB                 align 4
.text$x:00007EFB _text$x         ends
.text$x:00007EFB
.text$mn:00007EFC ; ===========================================================================
.text$mn:00007EFC
.text$mn:00007EFC ; Segment type: Pure code
.text$mn:00007EFC ; Segment permissions: Read/Execute
.text$mn:00007EFC _text$mn        segment para public 'CODE' use32
.text$mn:00007EFC                 assume cs:_text$mn
.text$mn:00007EFC                 ;org 7EFCh
.text$mn:00007EFC ; COMDAT (pick any)
.text$mn:00007EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EFC
.text$mn:00007EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007EFC
.text$mn:00007EFC ; Attributes: bp-based frame
.text$mn:00007EFC
.text$mn:00007EFC ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00007EFC                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007EFC ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007EFC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00007EFC
.text$mn:00007EFC var_10          = dword ptr -10h
.text$mn:00007EFC var_C           = dword ptr -0Ch
.text$mn:00007EFC var_4           = dword ptr -4
.text$mn:00007EFC
.text$mn:00007EFC                 push    ebp
.text$mn:00007EFD                 mov     ebp, esp
.text$mn:00007EFF                 push    0FFFFFFFFh
.text$mn:00007F01                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007F06                 mov     eax, large fs:0
.text$mn:00007F0C                 push    eax
.text$mn:00007F0D                 push    ecx
.text$mn:00007F0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F13                 xor     eax, ebp
.text$mn:00007F15                 push    eax
.text$mn:00007F16                 lea     eax, [ebp+var_C]
.text$mn:00007F19                 mov     large fs:0, eax
.text$mn:00007F1F                 mov     [ebp+var_10], ecx
.text$mn:00007F22                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007F25                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00007F2A                 mov     [ebp+var_4], 0
.text$mn:00007F31                 mov     eax, [ebp+var_10]
.text$mn:00007F34                 mov     dword ptr [eax+4], 0
.text$mn:00007F3B                 mov     ecx, [ebp+var_10]
.text$mn:00007F3E                 mov     dword ptr [ecx+8], 0
.text$mn:00007F45                 mov     edx, [ebp+var_10]
.text$mn:00007F48                 mov     dword ptr [edx+0Ch], 0
.text$mn:00007F4F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007F56                 mov     eax, [ebp+var_10]
.text$mn:00007F59                 mov     ecx, [ebp+var_C]
.text$mn:00007F5C                 mov     large fs:0, ecx
.text$mn:00007F63                 pop     ecx
.text$mn:00007F64                 mov     esp, ebp
.text$mn:00007F66                 pop     ebp
.text$mn:00007F67                 retn
.text$mn:00007F67 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007F67
.text$mn:00007F67 _text$mn        ends
.text$mn:00007F67
.text$x:00007F68 ; ===========================================================================
.text$x:00007F68
.text$x:00007F68 ; Segment type: Pure code
.text$x:00007F68 ; Segment permissions: Read/Execute
.text$x:00007F68 _text$x         segment para public 'CODE' use32
.text$x:00007F68                 assume cs:_text$x
.text$x:00007F68                 ;org 7F68h
.text$x:00007F68 ; COMDAT (pick associative to section at 7EFC)
.text$x:00007F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007F68
.text$x:00007F68 ; =============== S U B R O U T I N E =======================================
.text$x:00007F68
.text$x:00007F68
.text$x:00007F68 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007F68                                         ; DATA XREF: .xdata$x:0000FFC0o
.text$x:00007F68                 mov     ecx, [ebp-10h]  ; this
.text$x:00007F6B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00007F6B __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007F6B
.text$x:00007F70
.text$x:00007F70 ; =============== S U B R O U T I N E =======================================
.text$x:00007F70
.text$x:00007F70
.text$x:00007F70 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007F70                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00007F70
.text$x:00007F70 arg_4           = dword ptr  8
.text$x:00007F70
.text$x:00007F70                 mov     edx, [esp+arg_4]
.text$x:00007F74                 lea     eax, [edx+0Ch]
.text$x:00007F77                 mov     ecx, [edx-8]
.text$x:00007F7A                 xor     ecx, eax
.text$x:00007F7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007F81                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00007F86                 jmp     ___CxxFrameHandler3
.text$x:00007F86 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00007F86
.text$x:00007F86 ; ---------------------------------------------------------------------------
.text$x:00007F8B                 align 4
.text$x:00007F8B _text$x         ends
.text$x:00007F8B
.text$mn:00007F8C ; ===========================================================================
.text$mn:00007F8C
.text$mn:00007F8C ; Segment type: Pure code
.text$mn:00007F8C ; Segment permissions: Read/Execute
.text$mn:00007F8C _text$mn        segment para public 'CODE' use32
.text$mn:00007F8C                 assume cs:_text$mn
.text$mn:00007F8C                 ;org 7F8Ch
.text$mn:00007F8C ; COMDAT (pick any)
.text$mn:00007F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F8C
.text$mn:00007F8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007F8C
.text$mn:00007F8C ; Attributes: bp-based frame
.text$mn:00007F8C
.text$mn:00007F8C ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00007F8C                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00007F8C ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00007F8C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00007F8C
.text$mn:00007F8C var_4           = dword ptr -4
.text$mn:00007F8C
.text$mn:00007F8C                 push    ebp
.text$mn:00007F8D                 mov     ebp, esp
.text$mn:00007F8F                 push    ecx
.text$mn:00007F90                 mov     [ebp+var_4], ecx
.text$mn:00007F93                 mov     ecx, [ebp+var_4]
.text$mn:00007F96                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00007F9B                 mov     eax, [ebp+var_4]
.text$mn:00007F9E                 mov     esp, ebp
.text$mn:00007FA0                 pop     ebp
.text$mn:00007FA1                 retn
.text$mn:00007FA1 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00007FA1
.text$mn:00007FA1 ; ---------------------------------------------------------------------------
.text$mn:00007FA2                 align 4
.text$mn:00007FA2 _text$mn        ends
.text$mn:00007FA2
.text$mn:00007FA4 ; ===========================================================================
.text$mn:00007FA4
.text$mn:00007FA4 ; Segment type: Pure code
.text$mn:00007FA4 ; Segment permissions: Read/Execute
.text$mn:00007FA4 _text$mn        segment para public 'CODE' use32
.text$mn:00007FA4                 assume cs:_text$mn
.text$mn:00007FA4                 ;org 7FA4h
.text$mn:00007FA4 ; COMDAT (pick any)
.text$mn:00007FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FA4
.text$mn:00007FA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FA4
.text$mn:00007FA4 ; Attributes: bp-based frame
.text$mn:00007FA4
.text$mn:00007FA4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>(void)
.text$mn:00007FA4                 public ??0?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE@XZ
.text$mn:00007FA4 ??0?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE@XZ proc near
.text$mn:00007FA4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)+Ap
.text$mn:00007FA4
.text$mn:00007FA4 var_4           = dword ptr -4
.text$mn:00007FA4
.text$mn:00007FA4                 push    ebp
.text$mn:00007FA5                 mov     ebp, esp
.text$mn:00007FA7                 push    ecx
.text$mn:00007FA8                 mov     [ebp+var_4], ecx
.text$mn:00007FAB                 mov     ecx, [ebp+var_4]
.text$mn:00007FAE                 call    ??0?$allocator@UMatchedCharInserted@@@std@@QAE@XZ ; std::allocator<MatchedCharInserted>::allocator<MatchedCharInserted>(void)
.text$mn:00007FB3                 mov     eax, [ebp+var_4]
.text$mn:00007FB6                 mov     esp, ebp
.text$mn:00007FB8                 pop     ebp
.text$mn:00007FB9                 retn
.text$mn:00007FB9 ??0?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE@XZ endp
.text$mn:00007FB9
.text$mn:00007FB9 ; ---------------------------------------------------------------------------
.text$mn:00007FBA                 align 4
.text$mn:00007FBA _text$mn        ends
.text$mn:00007FBA
.text$mn:00007FBC ; ===========================================================================
.text$mn:00007FBC
.text$mn:00007FBC ; Segment type: Pure code
.text$mn:00007FBC ; Segment permissions: Read/Execute
.text$mn:00007FBC _text$mn        segment para public 'CODE' use32
.text$mn:00007FBC                 assume cs:_text$mn
.text$mn:00007FBC                 ;org 7FBCh
.text$mn:00007FBC ; COMDAT (pick any)
.text$mn:00007FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FBC
.text$mn:00007FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00007FBC
.text$mn:00007FBC ; Attributes: bp-based frame
.text$mn:00007FBC
.text$mn:00007FBC ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00007FBC                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00007FBC ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007FBC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+Cp
.text$mn:00007FBC                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+Cp
.text$mn:00007FBC
.text$mn:00007FBC var_4           = dword ptr -4
.text$mn:00007FBC
.text$mn:00007FBC                 push    ebp
.text$mn:00007FBD                 mov     ebp, esp
.text$mn:00007FBF                 push    ecx
.text$mn:00007FC0                 mov     [ebp+var_4], ecx
.text$mn:00007FC3                 mov     ecx, [ebp+var_4]
.text$mn:00007FC6                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007FCB                 mov     eax, [ebp+var_4]
.text$mn:00007FCE                 mov     esp, ebp
.text$mn:00007FD0                 pop     ebp
.text$mn:00007FD1                 retn
.text$mn:00007FD1 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007FD1
.text$mn:00007FD1 ; ---------------------------------------------------------------------------
.text$mn:00007FD2                 align 4
.text$mn:00007FD2 _text$mn        ends
.text$mn:00007FD2
.text$mn:00007FD4 ; ===========================================================================
.text$mn:00007FD4
.text$mn:00007FD4 ; Segment type: Pure code
.text$mn:00007FD4 ; Segment permissions: Read/Execute
.text$mn:00007FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007FD4                 assume cs:_text$mn
.text$mn:00007FD4                 ;org 7FD4h
.text$mn:00007FD4 ; COMDAT (pick any)
.text$mn:00007FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FD4
.text$mn:00007FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FD4
.text$mn:00007FD4 ; Attributes: bp-based frame
.text$mn:00007FD4
.text$mn:00007FD4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00007FD4                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007FD4 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007FD4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:00007FD4
.text$mn:00007FD4 var_4           = dword ptr -4
.text$mn:00007FD4
.text$mn:00007FD4                 push    ebp
.text$mn:00007FD5                 mov     ebp, esp
.text$mn:00007FD7                 push    ecx
.text$mn:00007FD8                 mov     [ebp+var_4], ecx
.text$mn:00007FDB                 mov     ecx, [ebp+var_4]
.text$mn:00007FDE                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00007FE3                 mov     eax, [ebp+var_4]
.text$mn:00007FE6                 mov     esp, ebp
.text$mn:00007FE8                 pop     ebp
.text$mn:00007FE9                 retn
.text$mn:00007FE9 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007FE9
.text$mn:00007FE9 ; ---------------------------------------------------------------------------
.text$mn:00007FEA                 align 4
.text$mn:00007FEA _text$mn        ends
.text$mn:00007FEA
.text$mn:00007FEC ; ===========================================================================
.text$mn:00007FEC
.text$mn:00007FEC ; Segment type: Pure code
.text$mn:00007FEC ; Segment permissions: Read/Execute
.text$mn:00007FEC _text$mn        segment para public 'CODE' use32
.text$mn:00007FEC                 assume cs:_text$mn
.text$mn:00007FEC                 ;org 7FECh
.text$mn:00007FEC ; COMDAT (pick any)
.text$mn:00007FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FEC
.text$mn:00007FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007FEC
.text$mn:00007FEC ; Attributes: bp-based frame
.text$mn:00007FEC
.text$mn:00007FEC ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00007FEC                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00007FEC ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00007FEC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00007FEC
.text$mn:00007FEC var_4           = dword ptr -4
.text$mn:00007FEC arg_0           = dword ptr  8
.text$mn:00007FEC
.text$mn:00007FEC                 push    ebp
.text$mn:00007FED                 mov     ebp, esp
.text$mn:00007FEF                 push    ecx
.text$mn:00007FF0                 mov     [ebp+var_4], ecx
.text$mn:00007FF3                 mov     eax, [ebp+arg_0]
.text$mn:00007FF6                 push    eax
.text$mn:00007FF7                 mov     ecx, [ebp+var_4]
.text$mn:00007FFA                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00007FFF                 mov     eax, [ebp+var_4]
.text$mn:00008002                 mov     esp, ebp
.text$mn:00008004                 pop     ebp
.text$mn:00008005                 retn    4
.text$mn:00008005 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00008005
.text$mn:00008005 _text$mn        ends
.text$mn:00008005
.text$mn:00008008 ; ===========================================================================
.text$mn:00008008
.text$mn:00008008 ; Segment type: Pure code
.text$mn:00008008 ; Segment permissions: Read/Execute
.text$mn:00008008 _text$mn        segment para public 'CODE' use32
.text$mn:00008008                 assume cs:_text$mn
.text$mn:00008008                 ;org 8008h
.text$mn:00008008 ; COMDAT (pick any)
.text$mn:00008008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008008
.text$mn:00008008 ; =============== S U B R O U T I N E =======================================
.text$mn:00008008
.text$mn:00008008 ; Attributes: bp-based frame
.text$mn:00008008
.text$mn:00008008 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00008008                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00008008 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00008008                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00008008
.text$mn:00008008 var_4           = dword ptr -4
.text$mn:00008008
.text$mn:00008008                 push    ebp
.text$mn:00008009                 mov     ebp, esp
.text$mn:0000800B                 push    ecx
.text$mn:0000800C                 mov     [ebp+var_4], ecx
.text$mn:0000800F                 mov     ecx, [ebp+var_4]
.text$mn:00008012                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00008017                 mov     eax, [ebp+var_4]
.text$mn:0000801A                 mov     esp, ebp
.text$mn:0000801C                 pop     ebp
.text$mn:0000801D                 retn
.text$mn:0000801D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:0000801D
.text$mn:0000801D ; ---------------------------------------------------------------------------
.text$mn:0000801E                 align 10h
.text$mn:0000801E _text$mn        ends
.text$mn:0000801E
.text$mn:00008020 ; ===========================================================================
.text$mn:00008020
.text$mn:00008020 ; Segment type: Pure code
.text$mn:00008020 ; Segment permissions: Read/Execute
.text$mn:00008020 _text$mn        segment para public 'CODE' use32
.text$mn:00008020                 assume cs:_text$mn
.text$mn:00008020                 ;org 8020h
.text$mn:00008020 ; COMDAT (pick any)
.text$mn:00008020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008020
.text$mn:00008020 ; =============== S U B R O U T I N E =======================================
.text$mn:00008020
.text$mn:00008020 ; Attributes: bp-based frame
.text$mn:00008020
.text$mn:00008020 ; public: __thiscall std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00008020                 public ??0?$_Yarn@D@std@@QAE@XZ
.text$mn:00008020 ??0?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+3Fp
.text$mn:00008020                                         ; std::_Locinfo::_Locinfo(char const *)+4Ep ...
.text$mn:00008020
.text$mn:00008020 var_4           = dword ptr -4
.text$mn:00008020
.text$mn:00008020                 push    ebp
.text$mn:00008021                 mov     ebp, esp
.text$mn:00008023                 push    ecx
.text$mn:00008024                 mov     [ebp+var_4], ecx
.text$mn:00008027                 mov     eax, [ebp+var_4]
.text$mn:0000802A                 mov     dword ptr [eax], 0
.text$mn:00008030                 mov     ecx, [ebp+var_4]
.text$mn:00008033                 mov     byte ptr [ecx+4], 0
.text$mn:00008037                 mov     eax, [ebp+var_4]
.text$mn:0000803A                 mov     esp, ebp
.text$mn:0000803C                 pop     ebp
.text$mn:0000803D                 retn
.text$mn:0000803D ??0?$_Yarn@D@std@@QAE@XZ endp
.text$mn:0000803D
.text$mn:0000803D ; ---------------------------------------------------------------------------
.text$mn:0000803E                 align 10h
.text$mn:0000803E _text$mn        ends
.text$mn:0000803E
.text$mn:00008040 ; ===========================================================================
.text$mn:00008040
.text$mn:00008040 ; Segment type: Pure code
.text$mn:00008040 ; Segment permissions: Read/Execute
.text$mn:00008040 _text$mn        segment para public 'CODE' use32
.text$mn:00008040                 assume cs:_text$mn
.text$mn:00008040                 ;org 8040h
.text$mn:00008040 ; COMDAT (pick any)
.text$mn:00008040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008040
.text$mn:00008040 ; =============== S U B R O U T I N E =======================================
.text$mn:00008040
.text$mn:00008040 ; Attributes: bp-based frame
.text$mn:00008040
.text$mn:00008040 ; public: __thiscall std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00008040                 public ??0?$_Yarn@_W@std@@QAE@XZ
.text$mn:00008040 ??0?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+5Dp
.text$mn:00008040                                         ; std::_Locinfo::_Locinfo(char const *)+6Cp
.text$mn:00008040
.text$mn:00008040 var_4           = dword ptr -4
.text$mn:00008040
.text$mn:00008040                 push    ebp
.text$mn:00008041                 mov     ebp, esp
.text$mn:00008043                 push    ecx
.text$mn:00008044                 mov     [ebp+var_4], ecx
.text$mn:00008047                 mov     eax, [ebp+var_4]
.text$mn:0000804A                 mov     dword ptr [eax], 0
.text$mn:00008050                 xor     ecx, ecx
.text$mn:00008052                 mov     edx, [ebp+var_4]
.text$mn:00008055                 mov     [edx+4], cx
.text$mn:00008059                 mov     eax, [ebp+var_4]
.text$mn:0000805C                 mov     esp, ebp
.text$mn:0000805E                 pop     ebp
.text$mn:0000805F                 retn
.text$mn:0000805F ??0?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:0000805F
.text$mn:0000805F _text$mn        ends
.text$mn:0000805F
.text$mn:00008060 ; ===========================================================================
.text$mn:00008060
.text$mn:00008060 ; Segment type: Pure code
.text$mn:00008060 ; Segment permissions: Read/Execute
.text$mn:00008060 _text$mn        segment para public 'CODE' use32
.text$mn:00008060                 assume cs:_text$mn
.text$mn:00008060                 ;org 8060h
.text$mn:00008060 ; COMDAT (pick any)
.text$mn:00008060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008060
.text$mn:00008060 ; =============== S U B R O U T I N E =======================================
.text$mn:00008060
.text$mn:00008060 ; Attributes: bp-based frame
.text$mn:00008060
.text$mn:00008060 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00008060                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00008060 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00008060                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00008060
.text$mn:00008060 var_4           = dword ptr -4
.text$mn:00008060
.text$mn:00008060                 push    ebp
.text$mn:00008061                 mov     ebp, esp
.text$mn:00008063                 push    ecx
.text$mn:00008064                 mov     [ebp+var_4], ecx
.text$mn:00008067                 mov     eax, [ebp+var_4]
.text$mn:0000806A                 mov     esp, ebp
.text$mn:0000806C                 pop     ebp
.text$mn:0000806D                 retn
.text$mn:0000806D ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:0000806D
.text$mn:0000806D ; ---------------------------------------------------------------------------
.text$mn:0000806E                 align 10h
.text$mn:0000806E _text$mn        ends
.text$mn:0000806E
.text$mn:00008070 ; ===========================================================================
.text$mn:00008070
.text$mn:00008070 ; Segment type: Pure code
.text$mn:00008070 ; Segment permissions: Read/Execute
.text$mn:00008070 _text$mn        segment para public 'CODE' use32
.text$mn:00008070                 assume cs:_text$mn
.text$mn:00008070                 ;org 8070h
.text$mn:00008070 ; COMDAT (pick any)
.text$mn:00008070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008070
.text$mn:00008070 ; =============== S U B R O U T I N E =======================================
.text$mn:00008070
.text$mn:00008070 ; Attributes: bp-based frame
.text$mn:00008070
.text$mn:00008070 ; public: __thiscall std::allocator<struct MatchedCharInserted>::allocator<struct MatchedCharInserted>(void)
.text$mn:00008070                 public ??0?$allocator@UMatchedCharInserted@@@std@@QAE@XZ
.text$mn:00008070 ??0?$allocator@UMatchedCharInserted@@@std@@QAE@XZ proc near
.text$mn:00008070                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::_Wrap_alloc<std::allocator<MatchedCharInserted>>(void)+Ap
.text$mn:00008070
.text$mn:00008070 var_4           = dword ptr -4
.text$mn:00008070
.text$mn:00008070                 push    ebp
.text$mn:00008071                 mov     ebp, esp
.text$mn:00008073                 push    ecx
.text$mn:00008074                 mov     [ebp+var_4], ecx
.text$mn:00008077                 mov     eax, [ebp+var_4]
.text$mn:0000807A                 mov     esp, ebp
.text$mn:0000807C                 pop     ebp
.text$mn:0000807D                 retn
.text$mn:0000807D ??0?$allocator@UMatchedCharInserted@@@std@@QAE@XZ endp
.text$mn:0000807D
.text$mn:0000807D ; ---------------------------------------------------------------------------
.text$mn:0000807E                 align 10h
.text$mn:0000807E _text$mn        ends
.text$mn:0000807E
.text$mn:00008080 ; ===========================================================================
.text$mn:00008080
.text$mn:00008080 ; Segment type: Pure code
.text$mn:00008080 ; Segment permissions: Read/Execute
.text$mn:00008080 _text$mn        segment para public 'CODE' use32
.text$mn:00008080                 assume cs:_text$mn
.text$mn:00008080                 ;org 8080h
.text$mn:00008080 ; COMDAT (pick any)
.text$mn:00008080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008080
.text$mn:00008080 ; =============== S U B R O U T I N E =======================================
.text$mn:00008080
.text$mn:00008080 ; Attributes: bp-based frame
.text$mn:00008080
.text$mn:00008080 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00008080                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00008080 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00008080                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00008080                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00008080
.text$mn:00008080 var_4           = dword ptr -4
.text$mn:00008080
.text$mn:00008080                 push    ebp
.text$mn:00008081                 mov     ebp, esp
.text$mn:00008083                 push    ecx
.text$mn:00008084                 mov     [ebp+var_4], ecx
.text$mn:00008087                 mov     eax, [ebp+var_4]
.text$mn:0000808A                 mov     esp, ebp
.text$mn:0000808C                 pop     ebp
.text$mn:0000808D                 retn
.text$mn:0000808D ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:0000808D
.text$mn:0000808D ; ---------------------------------------------------------------------------
.text$mn:0000808E                 align 10h
.text$mn:0000808E _text$mn        ends
.text$mn:0000808E
.text$mn:00008090 ; ===========================================================================
.text$mn:00008090
.text$mn:00008090 ; Segment type: Pure code
.text$mn:00008090 ; Segment permissions: Read/Execute
.text$mn:00008090 _text$mn        segment para public 'CODE' use32
.text$mn:00008090                 assume cs:_text$mn
.text$mn:00008090                 ;org 8090h
.text$mn:00008090 ; COMDAT (pick any)
.text$mn:00008090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008090
.text$mn:00008090 ; =============== S U B R O U T I N E =======================================
.text$mn:00008090
.text$mn:00008090 ; Attributes: bp-based frame
.text$mn:00008090
.text$mn:00008090 ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:00008090                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:00008090 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:00008090                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:00008090                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+2Bp
.text$mn:00008090
.text$mn:00008090 var_4           = dword ptr -4
.text$mn:00008090
.text$mn:00008090                 push    ebp
.text$mn:00008091                 mov     ebp, esp
.text$mn:00008093                 push    ecx
.text$mn:00008094                 mov     [ebp+var_4], ecx
.text$mn:00008097                 mov     eax, [ebp+var_4]
.text$mn:0000809A                 mov     esp, ebp
.text$mn:0000809C                 pop     ebp
.text$mn:0000809D                 retn
.text$mn:0000809D ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:0000809D
.text$mn:0000809D ; ---------------------------------------------------------------------------
.text$mn:0000809E                 align 10h
.text$mn:0000809E _text$mn        ends
.text$mn:0000809E
.text$mn:000080A0 ; ===========================================================================
.text$mn:000080A0
.text$mn:000080A0 ; Segment type: Pure code
.text$mn:000080A0 ; Segment permissions: Read/Execute
.text$mn:000080A0 _text$mn        segment para public 'CODE' use32
.text$mn:000080A0                 assume cs:_text$mn
.text$mn:000080A0                 ;org 80A0h
.text$mn:000080A0 ; COMDAT (pick any)
.text$mn:000080A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080A0
.text$mn:000080A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080A0
.text$mn:000080A0 ; Attributes: bp-based frame
.text$mn:000080A0
.text$mn:000080A0 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:000080A0                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:000080A0 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:000080A0                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:000080A0                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:000080A0
.text$mn:000080A0 var_4           = dword ptr -4
.text$mn:000080A0
.text$mn:000080A0                 push    ebp
.text$mn:000080A1                 mov     ebp, esp
.text$mn:000080A3                 push    ecx
.text$mn:000080A4                 mov     [ebp+var_4], ecx
.text$mn:000080A7                 mov     eax, [ebp+var_4]
.text$mn:000080AA                 mov     esp, ebp
.text$mn:000080AC                 pop     ebp
.text$mn:000080AD                 retn    4
.text$mn:000080AD ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:000080AD
.text$mn:000080AD _text$mn        ends
.text$mn:000080AD
.text$mn:000080B0 ; ===========================================================================
.text$mn:000080B0
.text$mn:000080B0 ; Segment type: Pure code
.text$mn:000080B0 ; Segment permissions: Read/Execute
.text$mn:000080B0 _text$mn        segment para public 'CODE' use32
.text$mn:000080B0                 assume cs:_text$mn
.text$mn:000080B0                 ;org 80B0h
.text$mn:000080B0 ; COMDAT (pick any)
.text$mn:000080B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080B0
.text$mn:000080B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080B0
.text$mn:000080B0 ; Attributes: bp-based frame
.text$mn:000080B0
.text$mn:000080B0 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000080B0                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:000080B0 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:000080B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:000080B0
.text$mn:000080B0 var_4           = dword ptr -4
.text$mn:000080B0
.text$mn:000080B0                 push    ebp
.text$mn:000080B1                 mov     ebp, esp
.text$mn:000080B3                 push    ecx
.text$mn:000080B4                 mov     [ebp+var_4], ecx
.text$mn:000080B7                 mov     eax, [ebp+var_4]
.text$mn:000080BA                 mov     esp, ebp
.text$mn:000080BC                 pop     ebp
.text$mn:000080BD                 retn
.text$mn:000080BD ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:000080BD
.text$mn:000080BD ; ---------------------------------------------------------------------------
.text$mn:000080BE                 align 10h
.text$mn:000080BE _text$mn        ends
.text$mn:000080BE
.text$mn:000080C0 ; ===========================================================================
.text$mn:000080C0
.text$mn:000080C0 ; Segment type: Pure code
.text$mn:000080C0 ; Segment permissions: Read/Execute
.text$mn:000080C0 _text$mn        segment para public 'CODE' use32
.text$mn:000080C0                 assume cs:_text$mn
.text$mn:000080C0                 ;org 80C0h
.text$mn:000080C0 ; COMDAT (pick any)
.text$mn:000080C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080C0
.text$mn:000080C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080C0
.text$mn:000080C0 ; Attributes: bp-based frame
.text$mn:000080C0
.text$mn:000080C0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000080C0                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000080C0 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000080C0                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:000080C0                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:000080C0
.text$mn:000080C0 var_14          = dword ptr -14h
.text$mn:000080C0 var_D           = byte ptr -0Dh
.text$mn:000080C0 var_C           = dword ptr -0Ch
.text$mn:000080C0 var_4           = dword ptr -4
.text$mn:000080C0 Str             = dword ptr  8
.text$mn:000080C0
.text$mn:000080C0                 push    ebp
.text$mn:000080C1                 mov     ebp, esp
.text$mn:000080C3                 push    0FFFFFFFFh
.text$mn:000080C5                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000080CA                 mov     eax, large fs:0
.text$mn:000080D0                 push    eax
.text$mn:000080D1                 sub     esp, 8
.text$mn:000080D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000080D9                 xor     eax, ebp
.text$mn:000080DB                 push    eax
.text$mn:000080DC                 lea     eax, [ebp+var_C]
.text$mn:000080DF                 mov     large fs:0, eax
.text$mn:000080E5                 mov     [ebp+var_14], ecx
.text$mn:000080E8                 lea     ecx, [ebp+var_D]
.text$mn:000080EB                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000080F0                 push    eax
.text$mn:000080F1                 mov     ecx, [ebp+var_14]
.text$mn:000080F4                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:000080F9                 mov     [ebp+var_4], 0
.text$mn:00008100                 push    0               ; Size
.text$mn:00008102                 push    0               ; char
.text$mn:00008104                 mov     ecx, [ebp+var_14]
.text$mn:00008107                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000810C                 mov     eax, [ebp+Str]
.text$mn:0000810F                 push    eax             ; Str
.text$mn:00008110                 mov     ecx, [ebp+var_14]
.text$mn:00008113                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00008118                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000811F                 mov     eax, [ebp+var_14]
.text$mn:00008122                 mov     ecx, [ebp+var_C]
.text$mn:00008125                 mov     large fs:0, ecx
.text$mn:0000812C                 pop     ecx
.text$mn:0000812D                 mov     esp, ebp
.text$mn:0000812F                 pop     ebp
.text$mn:00008130                 retn    4
.text$mn:00008130 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00008130
.text$mn:00008130 ; ---------------------------------------------------------------------------
.text$mn:00008133                 align 4
.text$mn:00008133 _text$mn        ends
.text$mn:00008133
.text$x:00008134 ; ===========================================================================
.text$x:00008134
.text$x:00008134 ; Segment type: Pure code
.text$x:00008134 ; Segment permissions: Read/Execute
.text$x:00008134 _text$x         segment para public 'CODE' use32
.text$x:00008134                 assume cs:_text$x
.text$x:00008134                 ;org 8134h
.text$x:00008134 ; COMDAT (pick associative to section at 80C0)
.text$x:00008134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008134
.text$x:00008134 ; =============== S U B R O U T I N E =======================================
.text$x:00008134
.text$x:00008134
.text$x:00008134 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00008134                                         ; DATA XREF: .xdata$x:0000F65Co
.text$x:00008134                 mov     ecx, [ebp-14h]
.text$x:00008137                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00008137 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00008137
.text$x:0000813C
.text$x:0000813C ; =============== S U B R O U T I N E =======================================
.text$x:0000813C
.text$x:0000813C
.text$x:0000813C __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:0000813C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:0000813C
.text$x:0000813C arg_4           = dword ptr  8
.text$x:0000813C
.text$x:0000813C                 mov     edx, [esp+arg_4]
.text$x:00008140                 lea     eax, [edx+0Ch]
.text$x:00008143                 mov     ecx, [edx-0Ch]
.text$x:00008146                 xor     ecx, eax
.text$x:00008148                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000814D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00008152                 jmp     ___CxxFrameHandler3
.text$x:00008152 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00008152
.text$x:00008152 ; ---------------------------------------------------------------------------
.text$x:00008157                 align 4
.text$x:00008157 _text$x         ends
.text$x:00008157
.text$mn:00008158 ; ===========================================================================
.text$mn:00008158
.text$mn:00008158 ; Segment type: Pure code
.text$mn:00008158 ; Segment permissions: Read/Execute
.text$mn:00008158 _text$mn        segment para public 'CODE' use32
.text$mn:00008158                 assume cs:_text$mn
.text$mn:00008158                 ;org 8158h
.text$mn:00008158 ; COMDAT (pick any)
.text$mn:00008158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008158
.text$mn:00008158 ; =============== S U B R O U T I N E =======================================
.text$mn:00008158
.text$mn:00008158 ; Attributes: bp-based frame
.text$mn:00008158
.text$mn:00008158 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00008158                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00008158 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00008158                                         ; CODE XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+61p
.text$mn:00008158                                         ; removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+97p ...
.text$mn:00008158
.text$mn:00008158 var_14          = dword ptr -14h
.text$mn:00008158 var_D           = byte ptr -0Dh
.text$mn:00008158 var_C           = dword ptr -0Ch
.text$mn:00008158 var_4           = dword ptr -4
.text$mn:00008158 arg_0           = dword ptr  8
.text$mn:00008158
.text$mn:00008158                 push    ebp
.text$mn:00008159                 mov     ebp, esp
.text$mn:0000815B                 push    0FFFFFFFFh
.text$mn:0000815D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00008162                 mov     eax, large fs:0
.text$mn:00008168                 push    eax
.text$mn:00008169                 sub     esp, 8
.text$mn:0000816C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008171                 xor     eax, ebp
.text$mn:00008173                 push    eax
.text$mn:00008174                 lea     eax, [ebp+var_C]
.text$mn:00008177                 mov     large fs:0, eax
.text$mn:0000817D                 mov     [ebp+var_14], ecx
.text$mn:00008180                 lea     eax, [ebp+var_D]
.text$mn:00008183                 push    eax
.text$mn:00008184                 mov     ecx, [ebp+arg_0]
.text$mn:00008187                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000818C                 push    eax
.text$mn:0000818D                 mov     ecx, [ebp+var_14]
.text$mn:00008190                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00008195                 mov     [ebp+var_4], 0
.text$mn:0000819C                 push    0
.text$mn:0000819E                 push    0
.text$mn:000081A0                 mov     ecx, [ebp+var_14]
.text$mn:000081A3                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000081A8                 mov     ecx, [ebp+arg_0]
.text$mn:000081AB                 push    ecx
.text$mn:000081AC                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000081B1                 add     esp, 4
.text$mn:000081B4                 push    eax
.text$mn:000081B5                 mov     ecx, [ebp+var_14]
.text$mn:000081B8                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000081BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000081C4                 mov     eax, [ebp+var_14]
.text$mn:000081C7                 mov     ecx, [ebp+var_C]
.text$mn:000081CA                 mov     large fs:0, ecx
.text$mn:000081D1                 pop     ecx
.text$mn:000081D2                 mov     esp, ebp
.text$mn:000081D4                 pop     ebp
.text$mn:000081D5                 retn    4
.text$mn:000081D5 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:000081D5
.text$mn:000081D5 _text$mn        ends
.text$mn:000081D5
.text$x:000081D8 ; ===========================================================================
.text$x:000081D8
.text$x:000081D8 ; Segment type: Pure code
.text$x:000081D8 ; Segment permissions: Read/Execute
.text$x:000081D8 _text$x         segment para public 'CODE' use32
.text$x:000081D8                 assume cs:_text$x
.text$x:000081D8                 ;org 81D8h
.text$x:000081D8 ; COMDAT (pick associative to section at 8158)
.text$x:000081D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000081D8
.text$x:000081D8 ; =============== S U B R O U T I N E =======================================
.text$x:000081D8
.text$x:000081D8
.text$x:000081D8 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:000081D8                                         ; DATA XREF: .xdata$x:0000FD04o
.text$x:000081D8                 mov     ecx, [ebp-14h]
.text$x:000081DB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000081DB __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:000081DB
.text$x:000081E0
.text$x:000081E0 ; =============== S U B R O U T I N E =======================================
.text$x:000081E0
.text$x:000081E0
.text$x:000081E0 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:000081E0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:000081E0
.text$x:000081E0 arg_4           = dword ptr  8
.text$x:000081E0
.text$x:000081E0                 mov     edx, [esp+arg_4]
.text$x:000081E4                 lea     eax, [edx+0Ch]
.text$x:000081E7                 mov     ecx, [edx-0Ch]
.text$x:000081EA                 xor     ecx, eax
.text$x:000081EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000081F1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:000081F6                 jmp     ___CxxFrameHandler3
.text$x:000081F6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:000081F6
.text$x:000081F6 ; ---------------------------------------------------------------------------
.text$x:000081FB                 align 4
.text$x:000081FB _text$x         ends
.text$x:000081FB
.text$mn:000081FC ; ===========================================================================
.text$mn:000081FC
.text$mn:000081FC ; Segment type: Pure code
.text$mn:000081FC ; Segment permissions: Read/Execute
.text$mn:000081FC _text$mn        segment para public 'CODE' use32
.text$mn:000081FC                 assume cs:_text$mn
.text$mn:000081FC                 ;org 81FCh
.text$mn:000081FC ; COMDAT (pick any)
.text$mn:000081FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081FC
.text$mn:000081FC ; =============== S U B R O U T I N E =======================================
.text$mn:000081FC
.text$mn:000081FC ; Attributes: bp-based frame
.text$mn:000081FC
.text$mn:000081FC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000081FC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000081FC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:000081FC                                         ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+1CBp
.text$mn:000081FC                                         ; AutoCompletion::showPathCompletion(void)+124p ...
.text$mn:000081FC
.text$mn:000081FC var_14          = dword ptr -14h
.text$mn:000081FC var_E           = byte ptr -0Eh
.text$mn:000081FC var_D           = byte ptr -0Dh
.text$mn:000081FC var_C           = dword ptr -0Ch
.text$mn:000081FC var_4           = dword ptr -4
.text$mn:000081FC arg_0           = dword ptr  8
.text$mn:000081FC
.text$mn:000081FC                 push    ebp
.text$mn:000081FD                 mov     ebp, esp
.text$mn:000081FF                 push    0FFFFFFFFh
.text$mn:00008201                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00008206                 mov     eax, large fs:0
.text$mn:0000820C                 push    eax
.text$mn:0000820D                 sub     esp, 8
.text$mn:00008210                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008215                 xor     eax, ebp
.text$mn:00008217                 push    eax
.text$mn:00008218                 lea     eax, [ebp+var_C]
.text$mn:0000821B                 mov     large fs:0, eax
.text$mn:00008221                 mov     [ebp+var_14], ecx
.text$mn:00008224                 lea     eax, [ebp+var_D]
.text$mn:00008227                 push    eax
.text$mn:00008228                 lea     ecx, [ebp+var_E]
.text$mn:0000822B                 push    ecx
.text$mn:0000822C                 mov     ecx, [ebp+arg_0]
.text$mn:0000822F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008234                 mov     ecx, eax
.text$mn:00008236                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:0000823B                 push    eax
.text$mn:0000823C                 mov     ecx, [ebp+var_14]
.text$mn:0000823F                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00008244                 mov     [ebp+var_4], 0
.text$mn:0000824B                 push    0
.text$mn:0000824D                 push    0
.text$mn:0000824F                 mov     ecx, [ebp+var_14]
.text$mn:00008252                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008257                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000825D                 push    edx
.text$mn:0000825E                 push    0
.text$mn:00008260                 mov     eax, [ebp+arg_0]
.text$mn:00008263                 push    eax
.text$mn:00008264                 mov     ecx, [ebp+var_14]
.text$mn:00008267                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000826C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008273                 mov     eax, [ebp+var_14]
.text$mn:00008276                 mov     ecx, [ebp+var_C]
.text$mn:00008279                 mov     large fs:0, ecx
.text$mn:00008280                 pop     ecx
.text$mn:00008281                 mov     esp, ebp
.text$mn:00008283                 pop     ebp
.text$mn:00008284                 retn    4
.text$mn:00008284 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00008284
.text$mn:00008284 ; ---------------------------------------------------------------------------
.text$mn:00008287                 align 4
.text$mn:00008287 _text$mn        ends
.text$mn:00008287
.text$x:00008288 ; ===========================================================================
.text$x:00008288
.text$x:00008288 ; Segment type: Pure code
.text$x:00008288 ; Segment permissions: Read/Execute
.text$x:00008288 _text$x         segment para public 'CODE' use32
.text$x:00008288                 assume cs:_text$x
.text$x:00008288                 ;org 8288h
.text$x:00008288 ; COMDAT (pick associative to section at 81FC)
.text$x:00008288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008288
.text$x:00008288 ; =============== S U B R O U T I N E =======================================
.text$x:00008288
.text$x:00008288
.text$x:00008288 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00008288                                         ; DATA XREF: .xdata$x:0000FC54o
.text$x:00008288                 mov     ecx, [ebp-14h]
.text$x:0000828B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000828B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000828B
.text$x:00008290
.text$x:00008290 ; =============== S U B R O U T I N E =======================================
.text$x:00008290
.text$x:00008290
.text$x:00008290 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00008290                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00008290
.text$x:00008290 arg_4           = dword ptr  8
.text$x:00008290
.text$x:00008290                 mov     edx, [esp+arg_4]
.text$x:00008294                 lea     eax, [edx+0Ch]
.text$x:00008297                 mov     ecx, [edx-0Ch]
.text$x:0000829A                 xor     ecx, eax
.text$x:0000829C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000082A1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:000082A6                 jmp     ___CxxFrameHandler3
.text$x:000082A6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:000082A6
.text$x:000082A6 ; ---------------------------------------------------------------------------
.text$x:000082AB                 align 4
.text$x:000082AB _text$x         ends
.text$x:000082AB
.text$mn:000082AC ; ===========================================================================
.text$mn:000082AC
.text$mn:000082AC ; Segment type: Pure code
.text$mn:000082AC ; Segment permissions: Read/Execute
.text$mn:000082AC _text$mn        segment para public 'CODE' use32
.text$mn:000082AC                 assume cs:_text$mn
.text$mn:000082AC                 ;org 82ACh
.text$mn:000082AC ; COMDAT (pick any)
.text$mn:000082AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082AC
.text$mn:000082AC ; =============== S U B R O U T I N E =======================================
.text$mn:000082AC
.text$mn:000082AC ; Attributes: bp-based frame
.text$mn:000082AC
.text$mn:000082AC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int, class std::allocator<wchar_t> const &)
.text$mn:000082AC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$mn:000082AC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z proc near
.text$mn:000082AC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+4Bp
.text$mn:000082AC
.text$mn:000082AC var_10          = dword ptr -10h
.text$mn:000082AC var_C           = dword ptr -0Ch
.text$mn:000082AC var_4           = dword ptr -4
.text$mn:000082AC arg_0           = dword ptr  8
.text$mn:000082AC arg_4           = dword ptr  0Ch
.text$mn:000082AC arg_8           = dword ptr  10h
.text$mn:000082AC arg_C           = dword ptr  14h
.text$mn:000082AC
.text$mn:000082AC                 push    ebp
.text$mn:000082AD                 mov     ebp, esp
.text$mn:000082AF                 push    0FFFFFFFFh
.text$mn:000082B1                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$mn:000082B6                 mov     eax, large fs:0
.text$mn:000082BC                 push    eax
.text$mn:000082BD                 push    ecx
.text$mn:000082BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000082C3                 xor     eax, ebp
.text$mn:000082C5                 push    eax
.text$mn:000082C6                 lea     eax, [ebp+var_C]
.text$mn:000082C9                 mov     large fs:0, eax
.text$mn:000082CF                 mov     [ebp+var_10], ecx
.text$mn:000082D2                 mov     eax, [ebp+arg_C]
.text$mn:000082D5                 push    eax
.text$mn:000082D6                 mov     ecx, [ebp+var_10]
.text$mn:000082D9                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000082DE                 mov     [ebp+var_4], 0
.text$mn:000082E5                 push    0
.text$mn:000082E7                 push    0
.text$mn:000082E9                 mov     ecx, [ebp+var_10]
.text$mn:000082EC                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000082F1                 mov     ecx, [ebp+arg_8]
.text$mn:000082F4                 push    ecx
.text$mn:000082F5                 mov     edx, [ebp+arg_4]
.text$mn:000082F8                 push    edx
.text$mn:000082F9                 mov     eax, [ebp+arg_0]
.text$mn:000082FC                 push    eax
.text$mn:000082FD                 mov     ecx, [ebp+var_10]
.text$mn:00008300                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00008305                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000830C                 mov     eax, [ebp+var_10]
.text$mn:0000830F                 mov     ecx, [ebp+var_C]
.text$mn:00008312                 mov     large fs:0, ecx
.text$mn:00008319                 pop     ecx
.text$mn:0000831A                 mov     esp, ebp
.text$mn:0000831C                 pop     ebp
.text$mn:0000831D                 retn    10h
.text$mn:0000831D ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z endp
.text$mn:0000831D
.text$mn:0000831D _text$mn        ends
.text$mn:0000831D
.text$x:00008320 ; ===========================================================================
.text$x:00008320
.text$x:00008320 ; Segment type: Pure code
.text$x:00008320 ; Segment permissions: Read/Execute
.text$x:00008320 _text$x         segment para public 'CODE' use32
.text$x:00008320                 assume cs:_text$x
.text$x:00008320                 ;org 8320h
.text$x:00008320 ; COMDAT (pick associative to section at 82AC)
.text$x:00008320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008320
.text$x:00008320 ; =============== S U B R O U T I N E =======================================
.text$x:00008320
.text$x:00008320
.text$x:00008320 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0 proc near
.text$x:00008320                                         ; DATA XREF: .xdata$x:0000FCACo
.text$x:00008320                 mov     ecx, [ebp-10h]
.text$x:00008323                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00008323 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0 endp
.text$x:00008323
.text$x:00008328
.text$x:00008328 ; =============== S U B R O U T I N E =======================================
.text$x:00008328
.text$x:00008328
.text$x:00008328 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z proc near
.text$x:00008328                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)+5o
.text$x:00008328
.text$x:00008328 arg_4           = dword ptr  8
.text$x:00008328
.text$x:00008328                 mov     edx, [esp+arg_4]
.text$x:0000832C                 lea     eax, [edx+0Ch]
.text$x:0000832F                 mov     ecx, [edx-8]
.text$x:00008332                 xor     ecx, eax
.text$x:00008334                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008339                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$x:0000833E                 jmp     ___CxxFrameHandler3
.text$x:0000833E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z endp
.text$x:0000833E
.text$x:0000833E ; ---------------------------------------------------------------------------
.text$x:00008343                 align 4
.text$x:00008343 _text$x         ends
.text$x:00008343
.text$mn:00008344 ; ===========================================================================
.text$mn:00008344
.text$mn:00008344 ; Segment type: Pure code
.text$mn:00008344 ; Segment permissions: Read/Execute
.text$mn:00008344 _text$mn        segment para public 'CODE' use32
.text$mn:00008344                 assume cs:_text$mn
.text$mn:00008344                 ;org 8344h
.text$mn:00008344 ; COMDAT (pick any)
.text$mn:00008344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008344
.text$mn:00008344 ; =============== S U B R O U T I N E =======================================
.text$mn:00008344
.text$mn:00008344 ; Attributes: bp-based frame
.text$mn:00008344
.text$mn:00008344 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00008344                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00008344 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00008344                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+5D3p
.text$mn:00008344                                         ; AutoCompletion::showWordComplete(bool)+27Ep ...
.text$mn:00008344
.text$mn:00008344 var_14          = dword ptr -14h
.text$mn:00008344 var_D           = byte ptr -0Dh
.text$mn:00008344 var_C           = dword ptr -0Ch
.text$mn:00008344 var_4           = dword ptr -4
.text$mn:00008344 Str             = dword ptr  8
.text$mn:00008344
.text$mn:00008344                 push    ebp
.text$mn:00008345                 mov     ebp, esp
.text$mn:00008347                 push    0FFFFFFFFh
.text$mn:00008349                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000834E                 mov     eax, large fs:0
.text$mn:00008354                 push    eax
.text$mn:00008355                 sub     esp, 8
.text$mn:00008358                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000835D                 xor     eax, ebp
.text$mn:0000835F                 push    eax
.text$mn:00008360                 lea     eax, [ebp+var_C]
.text$mn:00008363                 mov     large fs:0, eax
.text$mn:00008369                 mov     [ebp+var_14], ecx
.text$mn:0000836C                 lea     ecx, [ebp+var_D]
.text$mn:0000836F                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00008374                 push    eax
.text$mn:00008375                 mov     ecx, [ebp+var_14]
.text$mn:00008378                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000837D                 mov     [ebp+var_4], 0
.text$mn:00008384                 push    0
.text$mn:00008386                 push    0
.text$mn:00008388                 mov     ecx, [ebp+var_14]
.text$mn:0000838B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008390                 mov     eax, [ebp+Str]
.text$mn:00008393                 push    eax             ; Str
.text$mn:00008394                 mov     ecx, [ebp+var_14]
.text$mn:00008397                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:0000839C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000083A3                 mov     eax, [ebp+var_14]
.text$mn:000083A6                 mov     ecx, [ebp+var_C]
.text$mn:000083A9                 mov     large fs:0, ecx
.text$mn:000083B0                 pop     ecx
.text$mn:000083B1                 mov     esp, ebp
.text$mn:000083B3                 pop     ebp
.text$mn:000083B4                 retn    4
.text$mn:000083B4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000083B4
.text$mn:000083B4 ; ---------------------------------------------------------------------------
.text$mn:000083B7                 align 4
.text$mn:000083B7 _text$mn        ends
.text$mn:000083B7
.text$x:000083B8 ; ===========================================================================
.text$x:000083B8
.text$x:000083B8 ; Segment type: Pure code
.text$x:000083B8 ; Segment permissions: Read/Execute
.text$x:000083B8 _text$x         segment para public 'CODE' use32
.text$x:000083B8                 assume cs:_text$x
.text$x:000083B8                 ;org 83B8h
.text$x:000083B8 ; COMDAT (pick associative to section at 8344)
.text$x:000083B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000083B8
.text$x:000083B8 ; =============== S U B R O U T I N E =======================================
.text$x:000083B8
.text$x:000083B8
.text$x:000083B8 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000083B8                                         ; DATA XREF: .xdata$x:0000FCD8o
.text$x:000083B8                 mov     ecx, [ebp-14h]
.text$x:000083BB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000083BB __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000083BB
.text$x:000083C0
.text$x:000083C0 ; =============== S U B R O U T I N E =======================================
.text$x:000083C0
.text$x:000083C0
.text$x:000083C0 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000083C0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000083C0
.text$x:000083C0 arg_4           = dword ptr  8
.text$x:000083C0
.text$x:000083C0                 mov     edx, [esp+arg_4]
.text$x:000083C4                 lea     eax, [edx+0Ch]
.text$x:000083C7                 mov     ecx, [edx-0Ch]
.text$x:000083CA                 xor     ecx, eax
.text$x:000083CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000083D1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000083D6                 jmp     ___CxxFrameHandler3
.text$x:000083D6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000083D6
.text$x:000083D6 ; ---------------------------------------------------------------------------
.text$x:000083DB                 align 4
.text$x:000083DB _text$x         ends
.text$x:000083DB
.text$mn:000083DC ; ===========================================================================
.text$mn:000083DC
.text$mn:000083DC ; Segment type: Pure code
.text$mn:000083DC ; Segment permissions: Read/Execute
.text$mn:000083DC _text$mn        segment para public 'CODE' use32
.text$mn:000083DC                 assume cs:_text$mn
.text$mn:000083DC                 ;org 83DCh
.text$mn:000083DC ; COMDAT (pick any)
.text$mn:000083DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083DC
.text$mn:000083DC ; =============== S U B R O U T I N E =======================================
.text$mn:000083DC
.text$mn:000083DC ; Attributes: bp-based frame
.text$mn:000083DC
.text$mn:000083DC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000083DC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000083DC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000083DC                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+41p
.text$mn:000083DC                                         ; AutoCompletion::showPathCompletion(void)+ECp ...
.text$mn:000083DC
.text$mn:000083DC var_14          = dword ptr -14h
.text$mn:000083DC var_D           = byte ptr -0Dh
.text$mn:000083DC var_C           = dword ptr -0Ch
.text$mn:000083DC var_4           = dword ptr -4
.text$mn:000083DC
.text$mn:000083DC                 push    ebp
.text$mn:000083DD                 mov     ebp, esp
.text$mn:000083DF                 push    0FFFFFFFFh
.text$mn:000083E1                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000083E6                 mov     eax, large fs:0
.text$mn:000083EC                 push    eax
.text$mn:000083ED                 sub     esp, 8
.text$mn:000083F0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000083F5                 xor     eax, ebp
.text$mn:000083F7                 push    eax
.text$mn:000083F8                 lea     eax, [ebp+var_C]
.text$mn:000083FB                 mov     large fs:0, eax
.text$mn:00008401                 mov     [ebp+var_14], ecx
.text$mn:00008404                 lea     ecx, [ebp+var_D]
.text$mn:00008407                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000840C                 push    eax
.text$mn:0000840D                 mov     ecx, [ebp+var_14]
.text$mn:00008410                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00008415                 mov     [ebp+var_4], 0
.text$mn:0000841C                 push    0
.text$mn:0000841E                 push    0
.text$mn:00008420                 mov     ecx, [ebp+var_14]
.text$mn:00008423                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008428                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000842F                 mov     eax, [ebp+var_14]
.text$mn:00008432                 mov     ecx, [ebp+var_C]
.text$mn:00008435                 mov     large fs:0, ecx
.text$mn:0000843C                 pop     ecx
.text$mn:0000843D                 mov     esp, ebp
.text$mn:0000843F                 pop     ebp
.text$mn:00008440                 retn
.text$mn:00008440 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00008440
.text$mn:00008440 ; ---------------------------------------------------------------------------
.text$mn:00008441                 align 4
.text$mn:00008441 _text$mn        ends
.text$mn:00008441
.text$x:00008444 ; ===========================================================================
.text$x:00008444
.text$x:00008444 ; Segment type: Pure code
.text$x:00008444 ; Segment permissions: Read/Execute
.text$x:00008444 _text$x         segment para public 'CODE' use32
.text$x:00008444                 assume cs:_text$x
.text$x:00008444                 ;org 8444h
.text$x:00008444 ; COMDAT (pick associative to section at 83DC)
.text$x:00008444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008444
.text$x:00008444 ; =============== S U B R O U T I N E =======================================
.text$x:00008444
.text$x:00008444
.text$x:00008444 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00008444                                         ; DATA XREF: .xdata$x:0000FC80o
.text$x:00008444                 mov     ecx, [ebp-14h]
.text$x:00008447                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00008447 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00008447
.text$x:0000844C
.text$x:0000844C ; =============== S U B R O U T I N E =======================================
.text$x:0000844C
.text$x:0000844C
.text$x:0000844C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:0000844C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:0000844C
.text$x:0000844C arg_4           = dword ptr  8
.text$x:0000844C
.text$x:0000844C                 mov     edx, [esp+arg_4]
.text$x:00008450                 lea     eax, [edx+0Ch]
.text$x:00008453                 mov     ecx, [edx-0Ch]
.text$x:00008456                 xor     ecx, eax
.text$x:00008458                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000845D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00008462                 jmp     ___CxxFrameHandler3
.text$x:00008462 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00008462
.text$x:00008462 ; ---------------------------------------------------------------------------
.text$x:00008467                 align 4
.text$x:00008467 _text$x         ends
.text$x:00008467
.text$mn:00008468 ; ===========================================================================
.text$mn:00008468
.text$mn:00008468 ; Segment type: Pure code
.text$mn:00008468 ; Segment permissions: Read/Execute
.text$mn:00008468 _text$mn        segment para public 'CODE' use32
.text$mn:00008468                 assume cs:_text$mn
.text$mn:00008468                 ;org 8468h
.text$mn:00008468 ; COMDAT (pick any)
.text$mn:00008468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008468
.text$mn:00008468 ; =============== S U B R O U T I N E =======================================
.text$mn:00008468
.text$mn:00008468 ; Attributes: bp-based frame
.text$mn:00008468
.text$mn:00008468 ; public: __thiscall std::ctype<wchar_t>::ctype<wchar_t>(class std::_Locinfo const &, unsigned int)
.text$mn:00008468                 public ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:00008468 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$mn:00008468                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+A2p
.text$mn:00008468
.text$mn:00008468 var_10          = dword ptr -10h
.text$mn:00008468 var_C           = dword ptr -0Ch
.text$mn:00008468 var_4           = dword ptr -4
.text$mn:00008468 arg_0           = dword ptr  8
.text$mn:00008468 arg_4           = dword ptr  0Ch
.text$mn:00008468
.text$mn:00008468                 push    ebp
.text$mn:00008469                 mov     ebp, esp
.text$mn:0000846B                 push    0FFFFFFFFh
.text$mn:0000846D                 push    offset __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:00008472                 mov     eax, large fs:0
.text$mn:00008478                 push    eax
.text$mn:00008479                 push    ecx
.text$mn:0000847A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000847F                 xor     eax, ebp
.text$mn:00008481                 push    eax
.text$mn:00008482                 lea     eax, [ebp+var_C]
.text$mn:00008485                 mov     large fs:0, eax
.text$mn:0000848B                 mov     [ebp+var_10], ecx
.text$mn:0000848E                 mov     eax, [ebp+arg_4]
.text$mn:00008491                 push    eax             ; unsigned int
.text$mn:00008492                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008495                 call    ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base(uint)
.text$mn:0000849A                 mov     [ebp+var_4], 0
.text$mn:000084A1                 mov     ecx, [ebp+var_10]
.text$mn:000084A4                 mov     dword ptr [ecx], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:000084AA                 mov     edx, [ebp+arg_0]
.text$mn:000084AD                 push    edx
.text$mn:000084AE                 mov     ecx, [ebp+var_10]
.text$mn:000084B1                 call    ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<wchar_t>::_Init(std::_Locinfo const &)
.text$mn:000084B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000084BD                 mov     eax, [ebp+var_10]
.text$mn:000084C0                 mov     ecx, [ebp+var_C]
.text$mn:000084C3                 mov     large fs:0, ecx
.text$mn:000084CA                 pop     ecx
.text$mn:000084CB                 mov     esp, ebp
.text$mn:000084CD                 pop     ebp
.text$mn:000084CE                 retn    8
.text$mn:000084CE ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$mn:000084CE
.text$mn:000084CE ; ---------------------------------------------------------------------------
.text$mn:000084D1                 align 4
.text$mn:000084D1 _text$mn        ends
.text$mn:000084D1
.text$x:000084D4 ; ===========================================================================
.text$x:000084D4
.text$x:000084D4 ; Segment type: Pure code
.text$x:000084D4 ; Segment permissions: Read/Execute
.text$x:000084D4 _text$x         segment para public 'CODE' use32
.text$x:000084D4                 assume cs:_text$x
.text$x:000084D4                 ;org 84D4h
.text$x:000084D4 ; COMDAT (pick associative to section at 8468)
.text$x:000084D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000084D4
.text$x:000084D4 ; =============== S U B R O U T I N E =======================================
.text$x:000084D4
.text$x:000084D4
.text$x:000084D4 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 proc near
.text$x:000084D4                                         ; DATA XREF: .xdata$x:0000F958o
.text$x:000084D4                 mov     ecx, [ebp-10h]  ; this
.text$x:000084D7                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:000084D7 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 endp
.text$x:000084D7
.text$x:000084DC
.text$x:000084DC ; =============== S U B R O U T I N E =======================================
.text$x:000084DC
.text$x:000084DC
.text$x:000084DC __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$x:000084DC                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+5o
.text$x:000084DC
.text$x:000084DC arg_4           = dword ptr  8
.text$x:000084DC
.text$x:000084DC                 mov     edx, [esp+arg_4]
.text$x:000084E0                 lea     eax, [edx+0Ch]
.text$x:000084E3                 mov     ecx, [edx-8]
.text$x:000084E6                 xor     ecx, eax
.text$x:000084E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000084ED                 mov     eax, offset __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$x:000084F2                 jmp     ___CxxFrameHandler3
.text$x:000084F2 __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$x:000084F2
.text$x:000084F2 ; ---------------------------------------------------------------------------
.text$x:000084F7                 align 4
.text$x:000084F7 _text$x         ends
.text$x:000084F7
.text$mn:000084F8 ; ===========================================================================
.text$mn:000084F8
.text$mn:000084F8 ; Segment type: Pure code
.text$mn:000084F8 ; Segment permissions: Read/Execute
.text$mn:000084F8 _text$mn        segment para public 'CODE' use32
.text$mn:000084F8                 assume cs:_text$mn
.text$mn:000084F8                 ;org 84F8h
.text$mn:000084F8 ; COMDAT (pick any)
.text$mn:000084F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084F8
.text$mn:000084F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000084F8
.text$mn:000084F8 ; Attributes: bp-based frame
.text$mn:000084F8
.text$mn:000084F8 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000084F8                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000084F8 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:000084F8                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+E8p
.text$mn:000084F8                                         ; AutoCompletion::showApiAndWordComplete(void)+E8p
.text$mn:000084F8
.text$mn:000084F8 var_14          = dword ptr -14h
.text$mn:000084F8 var_D           = byte ptr -0Dh
.text$mn:000084F8 var_C           = dword ptr -0Ch
.text$mn:000084F8 var_4           = dword ptr -4
.text$mn:000084F8
.text$mn:000084F8                 push    ebp
.text$mn:000084F9                 mov     ebp, esp
.text$mn:000084FB                 push    0FFFFFFFFh
.text$mn:000084FD                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00008502                 mov     eax, large fs:0
.text$mn:00008508                 push    eax
.text$mn:00008509                 sub     esp, 8
.text$mn:0000850C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008511                 xor     eax, ebp
.text$mn:00008513                 push    eax
.text$mn:00008514                 lea     eax, [ebp+var_C]
.text$mn:00008517                 mov     large fs:0, eax
.text$mn:0000851D                 mov     [ebp+var_14], ecx
.text$mn:00008520                 lea     ecx, [ebp+var_D]
.text$mn:00008523                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00008528                 push    eax
.text$mn:00008529                 mov     ecx, [ebp+var_14]
.text$mn:0000852C                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00008531                 mov     [ebp+var_4], 0
.text$mn:00008538                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000853F                 mov     eax, [ebp+var_14]
.text$mn:00008542                 mov     ecx, [ebp+var_C]
.text$mn:00008545                 mov     large fs:0, ecx
.text$mn:0000854C                 pop     ecx
.text$mn:0000854D                 mov     esp, ebp
.text$mn:0000854F                 pop     ebp
.text$mn:00008550                 retn
.text$mn:00008550 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00008550
.text$mn:00008550 ; ---------------------------------------------------------------------------
.text$mn:00008551                 align 4
.text$mn:00008551 _text$mn        ends
.text$mn:00008551
.text$x:00008554 ; ===========================================================================
.text$x:00008554
.text$x:00008554 ; Segment type: Pure code
.text$x:00008554 ; Segment permissions: Read/Execute
.text$x:00008554 _text$x         segment para public 'CODE' use32
.text$x:00008554                 assume cs:_text$x
.text$x:00008554                 ;org 8554h
.text$x:00008554 ; COMDAT (pick associative to section at 84F8)
.text$x:00008554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008554
.text$x:00008554 ; =============== S U B R O U T I N E =======================================
.text$x:00008554
.text$x:00008554
.text$x:00008554 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00008554                                         ; DATA XREF: .xdata$x:00010070o
.text$x:00008554                 mov     ecx, [ebp-14h]
.text$x:00008557                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00008557 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00008557
.text$x:0000855C
.text$x:0000855C ; =============== S U B R O U T I N E =======================================
.text$x:0000855C
.text$x:0000855C
.text$x:0000855C __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:0000855C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:0000855C
.text$x:0000855C arg_4           = dword ptr  8
.text$x:0000855C
.text$x:0000855C                 mov     edx, [esp+arg_4]
.text$x:00008560                 lea     eax, [edx+0Ch]
.text$x:00008563                 mov     ecx, [edx-0Ch]
.text$x:00008566                 xor     ecx, eax
.text$x:00008568                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000856D                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00008572                 jmp     ___CxxFrameHandler3
.text$x:00008572 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00008572
.text$x:00008572 ; ---------------------------------------------------------------------------
.text$x:00008577                 align 4
.text$x:00008577 _text$x         ends
.text$x:00008577
.text$mn:00008578 ; ===========================================================================
.text$mn:00008578
.text$mn:00008578 ; Segment type: Pure code
.text$mn:00008578 ; Segment permissions: Read/Execute
.text$mn:00008578 _text$mn        segment para public 'CODE' use32
.text$mn:00008578                 assume cs:_text$mn
.text$mn:00008578                 ;org 8578h
.text$mn:00008578 ; COMDAT (pick any)
.text$mn:00008578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008578
.text$mn:00008578 ; =============== S U B R O U T I N E =======================================
.text$mn:00008578
.text$mn:00008578 ; Attributes: bp-based frame
.text$mn:00008578
.text$mn:00008578 ; _DWORD __thiscall MatchedCharInserted::MatchedCharInserted(MatchedCharInserted *this, char, int)
.text$mn:00008578                 public ??0MatchedCharInserted@@QAE@DH@Z
.text$mn:00008578 ??0MatchedCharInserted@@QAE@DH@Z proc near
.text$mn:00008578                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+196p
.text$mn:00008578                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+1DFp ...
.text$mn:00008578
.text$mn:00008578 var_4           = dword ptr -4
.text$mn:00008578 arg_0           = byte ptr  8
.text$mn:00008578 arg_4           = dword ptr  0Ch
.text$mn:00008578
.text$mn:00008578                 push    ebp
.text$mn:00008579                 mov     ebp, esp
.text$mn:0000857B                 push    ecx
.text$mn:0000857C                 mov     [ebp+var_4], ecx
.text$mn:0000857F                 mov     eax, [ebp+var_4]
.text$mn:00008582                 mov     cl, [ebp+arg_0]
.text$mn:00008585                 mov     [eax], cl
.text$mn:00008587                 mov     edx, [ebp+var_4]
.text$mn:0000858A                 mov     eax, [ebp+arg_4]
.text$mn:0000858D                 mov     [edx+4], eax
.text$mn:00008590                 mov     eax, [ebp+var_4]
.text$mn:00008593                 mov     esp, ebp
.text$mn:00008595                 pop     ebp
.text$mn:00008596                 retn    8
.text$mn:00008596 ??0MatchedCharInserted@@QAE@DH@Z endp
.text$mn:00008596
.text$mn:00008596 ; ---------------------------------------------------------------------------
.text$mn:00008599                 align 4
.text$mn:00008599 _text$mn        ends
.text$mn:00008599
.text$mn:0000859C ; ===========================================================================
.text$mn:0000859C
.text$mn:0000859C ; Segment type: Pure code
.text$mn:0000859C ; Segment permissions: Read/Execute
.text$mn:0000859C _text$mn        segment para public 'CODE' use32
.text$mn:0000859C                 assume cs:_text$mn
.text$mn:0000859C                 ;org 859Ch
.text$mn:0000859C ; COMDAT (pick any)
.text$mn:0000859C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000859C
.text$mn:0000859C ; =============== S U B R O U T I N E =======================================
.text$mn:0000859C
.text$mn:0000859C ; Attributes: bp-based frame
.text$mn:0000859C
.text$mn:0000859C ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:0000859C                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:0000859C ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:0000859C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:0000859C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:0000859C
.text$mn:0000859C var_4           = dword ptr -4
.text$mn:0000859C
.text$mn:0000859C                 push    ebp
.text$mn:0000859D                 mov     ebp, esp
.text$mn:0000859F                 push    ecx
.text$mn:000085A0                 mov     [ebp+var_4], ecx
.text$mn:000085A3                 mov     eax, [ebp+var_4]
.text$mn:000085A6                 mov     dword ptr [eax], 0
.text$mn:000085AC                 mov     eax, [ebp+var_4]
.text$mn:000085AF                 mov     esp, ebp
.text$mn:000085B1                 pop     ebp
.text$mn:000085B2                 retn
.text$mn:000085B2 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000085B2
.text$mn:000085B2 ; ---------------------------------------------------------------------------
.text$mn:000085B3                 align 4
.text$mn:000085B3 _text$mn        ends
.text$mn:000085B3
.text$mn:000085B4 ; ===========================================================================
.text$mn:000085B4
.text$mn:000085B4 ; Segment type: Pure code
.text$mn:000085B4 ; Segment permissions: Read/Execute
.text$mn:000085B4 _text$mn        segment para public 'CODE' use32
.text$mn:000085B4                 assume cs:_text$mn
.text$mn:000085B4                 ;org 85B4h
.text$mn:000085B4 ; COMDAT (pick any)
.text$mn:000085B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085B4
.text$mn:000085B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000085B4
.text$mn:000085B4 ; Attributes: bp-based frame
.text$mn:000085B4
.text$mn:000085B4 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000085B4                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000085B4 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000085B4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000085B4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:000085B4
.text$mn:000085B4 var_4           = dword ptr -4
.text$mn:000085B4
.text$mn:000085B4                 push    ebp
.text$mn:000085B5                 mov     ebp, esp
.text$mn:000085B7                 push    ecx
.text$mn:000085B8                 mov     [ebp+var_4], ecx
.text$mn:000085BB                 mov     eax, [ebp+var_4]
.text$mn:000085BE                 mov     dword ptr [eax], 0
.text$mn:000085C4                 mov     ecx, [ebp+var_4]
.text$mn:000085C7                 mov     dword ptr [ecx+4], 0
.text$mn:000085CE                 mov     eax, [ebp+var_4]
.text$mn:000085D1                 mov     esp, ebp
.text$mn:000085D3                 pop     ebp
.text$mn:000085D4                 retn
.text$mn:000085D4 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000085D4
.text$mn:000085D4 ; ---------------------------------------------------------------------------
.text$mn:000085D5                 align 4
.text$mn:000085D5 _text$mn        ends
.text$mn:000085D5
.text$mn:000085D8 ; ===========================================================================
.text$mn:000085D8
.text$mn:000085D8 ; Segment type: Pure code
.text$mn:000085D8 ; Segment permissions: Read/Execute
.text$mn:000085D8 _text$mn        segment para public 'CODE' use32
.text$mn:000085D8                 assume cs:_text$mn
.text$mn:000085D8                 ;org 85D8h
.text$mn:000085D8 ; COMDAT (pick any)
.text$mn:000085D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085D8
.text$mn:000085D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000085D8
.text$mn:000085D8 ; Attributes: bp-based frame
.text$mn:000085D8
.text$mn:000085D8 ; _DWORD __thiscall std::_Facet_base::_Facet_base(std::_Facet_base *__hidden this)
.text$mn:000085D8                 public ??0_Facet_base@std@@QAE@XZ
.text$mn:000085D8 ??0_Facet_base@std@@QAE@XZ proc near    ; CODE XREF: std::locale::facet::facet(uint)+29p
.text$mn:000085D8
.text$mn:000085D8 var_4           = dword ptr -4
.text$mn:000085D8
.text$mn:000085D8                 push    ebp
.text$mn:000085D9                 mov     ebp, esp
.text$mn:000085DB                 push    ecx
.text$mn:000085DC                 mov     [ebp+var_4], ecx
.text$mn:000085DF                 mov     eax, [ebp+var_4]
.text$mn:000085E2                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:000085E8                 mov     eax, [ebp+var_4]
.text$mn:000085EB                 mov     esp, ebp
.text$mn:000085ED                 pop     ebp
.text$mn:000085EE                 retn
.text$mn:000085EE ??0_Facet_base@std@@QAE@XZ endp
.text$mn:000085EE
.text$mn:000085EE ; ---------------------------------------------------------------------------
.text$mn:000085EF                 align 10h
.text$mn:000085EF _text$mn        ends
.text$mn:000085EF
.text$mn:000085F0 ; ===========================================================================
.text$mn:000085F0
.text$mn:000085F0 ; Segment type: Pure code
.text$mn:000085F0 ; Segment permissions: Read/Execute
.text$mn:000085F0 _text$mn        segment para public 'CODE' use32
.text$mn:000085F0                 assume cs:_text$mn
.text$mn:000085F0                 ;org 85F0h
.text$mn:000085F0 ; COMDAT (pick any)
.text$mn:000085F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085F0
.text$mn:000085F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000085F0
.text$mn:000085F0 ; Attributes: bp-based frame
.text$mn:000085F0
.text$mn:000085F0 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000085F0                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:000085F0 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:000085F0                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:000085F0                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:000085F0
.text$mn:000085F0 var_10          = dword ptr -10h
.text$mn:000085F0 var_C           = dword ptr -0Ch
.text$mn:000085F0 var_4           = dword ptr -4
.text$mn:000085F0
.text$mn:000085F0                 push    ebp
.text$mn:000085F1                 mov     ebp, esp
.text$mn:000085F3                 push    0FFFFFFFFh
.text$mn:000085F5                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:000085FA                 mov     eax, large fs:0
.text$mn:00008600                 push    eax
.text$mn:00008601                 push    ecx
.text$mn:00008602                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008607                 xor     eax, ebp
.text$mn:00008609                 push    eax
.text$mn:0000860A                 lea     eax, [ebp+var_C]
.text$mn:0000860D                 mov     large fs:0, eax
.text$mn:00008613                 mov     [ebp+var_10], ecx
.text$mn:00008616                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008619                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:0000861E                 mov     [ebp+var_4], 0
.text$mn:00008625                 mov     eax, [ebp+var_10]
.text$mn:00008628                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:0000862E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008635                 mov     eax, [ebp+var_10]
.text$mn:00008638                 mov     ecx, [ebp+var_C]
.text$mn:0000863B                 mov     large fs:0, ecx
.text$mn:00008642                 pop     ecx
.text$mn:00008643                 mov     esp, ebp
.text$mn:00008645                 pop     ebp
.text$mn:00008646                 retn
.text$mn:00008646 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00008646
.text$mn:00008646 ; ---------------------------------------------------------------------------
.text$mn:00008647                 align 4
.text$mn:00008647 _text$mn        ends
.text$mn:00008647
.text$x:00008648 ; ===========================================================================
.text$x:00008648
.text$x:00008648 ; Segment type: Pure code
.text$x:00008648 ; Segment permissions: Read/Execute
.text$x:00008648 _text$x         segment para public 'CODE' use32
.text$x:00008648                 assume cs:_text$x
.text$x:00008648                 ;org 8648h
.text$x:00008648 ; COMDAT (pick associative to section at 85F0)
.text$x:00008648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008648
.text$x:00008648 ; =============== S U B R O U T I N E =======================================
.text$x:00008648
.text$x:00008648
.text$x:00008648 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00008648                                         ; DATA XREF: .xdata$x:0000F9ECo
.text$x:00008648                 mov     ecx, [ebp-10h]  ; this
.text$x:0000864B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000864B __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:0000864B
.text$x:00008650
.text$x:00008650 ; =============== S U B R O U T I N E =======================================
.text$x:00008650
.text$x:00008650
.text$x:00008650 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00008650                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00008650
.text$x:00008650 arg_4           = dword ptr  8
.text$x:00008650
.text$x:00008650                 mov     edx, [esp+arg_4]
.text$x:00008654                 lea     eax, [edx+0Ch]
.text$x:00008657                 mov     ecx, [edx-8]
.text$x:0000865A                 xor     ecx, eax
.text$x:0000865C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008661                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00008666                 jmp     ___CxxFrameHandler3
.text$x:00008666 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00008666
.text$x:00008666 ; ---------------------------------------------------------------------------
.text$x:0000866B                 align 4
.text$x:0000866B _text$x         ends
.text$x:0000866B
.text$mn:0000866C ; ===========================================================================
.text$mn:0000866C
.text$mn:0000866C ; Segment type: Pure code
.text$mn:0000866C ; Segment permissions: Read/Execute
.text$mn:0000866C _text$mn        segment para public 'CODE' use32
.text$mn:0000866C                 assume cs:_text$mn
.text$mn:0000866C                 ;org 866Ch
.text$mn:0000866C ; COMDAT (pick any)
.text$mn:0000866C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000866C
.text$mn:0000866C ; =============== S U B R O U T I N E =======================================
.text$mn:0000866C
.text$mn:0000866C ; Attributes: bp-based frame
.text$mn:0000866C
.text$mn:0000866C ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:0000866C                 public ??0_Ignore@std@@QAE@XZ
.text$mn:0000866C ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:0000866C
.text$mn:0000866C var_4           = dword ptr -4
.text$mn:0000866C
.text$mn:0000866C                 push    ebp
.text$mn:0000866D                 mov     ebp, esp
.text$mn:0000866F                 push    ecx
.text$mn:00008670                 mov     [ebp+var_4], ecx
.text$mn:00008673                 mov     eax, [ebp+var_4]
.text$mn:00008676                 mov     esp, ebp
.text$mn:00008678                 pop     ebp
.text$mn:00008679                 retn
.text$mn:00008679 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00008679
.text$mn:00008679 ; ---------------------------------------------------------------------------
.text$mn:0000867A                 align 4
.text$mn:0000867A _text$mn        ends
.text$mn:0000867A
.text$mn:0000867C ; ===========================================================================
.text$mn:0000867C
.text$mn:0000867C ; Segment type: Pure code
.text$mn:0000867C ; Segment permissions: Read/Execute
.text$mn:0000867C _text$mn        segment para public 'CODE' use32
.text$mn:0000867C                 assume cs:_text$mn
.text$mn:0000867C                 ;org 867Ch
.text$mn:0000867C ; COMDAT (pick any)
.text$mn:0000867C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000867C
.text$mn:0000867C ; =============== S U B R O U T I N E =======================================
.text$mn:0000867C
.text$mn:0000867C ; Attributes: bp-based frame
.text$mn:0000867C
.text$mn:0000867C ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:0000867C                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000867C ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:0000867C                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:0000867C
.text$mn:0000867C var_10          = dword ptr -10h
.text$mn:0000867C var_C           = dword ptr -0Ch
.text$mn:0000867C var_4           = dword ptr -4
.text$mn:0000867C
.text$mn:0000867C                 push    ebp
.text$mn:0000867D                 mov     ebp, esp
.text$mn:0000867F                 push    0FFFFFFFFh
.text$mn:00008681                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00008686                 mov     eax, large fs:0
.text$mn:0000868C                 push    eax
.text$mn:0000868D                 push    ecx
.text$mn:0000868E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008693                 xor     eax, ebp
.text$mn:00008695                 push    eax
.text$mn:00008696                 lea     eax, [ebp+var_C]
.text$mn:00008699                 mov     large fs:0, eax
.text$mn:0000869F                 mov     [ebp+var_10], ecx
.text$mn:000086A2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000086A5                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000086AA                 mov     [ebp+var_4], 0
.text$mn:000086B1                 mov     eax, [ebp+var_10]
.text$mn:000086B4                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000086BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000086C1                 mov     eax, [ebp+var_10]
.text$mn:000086C4                 mov     ecx, [ebp+var_C]
.text$mn:000086C7                 mov     large fs:0, ecx
.text$mn:000086CE                 pop     ecx
.text$mn:000086CF                 mov     esp, ebp
.text$mn:000086D1                 pop     ebp
.text$mn:000086D2                 retn
.text$mn:000086D2 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:000086D2
.text$mn:000086D2 ; ---------------------------------------------------------------------------
.text$mn:000086D3                 align 4
.text$mn:000086D3 _text$mn        ends
.text$mn:000086D3
.text$x:000086D4 ; ===========================================================================
.text$x:000086D4
.text$x:000086D4 ; Segment type: Pure code
.text$x:000086D4 ; Segment permissions: Read/Execute
.text$x:000086D4 _text$x         segment para public 'CODE' use32
.text$x:000086D4                 assume cs:_text$x
.text$x:000086D4                 ;org 86D4h
.text$x:000086D4 ; COMDAT (pick associative to section at 867C)
.text$x:000086D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000086D4
.text$x:000086D4 ; =============== S U B R O U T I N E =======================================
.text$x:000086D4
.text$x:000086D4
.text$x:000086D4 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:000086D4                                         ; DATA XREF: .xdata$x:0000FA70o
.text$x:000086D4                 mov     ecx, [ebp-10h]  ; this
.text$x:000086D7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000086D7 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:000086D7
.text$x:000086DC
.text$x:000086DC ; =============== S U B R O U T I N E =======================================
.text$x:000086DC
.text$x:000086DC
.text$x:000086DC __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:000086DC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:000086DC
.text$x:000086DC arg_4           = dword ptr  8
.text$x:000086DC
.text$x:000086DC                 mov     edx, [esp+arg_4]
.text$x:000086E0                 lea     eax, [edx+0Ch]
.text$x:000086E3                 mov     ecx, [edx-8]
.text$x:000086E6                 xor     ecx, eax
.text$x:000086E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000086ED                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:000086F2                 jmp     ___CxxFrameHandler3
.text$x:000086F2 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:000086F2
.text$x:000086F2 ; ---------------------------------------------------------------------------
.text$x:000086F7                 align 4
.text$x:000086F7 _text$x         ends
.text$x:000086F7
.text$mn:000086F8 ; ===========================================================================
.text$mn:000086F8
.text$mn:000086F8 ; Segment type: Pure code
.text$mn:000086F8 ; Segment permissions: Read/Execute
.text$mn:000086F8 _text$mn        segment para public 'CODE' use32
.text$mn:000086F8                 assume cs:_text$mn
.text$mn:000086F8                 ;org 86F8h
.text$mn:000086F8 ; COMDAT (pick any)
.text$mn:000086F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086F8
.text$mn:000086F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000086F8
.text$mn:000086F8 ; Attributes: bp-based frame
.text$mn:000086F8
.text$mn:000086F8 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:000086F8                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:000086F8 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:000086F8                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12> const &)+2Dp
.text$mn:000086F8                                         ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+2Dp ...
.text$mn:000086F8
.text$mn:000086F8 var_4           = dword ptr -4
.text$mn:000086F8 arg_0           = dword ptr  8
.text$mn:000086F8
.text$mn:000086F8                 push    ebp
.text$mn:000086F9                 mov     ebp, esp
.text$mn:000086FB                 push    ecx
.text$mn:000086FC                 mov     [ebp+var_4], ecx
.text$mn:000086FF                 mov     eax, [ebp+var_4]
.text$mn:00008702                 mov     dword ptr [eax], 0
.text$mn:00008708                 mov     ecx, [ebp+var_4]
.text$mn:0000870B                 mov     dword ptr [ecx+4], 0
.text$mn:00008712                 mov     edx, [ebp+arg_0]
.text$mn:00008715                 push    edx
.text$mn:00008716                 mov     ecx, [ebp+var_4]
.text$mn:00008719                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:0000871E                 mov     eax, [ebp+var_4]
.text$mn:00008721                 mov     esp, ebp
.text$mn:00008723                 pop     ebp
.text$mn:00008724                 retn    4
.text$mn:00008724 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00008724
.text$mn:00008724 ; ---------------------------------------------------------------------------
.text$mn:00008727                 align 4
.text$mn:00008727 _text$mn        ends
.text$mn:00008727
.text$mn:00008728 ; ===========================================================================
.text$mn:00008728
.text$mn:00008728 ; Segment type: Pure code
.text$mn:00008728 ; Segment permissions: Read/Execute
.text$mn:00008728 _text$mn        segment para public 'CODE' use32
.text$mn:00008728                 assume cs:_text$mn
.text$mn:00008728                 ;org 8728h
.text$mn:00008728 ; COMDAT (pick any)
.text$mn:00008728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008728
.text$mn:00008728 ; =============== S U B R O U T I N E =======================================
.text$mn:00008728
.text$mn:00008728 ; Attributes: bp-based frame
.text$mn:00008728
.text$mn:00008728 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00008728                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00008728 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00008728                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)+29p
.text$mn:00008728                                         ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+29p ...
.text$mn:00008728
.text$mn:00008728 var_4           = dword ptr -4
.text$mn:00008728
.text$mn:00008728                 push    ebp
.text$mn:00008729                 mov     ebp, esp
.text$mn:0000872B                 push    ecx
.text$mn:0000872C                 mov     [ebp+var_4], ecx
.text$mn:0000872F                 mov     eax, [ebp+var_4]
.text$mn:00008732                 mov     dword ptr [eax], 0
.text$mn:00008738                 mov     ecx, [ebp+var_4]
.text$mn:0000873B                 mov     dword ptr [ecx+4], 0
.text$mn:00008742                 mov     eax, [ebp+var_4]
.text$mn:00008745                 mov     esp, ebp
.text$mn:00008747                 pop     ebp
.text$mn:00008748                 retn
.text$mn:00008748 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00008748
.text$mn:00008748 ; ---------------------------------------------------------------------------
.text$mn:00008749                 align 4
.text$mn:00008749 _text$mn        ends
.text$mn:00008749
.text$mn:0000874C ; ===========================================================================
.text$mn:0000874C
.text$mn:0000874C ; Segment type: Pure code
.text$mn:0000874C ; Segment permissions: Read/Execute
.text$mn:0000874C _text$mn        segment para public 'CODE' use32
.text$mn:0000874C                 assume cs:_text$mn
.text$mn:0000874C                 ;org 874Ch
.text$mn:0000874C ; COMDAT (pick any)
.text$mn:0000874C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000874C
.text$mn:0000874C ; =============== S U B R O U T I N E =======================================
.text$mn:0000874C
.text$mn:0000874C ; Attributes: bp-based frame
.text$mn:0000874C
.text$mn:0000874C ; _DWORD __thiscall std::_Locinfo::_Locinfo(std::_Locinfo *this, const char *)
.text$mn:0000874C                 public ??0_Locinfo@std@@QAE@PBD@Z
.text$mn:0000874C ??0_Locinfo@std@@QAE@PBD@Z proc near    ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+80p
.text$mn:0000874C
.text$mn:0000874C var_1C          = byte ptr -1Ch
.text$mn:0000874C var_10          = dword ptr -10h
.text$mn:0000874C var_C           = dword ptr -0Ch
.text$mn:0000874C var_4           = dword ptr -4
.text$mn:0000874C arg_0           = dword ptr  8
.text$mn:0000874C
.text$mn:0000874C                 push    ebp
.text$mn:0000874D                 mov     ebp, esp
.text$mn:0000874F                 push    0FFFFFFFFh
.text$mn:00008751                 push    offset __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00008756                 mov     eax, large fs:0
.text$mn:0000875C                 push    eax
.text$mn:0000875D                 sub     esp, 10h
.text$mn:00008760                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008765                 xor     eax, ebp
.text$mn:00008767                 push    eax
.text$mn:00008768                 lea     eax, [ebp+var_C]
.text$mn:0000876B                 mov     large fs:0, eax
.text$mn:00008771                 mov     [ebp+var_10], ecx
.text$mn:00008774                 push    0               ; int
.text$mn:00008776                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008779                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000877E                 mov     [ebp+var_4], 0
.text$mn:00008785                 mov     ecx, [ebp+var_10]
.text$mn:00008788                 add     ecx, 4
.text$mn:0000878B                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00008790                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008794                 mov     ecx, [ebp+var_10]
.text$mn:00008797                 add     ecx, 0Ch
.text$mn:0000879A                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:0000879F                 mov     byte ptr [ebp+var_4], 2
.text$mn:000087A3                 mov     ecx, [ebp+var_10]
.text$mn:000087A6                 add     ecx, 14h
.text$mn:000087A9                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:000087AE                 mov     byte ptr [ebp+var_4], 3
.text$mn:000087B2                 mov     ecx, [ebp+var_10]
.text$mn:000087B5                 add     ecx, 1Ch
.text$mn:000087B8                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:000087BD                 mov     byte ptr [ebp+var_4], 4
.text$mn:000087C1                 mov     ecx, [ebp+var_10]
.text$mn:000087C4                 add     ecx, 24h ; '$'
.text$mn:000087C7                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000087CC                 mov     byte ptr [ebp+var_4], 5
.text$mn:000087D0                 mov     ecx, [ebp+var_10]
.text$mn:000087D3                 add     ecx, 2Ch ; ','
.text$mn:000087D6                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:000087DB                 mov     byte ptr [ebp+var_4], 6
.text$mn:000087DF                 cmp     [ebp+arg_0], 0
.text$mn:000087E3                 jnz     short loc_8800
.text$mn:000087E5                 push    offset ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ ; "bad locale name"
.text$mn:000087EA                 lea     ecx, [ebp+var_1C] ; this
.text$mn:000087ED                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:000087F2                 push    offset __TI2?AVruntime_error@std@@
.text$mn:000087F7                 lea     eax, [ebp+var_1C]
.text$mn:000087FA                 push    eax
.text$mn:000087FB                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00008800 ; ---------------------------------------------------------------------------
.text$mn:00008800
.text$mn:00008800 loc_8800:                               ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+97j
.text$mn:00008800                 mov     ecx, [ebp+arg_0]
.text$mn:00008803                 push    ecx             ; char *
.text$mn:00008804                 mov     edx, [ebp+var_10]
.text$mn:00008807                 push    edx             ; struct std::_Locinfo *
.text$mn:00008808                 call    ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor(std::_Locinfo *,char const *)
.text$mn:0000880D                 add     esp, 8
.text$mn:00008810                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008817                 mov     eax, [ebp+var_10]
.text$mn:0000881A                 mov     ecx, [ebp+var_C]
.text$mn:0000881D                 mov     large fs:0, ecx
.text$mn:00008824                 pop     ecx
.text$mn:00008825                 mov     esp, ebp
.text$mn:00008827                 pop     ebp
.text$mn:00008828                 retn    4
.text$mn:00008828 ??0_Locinfo@std@@QAE@PBD@Z endp
.text$mn:00008828
.text$mn:00008828 ; ---------------------------------------------------------------------------
.text$mn:0000882B                 align 4
.text$mn:0000882B _text$mn        ends
.text$mn:0000882B
.text$x:0000882C ; ===========================================================================
.text$x:0000882C
.text$x:0000882C ; Segment type: Pure code
.text$x:0000882C ; Segment permissions: Read/Execute
.text$x:0000882C _text$x         segment para public 'CODE' use32
.text$x:0000882C                 assume cs:_text$x
.text$x:0000882C                 ;org 882Ch
.text$x:0000882C ; COMDAT (pick associative to section at 874C)
.text$x:0000882C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000882C
.text$x:0000882C ; =============== S U B R O U T I N E =======================================
.text$x:0000882C
.text$x:0000882C
.text$x:0000882C __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 proc near
.text$x:0000882C                                         ; DATA XREF: .xdata$x:0000F7E8o
.text$x:0000882C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000882F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000882F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 endp
.text$x:0000882F
.text$x:00008834
.text$x:00008834 ; =============== S U B R O U T I N E =======================================
.text$x:00008834
.text$x:00008834
.text$x:00008834 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 proc near
.text$x:00008834                                         ; DATA XREF: .xdata$x:0000F7F0o
.text$x:00008834                 mov     ecx, [ebp-10h]
.text$x:00008837                 add     ecx, 4
.text$x:0000883A                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:0000883A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 endp
.text$x:0000883A
.text$x:0000883F
.text$x:0000883F ; =============== S U B R O U T I N E =======================================
.text$x:0000883F
.text$x:0000883F
.text$x:0000883F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 proc near
.text$x:0000883F                                         ; DATA XREF: .xdata$x:0000F7F8o
.text$x:0000883F                 mov     ecx, [ebp-10h]
.text$x:00008842                 add     ecx, 0Ch
.text$x:00008845                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00008845 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 endp
.text$x:00008845
.text$x:0000884A
.text$x:0000884A ; =============== S U B R O U T I N E =======================================
.text$x:0000884A
.text$x:0000884A
.text$x:0000884A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 proc near
.text$x:0000884A                                         ; DATA XREF: .xdata$x:0000F800o
.text$x:0000884A                 mov     ecx, [ebp-10h]
.text$x:0000884D                 add     ecx, 14h
.text$x:00008850                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00008850 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 endp
.text$x:00008850
.text$x:00008855
.text$x:00008855 ; =============== S U B R O U T I N E =======================================
.text$x:00008855
.text$x:00008855
.text$x:00008855 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 proc near
.text$x:00008855                                         ; DATA XREF: .xdata$x:0000F808o
.text$x:00008855                 mov     ecx, [ebp-10h]
.text$x:00008858                 add     ecx, 1Ch
.text$x:0000885B                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:0000885B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 endp
.text$x:0000885B
.text$x:00008860
.text$x:00008860 ; =============== S U B R O U T I N E =======================================
.text$x:00008860
.text$x:00008860
.text$x:00008860 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 proc near
.text$x:00008860                                         ; DATA XREF: .xdata$x:0000F810o
.text$x:00008860                 mov     ecx, [ebp-10h]
.text$x:00008863                 add     ecx, 24h ; '$'
.text$x:00008866                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00008866 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 endp
.text$x:00008866
.text$x:0000886B
.text$x:0000886B ; =============== S U B R O U T I N E =======================================
.text$x:0000886B
.text$x:0000886B
.text$x:0000886B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 proc near
.text$x:0000886B                                         ; DATA XREF: .xdata$x:0000F818o
.text$x:0000886B                 mov     ecx, [ebp-10h]
.text$x:0000886E                 add     ecx, 2Ch ; ','
.text$x:00008871                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00008871 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 endp
.text$x:00008871
.text$x:00008876
.text$x:00008876 ; =============== S U B R O U T I N E =======================================
.text$x:00008876
.text$x:00008876
.text$x:00008876 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z proc near
.text$x:00008876                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+5o
.text$x:00008876
.text$x:00008876 arg_4           = dword ptr  8
.text$x:00008876
.text$x:00008876                 mov     edx, [esp+arg_4]
.text$x:0000887A                 lea     eax, [edx+0Ch]
.text$x:0000887D                 mov     ecx, [edx-14h]
.text$x:00008880                 xor     ecx, eax
.text$x:00008882                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008887                 mov     eax, offset __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
.text$x:0000888C                 jmp     ___CxxFrameHandler3
.text$x:0000888C __ehhandler$??0_Locinfo@std@@QAE@PBD@Z endp
.text$x:0000888C
.text$x:0000888C ; ---------------------------------------------------------------------------
.text$x:00008891                 align 4
.text$x:00008891 _text$x         ends
.text$x:00008891
.text$mn:00008894 ; ===========================================================================
.text$mn:00008894
.text$mn:00008894 ; Segment type: Pure code
.text$mn:00008894 ; Segment permissions: Read/Execute
.text$mn:00008894 _text$mn        segment para public 'CODE' use32
.text$mn:00008894                 assume cs:_text$mn
.text$mn:00008894                 ;org 8894h
.text$mn:00008894 ; COMDAT (pick any)
.text$mn:00008894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008894
.text$mn:00008894 ; =============== S U B R O U T I N E =======================================
.text$mn:00008894
.text$mn:00008894 ; Attributes: bp-based frame
.text$mn:00008894
.text$mn:00008894 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00008894                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00008894 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00008894                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00008894
.text$mn:00008894 var_10          = dword ptr -10h
.text$mn:00008894 var_C           = dword ptr -0Ch
.text$mn:00008894 var_4           = dword ptr -4
.text$mn:00008894
.text$mn:00008894                 push    ebp
.text$mn:00008895                 mov     ebp, esp
.text$mn:00008897                 push    0FFFFFFFFh
.text$mn:00008899                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:0000889E                 mov     eax, large fs:0
.text$mn:000088A4                 push    eax
.text$mn:000088A5                 push    ecx
.text$mn:000088A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000088AB                 xor     eax, ebp
.text$mn:000088AD                 push    eax
.text$mn:000088AE                 lea     eax, [ebp+var_C]
.text$mn:000088B1                 mov     large fs:0, eax
.text$mn:000088B7                 mov     [ebp+var_10], ecx
.text$mn:000088BA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000088BD                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000088C2                 mov     [ebp+var_4], 0
.text$mn:000088C9                 mov     eax, [ebp+var_10]
.text$mn:000088CC                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:000088D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000088D9                 mov     eax, [ebp+var_10]
.text$mn:000088DC                 mov     ecx, [ebp+var_C]
.text$mn:000088DF                 mov     large fs:0, ecx
.text$mn:000088E6                 pop     ecx
.text$mn:000088E7                 mov     esp, ebp
.text$mn:000088E9                 pop     ebp
.text$mn:000088EA                 retn
.text$mn:000088EA ??0_System_error_category@std@@QAE@XZ endp
.text$mn:000088EA
.text$mn:000088EA ; ---------------------------------------------------------------------------
.text$mn:000088EB                 align 4
.text$mn:000088EB _text$mn        ends
.text$mn:000088EB
.text$x:000088EC ; ===========================================================================
.text$x:000088EC
.text$x:000088EC ; Segment type: Pure code
.text$x:000088EC ; Segment permissions: Read/Execute
.text$x:000088EC _text$x         segment para public 'CODE' use32
.text$x:000088EC                 assume cs:_text$x
.text$x:000088EC                 ;org 88ECh
.text$x:000088EC ; COMDAT (pick associative to section at 8894)
.text$x:000088EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000088EC
.text$x:000088EC ; =============== S U B R O U T I N E =======================================
.text$x:000088EC
.text$x:000088EC
.text$x:000088EC __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:000088EC                                         ; DATA XREF: .xdata$x:0000FAF4o
.text$x:000088EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000088EF                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000088EF __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:000088EF
.text$x:000088F4
.text$x:000088F4 ; =============== S U B R O U T I N E =======================================
.text$x:000088F4
.text$x:000088F4
.text$x:000088F4 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:000088F4                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:000088F4
.text$x:000088F4 arg_4           = dword ptr  8
.text$x:000088F4
.text$x:000088F4                 mov     edx, [esp+arg_4]
.text$x:000088F8                 lea     eax, [edx+0Ch]
.text$x:000088FB                 mov     ecx, [edx-8]
.text$x:000088FE                 xor     ecx, eax
.text$x:00008900                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008905                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:0000890A                 jmp     ___CxxFrameHandler3
.text$x:0000890A __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:0000890A
.text$x:0000890A ; ---------------------------------------------------------------------------
.text$x:0000890F                 align 10h
.text$x:0000890F _text$x         ends
.text$x:0000890F
.text$mn:00008910 ; ===========================================================================
.text$mn:00008910
.text$mn:00008910 ; Segment type: Pure code
.text$mn:00008910 ; Segment permissions: Read/Execute
.text$mn:00008910 _text$mn        segment para public 'CODE' use32
.text$mn:00008910                 assume cs:_text$mn
.text$mn:00008910                 ;org 8910h
.text$mn:00008910 ; COMDAT (pick any)
.text$mn:00008910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008910
.text$mn:00008910 ; =============== S U B R O U T I N E =======================================
.text$mn:00008910
.text$mn:00008910 ; Attributes: bp-based frame
.text$mn:00008910
.text$mn:00008910 ; _DWORD __thiscall std::ctype_base::ctype_base(std::ctype_base *this, unsigned int)
.text$mn:00008910                 public ??0ctype_base@std@@QAE@I@Z
.text$mn:00008910 ??0ctype_base@std@@QAE@I@Z proc near    ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+2Dp
.text$mn:00008910
.text$mn:00008910 var_10          = dword ptr -10h
.text$mn:00008910 var_C           = dword ptr -0Ch
.text$mn:00008910 var_4           = dword ptr -4
.text$mn:00008910 arg_0           = dword ptr  8
.text$mn:00008910
.text$mn:00008910                 push    ebp
.text$mn:00008911                 mov     ebp, esp
.text$mn:00008913                 push    0FFFFFFFFh
.text$mn:00008915                 push    offset __ehhandler$??0ctype_base@std@@QAE@I@Z
.text$mn:0000891A                 mov     eax, large fs:0
.text$mn:00008920                 push    eax
.text$mn:00008921                 push    ecx
.text$mn:00008922                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008927                 xor     eax, ebp
.text$mn:00008929                 push    eax
.text$mn:0000892A                 lea     eax, [ebp+var_C]
.text$mn:0000892D                 mov     large fs:0, eax
.text$mn:00008933                 mov     [ebp+var_10], ecx
.text$mn:00008936                 mov     eax, [ebp+arg_0]
.text$mn:00008939                 push    eax             ; unsigned int
.text$mn:0000893A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000893D                 call    ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet(uint)
.text$mn:00008942                 mov     [ebp+var_4], 0
.text$mn:00008949                 mov     ecx, [ebp+var_10]
.text$mn:0000894C                 mov     dword ptr [ecx], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:00008952                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008959                 mov     eax, [ebp+var_10]
.text$mn:0000895C                 mov     ecx, [ebp+var_C]
.text$mn:0000895F                 mov     large fs:0, ecx
.text$mn:00008966                 pop     ecx
.text$mn:00008967                 mov     esp, ebp
.text$mn:00008969                 pop     ebp
.text$mn:0000896A                 retn    4
.text$mn:0000896A ??0ctype_base@std@@QAE@I@Z endp
.text$mn:0000896A
.text$mn:0000896A ; ---------------------------------------------------------------------------
.text$mn:0000896D                 align 10h
.text$mn:0000896D _text$mn        ends
.text$mn:0000896D
.text$x:00008970 ; ===========================================================================
.text$x:00008970
.text$x:00008970 ; Segment type: Pure code
.text$x:00008970 ; Segment permissions: Read/Execute
.text$x:00008970 _text$x         segment para public 'CODE' use32
.text$x:00008970                 assume cs:_text$x
.text$x:00008970                 ;org 8970h
.text$x:00008970 ; COMDAT (pick associative to section at 8910)
.text$x:00008970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008970
.text$x:00008970 ; =============== S U B R O U T I N E =======================================
.text$x:00008970
.text$x:00008970
.text$x:00008970 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 proc near
.text$x:00008970                                         ; DATA XREF: .xdata$x:0000F900o
.text$x:00008970                 mov     ecx, [ebp-10h]  ; this
.text$x:00008973                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00008973 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 endp
.text$x:00008973
.text$x:00008978
.text$x:00008978 ; =============== S U B R O U T I N E =======================================
.text$x:00008978
.text$x:00008978
.text$x:00008978 __ehhandler$??0ctype_base@std@@QAE@I@Z proc near
.text$x:00008978                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+5o
.text$x:00008978
.text$x:00008978 arg_4           = dword ptr  8
.text$x:00008978
.text$x:00008978                 mov     edx, [esp+arg_4]
.text$x:0000897C                 lea     eax, [edx+0Ch]
.text$x:0000897F                 mov     ecx, [edx-8]
.text$x:00008982                 xor     ecx, eax
.text$x:00008984                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008989                 mov     eax, offset __ehfuncinfo$??0ctype_base@std@@QAE@I@Z
.text$x:0000898E                 jmp     ___CxxFrameHandler3
.text$x:0000898E __ehhandler$??0ctype_base@std@@QAE@I@Z endp
.text$x:0000898E
.text$x:0000898E ; ---------------------------------------------------------------------------
.text$x:00008993                 align 4
.text$x:00008993 _text$x         ends
.text$x:00008993
.text$mn:00008994 ; ===========================================================================
.text$mn:00008994
.text$mn:00008994 ; Segment type: Pure code
.text$mn:00008994 ; Segment permissions: Read/Execute
.text$mn:00008994 _text$mn        segment para public 'CODE' use32
.text$mn:00008994                 assume cs:_text$mn
.text$mn:00008994                 ;org 8994h
.text$mn:00008994 ; COMDAT (pick any)
.text$mn:00008994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008994
.text$mn:00008994 ; =============== S U B R O U T I N E =======================================
.text$mn:00008994
.text$mn:00008994 ; Attributes: bp-based frame
.text$mn:00008994
.text$mn:00008994 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00008994                 public ??0error_category@std@@QAE@XZ
.text$mn:00008994 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00008994
.text$mn:00008994 var_4           = dword ptr -4
.text$mn:00008994
.text$mn:00008994                 push    ebp
.text$mn:00008995                 mov     ebp, esp
.text$mn:00008997                 push    ecx
.text$mn:00008998                 mov     [ebp+var_4], ecx
.text$mn:0000899B                 mov     eax, [ebp+var_4]
.text$mn:0000899E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000089A4                 mov     eax, [ebp+var_4]
.text$mn:000089A7                 mov     esp, ebp
.text$mn:000089A9                 pop     ebp
.text$mn:000089AA                 retn
.text$mn:000089AA ??0error_category@std@@QAE@XZ endp
.text$mn:000089AA
.text$mn:000089AA ; ---------------------------------------------------------------------------
.text$mn:000089AB                 align 4
.text$mn:000089AB _text$mn        ends
.text$mn:000089AB
.text$mn:000089AC ; ===========================================================================
.text$mn:000089AC
.text$mn:000089AC ; Segment type: Pure code
.text$mn:000089AC ; Segment permissions: Read/Execute
.text$mn:000089AC _text$mn        segment para public 'CODE' use32
.text$mn:000089AC                 assume cs:_text$mn
.text$mn:000089AC                 ;org 89ACh
.text$mn:000089AC ; COMDAT (pick any)
.text$mn:000089AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089AC
.text$mn:000089AC ; =============== S U B R O U T I N E =======================================
.text$mn:000089AC
.text$mn:000089AC ; Attributes: bp-based frame
.text$mn:000089AC
.text$mn:000089AC ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:000089AC                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:000089AC ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:000089AC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:000089AC                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:000089AC
.text$mn:000089AC var_4           = dword ptr -4
.text$mn:000089AC arg_0           = dword ptr  8
.text$mn:000089AC arg_4           = dword ptr  0Ch
.text$mn:000089AC
.text$mn:000089AC                 push    ebp
.text$mn:000089AD                 mov     ebp, esp
.text$mn:000089AF                 push    ecx
.text$mn:000089B0                 mov     [ebp+var_4], ecx
.text$mn:000089B3                 mov     eax, [ebp+var_4]
.text$mn:000089B6                 mov     ecx, [ebp+arg_0]
.text$mn:000089B9                 mov     [eax], ecx
.text$mn:000089BB                 mov     edx, [ebp+var_4]
.text$mn:000089BE                 mov     eax, [ebp+arg_4]
.text$mn:000089C1                 mov     [edx+4], eax
.text$mn:000089C4                 mov     eax, [ebp+var_4]
.text$mn:000089C7                 mov     esp, ebp
.text$mn:000089C9                 pop     ebp
.text$mn:000089CA                 retn    8
.text$mn:000089CA ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:000089CA
.text$mn:000089CA ; ---------------------------------------------------------------------------
.text$mn:000089CD                 align 10h
.text$mn:000089CD _text$mn        ends
.text$mn:000089CD
.text$mn:000089D0 ; ===========================================================================
.text$mn:000089D0
.text$mn:000089D0 ; Segment type: Pure code
.text$mn:000089D0 ; Segment permissions: Read/Execute
.text$mn:000089D0 _text$mn        segment para public 'CODE' use32
.text$mn:000089D0                 assume cs:_text$mn
.text$mn:000089D0                 ;org 89D0h
.text$mn:000089D0 ; COMDAT (pick any)
.text$mn:000089D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089D0
.text$mn:000089D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000089D0
.text$mn:000089D0 ; Attributes: bp-based frame
.text$mn:000089D0
.text$mn:000089D0 ; _DWORD __thiscall std::locale::facet::facet(std::locale::facet *this, unsigned int)
.text$mn:000089D0                 public ??0facet@locale@std@@IAE@I@Z
.text$mn:000089D0 ??0facet@locale@std@@IAE@I@Z proc near  ; CODE XREF: std::ctype_base::ctype_base(uint)+2Dp
.text$mn:000089D0
.text$mn:000089D0 var_10          = dword ptr -10h
.text$mn:000089D0 var_C           = dword ptr -0Ch
.text$mn:000089D0 var_4           = dword ptr -4
.text$mn:000089D0 arg_0           = dword ptr  8
.text$mn:000089D0
.text$mn:000089D0                 push    ebp
.text$mn:000089D1                 mov     ebp, esp
.text$mn:000089D3                 push    0FFFFFFFFh
.text$mn:000089D5                 push    offset __ehhandler$??0facet@locale@std@@IAE@I@Z
.text$mn:000089DA                 mov     eax, large fs:0
.text$mn:000089E0                 push    eax
.text$mn:000089E1                 push    ecx
.text$mn:000089E2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000089E7                 xor     eax, ebp
.text$mn:000089E9                 push    eax
.text$mn:000089EA                 lea     eax, [ebp+var_C]
.text$mn:000089ED                 mov     large fs:0, eax
.text$mn:000089F3                 mov     [ebp+var_10], ecx
.text$mn:000089F6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000089F9                 call    ??0_Facet_base@std@@QAE@XZ ; std::_Facet_base::_Facet_base(void)
.text$mn:000089FE                 mov     [ebp+var_4], 0
.text$mn:00008A05                 mov     eax, [ebp+var_10]
.text$mn:00008A08                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00008A0E                 mov     ecx, [ebp+arg_0]
.text$mn:00008A11                 push    ecx             ; unsigned __int32
.text$mn:00008A12                 mov     edx, [ebp+var_10]
.text$mn:00008A15                 add     edx, 4
.text$mn:00008A18                 push    edx             ; unsigned __int32 *
.text$mn:00008A19                 call    ?_Init_atomic_counter@std@@YAXAAKK@Z ; std::_Init_atomic_counter(ulong &,ulong)
.text$mn:00008A1E                 add     esp, 8
.text$mn:00008A21                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008A28                 mov     eax, [ebp+var_10]
.text$mn:00008A2B                 mov     ecx, [ebp+var_C]
.text$mn:00008A2E                 mov     large fs:0, ecx
.text$mn:00008A35                 pop     ecx
.text$mn:00008A36                 mov     esp, ebp
.text$mn:00008A38                 pop     ebp
.text$mn:00008A39                 retn    4
.text$mn:00008A39 ??0facet@locale@std@@IAE@I@Z endp
.text$mn:00008A39
.text$mn:00008A39 _text$mn        ends
.text$mn:00008A39
.text$x:00008A3C ; ===========================================================================
.text$x:00008A3C
.text$x:00008A3C ; Segment type: Pure code
.text$x:00008A3C ; Segment permissions: Read/Execute
.text$x:00008A3C _text$x         segment para public 'CODE' use32
.text$x:00008A3C                 assume cs:_text$x
.text$x:00008A3C                 ;org 8A3Ch
.text$x:00008A3C ; COMDAT (pick associative to section at 89D0)
.text$x:00008A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008A3C
.text$x:00008A3C ; =============== S U B R O U T I N E =======================================
.text$x:00008A3C
.text$x:00008A3C
.text$x:00008A3C __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 proc near
.text$x:00008A3C                                         ; DATA XREF: .xdata$x:0000F8A8o
.text$x:00008A3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00008A3F                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:00008A3F __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 endp
.text$x:00008A3F
.text$x:00008A44
.text$x:00008A44 ; =============== S U B R O U T I N E =======================================
.text$x:00008A44
.text$x:00008A44
.text$x:00008A44 __ehhandler$??0facet@locale@std@@IAE@I@Z proc near
.text$x:00008A44                                         ; DATA XREF: std::locale::facet::facet(uint)+5o
.text$x:00008A44
.text$x:00008A44 arg_4           = dword ptr  8
.text$x:00008A44
.text$x:00008A44                 mov     edx, [esp+arg_4]
.text$x:00008A48                 lea     eax, [edx+0Ch]
.text$x:00008A4B                 mov     ecx, [edx-8]
.text$x:00008A4E                 xor     ecx, eax
.text$x:00008A50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008A55                 mov     eax, offset __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
.text$x:00008A5A                 jmp     ___CxxFrameHandler3
.text$x:00008A5A __ehhandler$??0facet@locale@std@@IAE@I@Z endp
.text$x:00008A5A
.text$x:00008A5A ; ---------------------------------------------------------------------------
.text$x:00008A5F                 align 10h
.text$x:00008A5F _text$x         ends
.text$x:00008A5F
.text$mn:00008A60 ; ===========================================================================
.text$mn:00008A60
.text$mn:00008A60 ; Segment type: Pure code
.text$mn:00008A60 ; Segment permissions: Read/Execute
.text$mn:00008A60 _text$mn        segment para public 'CODE' use32
.text$mn:00008A60                 assume cs:_text$mn
.text$mn:00008A60                 ;org 8A60h
.text$mn:00008A60 ; COMDAT (pick any)
.text$mn:00008A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A60
.text$mn:00008A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A60
.text$mn:00008A60 ; Attributes: bp-based frame
.text$mn:00008A60
.text$mn:00008A60 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00008A60                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00008A60 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00008A60                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00008A60
.text$mn:00008A60 var_4           = dword ptr -4
.text$mn:00008A60 arg_0           = dword ptr  8
.text$mn:00008A60
.text$mn:00008A60                 push    ebp
.text$mn:00008A61                 mov     ebp, esp
.text$mn:00008A63                 push    ecx
.text$mn:00008A64                 mov     [ebp+var_4], ecx
.text$mn:00008A67                 mov     eax, [ebp+var_4]
.text$mn:00008A6A                 mov     ecx, [ebp+arg_0]
.text$mn:00008A6D                 mov     [eax], ecx
.text$mn:00008A6F                 mov     eax, [ebp+var_4]
.text$mn:00008A72                 mov     esp, ebp
.text$mn:00008A74                 pop     ebp
.text$mn:00008A75                 retn    4
.text$mn:00008A75 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00008A75
.text$mn:00008A75 _text$mn        ends
.text$mn:00008A75
.text$mn:00008A78 ; ===========================================================================
.text$mn:00008A78
.text$mn:00008A78 ; Segment type: Pure code
.text$mn:00008A78 ; Segment permissions: Read/Execute
.text$mn:00008A78 _text$mn        segment para public 'CODE' use32
.text$mn:00008A78                 assume cs:_text$mn
.text$mn:00008A78                 ;org 8A78h
.text$mn:00008A78 ; COMDAT (pick any)
.text$mn:00008A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A78
.text$mn:00008A78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A78
.text$mn:00008A78 ; Attributes: bp-based frame
.text$mn:00008A78
.text$mn:00008A78 ; _DWORD __thiscall std::locale::locale(std::locale *__hidden this)
.text$mn:00008A78                 public ??0locale@std@@QAE@XZ
.text$mn:00008A78 ??0locale@std@@QAE@XZ proc near         ; CODE XREF: isAllowedBeforeDriveLetter(wchar_t)+28p
.text$mn:00008A78                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+32p
.text$mn:00008A78
.text$mn:00008A78 var_4           = dword ptr -4
.text$mn:00008A78
.text$mn:00008A78                 push    ebp
.text$mn:00008A79                 mov     ebp, esp
.text$mn:00008A7B                 push    ecx
.text$mn:00008A7C                 mov     [ebp+var_4], ecx
.text$mn:00008A7F                 push    1               ; bool
.text$mn:00008A81                 call    ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init(bool)
.text$mn:00008A86                 add     esp, 4
.text$mn:00008A89                 mov     ecx, [ebp+var_4]
.text$mn:00008A8C                 mov     [ecx], eax
.text$mn:00008A8E                 mov     eax, [ebp+var_4]
.text$mn:00008A91                 mov     esp, ebp
.text$mn:00008A93                 pop     ebp
.text$mn:00008A94                 retn
.text$mn:00008A94 ??0locale@std@@QAE@XZ endp
.text$mn:00008A94
.text$mn:00008A94 ; ---------------------------------------------------------------------------
.text$mn:00008A95                 align 4
.text$mn:00008A95 _text$mn        ends
.text$mn:00008A95
.text$mn:00008A98 ; ===========================================================================
.text$mn:00008A98
.text$mn:00008A98 ; Segment type: Pure code
.text$mn:00008A98 ; Segment permissions: Read/Execute
.text$mn:00008A98 _text$mn        segment para public 'CODE' use32
.text$mn:00008A98                 assume cs:_text$mn
.text$mn:00008A98                 ;org 8A98h
.text$mn:00008A98 ; COMDAT (pick any)
.text$mn:00008A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A98
.text$mn:00008A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A98
.text$mn:00008A98 ; Attributes: bp-based frame
.text$mn:00008A98
.text$mn:00008A98 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:00008A98                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00008A98 ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:00008A98                                         ; DATA XREF: .xdata$x:00011150o
.text$mn:00008A98
.text$mn:00008A98 var_10          = dword ptr -10h
.text$mn:00008A98 var_C           = dword ptr -0Ch
.text$mn:00008A98 var_4           = dword ptr -4
.text$mn:00008A98 arg_0           = dword ptr  8
.text$mn:00008A98
.text$mn:00008A98                 push    ebp
.text$mn:00008A99                 mov     ebp, esp
.text$mn:00008A9B                 push    0FFFFFFFFh
.text$mn:00008A9D                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00008AA2                 mov     eax, large fs:0
.text$mn:00008AA8                 push    eax
.text$mn:00008AA9                 push    ecx
.text$mn:00008AAA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008AAF                 xor     eax, ebp
.text$mn:00008AB1                 push    eax
.text$mn:00008AB2                 lea     eax, [ebp+var_C]
.text$mn:00008AB5                 mov     large fs:0, eax
.text$mn:00008ABB                 mov     [ebp+var_10], ecx
.text$mn:00008ABE                 mov     eax, [ebp+arg_0]
.text$mn:00008AC1                 push    eax             ; struct std::exception *
.text$mn:00008AC2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008AC5                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:00008ACA                 mov     [ebp+var_4], 0
.text$mn:00008AD1                 mov     ecx, [ebp+var_10]
.text$mn:00008AD4                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00008ADA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008AE1                 mov     eax, [ebp+var_10]
.text$mn:00008AE4                 mov     ecx, [ebp+var_C]
.text$mn:00008AE7                 mov     large fs:0, ecx
.text$mn:00008AEE                 pop     ecx
.text$mn:00008AEF                 mov     esp, ebp
.text$mn:00008AF1                 pop     ebp
.text$mn:00008AF2                 retn    4
.text$mn:00008AF2 ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:00008AF2
.text$mn:00008AF2 ; ---------------------------------------------------------------------------
.text$mn:00008AF5                 align 4
.text$mn:00008AF5 _text$mn        ends
.text$mn:00008AF5
.text$x:00008AF8 ; ===========================================================================
.text$x:00008AF8
.text$x:00008AF8 ; Segment type: Pure code
.text$x:00008AF8 ; Segment permissions: Read/Execute
.text$x:00008AF8 _text$x         segment para public 'CODE' use32
.text$x:00008AF8                 assume cs:_text$x
.text$x:00008AF8                 ;org 8AF8h
.text$x:00008AF8 ; COMDAT (pick associative to section at 8A98)
.text$x:00008AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008AF8
.text$x:00008AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00008AF8
.text$x:00008AF8
.text$x:00008AF8 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00008AF8                                         ; DATA XREF: .xdata$x:0000F798o
.text$x:00008AF8                 mov     ecx, [ebp-10h]  ; this
.text$x:00008AFB                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00008AFB __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00008AFB
.text$x:00008B00
.text$x:00008B00 ; =============== S U B R O U T I N E =======================================
.text$x:00008B00
.text$x:00008B00
.text$x:00008B00 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:00008B00                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:00008B00
.text$x:00008B00 arg_4           = dword ptr  8
.text$x:00008B00
.text$x:00008B00                 mov     edx, [esp+arg_4]
.text$x:00008B04                 lea     eax, [edx+0Ch]
.text$x:00008B07                 mov     ecx, [edx-8]
.text$x:00008B0A                 xor     ecx, eax
.text$x:00008B0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008B11                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:00008B16                 jmp     ___CxxFrameHandler3
.text$x:00008B16 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:00008B16
.text$x:00008B16 ; ---------------------------------------------------------------------------
.text$x:00008B1B                 align 4
.text$x:00008B1B _text$x         ends
.text$x:00008B1B
.text$mn:00008B1C ; ===========================================================================
.text$mn:00008B1C
.text$mn:00008B1C ; Segment type: Pure code
.text$mn:00008B1C ; Segment permissions: Read/Execute
.text$mn:00008B1C _text$mn        segment para public 'CODE' use32
.text$mn:00008B1C                 assume cs:_text$mn
.text$mn:00008B1C                 ;org 8B1Ch
.text$mn:00008B1C ; COMDAT (pick any)
.text$mn:00008B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B1C
.text$mn:00008B1C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B1C
.text$mn:00008B1C ; Attributes: bp-based frame
.text$mn:00008B1C
.text$mn:00008B1C ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:00008B1C                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:00008B1C ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:00008B1C                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+A1p
.text$mn:00008B1C
.text$mn:00008B1C var_10          = dword ptr -10h
.text$mn:00008B1C var_C           = dword ptr -0Ch
.text$mn:00008B1C var_4           = dword ptr -4
.text$mn:00008B1C arg_0           = dword ptr  8
.text$mn:00008B1C
.text$mn:00008B1C                 push    ebp
.text$mn:00008B1D                 mov     ebp, esp
.text$mn:00008B1F                 push    0FFFFFFFFh
.text$mn:00008B21                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:00008B26                 mov     eax, large fs:0
.text$mn:00008B2C                 push    eax
.text$mn:00008B2D                 push    ecx
.text$mn:00008B2E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008B33                 xor     eax, ebp
.text$mn:00008B35                 push    eax
.text$mn:00008B36                 lea     eax, [ebp+var_C]
.text$mn:00008B39                 mov     large fs:0, eax
.text$mn:00008B3F                 mov     [ebp+var_10], ecx
.text$mn:00008B42                 lea     eax, [ebp+arg_0]
.text$mn:00008B45                 push    eax             ; char **
.text$mn:00008B46                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008B49                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:00008B4E                 mov     [ebp+var_4], 0
.text$mn:00008B55                 mov     ecx, [ebp+var_10]
.text$mn:00008B58                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00008B5E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008B65                 mov     eax, [ebp+var_10]
.text$mn:00008B68                 mov     ecx, [ebp+var_C]
.text$mn:00008B6B                 mov     large fs:0, ecx
.text$mn:00008B72                 pop     ecx
.text$mn:00008B73                 mov     esp, ebp
.text$mn:00008B75                 pop     ebp
.text$mn:00008B76                 retn    4
.text$mn:00008B76 ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:00008B76
.text$mn:00008B76 ; ---------------------------------------------------------------------------
.text$mn:00008B79                 align 4
.text$mn:00008B79 _text$mn        ends
.text$mn:00008B79
.text$x:00008B7C ; ===========================================================================
.text$x:00008B7C
.text$x:00008B7C ; Segment type: Pure code
.text$x:00008B7C ; Segment permissions: Read/Execute
.text$x:00008B7C _text$x         segment para public 'CODE' use32
.text$x:00008B7C                 assume cs:_text$x
.text$x:00008B7C                 ;org 8B7Ch
.text$x:00008B7C ; COMDAT (pick associative to section at 8B1C)
.text$x:00008B7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008B7C
.text$x:00008B7C ; =============== S U B R O U T I N E =======================================
.text$x:00008B7C
.text$x:00008B7C
.text$x:00008B7C __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:00008B7C                                         ; DATA XREF: .xdata$x:0000F740o
.text$x:00008B7C                 mov     ecx, [ebp-10h]  ; this
.text$x:00008B7F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00008B7F __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:00008B7F
.text$x:00008B84
.text$x:00008B84 ; =============== S U B R O U T I N E =======================================
.text$x:00008B84
.text$x:00008B84
.text$x:00008B84 __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:00008B84                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:00008B84
.text$x:00008B84 arg_4           = dword ptr  8
.text$x:00008B84
.text$x:00008B84                 mov     edx, [esp+arg_4]
.text$x:00008B88                 lea     eax, [edx+0Ch]
.text$x:00008B8B                 mov     ecx, [edx-8]
.text$x:00008B8E                 xor     ecx, eax
.text$x:00008B90                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008B95                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:00008B9A                 jmp     ___CxxFrameHandler3
.text$x:00008B9A __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:00008B9A
.text$x:00008B9A ; ---------------------------------------------------------------------------
.text$x:00008B9F                 align 10h
.text$x:00008B9F _text$x         ends
.text$x:00008B9F
.text$mn:00008BA0 ; ===========================================================================
.text$mn:00008BA0
.text$mn:00008BA0 ; Segment type: Pure code
.text$mn:00008BA0 ; Segment permissions: Read/Execute
.text$mn:00008BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00008BA0                 assume cs:_text$mn
.text$mn:00008BA0                 ;org 8BA0h
.text$mn:00008BA0 ; COMDAT (pick any)
.text$mn:00008BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BA0
.text$mn:00008BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BA0
.text$mn:00008BA0 ; Attributes: bp-based frame
.text$mn:00008BA0
.text$mn:00008BA0 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, struct MatchedCharInserted, int, struct MatchedCharInserted const *, struct MatchedCharInserted const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, struct MatchedCharInserted, int, struct MatchedCharInserted const *, struct MatchedCharInserted const &, struct std::_Iterator_base12>(void)
.text$mn:00008BA0                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008BA0 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00008BA0                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00008BA0                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00008BA0
.text$mn:00008BA0 var_10          = dword ptr -10h
.text$mn:00008BA0 var_C           = dword ptr -0Ch
.text$mn:00008BA0 var_4           = dword ptr -4
.text$mn:00008BA0
.text$mn:00008BA0                 push    ebp
.text$mn:00008BA1                 mov     ebp, esp
.text$mn:00008BA3                 push    0FFFFFFFFh
.text$mn:00008BA5                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008BAA                 mov     eax, large fs:0
.text$mn:00008BB0                 push    eax
.text$mn:00008BB1                 push    ecx
.text$mn:00008BB2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008BB7                 xor     eax, ebp
.text$mn:00008BB9                 push    eax
.text$mn:00008BBA                 lea     eax, [ebp+var_C]
.text$mn:00008BBD                 mov     large fs:0, eax
.text$mn:00008BC3                 mov     [ebp+var_10], ecx
.text$mn:00008BC6                 mov     [ebp+var_4], 0
.text$mn:00008BCD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008BD4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008BD7                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00008BDC                 mov     ecx, [ebp+var_C]
.text$mn:00008BDF                 mov     large fs:0, ecx
.text$mn:00008BE6                 pop     ecx
.text$mn:00008BE7                 mov     esp, ebp
.text$mn:00008BE9                 pop     ebp
.text$mn:00008BEA                 retn
.text$mn:00008BEA ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00008BEA
.text$mn:00008BEA ; ---------------------------------------------------------------------------
.text$mn:00008BEB                 align 4
.text$mn:00008BEB _text$mn        ends
.text$mn:00008BEB
.text$x:00008BEC ; ===========================================================================
.text$x:00008BEC
.text$x:00008BEC ; Segment type: Pure code
.text$x:00008BEC ; Segment permissions: Read/Execute
.text$x:00008BEC _text$x         segment para public 'CODE' use32
.text$x:00008BEC                 assume cs:_text$x
.text$x:00008BEC                 ;org 8BECh
.text$x:00008BEC ; COMDAT (pick associative to section at 8BA0)
.text$x:00008BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008BEC
.text$x:00008BEC ; =============== S U B R O U T I N E =======================================
.text$x:00008BEC
.text$x:00008BEC
.text$x:00008BEC __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00008BEC                                         ; DATA XREF: .xdata$x:00010908o
.text$x:00008BEC                 mov     ecx, [ebp-10h]  ; this
.text$x:00008BEF                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00008BEF __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00008BEF
.text$x:00008BF4
.text$x:00008BF4 ; =============== S U B R O U T I N E =======================================
.text$x:00008BF4
.text$x:00008BF4
.text$x:00008BF4 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00008BF4                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)+5o
.text$x:00008BF4
.text$x:00008BF4 arg_4           = dword ptr  8
.text$x:00008BF4
.text$x:00008BF4                 mov     edx, [esp+arg_4]
.text$x:00008BF8                 lea     eax, [edx+0Ch]
.text$x:00008BFB                 mov     ecx, [edx-8]
.text$x:00008BFE                 xor     ecx, eax
.text$x:00008C00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C05                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00008C0A                 jmp     ___CxxFrameHandler3
.text$x:00008C0A __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00008C0A
.text$x:00008C0A ; ---------------------------------------------------------------------------
.text$x:00008C0F                 align 10h
.text$x:00008C0F _text$x         ends
.text$x:00008C0F
.text$mn:00008C10 ; ===========================================================================
.text$mn:00008C10
.text$mn:00008C10 ; Segment type: Pure code
.text$mn:00008C10 ; Segment permissions: Read/Execute
.text$mn:00008C10 _text$mn        segment para public 'CODE' use32
.text$mn:00008C10                 assume cs:_text$mn
.text$mn:00008C10                 ;org 8C10h
.text$mn:00008C10 ; COMDAT (pick any)
.text$mn:00008C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C10
.text$mn:00008C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C10
.text$mn:00008C10 ; Attributes: bp-based frame
.text$mn:00008C10
.text$mn:00008C10 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:00008C10                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008C10 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00008C10                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00008C10                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00008C10
.text$mn:00008C10 var_10          = dword ptr -10h
.text$mn:00008C10 var_C           = dword ptr -0Ch
.text$mn:00008C10 var_4           = dword ptr -4
.text$mn:00008C10
.text$mn:00008C10                 push    ebp
.text$mn:00008C11                 mov     ebp, esp
.text$mn:00008C13                 push    0FFFFFFFFh
.text$mn:00008C15                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008C1A                 mov     eax, large fs:0
.text$mn:00008C20                 push    eax
.text$mn:00008C21                 push    ecx
.text$mn:00008C22                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008C27                 xor     eax, ebp
.text$mn:00008C29                 push    eax
.text$mn:00008C2A                 lea     eax, [ebp+var_C]
.text$mn:00008C2D                 mov     large fs:0, eax
.text$mn:00008C33                 mov     [ebp+var_10], ecx
.text$mn:00008C36                 mov     [ebp+var_4], 0
.text$mn:00008C3D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008C44                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008C47                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00008C4C                 mov     ecx, [ebp+var_C]
.text$mn:00008C4F                 mov     large fs:0, ecx
.text$mn:00008C56                 pop     ecx
.text$mn:00008C57                 mov     esp, ebp
.text$mn:00008C59                 pop     ebp
.text$mn:00008C5A                 retn
.text$mn:00008C5A ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00008C5A
.text$mn:00008C5A ; ---------------------------------------------------------------------------
.text$mn:00008C5B                 align 4
.text$mn:00008C5B _text$mn        ends
.text$mn:00008C5B
.text$x:00008C5C ; ===========================================================================
.text$x:00008C5C
.text$x:00008C5C ; Segment type: Pure code
.text$x:00008C5C ; Segment permissions: Read/Execute
.text$x:00008C5C _text$x         segment para public 'CODE' use32
.text$x:00008C5C                 assume cs:_text$x
.text$x:00008C5C                 ;org 8C5Ch
.text$x:00008C5C ; COMDAT (pick associative to section at 8C10)
.text$x:00008C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008C5C
.text$x:00008C5C ; =============== S U B R O U T I N E =======================================
.text$x:00008C5C
.text$x:00008C5C
.text$x:00008C5C __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00008C5C                                         ; DATA XREF: .xdata$x:00010704o
.text$x:00008C5C                 mov     ecx, [ebp-10h]  ; this
.text$x:00008C5F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00008C5F __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00008C5F
.text$x:00008C64
.text$x:00008C64 ; =============== S U B R O U T I N E =======================================
.text$x:00008C64
.text$x:00008C64
.text$x:00008C64 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00008C64                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:00008C64
.text$x:00008C64 arg_4           = dword ptr  8
.text$x:00008C64
.text$x:00008C64                 mov     edx, [esp+arg_4]
.text$x:00008C68                 lea     eax, [edx+0Ch]
.text$x:00008C6B                 mov     ecx, [edx-8]
.text$x:00008C6E                 xor     ecx, eax
.text$x:00008C70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C75                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:00008C7A                 jmp     ___CxxFrameHandler3
.text$x:00008C7A __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00008C7A
.text$x:00008C7A ; ---------------------------------------------------------------------------
.text$x:00008C7F                 align 10h
.text$x:00008C7F _text$x         ends
.text$x:00008C7F
.text$mn:00008C80 ; ===========================================================================
.text$mn:00008C80
.text$mn:00008C80 ; Segment type: Pure code
.text$mn:00008C80 ; Segment permissions: Read/Execute
.text$mn:00008C80 _text$mn        segment para public 'CODE' use32
.text$mn:00008C80                 assume cs:_text$mn
.text$mn:00008C80                 ;org 8C80h
.text$mn:00008C80 ; COMDAT (pick any)
.text$mn:00008C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C80
.text$mn:00008C80 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C80
.text$mn:00008C80 ; Attributes: bp-based frame
.text$mn:00008C80
.text$mn:00008C80 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00008C80                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008C80 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00008C80                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00008C80                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00008C80
.text$mn:00008C80 var_10          = dword ptr -10h
.text$mn:00008C80 var_C           = dword ptr -0Ch
.text$mn:00008C80 var_4           = dword ptr -4
.text$mn:00008C80
.text$mn:00008C80                 push    ebp
.text$mn:00008C81                 mov     ebp, esp
.text$mn:00008C83                 push    0FFFFFFFFh
.text$mn:00008C85                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008C8A                 mov     eax, large fs:0
.text$mn:00008C90                 push    eax
.text$mn:00008C91                 push    ecx
.text$mn:00008C92                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008C97                 xor     eax, ebp
.text$mn:00008C99                 push    eax
.text$mn:00008C9A                 lea     eax, [ebp+var_C]
.text$mn:00008C9D                 mov     large fs:0, eax
.text$mn:00008CA3                 mov     [ebp+var_10], ecx
.text$mn:00008CA6                 mov     [ebp+var_4], 0
.text$mn:00008CAD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008CB4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008CB7                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00008CBC                 mov     ecx, [ebp+var_C]
.text$mn:00008CBF                 mov     large fs:0, ecx
.text$mn:00008CC6                 pop     ecx
.text$mn:00008CC7                 mov     esp, ebp
.text$mn:00008CC9                 pop     ebp
.text$mn:00008CCA                 retn
.text$mn:00008CCA ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00008CCA
.text$mn:00008CCA ; ---------------------------------------------------------------------------
.text$mn:00008CCB                 align 4
.text$mn:00008CCB _text$mn        ends
.text$mn:00008CCB
.text$x:00008CCC ; ===========================================================================
.text$x:00008CCC
.text$x:00008CCC ; Segment type: Pure code
.text$x:00008CCC ; Segment permissions: Read/Execute
.text$x:00008CCC _text$x         segment para public 'CODE' use32
.text$x:00008CCC                 assume cs:_text$x
.text$x:00008CCC                 ;org 8CCCh
.text$x:00008CCC ; COMDAT (pick associative to section at 8C80)
.text$x:00008CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008CCC
.text$x:00008CCC ; =============== S U B R O U T I N E =======================================
.text$x:00008CCC
.text$x:00008CCC
.text$x:00008CCC __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00008CCC                                         ; DATA XREF: .xdata$x:00010AC8o
.text$x:00008CCC                 mov     ecx, [ebp-10h]  ; this
.text$x:00008CCF                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00008CCF __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00008CCF
.text$x:00008CD4
.text$x:00008CD4 ; =============== S U B R O U T I N E =======================================
.text$x:00008CD4
.text$x:00008CD4
.text$x:00008CD4 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00008CD4                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00008CD4
.text$x:00008CD4 arg_4           = dword ptr  8
.text$x:00008CD4
.text$x:00008CD4                 mov     edx, [esp+arg_4]
.text$x:00008CD8                 lea     eax, [edx+0Ch]
.text$x:00008CDB                 mov     ecx, [edx-8]
.text$x:00008CDE                 xor     ecx, eax
.text$x:00008CE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008CE5                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00008CEA                 jmp     ___CxxFrameHandler3
.text$x:00008CEA __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00008CEA
.text$x:00008CEA ; ---------------------------------------------------------------------------
.text$x:00008CEF                 align 10h
.text$x:00008CEF _text$x         ends
.text$x:00008CEF
.text$mn:00008CF0 ; ===========================================================================
.text$mn:00008CF0
.text$mn:00008CF0 ; Segment type: Pure code
.text$mn:00008CF0 ; Segment permissions: Read/Execute
.text$mn:00008CF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008CF0                 assume cs:_text$mn
.text$mn:00008CF0                 ;org 8CF0h
.text$mn:00008CF0 ; COMDAT (pick any)
.text$mn:00008CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CF0
.text$mn:00008CF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CF0
.text$mn:00008CF0 ; Attributes: bp-based frame
.text$mn:00008CF0
.text$mn:00008CF0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00008CF0                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00008CF0 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008CF0                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00008CF0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00008CF0
.text$mn:00008CF0 var_10          = dword ptr -10h
.text$mn:00008CF0 var_C           = dword ptr -0Ch
.text$mn:00008CF0 var_4           = dword ptr -4
.text$mn:00008CF0
.text$mn:00008CF0                 push    ebp
.text$mn:00008CF1                 mov     ebp, esp
.text$mn:00008CF3                 push    0FFFFFFFFh
.text$mn:00008CF5                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00008CFA                 mov     eax, large fs:0
.text$mn:00008D00                 push    eax
.text$mn:00008D01                 push    ecx
.text$mn:00008D02                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008D07                 xor     eax, ebp
.text$mn:00008D09                 push    eax
.text$mn:00008D0A                 lea     eax, [ebp+var_C]
.text$mn:00008D0D                 mov     large fs:0, eax
.text$mn:00008D13                 mov     [ebp+var_10], ecx
.text$mn:00008D16                 mov     [ebp+var_4], 0
.text$mn:00008D1D                 mov     ecx, [ebp+var_10]
.text$mn:00008D20                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00008D25                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008D2C                 mov     ecx, [ebp+var_10]
.text$mn:00008D2F                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00008D34                 mov     ecx, [ebp+var_C]
.text$mn:00008D37                 mov     large fs:0, ecx
.text$mn:00008D3E                 pop     ecx
.text$mn:00008D3F                 mov     esp, ebp
.text$mn:00008D41                 pop     ebp
.text$mn:00008D42                 retn
.text$mn:00008D42 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008D42
.text$mn:00008D42 ; ---------------------------------------------------------------------------
.text$mn:00008D43                 align 4
.text$mn:00008D43 _text$mn        ends
.text$mn:00008D43
.text$x:00008D44 ; ===========================================================================
.text$x:00008D44
.text$x:00008D44 ; Segment type: Pure code
.text$x:00008D44 ; Segment permissions: Read/Execute
.text$x:00008D44 _text$x         segment para public 'CODE' use32
.text$x:00008D44                 assume cs:_text$x
.text$x:00008D44                 ;org 8D44h
.text$x:00008D44 ; COMDAT (pick associative to section at 8CF0)
.text$x:00008D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008D44
.text$x:00008D44 ; =============== S U B R O U T I N E =======================================
.text$x:00008D44
.text$x:00008D44
.text$x:00008D44 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008D44                                         ; DATA XREF: .xdata$x:0000F630o
.text$x:00008D44                 mov     ecx, [ebp-10h]
.text$x:00008D47                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00008D47 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008D47
.text$x:00008D4C
.text$x:00008D4C ; =============== S U B R O U T I N E =======================================
.text$x:00008D4C
.text$x:00008D4C
.text$x:00008D4C __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008D4C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00008D4C
.text$x:00008D4C arg_4           = dword ptr  8
.text$x:00008D4C
.text$x:00008D4C                 mov     edx, [esp+arg_4]
.text$x:00008D50                 lea     eax, [edx+0Ch]
.text$x:00008D53                 mov     ecx, [edx-8]
.text$x:00008D56                 xor     ecx, eax
.text$x:00008D58                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008D5D                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00008D62                 jmp     ___CxxFrameHandler3
.text$x:00008D62 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00008D62
.text$x:00008D62 ; ---------------------------------------------------------------------------
.text$x:00008D67                 align 4
.text$x:00008D67 _text$x         ends
.text$x:00008D67
.text$mn:00008D68 ; ===========================================================================
.text$mn:00008D68
.text$mn:00008D68 ; Segment type: Pure code
.text$mn:00008D68 ; Segment permissions: Read/Execute
.text$mn:00008D68 _text$mn        segment para public 'CODE' use32
.text$mn:00008D68                 assume cs:_text$mn
.text$mn:00008D68                 ;org 8D68h
.text$mn:00008D68 ; COMDAT (pick any)
.text$mn:00008D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D68
.text$mn:00008D68 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D68
.text$mn:00008D68 ; Attributes: bp-based frame
.text$mn:00008D68
.text$mn:00008D68 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00008D68                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008D68 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008D68                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00008D68                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00008D68
.text$mn:00008D68 var_10          = dword ptr -10h
.text$mn:00008D68 var_C           = dword ptr -0Ch
.text$mn:00008D68 var_4           = dword ptr -4
.text$mn:00008D68
.text$mn:00008D68                 push    ebp
.text$mn:00008D69                 mov     ebp, esp
.text$mn:00008D6B                 push    0FFFFFFFFh
.text$mn:00008D6D                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008D72                 mov     eax, large fs:0
.text$mn:00008D78                 push    eax
.text$mn:00008D79                 push    ecx
.text$mn:00008D7A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008D7F                 xor     eax, ebp
.text$mn:00008D81                 push    eax
.text$mn:00008D82                 lea     eax, [ebp+var_C]
.text$mn:00008D85                 mov     large fs:0, eax
.text$mn:00008D8B                 mov     [ebp+var_10], ecx
.text$mn:00008D8E                 mov     [ebp+var_4], 0
.text$mn:00008D95                 mov     ecx, [ebp+var_10]
.text$mn:00008D98                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00008D9D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008DA4                 mov     ecx, [ebp+var_10]
.text$mn:00008DA7                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00008DAC                 mov     ecx, [ebp+var_C]
.text$mn:00008DAF                 mov     large fs:0, ecx
.text$mn:00008DB6                 pop     ecx
.text$mn:00008DB7                 mov     esp, ebp
.text$mn:00008DB9                 pop     ebp
.text$mn:00008DBA                 retn
.text$mn:00008DBA ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008DBA
.text$mn:00008DBA ; ---------------------------------------------------------------------------
.text$mn:00008DBB                 align 4
.text$mn:00008DBB _text$mn        ends
.text$mn:00008DBB
.text$x:00008DBC ; ===========================================================================
.text$x:00008DBC
.text$x:00008DBC ; Segment type: Pure code
.text$x:00008DBC ; Segment permissions: Read/Execute
.text$x:00008DBC _text$x         segment para public 'CODE' use32
.text$x:00008DBC                 assume cs:_text$x
.text$x:00008DBC                 ;org 8DBCh
.text$x:00008DBC ; COMDAT (pick associative to section at 8D68)
.text$x:00008DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008DBC
.text$x:00008DBC ; =============== S U B R O U T I N E =======================================
.text$x:00008DBC
.text$x:00008DBC
.text$x:00008DBC __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008DBC                                         ; DATA XREF: .xdata$x:0000FC28o
.text$x:00008DBC                 mov     ecx, [ebp-10h]
.text$x:00008DBF                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00008DBF __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008DBF
.text$x:00008DC4
.text$x:00008DC4 ; =============== S U B R O U T I N E =======================================
.text$x:00008DC4
.text$x:00008DC4
.text$x:00008DC4 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008DC4                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00008DC4
.text$x:00008DC4 arg_4           = dword ptr  8
.text$x:00008DC4
.text$x:00008DC4                 mov     edx, [esp+arg_4]
.text$x:00008DC8                 lea     eax, [edx+0Ch]
.text$x:00008DCB                 mov     ecx, [edx-8]
.text$x:00008DCE                 xor     ecx, eax
.text$x:00008DD0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008DD5                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00008DDA                 jmp     ___CxxFrameHandler3
.text$x:00008DDA __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00008DDA
.text$x:00008DDA ; ---------------------------------------------------------------------------
.text$x:00008DDF                 align 10h
.text$x:00008DDF _text$x         ends
.text$x:00008DDF
.text$mn:00008DE0 ; ===========================================================================
.text$mn:00008DE0
.text$mn:00008DE0 ; Segment type: Pure code
.text$mn:00008DE0 ; Segment permissions: Read/Execute
.text$mn:00008DE0 _text$mn        segment para public 'CODE' use32
.text$mn:00008DE0                 assume cs:_text$mn
.text$mn:00008DE0                 ;org 8DE0h
.text$mn:00008DE0 ; COMDAT (pick any)
.text$mn:00008DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DE0
.text$mn:00008DE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DE0
.text$mn:00008DE0 ; Attributes: bp-based frame
.text$mn:00008DE0
.text$mn:00008DE0 ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:00008DE0                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008DE0 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008DE0                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:00008DE0                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:00008DE0
.text$mn:00008DE0 var_10          = dword ptr -10h
.text$mn:00008DE0 var_C           = dword ptr -0Ch
.text$mn:00008DE0 var_4           = dword ptr -4
.text$mn:00008DE0
.text$mn:00008DE0                 push    ebp
.text$mn:00008DE1                 mov     ebp, esp
.text$mn:00008DE3                 push    0FFFFFFFFh
.text$mn:00008DE5                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008DEA                 mov     eax, large fs:0
.text$mn:00008DF0                 push    eax
.text$mn:00008DF1                 push    ecx
.text$mn:00008DF2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008DF7                 xor     eax, ebp
.text$mn:00008DF9                 push    eax
.text$mn:00008DFA                 lea     eax, [ebp+var_C]
.text$mn:00008DFD                 mov     large fs:0, eax
.text$mn:00008E03                 mov     [ebp+var_10], ecx
.text$mn:00008E06                 mov     [ebp+var_4], 0
.text$mn:00008E0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008E14                 mov     ecx, [ebp+var_10]
.text$mn:00008E17                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00008E1C                 mov     ecx, [ebp+var_C]
.text$mn:00008E1F                 mov     large fs:0, ecx
.text$mn:00008E26                 pop     ecx
.text$mn:00008E27                 mov     esp, ebp
.text$mn:00008E29                 pop     ebp
.text$mn:00008E2A                 retn
.text$mn:00008E2A ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008E2A
.text$mn:00008E2A ; ---------------------------------------------------------------------------
.text$mn:00008E2B                 align 4
.text$mn:00008E2B _text$mn        ends
.text$mn:00008E2B
.text$x:00008E2C ; ===========================================================================
.text$x:00008E2C
.text$x:00008E2C ; Segment type: Pure code
.text$x:00008E2C ; Segment permissions: Read/Execute
.text$x:00008E2C _text$x         segment para public 'CODE' use32
.text$x:00008E2C                 assume cs:_text$x
.text$x:00008E2C                 ;org 8E2Ch
.text$x:00008E2C ; COMDAT (pick associative to section at 8DE0)
.text$x:00008E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E2C
.text$x:00008E2C ; =============== S U B R O U T I N E =======================================
.text$x:00008E2C
.text$x:00008E2C
.text$x:00008E2C __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008E2C                                         ; DATA XREF: .xdata$x:00010B4Co
.text$x:00008E2C                 mov     ecx, [ebp-10h]
.text$x:00008E2F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00008E2F __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008E2F
.text$x:00008E34
.text$x:00008E34 ; =============== S U B R O U T I N E =======================================
.text$x:00008E34
.text$x:00008E34
.text$x:00008E34 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008E34                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00008E34
.text$x:00008E34 arg_4           = dword ptr  8
.text$x:00008E34
.text$x:00008E34                 mov     edx, [esp+arg_4]
.text$x:00008E38                 lea     eax, [edx+0Ch]
.text$x:00008E3B                 mov     ecx, [edx-8]
.text$x:00008E3E                 xor     ecx, eax
.text$x:00008E40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008E45                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00008E4A                 jmp     ___CxxFrameHandler3
.text$x:00008E4A __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00008E4A
.text$x:00008E4A ; ---------------------------------------------------------------------------
.text$x:00008E4F                 align 10h
.text$x:00008E4F _text$x         ends
.text$x:00008E4F
.text$mn:00008E50 ; ===========================================================================
.text$mn:00008E50
.text$mn:00008E50 ; Segment type: Pure code
.text$mn:00008E50 ; Segment permissions: Read/Execute
.text$mn:00008E50 _text$mn        segment para public 'CODE' use32
.text$mn:00008E50                 assume cs:_text$mn
.text$mn:00008E50                 ;org 8E50h
.text$mn:00008E50 ; COMDAT (pick any)
.text$mn:00008E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E50
.text$mn:00008E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E50
.text$mn:00008E50 ; Attributes: bp-based frame
.text$mn:00008E50
.text$mn:00008E50 ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:00008E50                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008E50 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008E50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:00008E50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:00008E50
.text$mn:00008E50 var_10          = dword ptr -10h
.text$mn:00008E50 var_C           = dword ptr -0Ch
.text$mn:00008E50 var_4           = dword ptr -4
.text$mn:00008E50
.text$mn:00008E50                 push    ebp
.text$mn:00008E51                 mov     ebp, esp
.text$mn:00008E53                 push    0FFFFFFFFh
.text$mn:00008E55                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008E5A                 mov     eax, large fs:0
.text$mn:00008E60                 push    eax
.text$mn:00008E61                 push    ecx
.text$mn:00008E62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008E67                 xor     eax, ebp
.text$mn:00008E69                 push    eax
.text$mn:00008E6A                 lea     eax, [ebp+var_C]
.text$mn:00008E6D                 mov     large fs:0, eax
.text$mn:00008E73                 mov     [ebp+var_10], ecx
.text$mn:00008E76                 mov     [ebp+var_4], 0
.text$mn:00008E7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008E84                 mov     ecx, [ebp+var_10]
.text$mn:00008E87                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00008E8C                 mov     ecx, [ebp+var_C]
.text$mn:00008E8F                 mov     large fs:0, ecx
.text$mn:00008E96                 pop     ecx
.text$mn:00008E97                 mov     esp, ebp
.text$mn:00008E99                 pop     ebp
.text$mn:00008E9A                 retn
.text$mn:00008E9A ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008E9A
.text$mn:00008E9A ; ---------------------------------------------------------------------------
.text$mn:00008E9B                 align 4
.text$mn:00008E9B _text$mn        ends
.text$mn:00008E9B
.text$x:00008E9C ; ===========================================================================
.text$x:00008E9C
.text$x:00008E9C ; Segment type: Pure code
.text$x:00008E9C ; Segment permissions: Read/Execute
.text$x:00008E9C _text$x         segment para public 'CODE' use32
.text$x:00008E9C                 assume cs:_text$x
.text$x:00008E9C                 ;org 8E9Ch
.text$x:00008E9C ; COMDAT (pick associative to section at 8E50)
.text$x:00008E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E9C
.text$x:00008E9C ; =============== S U B R O U T I N E =======================================
.text$x:00008E9C
.text$x:00008E9C
.text$x:00008E9C __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008E9C                                         ; DATA XREF: .xdata$x:00010BFCo
.text$x:00008E9C                 mov     ecx, [ebp-10h]
.text$x:00008E9F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00008E9F __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008E9F
.text$x:00008EA4
.text$x:00008EA4 ; =============== S U B R O U T I N E =======================================
.text$x:00008EA4
.text$x:00008EA4
.text$x:00008EA4 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008EA4                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00008EA4
.text$x:00008EA4 arg_4           = dword ptr  8
.text$x:00008EA4
.text$x:00008EA4                 mov     edx, [esp+arg_4]
.text$x:00008EA8                 lea     eax, [edx+0Ch]
.text$x:00008EAB                 mov     ecx, [edx-8]
.text$x:00008EAE                 xor     ecx, eax
.text$x:00008EB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008EB5                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00008EBA                 jmp     ___CxxFrameHandler3
.text$x:00008EBA __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00008EBA
.text$x:00008EBA ; ---------------------------------------------------------------------------
.text$x:00008EBF                 align 10h
.text$x:00008EBF _text$x         ends
.text$x:00008EBF
.text$mn:00008EC0 ; ===========================================================================
.text$mn:00008EC0
.text$mn:00008EC0 ; Segment type: Pure code
.text$mn:00008EC0 ; Segment permissions: Read/Execute
.text$mn:00008EC0 _text$mn        segment para public 'CODE' use32
.text$mn:00008EC0                 assume cs:_text$mn
.text$mn:00008EC0                 ;org 8EC0h
.text$mn:00008EC0 ; COMDAT (pick any)
.text$mn:00008EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008EC0
.text$mn:00008EC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008EC0
.text$mn:00008EC0 ; Attributes: bp-based frame
.text$mn:00008EC0
.text$mn:00008EC0 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00008EC0                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00008EC0 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00008EC0                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00008EC0                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00008EC0
.text$mn:00008EC0 var_10          = dword ptr -10h
.text$mn:00008EC0 var_C           = dword ptr -0Ch
.text$mn:00008EC0 var_4           = dword ptr -4
.text$mn:00008EC0
.text$mn:00008EC0                 push    ebp
.text$mn:00008EC1                 mov     ebp, esp
.text$mn:00008EC3                 push    0FFFFFFFFh
.text$mn:00008EC5                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00008ECA                 mov     eax, large fs:0
.text$mn:00008ED0                 push    eax
.text$mn:00008ED1                 push    ecx
.text$mn:00008ED2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008ED7                 xor     eax, ebp
.text$mn:00008ED9                 push    eax
.text$mn:00008EDA                 lea     eax, [ebp+var_C]
.text$mn:00008EDD                 mov     large fs:0, eax
.text$mn:00008EE3                 mov     [ebp+var_10], ecx
.text$mn:00008EE6                 mov     [ebp+var_4], 0
.text$mn:00008EED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008EF4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008EF7                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008EFC                 mov     ecx, [ebp+var_C]
.text$mn:00008EFF                 mov     large fs:0, ecx
.text$mn:00008F06                 pop     ecx
.text$mn:00008F07                 mov     esp, ebp
.text$mn:00008F09                 pop     ebp
.text$mn:00008F0A                 retn
.text$mn:00008F0A ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00008F0A
.text$mn:00008F0A ; ---------------------------------------------------------------------------
.text$mn:00008F0B                 align 4
.text$mn:00008F0B _text$mn        ends
.text$mn:00008F0B
.text$x:00008F0C ; ===========================================================================
.text$x:00008F0C
.text$x:00008F0C ; Segment type: Pure code
.text$x:00008F0C ; Segment permissions: Read/Execute
.text$x:00008F0C _text$x         segment para public 'CODE' use32
.text$x:00008F0C                 assume cs:_text$x
.text$x:00008F0C                 ;org 8F0Ch
.text$x:00008F0C ; COMDAT (pick associative to section at 8EC0)
.text$x:00008F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008F0C
.text$x:00008F0C ; =============== S U B R O U T I N E =======================================
.text$x:00008F0C
.text$x:00008F0C
.text$x:00008F0C __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00008F0C                                         ; DATA XREF: .xdata$x:0000F5D8o
.text$x:00008F0C                 mov     ecx, [ebp-10h]  ; this
.text$x:00008F0F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008F0F __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00008F0F
.text$x:00008F14
.text$x:00008F14 ; =============== S U B R O U T I N E =======================================
.text$x:00008F14
.text$x:00008F14
.text$x:00008F14 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00008F14                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00008F14
.text$x:00008F14 arg_4           = dword ptr  8
.text$x:00008F14
.text$x:00008F14                 mov     edx, [esp+arg_4]
.text$x:00008F18                 lea     eax, [edx+0Ch]
.text$x:00008F1B                 mov     ecx, [edx-8]
.text$x:00008F1E                 xor     ecx, eax
.text$x:00008F20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008F25                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00008F2A                 jmp     ___CxxFrameHandler3
.text$x:00008F2A __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00008F2A
.text$x:00008F2A ; ---------------------------------------------------------------------------
.text$x:00008F2F                 align 10h
.text$x:00008F2F _text$x         ends
.text$x:00008F2F
.text$mn:00008F30 ; ===========================================================================
.text$mn:00008F30
.text$mn:00008F30 ; Segment type: Pure code
.text$mn:00008F30 ; Segment permissions: Read/Execute
.text$mn:00008F30 _text$mn        segment para public 'CODE' use32
.text$mn:00008F30                 assume cs:_text$mn
.text$mn:00008F30                 ;org 8F30h
.text$mn:00008F30 ; COMDAT (pick any)
.text$mn:00008F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F30
.text$mn:00008F30 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F30
.text$mn:00008F30 ; Attributes: bp-based frame
.text$mn:00008F30
.text$mn:00008F30 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00008F30                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00008F30 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00008F30                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00008F30                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00008F30
.text$mn:00008F30 var_10          = dword ptr -10h
.text$mn:00008F30 var_C           = dword ptr -0Ch
.text$mn:00008F30 var_4           = dword ptr -4
.text$mn:00008F30
.text$mn:00008F30                 push    ebp
.text$mn:00008F31                 mov     ebp, esp
.text$mn:00008F33                 push    0FFFFFFFFh
.text$mn:00008F35                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00008F3A                 mov     eax, large fs:0
.text$mn:00008F40                 push    eax
.text$mn:00008F41                 push    ecx
.text$mn:00008F42                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F47                 xor     eax, ebp
.text$mn:00008F49                 push    eax
.text$mn:00008F4A                 lea     eax, [ebp+var_C]
.text$mn:00008F4D                 mov     large fs:0, eax
.text$mn:00008F53                 mov     [ebp+var_10], ecx
.text$mn:00008F56                 mov     [ebp+var_4], 0
.text$mn:00008F5D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008F64                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008F67                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008F6C                 mov     ecx, [ebp+var_C]
.text$mn:00008F6F                 mov     large fs:0, ecx
.text$mn:00008F76                 pop     ecx
.text$mn:00008F77                 mov     esp, ebp
.text$mn:00008F79                 pop     ebp
.text$mn:00008F7A                 retn
.text$mn:00008F7A ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00008F7A
.text$mn:00008F7A ; ---------------------------------------------------------------------------
.text$mn:00008F7B                 align 4
.text$mn:00008F7B _text$mn        ends
.text$mn:00008F7B
.text$x:00008F7C ; ===========================================================================
.text$x:00008F7C
.text$x:00008F7C ; Segment type: Pure code
.text$x:00008F7C ; Segment permissions: Read/Execute
.text$x:00008F7C _text$x         segment para public 'CODE' use32
.text$x:00008F7C                 assume cs:_text$x
.text$x:00008F7C                 ;org 8F7Ch
.text$x:00008F7C ; COMDAT (pick associative to section at 8F30)
.text$x:00008F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008F7C
.text$x:00008F7C ; =============== S U B R O U T I N E =======================================
.text$x:00008F7C
.text$x:00008F7C
.text$x:00008F7C __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00008F7C                                         ; DATA XREF: .xdata$x:0000FBD0o
.text$x:00008F7C                 mov     ecx, [ebp-10h]  ; this
.text$x:00008F7F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008F7F __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00008F7F
.text$x:00008F84
.text$x:00008F84 ; =============== S U B R O U T I N E =======================================
.text$x:00008F84
.text$x:00008F84
.text$x:00008F84 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00008F84                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00008F84
.text$x:00008F84 arg_4           = dword ptr  8
.text$x:00008F84
.text$x:00008F84                 mov     edx, [esp+arg_4]
.text$x:00008F88                 lea     eax, [edx+0Ch]
.text$x:00008F8B                 mov     ecx, [edx-8]
.text$x:00008F8E                 xor     ecx, eax
.text$x:00008F90                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008F95                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00008F9A                 jmp     ___CxxFrameHandler3
.text$x:00008F9A __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00008F9A
.text$x:00008F9A ; ---------------------------------------------------------------------------
.text$x:00008F9F                 align 10h
.text$x:00008F9F _text$x         ends
.text$x:00008F9F
.text$mn:00008FA0 ; ===========================================================================
.text$mn:00008FA0
.text$mn:00008FA0 ; Segment type: Pure code
.text$mn:00008FA0 ; Segment permissions: Read/Execute
.text$mn:00008FA0 _text$mn        segment para public 'CODE' use32
.text$mn:00008FA0                 assume cs:_text$mn
.text$mn:00008FA0                 ;org 8FA0h
.text$mn:00008FA0 ; COMDAT (pick any)
.text$mn:00008FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FA0
.text$mn:00008FA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FA0
.text$mn:00008FA0 ; Attributes: bp-based frame
.text$mn:00008FA0
.text$mn:00008FA0 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00008FA0                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00008FA0 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:00008FA0                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0+3j
.text$mn:00008FA0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+3Fp ...
.text$mn:00008FA0
.text$mn:00008FA0 var_10          = dword ptr -10h
.text$mn:00008FA0 var_C           = dword ptr -0Ch
.text$mn:00008FA0 var_4           = dword ptr -4
.text$mn:00008FA0
.text$mn:00008FA0                 push    ebp
.text$mn:00008FA1                 mov     ebp, esp
.text$mn:00008FA3                 push    0FFFFFFFFh
.text$mn:00008FA5                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00008FAA                 mov     eax, large fs:0
.text$mn:00008FB0                 push    eax
.text$mn:00008FB1                 push    ecx
.text$mn:00008FB2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008FB7                 xor     eax, ebp
.text$mn:00008FB9                 push    eax
.text$mn:00008FBA                 lea     eax, [ebp+var_C]
.text$mn:00008FBD                 mov     large fs:0, eax
.text$mn:00008FC3                 mov     [ebp+var_10], ecx
.text$mn:00008FC6                 mov     [ebp+var_4], 0
.text$mn:00008FCD                 mov     ecx, [ebp+var_10]
.text$mn:00008FD0                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:00008FD5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008FDC                 mov     ecx, [ebp+var_10]
.text$mn:00008FDF                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00008FE4                 mov     ecx, [ebp+var_C]
.text$mn:00008FE7                 mov     large fs:0, ecx
.text$mn:00008FEE                 pop     ecx
.text$mn:00008FEF                 mov     esp, ebp
.text$mn:00008FF1                 pop     ebp
.text$mn:00008FF2                 retn
.text$mn:00008FF2 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:00008FF2
.text$mn:00008FF2 ; ---------------------------------------------------------------------------
.text$mn:00008FF3                 align 4
.text$mn:00008FF3 _text$mn        ends
.text$mn:00008FF3
.text$x:00008FF4 ; ===========================================================================
.text$x:00008FF4
.text$x:00008FF4 ; Segment type: Pure code
.text$x:00008FF4 ; Segment permissions: Read/Execute
.text$x:00008FF4 _text$x         segment para public 'CODE' use32
.text$x:00008FF4                 assume cs:_text$x
.text$x:00008FF4                 ;org 8FF4h
.text$x:00008FF4 ; COMDAT (pick associative to section at 8FA0)
.text$x:00008FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008FF4
.text$x:00008FF4 ; =============== S U B R O U T I N E =======================================
.text$x:00008FF4
.text$x:00008FF4
.text$x:00008FF4 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008FF4                                         ; DATA XREF: .xdata$x:00010044o
.text$x:00008FF4                 mov     ecx, [ebp-10h]
.text$x:00008FF7                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00008FF7 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:00008FF7
.text$x:00008FFC
.text$x:00008FFC ; =============== S U B R O U T I N E =======================================
.text$x:00008FFC
.text$x:00008FFC
.text$x:00008FFC __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:00008FFC                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00008FFC
.text$x:00008FFC arg_4           = dword ptr  8
.text$x:00008FFC
.text$x:00008FFC                 mov     edx, [esp+arg_4]
.text$x:00009000                 lea     eax, [edx+0Ch]
.text$x:00009003                 mov     ecx, [edx-8]
.text$x:00009006                 xor     ecx, eax
.text$x:00009008                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000900D                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:00009012                 jmp     ___CxxFrameHandler3
.text$x:00009012 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:00009012
.text$x:00009012 ; ---------------------------------------------------------------------------
.text$x:00009017                 align 4
.text$x:00009017 _text$x         ends
.text$x:00009017
.text$mn:00009018 ; ===========================================================================
.text$mn:00009018
.text$mn:00009018 ; Segment type: Pure code
.text$mn:00009018 ; Segment permissions: Read/Execute
.text$mn:00009018 _text$mn        segment para public 'CODE' use32
.text$mn:00009018                 assume cs:_text$mn
.text$mn:00009018                 ;org 9018h
.text$mn:00009018 ; COMDAT (pick any)
.text$mn:00009018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009018
.text$mn:00009018 ; =============== S U B R O U T I N E =======================================
.text$mn:00009018
.text$mn:00009018 ; Attributes: bp-based frame
.text$mn:00009018
.text$mn:00009018 ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>(void)
.text$mn:00009018                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009018 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00009018                                         ; CODE XREF: __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$2+3j
.text$mn:00009018                                         ; __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$6+3j ...
.text$mn:00009018
.text$mn:00009018 var_10          = dword ptr -10h
.text$mn:00009018 var_C           = dword ptr -0Ch
.text$mn:00009018 var_4           = dword ptr -4
.text$mn:00009018
.text$mn:00009018                 push    ebp
.text$mn:00009019                 mov     ebp, esp
.text$mn:0000901B                 push    0FFFFFFFFh
.text$mn:0000901D                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009022                 mov     eax, large fs:0
.text$mn:00009028                 push    eax
.text$mn:00009029                 push    ecx
.text$mn:0000902A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000902F                 xor     eax, ebp
.text$mn:00009031                 push    eax
.text$mn:00009032                 lea     eax, [ebp+var_C]
.text$mn:00009035                 mov     large fs:0, eax
.text$mn:0000903B                 mov     [ebp+var_10], ecx
.text$mn:0000903E                 mov     [ebp+var_4], 0
.text$mn:00009045                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000904C                 mov     ecx, [ebp+var_10]
.text$mn:0000904F                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)
.text$mn:00009054                 mov     ecx, [ebp+var_C]
.text$mn:00009057                 mov     large fs:0, ecx
.text$mn:0000905E                 pop     ecx
.text$mn:0000905F                 mov     esp, ebp
.text$mn:00009061                 pop     ebp
.text$mn:00009062                 retn
.text$mn:00009062 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00009062
.text$mn:00009062 ; ---------------------------------------------------------------------------
.text$mn:00009063                 align 4
.text$mn:00009063 _text$mn        ends
.text$mn:00009063
.text$x:00009064 ; ===========================================================================
.text$x:00009064
.text$x:00009064 ; Segment type: Pure code
.text$x:00009064 ; Segment permissions: Read/Execute
.text$x:00009064 _text$x         segment para public 'CODE' use32
.text$x:00009064                 assume cs:_text$x
.text$x:00009064                 ;org 9064h
.text$x:00009064 ; COMDAT (pick associative to section at 9018)
.text$x:00009064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009064
.text$x:00009064 ; =============== S U B R O U T I N E =======================================
.text$x:00009064
.text$x:00009064
.text$x:00009064 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00009064                                         ; DATA XREF: .xdata$x:0001098Co
.text$x:00009064                 mov     ecx, [ebp-10h]
.text$x:00009067                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,MatchedCharInserted,int,MatchedCharInserted const *,MatchedCharInserted const &,std::_Iterator_base12>(void)
.text$x:00009067 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00009067
.text$x:0000906C
.text$x:0000906C ; =============== S U B R O U T I N E =======================================
.text$x:0000906C
.text$x:0000906C
.text$x:0000906C __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000906C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)+5o
.text$x:0000906C
.text$x:0000906C arg_4           = dword ptr  8
.text$x:0000906C
.text$x:0000906C                 mov     edx, [esp+arg_4]
.text$x:00009070                 lea     eax, [edx+0Ch]
.text$x:00009073                 mov     ecx, [edx-8]
.text$x:00009076                 xor     ecx, eax
.text$x:00009078                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000907D                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$x:00009082                 jmp     ___CxxFrameHandler3
.text$x:00009082 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00009082
.text$x:00009082 ; ---------------------------------------------------------------------------
.text$x:00009087                 align 4
.text$x:00009087 _text$x         ends
.text$x:00009087
.text$mn:00009088 ; ===========================================================================
.text$mn:00009088
.text$mn:00009088 ; Segment type: Pure code
.text$mn:00009088 ; Segment permissions: Read/Execute
.text$mn:00009088 _text$mn        segment para public 'CODE' use32
.text$mn:00009088                 assume cs:_text$mn
.text$mn:00009088                 ;org 9088h
.text$mn:00009088 ; COMDAT (pick any)
.text$mn:00009088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009088
.text$mn:00009088 ; =============== S U B R O U T I N E =======================================
.text$mn:00009088
.text$mn:00009088 ; Attributes: bp-based frame
.text$mn:00009088
.text$mn:00009088 ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00009088                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009088 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00009088                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00009088                                         ; __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:00009088
.text$mn:00009088 var_10          = dword ptr -10h
.text$mn:00009088 var_C           = dword ptr -0Ch
.text$mn:00009088 var_4           = dword ptr -4
.text$mn:00009088
.text$mn:00009088                 push    ebp
.text$mn:00009089                 mov     ebp, esp
.text$mn:0000908B                 push    0FFFFFFFFh
.text$mn:0000908D                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009092                 mov     eax, large fs:0
.text$mn:00009098                 push    eax
.text$mn:00009099                 push    ecx
.text$mn:0000909A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000909F                 xor     eax, ebp
.text$mn:000090A1                 push    eax
.text$mn:000090A2                 lea     eax, [ebp+var_C]
.text$mn:000090A5                 mov     large fs:0, eax
.text$mn:000090AB                 mov     [ebp+var_10], ecx
.text$mn:000090AE                 mov     [ebp+var_4], 0
.text$mn:000090B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000090BC                 mov     ecx, [ebp+var_10]
.text$mn:000090BF                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:000090C4                 mov     ecx, [ebp+var_C]
.text$mn:000090C7                 mov     large fs:0, ecx
.text$mn:000090CE                 pop     ecx
.text$mn:000090CF                 mov     esp, ebp
.text$mn:000090D1                 pop     ebp
.text$mn:000090D2                 retn
.text$mn:000090D2 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:000090D2
.text$mn:000090D2 ; ---------------------------------------------------------------------------
.text$mn:000090D3                 align 4
.text$mn:000090D3 _text$mn        ends
.text$mn:000090D3
.text$x:000090D4 ; ===========================================================================
.text$x:000090D4
.text$x:000090D4 ; Segment type: Pure code
.text$x:000090D4 ; Segment permissions: Read/Execute
.text$x:000090D4 _text$x         segment para public 'CODE' use32
.text$x:000090D4                 assume cs:_text$x
.text$x:000090D4                 ;org 90D4h
.text$x:000090D4 ; COMDAT (pick associative to section at 9088)
.text$x:000090D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090D4
.text$x:000090D4 ; =============== S U B R O U T I N E =======================================
.text$x:000090D4
.text$x:000090D4
.text$x:000090D4 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000090D4                                         ; DATA XREF: .xdata$x:00010788o
.text$x:000090D4                 mov     ecx, [ebp-10h]
.text$x:000090D7                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:000090D7 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000090D7
.text$x:000090DC
.text$x:000090DC ; =============== S U B R O U T I N E =======================================
.text$x:000090DC
.text$x:000090DC
.text$x:000090DC __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000090DC                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000090DC
.text$x:000090DC arg_4           = dword ptr  8
.text$x:000090DC
.text$x:000090DC                 mov     edx, [esp+arg_4]
.text$x:000090E0                 lea     eax, [edx+0Ch]
.text$x:000090E3                 mov     ecx, [edx-8]
.text$x:000090E6                 xor     ecx, eax
.text$x:000090E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000090ED                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:000090F2                 jmp     ___CxxFrameHandler3
.text$x:000090F2 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:000090F2
.text$x:000090F2 ; ---------------------------------------------------------------------------
.text$x:000090F7                 align 4
.text$x:000090F7 _text$x         ends
.text$x:000090F7
.text$mn:000090F8 ; ===========================================================================
.text$mn:000090F8
.text$mn:000090F8 ; Segment type: Pure code
.text$mn:000090F8 ; Segment permissions: Read/Execute
.text$mn:000090F8 _text$mn        segment para public 'CODE' use32
.text$mn:000090F8                 assume cs:_text$mn
.text$mn:000090F8                 ;org 90F8h
.text$mn:000090F8 ; COMDAT (pick any)
.text$mn:000090F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090F8
.text$mn:000090F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090F8
.text$mn:000090F8 ; Attributes: bp-based frame
.text$mn:000090F8
.text$mn:000090F8 ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>(void)
.text$mn:000090F8                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$mn:000090F8 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000090F8                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+13Fp
.text$mn:000090F8                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+14Bp ...
.text$mn:000090F8
.text$mn:000090F8 var_10          = dword ptr -10h
.text$mn:000090F8 var_C           = dword ptr -0Ch
.text$mn:000090F8 var_4           = dword ptr -4
.text$mn:000090F8
.text$mn:000090F8                 push    ebp
.text$mn:000090F9                 mov     ebp, esp
.text$mn:000090FB                 push    0FFFFFFFFh
.text$mn:000090FD                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009102                 mov     eax, large fs:0
.text$mn:00009108                 push    eax
.text$mn:00009109                 push    ecx
.text$mn:0000910A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000910F                 xor     eax, ebp
.text$mn:00009111                 push    eax
.text$mn:00009112                 lea     eax, [ebp+var_C]
.text$mn:00009115                 mov     large fs:0, eax
.text$mn:0000911B                 mov     [ebp+var_10], ecx
.text$mn:0000911E                 mov     [ebp+var_4], 0
.text$mn:00009125                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000912C                 mov     ecx, [ebp+var_10]
.text$mn:0000912F                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:00009134                 mov     ecx, [ebp+var_C]
.text$mn:00009137                 mov     large fs:0, ecx
.text$mn:0000913E                 pop     ecx
.text$mn:0000913F                 mov     esp, ebp
.text$mn:00009141                 pop     ebp
.text$mn:00009142                 retn
.text$mn:00009142 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00009142
.text$mn:00009142 ; ---------------------------------------------------------------------------
.text$mn:00009143                 align 4
.text$mn:00009143 _text$mn        ends
.text$mn:00009143
.text$x:00009144 ; ===========================================================================
.text$x:00009144
.text$x:00009144 ; Segment type: Pure code
.text$x:00009144 ; Segment permissions: Read/Execute
.text$x:00009144 _text$x         segment para public 'CODE' use32
.text$x:00009144                 assume cs:_text$x
.text$x:00009144                 ;org 9144h
.text$x:00009144 ; COMDAT (pick associative to section at 90F8)
.text$x:00009144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009144
.text$x:00009144 ; =============== S U B R O U T I N E =======================================
.text$x:00009144
.text$x:00009144
.text$x:00009144 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00009144                                         ; DATA XREF: .xdata$x:00010A44o
.text$x:00009144                 mov     ecx, [ebp-10h]
.text$x:00009147                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:00009147 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00009147
.text$x:0000914C
.text$x:0000914C ; =============== S U B R O U T I N E =======================================
.text$x:0000914C
.text$x:0000914C
.text$x:0000914C __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000914C                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)+5o
.text$x:0000914C
.text$x:0000914C arg_4           = dword ptr  8
.text$x:0000914C
.text$x:0000914C                 mov     edx, [esp+arg_4]
.text$x:00009150                 lea     eax, [edx+0Ch]
.text$x:00009153                 mov     ecx, [edx-8]
.text$x:00009156                 xor     ecx, eax
.text$x:00009158                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000915D                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.text$x:00009162                 jmp     ___CxxFrameHandler3
.text$x:00009162 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00009162
.text$x:00009162 ; ---------------------------------------------------------------------------
.text$x:00009167                 align 4
.text$x:00009167 _text$x         ends
.text$x:00009167
.text$mn:00009168 ; ===========================================================================
.text$mn:00009168
.text$mn:00009168 ; Segment type: Pure code
.text$mn:00009168 ; Segment permissions: Read/Execute
.text$mn:00009168 _text$mn        segment para public 'CODE' use32
.text$mn:00009168                 assume cs:_text$mn
.text$mn:00009168                 ;org 9168h
.text$mn:00009168 ; COMDAT (pick any)
.text$mn:00009168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009168
.text$mn:00009168 ; =============== S U B R O U T I N E =======================================
.text$mn:00009168
.text$mn:00009168 ; Attributes: bp-based frame
.text$mn:00009168
.text$mn:00009168 ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00009168                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009168 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00009168                                         ; CODE XREF: __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$2+6j
.text$mn:00009168                                         ; __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$3+6j ...
.text$mn:00009168
.text$mn:00009168 var_10          = dword ptr -10h
.text$mn:00009168 var_C           = dword ptr -0Ch
.text$mn:00009168 var_4           = dword ptr -4
.text$mn:00009168
.text$mn:00009168                 push    ebp
.text$mn:00009169                 mov     ebp, esp
.text$mn:0000916B                 push    0FFFFFFFFh
.text$mn:0000916D                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00009172                 mov     eax, large fs:0
.text$mn:00009178                 push    eax
.text$mn:00009179                 push    ecx
.text$mn:0000917A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000917F                 xor     eax, ebp
.text$mn:00009181                 push    eax
.text$mn:00009182                 lea     eax, [ebp+var_C]
.text$mn:00009185                 mov     large fs:0, eax
.text$mn:0000918B                 mov     [ebp+var_10], ecx
.text$mn:0000918E                 mov     [ebp+var_4], 0
.text$mn:00009195                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000919C                 mov     ecx, [ebp+var_10]
.text$mn:0000919F                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:000091A4                 mov     ecx, [ebp+var_C]
.text$mn:000091A7                 mov     large fs:0, ecx
.text$mn:000091AE                 pop     ecx
.text$mn:000091AF                 mov     esp, ebp
.text$mn:000091B1                 pop     ebp
.text$mn:000091B2                 retn
.text$mn:000091B2 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:000091B2
.text$mn:000091B2 ; ---------------------------------------------------------------------------
.text$mn:000091B3                 align 4
.text$mn:000091B3 _text$mn        ends
.text$mn:000091B3
.text$x:000091B4 ; ===========================================================================
.text$x:000091B4
.text$x:000091B4 ; Segment type: Pure code
.text$x:000091B4 ; Segment permissions: Read/Execute
.text$x:000091B4 _text$x         segment para public 'CODE' use32
.text$x:000091B4                 assume cs:_text$x
.text$x:000091B4                 ;org 91B4h
.text$x:000091B4 ; COMDAT (pick associative to section at 9168)
.text$x:000091B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000091B4
.text$x:000091B4 ; =============== S U B R O U T I N E =======================================
.text$x:000091B4
.text$x:000091B4
.text$x:000091B4 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000091B4                                         ; DATA XREF: .xdata$x:0001080Co
.text$x:000091B4                 mov     ecx, [ebp-10h]
.text$x:000091B7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000091B7 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000091B7
.text$x:000091BC
.text$x:000091BC ; =============== S U B R O U T I N E =======================================
.text$x:000091BC
.text$x:000091BC
.text$x:000091BC __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000091BC                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000091BC
.text$x:000091BC arg_4           = dword ptr  8
.text$x:000091BC
.text$x:000091BC                 mov     edx, [esp+arg_4]
.text$x:000091C0                 lea     eax, [edx+0Ch]
.text$x:000091C3                 mov     ecx, [edx-8]
.text$x:000091C6                 xor     ecx, eax
.text$x:000091C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000091CD                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:000091D2                 jmp     ___CxxFrameHandler3
.text$x:000091D2 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:000091D2
.text$x:000091D2 ; ---------------------------------------------------------------------------
.text$x:000091D7                 align 4
.text$x:000091D7 _text$x         ends
.text$x:000091D7
.text$mn:000091D8 ; ===========================================================================
.text$mn:000091D8
.text$mn:000091D8 ; Segment type: Pure code
.text$mn:000091D8 ; Segment permissions: Read/Execute
.text$mn:000091D8 _text$mn        segment para public 'CODE' use32
.text$mn:000091D8                 assume cs:_text$mn
.text$mn:000091D8                 ;org 91D8h
.text$mn:000091D8 ; COMDAT (pick any)
.text$mn:000091D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091D8
.text$mn:000091D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000091D8
.text$mn:000091D8 ; Attributes: bp-based frame
.text$mn:000091D8
.text$mn:000091D8 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000091D8                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:000091D8 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000091D8                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:000091D8                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:000091D8
.text$mn:000091D8 var_10          = dword ptr -10h
.text$mn:000091D8 var_C           = dword ptr -0Ch
.text$mn:000091D8 var_4           = dword ptr -4
.text$mn:000091D8
.text$mn:000091D8                 push    ebp
.text$mn:000091D9                 mov     ebp, esp
.text$mn:000091DB                 push    0FFFFFFFFh
.text$mn:000091DD                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:000091E2                 mov     eax, large fs:0
.text$mn:000091E8                 push    eax
.text$mn:000091E9                 push    ecx
.text$mn:000091EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000091EF                 xor     eax, ebp
.text$mn:000091F1                 push    eax
.text$mn:000091F2                 lea     eax, [ebp+var_C]
.text$mn:000091F5                 mov     large fs:0, eax
.text$mn:000091FB                 mov     [ebp+var_10], ecx
.text$mn:000091FE                 mov     [ebp+var_4], 0
.text$mn:00009205                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000920C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000920F                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00009214                 mov     ecx, [ebp+var_C]
.text$mn:00009217                 mov     large fs:0, ecx
.text$mn:0000921E                 pop     ecx
.text$mn:0000921F                 mov     esp, ebp
.text$mn:00009221                 pop     ebp
.text$mn:00009222                 retn
.text$mn:00009222 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00009222
.text$mn:00009222 ; ---------------------------------------------------------------------------
.text$mn:00009223                 align 4
.text$mn:00009223 _text$mn        ends
.text$mn:00009223
.text$x:00009224 ; ===========================================================================
.text$x:00009224
.text$x:00009224 ; Segment type: Pure code
.text$x:00009224 ; Segment permissions: Read/Execute
.text$x:00009224 _text$x         segment para public 'CODE' use32
.text$x:00009224                 assume cs:_text$x
.text$x:00009224                 ;org 9224h
.text$x:00009224 ; COMDAT (pick associative to section at 91D8)
.text$x:00009224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009224
.text$x:00009224 ; =============== S U B R O U T I N E =======================================
.text$x:00009224
.text$x:00009224
.text$x:00009224 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00009224                                         ; DATA XREF: .xdata$x:0000FFECo
.text$x:00009224                 mov     ecx, [ebp-10h]  ; this
.text$x:00009227                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00009227 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00009227
.text$x:0000922C
.text$x:0000922C ; =============== S U B R O U T I N E =======================================
.text$x:0000922C
.text$x:0000922C
.text$x:0000922C __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000922C                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:0000922C
.text$x:0000922C arg_4           = dword ptr  8
.text$x:0000922C
.text$x:0000922C                 mov     edx, [esp+arg_4]
.text$x:00009230                 lea     eax, [edx+0Ch]
.text$x:00009233                 mov     ecx, [edx-8]
.text$x:00009236                 xor     ecx, eax
.text$x:00009238                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000923D                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00009242                 jmp     ___CxxFrameHandler3
.text$x:00009242 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00009242
.text$x:00009242 ; ---------------------------------------------------------------------------
.text$x:00009247                 align 4
.text$x:00009247 _text$x         ends
.text$x:00009247
.text$mn:00009248 ; ===========================================================================
.text$mn:00009248
.text$mn:00009248 ; Segment type: Pure code
.text$mn:00009248 ; Segment permissions: Read/Execute
.text$mn:00009248 _text$mn        segment para public 'CODE' use32
.text$mn:00009248                 assume cs:_text$mn
.text$mn:00009248                 ;org 9248h
.text$mn:00009248 ; COMDAT (pick any)
.text$mn:00009248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009248
.text$mn:00009248 ; =============== S U B R O U T I N E =======================================
.text$mn:00009248
.text$mn:00009248 ; Attributes: bp-based frame
.text$mn:00009248
.text$mn:00009248 ; public: __thiscall std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00009248                 public ??1?$_Yarn@D@std@@QAE@XZ
.text$mn:00009248 ??1?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1+6j
.text$mn:00009248                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2+6j ...
.text$mn:00009248
.text$mn:00009248 var_4           = dword ptr -4
.text$mn:00009248
.text$mn:00009248                 push    ebp
.text$mn:00009249                 mov     ebp, esp
.text$mn:0000924B                 push    ecx
.text$mn:0000924C                 mov     [ebp+var_4], ecx
.text$mn:0000924F                 mov     ecx, [ebp+var_4]
.text$mn:00009252                 call    ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy(void)
.text$mn:00009257                 mov     esp, ebp
.text$mn:00009259                 pop     ebp
.text$mn:0000925A                 retn
.text$mn:0000925A ??1?$_Yarn@D@std@@QAE@XZ endp
.text$mn:0000925A
.text$mn:0000925A ; ---------------------------------------------------------------------------
.text$mn:0000925B                 align 4
.text$mn:0000925B _text$mn        ends
.text$mn:0000925B
.text$mn:0000925C ; ===========================================================================
.text$mn:0000925C
.text$mn:0000925C ; Segment type: Pure code
.text$mn:0000925C ; Segment permissions: Read/Execute
.text$mn:0000925C _text$mn        segment para public 'CODE' use32
.text$mn:0000925C                 assume cs:_text$mn
.text$mn:0000925C                 ;org 925Ch
.text$mn:0000925C ; COMDAT (pick any)
.text$mn:0000925C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000925C
.text$mn:0000925C ; =============== S U B R O U T I N E =======================================
.text$mn:0000925C
.text$mn:0000925C ; Attributes: bp-based frame
.text$mn:0000925C
.text$mn:0000925C ; public: __thiscall std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:0000925C                 public ??1?$_Yarn@_W@std@@QAE@XZ
.text$mn:0000925C ??1?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3+6j
.text$mn:0000925C                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4+6j ...
.text$mn:0000925C
.text$mn:0000925C var_4           = dword ptr -4
.text$mn:0000925C
.text$mn:0000925C                 push    ebp
.text$mn:0000925D                 mov     ebp, esp
.text$mn:0000925F                 push    ecx
.text$mn:00009260                 mov     [ebp+var_4], ecx
.text$mn:00009263                 mov     ecx, [ebp+var_4]
.text$mn:00009266                 call    ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:0000926B                 mov     esp, ebp
.text$mn:0000926D                 pop     ebp
.text$mn:0000926E                 retn
.text$mn:0000926E ??1?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:0000926E
.text$mn:0000926E ; ---------------------------------------------------------------------------
.text$mn:0000926F                 align 10h
.text$mn:0000926F _text$mn        ends
.text$mn:0000926F
.text$mn:00009270 ; ===========================================================================
.text$mn:00009270
.text$mn:00009270 ; Segment type: Pure code
.text$mn:00009270 ; Segment permissions: Read/Execute
.text$mn:00009270 _text$mn        segment para public 'CODE' use32
.text$mn:00009270                 assume cs:_text$mn
.text$mn:00009270                 ;org 9270h
.text$mn:00009270 ; COMDAT (pick any)
.text$mn:00009270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009270
.text$mn:00009270 ; =============== S U B R O U T I N E =======================================
.text$mn:00009270
.text$mn:00009270 ; Attributes: bp-based frame
.text$mn:00009270
.text$mn:00009270 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00009270                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00009270 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00009270                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:00009270                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:00009270
.text$mn:00009270 var_10          = dword ptr -10h
.text$mn:00009270 var_C           = dword ptr -0Ch
.text$mn:00009270 var_4           = dword ptr -4
.text$mn:00009270
.text$mn:00009270                 push    ebp
.text$mn:00009271                 mov     ebp, esp
.text$mn:00009273                 push    0FFFFFFFFh
.text$mn:00009275                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000927A                 mov     eax, large fs:0
.text$mn:00009280                 push    eax
.text$mn:00009281                 push    ecx
.text$mn:00009282                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009287                 xor     eax, ebp
.text$mn:00009289                 push    eax
.text$mn:0000928A                 lea     eax, [ebp+var_C]
.text$mn:0000928D                 mov     large fs:0, eax
.text$mn:00009293                 mov     [ebp+var_10], ecx
.text$mn:00009296                 mov     [ebp+var_4], 0
.text$mn:0000929D                 push    0               ; Size
.text$mn:0000929F                 push    1               ; char
.text$mn:000092A1                 mov     ecx, [ebp+var_10]
.text$mn:000092A4                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000092A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000092B0                 mov     ecx, [ebp+var_10]
.text$mn:000092B3                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000092B8                 mov     ecx, [ebp+var_C]
.text$mn:000092BB                 mov     large fs:0, ecx
.text$mn:000092C2                 pop     ecx
.text$mn:000092C3                 mov     esp, ebp
.text$mn:000092C5                 pop     ebp
.text$mn:000092C6                 retn
.text$mn:000092C6 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000092C6
.text$mn:000092C6 ; ---------------------------------------------------------------------------
.text$mn:000092C7                 align 4
.text$mn:000092C7 _text$mn        ends
.text$mn:000092C7
.text$x:000092C8 ; ===========================================================================
.text$x:000092C8
.text$x:000092C8 ; Segment type: Pure code
.text$x:000092C8 ; Segment permissions: Read/Execute
.text$x:000092C8 _text$x         segment para public 'CODE' use32
.text$x:000092C8                 assume cs:_text$x
.text$x:000092C8                 ;org 92C8h
.text$x:000092C8 ; COMDAT (pick associative to section at 9270)
.text$x:000092C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000092C8
.text$x:000092C8 ; =============== S U B R O U T I N E =======================================
.text$x:000092C8
.text$x:000092C8
.text$x:000092C8 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000092C8                                         ; DATA XREF: .xdata$x:0000F688o
.text$x:000092C8                 mov     ecx, [ebp-10h]
.text$x:000092CB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000092CB __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000092CB
.text$x:000092D0
.text$x:000092D0 ; =============== S U B R O U T I N E =======================================
.text$x:000092D0
.text$x:000092D0
.text$x:000092D0 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:000092D0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:000092D0
.text$x:000092D0 arg_4           = dword ptr  8
.text$x:000092D0
.text$x:000092D0                 mov     edx, [esp+arg_4]
.text$x:000092D4                 lea     eax, [edx+0Ch]
.text$x:000092D7                 mov     ecx, [edx-8]
.text$x:000092DA                 xor     ecx, eax
.text$x:000092DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000092E1                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:000092E6                 jmp     ___CxxFrameHandler3
.text$x:000092E6 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:000092E6
.text$x:000092E6 ; ---------------------------------------------------------------------------
.text$x:000092EB                 align 4
.text$x:000092EB _text$x         ends
.text$x:000092EB
.text$mn:000092EC ; ===========================================================================
.text$mn:000092EC
.text$mn:000092EC ; Segment type: Pure code
.text$mn:000092EC ; Segment permissions: Read/Execute
.text$mn:000092EC _text$mn        segment para public 'CODE' use32
.text$mn:000092EC                 assume cs:_text$mn
.text$mn:000092EC                 ;org 92ECh
.text$mn:000092EC ; COMDAT (pick any)
.text$mn:000092EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092EC
.text$mn:000092EC ; =============== S U B R O U T I N E =======================================
.text$mn:000092EC
.text$mn:000092EC ; Attributes: bp-based frame
.text$mn:000092EC
.text$mn:000092EC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000092EC                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000092EC ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000092EC                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+601p
.text$mn:000092EC                                         ; AutoCompletion::showWordComplete(bool)+376p ...
.text$mn:000092EC
.text$mn:000092EC var_10          = dword ptr -10h
.text$mn:000092EC var_C           = dword ptr -0Ch
.text$mn:000092EC var_4           = dword ptr -4
.text$mn:000092EC
.text$mn:000092EC                 push    ebp
.text$mn:000092ED                 mov     ebp, esp
.text$mn:000092EF                 push    0FFFFFFFFh
.text$mn:000092F1                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000092F6                 mov     eax, large fs:0
.text$mn:000092FC                 push    eax
.text$mn:000092FD                 push    ecx
.text$mn:000092FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009303                 xor     eax, ebp
.text$mn:00009305                 push    eax
.text$mn:00009306                 lea     eax, [ebp+var_C]
.text$mn:00009309                 mov     large fs:0, eax
.text$mn:0000930F                 mov     [ebp+var_10], ecx
.text$mn:00009312                 mov     [ebp+var_4], 0
.text$mn:00009319                 push    0
.text$mn:0000931B                 push    1
.text$mn:0000931D                 mov     ecx, [ebp+var_10]
.text$mn:00009320                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009325                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000932C                 mov     ecx, [ebp+var_10]
.text$mn:0000932F                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00009334                 mov     ecx, [ebp+var_C]
.text$mn:00009337                 mov     large fs:0, ecx
.text$mn:0000933E                 pop     ecx
.text$mn:0000933F                 mov     esp, ebp
.text$mn:00009341                 pop     ebp
.text$mn:00009342                 retn
.text$mn:00009342 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00009342
.text$mn:00009342 ; ---------------------------------------------------------------------------
.text$mn:00009343                 align 4
.text$mn:00009343 _text$mn        ends
.text$mn:00009343
.text$x:00009344 ; ===========================================================================
.text$x:00009344
.text$x:00009344 ; Segment type: Pure code
.text$x:00009344 ; Segment permissions: Read/Execute
.text$x:00009344 _text$x         segment para public 'CODE' use32
.text$x:00009344                 assume cs:_text$x
.text$x:00009344                 ;org 9344h
.text$x:00009344 ; COMDAT (pick associative to section at 92EC)
.text$x:00009344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009344
.text$x:00009344 ; =============== S U B R O U T I N E =======================================
.text$x:00009344
.text$x:00009344
.text$x:00009344 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00009344                                         ; DATA XREF: .xdata$x:0000FD64o
.text$x:00009344                 mov     ecx, [ebp-10h]
.text$x:00009347                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00009347 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00009347
.text$x:0000934C
.text$x:0000934C ; =============== S U B R O U T I N E =======================================
.text$x:0000934C
.text$x:0000934C
.text$x:0000934C __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:0000934C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:0000934C
.text$x:0000934C arg_4           = dword ptr  8
.text$x:0000934C
.text$x:0000934C                 mov     edx, [esp+arg_4]
.text$x:00009350                 lea     eax, [edx+0Ch]
.text$x:00009353                 mov     ecx, [edx-8]
.text$x:00009356                 xor     ecx, eax
.text$x:00009358                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000935D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00009362                 jmp     ___CxxFrameHandler3
.text$x:00009362 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00009362
.text$x:00009362 ; ---------------------------------------------------------------------------
.text$x:00009367                 align 4
.text$x:00009367 _text$x         ends
.text$x:00009367
.text$mn:00009368 ; ===========================================================================
.text$mn:00009368
.text$mn:00009368 ; Segment type: Pure code
.text$mn:00009368 ; Segment permissions: Read/Execute
.text$mn:00009368 _text$mn        segment para public 'CODE' use32
.text$mn:00009368                 assume cs:_text$mn
.text$mn:00009368                 ;org 9368h
.text$mn:00009368 ; COMDAT (pick any)
.text$mn:00009368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009368
.text$mn:00009368 ; =============== S U B R O U T I N E =======================================
.text$mn:00009368
.text$mn:00009368 ; Attributes: bp-based frame
.text$mn:00009368
.text$mn:00009368 ; protected: virtual __thiscall std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:00009368                 public ??1?$ctype@_W@std@@MAE@XZ
.text$mn:00009368 ??1?$ctype@_W@std@@MAE@XZ proc near     ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+Ap
.text$mn:00009368
.text$mn:00009368 var_10          = dword ptr -10h
.text$mn:00009368 var_C           = dword ptr -0Ch
.text$mn:00009368 var_4           = dword ptr -4
.text$mn:00009368
.text$mn:00009368                 push    ebp
.text$mn:00009369                 mov     ebp, esp
.text$mn:0000936B                 push    0FFFFFFFFh
.text$mn:0000936D                 push    offset __ehhandler$??1?$ctype@_W@std@@MAE@XZ
.text$mn:00009372                 mov     eax, large fs:0
.text$mn:00009378                 push    eax
.text$mn:00009379                 push    ecx
.text$mn:0000937A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000937F                 xor     eax, ebp
.text$mn:00009381                 push    eax
.text$mn:00009382                 lea     eax, [ebp+var_C]
.text$mn:00009385                 mov     large fs:0, eax
.text$mn:0000938B                 mov     [ebp+var_10], ecx
.text$mn:0000938E                 mov     eax, [ebp+var_10]
.text$mn:00009391                 mov     dword ptr [eax], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:00009397                 mov     [ebp+var_4], 0
.text$mn:0000939E                 mov     ecx, [ebp+var_10]
.text$mn:000093A1                 cmp     dword ptr [ecx+10h], 0
.text$mn:000093A5                 jz      short loc_93B6
.text$mn:000093A7                 mov     edx, [ebp+var_10]
.text$mn:000093AA                 mov     eax, [edx+0Ch]
.text$mn:000093AD                 push    eax             ; Memory
.text$mn:000093AE                 call    _free
.text$mn:000093B3                 add     esp, 4
.text$mn:000093B6
.text$mn:000093B6 loc_93B6:                               ; CODE XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+3Dj
.text$mn:000093B6                 mov     ecx, [ebp+var_10]
.text$mn:000093B9                 mov     edx, [ecx+14h]
.text$mn:000093BC                 push    edx             ; Memory
.text$mn:000093BD                 call    _free
.text$mn:000093C2                 add     esp, 4
.text$mn:000093C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000093CC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000093CF                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:000093D4                 mov     ecx, [ebp+var_C]
.text$mn:000093D7                 mov     large fs:0, ecx
.text$mn:000093DE                 pop     ecx
.text$mn:000093DF                 mov     esp, ebp
.text$mn:000093E1                 pop     ebp
.text$mn:000093E2                 retn
.text$mn:000093E2 ??1?$ctype@_W@std@@MAE@XZ endp
.text$mn:000093E2
.text$mn:000093E2 ; ---------------------------------------------------------------------------
.text$mn:000093E3                 align 4
.text$mn:000093E3 _text$mn        ends
.text$mn:000093E3
.text$x:000093E4 ; ===========================================================================
.text$x:000093E4
.text$x:000093E4 ; Segment type: Pure code
.text$x:000093E4 ; Segment permissions: Read/Execute
.text$x:000093E4 _text$x         segment para public 'CODE' use32
.text$x:000093E4                 assume cs:_text$x
.text$x:000093E4                 ;org 93E4h
.text$x:000093E4 ; COMDAT (pick associative to section at 9368)
.text$x:000093E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000093E4
.text$x:000093E4 ; =============== S U B R O U T I N E =======================================
.text$x:000093E4
.text$x:000093E4
.text$x:000093E4 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 proc near
.text$x:000093E4                                         ; DATA XREF: .xdata$x:0000F9C0o
.text$x:000093E4                 mov     ecx, [ebp-10h]  ; this
.text$x:000093E7                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:000093E7 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 endp
.text$x:000093E7
.text$x:000093EC
.text$x:000093EC ; =============== S U B R O U T I N E =======================================
.text$x:000093EC
.text$x:000093EC
.text$x:000093EC __ehhandler$??1?$ctype@_W@std@@MAE@XZ proc near
.text$x:000093EC                                         ; DATA XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+5o
.text$x:000093EC
.text$x:000093EC arg_4           = dword ptr  8
.text$x:000093EC
.text$x:000093EC                 mov     edx, [esp+arg_4]
.text$x:000093F0                 lea     eax, [edx+0Ch]
.text$x:000093F3                 mov     ecx, [edx-8]
.text$x:000093F6                 xor     ecx, eax
.text$x:000093F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000093FD                 mov     eax, offset __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ
.text$x:00009402                 jmp     ___CxxFrameHandler3
.text$x:00009402 __ehhandler$??1?$ctype@_W@std@@MAE@XZ endp
.text$x:00009402
.text$x:00009402 ; ---------------------------------------------------------------------------
.text$x:00009407                 align 4
.text$x:00009407 _text$x         ends
.text$x:00009407
.text$mn:00009408 ; ===========================================================================
.text$mn:00009408
.text$mn:00009408 ; Segment type: Pure code
.text$mn:00009408 ; Segment permissions: Read/Execute
.text$mn:00009408 _text$mn        segment para public 'CODE' use32
.text$mn:00009408                 assume cs:_text$mn
.text$mn:00009408                 ;org 9408h
.text$mn:00009408 ; COMDAT (pick any)
.text$mn:00009408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009408
.text$mn:00009408 ; =============== S U B R O U T I N E =======================================
.text$mn:00009408
.text$mn:00009408 ; Attributes: bp-based frame
.text$mn:00009408
.text$mn:00009408 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00009408                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00009408 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00009408                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+158p
.text$mn:00009408                                         ; AutoCompletion::showWordComplete(bool)+1FDp ...
.text$mn:00009408
.text$mn:00009408 var_10          = dword ptr -10h
.text$mn:00009408 var_C           = dword ptr -0Ch
.text$mn:00009408 var_4           = dword ptr -4
.text$mn:00009408
.text$mn:00009408                 push    ebp
.text$mn:00009409                 mov     ebp, esp
.text$mn:0000940B                 push    0FFFFFFFFh
.text$mn:0000940D                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00009412                 mov     eax, large fs:0
.text$mn:00009418                 push    eax
.text$mn:00009419                 push    ecx
.text$mn:0000941A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000941F                 xor     eax, ebp
.text$mn:00009421                 push    eax
.text$mn:00009422                 lea     eax, [ebp+var_C]
.text$mn:00009425                 mov     large fs:0, eax
.text$mn:0000942B                 mov     [ebp+var_10], ecx
.text$mn:0000942E                 mov     [ebp+var_4], 0
.text$mn:00009435                 mov     ecx, [ebp+var_10]
.text$mn:00009438                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000943D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009444                 mov     ecx, [ebp+var_10]
.text$mn:00009447                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000944C                 mov     ecx, [ebp+var_C]
.text$mn:0000944F                 mov     large fs:0, ecx
.text$mn:00009456                 pop     ecx
.text$mn:00009457                 mov     esp, ebp
.text$mn:00009459                 pop     ebp
.text$mn:0000945A                 retn
.text$mn:0000945A ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:0000945A
.text$mn:0000945A ; ---------------------------------------------------------------------------
.text$mn:0000945B                 align 4
.text$mn:0000945B _text$mn        ends
.text$mn:0000945B
.text$x:0000945C ; ===========================================================================
.text$x:0000945C
.text$x:0000945C ; Segment type: Pure code
.text$x:0000945C ; Segment permissions: Read/Execute
.text$x:0000945C _text$x         segment para public 'CODE' use32
.text$x:0000945C                 assume cs:_text$x
.text$x:0000945C                 ;org 945Ch
.text$x:0000945C ; COMDAT (pick associative to section at 9408)
.text$x:0000945C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000945C
.text$x:0000945C ; =============== S U B R O U T I N E =======================================
.text$x:0000945C
.text$x:0000945C
.text$x:0000945C __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:0000945C                                         ; DATA XREF: .xdata$x:0001009Co
.text$x:0000945C                 mov     ecx, [ebp-10h]
.text$x:0000945F                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000945F __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:0000945F
.text$x:00009464
.text$x:00009464 ; =============== S U B R O U T I N E =======================================
.text$x:00009464
.text$x:00009464
.text$x:00009464 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00009464                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00009464
.text$x:00009464 arg_4           = dword ptr  8
.text$x:00009464
.text$x:00009464                 mov     edx, [esp+arg_4]
.text$x:00009468                 lea     eax, [edx+0Ch]
.text$x:0000946B                 mov     ecx, [edx-8]
.text$x:0000946E                 xor     ecx, eax
.text$x:00009470                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009475                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:0000947A                 jmp     ___CxxFrameHandler3
.text$x:0000947A __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:0000947A
.text$x:0000947A ; ---------------------------------------------------------------------------
.text$x:0000947F                 align 10h
.text$x:0000947F _text$x         ends
.text$x:0000947F
.text$mn:00009480 ; ===========================================================================
.text$mn:00009480
.text$mn:00009480 ; Segment type: Pure code
.text$mn:00009480 ; Segment permissions: Read/Execute
.text$mn:00009480 _text$mn        segment para public 'CODE' use32
.text$mn:00009480                 assume cs:_text$mn
.text$mn:00009480                 ;org 9480h
.text$mn:00009480 ; COMDAT (pick any)
.text$mn:00009480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009480
.text$mn:00009480 ; =============== S U B R O U T I N E =======================================
.text$mn:00009480
.text$mn:00009480 ; Attributes: bp-based frame
.text$mn:00009480
.text$mn:00009480 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00009480                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00009480 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00009480                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00009480                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00009480
.text$mn:00009480 var_4           = dword ptr -4
.text$mn:00009480
.text$mn:00009480                 push    ebp
.text$mn:00009481                 mov     ebp, esp
.text$mn:00009483                 push    ecx
.text$mn:00009484                 mov     [ebp+var_4], ecx
.text$mn:00009487                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000948A                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000948F                 mov     esp, ebp
.text$mn:00009491                 pop     ebp
.text$mn:00009492                 retn
.text$mn:00009492 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00009492
.text$mn:00009492 ; ---------------------------------------------------------------------------
.text$mn:00009493                 align 4
.text$mn:00009493 _text$mn        ends
.text$mn:00009493
.text$mn:00009494 ; ===========================================================================
.text$mn:00009494
.text$mn:00009494 ; Segment type: Pure code
.text$mn:00009494 ; Segment permissions: Read/Execute
.text$mn:00009494 _text$mn        segment para public 'CODE' use32
.text$mn:00009494                 assume cs:_text$mn
.text$mn:00009494                 ;org 9494h
.text$mn:00009494 ; COMDAT (pick any)
.text$mn:00009494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009494
.text$mn:00009494 ; =============== S U B R O U T I N E =======================================
.text$mn:00009494
.text$mn:00009494 ; Attributes: bp-based frame
.text$mn:00009494
.text$mn:00009494 ; _DWORD __thiscall std::_Facet_base::~_Facet_base(std::_Facet_base *__hidden this)
.text$mn:00009494                 public ??1_Facet_base@std@@UAE@XZ
.text$mn:00009494 ??1_Facet_base@std@@UAE@XZ proc near    ; CODE XREF: __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0+3j
.text$mn:00009494                                         ; std::locale::facet::~facet(void)+40p ...
.text$mn:00009494
.text$mn:00009494 var_4           = dword ptr -4
.text$mn:00009494
.text$mn:00009494                 push    ebp
.text$mn:00009495                 mov     ebp, esp
.text$mn:00009497                 push    ecx
.text$mn:00009498                 mov     [ebp+var_4], ecx
.text$mn:0000949B                 mov     eax, [ebp+var_4]
.text$mn:0000949E                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:000094A4                 mov     esp, ebp
.text$mn:000094A6                 pop     ebp
.text$mn:000094A7                 retn
.text$mn:000094A7 ??1_Facet_base@std@@UAE@XZ endp
.text$mn:000094A7
.text$mn:000094A7 _text$mn        ends
.text$mn:000094A7
.text$mn:000094A8 ; ===========================================================================
.text$mn:000094A8
.text$mn:000094A8 ; Segment type: Pure code
.text$mn:000094A8 ; Segment permissions: Read/Execute
.text$mn:000094A8 _text$mn        segment para public 'CODE' use32
.text$mn:000094A8                 assume cs:_text$mn
.text$mn:000094A8                 ;org 94A8h
.text$mn:000094A8 ; COMDAT (pick any)
.text$mn:000094A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094A8
.text$mn:000094A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000094A8
.text$mn:000094A8 ; Attributes: bp-based frame
.text$mn:000094A8
.text$mn:000094A8 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000094A8                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:000094A8 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:000094A8                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:000094A8                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:000094A8
.text$mn:000094A8 var_10          = dword ptr -10h
.text$mn:000094A8 var_C           = dword ptr -0Ch
.text$mn:000094A8 var_4           = dword ptr -4
.text$mn:000094A8
.text$mn:000094A8                 push    ebp
.text$mn:000094A9                 mov     ebp, esp
.text$mn:000094AB                 push    0FFFFFFFFh
.text$mn:000094AD                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:000094B2                 mov     eax, large fs:0
.text$mn:000094B8                 push    eax
.text$mn:000094B9                 push    ecx
.text$mn:000094BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000094BF                 xor     eax, ebp
.text$mn:000094C1                 push    eax
.text$mn:000094C2                 lea     eax, [ebp+var_C]
.text$mn:000094C5                 mov     large fs:0, eax
.text$mn:000094CB                 mov     [ebp+var_10], ecx
.text$mn:000094CE                 mov     [ebp+var_4], 0
.text$mn:000094D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000094DC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000094DF                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000094E4                 mov     ecx, [ebp+var_C]
.text$mn:000094E7                 mov     large fs:0, ecx
.text$mn:000094EE                 pop     ecx
.text$mn:000094EF                 mov     esp, ebp
.text$mn:000094F1                 pop     ebp
.text$mn:000094F2                 retn
.text$mn:000094F2 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:000094F2
.text$mn:000094F2 ; ---------------------------------------------------------------------------
.text$mn:000094F3                 align 4
.text$mn:000094F3 _text$mn        ends
.text$mn:000094F3
.text$x:000094F4 ; ===========================================================================
.text$x:000094F4
.text$x:000094F4 ; Segment type: Pure code
.text$x:000094F4 ; Segment permissions: Read/Execute
.text$x:000094F4 _text$x         segment para public 'CODE' use32
.text$x:000094F4                 assume cs:_text$x
.text$x:000094F4                 ;org 94F4h
.text$x:000094F4 ; COMDAT (pick associative to section at 94A8)
.text$x:000094F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000094F4
.text$x:000094F4 ; =============== S U B R O U T I N E =======================================
.text$x:000094F4
.text$x:000094F4
.text$x:000094F4 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:000094F4                                         ; DATA XREF: .xdata$x:0000FA44o
.text$x:000094F4                 mov     ecx, [ebp-10h]  ; this
.text$x:000094F7                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000094F7 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:000094F7
.text$x:000094FC
.text$x:000094FC ; =============== S U B R O U T I N E =======================================
.text$x:000094FC
.text$x:000094FC
.text$x:000094FC __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:000094FC                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:000094FC
.text$x:000094FC arg_4           = dword ptr  8
.text$x:000094FC
.text$x:000094FC                 mov     edx, [esp+arg_4]
.text$x:00009500                 lea     eax, [edx+0Ch]
.text$x:00009503                 mov     ecx, [edx-8]
.text$x:00009506                 xor     ecx, eax
.text$x:00009508                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000950D                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00009512                 jmp     ___CxxFrameHandler3
.text$x:00009512 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00009512
.text$x:00009512 ; ---------------------------------------------------------------------------
.text$x:00009517                 align 4
.text$x:00009517 _text$x         ends
.text$x:00009517
.text$mn:00009518 ; ===========================================================================
.text$mn:00009518
.text$mn:00009518 ; Segment type: Pure code
.text$mn:00009518 ; Segment permissions: Read/Execute
.text$mn:00009518 _text$mn        segment para public 'CODE' use32
.text$mn:00009518                 assume cs:_text$mn
.text$mn:00009518                 ;org 9518h
.text$mn:00009518 ; COMDAT (pick any)
.text$mn:00009518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009518
.text$mn:00009518 ; =============== S U B R O U T I N E =======================================
.text$mn:00009518
.text$mn:00009518 ; Attributes: bp-based frame
.text$mn:00009518
.text$mn:00009518 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00009518                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00009518 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00009518                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00009518                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00009518
.text$mn:00009518 var_10          = dword ptr -10h
.text$mn:00009518 var_C           = dword ptr -0Ch
.text$mn:00009518 var_4           = dword ptr -4
.text$mn:00009518
.text$mn:00009518                 push    ebp
.text$mn:00009519                 mov     ebp, esp
.text$mn:0000951B                 push    0FFFFFFFFh
.text$mn:0000951D                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00009522                 mov     eax, large fs:0
.text$mn:00009528                 push    eax
.text$mn:00009529                 push    ecx
.text$mn:0000952A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000952F                 xor     eax, ebp
.text$mn:00009531                 push    eax
.text$mn:00009532                 lea     eax, [ebp+var_C]
.text$mn:00009535                 mov     large fs:0, eax
.text$mn:0000953B                 mov     [ebp+var_10], ecx
.text$mn:0000953E                 mov     [ebp+var_4], 0
.text$mn:00009545                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000954C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000954F                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00009554                 mov     ecx, [ebp+var_C]
.text$mn:00009557                 mov     large fs:0, ecx
.text$mn:0000955E                 pop     ecx
.text$mn:0000955F                 mov     esp, ebp
.text$mn:00009561                 pop     ebp
.text$mn:00009562                 retn
.text$mn:00009562 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00009562
.text$mn:00009562 ; ---------------------------------------------------------------------------
.text$mn:00009563                 align 4
.text$mn:00009563 _text$mn        ends
.text$mn:00009563
.text$x:00009564 ; ===========================================================================
.text$x:00009564
.text$x:00009564 ; Segment type: Pure code
.text$x:00009564 ; Segment permissions: Read/Execute
.text$x:00009564 _text$x         segment para public 'CODE' use32
.text$x:00009564                 assume cs:_text$x
.text$x:00009564                 ;org 9564h
.text$x:00009564 ; COMDAT (pick associative to section at 9518)
.text$x:00009564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009564
.text$x:00009564 ; =============== S U B R O U T I N E =======================================
.text$x:00009564
.text$x:00009564
.text$x:00009564 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00009564                                         ; DATA XREF: .xdata$x:0000FAC8o
.text$x:00009564                 mov     ecx, [ebp-10h]  ; this
.text$x:00009567                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00009567 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00009567
.text$x:0000956C
.text$x:0000956C ; =============== S U B R O U T I N E =======================================
.text$x:0000956C
.text$x:0000956C
.text$x:0000956C __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:0000956C                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:0000956C
.text$x:0000956C arg_4           = dword ptr  8
.text$x:0000956C
.text$x:0000956C                 mov     edx, [esp+arg_4]
.text$x:00009570                 lea     eax, [edx+0Ch]
.text$x:00009573                 mov     ecx, [edx-8]
.text$x:00009576                 xor     ecx, eax
.text$x:00009578                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000957D                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00009582                 jmp     ___CxxFrameHandler3
.text$x:00009582 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00009582
.text$x:00009582 ; ---------------------------------------------------------------------------
.text$x:00009587                 align 4
.text$x:00009587 _text$x         ends
.text$x:00009587
.text$mn:00009588 ; ===========================================================================
.text$mn:00009588
.text$mn:00009588 ; Segment type: Pure code
.text$mn:00009588 ; Segment permissions: Read/Execute
.text$mn:00009588 _text$mn        segment para public 'CODE' use32
.text$mn:00009588                 assume cs:_text$mn
.text$mn:00009588                 ;org 9588h
.text$mn:00009588 ; COMDAT (pick any)
.text$mn:00009588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009588
.text$mn:00009588 ; =============== S U B R O U T I N E =======================================
.text$mn:00009588
.text$mn:00009588 ; Attributes: bp-based frame
.text$mn:00009588
.text$mn:00009588 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00009588                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00009588 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00009588                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00009588                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00009588
.text$mn:00009588 var_14          = byte ptr -14h
.text$mn:00009588 var_10          = dword ptr -10h
.text$mn:00009588 var_C           = dword ptr -0Ch
.text$mn:00009588 var_4           = dword ptr -4
.text$mn:00009588
.text$mn:00009588                 push    ebp
.text$mn:00009589                 mov     ebp, esp
.text$mn:0000958B                 push    0FFFFFFFFh
.text$mn:0000958D                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00009592                 mov     eax, large fs:0
.text$mn:00009598                 push    eax
.text$mn:00009599                 sub     esp, 8
.text$mn:0000959C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000095A1                 xor     eax, ebp
.text$mn:000095A3                 push    eax
.text$mn:000095A4                 lea     eax, [ebp+var_C]
.text$mn:000095A7                 mov     large fs:0, eax
.text$mn:000095AD                 mov     [ebp+var_10], ecx
.text$mn:000095B0                 push    3               ; int
.text$mn:000095B2                 lea     ecx, [ebp+var_14] ; this
.text$mn:000095B5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000095BA                 mov     [ebp+var_4], 0
.text$mn:000095C1                 mov     ecx, [ebp+var_10] ; this
.text$mn:000095C4                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000095C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000095D0                 lea     ecx, [ebp+var_14] ; this
.text$mn:000095D3                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000095D8                 mov     ecx, [ebp+var_C]
.text$mn:000095DB                 mov     large fs:0, ecx
.text$mn:000095E2                 pop     ecx
.text$mn:000095E3                 mov     esp, ebp
.text$mn:000095E5                 pop     ebp
.text$mn:000095E6                 retn
.text$mn:000095E6 ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:000095E6
.text$mn:000095E6 ; ---------------------------------------------------------------------------
.text$mn:000095E7                 align 4
.text$mn:000095E7 _text$mn        ends
.text$mn:000095E7
.text$x:000095E8 ; ===========================================================================
.text$x:000095E8
.text$x:000095E8 ; Segment type: Pure code
.text$x:000095E8 ; Segment permissions: Read/Execute
.text$x:000095E8 _text$x         segment para public 'CODE' use32
.text$x:000095E8                 assume cs:_text$x
.text$x:000095E8                 ;org 95E8h
.text$x:000095E8 ; COMDAT (pick associative to section at 9588)
.text$x:000095E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000095E8
.text$x:000095E8 ; =============== S U B R O U T I N E =======================================
.text$x:000095E8
.text$x:000095E8
.text$x:000095E8 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:000095E8                                         ; DATA XREF: .xdata$x:0000F54Co
.text$x:000095E8                 lea     ecx, [ebp-14h]  ; this
.text$x:000095EB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000095EB __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:000095EB
.text$x:000095F0
.text$x:000095F0 ; =============== S U B R O U T I N E =======================================
.text$x:000095F0
.text$x:000095F0
.text$x:000095F0 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:000095F0                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:000095F0
.text$x:000095F0 arg_4           = dword ptr  8
.text$x:000095F0
.text$x:000095F0                 mov     edx, [esp+arg_4]
.text$x:000095F4                 lea     eax, [edx+0Ch]
.text$x:000095F7                 mov     ecx, [edx-0Ch]
.text$x:000095FA                 xor     ecx, eax
.text$x:000095FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009601                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00009606                 jmp     ___CxxFrameHandler3
.text$x:00009606 __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00009606
.text$x:00009606 ; ---------------------------------------------------------------------------
.text$x:0000960B                 align 4
.text$x:0000960B _text$x         ends
.text$x:0000960B
.text$mn:0000960C ; ===========================================================================
.text$mn:0000960C
.text$mn:0000960C ; Segment type: Pure code
.text$mn:0000960C ; Segment permissions: Read/Execute
.text$mn:0000960C _text$mn        segment para public 'CODE' use32
.text$mn:0000960C                 assume cs:_text$mn
.text$mn:0000960C                 ;org 960Ch
.text$mn:0000960C ; COMDAT (pick any)
.text$mn:0000960C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000960C
.text$mn:0000960C ; =============== S U B R O U T I N E =======================================
.text$mn:0000960C
.text$mn:0000960C ; Attributes: bp-based frame
.text$mn:0000960C
.text$mn:0000960C ; _DWORD __thiscall std::_Locinfo::~_Locinfo(std::_Locinfo *__hidden this)
.text$mn:0000960C                 public ??1_Locinfo@std@@QAE@XZ
.text$mn:0000960C ??1_Locinfo@std@@QAE@XZ proc near       ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+DEp
.text$mn:0000960C                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+13j
.text$mn:0000960C
.text$mn:0000960C var_10          = dword ptr -10h
.text$mn:0000960C var_C           = dword ptr -0Ch
.text$mn:0000960C var_4           = dword ptr -4
.text$mn:0000960C
.text$mn:0000960C                 push    ebp
.text$mn:0000960D                 mov     ebp, esp
.text$mn:0000960F                 push    0FFFFFFFFh
.text$mn:00009611                 push    offset __ehhandler$??1_Locinfo@std@@QAE@XZ
.text$mn:00009616                 mov     eax, large fs:0
.text$mn:0000961C                 push    eax
.text$mn:0000961D                 push    ecx
.text$mn:0000961E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009623                 xor     eax, ebp
.text$mn:00009625                 push    eax
.text$mn:00009626                 lea     eax, [ebp+var_C]
.text$mn:00009629                 mov     large fs:0, eax
.text$mn:0000962F                 mov     [ebp+var_10], ecx
.text$mn:00009632                 mov     [ebp+var_4], 6
.text$mn:00009639                 mov     eax, [ebp+var_10]
.text$mn:0000963C                 push    eax             ; struct std::_Locinfo *
.text$mn:0000963D                 call    ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor(std::_Locinfo *)
.text$mn:00009642                 add     esp, 4
.text$mn:00009645                 mov     byte ptr [ebp+var_4], 5
.text$mn:00009649                 mov     ecx, [ebp+var_10]
.text$mn:0000964C                 add     ecx, 2Ch ; ','
.text$mn:0000964F                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00009654                 mov     byte ptr [ebp+var_4], 4
.text$mn:00009658                 mov     ecx, [ebp+var_10]
.text$mn:0000965B                 add     ecx, 24h ; '$'
.text$mn:0000965E                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00009663                 mov     byte ptr [ebp+var_4], 3
.text$mn:00009667                 mov     ecx, [ebp+var_10]
.text$mn:0000966A                 add     ecx, 1Ch
.text$mn:0000966D                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00009672                 mov     byte ptr [ebp+var_4], 2
.text$mn:00009676                 mov     ecx, [ebp+var_10]
.text$mn:00009679                 add     ecx, 14h
.text$mn:0000967C                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00009681                 mov     byte ptr [ebp+var_4], 1
.text$mn:00009685                 mov     ecx, [ebp+var_10]
.text$mn:00009688                 add     ecx, 0Ch
.text$mn:0000968B                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00009690                 mov     byte ptr [ebp+var_4], 0
.text$mn:00009694                 mov     ecx, [ebp+var_10]
.text$mn:00009697                 add     ecx, 4
.text$mn:0000969A                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:0000969F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000096A6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000096A9                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000096AE                 mov     ecx, [ebp+var_C]
.text$mn:000096B1                 mov     large fs:0, ecx
.text$mn:000096B8                 pop     ecx
.text$mn:000096B9                 mov     esp, ebp
.text$mn:000096BB                 pop     ebp
.text$mn:000096BC                 retn
.text$mn:000096BC ??1_Locinfo@std@@QAE@XZ endp
.text$mn:000096BC
.text$mn:000096BC ; ---------------------------------------------------------------------------
.text$mn:000096BD                 align 10h
.text$mn:000096BD _text$mn        ends
.text$mn:000096BD
.text$x:000096C0 ; ===========================================================================
.text$x:000096C0
.text$x:000096C0 ; Segment type: Pure code
.text$x:000096C0 ; Segment permissions: Read/Execute
.text$x:000096C0 _text$x         segment para public 'CODE' use32
.text$x:000096C0                 assume cs:_text$x
.text$x:000096C0                 ;org 96C0h
.text$x:000096C0 ; COMDAT (pick associative to section at 960C)
.text$x:000096C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000096C0
.text$x:000096C0 ; =============== S U B R O U T I N E =======================================
.text$x:000096C0
.text$x:000096C0
.text$x:000096C0 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 proc near
.text$x:000096C0                                         ; DATA XREF: .xdata$x:0000F844o
.text$x:000096C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000096C3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000096C3 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 endp
.text$x:000096C3
.text$x:000096C8
.text$x:000096C8 ; =============== S U B R O U T I N E =======================================
.text$x:000096C8
.text$x:000096C8
.text$x:000096C8 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 proc near
.text$x:000096C8                                         ; DATA XREF: .xdata$x:0000F84Co
.text$x:000096C8                 mov     ecx, [ebp-10h]
.text$x:000096CB                 add     ecx, 4
.text$x:000096CE                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000096CE __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 endp
.text$x:000096CE
.text$x:000096D3
.text$x:000096D3 ; =============== S U B R O U T I N E =======================================
.text$x:000096D3
.text$x:000096D3
.text$x:000096D3 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 proc near
.text$x:000096D3                                         ; DATA XREF: .xdata$x:0000F854o
.text$x:000096D3                 mov     ecx, [ebp-10h]
.text$x:000096D6                 add     ecx, 0Ch
.text$x:000096D9                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000096D9 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 endp
.text$x:000096D9
.text$x:000096DE
.text$x:000096DE ; =============== S U B R O U T I N E =======================================
.text$x:000096DE
.text$x:000096DE
.text$x:000096DE __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 proc near
.text$x:000096DE                                         ; DATA XREF: .xdata$x:0000F85Co
.text$x:000096DE                 mov     ecx, [ebp-10h]
.text$x:000096E1                 add     ecx, 14h
.text$x:000096E4                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:000096E4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 endp
.text$x:000096E4
.text$x:000096E9
.text$x:000096E9 ; =============== S U B R O U T I N E =======================================
.text$x:000096E9
.text$x:000096E9
.text$x:000096E9 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 proc near
.text$x:000096E9                                         ; DATA XREF: .xdata$x:0000F864o
.text$x:000096E9                 mov     ecx, [ebp-10h]
.text$x:000096EC                 add     ecx, 1Ch
.text$x:000096EF                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:000096EF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 endp
.text$x:000096EF
.text$x:000096F4
.text$x:000096F4 ; =============== S U B R O U T I N E =======================================
.text$x:000096F4
.text$x:000096F4
.text$x:000096F4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 proc near
.text$x:000096F4                                         ; DATA XREF: .xdata$x:0000F86Co
.text$x:000096F4                 mov     ecx, [ebp-10h]
.text$x:000096F7                 add     ecx, 24h ; '$'
.text$x:000096FA                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:000096FA __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 endp
.text$x:000096FA
.text$x:000096FF
.text$x:000096FF ; =============== S U B R O U T I N E =======================================
.text$x:000096FF
.text$x:000096FF
.text$x:000096FF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 proc near
.text$x:000096FF                                         ; DATA XREF: .xdata$x:0000F874o
.text$x:000096FF                 mov     ecx, [ebp-10h]
.text$x:00009702                 add     ecx, 2Ch ; ','
.text$x:00009705                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00009705 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 endp
.text$x:00009705
.text$x:0000970A
.text$x:0000970A ; =============== S U B R O U T I N E =======================================
.text$x:0000970A
.text$x:0000970A
.text$x:0000970A __ehhandler$??1_Locinfo@std@@QAE@XZ proc near
.text$x:0000970A                                         ; DATA XREF: std::_Locinfo::~_Locinfo(void)+5o
.text$x:0000970A
.text$x:0000970A arg_4           = dword ptr  8
.text$x:0000970A
.text$x:0000970A                 mov     edx, [esp+arg_4]
.text$x:0000970E                 lea     eax, [edx+0Ch]
.text$x:00009711                 mov     ecx, [edx-8]
.text$x:00009714                 xor     ecx, eax
.text$x:00009716                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000971B                 mov     eax, offset __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
.text$x:00009720                 jmp     ___CxxFrameHandler3
.text$x:00009720 __ehhandler$??1_Locinfo@std@@QAE@XZ endp
.text$x:00009720
.text$x:00009720 ; ---------------------------------------------------------------------------
.text$x:00009725                 align 4
.text$x:00009725 _text$x         ends
.text$x:00009725
.text$mn:00009728 ; ===========================================================================
.text$mn:00009728
.text$mn:00009728 ; Segment type: Pure code
.text$mn:00009728 ; Segment permissions: Read/Execute
.text$mn:00009728 _text$mn        segment para public 'CODE' use32
.text$mn:00009728                 assume cs:_text$mn
.text$mn:00009728                 ;org 9728h
.text$mn:00009728 ; COMDAT (pick any)
.text$mn:00009728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009728
.text$mn:00009728 ; =============== S U B R O U T I N E =======================================
.text$mn:00009728
.text$mn:00009728 ; Attributes: bp-based frame
.text$mn:00009728
.text$mn:00009728 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00009728                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00009728 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00009728                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00009728                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00009728
.text$mn:00009728 var_10          = dword ptr -10h
.text$mn:00009728 var_C           = dword ptr -0Ch
.text$mn:00009728 var_4           = dword ptr -4
.text$mn:00009728
.text$mn:00009728                 push    ebp
.text$mn:00009729                 mov     ebp, esp
.text$mn:0000972B                 push    0FFFFFFFFh
.text$mn:0000972D                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00009732                 mov     eax, large fs:0
.text$mn:00009738                 push    eax
.text$mn:00009739                 push    ecx
.text$mn:0000973A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000973F                 xor     eax, ebp
.text$mn:00009741                 push    eax
.text$mn:00009742                 lea     eax, [ebp+var_C]
.text$mn:00009745                 mov     large fs:0, eax
.text$mn:0000974B                 mov     [ebp+var_10], ecx
.text$mn:0000974E                 mov     [ebp+var_4], 0
.text$mn:00009755                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000975C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000975F                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00009764                 mov     ecx, [ebp+var_C]
.text$mn:00009767                 mov     large fs:0, ecx
.text$mn:0000976E                 pop     ecx
.text$mn:0000976F                 mov     esp, ebp
.text$mn:00009771                 pop     ebp
.text$mn:00009772                 retn
.text$mn:00009772 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00009772
.text$mn:00009772 ; ---------------------------------------------------------------------------
.text$mn:00009773                 align 4
.text$mn:00009773 _text$mn        ends
.text$mn:00009773
.text$x:00009774 ; ===========================================================================
.text$x:00009774
.text$x:00009774 ; Segment type: Pure code
.text$x:00009774 ; Segment permissions: Read/Execute
.text$x:00009774 _text$x         segment para public 'CODE' use32
.text$x:00009774                 assume cs:_text$x
.text$x:00009774                 ;org 9774h
.text$x:00009774 ; COMDAT (pick associative to section at 9728)
.text$x:00009774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009774
.text$x:00009774 ; =============== S U B R O U T I N E =======================================
.text$x:00009774
.text$x:00009774
.text$x:00009774 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00009774                                         ; DATA XREF: .xdata$x:0000FB4Co
.text$x:00009774                 mov     ecx, [ebp-10h]  ; this
.text$x:00009777                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00009777 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00009777
.text$x:0000977C
.text$x:0000977C ; =============== S U B R O U T I N E =======================================
.text$x:0000977C
.text$x:0000977C
.text$x:0000977C __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:0000977C                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:0000977C
.text$x:0000977C arg_4           = dword ptr  8
.text$x:0000977C
.text$x:0000977C                 mov     edx, [esp+arg_4]
.text$x:00009780                 lea     eax, [edx+0Ch]
.text$x:00009783                 mov     ecx, [edx-8]
.text$x:00009786                 xor     ecx, eax
.text$x:00009788                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000978D                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00009792                 jmp     ___CxxFrameHandler3
.text$x:00009792 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00009792
.text$x:00009792 ; ---------------------------------------------------------------------------
.text$x:00009797                 align 4
.text$x:00009797 _text$x         ends
.text$x:00009797
.text$mn:00009798 ; ===========================================================================
.text$mn:00009798
.text$mn:00009798 ; Segment type: Pure code
.text$mn:00009798 ; Segment permissions: Read/Execute
.text$mn:00009798 _text$mn        segment para public 'CODE' use32
.text$mn:00009798                 assume cs:_text$mn
.text$mn:00009798                 ;org 9798h
.text$mn:00009798 ; COMDAT (pick any)
.text$mn:00009798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009798
.text$mn:00009798 ; =============== S U B R O U T I N E =======================================
.text$mn:00009798
.text$mn:00009798 ; Attributes: bp-based frame
.text$mn:00009798
.text$mn:00009798 ; _DWORD __thiscall std::ctype_base::~ctype_base(std::ctype_base *__hidden this)
.text$mn:00009798                 public ??1ctype_base@std@@UAE@XZ
.text$mn:00009798 ??1ctype_base@std@@UAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0+3j
.text$mn:00009798                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+67p ...
.text$mn:00009798
.text$mn:00009798 var_10          = dword ptr -10h
.text$mn:00009798 var_C           = dword ptr -0Ch
.text$mn:00009798 var_4           = dword ptr -4
.text$mn:00009798
.text$mn:00009798                 push    ebp
.text$mn:00009799                 mov     ebp, esp
.text$mn:0000979B                 push    0FFFFFFFFh
.text$mn:0000979D                 push    offset __ehhandler$??1ctype_base@std@@UAE@XZ
.text$mn:000097A2                 mov     eax, large fs:0
.text$mn:000097A8                 push    eax
.text$mn:000097A9                 push    ecx
.text$mn:000097AA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000097AF                 xor     eax, ebp
.text$mn:000097B1                 push    eax
.text$mn:000097B2                 lea     eax, [ebp+var_C]
.text$mn:000097B5                 mov     large fs:0, eax
.text$mn:000097BB                 mov     [ebp+var_10], ecx
.text$mn:000097BE                 mov     eax, [ebp+var_10]
.text$mn:000097C1                 mov     dword ptr [eax], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:000097C7                 mov     [ebp+var_4], 0
.text$mn:000097CE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000097D5                 mov     ecx, [ebp+var_10] ; this
.text$mn:000097D8                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:000097DD                 mov     ecx, [ebp+var_C]
.text$mn:000097E0                 mov     large fs:0, ecx
.text$mn:000097E7                 pop     ecx
.text$mn:000097E8                 mov     esp, ebp
.text$mn:000097EA                 pop     ebp
.text$mn:000097EB                 retn
.text$mn:000097EB ??1ctype_base@std@@UAE@XZ endp
.text$mn:000097EB
.text$mn:000097EB _text$mn        ends
.text$mn:000097EB
.text$x:000097EC ; ===========================================================================
.text$x:000097EC
.text$x:000097EC ; Segment type: Pure code
.text$x:000097EC ; Segment permissions: Read/Execute
.text$x:000097EC _text$x         segment para public 'CODE' use32
.text$x:000097EC                 assume cs:_text$x
.text$x:000097EC                 ;org 97ECh
.text$x:000097EC ; COMDAT (pick associative to section at 9798)
.text$x:000097EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000097EC
.text$x:000097EC ; =============== S U B R O U T I N E =======================================
.text$x:000097EC
.text$x:000097EC
.text$x:000097EC __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 proc near
.text$x:000097EC                                         ; DATA XREF: .xdata$x:0000F92Co
.text$x:000097EC                 mov     ecx, [ebp-10h]  ; this
.text$x:000097EF                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:000097EF __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 endp
.text$x:000097EF
.text$x:000097F4
.text$x:000097F4 ; =============== S U B R O U T I N E =======================================
.text$x:000097F4
.text$x:000097F4
.text$x:000097F4 __ehhandler$??1ctype_base@std@@UAE@XZ proc near
.text$x:000097F4                                         ; DATA XREF: std::ctype_base::~ctype_base(void)+5o
.text$x:000097F4
.text$x:000097F4 arg_4           = dword ptr  8
.text$x:000097F4
.text$x:000097F4                 mov     edx, [esp+arg_4]
.text$x:000097F8                 lea     eax, [edx+0Ch]
.text$x:000097FB                 mov     ecx, [edx-8]
.text$x:000097FE                 xor     ecx, eax
.text$x:00009800                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009805                 mov     eax, offset __ehfuncinfo$??1ctype_base@std@@UAE@XZ
.text$x:0000980A                 jmp     ___CxxFrameHandler3
.text$x:0000980A __ehhandler$??1ctype_base@std@@UAE@XZ endp
.text$x:0000980A
.text$x:0000980A ; ---------------------------------------------------------------------------
.text$x:0000980F                 align 10h
.text$x:0000980F _text$x         ends
.text$x:0000980F
.text$mn:00009810 ; ===========================================================================
.text$mn:00009810
.text$mn:00009810 ; Segment type: Pure code
.text$mn:00009810 ; Segment permissions: Read/Execute
.text$mn:00009810 _text$mn        segment para public 'CODE' use32
.text$mn:00009810                 assume cs:_text$mn
.text$mn:00009810                 ;org 9810h
.text$mn:00009810 ; COMDAT (pick any)
.text$mn:00009810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009810
.text$mn:00009810 ; =============== S U B R O U T I N E =======================================
.text$mn:00009810
.text$mn:00009810 ; Attributes: bp-based frame
.text$mn:00009810
.text$mn:00009810 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00009810                 public ??1error_category@std@@UAE@XZ
.text$mn:00009810 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00009810                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00009810
.text$mn:00009810 var_4           = dword ptr -4
.text$mn:00009810
.text$mn:00009810                 push    ebp
.text$mn:00009811                 mov     ebp, esp
.text$mn:00009813                 push    ecx
.text$mn:00009814                 mov     [ebp+var_4], ecx
.text$mn:00009817                 mov     eax, [ebp+var_4]
.text$mn:0000981A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00009820                 mov     esp, ebp
.text$mn:00009822                 pop     ebp
.text$mn:00009823                 retn
.text$mn:00009823 ??1error_category@std@@UAE@XZ endp
.text$mn:00009823
.text$mn:00009823 _text$mn        ends
.text$mn:00009823
.text$mn:00009824 ; ===========================================================================
.text$mn:00009824
.text$mn:00009824 ; Segment type: Pure code
.text$mn:00009824 ; Segment permissions: Read/Execute
.text$mn:00009824 _text$mn        segment para public 'CODE' use32
.text$mn:00009824                 assume cs:_text$mn
.text$mn:00009824                 ;org 9824h
.text$mn:00009824 ; COMDAT (pick any)
.text$mn:00009824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009824
.text$mn:00009824 ; =============== S U B R O U T I N E =======================================
.text$mn:00009824
.text$mn:00009824 ; Attributes: bp-based frame
.text$mn:00009824
.text$mn:00009824 ; _DWORD __thiscall std::locale::facet::~facet(std::locale::facet *__hidden this)
.text$mn:00009824                 public ??1facet@locale@std@@MAE@XZ
.text$mn:00009824 ??1facet@locale@std@@MAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0+3j
.text$mn:00009824                                         ; std::ctype_base::~ctype_base(void)+40p ...
.text$mn:00009824
.text$mn:00009824 var_10          = dword ptr -10h
.text$mn:00009824 var_C           = dword ptr -0Ch
.text$mn:00009824 var_4           = dword ptr -4
.text$mn:00009824
.text$mn:00009824                 push    ebp
.text$mn:00009825                 mov     ebp, esp
.text$mn:00009827                 push    0FFFFFFFFh
.text$mn:00009829                 push    offset __ehhandler$??1facet@locale@std@@MAE@XZ
.text$mn:0000982E                 mov     eax, large fs:0
.text$mn:00009834                 push    eax
.text$mn:00009835                 push    ecx
.text$mn:00009836                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000983B                 xor     eax, ebp
.text$mn:0000983D                 push    eax
.text$mn:0000983E                 lea     eax, [ebp+var_C]
.text$mn:00009841                 mov     large fs:0, eax
.text$mn:00009847                 mov     [ebp+var_10], ecx
.text$mn:0000984A                 mov     eax, [ebp+var_10]
.text$mn:0000984D                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00009853                 mov     [ebp+var_4], 0
.text$mn:0000985A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009861                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009864                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:00009869                 mov     ecx, [ebp+var_C]
.text$mn:0000986C                 mov     large fs:0, ecx
.text$mn:00009873                 pop     ecx
.text$mn:00009874                 mov     esp, ebp
.text$mn:00009876                 pop     ebp
.text$mn:00009877                 retn
.text$mn:00009877 ??1facet@locale@std@@MAE@XZ endp
.text$mn:00009877
.text$mn:00009877 _text$mn        ends
.text$mn:00009877
.text$x:00009878 ; ===========================================================================
.text$x:00009878
.text$x:00009878 ; Segment type: Pure code
.text$x:00009878 ; Segment permissions: Read/Execute
.text$x:00009878 _text$x         segment para public 'CODE' use32
.text$x:00009878                 assume cs:_text$x
.text$x:00009878                 ;org 9878h
.text$x:00009878 ; COMDAT (pick associative to section at 9824)
.text$x:00009878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009878
.text$x:00009878 ; =============== S U B R O U T I N E =======================================
.text$x:00009878
.text$x:00009878
.text$x:00009878 __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 proc near
.text$x:00009878                                         ; DATA XREF: .xdata$x:0000F8D4o
.text$x:00009878                 mov     ecx, [ebp-10h]  ; this
.text$x:0000987B                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:0000987B __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 endp
.text$x:0000987B
.text$x:00009880
.text$x:00009880 ; =============== S U B R O U T I N E =======================================
.text$x:00009880
.text$x:00009880
.text$x:00009880 __ehhandler$??1facet@locale@std@@MAE@XZ proc near
.text$x:00009880                                         ; DATA XREF: std::locale::facet::~facet(void)+5o
.text$x:00009880
.text$x:00009880 arg_4           = dword ptr  8
.text$x:00009880
.text$x:00009880                 mov     edx, [esp+arg_4]
.text$x:00009884                 lea     eax, [edx+0Ch]
.text$x:00009887                 mov     ecx, [edx-8]
.text$x:0000988A                 xor     ecx, eax
.text$x:0000988C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009891                 mov     eax, offset __ehfuncinfo$??1facet@locale@std@@MAE@XZ
.text$x:00009896                 jmp     ___CxxFrameHandler3
.text$x:00009896 __ehhandler$??1facet@locale@std@@MAE@XZ endp
.text$x:00009896
.text$x:00009896 ; ---------------------------------------------------------------------------
.text$x:0000989B                 align 4
.text$x:0000989B _text$x         ends
.text$x:0000989B
.text$mn:0000989C ; ===========================================================================
.text$mn:0000989C
.text$mn:0000989C ; Segment type: Pure code
.text$mn:0000989C ; Segment permissions: Read/Execute
.text$mn:0000989C _text$mn        segment para public 'CODE' use32
.text$mn:0000989C                 assume cs:_text$mn
.text$mn:0000989C                 ;org 989Ch
.text$mn:0000989C ; COMDAT (pick any)
.text$mn:0000989C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000989C
.text$mn:0000989C ; =============== S U B R O U T I N E =======================================
.text$mn:0000989C
.text$mn:0000989C ; Attributes: bp-based frame
.text$mn:0000989C
.text$mn:0000989C ; _DWORD __thiscall std::locale::~locale(std::locale *__hidden this)
.text$mn:0000989C                 public ??1locale@std@@QAE@XZ
.text$mn:0000989C ??1locale@std@@QAE@XZ proc near         ; CODE XREF: isAllowedBeforeDriveLetter(wchar_t)+87p
.text$mn:0000989C                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+67p ...
.text$mn:0000989C
.text$mn:0000989C var_4           = dword ptr -4
.text$mn:0000989C
.text$mn:0000989C                 push    ebp
.text$mn:0000989D                 mov     ebp, esp
.text$mn:0000989F                 push    ecx
.text$mn:000098A0                 mov     [ebp+var_4], ecx
.text$mn:000098A3                 mov     eax, [ebp+var_4]
.text$mn:000098A6                 cmp     dword ptr [eax], 0
.text$mn:000098A9                 jz      short loc_98C5
.text$mn:000098AB                 mov     ecx, [ebp+var_4]
.text$mn:000098AE                 mov     edx, [ecx]
.text$mn:000098B0                 mov     eax, [ebp+var_4]
.text$mn:000098B3                 mov     edx, [edx]
.text$mn:000098B5                 mov     ecx, [eax]
.text$mn:000098B7                 mov     eax, [edx+8]
.text$mn:000098BA                 call    eax
.text$mn:000098BC                 push    eax             ; Memory
.text$mn:000098BD                 call    ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z ; std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)
.text$mn:000098C2                 add     esp, 4
.text$mn:000098C5
.text$mn:000098C5 loc_98C5:                               ; CODE XREF: std::locale::~locale(void)+Dj
.text$mn:000098C5                 mov     esp, ebp
.text$mn:000098C7                 pop     ebp
.text$mn:000098C8                 retn
.text$mn:000098C8 ??1locale@std@@QAE@XZ endp
.text$mn:000098C8
.text$mn:000098C8 ; ---------------------------------------------------------------------------
.text$mn:000098C9                 align 4
.text$mn:000098C9 _text$mn        ends
.text$mn:000098C9
.text$mn:000098CC ; ===========================================================================
.text$mn:000098CC
.text$mn:000098CC ; Segment type: Pure code
.text$mn:000098CC ; Segment permissions: Read/Execute
.text$mn:000098CC _text$mn        segment para public 'CODE' use32
.text$mn:000098CC                 assume cs:_text$mn
.text$mn:000098CC                 ;org 98CCh
.text$mn:000098CC ; COMDAT (pick any)
.text$mn:000098CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098CC
.text$mn:000098CC ; =============== S U B R O U T I N E =======================================
.text$mn:000098CC
.text$mn:000098CC ; Attributes: bp-based frame
.text$mn:000098CC
.text$mn:000098CC ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:000098CC                 public ??1runtime_error@std@@UAE@XZ
.text$mn:000098CC ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+Ap
.text$mn:000098CC                                         ; DATA XREF: .xdata$x:00011100o
.text$mn:000098CC
.text$mn:000098CC var_10          = dword ptr -10h
.text$mn:000098CC var_C           = dword ptr -0Ch
.text$mn:000098CC var_4           = dword ptr -4
.text$mn:000098CC
.text$mn:000098CC                 push    ebp
.text$mn:000098CD                 mov     ebp, esp
.text$mn:000098CF                 push    0FFFFFFFFh
.text$mn:000098D1                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:000098D6                 mov     eax, large fs:0
.text$mn:000098DC                 push    eax
.text$mn:000098DD                 push    ecx
.text$mn:000098DE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000098E3                 xor     eax, ebp
.text$mn:000098E5                 push    eax
.text$mn:000098E6                 lea     eax, [ebp+var_C]
.text$mn:000098E9                 mov     large fs:0, eax
.text$mn:000098EF                 mov     [ebp+var_10], ecx
.text$mn:000098F2                 mov     [ebp+var_4], 0
.text$mn:000098F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009900                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009903                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00009908                 mov     ecx, [ebp+var_C]
.text$mn:0000990B                 mov     large fs:0, ecx
.text$mn:00009912                 pop     ecx
.text$mn:00009913                 mov     esp, ebp
.text$mn:00009915                 pop     ebp
.text$mn:00009916                 retn
.text$mn:00009916 ??1runtime_error@std@@UAE@XZ endp
.text$mn:00009916
.text$mn:00009916 ; ---------------------------------------------------------------------------
.text$mn:00009917                 align 4
.text$mn:00009917 _text$mn        ends
.text$mn:00009917
.text$x:00009918 ; ===========================================================================
.text$x:00009918
.text$x:00009918 ; Segment type: Pure code
.text$x:00009918 ; Segment permissions: Read/Execute
.text$x:00009918 _text$x         segment para public 'CODE' use32
.text$x:00009918                 assume cs:_text$x
.text$x:00009918                 ;org 9918h
.text$x:00009918 ; COMDAT (pick associative to section at 98CC)
.text$x:00009918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009918
.text$x:00009918 ; =============== S U B R O U T I N E =======================================
.text$x:00009918
.text$x:00009918
.text$x:00009918 __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:00009918                                         ; DATA XREF: .xdata$x:0000F76Co
.text$x:00009918                 mov     ecx, [ebp-10h]  ; this
.text$x:0000991B                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000991B __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:0000991B
.text$x:00009920
.text$x:00009920 ; =============== S U B R O U T I N E =======================================
.text$x:00009920
.text$x:00009920
.text$x:00009920 __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:00009920                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:00009920
.text$x:00009920 arg_4           = dword ptr  8
.text$x:00009920
.text$x:00009920                 mov     edx, [esp+arg_4]
.text$x:00009924                 lea     eax, [edx+0Ch]
.text$x:00009927                 mov     ecx, [edx-8]
.text$x:0000992A                 xor     ecx, eax
.text$x:0000992C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009931                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:00009936                 jmp     ___CxxFrameHandler3
.text$x:00009936 __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:00009936
.text$x:00009936 ; ---------------------------------------------------------------------------
.text$x:0000993B                 align 4
.text$x:0000993B _text$x         ends
.text$x:0000993B
.text$mn:0000993C ; ===========================================================================
.text$mn:0000993C
.text$mn:0000993C ; Segment type: Pure code
.text$mn:0000993C ; Segment permissions: Read/Execute
.text$mn:0000993C _text$mn        segment para public 'CODE' use32
.text$mn:0000993C                 assume cs:_text$mn
.text$mn:0000993C                 ;org 993Ch
.text$mn:0000993C ; COMDAT (pick any)
.text$mn:0000993C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000993C
.text$mn:0000993C ; =============== S U B R O U T I N E =======================================
.text$mn:0000993C
.text$mn:0000993C ; Attributes: bp-based frame
.text$mn:0000993C
.text$mn:0000993C ; void *__cdecl operator new(unsigned int, void *)
.text$mn:0000993C                 public ??2@YAPAXIPAX@Z
.text$mn:0000993C ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:0000993C                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:0000993C
.text$mn:0000993C arg_4           = dword ptr  0Ch
.text$mn:0000993C
.text$mn:0000993C                 push    ebp
.text$mn:0000993D                 mov     ebp, esp
.text$mn:0000993F                 mov     eax, [ebp+arg_4]
.text$mn:00009942                 pop     ebp
.text$mn:00009943                 retn
.text$mn:00009943 ??2@YAPAXIPAX@Z endp
.text$mn:00009943
.text$mn:00009943 _text$mn        ends
.text$mn:00009943
.text$mn:00009944 ; ===========================================================================
.text$mn:00009944
.text$mn:00009944 ; Segment type: Pure code
.text$mn:00009944 ; Segment permissions: Read/Execute
.text$mn:00009944 _text$mn        segment para public 'CODE' use32
.text$mn:00009944                 assume cs:_text$mn
.text$mn:00009944                 ;org 9944h
.text$mn:00009944 ; COMDAT (pick any)
.text$mn:00009944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009944
.text$mn:00009944 ; =============== S U B R O U T I N E =======================================
.text$mn:00009944
.text$mn:00009944 ; Attributes: bp-based frame
.text$mn:00009944
.text$mn:00009944 ; void *__cdecl std::locale::facet::operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
.text$mn:00009944                 public ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z
.text$mn:00009944 ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:00009944                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5Ap
.text$mn:00009944
.text$mn:00009944 arg_0           = dword ptr  8
.text$mn:00009944 arg_4           = dword ptr  0Ch
.text$mn:00009944 arg_8           = dword ptr  10h
.text$mn:00009944 arg_C           = dword ptr  14h
.text$mn:00009944
.text$mn:00009944                 push    ebp
.text$mn:00009945                 mov     ebp, esp
.text$mn:00009947                 mov     eax, [ebp+arg_C]
.text$mn:0000994A                 push    eax             ; int
.text$mn:0000994B                 mov     ecx, [ebp+arg_8]
.text$mn:0000994E                 push    ecx             ; char *
.text$mn:0000994F                 mov     edx, [ebp+arg_4]
.text$mn:00009952                 push    edx             ; struct std::_DebugHeapTag_t *
.text$mn:00009953                 mov     eax, [ebp+arg_0]
.text$mn:00009956                 push    eax             ; unsigned int
.text$mn:00009957                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:0000995C                 add     esp, 10h
.text$mn:0000995F                 pop     ebp
.text$mn:00009960                 retn
.text$mn:00009960 ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:00009960
.text$mn:00009960 ; ---------------------------------------------------------------------------
.text$mn:00009961                 align 4
.text$mn:00009961 _text$mn        ends
.text$mn:00009961
.text$mn:00009964 ; ===========================================================================
.text$mn:00009964
.text$mn:00009964 ; Segment type: Pure code
.text$mn:00009964 ; Segment permissions: Read/Execute
.text$mn:00009964 _text$mn        segment para public 'CODE' use32
.text$mn:00009964                 assume cs:_text$mn
.text$mn:00009964                 ;org 9964h
.text$mn:00009964 ; COMDAT (pick any)
.text$mn:00009964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009964
.text$mn:00009964 ; =============== S U B R O U T I N E =======================================
.text$mn:00009964
.text$mn:00009964 ; Attributes: bp-based frame
.text$mn:00009964
.text$mn:00009964 ; void __cdecl operator delete(void *)
.text$mn:00009964                 public ??3@YAXPAX0@Z
.text$mn:00009964 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00009964                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00009964                 push    ebp
.text$mn:00009965                 mov     ebp, esp
.text$mn:00009967                 pop     ebp
.text$mn:00009968                 retn
.text$mn:00009968 ??3@YAXPAX0@Z   endp
.text$mn:00009968
.text$mn:00009968 ; ---------------------------------------------------------------------------
.text$mn:00009969                 align 4
.text$mn:00009969 _text$mn        ends
.text$mn:00009969
.text$mn:0000996C ; ===========================================================================
.text$mn:0000996C
.text$mn:0000996C ; Segment type: Pure code
.text$mn:0000996C ; Segment permissions: Read/Execute
.text$mn:0000996C _text$mn        segment para public 'CODE' use32
.text$mn:0000996C                 assume cs:_text$mn
.text$mn:0000996C                 ;org 996Ch
.text$mn:0000996C ; COMDAT (pick any)
.text$mn:0000996C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000996C
.text$mn:0000996C ; =============== S U B R O U T I N E =======================================
.text$mn:0000996C
.text$mn:0000996C ; Attributes: bp-based frame
.text$mn:0000996C
.text$mn:0000996C ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:0000996C                 public ??3facet@locale@std@@SAXPAX@Z
.text$mn:0000996C ??3facet@locale@std@@SAXPAX@Z proc near ; CODE XREF: std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)+7p
.text$mn:0000996C                                         ; std::ctype<wchar_t>::`scalar deleting destructor'(uint)+1Bp ...
.text$mn:0000996C
.text$mn:0000996C Memory          = dword ptr  8
.text$mn:0000996C
.text$mn:0000996C                 push    ebp
.text$mn:0000996D                 mov     ebp, esp
.text$mn:0000996F                 mov     eax, [ebp+Memory]
.text$mn:00009972                 push    eax             ; Memory
.text$mn:00009973                 call    ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)
.text$mn:00009978                 add     esp, 4
.text$mn:0000997B                 pop     ebp
.text$mn:0000997C                 retn
.text$mn:0000997C ??3facet@locale@std@@SAXPAX@Z endp
.text$mn:0000997C
.text$mn:0000997C ; ---------------------------------------------------------------------------
.text$mn:0000997D                 align 10h
.text$mn:0000997D _text$mn        ends
.text$mn:0000997D
.text$mn:00009980 ; ===========================================================================
.text$mn:00009980
.text$mn:00009980 ; Segment type: Pure code
.text$mn:00009980 ; Segment permissions: Read/Execute
.text$mn:00009980 _text$mn        segment para public 'CODE' use32
.text$mn:00009980                 assume cs:_text$mn
.text$mn:00009980                 ;org 9980h
.text$mn:00009980 ; COMDAT (pick any)
.text$mn:00009980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009980
.text$mn:00009980 ; =============== S U B R O U T I N E =======================================
.text$mn:00009980
.text$mn:00009980 ; Attributes: bp-based frame
.text$mn:00009980
.text$mn:00009980 ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:00009980                 public ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z
.text$mn:00009980 ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:00009980                                         ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+12p
.text$mn:00009980
.text$mn:00009980 Memory          = dword ptr  8
.text$mn:00009980
.text$mn:00009980                 push    ebp
.text$mn:00009981                 mov     ebp, esp
.text$mn:00009983                 mov     eax, [ebp+Memory]
.text$mn:00009986                 push    eax             ; Memory
.text$mn:00009987                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:0000998C                 add     esp, 4
.text$mn:0000998F                 pop     ebp
.text$mn:00009990                 retn
.text$mn:00009990 ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:00009990
.text$mn:00009990 ; ---------------------------------------------------------------------------
.text$mn:00009991                 align 4
.text$mn:00009991 _text$mn        ends
.text$mn:00009991
.text$mn:00009994 ; ===========================================================================
.text$mn:00009994
.text$mn:00009994 ; Segment type: Pure code
.text$mn:00009994 ; Segment permissions: Read/Execute
.text$mn:00009994 _text$mn        segment para public 'CODE' use32
.text$mn:00009994                 assume cs:_text$mn
.text$mn:00009994                 ;org 9994h
.text$mn:00009994 ; COMDAT (pick any)
.text$mn:00009994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009994
.text$mn:00009994 ; =============== S U B R O U T I N E =======================================
.text$mn:00009994
.text$mn:00009994 ; Attributes: bp-based frame
.text$mn:00009994
.text$mn:00009994 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00009994                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00009994 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00009994                                         ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+189p
.text$mn:00009994                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+267p ...
.text$mn:00009994
.text$mn:00009994 var_2C          = dword ptr -2Ch
.text$mn:00009994 var_28          = dword ptr -28h
.text$mn:00009994 var_24          = dword ptr -24h
.text$mn:00009994 var_20          = dword ptr -20h
.text$mn:00009994 var_1C          = dword ptr -1Ch
.text$mn:00009994 var_18          = dword ptr -18h
.text$mn:00009994 var_14          = dword ptr -14h
.text$mn:00009994 var_F           = byte ptr -0Fh
.text$mn:00009994 var_E           = byte ptr -0Eh
.text$mn:00009994 var_D           = byte ptr -0Dh
.text$mn:00009994 var_C           = dword ptr -0Ch
.text$mn:00009994 var_4           = dword ptr -4
.text$mn:00009994 arg_0           = dword ptr  8
.text$mn:00009994
.text$mn:00009994                 push    ebp
.text$mn:00009995                 mov     ebp, esp
.text$mn:00009997                 push    0FFFFFFFFh
.text$mn:00009999                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:0000999E                 mov     eax, large fs:0
.text$mn:000099A4                 push    eax
.text$mn:000099A5                 sub     esp, 20h
.text$mn:000099A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000099AD                 xor     eax, ebp
.text$mn:000099AF                 push    eax
.text$mn:000099B0                 lea     eax, [ebp+var_C]
.text$mn:000099B3                 mov     large fs:0, eax
.text$mn:000099B9                 mov     [ebp+var_14], ecx
.text$mn:000099BC                 mov     eax, [ebp+var_14]
.text$mn:000099BF                 cmp     eax, [ebp+arg_0]
.text$mn:000099C2                 jz      loc_9A7B
.text$mn:000099C8                 push    0
.text$mn:000099CA                 push    1
.text$mn:000099CC                 mov     ecx, [ebp+var_14]
.text$mn:000099CF                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000099D4                 xor     ecx, ecx
.text$mn:000099D6                 jz      short loc_99ED
.text$mn:000099D8                 lea     edx, [ebp+var_D]
.text$mn:000099DB                 push    edx
.text$mn:000099DC                 mov     ecx, [ebp+arg_0]
.text$mn:000099DF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000099E4                 push    eax
.text$mn:000099E5                 mov     ecx, [ebp+var_14]
.text$mn:000099E8                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000099ED
.text$mn:000099ED loc_99ED:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:000099ED                 lea     eax, [ebp+var_E]
.text$mn:000099F0                 push    eax
.text$mn:000099F1                 mov     ecx, [ebp+arg_0]
.text$mn:000099F4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000099F9                 push    eax
.text$mn:000099FA                 lea     ecx, [ebp+var_F]
.text$mn:000099FD                 push    ecx
.text$mn:000099FE                 mov     ecx, [ebp+var_14]
.text$mn:00009A01                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009A06                 push    eax
.text$mn:00009A07                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009A0C                 add     esp, 8
.text$mn:00009A0F                 movzx   edx, al
.text$mn:00009A12                 test    edx, edx
.text$mn:00009A14                 jz      short loc_9A66
.text$mn:00009A16                 sub     esp, 0Ch
.text$mn:00009A19                 mov     eax, esp
.text$mn:00009A1B                 mov     [ebp+var_20], esp
.text$mn:00009A1E                 push    eax
.text$mn:00009A1F                 mov     ecx, [ebp+arg_0]
.text$mn:00009A22                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00009A27                 mov     [ebp+var_18], eax
.text$mn:00009A2A                 mov     ecx, [ebp+var_18]
.text$mn:00009A2D                 mov     [ebp+var_24], ecx
.text$mn:00009A30                 mov     [ebp+var_4], 0
.text$mn:00009A37                 sub     esp, 0Ch
.text$mn:00009A3A                 mov     edx, esp
.text$mn:00009A3C                 mov     [ebp+var_28], esp
.text$mn:00009A3F                 push    edx
.text$mn:00009A40                 mov     ecx, [ebp+arg_0]
.text$mn:00009A43                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00009A48                 mov     [ebp+var_1C], eax
.text$mn:00009A4B                 mov     eax, [ebp+var_1C]
.text$mn:00009A4E                 mov     [ebp+var_2C], eax
.text$mn:00009A51                 mov     byte ptr [ebp+var_4], 1
.text$mn:00009A55                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009A5C                 mov     ecx, [ebp+var_14]
.text$mn:00009A5F                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00009A64                 jmp     short loc_9A7B
.text$mn:00009A66 ; ---------------------------------------------------------------------------
.text$mn:00009A66
.text$mn:00009A66 loc_9A66:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00009A66                 mov     ecx, [ebp+arg_0]
.text$mn:00009A69                 push    ecx
.text$mn:00009A6A                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00009A6F                 add     esp, 4
.text$mn:00009A72                 push    eax
.text$mn:00009A73                 mov     ecx, [ebp+var_14]
.text$mn:00009A76                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00009A7B
.text$mn:00009A7B loc_9A7B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00009A7B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00009A7B                 mov     eax, [ebp+var_14]
.text$mn:00009A7E                 mov     ecx, [ebp+var_C]
.text$mn:00009A81                 mov     large fs:0, ecx
.text$mn:00009A88                 pop     ecx
.text$mn:00009A89                 mov     esp, ebp
.text$mn:00009A8B                 pop     ebp
.text$mn:00009A8C                 retn    4
.text$mn:00009A8C ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00009A8C
.text$mn:00009A8C ; ---------------------------------------------------------------------------
.text$mn:00009A8F                 align 10h
.text$mn:00009A8F _text$mn        ends
.text$mn:00009A8F
.text$x:00009A90 ; ===========================================================================
.text$x:00009A90
.text$x:00009A90 ; Segment type: Pure code
.text$x:00009A90 ; Segment permissions: Read/Execute
.text$x:00009A90 _text$x         segment para public 'CODE' use32
.text$x:00009A90                 assume cs:_text$x
.text$x:00009A90                 ;org 9A90h
.text$x:00009A90 ; COMDAT (pick associative to section at 9994)
.text$x:00009A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009A90
.text$x:00009A90 ; =============== S U B R O U T I N E =======================================
.text$x:00009A90
.text$x:00009A90
.text$x:00009A90 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00009A90                                         ; DATA XREF: .xdata$x:0000FD30o
.text$x:00009A90                 mov     ecx, [ebp-20h]
.text$x:00009A93                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009A93 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00009A93
.text$x:00009A98
.text$x:00009A98 ; =============== S U B R O U T I N E =======================================
.text$x:00009A98
.text$x:00009A98
.text$x:00009A98 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00009A98                                         ; DATA XREF: .xdata$x:0000FD38o
.text$x:00009A98                 mov     ecx, [ebp-28h]
.text$x:00009A9B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009A9B __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00009A9B
.text$x:00009AA0
.text$x:00009AA0 ; =============== S U B R O U T I N E =======================================
.text$x:00009AA0
.text$x:00009AA0
.text$x:00009AA0 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00009AA0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00009AA0
.text$x:00009AA0 arg_4           = dword ptr  8
.text$x:00009AA0
.text$x:00009AA0                 mov     edx, [esp+arg_4]
.text$x:00009AA4                 lea     eax, [edx+0Ch]
.text$x:00009AA7                 mov     ecx, [edx-24h]
.text$x:00009AAA                 xor     ecx, eax
.text$x:00009AAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009AB1                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00009AB6                 jmp     ___CxxFrameHandler3
.text$x:00009AB6 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00009AB6
.text$x:00009AB6 ; ---------------------------------------------------------------------------
.text$x:00009ABB                 align 4
.text$x:00009ABB _text$x         ends
.text$x:00009ABB
.text$mn:00009ABC ; ===========================================================================
.text$mn:00009ABC
.text$mn:00009ABC ; Segment type: Pure code
.text$mn:00009ABC ; Segment permissions: Read/Execute
.text$mn:00009ABC _text$mn        segment para public 'CODE' use32
.text$mn:00009ABC                 assume cs:_text$mn
.text$mn:00009ABC                 ;org 9ABCh
.text$mn:00009ABC ; COMDAT (pick any)
.text$mn:00009ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ABC
.text$mn:00009ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00009ABC
.text$mn:00009ABC ; Attributes: bp-based frame
.text$mn:00009ABC
.text$mn:00009ABC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00009ABC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00009ABC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00009ABC                                         ; CODE XREF: getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1ADp
.text$mn:00009ABC                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1B9p ...
.text$mn:00009ABC
.text$mn:00009ABC var_8           = dword ptr -8
.text$mn:00009ABC var_3           = byte ptr -3
.text$mn:00009ABC var_2           = byte ptr -2
.text$mn:00009ABC var_1           = byte ptr -1
.text$mn:00009ABC arg_0           = dword ptr  8
.text$mn:00009ABC
.text$mn:00009ABC                 push    ebp
.text$mn:00009ABD                 mov     ebp, esp
.text$mn:00009ABF                 sub     esp, 8
.text$mn:00009AC2                 mov     [ebp+var_8], ecx
.text$mn:00009AC5                 mov     eax, [ebp+var_8]
.text$mn:00009AC8                 cmp     eax, [ebp+arg_0]
.text$mn:00009ACB                 jz      short loc_9B27
.text$mn:00009ACD                 lea     ecx, [ebp+var_1]
.text$mn:00009AD0                 push    ecx
.text$mn:00009AD1                 mov     ecx, [ebp+arg_0]
.text$mn:00009AD4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009AD9                 push    eax
.text$mn:00009ADA                 lea     edx, [ebp+var_2]
.text$mn:00009ADD                 push    edx
.text$mn:00009ADE                 mov     ecx, [ebp+var_8]
.text$mn:00009AE1                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009AE6                 push    eax
.text$mn:00009AE7                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009AEC                 add     esp, 8
.text$mn:00009AEF                 movzx   eax, al
.text$mn:00009AF2                 test    eax, eax
.text$mn:00009AF4                 jz      short loc_9B1B
.text$mn:00009AF6                 xor     ecx, ecx
.text$mn:00009AF8                 jz      short loc_9B1B
.text$mn:00009AFA                 push    0
.text$mn:00009AFC                 push    1
.text$mn:00009AFE                 mov     ecx, [ebp+var_8]
.text$mn:00009B01                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009B06                 lea     edx, [ebp+var_3]
.text$mn:00009B09                 push    edx
.text$mn:00009B0A                 mov     ecx, [ebp+arg_0]
.text$mn:00009B0D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009B12                 push    eax
.text$mn:00009B13                 mov     ecx, [ebp+var_8]
.text$mn:00009B16                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009B1B
.text$mn:00009B1B loc_9B1B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:00009B1B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:00009B1B                 mov     eax, [ebp+arg_0]
.text$mn:00009B1E                 push    eax
.text$mn:00009B1F                 mov     ecx, [ebp+var_8]
.text$mn:00009B22                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00009B27
.text$mn:00009B27 loc_9B27:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:00009B27                 mov     eax, [ebp+var_8]
.text$mn:00009B2A                 mov     esp, ebp
.text$mn:00009B2C                 pop     ebp
.text$mn:00009B2D                 retn    4
.text$mn:00009B2D ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00009B2D
.text$mn:00009B2D _text$mn        ends
.text$mn:00009B2D
.text$mn:00009B30 ; ===========================================================================
.text$mn:00009B30
.text$mn:00009B30 ; Segment type: Pure code
.text$mn:00009B30 ; Segment permissions: Read/Execute
.text$mn:00009B30 _text$mn        segment para public 'CODE' use32
.text$mn:00009B30                 assume cs:_text$mn
.text$mn:00009B30                 ;org 9B30h
.text$mn:00009B30 ; COMDAT (pick any)
.text$mn:00009B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B30
.text$mn:00009B30 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B30
.text$mn:00009B30 ; Attributes: bp-based frame
.text$mn:00009B30
.text$mn:00009B30 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00009B30                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00009B30 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00009B30                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+2D3p
.text$mn:00009B30                                         ; AutoCompletion::setLanguage(LangType)+4E9p ...
.text$mn:00009B30
.text$mn:00009B30 var_4           = dword ptr -4
.text$mn:00009B30 Str             = dword ptr  8
.text$mn:00009B30
.text$mn:00009B30                 push    ebp
.text$mn:00009B31                 mov     ebp, esp
.text$mn:00009B33                 push    ecx
.text$mn:00009B34                 mov     [ebp+var_4], ecx
.text$mn:00009B37                 mov     eax, [ebp+Str]
.text$mn:00009B3A                 push    eax             ; Str
.text$mn:00009B3B                 mov     ecx, [ebp+var_4]
.text$mn:00009B3E                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00009B43                 mov     esp, ebp
.text$mn:00009B45                 pop     ebp
.text$mn:00009B46                 retn    4
.text$mn:00009B46 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00009B46
.text$mn:00009B46 ; ---------------------------------------------------------------------------
.text$mn:00009B49                 align 4
.text$mn:00009B49 _text$mn        ends
.text$mn:00009B49
.text$mn:00009B4C ; ===========================================================================
.text$mn:00009B4C
.text$mn:00009B4C ; Segment type: Pure code
.text$mn:00009B4C ; Segment permissions: Read/Execute
.text$mn:00009B4C _text$mn        segment para public 'CODE' use32
.text$mn:00009B4C                 assume cs:_text$mn
.text$mn:00009B4C                 ;org 9B4Ch
.text$mn:00009B4C ; COMDAT (pick any)
.text$mn:00009B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B4C
.text$mn:00009B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B4C
.text$mn:00009B4C ; Attributes: bp-based frame
.text$mn:00009B4C
.text$mn:00009B4C ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00009B4C                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00009B4C ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00009B4C                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00009B4C
.text$mn:00009B4C var_14          = byte ptr -14h
.text$mn:00009B4C var_10          = dword ptr -10h
.text$mn:00009B4C var_C           = dword ptr -0Ch
.text$mn:00009B4C var_4           = dword ptr -4
.text$mn:00009B4C arg_0           = dword ptr  8
.text$mn:00009B4C
.text$mn:00009B4C                 push    ebp
.text$mn:00009B4D                 mov     ebp, esp
.text$mn:00009B4F                 push    0FFFFFFFFh
.text$mn:00009B51                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00009B56                 mov     eax, large fs:0
.text$mn:00009B5C                 push    eax
.text$mn:00009B5D                 sub     esp, 8
.text$mn:00009B60                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009B65                 xor     eax, ebp
.text$mn:00009B67                 push    eax
.text$mn:00009B68                 lea     eax, [ebp+var_C]
.text$mn:00009B6B                 mov     large fs:0, eax
.text$mn:00009B71                 mov     [ebp+var_10], ecx
.text$mn:00009B74                 mov     eax, [ebp+var_10]
.text$mn:00009B77                 mov     ecx, [ebp+arg_0]
.text$mn:00009B7A                 mov     edx, [eax]
.text$mn:00009B7C                 cmp     edx, [ecx]
.text$mn:00009B7E                 jnz     short loc_9B82
.text$mn:00009B80                 jmp     short loc_9BC4
.text$mn:00009B82 ; ---------------------------------------------------------------------------
.text$mn:00009B82
.text$mn:00009B82 loc_9B82:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00009B82                 mov     eax, [ebp+arg_0]
.text$mn:00009B85                 cmp     dword ptr [eax], 0
.text$mn:00009B88                 jz      short loc_9B9C
.text$mn:00009B8A                 mov     ecx, [ebp+arg_0]
.text$mn:00009B8D                 mov     edx, [ecx]
.text$mn:00009B8F                 mov     eax, [edx]
.text$mn:00009B91                 push    eax             ; struct std::_Container_base12 *
.text$mn:00009B92                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009B95                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00009B9A                 jmp     short loc_9BC4
.text$mn:00009B9C ; ---------------------------------------------------------------------------
.text$mn:00009B9C
.text$mn:00009B9C loc_9B9C:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00009B9C                 push    3               ; int
.text$mn:00009B9E                 lea     ecx, [ebp+var_14] ; this
.text$mn:00009BA1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00009BA6                 mov     [ebp+var_4], 0
.text$mn:00009BAD                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009BB0                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00009BB5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009BBC                 lea     ecx, [ebp+var_14] ; this
.text$mn:00009BBF                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00009BC4
.text$mn:00009BC4 loc_9BC4:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00009BC4                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00009BC4                 mov     eax, [ebp+var_10]
.text$mn:00009BC7                 mov     ecx, [ebp+var_C]
.text$mn:00009BCA                 mov     large fs:0, ecx
.text$mn:00009BD1                 pop     ecx
.text$mn:00009BD2                 mov     esp, ebp
.text$mn:00009BD4                 pop     ebp
.text$mn:00009BD5                 retn    4
.text$mn:00009BD5 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00009BD5
.text$mn:00009BD5 _text$mn        ends
.text$mn:00009BD5
.text$x:00009BD8 ; ===========================================================================
.text$x:00009BD8
.text$x:00009BD8 ; Segment type: Pure code
.text$x:00009BD8 ; Segment permissions: Read/Execute
.text$x:00009BD8 _text$x         segment para public 'CODE' use32
.text$x:00009BD8                 assume cs:_text$x
.text$x:00009BD8                 ;org 9BD8h
.text$x:00009BD8 ; COMDAT (pick associative to section at 9B4C)
.text$x:00009BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009BD8
.text$x:00009BD8 ; =============== S U B R O U T I N E =======================================
.text$x:00009BD8
.text$x:00009BD8
.text$x:00009BD8 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00009BD8                                         ; DATA XREF: .xdata$x:0000F520o
.text$x:00009BD8                 lea     ecx, [ebp-14h]  ; this
.text$x:00009BDB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009BDB __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00009BDB
.text$x:00009BE0
.text$x:00009BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00009BE0
.text$x:00009BE0
.text$x:00009BE0 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00009BE0                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00009BE0
.text$x:00009BE0 arg_4           = dword ptr  8
.text$x:00009BE0
.text$x:00009BE0                 mov     edx, [esp+arg_4]
.text$x:00009BE4                 lea     eax, [edx+0Ch]
.text$x:00009BE7                 mov     ecx, [edx-0Ch]
.text$x:00009BEA                 xor     ecx, eax
.text$x:00009BEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009BF1                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00009BF6                 jmp     ___CxxFrameHandler3
.text$x:00009BF6 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00009BF6
.text$x:00009BF6 ; ---------------------------------------------------------------------------
.text$x:00009BFB                 align 4
.text$x:00009BFB _text$x         ends
.text$x:00009BFB
.text$mn:00009BFC ; ===========================================================================
.text$mn:00009BFC
.text$mn:00009BFC ; Segment type: Pure code
.text$mn:00009BFC ; Segment permissions: Read/Execute
.text$mn:00009BFC _text$mn        segment para public 'CODE' use32
.text$mn:00009BFC                 assume cs:_text$mn
.text$mn:00009BFC                 ;org 9BFCh
.text$mn:00009BFC ; COMDAT (pick any)
.text$mn:00009BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BFC
.text$mn:00009BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009BFC
.text$mn:00009BFC ; Attributes: bp-based frame
.text$mn:00009BFC
.text$mn:00009BFC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00009BFC                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00009BFC ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00009BFC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00009BFC
.text$mn:00009BFC var_8           = dword ptr -8
.text$mn:00009BFC var_4           = dword ptr -4
.text$mn:00009BFC arg_0           = dword ptr  8
.text$mn:00009BFC
.text$mn:00009BFC                 push    ebp
.text$mn:00009BFD                 mov     ebp, esp
.text$mn:00009BFF                 sub     esp, 8
.text$mn:00009C02                 mov     [ebp+var_4], ecx
.text$mn:00009C05                 mov     eax, [ebp+arg_0]
.text$mn:00009C08                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009C09                 mov     ecx, [ebp+var_4]
.text$mn:00009C0C                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009C11                 mov     ecx, [ebp+var_4]
.text$mn:00009C14                 mov     edx, [ebp+arg_0]
.text$mn:00009C17                 mov     eax, [ecx+8]
.text$mn:00009C1A                 cmp     eax, [edx+8]
.text$mn:00009C1D                 jnz     short loc_9C28
.text$mn:00009C1F                 mov     [ebp+var_8], 1
.text$mn:00009C26                 jmp     short loc_9C2F
.text$mn:00009C28 ; ---------------------------------------------------------------------------
.text$mn:00009C28
.text$mn:00009C28 loc_9C28:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00009C28                 mov     [ebp+var_8], 0
.text$mn:00009C2F
.text$mn:00009C2F loc_9C2F:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:00009C2F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00009C32                 mov     esp, ebp
.text$mn:00009C34                 pop     ebp
.text$mn:00009C35                 retn    4
.text$mn:00009C35 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00009C35
.text$mn:00009C35 _text$mn        ends
.text$mn:00009C35
.text$mn:00009C38 ; ===========================================================================
.text$mn:00009C38
.text$mn:00009C38 ; Segment type: Pure code
.text$mn:00009C38 ; Segment permissions: Read/Execute
.text$mn:00009C38 _text$mn        segment para public 'CODE' use32
.text$mn:00009C38                 assume cs:_text$mn
.text$mn:00009C38                 ;org 9C38h
.text$mn:00009C38 ; COMDAT (pick any)
.text$mn:00009C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C38
.text$mn:00009C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C38
.text$mn:00009C38 ; Attributes: bp-based frame
.text$mn:00009C38
.text$mn:00009C38 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator==(std::_Iterator_base12 *)
.text$mn:00009C38                 public ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00009C38 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00009C38                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator!=(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+10p
.text$mn:00009C38
.text$mn:00009C38 var_8           = dword ptr -8
.text$mn:00009C38 var_4           = dword ptr -4
.text$mn:00009C38 arg_0           = dword ptr  8
.text$mn:00009C38
.text$mn:00009C38                 push    ebp
.text$mn:00009C39                 mov     ebp, esp
.text$mn:00009C3B                 sub     esp, 8
.text$mn:00009C3E                 mov     [ebp+var_4], ecx
.text$mn:00009C41                 mov     eax, [ebp+arg_0]
.text$mn:00009C44                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009C45                 mov     ecx, [ebp+var_4]
.text$mn:00009C48                 call    ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00009C4D                 mov     ecx, [ebp+var_4]
.text$mn:00009C50                 mov     edx, [ebp+arg_0]
.text$mn:00009C53                 mov     eax, [ecx+8]
.text$mn:00009C56                 cmp     eax, [edx+8]
.text$mn:00009C59                 jnz     short loc_9C64
.text$mn:00009C5B                 mov     [ebp+var_8], 1
.text$mn:00009C62                 jmp     short loc_9C6B
.text$mn:00009C64 ; ---------------------------------------------------------------------------
.text$mn:00009C64
.text$mn:00009C64 loc_9C64:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator==(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+21j
.text$mn:00009C64                 mov     [ebp+var_8], 0
.text$mn:00009C6B
.text$mn:00009C6B loc_9C6B:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator==(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Aj
.text$mn:00009C6B                 mov     al, byte ptr [ebp+var_8]
.text$mn:00009C6E                 mov     esp, ebp
.text$mn:00009C70                 pop     ebp
.text$mn:00009C71                 retn    4
.text$mn:00009C71 ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00009C71
.text$mn:00009C71 _text$mn        ends
.text$mn:00009C71
.text$mn:00009C74 ; ===========================================================================
.text$mn:00009C74
.text$mn:00009C74 ; Segment type: Pure code
.text$mn:00009C74 ; Segment permissions: Read/Execute
.text$mn:00009C74 _text$mn        segment para public 'CODE' use32
.text$mn:00009C74                 assume cs:_text$mn
.text$mn:00009C74                 ;org 9C74h
.text$mn:00009C74 ; COMDAT (pick any)
.text$mn:00009C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C74
.text$mn:00009C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C74
.text$mn:00009C74 ; Attributes: bp-based frame
.text$mn:00009C74
.text$mn:00009C74 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00009C74                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00009C74 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00009C74                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00009C74                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00009C74
.text$mn:00009C74 var_8           = dword ptr -8
.text$mn:00009C74 var_4           = dword ptr -4
.text$mn:00009C74 arg_0           = dword ptr  8
.text$mn:00009C74
.text$mn:00009C74                 push    ebp
.text$mn:00009C75                 mov     ebp, esp
.text$mn:00009C77                 sub     esp, 8
.text$mn:00009C7A                 mov     [ebp+var_8], ecx
.text$mn:00009C7D                 mov     eax, [ebp+var_8]
.text$mn:00009C80                 cmp     eax, [ebp+arg_0]
.text$mn:00009C83                 jnz     short loc_9C8E
.text$mn:00009C85                 mov     [ebp+var_4], 1
.text$mn:00009C8C                 jmp     short loc_9C95
.text$mn:00009C8E ; ---------------------------------------------------------------------------
.text$mn:00009C8E
.text$mn:00009C8E loc_9C8E:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00009C8E                 mov     [ebp+var_4], 0
.text$mn:00009C95
.text$mn:00009C95 loc_9C95:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00009C95                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009C98                 mov     esp, ebp
.text$mn:00009C9A                 pop     ebp
.text$mn:00009C9B                 retn    4
.text$mn:00009C9B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00009C9B
.text$mn:00009C9B ; ---------------------------------------------------------------------------
.text$mn:00009C9E                 align 10h
.text$mn:00009C9E _text$mn        ends
.text$mn:00009C9E
.text$mn:00009CA0 ; ===========================================================================
.text$mn:00009CA0
.text$mn:00009CA0 ; Segment type: Pure code
.text$mn:00009CA0 ; Segment permissions: Read/Execute
.text$mn:00009CA0 _text$mn        segment para public 'CODE' use32
.text$mn:00009CA0                 assume cs:_text$mn
.text$mn:00009CA0                 ;org 9CA0h
.text$mn:00009CA0 ; COMDAT (pick any)
.text$mn:00009CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CA0
.text$mn:00009CA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CA0
.text$mn:00009CA0 ; Attributes: bp-based frame
.text$mn:00009CA0
.text$mn:00009CA0 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00009CA0                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00009CA0 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00009CA0                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00009CA0
.text$mn:00009CA0 var_8           = dword ptr -8
.text$mn:00009CA0 var_4           = dword ptr -4
.text$mn:00009CA0 arg_0           = dword ptr  8
.text$mn:00009CA0
.text$mn:00009CA0                 push    ebp
.text$mn:00009CA1                 mov     ebp, esp
.text$mn:00009CA3                 sub     esp, 8
.text$mn:00009CA6                 push    esi
.text$mn:00009CA7                 mov     [ebp+var_4], ecx
.text$mn:00009CAA                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009CAD                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00009CB2                 push    eax
.text$mn:00009CB3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009CB6                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00009CBB                 mov     ecx, eax
.text$mn:00009CBD                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00009CC2                 movzx   eax, al
.text$mn:00009CC5                 test    eax, eax
.text$mn:00009CC7                 jz      short loc_9CE8
.text$mn:00009CC9                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009CCC                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00009CD1                 mov     esi, eax
.text$mn:00009CD3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009CD6                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00009CDB                 cmp     esi, eax
.text$mn:00009CDD                 jnz     short loc_9CE8
.text$mn:00009CDF                 mov     [ebp+var_8], 1
.text$mn:00009CE6                 jmp     short loc_9CEF
.text$mn:00009CE8 ; ---------------------------------------------------------------------------
.text$mn:00009CE8
.text$mn:00009CE8 loc_9CE8:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00009CE8                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00009CE8                 mov     [ebp+var_8], 0
.text$mn:00009CEF
.text$mn:00009CEF loc_9CEF:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00009CEF                 mov     al, byte ptr [ebp+var_8]
.text$mn:00009CF2                 pop     esi
.text$mn:00009CF3                 mov     esp, ebp
.text$mn:00009CF5                 pop     ebp
.text$mn:00009CF6                 retn    4
.text$mn:00009CF6 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00009CF6
.text$mn:00009CF6 ; ---------------------------------------------------------------------------
.text$mn:00009CF9                 align 4
.text$mn:00009CF9 _text$mn        ends
.text$mn:00009CF9
.text$mn:00009CFC ; ===========================================================================
.text$mn:00009CFC
.text$mn:00009CFC ; Segment type: Pure code
.text$mn:00009CFC ; Segment permissions: Read/Execute
.text$mn:00009CFC _text$mn        segment para public 'CODE' use32
.text$mn:00009CFC                 assume cs:_text$mn
.text$mn:00009CFC                 ;org 9CFCh
.text$mn:00009CFC ; COMDAT (pick any)
.text$mn:00009CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CFC
.text$mn:00009CFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009CFC
.text$mn:00009CFC ; Attributes: bp-based frame
.text$mn:00009CFC
.text$mn:00009CFC ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator!=(std::_Iterator_base12 *)
.text$mn:00009CFC                 public ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00009CFC ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00009CFC                                         ; CODE XREF: std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+30p
.text$mn:00009CFC
.text$mn:00009CFC var_8           = dword ptr -8
.text$mn:00009CFC var_4           = dword ptr -4
.text$mn:00009CFC arg_0           = dword ptr  8
.text$mn:00009CFC
.text$mn:00009CFC                 push    ebp
.text$mn:00009CFD                 mov     ebp, esp
.text$mn:00009CFF                 sub     esp, 8
.text$mn:00009D02                 mov     [ebp+var_8], ecx
.text$mn:00009D05                 mov     eax, [ebp+arg_0]
.text$mn:00009D08                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009D09                 mov     ecx, [ebp+var_8]
.text$mn:00009D0C                 call    ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator==(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00009D11                 movzx   ecx, al
.text$mn:00009D14                 test    ecx, ecx
.text$mn:00009D16                 jnz     short loc_9D21
.text$mn:00009D18                 mov     [ebp+var_4], 1
.text$mn:00009D1F                 jmp     short loc_9D28
.text$mn:00009D21 ; ---------------------------------------------------------------------------
.text$mn:00009D21
.text$mn:00009D21 loc_9D21:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator!=(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+1Aj
.text$mn:00009D21                 mov     [ebp+var_4], 0
.text$mn:00009D28
.text$mn:00009D28 loc_9D28:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator!=(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+23j
.text$mn:00009D28                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009D2B                 mov     esp, ebp
.text$mn:00009D2D                 pop     ebp
.text$mn:00009D2E                 retn    4
.text$mn:00009D2E ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00009D2E
.text$mn:00009D2E ; ---------------------------------------------------------------------------
.text$mn:00009D31                 align 4
.text$mn:00009D31 _text$mn        ends
.text$mn:00009D31
.text$mn:00009D34 ; ===========================================================================
.text$mn:00009D34
.text$mn:00009D34 ; Segment type: Pure code
.text$mn:00009D34 ; Segment permissions: Read/Execute
.text$mn:00009D34 _text$mn        segment para public 'CODE' use32
.text$mn:00009D34                 assume cs:_text$mn
.text$mn:00009D34                 ;org 9D34h
.text$mn:00009D34 ; COMDAT (pick any)
.text$mn:00009D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D34
.text$mn:00009D34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D34
.text$mn:00009D34 ; Attributes: bp-based frame
.text$mn:00009D34
.text$mn:00009D34 ; public: wchar_t & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator[](unsigned int)
.text$mn:00009D34                 public ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
.text$mn:00009D34 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z proc near
.text$mn:00009D34                                         ; CODE XREF: addTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+4Dp
.text$mn:00009D34                                         ; removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+4Dp ...
.text$mn:00009D34
.text$mn:00009D34 var_4           = dword ptr -4
.text$mn:00009D34 arg_0           = dword ptr  8
.text$mn:00009D34
.text$mn:00009D34                 push    ebp
.text$mn:00009D35                 mov     ebp, esp
.text$mn:00009D37                 push    ecx
.text$mn:00009D38                 mov     [ebp+var_4], ecx
.text$mn:00009D3B                 mov     eax, [ebp+var_4]
.text$mn:00009D3E                 mov     ecx, [eax+14h]
.text$mn:00009D41                 cmp     ecx, [ebp+arg_0]
.text$mn:00009D44                 jnb     short loc_9D5D
.text$mn:00009D46                 push    695h            ; unsigned int
.text$mn:00009D4B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009D50                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:00009D55                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009D5A                 add     esp, 0Ch
.text$mn:00009D5D
.text$mn:00009D5D loc_9D5D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+10j
.text$mn:00009D5D                 mov     ecx, [ebp+var_4]
.text$mn:00009D60                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009D65                 mov     edx, [ebp+arg_0]
.text$mn:00009D68                 lea     eax, [eax+edx*2]
.text$mn:00009D6B                 mov     esp, ebp
.text$mn:00009D6D                 pop     ebp
.text$mn:00009D6E                 retn    4
.text$mn:00009D6E ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z endp
.text$mn:00009D6E
.text$mn:00009D6E ; ---------------------------------------------------------------------------
.text$mn:00009D71                 align 4
.text$mn:00009D71 _text$mn        ends
.text$mn:00009D71
.text$mn:00009D74 ; ===========================================================================
.text$mn:00009D74
.text$mn:00009D74 ; Segment type: Pure code
.text$mn:00009D74 ; Segment permissions: Read/Execute
.text$mn:00009D74 _text$mn        segment para public 'CODE' use32
.text$mn:00009D74                 assume cs:_text$mn
.text$mn:00009D74                 ;org 9D74h
.text$mn:00009D74 ; COMDAT (pick any)
.text$mn:00009D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D74
.text$mn:00009D74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D74
.text$mn:00009D74 ; Attributes: bp-based frame
.text$mn:00009D74
.text$mn:00009D74 ; public: wchar_t const & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator[](unsigned int)const
.text$mn:00009D74                 public ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
.text$mn:00009D74 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z proc near
.text$mn:00009D74                                         ; CODE XREF: Buffer::isUserDefineLangExt(void)+11p
.text$mn:00009D74
.text$mn:00009D74 var_4           = dword ptr -4
.text$mn:00009D74 arg_0           = dword ptr  8
.text$mn:00009D74
.text$mn:00009D74                 push    ebp
.text$mn:00009D75                 mov     ebp, esp
.text$mn:00009D77                 push    ecx
.text$mn:00009D78                 mov     [ebp+var_4], ecx
.text$mn:00009D7B                 mov     eax, [ebp+var_4]
.text$mn:00009D7E                 mov     ecx, [eax+14h]
.text$mn:00009D81                 cmp     ecx, [ebp+arg_0]
.text$mn:00009D84                 jnb     short loc_9D9D
.text$mn:00009D86                 push    6A2h            ; unsigned int
.text$mn:00009D8B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009D90                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:00009D95                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009D9A                 add     esp, 0Ch
.text$mn:00009D9D
.text$mn:00009D9D loc_9D9D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+10j
.text$mn:00009D9D                 mov     ecx, [ebp+var_4]
.text$mn:00009DA0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009DA5                 mov     edx, [ebp+arg_0]
.text$mn:00009DA8                 lea     eax, [eax+edx*2]
.text$mn:00009DAB                 mov     esp, ebp
.text$mn:00009DAD                 pop     ebp
.text$mn:00009DAE                 retn    4
.text$mn:00009DAE ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z endp
.text$mn:00009DAE
.text$mn:00009DAE ; ---------------------------------------------------------------------------
.text$mn:00009DB1                 align 4
.text$mn:00009DB1 _text$mn        ends
.text$mn:00009DB1
.text$mn:00009DB4 ; ===========================================================================
.text$mn:00009DB4
.text$mn:00009DB4 ; Segment type: Pure code
.text$mn:00009DB4 ; Segment permissions: Read/Execute
.text$mn:00009DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009DB4                 assume cs:_text$mn
.text$mn:00009DB4                 ;org 9DB4h
.text$mn:00009DB4 ; COMDAT (pick any)
.text$mn:00009DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DB4
.text$mn:00009DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DB4
.text$mn:00009DB4 ; Attributes: bp-based frame
.text$mn:00009DB4
.text$mn:00009DB4 ; public: struct std::pair<char, char> const & __thiscall std::vector<struct std::pair<char, char>, class std::allocator<struct std::pair<char, char>>>::operator[](unsigned int)const
.text$mn:00009DB4                 public ??A?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEABU?$pair@DD@1@I@Z
.text$mn:00009DB4 ??A?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEABU?$pair@DD@1@I@Z proc near
.text$mn:00009DB4                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+90p
.text$mn:00009DB4                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+B8p
.text$mn:00009DB4
.text$mn:00009DB4 var_4           = dword ptr -4
.text$mn:00009DB4 arg_0           = dword ptr  8
.text$mn:00009DB4
.text$mn:00009DB4                 push    ebp
.text$mn:00009DB5                 mov     ebp, esp
.text$mn:00009DB7                 push    ecx
.text$mn:00009DB8                 mov     [ebp+var_4], ecx
.text$mn:00009DBB                 mov     ecx, [ebp+var_4]
.text$mn:00009DBE                 call    ?size@?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::size(void)
.text$mn:00009DC3                 cmp     eax, [ebp+arg_0]
.text$mn:00009DC6                 ja      short loc_9E30
.text$mn:00009DC8                 push    4A1h            ; unsigned int
.text$mn:00009DCD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009DD2                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009DD7                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009DDC                 add     esp, 0Ch
.text$mn:00009DDF                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009DE4                 test    eax, eax
.text$mn:00009DE6                 jz      short loc_9DEC
.text$mn:00009DE8                 xor     ecx, ecx
.text$mn:00009DEA                 jnz     short loc_9E12
.text$mn:00009DEC
.text$mn:00009DEC loc_9DEC:                               ; CODE XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+32j
.text$mn:00009DEC                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009DF1                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009DF6                 push    0
.text$mn:00009DF8                 push    4A2h
.text$mn:00009DFD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009E02                 push    2
.text$mn:00009E04                 call    __CrtDbgReportW
.text$mn:00009E09                 add     esp, 18h
.text$mn:00009E0C                 cmp     eax, 1
.text$mn:00009E0F                 jnz     short loc_9E12
.text$mn:00009E11                 int     3               ; Trap to Debugger
.text$mn:00009E12
.text$mn:00009E12 loc_9E12:                               ; CODE XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+36j
.text$mn:00009E12                                         ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+5Bj
.text$mn:00009E12                 push    0
.text$mn:00009E14                 push    4A2h
.text$mn:00009E19                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009E1E                 push    offset ??_C@_1NE@NHMFFEGJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa@ ; "std::vector<struct std::pair<char,char>"...
.text$mn:00009E23                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009E28                 call    __invalid_parameter
.text$mn:00009E2D                 add     esp, 14h
.text$mn:00009E30
.text$mn:00009E30 loc_9E30:                               ; CODE XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+12j
.text$mn:00009E30                 mov     eax, [ebp+var_4]
.text$mn:00009E33                 mov     ecx, [eax+4]
.text$mn:00009E36                 mov     edx, [ebp+arg_0]
.text$mn:00009E39                 lea     eax, [ecx+edx*2]
.text$mn:00009E3C                 mov     esp, ebp
.text$mn:00009E3E                 pop     ebp
.text$mn:00009E3F                 retn    4
.text$mn:00009E3F ??A?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEABU?$pair@DD@1@I@Z endp
.text$mn:00009E3F
.text$mn:00009E3F ; ---------------------------------------------------------------------------
.text$mn:00009E42                 align 4
.text$mn:00009E42 _text$mn        ends
.text$mn:00009E42
.text$mn:00009E44 ; ===========================================================================
.text$mn:00009E44
.text$mn:00009E44 ; Segment type: Pure code
.text$mn:00009E44 ; Segment permissions: Read/Execute
.text$mn:00009E44 _text$mn        segment para public 'CODE' use32
.text$mn:00009E44                 assume cs:_text$mn
.text$mn:00009E44                 ;org 9E44h
.text$mn:00009E44 ; COMDAT (pick any)
.text$mn:00009E44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E44
.text$mn:00009E44 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E44
.text$mn:00009E44 ; Attributes: bp-based frame
.text$mn:00009E44
.text$mn:00009E44 ; public: struct MatchedCharInserted & __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::operator[](unsigned int)
.text$mn:00009E44                 public ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z
.text$mn:00009E44 ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z proc near
.text$mn:00009E44                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+74p
.text$mn:00009E44                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+A7p ...
.text$mn:00009E44
.text$mn:00009E44 var_4           = dword ptr -4
.text$mn:00009E44 arg_0           = dword ptr  8
.text$mn:00009E44
.text$mn:00009E44                 push    ebp
.text$mn:00009E45                 mov     ebp, esp
.text$mn:00009E47                 push    ecx
.text$mn:00009E48                 mov     [ebp+var_4], ecx
.text$mn:00009E4B                 mov     ecx, [ebp+var_4]
.text$mn:00009E4E                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:00009E53                 cmp     eax, [ebp+arg_0]
.text$mn:00009E56                 ja      short loc_9EC0
.text$mn:00009E58                 push    4B1h            ; unsigned int
.text$mn:00009E5D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009E62                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009E67                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009E6C                 add     esp, 0Ch
.text$mn:00009E6F                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009E74                 test    eax, eax
.text$mn:00009E76                 jz      short loc_9E7C
.text$mn:00009E78                 xor     ecx, ecx
.text$mn:00009E7A                 jnz     short loc_9EA2
.text$mn:00009E7C
.text$mn:00009E7C loc_9E7C:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+32j
.text$mn:00009E7C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009E81                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009E86                 push    0
.text$mn:00009E88                 push    4B2h
.text$mn:00009E8D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009E92                 push    2
.text$mn:00009E94                 call    __CrtDbgReportW
.text$mn:00009E99                 add     esp, 18h
.text$mn:00009E9C                 cmp     eax, 1
.text$mn:00009E9F                 jnz     short loc_9EA2
.text$mn:00009EA1                 int     3               ; Trap to Debugger
.text$mn:00009EA2
.text$mn:00009EA2 loc_9EA2:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+36j
.text$mn:00009EA2                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+5Bj
.text$mn:00009EA2                 push    0
.text$mn:00009EA4                 push    4B2h
.text$mn:00009EA9                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009EAE                 push    offset ??_C@_1MO@CFNABMPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAM?$AAa?$AAt?$AAc?$AAh?$AAe?$AAd?$AAC?$AAh?$AAa?$AAr?$AAI?$AAn@ ; "std::vector<struct MatchedCharInserted,"...
.text$mn:00009EB3                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009EB8                 call    __invalid_parameter
.text$mn:00009EBD                 add     esp, 14h
.text$mn:00009EC0
.text$mn:00009EC0 loc_9EC0:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+12j
.text$mn:00009EC0                 mov     eax, [ebp+var_4]
.text$mn:00009EC3                 mov     ecx, [eax+4]
.text$mn:00009EC6                 mov     edx, [ebp+arg_0]
.text$mn:00009EC9                 lea     eax, [ecx+edx*8]
.text$mn:00009ECC                 mov     esp, ebp
.text$mn:00009ECE                 pop     ebp
.text$mn:00009ECF                 retn    4
.text$mn:00009ECF ??A?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEAAUMatchedCharInserted@@I@Z endp
.text$mn:00009ECF
.text$mn:00009ECF ; ---------------------------------------------------------------------------
.text$mn:00009ED2                 align 4
.text$mn:00009ED2 _text$mn        ends
.text$mn:00009ED2
.text$mn:00009ED4 ; ===========================================================================
.text$mn:00009ED4
.text$mn:00009ED4 ; Segment type: Pure code
.text$mn:00009ED4 ; Segment permissions: Read/Execute
.text$mn:00009ED4 _text$mn        segment para public 'CODE' use32
.text$mn:00009ED4                 assume cs:_text$mn
.text$mn:00009ED4                 ;org 9ED4h
.text$mn:00009ED4 ; COMDAT (pick any)
.text$mn:00009ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ED4
.text$mn:00009ED4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009ED4
.text$mn:00009ED4 ; Attributes: bp-based frame
.text$mn:00009ED4
.text$mn:00009ED4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)
.text$mn:00009ED4                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00009ED4 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00009ED4                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+6EAp
.text$mn:00009ED4                                         ; AutoCompletion::showWordComplete(bool)+19Ep ...
.text$mn:00009ED4
.text$mn:00009ED4 var_4           = dword ptr -4
.text$mn:00009ED4 arg_0           = dword ptr  8
.text$mn:00009ED4
.text$mn:00009ED4                 push    ebp
.text$mn:00009ED5                 mov     ebp, esp
.text$mn:00009ED7                 push    ecx
.text$mn:00009ED8                 mov     [ebp+var_4], ecx
.text$mn:00009EDB                 mov     ecx, [ebp+var_4]
.text$mn:00009EDE                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00009EE3                 cmp     eax, [ebp+arg_0]
.text$mn:00009EE6                 ja      short loc_9F50
.text$mn:00009EE8                 push    4B1h            ; unsigned int
.text$mn:00009EED                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009EF2                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009EF7                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009EFC                 add     esp, 0Ch
.text$mn:00009EFF                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009F04                 test    eax, eax
.text$mn:00009F06                 jz      short loc_9F0C
.text$mn:00009F08                 xor     ecx, ecx
.text$mn:00009F0A                 jnz     short loc_9F32
.text$mn:00009F0C
.text$mn:00009F0C loc_9F0C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00009F0C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009F11                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009F16                 push    0
.text$mn:00009F18                 push    4B2h
.text$mn:00009F1D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009F22                 push    2
.text$mn:00009F24                 call    __CrtDbgReportW
.text$mn:00009F29                 add     esp, 18h
.text$mn:00009F2C                 cmp     eax, 1
.text$mn:00009F2F                 jnz     short loc_9F32
.text$mn:00009F31                 int     3               ; Trap to Debugger
.text$mn:00009F32
.text$mn:00009F32 loc_9F32:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:00009F32                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:00009F32                 push    0
.text$mn:00009F34                 push    4B2h
.text$mn:00009F39                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009F3E                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:00009F43                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009F48                 call    __invalid_parameter
.text$mn:00009F4D                 add     esp, 14h
.text$mn:00009F50
.text$mn:00009F50 loc_9F50:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:00009F50                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00009F54                 mov     ecx, [ebp+var_4]
.text$mn:00009F57                 add     eax, [ecx+4]
.text$mn:00009F5A                 mov     esp, ebp
.text$mn:00009F5C                 pop     ebp
.text$mn:00009F5D                 retn    4
.text$mn:00009F5D ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:00009F5D
.text$mn:00009F5D _text$mn        ends
.text$mn:00009F5D
.text$mn:00009F60 ; ===========================================================================
.text$mn:00009F60
.text$mn:00009F60 ; Segment type: Pure code
.text$mn:00009F60 ; Segment permissions: Read/Execute
.text$mn:00009F60 _text$mn        segment para public 'CODE' use32
.text$mn:00009F60                 assume cs:_text$mn
.text$mn:00009F60                 ;org 9F60h
.text$mn:00009F60 ; COMDAT (pick any)
.text$mn:00009F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F60
.text$mn:00009F60 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F60
.text$mn:00009F60 ; Attributes: bp-based frame
.text$mn:00009F60
.text$mn:00009F60 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)const
.text$mn:00009F60                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00009F60 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00009F60                                         ; CODE XREF: isInList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+5Cp
.text$mn:00009F60
.text$mn:00009F60 var_4           = dword ptr -4
.text$mn:00009F60 arg_0           = dword ptr  8
.text$mn:00009F60
.text$mn:00009F60                 push    ebp
.text$mn:00009F61                 mov     ebp, esp
.text$mn:00009F63                 push    ecx
.text$mn:00009F64                 mov     [ebp+var_4], ecx
.text$mn:00009F67                 mov     ecx, [ebp+var_4]
.text$mn:00009F6A                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00009F6F                 cmp     eax, [ebp+arg_0]
.text$mn:00009F72                 ja      short loc_9FDC
.text$mn:00009F74                 push    4A1h            ; unsigned int
.text$mn:00009F79                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009F7E                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009F83                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009F88                 add     esp, 0Ch
.text$mn:00009F8B                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009F90                 test    eax, eax
.text$mn:00009F92                 jz      short loc_9F98
.text$mn:00009F94                 xor     ecx, ecx
.text$mn:00009F96                 jnz     short loc_9FBE
.text$mn:00009F98
.text$mn:00009F98 loc_9F98:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00009F98                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009F9D                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009FA2                 push    0
.text$mn:00009FA4                 push    4A2h
.text$mn:00009FA9                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009FAE                 push    2
.text$mn:00009FB0                 call    __CrtDbgReportW
.text$mn:00009FB5                 add     esp, 18h
.text$mn:00009FB8                 cmp     eax, 1
.text$mn:00009FBB                 jnz     short loc_9FBE
.text$mn:00009FBD                 int     3               ; Trap to Debugger
.text$mn:00009FBE
.text$mn:00009FBE loc_9FBE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:00009FBE                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:00009FBE                 push    0
.text$mn:00009FC0                 push    4A2h
.text$mn:00009FC5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009FCA                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:00009FCF                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009FD4                 call    __invalid_parameter
.text$mn:00009FD9                 add     esp, 14h
.text$mn:00009FDC
.text$mn:00009FDC loc_9FDC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:00009FDC                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00009FE0                 mov     ecx, [ebp+var_4]
.text$mn:00009FE3                 add     eax, [ecx+4]
.text$mn:00009FE6                 mov     esp, ebp
.text$mn:00009FE8                 pop     ebp
.text$mn:00009FE9                 retn    4
.text$mn:00009FE9 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:00009FE9
.text$mn:00009FE9 _text$mn        ends
.text$mn:00009FE9
.text$mn:00009FEC ; ===========================================================================
.text$mn:00009FEC
.text$mn:00009FEC ; Segment type: Pure code
.text$mn:00009FEC ; Segment permissions: Read/Execute
.text$mn:00009FEC _text$mn        segment para public 'CODE' use32
.text$mn:00009FEC                 assume cs:_text$mn
.text$mn:00009FEC                 ;org 9FECh
.text$mn:00009FEC ; COMDAT (pick any)
.text$mn:00009FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FEC
.text$mn:00009FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00009FEC
.text$mn:00009FEC ; Attributes: bp-based frame
.text$mn:00009FEC
.text$mn:00009FEC ; public: __thiscall std::locale::id::operator unsigned int(void)
.text$mn:00009FEC                 public ??Bid@locale@std@@QAEIXZ
.text$mn:00009FEC ??Bid@locale@std@@QAEIXZ proc near      ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+43p
.text$mn:00009FEC
.text$mn:00009FEC var_14          = byte ptr -14h
.text$mn:00009FEC var_10          = dword ptr -10h
.text$mn:00009FEC var_C           = dword ptr -0Ch
.text$mn:00009FEC var_4           = dword ptr -4
.text$mn:00009FEC
.text$mn:00009FEC                 push    ebp
.text$mn:00009FED                 mov     ebp, esp
.text$mn:00009FEF                 push    0FFFFFFFFh
.text$mn:00009FF1                 push    offset __ehhandler$??Bid@locale@std@@QAEIXZ
.text$mn:00009FF6                 mov     eax, large fs:0
.text$mn:00009FFC                 push    eax
.text$mn:00009FFD                 sub     esp, 8
.text$mn:0000A000                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A005                 xor     eax, ebp
.text$mn:0000A007                 push    eax
.text$mn:0000A008                 lea     eax, [ebp+var_C]
.text$mn:0000A00B                 mov     large fs:0, eax
.text$mn:0000A011                 mov     [ebp+var_10], ecx
.text$mn:0000A014                 mov     eax, [ebp+var_10]
.text$mn:0000A017                 cmp     dword ptr [eax], 0
.text$mn:0000A01A                 jnz     short loc_A05E
.text$mn:0000A01C                 push    0               ; int
.text$mn:0000A01E                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000A021                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000A026                 mov     [ebp+var_4], 0
.text$mn:0000A02D                 mov     ecx, [ebp+var_10]
.text$mn:0000A030                 cmp     dword ptr [ecx], 0
.text$mn:0000A033                 jnz     short loc_A04F
.text$mn:0000A035                 mov     edx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:0000A03B                 add     edx, 1
.text$mn:0000A03E                 mov     dword ptr ds:?_Id_cnt@id@locale@std@@0HA, edx ; int std::locale::id::_Id_cnt
.text$mn:0000A044                 mov     eax, [ebp+var_10]
.text$mn:0000A047                 mov     ecx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:0000A04D                 mov     [eax], ecx
.text$mn:0000A04F
.text$mn:0000A04F loc_A04F:                               ; CODE XREF: std::locale::id::operator uint(void)+47j
.text$mn:0000A04F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A056                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000A059                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000A05E
.text$mn:0000A05E loc_A05E:                               ; CODE XREF: std::locale::id::operator uint(void)+2Ej
.text$mn:0000A05E                 mov     edx, [ebp+var_10]
.text$mn:0000A061                 mov     eax, [edx]
.text$mn:0000A063                 mov     ecx, [ebp+var_C]
.text$mn:0000A066                 mov     large fs:0, ecx
.text$mn:0000A06D                 pop     ecx
.text$mn:0000A06E                 mov     esp, ebp
.text$mn:0000A070                 pop     ebp
.text$mn:0000A071                 retn
.text$mn:0000A071 ??Bid@locale@std@@QAEIXZ endp
.text$mn:0000A071
.text$mn:0000A071 ; ---------------------------------------------------------------------------
.text$mn:0000A072                 align 4
.text$mn:0000A072 _text$mn        ends
.text$mn:0000A072
.text$x:0000A074 ; ===========================================================================
.text$x:0000A074
.text$x:0000A074 ; Segment type: Pure code
.text$x:0000A074 ; Segment permissions: Read/Execute
.text$x:0000A074 _text$x         segment para public 'CODE' use32
.text$x:0000A074                 assume cs:_text$x
.text$x:0000A074                 ;org 0A074h
.text$x:0000A074 ; COMDAT (pick associative to section at 9FEC)
.text$x:0000A074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A074
.text$x:0000A074 ; =============== S U B R O U T I N E =======================================
.text$x:0000A074
.text$x:0000A074
.text$x:0000A074 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 proc near
.text$x:0000A074                                         ; DATA XREF: .xdata$x:0000F87Co
.text$x:0000A074                 lea     ecx, [ebp-14h]  ; this
.text$x:0000A077                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000A077 __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 endp
.text$x:0000A077
.text$x:0000A07C
.text$x:0000A07C ; =============== S U B R O U T I N E =======================================
.text$x:0000A07C
.text$x:0000A07C
.text$x:0000A07C __ehhandler$??Bid@locale@std@@QAEIXZ proc near
.text$x:0000A07C                                         ; DATA XREF: std::locale::id::operator uint(void)+5o
.text$x:0000A07C
.text$x:0000A07C arg_4           = dword ptr  8
.text$x:0000A07C
.text$x:0000A07C                 mov     edx, [esp+arg_4]
.text$x:0000A080                 lea     eax, [edx+0Ch]
.text$x:0000A083                 mov     ecx, [edx-0Ch]
.text$x:0000A086                 xor     ecx, eax
.text$x:0000A088                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A08D                 mov     eax, offset __ehfuncinfo$??Bid@locale@std@@QAEIXZ
.text$x:0000A092                 jmp     ___CxxFrameHandler3
.text$x:0000A092 __ehhandler$??Bid@locale@std@@QAEIXZ endp
.text$x:0000A092
.text$x:0000A092 ; ---------------------------------------------------------------------------
.text$x:0000A097                 align 4
.text$x:0000A097 _text$x         ends
.text$x:0000A097
.text$mn:0000A098 ; ===========================================================================
.text$mn:0000A098
.text$mn:0000A098 ; Segment type: Pure code
.text$mn:0000A098 ; Segment permissions: Read/Execute
.text$mn:0000A098 _text$mn        segment para public 'CODE' use32
.text$mn:0000A098                 assume cs:_text$mn
.text$mn:0000A098                 ;org 0A098h
.text$mn:0000A098 ; COMDAT (pick any)
.text$mn:0000A098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A098
.text$mn:0000A098 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A098
.text$mn:0000A098 ; Attributes: bp-based frame
.text$mn:0000A098
.text$mn:0000A098 ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:0000A098                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:0000A098 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:0000A098                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:0000A098
.text$mn:0000A098 var_4           = dword ptr -4
.text$mn:0000A098
.text$mn:0000A098                 push    ebp
.text$mn:0000A099                 mov     ebp, esp
.text$mn:0000A09B                 push    ecx
.text$mn:0000A09C                 push    esi
.text$mn:0000A09D                 mov     [ebp+var_4], ecx
.text$mn:0000A0A0                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A0A3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A0A8                 test    eax, eax
.text$mn:0000A0AA                 jz      short loc_A0F3
.text$mn:0000A0AC                 mov     eax, [ebp+var_4]
.text$mn:0000A0AF                 cmp     dword ptr [eax+8], 0
.text$mn:0000A0B3                 jz      short loc_A0F3
.text$mn:0000A0B5                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A0B8                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A0BD                 mov     ecx, eax
.text$mn:0000A0BF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A0C4                 mov     ecx, [ebp+var_4]
.text$mn:0000A0C7                 cmp     [ecx+8], eax
.text$mn:0000A0CA                 jb      short loc_A0F3
.text$mn:0000A0CC                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A0CF                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A0D4                 mov     ecx, eax
.text$mn:0000A0D6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A0DB                 mov     esi, eax
.text$mn:0000A0DD                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A0E0                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A0E5                 mov     edx, [eax+14h]
.text$mn:0000A0E8                 lea     eax, [esi+edx*2]
.text$mn:0000A0EB                 mov     ecx, [ebp+var_4]
.text$mn:0000A0EE                 cmp     eax, [ecx+8]
.text$mn:0000A0F1                 ja      short loc_A152
.text$mn:0000A0F3
.text$mn:0000A0F3 loc_A0F3:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:0000A0F3                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:0000A0F3                 push    4Fh ; 'O'       ; unsigned int
.text$mn:0000A0F5                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A0FA                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:0000A0FF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A104                 add     esp, 0Ch
.text$mn:0000A107                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000A10C                 test    edx, edx
.text$mn:0000A10E                 jz      short loc_A114
.text$mn:0000A110                 xor     eax, eax
.text$mn:0000A112                 jnz     short loc_A137
.text$mn:0000A114
.text$mn:0000A114 loc_A114:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:0000A114                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000A119                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000A11E                 push    0
.text$mn:0000A120                 push    50h ; 'P'
.text$mn:0000A122                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A127                 push    2
.text$mn:0000A129                 call    __CrtDbgReportW
.text$mn:0000A12E                 add     esp, 18h
.text$mn:0000A131                 cmp     eax, 1
.text$mn:0000A134                 jnz     short loc_A137
.text$mn:0000A136                 int     3               ; Trap to Debugger
.text$mn:0000A137
.text$mn:0000A137 loc_A137:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:0000A137                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:0000A137                 push    0
.text$mn:0000A139                 push    50h ; 'P'
.text$mn:0000A13B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A140                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:0000A145                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000A14A                 call    __invalid_parameter
.text$mn:0000A14F                 add     esp, 14h
.text$mn:0000A152
.text$mn:0000A152 loc_A152:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:0000A152                 mov     edx, [ebp+var_4]
.text$mn:0000A155                 mov     eax, [edx+8]
.text$mn:0000A158                 pop     esi
.text$mn:0000A159                 mov     esp, ebp
.text$mn:0000A15B                 pop     ebp
.text$mn:0000A15C                 retn
.text$mn:0000A15C ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:0000A15C
.text$mn:0000A15C ; ---------------------------------------------------------------------------
.text$mn:0000A15D                 align 10h
.text$mn:0000A15D _text$mn        ends
.text$mn:0000A15D
.text$mn:0000A160 ; ===========================================================================
.text$mn:0000A160
.text$mn:0000A160 ; Segment type: Pure code
.text$mn:0000A160 ; Segment permissions: Read/Execute
.text$mn:0000A160 _text$mn        segment para public 'CODE' use32
.text$mn:0000A160                 assume cs:_text$mn
.text$mn:0000A160                 ;org 0A160h
.text$mn:0000A160 ; COMDAT (pick any)
.text$mn:0000A160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A160
.text$mn:0000A160 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A160
.text$mn:0000A160 ; Attributes: bp-based frame
.text$mn:0000A160
.text$mn:0000A160 ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:0000A160                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:0000A160 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:0000A160                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:0000A160
.text$mn:0000A160 var_4           = dword ptr -4
.text$mn:0000A160
.text$mn:0000A160                 push    ebp
.text$mn:0000A161                 mov     ebp, esp
.text$mn:0000A163                 push    ecx
.text$mn:0000A164                 mov     [ebp+var_4], ecx
.text$mn:0000A167                 mov     ecx, [ebp+var_4]
.text$mn:0000A16A                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000A16F                 mov     esp, ebp
.text$mn:0000A171                 pop     ebp
.text$mn:0000A172                 retn
.text$mn:0000A172 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:0000A172
.text$mn:0000A172 ; ---------------------------------------------------------------------------
.text$mn:0000A173                 align 4
.text$mn:0000A173 _text$mn        ends
.text$mn:0000A173
.text$mn:0000A174 ; ===========================================================================
.text$mn:0000A174
.text$mn:0000A174 ; Segment type: Pure code
.text$mn:0000A174 ; Segment permissions: Read/Execute
.text$mn:0000A174 _text$mn        segment para public 'CODE' use32
.text$mn:0000A174                 assume cs:_text$mn
.text$mn:0000A174                 ;org 0A174h
.text$mn:0000A174 ; COMDAT (pick any)
.text$mn:0000A174                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A174
.text$mn:0000A174 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A174
.text$mn:0000A174 ; Attributes: bp-based frame
.text$mn:0000A174
.text$mn:0000A174 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:0000A174                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:0000A174 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:0000A174                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:0000A174                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:0000A174
.text$mn:0000A174 var_4           = dword ptr -4
.text$mn:0000A174 arg_0           = dword ptr  8
.text$mn:0000A174
.text$mn:0000A174                 push    ebp
.text$mn:0000A175                 mov     ebp, esp
.text$mn:0000A177                 push    ecx
.text$mn:0000A178                 mov     [ebp+var_4], ecx
.text$mn:0000A17B                 mov     eax, [ebp+arg_0]
.text$mn:0000A17E                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A17F                 mov     ecx, [ebp+var_4]
.text$mn:0000A182                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A187                 mov     ecx, [ebp+var_4]
.text$mn:0000A18A                 mov     edx, [ebp+arg_0]
.text$mn:0000A18D                 mov     eax, [ecx+8]
.text$mn:0000A190                 sub     eax, [edx+8]
.text$mn:0000A193                 sar     eax, 1
.text$mn:0000A195                 mov     esp, ebp
.text$mn:0000A197                 pop     ebp
.text$mn:0000A198                 retn    4
.text$mn:0000A198 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:0000A198
.text$mn:0000A198 ; ---------------------------------------------------------------------------
.text$mn:0000A19B                 align 4
.text$mn:0000A19B _text$mn        ends
.text$mn:0000A19B
.text$mn:0000A19C ; ===========================================================================
.text$mn:0000A19C
.text$mn:0000A19C ; Segment type: Pure code
.text$mn:0000A19C ; Segment permissions: Read/Execute
.text$mn:0000A19C _text$mn        segment para public 'CODE' use32
.text$mn:0000A19C                 assume cs:_text$mn
.text$mn:0000A19C                 ;org 0A19Ch
.text$mn:0000A19C ; COMDAT (pick any)
.text$mn:0000A19C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A19C
.text$mn:0000A19C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A19C
.text$mn:0000A19C ; Attributes: bp-based frame
.text$mn:0000A19C
.text$mn:0000A19C ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:0000A19C                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:0000A19C ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:0000A19C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:0000A19C
.text$mn:0000A19C var_28          = byte ptr -28h
.text$mn:0000A19C var_1C          = dword ptr -1Ch
.text$mn:0000A19C var_18          = dword ptr -18h
.text$mn:0000A19C var_14          = dword ptr -14h
.text$mn:0000A19C var_10          = dword ptr -10h
.text$mn:0000A19C var_C           = dword ptr -0Ch
.text$mn:0000A19C var_4           = dword ptr -4
.text$mn:0000A19C arg_0           = dword ptr  8
.text$mn:0000A19C
.text$mn:0000A19C                 push    ebp
.text$mn:0000A19D                 mov     ebp, esp
.text$mn:0000A19F                 push    0FFFFFFFFh
.text$mn:0000A1A1                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:0000A1A6                 mov     eax, large fs:0
.text$mn:0000A1AC                 push    eax
.text$mn:0000A1AD                 sub     esp, 1Ch
.text$mn:0000A1B0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A1B5                 xor     eax, ebp
.text$mn:0000A1B7                 push    eax
.text$mn:0000A1B8                 lea     eax, [ebp+var_C]
.text$mn:0000A1BB                 mov     large fs:0, eax
.text$mn:0000A1C1                 mov     [ebp+var_10], ecx
.text$mn:0000A1C4                 mov     eax, [ebp+arg_0]
.text$mn:0000A1C7                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A1C8                 mov     ecx, [ebp+var_10]
.text$mn:0000A1CB                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:0000A1CC                 lea     ecx, [ebp+var_28]
.text$mn:0000A1CF                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A1D4                 mov     [ebp+var_14], eax
.text$mn:0000A1D7                 mov     edx, [ebp+var_14]
.text$mn:0000A1DA                 mov     [ebp+var_18], edx
.text$mn:0000A1DD                 mov     [ebp+var_4], 0
.text$mn:0000A1E4                 mov     ecx, [ebp+var_18]
.text$mn:0000A1E7                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A1EC                 mov     [ebp+var_1C], eax
.text$mn:0000A1EF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A1F6                 lea     ecx, [ebp+var_28]
.text$mn:0000A1F9                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A1FE                 mov     eax, [ebp+var_1C]
.text$mn:0000A201                 mov     ecx, [ebp+var_C]
.text$mn:0000A204                 mov     large fs:0, ecx
.text$mn:0000A20B                 pop     ecx
.text$mn:0000A20C                 mov     esp, ebp
.text$mn:0000A20E                 pop     ebp
.text$mn:0000A20F                 retn    4
.text$mn:0000A20F ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:0000A20F
.text$mn:0000A20F ; ---------------------------------------------------------------------------
.text$mn:0000A212                 align 4
.text$mn:0000A212 _text$mn        ends
.text$mn:0000A212
.text$x:0000A214 ; ===========================================================================
.text$x:0000A214
.text$x:0000A214 ; Segment type: Pure code
.text$x:0000A214 ; Segment permissions: Read/Execute
.text$x:0000A214 _text$x         segment para public 'CODE' use32
.text$x:0000A214                 assume cs:_text$x
.text$x:0000A214                 ;org 0A214h
.text$x:0000A214 ; COMDAT (pick associative to section at A19C)
.text$x:0000A214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A214
.text$x:0000A214 ; =============== S U B R O U T I N E =======================================
.text$x:0000A214
.text$x:0000A214
.text$x:0000A214 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:0000A214                                         ; DATA XREF: .xdata$x:00010BD0o
.text$x:0000A214                 lea     ecx, [ebp-28h]
.text$x:0000A217                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A217 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:0000A217
.text$x:0000A21C
.text$x:0000A21C ; =============== S U B R O U T I N E =======================================
.text$x:0000A21C
.text$x:0000A21C
.text$x:0000A21C __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:0000A21C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:0000A21C
.text$x:0000A21C arg_4           = dword ptr  8
.text$x:0000A21C
.text$x:0000A21C                 mov     edx, [esp+arg_4]
.text$x:0000A220                 lea     eax, [edx+0Ch]
.text$x:0000A223                 mov     ecx, [edx-20h]
.text$x:0000A226                 xor     ecx, eax
.text$x:0000A228                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A22D                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:0000A232                 jmp     ___CxxFrameHandler3
.text$x:0000A232 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:0000A232
.text$x:0000A232 ; ---------------------------------------------------------------------------
.text$x:0000A237                 align 4
.text$x:0000A237 _text$x         ends
.text$x:0000A237
.text$mn:0000A238 ; ===========================================================================
.text$mn:0000A238
.text$mn:0000A238 ; Segment type: Pure code
.text$mn:0000A238 ; Segment permissions: Read/Execute
.text$mn:0000A238 _text$mn        segment para public 'CODE' use32
.text$mn:0000A238                 assume cs:_text$mn
.text$mn:0000A238                 ;org 0A238h
.text$mn:0000A238 ; COMDAT (pick any)
.text$mn:0000A238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A238
.text$mn:0000A238 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A238
.text$mn:0000A238 ; Attributes: bp-based frame
.text$mn:0000A238
.text$mn:0000A238 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Iterator_base12 *)
.text$mn:0000A238                 public ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:0000A238 ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:0000A238                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+Ep
.text$mn:0000A238
.text$mn:0000A238 var_4           = dword ptr -4
.text$mn:0000A238 arg_0           = dword ptr  8
.text$mn:0000A238
.text$mn:0000A238                 push    ebp
.text$mn:0000A239                 mov     ebp, esp
.text$mn:0000A23B                 push    ecx
.text$mn:0000A23C                 mov     [ebp+var_4], ecx
.text$mn:0000A23F                 mov     eax, [ebp+arg_0]
.text$mn:0000A242                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A243                 mov     ecx, [ebp+var_4]
.text$mn:0000A246                 call    ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000A24B                 mov     ecx, [ebp+var_4]
.text$mn:0000A24E                 mov     edx, [ebp+arg_0]
.text$mn:0000A251                 mov     eax, [ecx+8]
.text$mn:0000A254                 sub     eax, [edx+8]
.text$mn:0000A257                 cdq
.text$mn:0000A258                 mov     ecx, 1Ch
.text$mn:0000A25D                 idiv    ecx
.text$mn:0000A25F                 mov     esp, ebp
.text$mn:0000A261                 pop     ebp
.text$mn:0000A262                 retn    4
.text$mn:0000A262 ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:0000A262
.text$mn:0000A262 ; ---------------------------------------------------------------------------
.text$mn:0000A265                 align 4
.text$mn:0000A265 _text$mn        ends
.text$mn:0000A265
.text$mn:0000A268 ; ===========================================================================
.text$mn:0000A268
.text$mn:0000A268 ; Segment type: Pure code
.text$mn:0000A268 ; Segment permissions: Read/Execute
.text$mn:0000A268 _text$mn        segment para public 'CODE' use32
.text$mn:0000A268                 assume cs:_text$mn
.text$mn:0000A268                 ;org 0A268h
.text$mn:0000A268 ; COMDAT (pick any)
.text$mn:0000A268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A268
.text$mn:0000A268 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A268
.text$mn:0000A268 ; Attributes: bp-based frame
.text$mn:0000A268
.text$mn:0000A268 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Iterator_base12 *)
.text$mn:0000A268                 public ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
.text$mn:0000A268 ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z proc near
.text$mn:0000A268                                         ; CODE XREF: std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::less<void>)+A0p
.text$mn:0000A268
.text$mn:0000A268 var_4           = dword ptr -4
.text$mn:0000A268 arg_0           = dword ptr  8
.text$mn:0000A268
.text$mn:0000A268                 push    ebp
.text$mn:0000A269                 mov     ebp, esp
.text$mn:0000A26B                 push    ecx
.text$mn:0000A26C                 mov     [ebp+var_4], ecx
.text$mn:0000A26F                 mov     eax, [ebp+arg_0]
.text$mn:0000A272                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A273                 mov     ecx, [ebp+var_4]
.text$mn:0000A276                 call    ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000A27B                 mov     esp, ebp
.text$mn:0000A27D                 pop     ebp
.text$mn:0000A27E                 retn    4
.text$mn:0000A27E ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z endp
.text$mn:0000A27E
.text$mn:0000A27E ; ---------------------------------------------------------------------------
.text$mn:0000A281                 align 4
.text$mn:0000A281 _text$mn        ends
.text$mn:0000A281
.text$mn:0000A284 ; ===========================================================================
.text$mn:0000A284
.text$mn:0000A284 ; Segment type: Pure code
.text$mn:0000A284 ; Segment permissions: Read/Execute
.text$mn:0000A284 _text$mn        segment para public 'CODE' use32
.text$mn:0000A284                 assume cs:_text$mn
.text$mn:0000A284                 ;org 0A284h
.text$mn:0000A284 ; COMDAT (pick any)
.text$mn:0000A284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A284
.text$mn:0000A284 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A284
.text$mn:0000A284 ; Attributes: bp-based frame
.text$mn:0000A284
.text$mn:0000A284 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>::operator+(int)const
.text$mn:0000A284                 public ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:0000A284 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$mn:0000A284                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+F9p
.text$mn:0000A284                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+194p ...
.text$mn:0000A284
.text$mn:0000A284 var_20          = byte ptr -20h
.text$mn:0000A284 var_14          = dword ptr -14h
.text$mn:0000A284 var_10          = dword ptr -10h
.text$mn:0000A284 var_C           = dword ptr -0Ch
.text$mn:0000A284 var_4           = dword ptr -4
.text$mn:0000A284 arg_0           = dword ptr  8
.text$mn:0000A284 arg_4           = dword ptr  0Ch
.text$mn:0000A284
.text$mn:0000A284                 push    ebp
.text$mn:0000A285                 mov     ebp, esp
.text$mn:0000A287                 push    0FFFFFFFFh
.text$mn:0000A289                 push    offset __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:0000A28E                 mov     eax, large fs:0
.text$mn:0000A294                 push    eax
.text$mn:0000A295                 sub     esp, 14h
.text$mn:0000A298                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A29D                 xor     eax, ebp
.text$mn:0000A29F                 push    eax
.text$mn:0000A2A0                 lea     eax, [ebp+var_C]
.text$mn:0000A2A3                 mov     large fs:0, eax
.text$mn:0000A2A9                 mov     [ebp+var_14], ecx
.text$mn:0000A2AC                 mov     [ebp+var_10], 0
.text$mn:0000A2B3                 mov     eax, [ebp+var_14]
.text$mn:0000A2B6                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000A2B7                 lea     ecx, [ebp+var_20]
.text$mn:0000A2BA                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000A2BF                 mov     [ebp+var_4], 1
.text$mn:0000A2C6                 mov     ecx, [ebp+arg_4]
.text$mn:0000A2C9                 push    ecx
.text$mn:0000A2CA                 lea     ecx, [ebp+var_20]
.text$mn:0000A2CD                 call    ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)
.text$mn:0000A2D2                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000A2D3                 mov     ecx, [ebp+arg_0]
.text$mn:0000A2D6                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000A2DB                 mov     edx, [ebp+var_10]
.text$mn:0000A2DE                 or      edx, 1
.text$mn:0000A2E1                 mov     [ebp+var_10], edx
.text$mn:0000A2E4                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000A2E8                 lea     ecx, [ebp+var_20]
.text$mn:0000A2EB                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000A2F0                 mov     eax, [ebp+arg_0]
.text$mn:0000A2F3                 mov     ecx, [ebp+var_C]
.text$mn:0000A2F6                 mov     large fs:0, ecx
.text$mn:0000A2FD                 pop     ecx
.text$mn:0000A2FE                 mov     esp, ebp
.text$mn:0000A300                 pop     ebp
.text$mn:0000A301                 retn    8
.text$mn:0000A301 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$mn:0000A301
.text$mn:0000A301 _text$mn        ends
.text$mn:0000A301
.text$x:0000A304 ; ===========================================================================
.text$x:0000A304
.text$x:0000A304 ; Segment type: Pure code
.text$x:0000A304 ; Segment permissions: Read/Execute
.text$x:0000A304 _text$x         segment para public 'CODE' use32
.text$x:0000A304                 assume cs:_text$x
.text$x:0000A304                 ;org 0A304h
.text$x:0000A304 ; COMDAT (pick associative to section at A284)
.text$x:0000A304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A304
.text$x:0000A304 ; =============== S U B R O U T I N E =======================================
.text$x:0000A304
.text$x:0000A304
.text$x:0000A304 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
.text$x:0000A304                                         ; DATA XREF: .xdata$x:00010A18o
.text$x:0000A304                 lea     ecx, [ebp-20h]
.text$x:0000A307                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000A307 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$0 endp
.text$x:0000A307
.text$x:0000A30C
.text$x:0000A30C ; =============== S U B R O U T I N E =======================================
.text$x:0000A30C
.text$x:0000A30C
.text$x:0000A30C __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$1 proc near
.text$x:0000A30C                                         ; DATA XREF: .xdata$x:00010A10o
.text$x:0000A30C                 mov     eax, [ebp-10h]
.text$x:0000A30F                 and     eax, 1
.text$x:0000A312                 jz      $LN5_1
.text$x:0000A318                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000A31C                 mov     ecx, [ebp+8]
.text$x:0000A31F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000A324 ; ---------------------------------------------------------------------------
.text$x:0000A324
.text$x:0000A324 $LN5_1:                                 ; CODE XREF: __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$1+6j
.text$x:0000A324                 retn
.text$x:0000A324 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$1 endp
.text$x:0000A324
.text$x:0000A325
.text$x:0000A325 ; =============== S U B R O U T I N E =======================================
.text$x:0000A325
.text$x:0000A325
.text$x:0000A325 __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$x:0000A325                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)+5o
.text$x:0000A325
.text$x:0000A325 arg_4           = dword ptr  8
.text$x:0000A325
.text$x:0000A325                 mov     edx, [esp+arg_4]
.text$x:0000A329                 lea     eax, [edx+0Ch]
.text$x:0000A32C                 mov     ecx, [edx-18h]
.text$x:0000A32F                 xor     ecx, eax
.text$x:0000A331                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A336                 mov     eax, offset __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z
.text$x:0000A33B                 jmp     ___CxxFrameHandler3
.text$x:0000A33B __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$x:0000A33B
.text$x:0000A33B _text$x         ends
.text$x:0000A33B
.text$mn:0000A340 ; ===========================================================================
.text$mn:0000A340
.text$mn:0000A340 ; Segment type: Pure code
.text$mn:0000A340 ; Segment permissions: Read/Execute
.text$mn:0000A340 _text$mn        segment para public 'CODE' use32
.text$mn:0000A340                 assume cs:_text$mn
.text$mn:0000A340                 ;org 0A340h
.text$mn:0000A340 ; COMDAT (pick any)
.text$mn:0000A340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A340
.text$mn:0000A340 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A340
.text$mn:0000A340 ; Attributes: bp-based frame
.text$mn:0000A340
.text$mn:0000A340 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator<(std::_Iterator_base12 *)
.text$mn:0000A340                 public ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:0000A340 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:0000A340                                         ; CODE XREF: std::_Debug_range2<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,wchar_t const *,uint,std::random_access_iterator_tag)+6Bp
.text$mn:0000A340
.text$mn:0000A340 var_8           = dword ptr -8
.text$mn:0000A340 var_4           = dword ptr -4
.text$mn:0000A340 arg_0           = dword ptr  8
.text$mn:0000A340
.text$mn:0000A340                 push    ebp
.text$mn:0000A341                 mov     ebp, esp
.text$mn:0000A343                 sub     esp, 8
.text$mn:0000A346                 mov     [ebp+var_4], ecx
.text$mn:0000A349                 mov     eax, [ebp+arg_0]
.text$mn:0000A34C                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A34D                 mov     ecx, [ebp+var_4]
.text$mn:0000A350                 call    ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000A355                 mov     ecx, [ebp+var_4]
.text$mn:0000A358                 mov     edx, [ebp+arg_0]
.text$mn:0000A35B                 mov     eax, [ecx+8]
.text$mn:0000A35E                 cmp     eax, [edx+8]
.text$mn:0000A361                 jnb     short loc_A36C
.text$mn:0000A363                 mov     [ebp+var_8], 1
.text$mn:0000A36A                 jmp     short loc_A373
.text$mn:0000A36C ; ---------------------------------------------------------------------------
.text$mn:0000A36C
.text$mn:0000A36C loc_A36C:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator<(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+21j
.text$mn:0000A36C                 mov     [ebp+var_8], 0
.text$mn:0000A373
.text$mn:0000A373 loc_A373:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator<(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Aj
.text$mn:0000A373                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000A376                 mov     esp, ebp
.text$mn:0000A378                 pop     ebp
.text$mn:0000A379                 retn    4
.text$mn:0000A379 ??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:0000A379
.text$mn:0000A379 _text$mn        ends
.text$mn:0000A379
.text$mn:0000A37C ; ===========================================================================
.text$mn:0000A37C
.text$mn:0000A37C ; Segment type: Pure code
.text$mn:0000A37C ; Segment permissions: Read/Execute
.text$mn:0000A37C _text$mn        segment para public 'CODE' use32
.text$mn:0000A37C                 assume cs:_text$mn
.text$mn:0000A37C                 ;org 0A37Ch
.text$mn:0000A37C ; COMDAT (pick any)
.text$mn:0000A37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A37C
.text$mn:0000A37C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A37C
.text$mn:0000A37C ; Attributes: bp-based frame
.text$mn:0000A37C
.text$mn:0000A37C ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> & __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>::operator+=(int)
.text$mn:0000A37C                 public ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:0000A37C ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:0000A37C                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+Ep
.text$mn:0000A37C
.text$mn:0000A37C var_4           = dword ptr -4
.text$mn:0000A37C arg_0           = dword ptr  8
.text$mn:0000A37C
.text$mn:0000A37C                 push    ebp
.text$mn:0000A37D                 mov     ebp, esp
.text$mn:0000A37F                 push    ecx
.text$mn:0000A380                 push    esi
.text$mn:0000A381                 mov     [ebp+var_4], ecx
.text$mn:0000A384                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A387                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A38C                 test    eax, eax
.text$mn:0000A38E                 jz      short loc_A3C2
.text$mn:0000A390                 mov     eax, [ebp+var_4]
.text$mn:0000A393                 mov     ecx, [eax+8]
.text$mn:0000A396                 mov     edx, [ebp+arg_0]
.text$mn:0000A399                 lea     esi, [ecx+edx*8]
.text$mn:0000A39C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A39F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A3A4                 cmp     esi, [eax+4]
.text$mn:0000A3A7                 jb      short loc_A3C2
.text$mn:0000A3A9                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A3AC                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A3B1                 mov     ecx, [ebp+var_4]
.text$mn:0000A3B4                 mov     edx, [ecx+8]
.text$mn:0000A3B7                 mov     ecx, [ebp+arg_0]
.text$mn:0000A3BA                 lea     edx, [edx+ecx*8]
.text$mn:0000A3BD                 cmp     [eax+8], edx
.text$mn:0000A3C0                 jnb     short loc_A42A
.text$mn:0000A3C2
.text$mn:0000A3C2 loc_A3C2:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+12j
.text$mn:0000A3C2                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+2Bj
.text$mn:0000A3C2                 push    9Fh ; 'ƒ'       ; unsigned int
.text$mn:0000A3C7                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A3CC                 push    offset ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; "vector iterator + offset out of range"
.text$mn:0000A3D1                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A3D6                 add     esp, 0Ch
.text$mn:0000A3D9                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000A3DE                 test    eax, eax
.text$mn:0000A3E0                 jz      short loc_A3E6
.text$mn:0000A3E2                 xor     ecx, ecx
.text$mn:0000A3E4                 jnz     short loc_A40C
.text$mn:0000A3E6
.text$mn:0000A3E6 loc_A3E6:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+64j
.text$mn:0000A3E6                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000A3EB                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000A3F0                 push    0
.text$mn:0000A3F2                 push    0A0h ; 'á'
.text$mn:0000A3F7                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A3FC                 push    2
.text$mn:0000A3FE                 call    __CrtDbgReportW
.text$mn:0000A403                 add     esp, 18h
.text$mn:0000A406                 cmp     eax, 1
.text$mn:0000A409                 jnz     short loc_A40C
.text$mn:0000A40B                 int     3               ; Trap to Debugger
.text$mn:0000A40C
.text$mn:0000A40C loc_A40C:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+68j
.text$mn:0000A40C                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+8Dj
.text$mn:0000A40C                 push    0
.text$mn:0000A40E                 push    0A0h ; 'á'
.text$mn:0000A413                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A418                 push    offset ??_C@_1PE@MBOMHNCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_Vector_const_iterator<class std::"...
.text$mn:0000A41D                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000A422                 call    __invalid_parameter
.text$mn:0000A427                 add     esp, 14h
.text$mn:0000A42A
.text$mn:0000A42A loc_A42A:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+44j
.text$mn:0000A42A                 mov     eax, [ebp+var_4]
.text$mn:0000A42D                 mov     ecx, [eax+8]
.text$mn:0000A430                 mov     edx, [ebp+arg_0]
.text$mn:0000A433                 lea     eax, [ecx+edx*8]
.text$mn:0000A436                 mov     ecx, [ebp+var_4]
.text$mn:0000A439                 mov     [ecx+8], eax
.text$mn:0000A43C                 mov     eax, [ebp+var_4]
.text$mn:0000A43F                 pop     esi
.text$mn:0000A440                 mov     esp, ebp
.text$mn:0000A442                 pop     ebp
.text$mn:0000A443                 retn    4
.text$mn:0000A443 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:0000A443
.text$mn:0000A443 ; ---------------------------------------------------------------------------
.text$mn:0000A446                 align 4
.text$mn:0000A446 _text$mn        ends
.text$mn:0000A446
.text$mn:0000A448 ; ===========================================================================
.text$mn:0000A448
.text$mn:0000A448 ; Segment type: Pure code
.text$mn:0000A448 ; Segment permissions: Read/Execute
.text$mn:0000A448 _text$mn        segment para public 'CODE' use32
.text$mn:0000A448                 assume cs:_text$mn
.text$mn:0000A448                 ;org 0A448h
.text$mn:0000A448 ; COMDAT (pick any)
.text$mn:0000A448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A448
.text$mn:0000A448 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A448
.text$mn:0000A448 ; Attributes: bp-based frame
.text$mn:0000A448
.text$mn:0000A448 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> & __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>::operator+=(int)
.text$mn:0000A448                 public ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:0000A448 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:0000A448                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+(int)+49p
.text$mn:0000A448
.text$mn:0000A448 var_4           = dword ptr -4
.text$mn:0000A448 arg_0           = dword ptr  8
.text$mn:0000A448
.text$mn:0000A448                 push    ebp
.text$mn:0000A449                 mov     ebp, esp
.text$mn:0000A44B                 push    ecx
.text$mn:0000A44C                 mov     [ebp+var_4], ecx
.text$mn:0000A44F                 mov     eax, [ebp+arg_0]
.text$mn:0000A452                 push    eax
.text$mn:0000A453                 mov     ecx, [ebp+var_4]
.text$mn:0000A456                 call    ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)
.text$mn:0000A45B                 mov     eax, [ebp+var_4]
.text$mn:0000A45E                 mov     esp, ebp
.text$mn:0000A460                 pop     ebp
.text$mn:0000A461                 retn    4
.text$mn:0000A461 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:0000A461
.text$mn:0000A461 _text$mn        ends
.text$mn:0000A461
.text$mn:0000A464 ; ===========================================================================
.text$mn:0000A464
.text$mn:0000A464 ; Segment type: Pure code
.text$mn:0000A464 ; Segment permissions: Read/Execute
.text$mn:0000A464 _text$mn        segment para public 'CODE' use32
.text$mn:0000A464                 assume cs:_text$mn
.text$mn:0000A464                 ;org 0A464h
.text$mn:0000A464 ; COMDAT (pick any)
.text$mn:0000A464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A464
.text$mn:0000A464 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A464
.text$mn:0000A464 ; Attributes: bp-based frame
.text$mn:0000A464
.text$mn:0000A464 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000A464                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:0000A464 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:0000A464                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+2DAp
.text$mn:0000A464                                         ; AutoCompletion::showApiAndWordComplete(void)+2F6p ...
.text$mn:0000A464
.text$mn:0000A464 var_4           = dword ptr -4
.text$mn:0000A464 arg_0           = dword ptr  8
.text$mn:0000A464
.text$mn:0000A464                 push    ebp
.text$mn:0000A465                 mov     ebp, esp
.text$mn:0000A467                 push    ecx
.text$mn:0000A468                 mov     [ebp+var_4], ecx
.text$mn:0000A46B                 mov     eax, [ebp+arg_0]
.text$mn:0000A46E                 push    eax
.text$mn:0000A46F                 mov     ecx, [ebp+var_4]
.text$mn:0000A472                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000A477                 mov     esp, ebp
.text$mn:0000A479                 pop     ebp
.text$mn:0000A47A                 retn    4
.text$mn:0000A47A ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:0000A47A
.text$mn:0000A47A ; ---------------------------------------------------------------------------
.text$mn:0000A47D                 align 10h
.text$mn:0000A47D _text$mn        ends
.text$mn:0000A47D
.text$mn:0000A480 ; ===========================================================================
.text$mn:0000A480
.text$mn:0000A480 ; Segment type: Pure code
.text$mn:0000A480 ; Segment permissions: Read/Execute
.text$mn:0000A480 _text$mn        segment para public 'CODE' use32
.text$mn:0000A480                 assume cs:_text$mn
.text$mn:0000A480                 ;org 0A480h
.text$mn:0000A480 ; COMDAT (pick any)
.text$mn:0000A480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A480
.text$mn:0000A480 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A480
.text$mn:0000A480 ; Attributes: bp-based frame
.text$mn:0000A480
.text$mn:0000A480 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:0000A480                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:0000A480 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:0000A480                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+300p
.text$mn:0000A480                                         ; AutoCompletion::showApiAndWordComplete(void)+31Cp ...
.text$mn:0000A480
.text$mn:0000A480 var_4           = dword ptr -4
.text$mn:0000A480 Str             = dword ptr  8
.text$mn:0000A480
.text$mn:0000A480                 push    ebp
.text$mn:0000A481                 mov     ebp, esp
.text$mn:0000A483                 push    ecx
.text$mn:0000A484                 mov     [ebp+var_4], ecx
.text$mn:0000A487                 mov     eax, [ebp+Str]
.text$mn:0000A48A                 push    eax             ; Str
.text$mn:0000A48B                 mov     ecx, [ebp+var_4]
.text$mn:0000A48E                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:0000A493                 mov     esp, ebp
.text$mn:0000A495                 pop     ebp
.text$mn:0000A496                 retn    4
.text$mn:0000A496 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:0000A496
.text$mn:0000A496 ; ---------------------------------------------------------------------------
.text$mn:0000A499                 align 4
.text$mn:0000A499 _text$mn        ends
.text$mn:0000A499
.text$mn:0000A49C ; ===========================================================================
.text$mn:0000A49C
.text$mn:0000A49C ; Segment type: Pure code
.text$mn:0000A49C ; Segment permissions: Read/Execute
.text$mn:0000A49C _text$mn        segment para public 'CODE' use32
.text$mn:0000A49C                 assume cs:_text$mn
.text$mn:0000A49C                 ;org 0A49Ch
.text$mn:0000A49C ; COMDAT (pick any)
.text$mn:0000A49C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A49C
.text$mn:0000A49C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A49C
.text$mn:0000A49C ; Attributes: bp-based frame
.text$mn:0000A49C
.text$mn:0000A49C ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:0000A49C                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:0000A49C ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:0000A49C                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:0000A49C
.text$mn:0000A49C var_4           = dword ptr -4
.text$mn:0000A49C arg_0           = dword ptr  8
.text$mn:0000A49C
.text$mn:0000A49C                 push    ebp
.text$mn:0000A49D                 mov     ebp, esp
.text$mn:0000A49F                 push    ecx
.text$mn:0000A4A0                 mov     [ebp+var_4], ecx
.text$mn:0000A4A3                 mov     ecx, [ebp+var_4]
.text$mn:0000A4A6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000A4AB                 mov     eax, [ebp+arg_0]
.text$mn:0000A4AE                 and     eax, 1
.text$mn:0000A4B1                 jz      short loc_A4BF
.text$mn:0000A4B3                 mov     ecx, [ebp+var_4]
.text$mn:0000A4B6                 push    ecx             ; void *
.text$mn:0000A4B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A4BC                 add     esp, 4
.text$mn:0000A4BF
.text$mn:0000A4BF loc_A4BF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:0000A4BF                 mov     eax, [ebp+var_4]
.text$mn:0000A4C2                 mov     esp, ebp
.text$mn:0000A4C4                 pop     ebp
.text$mn:0000A4C5                 retn    4
.text$mn:0000A4C5 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:0000A4C5
.text$mn:0000A4C5 _text$mn        ends
.text$mn:0000A4C5
.text$mn:0000A4C8 ; ===========================================================================
.text$mn:0000A4C8
.text$mn:0000A4C8 ; Segment type: Pure code
.text$mn:0000A4C8 ; Segment permissions: Read/Execute
.text$mn:0000A4C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A4C8                 assume cs:_text$mn
.text$mn:0000A4C8                 ;org 0A4C8h
.text$mn:0000A4C8 ; COMDAT (pick any)
.text$mn:0000A4C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4C8
.text$mn:0000A4C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4C8
.text$mn:0000A4C8 ; Attributes: bp-based frame
.text$mn:0000A4C8
.text$mn:0000A4C8 ; protected: virtual void * __thiscall std::ctype<wchar_t>::`scalar deleting destructor'(unsigned int)
.text$mn:0000A4C8                 public ??_G?$ctype@_W@std@@MAEPAXI@Z
.text$mn:0000A4C8 ??_G?$ctype@_W@std@@MAEPAXI@Z proc near
.text$mn:0000A4C8
.text$mn:0000A4C8 Memory          = dword ptr -4
.text$mn:0000A4C8 arg_0           = dword ptr  8
.text$mn:0000A4C8
.text$mn:0000A4C8                 push    ebp
.text$mn:0000A4C9                 mov     ebp, esp
.text$mn:0000A4CB                 push    ecx
.text$mn:0000A4CC                 mov     [ebp+Memory], ecx
.text$mn:0000A4CF                 mov     ecx, [ebp+Memory]
.text$mn:0000A4D2                 call    ??1?$ctype@_W@std@@MAE@XZ ; std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:0000A4D7                 mov     eax, [ebp+arg_0]
.text$mn:0000A4DA                 and     eax, 1
.text$mn:0000A4DD                 jz      short loc_A4EB
.text$mn:0000A4DF                 mov     ecx, [ebp+Memory]
.text$mn:0000A4E2                 push    ecx             ; Memory
.text$mn:0000A4E3                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:0000A4E8                 add     esp, 4
.text$mn:0000A4EB
.text$mn:0000A4EB loc_A4EB:                               ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+15j
.text$mn:0000A4EB                 mov     eax, [ebp+Memory]
.text$mn:0000A4EE                 mov     esp, ebp
.text$mn:0000A4F0                 pop     ebp
.text$mn:0000A4F1                 retn    4
.text$mn:0000A4F1 ??_G?$ctype@_W@std@@MAEPAXI@Z endp
.text$mn:0000A4F1
.text$mn:0000A4F1 _text$mn        ends
.text$mn:0000A4F1
.text$mn:0000A4F4 ; ===========================================================================
.text$mn:0000A4F4
.text$mn:0000A4F4 ; Segment type: Pure code
.text$mn:0000A4F4 ; Segment permissions: Read/Execute
.text$mn:0000A4F4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A4F4                 assume cs:_text$mn
.text$mn:0000A4F4                 ;org 0A4F4h
.text$mn:0000A4F4 ; COMDAT (pick any)
.text$mn:0000A4F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4F4
.text$mn:0000A4F4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4F4
.text$mn:0000A4F4 ; Attributes: bp-based frame
.text$mn:0000A4F4
.text$mn:0000A4F4 ; public: virtual void * __thiscall std::_Facet_base::`scalar deleting destructor'(unsigned int)
.text$mn:0000A4F4                 public ??_G_Facet_base@std@@UAEPAXI@Z
.text$mn:0000A4F4 ??_G_Facet_base@std@@UAEPAXI@Z proc near
.text$mn:0000A4F4
.text$mn:0000A4F4 var_4           = dword ptr -4
.text$mn:0000A4F4 arg_0           = dword ptr  8
.text$mn:0000A4F4
.text$mn:0000A4F4                 push    ebp
.text$mn:0000A4F5                 mov     ebp, esp
.text$mn:0000A4F7                 push    ecx
.text$mn:0000A4F8                 mov     [ebp+var_4], ecx
.text$mn:0000A4FB                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A4FE                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:0000A503                 mov     eax, [ebp+arg_0]
.text$mn:0000A506                 and     eax, 1
.text$mn:0000A509                 jz      short loc_A517
.text$mn:0000A50B                 mov     ecx, [ebp+var_4]
.text$mn:0000A50E                 push    ecx             ; void *
.text$mn:0000A50F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A514                 add     esp, 4
.text$mn:0000A517
.text$mn:0000A517 loc_A517:                               ; CODE XREF: std::_Facet_base::`scalar deleting destructor'(uint)+15j
.text$mn:0000A517                 mov     eax, [ebp+var_4]
.text$mn:0000A51A                 mov     esp, ebp
.text$mn:0000A51C                 pop     ebp
.text$mn:0000A51D                 retn    4
.text$mn:0000A51D ??_G_Facet_base@std@@UAEPAXI@Z endp
.text$mn:0000A51D
.text$mn:0000A51D _text$mn        ends
.text$mn:0000A51D
.text$mn:0000A520 ; ===========================================================================
.text$mn:0000A520
.text$mn:0000A520 ; Segment type: Pure code
.text$mn:0000A520 ; Segment permissions: Read/Execute
.text$mn:0000A520 _text$mn        segment para public 'CODE' use32
.text$mn:0000A520                 assume cs:_text$mn
.text$mn:0000A520                 ;org 0A520h
.text$mn:0000A520 ; COMDAT (pick any)
.text$mn:0000A520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A520
.text$mn:0000A520 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A520
.text$mn:0000A520 ; Attributes: bp-based frame
.text$mn:0000A520
.text$mn:0000A520 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000A520                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:0000A520 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000A520
.text$mn:0000A520 var_4           = dword ptr -4
.text$mn:0000A520 arg_0           = dword ptr  8
.text$mn:0000A520
.text$mn:0000A520                 push    ebp
.text$mn:0000A521                 mov     ebp, esp
.text$mn:0000A523                 push    ecx
.text$mn:0000A524                 mov     [ebp+var_4], ecx
.text$mn:0000A527                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A52A                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:0000A52F                 mov     eax, [ebp+arg_0]
.text$mn:0000A532                 and     eax, 1
.text$mn:0000A535                 jz      short loc_A543
.text$mn:0000A537                 mov     ecx, [ebp+var_4]
.text$mn:0000A53A                 push    ecx             ; void *
.text$mn:0000A53B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A540                 add     esp, 4
.text$mn:0000A543
.text$mn:0000A543 loc_A543:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000A543                 mov     eax, [ebp+var_4]
.text$mn:0000A546                 mov     esp, ebp
.text$mn:0000A548                 pop     ebp
.text$mn:0000A549                 retn    4
.text$mn:0000A549 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:0000A549
.text$mn:0000A549 _text$mn        ends
.text$mn:0000A549
.text$mn:0000A54C ; ===========================================================================
.text$mn:0000A54C
.text$mn:0000A54C ; Segment type: Pure code
.text$mn:0000A54C ; Segment permissions: Read/Execute
.text$mn:0000A54C _text$mn        segment para public 'CODE' use32
.text$mn:0000A54C                 assume cs:_text$mn
.text$mn:0000A54C                 ;org 0A54Ch
.text$mn:0000A54C ; COMDAT (pick any)
.text$mn:0000A54C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A54C
.text$mn:0000A54C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A54C
.text$mn:0000A54C ; Attributes: bp-based frame
.text$mn:0000A54C
.text$mn:0000A54C ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000A54C                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:0000A54C ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000A54C
.text$mn:0000A54C var_4           = dword ptr -4
.text$mn:0000A54C arg_0           = dword ptr  8
.text$mn:0000A54C
.text$mn:0000A54C                 push    ebp
.text$mn:0000A54D                 mov     ebp, esp
.text$mn:0000A54F                 push    ecx
.text$mn:0000A550                 mov     [ebp+var_4], ecx
.text$mn:0000A553                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A556                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:0000A55B                 mov     eax, [ebp+arg_0]
.text$mn:0000A55E                 and     eax, 1
.text$mn:0000A561                 jz      short loc_A56F
.text$mn:0000A563                 mov     ecx, [ebp+var_4]
.text$mn:0000A566                 push    ecx             ; void *
.text$mn:0000A567                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A56C                 add     esp, 4
.text$mn:0000A56F
.text$mn:0000A56F loc_A56F:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000A56F                 mov     eax, [ebp+var_4]
.text$mn:0000A572                 mov     esp, ebp
.text$mn:0000A574                 pop     ebp
.text$mn:0000A575                 retn    4
.text$mn:0000A575 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:0000A575
.text$mn:0000A575 _text$mn        ends
.text$mn:0000A575
.text$mn:0000A578 ; ===========================================================================
.text$mn:0000A578
.text$mn:0000A578 ; Segment type: Pure code
.text$mn:0000A578 ; Segment permissions: Read/Execute
.text$mn:0000A578 _text$mn        segment para public 'CODE' use32
.text$mn:0000A578                 assume cs:_text$mn
.text$mn:0000A578                 ;org 0A578h
.text$mn:0000A578 ; COMDAT (pick any)
.text$mn:0000A578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A578
.text$mn:0000A578 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A578
.text$mn:0000A578 ; Attributes: bp-based frame
.text$mn:0000A578
.text$mn:0000A578 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000A578                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:0000A578 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000A578
.text$mn:0000A578 var_4           = dword ptr -4
.text$mn:0000A578 arg_0           = dword ptr  8
.text$mn:0000A578
.text$mn:0000A578                 push    ebp
.text$mn:0000A579                 mov     ebp, esp
.text$mn:0000A57B                 push    ecx
.text$mn:0000A57C                 mov     [ebp+var_4], ecx
.text$mn:0000A57F                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A582                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:0000A587                 mov     eax, [ebp+arg_0]
.text$mn:0000A58A                 and     eax, 1
.text$mn:0000A58D                 jz      short loc_A59B
.text$mn:0000A58F                 mov     ecx, [ebp+var_4]
.text$mn:0000A592                 push    ecx             ; void *
.text$mn:0000A593                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A598                 add     esp, 4
.text$mn:0000A59B
.text$mn:0000A59B loc_A59B:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000A59B                 mov     eax, [ebp+var_4]
.text$mn:0000A59E                 mov     esp, ebp
.text$mn:0000A5A0                 pop     ebp
.text$mn:0000A5A1                 retn    4
.text$mn:0000A5A1 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:0000A5A1
.text$mn:0000A5A1 _text$mn        ends
.text$mn:0000A5A1
.text$mn:0000A5A4 ; ===========================================================================
.text$mn:0000A5A4
.text$mn:0000A5A4 ; Segment type: Pure code
.text$mn:0000A5A4 ; Segment permissions: Read/Execute
.text$mn:0000A5A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5A4                 assume cs:_text$mn
.text$mn:0000A5A4                 ;org 0A5A4h
.text$mn:0000A5A4 ; COMDAT (pick any)
.text$mn:0000A5A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5A4
.text$mn:0000A5A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5A4
.text$mn:0000A5A4 ; Attributes: bp-based frame
.text$mn:0000A5A4
.text$mn:0000A5A4 ; public: virtual void * __thiscall std::ctype_base::`scalar deleting destructor'(unsigned int)
.text$mn:0000A5A4                 public ??_Gctype_base@std@@UAEPAXI@Z
.text$mn:0000A5A4 ??_Gctype_base@std@@UAEPAXI@Z proc near
.text$mn:0000A5A4
.text$mn:0000A5A4 Memory          = dword ptr -4
.text$mn:0000A5A4 arg_0           = dword ptr  8
.text$mn:0000A5A4
.text$mn:0000A5A4                 push    ebp
.text$mn:0000A5A5                 mov     ebp, esp
.text$mn:0000A5A7                 push    ecx
.text$mn:0000A5A8                 mov     [ebp+Memory], ecx
.text$mn:0000A5AB                 mov     ecx, [ebp+Memory] ; this
.text$mn:0000A5AE                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:0000A5B3                 mov     eax, [ebp+arg_0]
.text$mn:0000A5B6                 and     eax, 1
.text$mn:0000A5B9                 jz      short loc_A5C7
.text$mn:0000A5BB                 mov     ecx, [ebp+Memory]
.text$mn:0000A5BE                 push    ecx             ; Memory
.text$mn:0000A5BF                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:0000A5C4                 add     esp, 4
.text$mn:0000A5C7
.text$mn:0000A5C7 loc_A5C7:                               ; CODE XREF: std::ctype_base::`scalar deleting destructor'(uint)+15j
.text$mn:0000A5C7                 mov     eax, [ebp+Memory]
.text$mn:0000A5CA                 mov     esp, ebp
.text$mn:0000A5CC                 pop     ebp
.text$mn:0000A5CD                 retn    4
.text$mn:0000A5CD ??_Gctype_base@std@@UAEPAXI@Z endp
.text$mn:0000A5CD
.text$mn:0000A5CD _text$mn        ends
.text$mn:0000A5CD
.text$mn:0000A5D0 ; ===========================================================================
.text$mn:0000A5D0
.text$mn:0000A5D0 ; Segment type: Pure code
.text$mn:0000A5D0 ; Segment permissions: Read/Execute
.text$mn:0000A5D0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5D0                 assume cs:_text$mn
.text$mn:0000A5D0                 ;org 0A5D0h
.text$mn:0000A5D0 ; COMDAT (pick any)
.text$mn:0000A5D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5D0
.text$mn:0000A5D0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5D0
.text$mn:0000A5D0 ; Attributes: bp-based frame
.text$mn:0000A5D0
.text$mn:0000A5D0 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000A5D0                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:0000A5D0 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:0000A5D0
.text$mn:0000A5D0 var_4           = dword ptr -4
.text$mn:0000A5D0 arg_0           = dword ptr  8
.text$mn:0000A5D0
.text$mn:0000A5D0                 push    ebp
.text$mn:0000A5D1                 mov     ebp, esp
.text$mn:0000A5D3                 push    ecx
.text$mn:0000A5D4                 mov     [ebp+var_4], ecx
.text$mn:0000A5D7                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A5DA                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000A5DF                 mov     eax, [ebp+arg_0]
.text$mn:0000A5E2                 and     eax, 1
.text$mn:0000A5E5                 jz      short loc_A5F3
.text$mn:0000A5E7                 mov     ecx, [ebp+var_4]
.text$mn:0000A5EA                 push    ecx             ; void *
.text$mn:0000A5EB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A5F0                 add     esp, 4
.text$mn:0000A5F3
.text$mn:0000A5F3 loc_A5F3:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000A5F3                 mov     eax, [ebp+var_4]
.text$mn:0000A5F6                 mov     esp, ebp
.text$mn:0000A5F8                 pop     ebp
.text$mn:0000A5F9                 retn    4
.text$mn:0000A5F9 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:0000A5F9
.text$mn:0000A5F9 _text$mn        ends
.text$mn:0000A5F9
.text$mn:0000A5FC ; ===========================================================================
.text$mn:0000A5FC
.text$mn:0000A5FC ; Segment type: Pure code
.text$mn:0000A5FC ; Segment permissions: Read/Execute
.text$mn:0000A5FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A5FC                 assume cs:_text$mn
.text$mn:0000A5FC                 ;org 0A5FCh
.text$mn:0000A5FC ; COMDAT (pick any)
.text$mn:0000A5FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5FC
.text$mn:0000A5FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5FC
.text$mn:0000A5FC ; Attributes: bp-based frame
.text$mn:0000A5FC
.text$mn:0000A5FC ; protected: virtual void * __thiscall std::locale::facet::`scalar deleting destructor'(unsigned int)
.text$mn:0000A5FC                 public ??_Gfacet@locale@std@@MAEPAXI@Z
.text$mn:0000A5FC ??_Gfacet@locale@std@@MAEPAXI@Z proc near
.text$mn:0000A5FC
.text$mn:0000A5FC var_4           = dword ptr -4
.text$mn:0000A5FC arg_0           = dword ptr  8
.text$mn:0000A5FC
.text$mn:0000A5FC                 push    ebp
.text$mn:0000A5FD                 mov     ebp, esp
.text$mn:0000A5FF                 push    ecx
.text$mn:0000A600                 mov     [ebp+var_4], ecx
.text$mn:0000A603                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A606                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:0000A60B                 mov     eax, [ebp+arg_0]
.text$mn:0000A60E                 and     eax, 1
.text$mn:0000A611                 jz      short loc_A61F
.text$mn:0000A613                 mov     ecx, [ebp+var_4]
.text$mn:0000A616                 push    ecx             ; Memory
.text$mn:0000A617                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:0000A61C                 add     esp, 4
.text$mn:0000A61F
.text$mn:0000A61F loc_A61F:                               ; CODE XREF: std::locale::facet::`scalar deleting destructor'(uint)+15j
.text$mn:0000A61F                 mov     eax, [ebp+var_4]
.text$mn:0000A622                 mov     esp, ebp
.text$mn:0000A624                 pop     ebp
.text$mn:0000A625                 retn    4
.text$mn:0000A625 ??_Gfacet@locale@std@@MAEPAXI@Z endp
.text$mn:0000A625
.text$mn:0000A625 _text$mn        ends
.text$mn:0000A625
.text$mn:0000A628 ; ===========================================================================
.text$mn:0000A628
.text$mn:0000A628 ; Segment type: Pure code
.text$mn:0000A628 ; Segment permissions: Read/Execute
.text$mn:0000A628 _text$mn        segment para public 'CODE' use32
.text$mn:0000A628                 assume cs:_text$mn
.text$mn:0000A628                 ;org 0A628h
.text$mn:0000A628 ; COMDAT (pick any)
.text$mn:0000A628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A628
.text$mn:0000A628 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A628
.text$mn:0000A628 ; Attributes: bp-based frame
.text$mn:0000A628
.text$mn:0000A628 ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:0000A628                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:0000A628 ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:0000A628
.text$mn:0000A628 var_4           = dword ptr -4
.text$mn:0000A628 arg_0           = dword ptr  8
.text$mn:0000A628
.text$mn:0000A628                 push    ebp
.text$mn:0000A629                 mov     ebp, esp
.text$mn:0000A62B                 push    ecx
.text$mn:0000A62C                 mov     [ebp+var_4], ecx
.text$mn:0000A62F                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A632                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:0000A637                 mov     eax, [ebp+arg_0]
.text$mn:0000A63A                 and     eax, 1
.text$mn:0000A63D                 jz      short loc_A64B
.text$mn:0000A63F                 mov     ecx, [ebp+var_4]
.text$mn:0000A642                 push    ecx             ; void *
.text$mn:0000A643                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A648                 add     esp, 4
.text$mn:0000A64B
.text$mn:0000A64B loc_A64B:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:0000A64B                 mov     eax, [ebp+var_4]
.text$mn:0000A64E                 mov     esp, ebp
.text$mn:0000A650                 pop     ebp
.text$mn:0000A651                 retn    4
.text$mn:0000A651 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:0000A651
.text$mn:0000A651 _text$mn        ends
.text$mn:0000A651
.text$di:0000A654 ; ===========================================================================
.text$di:0000A654
.text$di:0000A654 ; Segment type: Pure code
.text$di:0000A654 ; Segment permissions: Read/Execute
.text$di:0000A654 _text$di        segment para public 'CODE' use32
.text$di:0000A654                 assume cs:_text$di
.text$di:0000A654                 ;org 0A654h
.text$di:0000A654 ; COMDAT (pick any)
.text$di:0000A654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A654
.text$di:0000A654 ; =============== S U B R O U T I N E =======================================
.text$di:0000A654
.text$di:0000A654 ; Attributes: bp-based frame
.text$di:0000A654
.text$di:0000A654 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:0000A654 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:0000A654                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:0000A654                 push    ebp
.text$di:0000A655                 mov     ebp, esp
.text$di:0000A657                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:0000A65C                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:0000A661                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000A666                 call    _atexit
.text$di:0000A66B                 add     esp, 4
.text$di:0000A66E                 pop     ebp
.text$di:0000A66F                 retn
.text$di:0000A66F ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:0000A66F
.text$di:0000A66F _text$di        ends
.text$di:0000A66F
.text$di:0000A670 ; ===========================================================================
.text$di:0000A670
.text$di:0000A670 ; Segment type: Pure code
.text$di:0000A670 ; Segment permissions: Read/Execute
.text$di:0000A670 _text$di        segment para public 'CODE' use32
.text$di:0000A670                 assume cs:_text$di
.text$di:0000A670                 ;org 0A670h
.text$di:0000A670 ; COMDAT (pick any)
.text$di:0000A670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A670
.text$di:0000A670 ; =============== S U B R O U T I N E =======================================
.text$di:0000A670
.text$di:0000A670 ; Attributes: bp-based frame
.text$di:0000A670
.text$di:0000A670 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:0000A670 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:0000A670                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:0000A670                 push    ebp
.text$di:0000A671                 mov     ebp, esp
.text$di:0000A673                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:0000A678                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:0000A67D                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000A682                 call    _atexit
.text$di:0000A687                 add     esp, 4
.text$di:0000A68A                 pop     ebp
.text$di:0000A68B                 retn
.text$di:0000A68B ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:0000A68B
.text$di:0000A68B _text$di        ends
.text$di:0000A68B
.text$di:0000A68C ; ===========================================================================
.text$di:0000A68C
.text$di:0000A68C ; Segment type: Pure code
.text$di:0000A68C ; Segment permissions: Read/Execute
.text$di:0000A68C _text$di        segment para public 'CODE' use32
.text$di:0000A68C                 assume cs:_text$di
.text$di:0000A68C                 ;org 0A68Ch
.text$di:0000A68C ; COMDAT (pick any)
.text$di:0000A68C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A68C
.text$di:0000A68C ; =============== S U B R O U T I N E =======================================
.text$di:0000A68C
.text$di:0000A68C ; Attributes: bp-based frame
.text$di:0000A68C
.text$di:0000A68C ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:0000A68C ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:0000A68C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:0000A68C                 push    ebp
.text$di:0000A68D                 mov     ebp, esp
.text$di:0000A68F                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:0000A694                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:0000A699                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000A69E                 call    _atexit
.text$di:0000A6A3                 add     esp, 4
.text$di:0000A6A6                 pop     ebp
.text$di:0000A6A7                 retn
.text$di:0000A6A7 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:0000A6A7
.text$di:0000A6A7 _text$di        ends
.text$di:0000A6A7
.text$di:0000A6A8 ; ===========================================================================
.text$di:0000A6A8
.text$di:0000A6A8 ; Segment type: Pure code
.text$di:0000A6A8 ; Segment permissions: Read/Execute
.text$di:0000A6A8 _text$di        segment para public 'CODE' use32
.text$di:0000A6A8                 assume cs:_text$di
.text$di:0000A6A8                 ;org 0A6A8h
.text$di:0000A6A8 ; COMDAT (pick any)
.text$di:0000A6A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A6A8
.text$di:0000A6A8 ; =============== S U B R O U T I N E =======================================
.text$di:0000A6A8
.text$di:0000A6A8 ; Attributes: bp-based frame
.text$di:0000A6A8
.text$di:0000A6A8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:0000A6A8 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000A6A8                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:0000A6A8                 push    ebp
.text$di:0000A6A9                 mov     ebp, esp
.text$di:0000A6AB                 push    0               ; unsigned int
.text$di:0000A6AD                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000A6B2                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000A6B7                 pop     ebp
.text$di:0000A6B8                 retn
.text$di:0000A6B8 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000A6B8
.text$di:0000A6B8 ; ---------------------------------------------------------------------------
.text$di:0000A6B9                 align 4
.text$di:0000A6B9 _text$di        ends
.text$di:0000A6B9
.text$di:0000A6BC ; ===========================================================================
.text$di:0000A6BC
.text$di:0000A6BC ; Segment type: Pure code
.text$di:0000A6BC ; Segment permissions: Read/Execute
.text$di:0000A6BC _text$di        segment para public 'CODE' use32
.text$di:0000A6BC                 assume cs:_text$di
.text$di:0000A6BC                 ;org 0A6BCh
.text$di:0000A6BC ; COMDAT (pick any)
.text$di:0000A6BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A6BC
.text$di:0000A6BC ; =============== S U B R O U T I N E =======================================
.text$di:0000A6BC
.text$di:0000A6BC ; Attributes: bp-based frame
.text$di:0000A6BC
.text$di:0000A6BC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:0000A6BC ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000A6BC                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:0000A6BC                 push    ebp
.text$di:0000A6BD                 mov     ebp, esp
.text$di:0000A6BF                 push    0               ; unsigned int
.text$di:0000A6C1                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000A6C6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000A6CB                 pop     ebp
.text$di:0000A6CC                 retn
.text$di:0000A6CC ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000A6CC
.text$di:0000A6CC ; ---------------------------------------------------------------------------
.text$di:0000A6CD                 align 10h
.text$di:0000A6CD _text$di        ends
.text$di:0000A6CD
.text$di:0000A6D0 ; ===========================================================================
.text$di:0000A6D0
.text$di:0000A6D0 ; Segment type: Pure code
.text$di:0000A6D0 ; Segment permissions: Read/Execute
.text$di:0000A6D0 _text$di        segment para public 'CODE' use32
.text$di:0000A6D0                 assume cs:_text$di
.text$di:0000A6D0                 ;org 0A6D0h
.text$di:0000A6D0 ; COMDAT (pick any)
.text$di:0000A6D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A6D0
.text$di:0000A6D0 ; =============== S U B R O U T I N E =======================================
.text$di:0000A6D0
.text$di:0000A6D0 ; Attributes: bp-based frame
.text$di:0000A6D0
.text$di:0000A6D0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:0000A6D0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000A6D0                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:0000A6D0                 push    ebp
.text$di:0000A6D1                 mov     ebp, esp
.text$di:0000A6D3                 push    0               ; unsigned int
.text$di:0000A6D5                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:0000A6DA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000A6DF                 pop     ebp
.text$di:0000A6E0                 retn
.text$di:0000A6E0 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000A6E0
.text$di:0000A6E0 ; ---------------------------------------------------------------------------
.text$di:0000A6E1                 align 4
.text$di:0000A6E1 _text$di        ends
.text$di:0000A6E1
.text$di:0000A6E4 ; ===========================================================================
.text$di:0000A6E4
.text$di:0000A6E4 ; Segment type: Pure code
.text$di:0000A6E4 ; Segment permissions: Read/Execute
.text$di:0000A6E4 _text$di        segment para public 'CODE' use32
.text$di:0000A6E4                 assume cs:_text$di
.text$di:0000A6E4                 ;org 0A6E4h
.text$di:0000A6E4 ; COMDAT (pick any)
.text$di:0000A6E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A6E4
.text$di:0000A6E4 ; =============== S U B R O U T I N E =======================================
.text$di:0000A6E4
.text$di:0000A6E4 ; Attributes: bp-based frame
.text$di:0000A6E4
.text$di:0000A6E4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:0000A6E4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000A6E4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:0000A6E4                 push    ebp
.text$di:0000A6E5                 mov     ebp, esp
.text$di:0000A6E7                 push    0               ; unsigned int
.text$di:0000A6E9                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:0000A6EE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000A6F3                 pop     ebp
.text$di:0000A6F4                 retn
.text$di:0000A6F4 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000A6F4
.text$di:0000A6F4 ; ---------------------------------------------------------------------------
.text$di:0000A6F5                 align 4
.text$di:0000A6F5 _text$di        ends
.text$di:0000A6F5
.text$di:0000A6F8 ; ===========================================================================
.text$di:0000A6F8
.text$di:0000A6F8 ; Segment type: Pure code
.text$di:0000A6F8 ; Segment permissions: Read/Execute
.text$di:0000A6F8 _text$di        segment para public 'CODE' use32
.text$di:0000A6F8                 assume cs:_text$di
.text$di:0000A6F8                 ;org 0A6F8h
.text$di:0000A6F8 ; COMDAT (pick any)
.text$di:0000A6F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A6F8
.text$di:0000A6F8 ; =============== S U B R O U T I N E =======================================
.text$di:0000A6F8
.text$di:0000A6F8 ; Attributes: bp-based frame
.text$di:0000A6F8
.text$di:0000A6F8 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:0000A6F8 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:0000A6F8
.text$di:0000A6F8 var_1           = byte ptr -1
.text$di:0000A6F8
.text$di:0000A6F8                 push    ebp
.text$di:0000A6F9                 mov     ebp, esp
.text$di:0000A6FB                 push    ecx
.text$di:0000A6FC                 xor     eax, eax
.text$di:0000A6FE                 mov     [ebp+var_1], al
.text$di:0000A701                 mov     esp, ebp
.text$di:0000A703                 pop     ebp
.text$di:0000A704                 retn
.text$di:0000A704 ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:0000A704
.text$di:0000A704 ; ---------------------------------------------------------------------------
.text$di:0000A705                 align 4
.text$di:0000A705 _text$di        ends
.text$di:0000A705
.text$di:0000A708 ; ===========================================================================
.text$di:0000A708
.text$di:0000A708 ; Segment type: Pure code
.text$di:0000A708 ; Segment permissions: Read/Execute
.text$di:0000A708 _text$di        segment para public 'CODE' use32
.text$di:0000A708                 assume cs:_text$di
.text$di:0000A708                 ;org 0A708h
.text$di:0000A708 ; COMDAT (pick any)
.text$di:0000A708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A708
.text$di:0000A708 ; =============== S U B R O U T I N E =======================================
.text$di:0000A708
.text$di:0000A708 ; Attributes: bp-based frame
.text$di:0000A708
.text$di:0000A708 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:0000A708 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:0000A708
.text$di:0000A708 var_1           = byte ptr -1
.text$di:0000A708
.text$di:0000A708                 push    ebp
.text$di:0000A709                 mov     ebp, esp
.text$di:0000A70B                 push    ecx
.text$di:0000A70C                 xor     eax, eax
.text$di:0000A70E                 mov     [ebp+var_1], al
.text$di:0000A711                 mov     esp, ebp
.text$di:0000A713                 pop     ebp
.text$di:0000A714                 retn
.text$di:0000A714 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:0000A714
.text$di:0000A714 ; ---------------------------------------------------------------------------
.text$di:0000A715                 align 4
.text$di:0000A715 _text$di        ends
.text$di:0000A715
.text$di:0000A718 ; ===========================================================================
.text$di:0000A718
.text$di:0000A718 ; Segment type: Pure code
.text$di:0000A718 ; Segment permissions: Read/Execute
.text$di:0000A718 _text$di        segment para public 'CODE' use32
.text$di:0000A718                 assume cs:_text$di
.text$di:0000A718                 ;org 0A718h
.text$di:0000A718 ; COMDAT (pick any)
.text$di:0000A718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A718
.text$di:0000A718 ; =============== S U B R O U T I N E =======================================
.text$di:0000A718
.text$di:0000A718 ; Attributes: bp-based frame
.text$di:0000A718
.text$di:0000A718 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:0000A718 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:0000A718                 push    ebp
.text$di:0000A719                 mov     ebp, esp
.text$di:0000A71B                 mov     ecx, offset _ignore ; this
.text$di:0000A720                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:0000A725                 pop     ebp
.text$di:0000A726                 retn
.text$di:0000A726 ??__Eignore@std@@YAXXZ endp
.text$di:0000A726
.text$di:0000A726 ; ---------------------------------------------------------------------------
.text$di:0000A727                 align 4
.text$di:0000A727 _text$di        ends
.text$di:0000A727
.text$di:0000A728 ; ===========================================================================
.text$di:0000A728
.text$di:0000A728 ; Segment type: Pure code
.text$di:0000A728 ; Segment permissions: Read/Execute
.text$di:0000A728 _text$di        segment para public 'CODE' use32
.text$di:0000A728                 assume cs:_text$di
.text$di:0000A728                 ;org 0A728h
.text$di:0000A728 ; COMDAT (pick any)
.text$di:0000A728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000A728
.text$di:0000A728 ; =============== S U B R O U T I N E =======================================
.text$di:0000A728
.text$di:0000A728 ; Attributes: bp-based frame
.text$di:0000A728
.text$di:0000A728 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:0000A728 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:0000A728                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:0000A728
.text$di:0000A728 var_1           = byte ptr -1
.text$di:0000A728
.text$di:0000A728                 push    ebp
.text$di:0000A729                 mov     ebp, esp
.text$di:0000A72B                 push    ecx
.text$di:0000A72C                 xor     eax, eax
.text$di:0000A72E                 mov     [ebp+var_1], al
.text$di:0000A731                 mov     esp, ebp
.text$di:0000A733                 pop     ebp
.text$di:0000A734                 retn
.text$di:0000A734 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:0000A734
.text$di:0000A734 ; ---------------------------------------------------------------------------
.text$di:0000A735                 align 4
.text$di:0000A735 _text$di        ends
.text$di:0000A735
.text$yd:0000A738 ; ===========================================================================
.text$yd:0000A738
.text$yd:0000A738 ; Segment type: Pure code
.text$yd:0000A738 ; Segment permissions: Read/Execute
.text$yd:0000A738 _text$yd        segment para public 'CODE' use32
.text$yd:0000A738                 assume cs:_text$yd
.text$yd:0000A738                 ;org 0A738h
.text$yd:0000A738 ; COMDAT (pick any)
.text$yd:0000A738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:0000A738
.text$yd:0000A738 ; =============== S U B R O U T I N E =======================================
.text$yd:0000A738
.text$yd:0000A738 ; Attributes: bp-based frame
.text$yd:0000A738
.text$yd:0000A738 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:0000A738 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:0000A738                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:0000A738                 push    ebp
.text$yd:0000A739                 mov     ebp, esp
.text$yd:0000A73B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:0000A740                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:0000A745                 pop     ebp
.text$yd:0000A746                 retn
.text$yd:0000A746 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:0000A746
.text$yd:0000A746 ; ---------------------------------------------------------------------------
.text$yd:0000A747                 align 4
.text$yd:0000A747 _text$yd        ends
.text$yd:0000A747
.text$yd:0000A748 ; ===========================================================================
.text$yd:0000A748
.text$yd:0000A748 ; Segment type: Pure code
.text$yd:0000A748 ; Segment permissions: Read/Execute
.text$yd:0000A748 _text$yd        segment para public 'CODE' use32
.text$yd:0000A748                 assume cs:_text$yd
.text$yd:0000A748                 ;org 0A748h
.text$yd:0000A748 ; COMDAT (pick any)
.text$yd:0000A748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:0000A748
.text$yd:0000A748 ; =============== S U B R O U T I N E =======================================
.text$yd:0000A748
.text$yd:0000A748 ; Attributes: bp-based frame
.text$yd:0000A748
.text$yd:0000A748 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:0000A748 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:0000A748                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:0000A748                 push    ebp
.text$yd:0000A749                 mov     ebp, esp
.text$yd:0000A74B                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:0000A750                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:0000A755                 pop     ebp
.text$yd:0000A756                 retn
.text$yd:0000A756 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:0000A756
.text$yd:0000A756 ; ---------------------------------------------------------------------------
.text$yd:0000A757                 align 4
.text$yd:0000A757 _text$yd        ends
.text$yd:0000A757
.text$yd:0000A758 ; ===========================================================================
.text$yd:0000A758
.text$yd:0000A758 ; Segment type: Pure code
.text$yd:0000A758 ; Segment permissions: Read/Execute
.text$yd:0000A758 _text$yd        segment para public 'CODE' use32
.text$yd:0000A758                 assume cs:_text$yd
.text$yd:0000A758                 ;org 0A758h
.text$yd:0000A758 ; COMDAT (pick any)
.text$yd:0000A758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:0000A758
.text$yd:0000A758 ; =============== S U B R O U T I N E =======================================
.text$yd:0000A758
.text$yd:0000A758 ; Attributes: bp-based frame
.text$yd:0000A758
.text$yd:0000A758 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:0000A758 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:0000A758                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:0000A758                 push    ebp
.text$yd:0000A759                 mov     ebp, esp
.text$yd:0000A75B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:0000A760                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:0000A765                 pop     ebp
.text$yd:0000A766                 retn
.text$yd:0000A766 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:0000A766
.text$yd:0000A766 ; ---------------------------------------------------------------------------
.text$yd:0000A767                 align 4
.text$yd:0000A767 _text$yd        ends
.text$yd:0000A767
.text$mn:0000A768 ; ===========================================================================
.text$mn:0000A768
.text$mn:0000A768 ; Segment type: Pure code
.text$mn:0000A768 ; Segment permissions: Read/Execute
.text$mn:0000A768 _text$mn        segment para public 'CODE' use32
.text$mn:0000A768                 assume cs:_text$mn
.text$mn:0000A768                 ;org 0A768h
.text$mn:0000A768 ; COMDAT (pick any)
.text$mn:0000A768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A768
.text$mn:0000A768 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A768
.text$mn:0000A768 ; Attributes: bp-based frame
.text$mn:0000A768
.text$mn:0000A768 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:0000A768                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:0000A768 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:0000A768                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:0000A768                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)+45p ...
.text$mn:0000A768
.text$mn:0000A768 var_1C          = byte ptr -1Ch
.text$mn:0000A768 var_18          = byte ptr -18h
.text$mn:0000A768 var_14          = dword ptr -14h
.text$mn:0000A768 var_10          = dword ptr -10h
.text$mn:0000A768 var_C           = dword ptr -0Ch
.text$mn:0000A768 var_4           = dword ptr -4
.text$mn:0000A768 arg_0           = dword ptr  8
.text$mn:0000A768
.text$mn:0000A768                 push    ebp
.text$mn:0000A769                 mov     ebp, esp
.text$mn:0000A76B                 push    0FFFFFFFFh
.text$mn:0000A76D                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:0000A772                 mov     eax, large fs:0
.text$mn:0000A778                 push    eax
.text$mn:0000A779                 sub     esp, 10h
.text$mn:0000A77C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A781                 xor     eax, ebp
.text$mn:0000A783                 push    eax
.text$mn:0000A784                 lea     eax, [ebp+var_C]
.text$mn:0000A787                 mov     large fs:0, eax
.text$mn:0000A78D                 mov     [ebp+var_10], ecx
.text$mn:0000A790                 cmp     [ebp+arg_0], 0
.text$mn:0000A794                 jnz     short loc_A7C0
.text$mn:0000A796                 push    3               ; int
.text$mn:0000A798                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000A79B                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000A7A0                 mov     [ebp+var_4], 0
.text$mn:0000A7A7                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000A7AA                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000A7AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A7B6                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000A7B9                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000A7BE                 jmp     short loc_A817
.text$mn:0000A7C0 ; ---------------------------------------------------------------------------
.text$mn:0000A7C0
.text$mn:0000A7C0 loc_A7C0:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:0000A7C0                 mov     eax, [ebp+arg_0]
.text$mn:0000A7C3                 mov     ecx, [eax]
.text$mn:0000A7C5                 mov     [ebp+var_14], ecx
.text$mn:0000A7C8                 mov     edx, [ebp+var_10]
.text$mn:0000A7CB                 mov     eax, [edx]
.text$mn:0000A7CD                 cmp     eax, [ebp+var_14]
.text$mn:0000A7D0                 jz      short loc_A817
.text$mn:0000A7D2                 push    3               ; int
.text$mn:0000A7D4                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000A7D7                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000A7DC                 mov     [ebp+var_4], 1
.text$mn:0000A7E3                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000A7E6                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000A7EB                 mov     ecx, [ebp+var_10]
.text$mn:0000A7EE                 mov     edx, [ebp+var_14]
.text$mn:0000A7F1                 mov     eax, [edx+4]
.text$mn:0000A7F4                 mov     [ecx+4], eax
.text$mn:0000A7F7                 mov     ecx, [ebp+var_14]
.text$mn:0000A7FA                 mov     edx, [ebp+var_10]
.text$mn:0000A7FD                 mov     [ecx+4], edx
.text$mn:0000A800                 mov     eax, [ebp+var_10]
.text$mn:0000A803                 mov     ecx, [ebp+var_14]
.text$mn:0000A806                 mov     [eax], ecx
.text$mn:0000A808                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A80F                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000A812                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000A817
.text$mn:0000A817 loc_A817:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000A817                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000A817                 mov     ecx, [ebp+var_C]
.text$mn:0000A81A                 mov     large fs:0, ecx
.text$mn:0000A821                 pop     ecx
.text$mn:0000A822                 mov     esp, ebp
.text$mn:0000A824                 pop     ebp
.text$mn:0000A825                 retn    4
.text$mn:0000A825 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000A825
.text$mn:0000A825 _text$mn        ends
.text$mn:0000A825
.text$x:0000A828 ; ===========================================================================
.text$x:0000A828
.text$x:0000A828 ; Segment type: Pure code
.text$x:0000A828 ; Segment permissions: Read/Execute
.text$x:0000A828 _text$x         segment para public 'CODE' use32
.text$x:0000A828                 assume cs:_text$x
.text$x:0000A828                 ;org 0A828h
.text$x:0000A828 ; COMDAT (pick associative to section at A768)
.text$x:0000A828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A828
.text$x:0000A828 ; =============== S U B R O U T I N E =======================================
.text$x:0000A828
.text$x:0000A828
.text$x:0000A828 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:0000A828                                         ; DATA XREF: .xdata$x:0000F578o
.text$x:0000A828                 lea     ecx, [ebp-18h]  ; this
.text$x:0000A82B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000A82B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:0000A82B
.text$x:0000A830
.text$x:0000A830 ; =============== S U B R O U T I N E =======================================
.text$x:0000A830
.text$x:0000A830
.text$x:0000A830 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:0000A830                                         ; DATA XREF: .xdata$x:0000F580o
.text$x:0000A830                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000A833                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000A833 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000A833
.text$x:0000A838
.text$x:0000A838 ; =============== S U B R O U T I N E =======================================
.text$x:0000A838
.text$x:0000A838
.text$x:0000A838 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:0000A838                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:0000A838
.text$x:0000A838 arg_4           = dword ptr  8
.text$x:0000A838
.text$x:0000A838                 mov     edx, [esp+arg_4]
.text$x:0000A83C                 lea     eax, [edx+0Ch]
.text$x:0000A83F                 mov     ecx, [edx-14h]
.text$x:0000A842                 xor     ecx, eax
.text$x:0000A844                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A849                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:0000A84E                 jmp     ___CxxFrameHandler3
.text$x:0000A84E __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:0000A84E
.text$x:0000A84E ; ---------------------------------------------------------------------------
.text$x:0000A853                 align 4
.text$x:0000A853 _text$x         ends
.text$x:0000A853
.text$mn:0000A854 ; ===========================================================================
.text$mn:0000A854
.text$mn:0000A854 ; Segment type: Pure code
.text$mn:0000A854 ; Segment permissions: Read/Execute
.text$mn:0000A854 _text$mn        segment para public 'CODE' use32
.text$mn:0000A854                 assume cs:_text$mn
.text$mn:0000A854                 ;org 0A854h
.text$mn:0000A854 ; COMDAT (pick any)
.text$mn:0000A854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A854
.text$mn:0000A854 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A854
.text$mn:0000A854 ; Attributes: bp-based frame
.text$mn:0000A854
.text$mn:0000A854 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000A854                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000A854 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A854                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000A854
.text$mn:0000A854 var_10          = byte ptr -10h
.text$mn:0000A854 var_8           = dword ptr -8
.text$mn:0000A854 var_1           = byte ptr -1
.text$mn:0000A854
.text$mn:0000A854                 push    ebp
.text$mn:0000A855                 mov     ebp, esp
.text$mn:0000A857                 sub     esp, 10h
.text$mn:0000A85A                 mov     [ebp+var_8], ecx
.text$mn:0000A85D                 lea     ecx, [ebp+var_1]
.text$mn:0000A860                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A865                 push    1
.text$mn:0000A867                 lea     ecx, [ebp+var_1]
.text$mn:0000A86A                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000A86F                 mov     ecx, [ebp+var_8]
.text$mn:0000A872                 mov     [ecx], eax
.text$mn:0000A874                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A877                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A87C                 push    eax             ; int
.text$mn:0000A87D                 mov     edx, [ebp+var_8]
.text$mn:0000A880                 mov     eax, [edx]
.text$mn:0000A882                 push    eax             ; void *
.text$mn:0000A883                 lea     ecx, [ebp+var_1]
.text$mn:0000A886                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A88B                 mov     ecx, [ebp+var_8]
.text$mn:0000A88E                 mov     edx, [ecx]
.text$mn:0000A890                 mov     eax, [ebp+var_8]
.text$mn:0000A893                 mov     [edx], eax
.text$mn:0000A895                 mov     esp, ebp
.text$mn:0000A897                 pop     ebp
.text$mn:0000A898                 retn
.text$mn:0000A898 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A898
.text$mn:0000A898 ; ---------------------------------------------------------------------------
.text$mn:0000A899                 align 4
.text$mn:0000A899 _text$mn        ends
.text$mn:0000A899
.text$mn:0000A89C ; ===========================================================================
.text$mn:0000A89C
.text$mn:0000A89C ; Segment type: Pure code
.text$mn:0000A89C ; Segment permissions: Read/Execute
.text$mn:0000A89C _text$mn        segment para public 'CODE' use32
.text$mn:0000A89C                 assume cs:_text$mn
.text$mn:0000A89C                 ;org 0A89Ch
.text$mn:0000A89C ; COMDAT (pick any)
.text$mn:0000A89C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A89C
.text$mn:0000A89C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A89C
.text$mn:0000A89C ; Attributes: bp-based frame
.text$mn:0000A89C
.text$mn:0000A89C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:0000A89C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000A89C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A89C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:0000A89C
.text$mn:0000A89C var_10          = byte ptr -10h
.text$mn:0000A89C var_8           = dword ptr -8
.text$mn:0000A89C var_1           = byte ptr -1
.text$mn:0000A89C
.text$mn:0000A89C                 push    ebp
.text$mn:0000A89D                 mov     ebp, esp
.text$mn:0000A89F                 sub     esp, 10h
.text$mn:0000A8A2                 mov     [ebp+var_8], ecx
.text$mn:0000A8A5                 lea     ecx, [ebp+var_1]
.text$mn:0000A8A8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A8AD                 push    1
.text$mn:0000A8AF                 lea     ecx, [ebp+var_1]
.text$mn:0000A8B2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000A8B7                 mov     ecx, [ebp+var_8]
.text$mn:0000A8BA                 mov     [ecx], eax
.text$mn:0000A8BC                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A8BF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A8C4                 push    eax             ; int
.text$mn:0000A8C5                 mov     edx, [ebp+var_8]
.text$mn:0000A8C8                 mov     eax, [edx]
.text$mn:0000A8CA                 push    eax             ; void *
.text$mn:0000A8CB                 lea     ecx, [ebp+var_1]
.text$mn:0000A8CE                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A8D3                 mov     ecx, [ebp+var_8]
.text$mn:0000A8D6                 mov     edx, [ecx]
.text$mn:0000A8D8                 mov     eax, [ebp+var_8]
.text$mn:0000A8DB                 mov     [edx], eax
.text$mn:0000A8DD                 mov     esp, ebp
.text$mn:0000A8DF                 pop     ebp
.text$mn:0000A8E0                 retn
.text$mn:0000A8E0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A8E0
.text$mn:0000A8E0 ; ---------------------------------------------------------------------------
.text$mn:0000A8E1                 align 4
.text$mn:0000A8E1 _text$mn        ends
.text$mn:0000A8E1
.text$mn:0000A8E4 ; ===========================================================================
.text$mn:0000A8E4
.text$mn:0000A8E4 ; Segment type: Pure code
.text$mn:0000A8E4 ; Segment permissions: Read/Execute
.text$mn:0000A8E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A8E4                 assume cs:_text$mn
.text$mn:0000A8E4                 ;org 0A8E4h
.text$mn:0000A8E4 ; COMDAT (pick any)
.text$mn:0000A8E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A8E4
.text$mn:0000A8E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A8E4
.text$mn:0000A8E4 ; Attributes: bp-based frame
.text$mn:0000A8E4
.text$mn:0000A8E4 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:0000A8E4                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000A8E4 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000A8E4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:0000A8E4
.text$mn:0000A8E4 var_10          = byte ptr -10h
.text$mn:0000A8E4 var_8           = dword ptr -8
.text$mn:0000A8E4 var_1           = byte ptr -1
.text$mn:0000A8E4
.text$mn:0000A8E4                 push    ebp
.text$mn:0000A8E5                 mov     ebp, esp
.text$mn:0000A8E7                 sub     esp, 10h
.text$mn:0000A8EA                 mov     [ebp+var_8], ecx
.text$mn:0000A8ED                 lea     ecx, [ebp+var_1]
.text$mn:0000A8F0                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A8F5                 push    1
.text$mn:0000A8F7                 lea     ecx, [ebp+var_1]
.text$mn:0000A8FA                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:0000A8FF                 mov     ecx, [ebp+var_8]
.text$mn:0000A902                 mov     [ecx], eax
.text$mn:0000A904                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A907                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A90C                 push    eax             ; int
.text$mn:0000A90D                 mov     edx, [ebp+var_8]
.text$mn:0000A910                 mov     eax, [edx]
.text$mn:0000A912                 push    eax             ; void *
.text$mn:0000A913                 lea     ecx, [ebp+var_1]
.text$mn:0000A916                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A91B                 mov     ecx, [ebp+var_8]
.text$mn:0000A91E                 mov     edx, [ecx]
.text$mn:0000A920                 mov     eax, [ebp+var_8]
.text$mn:0000A923                 mov     [edx], eax
.text$mn:0000A925                 mov     esp, ebp
.text$mn:0000A927                 pop     ebp
.text$mn:0000A928                 retn
.text$mn:0000A928 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000A928
.text$mn:0000A928 ; ---------------------------------------------------------------------------
.text$mn:0000A929                 align 4
.text$mn:0000A929 _text$mn        ends
.text$mn:0000A929
.text$mn:0000A92C ; ===========================================================================
.text$mn:0000A92C
.text$mn:0000A92C ; Segment type: Pure code
.text$mn:0000A92C ; Segment permissions: Read/Execute
.text$mn:0000A92C _text$mn        segment para public 'CODE' use32
.text$mn:0000A92C                 assume cs:_text$mn
.text$mn:0000A92C                 ;org 0A92Ch
.text$mn:0000A92C ; COMDAT (pick any)
.text$mn:0000A92C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A92C
.text$mn:0000A92C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A92C
.text$mn:0000A92C ; Attributes: bp-based frame
.text$mn:0000A92C
.text$mn:0000A92C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000A92C                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:0000A92C ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:0000A92C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:0000A92C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:0000A92C
.text$mn:0000A92C var_8           = dword ptr -8
.text$mn:0000A92C var_1           = byte ptr -1
.text$mn:0000A92C arg_0           = dword ptr  8
.text$mn:0000A92C
.text$mn:0000A92C                 push    ebp
.text$mn:0000A92D                 mov     ebp, esp
.text$mn:0000A92F                 sub     esp, 8
.text$mn:0000A932                 mov     [ebp+var_8], ecx
.text$mn:0000A935                 mov     eax, [ebp+arg_0]
.text$mn:0000A938                 cmp     dword ptr [eax+18h], 8
.text$mn:0000A93C                 jnb     short loc_A960
.text$mn:0000A93E                 mov     ecx, [ebp+arg_0]
.text$mn:0000A941                 mov     edx, [ecx+14h]
.text$mn:0000A944                 add     edx, 1
.text$mn:0000A947                 push    edx             ; int
.text$mn:0000A948                 mov     eax, [ebp+arg_0]
.text$mn:0000A94B                 add     eax, 4
.text$mn:0000A94E                 push    eax             ; Src
.text$mn:0000A94F                 mov     ecx, [ebp+var_8]
.text$mn:0000A952                 add     ecx, 4
.text$mn:0000A955                 push    ecx             ; Dst
.text$mn:0000A956                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A95B                 add     esp, 0Ch
.text$mn:0000A95E                 jmp     short loc_A98B
.text$mn:0000A960 ; ---------------------------------------------------------------------------
.text$mn:0000A960
.text$mn:0000A960 loc_A960:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:0000A960                 mov     edx, [ebp+arg_0]
.text$mn:0000A963                 add     edx, 4
.text$mn:0000A966                 push    edx             ; int
.text$mn:0000A967                 mov     eax, [ebp+var_8]
.text$mn:0000A96A                 add     eax, 4
.text$mn:0000A96D                 push    eax             ; void *
.text$mn:0000A96E                 lea     ecx, [ebp+var_1]
.text$mn:0000A971                 push    ecx
.text$mn:0000A972                 mov     ecx, [ebp+var_8]
.text$mn:0000A975                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000A97A                 mov     ecx, eax
.text$mn:0000A97C                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000A981                 mov     edx, [ebp+arg_0]
.text$mn:0000A984                 mov     dword ptr [edx+4], 0
.text$mn:0000A98B
.text$mn:0000A98B loc_A98B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:0000A98B                 mov     eax, [ebp+var_8]
.text$mn:0000A98E                 mov     ecx, [ebp+arg_0]
.text$mn:0000A991                 mov     edx, [ecx+14h]
.text$mn:0000A994                 mov     [eax+14h], edx
.text$mn:0000A997                 mov     eax, [ebp+var_8]
.text$mn:0000A99A                 mov     ecx, [ebp+arg_0]
.text$mn:0000A99D                 mov     edx, [ecx+18h]
.text$mn:0000A9A0                 mov     [eax+18h], edx
.text$mn:0000A9A3                 push    0
.text$mn:0000A9A5                 push    0
.text$mn:0000A9A7                 mov     ecx, [ebp+arg_0]
.text$mn:0000A9AA                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000A9AF                 mov     esp, ebp
.text$mn:0000A9B1                 pop     ebp
.text$mn:0000A9B2                 retn    4
.text$mn:0000A9B2 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:0000A9B2
.text$mn:0000A9B2 ; ---------------------------------------------------------------------------
.text$mn:0000A9B5                 align 4
.text$mn:0000A9B5 _text$mn        ends
.text$mn:0000A9B5
.text$mn:0000A9B8 ; ===========================================================================
.text$mn:0000A9B8
.text$mn:0000A9B8 ; Segment type: Pure code
.text$mn:0000A9B8 ; Segment permissions: Read/Execute
.text$mn:0000A9B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9B8                 assume cs:_text$mn
.text$mn:0000A9B8                 ;org 0A9B8h
.text$mn:0000A9B8 ; COMDAT (pick any)
.text$mn:0000A9B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9B8
.text$mn:0000A9B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9B8
.text$mn:0000A9B8 ; Attributes: bp-based frame
.text$mn:0000A9B8
.text$mn:0000A9B8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:0000A9B8                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:0000A9B8 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:0000A9B8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:0000A9B8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:0000A9B8
.text$mn:0000A9B8 var_4           = dword ptr -4
.text$mn:0000A9B8
.text$mn:0000A9B8                 push    ebp
.text$mn:0000A9B9                 mov     ebp, esp
.text$mn:0000A9BB                 push    ecx
.text$mn:0000A9BC                 mov     [ebp+var_4], ecx
.text$mn:0000A9BF                 mov     esp, ebp
.text$mn:0000A9C1                 pop     ebp
.text$mn:0000A9C2                 retn    4
.text$mn:0000A9C2 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:0000A9C2
.text$mn:0000A9C2 ; ---------------------------------------------------------------------------
.text$mn:0000A9C5                 align 4
.text$mn:0000A9C5 _text$mn        ends
.text$mn:0000A9C5
.text$mn:0000A9C8 ; ===========================================================================
.text$mn:0000A9C8
.text$mn:0000A9C8 ; Segment type: Pure code
.text$mn:0000A9C8 ; Segment permissions: Read/Execute
.text$mn:0000A9C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9C8                 assume cs:_text$mn
.text$mn:0000A9C8                 ;org 0A9C8h
.text$mn:0000A9C8 ; COMDAT (pick any)
.text$mn:0000A9C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9C8
.text$mn:0000A9C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9C8
.text$mn:0000A9C8 ; Attributes: bp-based frame
.text$mn:0000A9C8
.text$mn:0000A9C8 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000A9C8                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:0000A9C8 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:0000A9C8                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+80p
.text$mn:0000A9C8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+80p
.text$mn:0000A9C8
.text$mn:0000A9C8 var_4           = dword ptr -4
.text$mn:0000A9C8
.text$mn:0000A9C8                 push    ebp
.text$mn:0000A9C9                 mov     ebp, esp
.text$mn:0000A9CB                 push    ecx
.text$mn:0000A9CC                 mov     [ebp+var_4], ecx
.text$mn:0000A9CF                 mov     eax, [ebp+var_4]
.text$mn:0000A9D2                 mov     dword ptr [eax], 0
.text$mn:0000A9D8                 mov     esp, ebp
.text$mn:0000A9DA                 pop     ebp
.text$mn:0000A9DB                 retn
.text$mn:0000A9DB ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:0000A9DB
.text$mn:0000A9DB _text$mn        ends
.text$mn:0000A9DB
.text$mn:0000A9DC ; ===========================================================================
.text$mn:0000A9DC
.text$mn:0000A9DC ; Segment type: Pure code
.text$mn:0000A9DC ; Segment permissions: Read/Execute
.text$mn:0000A9DC _text$mn        segment para public 'CODE' use32
.text$mn:0000A9DC                 assume cs:_text$mn
.text$mn:0000A9DC                 ;org 0A9DCh
.text$mn:0000A9DC ; COMDAT (pick any)
.text$mn:0000A9DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9DC
.text$mn:0000A9DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9DC
.text$mn:0000A9DC ; Attributes: bp-based frame
.text$mn:0000A9DC
.text$mn:0000A9DC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:0000A9DC                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:0000A9DC ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:0000A9DC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:0000A9DC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:0000A9DC
.text$mn:0000A9DC var_4           = dword ptr -4
.text$mn:0000A9DC arg_0           = dword ptr  8
.text$mn:0000A9DC
.text$mn:0000A9DC                 push    ebp
.text$mn:0000A9DD                 mov     ebp, esp
.text$mn:0000A9DF                 push    ecx
.text$mn:0000A9E0                 push    esi
.text$mn:0000A9E1                 mov     [ebp+var_4], ecx
.text$mn:0000A9E4                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A9E7                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A9EC                 test    eax, eax
.text$mn:0000A9EE                 jz      short loc_AA06
.text$mn:0000A9F0                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A9F3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A9F8                 mov     esi, eax
.text$mn:0000A9FA                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A9FD                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000AA02                 cmp     esi, eax
.text$mn:0000AA04                 jz      short loc_AA6E
.text$mn:0000AA06
.text$mn:0000AA06 loc_AA06:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:0000AA06                 push    0FAh ; '·'      ; unsigned int
.text$mn:0000AA0B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AA10                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:0000AA15                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000AA1A                 add     esp, 0Ch
.text$mn:0000AA1D                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:0000AA22                 test    eax, eax
.text$mn:0000AA24                 jz      short loc_AA2A
.text$mn:0000AA26                 xor     ecx, ecx
.text$mn:0000AA28                 jnz     short loc_AA50
.text$mn:0000AA2A
.text$mn:0000AA2A loc_AA2A:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:0000AA2A                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:0000AA2F                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000AA34                 push    0
.text$mn:0000AA36                 push    0FBh ; 'v'
.text$mn:0000AA3B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AA40                 push    2
.text$mn:0000AA42                 call    __CrtDbgReportW
.text$mn:0000AA47                 add     esp, 18h
.text$mn:0000AA4A                 cmp     eax, 1
.text$mn:0000AA4D                 jnz     short loc_AA50
.text$mn:0000AA4F                 int     3               ; Trap to Debugger
.text$mn:0000AA50
.text$mn:0000AA50 loc_AA50:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:0000AA50                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:0000AA50                 push    0
.text$mn:0000AA52                 push    0FBh ; 'v'
.text$mn:0000AA57                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AA5C                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:0000AA61                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:0000AA66                 call    __invalid_parameter
.text$mn:0000AA6B                 add     esp, 14h
.text$mn:0000AA6E
.text$mn:0000AA6E loc_AA6E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:0000AA6E                 pop     esi
.text$mn:0000AA6F                 mov     esp, ebp
.text$mn:0000AA71                 pop     ebp
.text$mn:0000AA72                 retn    4
.text$mn:0000AA72 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:0000AA72
.text$mn:0000AA72 ; ---------------------------------------------------------------------------
.text$mn:0000AA75                 align 4
.text$mn:0000AA75 _text$mn        ends
.text$mn:0000AA75
.text$mn:0000AA78 ; ===========================================================================
.text$mn:0000AA78
.text$mn:0000AA78 ; Segment type: Pure code
.text$mn:0000AA78 ; Segment permissions: Read/Execute
.text$mn:0000AA78 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA78                 assume cs:_text$mn
.text$mn:0000AA78                 ;org 0AA78h
.text$mn:0000AA78 ; COMDAT (pick any)
.text$mn:0000AA78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA78
.text$mn:0000AA78 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA78
.text$mn:0000AA78 ; Attributes: bp-based frame
.text$mn:0000AA78
.text$mn:0000AA78 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Iterator_base12 *)
.text$mn:0000AA78                 public ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:0000AA78 ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:0000AA78                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator==(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+10p
.text$mn:0000AA78                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator-(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+Ep ...
.text$mn:0000AA78
.text$mn:0000AA78 var_4           = dword ptr -4
.text$mn:0000AA78 arg_0           = dword ptr  8
.text$mn:0000AA78
.text$mn:0000AA78                 push    ebp
.text$mn:0000AA79                 mov     ebp, esp
.text$mn:0000AA7B                 push    ecx
.text$mn:0000AA7C                 push    esi
.text$mn:0000AA7D                 mov     [ebp+var_4], ecx
.text$mn:0000AA80                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AA83                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000AA88                 test    eax, eax
.text$mn:0000AA8A                 jz      short loc_AAA2
.text$mn:0000AA8C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AA8F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000AA94                 mov     esi, eax
.text$mn:0000AA96                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000AA99                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000AA9E                 cmp     esi, eax
.text$mn:0000AAA0                 jz      short loc_AB0A
.text$mn:0000AAA2
.text$mn:0000AAA2 loc_AAA2:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+12j
.text$mn:0000AAA2                 push    0F0h ; '='      ; unsigned int
.text$mn:0000AAA7                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AAAC                 push    offset ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "vector iterators incompatible"
.text$mn:0000AAB1                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000AAB6                 add     esp, 0Ch
.text$mn:0000AAB9                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:0000AABE                 test    eax, eax
.text$mn:0000AAC0                 jz      short loc_AAC6
.text$mn:0000AAC2                 xor     ecx, ecx
.text$mn:0000AAC4                 jnz     short loc_AAEC
.text$mn:0000AAC6
.text$mn:0000AAC6 loc_AAC6:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+48j
.text$mn:0000AAC6                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:0000AACB                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000AAD0                 push    0
.text$mn:0000AAD2                 push    0F1h ; '±'
.text$mn:0000AAD7                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AADC                 push    2
.text$mn:0000AADE                 call    __CrtDbgReportW
.text$mn:0000AAE3                 add     esp, 18h
.text$mn:0000AAE6                 cmp     eax, 1
.text$mn:0000AAE9                 jnz     short loc_AAEC
.text$mn:0000AAEB                 int     3               ; Trap to Debugger
.text$mn:0000AAEC
.text$mn:0000AAEC loc_AAEC:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+4Cj
.text$mn:0000AAEC                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+71j
.text$mn:0000AAEC                 push    0
.text$mn:0000AAEE                 push    0F1h ; '±'
.text$mn:0000AAF3                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000AAF8                 push    offset ??_C@_1BHK@KDGLPCFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_Vector_const_iterator<class std::"...
.text$mn:0000AAFD                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:0000AB02                 call    __invalid_parameter
.text$mn:0000AB07                 add     esp, 14h
.text$mn:0000AB0A
.text$mn:0000AB0A loc_AB0A:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+28j
.text$mn:0000AB0A                 pop     esi
.text$mn:0000AB0B                 mov     esp, ebp
.text$mn:0000AB0D                 pop     ebp
.text$mn:0000AB0E                 retn    4
.text$mn:0000AB0E ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:0000AB0E
.text$mn:0000AB0E ; ---------------------------------------------------------------------------
.text$mn:0000AB11                 align 4
.text$mn:0000AB11 _text$mn        ends
.text$mn:0000AB11
.text$mn:0000AB14 ; ===========================================================================
.text$mn:0000AB14
.text$mn:0000AB14 ; Segment type: Pure code
.text$mn:0000AB14 ; Segment permissions: Read/Execute
.text$mn:0000AB14 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB14                 assume cs:_text$mn
.text$mn:0000AB14                 ;org 0AB14h
.text$mn:0000AB14 ; COMDAT (pick any)
.text$mn:0000AB14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB14
.text$mn:0000AB14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB14
.text$mn:0000AB14 ; Attributes: bp-based frame
.text$mn:0000AB14
.text$mn:0000AB14 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:0000AB14                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000AB14 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:0000AB14                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:0000AB14
.text$mn:0000AB14 var_20          = dword ptr -20h
.text$mn:0000AB14 var_1C          = dword ptr -1Ch
.text$mn:0000AB14 var_18          = dword ptr -18h
.text$mn:0000AB14 var_11          = byte ptr -11h
.text$mn:0000AB14 var_10          = dword ptr -10h
.text$mn:0000AB14 var_C           = byte ptr -0Ch
.text$mn:0000AB14 var_4           = dword ptr -4
.text$mn:0000AB14 arg_0           = dword ptr  8
.text$mn:0000AB14
.text$mn:0000AB14 ; FUNCTION CHUNK AT .text$mn:0000AC36 SIZE 00000009 BYTES
.text$mn:0000AB14
.text$mn:0000AB14                 push    ebp
.text$mn:0000AB15                 mov     ebp, esp
.text$mn:0000AB17                 push    0FFFFFFFFh
.text$mn:0000AB19                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000AB1E                 mov     eax, large fs:0
.text$mn:0000AB24                 push    eax
.text$mn:0000AB25                 push    ecx
.text$mn:0000AB26                 sub     esp, 10h
.text$mn:0000AB29                 push    ebx
.text$mn:0000AB2A                 push    esi
.text$mn:0000AB2B                 push    edi
.text$mn:0000AB2C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AB31                 xor     eax, ebp
.text$mn:0000AB33                 push    eax
.text$mn:0000AB34                 lea     eax, [ebp+var_C]
.text$mn:0000AB37                 mov     large fs:0, eax
.text$mn:0000AB3D                 mov     [ebp+var_10], esp
.text$mn:0000AB40                 mov     [ebp+var_18], ecx
.text$mn:0000AB43                 mov     eax, [ebp+arg_0]
.text$mn:0000AB46                 or      eax, 0Fh
.text$mn:0000AB49                 mov     [ebp+var_1C], eax
.text$mn:0000AB4C                 mov     ecx, [ebp+var_18]
.text$mn:0000AB4F                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000AB54                 cmp     eax, [ebp+var_1C]
.text$mn:0000AB57                 jnb     short loc_AB61
.text$mn:0000AB59                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB5C                 mov     [ebp+var_1C], ecx
.text$mn:0000AB5F                 jmp     short loc_ABB3
.text$mn:0000AB61 ; ---------------------------------------------------------------------------
.text$mn:0000AB61
.text$mn:0000AB61 loc_AB61:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:0000AB61                 mov     edx, [ebp+var_18]
.text$mn:0000AB64                 mov     ecx, [edx+18h]
.text$mn:0000AB67                 shr     ecx, 1
.text$mn:0000AB69                 mov     eax, [ebp+var_1C]
.text$mn:0000AB6C                 xor     edx, edx
.text$mn:0000AB6E                 mov     esi, 3
.text$mn:0000AB73                 div     esi
.text$mn:0000AB75                 cmp     ecx, eax
.text$mn:0000AB77                 ja      short loc_AB7B
.text$mn:0000AB79                 jmp     short loc_ABB3
.text$mn:0000AB7B ; ---------------------------------------------------------------------------
.text$mn:0000AB7B
.text$mn:0000AB7B loc_AB7B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:0000AB7B                 mov     ecx, [ebp+var_18]
.text$mn:0000AB7E                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000AB83                 mov     edx, [ebp+var_18]
.text$mn:0000AB86                 mov     ecx, [edx+18h]
.text$mn:0000AB89                 shr     ecx, 1
.text$mn:0000AB8B                 sub     eax, ecx
.text$mn:0000AB8D                 mov     edx, [ebp+var_18]
.text$mn:0000AB90                 cmp     [edx+18h], eax
.text$mn:0000AB93                 ja      short loc_ABA8
.text$mn:0000AB95                 mov     eax, [ebp+var_18]
.text$mn:0000AB98                 mov     ecx, [eax+18h]
.text$mn:0000AB9B                 shr     ecx, 1
.text$mn:0000AB9D                 mov     edx, [ebp+var_18]
.text$mn:0000ABA0                 add     ecx, [edx+18h]
.text$mn:0000ABA3                 mov     [ebp+var_1C], ecx
.text$mn:0000ABA6                 jmp     short loc_ABB3
.text$mn:0000ABA8 ; ---------------------------------------------------------------------------
.text$mn:0000ABA8
.text$mn:0000ABA8 loc_ABA8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:0000ABA8                 mov     ecx, [ebp+var_18]
.text$mn:0000ABAB                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000ABB0                 mov     [ebp+var_1C], eax
.text$mn:0000ABB3
.text$mn:0000ABB3 loc_ABB3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000ABB3                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000ABB3                 mov     [ebp+var_4], 0
.text$mn:0000ABBA                 mov     eax, [ebp+var_1C]
.text$mn:0000ABBD                 add     eax, 1
.text$mn:0000ABC0                 push    eax
.text$mn:0000ABC1                 lea     ecx, [ebp+var_11]
.text$mn:0000ABC4                 push    ecx
.text$mn:0000ABC5                 mov     ecx, [ebp+var_18]
.text$mn:0000ABC8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000ABCD                 mov     ecx, eax
.text$mn:0000ABCF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000ABD4                 mov     [ebp+var_20], eax
.text$mn:0000ABD7                 jmp     short loc_AC36
.text$mn:0000ABD7 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:0000ABD7
.text$mn:0000ABD9
.text$mn:0000ABD9 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABD9
.text$mn:0000ABD9
.text$mn:0000ABD9 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000ABD9                                         ; DATA XREF: .xdata$x:0000F6BCo
.text$mn:0000ABD9
.text$mn:0000ABD9 ; FUNCTION CHUNK AT .text$mn:0000AC20 SIZE 00000009 BYTES
.text$mn:0000ABD9 ; FUNCTION CHUNK AT .text$mn:0000AC30 SIZE 00000006 BYTES
.text$mn:0000ABD9
.text$mn:0000ABD9                 mov     [ebp-10h], esp
.text$mn:0000ABDC                 mov     edx, [ebp+8]
.text$mn:0000ABDF                 mov     [ebp-1Ch], edx
.text$mn:0000ABE2                 mov     byte ptr [ebp-4], 2
.text$mn:0000ABE6                 mov     eax, [ebp-1Ch]
.text$mn:0000ABE9                 add     eax, 1
.text$mn:0000ABEC                 push    eax
.text$mn:0000ABED                 lea     ecx, [ebp-12h]
.text$mn:0000ABF0                 push    ecx
.text$mn:0000ABF1                 mov     ecx, [ebp-18h]
.text$mn:0000ABF4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000ABF9                 mov     ecx, eax
.text$mn:0000ABFB                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000AC00                 mov     [ebp-20h], eax
.text$mn:0000AC03                 jmp     short loc_AC20
.text$mn:0000AC03 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:0000AC03
.text$mn:0000AC05
.text$mn:0000AC05 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC05
.text$mn:0000AC05 ; Attributes: noreturn
.text$mn:0000AC05
.text$mn:0000AC05 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:0000AC05                                         ; DATA XREF: .xdata$x:0000F6CCo
.text$mn:0000AC05                 push    0               ; Size
.text$mn:0000AC07                 push    1               ; char
.text$mn:0000AC09                 mov     ecx, [ebp-18h]
.text$mn:0000AC0C                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000AC11                 push    0
.text$mn:0000AC13                 push    0
.text$mn:0000AC15                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000AC15 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:0000AC15
.text$mn:0000AC1A ; ---------------------------------------------------------------------------
.text$mn:0000AC1A                 mov     eax, offset $LN17
.text$mn:0000AC1F                 retn
.text$mn:0000AC20 ; ---------------------------------------------------------------------------
.text$mn:0000AC20 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000AC20
.text$mn:0000AC20 loc_AC20:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000AC20                 mov     dword ptr [ebp-4], 1
.text$mn:0000AC27                 jmp     short loc_AC30
.text$mn:0000AC27 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000AC29
.text$mn:0000AC29 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC29
.text$mn:0000AC29
.text$mn:0000AC29 $LN17           proc near               ; DATA XREF: .text$mn:0000AC1Ao
.text$mn:0000AC29                 mov     dword ptr [ebp-4], 1
.text$mn:0000AC29 $LN17           endp ; sp-analysis failed
.text$mn:0000AC29
.text$mn:0000AC30 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000AC30
.text$mn:0000AC30 loc_AC30:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000AC30                 mov     eax, offset $LN19
.text$mn:0000AC35                 retn
.text$mn:0000AC35 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000AC36 ; ---------------------------------------------------------------------------
.text$mn:0000AC36 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000AC36
.text$mn:0000AC36 loc_AC36:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:0000AC36                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000AC3D                 jmp     short loc_AC46
.text$mn:0000AC3D ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000AC3F
.text$mn:0000AC3F ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC3F
.text$mn:0000AC3F
.text$mn:0000AC3F $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_AC30o
.text$mn:0000AC3F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000AC46
.text$mn:0000AC46 loc_AC46:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:0000AC46                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000AC4A                 jbe     short loc_AC65
.text$mn:0000AC4C                 mov     edx, [ebp+0Ch]
.text$mn:0000AC4F                 push    edx             ; Size
.text$mn:0000AC50                 mov     ecx, [ebp-18h]
.text$mn:0000AC53                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000AC58                 push    eax             ; Src
.text$mn:0000AC59                 mov     eax, [ebp-20h]
.text$mn:0000AC5C                 push    eax             ; Dst
.text$mn:0000AC5D                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000AC62                 add     esp, 0Ch
.text$mn:0000AC65
.text$mn:0000AC65 loc_AC65:                               ; CODE XREF: $LN19+Bj
.text$mn:0000AC65                 push    0               ; Size
.text$mn:0000AC67                 push    1               ; char
.text$mn:0000AC69                 mov     ecx, [ebp-18h]
.text$mn:0000AC6C                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000AC71                 lea     ecx, [ebp-20h]
.text$mn:0000AC74                 push    ecx             ; int
.text$mn:0000AC75                 mov     edx, [ebp-18h]
.text$mn:0000AC78                 add     edx, 4
.text$mn:0000AC7B                 push    edx             ; void *
.text$mn:0000AC7C                 lea     eax, [ebp-13h]
.text$mn:0000AC7F                 push    eax
.text$mn:0000AC80                 mov     ecx, [ebp-18h]
.text$mn:0000AC83                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000AC88                 mov     ecx, eax
.text$mn:0000AC8A                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000AC8F                 mov     ecx, [ebp-18h]
.text$mn:0000AC92                 mov     edx, [ebp-1Ch]
.text$mn:0000AC95                 mov     [ecx+18h], edx
.text$mn:0000AC98                 mov     eax, [ebp+0Ch]
.text$mn:0000AC9B                 push    eax
.text$mn:0000AC9C                 mov     ecx, [ebp-18h]
.text$mn:0000AC9F                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000ACA4                 mov     ecx, [ebp-0Ch]
.text$mn:0000ACA7                 mov     large fs:0, ecx
.text$mn:0000ACAE                 pop     ecx
.text$mn:0000ACAF                 pop     edi
.text$mn:0000ACB0                 pop     esi
.text$mn:0000ACB1                 pop     ebx
.text$mn:0000ACB2                 mov     esp, ebp
.text$mn:0000ACB4                 pop     ebp
.text$mn:0000ACB5                 retn    8
.text$mn:0000ACB5 $LN19           endp ; sp-analysis failed
.text$mn:0000ACB5
.text$mn:0000ACB5 _text$mn        ends
.text$mn:0000ACB5
.text$x:0000ACB8 ; ===========================================================================
.text$x:0000ACB8
.text$x:0000ACB8 ; Segment type: Pure code
.text$x:0000ACB8 ; Segment permissions: Read/Execute
.text$x:0000ACB8 _text$x         segment para public 'CODE' use32
.text$x:0000ACB8                 assume cs:_text$x
.text$x:0000ACB8                 ;org 0ACB8h
.text$x:0000ACB8 ; COMDAT (pick associative to section at AB14)
.text$x:0000ACB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000ACB8
.text$x:0000ACB8 ; =============== S U B R O U T I N E =======================================
.text$x:0000ACB8
.text$x:0000ACB8
.text$x:0000ACB8 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:0000ACB8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:0000ACB8
.text$x:0000ACB8 arg_4           = dword ptr  8
.text$x:0000ACB8
.text$x:0000ACB8                 mov     edx, [esp+arg_4]
.text$x:0000ACBC                 lea     eax, [edx+0Ch]
.text$x:0000ACBF                 mov     ecx, [edx-24h]
.text$x:0000ACC2                 xor     ecx, eax
.text$x:0000ACC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ACC9                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:0000ACCE                 jmp     ___CxxFrameHandler3
.text$x:0000ACCE __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:0000ACCE
.text$x:0000ACCE ; ---------------------------------------------------------------------------
.text$x:0000ACD3                 align 4
.text$x:0000ACD3 _text$x         ends
.text$x:0000ACD3
.text$mn:0000ACD4 ; ===========================================================================
.text$mn:0000ACD4
.text$mn:0000ACD4 ; Segment type: Pure code
.text$mn:0000ACD4 ; Segment permissions: Read/Execute
.text$mn:0000ACD4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ACD4                 assume cs:_text$mn
.text$mn:0000ACD4                 ;org 0ACD4h
.text$mn:0000ACD4 ; COMDAT (pick any)
.text$mn:0000ACD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ACD4
.text$mn:0000ACD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ACD4
.text$mn:0000ACD4 ; Attributes: bp-based frame
.text$mn:0000ACD4
.text$mn:0000ACD4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:0000ACD4                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000ACD4 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:0000ACD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:0000ACD4
.text$mn:0000ACD4 var_20          = dword ptr -20h
.text$mn:0000ACD4 var_1C          = dword ptr -1Ch
.text$mn:0000ACD4 var_18          = dword ptr -18h
.text$mn:0000ACD4 var_11          = byte ptr -11h
.text$mn:0000ACD4 var_10          = dword ptr -10h
.text$mn:0000ACD4 var_C           = byte ptr -0Ch
.text$mn:0000ACD4 var_4           = dword ptr -4
.text$mn:0000ACD4 arg_0           = dword ptr  8
.text$mn:0000ACD4
.text$mn:0000ACD4 ; FUNCTION CHUNK AT .text$mn:0000ADF6 SIZE 00000009 BYTES
.text$mn:0000ACD4
.text$mn:0000ACD4                 push    ebp
.text$mn:0000ACD5                 mov     ebp, esp
.text$mn:0000ACD7                 push    0FFFFFFFFh
.text$mn:0000ACD9                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000ACDE                 mov     eax, large fs:0
.text$mn:0000ACE4                 push    eax
.text$mn:0000ACE5                 push    ecx
.text$mn:0000ACE6                 sub     esp, 10h
.text$mn:0000ACE9                 push    ebx
.text$mn:0000ACEA                 push    esi
.text$mn:0000ACEB                 push    edi
.text$mn:0000ACEC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000ACF1                 xor     eax, ebp
.text$mn:0000ACF3                 push    eax
.text$mn:0000ACF4                 lea     eax, [ebp+var_C]
.text$mn:0000ACF7                 mov     large fs:0, eax
.text$mn:0000ACFD                 mov     [ebp+var_10], esp
.text$mn:0000AD00                 mov     [ebp+var_18], ecx
.text$mn:0000AD03                 mov     eax, [ebp+arg_0]
.text$mn:0000AD06                 or      eax, 7
.text$mn:0000AD09                 mov     [ebp+var_1C], eax
.text$mn:0000AD0C                 mov     ecx, [ebp+var_18]
.text$mn:0000AD0F                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AD14                 cmp     eax, [ebp+var_1C]
.text$mn:0000AD17                 jnb     short loc_AD21
.text$mn:0000AD19                 mov     ecx, [ebp+arg_0]
.text$mn:0000AD1C                 mov     [ebp+var_1C], ecx
.text$mn:0000AD1F                 jmp     short loc_AD73
.text$mn:0000AD21 ; ---------------------------------------------------------------------------
.text$mn:0000AD21
.text$mn:0000AD21 loc_AD21:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:0000AD21                 mov     edx, [ebp+var_18]
.text$mn:0000AD24                 mov     ecx, [edx+18h]
.text$mn:0000AD27                 shr     ecx, 1
.text$mn:0000AD29                 mov     eax, [ebp+var_1C]
.text$mn:0000AD2C                 xor     edx, edx
.text$mn:0000AD2E                 mov     esi, 3
.text$mn:0000AD33                 div     esi
.text$mn:0000AD35                 cmp     ecx, eax
.text$mn:0000AD37                 ja      short loc_AD3B
.text$mn:0000AD39                 jmp     short loc_AD73
.text$mn:0000AD3B ; ---------------------------------------------------------------------------
.text$mn:0000AD3B
.text$mn:0000AD3B loc_AD3B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:0000AD3B                 mov     ecx, [ebp+var_18]
.text$mn:0000AD3E                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AD43                 mov     edx, [ebp+var_18]
.text$mn:0000AD46                 mov     ecx, [edx+18h]
.text$mn:0000AD49                 shr     ecx, 1
.text$mn:0000AD4B                 sub     eax, ecx
.text$mn:0000AD4D                 mov     edx, [ebp+var_18]
.text$mn:0000AD50                 cmp     [edx+18h], eax
.text$mn:0000AD53                 ja      short loc_AD68
.text$mn:0000AD55                 mov     eax, [ebp+var_18]
.text$mn:0000AD58                 mov     ecx, [eax+18h]
.text$mn:0000AD5B                 shr     ecx, 1
.text$mn:0000AD5D                 mov     edx, [ebp+var_18]
.text$mn:0000AD60                 add     ecx, [edx+18h]
.text$mn:0000AD63                 mov     [ebp+var_1C], ecx
.text$mn:0000AD66                 jmp     short loc_AD73
.text$mn:0000AD68 ; ---------------------------------------------------------------------------
.text$mn:0000AD68
.text$mn:0000AD68 loc_AD68:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:0000AD68                 mov     ecx, [ebp+var_18]
.text$mn:0000AD6B                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AD70                 mov     [ebp+var_1C], eax
.text$mn:0000AD73
.text$mn:0000AD73 loc_AD73:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000AD73                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000AD73                 mov     [ebp+var_4], 0
.text$mn:0000AD7A                 mov     eax, [ebp+var_1C]
.text$mn:0000AD7D                 add     eax, 1
.text$mn:0000AD80                 push    eax
.text$mn:0000AD81                 lea     ecx, [ebp+var_11]
.text$mn:0000AD84                 push    ecx
.text$mn:0000AD85                 mov     ecx, [ebp+var_18]
.text$mn:0000AD88                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000AD8D                 mov     ecx, eax
.text$mn:0000AD8F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000AD94                 mov     [ebp+var_20], eax
.text$mn:0000AD97                 jmp     short loc_ADF6
.text$mn:0000AD97 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:0000AD97
.text$mn:0000AD99
.text$mn:0000AD99 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD99
.text$mn:0000AD99
.text$mn:0000AD99 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000AD99                                         ; DATA XREF: .xdata$x:0000FEDCo
.text$mn:0000AD99
.text$mn:0000AD99 ; FUNCTION CHUNK AT .text$mn:0000ADE0 SIZE 00000009 BYTES
.text$mn:0000AD99 ; FUNCTION CHUNK AT .text$mn:0000ADF0 SIZE 00000006 BYTES
.text$mn:0000AD99
.text$mn:0000AD99                 mov     [ebp-10h], esp
.text$mn:0000AD9C                 mov     edx, [ebp+8]
.text$mn:0000AD9F                 mov     [ebp-1Ch], edx
.text$mn:0000ADA2                 mov     byte ptr [ebp-4], 2
.text$mn:0000ADA6                 mov     eax, [ebp-1Ch]
.text$mn:0000ADA9                 add     eax, 1
.text$mn:0000ADAC                 push    eax
.text$mn:0000ADAD                 lea     ecx, [ebp-12h]
.text$mn:0000ADB0                 push    ecx
.text$mn:0000ADB1                 mov     ecx, [ebp-18h]
.text$mn:0000ADB4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000ADB9                 mov     ecx, eax
.text$mn:0000ADBB                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000ADC0                 mov     [ebp-20h], eax
.text$mn:0000ADC3                 jmp     short loc_ADE0
.text$mn:0000ADC3 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:0000ADC3
.text$mn:0000ADC5
.text$mn:0000ADC5 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADC5
.text$mn:0000ADC5 ; Attributes: noreturn
.text$mn:0000ADC5
.text$mn:0000ADC5 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:0000ADC5                                         ; DATA XREF: .xdata$x:0000FEECo
.text$mn:0000ADC5                 push    0
.text$mn:0000ADC7                 push    1
.text$mn:0000ADC9                 mov     ecx, [ebp-18h]
.text$mn:0000ADCC                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000ADD1                 push    0
.text$mn:0000ADD3                 push    0
.text$mn:0000ADD5                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000ADD5 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:0000ADD5
.text$mn:0000ADDA ; ---------------------------------------------------------------------------
.text$mn:0000ADDA                 mov     eax, offset $LN17_0
.text$mn:0000ADDF                 retn
.text$mn:0000ADE0 ; ---------------------------------------------------------------------------
.text$mn:0000ADE0 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000ADE0
.text$mn:0000ADE0 loc_ADE0:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000ADE0                 mov     dword ptr [ebp-4], 1
.text$mn:0000ADE7                 jmp     short loc_ADF0
.text$mn:0000ADE7 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000ADE9
.text$mn:0000ADE9 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADE9
.text$mn:0000ADE9
.text$mn:0000ADE9 $LN17_0         proc near               ; DATA XREF: .text$mn:0000ADDAo
.text$mn:0000ADE9                 mov     dword ptr [ebp-4], 1
.text$mn:0000ADE9 $LN17_0         endp ; sp-analysis failed
.text$mn:0000ADE9
.text$mn:0000ADF0 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000ADF0
.text$mn:0000ADF0 loc_ADF0:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000ADF0                 mov     eax, offset $LN19_0
.text$mn:0000ADF5                 retn
.text$mn:0000ADF5 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000ADF6 ; ---------------------------------------------------------------------------
.text$mn:0000ADF6 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000ADF6
.text$mn:0000ADF6 loc_ADF6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:0000ADF6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000ADFD                 jmp     short loc_AE06
.text$mn:0000ADFD ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000ADFF
.text$mn:0000ADFF ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADFF
.text$mn:0000ADFF
.text$mn:0000ADFF $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_ADF0o
.text$mn:0000ADFF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000AE06
.text$mn:0000AE06 loc_AE06:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:0000AE06                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000AE0A                 jbe     short loc_AE25
.text$mn:0000AE0C                 mov     edx, [ebp+0Ch]
.text$mn:0000AE0F                 push    edx             ; int
.text$mn:0000AE10                 mov     ecx, [ebp-18h]
.text$mn:0000AE13                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AE18                 push    eax             ; Src
.text$mn:0000AE19                 mov     eax, [ebp-20h]
.text$mn:0000AE1C                 push    eax             ; Dst
.text$mn:0000AE1D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000AE22                 add     esp, 0Ch
.text$mn:0000AE25
.text$mn:0000AE25 loc_AE25:                               ; CODE XREF: $LN19_0+Bj
.text$mn:0000AE25                 push    0
.text$mn:0000AE27                 push    1
.text$mn:0000AE29                 mov     ecx, [ebp-18h]
.text$mn:0000AE2C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000AE31                 lea     ecx, [ebp-20h]
.text$mn:0000AE34                 push    ecx             ; int
.text$mn:0000AE35                 mov     edx, [ebp-18h]
.text$mn:0000AE38                 add     edx, 4
.text$mn:0000AE3B                 push    edx             ; void *
.text$mn:0000AE3C                 lea     eax, [ebp-13h]
.text$mn:0000AE3F                 push    eax
.text$mn:0000AE40                 mov     ecx, [ebp-18h]
.text$mn:0000AE43                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000AE48                 mov     ecx, eax
.text$mn:0000AE4A                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000AE4F                 mov     ecx, [ebp-18h]
.text$mn:0000AE52                 mov     edx, [ebp-1Ch]
.text$mn:0000AE55                 mov     [ecx+18h], edx
.text$mn:0000AE58                 mov     eax, [ebp+0Ch]
.text$mn:0000AE5B                 push    eax
.text$mn:0000AE5C                 mov     ecx, [ebp-18h]
.text$mn:0000AE5F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000AE64                 mov     ecx, [ebp-0Ch]
.text$mn:0000AE67                 mov     large fs:0, ecx
.text$mn:0000AE6E                 pop     ecx
.text$mn:0000AE6F                 pop     edi
.text$mn:0000AE70                 pop     esi
.text$mn:0000AE71                 pop     ebx
.text$mn:0000AE72                 mov     esp, ebp
.text$mn:0000AE74                 pop     ebp
.text$mn:0000AE75                 retn    8
.text$mn:0000AE75 $LN19_0         endp ; sp-analysis failed
.text$mn:0000AE75
.text$mn:0000AE75 _text$mn        ends
.text$mn:0000AE75
.text$x:0000AE78 ; ===========================================================================
.text$x:0000AE78
.text$x:0000AE78 ; Segment type: Pure code
.text$x:0000AE78 ; Segment permissions: Read/Execute
.text$x:0000AE78 _text$x         segment para public 'CODE' use32
.text$x:0000AE78                 assume cs:_text$x
.text$x:0000AE78                 ;org 0AE78h
.text$x:0000AE78 ; COMDAT (pick associative to section at ACD4)
.text$x:0000AE78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AE78
.text$x:0000AE78 ; =============== S U B R O U T I N E =======================================
.text$x:0000AE78
.text$x:0000AE78
.text$x:0000AE78 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:0000AE78                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:0000AE78
.text$x:0000AE78 arg_4           = dword ptr  8
.text$x:0000AE78
.text$x:0000AE78                 mov     edx, [esp+arg_4]
.text$x:0000AE7C                 lea     eax, [edx+0Ch]
.text$x:0000AE7F                 mov     ecx, [edx-24h]
.text$x:0000AE82                 xor     ecx, eax
.text$x:0000AE84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AE89                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:0000AE8E                 jmp     ___CxxFrameHandler3
.text$x:0000AE8E __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:0000AE8E
.text$x:0000AE8E ; ---------------------------------------------------------------------------
.text$x:0000AE93                 align 4
.text$x:0000AE93 _text$x         ends
.text$x:0000AE93
.text$mn:0000AE94 ; ===========================================================================
.text$mn:0000AE94
.text$mn:0000AE94 ; Segment type: Pure code
.text$mn:0000AE94 ; Segment permissions: Read/Execute
.text$mn:0000AE94 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE94                 assume cs:_text$mn
.text$mn:0000AE94                 ;org 0AE94h
.text$mn:0000AE94 ; COMDAT (pick any)
.text$mn:0000AE94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE94
.text$mn:0000AE94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE94
.text$mn:0000AE94 ; Attributes: bp-based frame
.text$mn:0000AE94
.text$mn:0000AE94 ; struct std::_Facet_base *__thiscall std::locale::facet::_Decref(std::locale::facet *__hidden this)
.text$mn:0000AE94                 public ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
.text$mn:0000AE94 ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ proc near
.text$mn:0000AE94                                         ; DATA XREF: .rdata:000111B8o
.text$mn:0000AE94                                         ; .rdata:000112A4o ...
.text$mn:0000AE94
.text$mn:0000AE94 var_4           = dword ptr -4
.text$mn:0000AE94
.text$mn:0000AE94                 push    ebp
.text$mn:0000AE95                 mov     ebp, esp
.text$mn:0000AE97                 push    ecx
.text$mn:0000AE98                 mov     [ebp+var_4], ecx
.text$mn:0000AE9B                 mov     eax, [ebp+var_4]
.text$mn:0000AE9E                 add     eax, 4
.text$mn:0000AEA1                 or      ecx, 0FFFFFFFFh
.text$mn:0000AEA4                 lock xadd [eax], ecx
.text$mn:0000AEA8                 dec     ecx
.text$mn:0000AEA9                 jnz     short loc_AEB2
.text$mn:0000AEAB                 mov     eax, [ebp+var_4]
.text$mn:0000AEAE                 jmp     short loc_AEB4
.text$mn:0000AEB0 ; ---------------------------------------------------------------------------
.text$mn:0000AEB0                 jmp     short loc_AEB4
.text$mn:0000AEB2 ; ---------------------------------------------------------------------------
.text$mn:0000AEB2
.text$mn:0000AEB2 loc_AEB2:                               ; CODE XREF: std::locale::facet::_Decref(void)+15j
.text$mn:0000AEB2                 xor     eax, eax
.text$mn:0000AEB4
.text$mn:0000AEB4 loc_AEB4:                               ; CODE XREF: std::locale::facet::_Decref(void)+1Aj
.text$mn:0000AEB4                                         ; std::locale::facet::_Decref(void)+1Cj
.text$mn:0000AEB4                 mov     esp, ebp
.text$mn:0000AEB6                 pop     ebp
.text$mn:0000AEB7                 retn
.text$mn:0000AEB7 ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ endp
.text$mn:0000AEB7
.text$mn:0000AEB7 _text$mn        ends
.text$mn:0000AEB7
.text$mn:0000AEB8 ; ===========================================================================
.text$mn:0000AEB8
.text$mn:0000AEB8 ; Segment type: Pure code
.text$mn:0000AEB8 ; Segment permissions: Read/Execute
.text$mn:0000AEB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEB8                 assume cs:_text$mn
.text$mn:0000AEB8                 ;org 0AEB8h
.text$mn:0000AEB8 ; COMDAT (pick any)
.text$mn:0000AEB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEB8
.text$mn:0000AEB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEB8
.text$mn:0000AEB8 ; Attributes: bp-based frame
.text$mn:0000AEB8
.text$mn:0000AEB8 ; protected: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Destroy(struct MatchedCharInserted *, struct MatchedCharInserted *)
.text$mn:0000AEB8                 public ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z
.text$mn:0000AEB8 ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z proc near
.text$mn:0000AEB8                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+CBp
.text$mn:0000AEB8                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::clear(void)+20p ...
.text$mn:0000AEB8
.text$mn:0000AEB8 var_8           = dword ptr -8
.text$mn:0000AEB8 var_1           = byte ptr -1
.text$mn:0000AEB8 arg_0           = dword ptr  8
.text$mn:0000AEB8 arg_4           = dword ptr  0Ch
.text$mn:0000AEB8
.text$mn:0000AEB8                 push    ebp
.text$mn:0000AEB9                 mov     ebp, esp
.text$mn:0000AEBB                 sub     esp, 8
.text$mn:0000AEBE                 mov     [ebp+var_8], ecx
.text$mn:0000AEC1                 lea     eax, [ebp+var_1]
.text$mn:0000AEC4                 push    eax
.text$mn:0000AEC5                 mov     ecx, [ebp+var_8]
.text$mn:0000AEC8                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000AECD                 lea     ecx, [ebp+var_1]
.text$mn:0000AED0                 push    ecx
.text$mn:0000AED1                 mov     edx, [ebp+arg_4]
.text$mn:0000AED4                 push    edx
.text$mn:0000AED5                 mov     eax, [ebp+arg_0]
.text$mn:0000AED8                 push    eax
.text$mn:0000AED9                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@YAXPAUMatchedCharInserted@@0AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MatchedCharInserted>>>(MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &)
.text$mn:0000AEDE                 add     esp, 0Ch
.text$mn:0000AEE1                 mov     esp, ebp
.text$mn:0000AEE3                 pop     ebp
.text$mn:0000AEE4                 retn    8
.text$mn:0000AEE4 ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z endp
.text$mn:0000AEE4
.text$mn:0000AEE4 ; ---------------------------------------------------------------------------
.text$mn:0000AEE7                 align 4
.text$mn:0000AEE7 _text$mn        ends
.text$mn:0000AEE7
.text$mn:0000AEE8 ; ===========================================================================
.text$mn:0000AEE8
.text$mn:0000AEE8 ; Segment type: Pure code
.text$mn:0000AEE8 ; Segment permissions: Read/Execute
.text$mn:0000AEE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEE8                 assume cs:_text$mn
.text$mn:0000AEE8                 ;org 0AEE8h
.text$mn:0000AEE8 ; COMDAT (pick any)
.text$mn:0000AEE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEE8
.text$mn:0000AEE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEE8
.text$mn:0000AEE8 ; Attributes: bp-based frame
.text$mn:0000AEE8
.text$mn:0000AEE8 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000AEE8                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000AEE8 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:0000AEE8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+CBp
.text$mn:0000AEE8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp ...
.text$mn:0000AEE8
.text$mn:0000AEE8 var_8           = dword ptr -8
.text$mn:0000AEE8 var_1           = byte ptr -1
.text$mn:0000AEE8 arg_0           = dword ptr  8
.text$mn:0000AEE8 arg_4           = dword ptr  0Ch
.text$mn:0000AEE8
.text$mn:0000AEE8                 push    ebp
.text$mn:0000AEE9                 mov     ebp, esp
.text$mn:0000AEEB                 sub     esp, 8
.text$mn:0000AEEE                 mov     [ebp+var_8], ecx
.text$mn:0000AEF1                 lea     eax, [ebp+var_1]
.text$mn:0000AEF4                 push    eax
.text$mn:0000AEF5                 mov     ecx, [ebp+var_8]
.text$mn:0000AEF8                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000AEFD                 lea     ecx, [ebp+var_1]
.text$mn:0000AF00                 push    ecx
.text$mn:0000AF01                 mov     edx, [ebp+arg_4]
.text$mn:0000AF04                 push    edx
.text$mn:0000AF05                 mov     eax, [ebp+arg_0]
.text$mn:0000AF08                 push    eax
.text$mn:0000AF09                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:0000AF0E                 add     esp, 0Ch
.text$mn:0000AF11                 mov     esp, ebp
.text$mn:0000AF13                 pop     ebp
.text$mn:0000AF14                 retn    8
.text$mn:0000AF14 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:0000AF14
.text$mn:0000AF14 ; ---------------------------------------------------------------------------
.text$mn:0000AF17                 align 4
.text$mn:0000AF17 _text$mn        ends
.text$mn:0000AF17
.text$mn:0000AF18 ; ===========================================================================
.text$mn:0000AF18
.text$mn:0000AF18 ; Segment type: Pure code
.text$mn:0000AF18 ; Segment permissions: Read/Execute
.text$mn:0000AF18 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF18                 assume cs:_text$mn
.text$mn:0000AF18                 ;org 0AF18h
.text$mn:0000AF18 ; COMDAT (pick any)
.text$mn:0000AF18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF18
.text$mn:0000AF18 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF18
.text$mn:0000AF18 ; Attributes: bp-based frame
.text$mn:0000AF18
.text$mn:0000AF18 ; protected: char __thiscall std::ctype<wchar_t>::_Donarrow(wchar_t, char)const
.text$mn:0000AF18                 public ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
.text$mn:0000AF18 ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z proc near
.text$mn:0000AF18                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t,char)+14p
.text$mn:0000AF18                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+62p
.text$mn:0000AF18
.text$mn:0000AF18 var_18          = dword ptr -18h
.text$mn:0000AF18 var_14          = dword ptr -14h
.text$mn:0000AF18 var_D           = byte ptr -0Dh
.text$mn:0000AF18 var_C           = byte ptr -0Ch
.text$mn:0000AF18 var_4           = dword ptr -4
.text$mn:0000AF18 arg_0           = word ptr  8
.text$mn:0000AF18 arg_4           = byte ptr  0Ch
.text$mn:0000AF18
.text$mn:0000AF18                 push    ebp
.text$mn:0000AF19                 mov     ebp, esp
.text$mn:0000AF1B                 sub     esp, 18h
.text$mn:0000AF1E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AF23                 xor     eax, ebp
.text$mn:0000AF25                 mov     [ebp+var_4], eax
.text$mn:0000AF28                 mov     [ebp+var_14], ecx
.text$mn:0000AF2B                 mov     [ebp+var_18], 0
.text$mn:0000AF32                 mov     eax, [ebp+var_14]
.text$mn:0000AF35                 add     eax, 18h
.text$mn:0000AF38                 push    eax
.text$mn:0000AF39                 lea     ecx, [ebp+var_18]
.text$mn:0000AF3C                 push    ecx
.text$mn:0000AF3D                 movzx   edx, [ebp+arg_0]
.text$mn:0000AF41                 push    edx
.text$mn:0000AF42                 lea     eax, [ebp+var_C]
.text$mn:0000AF45                 push    eax
.text$mn:0000AF46                 call    __Wcrtomb
.text$mn:0000AF4B                 add     esp, 10h
.text$mn:0000AF4E                 cmp     eax, 1
.text$mn:0000AF51                 jz      short loc_AF5B
.text$mn:0000AF53                 mov     cl, [ebp+arg_4]
.text$mn:0000AF56                 mov     [ebp+var_D], cl
.text$mn:0000AF59                 jmp     short loc_AF6A
.text$mn:0000AF5B ; ---------------------------------------------------------------------------
.text$mn:0000AF5B
.text$mn:0000AF5B loc_AF5B:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+39j
.text$mn:0000AF5B                 mov     edx, 1
.text$mn:0000AF60                 imul    eax, edx, 0
.text$mn:0000AF63                 mov     cl, [ebp+eax+var_C]
.text$mn:0000AF67                 mov     [ebp+var_D], cl
.text$mn:0000AF6A
.text$mn:0000AF6A loc_AF6A:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+41j
.text$mn:0000AF6A                 mov     al, [ebp+var_D]
.text$mn:0000AF6D                 mov     ecx, [ebp+var_4]
.text$mn:0000AF70                 xor     ecx, ebp
.text$mn:0000AF72                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000AF77                 mov     esp, ebp
.text$mn:0000AF79                 pop     ebp
.text$mn:0000AF7A                 retn    8
.text$mn:0000AF7A ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z endp
.text$mn:0000AF7A
.text$mn:0000AF7A ; ---------------------------------------------------------------------------
.text$mn:0000AF7D                 align 10h
.text$mn:0000AF7D _text$mn        ends
.text$mn:0000AF7D
.text$mn:0000AF80 ; ===========================================================================
.text$mn:0000AF80
.text$mn:0000AF80 ; Segment type: Pure code
.text$mn:0000AF80 ; Segment permissions: Read/Execute
.text$mn:0000AF80 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF80                 assume cs:_text$mn
.text$mn:0000AF80                 ;org 0AF80h
.text$mn:0000AF80 ; COMDAT (pick any)
.text$mn:0000AF80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF80
.text$mn:0000AF80 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF80
.text$mn:0000AF80 ; Attributes: bp-based frame
.text$mn:0000AF80
.text$mn:0000AF80 ; protected: wchar_t __thiscall std::ctype<wchar_t>::_Dowiden(char)const
.text$mn:0000AF80                 public ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
.text$mn:0000AF80 ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z proc near
.text$mn:0000AF80                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+5Dp
.text$mn:0000AF80                                         ; std::ctype<wchar_t>::do_widen(char)+Fp
.text$mn:0000AF80
.text$mn:0000AF80 var_10          = dword ptr -10h
.text$mn:0000AF80 var_C           = dword ptr -0Ch
.text$mn:0000AF80 var_8           = word ptr -8
.text$mn:0000AF80 var_2           = word ptr -2
.text$mn:0000AF80 arg_0           = byte ptr  8
.text$mn:0000AF80
.text$mn:0000AF80                 push    ebp
.text$mn:0000AF81                 mov     ebp, esp
.text$mn:0000AF83                 sub     esp, 10h
.text$mn:0000AF86                 mov     [ebp+var_C], ecx
.text$mn:0000AF89                 mov     [ebp+var_10], 0
.text$mn:0000AF90                 mov     eax, [ebp+var_C]
.text$mn:0000AF93                 add     eax, 18h
.text$mn:0000AF96                 push    eax
.text$mn:0000AF97                 lea     ecx, [ebp+var_10]
.text$mn:0000AF9A                 push    ecx
.text$mn:0000AF9B                 push    1
.text$mn:0000AF9D                 lea     edx, [ebp+arg_0]
.text$mn:0000AFA0                 push    edx
.text$mn:0000AFA1                 lea     eax, [ebp+var_8]
.text$mn:0000AFA4                 push    eax
.text$mn:0000AFA5                 call    __Mbrtowc
.text$mn:0000AFAA                 add     esp, 14h
.text$mn:0000AFAD                 test    eax, eax
.text$mn:0000AFAF                 jge     short loc_AFBC
.text$mn:0000AFB1                 mov     ecx, 0FFFFh
.text$mn:0000AFB6                 mov     [ebp+var_2], cx
.text$mn:0000AFBA                 jmp     short loc_AFC4
.text$mn:0000AFBC ; ---------------------------------------------------------------------------
.text$mn:0000AFBC
.text$mn:0000AFBC loc_AFBC:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+2Fj
.text$mn:0000AFBC                 mov     dx, [ebp+var_8]
.text$mn:0000AFC0                 mov     [ebp+var_2], dx
.text$mn:0000AFC4
.text$mn:0000AFC4 loc_AFC4:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+3Aj
.text$mn:0000AFC4                 mov     ax, [ebp+var_2]
.text$mn:0000AFC8                 mov     esp, ebp
.text$mn:0000AFCA                 pop     ebp
.text$mn:0000AFCB                 retn    4
.text$mn:0000AFCB ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z endp
.text$mn:0000AFCB
.text$mn:0000AFCB ; ---------------------------------------------------------------------------
.text$mn:0000AFCE                 align 10h
.text$mn:0000AFCE _text$mn        ends
.text$mn:0000AFCE
.text$mn:0000AFD0 ; ===========================================================================
.text$mn:0000AFD0
.text$mn:0000AFD0 ; Segment type: Pure code
.text$mn:0000AFD0 ; Segment permissions: Read/Execute
.text$mn:0000AFD0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFD0                 assume cs:_text$mn
.text$mn:0000AFD0                 ;org 0AFD0h
.text$mn:0000AFD0 ; COMDAT (pick any)
.text$mn:0000AFD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFD0
.text$mn:0000AFD0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFD0
.text$mn:0000AFD0 ; Attributes: bp-based frame
.text$mn:0000AFD0
.text$mn:0000AFD0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:0000AFD0                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:0000AFD0 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:0000AFD0                                         ; CODE XREF: $LN19+60p
.text$mn:0000AFD0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:0000AFD0
.text$mn:0000AFD0 var_8           = dword ptr -8
.text$mn:0000AFD0 var_1           = byte ptr -1
.text$mn:0000AFD0 arg_0           = dword ptr  8
.text$mn:0000AFD0
.text$mn:0000AFD0                 push    ebp
.text$mn:0000AFD1                 mov     ebp, esp
.text$mn:0000AFD3                 sub     esp, 8
.text$mn:0000AFD6                 mov     [ebp+var_8], ecx
.text$mn:0000AFD9                 mov     [ebp+var_1], 0
.text$mn:0000AFDD                 mov     eax, [ebp+var_8]
.text$mn:0000AFE0                 mov     ecx, [ebp+arg_0]
.text$mn:0000AFE3                 mov     [eax+14h], ecx
.text$mn:0000AFE6                 lea     edx, [ebp+var_1]
.text$mn:0000AFE9                 push    edx
.text$mn:0000AFEA                 mov     ecx, [ebp+var_8]
.text$mn:0000AFED                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000AFF2                 add     eax, [ebp+arg_0]
.text$mn:0000AFF5                 push    eax
.text$mn:0000AFF6                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:0000AFFB                 add     esp, 8
.text$mn:0000AFFE                 mov     esp, ebp
.text$mn:0000B000                 pop     ebp
.text$mn:0000B001                 retn    4
.text$mn:0000B001 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:0000B001
.text$mn:0000B001 _text$mn        ends
.text$mn:0000B001
.text$mn:0000B004 ; ===========================================================================
.text$mn:0000B004
.text$mn:0000B004 ; Segment type: Pure code
.text$mn:0000B004 ; Segment permissions: Read/Execute
.text$mn:0000B004 _text$mn        segment para public 'CODE' use32
.text$mn:0000B004                 assume cs:_text$mn
.text$mn:0000B004                 ;org 0B004h
.text$mn:0000B004 ; COMDAT (pick any)
.text$mn:0000B004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B004
.text$mn:0000B004 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B004
.text$mn:0000B004 ; Attributes: bp-based frame
.text$mn:0000B004
.text$mn:0000B004 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:0000B004                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000B004 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000B004                                         ; CODE XREF: $LN19_0+60p
.text$mn:0000B004                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:0000B004
.text$mn:0000B004 var_8           = dword ptr -8
.text$mn:0000B004 var_2           = word ptr -2
.text$mn:0000B004 arg_0           = dword ptr  8
.text$mn:0000B004
.text$mn:0000B004                 push    ebp
.text$mn:0000B005                 mov     ebp, esp
.text$mn:0000B007                 sub     esp, 8
.text$mn:0000B00A                 mov     [ebp+var_8], ecx
.text$mn:0000B00D                 xor     eax, eax
.text$mn:0000B00F                 mov     [ebp+var_2], ax
.text$mn:0000B013                 mov     ecx, [ebp+var_8]
.text$mn:0000B016                 mov     edx, [ebp+arg_0]
.text$mn:0000B019                 mov     [ecx+14h], edx
.text$mn:0000B01C                 lea     eax, [ebp+var_2]
.text$mn:0000B01F                 push    eax
.text$mn:0000B020                 mov     ecx, [ebp+var_8]
.text$mn:0000B023                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B028                 mov     ecx, [ebp+arg_0]
.text$mn:0000B02B                 lea     edx, [eax+ecx*2]
.text$mn:0000B02E                 push    edx
.text$mn:0000B02F                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000B034                 add     esp, 8
.text$mn:0000B037                 mov     esp, ebp
.text$mn:0000B039                 pop     ebp
.text$mn:0000B03A                 retn    4
.text$mn:0000B03A ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000B03A
.text$mn:0000B03A ; ---------------------------------------------------------------------------
.text$mn:0000B03D                 align 10h
.text$mn:0000B03D _text$mn        ends
.text$mn:0000B03D
.text$mn:0000B040 ; ===========================================================================
.text$mn:0000B040
.text$mn:0000B040 ; Segment type: Pure code
.text$mn:0000B040 ; Segment permissions: Read/Execute
.text$mn:0000B040 _text$mn        segment para public 'CODE' use32
.text$mn:0000B040                 assume cs:_text$mn
.text$mn:0000B040                 ;org 0B040h
.text$mn:0000B040 ; COMDAT (pick any)
.text$mn:0000B040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B040
.text$mn:0000B040 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B040
.text$mn:0000B040 ; Attributes: bp-based frame
.text$mn:0000B040
.text$mn:0000B040 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:0000B040                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000B040 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000B040                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:0000B040
.text$mn:0000B040 var_8           = dword ptr -8
.text$mn:0000B040 var_1           = byte ptr -1
.text$mn:0000B040
.text$mn:0000B040                 push    ebp
.text$mn:0000B041                 mov     ebp, esp
.text$mn:0000B043                 sub     esp, 8
.text$mn:0000B046                 mov     [ebp+var_8], ecx
.text$mn:0000B049                 lea     ecx, [ebp+var_1]
.text$mn:0000B04C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000B051                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000B054                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000B059                 mov     eax, [ebp+var_8]
.text$mn:0000B05C                 mov     ecx, [eax]
.text$mn:0000B05E                 push    ecx
.text$mn:0000B05F                 lea     ecx, [ebp+var_1]
.text$mn:0000B062                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000B067                 push    1               ; int
.text$mn:0000B069                 mov     edx, [ebp+var_8]
.text$mn:0000B06C                 mov     eax, [edx]
.text$mn:0000B06E                 push    eax             ; void *
.text$mn:0000B06F                 lea     ecx, [ebp+var_1]
.text$mn:0000B072                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000B077                 mov     ecx, [ebp+var_8]
.text$mn:0000B07A                 mov     dword ptr [ecx], 0
.text$mn:0000B080                 mov     esp, ebp
.text$mn:0000B082                 pop     ebp
.text$mn:0000B083                 retn
.text$mn:0000B083 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000B083
.text$mn:0000B083 _text$mn        ends
.text$mn:0000B083
.text$mn:0000B084 ; ===========================================================================
.text$mn:0000B084
.text$mn:0000B084 ; Segment type: Pure code
.text$mn:0000B084 ; Segment permissions: Read/Execute
.text$mn:0000B084 _text$mn        segment para public 'CODE' use32
.text$mn:0000B084                 assume cs:_text$mn
.text$mn:0000B084                 ;org 0B084h
.text$mn:0000B084 ; COMDAT (pick any)
.text$mn:0000B084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B084
.text$mn:0000B084 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B084
.text$mn:0000B084 ; Attributes: bp-based frame
.text$mn:0000B084
.text$mn:0000B084 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000B084                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000B084 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000B084                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000B084
.text$mn:0000B084 var_8           = dword ptr -8
.text$mn:0000B084 var_1           = byte ptr -1
.text$mn:0000B084
.text$mn:0000B084                 push    ebp
.text$mn:0000B085                 mov     ebp, esp
.text$mn:0000B087                 sub     esp, 8
.text$mn:0000B08A                 mov     [ebp+var_8], ecx
.text$mn:0000B08D                 lea     ecx, [ebp+var_1]
.text$mn:0000B090                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000B095                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000B098                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000B09D                 mov     eax, [ebp+var_8]
.text$mn:0000B0A0                 mov     ecx, [eax]
.text$mn:0000B0A2                 push    ecx
.text$mn:0000B0A3                 lea     ecx, [ebp+var_1]
.text$mn:0000B0A6                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000B0AB                 push    1               ; int
.text$mn:0000B0AD                 mov     edx, [ebp+var_8]
.text$mn:0000B0B0                 mov     eax, [edx]
.text$mn:0000B0B2                 push    eax             ; void *
.text$mn:0000B0B3                 lea     ecx, [ebp+var_1]
.text$mn:0000B0B6                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000B0BB                 mov     ecx, [ebp+var_8]
.text$mn:0000B0BE                 mov     dword ptr [ecx], 0
.text$mn:0000B0C4                 mov     esp, ebp
.text$mn:0000B0C6                 pop     ebp
.text$mn:0000B0C7                 retn
.text$mn:0000B0C7 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000B0C7
.text$mn:0000B0C7 _text$mn        ends
.text$mn:0000B0C7
.text$mn:0000B0C8 ; ===========================================================================
.text$mn:0000B0C8
.text$mn:0000B0C8 ; Segment type: Pure code
.text$mn:0000B0C8 ; Segment permissions: Read/Execute
.text$mn:0000B0C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B0C8                 assume cs:_text$mn
.text$mn:0000B0C8                 ;org 0B0C8h
.text$mn:0000B0C8 ; COMDAT (pick any)
.text$mn:0000B0C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0C8
.text$mn:0000B0C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0C8
.text$mn:0000B0C8 ; Attributes: bp-based frame
.text$mn:0000B0C8
.text$mn:0000B0C8 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:0000B0C8                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000B0C8 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000B0C8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:0000B0C8
.text$mn:0000B0C8 var_8           = dword ptr -8
.text$mn:0000B0C8 var_1           = byte ptr -1
.text$mn:0000B0C8
.text$mn:0000B0C8                 push    ebp
.text$mn:0000B0C9                 mov     ebp, esp
.text$mn:0000B0CB                 sub     esp, 8
.text$mn:0000B0CE                 mov     [ebp+var_8], ecx
.text$mn:0000B0D1                 lea     ecx, [ebp+var_1]
.text$mn:0000B0D4                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000B0D9                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000B0DC                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000B0E1                 mov     eax, [ebp+var_8]
.text$mn:0000B0E4                 mov     ecx, [eax]
.text$mn:0000B0E6                 push    ecx
.text$mn:0000B0E7                 lea     ecx, [ebp+var_1]
.text$mn:0000B0EA                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000B0EF                 push    1               ; int
.text$mn:0000B0F1                 mov     edx, [ebp+var_8]
.text$mn:0000B0F4                 mov     eax, [edx]
.text$mn:0000B0F6                 push    eax             ; void *
.text$mn:0000B0F7                 lea     ecx, [ebp+var_1]
.text$mn:0000B0FA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000B0FF                 mov     ecx, [ebp+var_8]
.text$mn:0000B102                 mov     dword ptr [ecx], 0
.text$mn:0000B108                 mov     esp, ebp
.text$mn:0000B10A                 pop     ebp
.text$mn:0000B10B                 retn
.text$mn:0000B10B ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000B10B
.text$mn:0000B10B _text$mn        ends
.text$mn:0000B10B
.text$mn:0000B10C ; ===========================================================================
.text$mn:0000B10C
.text$mn:0000B10C ; Segment type: Pure code
.text$mn:0000B10C ; Segment permissions: Read/Execute
.text$mn:0000B10C _text$mn        segment para public 'CODE' use32
.text$mn:0000B10C                 assume cs:_text$mn
.text$mn:0000B10C                 ;org 0B10Ch
.text$mn:0000B10C ; COMDAT (pick any)
.text$mn:0000B10C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B10C
.text$mn:0000B10C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B10C
.text$mn:0000B10C ; Attributes: bp-based frame
.text$mn:0000B10C
.text$mn:0000B10C ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000B10C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000B10C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000B10C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:0000B10C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:0000B10C
.text$mn:0000B10C var_4           = dword ptr -4
.text$mn:0000B10C arg_0           = dword ptr  8
.text$mn:0000B10C
.text$mn:0000B10C                 push    ebp
.text$mn:0000B10D                 mov     ebp, esp
.text$mn:0000B10F                 push    ecx
.text$mn:0000B110                 mov     [ebp+var_4], ecx
.text$mn:0000B113                 mov     ecx, [ebp+arg_0]
.text$mn:0000B116                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000B11B                 mov     eax, [ebp+arg_0]
.text$mn:0000B11E                 mov     esp, ebp
.text$mn:0000B120                 pop     ebp
.text$mn:0000B121                 retn    4
.text$mn:0000B121 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:0000B121
.text$mn:0000B121 _text$mn        ends
.text$mn:0000B121
.text$mn:0000B124 ; ===========================================================================
.text$mn:0000B124
.text$mn:0000B124 ; Segment type: Pure code
.text$mn:0000B124 ; Segment permissions: Read/Execute
.text$mn:0000B124 _text$mn        segment para public 'CODE' use32
.text$mn:0000B124                 assume cs:_text$mn
.text$mn:0000B124                 ;org 0B124h
.text$mn:0000B124 ; COMDAT (pick any)
.text$mn:0000B124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B124
.text$mn:0000B124 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B124
.text$mn:0000B124 ; Attributes: bp-based frame
.text$mn:0000B124
.text$mn:0000B124 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:0000B124                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:0000B124 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:0000B124                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:0000B124                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:0000B124
.text$mn:0000B124 var_4           = dword ptr -4
.text$mn:0000B124 arg_0           = dword ptr  8
.text$mn:0000B124
.text$mn:0000B124                 push    ebp
.text$mn:0000B125                 mov     ebp, esp
.text$mn:0000B127                 push    ecx
.text$mn:0000B128                 mov     [ebp+var_4], ecx
.text$mn:0000B12B                 mov     ecx, [ebp+arg_0]
.text$mn:0000B12E                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:0000B133                 mov     eax, [ebp+arg_0]
.text$mn:0000B136                 mov     esp, ebp
.text$mn:0000B138                 pop     ebp
.text$mn:0000B139                 retn    4
.text$mn:0000B139 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:0000B139
.text$mn:0000B139 _text$mn        ends
.text$mn:0000B139
.text$mn:0000B13C ; ===========================================================================
.text$mn:0000B13C
.text$mn:0000B13C ; Segment type: Pure code
.text$mn:0000B13C ; Segment permissions: Read/Execute
.text$mn:0000B13C _text$mn        segment para public 'CODE' use32
.text$mn:0000B13C                 assume cs:_text$mn
.text$mn:0000B13C                 ;org 0B13Ch
.text$mn:0000B13C ; COMDAT (pick any)
.text$mn:0000B13C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B13C
.text$mn:0000B13C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B13C
.text$mn:0000B13C ; Attributes: bp-based frame
.text$mn:0000B13C
.text$mn:0000B13C ; public: struct std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>>::_Getal(void)const
.text$mn:0000B13C                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ
.text$mn:0000B13C ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ proc near
.text$mn:0000B13C                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Umove<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)+10p
.text$mn:0000B13C                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Destroy(MatchedCharInserted *,MatchedCharInserted *)+10p ...
.text$mn:0000B13C
.text$mn:0000B13C var_4           = dword ptr -4
.text$mn:0000B13C arg_0           = dword ptr  8
.text$mn:0000B13C
.text$mn:0000B13C                 push    ebp
.text$mn:0000B13D                 mov     ebp, esp
.text$mn:0000B13F                 push    ecx
.text$mn:0000B140                 mov     [ebp+var_4], ecx
.text$mn:0000B143                 mov     ecx, [ebp+arg_0]
.text$mn:0000B146                 call    ??0?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::_Wrap_alloc<std::allocator<MatchedCharInserted>>(void)
.text$mn:0000B14B                 mov     eax, [ebp+arg_0]
.text$mn:0000B14E                 mov     esp, ebp
.text$mn:0000B150                 pop     ebp
.text$mn:0000B151                 retn    4
.text$mn:0000B151 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ endp
.text$mn:0000B151
.text$mn:0000B151 _text$mn        ends
.text$mn:0000B151
.text$mn:0000B154 ; ===========================================================================
.text$mn:0000B154
.text$mn:0000B154 ; Segment type: Pure code
.text$mn:0000B154 ; Segment permissions: Read/Execute
.text$mn:0000B154 _text$mn        segment para public 'CODE' use32
.text$mn:0000B154                 assume cs:_text$mn
.text$mn:0000B154                 ;org 0B154h
.text$mn:0000B154 ; COMDAT (pick any)
.text$mn:0000B154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B154
.text$mn:0000B154 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B154
.text$mn:0000B154 ; Attributes: bp-based frame
.text$mn:0000B154
.text$mn:0000B154 ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:0000B154                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:0000B154 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:0000B154                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p
.text$mn:0000B154                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p ...
.text$mn:0000B154
.text$mn:0000B154 var_4           = dword ptr -4
.text$mn:0000B154 arg_0           = dword ptr  8
.text$mn:0000B154
.text$mn:0000B154                 push    ebp
.text$mn:0000B155                 mov     ebp, esp
.text$mn:0000B157                 push    ecx
.text$mn:0000B158                 mov     [ebp+var_4], ecx
.text$mn:0000B15B                 mov     ecx, [ebp+arg_0]
.text$mn:0000B15E                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000B163                 mov     eax, [ebp+arg_0]
.text$mn:0000B166                 mov     esp, ebp
.text$mn:0000B168                 pop     ebp
.text$mn:0000B169                 retn    4
.text$mn:0000B169 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:0000B169
.text$mn:0000B169 _text$mn        ends
.text$mn:0000B169
.text$mn:0000B16C ; ===========================================================================
.text$mn:0000B16C
.text$mn:0000B16C ; Segment type: Pure code
.text$mn:0000B16C ; Segment permissions: Read/Execute
.text$mn:0000B16C _text$mn        segment para public 'CODE' use32
.text$mn:0000B16C                 assume cs:_text$mn
.text$mn:0000B16C                 ;org 0B16Ch
.text$mn:0000B16C ; COMDAT (pick any)
.text$mn:0000B16C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B16C
.text$mn:0000B16C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B16C
.text$mn:0000B16C ; Attributes: bp-based frame
.text$mn:0000B16C
.text$mn:0000B16C ; int __cdecl std::ctype<wchar_t>::_Getcat(int, std::locale *)
.text$mn:0000B16C                 public ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:0000B16C ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$mn:0000B16C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+78p
.text$mn:0000B16C
.text$mn:0000B16C var_5C          = byte ptr -5Ch
.text$mn:0000B16C var_28          = dword ptr -28h
.text$mn:0000B16C var_24          = dword ptr -24h
.text$mn:0000B16C var_20          = dword ptr -20h
.text$mn:0000B16C var_1C          = dword ptr -1Ch
.text$mn:0000B16C var_18          = dword ptr -18h
.text$mn:0000B16C var_14          = dword ptr -14h
.text$mn:0000B16C var_10          = dword ptr -10h
.text$mn:0000B16C var_C           = dword ptr -0Ch
.text$mn:0000B16C var_4           = dword ptr -4
.text$mn:0000B16C arg_0           = dword ptr  8
.text$mn:0000B16C arg_4           = dword ptr  0Ch
.text$mn:0000B16C
.text$mn:0000B16C                 push    ebp
.text$mn:0000B16D                 mov     ebp, esp
.text$mn:0000B16F                 push    0FFFFFFFFh
.text$mn:0000B171                 push    offset __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:0000B176                 mov     eax, large fs:0
.text$mn:0000B17C                 push    eax
.text$mn:0000B17D                 sub     esp, 50h
.text$mn:0000B180                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B185                 xor     eax, ebp
.text$mn:0000B187                 push    eax
.text$mn:0000B188                 lea     eax, [ebp+var_C]
.text$mn:0000B18B                 mov     large fs:0, eax
.text$mn:0000B191                 mov     [ebp+var_10], 0
.text$mn:0000B198                 cmp     [ebp+arg_0], 0
.text$mn:0000B19C                 jz      loc_B24F
.text$mn:0000B1A2                 mov     eax, [ebp+arg_0]
.text$mn:0000B1A5                 cmp     dword ptr [eax], 0
.text$mn:0000B1A8                 jnz     loc_B24F
.text$mn:0000B1AE                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:0000B1B3                 mov     [ebp+var_1C], eax
.text$mn:0000B1B6                 push    0A6Ch           ; int
.text$mn:0000B1BB                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000B1C0                 mov     ecx, [ebp+var_1C]
.text$mn:0000B1C3                 push    ecx             ; struct std::_DebugHeapTag_t *
.text$mn:0000B1C4                 push    44h ; 'D'       ; unsigned int
.text$mn:0000B1C6                 call    ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:0000B1CB                 add     esp, 10h
.text$mn:0000B1CE                 mov     [ebp+var_14], eax
.text$mn:0000B1D1                 mov     [ebp+var_4], 0
.text$mn:0000B1D8                 cmp     [ebp+var_14], 0
.text$mn:0000B1DC                 jz      short loc_B218
.text$mn:0000B1DE                 push    0
.text$mn:0000B1E0                 mov     ecx, [ebp+arg_4] ; this
.text$mn:0000B1E3                 call    ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str(void)
.text$mn:0000B1E8                 push    eax             ; char *
.text$mn:0000B1E9                 lea     ecx, [ebp+var_5C] ; this
.text$mn:0000B1EC                 call    ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo(char const *)
.text$mn:0000B1F1                 mov     [ebp+var_20], eax
.text$mn:0000B1F4                 mov     edx, [ebp+var_20]
.text$mn:0000B1F7                 mov     [ebp+var_24], edx
.text$mn:0000B1FA                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000B1FE                 mov     eax, [ebp+var_10]
.text$mn:0000B201                 or      eax, 1
.text$mn:0000B204                 mov     [ebp+var_10], eax
.text$mn:0000B207                 mov     ecx, [ebp+var_24]
.text$mn:0000B20A                 push    ecx
.text$mn:0000B20B                 mov     ecx, [ebp+var_14]
.text$mn:0000B20E                 call    ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)
.text$mn:0000B213                 mov     [ebp+var_18], eax
.text$mn:0000B216                 jmp     short loc_B21F
.text$mn:0000B218 ; ---------------------------------------------------------------------------
.text$mn:0000B218
.text$mn:0000B218 loc_B218:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+70j
.text$mn:0000B218                 mov     [ebp+var_18], 0
.text$mn:0000B21F
.text$mn:0000B21F loc_B21F:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+AAj
.text$mn:0000B21F                 mov     edx, [ebp+var_18]
.text$mn:0000B222                 mov     [ebp+var_28], edx
.text$mn:0000B225                 mov     [ebp+var_4], 2
.text$mn:0000B22C                 mov     eax, [ebp+arg_0]
.text$mn:0000B22F                 mov     ecx, [ebp+var_28]
.text$mn:0000B232                 mov     [eax], ecx
.text$mn:0000B234                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B23B                 mov     edx, [ebp+var_10]
.text$mn:0000B23E                 and     edx, 1
.text$mn:0000B241                 jz      short loc_B24F
.text$mn:0000B243                 and     [ebp+var_10], 0FFFFFFFEh
.text$mn:0000B247                 lea     ecx, [ebp+var_5C] ; this
.text$mn:0000B24A                 call    ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$mn:0000B24F
.text$mn:0000B24F loc_B24F:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+30j
.text$mn:0000B24F                                         ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+3Cj ...
.text$mn:0000B24F                 mov     eax, 2
.text$mn:0000B254                 mov     ecx, [ebp+var_C]
.text$mn:0000B257                 mov     large fs:0, ecx
.text$mn:0000B25E                 pop     ecx
.text$mn:0000B25F                 mov     esp, ebp
.text$mn:0000B261                 pop     ebp
.text$mn:0000B262                 retn
.text$mn:0000B262 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$mn:0000B262
.text$mn:0000B262 ; ---------------------------------------------------------------------------
.text$mn:0000B263                 align 4
.text$mn:0000B263 _text$mn        ends
.text$mn:0000B263
.text$x:0000B264 ; ===========================================================================
.text$x:0000B264
.text$x:0000B264 ; Segment type: Pure code
.text$x:0000B264 ; Segment permissions: Read/Execute
.text$x:0000B264 _text$x         segment para public 'CODE' use32
.text$x:0000B264                 assume cs:_text$x
.text$x:0000B264                 ;org 0B264h
.text$x:0000B264 ; COMDAT (pick associative to section at B16C)
.text$x:0000B264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B264
.text$x:0000B264 ; =============== S U B R O U T I N E =======================================
.text$x:0000B264
.text$x:0000B264
.text$x:0000B264 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 proc near
.text$x:0000B264                                         ; DATA XREF: .xdata$x:0000F984o
.text$x:0000B264                 push    0A6Ch
.text$x:0000B269                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$x:0000B26E                 mov     eax, [ebp-1Ch]
.text$x:0000B271                 push    eax
.text$x:0000B272                 mov     eax, [ebp-14h]
.text$x:0000B275                 push    eax             ; Memory
.text$x:0000B276                 call    ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)
.text$x:0000B27B                 add     esp, 10h
.text$x:0000B27E                 retn
.text$x:0000B27E __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 endp
.text$x:0000B27E
.text$x:0000B27F
.text$x:0000B27F ; =============== S U B R O U T I N E =======================================
.text$x:0000B27F
.text$x:0000B27F
.text$x:0000B27F __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 proc near
.text$x:0000B27F                                         ; DATA XREF: .xdata$x:0000F98Co
.text$x:0000B27F                                         ; .xdata$x:0000F994o
.text$x:0000B27F                 mov     eax, [ebp-10h]
.text$x:0000B282                 and     eax, 1
.text$x:0000B285                 jz      $LN8
.text$x:0000B28B                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B28F                 lea     ecx, [ebp-5Ch]  ; this
.text$x:0000B292                 jmp     ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$x:0000B297 ; ---------------------------------------------------------------------------
.text$x:0000B297
.text$x:0000B297 $LN8:                                   ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+6j
.text$x:0000B297                 retn
.text$x:0000B297 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 endp
.text$x:0000B297
.text$x:0000B298
.text$x:0000B298 ; =============== S U B R O U T I N E =======================================
.text$x:0000B298
.text$x:0000B298
.text$x:0000B298 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$x:0000B298                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5o
.text$x:0000B298
.text$x:0000B298 arg_4           = dword ptr  8
.text$x:0000B298
.text$x:0000B298                 mov     edx, [esp+arg_4]
.text$x:0000B29C                 lea     eax, [edx+0Ch]
.text$x:0000B29F                 mov     ecx, [edx-54h]
.text$x:0000B2A2                 xor     ecx, eax
.text$x:0000B2A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B2A9                 mov     eax, offset __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$x:0000B2AE                 jmp     ___CxxFrameHandler3
.text$x:0000B2AE __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$x:0000B2AE
.text$x:0000B2AE ; ---------------------------------------------------------------------------
.text$x:0000B2B3                 align 4
.text$x:0000B2B3 _text$x         ends
.text$x:0000B2B3
.text$mn:0000B2B4 ; ===========================================================================
.text$mn:0000B2B4
.text$mn:0000B2B4 ; Segment type: Pure code
.text$mn:0000B2B4 ; Segment permissions: Read/Execute
.text$mn:0000B2B4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2B4                 assume cs:_text$mn
.text$mn:0000B2B4                 ;org 0B2B4h
.text$mn:0000B2B4 ; COMDAT (pick any)
.text$mn:0000B2B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2B4
.text$mn:0000B2B4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2B4
.text$mn:0000B2B4 ; Attributes: bp-based frame
.text$mn:0000B2B4
.text$mn:0000B2B4 ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000B2B4                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:0000B2B4 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:0000B2B4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:0000B2B4                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:0000B2B4
.text$mn:0000B2B4 var_8           = dword ptr -8
.text$mn:0000B2B4 var_4           = dword ptr -4
.text$mn:0000B2B4
.text$mn:0000B2B4                 push    ebp
.text$mn:0000B2B5                 mov     ebp, esp
.text$mn:0000B2B7                 sub     esp, 8
.text$mn:0000B2BA                 mov     [ebp+var_4], ecx
.text$mn:0000B2BD                 mov     eax, [ebp+var_4]
.text$mn:0000B2C0                 cmp     dword ptr [eax], 0
.text$mn:0000B2C3                 jnz     short loc_B2CE
.text$mn:0000B2C5                 mov     [ebp+var_8], 0
.text$mn:0000B2CC                 jmp     short loc_B2D8
.text$mn:0000B2CE ; ---------------------------------------------------------------------------
.text$mn:0000B2CE
.text$mn:0000B2CE loc_B2CE:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:0000B2CE                 mov     ecx, [ebp+var_4]
.text$mn:0000B2D1                 mov     edx, [ecx]
.text$mn:0000B2D3                 mov     eax, [edx]
.text$mn:0000B2D5                 mov     [ebp+var_8], eax
.text$mn:0000B2D8
.text$mn:0000B2D8 loc_B2D8:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:0000B2D8                 mov     eax, [ebp+var_8]
.text$mn:0000B2DB                 mov     esp, ebp
.text$mn:0000B2DD                 pop     ebp
.text$mn:0000B2DE                 retn
.text$mn:0000B2DE ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:0000B2DE
.text$mn:0000B2DE ; ---------------------------------------------------------------------------
.text$mn:0000B2DF                 align 10h
.text$mn:0000B2DF _text$mn        ends
.text$mn:0000B2DF
.text$mn:0000B2E0 ; ===========================================================================
.text$mn:0000B2E0
.text$mn:0000B2E0 ; Segment type: Pure code
.text$mn:0000B2E0 ; Segment permissions: Read/Execute
.text$mn:0000B2E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2E0                 assume cs:_text$mn
.text$mn:0000B2E0                 ;org 0B2E0h
.text$mn:0000B2E0 ; COMDAT (pick any)
.text$mn:0000B2E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2E0
.text$mn:0000B2E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2E0
.text$mn:0000B2E0 ; Attributes: bp-based frame
.text$mn:0000B2E0
.text$mn:0000B2E0 ; public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const
.text$mn:0000B2E0                 public ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
.text$mn:0000B2E0 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ proc near
.text$mn:0000B2E0                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+1Cp
.text$mn:0000B2E0
.text$mn:0000B2E0 var_24          = byte ptr -24h
.text$mn:0000B2E0 var_14          = dword ptr -14h
.text$mn:0000B2E0 var_10          = dword ptr -10h
.text$mn:0000B2E0 var_C           = dword ptr -0Ch
.text$mn:0000B2E0 var_8           = dword ptr -8
.text$mn:0000B2E0 var_4           = dword ptr -4
.text$mn:0000B2E0 arg_0           = dword ptr  8
.text$mn:0000B2E0
.text$mn:0000B2E0                 push    ebp
.text$mn:0000B2E1                 mov     ebp, esp
.text$mn:0000B2E3                 sub     esp, 24h
.text$mn:0000B2E6                 mov     [ebp+var_4], ecx
.text$mn:0000B2E9                 lea     eax, [ebp+var_24]
.text$mn:0000B2EC                 push    eax
.text$mn:0000B2ED                 call    __Getctype
.text$mn:0000B2F2                 add     esp, 4
.text$mn:0000B2F5                 mov     ecx, [eax]
.text$mn:0000B2F7                 mov     [ebp+var_14], ecx
.text$mn:0000B2FA                 mov     edx, [eax+4]
.text$mn:0000B2FD                 mov     [ebp+var_10], edx
.text$mn:0000B300                 mov     ecx, [eax+8]
.text$mn:0000B303                 mov     [ebp+var_C], ecx
.text$mn:0000B306                 mov     edx, [eax+0Ch]
.text$mn:0000B309                 mov     [ebp+var_8], edx
.text$mn:0000B30C                 mov     eax, [ebp+arg_0]
.text$mn:0000B30F                 mov     ecx, [ebp+var_14]
.text$mn:0000B312                 mov     [eax], ecx
.text$mn:0000B314                 mov     edx, [ebp+var_10]
.text$mn:0000B317                 mov     [eax+4], edx
.text$mn:0000B31A                 mov     ecx, [ebp+var_C]
.text$mn:0000B31D                 mov     [eax+8], ecx
.text$mn:0000B320                 mov     edx, [ebp+var_8]
.text$mn:0000B323                 mov     [eax+0Ch], edx
.text$mn:0000B326                 mov     eax, [ebp+arg_0]
.text$mn:0000B329                 mov     esp, ebp
.text$mn:0000B32B                 pop     ebp
.text$mn:0000B32C                 retn    4
.text$mn:0000B32C ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ endp
.text$mn:0000B32C
.text$mn:0000B32C ; ---------------------------------------------------------------------------
.text$mn:0000B32F                 align 10h
.text$mn:0000B32F _text$mn        ends
.text$mn:0000B32F
.text$mn:0000B330 ; ===========================================================================
.text$mn:0000B330
.text$mn:0000B330 ; Segment type: Pure code
.text$mn:0000B330 ; Segment permissions: Read/Execute
.text$mn:0000B330 _text$mn        segment para public 'CODE' use32
.text$mn:0000B330                 assume cs:_text$mn
.text$mn:0000B330                 ;org 0B330h
.text$mn:0000B330 ; COMDAT (pick any)
.text$mn:0000B330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B330
.text$mn:0000B330 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B330
.text$mn:0000B330 ; Attributes: bp-based frame
.text$mn:0000B330
.text$mn:0000B330 ; public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const
.text$mn:0000B330                 public ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
.text$mn:0000B330 ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ proc near
.text$mn:0000B330                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+44p
.text$mn:0000B330
.text$mn:0000B330 var_60          = byte ptr -60h
.text$mn:0000B330 var_34          = dword ptr -34h
.text$mn:0000B330 var_30          = byte ptr -30h
.text$mn:0000B330 var_4           = dword ptr -4
.text$mn:0000B330 arg_0           = dword ptr  8
.text$mn:0000B330
.text$mn:0000B330                 push    ebp
.text$mn:0000B331                 mov     ebp, esp
.text$mn:0000B333                 sub     esp, 60h
.text$mn:0000B336                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B33B                 xor     eax, ebp
.text$mn:0000B33D                 mov     [ebp+var_4], eax
.text$mn:0000B340                 push    esi
.text$mn:0000B341                 push    edi
.text$mn:0000B342                 mov     [ebp+var_34], ecx
.text$mn:0000B345                 lea     eax, [ebp+var_60]
.text$mn:0000B348                 push    eax
.text$mn:0000B349                 call    __Getcvt
.text$mn:0000B34E                 add     esp, 4
.text$mn:0000B351                 mov     ecx, 0Bh
.text$mn:0000B356                 mov     esi, eax
.text$mn:0000B358                 lea     edi, [ebp+var_30]
.text$mn:0000B35B                 rep movsd
.text$mn:0000B35D                 mov     ecx, 0Bh
.text$mn:0000B362                 lea     esi, [ebp+var_30]
.text$mn:0000B365                 mov     edi, [ebp+arg_0]
.text$mn:0000B368                 rep movsd
.text$mn:0000B36A                 mov     eax, [ebp+arg_0]
.text$mn:0000B36D                 pop     edi
.text$mn:0000B36E                 pop     esi
.text$mn:0000B36F                 mov     ecx, [ebp+var_4]
.text$mn:0000B372                 xor     ecx, ebp
.text$mn:0000B374                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000B379                 mov     esp, ebp
.text$mn:0000B37B                 pop     ebp
.text$mn:0000B37C                 retn    4
.text$mn:0000B37C ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ endp
.text$mn:0000B37C
.text$mn:0000B37C ; ---------------------------------------------------------------------------
.text$mn:0000B37F                 align 10h
.text$mn:0000B37F _text$mn        ends
.text$mn:0000B37F
.text$mn:0000B380 ; ===========================================================================
.text$mn:0000B380
.text$mn:0000B380 ; Segment type: Pure code
.text$mn:0000B380 ; Segment permissions: Read/Execute
.text$mn:0000B380 _text$mn        segment para public 'CODE' use32
.text$mn:0000B380                 assume cs:_text$mn
.text$mn:0000B380                 ;org 0B380h
.text$mn:0000B380 ; COMDAT (pick any)
.text$mn:0000B380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B380
.text$mn:0000B380 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B380
.text$mn:0000B380 ; Attributes: bp-based frame
.text$mn:0000B380
.text$mn:0000B380 ; const struct std::locale::facet *__thiscall std::locale::_Getfacet(std::locale *this, unsigned int)
.text$mn:0000B380                 public ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
.text$mn:0000B380 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z proc near
.text$mn:0000B380                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+52p
.text$mn:0000B380
.text$mn:0000B380 var_14          = dword ptr -14h
.text$mn:0000B380 var_10          = dword ptr -10h
.text$mn:0000B380 var_C           = dword ptr -0Ch
.text$mn:0000B380 var_8           = dword ptr -8
.text$mn:0000B380 var_4           = dword ptr -4
.text$mn:0000B380 arg_0           = dword ptr  8
.text$mn:0000B380
.text$mn:0000B380                 push    ebp
.text$mn:0000B381                 mov     ebp, esp
.text$mn:0000B383                 sub     esp, 14h
.text$mn:0000B386                 mov     [ebp+var_4], ecx
.text$mn:0000B389                 mov     eax, [ebp+var_4]
.text$mn:0000B38C                 mov     ecx, [eax]
.text$mn:0000B38E                 mov     edx, [ebp+arg_0]
.text$mn:0000B391                 cmp     edx, [ecx+0Ch]
.text$mn:0000B394                 jnb     short loc_B3A9
.text$mn:0000B396                 mov     eax, [ebp+var_4]
.text$mn:0000B399                 mov     ecx, [eax]
.text$mn:0000B39B                 mov     edx, [ecx+8]
.text$mn:0000B39E                 mov     eax, [ebp+arg_0]
.text$mn:0000B3A1                 mov     ecx, [edx+eax*4]
.text$mn:0000B3A4                 mov     [ebp+var_8], ecx
.text$mn:0000B3A7                 jmp     short loc_B3B0
.text$mn:0000B3A9 ; ---------------------------------------------------------------------------
.text$mn:0000B3A9
.text$mn:0000B3A9 loc_B3A9:                               ; CODE XREF: std::locale::_Getfacet(uint)+14j
.text$mn:0000B3A9                 mov     [ebp+var_8], 0
.text$mn:0000B3B0
.text$mn:0000B3B0 loc_B3B0:                               ; CODE XREF: std::locale::_Getfacet(uint)+27j
.text$mn:0000B3B0                 mov     edx, [ebp+var_8]
.text$mn:0000B3B3                 mov     [ebp+var_C], edx
.text$mn:0000B3B6                 cmp     [ebp+var_C], 0
.text$mn:0000B3BA                 jnz     short loc_B3C9
.text$mn:0000B3BC                 mov     eax, [ebp+var_4]
.text$mn:0000B3BF                 mov     ecx, [eax]
.text$mn:0000B3C1                 movzx   edx, byte ptr [ecx+14h]
.text$mn:0000B3C5                 test    edx, edx
.text$mn:0000B3C7                 jnz     short loc_B3D0
.text$mn:0000B3C9
.text$mn:0000B3C9 loc_B3C9:                               ; CODE XREF: std::locale::_Getfacet(uint)+3Aj
.text$mn:0000B3C9                 mov     eax, [ebp+var_C]
.text$mn:0000B3CC                 jmp     short loc_B3FE
.text$mn:0000B3CE ; ---------------------------------------------------------------------------
.text$mn:0000B3CE                 jmp     short loc_B3FE
.text$mn:0000B3D0 ; ---------------------------------------------------------------------------
.text$mn:0000B3D0
.text$mn:0000B3D0 loc_B3D0:                               ; CODE XREF: std::locale::_Getfacet(uint)+47j
.text$mn:0000B3D0                 call    ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale(void)
.text$mn:0000B3D5                 mov     [ebp+var_10], eax
.text$mn:0000B3D8                 mov     eax, [ebp+var_10]
.text$mn:0000B3DB                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3DE                 cmp     ecx, [eax+0Ch]
.text$mn:0000B3E1                 jnb     short loc_B3F4
.text$mn:0000B3E3                 mov     edx, [ebp+var_10]
.text$mn:0000B3E6                 mov     eax, [edx+8]
.text$mn:0000B3E9                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3EC                 mov     edx, [eax+ecx*4]
.text$mn:0000B3EF                 mov     [ebp+var_14], edx
.text$mn:0000B3F2                 jmp     short loc_B3FB
.text$mn:0000B3F4 ; ---------------------------------------------------------------------------
.text$mn:0000B3F4
.text$mn:0000B3F4 loc_B3F4:                               ; CODE XREF: std::locale::_Getfacet(uint)+61j
.text$mn:0000B3F4                 mov     [ebp+var_14], 0
.text$mn:0000B3FB
.text$mn:0000B3FB loc_B3FB:                               ; CODE XREF: std::locale::_Getfacet(uint)+72j
.text$mn:0000B3FB                 mov     eax, [ebp+var_14]
.text$mn:0000B3FE
.text$mn:0000B3FE loc_B3FE:                               ; CODE XREF: std::locale::_Getfacet(uint)+4Cj
.text$mn:0000B3FE                                         ; std::locale::_Getfacet(uint)+4Ej
.text$mn:0000B3FE                 mov     esp, ebp
.text$mn:0000B400                 pop     ebp
.text$mn:0000B401                 retn    4
.text$mn:0000B401 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z endp
.text$mn:0000B401
.text$mn:0000B401 _text$mn        ends
.text$mn:0000B401
.text$mn:0000B404 ; ===========================================================================
.text$mn:0000B404
.text$mn:0000B404 ; Segment type: Pure code
.text$mn:0000B404 ; Segment permissions: Read/Execute
.text$mn:0000B404 _text$mn        segment para public 'CODE' use32
.text$mn:0000B404                 assume cs:_text$mn
.text$mn:0000B404                 ;org 0B404h
.text$mn:0000B404 ; COMDAT (pick any)
.text$mn:0000B404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B404
.text$mn:0000B404 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B404
.text$mn:0000B404 ; Attributes: bp-based frame
.text$mn:0000B404
.text$mn:0000B404 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:0000B404                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:0000B404 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:0000B404                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+3Cp
.text$mn:0000B404                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Cp
.text$mn:0000B404
.text$mn:0000B404 var_8           = dword ptr -8
.text$mn:0000B404 var_4           = dword ptr -4
.text$mn:0000B404
.text$mn:0000B404                 push    ebp
.text$mn:0000B405                 mov     ebp, esp
.text$mn:0000B407                 sub     esp, 8
.text$mn:0000B40A                 mov     [ebp+var_4], ecx
.text$mn:0000B40D                 mov     eax, [ebp+var_4]
.text$mn:0000B410                 cmp     dword ptr [eax], 0
.text$mn:0000B413                 jnz     short loc_B41E
.text$mn:0000B415                 mov     [ebp+var_8], 0
.text$mn:0000B41C                 jmp     short loc_B429
.text$mn:0000B41E ; ---------------------------------------------------------------------------
.text$mn:0000B41E
.text$mn:0000B41E loc_B41E:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:0000B41E                 mov     ecx, [ebp+var_4]
.text$mn:0000B421                 mov     edx, [ecx]
.text$mn:0000B423                 add     edx, 4
.text$mn:0000B426                 mov     [ebp+var_8], edx
.text$mn:0000B429
.text$mn:0000B429 loc_B429:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:0000B429                 mov     eax, [ebp+var_8]
.text$mn:0000B42C                 mov     esp, ebp
.text$mn:0000B42E                 pop     ebp
.text$mn:0000B42F                 retn
.text$mn:0000B42F ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:0000B42F
.text$mn:0000B42F _text$mn        ends
.text$mn:0000B42F
.text$mn:0000B430 ; ===========================================================================
.text$mn:0000B430
.text$mn:0000B430 ; Segment type: Pure code
.text$mn:0000B430 ; Segment permissions: Read/Execute
.text$mn:0000B430 _text$mn        segment para public 'CODE' use32
.text$mn:0000B430                 assume cs:_text$mn
.text$mn:0000B430                 ;org 0B430h
.text$mn:0000B430 ; COMDAT (pick any)
.text$mn:0000B430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B430
.text$mn:0000B430 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B430
.text$mn:0000B430 ; Attributes: bp-based frame
.text$mn:0000B430
.text$mn:0000B430 ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:0000B430                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:0000B430 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:0000B430                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+71p
.text$mn:0000B430                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+8Ap ...
.text$mn:0000B430
.text$mn:0000B430 var_4           = dword ptr -4
.text$mn:0000B430
.text$mn:0000B430                 push    ebp
.text$mn:0000B431                 mov     ebp, esp
.text$mn:0000B433                 push    ecx
.text$mn:0000B434                 mov     [ebp+var_4], ecx
.text$mn:0000B437                 mov     eax, [ebp+var_4]
.text$mn:0000B43A                 add     eax, 4
.text$mn:0000B43D                 mov     esp, ebp
.text$mn:0000B43F                 pop     ebp
.text$mn:0000B440                 retn
.text$mn:0000B440 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:0000B440
.text$mn:0000B440 ; ---------------------------------------------------------------------------
.text$mn:0000B441                 align 4
.text$mn:0000B441 _text$mn        ends
.text$mn:0000B441
.text$mn:0000B444 ; ===========================================================================
.text$mn:0000B444
.text$mn:0000B444 ; Segment type: Pure code
.text$mn:0000B444 ; Segment permissions: Read/Execute
.text$mn:0000B444 _text$mn        segment para public 'CODE' use32
.text$mn:0000B444                 assume cs:_text$mn
.text$mn:0000B444                 ;org 0B444h
.text$mn:0000B444 ; COMDAT (pick any)
.text$mn:0000B444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B444
.text$mn:0000B444 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B444
.text$mn:0000B444 ; Attributes: bp-based frame
.text$mn:0000B444
.text$mn:0000B444 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:0000B444                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:0000B444 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:0000B444                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:0000B444                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:0000B444
.text$mn:0000B444 var_C           = dword ptr -0Ch
.text$mn:0000B444 Size            = dword ptr -8
.text$mn:0000B444 var_4           = dword ptr -4
.text$mn:0000B444 arg_0           = dword ptr  8
.text$mn:0000B444 arg_4           = byte ptr  0Ch
.text$mn:0000B444
.text$mn:0000B444                 push    ebp
.text$mn:0000B445                 mov     ebp, esp
.text$mn:0000B447                 sub     esp, 0Ch
.text$mn:0000B44A                 mov     [ebp+var_4], ecx
.text$mn:0000B44D                 mov     ecx, [ebp+var_4]
.text$mn:0000B450                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000B455                 cmp     eax, [ebp+arg_0]
.text$mn:0000B458                 jnb     short loc_B462
.text$mn:0000B45A                 mov     ecx, [ebp+var_4]
.text$mn:0000B45D                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:0000B462
.text$mn:0000B462 loc_B462:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:0000B462                 mov     eax, [ebp+var_4]
.text$mn:0000B465                 mov     ecx, [eax+18h]
.text$mn:0000B468                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B46B                 jnb     short loc_B482
.text$mn:0000B46D                 mov     edx, [ebp+var_4]
.text$mn:0000B470                 mov     eax, [edx+14h]
.text$mn:0000B473                 push    eax
.text$mn:0000B474                 mov     ecx, [ebp+arg_0]
.text$mn:0000B477                 push    ecx
.text$mn:0000B478                 mov     ecx, [ebp+var_4]
.text$mn:0000B47B                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:0000B480                 jmp     short loc_B4CC
.text$mn:0000B482 ; ---------------------------------------------------------------------------
.text$mn:0000B482
.text$mn:0000B482 loc_B482:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:0000B482                 movzx   edx, [ebp+arg_4]
.text$mn:0000B486                 test    edx, edx
.text$mn:0000B488                 jz      short loc_B4BC
.text$mn:0000B48A                 cmp     [ebp+arg_0], 10h
.text$mn:0000B48E                 jnb     short loc_B4BC
.text$mn:0000B490                 mov     eax, [ebp+var_4]
.text$mn:0000B493                 mov     ecx, [ebp+arg_0]
.text$mn:0000B496                 cmp     ecx, [eax+14h]
.text$mn:0000B499                 jnb     short loc_B4A3
.text$mn:0000B49B                 mov     edx, [ebp+arg_0]
.text$mn:0000B49E                 mov     [ebp+Size], edx
.text$mn:0000B4A1                 jmp     short loc_B4AC
.text$mn:0000B4A3 ; ---------------------------------------------------------------------------
.text$mn:0000B4A3
.text$mn:0000B4A3 loc_B4A3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:0000B4A3                 mov     eax, [ebp+var_4]
.text$mn:0000B4A6                 mov     ecx, [eax+14h]
.text$mn:0000B4A9                 mov     [ebp+Size], ecx
.text$mn:0000B4AC
.text$mn:0000B4AC loc_B4AC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:0000B4AC                 mov     edx, [ebp+Size]
.text$mn:0000B4AF                 push    edx             ; Size
.text$mn:0000B4B0                 push    1               ; char
.text$mn:0000B4B2                 mov     ecx, [ebp+var_4]
.text$mn:0000B4B5                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000B4BA                 jmp     short loc_B4CC
.text$mn:0000B4BC ; ---------------------------------------------------------------------------
.text$mn:0000B4BC
.text$mn:0000B4BC loc_B4BC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:0000B4BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:0000B4BC                 cmp     [ebp+arg_0], 0
.text$mn:0000B4C0                 jnz     short loc_B4CC
.text$mn:0000B4C2                 push    0
.text$mn:0000B4C4                 mov     ecx, [ebp+var_4]
.text$mn:0000B4C7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000B4CC
.text$mn:0000B4CC loc_B4CC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:0000B4CC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:0000B4CC                 cmp     [ebp+arg_0], 0
.text$mn:0000B4D0                 jbe     short loc_B4DB
.text$mn:0000B4D2                 mov     [ebp+var_C], 1
.text$mn:0000B4D9                 jmp     short loc_B4E2
.text$mn:0000B4DB ; ---------------------------------------------------------------------------
.text$mn:0000B4DB
.text$mn:0000B4DB loc_B4DB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:0000B4DB                 mov     [ebp+var_C], 0
.text$mn:0000B4E2
.text$mn:0000B4E2 loc_B4E2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:0000B4E2                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000B4E5                 mov     esp, ebp
.text$mn:0000B4E7                 pop     ebp
.text$mn:0000B4E8                 retn    8
.text$mn:0000B4E8 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:0000B4E8
.text$mn:0000B4E8 ; ---------------------------------------------------------------------------
.text$mn:0000B4EB                 align 4
.text$mn:0000B4EB _text$mn        ends
.text$mn:0000B4EB
.text$mn:0000B4EC ; ===========================================================================
.text$mn:0000B4EC
.text$mn:0000B4EC ; Segment type: Pure code
.text$mn:0000B4EC ; Segment permissions: Read/Execute
.text$mn:0000B4EC _text$mn        segment para public 'CODE' use32
.text$mn:0000B4EC                 assume cs:_text$mn
.text$mn:0000B4EC                 ;org 0B4ECh
.text$mn:0000B4EC ; COMDAT (pick any)
.text$mn:0000B4EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B4EC
.text$mn:0000B4EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B4EC
.text$mn:0000B4EC ; Attributes: bp-based frame
.text$mn:0000B4EC
.text$mn:0000B4EC ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:0000B4EC                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:0000B4EC ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:0000B4EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:0000B4EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:0000B4EC
.text$mn:0000B4EC var_C           = dword ptr -0Ch
.text$mn:0000B4EC var_8           = dword ptr -8
.text$mn:0000B4EC var_4           = dword ptr -4
.text$mn:0000B4EC arg_0           = dword ptr  8
.text$mn:0000B4EC arg_4           = byte ptr  0Ch
.text$mn:0000B4EC
.text$mn:0000B4EC                 push    ebp
.text$mn:0000B4ED                 mov     ebp, esp
.text$mn:0000B4EF                 sub     esp, 0Ch
.text$mn:0000B4F2                 mov     [ebp+var_4], ecx
.text$mn:0000B4F5                 mov     ecx, [ebp+var_4]
.text$mn:0000B4F8                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000B4FD                 cmp     eax, [ebp+arg_0]
.text$mn:0000B500                 jnb     short loc_B50A
.text$mn:0000B502                 mov     ecx, [ebp+var_4]
.text$mn:0000B505                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000B50A
.text$mn:0000B50A loc_B50A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:0000B50A                 mov     eax, [ebp+var_4]
.text$mn:0000B50D                 mov     ecx, [eax+18h]
.text$mn:0000B510                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B513                 jnb     short loc_B52A
.text$mn:0000B515                 mov     edx, [ebp+var_4]
.text$mn:0000B518                 mov     eax, [edx+14h]
.text$mn:0000B51B                 push    eax
.text$mn:0000B51C                 mov     ecx, [ebp+arg_0]
.text$mn:0000B51F                 push    ecx
.text$mn:0000B520                 mov     ecx, [ebp+var_4]
.text$mn:0000B523                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:0000B528                 jmp     short loc_B574
.text$mn:0000B52A ; ---------------------------------------------------------------------------
.text$mn:0000B52A
.text$mn:0000B52A loc_B52A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:0000B52A                 movzx   edx, [ebp+arg_4]
.text$mn:0000B52E                 test    edx, edx
.text$mn:0000B530                 jz      short loc_B564
.text$mn:0000B532                 cmp     [ebp+arg_0], 8
.text$mn:0000B536                 jnb     short loc_B564
.text$mn:0000B538                 mov     eax, [ebp+var_4]
.text$mn:0000B53B                 mov     ecx, [ebp+arg_0]
.text$mn:0000B53E                 cmp     ecx, [eax+14h]
.text$mn:0000B541                 jnb     short loc_B54B
.text$mn:0000B543                 mov     edx, [ebp+arg_0]
.text$mn:0000B546                 mov     [ebp+var_8], edx
.text$mn:0000B549                 jmp     short loc_B554
.text$mn:0000B54B ; ---------------------------------------------------------------------------
.text$mn:0000B54B
.text$mn:0000B54B loc_B54B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:0000B54B                 mov     eax, [ebp+var_4]
.text$mn:0000B54E                 mov     ecx, [eax+14h]
.text$mn:0000B551                 mov     [ebp+var_8], ecx
.text$mn:0000B554
.text$mn:0000B554 loc_B554:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:0000B554                 mov     edx, [ebp+var_8]
.text$mn:0000B557                 push    edx
.text$mn:0000B558                 push    1
.text$mn:0000B55A                 mov     ecx, [ebp+var_4]
.text$mn:0000B55D                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000B562                 jmp     short loc_B574
.text$mn:0000B564 ; ---------------------------------------------------------------------------
.text$mn:0000B564
.text$mn:0000B564 loc_B564:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:0000B564                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:0000B564                 cmp     [ebp+arg_0], 0
.text$mn:0000B568                 jnz     short loc_B574
.text$mn:0000B56A                 push    0
.text$mn:0000B56C                 mov     ecx, [ebp+var_4]
.text$mn:0000B56F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B574
.text$mn:0000B574 loc_B574:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:0000B574                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:0000B574                 cmp     [ebp+arg_0], 0
.text$mn:0000B578                 jbe     short loc_B583
.text$mn:0000B57A                 mov     [ebp+var_C], 1
.text$mn:0000B581                 jmp     short loc_B58A
.text$mn:0000B583 ; ---------------------------------------------------------------------------
.text$mn:0000B583
.text$mn:0000B583 loc_B583:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:0000B583                 mov     [ebp+var_C], 0
.text$mn:0000B58A
.text$mn:0000B58A loc_B58A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:0000B58A                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000B58D                 mov     esp, ebp
.text$mn:0000B58F                 pop     ebp
.text$mn:0000B590                 retn    8
.text$mn:0000B590 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:0000B590
.text$mn:0000B590 ; ---------------------------------------------------------------------------
.text$mn:0000B593                 align 4
.text$mn:0000B593 _text$mn        ends
.text$mn:0000B593
.text$mn:0000B594 ; ===========================================================================
.text$mn:0000B594
.text$mn:0000B594 ; Segment type: Pure code
.text$mn:0000B594 ; Segment permissions: Read/Execute
.text$mn:0000B594 _text$mn        segment para public 'CODE' use32
.text$mn:0000B594                 assume cs:_text$mn
.text$mn:0000B594                 ;org 0B594h
.text$mn:0000B594 ; COMDAT (pick any)
.text$mn:0000B594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B594
.text$mn:0000B594 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B594
.text$mn:0000B594 ; Attributes: bp-based frame
.text$mn:0000B594
.text$mn:0000B594 ; protected: unsigned int __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Grow_to(unsigned int)const
.text$mn:0000B594                 public ?_Grow_to@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEII@Z
.text$mn:0000B594 ?_Grow_to@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEII@Z proc near
.text$mn:0000B594                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+45p
.text$mn:0000B594
.text$mn:0000B594 var_C           = dword ptr -0Ch
.text$mn:0000B594 var_8           = dword ptr -8
.text$mn:0000B594 var_4           = dword ptr -4
.text$mn:0000B594 arg_0           = dword ptr  8
.text$mn:0000B594
.text$mn:0000B594                 push    ebp
.text$mn:0000B595                 mov     ebp, esp
.text$mn:0000B597                 sub     esp, 0Ch
.text$mn:0000B59A                 mov     [ebp+var_8], ecx
.text$mn:0000B59D                 mov     ecx, [ebp+var_8]
.text$mn:0000B5A0                 call    ?capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::capacity(void)
.text$mn:0000B5A5                 mov     [ebp+var_4], eax
.text$mn:0000B5A8                 mov     ecx, [ebp+var_8]
.text$mn:0000B5AB                 call    ?max_size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::max_size(void)
.text$mn:0000B5B0                 mov     ecx, [ebp+var_4]
.text$mn:0000B5B3                 shr     ecx, 1
.text$mn:0000B5B5                 sub     eax, ecx
.text$mn:0000B5B7                 cmp     eax, [ebp+var_4]
.text$mn:0000B5BA                 jnb     short loc_B5C5
.text$mn:0000B5BC                 mov     [ebp+var_C], 0
.text$mn:0000B5C3                 jmp     short loc_B5D0
.text$mn:0000B5C5 ; ---------------------------------------------------------------------------
.text$mn:0000B5C5
.text$mn:0000B5C5 loc_B5C5:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)+26j
.text$mn:0000B5C5                 mov     edx, [ebp+var_4]
.text$mn:0000B5C8                 shr     edx, 1
.text$mn:0000B5CA                 add     edx, [ebp+var_4]
.text$mn:0000B5CD                 mov     [ebp+var_C], edx
.text$mn:0000B5D0
.text$mn:0000B5D0 loc_B5D0:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)+2Fj
.text$mn:0000B5D0                 mov     eax, [ebp+var_C]
.text$mn:0000B5D3                 mov     [ebp+var_4], eax
.text$mn:0000B5D6                 mov     ecx, [ebp+var_4]
.text$mn:0000B5D9                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B5DC                 jnb     short loc_B5E4
.text$mn:0000B5DE                 mov     edx, [ebp+arg_0]
.text$mn:0000B5E1                 mov     [ebp+var_4], edx
.text$mn:0000B5E4
.text$mn:0000B5E4 loc_B5E4:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)+48j
.text$mn:0000B5E4                 mov     eax, [ebp+var_4]
.text$mn:0000B5E7                 mov     esp, ebp
.text$mn:0000B5E9                 pop     ebp
.text$mn:0000B5EA                 retn    4
.text$mn:0000B5EA ?_Grow_to@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEII@Z endp
.text$mn:0000B5EA
.text$mn:0000B5EA ; ---------------------------------------------------------------------------
.text$mn:0000B5ED                 align 10h
.text$mn:0000B5ED _text$mn        ends
.text$mn:0000B5ED
.text$mn:0000B5F0 ; ===========================================================================
.text$mn:0000B5F0
.text$mn:0000B5F0 ; Segment type: Pure code
.text$mn:0000B5F0 ; Segment permissions: Read/Execute
.text$mn:0000B5F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B5F0                 assume cs:_text$mn
.text$mn:0000B5F0                 ;org 0B5F0h
.text$mn:0000B5F0 ; COMDAT (pick any)
.text$mn:0000B5F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B5F0
.text$mn:0000B5F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B5F0
.text$mn:0000B5F0 ; Attributes: bp-based frame
.text$mn:0000B5F0
.text$mn:0000B5F0 ; protected: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Grow_to(unsigned int)const
.text$mn:0000B5F0                 public ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z
.text$mn:0000B5F0 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z proc near
.text$mn:0000B5F0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+45p
.text$mn:0000B5F0
.text$mn:0000B5F0 var_C           = dword ptr -0Ch
.text$mn:0000B5F0 var_8           = dword ptr -8
.text$mn:0000B5F0 var_4           = dword ptr -4
.text$mn:0000B5F0 arg_0           = dword ptr  8
.text$mn:0000B5F0
.text$mn:0000B5F0                 push    ebp
.text$mn:0000B5F1                 mov     ebp, esp
.text$mn:0000B5F3                 sub     esp, 0Ch
.text$mn:0000B5F6                 mov     [ebp+var_8], ecx
.text$mn:0000B5F9                 mov     ecx, [ebp+var_8]
.text$mn:0000B5FC                 call    ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::capacity(void)
.text$mn:0000B601                 mov     [ebp+var_4], eax
.text$mn:0000B604                 mov     ecx, [ebp+var_8]
.text$mn:0000B607                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000B60C                 mov     ecx, [ebp+var_4]
.text$mn:0000B60F                 shr     ecx, 1
.text$mn:0000B611                 sub     eax, ecx
.text$mn:0000B613                 cmp     eax, [ebp+var_4]
.text$mn:0000B616                 jnb     short loc_B621
.text$mn:0000B618                 mov     [ebp+var_C], 0
.text$mn:0000B61F                 jmp     short loc_B62C
.text$mn:0000B621 ; ---------------------------------------------------------------------------
.text$mn:0000B621
.text$mn:0000B621 loc_B621:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+26j
.text$mn:0000B621                 mov     edx, [ebp+var_4]
.text$mn:0000B624                 shr     edx, 1
.text$mn:0000B626                 add     edx, [ebp+var_4]
.text$mn:0000B629                 mov     [ebp+var_C], edx
.text$mn:0000B62C
.text$mn:0000B62C loc_B62C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+2Fj
.text$mn:0000B62C                 mov     eax, [ebp+var_C]
.text$mn:0000B62F                 mov     [ebp+var_4], eax
.text$mn:0000B632                 mov     ecx, [ebp+var_4]
.text$mn:0000B635                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B638                 jnb     short loc_B640
.text$mn:0000B63A                 mov     edx, [ebp+arg_0]
.text$mn:0000B63D                 mov     [ebp+var_4], edx
.text$mn:0000B640
.text$mn:0000B640 loc_B640:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+48j
.text$mn:0000B640                 mov     eax, [ebp+var_4]
.text$mn:0000B643                 mov     esp, ebp
.text$mn:0000B645                 pop     ebp
.text$mn:0000B646                 retn    4
.text$mn:0000B646 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z endp
.text$mn:0000B646
.text$mn:0000B646 ; ---------------------------------------------------------------------------
.text$mn:0000B649                 align 4
.text$mn:0000B649 _text$mn        ends
.text$mn:0000B649
.text$mn:0000B64C ; ===========================================================================
.text$mn:0000B64C
.text$mn:0000B64C ; Segment type: Pure code
.text$mn:0000B64C ; Segment permissions: Read/Execute
.text$mn:0000B64C _text$mn        segment para public 'CODE' use32
.text$mn:0000B64C                 assume cs:_text$mn
.text$mn:0000B64C                 ;org 0B64Ch
.text$mn:0000B64C ; COMDAT (pick any)
.text$mn:0000B64C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B64C
.text$mn:0000B64C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B64C
.text$mn:0000B64C ; Attributes: bp-based frame
.text$mn:0000B64C
.text$mn:0000B64C ; void __thiscall std::locale::facet::_Incref(std::locale::facet *__hidden this)
.text$mn:0000B64C                 public ?_Incref@facet@locale@std@@UAEXXZ
.text$mn:0000B64C ?_Incref@facet@locale@std@@UAEXXZ proc near ; DATA XREF: .rdata:000111B4o
.text$mn:0000B64C                                         ; .rdata:000112A0o ...
.text$mn:0000B64C
.text$mn:0000B64C var_4           = dword ptr -4
.text$mn:0000B64C
.text$mn:0000B64C                 push    ebp
.text$mn:0000B64D                 mov     ebp, esp
.text$mn:0000B64F                 push    ecx
.text$mn:0000B650                 mov     [ebp+var_4], ecx
.text$mn:0000B653                 mov     eax, [ebp+var_4]
.text$mn:0000B656                 add     eax, 4
.text$mn:0000B659                 mov     ecx, 1
.text$mn:0000B65E                 lock xadd [eax], ecx
.text$mn:0000B662                 mov     esp, ebp
.text$mn:0000B664                 pop     ebp
.text$mn:0000B665                 retn
.text$mn:0000B665 ?_Incref@facet@locale@std@@UAEXXZ endp
.text$mn:0000B665
.text$mn:0000B665 ; ---------------------------------------------------------------------------
.text$mn:0000B666                 align 4
.text$mn:0000B666 _text$mn        ends
.text$mn:0000B666
.text$mn:0000B668 ; ===========================================================================
.text$mn:0000B668
.text$mn:0000B668 ; Segment type: Pure code
.text$mn:0000B668 ; Segment permissions: Read/Execute
.text$mn:0000B668 _text$mn        segment para public 'CODE' use32
.text$mn:0000B668                 assume cs:_text$mn
.text$mn:0000B668                 ;org 0B668h
.text$mn:0000B668 ; COMDAT (pick any)
.text$mn:0000B668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B668
.text$mn:0000B668 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B668
.text$mn:0000B668 ; Attributes: bp-based frame
.text$mn:0000B668
.text$mn:0000B668 ; protected: void __thiscall std::ctype<wchar_t>::_Init(class std::_Locinfo const &)
.text$mn:0000B668                 public ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
.text$mn:0000B668 ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z proc near
.text$mn:0000B668                                         ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+49p
.text$mn:0000B668
.text$mn:0000B668 var_44          = byte ptr -44h
.text$mn:0000B668 var_34          = dword ptr -34h
.text$mn:0000B668 var_30          = byte ptr -30h
.text$mn:0000B668 var_4           = dword ptr -4
.text$mn:0000B668 arg_0           = dword ptr  8
.text$mn:0000B668
.text$mn:0000B668                 push    ebp
.text$mn:0000B669                 mov     ebp, esp
.text$mn:0000B66B                 sub     esp, 44h
.text$mn:0000B66E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B673                 xor     eax, ebp
.text$mn:0000B675                 mov     [ebp+var_4], eax
.text$mn:0000B678                 push    esi
.text$mn:0000B679                 push    edi
.text$mn:0000B67A                 mov     [ebp+var_34], ecx
.text$mn:0000B67D                 lea     eax, [ebp+var_44]
.text$mn:0000B680                 push    eax
.text$mn:0000B681                 mov     ecx, [ebp+arg_0]
.text$mn:0000B684                 call    ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype(void)
.text$mn:0000B689                 mov     ecx, [ebp+var_34]
.text$mn:0000B68C                 add     ecx, 8
.text$mn:0000B68F                 mov     edx, [eax]
.text$mn:0000B691                 mov     [ecx], edx
.text$mn:0000B693                 mov     edx, [eax+4]
.text$mn:0000B696                 mov     [ecx+4], edx
.text$mn:0000B699                 mov     edx, [eax+8]
.text$mn:0000B69C                 mov     [ecx+8], edx
.text$mn:0000B69F                 mov     eax, [eax+0Ch]
.text$mn:0000B6A2                 mov     [ecx+0Ch], eax
.text$mn:0000B6A5                 lea     ecx, [ebp+var_30]
.text$mn:0000B6A8                 push    ecx
.text$mn:0000B6A9                 mov     ecx, [ebp+arg_0]
.text$mn:0000B6AC                 call    ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt(void)
.text$mn:0000B6B1                 mov     edi, [ebp+var_34]
.text$mn:0000B6B4                 add     edi, 18h
.text$mn:0000B6B7                 mov     ecx, 0Bh
.text$mn:0000B6BC                 mov     esi, eax
.text$mn:0000B6BE                 rep movsd
.text$mn:0000B6C0                 pop     edi
.text$mn:0000B6C1                 pop     esi
.text$mn:0000B6C2                 mov     ecx, [ebp+var_4]
.text$mn:0000B6C5                 xor     ecx, ebp
.text$mn:0000B6C7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000B6CC                 mov     esp, ebp
.text$mn:0000B6CE                 pop     ebp
.text$mn:0000B6CF                 retn    4
.text$mn:0000B6CF ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z endp
.text$mn:0000B6CF
.text$mn:0000B6CF ; ---------------------------------------------------------------------------
.text$mn:0000B6D2                 align 4
.text$mn:0000B6D2 _text$mn        ends
.text$mn:0000B6D2
.text$mn:0000B6D4 ; ===========================================================================
.text$mn:0000B6D4
.text$mn:0000B6D4 ; Segment type: Pure code
.text$mn:0000B6D4 ; Segment permissions: Read/Execute
.text$mn:0000B6D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B6D4                 assume cs:_text$mn
.text$mn:0000B6D4                 ;org 0B6D4h
.text$mn:0000B6D4 ; COMDAT (pick any)
.text$mn:0000B6D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6D4
.text$mn:0000B6D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6D4
.text$mn:0000B6D4 ; Attributes: bp-based frame
.text$mn:0000B6D4
.text$mn:0000B6D4 ; void __cdecl std::_Init_atomic_counter(unsigned __int32 *, unsigned __int32)
.text$mn:0000B6D4                 public ?_Init_atomic_counter@std@@YAXAAKK@Z
.text$mn:0000B6D4 ?_Init_atomic_counter@std@@YAXAAKK@Z proc near
.text$mn:0000B6D4                                         ; CODE XREF: std::locale::facet::facet(uint)+49p
.text$mn:0000B6D4
.text$mn:0000B6D4 arg_0           = dword ptr  8
.text$mn:0000B6D4 arg_4           = dword ptr  0Ch
.text$mn:0000B6D4
.text$mn:0000B6D4                 push    ebp
.text$mn:0000B6D5                 mov     ebp, esp
.text$mn:0000B6D7                 mov     eax, [ebp+arg_0]
.text$mn:0000B6DA                 mov     ecx, [ebp+arg_4]
.text$mn:0000B6DD                 mov     [eax], ecx
.text$mn:0000B6DF                 pop     ebp
.text$mn:0000B6E0                 retn
.text$mn:0000B6E0 ?_Init_atomic_counter@std@@YAXAAKK@Z endp
.text$mn:0000B6E0
.text$mn:0000B6E0 ; ---------------------------------------------------------------------------
.text$mn:0000B6E1                 align 4
.text$mn:0000B6E1 _text$mn        ends
.text$mn:0000B6E1
.text$mn:0000B6E4 ; ===========================================================================
.text$mn:0000B6E4
.text$mn:0000B6E4 ; Segment type: Pure code
.text$mn:0000B6E4 ; Segment permissions: Read/Execute
.text$mn:0000B6E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B6E4                 assume cs:_text$mn
.text$mn:0000B6E4                 ;org 0B6E4h
.text$mn:0000B6E4 ; COMDAT (pick any)
.text$mn:0000B6E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B6E4
.text$mn:0000B6E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B6E4
.text$mn:0000B6E4 ; Attributes: bp-based frame
.text$mn:0000B6E4
.text$mn:0000B6E4 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:0000B6E4                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:0000B6E4 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:0000B6E4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:0000B6E4
.text$mn:0000B6E4 var_4           = dword ptr -4
.text$mn:0000B6E4 arg_0           = dword ptr  8
.text$mn:0000B6E4
.text$mn:0000B6E4                 push    ebp
.text$mn:0000B6E5                 mov     ebp, esp
.text$mn:0000B6E7                 push    ecx
.text$mn:0000B6E8                 mov     [ebp+var_4], ecx
.text$mn:0000B6EB                 cmp     [ebp+arg_0], 0
.text$mn:0000B6EF                 jz      short loc_B711
.text$mn:0000B6F1                 mov     ecx, [ebp+var_4]
.text$mn:0000B6F4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000B6F9                 cmp     [ebp+arg_0], eax
.text$mn:0000B6FC                 jb      short loc_B711
.text$mn:0000B6FE                 mov     ecx, [ebp+var_4]
.text$mn:0000B701                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000B706                 mov     ecx, [ebp+var_4]
.text$mn:0000B709                 add     eax, [ecx+14h]
.text$mn:0000B70C                 cmp     eax, [ebp+arg_0]
.text$mn:0000B70F                 ja      short loc_B717
.text$mn:0000B711
.text$mn:0000B711 loc_B711:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:0000B711                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:0000B711                 xor     al, al
.text$mn:0000B713                 jmp     short loc_B719
.text$mn:0000B715 ; ---------------------------------------------------------------------------
.text$mn:0000B715                 jmp     short loc_B719
.text$mn:0000B717 ; ---------------------------------------------------------------------------
.text$mn:0000B717
.text$mn:0000B717 loc_B717:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:0000B717                 mov     al, 1
.text$mn:0000B719
.text$mn:0000B719 loc_B719:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:0000B719                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:0000B719                 mov     esp, ebp
.text$mn:0000B71B                 pop     ebp
.text$mn:0000B71C                 retn    4
.text$mn:0000B71C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:0000B71C
.text$mn:0000B71C ; ---------------------------------------------------------------------------
.text$mn:0000B71F                 align 10h
.text$mn:0000B71F _text$mn        ends
.text$mn:0000B71F
.text$mn:0000B720 ; ===========================================================================
.text$mn:0000B720
.text$mn:0000B720 ; Segment type: Pure code
.text$mn:0000B720 ; Segment permissions: Read/Execute
.text$mn:0000B720 _text$mn        segment para public 'CODE' use32
.text$mn:0000B720                 assume cs:_text$mn
.text$mn:0000B720                 ;org 0B720h
.text$mn:0000B720 ; COMDAT (pick any)
.text$mn:0000B720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B720
.text$mn:0000B720 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B720
.text$mn:0000B720 ; Attributes: bp-based frame
.text$mn:0000B720
.text$mn:0000B720 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000B720                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:0000B720 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:0000B720                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:0000B720                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:0000B720
.text$mn:0000B720 var_4           = dword ptr -4
.text$mn:0000B720 arg_0           = dword ptr  8
.text$mn:0000B720
.text$mn:0000B720                 push    ebp
.text$mn:0000B721                 mov     ebp, esp
.text$mn:0000B723                 push    ecx
.text$mn:0000B724                 mov     [ebp+var_4], ecx
.text$mn:0000B727                 cmp     [ebp+arg_0], 0
.text$mn:0000B72B                 jz      short loc_B750
.text$mn:0000B72D                 mov     ecx, [ebp+var_4]
.text$mn:0000B730                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B735                 cmp     [ebp+arg_0], eax
.text$mn:0000B738                 jb      short loc_B750
.text$mn:0000B73A                 mov     ecx, [ebp+var_4]
.text$mn:0000B73D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B742                 mov     ecx, [ebp+var_4]
.text$mn:0000B745                 mov     edx, [ecx+14h]
.text$mn:0000B748                 lea     eax, [eax+edx*2]
.text$mn:0000B74B                 cmp     eax, [ebp+arg_0]
.text$mn:0000B74E                 ja      short loc_B756
.text$mn:0000B750
.text$mn:0000B750 loc_B750:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:0000B750                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:0000B750                 xor     al, al
.text$mn:0000B752                 jmp     short loc_B758
.text$mn:0000B754 ; ---------------------------------------------------------------------------
.text$mn:0000B754                 jmp     short loc_B758
.text$mn:0000B756 ; ---------------------------------------------------------------------------
.text$mn:0000B756
.text$mn:0000B756 loc_B756:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:0000B756                 mov     al, 1
.text$mn:0000B758
.text$mn:0000B758 loc_B758:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:0000B758                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:0000B758                 mov     esp, ebp
.text$mn:0000B75A                 pop     ebp
.text$mn:0000B75B                 retn    4
.text$mn:0000B75B ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:0000B75B
.text$mn:0000B75B ; ---------------------------------------------------------------------------
.text$mn:0000B75E                 align 10h
.text$mn:0000B75E _text$mn        ends
.text$mn:0000B75E
.text$mn:0000B760 ; ===========================================================================
.text$mn:0000B760
.text$mn:0000B760 ; Segment type: Pure code
.text$mn:0000B760 ; Segment permissions: Read/Execute
.text$mn:0000B760 _text$mn        segment para public 'CODE' use32
.text$mn:0000B760                 assume cs:_text$mn
.text$mn:0000B760                 ;org 0B760h
.text$mn:0000B760 ; COMDAT (pick any)
.text$mn:0000B760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B760
.text$mn:0000B760 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B760
.text$mn:0000B760 ; Attributes: bp-based frame
.text$mn:0000B760
.text$mn:0000B760 ; protected: bool __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Inside(struct MatchedCharInserted const *)const
.text$mn:0000B760                 public ?_Inside@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBE_NPBUMatchedCharInserted@@@Z
.text$mn:0000B760 ?_Inside@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBE_NPBUMatchedCharInserted@@@Z proc near
.text$mn:0000B760                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+19p
.text$mn:0000B760
.text$mn:0000B760 var_8           = dword ptr -8
.text$mn:0000B760 var_4           = dword ptr -4
.text$mn:0000B760 arg_0           = dword ptr  8
.text$mn:0000B760
.text$mn:0000B760                 push    ebp
.text$mn:0000B761                 mov     ebp, esp
.text$mn:0000B763                 sub     esp, 8
.text$mn:0000B766                 mov     [ebp+var_4], ecx
.text$mn:0000B769                 mov     eax, [ebp+var_4]
.text$mn:0000B76C                 mov     ecx, [ebp+arg_0]
.text$mn:0000B76F                 cmp     ecx, [eax+8]
.text$mn:0000B772                 jnb     short loc_B788
.text$mn:0000B774                 mov     edx, [ebp+var_4]
.text$mn:0000B777                 mov     eax, [edx+4]
.text$mn:0000B77A                 cmp     eax, [ebp+arg_0]
.text$mn:0000B77D                 ja      short loc_B788
.text$mn:0000B77F                 mov     [ebp+var_8], 1
.text$mn:0000B786                 jmp     short loc_B78F
.text$mn:0000B788 ; ---------------------------------------------------------------------------
.text$mn:0000B788
.text$mn:0000B788 loc_B788:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Inside(MatchedCharInserted const *)+12j
.text$mn:0000B788                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Inside(MatchedCharInserted const *)+1Dj
.text$mn:0000B788                 mov     [ebp+var_8], 0
.text$mn:0000B78F
.text$mn:0000B78F loc_B78F:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Inside(MatchedCharInserted const *)+26j
.text$mn:0000B78F                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000B792                 mov     esp, ebp
.text$mn:0000B794                 pop     ebp
.text$mn:0000B795                 retn    4
.text$mn:0000B795 ?_Inside@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBE_NPBUMatchedCharInserted@@@Z endp
.text$mn:0000B795
.text$mn:0000B795 _text$mn        ends
.text$mn:0000B795
.text$mn:0000B798 ; ===========================================================================
.text$mn:0000B798
.text$mn:0000B798 ; Segment type: Pure code
.text$mn:0000B798 ; Segment permissions: Read/Execute
.text$mn:0000B798 _text$mn        segment para public 'CODE' use32
.text$mn:0000B798                 assume cs:_text$mn
.text$mn:0000B798                 ;org 0B798h
.text$mn:0000B798 ; COMDAT (pick any)
.text$mn:0000B798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B798
.text$mn:0000B798 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B798
.text$mn:0000B798 ; Attributes: bp-based frame
.text$mn:0000B798
.text$mn:0000B798 ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Inside(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *)const
.text$mn:0000B798                 public ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000B798 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000B798                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+19p
.text$mn:0000B798                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+19p
.text$mn:0000B798
.text$mn:0000B798 var_8           = dword ptr -8
.text$mn:0000B798 var_4           = dword ptr -4
.text$mn:0000B798 arg_0           = dword ptr  8
.text$mn:0000B798
.text$mn:0000B798                 push    ebp
.text$mn:0000B799                 mov     ebp, esp
.text$mn:0000B79B                 sub     esp, 8
.text$mn:0000B79E                 mov     [ebp+var_4], ecx
.text$mn:0000B7A1                 mov     eax, [ebp+var_4]
.text$mn:0000B7A4                 mov     ecx, [ebp+arg_0]
.text$mn:0000B7A7                 cmp     ecx, [eax+8]
.text$mn:0000B7AA                 jnb     short loc_B7C0
.text$mn:0000B7AC                 mov     edx, [ebp+var_4]
.text$mn:0000B7AF                 mov     eax, [edx+4]
.text$mn:0000B7B2                 cmp     eax, [ebp+arg_0]
.text$mn:0000B7B5                 ja      short loc_B7C0
.text$mn:0000B7B7                 mov     [ebp+var_8], 1
.text$mn:0000B7BE                 jmp     short loc_B7C7
.text$mn:0000B7C0 ; ---------------------------------------------------------------------------
.text$mn:0000B7C0
.text$mn:0000B7C0 loc_B7C0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+12j
.text$mn:0000B7C0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+1Dj
.text$mn:0000B7C0                 mov     [ebp+var_8], 0
.text$mn:0000B7C7
.text$mn:0000B7C7 loc_B7C7:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+26j
.text$mn:0000B7C7                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000B7CA                 mov     esp, ebp
.text$mn:0000B7CC                 pop     ebp
.text$mn:0000B7CD                 retn    4
.text$mn:0000B7CD ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000B7CD
.text$mn:0000B7CD _text$mn        ends
.text$mn:0000B7CD
.text$mn:0000B7D0 ; ===========================================================================
.text$mn:0000B7D0
.text$mn:0000B7D0 ; Segment type: Pure code
.text$mn:0000B7D0 ; Segment permissions: Read/Execute
.text$mn:0000B7D0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7D0                 assume cs:_text$mn
.text$mn:0000B7D0                 ;org 0B7D0h
.text$mn:0000B7D0 ; COMDAT (pick any)
.text$mn:0000B7D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7D0
.text$mn:0000B7D0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7D0
.text$mn:0000B7D0 ; Attributes: bp-based frame
.text$mn:0000B7D0
.text$mn:0000B7D0 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Make_iter(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>)const
.text$mn:0000B7D0                 public ?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$mn:0000B7D0 ?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z proc near
.text$mn:0000B7D0                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+EEp
.text$mn:0000B7D0
.text$mn:0000B7D0 var_14          = dword ptr -14h
.text$mn:0000B7D0 var_10          = dword ptr -10h
.text$mn:0000B7D0 var_C           = dword ptr -0Ch
.text$mn:0000B7D0 var_4           = dword ptr -4
.text$mn:0000B7D0 arg_0           = dword ptr  8
.text$mn:0000B7D0 arg_4           = byte ptr  0Ch
.text$mn:0000B7D0 arg_C           = dword ptr  14h
.text$mn:0000B7D0
.text$mn:0000B7D0                 push    ebp
.text$mn:0000B7D1                 mov     ebp, esp
.text$mn:0000B7D3                 push    0FFFFFFFFh
.text$mn:0000B7D5                 push    offset __ehhandler$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$mn:0000B7DA                 mov     eax, large fs:0
.text$mn:0000B7E0                 push    eax
.text$mn:0000B7E1                 sub     esp, 8
.text$mn:0000B7E4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B7E9                 xor     eax, ebp
.text$mn:0000B7EB                 push    eax
.text$mn:0000B7EC                 lea     eax, [ebp+var_C]
.text$mn:0000B7EF                 mov     large fs:0, eax
.text$mn:0000B7F5                 mov     [ebp+var_14], ecx
.text$mn:0000B7F8                 mov     [ebp+var_10], 0
.text$mn:0000B7FF                 mov     [ebp+var_4], 1
.text$mn:0000B806                 mov     eax, [ebp+var_14]
.text$mn:0000B809                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000B80A                 mov     ecx, [ebp+arg_C]
.text$mn:0000B80D                 push    ecx             ; int
.text$mn:0000B80E                 mov     ecx, [ebp+arg_0]
.text$mn:0000B811                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)
.text$mn:0000B816                 mov     edx, [ebp+var_10]
.text$mn:0000B819                 or      edx, 1
.text$mn:0000B81C                 mov     [ebp+var_10], edx
.text$mn:0000B81F                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000B823                 lea     ecx, [ebp+arg_4]
.text$mn:0000B826                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000B82B                 mov     eax, [ebp+arg_0]
.text$mn:0000B82E                 mov     ecx, [ebp+var_C]
.text$mn:0000B831                 mov     large fs:0, ecx
.text$mn:0000B838                 pop     ecx
.text$mn:0000B839                 mov     esp, ebp
.text$mn:0000B83B                 pop     ebp
.text$mn:0000B83C                 retn    10h
.text$mn:0000B83C ?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z endp
.text$mn:0000B83C
.text$mn:0000B83C ; ---------------------------------------------------------------------------
.text$mn:0000B83F                 align 10h
.text$mn:0000B83F _text$mn        ends
.text$mn:0000B83F
.text$x:0000B840 ; ===========================================================================
.text$x:0000B840
.text$x:0000B840 ; Segment type: Pure code
.text$x:0000B840 ; Segment permissions: Read/Execute
.text$x:0000B840 _text$x         segment para public 'CODE' use32
.text$x:0000B840                 assume cs:_text$x
.text$x:0000B840                 ;org 0B840h
.text$x:0000B840 ; COMDAT (pick associative to section at B7D0)
.text$x:0000B840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B840
.text$x:0000B840 ; =============== S U B R O U T I N E =======================================
.text$x:0000B840
.text$x:0000B840
.text$x:0000B840 __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000B840                                         ; DATA XREF: .xdata$x:000105ECo
.text$x:0000B840                 lea     ecx, [ebp+0Ch]
.text$x:0000B843                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000B843 __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0 endp
.text$x:0000B843
.text$x:0000B848
.text$x:0000B848 ; =============== S U B R O U T I N E =======================================
.text$x:0000B848
.text$x:0000B848
.text$x:0000B848 __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1 proc near
.text$x:0000B848                                         ; DATA XREF: .xdata$x:000105E4o
.text$x:0000B848                 mov     eax, [ebp-10h]
.text$x:0000B84B                 and     eax, 1
.text$x:0000B84E                 jz      $LN5
.text$x:0000B854                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B858                 mov     ecx, [ebp+8]
.text$x:0000B85B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000B860 ; ---------------------------------------------------------------------------
.text$x:0000B860
.text$x:0000B860 $LN5:                                   ; CODE XREF: __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1+6j
.text$x:0000B860                 retn
.text$x:0000B860 __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1 endp
.text$x:0000B860
.text$x:0000B861
.text$x:0000B861 ; =============== S U B R O U T I N E =======================================
.text$x:0000B861
.text$x:0000B861
.text$x:0000B861 __ehhandler$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z proc near
.text$x:0000B861                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+5o
.text$x:0000B861
.text$x:0000B861 arg_4           = dword ptr  8
.text$x:0000B861
.text$x:0000B861                 mov     edx, [esp+arg_4]
.text$x:0000B865                 lea     eax, [edx+0Ch]
.text$x:0000B868                 mov     ecx, [edx-0Ch]
.text$x:0000B86B                 xor     ecx, eax
.text$x:0000B86D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B872                 mov     eax, offset __ehfuncinfo$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$x:0000B877                 jmp     ___CxxFrameHandler3
.text$x:0000B877 __ehhandler$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z endp
.text$x:0000B877
.text$x:0000B877 _text$x         ends
.text$x:0000B877
.text$mn:0000B87C ; ===========================================================================
.text$mn:0000B87C
.text$mn:0000B87C ; Segment type: Pure code
.text$mn:0000B87C ; Segment permissions: Read/Execute
.text$mn:0000B87C _text$mn        segment para public 'CODE' use32
.text$mn:0000B87C                 assume cs:_text$mn
.text$mn:0000B87C                 ;org 0B87Ch
.text$mn:0000B87C ; COMDAT (pick any)
.text$mn:0000B87C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B87C
.text$mn:0000B87C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B87C
.text$mn:0000B87C ; Attributes: bp-based frame
.text$mn:0000B87C
.text$mn:0000B87C ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000B87C                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:0000B87C ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:0000B87C                                         ; CODE XREF: $LN19+14p
.text$mn:0000B87C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:0000B87C
.text$mn:0000B87C var_8           = dword ptr -8
.text$mn:0000B87C var_4           = dword ptr -4
.text$mn:0000B87C
.text$mn:0000B87C                 push    ebp
.text$mn:0000B87D                 mov     ebp, esp
.text$mn:0000B87F                 sub     esp, 8
.text$mn:0000B882                 mov     [ebp+var_4], ecx
.text$mn:0000B885                 mov     eax, [ebp+var_4]
.text$mn:0000B888                 cmp     dword ptr [eax+18h], 10h
.text$mn:0000B88C                 jb      short loc_B8A2
.text$mn:0000B88E                 mov     ecx, [ebp+var_4]
.text$mn:0000B891                 mov     edx, [ecx+4]
.text$mn:0000B894                 push    edx
.text$mn:0000B895                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000B89A                 add     esp, 4
.text$mn:0000B89D                 mov     [ebp+var_8], eax
.text$mn:0000B8A0                 jmp     short loc_B8AB
.text$mn:0000B8A2 ; ---------------------------------------------------------------------------
.text$mn:0000B8A2
.text$mn:0000B8A2 loc_B8A2:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000B8A2                 mov     eax, [ebp+var_4]
.text$mn:0000B8A5                 add     eax, 4
.text$mn:0000B8A8                 mov     [ebp+var_8], eax
.text$mn:0000B8AB
.text$mn:0000B8AB loc_B8AB:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000B8AB                 mov     eax, [ebp+var_8]
.text$mn:0000B8AE                 mov     esp, ebp
.text$mn:0000B8B0                 pop     ebp
.text$mn:0000B8B1                 retn
.text$mn:0000B8B1 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:0000B8B1
.text$mn:0000B8B1 ; ---------------------------------------------------------------------------
.text$mn:0000B8B2                 align 4
.text$mn:0000B8B2 _text$mn        ends
.text$mn:0000B8B2
.text$mn:0000B8B4 ; ===========================================================================
.text$mn:0000B8B4
.text$mn:0000B8B4 ; Segment type: Pure code
.text$mn:0000B8B4 ; Segment permissions: Read/Execute
.text$mn:0000B8B4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B8B4                 assume cs:_text$mn
.text$mn:0000B8B4                 ;org 0B8B4h
.text$mn:0000B8B4 ; COMDAT (pick any)
.text$mn:0000B8B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B8B4
.text$mn:0000B8B4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B8B4
.text$mn:0000B8B4 ; Attributes: bp-based frame
.text$mn:0000B8B4
.text$mn:0000B8B4 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:0000B8B4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:0000B8B4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:0000B8B4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:0000B8B4
.text$mn:0000B8B4 var_8           = dword ptr -8
.text$mn:0000B8B4 var_4           = dword ptr -4
.text$mn:0000B8B4
.text$mn:0000B8B4                 push    ebp
.text$mn:0000B8B5                 mov     ebp, esp
.text$mn:0000B8B7                 sub     esp, 8
.text$mn:0000B8BA                 mov     [ebp+var_4], ecx
.text$mn:0000B8BD                 mov     eax, [ebp+var_4]
.text$mn:0000B8C0                 cmp     dword ptr [eax+18h], 10h
.text$mn:0000B8C4                 jb      short loc_B8DA
.text$mn:0000B8C6                 mov     ecx, [ebp+var_4]
.text$mn:0000B8C9                 mov     edx, [ecx+4]
.text$mn:0000B8CC                 push    edx
.text$mn:0000B8CD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000B8D2                 add     esp, 4
.text$mn:0000B8D5                 mov     [ebp+var_8], eax
.text$mn:0000B8D8                 jmp     short loc_B8E3
.text$mn:0000B8DA ; ---------------------------------------------------------------------------
.text$mn:0000B8DA
.text$mn:0000B8DA loc_B8DA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000B8DA                 mov     eax, [ebp+var_4]
.text$mn:0000B8DD                 add     eax, 4
.text$mn:0000B8E0                 mov     [ebp+var_8], eax
.text$mn:0000B8E3
.text$mn:0000B8E3 loc_B8E3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000B8E3                 mov     eax, [ebp+var_8]
.text$mn:0000B8E6                 mov     esp, ebp
.text$mn:0000B8E8                 pop     ebp
.text$mn:0000B8E9                 retn
.text$mn:0000B8E9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:0000B8E9
.text$mn:0000B8E9 ; ---------------------------------------------------------------------------
.text$mn:0000B8EA                 align 4
.text$mn:0000B8EA _text$mn        ends
.text$mn:0000B8EA
.text$mn:0000B8EC ; ===========================================================================
.text$mn:0000B8EC
.text$mn:0000B8EC ; Segment type: Pure code
.text$mn:0000B8EC ; Segment permissions: Read/Execute
.text$mn:0000B8EC _text$mn        segment para public 'CODE' use32
.text$mn:0000B8EC                 assume cs:_text$mn
.text$mn:0000B8EC                 ;org 0B8ECh
.text$mn:0000B8EC ; COMDAT (pick any)
.text$mn:0000B8EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B8EC
.text$mn:0000B8EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B8EC
.text$mn:0000B8EC ; Attributes: bp-based frame
.text$mn:0000B8EC
.text$mn:0000B8EC ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B8EC                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:0000B8EC ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:0000B8EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+2Cp
.text$mn:0000B8EC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p ...
.text$mn:0000B8EC
.text$mn:0000B8EC var_8           = dword ptr -8
.text$mn:0000B8EC var_4           = dword ptr -4
.text$mn:0000B8EC
.text$mn:0000B8EC                 push    ebp
.text$mn:0000B8ED                 mov     ebp, esp
.text$mn:0000B8EF                 sub     esp, 8
.text$mn:0000B8F2                 mov     [ebp+var_4], ecx
.text$mn:0000B8F5                 mov     eax, [ebp+var_4]
.text$mn:0000B8F8                 cmp     dword ptr [eax+18h], 8
.text$mn:0000B8FC                 jb      short loc_B912
.text$mn:0000B8FE                 mov     ecx, [ebp+var_4]
.text$mn:0000B901                 mov     edx, [ecx+4]
.text$mn:0000B904                 push    edx
.text$mn:0000B905                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000B90A                 add     esp, 4
.text$mn:0000B90D                 mov     [ebp+var_8], eax
.text$mn:0000B910                 jmp     short loc_B91B
.text$mn:0000B912 ; ---------------------------------------------------------------------------
.text$mn:0000B912
.text$mn:0000B912 loc_B912:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000B912                 mov     eax, [ebp+var_4]
.text$mn:0000B915                 add     eax, 4
.text$mn:0000B918                 mov     [ebp+var_8], eax
.text$mn:0000B91B
.text$mn:0000B91B loc_B91B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000B91B                 mov     eax, [ebp+var_8]
.text$mn:0000B91E                 mov     esp, ebp
.text$mn:0000B920                 pop     ebp
.text$mn:0000B921                 retn
.text$mn:0000B921 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:0000B921
.text$mn:0000B921 ; ---------------------------------------------------------------------------
.text$mn:0000B922                 align 4
.text$mn:0000B922 _text$mn        ends
.text$mn:0000B922
.text$mn:0000B924 ; ===========================================================================
.text$mn:0000B924
.text$mn:0000B924 ; Segment type: Pure code
.text$mn:0000B924 ; Segment permissions: Read/Execute
.text$mn:0000B924 _text$mn        segment para public 'CODE' use32
.text$mn:0000B924                 assume cs:_text$mn
.text$mn:0000B924                 ;org 0B924h
.text$mn:0000B924 ; COMDAT (pick any)
.text$mn:0000B924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B924
.text$mn:0000B924 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B924
.text$mn:0000B924 ; Attributes: bp-based frame
.text$mn:0000B924
.text$mn:0000B924 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:0000B924                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:0000B924 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:0000B924                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+2Cp
.text$mn:0000B924                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p ...
.text$mn:0000B924
.text$mn:0000B924 var_8           = dword ptr -8
.text$mn:0000B924 var_4           = dword ptr -4
.text$mn:0000B924
.text$mn:0000B924                 push    ebp
.text$mn:0000B925                 mov     ebp, esp
.text$mn:0000B927                 sub     esp, 8
.text$mn:0000B92A                 mov     [ebp+var_4], ecx
.text$mn:0000B92D                 mov     eax, [ebp+var_4]
.text$mn:0000B930                 cmp     dword ptr [eax+18h], 8
.text$mn:0000B934                 jb      short loc_B94A
.text$mn:0000B936                 mov     ecx, [ebp+var_4]
.text$mn:0000B939                 mov     edx, [ecx+4]
.text$mn:0000B93C                 push    edx
.text$mn:0000B93D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000B942                 add     esp, 4
.text$mn:0000B945                 mov     [ebp+var_8], eax
.text$mn:0000B948                 jmp     short loc_B953
.text$mn:0000B94A ; ---------------------------------------------------------------------------
.text$mn:0000B94A
.text$mn:0000B94A loc_B94A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000B94A                 mov     eax, [ebp+var_4]
.text$mn:0000B94D                 add     eax, 4
.text$mn:0000B950                 mov     [ebp+var_8], eax
.text$mn:0000B953
.text$mn:0000B953 loc_B953:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000B953                 mov     eax, [ebp+var_8]
.text$mn:0000B956                 mov     esp, ebp
.text$mn:0000B958                 pop     ebp
.text$mn:0000B959                 retn
.text$mn:0000B959 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:0000B959
.text$mn:0000B959 ; ---------------------------------------------------------------------------
.text$mn:0000B95A                 align 4
.text$mn:0000B95A _text$mn        ends
.text$mn:0000B95A
.text$mn:0000B95C ; ===========================================================================
.text$mn:0000B95C
.text$mn:0000B95C ; Segment type: Pure code
.text$mn:0000B95C ; Segment permissions: Read/Execute
.text$mn:0000B95C _text$mn        segment para public 'CODE' use32
.text$mn:0000B95C                 assume cs:_text$mn
.text$mn:0000B95C                 ;org 0B95Ch
.text$mn:0000B95C ; COMDAT (pick any)
.text$mn:0000B95C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B95C
.text$mn:0000B95C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B95C
.text$mn:0000B95C ; Attributes: bp-based frame
.text$mn:0000B95C
.text$mn:0000B95C ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:0000B95C                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000B95C ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:0000B95C                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:0000B95C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:0000B95C
.text$mn:0000B95C var_18          = byte ptr -18h
.text$mn:0000B95C var_14          = dword ptr -14h
.text$mn:0000B95C var_10          = dword ptr -10h
.text$mn:0000B95C var_C           = dword ptr -0Ch
.text$mn:0000B95C var_4           = dword ptr -4
.text$mn:0000B95C
.text$mn:0000B95C                 push    ebp
.text$mn:0000B95D                 mov     ebp, esp
.text$mn:0000B95F                 push    0FFFFFFFFh
.text$mn:0000B961                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000B966                 mov     eax, large fs:0
.text$mn:0000B96C                 push    eax
.text$mn:0000B96D                 sub     esp, 0Ch
.text$mn:0000B970                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B975                 xor     eax, ebp
.text$mn:0000B977                 push    eax
.text$mn:0000B978                 lea     eax, [ebp+var_C]
.text$mn:0000B97B                 mov     large fs:0, eax
.text$mn:0000B981                 mov     [ebp+var_14], ecx
.text$mn:0000B984                 mov     eax, [ebp+var_14]
.text$mn:0000B987                 cmp     dword ptr [eax], 0
.text$mn:0000B98A                 jz      short loc_B9E7
.text$mn:0000B98C                 push    3               ; int
.text$mn:0000B98E                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B991                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B996                 mov     [ebp+var_4], 0
.text$mn:0000B99D                 mov     ecx, [ebp+var_14]
.text$mn:0000B9A0                 mov     edx, [ecx]
.text$mn:0000B9A2                 add     edx, 4
.text$mn:0000B9A5                 mov     [ebp+var_10], edx
.text$mn:0000B9A8                 jmp     short loc_B9B7
.text$mn:0000B9AA ; ---------------------------------------------------------------------------
.text$mn:0000B9AA
.text$mn:0000B9AA loc_B9AA:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:0000B9AA                 mov     eax, [ebp+var_10]
.text$mn:0000B9AD                 mov     ecx, [eax]
.text$mn:0000B9AF                 mov     edx, [ebp+var_10]
.text$mn:0000B9B2                 mov     eax, [ecx+4]
.text$mn:0000B9B5                 mov     [edx], eax
.text$mn:0000B9B7
.text$mn:0000B9B7 loc_B9B7:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:0000B9B7                 mov     ecx, [ebp+var_10]
.text$mn:0000B9BA                 cmp     dword ptr [ecx], 0
.text$mn:0000B9BD                 jz      short loc_B9CC
.text$mn:0000B9BF                 mov     edx, [ebp+var_10]
.text$mn:0000B9C2                 mov     eax, [edx]
.text$mn:0000B9C4                 mov     dword ptr [eax], 0
.text$mn:0000B9CA                 jmp     short loc_B9AA
.text$mn:0000B9CC ; ---------------------------------------------------------------------------
.text$mn:0000B9CC
.text$mn:0000B9CC loc_B9CC:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:0000B9CC                 mov     ecx, [ebp+var_14]
.text$mn:0000B9CF                 mov     edx, [ecx]
.text$mn:0000B9D1                 mov     dword ptr [edx+4], 0
.text$mn:0000B9D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B9DF                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B9E2                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B9E7
.text$mn:0000B9E7 loc_B9E7:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:0000B9E7                 mov     ecx, [ebp+var_C]
.text$mn:0000B9EA                 mov     large fs:0, ecx
.text$mn:0000B9F1                 pop     ecx
.text$mn:0000B9F2                 mov     esp, ebp
.text$mn:0000B9F4                 pop     ebp
.text$mn:0000B9F5                 retn
.text$mn:0000B9F5 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:0000B9F5
.text$mn:0000B9F5 ; ---------------------------------------------------------------------------
.text$mn:0000B9F6                 align 4
.text$mn:0000B9F6 _text$mn        ends
.text$mn:0000B9F6
.text$x:0000B9F8 ; ===========================================================================
.text$x:0000B9F8
.text$x:0000B9F8 ; Segment type: Pure code
.text$x:0000B9F8 ; Segment permissions: Read/Execute
.text$x:0000B9F8 _text$x         segment para public 'CODE' use32
.text$x:0000B9F8                 assume cs:_text$x
.text$x:0000B9F8                 ;org 0B9F8h
.text$x:0000B9F8 ; COMDAT (pick associative to section at B95C)
.text$x:0000B9F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B9F8
.text$x:0000B9F8 ; =============== S U B R O U T I N E =======================================
.text$x:0000B9F8
.text$x:0000B9F8
.text$x:0000B9F8 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:0000B9F8                                         ; DATA XREF: .xdata$x:0000F4C8o
.text$x:0000B9F8                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B9FB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B9FB __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:0000B9FB
.text$x:0000BA00
.text$x:0000BA00 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA00
.text$x:0000BA00
.text$x:0000BA00 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:0000BA00                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:0000BA00
.text$x:0000BA00 arg_4           = dword ptr  8
.text$x:0000BA00
.text$x:0000BA00                 mov     edx, [esp+arg_4]
.text$x:0000BA04                 lea     eax, [edx+0Ch]
.text$x:0000BA07                 mov     ecx, [edx-10h]
.text$x:0000BA0A                 xor     ecx, eax
.text$x:0000BA0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BA11                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:0000BA16                 jmp     ___CxxFrameHandler3
.text$x:0000BA16 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:0000BA16
.text$x:0000BA16 ; ---------------------------------------------------------------------------
.text$x:0000BA1B                 align 4
.text$x:0000BA1B _text$x         ends
.text$x:0000BA1B
.text$mn:0000BA1C ; ===========================================================================
.text$mn:0000BA1C
.text$mn:0000BA1C ; Segment type: Pure code
.text$mn:0000BA1C ; Segment permissions: Read/Execute
.text$mn:0000BA1C _text$mn        segment para public 'CODE' use32
.text$mn:0000BA1C                 assume cs:_text$mn
.text$mn:0000BA1C                 ;org 0BA1Ch
.text$mn:0000BA1C ; COMDAT (pick any)
.text$mn:0000BA1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA1C
.text$mn:0000BA1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA1C
.text$mn:0000BA1C ; Attributes: bp-based frame
.text$mn:0000BA1C
.text$mn:0000BA1C ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:0000BA1C                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:0000BA1C ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:0000BA1C                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:0000BA1C                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:0000BA1C
.text$mn:0000BA1C var_8           = dword ptr -8
.text$mn:0000BA1C var_4           = dword ptr -4
.text$mn:0000BA1C
.text$mn:0000BA1C                 push    ebp
.text$mn:0000BA1D                 mov     ebp, esp
.text$mn:0000BA1F                 sub     esp, 8
.text$mn:0000BA22                 mov     [ebp+var_8], ecx
.text$mn:0000BA25                 mov     eax, [ebp+var_8]
.text$mn:0000BA28                 cmp     dword ptr [eax], 0
.text$mn:0000BA2B                 jz      short loc_BA8A
.text$mn:0000BA2D                 mov     ecx, [ebp+var_8]
.text$mn:0000BA30                 mov     edx, [ecx]
.text$mn:0000BA32                 add     edx, 4
.text$mn:0000BA35                 mov     [ebp+var_4], edx
.text$mn:0000BA38
.text$mn:0000BA38 loc_BA38:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:0000BA38                 mov     eax, [ebp+var_4]
.text$mn:0000BA3B                 cmp     dword ptr [eax], 0
.text$mn:0000BA3E                 jz      short loc_BA57
.text$mn:0000BA40                 mov     ecx, [ebp+var_4]
.text$mn:0000BA43                 mov     edx, [ecx]
.text$mn:0000BA45                 cmp     edx, [ebp+var_8]
.text$mn:0000BA48                 jz      short loc_BA57
.text$mn:0000BA4A                 mov     eax, [ebp+var_4]
.text$mn:0000BA4D                 mov     ecx, [eax]
.text$mn:0000BA4F                 add     ecx, 4
.text$mn:0000BA52                 mov     [ebp+var_4], ecx
.text$mn:0000BA55                 jmp     short loc_BA38
.text$mn:0000BA57 ; ---------------------------------------------------------------------------
.text$mn:0000BA57
.text$mn:0000BA57 loc_BA57:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:0000BA57                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:0000BA57                 mov     edx, [ebp+var_4]
.text$mn:0000BA5A                 cmp     dword ptr [edx], 0
.text$mn:0000BA5D                 jnz     short loc_BA76
.text$mn:0000BA5F                 push    0C9h ; '+'      ; unsigned int
.text$mn:0000BA64                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000BA69                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:0000BA6E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000BA73                 add     esp, 0Ch
.text$mn:0000BA76
.text$mn:0000BA76 loc_BA76:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:0000BA76                 mov     eax, [ebp+var_4]
.text$mn:0000BA79                 mov     ecx, [ebp+var_8]
.text$mn:0000BA7C                 mov     edx, [ecx+4]
.text$mn:0000BA7F                 mov     [eax], edx
.text$mn:0000BA81                 mov     eax, [ebp+var_8]
.text$mn:0000BA84                 mov     dword ptr [eax], 0
.text$mn:0000BA8A
.text$mn:0000BA8A loc_BA8A:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:0000BA8A                 mov     esp, ebp
.text$mn:0000BA8C                 pop     ebp
.text$mn:0000BA8D                 retn
.text$mn:0000BA8D ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:0000BA8D
.text$mn:0000BA8D ; ---------------------------------------------------------------------------
.text$mn:0000BA8E                 align 10h
.text$mn:0000BA8E _text$mn        ends
.text$mn:0000BA8E
.text$mn:0000BA90 ; ===========================================================================
.text$mn:0000BA90
.text$mn:0000BA90 ; Segment type: Pure code
.text$mn:0000BA90 ; Segment permissions: Read/Execute
.text$mn:0000BA90 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA90                 assume cs:_text$mn
.text$mn:0000BA90                 ;org 0BA90h
.text$mn:0000BA90 ; COMDAT (pick any)
.text$mn:0000BA90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA90
.text$mn:0000BA90 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA90
.text$mn:0000BA90 ; Attributes: bp-based frame
.text$mn:0000BA90
.text$mn:0000BA90 ; protected: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Orphan_range(struct MatchedCharInserted *, struct MatchedCharInserted *)const
.text$mn:0000BA90                 public ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z
.text$mn:0000BA90 ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z proc near
.text$mn:0000BA90                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+B1p
.text$mn:0000BA90                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+66p ...
.text$mn:0000BA90
.text$mn:0000BA90 var_18          = byte ptr -18h
.text$mn:0000BA90 var_14          = dword ptr -14h
.text$mn:0000BA90 var_10          = dword ptr -10h
.text$mn:0000BA90 var_C           = dword ptr -0Ch
.text$mn:0000BA90 var_4           = dword ptr -4
.text$mn:0000BA90 arg_0           = dword ptr  8
.text$mn:0000BA90 arg_4           = dword ptr  0Ch
.text$mn:0000BA90
.text$mn:0000BA90                 push    ebp
.text$mn:0000BA91                 mov     ebp, esp
.text$mn:0000BA93                 push    0FFFFFFFFh
.text$mn:0000BA95                 push    offset __ehhandler$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z
.text$mn:0000BA9A                 mov     eax, large fs:0
.text$mn:0000BAA0                 push    eax
.text$mn:0000BAA1                 sub     esp, 0Ch
.text$mn:0000BAA4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BAA9                 xor     eax, ebp
.text$mn:0000BAAB                 push    eax
.text$mn:0000BAAC                 lea     eax, [ebp+var_C]
.text$mn:0000BAAF                 mov     large fs:0, eax
.text$mn:0000BAB5                 mov     [ebp+var_14], ecx
.text$mn:0000BAB8                 push    3               ; int
.text$mn:0000BABA                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000BABD                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000BAC2                 mov     [ebp+var_4], 0
.text$mn:0000BAC9                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000BACC                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000BAD1                 mov     [ebp+var_10], eax
.text$mn:0000BAD4                 cmp     [ebp+var_10], 0
.text$mn:0000BAD8                 jz      short loc_BB28
.text$mn:0000BADA
.text$mn:0000BADA loc_BADA:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *):loc_BB26j
.text$mn:0000BADA                 mov     eax, [ebp+var_10]
.text$mn:0000BADD                 cmp     dword ptr [eax], 0
.text$mn:0000BAE0                 jz      short loc_BB28
.text$mn:0000BAE2                 mov     ecx, [ebp+var_10]
.text$mn:0000BAE5                 mov     edx, [ecx]
.text$mn:0000BAE7                 mov     eax, [edx+8]
.text$mn:0000BAEA                 cmp     eax, [ebp+arg_0]
.text$mn:0000BAED                 jb      short loc_BAFC
.text$mn:0000BAEF                 mov     ecx, [ebp+var_10]
.text$mn:0000BAF2                 mov     edx, [ecx]
.text$mn:0000BAF4                 mov     eax, [ebp+arg_4]
.text$mn:0000BAF7                 cmp     eax, [edx+8]
.text$mn:0000BAFA                 jnb     short loc_BB0B
.text$mn:0000BAFC
.text$mn:0000BAFC loc_BAFC:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+5Dj
.text$mn:0000BAFC                 mov     ecx, [ebp+var_10]
.text$mn:0000BAFF                 mov     ecx, [ecx]      ; this
.text$mn:0000BB01                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000BB06                 mov     [ebp+var_10], eax
.text$mn:0000BB09                 jmp     short loc_BB26
.text$mn:0000BB0B ; ---------------------------------------------------------------------------
.text$mn:0000BB0B
.text$mn:0000BB0B loc_BB0B:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+6Aj
.text$mn:0000BB0B                 mov     edx, [ebp+var_10]
.text$mn:0000BB0E                 mov     ecx, [edx]      ; this
.text$mn:0000BB10                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000BB15                 mov     eax, [ebp+var_10]
.text$mn:0000BB18                 mov     ecx, [eax]      ; this
.text$mn:0000BB1A                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000BB1F                 mov     ecx, [ebp+var_10]
.text$mn:0000BB22                 mov     edx, [eax]
.text$mn:0000BB24                 mov     [ecx], edx
.text$mn:0000BB26
.text$mn:0000BB26 loc_BB26:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+79j
.text$mn:0000BB26                 jmp     short loc_BADA
.text$mn:0000BB28 ; ---------------------------------------------------------------------------
.text$mn:0000BB28
.text$mn:0000BB28 loc_BB28:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+48j
.text$mn:0000BB28                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+50j
.text$mn:0000BB28                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BB2F                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000BB32                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000BB37                 mov     ecx, [ebp+var_C]
.text$mn:0000BB3A                 mov     large fs:0, ecx
.text$mn:0000BB41                 pop     ecx
.text$mn:0000BB42                 mov     esp, ebp
.text$mn:0000BB44                 pop     ebp
.text$mn:0000BB45                 retn    8
.text$mn:0000BB45 ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z endp
.text$mn:0000BB45
.text$mn:0000BB45 _text$mn        ends
.text$mn:0000BB45
.text$x:0000BB48 ; ===========================================================================
.text$x:0000BB48
.text$x:0000BB48 ; Segment type: Pure code
.text$x:0000BB48 ; Segment permissions: Read/Execute
.text$x:0000BB48 _text$x         segment para public 'CODE' use32
.text$x:0000BB48                 assume cs:_text$x
.text$x:0000BB48                 ;org 0BB48h
.text$x:0000BB48 ; COMDAT (pick associative to section at BA90)
.text$x:0000BB48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BB48
.text$x:0000BB48 ; =============== S U B R O U T I N E =======================================
.text$x:0000BB48
.text$x:0000BB48
.text$x:0000BB48 __unwindfunclet$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z$0 proc near
.text$x:0000BB48                                         ; DATA XREF: .xdata$x:000106ACo
.text$x:0000BB48                 lea     ecx, [ebp-18h]  ; this
.text$x:0000BB4B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000BB4B __unwindfunclet$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z$0 endp
.text$x:0000BB4B
.text$x:0000BB50
.text$x:0000BB50 ; =============== S U B R O U T I N E =======================================
.text$x:0000BB50
.text$x:0000BB50
.text$x:0000BB50 __ehhandler$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z proc near
.text$x:0000BB50                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)+5o
.text$x:0000BB50
.text$x:0000BB50 arg_4           = dword ptr  8
.text$x:0000BB50
.text$x:0000BB50                 mov     edx, [esp+arg_4]
.text$x:0000BB54                 lea     eax, [edx+0Ch]
.text$x:0000BB57                 mov     ecx, [edx-10h]
.text$x:0000BB5A                 xor     ecx, eax
.text$x:0000BB5C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BB61                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z
.text$x:0000BB66                 jmp     ___CxxFrameHandler3
.text$x:0000BB66 __ehhandler$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z endp
.text$x:0000BB66
.text$x:0000BB66 ; ---------------------------------------------------------------------------
.text$x:0000BB6B                 align 4
.text$x:0000BB6B _text$x         ends
.text$x:0000BB6B
.text$mn:0000BB6C ; ===========================================================================
.text$mn:0000BB6C
.text$mn:0000BB6C ; Segment type: Pure code
.text$mn:0000BB6C ; Segment permissions: Read/Execute
.text$mn:0000BB6C _text$mn        segment para public 'CODE' use32
.text$mn:0000BB6C                 assume cs:_text$mn
.text$mn:0000BB6C                 ;org 0BB6Ch
.text$mn:0000BB6C ; COMDAT (pick any)
.text$mn:0000BB6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BB6C
.text$mn:0000BB6C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB6C
.text$mn:0000BB6C ; Attributes: bp-based frame
.text$mn:0000BB6C
.text$mn:0000BB6C ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:0000BB6C                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000BB6C ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:0000BB6C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+6Fp
.text$mn:0000BB6C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+DCp ...
.text$mn:0000BB6C
.text$mn:0000BB6C var_18          = byte ptr -18h
.text$mn:0000BB6C var_14          = dword ptr -14h
.text$mn:0000BB6C var_10          = dword ptr -10h
.text$mn:0000BB6C var_C           = dword ptr -0Ch
.text$mn:0000BB6C var_4           = dword ptr -4
.text$mn:0000BB6C arg_0           = dword ptr  8
.text$mn:0000BB6C arg_4           = dword ptr  0Ch
.text$mn:0000BB6C
.text$mn:0000BB6C                 push    ebp
.text$mn:0000BB6D                 mov     ebp, esp
.text$mn:0000BB6F                 push    0FFFFFFFFh
.text$mn:0000BB71                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000BB76                 mov     eax, large fs:0
.text$mn:0000BB7C                 push    eax
.text$mn:0000BB7D                 sub     esp, 0Ch
.text$mn:0000BB80                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BB85                 xor     eax, ebp
.text$mn:0000BB87                 push    eax
.text$mn:0000BB88                 lea     eax, [ebp+var_C]
.text$mn:0000BB8B                 mov     large fs:0, eax
.text$mn:0000BB91                 mov     [ebp+var_14], ecx
.text$mn:0000BB94                 push    3               ; int
.text$mn:0000BB96                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000BB99                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000BB9E                 mov     [ebp+var_4], 0
.text$mn:0000BBA5                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000BBA8                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000BBAD                 mov     [ebp+var_10], eax
.text$mn:0000BBB0                 cmp     [ebp+var_10], 0
.text$mn:0000BBB4                 jz      short loc_BC04
.text$mn:0000BBB6
.text$mn:0000BBB6 loc_BBB6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_BC02j
.text$mn:0000BBB6                 mov     eax, [ebp+var_10]
.text$mn:0000BBB9                 cmp     dword ptr [eax], 0
.text$mn:0000BBBC                 jz      short loc_BC04
.text$mn:0000BBBE                 mov     ecx, [ebp+var_10]
.text$mn:0000BBC1                 mov     edx, [ecx]
.text$mn:0000BBC3                 mov     eax, [edx+8]
.text$mn:0000BBC6                 cmp     eax, [ebp+arg_0]
.text$mn:0000BBC9                 jb      short loc_BBD8
.text$mn:0000BBCB                 mov     ecx, [ebp+var_10]
.text$mn:0000BBCE                 mov     edx, [ecx]
.text$mn:0000BBD0                 mov     eax, [ebp+arg_4]
.text$mn:0000BBD3                 cmp     eax, [edx+8]
.text$mn:0000BBD6                 jnb     short loc_BBE7
.text$mn:0000BBD8
.text$mn:0000BBD8 loc_BBD8:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:0000BBD8                 mov     ecx, [ebp+var_10]
.text$mn:0000BBDB                 mov     ecx, [ecx]      ; this
.text$mn:0000BBDD                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000BBE2                 mov     [ebp+var_10], eax
.text$mn:0000BBE5                 jmp     short loc_BC02
.text$mn:0000BBE7 ; ---------------------------------------------------------------------------
.text$mn:0000BBE7
.text$mn:0000BBE7 loc_BBE7:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:0000BBE7                 mov     edx, [ebp+var_10]
.text$mn:0000BBEA                 mov     ecx, [edx]      ; this
.text$mn:0000BBEC                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000BBF1                 mov     eax, [ebp+var_10]
.text$mn:0000BBF4                 mov     ecx, [eax]      ; this
.text$mn:0000BBF6                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000BBFB                 mov     ecx, [ebp+var_10]
.text$mn:0000BBFE                 mov     edx, [eax]
.text$mn:0000BC00                 mov     [ecx], edx
.text$mn:0000BC02
.text$mn:0000BC02 loc_BC02:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:0000BC02                 jmp     short loc_BBB6
.text$mn:0000BC04 ; ---------------------------------------------------------------------------
.text$mn:0000BC04
.text$mn:0000BC04 loc_BC04:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:0000BC04                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:0000BC04                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BC0B                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000BC0E                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000BC13                 mov     ecx, [ebp+var_C]
.text$mn:0000BC16                 mov     large fs:0, ecx
.text$mn:0000BC1D                 pop     ecx
.text$mn:0000BC1E                 mov     esp, ebp
.text$mn:0000BC20                 pop     ebp
.text$mn:0000BC21                 retn    8
.text$mn:0000BC21 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:0000BC21
.text$mn:0000BC21 _text$mn        ends
.text$mn:0000BC21
.text$x:0000BC24 ; ===========================================================================
.text$x:0000BC24
.text$x:0000BC24 ; Segment type: Pure code
.text$x:0000BC24 ; Segment permissions: Read/Execute
.text$x:0000BC24 _text$x         segment para public 'CODE' use32
.text$x:0000BC24                 assume cs:_text$x
.text$x:0000BC24                 ;org 0BC24h
.text$x:0000BC24 ; COMDAT (pick associative to section at BB6C)
.text$x:0000BC24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BC24
.text$x:0000BC24 ; =============== S U B R O U T I N E =======================================
.text$x:0000BC24
.text$x:0000BC24
.text$x:0000BC24 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:0000BC24                                         ; DATA XREF: .xdata$x:00010178o
.text$x:0000BC24                 lea     ecx, [ebp-18h]  ; this
.text$x:0000BC27                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000BC27 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:0000BC27
.text$x:0000BC2C
.text$x:0000BC2C ; =============== S U B R O U T I N E =======================================
.text$x:0000BC2C
.text$x:0000BC2C
.text$x:0000BC2C __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:0000BC2C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:0000BC2C
.text$x:0000BC2C arg_4           = dword ptr  8
.text$x:0000BC2C
.text$x:0000BC2C                 mov     edx, [esp+arg_4]
.text$x:0000BC30                 lea     eax, [edx+0Ch]
.text$x:0000BC33                 mov     ecx, [edx-10h]
.text$x:0000BC36                 xor     ecx, eax
.text$x:0000BC38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BC3D                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:0000BC42                 jmp     ___CxxFrameHandler3
.text$x:0000BC42 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:0000BC42
.text$x:0000BC42 ; ---------------------------------------------------------------------------
.text$x:0000BC47                 align 4
.text$x:0000BC47 _text$x         ends
.text$x:0000BC47
.text$mn:0000BC48 ; ===========================================================================
.text$mn:0000BC48
.text$mn:0000BC48 ; Segment type: Pure code
.text$mn:0000BC48 ; Segment permissions: Read/Execute
.text$mn:0000BC48 _text$mn        segment para public 'CODE' use32
.text$mn:0000BC48                 assume cs:_text$mn
.text$mn:0000BC48                 ;org 0BC48h
.text$mn:0000BC48 ; COMDAT (pick any)
.text$mn:0000BC48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BC48
.text$mn:0000BC48 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BC48
.text$mn:0000BC48 ; Attributes: bp-based frame
.text$mn:0000BC48
.text$mn:0000BC48 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000BC48                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:0000BC48 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:0000BC48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:0000BC48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:0000BC48
.text$mn:0000BC48 var_14          = dword ptr -14h
.text$mn:0000BC48 var_10          = dword ptr -10h
.text$mn:0000BC48 var_C           = dword ptr -0Ch
.text$mn:0000BC48 var_4           = dword ptr -4
.text$mn:0000BC48 arg_0           = byte ptr  8
.text$mn:0000BC48 arg_8           = dword ptr  10h
.text$mn:0000BC48 arg_C           = byte ptr  14h
.text$mn:0000BC48
.text$mn:0000BC48                 push    ebp
.text$mn:0000BC49                 mov     ebp, esp
.text$mn:0000BC4B                 push    0FFFFFFFFh
.text$mn:0000BC4D                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:0000BC52                 mov     eax, large fs:0
.text$mn:0000BC58                 push    eax
.text$mn:0000BC59                 sub     esp, 8
.text$mn:0000BC5C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BC61                 xor     eax, ebp
.text$mn:0000BC63                 push    eax
.text$mn:0000BC64                 lea     eax, [ebp+var_C]
.text$mn:0000BC67                 mov     large fs:0, eax
.text$mn:0000BC6D                 mov     [ebp+var_4], 1
.text$mn:0000BC74                 cmp     [ebp+arg_8], 0
.text$mn:0000BC78                 jnz     short loc_BC83
.text$mn:0000BC7A                 mov     [ebp+var_10], 0
.text$mn:0000BC81                 jmp     short loc_BC92
.text$mn:0000BC83 ; ---------------------------------------------------------------------------
.text$mn:0000BC83
.text$mn:0000BC83 loc_BC83:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:0000BC83                 lea     eax, [ebp+arg_C]
.text$mn:0000BC86                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000BC87                 lea     ecx, [ebp+arg_0]
.text$mn:0000BC8A                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000BC8F                 mov     [ebp+var_10], eax
.text$mn:0000BC92
.text$mn:0000BC92 loc_BC92:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:0000BC92                 mov     ecx, [ebp+var_10]
.text$mn:0000BC95                 mov     [ebp+var_14], ecx
.text$mn:0000BC98                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000BC9C                 lea     ecx, [ebp+arg_0]
.text$mn:0000BC9F                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000BCA4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BCAB                 lea     ecx, [ebp+arg_C]
.text$mn:0000BCAE                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000BCB3                 mov     eax, [ebp+var_14]
.text$mn:0000BCB6                 mov     ecx, [ebp+var_C]
.text$mn:0000BCB9                 mov     large fs:0, ecx
.text$mn:0000BCC0                 pop     ecx
.text$mn:0000BCC1                 mov     esp, ebp
.text$mn:0000BCC3                 pop     ebp
.text$mn:0000BCC4                 retn
.text$mn:0000BCC4 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:0000BCC4
.text$mn:0000BCC4 ; ---------------------------------------------------------------------------
.text$mn:0000BCC5                 align 4
.text$mn:0000BCC5 _text$mn        ends
.text$mn:0000BCC5
.text$x:0000BCC8 ; ===========================================================================
.text$x:0000BCC8
.text$x:0000BCC8 ; Segment type: Pure code
.text$x:0000BCC8 ; Segment permissions: Read/Execute
.text$x:0000BCC8 _text$x         segment para public 'CODE' use32
.text$x:0000BCC8                 assume cs:_text$x
.text$x:0000BCC8                 ;org 0BCC8h
.text$x:0000BCC8 ; COMDAT (pick associative to section at BC48)
.text$x:0000BCC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BCC8
.text$x:0000BCC8 ; =============== S U B R O U T I N E =======================================
.text$x:0000BCC8
.text$x:0000BCC8
.text$x:0000BCC8 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:0000BCC8                                         ; DATA XREF: .xdata$x:0000FF60o
.text$x:0000BCC8                 lea     ecx, [ebp+14h]
.text$x:0000BCCB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BCCB __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:0000BCCB
.text$x:0000BCD0
.text$x:0000BCD0 ; =============== S U B R O U T I N E =======================================
.text$x:0000BCD0
.text$x:0000BCD0
.text$x:0000BCD0 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:0000BCD0                                         ; DATA XREF: .xdata$x:0000FF68o
.text$x:0000BCD0                 lea     ecx, [ebp+8]
.text$x:0000BCD3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BCD3 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:0000BCD3
.text$x:0000BCD8
.text$x:0000BCD8 ; =============== S U B R O U T I N E =======================================
.text$x:0000BCD8
.text$x:0000BCD8
.text$x:0000BCD8 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:0000BCD8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000BCD8
.text$x:0000BCD8 arg_4           = dword ptr  8
.text$x:0000BCD8
.text$x:0000BCD8                 mov     edx, [esp+arg_4]
.text$x:0000BCDC                 lea     eax, [edx+0Ch]
.text$x:0000BCDF                 mov     ecx, [edx-0Ch]
.text$x:0000BCE2                 xor     ecx, eax
.text$x:0000BCE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BCE9                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:0000BCEE                 jmp     ___CxxFrameHandler3
.text$x:0000BCEE __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:0000BCEE
.text$x:0000BCEE ; ---------------------------------------------------------------------------
.text$x:0000BCF3                 align 4
.text$x:0000BCF3 _text$x         ends
.text$x:0000BCF3
.text$mn:0000BCF4 ; ===========================================================================
.text$mn:0000BCF4
.text$mn:0000BCF4 ; Segment type: Pure code
.text$mn:0000BCF4 ; Segment permissions: Read/Execute
.text$mn:0000BCF4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BCF4                 assume cs:_text$mn
.text$mn:0000BCF4                 ;org 0BCF4h
.text$mn:0000BCF4 ; COMDAT (pick any)
.text$mn:0000BCF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCF4
.text$mn:0000BCF4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCF4
.text$mn:0000BCF4 ; Attributes: bp-based frame
.text$mn:0000BCF4
.text$mn:0000BCF4 ; protected: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Reallocate(unsigned int)
.text$mn:0000BCF4                 public ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BCF4 ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BCF4                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+4Ep
.text$mn:0000BCF4
.text$mn:0000BCF4 var_20          = dword ptr -20h
.text$mn:0000BCF4 var_1C          = dword ptr -1Ch
.text$mn:0000BCF4 var_18          = dword ptr -18h
.text$mn:0000BCF4 var_13          = byte ptr -13h
.text$mn:0000BCF4 var_11          = byte ptr -11h
.text$mn:0000BCF4 var_10          = dword ptr -10h
.text$mn:0000BCF4 var_C           = dword ptr -0Ch
.text$mn:0000BCF4 var_4           = dword ptr -4
.text$mn:0000BCF4 arg_0           = dword ptr  8
.text$mn:0000BCF4
.text$mn:0000BCF4 ; FUNCTION CHUNK AT .text$mn:0000BD8A SIZE 00000009 BYTES
.text$mn:0000BCF4 ; FUNCTION CHUNK AT .text$mn:0000BD9A SIZE 00000097 BYTES
.text$mn:0000BCF4
.text$mn:0000BCF4                 push    ebp
.text$mn:0000BCF5                 mov     ebp, esp
.text$mn:0000BCF7                 push    0FFFFFFFFh
.text$mn:0000BCF9                 push    offset __ehhandler$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BCFE                 mov     eax, large fs:0
.text$mn:0000BD04                 push    eax
.text$mn:0000BD05                 push    ecx
.text$mn:0000BD06                 sub     esp, 10h
.text$mn:0000BD09                 push    ebx
.text$mn:0000BD0A                 push    esi
.text$mn:0000BD0B                 push    edi
.text$mn:0000BD0C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BD11                 xor     eax, ebp
.text$mn:0000BD13                 push    eax
.text$mn:0000BD14                 lea     eax, [ebp+var_C]
.text$mn:0000BD17                 mov     large fs:0, eax
.text$mn:0000BD1D                 mov     [ebp+var_10], esp
.text$mn:0000BD20                 mov     [ebp+var_18], ecx
.text$mn:0000BD23                 mov     eax, [ebp+arg_0]
.text$mn:0000BD26                 push    eax
.text$mn:0000BD27                 lea     ecx, [ebp+var_11]
.text$mn:0000BD2A                 push    ecx
.text$mn:0000BD2B                 mov     ecx, [ebp+var_18]
.text$mn:0000BD2E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000BD33                 mov     ecx, eax
.text$mn:0000BD35                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEPAUMatchedCharInserted@@I@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::allocate(uint)
.text$mn:0000BD3A                 mov     [ebp+var_1C], eax
.text$mn:0000BD3D                 mov     [ebp+var_4], 0
.text$mn:0000BD44                 mov     edx, [ebp+var_1C]
.text$mn:0000BD47                 push    edx
.text$mn:0000BD48                 mov     eax, [ebp+var_18]
.text$mn:0000BD4B                 mov     ecx, [eax+8]
.text$mn:0000BD4E                 push    ecx
.text$mn:0000BD4F                 mov     edx, [ebp+var_18]
.text$mn:0000BD52                 mov     eax, [edx+4]
.text$mn:0000BD55                 push    eax
.text$mn:0000BD56                 mov     ecx, [ebp+var_18]
.text$mn:0000BD59                 call    ??$_Umove@PAUMatchedCharInserted@@@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEPAUMatchedCharInserted@@PAU2@00@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Umove<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000BD5E                 jmp     short loc_BD8A
.text$mn:0000BD5E ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BD5E
.text$mn:0000BD60
.text$mn:0000BD60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD60
.text$mn:0000BD60 ; Attributes: noreturn
.text$mn:0000BD60
.text$mn:0000BD60 __catch$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:0000BD60                                         ; DATA XREF: .xdata$x:0001065Co
.text$mn:0000BD60                 mov     ecx, [ebp+8]
.text$mn:0000BD63                 push    ecx             ; int
.text$mn:0000BD64                 mov     edx, [ebp-1Ch]
.text$mn:0000BD67                 push    edx             ; void *
.text$mn:0000BD68                 lea     eax, [ebp-12h]
.text$mn:0000BD6B                 push    eax
.text$mn:0000BD6C                 mov     ecx, [ebp-18h]
.text$mn:0000BD6F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000BD74                 mov     ecx, eax
.text$mn:0000BD76                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@I@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::deallocate(MatchedCharInserted *,uint)
.text$mn:0000BD7B                 push    0
.text$mn:0000BD7D                 push    0
.text$mn:0000BD7F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000BD7F __catch$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:0000BD7F
.text$mn:0000BD84 ; ---------------------------------------------------------------------------
.text$mn:0000BD84                 mov     eax, offset $LN8_2
.text$mn:0000BD89                 retn
.text$mn:0000BD8A ; ---------------------------------------------------------------------------
.text$mn:0000BD8A ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BD8A
.text$mn:0000BD8A loc_BD8A:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+6Aj
.text$mn:0000BD8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BD91                 jmp     short loc_BD9A
.text$mn:0000BD91 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BD93
.text$mn:0000BD93 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD93
.text$mn:0000BD93
.text$mn:0000BD93 $LN8_2          proc near               ; DATA XREF: .text$mn:0000BD84o
.text$mn:0000BD93                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000BD93 $LN8_2          endp ; sp-analysis failed
.text$mn:0000BD93
.text$mn:0000BD9A ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BD9A
.text$mn:0000BD9A loc_BD9A:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+9Dj
.text$mn:0000BD9A                 mov     ecx, [ebp+var_18]
.text$mn:0000BD9D                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:0000BDA2                 mov     [ebp+var_20], eax
.text$mn:0000BDA5                 mov     ecx, [ebp+var_18]
.text$mn:0000BDA8                 cmp     dword ptr [ecx+4], 0
.text$mn:0000BDAC                 jz      short loc_BDEE
.text$mn:0000BDAE                 mov     edx, [ebp+var_18]
.text$mn:0000BDB1                 mov     eax, [edx+8]
.text$mn:0000BDB4                 push    eax
.text$mn:0000BDB5                 mov     ecx, [ebp+var_18]
.text$mn:0000BDB8                 mov     edx, [ecx+4]
.text$mn:0000BDBB                 push    edx
.text$mn:0000BDBC                 mov     ecx, [ebp+var_18]
.text$mn:0000BDBF                 call    ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Destroy(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000BDC4                 mov     eax, [ebp+var_18]
.text$mn:0000BDC7                 mov     ecx, [ebp+var_18]
.text$mn:0000BDCA                 mov     edx, [eax+0Ch]
.text$mn:0000BDCD                 sub     edx, [ecx+4]
.text$mn:0000BDD0                 sar     edx, 3
.text$mn:0000BDD3                 push    edx             ; int
.text$mn:0000BDD4                 mov     eax, [ebp+var_18]
.text$mn:0000BDD7                 mov     ecx, [eax+4]
.text$mn:0000BDDA                 push    ecx             ; void *
.text$mn:0000BDDB                 lea     edx, [ebp+var_13]
.text$mn:0000BDDE                 push    edx
.text$mn:0000BDDF                 mov     ecx, [ebp+var_18]
.text$mn:0000BDE2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000BDE7                 mov     ecx, eax
.text$mn:0000BDE9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@I@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::deallocate(MatchedCharInserted *,uint)
.text$mn:0000BDEE
.text$mn:0000BDEE loc_BDEE:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+B8j
.text$mn:0000BDEE                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BDF1                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BDF6                 mov     eax, [ebp+arg_0]
.text$mn:0000BDF9                 mov     ecx, [ebp+var_1C]
.text$mn:0000BDFC                 lea     edx, [ecx+eax*8]
.text$mn:0000BDFF                 mov     eax, [ebp+var_18]
.text$mn:0000BE02                 mov     [eax+0Ch], edx
.text$mn:0000BE05                 mov     ecx, [ebp+var_20]
.text$mn:0000BE08                 mov     edx, [ebp+var_1C]
.text$mn:0000BE0B                 lea     eax, [edx+ecx*8]
.text$mn:0000BE0E                 mov     ecx, [ebp+var_18]
.text$mn:0000BE11                 mov     [ecx+8], eax
.text$mn:0000BE14                 mov     edx, [ebp+var_18]
.text$mn:0000BE17                 mov     eax, [ebp+var_1C]
.text$mn:0000BE1A                 mov     [edx+4], eax
.text$mn:0000BE1D                 mov     ecx, [ebp+var_C]
.text$mn:0000BE20                 mov     large fs:0, ecx
.text$mn:0000BE27                 pop     ecx
.text$mn:0000BE28                 pop     edi
.text$mn:0000BE29                 pop     esi
.text$mn:0000BE2A                 pop     ebx
.text$mn:0000BE2B                 mov     esp, ebp
.text$mn:0000BE2D                 pop     ebp
.text$mn:0000BE2E                 retn    4
.text$mn:0000BE2E ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BE2E ; ---------------------------------------------------------------------------
.text$mn:0000BE31                 align 4
.text$mn:0000BE31 _text$mn        ends
.text$mn:0000BE31
.text$x:0000BE34 ; ===========================================================================
.text$x:0000BE34
.text$x:0000BE34 ; Segment type: Pure code
.text$x:0000BE34 ; Segment permissions: Read/Execute
.text$x:0000BE34 _text$x         segment para public 'CODE' use32
.text$x:0000BE34                 assume cs:_text$x
.text$x:0000BE34                 ;org 0BE34h
.text$x:0000BE34 ; COMDAT (pick associative to section at BCF4)
.text$x:0000BE34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BE34
.text$x:0000BE34 ; =============== S U B R O U T I N E =======================================
.text$x:0000BE34
.text$x:0000BE34
.text$x:0000BE34 __ehhandler$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z proc near
.text$x:0000BE34                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+5o
.text$x:0000BE34
.text$x:0000BE34 arg_4           = dword ptr  8
.text$x:0000BE34
.text$x:0000BE34                 mov     edx, [esp+arg_4]
.text$x:0000BE38                 lea     eax, [edx+0Ch]
.text$x:0000BE3B                 mov     ecx, [edx-24h]
.text$x:0000BE3E                 xor     ecx, eax
.text$x:0000BE40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BE45                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$x:0000BE4A                 jmp     ___CxxFrameHandler3
.text$x:0000BE4A __ehhandler$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z endp
.text$x:0000BE4A
.text$x:0000BE4A ; ---------------------------------------------------------------------------
.text$x:0000BE4F                 align 10h
.text$x:0000BE4F _text$x         ends
.text$x:0000BE4F
.text$mn:0000BE50 ; ===========================================================================
.text$mn:0000BE50
.text$mn:0000BE50 ; Segment type: Pure code
.text$mn:0000BE50 ; Segment permissions: Read/Execute
.text$mn:0000BE50 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE50                 assume cs:_text$mn
.text$mn:0000BE50                 ;org 0BE50h
.text$mn:0000BE50 ; COMDAT (pick any)
.text$mn:0000BE50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE50
.text$mn:0000BE50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE50
.text$mn:0000BE50 ; Attributes: bp-based frame
.text$mn:0000BE50
.text$mn:0000BE50 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reallocate(unsigned int)
.text$mn:0000BE50                 public ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BE50 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000BE50                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+4Ep
.text$mn:0000BE50
.text$mn:0000BE50 var_20          = dword ptr -20h
.text$mn:0000BE50 var_1C          = dword ptr -1Ch
.text$mn:0000BE50 var_18          = dword ptr -18h
.text$mn:0000BE50 var_13          = byte ptr -13h
.text$mn:0000BE50 var_11          = byte ptr -11h
.text$mn:0000BE50 var_10          = dword ptr -10h
.text$mn:0000BE50 var_C           = dword ptr -0Ch
.text$mn:0000BE50 var_4           = dword ptr -4
.text$mn:0000BE50 arg_0           = dword ptr  8
.text$mn:0000BE50
.text$mn:0000BE50 ; FUNCTION CHUNK AT .text$mn:0000BEE6 SIZE 00000009 BYTES
.text$mn:0000BE50 ; FUNCTION CHUNK AT .text$mn:0000BEF6 SIZE 00000098 BYTES
.text$mn:0000BE50
.text$mn:0000BE50                 push    ebp
.text$mn:0000BE51                 mov     ebp, esp
.text$mn:0000BE53                 push    0FFFFFFFFh
.text$mn:0000BE55                 push    offset __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BE5A                 mov     eax, large fs:0
.text$mn:0000BE60                 push    eax
.text$mn:0000BE61                 push    ecx
.text$mn:0000BE62                 sub     esp, 10h
.text$mn:0000BE65                 push    ebx
.text$mn:0000BE66                 push    esi
.text$mn:0000BE67                 push    edi
.text$mn:0000BE68                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BE6D                 xor     eax, ebp
.text$mn:0000BE6F                 push    eax
.text$mn:0000BE70                 lea     eax, [ebp+var_C]
.text$mn:0000BE73                 mov     large fs:0, eax
.text$mn:0000BE79                 mov     [ebp+var_10], esp
.text$mn:0000BE7C                 mov     [ebp+var_18], ecx
.text$mn:0000BE7F                 mov     eax, [ebp+arg_0]
.text$mn:0000BE82                 push    eax
.text$mn:0000BE83                 lea     ecx, [ebp+var_11]
.text$mn:0000BE86                 push    ecx
.text$mn:0000BE87                 mov     ecx, [ebp+var_18]
.text$mn:0000BE8A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BE8F                 mov     ecx, eax
.text$mn:0000BE91                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:0000BE96                 mov     [ebp+var_1C], eax
.text$mn:0000BE99                 mov     [ebp+var_4], 0
.text$mn:0000BEA0                 mov     edx, [ebp+var_1C]
.text$mn:0000BEA3                 push    edx
.text$mn:0000BEA4                 mov     eax, [ebp+var_18]
.text$mn:0000BEA7                 mov     ecx, [eax+8]
.text$mn:0000BEAA                 push    ecx
.text$mn:0000BEAB                 mov     edx, [ebp+var_18]
.text$mn:0000BEAE                 mov     eax, [edx+4]
.text$mn:0000BEB1                 push    eax
.text$mn:0000BEB2                 mov     ecx, [ebp+var_18]
.text$mn:0000BEB5                 call    ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000BEBA                 jmp     short loc_BEE6
.text$mn:0000BEBA ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000BEBA
.text$mn:0000BEBC
.text$mn:0000BEBC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEBC
.text$mn:0000BEBC ; Attributes: noreturn
.text$mn:0000BEBC
.text$mn:0000BEBC __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:0000BEBC                                         ; DATA XREF: .xdata$x:00010128o
.text$mn:0000BEBC                 mov     ecx, [ebp+8]
.text$mn:0000BEBF                 push    ecx             ; int
.text$mn:0000BEC0                 mov     edx, [ebp-1Ch]
.text$mn:0000BEC3                 push    edx             ; void *
.text$mn:0000BEC4                 lea     eax, [ebp-12h]
.text$mn:0000BEC7                 push    eax
.text$mn:0000BEC8                 mov     ecx, [ebp-18h]
.text$mn:0000BECB                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BED0                 mov     ecx, eax
.text$mn:0000BED2                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000BED7                 push    0
.text$mn:0000BED9                 push    0
.text$mn:0000BEDB                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000BEDB __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:0000BEDB
.text$mn:0000BEE0 ; ---------------------------------------------------------------------------
.text$mn:0000BEE0                 mov     eax, offset $LN8_0
.text$mn:0000BEE5                 retn
.text$mn:0000BEE6 ; ---------------------------------------------------------------------------
.text$mn:0000BEE6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BEE6
.text$mn:0000BEE6 loc_BEE6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+6Aj
.text$mn:0000BEE6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BEED                 jmp     short loc_BEF6
.text$mn:0000BEED ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BEEF
.text$mn:0000BEEF ; =============== S U B R O U T I N E =======================================
.text$mn:0000BEEF
.text$mn:0000BEEF
.text$mn:0000BEEF $LN8_0          proc near               ; DATA XREF: .text$mn:0000BEE0o
.text$mn:0000BEEF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000BEEF $LN8_0          endp ; sp-analysis failed
.text$mn:0000BEEF
.text$mn:0000BEF6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BEF6
.text$mn:0000BEF6 loc_BEF6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+9Dj
.text$mn:0000BEF6                 mov     ecx, [ebp+var_18]
.text$mn:0000BEF9                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000BEFE                 mov     [ebp+var_20], eax
.text$mn:0000BF01                 mov     ecx, [ebp+var_18]
.text$mn:0000BF04                 cmp     dword ptr [ecx+4], 0
.text$mn:0000BF08                 jz      short loc_BF4F
.text$mn:0000BF0A                 mov     edx, [ebp+var_18]
.text$mn:0000BF0D                 mov     eax, [edx+8]
.text$mn:0000BF10                 push    eax
.text$mn:0000BF11                 mov     ecx, [ebp+var_18]
.text$mn:0000BF14                 mov     edx, [ecx+4]
.text$mn:0000BF17                 push    edx
.text$mn:0000BF18                 mov     ecx, [ebp+var_18]
.text$mn:0000BF1B                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000BF20                 mov     eax, [ebp+var_18]
.text$mn:0000BF23                 mov     ecx, [ebp+var_18]
.text$mn:0000BF26                 mov     eax, [eax+0Ch]
.text$mn:0000BF29                 sub     eax, [ecx+4]
.text$mn:0000BF2C                 cdq
.text$mn:0000BF2D                 mov     ecx, 1Ch
.text$mn:0000BF32                 idiv    ecx
.text$mn:0000BF34                 push    eax             ; int
.text$mn:0000BF35                 mov     edx, [ebp+var_18]
.text$mn:0000BF38                 mov     eax, [edx+4]
.text$mn:0000BF3B                 push    eax             ; void *
.text$mn:0000BF3C                 lea     ecx, [ebp+var_13]
.text$mn:0000BF3F                 push    ecx
.text$mn:0000BF40                 mov     ecx, [ebp+var_18]
.text$mn:0000BF43                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BF48                 mov     ecx, eax
.text$mn:0000BF4A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000BF4F
.text$mn:0000BF4F loc_BF4F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+B8j
.text$mn:0000BF4F                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BF52                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BF57                 imul    edx, [ebp+arg_0], 1Ch
.text$mn:0000BF5B                 add     edx, [ebp+var_1C]
.text$mn:0000BF5E                 mov     eax, [ebp+var_18]
.text$mn:0000BF61                 mov     [eax+0Ch], edx
.text$mn:0000BF64                 imul    ecx, [ebp+var_20], 1Ch
.text$mn:0000BF68                 add     ecx, [ebp+var_1C]
.text$mn:0000BF6B                 mov     edx, [ebp+var_18]
.text$mn:0000BF6E                 mov     [edx+8], ecx
.text$mn:0000BF71                 mov     eax, [ebp+var_18]
.text$mn:0000BF74                 mov     ecx, [ebp+var_1C]
.text$mn:0000BF77                 mov     [eax+4], ecx
.text$mn:0000BF7A                 mov     ecx, [ebp+var_C]
.text$mn:0000BF7D                 mov     large fs:0, ecx
.text$mn:0000BF84                 pop     ecx
.text$mn:0000BF85                 pop     edi
.text$mn:0000BF86                 pop     esi
.text$mn:0000BF87                 pop     ebx
.text$mn:0000BF88                 mov     esp, ebp
.text$mn:0000BF8A                 pop     ebp
.text$mn:0000BF8B                 retn    4
.text$mn:0000BF8B ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BF8B ; ---------------------------------------------------------------------------
.text$mn:0000BF8E                 align 10h
.text$mn:0000BF8E _text$mn        ends
.text$mn:0000BF8E
.text$x:0000BF90 ; ===========================================================================
.text$x:0000BF90
.text$x:0000BF90 ; Segment type: Pure code
.text$x:0000BF90 ; Segment permissions: Read/Execute
.text$x:0000BF90 _text$x         segment para public 'CODE' use32
.text$x:0000BF90                 assume cs:_text$x
.text$x:0000BF90                 ;org 0BF90h
.text$x:0000BF90 ; COMDAT (pick associative to section at BE50)
.text$x:0000BF90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BF90
.text$x:0000BF90 ; =============== S U B R O U T I N E =======================================
.text$x:0000BF90
.text$x:0000BF90
.text$x:0000BF90 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$x:0000BF90                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+5o
.text$x:0000BF90
.text$x:0000BF90 arg_4           = dword ptr  8
.text$x:0000BF90
.text$x:0000BF90                 mov     edx, [esp+arg_4]
.text$x:0000BF94                 lea     eax, [edx+0Ch]
.text$x:0000BF97                 mov     ecx, [edx-24h]
.text$x:0000BF9A                 xor     ecx, eax
.text$x:0000BF9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BFA1                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$x:0000BFA6                 jmp     ___CxxFrameHandler3
.text$x:0000BFA6 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$x:0000BFA6
.text$x:0000BFA6 ; ---------------------------------------------------------------------------
.text$x:0000BFAB                 align 4
.text$x:0000BFAB _text$x         ends
.text$x:0000BFAB
.text$mn:0000BFAC ; ===========================================================================
.text$mn:0000BFAC
.text$mn:0000BFAC ; Segment type: Pure code
.text$mn:0000BFAC ; Segment permissions: Read/Execute
.text$mn:0000BFAC _text$mn        segment para public 'CODE' use32
.text$mn:0000BFAC                 assume cs:_text$mn
.text$mn:0000BFAC                 ;org 0BFACh
.text$mn:0000BFAC ; COMDAT (pick any)
.text$mn:0000BFAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BFAC
.text$mn:0000BFAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BFAC
.text$mn:0000BFAC ; Attributes: bp-based frame
.text$mn:0000BFAC
.text$mn:0000BFAC ; protected: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Reserve(unsigned int)
.text$mn:0000BFAC                 public ?_Reserve@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.text$mn:0000BFAC ?_Reserve@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BFAC                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+50p
.text$mn:0000BFAC                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+B6p
.text$mn:0000BFAC
.text$mn:0000BFAC var_4           = dword ptr -4
.text$mn:0000BFAC arg_0           = dword ptr  8
.text$mn:0000BFAC
.text$mn:0000BFAC                 push    ebp
.text$mn:0000BFAD                 mov     ebp, esp
.text$mn:0000BFAF                 push    ecx
.text$mn:0000BFB0                 push    esi
.text$mn:0000BFB1                 mov     [ebp+var_4], ecx
.text$mn:0000BFB4                 mov     ecx, [ebp+var_4]
.text$mn:0000BFB7                 call    ?_Unused_capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Unused_capacity(void)
.text$mn:0000BFBC                 cmp     eax, [ebp+arg_0]
.text$mn:0000BFBF                 jnb     short loc_BFFF
.text$mn:0000BFC1                 mov     ecx, [ebp+var_4]
.text$mn:0000BFC4                 call    ?max_size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::max_size(void)
.text$mn:0000BFC9                 mov     esi, eax
.text$mn:0000BFCB                 mov     ecx, [ebp+var_4]
.text$mn:0000BFCE                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:0000BFD3                 sub     esi, eax
.text$mn:0000BFD5                 cmp     esi, [ebp+arg_0]
.text$mn:0000BFD8                 jnb     short loc_BFE2
.text$mn:0000BFDA                 mov     ecx, [ebp+var_4]
.text$mn:0000BFDD                 call    ?_Xlen@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Xlen(void)
.text$mn:0000BFE2
.text$mn:0000BFE2 loc_BFE2:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+2Cj
.text$mn:0000BFE2                 mov     ecx, [ebp+var_4]
.text$mn:0000BFE5                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:0000BFEA                 add     eax, [ebp+arg_0]
.text$mn:0000BFED                 push    eax
.text$mn:0000BFEE                 mov     ecx, [ebp+var_4]
.text$mn:0000BFF1                 call    ?_Grow_to@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEII@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)
.text$mn:0000BFF6                 push    eax
.text$mn:0000BFF7                 mov     ecx, [ebp+var_4]
.text$mn:0000BFFA                 call    ?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)
.text$mn:0000BFFF
.text$mn:0000BFFF loc_BFFF:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+13j
.text$mn:0000BFFF                 pop     esi
.text$mn:0000C000                 mov     esp, ebp
.text$mn:0000C002                 pop     ebp
.text$mn:0000C003                 retn    4
.text$mn:0000C003 ?_Reserve@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z endp
.text$mn:0000C003
.text$mn:0000C003 ; ---------------------------------------------------------------------------
.text$mn:0000C006                 align 4
.text$mn:0000C006 _text$mn        ends
.text$mn:0000C006
.text$mn:0000C008 ; ===========================================================================
.text$mn:0000C008
.text$mn:0000C008 ; Segment type: Pure code
.text$mn:0000C008 ; Segment permissions: Read/Execute
.text$mn:0000C008 _text$mn        segment para public 'CODE' use32
.text$mn:0000C008                 assume cs:_text$mn
.text$mn:0000C008                 ;org 0C008h
.text$mn:0000C008 ; COMDAT (pick any)
.text$mn:0000C008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C008
.text$mn:0000C008 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C008
.text$mn:0000C008 ; Attributes: bp-based frame
.text$mn:0000C008
.text$mn:0000C008 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reserve(unsigned int)
.text$mn:0000C008                 public ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000C008 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000C008                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+59p
.text$mn:0000C008                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+C6p ...
.text$mn:0000C008
.text$mn:0000C008 var_4           = dword ptr -4
.text$mn:0000C008 arg_0           = dword ptr  8
.text$mn:0000C008
.text$mn:0000C008                 push    ebp
.text$mn:0000C009                 mov     ebp, esp
.text$mn:0000C00B                 push    ecx
.text$mn:0000C00C                 push    esi
.text$mn:0000C00D                 mov     [ebp+var_4], ecx
.text$mn:0000C010                 mov     ecx, [ebp+var_4]
.text$mn:0000C013                 call    ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Unused_capacity(void)
.text$mn:0000C018                 cmp     eax, [ebp+arg_0]
.text$mn:0000C01B                 jnb     short loc_C05B
.text$mn:0000C01D                 mov     ecx, [ebp+var_4]
.text$mn:0000C020                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000C025                 mov     esi, eax
.text$mn:0000C027                 mov     ecx, [ebp+var_4]
.text$mn:0000C02A                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000C02F                 sub     esi, eax
.text$mn:0000C031                 cmp     esi, [ebp+arg_0]
.text$mn:0000C034                 jnb     short loc_C03E
.text$mn:0000C036                 mov     ecx, [ebp+var_4]
.text$mn:0000C039                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:0000C03E
.text$mn:0000C03E loc_C03E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+2Cj
.text$mn:0000C03E                 mov     ecx, [ebp+var_4]
.text$mn:0000C041                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000C046                 add     eax, [ebp+arg_0]
.text$mn:0000C049                 push    eax
.text$mn:0000C04A                 mov     ecx, [ebp+var_4]
.text$mn:0000C04D                 call    ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)
.text$mn:0000C052                 push    eax
.text$mn:0000C053                 mov     ecx, [ebp+var_4]
.text$mn:0000C056                 call    ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)
.text$mn:0000C05B
.text$mn:0000C05B loc_C05B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+13j
.text$mn:0000C05B                 pop     esi
.text$mn:0000C05C                 mov     esp, ebp
.text$mn:0000C05E                 pop     ebp
.text$mn:0000C05F                 retn    4
.text$mn:0000C05F ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000C05F
.text$mn:0000C05F ; ---------------------------------------------------------------------------
.text$mn:0000C062                 align 4
.text$mn:0000C062 _text$mn        ends
.text$mn:0000C062
.text$mn:0000C064 ; ===========================================================================
.text$mn:0000C064
.text$mn:0000C064 ; Segment type: Pure code
.text$mn:0000C064 ; Segment permissions: Read/Execute
.text$mn:0000C064 _text$mn        segment para public 'CODE' use32
.text$mn:0000C064                 assume cs:_text$mn
.text$mn:0000C064                 ;org 0C064h
.text$mn:0000C064 ; COMDAT (pick any)
.text$mn:0000C064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C064
.text$mn:0000C064 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C064
.text$mn:0000C064 ; Attributes: bp-based frame
.text$mn:0000C064
.text$mn:0000C064 ; void __thiscall std::_Container_base12::_Swap_all(std::_Container_base12 *this, struct std::_Container_base12 *)
.text$mn:0000C064                 public ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$mn:0000C064 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z proc near
.text$mn:0000C064                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+68p
.text$mn:0000C064
.text$mn:0000C064 var_18          = byte ptr -18h
.text$mn:0000C064 var_14          = dword ptr -14h
.text$mn:0000C064 var_10          = dword ptr -10h
.text$mn:0000C064 var_C           = dword ptr -0Ch
.text$mn:0000C064 var_4           = dword ptr -4
.text$mn:0000C064 arg_0           = dword ptr  8
.text$mn:0000C064
.text$mn:0000C064                 push    ebp
.text$mn:0000C065                 mov     ebp, esp
.text$mn:0000C067                 push    0FFFFFFFFh
.text$mn:0000C069                 push    offset __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$mn:0000C06E                 mov     eax, large fs:0
.text$mn:0000C074                 push    eax
.text$mn:0000C075                 sub     esp, 0Ch
.text$mn:0000C078                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000C07D                 xor     eax, ebp
.text$mn:0000C07F                 push    eax
.text$mn:0000C080                 lea     eax, [ebp+var_C]
.text$mn:0000C083                 mov     large fs:0, eax
.text$mn:0000C089                 mov     [ebp+var_10], ecx
.text$mn:0000C08C                 push    3               ; int
.text$mn:0000C08E                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000C091                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000C096                 mov     [ebp+var_4], 0
.text$mn:0000C09D                 mov     eax, [ebp+var_10]
.text$mn:0000C0A0                 mov     ecx, [eax]
.text$mn:0000C0A2                 mov     [ebp+var_14], ecx
.text$mn:0000C0A5                 mov     edx, [ebp+var_10]
.text$mn:0000C0A8                 mov     eax, [ebp+arg_0]
.text$mn:0000C0AB                 mov     ecx, [eax]
.text$mn:0000C0AD                 mov     [edx], ecx
.text$mn:0000C0AF                 mov     edx, [ebp+arg_0]
.text$mn:0000C0B2                 mov     eax, [ebp+var_14]
.text$mn:0000C0B5                 mov     [edx], eax
.text$mn:0000C0B7                 mov     ecx, [ebp+var_10]
.text$mn:0000C0BA                 cmp     dword ptr [ecx], 0
.text$mn:0000C0BD                 jz      short loc_C0C9
.text$mn:0000C0BF                 mov     edx, [ebp+var_10]
.text$mn:0000C0C2                 mov     eax, [edx]
.text$mn:0000C0C4                 mov     ecx, [ebp+var_10]
.text$mn:0000C0C7                 mov     [eax], ecx
.text$mn:0000C0C9
.text$mn:0000C0C9 loc_C0C9:                               ; CODE XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+59j
.text$mn:0000C0C9                 mov     edx, [ebp+arg_0]
.text$mn:0000C0CC                 cmp     dword ptr [edx], 0
.text$mn:0000C0CF                 jz      short loc_C0DB
.text$mn:0000C0D1                 mov     eax, [ebp+arg_0]
.text$mn:0000C0D4                 mov     ecx, [eax]
.text$mn:0000C0D6                 mov     edx, [ebp+arg_0]
.text$mn:0000C0D9                 mov     [ecx], edx
.text$mn:0000C0DB
.text$mn:0000C0DB loc_C0DB:                               ; CODE XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+6Bj
.text$mn:0000C0DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000C0E2                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000C0E5                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000C0EA                 mov     ecx, [ebp+var_C]
.text$mn:0000C0ED                 mov     large fs:0, ecx
.text$mn:0000C0F4                 pop     ecx
.text$mn:0000C0F5                 mov     esp, ebp
.text$mn:0000C0F7                 pop     ebp
.text$mn:0000C0F8                 retn    4
.text$mn:0000C0F8 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z endp
.text$mn:0000C0F8
.text$mn:0000C0F8 ; ---------------------------------------------------------------------------
.text$mn:0000C0FB                 align 4
.text$mn:0000C0FB _text$mn        ends
.text$mn:0000C0FB
.text$x:0000C0FC ; ===========================================================================
.text$x:0000C0FC
.text$x:0000C0FC ; Segment type: Pure code
.text$x:0000C0FC ; Segment permissions: Read/Execute
.text$x:0000C0FC _text$x         segment para public 'CODE' use32
.text$x:0000C0FC                 assume cs:_text$x
.text$x:0000C0FC                 ;org 0C0FCh
.text$x:0000C0FC ; COMDAT (pick associative to section at C064)
.text$x:0000C0FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000C0FC
.text$x:0000C0FC ; =============== S U B R O U T I N E =======================================
.text$x:0000C0FC
.text$x:0000C0FC
.text$x:0000C0FC __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0 proc near
.text$x:0000C0FC                                         ; DATA XREF: .xdata$x:0000F4F4o
.text$x:0000C0FC                 lea     ecx, [ebp-18h]  ; this
.text$x:0000C0FF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000C0FF __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0 endp
.text$x:0000C0FF
.text$x:0000C104
.text$x:0000C104 ; =============== S U B R O U T I N E =======================================
.text$x:0000C104
.text$x:0000C104
.text$x:0000C104 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z proc near
.text$x:0000C104                                         ; DATA XREF: std::_Container_base12::_Swap_all(std::_Container_base12 &)+5o
.text$x:0000C104
.text$x:0000C104 arg_4           = dword ptr  8
.text$x:0000C104
.text$x:0000C104                 mov     edx, [esp+arg_4]
.text$x:0000C108                 lea     eax, [edx+0Ch]
.text$x:0000C10B                 mov     ecx, [edx-10h]
.text$x:0000C10E                 xor     ecx, eax
.text$x:0000C110                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000C115                 mov     eax, offset __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.text$x:0000C11A                 jmp     ___CxxFrameHandler3
.text$x:0000C11A __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z endp
.text$x:0000C11A
.text$x:0000C11A ; ---------------------------------------------------------------------------
.text$x:0000C11F                 align 10h
.text$x:0000C11F _text$x         ends
.text$x:0000C11F
.text$mn:0000C120 ; ===========================================================================
.text$mn:0000C120
.text$mn:0000C120 ; Segment type: Pure code
.text$mn:0000C120 ; Segment permissions: Read/Execute
.text$mn:0000C120 _text$mn        segment para public 'CODE' use32
.text$mn:0000C120                 assume cs:_text$mn
.text$mn:0000C120                 ;org 0C120h
.text$mn:0000C120 ; COMDAT (pick any)
.text$mn:0000C120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C120
.text$mn:0000C120 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C120
.text$mn:0000C120 ; Attributes: bp-based frame
.text$mn:0000C120
.text$mn:0000C120 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Swap_alloc(class std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>> &)
.text$mn:0000C120                 public ?_Swap_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAV12@@Z
.text$mn:0000C120 ?_Swap_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAV12@@Z proc near
.text$mn:0000C120                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+B5p
.text$mn:0000C120
.text$mn:0000C120 var_4           = dword ptr -4
.text$mn:0000C120 arg_0           = dword ptr  8
.text$mn:0000C120
.text$mn:0000C120                 push    ebp
.text$mn:0000C121                 mov     ebp, esp
.text$mn:0000C123                 push    ecx
.text$mn:0000C124                 mov     [ebp+var_4], ecx
.text$mn:0000C127                 mov     eax, [ebp+arg_0]
.text$mn:0000C12A                 push    eax
.text$mn:0000C12B                 mov     ecx, [ebp+var_4]
.text$mn:0000C12E                 push    ecx
.text$mn:0000C12F                 call    ??$_Swap_adl@PAU_Container_proxy@std@@@std@@YAXAAPAU_Container_proxy@0@0@Z ; std::_Swap_adl<std::_Container_proxy *>(std::_Container_proxy * &,std::_Container_proxy * &)
.text$mn:0000C134                 add     esp, 8
.text$mn:0000C137                 mov     esp, ebp
.text$mn:0000C139                 pop     ebp
.text$mn:0000C13A                 retn    4
.text$mn:0000C13A ?_Swap_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAV12@@Z endp
.text$mn:0000C13A
.text$mn:0000C13A ; ---------------------------------------------------------------------------
.text$mn:0000C13D                 align 10h
.text$mn:0000C13D _text$mn        ends
.text$mn:0000C13D
.text$mn:0000C140 ; ===========================================================================
.text$mn:0000C140
.text$mn:0000C140 ; Segment type: Pure code
.text$mn:0000C140 ; Segment permissions: Read/Execute
.text$mn:0000C140 _text$mn        segment para public 'CODE' use32
.text$mn:0000C140                 assume cs:_text$mn
.text$mn:0000C140                 ;org 0C140h
.text$mn:0000C140 ; COMDAT (pick any)
.text$mn:0000C140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C140
.text$mn:0000C140 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C140
.text$mn:0000C140 ; Attributes: bp-based frame
.text$mn:0000C140
.text$mn:0000C140 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Swap_bx(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:0000C140                 public ?_Swap_bx@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z
.text$mn:0000C140 ?_Swap_bx@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z proc near
.text$mn:0000C140                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+74p
.text$mn:0000C140                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+C1p
.text$mn:0000C140
.text$mn:0000C140 var_10          = dword ptr -10h
.text$mn:0000C140 var_C           = dword ptr -0Ch
.text$mn:0000C140 var_8           = dword ptr -8
.text$mn:0000C140 var_4           = byte ptr -4
.text$mn:0000C140 var_3           = byte ptr -3
.text$mn:0000C140 var_2           = byte ptr -2
.text$mn:0000C140 var_1           = byte ptr -1
.text$mn:0000C140 arg_0           = dword ptr  8
.text$mn:0000C140
.text$mn:0000C140                 push    ebp
.text$mn:0000C141                 mov     ebp, esp
.text$mn:0000C143                 sub     esp, 10h
.text$mn:0000C146                 mov     [ebp+var_8], ecx
.text$mn:0000C149                 mov     eax, [ebp+var_8]
.text$mn:0000C14C                 cmp     dword ptr [eax+18h], 8
.text$mn:0000C150                 jb      loc_C1DD
.text$mn:0000C156                 mov     ecx, [ebp+arg_0]
.text$mn:0000C159                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000C15D                 jb      short loc_C177
.text$mn:0000C15F                 mov     edx, [ebp+arg_0]
.text$mn:0000C162                 add     edx, 4
.text$mn:0000C165                 push    edx
.text$mn:0000C166                 mov     eax, [ebp+var_8]
.text$mn:0000C169                 add     eax, 4
.text$mn:0000C16C                 push    eax
.text$mn:0000C16D                 call    ??$_Swap_adl@PA_W@std@@YAXAAPA_W0@Z ; std::_Swap_adl<wchar_t *>(wchar_t * &,wchar_t * &)
.text$mn:0000C172                 add     esp, 8
.text$mn:0000C175                 jmp     short loc_C1D8
.text$mn:0000C177 ; ---------------------------------------------------------------------------
.text$mn:0000C177
.text$mn:0000C177 loc_C177:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1Dj
.text$mn:0000C177                 mov     ecx, [ebp+var_8]
.text$mn:0000C17A                 mov     edx, [ecx+4]
.text$mn:0000C17D                 mov     [ebp+var_C], edx
.text$mn:0000C180                 mov     eax, [ebp+var_8]
.text$mn:0000C183                 add     eax, 4
.text$mn:0000C186                 push    eax
.text$mn:0000C187                 lea     ecx, [ebp+var_1]
.text$mn:0000C18A                 push    ecx
.text$mn:0000C18B                 mov     ecx, [ebp+var_8]
.text$mn:0000C18E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C193                 mov     ecx, eax
.text$mn:0000C195                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000C19A                 mov     edx, [ebp+arg_0]
.text$mn:0000C19D                 mov     eax, [edx+14h]
.text$mn:0000C1A0                 add     eax, 1
.text$mn:0000C1A3                 push    eax             ; int
.text$mn:0000C1A4                 mov     ecx, [ebp+arg_0]
.text$mn:0000C1A7                 add     ecx, 4
.text$mn:0000C1AA                 push    ecx             ; Src
.text$mn:0000C1AB                 mov     edx, [ebp+var_8]
.text$mn:0000C1AE                 add     edx, 4
.text$mn:0000C1B1                 push    edx             ; Dst
.text$mn:0000C1B2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C1B7                 add     esp, 0Ch
.text$mn:0000C1BA                 lea     eax, [ebp+var_C]
.text$mn:0000C1BD                 push    eax             ; int
.text$mn:0000C1BE                 mov     ecx, [ebp+arg_0]
.text$mn:0000C1C1                 add     ecx, 4
.text$mn:0000C1C4                 push    ecx             ; void *
.text$mn:0000C1C5                 lea     edx, [ebp+var_2]
.text$mn:0000C1C8                 push    edx
.text$mn:0000C1C9                 mov     ecx, [ebp+var_8]
.text$mn:0000C1CC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C1D1                 mov     ecx, eax
.text$mn:0000C1D3                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000C1D8
.text$mn:0000C1D8 loc_C1D8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+35j
.text$mn:0000C1D8                 jmp     loc_C25F
.text$mn:0000C1DD ; ---------------------------------------------------------------------------
.text$mn:0000C1DD
.text$mn:0000C1DD loc_C1DD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+10j
.text$mn:0000C1DD                 mov     eax, [ebp+arg_0]
.text$mn:0000C1E0                 cmp     dword ptr [eax+18h], 8
.text$mn:0000C1E4                 jnb     short loc_C1FE
.text$mn:0000C1E6                 mov     ecx, [ebp+arg_0]
.text$mn:0000C1E9                 add     ecx, 4
.text$mn:0000C1EC                 push    ecx
.text$mn:0000C1ED                 mov     edx, [ebp+var_8]
.text$mn:0000C1F0                 add     edx, 4
.text$mn:0000C1F3                 push    edx
.text$mn:0000C1F4                 call    ??$swap@_W$07@std@@YAXAAY07_W0@Z ; std::swap<wchar_t,8>(wchar_t (&)[8],wchar_t (&)[8])
.text$mn:0000C1F9                 add     esp, 8
.text$mn:0000C1FC                 jmp     short loc_C25F
.text$mn:0000C1FE ; ---------------------------------------------------------------------------
.text$mn:0000C1FE
.text$mn:0000C1FE loc_C1FE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+A4j
.text$mn:0000C1FE                 mov     eax, [ebp+arg_0]
.text$mn:0000C201                 mov     ecx, [eax+4]
.text$mn:0000C204                 mov     [ebp+var_10], ecx
.text$mn:0000C207                 mov     edx, [ebp+arg_0]
.text$mn:0000C20A                 add     edx, 4
.text$mn:0000C20D                 push    edx
.text$mn:0000C20E                 lea     eax, [ebp+var_3]
.text$mn:0000C211                 push    eax
.text$mn:0000C212                 mov     ecx, [ebp+var_8]
.text$mn:0000C215                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C21A                 mov     ecx, eax
.text$mn:0000C21C                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000C221                 mov     ecx, [ebp+var_8]
.text$mn:0000C224                 mov     edx, [ecx+14h]
.text$mn:0000C227                 add     edx, 1
.text$mn:0000C22A                 push    edx             ; int
.text$mn:0000C22B                 mov     eax, [ebp+var_8]
.text$mn:0000C22E                 add     eax, 4
.text$mn:0000C231                 push    eax             ; Src
.text$mn:0000C232                 mov     ecx, [ebp+arg_0]
.text$mn:0000C235                 add     ecx, 4
.text$mn:0000C238                 push    ecx             ; Dst
.text$mn:0000C239                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C23E                 add     esp, 0Ch
.text$mn:0000C241                 lea     edx, [ebp+var_10]
.text$mn:0000C244                 push    edx             ; int
.text$mn:0000C245                 mov     eax, [ebp+var_8]
.text$mn:0000C248                 add     eax, 4
.text$mn:0000C24B                 push    eax             ; void *
.text$mn:0000C24C                 lea     ecx, [ebp+var_4]
.text$mn:0000C24F                 push    ecx
.text$mn:0000C250                 mov     ecx, [ebp+var_8]
.text$mn:0000C253                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C258                 mov     ecx, eax
.text$mn:0000C25A                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000C25F
.text$mn:0000C25F loc_C25F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_C1D8j
.text$mn:0000C25F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+BCj
.text$mn:0000C25F                 mov     esp, ebp
.text$mn:0000C261                 pop     ebp
.text$mn:0000C262                 retn    4
.text$mn:0000C262 ?_Swap_bx@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z endp
.text$mn:0000C262
.text$mn:0000C262 ; ---------------------------------------------------------------------------
.text$mn:0000C265                 align 4
.text$mn:0000C265 _text$mn        ends
.text$mn:0000C265
.text$mn:0000C268 ; ===========================================================================
.text$mn:0000C268
.text$mn:0000C268 ; Segment type: Pure code
.text$mn:0000C268 ; Segment permissions: Read/Execute
.text$mn:0000C268 _text$mn        segment para public 'CODE' use32
.text$mn:0000C268                 assume cs:_text$mn
.text$mn:0000C268                 ;org 0C268h
.text$mn:0000C268 ; COMDAT (pick any)
.text$mn:0000C268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C268
.text$mn:0000C268 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C268
.text$mn:0000C268 ; Attributes: bp-based frame
.text$mn:0000C268
.text$mn:0000C268 ; private: void __thiscall std::_Yarn<char>::_Tidy(void)
.text$mn:0000C268                 public ?_Tidy@?$_Yarn@D@std@@AAEXXZ
.text$mn:0000C268 ?_Tidy@?$_Yarn@D@std@@AAEXXZ proc near  ; CODE XREF: std::_Yarn<char>::~_Yarn<char>(void)+Ap
.text$mn:0000C268
.text$mn:0000C268 var_4           = dword ptr -4
.text$mn:0000C268
.text$mn:0000C268                 push    ebp
.text$mn:0000C269                 mov     ebp, esp
.text$mn:0000C26B                 push    ecx
.text$mn:0000C26C                 mov     [ebp+var_4], ecx
.text$mn:0000C26F                 mov     eax, [ebp+var_4]
.text$mn:0000C272                 cmp     dword ptr [eax], 0
.text$mn:0000C275                 jz      short loc_C287
.text$mn:0000C277                 push    2
.text$mn:0000C279                 mov     ecx, [ebp+var_4]
.text$mn:0000C27C                 mov     edx, [ecx]
.text$mn:0000C27E                 push    edx
.text$mn:0000C27F                 call    __free_dbg
.text$mn:0000C284                 add     esp, 8
.text$mn:0000C287
.text$mn:0000C287 loc_C287:                               ; CODE XREF: std::_Yarn<char>::_Tidy(void)+Dj
.text$mn:0000C287                 mov     eax, [ebp+var_4]
.text$mn:0000C28A                 mov     dword ptr [eax], 0
.text$mn:0000C290                 mov     esp, ebp
.text$mn:0000C292                 pop     ebp
.text$mn:0000C293                 retn
.text$mn:0000C293 ?_Tidy@?$_Yarn@D@std@@AAEXXZ endp
.text$mn:0000C293
.text$mn:0000C293 _text$mn        ends
.text$mn:0000C293
.text$mn:0000C294 ; ===========================================================================
.text$mn:0000C294
.text$mn:0000C294 ; Segment type: Pure code
.text$mn:0000C294 ; Segment permissions: Read/Execute
.text$mn:0000C294 _text$mn        segment para public 'CODE' use32
.text$mn:0000C294                 assume cs:_text$mn
.text$mn:0000C294                 ;org 0C294h
.text$mn:0000C294 ; COMDAT (pick any)
.text$mn:0000C294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C294
.text$mn:0000C294 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C294
.text$mn:0000C294 ; Attributes: bp-based frame
.text$mn:0000C294
.text$mn:0000C294 ; private: void __thiscall std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:0000C294                 public ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
.text$mn:0000C294 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ proc near ; CODE XREF: std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)+Ap
.text$mn:0000C294
.text$mn:0000C294 var_4           = dword ptr -4
.text$mn:0000C294
.text$mn:0000C294                 push    ebp
.text$mn:0000C295                 mov     ebp, esp
.text$mn:0000C297                 push    ecx
.text$mn:0000C298                 mov     [ebp+var_4], ecx
.text$mn:0000C29B                 mov     eax, [ebp+var_4]
.text$mn:0000C29E                 cmp     dword ptr [eax], 0
.text$mn:0000C2A1                 jz      short loc_C2B3
.text$mn:0000C2A3                 push    2
.text$mn:0000C2A5                 mov     ecx, [ebp+var_4]
.text$mn:0000C2A8                 mov     edx, [ecx]
.text$mn:0000C2AA                 push    edx
.text$mn:0000C2AB                 call    __free_dbg
.text$mn:0000C2B0                 add     esp, 8
.text$mn:0000C2B3
.text$mn:0000C2B3 loc_C2B3:                               ; CODE XREF: std::_Yarn<wchar_t>::_Tidy(void)+Dj
.text$mn:0000C2B3                 mov     eax, [ebp+var_4]
.text$mn:0000C2B6                 mov     dword ptr [eax], 0
.text$mn:0000C2BC                 mov     esp, ebp
.text$mn:0000C2BE                 pop     ebp
.text$mn:0000C2BF                 retn
.text$mn:0000C2BF ?_Tidy@?$_Yarn@_W@std@@AAEXXZ endp
.text$mn:0000C2BF
.text$mn:0000C2BF _text$mn        ends
.text$mn:0000C2BF
.text$mn:0000C2C0 ; ===========================================================================
.text$mn:0000C2C0
.text$mn:0000C2C0 ; Segment type: Pure code
.text$mn:0000C2C0 ; Segment permissions: Read/Execute
.text$mn:0000C2C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C2C0                 assume cs:_text$mn
.text$mn:0000C2C0                 ;org 0C2C0h
.text$mn:0000C2C0 ; COMDAT (pick any)
.text$mn:0000C2C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C2C0
.text$mn:0000C2C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C2C0
.text$mn:0000C2C0 ; Attributes: bp-based frame
.text$mn:0000C2C0
.text$mn:0000C2C0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:0000C2C0                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:0000C2C0 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:0000C2C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:0000C2C0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:0000C2C0
.text$mn:0000C2C0 var_C           = dword ptr -0Ch
.text$mn:0000C2C0 var_8           = dword ptr -8
.text$mn:0000C2C0 var_2           = byte ptr -2
.text$mn:0000C2C0 var_1           = byte ptr -1
.text$mn:0000C2C0 arg_0           = byte ptr  8
.text$mn:0000C2C0 Size            = dword ptr  0Ch
.text$mn:0000C2C0
.text$mn:0000C2C0                 push    ebp
.text$mn:0000C2C1                 mov     ebp, esp
.text$mn:0000C2C3                 sub     esp, 0Ch
.text$mn:0000C2C6                 mov     [ebp+var_8], ecx
.text$mn:0000C2C9                 movzx   eax, [ebp+arg_0]
.text$mn:0000C2CD                 test    eax, eax
.text$mn:0000C2CF                 jnz     short loc_C2D3
.text$mn:0000C2D1                 jmp     short loc_C346
.text$mn:0000C2D3 ; ---------------------------------------------------------------------------
.text$mn:0000C2D3
.text$mn:0000C2D3 loc_C2D3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:0000C2D3                 mov     ecx, [ebp+var_8]
.text$mn:0000C2D6                 cmp     dword ptr [ecx+18h], 10h
.text$mn:0000C2DA                 jb      short loc_C346
.text$mn:0000C2DC                 mov     edx, [ebp+var_8]
.text$mn:0000C2DF                 mov     eax, [edx+4]
.text$mn:0000C2E2                 mov     [ebp+var_C], eax
.text$mn:0000C2E5                 mov     ecx, [ebp+var_8]
.text$mn:0000C2E8                 add     ecx, 4
.text$mn:0000C2EB                 push    ecx
.text$mn:0000C2EC                 lea     edx, [ebp+var_1]
.text$mn:0000C2EF                 push    edx
.text$mn:0000C2F0                 mov     ecx, [ebp+var_8]
.text$mn:0000C2F3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000C2F8                 mov     ecx, eax
.text$mn:0000C2FA                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000C2FF                 cmp     [ebp+Size], 0
.text$mn:0000C303                 jbe     short loc_C325
.text$mn:0000C305                 mov     eax, [ebp+Size]
.text$mn:0000C308                 push    eax             ; Size
.text$mn:0000C309                 mov     ecx, [ebp+var_C]
.text$mn:0000C30C                 push    ecx
.text$mn:0000C30D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000C312                 add     esp, 4
.text$mn:0000C315                 push    eax             ; Src
.text$mn:0000C316                 mov     edx, [ebp+var_8]
.text$mn:0000C319                 add     edx, 4
.text$mn:0000C31C                 push    edx             ; Dst
.text$mn:0000C31D                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C322                 add     esp, 0Ch
.text$mn:0000C325
.text$mn:0000C325 loc_C325:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:0000C325                 mov     eax, [ebp+var_8]
.text$mn:0000C328                 mov     ecx, [eax+18h]
.text$mn:0000C32B                 add     ecx, 1
.text$mn:0000C32E                 push    ecx             ; int
.text$mn:0000C32F                 mov     edx, [ebp+var_C]
.text$mn:0000C332                 push    edx             ; void *
.text$mn:0000C333                 lea     eax, [ebp+var_2]
.text$mn:0000C336                 push    eax
.text$mn:0000C337                 mov     ecx, [ebp+var_8]
.text$mn:0000C33A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000C33F                 mov     ecx, eax
.text$mn:0000C341                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:0000C346
.text$mn:0000C346 loc_C346:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:0000C346                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:0000C346                 mov     ecx, [ebp+var_8]
.text$mn:0000C349                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:0000C350                 mov     edx, [ebp+Size]
.text$mn:0000C353                 push    edx
.text$mn:0000C354                 mov     ecx, [ebp+var_8]
.text$mn:0000C357                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000C35C                 mov     esp, ebp
.text$mn:0000C35E                 pop     ebp
.text$mn:0000C35F                 retn    8
.text$mn:0000C35F ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:0000C35F
.text$mn:0000C35F ; ---------------------------------------------------------------------------
.text$mn:0000C362                 align 4
.text$mn:0000C362 _text$mn        ends
.text$mn:0000C362
.text$mn:0000C364 ; ===========================================================================
.text$mn:0000C364
.text$mn:0000C364 ; Segment type: Pure code
.text$mn:0000C364 ; Segment permissions: Read/Execute
.text$mn:0000C364 _text$mn        segment para public 'CODE' use32
.text$mn:0000C364                 assume cs:_text$mn
.text$mn:0000C364                 ;org 0C364h
.text$mn:0000C364 ; COMDAT (pick any)
.text$mn:0000C364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C364
.text$mn:0000C364 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C364
.text$mn:0000C364 ; Attributes: bp-based frame
.text$mn:0000C364
.text$mn:0000C364 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:0000C364                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:0000C364 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:0000C364                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:0000C364                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:0000C364
.text$mn:0000C364 var_C           = dword ptr -0Ch
.text$mn:0000C364 var_8           = dword ptr -8
.text$mn:0000C364 var_2           = byte ptr -2
.text$mn:0000C364 var_1           = byte ptr -1
.text$mn:0000C364 arg_0           = byte ptr  8
.text$mn:0000C364 arg_4           = dword ptr  0Ch
.text$mn:0000C364
.text$mn:0000C364                 push    ebp
.text$mn:0000C365                 mov     ebp, esp
.text$mn:0000C367                 sub     esp, 0Ch
.text$mn:0000C36A                 mov     [ebp+var_8], ecx
.text$mn:0000C36D                 movzx   eax, [ebp+arg_0]
.text$mn:0000C371                 test    eax, eax
.text$mn:0000C373                 jnz     short loc_C377
.text$mn:0000C375                 jmp     short loc_C3EA
.text$mn:0000C377 ; ---------------------------------------------------------------------------
.text$mn:0000C377
.text$mn:0000C377 loc_C377:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:0000C377                 mov     ecx, [ebp+var_8]
.text$mn:0000C37A                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000C37E                 jb      short loc_C3EA
.text$mn:0000C380                 mov     edx, [ebp+var_8]
.text$mn:0000C383                 mov     eax, [edx+4]
.text$mn:0000C386                 mov     [ebp+var_C], eax
.text$mn:0000C389                 mov     ecx, [ebp+var_8]
.text$mn:0000C38C                 add     ecx, 4
.text$mn:0000C38F                 push    ecx
.text$mn:0000C390                 lea     edx, [ebp+var_1]
.text$mn:0000C393                 push    edx
.text$mn:0000C394                 mov     ecx, [ebp+var_8]
.text$mn:0000C397                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C39C                 mov     ecx, eax
.text$mn:0000C39E                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000C3A3                 cmp     [ebp+arg_4], 0
.text$mn:0000C3A7                 jbe     short loc_C3C9
.text$mn:0000C3A9                 mov     eax, [ebp+arg_4]
.text$mn:0000C3AC                 push    eax             ; int
.text$mn:0000C3AD                 mov     ecx, [ebp+var_C]
.text$mn:0000C3B0                 push    ecx
.text$mn:0000C3B1                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000C3B6                 add     esp, 4
.text$mn:0000C3B9                 push    eax             ; Src
.text$mn:0000C3BA                 mov     edx, [ebp+var_8]
.text$mn:0000C3BD                 add     edx, 4
.text$mn:0000C3C0                 push    edx             ; Dst
.text$mn:0000C3C1                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C3C6                 add     esp, 0Ch
.text$mn:0000C3C9
.text$mn:0000C3C9 loc_C3C9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:0000C3C9                 mov     eax, [ebp+var_8]
.text$mn:0000C3CC                 mov     ecx, [eax+18h]
.text$mn:0000C3CF                 add     ecx, 1
.text$mn:0000C3D2                 push    ecx             ; int
.text$mn:0000C3D3                 mov     edx, [ebp+var_C]
.text$mn:0000C3D6                 push    edx             ; void *
.text$mn:0000C3D7                 lea     eax, [ebp+var_2]
.text$mn:0000C3DA                 push    eax
.text$mn:0000C3DB                 mov     ecx, [ebp+var_8]
.text$mn:0000C3DE                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C3E3                 mov     ecx, eax
.text$mn:0000C3E5                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:0000C3EA
.text$mn:0000C3EA loc_C3EA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:0000C3EA                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:0000C3EA                 mov     ecx, [ebp+var_8]
.text$mn:0000C3ED                 mov     dword ptr [ecx+18h], 7
.text$mn:0000C3F4                 mov     edx, [ebp+arg_4]
.text$mn:0000C3F7                 push    edx
.text$mn:0000C3F8                 mov     ecx, [ebp+var_8]
.text$mn:0000C3FB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C400                 mov     esp, ebp
.text$mn:0000C402                 pop     ebp
.text$mn:0000C403                 retn    8
.text$mn:0000C403 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:0000C403
.text$mn:0000C403 ; ---------------------------------------------------------------------------
.text$mn:0000C406                 align 4
.text$mn:0000C406 _text$mn        ends
.text$mn:0000C406
.text$mn:0000C408 ; ===========================================================================
.text$mn:0000C408
.text$mn:0000C408 ; Segment type: Pure code
.text$mn:0000C408 ; Segment permissions: Read/Execute
.text$mn:0000C408 _text$mn        segment para public 'CODE' use32
.text$mn:0000C408                 assume cs:_text$mn
.text$mn:0000C408                 ;org 0C408h
.text$mn:0000C408 ; COMDAT (pick any)
.text$mn:0000C408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C408
.text$mn:0000C408 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C408
.text$mn:0000C408 ; Attributes: bp-based frame
.text$mn:0000C408
.text$mn:0000C408 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000C408                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:0000C408 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:0000C408                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:0000C408
.text$mn:0000C408 var_8           = dword ptr -8
.text$mn:0000C408 var_1           = byte ptr -1
.text$mn:0000C408
.text$mn:0000C408                 push    ebp
.text$mn:0000C409                 mov     ebp, esp
.text$mn:0000C40B                 sub     esp, 8
.text$mn:0000C40E                 mov     [ebp+var_8], ecx
.text$mn:0000C411                 mov     eax, [ebp+var_8]
.text$mn:0000C414                 cmp     dword ptr [eax+4], 0
.text$mn:0000C418                 jz      short loc_C487
.text$mn:0000C41A                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000C41D                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000C422                 mov     ecx, [ebp+var_8]
.text$mn:0000C425                 mov     edx, [ecx+8]
.text$mn:0000C428                 push    edx
.text$mn:0000C429                 mov     eax, [ebp+var_8]
.text$mn:0000C42C                 mov     ecx, [eax+4]
.text$mn:0000C42F                 push    ecx
.text$mn:0000C430                 mov     ecx, [ebp+var_8]
.text$mn:0000C433                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000C438                 mov     edx, [ebp+var_8]
.text$mn:0000C43B                 mov     eax, [ebp+var_8]
.text$mn:0000C43E                 mov     ecx, [edx+0Ch]
.text$mn:0000C441                 sub     ecx, [eax+4]
.text$mn:0000C444                 mov     eax, ecx
.text$mn:0000C446                 cdq
.text$mn:0000C447                 mov     ecx, 1Ch
.text$mn:0000C44C                 idiv    ecx
.text$mn:0000C44E                 push    eax             ; int
.text$mn:0000C44F                 mov     edx, [ebp+var_8]
.text$mn:0000C452                 mov     eax, [edx+4]
.text$mn:0000C455                 push    eax             ; void *
.text$mn:0000C456                 lea     ecx, [ebp+var_1]
.text$mn:0000C459                 push    ecx
.text$mn:0000C45A                 mov     ecx, [ebp+var_8]
.text$mn:0000C45D                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000C462                 mov     ecx, eax
.text$mn:0000C464                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000C469                 mov     edx, [ebp+var_8]
.text$mn:0000C46C                 mov     dword ptr [edx+4], 0
.text$mn:0000C473                 mov     eax, [ebp+var_8]
.text$mn:0000C476                 mov     dword ptr [eax+8], 0
.text$mn:0000C47D                 mov     ecx, [ebp+var_8]
.text$mn:0000C480                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000C487
.text$mn:0000C487 loc_C487:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:0000C487                 mov     esp, ebp
.text$mn:0000C489                 pop     ebp
.text$mn:0000C48A                 retn
.text$mn:0000C48A ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:0000C48A
.text$mn:0000C48A ; ---------------------------------------------------------------------------
.text$mn:0000C48B                 align 4
.text$mn:0000C48B _text$mn        ends
.text$mn:0000C48B
.text$mn:0000C48C ; ===========================================================================
.text$mn:0000C48C
.text$mn:0000C48C ; Segment type: Pure code
.text$mn:0000C48C ; Segment permissions: Read/Execute
.text$mn:0000C48C _text$mn        segment para public 'CODE' use32
.text$mn:0000C48C                 assume cs:_text$mn
.text$mn:0000C48C                 ;org 0C48Ch
.text$mn:0000C48C ; COMDAT (pick any)
.text$mn:0000C48C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C48C
.text$mn:0000C48C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C48C
.text$mn:0000C48C ; Attributes: bp-based frame
.text$mn:0000C48C
.text$mn:0000C48C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Unchecked(void)const
.text$mn:0000C48C                 public ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000C48C ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$mn:0000C48C                                         ; CODE XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+2Dp
.text$mn:0000C48C
.text$mn:0000C48C var_4           = dword ptr -4
.text$mn:0000C48C
.text$mn:0000C48C                 push    ebp
.text$mn:0000C48D                 mov     ebp, esp
.text$mn:0000C48F                 push    ecx
.text$mn:0000C490                 mov     [ebp+var_4], ecx
.text$mn:0000C493                 mov     eax, [ebp+var_4]
.text$mn:0000C496                 mov     eax, [eax+8]
.text$mn:0000C499                 mov     esp, ebp
.text$mn:0000C49B                 pop     ebp
.text$mn:0000C49C                 retn
.text$mn:0000C49C ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$mn:0000C49C
.text$mn:0000C49C ; ---------------------------------------------------------------------------
.text$mn:0000C49D                 align 10h
.text$mn:0000C49D _text$mn        ends
.text$mn:0000C49D
.text$mn:0000C4A0 ; ===========================================================================
.text$mn:0000C4A0
.text$mn:0000C4A0 ; Segment type: Pure code
.text$mn:0000C4A0 ; Segment permissions: Read/Execute
.text$mn:0000C4A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4A0                 assume cs:_text$mn
.text$mn:0000C4A0                 ;org 0C4A0h
.text$mn:0000C4A0 ; COMDAT (pick any)
.text$mn:0000C4A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4A0
.text$mn:0000C4A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4A0
.text$mn:0000C4A0 ; Attributes: bp-based frame
.text$mn:0000C4A0
.text$mn:0000C4A0 ; public: unsigned int __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Unused_capacity(void)const
.text$mn:0000C4A0                 public ?_Unused_capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ
.text$mn:0000C4A0 ?_Unused_capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C4A0                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+Bp
.text$mn:0000C4A0
.text$mn:0000C4A0 var_4           = dword ptr -4
.text$mn:0000C4A0
.text$mn:0000C4A0                 push    ebp
.text$mn:0000C4A1                 mov     ebp, esp
.text$mn:0000C4A3                 push    ecx
.text$mn:0000C4A4                 mov     [ebp+var_4], ecx
.text$mn:0000C4A7                 mov     eax, [ebp+var_4]
.text$mn:0000C4AA                 mov     ecx, [ebp+var_4]
.text$mn:0000C4AD                 mov     eax, [eax+0Ch]
.text$mn:0000C4B0                 sub     eax, [ecx+8]
.text$mn:0000C4B3                 sar     eax, 3
.text$mn:0000C4B6                 mov     esp, ebp
.text$mn:0000C4B8                 pop     ebp
.text$mn:0000C4B9                 retn
.text$mn:0000C4B9 ?_Unused_capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ endp
.text$mn:0000C4B9
.text$mn:0000C4B9 ; ---------------------------------------------------------------------------
.text$mn:0000C4BA                 align 4
.text$mn:0000C4BA _text$mn        ends
.text$mn:0000C4BA
.text$mn:0000C4BC ; ===========================================================================
.text$mn:0000C4BC
.text$mn:0000C4BC ; Segment type: Pure code
.text$mn:0000C4BC ; Segment permissions: Read/Execute
.text$mn:0000C4BC _text$mn        segment para public 'CODE' use32
.text$mn:0000C4BC                 assume cs:_text$mn
.text$mn:0000C4BC                 ;org 0C4BCh
.text$mn:0000C4BC ; COMDAT (pick any)
.text$mn:0000C4BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4BC
.text$mn:0000C4BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4BC
.text$mn:0000C4BC ; Attributes: bp-based frame
.text$mn:0000C4BC
.text$mn:0000C4BC ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Unused_capacity(void)const
.text$mn:0000C4BC                 public ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000C4BC ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000C4BC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+Bp
.text$mn:0000C4BC
.text$mn:0000C4BC var_4           = dword ptr -4
.text$mn:0000C4BC
.text$mn:0000C4BC                 push    ebp
.text$mn:0000C4BD                 mov     ebp, esp
.text$mn:0000C4BF                 push    ecx
.text$mn:0000C4C0                 mov     [ebp+var_4], ecx
.text$mn:0000C4C3                 mov     eax, [ebp+var_4]
.text$mn:0000C4C6                 mov     ecx, [ebp+var_4]
.text$mn:0000C4C9                 mov     eax, [eax+0Ch]
.text$mn:0000C4CC                 sub     eax, [ecx+8]
.text$mn:0000C4CF                 cdq
.text$mn:0000C4D0                 mov     ecx, 1Ch
.text$mn:0000C4D5                 idiv    ecx
.text$mn:0000C4D7                 mov     esp, ebp
.text$mn:0000C4D9                 pop     ebp
.text$mn:0000C4DA                 retn
.text$mn:0000C4DA ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000C4DA
.text$mn:0000C4DA ; ---------------------------------------------------------------------------
.text$mn:0000C4DB                 align 4
.text$mn:0000C4DB _text$mn        ends
.text$mn:0000C4DB
.text$mn:0000C4DC ; ===========================================================================
.text$mn:0000C4DC
.text$mn:0000C4DC ; Segment type: Pure code
.text$mn:0000C4DC ; Segment permissions: Read/Execute
.text$mn:0000C4DC _text$mn        segment para public 'CODE' use32
.text$mn:0000C4DC                 assume cs:_text$mn
.text$mn:0000C4DC                 ;org 0C4DCh
.text$mn:0000C4DC ; COMDAT (pick any)
.text$mn:0000C4DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4DC
.text$mn:0000C4DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4DC
.text$mn:0000C4DC ; Attributes: bp-based frame
.text$mn:0000C4DC
.text$mn:0000C4DC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:0000C4DC                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000C4DC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000C4DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:0000C4DC
.text$mn:0000C4DC var_4           = dword ptr -4
.text$mn:0000C4DC
.text$mn:0000C4DC                 push    ebp
.text$mn:0000C4DD                 mov     ebp, esp
.text$mn:0000C4DF                 push    ecx
.text$mn:0000C4E0                 mov     [ebp+var_4], ecx
.text$mn:0000C4E3                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000C4E8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C4ED                 mov     esp, ebp
.text$mn:0000C4EF                 pop     ebp
.text$mn:0000C4F0                 retn
.text$mn:0000C4F0 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000C4F0
.text$mn:0000C4F0 ; ---------------------------------------------------------------------------
.text$mn:0000C4F1                 align 4
.text$mn:0000C4F1 _text$mn        ends
.text$mn:0000C4F1
.text$mn:0000C4F4 ; ===========================================================================
.text$mn:0000C4F4
.text$mn:0000C4F4 ; Segment type: Pure code
.text$mn:0000C4F4 ; Segment permissions: Read/Execute
.text$mn:0000C4F4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4F4                 assume cs:_text$mn
.text$mn:0000C4F4                 ;org 0C4F4h
.text$mn:0000C4F4 ; COMDAT (pick any)
.text$mn:0000C4F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4F4
.text$mn:0000C4F4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4F4
.text$mn:0000C4F4 ; Attributes: bp-based frame
.text$mn:0000C4F4
.text$mn:0000C4F4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:0000C4F4                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000C4F4 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000C4F4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:0000C4F4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:0000C4F4
.text$mn:0000C4F4 var_4           = dword ptr -4
.text$mn:0000C4F4
.text$mn:0000C4F4                 push    ebp
.text$mn:0000C4F5                 mov     ebp, esp
.text$mn:0000C4F7                 push    ecx
.text$mn:0000C4F8                 mov     [ebp+var_4], ecx
.text$mn:0000C4FB                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000C500                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C505                 mov     esp, ebp
.text$mn:0000C507                 pop     ebp
.text$mn:0000C508                 retn
.text$mn:0000C508 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000C508
.text$mn:0000C508 ; ---------------------------------------------------------------------------
.text$mn:0000C509                 align 4
.text$mn:0000C509 _text$mn        ends
.text$mn:0000C509
.text$mn:0000C50C ; ===========================================================================
.text$mn:0000C50C
.text$mn:0000C50C ; Segment type: Pure code
.text$mn:0000C50C ; Segment permissions: Read/Execute
.text$mn:0000C50C _text$mn        segment para public 'CODE' use32
.text$mn:0000C50C                 assume cs:_text$mn
.text$mn:0000C50C                 ;org 0C50Ch
.text$mn:0000C50C ; COMDAT (pick any)
.text$mn:0000C50C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C50C
.text$mn:0000C50C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C50C
.text$mn:0000C50C ; Attributes: bp-based frame
.text$mn:0000C50C
.text$mn:0000C50C ; protected: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::_Xlen(void)const
.text$mn:0000C50C                 public ?_Xlen@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXXZ
.text$mn:0000C50C ?_Xlen@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXXZ proc near
.text$mn:0000C50C                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+31p
.text$mn:0000C50C
.text$mn:0000C50C var_4           = dword ptr -4
.text$mn:0000C50C
.text$mn:0000C50C                 push    ebp
.text$mn:0000C50D                 mov     ebp, esp
.text$mn:0000C50F                 push    ecx
.text$mn:0000C510                 mov     [ebp+var_4], ecx
.text$mn:0000C513                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C518                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C51D                 mov     esp, ebp
.text$mn:0000C51F                 pop     ebp
.text$mn:0000C520                 retn
.text$mn:0000C520 ?_Xlen@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXXZ endp
.text$mn:0000C520
.text$mn:0000C520 ; ---------------------------------------------------------------------------
.text$mn:0000C521                 align 4
.text$mn:0000C521 _text$mn        ends
.text$mn:0000C521
.text$mn:0000C524 ; ===========================================================================
.text$mn:0000C524
.text$mn:0000C524 ; Segment type: Pure code
.text$mn:0000C524 ; Segment permissions: Read/Execute
.text$mn:0000C524 _text$mn        segment para public 'CODE' use32
.text$mn:0000C524                 assume cs:_text$mn
.text$mn:0000C524                 ;org 0C524h
.text$mn:0000C524 ; COMDAT (pick any)
.text$mn:0000C524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C524
.text$mn:0000C524 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C524
.text$mn:0000C524 ; Attributes: bp-based frame
.text$mn:0000C524
.text$mn:0000C524 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:0000C524                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:0000C524 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:0000C524                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+31p
.text$mn:0000C524
.text$mn:0000C524 var_4           = dword ptr -4
.text$mn:0000C524
.text$mn:0000C524                 push    ebp
.text$mn:0000C525                 mov     ebp, esp
.text$mn:0000C527                 push    ecx
.text$mn:0000C528                 mov     [ebp+var_4], ecx
.text$mn:0000C52B                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C530                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C535                 mov     esp, ebp
.text$mn:0000C537                 pop     ebp
.text$mn:0000C538                 retn
.text$mn:0000C538 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:0000C538
.text$mn:0000C538 ; ---------------------------------------------------------------------------
.text$mn:0000C539                 align 4
.text$mn:0000C539 _text$mn        ends
.text$mn:0000C539
.text$mn:0000C53C ; ===========================================================================
.text$mn:0000C53C
.text$mn:0000C53C ; Segment type: Pure code
.text$mn:0000C53C ; Segment permissions: Read/Execute
.text$mn:0000C53C _text$mn        segment para public 'CODE' use32
.text$mn:0000C53C                 assume cs:_text$mn
.text$mn:0000C53C                 ;org 0C53Ch
.text$mn:0000C53C ; COMDAT (pick any)
.text$mn:0000C53C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C53C
.text$mn:0000C53C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C53C
.text$mn:0000C53C ; Attributes: bp-based frame
.text$mn:0000C53C
.text$mn:0000C53C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:0000C53C                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000C53C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000C53C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:0000C53C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:0000C53C
.text$mn:0000C53C var_4           = dword ptr -4
.text$mn:0000C53C
.text$mn:0000C53C                 push    ebp
.text$mn:0000C53D                 mov     ebp, esp
.text$mn:0000C53F                 push    ecx
.text$mn:0000C540                 mov     [ebp+var_4], ecx
.text$mn:0000C543                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000C548                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000C54D                 mov     esp, ebp
.text$mn:0000C54F                 pop     ebp
.text$mn:0000C550                 retn
.text$mn:0000C550 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000C550
.text$mn:0000C550 ; ---------------------------------------------------------------------------
.text$mn:0000C551                 align 4
.text$mn:0000C551 _text$mn        ends
.text$mn:0000C551
.text$mn:0000C554 ; ===========================================================================
.text$mn:0000C554
.text$mn:0000C554 ; Segment type: Pure code
.text$mn:0000C554 ; Segment permissions: Read/Execute
.text$mn:0000C554 _text$mn        segment para public 'CODE' use32
.text$mn:0000C554                 assume cs:_text$mn
.text$mn:0000C554                 ;org 0C554h
.text$mn:0000C554 ; COMDAT (pick any)
.text$mn:0000C554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C554
.text$mn:0000C554 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C554
.text$mn:0000C554 ; Attributes: bp-based frame
.text$mn:0000C554
.text$mn:0000C554 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:0000C554                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000C554 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000C554                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:0000C554                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:0000C554
.text$mn:0000C554 var_4           = dword ptr -4
.text$mn:0000C554
.text$mn:0000C554                 push    ebp
.text$mn:0000C555                 mov     ebp, esp
.text$mn:0000C557                 push    ecx
.text$mn:0000C558                 mov     [ebp+var_4], ecx
.text$mn:0000C55B                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000C560                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000C565                 mov     esp, ebp
.text$mn:0000C567                 pop     ebp
.text$mn:0000C568                 retn
.text$mn:0000C568 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000C568
.text$mn:0000C568 ; ---------------------------------------------------------------------------
.text$mn:0000C569                 align 4
.text$mn:0000C569 _text$mn        ends
.text$mn:0000C569
.text$mn:0000C56C ; ===========================================================================
.text$mn:0000C56C
.text$mn:0000C56C ; Segment type: Pure code
.text$mn:0000C56C ; Segment permissions: Read/Execute
.text$mn:0000C56C _text$mn        segment para public 'CODE' use32
.text$mn:0000C56C                 assume cs:_text$mn
.text$mn:0000C56C                 ;org 0C56Ch
.text$mn:0000C56C ; COMDAT (pick any)
.text$mn:0000C56C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C56C
.text$mn:0000C56C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C56C
.text$mn:0000C56C ; Attributes: bp-based frame
.text$mn:0000C56C
.text$mn:0000C56C ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:0000C56C                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:0000C56C ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:0000C56C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:0000C56C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:0000C56C
.text$mn:0000C56C var_4           = dword ptr -4
.text$mn:0000C56C arg_0           = dword ptr  8
.text$mn:0000C56C
.text$mn:0000C56C                 push    ebp
.text$mn:0000C56D                 mov     ebp, esp
.text$mn:0000C56F                 push    ecx
.text$mn:0000C570                 mov     [ebp+var_4], ecx
.text$mn:0000C573                 mov     eax, [ebp+arg_0]
.text$mn:0000C576                 push    eax
.text$mn:0000C577                 mov     ecx, [ebp+var_4]
.text$mn:0000C57A                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000C57F                 mov     esp, ebp
.text$mn:0000C581                 pop     ebp
.text$mn:0000C582                 retn    4
.text$mn:0000C582 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000C582
.text$mn:0000C582 ; ---------------------------------------------------------------------------
.text$mn:0000C585                 align 4
.text$mn:0000C585 _text$mn        ends
.text$mn:0000C585
.text$mn:0000C588 ; ===========================================================================
.text$mn:0000C588
.text$mn:0000C588 ; Segment type: Pure code
.text$mn:0000C588 ; Segment permissions: Read/Execute
.text$mn:0000C588 _text$mn        segment para public 'CODE' use32
.text$mn:0000C588                 assume cs:_text$mn
.text$mn:0000C588                 ;org 0C588h
.text$mn:0000C588 ; COMDAT (pick any)
.text$mn:0000C588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C588
.text$mn:0000C588 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C588
.text$mn:0000C588 ; Attributes: bp-based frame
.text$mn:0000C588
.text$mn:0000C588 ; public: struct MatchedCharInserted * __thiscall std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>::allocate(unsigned int)
.text$mn:0000C588                 public ?allocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEPAUMatchedCharInserted@@I@Z
.text$mn:0000C588 ?allocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEPAUMatchedCharInserted@@I@Z proc near
.text$mn:0000C588                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+41p
.text$mn:0000C588
.text$mn:0000C588 var_4           = dword ptr -4
.text$mn:0000C588 arg_0           = dword ptr  8
.text$mn:0000C588
.text$mn:0000C588                 push    ebp
.text$mn:0000C589                 mov     ebp, esp
.text$mn:0000C58B                 push    ecx
.text$mn:0000C58C                 mov     [ebp+var_4], ecx
.text$mn:0000C58F                 mov     eax, [ebp+arg_0]
.text$mn:0000C592                 push    eax
.text$mn:0000C593                 mov     ecx, [ebp+var_4]
.text$mn:0000C596                 call    ?allocate@?$allocator@UMatchedCharInserted@@@std@@QAEPAUMatchedCharInserted@@I@Z ; std::allocator<MatchedCharInserted>::allocate(uint)
.text$mn:0000C59B                 mov     esp, ebp
.text$mn:0000C59D                 pop     ebp
.text$mn:0000C59E                 retn    4
.text$mn:0000C59E ?allocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEPAUMatchedCharInserted@@I@Z endp
.text$mn:0000C59E
.text$mn:0000C59E ; ---------------------------------------------------------------------------
.text$mn:0000C5A1                 align 4
.text$mn:0000C5A1 _text$mn        ends
.text$mn:0000C5A1
.text$mn:0000C5A4 ; ===========================================================================
.text$mn:0000C5A4
.text$mn:0000C5A4 ; Segment type: Pure code
.text$mn:0000C5A4 ; Segment permissions: Read/Execute
.text$mn:0000C5A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C5A4                 assume cs:_text$mn
.text$mn:0000C5A4                 ;org 0C5A4h
.text$mn:0000C5A4 ; COMDAT (pick any)
.text$mn:0000C5A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5A4
.text$mn:0000C5A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5A4
.text$mn:0000C5A4 ; Attributes: bp-based frame
.text$mn:0000C5A4
.text$mn:0000C5A4 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:0000C5A4                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000C5A4 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000C5A4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+16p
.text$mn:0000C5A4
.text$mn:0000C5A4 var_4           = dword ptr -4
.text$mn:0000C5A4 arg_0           = dword ptr  8
.text$mn:0000C5A4
.text$mn:0000C5A4                 push    ebp
.text$mn:0000C5A5                 mov     ebp, esp
.text$mn:0000C5A7                 push    ecx
.text$mn:0000C5A8                 mov     [ebp+var_4], ecx
.text$mn:0000C5AB                 mov     eax, [ebp+arg_0]
.text$mn:0000C5AE                 push    eax
.text$mn:0000C5AF                 mov     ecx, [ebp+var_4]
.text$mn:0000C5B2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000C5B7                 mov     esp, ebp
.text$mn:0000C5B9                 pop     ebp
.text$mn:0000C5BA                 retn    4
.text$mn:0000C5BA ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000C5BA
.text$mn:0000C5BA ; ---------------------------------------------------------------------------
.text$mn:0000C5BD                 align 10h
.text$mn:0000C5BD _text$mn        ends
.text$mn:0000C5BD
.text$mn:0000C5C0 ; ===========================================================================
.text$mn:0000C5C0
.text$mn:0000C5C0 ; Segment type: Pure code
.text$mn:0000C5C0 ; Segment permissions: Read/Execute
.text$mn:0000C5C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C5C0                 assume cs:_text$mn
.text$mn:0000C5C0                 ;org 0C5C0h
.text$mn:0000C5C0 ; COMDAT (pick any)
.text$mn:0000C5C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5C0
.text$mn:0000C5C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5C0
.text$mn:0000C5C0 ; Attributes: bp-based frame
.text$mn:0000C5C0
.text$mn:0000C5C0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:0000C5C0                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000C5C0 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000C5C0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+41p
.text$mn:0000C5C0
.text$mn:0000C5C0 var_4           = dword ptr -4
.text$mn:0000C5C0 arg_0           = dword ptr  8
.text$mn:0000C5C0
.text$mn:0000C5C0                 push    ebp
.text$mn:0000C5C1                 mov     ebp, esp
.text$mn:0000C5C3                 push    ecx
.text$mn:0000C5C4                 mov     [ebp+var_4], ecx
.text$mn:0000C5C7                 mov     eax, [ebp+arg_0]
.text$mn:0000C5CA                 push    eax
.text$mn:0000C5CB                 mov     ecx, [ebp+var_4]
.text$mn:0000C5CE                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:0000C5D3                 mov     esp, ebp
.text$mn:0000C5D5                 pop     ebp
.text$mn:0000C5D6                 retn    4
.text$mn:0000C5D6 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000C5D6
.text$mn:0000C5D6 ; ---------------------------------------------------------------------------
.text$mn:0000C5D9                 align 4
.text$mn:0000C5D9 _text$mn        ends
.text$mn:0000C5D9
.text$mn:0000C5DC ; ===========================================================================
.text$mn:0000C5DC
.text$mn:0000C5DC ; Segment type: Pure code
.text$mn:0000C5DC ; Segment permissions: Read/Execute
.text$mn:0000C5DC _text$mn        segment para public 'CODE' use32
.text$mn:0000C5DC                 assume cs:_text$mn
.text$mn:0000C5DC                 ;org 0C5DCh
.text$mn:0000C5DC ; COMDAT (pick any)
.text$mn:0000C5DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5DC
.text$mn:0000C5DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5DC
.text$mn:0000C5DC ; Attributes: bp-based frame
.text$mn:0000C5DC
.text$mn:0000C5DC ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:0000C5DC                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:0000C5DC ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:0000C5DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:0000C5DC                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:0000C5DC
.text$mn:0000C5DC var_4           = dword ptr -4
.text$mn:0000C5DC arg_0           = dword ptr  8
.text$mn:0000C5DC
.text$mn:0000C5DC                 push    ebp
.text$mn:0000C5DD                 mov     ebp, esp
.text$mn:0000C5DF                 push    ecx
.text$mn:0000C5E0                 mov     [ebp+var_4], ecx
.text$mn:0000C5E3                 mov     eax, [ebp+arg_0]
.text$mn:0000C5E6                 push    eax
.text$mn:0000C5E7                 mov     ecx, [ebp+var_4]
.text$mn:0000C5EA                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000C5EF                 mov     esp, ebp
.text$mn:0000C5F1                 pop     ebp
.text$mn:0000C5F2                 retn    4
.text$mn:0000C5F2 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:0000C5F2
.text$mn:0000C5F2 ; ---------------------------------------------------------------------------
.text$mn:0000C5F5                 align 4
.text$mn:0000C5F5 _text$mn        ends
.text$mn:0000C5F5
.text$mn:0000C5F8 ; ===========================================================================
.text$mn:0000C5F8
.text$mn:0000C5F8 ; Segment type: Pure code
.text$mn:0000C5F8 ; Segment permissions: Read/Execute
.text$mn:0000C5F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C5F8                 assume cs:_text$mn
.text$mn:0000C5F8                 ;org 0C5F8h
.text$mn:0000C5F8 ; COMDAT (pick any)
.text$mn:0000C5F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5F8
.text$mn:0000C5F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5F8
.text$mn:0000C5F8 ; Attributes: bp-based frame
.text$mn:0000C5F8
.text$mn:0000C5F8 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:0000C5F8                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:0000C5F8 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:0000C5F8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:0000C5F8
.text$mn:0000C5F8 var_4           = dword ptr -4
.text$mn:0000C5F8 arg_0           = dword ptr  8
.text$mn:0000C5F8
.text$mn:0000C5F8                 push    ebp
.text$mn:0000C5F9                 mov     ebp, esp
.text$mn:0000C5FB                 push    ecx
.text$mn:0000C5FC                 mov     [ebp+var_4], ecx
.text$mn:0000C5FF                 push    0
.text$mn:0000C601                 mov     eax, [ebp+arg_0]
.text$mn:0000C604                 push    eax
.text$mn:0000C605                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000C60A                 add     esp, 8
.text$mn:0000C60D                 mov     esp, ebp
.text$mn:0000C60F                 pop     ebp
.text$mn:0000C610                 retn    4
.text$mn:0000C610 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:0000C610
.text$mn:0000C610 ; ---------------------------------------------------------------------------
.text$mn:0000C613                 align 4
.text$mn:0000C613 _text$mn        ends
.text$mn:0000C613
.text$mn:0000C614 ; ===========================================================================
.text$mn:0000C614
.text$mn:0000C614 ; Segment type: Pure code
.text$mn:0000C614 ; Segment permissions: Read/Execute
.text$mn:0000C614 _text$mn        segment para public 'CODE' use32
.text$mn:0000C614                 assume cs:_text$mn
.text$mn:0000C614                 ;org 0C614h
.text$mn:0000C614 ; COMDAT (pick any)
.text$mn:0000C614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C614
.text$mn:0000C614 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C614
.text$mn:0000C614 ; Attributes: bp-based frame
.text$mn:0000C614
.text$mn:0000C614 ; public: struct MatchedCharInserted * __thiscall std::allocator<struct MatchedCharInserted>::allocate(unsigned int)
.text$mn:0000C614                 public ?allocate@?$allocator@UMatchedCharInserted@@@std@@QAEPAUMatchedCharInserted@@I@Z
.text$mn:0000C614 ?allocate@?$allocator@UMatchedCharInserted@@@std@@QAEPAUMatchedCharInserted@@I@Z proc near
.text$mn:0000C614                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::allocate(uint)+Ep
.text$mn:0000C614
.text$mn:0000C614 var_4           = dword ptr -4
.text$mn:0000C614 arg_0           = dword ptr  8
.text$mn:0000C614
.text$mn:0000C614                 push    ebp
.text$mn:0000C615                 mov     ebp, esp
.text$mn:0000C617                 push    ecx
.text$mn:0000C618                 mov     [ebp+var_4], ecx
.text$mn:0000C61B                 push    0
.text$mn:0000C61D                 mov     eax, [ebp+arg_0]
.text$mn:0000C620                 push    eax
.text$mn:0000C621                 call    ??$_Allocate@UMatchedCharInserted@@@std@@YAPAUMatchedCharInserted@@IPAU1@@Z ; std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *)
.text$mn:0000C626                 add     esp, 8
.text$mn:0000C629                 mov     esp, ebp
.text$mn:0000C62B                 pop     ebp
.text$mn:0000C62C                 retn    4
.text$mn:0000C62C ?allocate@?$allocator@UMatchedCharInserted@@@std@@QAEPAUMatchedCharInserted@@I@Z endp
.text$mn:0000C62C
.text$mn:0000C62C ; ---------------------------------------------------------------------------
.text$mn:0000C62F                 align 10h
.text$mn:0000C62F _text$mn        ends
.text$mn:0000C62F
.text$mn:0000C630 ; ===========================================================================
.text$mn:0000C630
.text$mn:0000C630 ; Segment type: Pure code
.text$mn:0000C630 ; Segment permissions: Read/Execute
.text$mn:0000C630 _text$mn        segment para public 'CODE' use32
.text$mn:0000C630                 assume cs:_text$mn
.text$mn:0000C630                 ;org 0C630h
.text$mn:0000C630 ; COMDAT (pick any)
.text$mn:0000C630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C630
.text$mn:0000C630 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C630
.text$mn:0000C630 ; Attributes: bp-based frame
.text$mn:0000C630
.text$mn:0000C630 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:0000C630                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000C630 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000C630                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:0000C630                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:0000C630
.text$mn:0000C630 var_4           = dword ptr -4
.text$mn:0000C630 arg_0           = dword ptr  8
.text$mn:0000C630
.text$mn:0000C630                 push    ebp
.text$mn:0000C631                 mov     ebp, esp
.text$mn:0000C633                 push    ecx
.text$mn:0000C634                 mov     [ebp+var_4], ecx
.text$mn:0000C637                 push    0
.text$mn:0000C639                 mov     eax, [ebp+arg_0]
.text$mn:0000C63C                 push    eax
.text$mn:0000C63D                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000C642                 add     esp, 8
.text$mn:0000C645                 mov     esp, ebp
.text$mn:0000C647                 pop     ebp
.text$mn:0000C648                 retn    4
.text$mn:0000C648 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000C648
.text$mn:0000C648 ; ---------------------------------------------------------------------------
.text$mn:0000C64B                 align 4
.text$mn:0000C64B _text$mn        ends
.text$mn:0000C64B
.text$mn:0000C64C ; ===========================================================================
.text$mn:0000C64C
.text$mn:0000C64C ; Segment type: Pure code
.text$mn:0000C64C ; Segment permissions: Read/Execute
.text$mn:0000C64C _text$mn        segment para public 'CODE' use32
.text$mn:0000C64C                 assume cs:_text$mn
.text$mn:0000C64C                 ;org 0C64Ch
.text$mn:0000C64C ; COMDAT (pick any)
.text$mn:0000C64C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C64C
.text$mn:0000C64C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C64C
.text$mn:0000C64C ; Attributes: bp-based frame
.text$mn:0000C64C
.text$mn:0000C64C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:0000C64C                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000C64C ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000C64C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:0000C64C
.text$mn:0000C64C var_4           = dword ptr -4
.text$mn:0000C64C arg_0           = dword ptr  8
.text$mn:0000C64C
.text$mn:0000C64C                 push    ebp
.text$mn:0000C64D                 mov     ebp, esp
.text$mn:0000C64F                 push    ecx
.text$mn:0000C650                 mov     [ebp+var_4], ecx
.text$mn:0000C653                 push    0
.text$mn:0000C655                 mov     eax, [ebp+arg_0]
.text$mn:0000C658                 push    eax
.text$mn:0000C659                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000C65E                 add     esp, 8
.text$mn:0000C661                 mov     esp, ebp
.text$mn:0000C663                 pop     ebp
.text$mn:0000C664                 retn    4
.text$mn:0000C664 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000C664
.text$mn:0000C664 ; ---------------------------------------------------------------------------
.text$mn:0000C667                 align 4
.text$mn:0000C667 _text$mn        ends
.text$mn:0000C667
.text$mn:0000C668 ; ===========================================================================
.text$mn:0000C668
.text$mn:0000C668 ; Segment type: Pure code
.text$mn:0000C668 ; Segment permissions: Read/Execute
.text$mn:0000C668 _text$mn        segment para public 'CODE' use32
.text$mn:0000C668                 assume cs:_text$mn
.text$mn:0000C668                 ;org 0C668h
.text$mn:0000C668 ; COMDAT (pick any)
.text$mn:0000C668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C668
.text$mn:0000C668 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C668
.text$mn:0000C668 ; Attributes: bp-based frame
.text$mn:0000C668
.text$mn:0000C668 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:0000C668                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:0000C668 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:0000C668                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:0000C668
.text$mn:0000C668 var_4           = dword ptr -4
.text$mn:0000C668 arg_0           = dword ptr  8
.text$mn:0000C668
.text$mn:0000C668                 push    ebp
.text$mn:0000C669                 mov     ebp, esp
.text$mn:0000C66B                 push    ecx
.text$mn:0000C66C                 mov     [ebp+var_4], ecx
.text$mn:0000C66F                 push    0
.text$mn:0000C671                 mov     eax, [ebp+arg_0]
.text$mn:0000C674                 push    eax
.text$mn:0000C675                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:0000C67A                 add     esp, 8
.text$mn:0000C67D                 mov     esp, ebp
.text$mn:0000C67F                 pop     ebp
.text$mn:0000C680                 retn    4
.text$mn:0000C680 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000C680
.text$mn:0000C680 ; ---------------------------------------------------------------------------
.text$mn:0000C683                 align 4
.text$mn:0000C683 _text$mn        ends
.text$mn:0000C683
.text$mn:0000C684 ; ===========================================================================
.text$mn:0000C684
.text$mn:0000C684 ; Segment type: Pure code
.text$mn:0000C684 ; Segment permissions: Read/Execute
.text$mn:0000C684 _text$mn        segment para public 'CODE' use32
.text$mn:0000C684                 assume cs:_text$mn
.text$mn:0000C684                 ;org 0C684h
.text$mn:0000C684 ; COMDAT (pick any)
.text$mn:0000C684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C684
.text$mn:0000C684 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C684
.text$mn:0000C684 ; Attributes: bp-based frame
.text$mn:0000C684
.text$mn:0000C684 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000C684                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000C684 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000C684                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+6F9p
.text$mn:0000C684                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:0000C684
.text$mn:0000C684 var_4           = dword ptr -4
.text$mn:0000C684 arg_0           = dword ptr  8
.text$mn:0000C684
.text$mn:0000C684                 push    ebp
.text$mn:0000C685                 mov     ebp, esp
.text$mn:0000C687                 push    ecx
.text$mn:0000C688                 mov     [ebp+var_4], ecx
.text$mn:0000C68B                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000C690                 push    eax
.text$mn:0000C691                 push    0
.text$mn:0000C693                 mov     ecx, [ebp+arg_0]
.text$mn:0000C696                 push    ecx
.text$mn:0000C697                 mov     ecx, [ebp+var_4]
.text$mn:0000C69A                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000C69F                 mov     esp, ebp
.text$mn:0000C6A1                 pop     ebp
.text$mn:0000C6A2                 retn    4
.text$mn:0000C6A2 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000C6A2
.text$mn:0000C6A2 ; ---------------------------------------------------------------------------
.text$mn:0000C6A5                 align 4
.text$mn:0000C6A5 _text$mn        ends
.text$mn:0000C6A5
.text$mn:0000C6A8 ; ===========================================================================
.text$mn:0000C6A8
.text$mn:0000C6A8 ; Segment type: Pure code
.text$mn:0000C6A8 ; Segment permissions: Read/Execute
.text$mn:0000C6A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C6A8                 assume cs:_text$mn
.text$mn:0000C6A8                 ;org 0C6A8h
.text$mn:0000C6A8 ; COMDAT (pick any)
.text$mn:0000C6A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C6A8
.text$mn:0000C6A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C6A8
.text$mn:0000C6A8 ; Attributes: bp-based frame
.text$mn:0000C6A8
.text$mn:0000C6A8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000C6A8                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000C6A8 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000C6A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:0000C6A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:0000C6A8
.text$mn:0000C6A8 var_8           = dword ptr -8
.text$mn:0000C6A8 var_4           = dword ptr -4
.text$mn:0000C6A8 arg_0           = dword ptr  8
.text$mn:0000C6A8 arg_4           = dword ptr  0Ch
.text$mn:0000C6A8 arg_8           = dword ptr  10h
.text$mn:0000C6A8
.text$mn:0000C6A8                 push    ebp
.text$mn:0000C6A9                 mov     ebp, esp
.text$mn:0000C6AB                 sub     esp, 8
.text$mn:0000C6AE                 mov     [ebp+var_4], ecx
.text$mn:0000C6B1                 mov     ecx, [ebp+arg_0]
.text$mn:0000C6B4                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000C6B9                 cmp     eax, [ebp+arg_4]
.text$mn:0000C6BC                 jnb     short loc_C6C6
.text$mn:0000C6BE                 mov     ecx, [ebp+var_4]
.text$mn:0000C6C1                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000C6C6
.text$mn:0000C6C6 loc_C6C6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000C6C6                 mov     ecx, [ebp+arg_0]
.text$mn:0000C6C9                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000C6CE                 sub     eax, [ebp+arg_4]
.text$mn:0000C6D1                 mov     [ebp+var_8], eax
.text$mn:0000C6D4                 mov     eax, [ebp+var_8]
.text$mn:0000C6D7                 cmp     eax, [ebp+arg_8]
.text$mn:0000C6DA                 jnb     short loc_C6E2
.text$mn:0000C6DC                 mov     ecx, [ebp+var_8]
.text$mn:0000C6DF                 mov     [ebp+arg_8], ecx
.text$mn:0000C6E2
.text$mn:0000C6E2 loc_C6E2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000C6E2                 mov     edx, [ebp+var_4]
.text$mn:0000C6E5                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000C6EA                 sub     eax, [edx+14h]
.text$mn:0000C6ED                 cmp     eax, [ebp+arg_8]
.text$mn:0000C6F0                 ja      short loc_C6FA
.text$mn:0000C6F2                 mov     ecx, [ebp+var_4]
.text$mn:0000C6F5                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C6FA
.text$mn:0000C6FA loc_C6FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:0000C6FA                 cmp     [ebp+arg_8], 0
.text$mn:0000C6FE                 jbe     short loc_C75A
.text$mn:0000C700                 mov     ecx, [ebp+var_4]
.text$mn:0000C703                 mov     edx, [ecx+14h]
.text$mn:0000C706                 add     edx, [ebp+arg_8]
.text$mn:0000C709                 mov     [ebp+var_8], edx
.text$mn:0000C70C                 push    0
.text$mn:0000C70E                 mov     eax, [ebp+var_8]
.text$mn:0000C711                 push    eax
.text$mn:0000C712                 mov     ecx, [ebp+var_4]
.text$mn:0000C715                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C71A                 movzx   ecx, al
.text$mn:0000C71D                 test    ecx, ecx
.text$mn:0000C71F                 jz      short loc_C75A
.text$mn:0000C721                 mov     edx, [ebp+arg_8]
.text$mn:0000C724                 push    edx             ; int
.text$mn:0000C725                 mov     ecx, [ebp+arg_0]
.text$mn:0000C728                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C72D                 mov     ecx, [ebp+arg_4]
.text$mn:0000C730                 lea     edx, [eax+ecx*2]
.text$mn:0000C733                 push    edx             ; Src
.text$mn:0000C734                 mov     ecx, [ebp+var_4]
.text$mn:0000C737                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C73C                 mov     ecx, [ebp+var_4]
.text$mn:0000C73F                 mov     edx, [ecx+14h]
.text$mn:0000C742                 lea     eax, [eax+edx*2]
.text$mn:0000C745                 push    eax             ; Dst
.text$mn:0000C746                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C74B                 add     esp, 0Ch
.text$mn:0000C74E                 mov     ecx, [ebp+var_8]
.text$mn:0000C751                 push    ecx
.text$mn:0000C752                 mov     ecx, [ebp+var_4]
.text$mn:0000C755                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C75A
.text$mn:0000C75A loc_C75A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:0000C75A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:0000C75A                 mov     eax, [ebp+var_4]
.text$mn:0000C75D                 mov     esp, ebp
.text$mn:0000C75F                 pop     ebp
.text$mn:0000C760                 retn    0Ch
.text$mn:0000C760 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000C760
.text$mn:0000C760 ; ---------------------------------------------------------------------------
.text$mn:0000C763                 align 4
.text$mn:0000C763 _text$mn        ends
.text$mn:0000C763
.text$mn:0000C764 ; ===========================================================================
.text$mn:0000C764
.text$mn:0000C764 ; Segment type: Pure code
.text$mn:0000C764 ; Segment permissions: Read/Execute
.text$mn:0000C764 _text$mn        segment para public 'CODE' use32
.text$mn:0000C764                 assume cs:_text$mn
.text$mn:0000C764                 ;org 0C764h
.text$mn:0000C764 ; COMDAT (pick any)
.text$mn:0000C764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C764
.text$mn:0000C764 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C764
.text$mn:0000C764 ; Attributes: bp-based frame
.text$mn:0000C764
.text$mn:0000C764 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:0000C764                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000C764 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000C764                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+70Cp
.text$mn:0000C764                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:0000C764
.text$mn:0000C764 var_4           = dword ptr -4
.text$mn:0000C764 Str             = dword ptr  8
.text$mn:0000C764
.text$mn:0000C764                 push    ebp
.text$mn:0000C765                 mov     ebp, esp
.text$mn:0000C767                 push    ecx
.text$mn:0000C768                 mov     [ebp+var_4], ecx
.text$mn:0000C76B                 push    43Eh            ; unsigned int
.text$mn:0000C770                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C775                 mov     eax, [ebp+Str]
.text$mn:0000C778                 push    eax             ; int
.text$mn:0000C779                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000C77E                 add     esp, 0Ch
.text$mn:0000C781                 mov     ecx, [ebp+Str]
.text$mn:0000C784                 push    ecx             ; Str
.text$mn:0000C785                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000C78A                 add     esp, 4
.text$mn:0000C78D                 push    eax             ; int
.text$mn:0000C78E                 mov     edx, [ebp+Str]
.text$mn:0000C791                 push    edx             ; Src
.text$mn:0000C792                 mov     ecx, [ebp+var_4]
.text$mn:0000C795                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000C79A                 mov     esp, ebp
.text$mn:0000C79C                 pop     ebp
.text$mn:0000C79D                 retn    4
.text$mn:0000C79D ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000C79D
.text$mn:0000C79D _text$mn        ends
.text$mn:0000C79D
.text$mn:0000C7A0 ; ===========================================================================
.text$mn:0000C7A0
.text$mn:0000C7A0 ; Segment type: Pure code
.text$mn:0000C7A0 ; Segment permissions: Read/Execute
.text$mn:0000C7A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C7A0                 assume cs:_text$mn
.text$mn:0000C7A0                 ;org 0C7A0h
.text$mn:0000C7A0 ; COMDAT (pick any)
.text$mn:0000C7A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C7A0
.text$mn:0000C7A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C7A0
.text$mn:0000C7A0 ; Attributes: bp-based frame
.text$mn:0000C7A0
.text$mn:0000C7A0 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:0000C7A0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000C7A0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000C7A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:0000C7A0
.text$mn:0000C7A0 var_8           = dword ptr -8
.text$mn:0000C7A0 var_4           = dword ptr -4
.text$mn:0000C7A0 Src             = dword ptr  8
.text$mn:0000C7A0 arg_4           = dword ptr  0Ch
.text$mn:0000C7A0
.text$mn:0000C7A0                 push    ebp
.text$mn:0000C7A1                 mov     ebp, esp
.text$mn:0000C7A3                 sub     esp, 8
.text$mn:0000C7A6                 mov     [ebp+var_4], ecx
.text$mn:0000C7A9                 cmp     [ebp+arg_4], 0
.text$mn:0000C7AD                 jz      short loc_C7C5
.text$mn:0000C7AF                 push    42Ah            ; unsigned int
.text$mn:0000C7B4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C7B9                 mov     eax, [ebp+Src]
.text$mn:0000C7BC                 push    eax             ; int
.text$mn:0000C7BD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000C7C2                 add     esp, 0Ch
.text$mn:0000C7C5
.text$mn:0000C7C5 loc_C7C5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:0000C7C5                 mov     ecx, [ebp+Src]
.text$mn:0000C7C8                 push    ecx
.text$mn:0000C7C9                 mov     ecx, [ebp+var_4]
.text$mn:0000C7CC                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000C7D1                 movzx   edx, al
.text$mn:0000C7D4                 test    edx, edx
.text$mn:0000C7D6                 jz      short loc_C7FA
.text$mn:0000C7D8                 mov     eax, [ebp+arg_4]
.text$mn:0000C7DB                 push    eax
.text$mn:0000C7DC                 mov     ecx, [ebp+var_4]
.text$mn:0000C7DF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C7E4                 mov     ecx, [ebp+Src]
.text$mn:0000C7E7                 sub     ecx, eax
.text$mn:0000C7E9                 sar     ecx, 1
.text$mn:0000C7EB                 push    ecx
.text$mn:0000C7EC                 mov     edx, [ebp+var_4]
.text$mn:0000C7EF                 push    edx
.text$mn:0000C7F0                 mov     ecx, [ebp+var_4]
.text$mn:0000C7F3                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000C7F8                 jmp     short loc_C86B
.text$mn:0000C7FA ; ---------------------------------------------------------------------------
.text$mn:0000C7FA
.text$mn:0000C7FA loc_C7FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:0000C7FA                 mov     eax, [ebp+var_4]
.text$mn:0000C7FD                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000C803                 sub     ecx, [eax+14h]
.text$mn:0000C806                 cmp     ecx, [ebp+arg_4]
.text$mn:0000C809                 ja      short loc_C813
.text$mn:0000C80B                 mov     ecx, [ebp+var_4]
.text$mn:0000C80E                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C813
.text$mn:0000C813 loc_C813:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:0000C813                 cmp     [ebp+arg_4], 0
.text$mn:0000C817                 jbe     short loc_C868
.text$mn:0000C819                 mov     edx, [ebp+var_4]
.text$mn:0000C81C                 mov     eax, [edx+14h]
.text$mn:0000C81F                 add     eax, [ebp+arg_4]
.text$mn:0000C822                 mov     [ebp+var_8], eax
.text$mn:0000C825                 push    0
.text$mn:0000C827                 mov     ecx, [ebp+var_8]
.text$mn:0000C82A                 push    ecx
.text$mn:0000C82B                 mov     ecx, [ebp+var_4]
.text$mn:0000C82E                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C833                 movzx   edx, al
.text$mn:0000C836                 test    edx, edx
.text$mn:0000C838                 jz      short loc_C868
.text$mn:0000C83A                 mov     eax, [ebp+arg_4]
.text$mn:0000C83D                 push    eax             ; int
.text$mn:0000C83E                 mov     ecx, [ebp+Src]
.text$mn:0000C841                 push    ecx             ; Src
.text$mn:0000C842                 mov     ecx, [ebp+var_4]
.text$mn:0000C845                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C84A                 mov     edx, [ebp+var_4]
.text$mn:0000C84D                 mov     ecx, [edx+14h]
.text$mn:0000C850                 lea     edx, [eax+ecx*2]
.text$mn:0000C853                 push    edx             ; Dst
.text$mn:0000C854                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C859                 add     esp, 0Ch
.text$mn:0000C85C                 mov     eax, [ebp+var_8]
.text$mn:0000C85F                 push    eax
.text$mn:0000C860                 mov     ecx, [ebp+var_4]
.text$mn:0000C863                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C868
.text$mn:0000C868 loc_C868:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:0000C868                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:0000C868                 mov     eax, [ebp+var_4]
.text$mn:0000C86B
.text$mn:0000C86B loc_C86B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:0000C86B                 mov     esp, ebp
.text$mn:0000C86D                 pop     ebp
.text$mn:0000C86E                 retn    8
.text$mn:0000C86E ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000C86E
.text$mn:0000C86E ; ---------------------------------------------------------------------------
.text$mn:0000C871                 align 4
.text$mn:0000C871 _text$mn        ends
.text$mn:0000C871
.text$mn:0000C874 ; ===========================================================================
.text$mn:0000C874
.text$mn:0000C874 ; Segment type: Pure code
.text$mn:0000C874 ; Segment permissions: Read/Execute
.text$mn:0000C874 _text$mn        segment para public 'CODE' use32
.text$mn:0000C874                 assume cs:_text$mn
.text$mn:0000C874                 ;org 0C874h
.text$mn:0000C874 ; COMDAT (pick any)
.text$mn:0000C874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C874
.text$mn:0000C874 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C874
.text$mn:0000C874 ; Attributes: bp-based frame
.text$mn:0000C874
.text$mn:0000C874 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:0000C874                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000C874 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000C874                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:0000C874
.text$mn:0000C874 Size            = dword ptr -8
.text$mn:0000C874 var_4           = dword ptr -4
.text$mn:0000C874 arg_0           = dword ptr  8
.text$mn:0000C874 arg_4           = dword ptr  0Ch
.text$mn:0000C874 arg_8           = dword ptr  10h
.text$mn:0000C874
.text$mn:0000C874                 push    ebp
.text$mn:0000C875                 mov     ebp, esp
.text$mn:0000C877                 sub     esp, 8
.text$mn:0000C87A                 mov     [ebp+var_4], ecx
.text$mn:0000C87D                 mov     ecx, [ebp+arg_0]
.text$mn:0000C880                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000C885                 cmp     eax, [ebp+arg_4]
.text$mn:0000C888                 jnb     short loc_C892
.text$mn:0000C88A                 mov     ecx, [ebp+var_4]
.text$mn:0000C88D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000C892
.text$mn:0000C892 loc_C892:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000C892                 mov     ecx, [ebp+arg_0]
.text$mn:0000C895                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000C89A                 sub     eax, [ebp+arg_4]
.text$mn:0000C89D                 mov     [ebp+Size], eax
.text$mn:0000C8A0                 mov     eax, [ebp+arg_8]
.text$mn:0000C8A3                 cmp     eax, [ebp+Size]
.text$mn:0000C8A6                 jnb     short loc_C8AE
.text$mn:0000C8A8                 mov     ecx, [ebp+arg_8]
.text$mn:0000C8AB                 mov     [ebp+Size], ecx
.text$mn:0000C8AE
.text$mn:0000C8AE loc_C8AE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000C8AE                 mov     edx, [ebp+var_4]
.text$mn:0000C8B1                 cmp     edx, [ebp+arg_0]
.text$mn:0000C8B4                 jnz     short loc_C8D5
.text$mn:0000C8B6                 mov     eax, [ebp+arg_4]
.text$mn:0000C8B9                 add     eax, [ebp+Size]
.text$mn:0000C8BC                 push    eax
.text$mn:0000C8BD                 mov     ecx, [ebp+var_4]
.text$mn:0000C8C0                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:0000C8C5                 mov     ecx, [ebp+arg_4]
.text$mn:0000C8C8                 push    ecx
.text$mn:0000C8C9                 push    0
.text$mn:0000C8CB                 mov     ecx, [ebp+var_4]
.text$mn:0000C8CE                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:0000C8D3                 jmp     short loc_C917
.text$mn:0000C8D5 ; ---------------------------------------------------------------------------
.text$mn:0000C8D5
.text$mn:0000C8D5 loc_C8D5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:0000C8D5                 push    0
.text$mn:0000C8D7                 mov     edx, [ebp+Size]
.text$mn:0000C8DA                 push    edx
.text$mn:0000C8DB                 mov     ecx, [ebp+var_4]
.text$mn:0000C8DE                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000C8E3                 movzx   eax, al
.text$mn:0000C8E6                 test    eax, eax
.text$mn:0000C8E8                 jz      short loc_C917
.text$mn:0000C8EA                 mov     ecx, [ebp+Size]
.text$mn:0000C8ED                 push    ecx             ; Size
.text$mn:0000C8EE                 mov     ecx, [ebp+arg_0]
.text$mn:0000C8F1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C8F6                 add     eax, [ebp+arg_4]
.text$mn:0000C8F9                 push    eax             ; Src
.text$mn:0000C8FA                 mov     ecx, [ebp+var_4]
.text$mn:0000C8FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C902                 push    eax             ; Dst
.text$mn:0000C903                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C908                 add     esp, 0Ch
.text$mn:0000C90B                 mov     edx, [ebp+Size]
.text$mn:0000C90E                 push    edx
.text$mn:0000C90F                 mov     ecx, [ebp+var_4]
.text$mn:0000C912                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000C917
.text$mn:0000C917 loc_C917:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:0000C917                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:0000C917                 mov     eax, [ebp+var_4]
.text$mn:0000C91A                 mov     esp, ebp
.text$mn:0000C91C                 pop     ebp
.text$mn:0000C91D                 retn    0Ch
.text$mn:0000C91D ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000C91D
.text$mn:0000C91D _text$mn        ends
.text$mn:0000C91D
.text$mn:0000C920 ; ===========================================================================
.text$mn:0000C920
.text$mn:0000C920 ; Segment type: Pure code
.text$mn:0000C920 ; Segment permissions: Read/Execute
.text$mn:0000C920 _text$mn        segment para public 'CODE' use32
.text$mn:0000C920                 assume cs:_text$mn
.text$mn:0000C920                 ;org 0C920h
.text$mn:0000C920 ; COMDAT (pick any)
.text$mn:0000C920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C920
.text$mn:0000C920 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C920
.text$mn:0000C920 ; Attributes: bp-based frame
.text$mn:0000C920
.text$mn:0000C920 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:0000C920                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:0000C920 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:0000C920                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:0000C920
.text$mn:0000C920 var_4           = dword ptr -4
.text$mn:0000C920 Str             = dword ptr  8
.text$mn:0000C920
.text$mn:0000C920                 push    ebp
.text$mn:0000C921                 mov     ebp, esp
.text$mn:0000C923                 push    ecx
.text$mn:0000C924                 mov     [ebp+var_4], ecx
.text$mn:0000C927                 push    490h            ; unsigned int
.text$mn:0000C92C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C931                 mov     eax, [ebp+Str]
.text$mn:0000C934                 push    eax             ; int
.text$mn:0000C935                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000C93A                 add     esp, 0Ch
.text$mn:0000C93D                 mov     ecx, [ebp+Str]
.text$mn:0000C940                 push    ecx             ; Str
.text$mn:0000C941                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000C946                 add     esp, 4
.text$mn:0000C949                 push    eax             ; Size
.text$mn:0000C94A                 mov     edx, [ebp+Str]
.text$mn:0000C94D                 push    edx             ; Src
.text$mn:0000C94E                 mov     ecx, [ebp+var_4]
.text$mn:0000C951                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000C956                 mov     esp, ebp
.text$mn:0000C958                 pop     ebp
.text$mn:0000C959                 retn    4
.text$mn:0000C959 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:0000C959
.text$mn:0000C959 _text$mn        ends
.text$mn:0000C959
.text$mn:0000C95C ; ===========================================================================
.text$mn:0000C95C
.text$mn:0000C95C ; Segment type: Pure code
.text$mn:0000C95C ; Segment permissions: Read/Execute
.text$mn:0000C95C _text$mn        segment para public 'CODE' use32
.text$mn:0000C95C                 assume cs:_text$mn
.text$mn:0000C95C                 ;org 0C95Ch
.text$mn:0000C95C ; COMDAT (pick any)
.text$mn:0000C95C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C95C
.text$mn:0000C95C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C95C
.text$mn:0000C95C ; Attributes: bp-based frame
.text$mn:0000C95C
.text$mn:0000C95C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:0000C95C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:0000C95C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:0000C95C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:0000C95C
.text$mn:0000C95C var_4           = dword ptr -4
.text$mn:0000C95C Src             = dword ptr  8
.text$mn:0000C95C Size            = dword ptr  0Ch
.text$mn:0000C95C
.text$mn:0000C95C                 push    ebp
.text$mn:0000C95D                 mov     ebp, esp
.text$mn:0000C95F                 push    ecx
.text$mn:0000C960                 mov     [ebp+var_4], ecx
.text$mn:0000C963                 cmp     [ebp+Size], 0
.text$mn:0000C967                 jz      short loc_C97F
.text$mn:0000C969                 push    47Fh            ; unsigned int
.text$mn:0000C96E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C973                 mov     eax, [ebp+Src]
.text$mn:0000C976                 push    eax             ; int
.text$mn:0000C977                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000C97C                 add     esp, 0Ch
.text$mn:0000C97F
.text$mn:0000C97F loc_C97F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:0000C97F                 mov     ecx, [ebp+Src]
.text$mn:0000C982                 push    ecx
.text$mn:0000C983                 mov     ecx, [ebp+var_4]
.text$mn:0000C986                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000C98B                 movzx   edx, al
.text$mn:0000C98E                 test    edx, edx
.text$mn:0000C990                 jz      short loc_C9B2
.text$mn:0000C992                 mov     eax, [ebp+Size]
.text$mn:0000C995                 push    eax
.text$mn:0000C996                 mov     ecx, [ebp+var_4]
.text$mn:0000C999                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C99E                 mov     ecx, [ebp+Src]
.text$mn:0000C9A1                 sub     ecx, eax
.text$mn:0000C9A3                 push    ecx
.text$mn:0000C9A4                 mov     edx, [ebp+var_4]
.text$mn:0000C9A7                 push    edx
.text$mn:0000C9A8                 mov     ecx, [ebp+var_4]
.text$mn:0000C9AB                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000C9B0                 jmp     short loc_C9EF
.text$mn:0000C9B2 ; ---------------------------------------------------------------------------
.text$mn:0000C9B2
.text$mn:0000C9B2 loc_C9B2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:0000C9B2                 push    0
.text$mn:0000C9B4                 mov     eax, [ebp+Size]
.text$mn:0000C9B7                 push    eax
.text$mn:0000C9B8                 mov     ecx, [ebp+var_4]
.text$mn:0000C9BB                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000C9C0                 movzx   ecx, al
.text$mn:0000C9C3                 test    ecx, ecx
.text$mn:0000C9C5                 jz      short loc_C9EC
.text$mn:0000C9C7                 mov     edx, [ebp+Size]
.text$mn:0000C9CA                 push    edx             ; Size
.text$mn:0000C9CB                 mov     eax, [ebp+Src]
.text$mn:0000C9CE                 push    eax             ; Src
.text$mn:0000C9CF                 mov     ecx, [ebp+var_4]
.text$mn:0000C9D2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C9D7                 push    eax             ; Dst
.text$mn:0000C9D8                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C9DD                 add     esp, 0Ch
.text$mn:0000C9E0                 mov     ecx, [ebp+Size]
.text$mn:0000C9E3                 push    ecx
.text$mn:0000C9E4                 mov     ecx, [ebp+var_4]
.text$mn:0000C9E7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000C9EC
.text$mn:0000C9EC loc_C9EC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:0000C9EC                 mov     eax, [ebp+var_4]
.text$mn:0000C9EF
.text$mn:0000C9EF loc_C9EF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:0000C9EF                 mov     esp, ebp
.text$mn:0000C9F1                 pop     ebp
.text$mn:0000C9F2                 retn    8
.text$mn:0000C9F2 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:0000C9F2
.text$mn:0000C9F2 ; ---------------------------------------------------------------------------
.text$mn:0000C9F5                 align 4
.text$mn:0000C9F5 _text$mn        ends
.text$mn:0000C9F5
.text$mn:0000C9F8 ; ===========================================================================
.text$mn:0000C9F8
.text$mn:0000C9F8 ; Segment type: Pure code
.text$mn:0000C9F8 ; Segment permissions: Read/Execute
.text$mn:0000C9F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C9F8                 assume cs:_text$mn
.text$mn:0000C9F8                 ;org 0C9F8h
.text$mn:0000C9F8 ; COMDAT (pick any)
.text$mn:0000C9F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C9F8
.text$mn:0000C9F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C9F8
.text$mn:0000C9F8 ; Attributes: bp-based frame
.text$mn:0000C9F8
.text$mn:0000C9F8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000C9F8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000C9F8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000C9F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:0000C9F8
.text$mn:0000C9F8 var_4           = dword ptr -4
.text$mn:0000C9F8 arg_0           = dword ptr  8
.text$mn:0000C9F8
.text$mn:0000C9F8                 push    ebp
.text$mn:0000C9F9                 mov     ebp, esp
.text$mn:0000C9FB                 push    ecx
.text$mn:0000C9FC                 mov     [ebp+var_4], ecx
.text$mn:0000C9FF                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000CA04                 push    eax
.text$mn:0000CA05                 push    0
.text$mn:0000CA07                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA0A                 push    ecx
.text$mn:0000CA0B                 mov     ecx, [ebp+var_4]
.text$mn:0000CA0E                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000CA13                 mov     esp, ebp
.text$mn:0000CA15                 pop     ebp
.text$mn:0000CA16                 retn    4
.text$mn:0000CA16 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000CA16
.text$mn:0000CA16 ; ---------------------------------------------------------------------------
.text$mn:0000CA19                 align 4
.text$mn:0000CA19 _text$mn        ends
.text$mn:0000CA19
.text$mn:0000CA1C ; ===========================================================================
.text$mn:0000CA1C
.text$mn:0000CA1C ; Segment type: Pure code
.text$mn:0000CA1C ; Segment permissions: Read/Execute
.text$mn:0000CA1C _text$mn        segment para public 'CODE' use32
.text$mn:0000CA1C                 assume cs:_text$mn
.text$mn:0000CA1C                 ;org 0CA1Ch
.text$mn:0000CA1C ; COMDAT (pick any)
.text$mn:0000CA1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA1C
.text$mn:0000CA1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA1C
.text$mn:0000CA1C ; Attributes: bp-based frame
.text$mn:0000CA1C
.text$mn:0000CA1C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000CA1C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000CA1C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000CA1C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:0000CA1C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)+54p ...
.text$mn:0000CA1C
.text$mn:0000CA1C var_8           = dword ptr -8
.text$mn:0000CA1C var_4           = dword ptr -4
.text$mn:0000CA1C arg_0           = dword ptr  8
.text$mn:0000CA1C arg_4           = dword ptr  0Ch
.text$mn:0000CA1C arg_8           = dword ptr  10h
.text$mn:0000CA1C
.text$mn:0000CA1C                 push    ebp
.text$mn:0000CA1D                 mov     ebp, esp
.text$mn:0000CA1F                 sub     esp, 8
.text$mn:0000CA22                 mov     [ebp+var_4], ecx
.text$mn:0000CA25                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA28                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CA2D                 cmp     eax, [ebp+arg_4]
.text$mn:0000CA30                 jnb     short loc_CA3A
.text$mn:0000CA32                 mov     ecx, [ebp+var_4]
.text$mn:0000CA35                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000CA3A
.text$mn:0000CA3A loc_CA3A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000CA3A                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA3D                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CA42                 sub     eax, [ebp+arg_4]
.text$mn:0000CA45                 mov     [ebp+var_8], eax
.text$mn:0000CA48                 mov     eax, [ebp+arg_8]
.text$mn:0000CA4B                 cmp     eax, [ebp+var_8]
.text$mn:0000CA4E                 jnb     short loc_CA56
.text$mn:0000CA50                 mov     ecx, [ebp+arg_8]
.text$mn:0000CA53                 mov     [ebp+var_8], ecx
.text$mn:0000CA56
.text$mn:0000CA56 loc_CA56:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000CA56                 mov     edx, [ebp+var_4]
.text$mn:0000CA59                 cmp     edx, [ebp+arg_0]
.text$mn:0000CA5C                 jnz     short loc_CA7D
.text$mn:0000CA5E                 mov     eax, [ebp+arg_4]
.text$mn:0000CA61                 add     eax, [ebp+var_8]
.text$mn:0000CA64                 push    eax
.text$mn:0000CA65                 mov     ecx, [ebp+var_4]
.text$mn:0000CA68                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:0000CA6D                 mov     ecx, [ebp+arg_4]
.text$mn:0000CA70                 push    ecx
.text$mn:0000CA71                 push    0
.text$mn:0000CA73                 mov     ecx, [ebp+var_4]
.text$mn:0000CA76                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000CA7B                 jmp     short loc_CAC2
.text$mn:0000CA7D ; ---------------------------------------------------------------------------
.text$mn:0000CA7D
.text$mn:0000CA7D loc_CA7D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:0000CA7D                 push    0
.text$mn:0000CA7F                 mov     edx, [ebp+var_8]
.text$mn:0000CA82                 push    edx
.text$mn:0000CA83                 mov     ecx, [ebp+var_4]
.text$mn:0000CA86                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000CA8B                 movzx   eax, al
.text$mn:0000CA8E                 test    eax, eax
.text$mn:0000CA90                 jz      short loc_CAC2
.text$mn:0000CA92                 mov     ecx, [ebp+var_8]
.text$mn:0000CA95                 push    ecx             ; int
.text$mn:0000CA96                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA99                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CA9E                 mov     edx, [ebp+arg_4]
.text$mn:0000CAA1                 lea     eax, [eax+edx*2]
.text$mn:0000CAA4                 push    eax             ; Src
.text$mn:0000CAA5                 mov     ecx, [ebp+var_4]
.text$mn:0000CAA8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CAAD                 push    eax             ; Dst
.text$mn:0000CAAE                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000CAB3                 add     esp, 0Ch
.text$mn:0000CAB6                 mov     ecx, [ebp+var_8]
.text$mn:0000CAB9                 push    ecx
.text$mn:0000CABA                 mov     ecx, [ebp+var_4]
.text$mn:0000CABD                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000CAC2
.text$mn:0000CAC2 loc_CAC2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:0000CAC2                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:0000CAC2                 mov     eax, [ebp+var_4]
.text$mn:0000CAC5                 mov     esp, ebp
.text$mn:0000CAC7                 pop     ebp
.text$mn:0000CAC8                 retn    0Ch
.text$mn:0000CAC8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000CAC8
.text$mn:0000CAC8 ; ---------------------------------------------------------------------------
.text$mn:0000CACB                 align 4
.text$mn:0000CACB _text$mn        ends
.text$mn:0000CACB
.text$mn:0000CACC ; ===========================================================================
.text$mn:0000CACC
.text$mn:0000CACC ; Segment type: Pure code
.text$mn:0000CACC ; Segment permissions: Read/Execute
.text$mn:0000CACC _text$mn        segment para public 'CODE' use32
.text$mn:0000CACC                 assume cs:_text$mn
.text$mn:0000CACC                 ;org 0CACCh
.text$mn:0000CACC ; COMDAT (pick any)
.text$mn:0000CACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CACC
.text$mn:0000CACC ; =============== S U B R O U T I N E =======================================
.text$mn:0000CACC
.text$mn:0000CACC ; Attributes: bp-based frame
.text$mn:0000CACC
.text$mn:0000CACC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:0000CACC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000CACC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000CACC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:0000CACC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:0000CACC
.text$mn:0000CACC var_4           = dword ptr -4
.text$mn:0000CACC Str             = dword ptr  8
.text$mn:0000CACC
.text$mn:0000CACC                 push    ebp
.text$mn:0000CACD                 mov     ebp, esp
.text$mn:0000CACF                 push    ecx
.text$mn:0000CAD0                 mov     [ebp+var_4], ecx
.text$mn:0000CAD3                 push    490h            ; unsigned int
.text$mn:0000CAD8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CADD                 mov     eax, [ebp+Str]
.text$mn:0000CAE0                 push    eax             ; int
.text$mn:0000CAE1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CAE6                 add     esp, 0Ch
.text$mn:0000CAE9                 mov     ecx, [ebp+Str]
.text$mn:0000CAEC                 push    ecx             ; Str
.text$mn:0000CAED                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000CAF2                 add     esp, 4
.text$mn:0000CAF5                 push    eax             ; int
.text$mn:0000CAF6                 mov     edx, [ebp+Str]
.text$mn:0000CAF9                 push    edx             ; Src
.text$mn:0000CAFA                 mov     ecx, [ebp+var_4]
.text$mn:0000CAFD                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000CB02                 mov     esp, ebp
.text$mn:0000CB04                 pop     ebp
.text$mn:0000CB05                 retn    4
.text$mn:0000CB05 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000CB05
.text$mn:0000CB05 _text$mn        ends
.text$mn:0000CB05
.text$mn:0000CB08 ; ===========================================================================
.text$mn:0000CB08
.text$mn:0000CB08 ; Segment type: Pure code
.text$mn:0000CB08 ; Segment permissions: Read/Execute
.text$mn:0000CB08 _text$mn        segment para public 'CODE' use32
.text$mn:0000CB08                 assume cs:_text$mn
.text$mn:0000CB08                 ;org 0CB08h
.text$mn:0000CB08 ; COMDAT (pick any)
.text$mn:0000CB08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CB08
.text$mn:0000CB08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CB08
.text$mn:0000CB08 ; Attributes: bp-based frame
.text$mn:0000CB08
.text$mn:0000CB08 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:0000CB08                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000CB08 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000CB08                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:0000CB08
.text$mn:0000CB08 var_4           = dword ptr -4
.text$mn:0000CB08 Src             = dword ptr  8
.text$mn:0000CB08 arg_4           = dword ptr  0Ch
.text$mn:0000CB08
.text$mn:0000CB08                 push    ebp
.text$mn:0000CB09                 mov     ebp, esp
.text$mn:0000CB0B                 push    ecx
.text$mn:0000CB0C                 mov     [ebp+var_4], ecx
.text$mn:0000CB0F                 cmp     [ebp+arg_4], 0
.text$mn:0000CB13                 jz      short loc_CB2B
.text$mn:0000CB15                 push    47Fh            ; unsigned int
.text$mn:0000CB1A                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CB1F                 mov     eax, [ebp+Src]
.text$mn:0000CB22                 push    eax             ; int
.text$mn:0000CB23                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CB28                 add     esp, 0Ch
.text$mn:0000CB2B
.text$mn:0000CB2B loc_CB2B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:0000CB2B                 mov     ecx, [ebp+Src]
.text$mn:0000CB2E                 push    ecx
.text$mn:0000CB2F                 mov     ecx, [ebp+var_4]
.text$mn:0000CB32                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000CB37                 movzx   edx, al
.text$mn:0000CB3A                 test    edx, edx
.text$mn:0000CB3C                 jz      short loc_CB60
.text$mn:0000CB3E                 mov     eax, [ebp+arg_4]
.text$mn:0000CB41                 push    eax
.text$mn:0000CB42                 mov     ecx, [ebp+var_4]
.text$mn:0000CB45                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CB4A                 mov     ecx, [ebp+Src]
.text$mn:0000CB4D                 sub     ecx, eax
.text$mn:0000CB4F                 sar     ecx, 1
.text$mn:0000CB51                 push    ecx
.text$mn:0000CB52                 mov     edx, [ebp+var_4]
.text$mn:0000CB55                 push    edx
.text$mn:0000CB56                 mov     ecx, [ebp+var_4]
.text$mn:0000CB59                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000CB5E                 jmp     short loc_CB9D
.text$mn:0000CB60 ; ---------------------------------------------------------------------------
.text$mn:0000CB60
.text$mn:0000CB60 loc_CB60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:0000CB60                 push    0
.text$mn:0000CB62                 mov     eax, [ebp+arg_4]
.text$mn:0000CB65                 push    eax
.text$mn:0000CB66                 mov     ecx, [ebp+var_4]
.text$mn:0000CB69                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000CB6E                 movzx   ecx, al
.text$mn:0000CB71                 test    ecx, ecx
.text$mn:0000CB73                 jz      short loc_CB9A
.text$mn:0000CB75                 mov     edx, [ebp+arg_4]
.text$mn:0000CB78                 push    edx             ; int
.text$mn:0000CB79                 mov     eax, [ebp+Src]
.text$mn:0000CB7C                 push    eax             ; Src
.text$mn:0000CB7D                 mov     ecx, [ebp+var_4]
.text$mn:0000CB80                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CB85                 push    eax             ; Dst
.text$mn:0000CB86                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000CB8B                 add     esp, 0Ch
.text$mn:0000CB8E                 mov     ecx, [ebp+arg_4]
.text$mn:0000CB91                 push    ecx
.text$mn:0000CB92                 mov     ecx, [ebp+var_4]
.text$mn:0000CB95                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000CB9A
.text$mn:0000CB9A loc_CB9A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:0000CB9A                 mov     eax, [ebp+var_4]
.text$mn:0000CB9D
.text$mn:0000CB9D loc_CB9D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:0000CB9D                 mov     esp, ebp
.text$mn:0000CB9F                 pop     ebp
.text$mn:0000CBA0                 retn    8
.text$mn:0000CBA0 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000CBA0
.text$mn:0000CBA0 ; ---------------------------------------------------------------------------
.text$mn:0000CBA3                 align 4
.text$mn:0000CBA3 _text$mn        ends
.text$mn:0000CBA3
.text$mn:0000CBA4 ; ===========================================================================
.text$mn:0000CBA4
.text$mn:0000CBA4 ; Segment type: Pure code
.text$mn:0000CBA4 ; Segment permissions: Read/Execute
.text$mn:0000CBA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBA4                 assume cs:_text$mn
.text$mn:0000CBA4                 ;org 0CBA4h
.text$mn:0000CBA4 ; COMDAT (pick any)
.text$mn:0000CBA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBA4
.text$mn:0000CBA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBA4
.text$mn:0000CBA4 ; Attributes: bp-based frame
.text$mn:0000CBA4
.text$mn:0000CBA4 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:0000CBA4                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:0000CBA4 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:0000CBA4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:0000CBA4
.text$mn:0000CBA4 arg_0           = dword ptr  8
.text$mn:0000CBA4 arg_4           = dword ptr  0Ch
.text$mn:0000CBA4
.text$mn:0000CBA4                 push    ebp
.text$mn:0000CBA5                 mov     ebp, esp
.text$mn:0000CBA7                 mov     eax, [ebp+arg_0]
.text$mn:0000CBAA                 mov     ecx, [ebp+arg_4]
.text$mn:0000CBAD                 mov     dl, [ecx]
.text$mn:0000CBAF                 mov     [eax], dl
.text$mn:0000CBB1                 pop     ebp
.text$mn:0000CBB2                 retn
.text$mn:0000CBB2 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:0000CBB2
.text$mn:0000CBB2 ; ---------------------------------------------------------------------------
.text$mn:0000CBB3                 align 4
.text$mn:0000CBB3 _text$mn        ends
.text$mn:0000CBB3
.text$mn:0000CBB4 ; ===========================================================================
.text$mn:0000CBB4
.text$mn:0000CBB4 ; Segment type: Pure code
.text$mn:0000CBB4 ; Segment permissions: Read/Execute
.text$mn:0000CBB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBB4                 assume cs:_text$mn
.text$mn:0000CBB4                 ;org 0CBB4h
.text$mn:0000CBB4 ; COMDAT (pick any)
.text$mn:0000CBB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBB4
.text$mn:0000CBB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBB4
.text$mn:0000CBB4 ; Attributes: bp-based frame
.text$mn:0000CBB4
.text$mn:0000CBB4 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:0000CBB4                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:0000CBB4 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:0000CBB4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:0000CBB4
.text$mn:0000CBB4 arg_0           = dword ptr  8
.text$mn:0000CBB4 arg_4           = dword ptr  0Ch
.text$mn:0000CBB4
.text$mn:0000CBB4                 push    ebp
.text$mn:0000CBB5                 mov     ebp, esp
.text$mn:0000CBB7                 mov     eax, [ebp+arg_0]
.text$mn:0000CBBA                 mov     ecx, [ebp+arg_4]
.text$mn:0000CBBD                 mov     dx, [ecx]
.text$mn:0000CBC0                 mov     [eax], dx
.text$mn:0000CBC3                 pop     ebp
.text$mn:0000CBC4                 retn
.text$mn:0000CBC4 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:0000CBC4
.text$mn:0000CBC4 ; ---------------------------------------------------------------------------
.text$mn:0000CBC5                 align 4
.text$mn:0000CBC5 _text$mn        ends
.text$mn:0000CBC5
.text$mn:0000CBC8 ; ===========================================================================
.text$mn:0000CBC8
.text$mn:0000CBC8 ; Segment type: Pure code
.text$mn:0000CBC8 ; Segment permissions: Read/Execute
.text$mn:0000CBC8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBC8                 assume cs:_text$mn
.text$mn:0000CBC8                 ;org 0CBC8h
.text$mn:0000CBC8 ; COMDAT (pick any)
.text$mn:0000CBC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBC8
.text$mn:0000CBC8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBC8
.text$mn:0000CBC8 ; Attributes: bp-based frame
.text$mn:0000CBC8
.text$mn:0000CBC8 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:0000CBC8                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000CBC8 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000CBC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:0000CBC8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:0000CBC8
.text$mn:0000CBC8 var_14          = dword ptr -14h
.text$mn:0000CBC8 var_10          = dword ptr -10h
.text$mn:0000CBC8 var_C           = dword ptr -0Ch
.text$mn:0000CBC8 var_4           = dword ptr -4
.text$mn:0000CBC8 arg_0           = dword ptr  8
.text$mn:0000CBC8
.text$mn:0000CBC8                 push    ebp
.text$mn:0000CBC9                 mov     ebp, esp
.text$mn:0000CBCB                 push    0FFFFFFFFh
.text$mn:0000CBCD                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000CBD2                 mov     eax, large fs:0
.text$mn:0000CBD8                 push    eax
.text$mn:0000CBD9                 sub     esp, 8
.text$mn:0000CBDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CBE1                 xor     eax, ebp
.text$mn:0000CBE3                 push    eax
.text$mn:0000CBE4                 lea     eax, [ebp+var_C]
.text$mn:0000CBE7                 mov     large fs:0, eax
.text$mn:0000CBED                 mov     [ebp+var_10], ecx
.text$mn:0000CBF0                 mov     [ebp+var_14], 0
.text$mn:0000CBF7                 mov     eax, [ebp+var_10]
.text$mn:0000CBFA                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CBFB                 mov     ecx, [ebp+var_10]
.text$mn:0000CBFE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CC03                 push    eax             ; int
.text$mn:0000CC04                 mov     ecx, [ebp+arg_0]
.text$mn:0000CC07                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000CC0C                 mov     [ebp+var_4], 0
.text$mn:0000CC13                 mov     ecx, [ebp+var_14]
.text$mn:0000CC16                 or      ecx, 1
.text$mn:0000CC19                 mov     [ebp+var_14], ecx
.text$mn:0000CC1C                 mov     eax, [ebp+arg_0]
.text$mn:0000CC1F                 mov     ecx, [ebp+var_C]
.text$mn:0000CC22                 mov     large fs:0, ecx
.text$mn:0000CC29                 pop     ecx
.text$mn:0000CC2A                 mov     esp, ebp
.text$mn:0000CC2C                 pop     ebp
.text$mn:0000CC2D                 retn    4
.text$mn:0000CC2D ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000CC2D
.text$mn:0000CC2D _text$mn        ends
.text$mn:0000CC2D
.text$x:0000CC30 ; ===========================================================================
.text$x:0000CC30
.text$x:0000CC30 ; Segment type: Pure code
.text$x:0000CC30 ; Segment permissions: Read/Execute
.text$x:0000CC30 _text$x         segment para public 'CODE' use32
.text$x:0000CC30                 assume cs:_text$x
.text$x:0000CC30                 ;org 0CC30h
.text$x:0000CC30 ; COMDAT (pick associative to section at CBC8)
.text$x:0000CC30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CC30
.text$x:0000CC30 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC30
.text$x:0000CC30
.text$x:0000CC30 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000CC30                                         ; DATA XREF: .xdata$x:0000FE24o
.text$x:0000CC30                 mov     eax, [ebp-14h]
.text$x:0000CC33                 and     eax, 1
.text$x:0000CC36                 jz      $LN4
.text$x:0000CC3C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CC40                 mov     ecx, [ebp+8]
.text$x:0000CC43                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000CC48 ; ---------------------------------------------------------------------------
.text$x:0000CC48
.text$x:0000CC48 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000CC48                 retn
.text$x:0000CC48 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000CC48
.text$x:0000CC49
.text$x:0000CC49 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC49
.text$x:0000CC49
.text$x:0000CC49 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000CC49                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:0000CC49
.text$x:0000CC49 arg_4           = dword ptr  8
.text$x:0000CC49
.text$x:0000CC49                 mov     edx, [esp+arg_4]
.text$x:0000CC4D                 lea     eax, [edx+0Ch]
.text$x:0000CC50                 mov     ecx, [edx-0Ch]
.text$x:0000CC53                 xor     ecx, eax
.text$x:0000CC55                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CC5A                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000CC5F                 jmp     ___CxxFrameHandler3
.text$x:0000CC5F __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000CC5F
.text$x:0000CC5F _text$x         ends
.text$x:0000CC5F
.text$mn:0000CC64 ; ===========================================================================
.text$mn:0000CC64
.text$mn:0000CC64 ; Segment type: Pure code
.text$mn:0000CC64 ; Segment permissions: Read/Execute
.text$mn:0000CC64 _text$mn        segment para public 'CODE' use32
.text$mn:0000CC64                 assume cs:_text$mn
.text$mn:0000CC64                 ;org 0CC64h
.text$mn:0000CC64 ; COMDAT (pick any)
.text$mn:0000CC64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CC64
.text$mn:0000CC64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CC64
.text$mn:0000CC64 ; Attributes: bp-based frame
.text$mn:0000CC64
.text$mn:0000CC64 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::begin(void)
.text$mn:0000CC64                 public ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ
.text$mn:0000CC64 ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ proc near
.text$mn:0000CC64                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+E1p
.text$mn:0000CC64                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+17Cp ...
.text$mn:0000CC64
.text$mn:0000CC64 var_14          = dword ptr -14h
.text$mn:0000CC64 var_10          = dword ptr -10h
.text$mn:0000CC64 var_C           = dword ptr -0Ch
.text$mn:0000CC64 var_4           = dword ptr -4
.text$mn:0000CC64 arg_0           = dword ptr  8
.text$mn:0000CC64
.text$mn:0000CC64                 push    ebp
.text$mn:0000CC65                 mov     ebp, esp
.text$mn:0000CC67                 push    0FFFFFFFFh
.text$mn:0000CC69                 push    offset __ehhandler$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ
.text$mn:0000CC6E                 mov     eax, large fs:0
.text$mn:0000CC74                 push    eax
.text$mn:0000CC75                 sub     esp, 8
.text$mn:0000CC78                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CC7D                 xor     eax, ebp
.text$mn:0000CC7F                 push    eax
.text$mn:0000CC80                 lea     eax, [ebp+var_C]
.text$mn:0000CC83                 mov     large fs:0, eax
.text$mn:0000CC89                 mov     [ebp+var_10], ecx
.text$mn:0000CC8C                 mov     [ebp+var_14], 0
.text$mn:0000CC93                 mov     eax, [ebp+var_10]
.text$mn:0000CC96                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CC97                 mov     ecx, [ebp+var_10]
.text$mn:0000CC9A                 mov     edx, [ecx+4]
.text$mn:0000CC9D                 push    edx             ; int
.text$mn:0000CC9E                 mov     ecx, [ebp+arg_0]
.text$mn:0000CCA1                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(MatchedCharInserted *,std::_Container_base12 const *)
.text$mn:0000CCA6                 mov     [ebp+var_4], 0
.text$mn:0000CCAD                 mov     eax, [ebp+var_14]
.text$mn:0000CCB0                 or      eax, 1
.text$mn:0000CCB3                 mov     [ebp+var_14], eax
.text$mn:0000CCB6                 mov     eax, [ebp+arg_0]
.text$mn:0000CCB9                 mov     ecx, [ebp+var_C]
.text$mn:0000CCBC                 mov     large fs:0, ecx
.text$mn:0000CCC3                 pop     ecx
.text$mn:0000CCC4                 mov     esp, ebp
.text$mn:0000CCC6                 pop     ebp
.text$mn:0000CCC7                 retn    4
.text$mn:0000CCC7 ?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ endp
.text$mn:0000CCC7
.text$mn:0000CCC7 ; ---------------------------------------------------------------------------
.text$mn:0000CCCA                 align 4
.text$mn:0000CCCA _text$mn        ends
.text$mn:0000CCCA
.text$x:0000CCCC ; ===========================================================================
.text$x:0000CCCC
.text$x:0000CCCC ; Segment type: Pure code
.text$x:0000CCCC ; Segment permissions: Read/Execute
.text$x:0000CCCC _text$x         segment para public 'CODE' use32
.text$x:0000CCCC                 assume cs:_text$x
.text$x:0000CCCC                 ;org 0CCCCh
.text$x:0000CCCC ; COMDAT (pick associative to section at CC64)
.text$x:0000CCCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CCCC
.text$x:0000CCCC ; =============== S U B R O U T I N E =======================================
.text$x:0000CCCC
.text$x:0000CCCC
.text$x:0000CCCC __unwindfunclet$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000CCCC                                         ; DATA XREF: .xdata$x:000105B8o
.text$x:0000CCCC                 mov     eax, [ebp-14h]
.text$x:0000CCCF                 and     eax, 1
.text$x:0000CCD2                 jz      $LN4_4
.text$x:0000CCD8                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CCDC                 mov     ecx, [ebp+8]
.text$x:0000CCDF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000CCE4 ; ---------------------------------------------------------------------------
.text$x:0000CCE4
.text$x:0000CCE4 $LN4_4:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ$0+6j
.text$x:0000CCE4                 retn
.text$x:0000CCE4 __unwindfunclet$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ$0 endp
.text$x:0000CCE4
.text$x:0000CCE5
.text$x:0000CCE5 ; =============== S U B R O U T I N E =======================================
.text$x:0000CCE5
.text$x:0000CCE5
.text$x:0000CCE5 __ehhandler$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ proc near
.text$x:0000CCE5                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::begin(void)+5o
.text$x:0000CCE5
.text$x:0000CCE5 arg_4           = dword ptr  8
.text$x:0000CCE5
.text$x:0000CCE5                 mov     edx, [esp+arg_4]
.text$x:0000CCE9                 lea     eax, [edx+0Ch]
.text$x:0000CCEC                 mov     ecx, [edx-0Ch]
.text$x:0000CCEF                 xor     ecx, eax
.text$x:0000CCF1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CCF6                 mov     eax, offset __ehfuncinfo$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ
.text$x:0000CCFB                 jmp     ___CxxFrameHandler3
.text$x:0000CCFB __ehhandler$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ endp
.text$x:0000CCFB
.text$x:0000CCFB _text$x         ends
.text$x:0000CCFB
.text$mn:0000CD00 ; ===========================================================================
.text$mn:0000CD00
.text$mn:0000CD00 ; Segment type: Pure code
.text$mn:0000CD00 ; Segment permissions: Read/Execute
.text$mn:0000CD00 _text$mn        segment para public 'CODE' use32
.text$mn:0000CD00                 assume cs:_text$mn
.text$mn:0000CD00                 ;org 0CD00h
.text$mn:0000CD00 ; COMDAT (pick any)
.text$mn:0000CD00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CD00
.text$mn:0000CD00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CD00
.text$mn:0000CD00 ; Attributes: bp-based frame
.text$mn:0000CD00
.text$mn:0000CD00 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::begin(void)
.text$mn:0000CD00                 public ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CD00 ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000CD00                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+673p
.text$mn:0000CD00                                         ; AutoCompletion::showWordComplete(bool)+24Cp ...
.text$mn:0000CD00
.text$mn:0000CD00 var_14          = dword ptr -14h
.text$mn:0000CD00 var_10          = dword ptr -10h
.text$mn:0000CD00 var_C           = dword ptr -0Ch
.text$mn:0000CD00 var_4           = dword ptr -4
.text$mn:0000CD00 arg_0           = dword ptr  8
.text$mn:0000CD00
.text$mn:0000CD00                 push    ebp
.text$mn:0000CD01                 mov     ebp, esp
.text$mn:0000CD03                 push    0FFFFFFFFh
.text$mn:0000CD05                 push    offset __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CD0A                 mov     eax, large fs:0
.text$mn:0000CD10                 push    eax
.text$mn:0000CD11                 sub     esp, 8
.text$mn:0000CD14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CD19                 xor     eax, ebp
.text$mn:0000CD1B                 push    eax
.text$mn:0000CD1C                 lea     eax, [ebp+var_C]
.text$mn:0000CD1F                 mov     large fs:0, eax
.text$mn:0000CD25                 mov     [ebp+var_10], ecx
.text$mn:0000CD28                 mov     [ebp+var_14], 0
.text$mn:0000CD2F                 mov     eax, [ebp+var_10]
.text$mn:0000CD32                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CD33                 mov     ecx, [ebp+var_10]
.text$mn:0000CD36                 mov     edx, [ecx+4]
.text$mn:0000CD39                 push    edx             ; int
.text$mn:0000CD3A                 mov     ecx, [ebp+arg_0]
.text$mn:0000CD3D                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000CD42                 mov     [ebp+var_4], 0
.text$mn:0000CD49                 mov     eax, [ebp+var_14]
.text$mn:0000CD4C                 or      eax, 1
.text$mn:0000CD4F                 mov     [ebp+var_14], eax
.text$mn:0000CD52                 mov     eax, [ebp+arg_0]
.text$mn:0000CD55                 mov     ecx, [ebp+var_C]
.text$mn:0000CD58                 mov     large fs:0, ecx
.text$mn:0000CD5F                 pop     ecx
.text$mn:0000CD60                 mov     esp, ebp
.text$mn:0000CD62                 pop     ebp
.text$mn:0000CD63                 retn    4
.text$mn:0000CD63 ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000CD63
.text$mn:0000CD63 ; ---------------------------------------------------------------------------
.text$mn:0000CD66                 align 4
.text$mn:0000CD66 _text$mn        ends
.text$mn:0000CD66
.text$x:0000CD68 ; ===========================================================================
.text$x:0000CD68
.text$x:0000CD68 ; Segment type: Pure code
.text$x:0000CD68 ; Segment permissions: Read/Execute
.text$x:0000CD68 _text$x         segment para public 'CODE' use32
.text$x:0000CD68                 assume cs:_text$x
.text$x:0000CD68                 ;org 0CD68h
.text$x:0000CD68 ; COMDAT (pick associative to section at CD00)
.text$x:0000CD68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CD68
.text$x:0000CD68 ; =============== S U B R O U T I N E =======================================
.text$x:0000CD68
.text$x:0000CD68
.text$x:0000CD68 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000CD68                                         ; DATA XREF: .xdata$x:000100C8o
.text$x:0000CD68                 mov     eax, [ebp-14h]
.text$x:0000CD6B                 and     eax, 1
.text$x:0000CD6E                 jz      $LN4_2
.text$x:0000CD74                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CD78                 mov     ecx, [ebp+8]
.text$x:0000CD7B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000CD80 ; ---------------------------------------------------------------------------
.text$x:0000CD80
.text$x:0000CD80 $LN4_2:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000CD80                 retn
.text$x:0000CD80 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000CD80
.text$x:0000CD81
.text$x:0000CD81 ; =============== S U B R O U T I N E =======================================
.text$x:0000CD81
.text$x:0000CD81
.text$x:0000CD81 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000CD81                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+5o
.text$x:0000CD81
.text$x:0000CD81 arg_4           = dword ptr  8
.text$x:0000CD81
.text$x:0000CD81                 mov     edx, [esp+arg_4]
.text$x:0000CD85                 lea     eax, [edx+0Ch]
.text$x:0000CD88                 mov     ecx, [edx-0Ch]
.text$x:0000CD8B                 xor     ecx, eax
.text$x:0000CD8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CD92                 mov     eax, offset __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000CD97                 jmp     ___CxxFrameHandler3
.text$x:0000CD97 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000CD97
.text$x:0000CD97 _text$x         ends
.text$x:0000CD97
.text$mn:0000CD9C ; ===========================================================================
.text$mn:0000CD9C
.text$mn:0000CD9C ; Segment type: Pure code
.text$mn:0000CD9C ; Segment permissions: Read/Execute
.text$mn:0000CD9C _text$mn        segment para public 'CODE' use32
.text$mn:0000CD9C                 assume cs:_text$mn
.text$mn:0000CD9C                 ;org 0CD9Ch
.text$mn:0000CD9C ; COMDAT (pick any)
.text$mn:0000CD9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CD9C
.text$mn:0000CD9C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CD9C
.text$mn:0000CD9C ; Attributes: bp-based frame
.text$mn:0000CD9C
.text$mn:0000CD9C ; public: char const * __thiscall std::_Yarn<char>::c_str(void)const
.text$mn:0000CD9C                 public ?c_str@?$_Yarn@D@std@@QBEPBDXZ
.text$mn:0000CD9C ?c_str@?$_Yarn@D@std@@QBEPBDXZ proc near
.text$mn:0000CD9C                                         ; CODE XREF: std::locale::c_str(void)+22p
.text$mn:0000CD9C
.text$mn:0000CD9C var_8           = dword ptr -8
.text$mn:0000CD9C var_4           = dword ptr -4
.text$mn:0000CD9C
.text$mn:0000CD9C                 push    ebp
.text$mn:0000CD9D                 mov     ebp, esp
.text$mn:0000CD9F                 sub     esp, 8
.text$mn:0000CDA2                 mov     [ebp+var_4], ecx
.text$mn:0000CDA5                 mov     eax, [ebp+var_4]
.text$mn:0000CDA8                 cmp     dword ptr [eax], 0
.text$mn:0000CDAB                 jz      short loc_CDB7
.text$mn:0000CDAD                 mov     ecx, [ebp+var_4]
.text$mn:0000CDB0                 mov     edx, [ecx]
.text$mn:0000CDB2                 mov     [ebp+var_8], edx
.text$mn:0000CDB5                 jmp     short loc_CDC0
.text$mn:0000CDB7 ; ---------------------------------------------------------------------------
.text$mn:0000CDB7
.text$mn:0000CDB7 loc_CDB7:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+Fj
.text$mn:0000CDB7                 mov     eax, [ebp+var_4]
.text$mn:0000CDBA                 add     eax, 4
.text$mn:0000CDBD                 mov     [ebp+var_8], eax
.text$mn:0000CDC0
.text$mn:0000CDC0 loc_CDC0:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+19j
.text$mn:0000CDC0                 mov     eax, [ebp+var_8]
.text$mn:0000CDC3                 mov     esp, ebp
.text$mn:0000CDC5                 pop     ebp
.text$mn:0000CDC6                 retn
.text$mn:0000CDC6 ?c_str@?$_Yarn@D@std@@QBEPBDXZ endp
.text$mn:0000CDC6
.text$mn:0000CDC6 ; ---------------------------------------------------------------------------
.text$mn:0000CDC7                 align 4
.text$mn:0000CDC7 _text$mn        ends
.text$mn:0000CDC7
.text$mn:0000CDC8 ; ===========================================================================
.text$mn:0000CDC8
.text$mn:0000CDC8 ; Segment type: Pure code
.text$mn:0000CDC8 ; Segment permissions: Read/Execute
.text$mn:0000CDC8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CDC8                 assume cs:_text$mn
.text$mn:0000CDC8                 ;org 0CDC8h
.text$mn:0000CDC8 ; COMDAT (pick any)
.text$mn:0000CDC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CDC8
.text$mn:0000CDC8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CDC8
.text$mn:0000CDC8 ; Attributes: bp-based frame
.text$mn:0000CDC8
.text$mn:0000CDC8 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:0000CDC8                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:0000CDC8 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:0000CDC8                                         ; CODE XREF: AutoCompletion::showApiComplete(void)+BBp
.text$mn:0000CDC8                                         ; AutoCompletion::showWordComplete(bool)+1A5p ...
.text$mn:0000CDC8
.text$mn:0000CDC8 var_4           = dword ptr -4
.text$mn:0000CDC8
.text$mn:0000CDC8                 push    ebp
.text$mn:0000CDC9                 mov     ebp, esp
.text$mn:0000CDCB                 push    ecx
.text$mn:0000CDCC                 mov     [ebp+var_4], ecx
.text$mn:0000CDCF                 mov     ecx, [ebp+var_4]
.text$mn:0000CDD2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CDD7                 mov     esp, ebp
.text$mn:0000CDD9                 pop     ebp
.text$mn:0000CDDA                 retn
.text$mn:0000CDDA ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:0000CDDA
.text$mn:0000CDDA ; ---------------------------------------------------------------------------
.text$mn:0000CDDB                 align 4
.text$mn:0000CDDB _text$mn        ends
.text$mn:0000CDDB
.text$mn:0000CDDC ; ===========================================================================
.text$mn:0000CDDC
.text$mn:0000CDDC ; Segment type: Pure code
.text$mn:0000CDDC ; Segment permissions: Read/Execute
.text$mn:0000CDDC _text$mn        segment para public 'CODE' use32
.text$mn:0000CDDC                 assume cs:_text$mn
.text$mn:0000CDDC                 ;org 0CDDCh
.text$mn:0000CDDC ; COMDAT (pick any)
.text$mn:0000CDDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CDDC
.text$mn:0000CDDC ; =============== S U B R O U T I N E =======================================
.text$mn:0000CDDC
.text$mn:0000CDDC ; Attributes: bp-based frame
.text$mn:0000CDDC
.text$mn:0000CDDC ; const char *__thiscall std::locale::c_str(std::locale *__hidden this)
.text$mn:0000CDDC                 public ?c_str@locale@std@@QBEPBDXZ
.text$mn:0000CDDC ?c_str@locale@std@@QBEPBDXZ proc near   ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+77p
.text$mn:0000CDDC
.text$mn:0000CDDC var_8           = dword ptr -8
.text$mn:0000CDDC var_4           = dword ptr -4
.text$mn:0000CDDC
.text$mn:0000CDDC                 push    ebp
.text$mn:0000CDDD                 mov     ebp, esp
.text$mn:0000CDDF                 sub     esp, 8
.text$mn:0000CDE2                 mov     [ebp+var_4], ecx
.text$mn:0000CDE5                 mov     eax, [ebp+var_4]
.text$mn:0000CDE8                 cmp     dword ptr [eax], 0
.text$mn:0000CDEB                 jnz     short loc_CDF6
.text$mn:0000CDED                 mov     [ebp+var_8], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
.text$mn:0000CDF4                 jmp     short loc_CE06
.text$mn:0000CDF6 ; ---------------------------------------------------------------------------
.text$mn:0000CDF6
.text$mn:0000CDF6 loc_CDF6:                               ; CODE XREF: std::locale::c_str(void)+Fj
.text$mn:0000CDF6                 mov     ecx, [ebp+var_4]
.text$mn:0000CDF9                 mov     ecx, [ecx]
.text$mn:0000CDFB                 add     ecx, 18h
.text$mn:0000CDFE                 call    ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str(void)
.text$mn:0000CE03                 mov     [ebp+var_8], eax
.text$mn:0000CE06
.text$mn:0000CE06 loc_CE06:                               ; CODE XREF: std::locale::c_str(void)+18j
.text$mn:0000CE06                 mov     eax, [ebp+var_8]
.text$mn:0000CE09                 mov     esp, ebp
.text$mn:0000CE0B                 pop     ebp
.text$mn:0000CE0C                 retn
.text$mn:0000CE0C ?c_str@locale@std@@QBEPBDXZ endp
.text$mn:0000CE0C
.text$mn:0000CE0C ; ---------------------------------------------------------------------------
.text$mn:0000CE0D                 align 10h
.text$mn:0000CE0D _text$mn        ends
.text$mn:0000CE0D
.text$mn:0000CE10 ; ===========================================================================
.text$mn:0000CE10
.text$mn:0000CE10 ; Segment type: Pure code
.text$mn:0000CE10 ; Segment permissions: Read/Execute
.text$mn:0000CE10 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE10                 assume cs:_text$mn
.text$mn:0000CE10                 ;org 0CE10h
.text$mn:0000CE10 ; COMDAT (pick any)
.text$mn:0000CE10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE10
.text$mn:0000CE10 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE10
.text$mn:0000CE10 ; Attributes: bp-based frame
.text$mn:0000CE10
.text$mn:0000CE10 ; public: unsigned int __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::capacity(void)const
.text$mn:0000CE10                 public ?capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ
.text$mn:0000CE10 ?capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ proc near
.text$mn:0000CE10                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)+Cp
.text$mn:0000CE10
.text$mn:0000CE10 var_4           = dword ptr -4
.text$mn:0000CE10
.text$mn:0000CE10                 push    ebp
.text$mn:0000CE11                 mov     ebp, esp
.text$mn:0000CE13                 push    ecx
.text$mn:0000CE14                 mov     [ebp+var_4], ecx
.text$mn:0000CE17                 mov     eax, [ebp+var_4]
.text$mn:0000CE1A                 mov     ecx, [ebp+var_4]
.text$mn:0000CE1D                 mov     eax, [eax+0Ch]
.text$mn:0000CE20                 sub     eax, [ecx+4]
.text$mn:0000CE23                 sar     eax, 3
.text$mn:0000CE26                 mov     esp, ebp
.text$mn:0000CE28                 pop     ebp
.text$mn:0000CE29                 retn
.text$mn:0000CE29 ?capacity@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ endp
.text$mn:0000CE29
.text$mn:0000CE29 ; ---------------------------------------------------------------------------
.text$mn:0000CE2A                 align 4
.text$mn:0000CE2A _text$mn        ends
.text$mn:0000CE2A
.text$mn:0000CE2C ; ===========================================================================
.text$mn:0000CE2C
.text$mn:0000CE2C ; Segment type: Pure code
.text$mn:0000CE2C ; Segment permissions: Read/Execute
.text$mn:0000CE2C _text$mn        segment para public 'CODE' use32
.text$mn:0000CE2C                 assume cs:_text$mn
.text$mn:0000CE2C                 ;org 0CE2Ch
.text$mn:0000CE2C ; COMDAT (pick any)
.text$mn:0000CE2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE2C
.text$mn:0000CE2C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE2C
.text$mn:0000CE2C ; Attributes: bp-based frame
.text$mn:0000CE2C
.text$mn:0000CE2C ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::capacity(void)const
.text$mn:0000CE2C                 public ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000CE2C ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000CE2C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+Cp
.text$mn:0000CE2C
.text$mn:0000CE2C var_4           = dword ptr -4
.text$mn:0000CE2C
.text$mn:0000CE2C                 push    ebp
.text$mn:0000CE2D                 mov     ebp, esp
.text$mn:0000CE2F                 push    ecx
.text$mn:0000CE30                 mov     [ebp+var_4], ecx
.text$mn:0000CE33                 mov     eax, [ebp+var_4]
.text$mn:0000CE36                 mov     ecx, [ebp+var_4]
.text$mn:0000CE39                 mov     eax, [eax+0Ch]
.text$mn:0000CE3C                 sub     eax, [ecx+4]
.text$mn:0000CE3F                 cdq
.text$mn:0000CE40                 mov     ecx, 1Ch
.text$mn:0000CE45                 idiv    ecx
.text$mn:0000CE47                 mov     esp, ebp
.text$mn:0000CE49                 pop     ebp
.text$mn:0000CE4A                 retn
.text$mn:0000CE4A ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000CE4A
.text$mn:0000CE4A ; ---------------------------------------------------------------------------
.text$mn:0000CE4B                 align 4
.text$mn:0000CE4B _text$mn        ends
.text$mn:0000CE4B
.text$mn:0000CE4C ; ===========================================================================
.text$mn:0000CE4C
.text$mn:0000CE4C ; Segment type: Pure code
.text$mn:0000CE4C ; Segment permissions: Read/Execute
.text$mn:0000CE4C _text$mn        segment para public 'CODE' use32
.text$mn:0000CE4C                 assume cs:_text$mn
.text$mn:0000CE4C                 ;org 0CE4Ch
.text$mn:0000CE4C ; COMDAT (pick any)
.text$mn:0000CE4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE4C
.text$mn:0000CE4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE4C
.text$mn:0000CE4C ; Attributes: bp-based frame
.text$mn:0000CE4C
.text$mn:0000CE4C ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:0000CE4C                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:0000CE4C ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000CE4C                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:0000CE4C
.text$mn:0000CE4C var_4           = dword ptr -4
.text$mn:0000CE4C
.text$mn:0000CE4C                 push    ebp
.text$mn:0000CE4D                 mov     ebp, esp
.text$mn:0000CE4F                 push    ecx
.text$mn:0000CE50                 mov     [ebp+var_4], ecx
.text$mn:0000CE53                 mov     eax, [ebp+var_4]
.text$mn:0000CE56                 mov     eax, [eax+4]
.text$mn:0000CE59                 mov     esp, ebp
.text$mn:0000CE5B                 pop     ebp
.text$mn:0000CE5C                 retn
.text$mn:0000CE5C ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000CE5C
.text$mn:0000CE5C ; ---------------------------------------------------------------------------
.text$mn:0000CE5D                 align 10h
.text$mn:0000CE5D _text$mn        ends
.text$mn:0000CE5D
.text$mn:0000CE60 ; ===========================================================================
.text$mn:0000CE60
.text$mn:0000CE60 ; Segment type: Pure code
.text$mn:0000CE60 ; Segment permissions: Read/Execute
.text$mn:0000CE60 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE60                 assume cs:_text$mn
.text$mn:0000CE60                 ;org 0CE60h
.text$mn:0000CE60 ; COMDAT (pick any)
.text$mn:0000CE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE60
.text$mn:0000CE60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE60
.text$mn:0000CE60 ; Attributes: bp-based frame
.text$mn:0000CE60
.text$mn:0000CE60 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:0000CE60                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:0000CE60 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000CE60                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:0000CE60                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:0000CE60
.text$mn:0000CE60 var_4           = dword ptr -4
.text$mn:0000CE60
.text$mn:0000CE60                 push    ebp
.text$mn:0000CE61                 mov     ebp, esp
.text$mn:0000CE63                 push    ecx
.text$mn:0000CE64                 mov     [ebp+var_4], ecx
.text$mn:0000CE67                 mov     eax, [ebp+var_4]
.text$mn:0000CE6A                 mov     eax, [eax+4]
.text$mn:0000CE6D                 mov     esp, ebp
.text$mn:0000CE6F                 pop     ebp
.text$mn:0000CE70                 retn
.text$mn:0000CE70 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000CE70
.text$mn:0000CE70 ; ---------------------------------------------------------------------------
.text$mn:0000CE71                 align 4
.text$mn:0000CE71 _text$mn        ends
.text$mn:0000CE71
.text$mn:0000CE74 ; ===========================================================================
.text$mn:0000CE74
.text$mn:0000CE74 ; Segment type: Pure code
.text$mn:0000CE74 ; Segment permissions: Read/Execute
.text$mn:0000CE74 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE74                 assume cs:_text$mn
.text$mn:0000CE74                 ;org 0CE74h
.text$mn:0000CE74 ; COMDAT (pick any)
.text$mn:0000CE74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE74
.text$mn:0000CE74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE74
.text$mn:0000CE74 ; Attributes: bp-based frame
.text$mn:0000CE74
.text$mn:0000CE74 ; public: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::clear(void)
.text$mn:0000CE74                 public ?clear@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXXZ
.text$mn:0000CE74 ?clear@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXXZ proc near
.text$mn:0000CE74                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+40p
.text$mn:0000CE74
.text$mn:0000CE74 var_4           = dword ptr -4
.text$mn:0000CE74
.text$mn:0000CE74                 push    ebp
.text$mn:0000CE75                 mov     ebp, esp
.text$mn:0000CE77                 push    ecx
.text$mn:0000CE78                 mov     [ebp+var_4], ecx
.text$mn:0000CE7B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000CE7E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000CE83                 mov     eax, [ebp+var_4]
.text$mn:0000CE86                 mov     ecx, [eax+8]
.text$mn:0000CE89                 push    ecx
.text$mn:0000CE8A                 mov     edx, [ebp+var_4]
.text$mn:0000CE8D                 mov     eax, [edx+4]
.text$mn:0000CE90                 push    eax
.text$mn:0000CE91                 mov     ecx, [ebp+var_4]
.text$mn:0000CE94                 call    ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Destroy(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000CE99                 mov     ecx, [ebp+var_4]
.text$mn:0000CE9C                 mov     edx, [ebp+var_4]
.text$mn:0000CE9F                 mov     eax, [edx+4]
.text$mn:0000CEA2                 mov     [ecx+8], eax
.text$mn:0000CEA5                 mov     esp, ebp
.text$mn:0000CEA7                 pop     ebp
.text$mn:0000CEA8                 retn
.text$mn:0000CEA8 ?clear@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXXZ endp
.text$mn:0000CEA8
.text$mn:0000CEA8 ; ---------------------------------------------------------------------------
.text$mn:0000CEA9                 align 4
.text$mn:0000CEA9 _text$mn        ends
.text$mn:0000CEA9
.text$mn:0000CEAC ; ===========================================================================
.text$mn:0000CEAC
.text$mn:0000CEAC ; Segment type: Pure code
.text$mn:0000CEAC ; Segment permissions: Read/Execute
.text$mn:0000CEAC _text$mn        segment para public 'CODE' use32
.text$mn:0000CEAC                 assume cs:_text$mn
.text$mn:0000CEAC                 ;org 0CEACh
.text$mn:0000CEAC ; COMDAT (pick any)
.text$mn:0000CEAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CEAC
.text$mn:0000CEAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000CEAC
.text$mn:0000CEAC ; Attributes: bp-based frame
.text$mn:0000CEAC
.text$mn:0000CEAC ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::clear(void)
.text$mn:0000CEAC                 public ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ
.text$mn:0000CEAC ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ proc near
.text$mn:0000CEAC                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+541p
.text$mn:0000CEAC
.text$mn:0000CEAC var_4           = dword ptr -4
.text$mn:0000CEAC
.text$mn:0000CEAC                 push    ebp
.text$mn:0000CEAD                 mov     ebp, esp
.text$mn:0000CEAF                 push    ecx
.text$mn:0000CEB0                 mov     [ebp+var_4], ecx
.text$mn:0000CEB3                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000CEB6                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000CEBB                 mov     eax, [ebp+var_4]
.text$mn:0000CEBE                 mov     ecx, [eax+8]
.text$mn:0000CEC1                 push    ecx
.text$mn:0000CEC2                 mov     edx, [ebp+var_4]
.text$mn:0000CEC5                 mov     eax, [edx+4]
.text$mn:0000CEC8                 push    eax
.text$mn:0000CEC9                 mov     ecx, [ebp+var_4]
.text$mn:0000CECC                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000CED1                 mov     ecx, [ebp+var_4]
.text$mn:0000CED4                 mov     edx, [ebp+var_4]
.text$mn:0000CED7                 mov     eax, [edx+4]
.text$mn:0000CEDA                 mov     [ecx+8], eax
.text$mn:0000CEDD                 mov     esp, ebp
.text$mn:0000CEDF                 pop     ebp
.text$mn:0000CEE0                 retn
.text$mn:0000CEE0 ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ endp
.text$mn:0000CEE0
.text$mn:0000CEE0 ; ---------------------------------------------------------------------------
.text$mn:0000CEE1                 align 4
.text$mn:0000CEE1 _text$mn        ends
.text$mn:0000CEE1
.text$mn:0000CEE4 ; ===========================================================================
.text$mn:0000CEE4
.text$mn:0000CEE4 ; Segment type: Pure code
.text$mn:0000CEE4 ; Segment permissions: Read/Execute
.text$mn:0000CEE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CEE4                 assume cs:_text$mn
.text$mn:0000CEE4                 ;org 0CEE4h
.text$mn:0000CEE4 ; COMDAT (pick any)
.text$mn:0000CEE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CEE4
.text$mn:0000CEE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CEE4
.text$mn:0000CEE4 ; Attributes: bp-based frame
.text$mn:0000CEE4
.text$mn:0000CEE4 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:0000CEE4                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:0000CEE4 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:0000CEE4                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:0000CEE4                                         ; std::operator<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:0000CEE4
.text$mn:0000CEE4 var_4           = dword ptr -4
.text$mn:0000CEE4 arg_0           = dword ptr  8
.text$mn:0000CEE4
.text$mn:0000CEE4                 push    ebp
.text$mn:0000CEE5                 mov     ebp, esp
.text$mn:0000CEE7                 push    ecx
.text$mn:0000CEE8                 mov     [ebp+var_4], ecx
.text$mn:0000CEEB                 mov     ecx, [ebp+arg_0]
.text$mn:0000CEEE                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CEF3                 push    eax
.text$mn:0000CEF4                 mov     ecx, [ebp+arg_0]
.text$mn:0000CEF7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CEFC                 push    eax
.text$mn:0000CEFD                 mov     eax, [ebp+var_4]
.text$mn:0000CF00                 mov     ecx, [eax+14h]
.text$mn:0000CF03                 push    ecx
.text$mn:0000CF04                 push    0
.text$mn:0000CF06                 mov     ecx, [ebp+var_4]
.text$mn:0000CF09                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000CF0E                 mov     esp, ebp
.text$mn:0000CF10                 pop     ebp
.text$mn:0000CF11                 retn    4
.text$mn:0000CF11 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:0000CF11
.text$mn:0000CF11 _text$mn        ends
.text$mn:0000CF11
.text$mn:0000CF14 ; ===========================================================================
.text$mn:0000CF14
.text$mn:0000CF14 ; Segment type: Pure code
.text$mn:0000CF14 ; Segment permissions: Read/Execute
.text$mn:0000CF14 _text$mn        segment para public 'CODE' use32
.text$mn:0000CF14                 assume cs:_text$mn
.text$mn:0000CF14                 ;org 0CF14h
.text$mn:0000CF14 ; COMDAT (pick any)
.text$mn:0000CF14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CF14
.text$mn:0000CF14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CF14
.text$mn:0000CF14 ; Attributes: bp-based frame
.text$mn:0000CF14
.text$mn:0000CF14 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:0000CF14                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:0000CF14 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:0000CF14                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:0000CF14                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:0000CF14
.text$mn:0000CF14 var_18          = dword ptr -18h
.text$mn:0000CF14 var_14          = dword ptr -14h
.text$mn:0000CF14 var_10          = dword ptr -10h
.text$mn:0000CF14 var_C           = dword ptr -0Ch
.text$mn:0000CF14 var_8           = dword ptr -8
.text$mn:0000CF14 var_4           = dword ptr -4
.text$mn:0000CF14 arg_0           = dword ptr  8
.text$mn:0000CF14 arg_4           = dword ptr  0Ch
.text$mn:0000CF14 arg_8           = dword ptr  10h
.text$mn:0000CF14 arg_C           = dword ptr  14h
.text$mn:0000CF14
.text$mn:0000CF14                 push    ebp
.text$mn:0000CF15                 mov     ebp, esp
.text$mn:0000CF17                 sub     esp, 18h
.text$mn:0000CF1A                 mov     [ebp+var_4], ecx
.text$mn:0000CF1D                 cmp     [ebp+arg_C], 0
.text$mn:0000CF21                 jz      short loc_CF39
.text$mn:0000CF23                 push    87Dh            ; unsigned int
.text$mn:0000CF28                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CF2D                 mov     eax, [ebp+arg_8]
.text$mn:0000CF30                 push    eax             ; int
.text$mn:0000CF31                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CF36                 add     esp, 0Ch
.text$mn:0000CF39
.text$mn:0000CF39 loc_CF39:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000CF39                 mov     ecx, [ebp+var_4]
.text$mn:0000CF3C                 mov     edx, [ecx+14h]
.text$mn:0000CF3F                 cmp     edx, [ebp+arg_0]
.text$mn:0000CF42                 jnb     short loc_CF4C
.text$mn:0000CF44                 mov     ecx, [ebp+var_4]
.text$mn:0000CF47                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000CF4C
.text$mn:0000CF4C loc_CF4C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:0000CF4C                 mov     eax, [ebp+var_4]
.text$mn:0000CF4F                 mov     ecx, [eax+14h]
.text$mn:0000CF52                 sub     ecx, [ebp+arg_0]
.text$mn:0000CF55                 cmp     ecx, [ebp+arg_4]
.text$mn:0000CF58                 jnb     short loc_CF66
.text$mn:0000CF5A                 mov     edx, [ebp+var_4]
.text$mn:0000CF5D                 mov     eax, [edx+14h]
.text$mn:0000CF60                 sub     eax, [ebp+arg_0]
.text$mn:0000CF63                 mov     [ebp+arg_4], eax
.text$mn:0000CF66
.text$mn:0000CF66 loc_CF66:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:0000CF66                 mov     ecx, [ebp+arg_4]
.text$mn:0000CF69                 cmp     ecx, [ebp+arg_C]
.text$mn:0000CF6C                 jnb     short loc_CF76
.text$mn:0000CF6E                 mov     edx, [ebp+arg_4]
.text$mn:0000CF71                 mov     [ebp+var_8], edx
.text$mn:0000CF74                 jmp     short loc_CF7C
.text$mn:0000CF76 ; ---------------------------------------------------------------------------
.text$mn:0000CF76
.text$mn:0000CF76 loc_CF76:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:0000CF76                 mov     eax, [ebp+arg_C]
.text$mn:0000CF79                 mov     [ebp+var_8], eax
.text$mn:0000CF7C
.text$mn:0000CF7C loc_CF7C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000CF7C                 mov     ecx, [ebp+var_8]
.text$mn:0000CF7F                 push    ecx
.text$mn:0000CF80                 mov     edx, [ebp+arg_8]
.text$mn:0000CF83                 push    edx
.text$mn:0000CF84                 mov     ecx, [ebp+var_4]
.text$mn:0000CF87                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CF8C                 mov     ecx, [ebp+arg_0]
.text$mn:0000CF8F                 lea     edx, [eax+ecx*2]
.text$mn:0000CF92                 push    edx
.text$mn:0000CF93                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CF98                 add     esp, 0Ch
.text$mn:0000CF9B                 mov     [ebp+var_C], eax
.text$mn:0000CF9E                 cmp     [ebp+var_C], 0
.text$mn:0000CFA2                 jz      short loc_CFAC
.text$mn:0000CFA4                 mov     eax, [ebp+var_C]
.text$mn:0000CFA7                 mov     [ebp+var_18], eax
.text$mn:0000CFAA                 jmp     short loc_CFE1
.text$mn:0000CFAC ; ---------------------------------------------------------------------------
.text$mn:0000CFAC
.text$mn:0000CFAC loc_CFAC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:0000CFAC                 mov     ecx, [ebp+arg_4]
.text$mn:0000CFAF                 cmp     ecx, [ebp+arg_C]
.text$mn:0000CFB2                 jnb     short loc_CFBD
.text$mn:0000CFB4                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000CFBB                 jmp     short loc_CFDB
.text$mn:0000CFBD ; ---------------------------------------------------------------------------
.text$mn:0000CFBD
.text$mn:0000CFBD loc_CFBD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:0000CFBD                 mov     edx, [ebp+arg_4]
.text$mn:0000CFC0                 cmp     edx, [ebp+arg_C]
.text$mn:0000CFC3                 jnz     short loc_CFCE
.text$mn:0000CFC5                 mov     [ebp+var_10], 0
.text$mn:0000CFCC                 jmp     short loc_CFD5
.text$mn:0000CFCE ; ---------------------------------------------------------------------------
.text$mn:0000CFCE
.text$mn:0000CFCE loc_CFCE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000CFCE                 mov     [ebp+var_10], 1
.text$mn:0000CFD5
.text$mn:0000CFD5 loc_CFD5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:0000CFD5                 mov     eax, [ebp+var_10]
.text$mn:0000CFD8                 mov     [ebp+var_14], eax
.text$mn:0000CFDB
.text$mn:0000CFDB loc_CFDB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000CFDB                 mov     ecx, [ebp+var_14]
.text$mn:0000CFDE                 mov     [ebp+var_18], ecx
.text$mn:0000CFE1
.text$mn:0000CFE1 loc_CFE1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000CFE1                 mov     eax, [ebp+var_18]
.text$mn:0000CFE4                 mov     esp, ebp
.text$mn:0000CFE6                 pop     ebp
.text$mn:0000CFE7                 retn    10h
.text$mn:0000CFE7 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000CFE7
.text$mn:0000CFE7 ; ---------------------------------------------------------------------------
.text$mn:0000CFEA                 align 4
.text$mn:0000CFEA _text$mn        ends
.text$mn:0000CFEA
.text$mn:0000CFEC ; ===========================================================================
.text$mn:0000CFEC
.text$mn:0000CFEC ; Segment type: Pure code
.text$mn:0000CFEC ; Segment permissions: Read/Execute
.text$mn:0000CFEC _text$mn        segment para public 'CODE' use32
.text$mn:0000CFEC                 assume cs:_text$mn
.text$mn:0000CFEC                 ;org 0CFECh
.text$mn:0000CFEC ; COMDAT (pick any)
.text$mn:0000CFEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CFEC
.text$mn:0000CFEC ; =============== S U B R O U T I N E =======================================
.text$mn:0000CFEC
.text$mn:0000CFEC ; Attributes: bp-based frame
.text$mn:0000CFEC
.text$mn:0000CFEC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:0000CFEC                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:0000CFEC ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:0000CFEC                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:0000CFEC
.text$mn:0000CFEC var_4           = dword ptr -4
.text$mn:0000CFEC Str             = dword ptr  8
.text$mn:0000CFEC
.text$mn:0000CFEC                 push    ebp
.text$mn:0000CFED                 mov     ebp, esp
.text$mn:0000CFEF                 push    ecx
.text$mn:0000CFF0                 mov     [ebp+var_4], ecx
.text$mn:0000CFF3                 push    86Eh            ; unsigned int
.text$mn:0000CFF8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CFFD                 mov     eax, [ebp+Str]
.text$mn:0000D000                 push    eax             ; int
.text$mn:0000D001                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000D006                 add     esp, 0Ch
.text$mn:0000D009                 mov     ecx, [ebp+Str]
.text$mn:0000D00C                 push    ecx             ; Str
.text$mn:0000D00D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000D012                 add     esp, 4
.text$mn:0000D015                 push    eax
.text$mn:0000D016                 mov     edx, [ebp+Str]
.text$mn:0000D019                 push    edx
.text$mn:0000D01A                 mov     eax, [ebp+var_4]
.text$mn:0000D01D                 mov     ecx, [eax+14h]
.text$mn:0000D020                 push    ecx
.text$mn:0000D021                 push    0
.text$mn:0000D023                 mov     ecx, [ebp+var_4]
.text$mn:0000D026                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000D02B                 mov     esp, ebp
.text$mn:0000D02D                 pop     ebp
.text$mn:0000D02E                 retn    4
.text$mn:0000D02E ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:0000D02E
.text$mn:0000D02E ; ---------------------------------------------------------------------------
.text$mn:0000D031                 align 4
.text$mn:0000D031 _text$mn        ends
.text$mn:0000D031
.text$mn:0000D034 ; ===========================================================================
.text$mn:0000D034
.text$mn:0000D034 ; Segment type: Pure code
.text$mn:0000D034 ; Segment permissions: Read/Execute
.text$mn:0000D034 _text$mn        segment para public 'CODE' use32
.text$mn:0000D034                 assume cs:_text$mn
.text$mn:0000D034                 ;org 0D034h
.text$mn:0000D034 ; COMDAT (pick any)
.text$mn:0000D034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D034
.text$mn:0000D034 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D034
.text$mn:0000D034 ; Attributes: bp-based frame
.text$mn:0000D034
.text$mn:0000D034 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:0000D034                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:0000D034 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:0000D034                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:0000D034                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+CBp ...
.text$mn:0000D034
.text$mn:0000D034 var_4           = dword ptr -4
.text$mn:0000D034 arg_0           = dword ptr  8
.text$mn:0000D034 arg_4           = dword ptr  0Ch
.text$mn:0000D034 arg_8           = dword ptr  10h
.text$mn:0000D034
.text$mn:0000D034                 push    ebp
.text$mn:0000D035                 mov     ebp, esp
.text$mn:0000D037                 push    ecx
.text$mn:0000D038                 cmp     [ebp+arg_8], 0
.text$mn:0000D03C                 jnz     short loc_D047
.text$mn:0000D03E                 mov     [ebp+var_4], 0
.text$mn:0000D045                 jmp     short loc_D05E
.text$mn:0000D047 ; ---------------------------------------------------------------------------
.text$mn:0000D047
.text$mn:0000D047 loc_D047:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:0000D047                 mov     eax, [ebp+arg_8]
.text$mn:0000D04A                 push    eax
.text$mn:0000D04B                 mov     ecx, [ebp+arg_4]
.text$mn:0000D04E                 push    ecx
.text$mn:0000D04F                 mov     edx, [ebp+arg_0]
.text$mn:0000D052                 push    edx
.text$mn:0000D053                 call    _wmemcmp
.text$mn:0000D058                 add     esp, 0Ch
.text$mn:0000D05B                 mov     [ebp+var_4], eax
.text$mn:0000D05E
.text$mn:0000D05E loc_D05E:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000D05E                 mov     eax, [ebp+var_4]
.text$mn:0000D061                 mov     esp, ebp
.text$mn:0000D063                 pop     ebp
.text$mn:0000D064                 retn
.text$mn:0000D064 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:0000D064
.text$mn:0000D064 ; ---------------------------------------------------------------------------
.text$mn:0000D065                 align 4
.text$mn:0000D065 _text$mn        ends
.text$mn:0000D065
.text$mn:0000D068 ; ===========================================================================
.text$mn:0000D068
.text$mn:0000D068 ; Segment type: Pure code
.text$mn:0000D068 ; Segment permissions: Read/Execute
.text$mn:0000D068 _text$mn        segment para public 'CODE' use32
.text$mn:0000D068                 assume cs:_text$mn
.text$mn:0000D068                 ;org 0D068h
.text$mn:0000D068 ; COMDAT (pick any)
.text$mn:0000D068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D068
.text$mn:0000D068 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D068
.text$mn:0000D068 ; Attributes: bp-based frame
.text$mn:0000D068
.text$mn:0000D068 ; int __stdcall std::allocator<MatchedCharInserted>::construct(void *, int)
.text$mn:0000D068                 public ?construct@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@ABU3@@Z
.text$mn:0000D068 ?construct@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@ABU3@@Z proc near
.text$mn:0000D068                                         ; CODE XREF: std::allocator_traits<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(std::allocator<MatchedCharInserted> &,MatchedCharInserted *,MatchedCharInserted const &)+17p
.text$mn:0000D068
.text$mn:0000D068 var_C           = dword ptr -0Ch
.text$mn:0000D068 var_8           = dword ptr -8
.text$mn:0000D068 var_4           = dword ptr -4
.text$mn:0000D068 arg_0           = dword ptr  8
.text$mn:0000D068 arg_4           = dword ptr  0Ch
.text$mn:0000D068
.text$mn:0000D068                 push    ebp
.text$mn:0000D069                 mov     ebp, esp
.text$mn:0000D06B                 sub     esp, 0Ch
.text$mn:0000D06E                 mov     [ebp+var_C], ecx
.text$mn:0000D071                 mov     eax, [ebp+arg_0]
.text$mn:0000D074                 push    eax             ; void *
.text$mn:0000D075                 push    8               ; unsigned int
.text$mn:0000D077                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000D07C                 add     esp, 8
.text$mn:0000D07F                 mov     [ebp+var_4], eax
.text$mn:0000D082                 cmp     [ebp+var_4], 0
.text$mn:0000D086                 jz      short loc_D0A0
.text$mn:0000D088                 mov     ecx, [ebp+arg_4]
.text$mn:0000D08B                 mov     edx, [ecx]
.text$mn:0000D08D                 mov     eax, [ecx+4]
.text$mn:0000D090                 mov     ecx, [ebp+var_4]
.text$mn:0000D093                 mov     [ecx], edx
.text$mn:0000D095                 mov     [ecx+4], eax
.text$mn:0000D098                 mov     edx, [ebp+var_4]
.text$mn:0000D09B                 mov     [ebp+var_8], edx
.text$mn:0000D09E                 jmp     short loc_D0A7
.text$mn:0000D0A0 ; ---------------------------------------------------------------------------
.text$mn:0000D0A0
.text$mn:0000D0A0 loc_D0A0:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct(MatchedCharInserted *,MatchedCharInserted const &)+1Ej
.text$mn:0000D0A0                 mov     [ebp+var_8], 0
.text$mn:0000D0A7
.text$mn:0000D0A7 loc_D0A7:                               ; CODE XREF: std::allocator<MatchedCharInserted>::construct(MatchedCharInserted *,MatchedCharInserted const &)+36j
.text$mn:0000D0A7                 mov     esp, ebp
.text$mn:0000D0A9                 pop     ebp
.text$mn:0000D0AA                 retn    8
.text$mn:0000D0AA ?construct@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@ABU3@@Z endp
.text$mn:0000D0AA
.text$mn:0000D0AA ; ---------------------------------------------------------------------------
.text$mn:0000D0AD                 align 10h
.text$mn:0000D0AD _text$mn        ends
.text$mn:0000D0AD
.text$mn:0000D0B0 ; ===========================================================================
.text$mn:0000D0B0
.text$mn:0000D0B0 ; Segment type: Pure code
.text$mn:0000D0B0 ; Segment permissions: Read/Execute
.text$mn:0000D0B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D0B0                 assume cs:_text$mn
.text$mn:0000D0B0                 ;org 0D0B0h
.text$mn:0000D0B0 ; COMDAT (pick any)
.text$mn:0000D0B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D0B0
.text$mn:0000D0B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D0B0
.text$mn:0000D0B0 ; Attributes: bp-based frame
.text$mn:0000D0B0
.text$mn:0000D0B0 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(void *, int)
.text$mn:0000D0B0                 public ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000D0B0 ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$mn:0000D0B0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+17p
.text$mn:0000D0B0
.text$mn:0000D0B0 var_1C          = dword ptr -1Ch
.text$mn:0000D0B0 var_18          = dword ptr -18h
.text$mn:0000D0B0 var_14          = dword ptr -14h
.text$mn:0000D0B0 var_10          = dword ptr -10h
.text$mn:0000D0B0 var_C           = dword ptr -0Ch
.text$mn:0000D0B0 var_4           = dword ptr -4
.text$mn:0000D0B0 arg_0           = dword ptr  8
.text$mn:0000D0B0 arg_4           = dword ptr  0Ch
.text$mn:0000D0B0
.text$mn:0000D0B0                 push    ebp
.text$mn:0000D0B1                 mov     ebp, esp
.text$mn:0000D0B3                 push    0FFFFFFFFh
.text$mn:0000D0B5                 push    offset __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000D0BA                 mov     eax, large fs:0
.text$mn:0000D0C0                 push    eax
.text$mn:0000D0C1                 sub     esp, 10h
.text$mn:0000D0C4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D0C9                 xor     eax, ebp
.text$mn:0000D0CB                 push    eax
.text$mn:0000D0CC                 lea     eax, [ebp+var_C]
.text$mn:0000D0CF                 mov     large fs:0, eax
.text$mn:0000D0D5                 mov     [ebp+var_18], ecx
.text$mn:0000D0D8                 mov     eax, [ebp+arg_0]
.text$mn:0000D0DB                 push    eax             ; void *
.text$mn:0000D0DC                 push    1Ch             ; unsigned int
.text$mn:0000D0DE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000D0E3                 add     esp, 8
.text$mn:0000D0E6                 mov     [ebp+var_10], eax
.text$mn:0000D0E9                 mov     [ebp+var_4], 0
.text$mn:0000D0F0                 cmp     [ebp+var_10], 0
.text$mn:0000D0F4                 jz      short loc_D107
.text$mn:0000D0F6                 mov     ecx, [ebp+arg_4]
.text$mn:0000D0F9                 push    ecx
.text$mn:0000D0FA                 mov     ecx, [ebp+var_10]
.text$mn:0000D0FD                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000D102                 mov     [ebp+var_14], eax
.text$mn:0000D105                 jmp     short loc_D10E
.text$mn:0000D107 ; ---------------------------------------------------------------------------
.text$mn:0000D107
.text$mn:0000D107 loc_D107:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+44j
.text$mn:0000D107                 mov     [ebp+var_14], 0
.text$mn:0000D10E
.text$mn:0000D10E loc_D10E:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+55j
.text$mn:0000D10E                 mov     edx, [ebp+var_14]
.text$mn:0000D111                 mov     [ebp+var_1C], edx
.text$mn:0000D114                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000D11B                 mov     ecx, [ebp+var_C]
.text$mn:0000D11E                 mov     large fs:0, ecx
.text$mn:0000D125                 pop     ecx
.text$mn:0000D126                 mov     esp, ebp
.text$mn:0000D128                 pop     ebp
.text$mn:0000D129                 retn    8
.text$mn:0000D129 ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$mn:0000D129
.text$mn:0000D129 _text$mn        ends
.text$mn:0000D129
.text$x:0000D12C ; ===========================================================================
.text$x:0000D12C
.text$x:0000D12C ; Segment type: Pure code
.text$x:0000D12C ; Segment permissions: Read/Execute
.text$x:0000D12C _text$x         segment para public 'CODE' use32
.text$x:0000D12C                 assume cs:_text$x
.text$x:0000D12C                 ;org 0D12Ch
.text$x:0000D12C ; COMDAT (pick associative to section at D0B0)
.text$x:0000D12C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D12C
.text$x:0000D12C ; =============== S U B R O U T I N E =======================================
.text$x:0000D12C
.text$x:0000D12C
.text$x:0000D12C __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 proc near
.text$x:0000D12C                                         ; DATA XREF: .xdata$x:0000FF94o
.text$x:0000D12C                 mov     eax, [ebp+8]
.text$x:0000D12F                 push    eax
.text$x:0000D130                 mov     eax, [ebp-10h]
.text$x:0000D133                 push    eax             ; void *
.text$x:0000D134                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000D139                 add     esp, 8
.text$x:0000D13C                 retn
.text$x:0000D13C __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 endp
.text$x:0000D13C
.text$x:0000D13D
.text$x:0000D13D ; =============== S U B R O U T I N E =======================================
.text$x:0000D13D
.text$x:0000D13D
.text$x:0000D13D __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$x:0000D13D                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:0000D13D
.text$x:0000D13D arg_4           = dword ptr  8
.text$x:0000D13D
.text$x:0000D13D                 mov     edx, [esp+arg_4]
.text$x:0000D141                 lea     eax, [edx+0Ch]
.text$x:0000D144                 mov     ecx, [edx-14h]
.text$x:0000D147                 xor     ecx, eax
.text$x:0000D149                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D14E                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$x:0000D153                 jmp     ___CxxFrameHandler3
.text$x:0000D153 __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$x:0000D153
.text$x:0000D153 _text$x         ends
.text$x:0000D153
.text$mn:0000D158 ; ===========================================================================
.text$mn:0000D158
.text$mn:0000D158 ; Segment type: Pure code
.text$mn:0000D158 ; Segment permissions: Read/Execute
.text$mn:0000D158 _text$mn        segment para public 'CODE' use32
.text$mn:0000D158                 assume cs:_text$mn
.text$mn:0000D158                 ;org 0D158h
.text$mn:0000D158 ; COMDAT (pick any)
.text$mn:0000D158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D158
.text$mn:0000D158 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D158
.text$mn:0000D158 ; Attributes: bp-based frame
.text$mn:0000D158
.text$mn:0000D158 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:0000D158                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000D158 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:0000D158                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000D158
.text$mn:0000D158 var_4           = dword ptr -4
.text$mn:0000D158 Dst             = dword ptr  8
.text$mn:0000D158 Src             = dword ptr  0Ch
.text$mn:0000D158 Size            = dword ptr  10h
.text$mn:0000D158
.text$mn:0000D158                 push    ebp
.text$mn:0000D159                 mov     ebp, esp
.text$mn:0000D15B                 push    ecx
.text$mn:0000D15C                 cmp     [ebp+Size], 0
.text$mn:0000D160                 jnz     short loc_D16A
.text$mn:0000D162                 mov     eax, [ebp+Dst]
.text$mn:0000D165                 mov     [ebp+var_4], eax
.text$mn:0000D168                 jmp     short loc_D181
.text$mn:0000D16A ; ---------------------------------------------------------------------------
.text$mn:0000D16A
.text$mn:0000D16A loc_D16A:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000D16A                 mov     ecx, [ebp+Size]
.text$mn:0000D16D                 push    ecx             ; Size
.text$mn:0000D16E                 mov     edx, [ebp+Src]
.text$mn:0000D171                 push    edx             ; Src
.text$mn:0000D172                 mov     eax, [ebp+Dst]
.text$mn:0000D175                 push    eax             ; Dst
.text$mn:0000D176                 call    _memcpy
.text$mn:0000D17B                 add     esp, 0Ch
.text$mn:0000D17E                 mov     [ebp+var_4], eax
.text$mn:0000D181
.text$mn:0000D181 loc_D181:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000D181                 mov     eax, [ebp+var_4]
.text$mn:0000D184                 mov     esp, ebp
.text$mn:0000D186                 pop     ebp
.text$mn:0000D187                 retn
.text$mn:0000D187 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000D187
.text$mn:0000D187 _text$mn        ends
.text$mn:0000D187
.text$mn:0000D188 ; ===========================================================================
.text$mn:0000D188
.text$mn:0000D188 ; Segment type: Pure code
.text$mn:0000D188 ; Segment permissions: Read/Execute
.text$mn:0000D188 _text$mn        segment para public 'CODE' use32
.text$mn:0000D188                 assume cs:_text$mn
.text$mn:0000D188                 ;org 0D188h
.text$mn:0000D188 ; COMDAT (pick any)
.text$mn:0000D188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D188
.text$mn:0000D188 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D188
.text$mn:0000D188 ; Attributes: bp-based frame
.text$mn:0000D188
.text$mn:0000D188 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:0000D188                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000D188 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000D188                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:0000D188                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+72p ...
.text$mn:0000D188
.text$mn:0000D188 var_4           = dword ptr -4
.text$mn:0000D188 Dst             = dword ptr  8
.text$mn:0000D188 Src             = dword ptr  0Ch
.text$mn:0000D188 arg_8           = dword ptr  10h
.text$mn:0000D188
.text$mn:0000D188                 push    ebp
.text$mn:0000D189                 mov     ebp, esp
.text$mn:0000D18B                 push    ecx
.text$mn:0000D18C                 cmp     [ebp+arg_8], 0
.text$mn:0000D190                 jnz     short loc_D19A
.text$mn:0000D192                 mov     eax, [ebp+Dst]
.text$mn:0000D195                 mov     [ebp+var_4], eax
.text$mn:0000D198                 jmp     short loc_D1B1
.text$mn:0000D19A ; ---------------------------------------------------------------------------
.text$mn:0000D19A
.text$mn:0000D19A loc_D19A:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000D19A                 mov     ecx, [ebp+arg_8]
.text$mn:0000D19D                 push    ecx             ; int
.text$mn:0000D19E                 mov     edx, [ebp+Src]
.text$mn:0000D1A1                 push    edx             ; Src
.text$mn:0000D1A2                 mov     eax, [ebp+Dst]
.text$mn:0000D1A5                 push    eax             ; Dst
.text$mn:0000D1A6                 call    _wmemcpy
.text$mn:0000D1AB                 add     esp, 0Ch
.text$mn:0000D1AE                 mov     [ebp+var_4], eax
.text$mn:0000D1B1
.text$mn:0000D1B1 loc_D1B1:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000D1B1                 mov     eax, [ebp+var_4]
.text$mn:0000D1B4                 mov     esp, ebp
.text$mn:0000D1B6                 pop     ebp
.text$mn:0000D1B7                 retn
.text$mn:0000D1B7 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000D1B7
.text$mn:0000D1B7 _text$mn        ends
.text$mn:0000D1B7
.text$mn:0000D1B8 ; ===========================================================================
.text$mn:0000D1B8
.text$mn:0000D1B8 ; Segment type: Pure code
.text$mn:0000D1B8 ; Segment permissions: Read/Execute
.text$mn:0000D1B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1B8                 assume cs:_text$mn
.text$mn:0000D1B8                 ;org 0D1B8h
.text$mn:0000D1B8 ; COMDAT (pick any)
.text$mn:0000D1B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1B8
.text$mn:0000D1B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1B8
.text$mn:0000D1B8 ; Attributes: bp-based frame
.text$mn:0000D1B8
.text$mn:0000D1B8 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000D1B8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000D1B8 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000D1B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000D1B8
.text$mn:0000D1B8 var_4           = dword ptr -4
.text$mn:0000D1B8 arg_0           = dword ptr  8
.text$mn:0000D1B8 arg_4           = dword ptr  0Ch
.text$mn:0000D1B8
.text$mn:0000D1B8                 push    ebp
.text$mn:0000D1B9                 mov     ebp, esp
.text$mn:0000D1BB                 push    ecx
.text$mn:0000D1BC                 mov     [ebp+var_4], ecx
.text$mn:0000D1BF                 mov     eax, [ebp+arg_4]
.text$mn:0000D1C2                 push    eax             ; int
.text$mn:0000D1C3                 mov     ecx, [ebp+arg_0]
.text$mn:0000D1C6                 push    ecx             ; void *
.text$mn:0000D1C7                 mov     ecx, [ebp+var_4]
.text$mn:0000D1CA                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000D1CF                 mov     esp, ebp
.text$mn:0000D1D1                 pop     ebp
.text$mn:0000D1D2                 retn    8
.text$mn:0000D1D2 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000D1D2
.text$mn:0000D1D2 ; ---------------------------------------------------------------------------
.text$mn:0000D1D5                 align 4
.text$mn:0000D1D5 _text$mn        ends
.text$mn:0000D1D5
.text$mn:0000D1D8 ; ===========================================================================
.text$mn:0000D1D8
.text$mn:0000D1D8 ; Segment type: Pure code
.text$mn:0000D1D8 ; Segment permissions: Read/Execute
.text$mn:0000D1D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1D8                 assume cs:_text$mn
.text$mn:0000D1D8                 ;org 0D1D8h
.text$mn:0000D1D8 ; COMDAT (pick any)
.text$mn:0000D1D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1D8
.text$mn:0000D1D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1D8
.text$mn:0000D1D8 ; Attributes: bp-based frame
.text$mn:0000D1D8
.text$mn:0000D1D8 ; int __stdcall std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::deallocate(void *, int)
.text$mn:0000D1D8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@I@Z
.text$mn:0000D1D8 ?deallocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@I@Z proc near
.text$mn:0000D1D8                                         ; CODE XREF: __catch$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000D1D8                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reallocate(uint)+F5p
.text$mn:0000D1D8
.text$mn:0000D1D8 var_4           = dword ptr -4
.text$mn:0000D1D8 arg_0           = dword ptr  8
.text$mn:0000D1D8 arg_4           = dword ptr  0Ch
.text$mn:0000D1D8
.text$mn:0000D1D8                 push    ebp
.text$mn:0000D1D9                 mov     ebp, esp
.text$mn:0000D1DB                 push    ecx
.text$mn:0000D1DC                 mov     [ebp+var_4], ecx
.text$mn:0000D1DF                 mov     eax, [ebp+arg_4]
.text$mn:0000D1E2                 push    eax             ; int
.text$mn:0000D1E3                 mov     ecx, [ebp+arg_0]
.text$mn:0000D1E6                 push    ecx             ; void *
.text$mn:0000D1E7                 mov     ecx, [ebp+var_4]
.text$mn:0000D1EA                 call    ?deallocate@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@I@Z ; std::allocator<MatchedCharInserted>::deallocate(MatchedCharInserted *,uint)
.text$mn:0000D1EF                 mov     esp, ebp
.text$mn:0000D1F1                 pop     ebp
.text$mn:0000D1F2                 retn    8
.text$mn:0000D1F2 ?deallocate@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@I@Z endp
.text$mn:0000D1F2
.text$mn:0000D1F2 ; ---------------------------------------------------------------------------
.text$mn:0000D1F5                 align 4
.text$mn:0000D1F5 _text$mn        ends
.text$mn:0000D1F5
.text$mn:0000D1F8 ; ===========================================================================
.text$mn:0000D1F8
.text$mn:0000D1F8 ; Segment type: Pure code
.text$mn:0000D1F8 ; Segment permissions: Read/Execute
.text$mn:0000D1F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1F8                 assume cs:_text$mn
.text$mn:0000D1F8                 ;org 0D1F8h
.text$mn:0000D1F8 ; COMDAT (pick any)
.text$mn:0000D1F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1F8
.text$mn:0000D1F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1F8
.text$mn:0000D1F8 ; Attributes: bp-based frame
.text$mn:0000D1F8
.text$mn:0000D1F8 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:0000D1F8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000D1F8 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000D1F8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+32p
.text$mn:0000D1F8
.text$mn:0000D1F8 var_4           = dword ptr -4
.text$mn:0000D1F8 arg_0           = dword ptr  8
.text$mn:0000D1F8 arg_4           = dword ptr  0Ch
.text$mn:0000D1F8
.text$mn:0000D1F8                 push    ebp
.text$mn:0000D1F9                 mov     ebp, esp
.text$mn:0000D1FB                 push    ecx
.text$mn:0000D1FC                 mov     [ebp+var_4], ecx
.text$mn:0000D1FF                 mov     eax, [ebp+arg_4]
.text$mn:0000D202                 push    eax             ; int
.text$mn:0000D203                 mov     ecx, [ebp+arg_0]
.text$mn:0000D206                 push    ecx             ; void *
.text$mn:0000D207                 mov     ecx, [ebp+var_4]
.text$mn:0000D20A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000D20F                 mov     esp, ebp
.text$mn:0000D211                 pop     ebp
.text$mn:0000D212                 retn    8
.text$mn:0000D212 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000D212
.text$mn:0000D212 ; ---------------------------------------------------------------------------
.text$mn:0000D215                 align 4
.text$mn:0000D215 _text$mn        ends
.text$mn:0000D215
.text$mn:0000D218 ; ===========================================================================
.text$mn:0000D218
.text$mn:0000D218 ; Segment type: Pure code
.text$mn:0000D218 ; Segment permissions: Read/Execute
.text$mn:0000D218 _text$mn        segment para public 'CODE' use32
.text$mn:0000D218                 assume cs:_text$mn
.text$mn:0000D218                 ;org 0D218h
.text$mn:0000D218 ; COMDAT (pick any)
.text$mn:0000D218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D218
.text$mn:0000D218 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D218
.text$mn:0000D218 ; Attributes: bp-based frame
.text$mn:0000D218
.text$mn:0000D218 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:0000D218                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000D218 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000D218                                         ; CODE XREF: __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:0000D218                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+FAp ...
.text$mn:0000D218
.text$mn:0000D218 var_4           = dword ptr -4
.text$mn:0000D218 arg_0           = dword ptr  8
.text$mn:0000D218 arg_4           = dword ptr  0Ch
.text$mn:0000D218
.text$mn:0000D218                 push    ebp
.text$mn:0000D219                 mov     ebp, esp
.text$mn:0000D21B                 push    ecx
.text$mn:0000D21C                 mov     [ebp+var_4], ecx
.text$mn:0000D21F                 mov     eax, [ebp+arg_4]
.text$mn:0000D222                 push    eax             ; int
.text$mn:0000D223                 mov     ecx, [ebp+arg_0]
.text$mn:0000D226                 push    ecx             ; void *
.text$mn:0000D227                 mov     ecx, [ebp+var_4]
.text$mn:0000D22A                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000D22F                 mov     esp, ebp
.text$mn:0000D231                 pop     ebp
.text$mn:0000D232                 retn    8
.text$mn:0000D232 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000D232
.text$mn:0000D232 ; ---------------------------------------------------------------------------
.text$mn:0000D235                 align 4
.text$mn:0000D235 _text$mn        ends
.text$mn:0000D235
.text$mn:0000D238 ; ===========================================================================
.text$mn:0000D238
.text$mn:0000D238 ; Segment type: Pure code
.text$mn:0000D238 ; Segment permissions: Read/Execute
.text$mn:0000D238 _text$mn        segment para public 'CODE' use32
.text$mn:0000D238                 assume cs:_text$mn
.text$mn:0000D238                 ;org 0D238h
.text$mn:0000D238 ; COMDAT (pick any)
.text$mn:0000D238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D238
.text$mn:0000D238 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D238
.text$mn:0000D238 ; Attributes: bp-based frame
.text$mn:0000D238
.text$mn:0000D238 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000D238                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000D238 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000D238                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000D238
.text$mn:0000D238 var_4           = dword ptr -4
.text$mn:0000D238 arg_0           = dword ptr  8
.text$mn:0000D238 arg_4           = dword ptr  0Ch
.text$mn:0000D238
.text$mn:0000D238                 push    ebp
.text$mn:0000D239                 mov     ebp, esp
.text$mn:0000D23B                 push    ecx
.text$mn:0000D23C                 mov     [ebp+var_4], ecx
.text$mn:0000D23F                 mov     eax, [ebp+arg_4]
.text$mn:0000D242                 push    eax             ; int
.text$mn:0000D243                 mov     ecx, [ebp+arg_0]
.text$mn:0000D246                 push    ecx             ; void *
.text$mn:0000D247                 mov     ecx, [ebp+var_4]
.text$mn:0000D24A                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000D24F                 mov     esp, ebp
.text$mn:0000D251                 pop     ebp
.text$mn:0000D252                 retn    8
.text$mn:0000D252 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000D252
.text$mn:0000D252 ; ---------------------------------------------------------------------------
.text$mn:0000D255                 align 4
.text$mn:0000D255 _text$mn        ends
.text$mn:0000D255
.text$mn:0000D258 ; ===========================================================================
.text$mn:0000D258
.text$mn:0000D258 ; Segment type: Pure code
.text$mn:0000D258 ; Segment permissions: Read/Execute
.text$mn:0000D258 _text$mn        segment para public 'CODE' use32
.text$mn:0000D258                 assume cs:_text$mn
.text$mn:0000D258                 ;org 0D258h
.text$mn:0000D258 ; COMDAT (pick any)
.text$mn:0000D258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D258
.text$mn:0000D258 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D258
.text$mn:0000D258 ; Attributes: bp-based frame
.text$mn:0000D258
.text$mn:0000D258 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000D258                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000D258 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000D258                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000D258
.text$mn:0000D258 var_4           = dword ptr -4
.text$mn:0000D258 arg_0           = dword ptr  8
.text$mn:0000D258
.text$mn:0000D258                 push    ebp
.text$mn:0000D259                 mov     ebp, esp
.text$mn:0000D25B                 push    ecx
.text$mn:0000D25C                 mov     [ebp+var_4], ecx
.text$mn:0000D25F                 mov     eax, [ebp+arg_0]
.text$mn:0000D262                 push    eax             ; void *
.text$mn:0000D263                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D268                 add     esp, 4
.text$mn:0000D26B                 mov     esp, ebp
.text$mn:0000D26D                 pop     ebp
.text$mn:0000D26E                 retn    8
.text$mn:0000D26E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000D26E
.text$mn:0000D26E ; ---------------------------------------------------------------------------
.text$mn:0000D271                 align 4
.text$mn:0000D271 _text$mn        ends
.text$mn:0000D271
.text$mn:0000D274 ; ===========================================================================
.text$mn:0000D274
.text$mn:0000D274 ; Segment type: Pure code
.text$mn:0000D274 ; Segment permissions: Read/Execute
.text$mn:0000D274 _text$mn        segment para public 'CODE' use32
.text$mn:0000D274                 assume cs:_text$mn
.text$mn:0000D274                 ;org 0D274h
.text$mn:0000D274 ; COMDAT (pick any)
.text$mn:0000D274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D274
.text$mn:0000D274 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D274
.text$mn:0000D274 ; Attributes: bp-based frame
.text$mn:0000D274
.text$mn:0000D274 ; int __stdcall std::allocator<MatchedCharInserted>::deallocate(void *, int)
.text$mn:0000D274                 public ?deallocate@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@I@Z
.text$mn:0000D274 ?deallocate@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@I@Z proc near
.text$mn:0000D274                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::deallocate(MatchedCharInserted *,uint)+12p
.text$mn:0000D274
.text$mn:0000D274 var_4           = dword ptr -4
.text$mn:0000D274 arg_0           = dword ptr  8
.text$mn:0000D274
.text$mn:0000D274                 push    ebp
.text$mn:0000D275                 mov     ebp, esp
.text$mn:0000D277                 push    ecx
.text$mn:0000D278                 mov     [ebp+var_4], ecx
.text$mn:0000D27B                 mov     eax, [ebp+arg_0]
.text$mn:0000D27E                 push    eax             ; void *
.text$mn:0000D27F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D284                 add     esp, 4
.text$mn:0000D287                 mov     esp, ebp
.text$mn:0000D289                 pop     ebp
.text$mn:0000D28A                 retn    8
.text$mn:0000D28A ?deallocate@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@I@Z endp
.text$mn:0000D28A
.text$mn:0000D28A ; ---------------------------------------------------------------------------
.text$mn:0000D28D                 align 10h
.text$mn:0000D28D _text$mn        ends
.text$mn:0000D28D
.text$mn:0000D290 ; ===========================================================================
.text$mn:0000D290
.text$mn:0000D290 ; Segment type: Pure code
.text$mn:0000D290 ; Segment permissions: Read/Execute
.text$mn:0000D290 _text$mn        segment para public 'CODE' use32
.text$mn:0000D290                 assume cs:_text$mn
.text$mn:0000D290                 ;org 0D290h
.text$mn:0000D290 ; COMDAT (pick any)
.text$mn:0000D290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D290
.text$mn:0000D290 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D290
.text$mn:0000D290 ; Attributes: bp-based frame
.text$mn:0000D290
.text$mn:0000D290 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:0000D290                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000D290 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000D290                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:0000D290                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:0000D290
.text$mn:0000D290 var_4           = dword ptr -4
.text$mn:0000D290 arg_0           = dword ptr  8
.text$mn:0000D290
.text$mn:0000D290                 push    ebp
.text$mn:0000D291                 mov     ebp, esp
.text$mn:0000D293                 push    ecx
.text$mn:0000D294                 mov     [ebp+var_4], ecx
.text$mn:0000D297                 mov     eax, [ebp+arg_0]
.text$mn:0000D29A                 push    eax             ; void *
.text$mn:0000D29B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D2A0                 add     esp, 4
.text$mn:0000D2A3                 mov     esp, ebp
.text$mn:0000D2A5                 pop     ebp
.text$mn:0000D2A6                 retn    8
.text$mn:0000D2A6 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000D2A6
.text$mn:0000D2A6 ; ---------------------------------------------------------------------------
.text$mn:0000D2A9                 align 4
.text$mn:0000D2A9 _text$mn        ends
.text$mn:0000D2A9
.text$mn:0000D2AC ; ===========================================================================
.text$mn:0000D2AC
.text$mn:0000D2AC ; Segment type: Pure code
.text$mn:0000D2AC ; Segment permissions: Read/Execute
.text$mn:0000D2AC _text$mn        segment para public 'CODE' use32
.text$mn:0000D2AC                 assume cs:_text$mn
.text$mn:0000D2AC                 ;org 0D2ACh
.text$mn:0000D2AC ; COMDAT (pick any)
.text$mn:0000D2AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2AC
.text$mn:0000D2AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2AC
.text$mn:0000D2AC ; Attributes: bp-based frame
.text$mn:0000D2AC
.text$mn:0000D2AC ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:0000D2AC                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000D2AC ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000D2AC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:0000D2AC
.text$mn:0000D2AC var_4           = dword ptr -4
.text$mn:0000D2AC arg_0           = dword ptr  8
.text$mn:0000D2AC
.text$mn:0000D2AC                 push    ebp
.text$mn:0000D2AD                 mov     ebp, esp
.text$mn:0000D2AF                 push    ecx
.text$mn:0000D2B0                 mov     [ebp+var_4], ecx
.text$mn:0000D2B3                 mov     eax, [ebp+arg_0]
.text$mn:0000D2B6                 push    eax             ; void *
.text$mn:0000D2B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D2BC                 add     esp, 4
.text$mn:0000D2BF                 mov     esp, ebp
.text$mn:0000D2C1                 pop     ebp
.text$mn:0000D2C2                 retn    8
.text$mn:0000D2C2 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000D2C2
.text$mn:0000D2C2 ; ---------------------------------------------------------------------------
.text$mn:0000D2C5                 align 4
.text$mn:0000D2C5 _text$mn        ends
.text$mn:0000D2C5
.text$mn:0000D2C8 ; ===========================================================================
.text$mn:0000D2C8
.text$mn:0000D2C8 ; Segment type: Pure code
.text$mn:0000D2C8 ; Segment permissions: Read/Execute
.text$mn:0000D2C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D2C8                 assume cs:_text$mn
.text$mn:0000D2C8                 ;org 0D2C8h
.text$mn:0000D2C8 ; COMDAT (pick any)
.text$mn:0000D2C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2C8
.text$mn:0000D2C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2C8
.text$mn:0000D2C8 ; Attributes: bp-based frame
.text$mn:0000D2C8
.text$mn:0000D2C8 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000D2C8                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000D2C8 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000D2C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:0000D2C8
.text$mn:0000D2C8 var_4           = dword ptr -4
.text$mn:0000D2C8 arg_0           = dword ptr  8
.text$mn:0000D2C8
.text$mn:0000D2C8                 push    ebp
.text$mn:0000D2C9                 mov     ebp, esp
.text$mn:0000D2CB                 push    ecx
.text$mn:0000D2CC                 mov     [ebp+var_4], ecx
.text$mn:0000D2CF                 mov     eax, [ebp+arg_0]
.text$mn:0000D2D2                 push    eax             ; void *
.text$mn:0000D2D3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D2D8                 add     esp, 4
.text$mn:0000D2DB                 mov     esp, ebp
.text$mn:0000D2DD                 pop     ebp
.text$mn:0000D2DE                 retn    8
.text$mn:0000D2DE ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:0000D2DE
.text$mn:0000D2DE ; ---------------------------------------------------------------------------
.text$mn:0000D2E1                 align 4
.text$mn:0000D2E1 _text$mn        ends
.text$mn:0000D2E1
.text$mn:0000D2E4 ; ===========================================================================
.text$mn:0000D2E4
.text$mn:0000D2E4 ; Segment type: Pure code
.text$mn:0000D2E4 ; Segment permissions: Read/Execute
.text$mn:0000D2E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D2E4                 assume cs:_text$mn
.text$mn:0000D2E4                 ;org 0D2E4h
.text$mn:0000D2E4 ; COMDAT (pick any)
.text$mn:0000D2E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2E4
.text$mn:0000D2E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2E4
.text$mn:0000D2E4 ; Attributes: bp-based frame
.text$mn:0000D2E4
.text$mn:0000D2E4 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000D2E4                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000D2E4 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000D2E4                                         ; DATA XREF: .rdata:00011388o
.text$mn:0000D2E4
.text$mn:0000D2E4 var_4           = dword ptr -4
.text$mn:0000D2E4 arg_0           = dword ptr  8
.text$mn:0000D2E4 arg_4           = dword ptr  0Ch
.text$mn:0000D2E4
.text$mn:0000D2E4                 push    ebp
.text$mn:0000D2E5                 mov     ebp, esp
.text$mn:0000D2E7                 push    ecx
.text$mn:0000D2E8                 mov     [ebp+var_4], ecx
.text$mn:0000D2EB                 mov     eax, [ebp+arg_4]
.text$mn:0000D2EE                 push    eax             ; int
.text$mn:0000D2EF                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000D2F4                 add     esp, 4
.text$mn:0000D2F7                 test    eax, eax
.text$mn:0000D2F9                 jz      short loc_D314
.text$mn:0000D2FB                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:0000D300                 push    eax             ; struct std::error_category *
.text$mn:0000D301                 mov     ecx, [ebp+arg_4]
.text$mn:0000D304                 push    ecx             ; int
.text$mn:0000D305                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D308                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D30D                 mov     eax, [ebp+arg_0]
.text$mn:0000D310                 jmp     short loc_D329
.text$mn:0000D312 ; ---------------------------------------------------------------------------
.text$mn:0000D312                 jmp     short loc_D329
.text$mn:0000D314 ; ---------------------------------------------------------------------------
.text$mn:0000D314
.text$mn:0000D314 loc_D314:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000D314                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000D319                 push    eax             ; struct std::error_category *
.text$mn:0000D31A                 mov     edx, [ebp+arg_4]
.text$mn:0000D31D                 push    edx             ; int
.text$mn:0000D31E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D321                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D326                 mov     eax, [ebp+arg_0]
.text$mn:0000D329
.text$mn:0000D329 loc_D329:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000D329                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000D329                 mov     esp, ebp
.text$mn:0000D32B                 pop     ebp
.text$mn:0000D32C                 retn    8
.text$mn:0000D32C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000D32C
.text$mn:0000D32C ; ---------------------------------------------------------------------------
.text$mn:0000D32F                 align 10h
.text$mn:0000D32F _text$mn        ends
.text$mn:0000D32F
.text$mn:0000D330 ; ===========================================================================
.text$mn:0000D330
.text$mn:0000D330 ; Segment type: Pure code
.text$mn:0000D330 ; Segment permissions: Read/Execute
.text$mn:0000D330 _text$mn        segment para public 'CODE' use32
.text$mn:0000D330                 assume cs:_text$mn
.text$mn:0000D330                 ;org 0D330h
.text$mn:0000D330 ; COMDAT (pick any)
.text$mn:0000D330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D330
.text$mn:0000D330 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D330
.text$mn:0000D330 ; Attributes: bp-based frame
.text$mn:0000D330
.text$mn:0000D330 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:0000D330                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000D330 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000D330                                         ; DATA XREF: .rdata:000112F8o
.text$mn:0000D330                                         ; .rdata:00011314o ...
.text$mn:0000D330
.text$mn:0000D330 var_4           = dword ptr -4
.text$mn:0000D330 arg_0           = dword ptr  8
.text$mn:0000D330 arg_4           = dword ptr  0Ch
.text$mn:0000D330
.text$mn:0000D330                 push    ebp
.text$mn:0000D331                 mov     ebp, esp
.text$mn:0000D333                 push    ecx
.text$mn:0000D334                 mov     [ebp+var_4], ecx
.text$mn:0000D337                 mov     eax, [ebp+var_4]
.text$mn:0000D33A                 push    eax             ; struct std::error_category *
.text$mn:0000D33B                 mov     ecx, [ebp+arg_4]
.text$mn:0000D33E                 push    ecx             ; int
.text$mn:0000D33F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D342                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D347                 mov     eax, [ebp+arg_0]
.text$mn:0000D34A                 mov     esp, ebp
.text$mn:0000D34C                 pop     ebp
.text$mn:0000D34D                 retn    8
.text$mn:0000D34D ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000D34D
.text$mn:0000D34D _text$mn        ends
.text$mn:0000D34D
.text$mn:0000D350 ; ===========================================================================
.text$mn:0000D350
.text$mn:0000D350 ; Segment type: Pure code
.text$mn:0000D350 ; Segment permissions: Read/Execute
.text$mn:0000D350 _text$mn        segment para public 'CODE' use32
.text$mn:0000D350                 assume cs:_text$mn
.text$mn:0000D350                 ;org 0D350h
.text$mn:0000D350 ; COMDAT (pick any)
.text$mn:0000D350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D350
.text$mn:0000D350 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D350
.text$mn:0000D350 ; Attributes: bp-based frame
.text$mn:0000D350
.text$mn:0000D350 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_is(wchar_t const *, wchar_t const *, short *)const
.text$mn:0000D350                 public ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
.text$mn:0000D350 ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z proc near
.text$mn:0000D350                                         ; DATA XREF: .rdata:000112B8o
.text$mn:0000D350
.text$mn:0000D350 var_4           = dword ptr -4
.text$mn:0000D350 arg_0           = dword ptr  8
.text$mn:0000D350 arg_4           = dword ptr  0Ch
.text$mn:0000D350 arg_8           = dword ptr  10h
.text$mn:0000D350
.text$mn:0000D350                 push    ebp
.text$mn:0000D351                 mov     ebp, esp
.text$mn:0000D353                 push    ecx
.text$mn:0000D354                 mov     [ebp+var_4], ecx
.text$mn:0000D357                 push    0A88h           ; unsigned int
.text$mn:0000D35C                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D361                 mov     eax, [ebp+arg_4]
.text$mn:0000D364                 push    eax             ; int
.text$mn:0000D365                 mov     ecx, [ebp+arg_0]
.text$mn:0000D368                 push    ecx             ; int
.text$mn:0000D369                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D36E                 add     esp, 10h
.text$mn:0000D371                 push    0A89h           ; unsigned int
.text$mn:0000D376                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D37B                 mov     edx, [ebp+arg_8]
.text$mn:0000D37E                 push    edx             ; int
.text$mn:0000D37F                 call    ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z ; std::_Debug_pointer<short>(short *,wchar_t const *,uint)
.text$mn:0000D384                 add     esp, 0Ch
.text$mn:0000D387                 mov     eax, [ebp+var_4]
.text$mn:0000D38A                 add     eax, 8
.text$mn:0000D38D                 push    eax
.text$mn:0000D38E                 mov     ecx, [ebp+arg_8]
.text$mn:0000D391                 push    ecx
.text$mn:0000D392                 mov     edx, [ebp+arg_4]
.text$mn:0000D395                 push    edx
.text$mn:0000D396                 mov     eax, [ebp+arg_0]
.text$mn:0000D399                 push    eax
.text$mn:0000D39A                 call    __Getwctypes
.text$mn:0000D39F                 add     esp, 10h
.text$mn:0000D3A2                 mov     esp, ebp
.text$mn:0000D3A4                 pop     ebp
.text$mn:0000D3A5                 retn    0Ch
.text$mn:0000D3A5 ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z endp
.text$mn:0000D3A5
.text$mn:0000D3A5 _text$mn        ends
.text$mn:0000D3A5
.text$mn:0000D3A8 ; ===========================================================================
.text$mn:0000D3A8
.text$mn:0000D3A8 ; Segment type: Pure code
.text$mn:0000D3A8 ; Segment permissions: Read/Execute
.text$mn:0000D3A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D3A8                 assume cs:_text$mn
.text$mn:0000D3A8                 ;org 0D3A8h
.text$mn:0000D3A8 ; COMDAT (pick any)
.text$mn:0000D3A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D3A8
.text$mn:0000D3A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D3A8
.text$mn:0000D3A8 ; Attributes: bp-based frame
.text$mn:0000D3A8
.text$mn:0000D3A8 ; protected: virtual bool __thiscall std::ctype<wchar_t>::do_is(short, wchar_t)const
.text$mn:0000D3A8                 public ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
.text$mn:0000D3A8 ?do_is@?$ctype@_W@std@@MBE_NF_W@Z proc near ; DATA XREF: .rdata:000112BCo
.text$mn:0000D3A8
.text$mn:0000D3A8 var_8           = dword ptr -8
.text$mn:0000D3A8 var_4           = dword ptr -4
.text$mn:0000D3A8 arg_0           = word ptr  8
.text$mn:0000D3A8 arg_4           = word ptr  0Ch
.text$mn:0000D3A8
.text$mn:0000D3A8                 push    ebp
.text$mn:0000D3A9                 mov     ebp, esp
.text$mn:0000D3AB                 sub     esp, 8
.text$mn:0000D3AE                 mov     [ebp+var_8], ecx
.text$mn:0000D3B1                 mov     eax, [ebp+var_8]
.text$mn:0000D3B4                 add     eax, 8
.text$mn:0000D3B7                 push    eax
.text$mn:0000D3B8                 movzx   ecx, [ebp+arg_4]
.text$mn:0000D3BC                 push    ecx
.text$mn:0000D3BD                 call    __Getwctype
.text$mn:0000D3C2                 add     esp, 8
.text$mn:0000D3C5                 movsx   edx, ax
.text$mn:0000D3C8                 movsx   eax, [ebp+arg_0]
.text$mn:0000D3CC                 and     edx, eax
.text$mn:0000D3CE                 jz      short loc_D3D9
.text$mn:0000D3D0                 mov     [ebp+var_4], 1
.text$mn:0000D3D7                 jmp     short loc_D3E0
.text$mn:0000D3D9 ; ---------------------------------------------------------------------------
.text$mn:0000D3D9
.text$mn:0000D3D9 loc_D3D9:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+26j
.text$mn:0000D3D9                 mov     [ebp+var_4], 0
.text$mn:0000D3E0
.text$mn:0000D3E0 loc_D3E0:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+2Fj
.text$mn:0000D3E0                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000D3E3                 mov     esp, ebp
.text$mn:0000D3E5                 pop     ebp
.text$mn:0000D3E6                 retn    8
.text$mn:0000D3E6 ?do_is@?$ctype@_W@std@@MBE_NF_W@Z endp
.text$mn:0000D3E6
.text$mn:0000D3E6 ; ---------------------------------------------------------------------------
.text$mn:0000D3E9                 align 4
.text$mn:0000D3E9 _text$mn        ends
.text$mn:0000D3E9
.text$mn:0000D3EC ; ===========================================================================
.text$mn:0000D3EC
.text$mn:0000D3EC ; Segment type: Pure code
.text$mn:0000D3EC ; Segment permissions: Read/Execute
.text$mn:0000D3EC _text$mn        segment para public 'CODE' use32
.text$mn:0000D3EC                 assume cs:_text$mn
.text$mn:0000D3EC                 ;org 0D3ECh
.text$mn:0000D3EC ; COMDAT (pick any)
.text$mn:0000D3EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D3EC
.text$mn:0000D3EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D3EC
.text$mn:0000D3EC ; Attributes: bp-based frame
.text$mn:0000D3EC
.text$mn:0000D3EC ; protected: virtual char __thiscall std::ctype<wchar_t>::do_narrow(wchar_t, char)const
.text$mn:0000D3EC                 public ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
.text$mn:0000D3EC ?do_narrow@?$ctype@_W@std@@MBED_WD@Z proc near
.text$mn:0000D3EC                                         ; DATA XREF: .rdata:000112E4o
.text$mn:0000D3EC
.text$mn:0000D3EC var_4           = dword ptr -4
.text$mn:0000D3EC arg_0           = word ptr  8
.text$mn:0000D3EC arg_4           = byte ptr  0Ch
.text$mn:0000D3EC
.text$mn:0000D3EC                 push    ebp
.text$mn:0000D3ED                 mov     ebp, esp
.text$mn:0000D3EF                 push    ecx
.text$mn:0000D3F0                 mov     [ebp+var_4], ecx
.text$mn:0000D3F3                 movzx   eax, [ebp+arg_4]
.text$mn:0000D3F7                 push    eax
.text$mn:0000D3F8                 movzx   ecx, [ebp+arg_0]
.text$mn:0000D3FC                 push    ecx
.text$mn:0000D3FD                 mov     ecx, [ebp+var_4]
.text$mn:0000D400                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:0000D405                 mov     esp, ebp
.text$mn:0000D407                 pop     ebp
.text$mn:0000D408                 retn    8
.text$mn:0000D408 ?do_narrow@?$ctype@_W@std@@MBED_WD@Z endp
.text$mn:0000D408
.text$mn:0000D408 ; ---------------------------------------------------------------------------
.text$mn:0000D40B                 align 4
.text$mn:0000D40B _text$mn        ends
.text$mn:0000D40B
.text$mn:0000D40C ; ===========================================================================
.text$mn:0000D40C
.text$mn:0000D40C ; Segment type: Pure code
.text$mn:0000D40C ; Segment permissions: Read/Execute
.text$mn:0000D40C _text$mn        segment para public 'CODE' use32
.text$mn:0000D40C                 assume cs:_text$mn
.text$mn:0000D40C                 ;org 0D40Ch
.text$mn:0000D40C ; COMDAT (pick any)
.text$mn:0000D40C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D40C
.text$mn:0000D40C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D40C
.text$mn:0000D40C ; Attributes: bp-based frame
.text$mn:0000D40C
.text$mn:0000D40C ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_narrow(wchar_t const *, wchar_t const *, char, char *)const
.text$mn:0000D40C                 public ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
.text$mn:0000D40C ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z proc near
.text$mn:0000D40C                                         ; DATA XREF: .rdata:000112E0o
.text$mn:0000D40C
.text$mn:0000D40C var_4           = dword ptr -4
.text$mn:0000D40C arg_0           = dword ptr  8
.text$mn:0000D40C arg_4           = dword ptr  0Ch
.text$mn:0000D40C arg_8           = byte ptr  10h
.text$mn:0000D40C arg_C           = dword ptr  14h
.text$mn:0000D40C
.text$mn:0000D40C                 push    ebp
.text$mn:0000D40D                 mov     ebp, esp
.text$mn:0000D40F                 push    ecx
.text$mn:0000D410                 mov     [ebp+var_4], ecx
.text$mn:0000D413                 push    0AE2h           ; unsigned int
.text$mn:0000D418                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D41D                 mov     eax, [ebp+arg_4]
.text$mn:0000D420                 push    eax             ; int
.text$mn:0000D421                 mov     ecx, [ebp+arg_0]
.text$mn:0000D424                 push    ecx             ; int
.text$mn:0000D425                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D42A                 add     esp, 10h
.text$mn:0000D42D                 push    0AE3h           ; unsigned int
.text$mn:0000D432                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D437                 mov     edx, [ebp+arg_C]
.text$mn:0000D43A                 push    edx             ; int
.text$mn:0000D43B                 call    ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z ; std::_Debug_pointer<char>(char *,wchar_t const *,uint)
.text$mn:0000D440                 add     esp, 0Ch
.text$mn:0000D443                 jmp     short loc_D457
.text$mn:0000D445 ; ---------------------------------------------------------------------------
.text$mn:0000D445
.text$mn:0000D445 loc_D445:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+6Cj
.text$mn:0000D445                 mov     eax, [ebp+arg_0]
.text$mn:0000D448                 add     eax, 2
.text$mn:0000D44B                 mov     [ebp+arg_0], eax
.text$mn:0000D44E                 mov     ecx, [ebp+arg_C]
.text$mn:0000D451                 add     ecx, 1
.text$mn:0000D454                 mov     [ebp+arg_C], ecx
.text$mn:0000D457
.text$mn:0000D457 loc_D457:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+37j
.text$mn:0000D457                 mov     edx, [ebp+arg_0]
.text$mn:0000D45A                 cmp     edx, [ebp+arg_4]
.text$mn:0000D45D                 jz      short loc_D47A
.text$mn:0000D45F                 movzx   eax, [ebp+arg_8]
.text$mn:0000D463                 push    eax
.text$mn:0000D464                 mov     ecx, [ebp+arg_0]
.text$mn:0000D467                 movzx   edx, word ptr [ecx]
.text$mn:0000D46A                 push    edx
.text$mn:0000D46B                 mov     ecx, [ebp+var_4]
.text$mn:0000D46E                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:0000D473                 mov     ecx, [ebp+arg_C]
.text$mn:0000D476                 mov     [ecx], al
.text$mn:0000D478                 jmp     short loc_D445
.text$mn:0000D47A ; ---------------------------------------------------------------------------
.text$mn:0000D47A
.text$mn:0000D47A loc_D47A:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+51j
.text$mn:0000D47A                 mov     eax, [ebp+arg_0]
.text$mn:0000D47D                 mov     esp, ebp
.text$mn:0000D47F                 pop     ebp
.text$mn:0000D480                 retn    10h
.text$mn:0000D480 ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z endp
.text$mn:0000D480
.text$mn:0000D480 ; ---------------------------------------------------------------------------
.text$mn:0000D483                 align 4
.text$mn:0000D483 _text$mn        ends
.text$mn:0000D483
.text$mn:0000D484 ; ===========================================================================
.text$mn:0000D484
.text$mn:0000D484 ; Segment type: Pure code
.text$mn:0000D484 ; Segment permissions: Read/Execute
.text$mn:0000D484 _text$mn        segment para public 'CODE' use32
.text$mn:0000D484                 assume cs:_text$mn
.text$mn:0000D484                 ;org 0D484h
.text$mn:0000D484 ; COMDAT (pick any)
.text$mn:0000D484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D484
.text$mn:0000D484 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D484
.text$mn:0000D484 ; Attributes: bp-based frame
.text$mn:0000D484
.text$mn:0000D484 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_is(short, wchar_t const *, wchar_t const *)const
.text$mn:0000D484                 public ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:0000D484 ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:0000D484                                         ; DATA XREF: .rdata:000112C0o
.text$mn:0000D484
.text$mn:0000D484 var_4           = dword ptr -4
.text$mn:0000D484 arg_0           = word ptr  8
.text$mn:0000D484 arg_4           = dword ptr  0Ch
.text$mn:0000D484 arg_8           = dword ptr  10h
.text$mn:0000D484
.text$mn:0000D484                 push    ebp
.text$mn:0000D485                 mov     ebp, esp
.text$mn:0000D487                 push    ecx
.text$mn:0000D488                 mov     [ebp+var_4], ecx
.text$mn:0000D48B                 push    0A90h           ; unsigned int
.text$mn:0000D490                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D495                 mov     eax, [ebp+arg_8]
.text$mn:0000D498                 push    eax             ; int
.text$mn:0000D499                 mov     ecx, [ebp+arg_4]
.text$mn:0000D49C                 push    ecx             ; int
.text$mn:0000D49D                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D4A2                 add     esp, 10h
.text$mn:0000D4A5                 jmp     short loc_D4B0
.text$mn:0000D4A7 ; ---------------------------------------------------------------------------
.text$mn:0000D4A7
.text$mn:0000D4A7 loc_D4A7:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:0000D4A7                 mov     edx, [ebp+arg_4]
.text$mn:0000D4AA                 add     edx, 2
.text$mn:0000D4AD                 mov     [ebp+arg_4], edx
.text$mn:0000D4B0
.text$mn:0000D4B0 loc_D4B0:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+21j
.text$mn:0000D4B0                 mov     eax, [ebp+arg_4]
.text$mn:0000D4B3                 cmp     eax, [ebp+arg_8]
.text$mn:0000D4B6                 jz      short loc_D4D5
.text$mn:0000D4B8                 mov     ecx, [ebp+arg_4]
.text$mn:0000D4BB                 movzx   edx, word ptr [ecx]
.text$mn:0000D4BE                 push    edx
.text$mn:0000D4BF                 movzx   eax, [ebp+arg_0]
.text$mn:0000D4C3                 push    eax
.text$mn:0000D4C4                 mov     ecx, [ebp+var_4]
.text$mn:0000D4C7                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:0000D4CC                 movzx   ecx, al
.text$mn:0000D4CF                 test    ecx, ecx
.text$mn:0000D4D1                 jnz     short loc_D4D5
.text$mn:0000D4D3                 jmp     short loc_D4A7
.text$mn:0000D4D5 ; ---------------------------------------------------------------------------
.text$mn:0000D4D5
.text$mn:0000D4D5 loc_D4D5:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+32j
.text$mn:0000D4D5                                         ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:0000D4D5                 mov     eax, [ebp+arg_4]
.text$mn:0000D4D8                 mov     esp, ebp
.text$mn:0000D4DA                 pop     ebp
.text$mn:0000D4DB                 retn    0Ch
.text$mn:0000D4DB ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:0000D4DB
.text$mn:0000D4DB ; ---------------------------------------------------------------------------
.text$mn:0000D4DE                 align 10h
.text$mn:0000D4DE _text$mn        ends
.text$mn:0000D4DE
.text$mn:0000D4E0 ; ===========================================================================
.text$mn:0000D4E0
.text$mn:0000D4E0 ; Segment type: Pure code
.text$mn:0000D4E0 ; Segment permissions: Read/Execute
.text$mn:0000D4E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D4E0                 assume cs:_text$mn
.text$mn:0000D4E0                 ;org 0D4E0h
.text$mn:0000D4E0 ; COMDAT (pick any)
.text$mn:0000D4E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D4E0
.text$mn:0000D4E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D4E0
.text$mn:0000D4E0 ; Attributes: bp-based frame
.text$mn:0000D4E0
.text$mn:0000D4E0 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_not(short, wchar_t const *, wchar_t const *)const
.text$mn:0000D4E0                 public ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:0000D4E0 ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:0000D4E0                                         ; DATA XREF: .rdata:000112C4o
.text$mn:0000D4E0
.text$mn:0000D4E0 var_4           = dword ptr -4
.text$mn:0000D4E0 arg_0           = word ptr  8
.text$mn:0000D4E0 arg_4           = dword ptr  0Ch
.text$mn:0000D4E0 arg_8           = dword ptr  10h
.text$mn:0000D4E0
.text$mn:0000D4E0                 push    ebp
.text$mn:0000D4E1                 mov     ebp, esp
.text$mn:0000D4E3                 push    ecx
.text$mn:0000D4E4                 mov     [ebp+var_4], ecx
.text$mn:0000D4E7                 push    0A99h           ; unsigned int
.text$mn:0000D4EC                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D4F1                 mov     eax, [ebp+arg_8]
.text$mn:0000D4F4                 push    eax             ; int
.text$mn:0000D4F5                 mov     ecx, [ebp+arg_4]
.text$mn:0000D4F8                 push    ecx             ; int
.text$mn:0000D4F9                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D4FE                 add     esp, 10h
.text$mn:0000D501                 jmp     short loc_D50C
.text$mn:0000D503 ; ---------------------------------------------------------------------------
.text$mn:0000D503
.text$mn:0000D503 loc_D503:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:0000D503                 mov     edx, [ebp+arg_4]
.text$mn:0000D506                 add     edx, 2
.text$mn:0000D509                 mov     [ebp+arg_4], edx
.text$mn:0000D50C
.text$mn:0000D50C loc_D50C:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+21j
.text$mn:0000D50C                 mov     eax, [ebp+arg_4]
.text$mn:0000D50F                 cmp     eax, [ebp+arg_8]
.text$mn:0000D512                 jz      short loc_D531
.text$mn:0000D514                 mov     ecx, [ebp+arg_4]
.text$mn:0000D517                 movzx   edx, word ptr [ecx]
.text$mn:0000D51A                 push    edx
.text$mn:0000D51B                 movzx   eax, [ebp+arg_0]
.text$mn:0000D51F                 push    eax
.text$mn:0000D520                 mov     ecx, [ebp+var_4]
.text$mn:0000D523                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:0000D528                 movzx   ecx, al
.text$mn:0000D52B                 test    ecx, ecx
.text$mn:0000D52D                 jz      short loc_D531
.text$mn:0000D52F                 jmp     short loc_D503
.text$mn:0000D531 ; ---------------------------------------------------------------------------
.text$mn:0000D531
.text$mn:0000D531 loc_D531:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+32j
.text$mn:0000D531                                         ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:0000D531                 mov     eax, [ebp+arg_4]
.text$mn:0000D534                 mov     esp, ebp
.text$mn:0000D536                 pop     ebp
.text$mn:0000D537                 retn    0Ch
.text$mn:0000D537 ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:0000D537
.text$mn:0000D537 ; ---------------------------------------------------------------------------
.text$mn:0000D53A                 align 4
.text$mn:0000D53A _text$mn        ends
.text$mn:0000D53A
.text$mn:0000D53C ; ===========================================================================
.text$mn:0000D53C
.text$mn:0000D53C ; Segment type: Pure code
.text$mn:0000D53C ; Segment permissions: Read/Execute
.text$mn:0000D53C _text$mn        segment para public 'CODE' use32
.text$mn:0000D53C                 assume cs:_text$mn
.text$mn:0000D53C                 ;org 0D53Ch
.text$mn:0000D53C ; COMDAT (pick any)
.text$mn:0000D53C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D53C
.text$mn:0000D53C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D53C
.text$mn:0000D53C ; Attributes: bp-based frame
.text$mn:0000D53C
.text$mn:0000D53C ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_tolower(wchar_t *, wchar_t const *)const
.text$mn:0000D53C                 public ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:0000D53C ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:0000D53C                                         ; DATA XREF: .rdata:000112C8o
.text$mn:0000D53C
.text$mn:0000D53C var_4           = dword ptr -4
.text$mn:0000D53C arg_0           = dword ptr  8
.text$mn:0000D53C arg_4           = dword ptr  0Ch
.text$mn:0000D53C
.text$mn:0000D53C                 push    ebp
.text$mn:0000D53D                 mov     ebp, esp
.text$mn:0000D53F                 push    ecx
.text$mn:0000D540                 mov     [ebp+var_4], ecx
.text$mn:0000D543                 push    0AA7h           ; unsigned int
.text$mn:0000D548                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D54D                 mov     eax, [ebp+arg_4]
.text$mn:0000D550                 push    eax             ; int
.text$mn:0000D551                 mov     ecx, [ebp+arg_0]
.text$mn:0000D554                 push    ecx             ; int
.text$mn:0000D555                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D55A                 add     esp, 10h
.text$mn:0000D55D                 jmp     short loc_D568
.text$mn:0000D55F ; ---------------------------------------------------------------------------
.text$mn:0000D55F
.text$mn:0000D55F loc_D55F:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+50j
.text$mn:0000D55F                 mov     edx, [ebp+arg_0]
.text$mn:0000D562                 add     edx, 2
.text$mn:0000D565                 mov     [ebp+arg_0], edx
.text$mn:0000D568
.text$mn:0000D568 loc_D568:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+21j
.text$mn:0000D568                 mov     eax, [ebp+arg_0]
.text$mn:0000D56B                 cmp     eax, [ebp+arg_4]
.text$mn:0000D56E                 jz      short loc_D58E
.text$mn:0000D570                 mov     ecx, [ebp+var_4]
.text$mn:0000D573                 add     ecx, 8
.text$mn:0000D576                 push    ecx
.text$mn:0000D577                 mov     edx, [ebp+arg_0]
.text$mn:0000D57A                 movzx   eax, word ptr [edx]
.text$mn:0000D57D                 push    eax
.text$mn:0000D57E                 call    __Towlower
.text$mn:0000D583                 add     esp, 8
.text$mn:0000D586                 mov     ecx, [ebp+arg_0]
.text$mn:0000D589                 mov     [ecx], ax
.text$mn:0000D58C                 jmp     short loc_D55F
.text$mn:0000D58E ; ---------------------------------------------------------------------------
.text$mn:0000D58E
.text$mn:0000D58E loc_D58E:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+32j
.text$mn:0000D58E                 mov     eax, [ebp+arg_0]
.text$mn:0000D591                 mov     esp, ebp
.text$mn:0000D593                 pop     ebp
.text$mn:0000D594                 retn    8
.text$mn:0000D594 ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:0000D594
.text$mn:0000D594 ; ---------------------------------------------------------------------------
.text$mn:0000D597                 align 4
.text$mn:0000D597 _text$mn        ends
.text$mn:0000D597
.text$mn:0000D598 ; ===========================================================================
.text$mn:0000D598
.text$mn:0000D598 ; Segment type: Pure code
.text$mn:0000D598 ; Segment permissions: Read/Execute
.text$mn:0000D598 _text$mn        segment para public 'CODE' use32
.text$mn:0000D598                 assume cs:_text$mn
.text$mn:0000D598                 ;org 0D598h
.text$mn:0000D598 ; COMDAT (pick any)
.text$mn:0000D598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D598
.text$mn:0000D598 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D598
.text$mn:0000D598 ; Attributes: bp-based frame
.text$mn:0000D598
.text$mn:0000D598 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_tolower(wchar_t)const
.text$mn:0000D598                 public ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:0000D598 ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:0000D598                                         ; DATA XREF: .rdata:000112CCo
.text$mn:0000D598
.text$mn:0000D598 var_4           = dword ptr -4
.text$mn:0000D598 arg_0           = word ptr  8
.text$mn:0000D598
.text$mn:0000D598                 push    ebp
.text$mn:0000D599                 mov     ebp, esp
.text$mn:0000D59B                 push    ecx
.text$mn:0000D59C                 mov     [ebp+var_4], ecx
.text$mn:0000D59F                 mov     eax, [ebp+var_4]
.text$mn:0000D5A2                 add     eax, 8
.text$mn:0000D5A5                 push    eax
.text$mn:0000D5A6                 movzx   ecx, [ebp+arg_0]
.text$mn:0000D5AA                 push    ecx
.text$mn:0000D5AB                 call    __Towlower
.text$mn:0000D5B0                 add     esp, 8
.text$mn:0000D5B3                 mov     esp, ebp
.text$mn:0000D5B5                 pop     ebp
.text$mn:0000D5B6                 retn    4
.text$mn:0000D5B6 ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:0000D5B6
.text$mn:0000D5B6 ; ---------------------------------------------------------------------------
.text$mn:0000D5B9                 align 4
.text$mn:0000D5B9 _text$mn        ends
.text$mn:0000D5B9
.text$mn:0000D5BC ; ===========================================================================
.text$mn:0000D5BC
.text$mn:0000D5BC ; Segment type: Pure code
.text$mn:0000D5BC ; Segment permissions: Read/Execute
.text$mn:0000D5BC _text$mn        segment para public 'CODE' use32
.text$mn:0000D5BC                 assume cs:_text$mn
.text$mn:0000D5BC                 ;org 0D5BCh
.text$mn:0000D5BC ; COMDAT (pick any)
.text$mn:0000D5BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D5BC
.text$mn:0000D5BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D5BC
.text$mn:0000D5BC ; Attributes: bp-based frame
.text$mn:0000D5BC
.text$mn:0000D5BC ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_toupper(wchar_t *, wchar_t const *)const
.text$mn:0000D5BC                 public ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:0000D5BC ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:0000D5BC                                         ; DATA XREF: .rdata:000112D0o
.text$mn:0000D5BC
.text$mn:0000D5BC var_4           = dword ptr -4
.text$mn:0000D5BC arg_0           = dword ptr  8
.text$mn:0000D5BC arg_4           = dword ptr  0Ch
.text$mn:0000D5BC
.text$mn:0000D5BC                 push    ebp
.text$mn:0000D5BD                 mov     ebp, esp
.text$mn:0000D5BF                 push    ecx
.text$mn:0000D5C0                 mov     [ebp+var_4], ecx
.text$mn:0000D5C3                 push    0AB5h           ; unsigned int
.text$mn:0000D5C8                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D5CD                 mov     eax, [ebp+arg_4]
.text$mn:0000D5D0                 push    eax             ; int
.text$mn:0000D5D1                 mov     ecx, [ebp+arg_0]
.text$mn:0000D5D4                 push    ecx             ; int
.text$mn:0000D5D5                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:0000D5DA                 add     esp, 10h
.text$mn:0000D5DD                 jmp     short loc_D5E8
.text$mn:0000D5DF ; ---------------------------------------------------------------------------
.text$mn:0000D5DF
.text$mn:0000D5DF loc_D5DF:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+50j
.text$mn:0000D5DF                 mov     edx, [ebp+arg_0]
.text$mn:0000D5E2                 add     edx, 2
.text$mn:0000D5E5                 mov     [ebp+arg_0], edx
.text$mn:0000D5E8
.text$mn:0000D5E8 loc_D5E8:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+21j
.text$mn:0000D5E8                 mov     eax, [ebp+arg_0]
.text$mn:0000D5EB                 cmp     eax, [ebp+arg_4]
.text$mn:0000D5EE                 jz      short loc_D60E
.text$mn:0000D5F0                 mov     ecx, [ebp+var_4]
.text$mn:0000D5F3                 add     ecx, 8
.text$mn:0000D5F6                 push    ecx
.text$mn:0000D5F7                 mov     edx, [ebp+arg_0]
.text$mn:0000D5FA                 movzx   eax, word ptr [edx]
.text$mn:0000D5FD                 push    eax
.text$mn:0000D5FE                 call    __Towupper
.text$mn:0000D603                 add     esp, 8
.text$mn:0000D606                 mov     ecx, [ebp+arg_0]
.text$mn:0000D609                 mov     [ecx], ax
.text$mn:0000D60C                 jmp     short loc_D5DF
.text$mn:0000D60E ; ---------------------------------------------------------------------------
.text$mn:0000D60E
.text$mn:0000D60E loc_D60E:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+32j
.text$mn:0000D60E                 mov     eax, [ebp+arg_0]
.text$mn:0000D611                 mov     esp, ebp
.text$mn:0000D613                 pop     ebp
.text$mn:0000D614                 retn    8
.text$mn:0000D614 ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:0000D614
.text$mn:0000D614 ; ---------------------------------------------------------------------------
.text$mn:0000D617                 align 4
.text$mn:0000D617 _text$mn        ends
.text$mn:0000D617
.text$mn:0000D618 ; ===========================================================================
.text$mn:0000D618
.text$mn:0000D618 ; Segment type: Pure code
.text$mn:0000D618 ; Segment permissions: Read/Execute
.text$mn:0000D618 _text$mn        segment para public 'CODE' use32
.text$mn:0000D618                 assume cs:_text$mn
.text$mn:0000D618                 ;org 0D618h
.text$mn:0000D618 ; COMDAT (pick any)
.text$mn:0000D618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D618
.text$mn:0000D618 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D618
.text$mn:0000D618 ; Attributes: bp-based frame
.text$mn:0000D618
.text$mn:0000D618 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_toupper(wchar_t)const
.text$mn:0000D618                 public ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:0000D618 ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:0000D618                                         ; DATA XREF: .rdata:000112D4o
.text$mn:0000D618
.text$mn:0000D618 var_4           = dword ptr -4
.text$mn:0000D618 arg_0           = word ptr  8
.text$mn:0000D618
.text$mn:0000D618                 push    ebp
.text$mn:0000D619                 mov     ebp, esp
.text$mn:0000D61B                 push    ecx
.text$mn:0000D61C                 mov     [ebp+var_4], ecx
.text$mn:0000D61F                 mov     eax, [ebp+var_4]
.text$mn:0000D622                 add     eax, 8
.text$mn:0000D625                 push    eax
.text$mn:0000D626                 movzx   ecx, [ebp+arg_0]
.text$mn:0000D62A                 push    ecx
.text$mn:0000D62B                 call    __Towupper
.text$mn:0000D630                 add     esp, 8
.text$mn:0000D633                 mov     esp, ebp
.text$mn:0000D635                 pop     ebp
.text$mn:0000D636                 retn    4
.text$mn:0000D636 ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:0000D636
.text$mn:0000D636 ; ---------------------------------------------------------------------------
.text$mn:0000D639                 align 4
.text$mn:0000D639 _text$mn        ends
.text$mn:0000D639
.text$mn:0000D63C ; ===========================================================================
.text$mn:0000D63C
.text$mn:0000D63C ; Segment type: Pure code
.text$mn:0000D63C ; Segment permissions: Read/Execute
.text$mn:0000D63C _text$mn        segment para public 'CODE' use32
.text$mn:0000D63C                 assume cs:_text$mn
.text$mn:0000D63C                 ;org 0D63Ch
.text$mn:0000D63C ; COMDAT (pick any)
.text$mn:0000D63C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D63C
.text$mn:0000D63C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D63C
.text$mn:0000D63C ; Attributes: bp-based frame
.text$mn:0000D63C
.text$mn:0000D63C ; protected: virtual char const * __thiscall std::ctype<wchar_t>::do_widen(char const *, char const *, wchar_t *)const
.text$mn:0000D63C                 public ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
.text$mn:0000D63C ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z proc near
.text$mn:0000D63C                                         ; DATA XREF: .rdata:000112D8o
.text$mn:0000D63C
.text$mn:0000D63C var_4           = dword ptr -4
.text$mn:0000D63C arg_0           = dword ptr  8
.text$mn:0000D63C arg_4           = dword ptr  0Ch
.text$mn:0000D63C arg_8           = dword ptr  10h
.text$mn:0000D63C
.text$mn:0000D63C                 push    ebp
.text$mn:0000D63D                 mov     ebp, esp
.text$mn:0000D63F                 push    ecx
.text$mn:0000D640                 mov     [ebp+var_4], ecx
.text$mn:0000D643                 push    0ACBh           ; unsigned int
.text$mn:0000D648                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D64D                 mov     eax, [ebp+arg_4]
.text$mn:0000D650                 push    eax             ; int
.text$mn:0000D651                 mov     ecx, [ebp+arg_0]
.text$mn:0000D654                 push    ecx             ; int
.text$mn:0000D655                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:0000D65A                 add     esp, 10h
.text$mn:0000D65D                 push    0ACCh           ; unsigned int
.text$mn:0000D662                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D667                 mov     edx, [ebp+arg_8]
.text$mn:0000D66A                 push    edx             ; int
.text$mn:0000D66B                 call    ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)
.text$mn:0000D670                 add     esp, 0Ch
.text$mn:0000D673                 jmp     short loc_D687
.text$mn:0000D675 ; ---------------------------------------------------------------------------
.text$mn:0000D675
.text$mn:0000D675 loc_D675:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+68j
.text$mn:0000D675                 mov     eax, [ebp+arg_0]
.text$mn:0000D678                 add     eax, 1
.text$mn:0000D67B                 mov     [ebp+arg_0], eax
.text$mn:0000D67E                 mov     ecx, [ebp+arg_8]
.text$mn:0000D681                 add     ecx, 2
.text$mn:0000D684                 mov     [ebp+arg_8], ecx
.text$mn:0000D687
.text$mn:0000D687 loc_D687:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+37j
.text$mn:0000D687                 mov     edx, [ebp+arg_0]
.text$mn:0000D68A                 cmp     edx, [ebp+arg_4]
.text$mn:0000D68D                 jz      short loc_D6A6
.text$mn:0000D68F                 mov     eax, [ebp+arg_0]
.text$mn:0000D692                 movzx   ecx, byte ptr [eax]
.text$mn:0000D695                 push    ecx
.text$mn:0000D696                 mov     ecx, [ebp+var_4]
.text$mn:0000D699                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:0000D69E                 mov     edx, [ebp+arg_8]
.text$mn:0000D6A1                 mov     [edx], ax
.text$mn:0000D6A4                 jmp     short loc_D675
.text$mn:0000D6A6 ; ---------------------------------------------------------------------------
.text$mn:0000D6A6
.text$mn:0000D6A6 loc_D6A6:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+51j
.text$mn:0000D6A6                 mov     eax, [ebp+arg_0]
.text$mn:0000D6A9                 mov     esp, ebp
.text$mn:0000D6AB                 pop     ebp
.text$mn:0000D6AC                 retn    0Ch
.text$mn:0000D6AC ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z endp
.text$mn:0000D6AC
.text$mn:0000D6AC ; ---------------------------------------------------------------------------
.text$mn:0000D6AF                 align 10h
.text$mn:0000D6AF _text$mn        ends
.text$mn:0000D6AF
.text$mn:0000D6B0 ; ===========================================================================
.text$mn:0000D6B0
.text$mn:0000D6B0 ; Segment type: Pure code
.text$mn:0000D6B0 ; Segment permissions: Read/Execute
.text$mn:0000D6B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D6B0                 assume cs:_text$mn
.text$mn:0000D6B0                 ;org 0D6B0h
.text$mn:0000D6B0 ; COMDAT (pick any)
.text$mn:0000D6B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D6B0
.text$mn:0000D6B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D6B0
.text$mn:0000D6B0 ; Attributes: bp-based frame
.text$mn:0000D6B0
.text$mn:0000D6B0 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_widen(char)const
.text$mn:0000D6B0                 public ?do_widen@?$ctype@_W@std@@MBE_WD@Z
.text$mn:0000D6B0 ?do_widen@?$ctype@_W@std@@MBE_WD@Z proc near ; DATA XREF: .rdata:000112DCo
.text$mn:0000D6B0
.text$mn:0000D6B0 var_4           = dword ptr -4
.text$mn:0000D6B0 arg_0           = byte ptr  8
.text$mn:0000D6B0
.text$mn:0000D6B0                 push    ebp
.text$mn:0000D6B1                 mov     ebp, esp
.text$mn:0000D6B3                 push    ecx
.text$mn:0000D6B4                 mov     [ebp+var_4], ecx
.text$mn:0000D6B7                 movzx   eax, [ebp+arg_0]
.text$mn:0000D6BB                 push    eax
.text$mn:0000D6BC                 mov     ecx, [ebp+var_4]
.text$mn:0000D6BF                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:0000D6C4                 mov     esp, ebp
.text$mn:0000D6C6                 pop     ebp
.text$mn:0000D6C7                 retn    4
.text$mn:0000D6C7 ?do_widen@?$ctype@_W@std@@MBE_WD@Z endp
.text$mn:0000D6C7
.text$mn:0000D6C7 ; ---------------------------------------------------------------------------
.text$mn:0000D6CA                 align 4
.text$mn:0000D6CA _text$mn        ends
.text$mn:0000D6CA
.text$mn:0000D6CC ; ===========================================================================
.text$mn:0000D6CC
.text$mn:0000D6CC ; Segment type: Pure code
.text$mn:0000D6CC ; Segment permissions: Read/Execute
.text$mn:0000D6CC _text$mn        segment para public 'CODE' use32
.text$mn:0000D6CC                 assume cs:_text$mn
.text$mn:0000D6CC                 ;org 0D6CCh
.text$mn:0000D6CC ; COMDAT (pick any)
.text$mn:0000D6CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D6CC
.text$mn:0000D6CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D6CC
.text$mn:0000D6CC ; Attributes: bp-based frame
.text$mn:0000D6CC
.text$mn:0000D6CC ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::empty(void)const
.text$mn:0000D6CC                 public ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ
.text$mn:0000D6CC ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ proc near
.text$mn:0000D6CC                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+38Dp
.text$mn:0000D6CC
.text$mn:0000D6CC var_8           = dword ptr -8
.text$mn:0000D6CC var_4           = dword ptr -4
.text$mn:0000D6CC
.text$mn:0000D6CC                 push    ebp
.text$mn:0000D6CD                 mov     ebp, esp
.text$mn:0000D6CF                 sub     esp, 8
.text$mn:0000D6D2                 mov     [ebp+var_8], ecx
.text$mn:0000D6D5                 mov     eax, [ebp+var_8]
.text$mn:0000D6D8                 cmp     dword ptr [eax+14h], 0
.text$mn:0000D6DC                 jnz     short loc_D6E7
.text$mn:0000D6DE                 mov     [ebp+var_4], 1
.text$mn:0000D6E5                 jmp     short loc_D6EE
.text$mn:0000D6E7 ; ---------------------------------------------------------------------------
.text$mn:0000D6E7
.text$mn:0000D6E7 loc_D6E7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)+10j
.text$mn:0000D6E7                 mov     [ebp+var_4], 0
.text$mn:0000D6EE
.text$mn:0000D6EE loc_D6EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::empty(void)+19j
.text$mn:0000D6EE                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000D6F1                 mov     esp, ebp
.text$mn:0000D6F3                 pop     ebp
.text$mn:0000D6F4                 retn
.text$mn:0000D6F4 ?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ endp
.text$mn:0000D6F4
.text$mn:0000D6F4 ; ---------------------------------------------------------------------------
.text$mn:0000D6F5                 align 4
.text$mn:0000D6F5 _text$mn        ends
.text$mn:0000D6F5
.text$mn:0000D6F8 ; ===========================================================================
.text$mn:0000D6F8
.text$mn:0000D6F8 ; Segment type: Pure code
.text$mn:0000D6F8 ; Segment permissions: Read/Execute
.text$mn:0000D6F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D6F8                 assume cs:_text$mn
.text$mn:0000D6F8                 ;org 0D6F8h
.text$mn:0000D6F8 ; COMDAT (pick any)
.text$mn:0000D6F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D6F8
.text$mn:0000D6F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D6F8
.text$mn:0000D6F8 ; Attributes: bp-based frame
.text$mn:0000D6F8
.text$mn:0000D6F8 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:0000D6F8                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000D6F8 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000D6F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:0000D6F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:0000D6F8
.text$mn:0000D6F8 var_14          = dword ptr -14h
.text$mn:0000D6F8 var_10          = dword ptr -10h
.text$mn:0000D6F8 var_C           = dword ptr -0Ch
.text$mn:0000D6F8 var_4           = dword ptr -4
.text$mn:0000D6F8 arg_0           = dword ptr  8
.text$mn:0000D6F8
.text$mn:0000D6F8                 push    ebp
.text$mn:0000D6F9                 mov     ebp, esp
.text$mn:0000D6FB                 push    0FFFFFFFFh
.text$mn:0000D6FD                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000D702                 mov     eax, large fs:0
.text$mn:0000D708                 push    eax
.text$mn:0000D709                 sub     esp, 8
.text$mn:0000D70C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D711                 xor     eax, ebp
.text$mn:0000D713                 push    eax
.text$mn:0000D714                 lea     eax, [ebp+var_C]
.text$mn:0000D717                 mov     large fs:0, eax
.text$mn:0000D71D                 mov     [ebp+var_10], ecx
.text$mn:0000D720                 mov     [ebp+var_14], 0
.text$mn:0000D727                 mov     eax, [ebp+var_10]
.text$mn:0000D72A                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000D72B                 mov     ecx, [ebp+var_10]
.text$mn:0000D72E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000D733                 mov     ecx, [ebp+var_10]
.text$mn:0000D736                 mov     edx, [ecx+14h]
.text$mn:0000D739                 lea     eax, [eax+edx*2]
.text$mn:0000D73C                 push    eax             ; int
.text$mn:0000D73D                 mov     ecx, [ebp+arg_0]
.text$mn:0000D740                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000D745                 mov     [ebp+var_4], 0
.text$mn:0000D74C                 mov     ecx, [ebp+var_14]
.text$mn:0000D74F                 or      ecx, 1
.text$mn:0000D752                 mov     [ebp+var_14], ecx
.text$mn:0000D755                 mov     eax, [ebp+arg_0]
.text$mn:0000D758                 mov     ecx, [ebp+var_C]
.text$mn:0000D75B                 mov     large fs:0, ecx
.text$mn:0000D762                 pop     ecx
.text$mn:0000D763                 mov     esp, ebp
.text$mn:0000D765                 pop     ebp
.text$mn:0000D766                 retn    4
.text$mn:0000D766 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000D766
.text$mn:0000D766 ; ---------------------------------------------------------------------------
.text$mn:0000D769                 align 4
.text$mn:0000D769 _text$mn        ends
.text$mn:0000D769
.text$x:0000D76C ; ===========================================================================
.text$x:0000D76C
.text$x:0000D76C ; Segment type: Pure code
.text$x:0000D76C ; Segment permissions: Read/Execute
.text$x:0000D76C _text$x         segment para public 'CODE' use32
.text$x:0000D76C                 assume cs:_text$x
.text$x:0000D76C                 ;org 0D76Ch
.text$x:0000D76C ; COMDAT (pick associative to section at D6F8)
.text$x:0000D76C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D76C
.text$x:0000D76C ; =============== S U B R O U T I N E =======================================
.text$x:0000D76C
.text$x:0000D76C
.text$x:0000D76C __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000D76C                                         ; DATA XREF: .xdata$x:0000FE50o
.text$x:0000D76C                 mov     eax, [ebp-14h]
.text$x:0000D76F                 and     eax, 1
.text$x:0000D772                 jz      $LN4_0
.text$x:0000D778                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000D77C                 mov     ecx, [ebp+8]
.text$x:0000D77F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000D784 ; ---------------------------------------------------------------------------
.text$x:0000D784
.text$x:0000D784 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000D784                 retn
.text$x:0000D784 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000D784
.text$x:0000D785
.text$x:0000D785 ; =============== S U B R O U T I N E =======================================
.text$x:0000D785
.text$x:0000D785
.text$x:0000D785 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000D785                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:0000D785
.text$x:0000D785 arg_4           = dword ptr  8
.text$x:0000D785
.text$x:0000D785                 mov     edx, [esp+arg_4]
.text$x:0000D789                 lea     eax, [edx+0Ch]
.text$x:0000D78C                 mov     ecx, [edx-0Ch]
.text$x:0000D78F                 xor     ecx, eax
.text$x:0000D791                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D796                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000D79B                 jmp     ___CxxFrameHandler3
.text$x:0000D79B __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000D79B
.text$x:0000D79B _text$x         ends
.text$x:0000D79B
.text$mn:0000D7A0 ; ===========================================================================
.text$mn:0000D7A0
.text$mn:0000D7A0 ; Segment type: Pure code
.text$mn:0000D7A0 ; Segment permissions: Read/Execute
.text$mn:0000D7A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D7A0                 assume cs:_text$mn
.text$mn:0000D7A0                 ;org 0D7A0h
.text$mn:0000D7A0 ; COMDAT (pick any)
.text$mn:0000D7A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D7A0
.text$mn:0000D7A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D7A0
.text$mn:0000D7A0 ; Attributes: bp-based frame
.text$mn:0000D7A0
.text$mn:0000D7A0 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::end(void)
.text$mn:0000D7A0                 public ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000D7A0 ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000D7A0                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+640p
.text$mn:0000D7A0                                         ; AutoCompletion::showWordComplete(bool)+21Fp ...
.text$mn:0000D7A0
.text$mn:0000D7A0 var_14          = dword ptr -14h
.text$mn:0000D7A0 var_10          = dword ptr -10h
.text$mn:0000D7A0 var_C           = dword ptr -0Ch
.text$mn:0000D7A0 var_4           = dword ptr -4
.text$mn:0000D7A0 arg_0           = dword ptr  8
.text$mn:0000D7A0
.text$mn:0000D7A0                 push    ebp
.text$mn:0000D7A1                 mov     ebp, esp
.text$mn:0000D7A3                 push    0FFFFFFFFh
.text$mn:0000D7A5                 push    offset __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000D7AA                 mov     eax, large fs:0
.text$mn:0000D7B0                 push    eax
.text$mn:0000D7B1                 sub     esp, 8
.text$mn:0000D7B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D7B9                 xor     eax, ebp
.text$mn:0000D7BB                 push    eax
.text$mn:0000D7BC                 lea     eax, [ebp+var_C]
.text$mn:0000D7BF                 mov     large fs:0, eax
.text$mn:0000D7C5                 mov     [ebp+var_10], ecx
.text$mn:0000D7C8                 mov     [ebp+var_14], 0
.text$mn:0000D7CF                 mov     eax, [ebp+var_10]
.text$mn:0000D7D2                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000D7D3                 mov     ecx, [ebp+var_10]
.text$mn:0000D7D6                 mov     edx, [ecx+8]
.text$mn:0000D7D9                 push    edx             ; int
.text$mn:0000D7DA                 mov     ecx, [ebp+arg_0]
.text$mn:0000D7DD                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000D7E2                 mov     [ebp+var_4], 0
.text$mn:0000D7E9                 mov     eax, [ebp+var_14]
.text$mn:0000D7EC                 or      eax, 1
.text$mn:0000D7EF                 mov     [ebp+var_14], eax
.text$mn:0000D7F2                 mov     eax, [ebp+arg_0]
.text$mn:0000D7F5                 mov     ecx, [ebp+var_C]
.text$mn:0000D7F8                 mov     large fs:0, ecx
.text$mn:0000D7FF                 pop     ecx
.text$mn:0000D800                 mov     esp, ebp
.text$mn:0000D802                 pop     ebp
.text$mn:0000D803                 retn    4
.text$mn:0000D803 ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000D803
.text$mn:0000D803 ; ---------------------------------------------------------------------------
.text$mn:0000D806                 align 4
.text$mn:0000D806 _text$mn        ends
.text$mn:0000D806
.text$x:0000D808 ; ===========================================================================
.text$x:0000D808
.text$x:0000D808 ; Segment type: Pure code
.text$x:0000D808 ; Segment permissions: Read/Execute
.text$x:0000D808 _text$x         segment para public 'CODE' use32
.text$x:0000D808                 assume cs:_text$x
.text$x:0000D808                 ;org 0D808h
.text$x:0000D808 ; COMDAT (pick associative to section at D7A0)
.text$x:0000D808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D808
.text$x:0000D808 ; =============== S U B R O U T I N E =======================================
.text$x:0000D808
.text$x:0000D808
.text$x:0000D808 __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000D808                                         ; DATA XREF: .xdata$x:000100F4o
.text$x:0000D808                 mov     eax, [ebp-14h]
.text$x:0000D80B                 and     eax, 1
.text$x:0000D80E                 jz      $LN4_3
.text$x:0000D814                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000D818                 mov     ecx, [ebp+8]
.text$x:0000D81B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000D820 ; ---------------------------------------------------------------------------
.text$x:0000D820
.text$x:0000D820 $LN4_3:                                 ; CODE XREF: __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000D820                 retn
.text$x:0000D820 __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000D820
.text$x:0000D821
.text$x:0000D821 ; =============== S U B R O U T I N E =======================================
.text$x:0000D821
.text$x:0000D821
.text$x:0000D821 __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000D821                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)+5o
.text$x:0000D821
.text$x:0000D821 arg_4           = dword ptr  8
.text$x:0000D821
.text$x:0000D821                 mov     edx, [esp+arg_4]
.text$x:0000D825                 lea     eax, [edx+0Ch]
.text$x:0000D828                 mov     ecx, [edx-0Ch]
.text$x:0000D82B                 xor     ecx, eax
.text$x:0000D82D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D832                 mov     eax, offset __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000D837                 jmp     ___CxxFrameHandler3
.text$x:0000D837 __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000D837
.text$x:0000D837 _text$x         ends
.text$x:0000D837
.text$mn:0000D83C ; ===========================================================================
.text$mn:0000D83C
.text$mn:0000D83C ; Segment type: Pure code
.text$mn:0000D83C ; Segment permissions: Read/Execute
.text$mn:0000D83C _text$mn        segment para public 'CODE' use32
.text$mn:0000D83C                 assume cs:_text$mn
.text$mn:0000D83C                 ;org 0D83Ch
.text$mn:0000D83C ; COMDAT (pick any)
.text$mn:0000D83C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D83C
.text$mn:0000D83C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D83C
.text$mn:0000D83C ; Attributes: bp-based frame
.text$mn:0000D83C
.text$mn:0000D83C ; public: static bool __cdecl std::char_traits<wchar_t>::eq(wchar_t const &, wchar_t const &)
.text$mn:0000D83C                 public ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
.text$mn:0000D83C ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z proc near
.text$mn:0000D83C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+A4p
.text$mn:0000D83C
.text$mn:0000D83C var_4           = dword ptr -4
.text$mn:0000D83C arg_0           = dword ptr  8
.text$mn:0000D83C arg_4           = dword ptr  0Ch
.text$mn:0000D83C
.text$mn:0000D83C                 push    ebp
.text$mn:0000D83D                 mov     ebp, esp
.text$mn:0000D83F                 push    ecx
.text$mn:0000D840                 mov     eax, [ebp+arg_0]
.text$mn:0000D843                 movzx   ecx, word ptr [eax]
.text$mn:0000D846                 mov     edx, [ebp+arg_4]
.text$mn:0000D849                 movzx   eax, word ptr [edx]
.text$mn:0000D84C                 cmp     ecx, eax
.text$mn:0000D84E                 jnz     short loc_D859
.text$mn:0000D850                 mov     [ebp+var_4], 1
.text$mn:0000D857                 jmp     short loc_D860
.text$mn:0000D859 ; ---------------------------------------------------------------------------
.text$mn:0000D859
.text$mn:0000D859 loc_D859:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+12j
.text$mn:0000D859                 mov     [ebp+var_4], 0
.text$mn:0000D860
.text$mn:0000D860 loc_D860:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+1Bj
.text$mn:0000D860                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000D863                 mov     esp, ebp
.text$mn:0000D865                 pop     ebp
.text$mn:0000D866                 retn
.text$mn:0000D866 ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z endp
.text$mn:0000D866
.text$mn:0000D866 ; ---------------------------------------------------------------------------
.text$mn:0000D867                 align 4
.text$mn:0000D867 _text$mn        ends
.text$mn:0000D867
.text$mn:0000D868 ; ===========================================================================
.text$mn:0000D868
.text$mn:0000D868 ; Segment type: Pure code
.text$mn:0000D868 ; Segment permissions: Read/Execute
.text$mn:0000D868 _text$mn        segment para public 'CODE' use32
.text$mn:0000D868                 assume cs:_text$mn
.text$mn:0000D868                 ;org 0D868h
.text$mn:0000D868 ; COMDAT (pick any)
.text$mn:0000D868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D868
.text$mn:0000D868 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D868
.text$mn:0000D868 ; Attributes: bp-based frame
.text$mn:0000D868
.text$mn:0000D868 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000D868                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000D868 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000D868                                         ; DATA XREF: .rdata:000112FCo
.text$mn:0000D868                                         ; .rdata:00011318o ...
.text$mn:0000D868
.text$mn:0000D868 var_8           = dword ptr -8
.text$mn:0000D868 var_4           = dword ptr -4
.text$mn:0000D868 arg_0           = dword ptr  8
.text$mn:0000D868 arg_4           = dword ptr  0Ch
.text$mn:0000D868
.text$mn:0000D868                 push    ebp
.text$mn:0000D869                 mov     ebp, esp
.text$mn:0000D86B                 sub     esp, 8
.text$mn:0000D86E                 mov     [ebp+var_8], ecx
.text$mn:0000D871                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D874                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000D879                 push    eax
.text$mn:0000D87A                 mov     ecx, [ebp+var_8]
.text$mn:0000D87D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000D882                 movzx   eax, al
.text$mn:0000D885                 test    eax, eax
.text$mn:0000D887                 jz      short loc_D89F
.text$mn:0000D889                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D88C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000D891                 cmp     eax, [ebp+arg_4]
.text$mn:0000D894                 jnz     short loc_D89F
.text$mn:0000D896                 mov     [ebp+var_4], 1
.text$mn:0000D89D                 jmp     short loc_D8A6
.text$mn:0000D89F ; ---------------------------------------------------------------------------
.text$mn:0000D89F
.text$mn:0000D89F loc_D89F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000D89F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000D89F                 mov     [ebp+var_4], 0
.text$mn:0000D8A6
.text$mn:0000D8A6 loc_D8A6:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000D8A6                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000D8A9                 mov     esp, ebp
.text$mn:0000D8AB                 pop     ebp
.text$mn:0000D8AC                 retn    8
.text$mn:0000D8AC ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000D8AC
.text$mn:0000D8AC ; ---------------------------------------------------------------------------
.text$mn:0000D8AF                 align 10h
.text$mn:0000D8AF _text$mn        ends
.text$mn:0000D8AF
.text$mn:0000D8B0 ; ===========================================================================
.text$mn:0000D8B0
.text$mn:0000D8B0 ; Segment type: Pure code
.text$mn:0000D8B0 ; Segment permissions: Read/Execute
.text$mn:0000D8B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D8B0                 assume cs:_text$mn
.text$mn:0000D8B0                 ;org 0D8B0h
.text$mn:0000D8B0 ; COMDAT (pick any)
.text$mn:0000D8B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D8B0
.text$mn:0000D8B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D8B0
.text$mn:0000D8B0 ; Attributes: bp-based frame
.text$mn:0000D8B0
.text$mn:0000D8B0 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:0000D8B0                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:0000D8B0 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:0000D8B0                                         ; DATA XREF: .rdata:00011300o
.text$mn:0000D8B0                                         ; .rdata:0001131Co ...
.text$mn:0000D8B0
.text$mn:0000D8B0 var_C           = byte ptr -0Ch
.text$mn:0000D8B0 var_4           = dword ptr -4
.text$mn:0000D8B0 arg_0           = dword ptr  8
.text$mn:0000D8B0 arg_4           = dword ptr  0Ch
.text$mn:0000D8B0
.text$mn:0000D8B0                 push    ebp
.text$mn:0000D8B1                 mov     ebp, esp
.text$mn:0000D8B3                 sub     esp, 0Ch
.text$mn:0000D8B6                 mov     [ebp+var_4], ecx
.text$mn:0000D8B9                 mov     eax, [ebp+arg_4]
.text$mn:0000D8BC                 push    eax             ; std::error_condition *
.text$mn:0000D8BD                 mov     ecx, [ebp+arg_0]
.text$mn:0000D8C0                 push    ecx
.text$mn:0000D8C1                 lea     edx, [ebp+var_C]
.text$mn:0000D8C4                 push    edx
.text$mn:0000D8C5                 mov     eax, [ebp+var_4]
.text$mn:0000D8C8                 mov     edx, [eax]
.text$mn:0000D8CA                 mov     ecx, [ebp+var_4]
.text$mn:0000D8CD                 mov     eax, [edx+0Ch]
.text$mn:0000D8D0                 call    eax
.text$mn:0000D8D2                 mov     ecx, eax
.text$mn:0000D8D4                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:0000D8D9                 mov     esp, ebp
.text$mn:0000D8DB                 pop     ebp
.text$mn:0000D8DC                 retn    8
.text$mn:0000D8DC ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000D8DC
.text$mn:0000D8DC ; ---------------------------------------------------------------------------
.text$mn:0000D8DF                 align 10h
.text$mn:0000D8DF _text$mn        ends
.text$mn:0000D8DF
.text$mn:0000D8E0 ; ===========================================================================
.text$mn:0000D8E0
.text$mn:0000D8E0 ; Segment type: Pure code
.text$mn:0000D8E0 ; Segment permissions: Read/Execute
.text$mn:0000D8E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D8E0                 assume cs:_text$mn
.text$mn:0000D8E0                 ;org 0D8E0h
.text$mn:0000D8E0 ; COMDAT (pick any)
.text$mn:0000D8E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D8E0
.text$mn:0000D8E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D8E0
.text$mn:0000D8E0 ; Attributes: bp-based frame
.text$mn:0000D8E0
.text$mn:0000D8E0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:0000D8E0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:0000D8E0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000D8E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:0000D8E0
.text$mn:0000D8E0 var_4           = dword ptr -4
.text$mn:0000D8E0 arg_0           = dword ptr  8
.text$mn:0000D8E0
.text$mn:0000D8E0                 push    ebp
.text$mn:0000D8E1                 mov     ebp, esp
.text$mn:0000D8E3                 push    ecx
.text$mn:0000D8E4                 mov     [ebp+var_4], ecx
.text$mn:0000D8E7                 mov     eax, [ebp+var_4]
.text$mn:0000D8EA                 mov     ecx, [eax+14h]
.text$mn:0000D8ED                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D8F0                 jnb     short loc_D8FA
.text$mn:0000D8F2                 mov     ecx, [ebp+var_4]
.text$mn:0000D8F5                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000D8FA
.text$mn:0000D8FA loc_D8FA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000D8FA                 mov     edx, [ebp+arg_0]
.text$mn:0000D8FD                 push    edx
.text$mn:0000D8FE                 mov     ecx, [ebp+var_4]
.text$mn:0000D901                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D906                 mov     eax, [ebp+var_4]
.text$mn:0000D909                 mov     esp, ebp
.text$mn:0000D90B                 pop     ebp
.text$mn:0000D90C                 retn    4
.text$mn:0000D90C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000D90C
.text$mn:0000D90C ; ---------------------------------------------------------------------------
.text$mn:0000D90F                 align 10h
.text$mn:0000D90F _text$mn        ends
.text$mn:0000D90F
.text$mn:0000D910 ; ===========================================================================
.text$mn:0000D910
.text$mn:0000D910 ; Segment type: Pure code
.text$mn:0000D910 ; Segment permissions: Read/Execute
.text$mn:0000D910 _text$mn        segment para public 'CODE' use32
.text$mn:0000D910                 assume cs:_text$mn
.text$mn:0000D910                 ;org 0D910h
.text$mn:0000D910 ; COMDAT (pick any)
.text$mn:0000D910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D910
.text$mn:0000D910 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D910
.text$mn:0000D910 ; Attributes: bp-based frame
.text$mn:0000D910
.text$mn:0000D910 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000D910                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000D910 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000D910                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000D910
.text$mn:0000D910 var_C           = dword ptr -0Ch
.text$mn:0000D910 Dst             = dword ptr -8
.text$mn:0000D910 var_4           = dword ptr -4
.text$mn:0000D910 arg_0           = dword ptr  8
.text$mn:0000D910 arg_4           = dword ptr  0Ch
.text$mn:0000D910
.text$mn:0000D910                 push    ebp
.text$mn:0000D911                 mov     ebp, esp
.text$mn:0000D913                 sub     esp, 0Ch
.text$mn:0000D916                 mov     [ebp+var_4], ecx
.text$mn:0000D919                 mov     eax, [ebp+var_4]
.text$mn:0000D91C                 mov     ecx, [eax+14h]
.text$mn:0000D91F                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D922                 jnb     short loc_D92C
.text$mn:0000D924                 mov     ecx, [ebp+var_4]
.text$mn:0000D927                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000D92C
.text$mn:0000D92C loc_D92C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000D92C                 mov     edx, [ebp+var_4]
.text$mn:0000D92F                 mov     eax, [edx+14h]
.text$mn:0000D932                 sub     eax, [ebp+arg_0]
.text$mn:0000D935                 cmp     eax, [ebp+arg_4]
.text$mn:0000D938                 ja      short loc_D948
.text$mn:0000D93A                 mov     ecx, [ebp+arg_0]
.text$mn:0000D93D                 push    ecx
.text$mn:0000D93E                 mov     ecx, [ebp+var_4]
.text$mn:0000D941                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D946                 jmp     short loc_D98E
.text$mn:0000D948 ; ---------------------------------------------------------------------------
.text$mn:0000D948
.text$mn:0000D948 loc_D948:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000D948                 cmp     [ebp+arg_4], 0
.text$mn:0000D94C                 jbe     short loc_D98E
.text$mn:0000D94E                 mov     ecx, [ebp+var_4]
.text$mn:0000D951                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000D956                 add     eax, [ebp+arg_0]
.text$mn:0000D959                 mov     [ebp+Dst], eax
.text$mn:0000D95C                 mov     edx, [ebp+var_4]
.text$mn:0000D95F                 mov     eax, [edx+14h]
.text$mn:0000D962                 sub     eax, [ebp+arg_4]
.text$mn:0000D965                 mov     [ebp+var_C], eax
.text$mn:0000D968                 mov     ecx, [ebp+var_C]
.text$mn:0000D96B                 sub     ecx, [ebp+arg_0]
.text$mn:0000D96E                 push    ecx             ; Size
.text$mn:0000D96F                 mov     edx, [ebp+Dst]
.text$mn:0000D972                 add     edx, [ebp+arg_4]
.text$mn:0000D975                 push    edx             ; Src
.text$mn:0000D976                 mov     eax, [ebp+Dst]
.text$mn:0000D979                 push    eax             ; Dst
.text$mn:0000D97A                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000D97F                 add     esp, 0Ch
.text$mn:0000D982                 mov     ecx, [ebp+var_C]
.text$mn:0000D985                 push    ecx
.text$mn:0000D986                 mov     ecx, [ebp+var_4]
.text$mn:0000D989                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D98E
.text$mn:0000D98E loc_D98E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000D98E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000D98E                 mov     eax, [ebp+var_4]
.text$mn:0000D991                 mov     esp, ebp
.text$mn:0000D993                 pop     ebp
.text$mn:0000D994                 retn    8
.text$mn:0000D994 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000D994
.text$mn:0000D994 ; ---------------------------------------------------------------------------
.text$mn:0000D997                 align 4
.text$mn:0000D997 _text$mn        ends
.text$mn:0000D997
.text$mn:0000D998 ; ===========================================================================
.text$mn:0000D998
.text$mn:0000D998 ; Segment type: Pure code
.text$mn:0000D998 ; Segment permissions: Read/Execute
.text$mn:0000D998 _text$mn        segment para public 'CODE' use32
.text$mn:0000D998                 assume cs:_text$mn
.text$mn:0000D998                 ;org 0D998h
.text$mn:0000D998 ; COMDAT (pick any)
.text$mn:0000D998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D998
.text$mn:0000D998 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D998
.text$mn:0000D998 ; Attributes: bp-based frame
.text$mn:0000D998
.text$mn:0000D998 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000D998                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000D998 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000D998                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000D998
.text$mn:0000D998 var_4           = dword ptr -4
.text$mn:0000D998 arg_0           = dword ptr  8
.text$mn:0000D998
.text$mn:0000D998                 push    ebp
.text$mn:0000D999                 mov     ebp, esp
.text$mn:0000D99B                 push    ecx
.text$mn:0000D99C                 mov     [ebp+var_4], ecx
.text$mn:0000D99F                 mov     eax, [ebp+var_4]
.text$mn:0000D9A2                 mov     ecx, [eax+14h]
.text$mn:0000D9A5                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D9A8                 jnb     short loc_D9B2
.text$mn:0000D9AA                 mov     ecx, [ebp+var_4]
.text$mn:0000D9AD                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000D9B2
.text$mn:0000D9B2 loc_D9B2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:0000D9B2                 mov     edx, [ebp+arg_0]
.text$mn:0000D9B5                 push    edx
.text$mn:0000D9B6                 mov     ecx, [ebp+var_4]
.text$mn:0000D9B9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000D9BE                 mov     eax, [ebp+var_4]
.text$mn:0000D9C1                 mov     esp, ebp
.text$mn:0000D9C3                 pop     ebp
.text$mn:0000D9C4                 retn    4
.text$mn:0000D9C4 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000D9C4
.text$mn:0000D9C4 ; ---------------------------------------------------------------------------
.text$mn:0000D9C7                 align 4
.text$mn:0000D9C7 _text$mn        ends
.text$mn:0000D9C7
.text$mn:0000D9C8 ; ===========================================================================
.text$mn:0000D9C8
.text$mn:0000D9C8 ; Segment type: Pure code
.text$mn:0000D9C8 ; Segment permissions: Read/Execute
.text$mn:0000D9C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D9C8                 assume cs:_text$mn
.text$mn:0000D9C8                 ;org 0D9C8h
.text$mn:0000D9C8 ; COMDAT (pick any)
.text$mn:0000D9C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D9C8
.text$mn:0000D9C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D9C8
.text$mn:0000D9C8 ; Attributes: bp-based frame
.text$mn:0000D9C8
.text$mn:0000D9C8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:0000D9C8                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:0000D9C8 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000D9C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:0000D9C8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:0000D9C8
.text$mn:0000D9C8 var_C           = dword ptr -0Ch
.text$mn:0000D9C8 Dst             = dword ptr -8
.text$mn:0000D9C8 var_4           = dword ptr -4
.text$mn:0000D9C8 arg_0           = dword ptr  8
.text$mn:0000D9C8 arg_4           = dword ptr  0Ch
.text$mn:0000D9C8
.text$mn:0000D9C8                 push    ebp
.text$mn:0000D9C9                 mov     ebp, esp
.text$mn:0000D9CB                 sub     esp, 0Ch
.text$mn:0000D9CE                 mov     [ebp+var_4], ecx
.text$mn:0000D9D1                 mov     eax, [ebp+var_4]
.text$mn:0000D9D4                 mov     ecx, [eax+14h]
.text$mn:0000D9D7                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D9DA                 jnb     short loc_D9E4
.text$mn:0000D9DC                 mov     ecx, [ebp+var_4]
.text$mn:0000D9DF                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000D9E4
.text$mn:0000D9E4 loc_D9E4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:0000D9E4                 mov     edx, [ebp+var_4]
.text$mn:0000D9E7                 mov     eax, [edx+14h]
.text$mn:0000D9EA                 sub     eax, [ebp+arg_0]
.text$mn:0000D9ED                 cmp     eax, [ebp+arg_4]
.text$mn:0000D9F0                 ja      short loc_DA00
.text$mn:0000D9F2                 mov     ecx, [ebp+arg_0]
.text$mn:0000D9F5                 push    ecx
.text$mn:0000D9F6                 mov     ecx, [ebp+var_4]
.text$mn:0000D9F9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000D9FE                 jmp     short loc_DA4C
.text$mn:0000DA00 ; ---------------------------------------------------------------------------
.text$mn:0000DA00
.text$mn:0000DA00 loc_DA00:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:0000DA00                 cmp     [ebp+arg_4], 0
.text$mn:0000DA04                 jbe     short loc_DA4C
.text$mn:0000DA06                 mov     ecx, [ebp+var_4]
.text$mn:0000DA09                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000DA0E                 mov     edx, [ebp+arg_0]
.text$mn:0000DA11                 lea     eax, [eax+edx*2]
.text$mn:0000DA14                 mov     [ebp+Dst], eax
.text$mn:0000DA17                 mov     ecx, [ebp+var_4]
.text$mn:0000DA1A                 mov     edx, [ecx+14h]
.text$mn:0000DA1D                 sub     edx, [ebp+arg_4]
.text$mn:0000DA20                 mov     [ebp+var_C], edx
.text$mn:0000DA23                 mov     eax, [ebp+var_C]
.text$mn:0000DA26                 sub     eax, [ebp+arg_0]
.text$mn:0000DA29                 push    eax             ; int
.text$mn:0000DA2A                 mov     ecx, [ebp+arg_4]
.text$mn:0000DA2D                 mov     edx, [ebp+Dst]
.text$mn:0000DA30                 lea     eax, [edx+ecx*2]
.text$mn:0000DA33                 push    eax             ; Src
.text$mn:0000DA34                 mov     ecx, [ebp+Dst]
.text$mn:0000DA37                 push    ecx             ; Dst
.text$mn:0000DA38                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000DA3D                 add     esp, 0Ch
.text$mn:0000DA40                 mov     edx, [ebp+var_C]
.text$mn:0000DA43                 push    edx
.text$mn:0000DA44                 mov     ecx, [ebp+var_4]
.text$mn:0000DA47                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000DA4C
.text$mn:0000DA4C loc_DA4C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000DA4C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000DA4C                 mov     eax, [ebp+var_4]
.text$mn:0000DA4F                 mov     esp, ebp
.text$mn:0000DA51                 pop     ebp
.text$mn:0000DA52                 retn    8
.text$mn:0000DA52 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000DA52
.text$mn:0000DA52 ; ---------------------------------------------------------------------------
.text$mn:0000DA55                 align 4
.text$mn:0000DA55 _text$mn        ends
.text$mn:0000DA55
.text$mn:0000DA58 ; ===========================================================================
.text$mn:0000DA58
.text$mn:0000DA58 ; Segment type: Pure code
.text$mn:0000DA58 ; Segment permissions: Read/Execute
.text$mn:0000DA58 _text$mn        segment para public 'CODE' use32
.text$mn:0000DA58                 assume cs:_text$mn
.text$mn:0000DA58                 ;org 0DA58h
.text$mn:0000DA58 ; COMDAT (pick any)
.text$mn:0000DA58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA58
.text$mn:0000DA58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA58
.text$mn:0000DA58 ; Attributes: bp-based frame
.text$mn:0000DA58
.text$mn:0000DA58 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>> __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::erase(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<struct MatchedCharInserted>>>)
.text$mn:0000DA58                 public ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$mn:0000DA58 ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z proc near
.text$mn:0000DA58                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+134p
.text$mn:0000DA58                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+1CFp ...
.text$mn:0000DA58
.text$mn:0000DA58 var_24          = dword ptr -24h
.text$mn:0000DA58 var_20          = dword ptr -20h
.text$mn:0000DA58 var_1C          = dword ptr -1Ch
.text$mn:0000DA58 var_18          = dword ptr -18h
.text$mn:0000DA58 var_14          = dword ptr -14h
.text$mn:0000DA58 var_10          = dword ptr -10h
.text$mn:0000DA58 var_C           = dword ptr -0Ch
.text$mn:0000DA58 var_4           = dword ptr -4
.text$mn:0000DA58 arg_0           = dword ptr  8
.text$mn:0000DA58 arg_4           = byte ptr  0Ch
.text$mn:0000DA58 arg_C           = dword ptr  14h
.text$mn:0000DA58
.text$mn:0000DA58                 push    ebp
.text$mn:0000DA59                 mov     ebp, esp
.text$mn:0000DA5B                 push    0FFFFFFFFh
.text$mn:0000DA5D                 push    offset __ehhandler$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$mn:0000DA62                 mov     eax, large fs:0
.text$mn:0000DA68                 push    eax
.text$mn:0000DA69                 sub     esp, 18h
.text$mn:0000DA6C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000DA71                 xor     eax, ebp
.text$mn:0000DA73                 push    eax
.text$mn:0000DA74                 lea     eax, [ebp+var_C]
.text$mn:0000DA77                 mov     large fs:0, eax
.text$mn:0000DA7D                 mov     [ebp+var_10], ecx
.text$mn:0000DA80                 mov     [ebp+var_14], 0
.text$mn:0000DA87                 mov     [ebp+var_4], 1
.text$mn:0000DA8E                 lea     ecx, [ebp+arg_4] ; this
.text$mn:0000DA91                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000DA96                 cmp     eax, [ebp+var_10]
.text$mn:0000DA99                 jnz     short loc_DAB1
.text$mn:0000DA9B                 mov     eax, [ebp+var_10]
.text$mn:0000DA9E                 mov     ecx, [ebp+arg_C]
.text$mn:0000DAA1                 cmp     ecx, [eax+4]
.text$mn:0000DAA4                 jb      short loc_DAB1
.text$mn:0000DAA6                 mov     edx, [ebp+var_10]
.text$mn:0000DAA9                 mov     eax, [edx+8]
.text$mn:0000DAAC                 cmp     eax, [ebp+arg_C]
.text$mn:0000DAAF                 ja      short loc_DAC8
.text$mn:0000DAB1
.text$mn:0000DAB1 loc_DAB1:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+41j
.text$mn:0000DAB1                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+4Cj
.text$mn:0000DAB1                 push    5A2h            ; unsigned int
.text$mn:0000DAB6                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000DABB                 push    offset ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; "vector erase iterator outside range"
.text$mn:0000DAC0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000DAC5                 add     esp, 0Ch
.text$mn:0000DAC8
.text$mn:0000DAC8 loc_DAC8:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+57j
.text$mn:0000DAC8                 mov     ecx, [ebp+arg_C]
.text$mn:0000DACB                 push    ecx
.text$mn:0000DACC                 mov     edx, [ebp+var_10]
.text$mn:0000DACF                 mov     eax, [edx+8]
.text$mn:0000DAD2                 push    eax
.text$mn:0000DAD3                 mov     ecx, [ebp+arg_C]
.text$mn:0000DAD6                 add     ecx, 8
.text$mn:0000DAD9                 push    ecx
.text$mn:0000DADA                 call    ??$_Move@PAUMatchedCharInserted@@PAU1@@std@@YAPAUMatchedCharInserted@@PAU1@00@Z ; std::_Move<MatchedCharInserted *,MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000DADF                 add     esp, 0Ch
.text$mn:0000DAE2                 mov     edx, [ebp+var_10]
.text$mn:0000DAE5                 mov     eax, [edx+8]
.text$mn:0000DAE8                 push    eax
.text$mn:0000DAE9                 mov     ecx, [ebp+var_10]
.text$mn:0000DAEC                 mov     edx, [ecx+8]
.text$mn:0000DAEF                 sub     edx, 8
.text$mn:0000DAF2                 push    edx
.text$mn:0000DAF3                 mov     ecx, [ebp+var_10]
.text$mn:0000DAF6                 call    ?_Destroy@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Destroy(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000DAFB                 mov     eax, [ebp+var_10]
.text$mn:0000DAFE                 mov     ecx, [eax+8]
.text$mn:0000DB01                 push    ecx
.text$mn:0000DB02                 mov     edx, [ebp+arg_C]
.text$mn:0000DB05                 push    edx
.text$mn:0000DB06                 mov     ecx, [ebp+var_10]
.text$mn:0000DB09                 call    ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000DB0E                 mov     eax, [ebp+var_10]
.text$mn:0000DB11                 mov     ecx, [eax+8]
.text$mn:0000DB14                 sub     ecx, 8
.text$mn:0000DB17                 mov     edx, [ebp+var_10]
.text$mn:0000DB1A                 mov     [edx+8], ecx
.text$mn:0000DB1D                 sub     esp, 0Ch
.text$mn:0000DB20                 mov     ecx, esp
.text$mn:0000DB22                 mov     [ebp+var_1C], esp
.text$mn:0000DB25                 lea     eax, [ebp+arg_4]
.text$mn:0000DB28                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000DB29                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>> const &)
.text$mn:0000DB2E                 mov     [ebp+var_18], eax
.text$mn:0000DB31                 mov     ecx, [ebp+var_18]
.text$mn:0000DB34                 mov     [ebp+var_20], ecx
.text$mn:0000DB37                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000DB3B                 mov     edx, [ebp+arg_0]
.text$mn:0000DB3E                 push    edx
.text$mn:0000DB3F                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000DB43                 mov     ecx, [ebp+var_10]
.text$mn:0000DB46                 call    ?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)
.text$mn:0000DB4B                 mov     [ebp+var_24], eax
.text$mn:0000DB4E                 mov     eax, [ebp+var_14]
.text$mn:0000DB51                 or      eax, 1
.text$mn:0000DB54                 mov     [ebp+var_14], eax
.text$mn:0000DB57                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000DB5B                 lea     ecx, [ebp+arg_4]
.text$mn:0000DB5E                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$mn:0000DB63                 mov     eax, [ebp+arg_0]
.text$mn:0000DB66                 mov     ecx, [ebp+var_C]
.text$mn:0000DB69                 mov     large fs:0, ecx
.text$mn:0000DB70                 pop     ecx
.text$mn:0000DB71                 mov     esp, ebp
.text$mn:0000DB73                 pop     ebp
.text$mn:0000DB74                 retn    10h
.text$mn:0000DB74 ?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z endp
.text$mn:0000DB74
.text$mn:0000DB74 ; ---------------------------------------------------------------------------
.text$mn:0000DB77                 align 4
.text$mn:0000DB77 _text$mn        ends
.text$mn:0000DB77
.text$x:0000DB78 ; ===========================================================================
.text$x:0000DB78
.text$x:0000DB78 ; Segment type: Pure code
.text$x:0000DB78 ; Segment permissions: Read/Execute
.text$x:0000DB78 _text$x         segment para public 'CODE' use32
.text$x:0000DB78                 assume cs:_text$x
.text$x:0000DB78                 ;org 0DB78h
.text$x:0000DB78 ; COMDAT (pick associative to section at DA58)
.text$x:0000DB78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DB78
.text$x:0000DB78 ; =============== S U B R O U T I N E =======================================
.text$x:0000DB78
.text$x:0000DB78
.text$x:0000DB78 __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000DB78                                         ; DATA XREF: .xdata$x:00010620o
.text$x:0000DB78                 lea     ecx, [ebp+0Ch]
.text$x:0000DB7B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000DB7B __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0 endp
.text$x:0000DB7B
.text$x:0000DB80
.text$x:0000DB80 ; =============== S U B R O U T I N E =======================================
.text$x:0000DB80
.text$x:0000DB80
.text$x:0000DB80 __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1 proc near
.text$x:0000DB80                                         ; DATA XREF: .xdata$x:00010628o
.text$x:0000DB80                 mov     ecx, [ebp-1Ch]
.text$x:0000DB83                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000DB83 __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1 endp
.text$x:0000DB83
.text$x:0000DB88
.text$x:0000DB88 ; =============== S U B R O U T I N E =======================================
.text$x:0000DB88
.text$x:0000DB88
.text$x:0000DB88 __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$2 proc near
.text$x:0000DB88                                         ; DATA XREF: .xdata$x:00010618o
.text$x:0000DB88                 mov     eax, [ebp-14h]
.text$x:0000DB8B                 and     eax, 1
.text$x:0000DB8E                 jz      $LN8_1
.text$x:0000DB94                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000DB98                 mov     ecx, [ebp+8]
.text$x:0000DB9B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>(void)
.text$x:0000DBA0 ; ---------------------------------------------------------------------------
.text$x:0000DBA0
.text$x:0000DBA0 $LN8_1:                                 ; CODE XREF: __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$2+6j
.text$x:0000DBA0                 retn
.text$x:0000DBA0 __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$2 endp
.text$x:0000DBA0
.text$x:0000DBA1
.text$x:0000DBA1 ; =============== S U B R O U T I N E =======================================
.text$x:0000DBA1
.text$x:0000DBA1
.text$x:0000DBA1 __ehhandler$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z proc near
.text$x:0000DBA1                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+5o
.text$x:0000DBA1
.text$x:0000DBA1 arg_4           = dword ptr  8
.text$x:0000DBA1
.text$x:0000DBA1                 mov     edx, [esp+arg_4]
.text$x:0000DBA5                 lea     eax, [edx+0Ch]
.text$x:0000DBA8                 mov     ecx, [edx-1Ch]
.text$x:0000DBAB                 xor     ecx, eax
.text$x:0000DBAD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DBB2                 mov     eax, offset __ehfuncinfo$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.text$x:0000DBB7                 jmp     ___CxxFrameHandler3
.text$x:0000DBB7 __ehhandler$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z endp
.text$x:0000DBB7
.text$x:0000DBB7 _text$x         ends
.text$x:0000DBB7
.text$mn:0000DBBC ; ===========================================================================
.text$mn:0000DBBC
.text$mn:0000DBBC ; Segment type: Pure code
.text$mn:0000DBBC ; Segment permissions: Read/Execute
.text$mn:0000DBBC _text$mn        segment para public 'CODE' use32
.text$mn:0000DBBC                 assume cs:_text$mn
.text$mn:0000DBBC                 ;org 0DBBCh
.text$mn:0000DBBC ; COMDAT (pick any)
.text$mn:0000DBBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DBBC
.text$mn:0000DBBC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DBBC
.text$mn:0000DBBC ; Attributes: bp-based frame
.text$mn:0000DBBC
.text$mn:0000DBBC ; __int32 __thiscall ScintillaEditView::execute(ScintillaEditView *this, unsigned int, unsigned int, __int32)
.text$mn:0000DBBC                 public ?execute@ScintillaEditView@@QBEJIIJ@Z
.text$mn:0000DBBC ?execute@ScintillaEditView@@QBEJIIJ@Z proc near
.text$mn:0000DBBC                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+96p
.text$mn:0000DBBC                                         ; InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+BBp ...
.text$mn:0000DBBC
.text$mn:0000DBBC var_4           = dword ptr -4
.text$mn:0000DBBC arg_0           = dword ptr  8
.text$mn:0000DBBC arg_4           = dword ptr  0Ch
.text$mn:0000DBBC arg_8           = dword ptr  10h
.text$mn:0000DBBC
.text$mn:0000DBBC                 push    ebp
.text$mn:0000DBBD                 mov     ebp, esp
.text$mn:0000DBBF                 push    ecx
.text$mn:0000DBC0                 mov     [ebp+var_4], ecx
.text$mn:0000DBC3                 mov     eax, [ebp+arg_8]
.text$mn:0000DBC6                 push    eax
.text$mn:0000DBC7                 mov     ecx, [ebp+arg_4]
.text$mn:0000DBCA                 push    ecx
.text$mn:0000DBCB                 mov     edx, [ebp+arg_0]
.text$mn:0000DBCE                 push    edx
.text$mn:0000DBCF                 mov     eax, [ebp+var_4]
.text$mn:0000DBD2                 mov     ecx, [eax+14h]
.text$mn:0000DBD5                 push    ecx
.text$mn:0000DBD6                 mov     edx, [ebp+var_4]
.text$mn:0000DBD9                 mov     eax, [edx+10h]
.text$mn:0000DBDC                 call    eax
.text$mn:0000DBDE                 add     esp, 10h
.text$mn:0000DBE1                 mov     esp, ebp
.text$mn:0000DBE3                 pop     ebp
.text$mn:0000DBE4                 retn    0Ch
.text$mn:0000DBE4 ?execute@ScintillaEditView@@QBEJIIJ@Z endp
.text$mn:0000DBE4
.text$mn:0000DBE4 ; ---------------------------------------------------------------------------
.text$mn:0000DBE7                 align 4
.text$mn:0000DBE7 _text$mn        ends
.text$mn:0000DBE7
.text$mn:0000DBE8 ; ===========================================================================
.text$mn:0000DBE8
.text$mn:0000DBE8 ; Segment type: Pure code
.text$mn:0000DBE8 ; Segment permissions: Read/Execute
.text$mn:0000DBE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000DBE8                 assume cs:_text$mn
.text$mn:0000DBE8                 ;org 0DBE8h
.text$mn:0000DBE8 ; COMDAT (pick any)
.text$mn:0000DBE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DBE8
.text$mn:0000DBE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DBE8
.text$mn:0000DBE8 ; Attributes: bp-based frame
.text$mn:0000DBE8
.text$mn:0000DBE8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t *Str, int)
.text$mn:0000DBE8                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:0000DBE8 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:0000DBE8                                         ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+196p
.text$mn:0000DBE8
.text$mn:0000DBE8 var_4           = dword ptr -4
.text$mn:0000DBE8 Str             = dword ptr  8
.text$mn:0000DBE8 arg_4           = dword ptr  0Ch
.text$mn:0000DBE8
.text$mn:0000DBE8                 push    ebp
.text$mn:0000DBE9                 mov     ebp, esp
.text$mn:0000DBEB                 push    ecx
.text$mn:0000DBEC                 mov     [ebp+var_4], ecx
.text$mn:0000DBEF                 push    77Eh            ; unsigned int
.text$mn:0000DBF4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000DBF9                 mov     eax, [ebp+Str]
.text$mn:0000DBFC                 push    eax             ; int
.text$mn:0000DBFD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000DC02                 add     esp, 0Ch
.text$mn:0000DC05                 mov     ecx, [ebp+Str]
.text$mn:0000DC08                 push    ecx             ; Str
.text$mn:0000DC09                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000DC0E                 add     esp, 4
.text$mn:0000DC11                 push    eax
.text$mn:0000DC12                 mov     edx, [ebp+arg_4]
.text$mn:0000DC15                 push    edx
.text$mn:0000DC16                 mov     eax, [ebp+Str]
.text$mn:0000DC19                 push    eax
.text$mn:0000DC1A                 mov     ecx, [ebp+var_4]
.text$mn:0000DC1D                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:0000DC22                 mov     esp, ebp
.text$mn:0000DC24                 pop     ebp
.text$mn:0000DC25                 retn    8
.text$mn:0000DC25 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:0000DC25
.text$mn:0000DC25 _text$mn        ends
.text$mn:0000DC25
.text$mn:0000DC28 ; ===========================================================================
.text$mn:0000DC28
.text$mn:0000DC28 ; Segment type: Pure code
.text$mn:0000DC28 ; Segment permissions: Read/Execute
.text$mn:0000DC28 _text$mn        segment para public 'CODE' use32
.text$mn:0000DC28                 assume cs:_text$mn
.text$mn:0000DC28                 ;org 0DC28h
.text$mn:0000DC28 ; COMDAT (pick any)
.text$mn:0000DC28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DC28
.text$mn:0000DC28 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DC28
.text$mn:0000DC28 ; Attributes: bp-based frame
.text$mn:0000DC28
.text$mn:0000DC28 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000DC28                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000DC28 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000DC28                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)+35p
.text$mn:0000DC28
.text$mn:0000DC28 var_10          = dword ptr -10h
.text$mn:0000DC28 var_C           = dword ptr -0Ch
.text$mn:0000DC28 var_8           = dword ptr -8
.text$mn:0000DC28 var_4           = dword ptr -4
.text$mn:0000DC28 arg_0           = dword ptr  8
.text$mn:0000DC28 arg_4           = dword ptr  0Ch
.text$mn:0000DC28 arg_8           = dword ptr  10h
.text$mn:0000DC28
.text$mn:0000DC28                 push    ebp
.text$mn:0000DC29                 mov     ebp, esp
.text$mn:0000DC2B                 sub     esp, 10h
.text$mn:0000DC2E                 mov     [ebp+var_8], ecx
.text$mn:0000DC31                 cmp     [ebp+arg_8], 0
.text$mn:0000DC35                 jz      short loc_DC4D
.text$mn:0000DC37                 push    768h            ; unsigned int
.text$mn:0000DC3C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000DC41                 mov     eax, [ebp+arg_0]
.text$mn:0000DC44                 push    eax             ; int
.text$mn:0000DC45                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000DC4A                 add     esp, 0Ch
.text$mn:0000DC4D
.text$mn:0000DC4D loc_DC4D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+Dj
.text$mn:0000DC4D                 cmp     [ebp+arg_8], 0
.text$mn:0000DC51                 jnz     short loc_DC66
.text$mn:0000DC53                 mov     ecx, [ebp+var_8]
.text$mn:0000DC56                 mov     edx, [ebp+arg_4]
.text$mn:0000DC59                 cmp     edx, [ecx+14h]
.text$mn:0000DC5C                 ja      short loc_DC66
.text$mn:0000DC5E                 mov     eax, [ebp+arg_4]
.text$mn:0000DC61                 jmp     loc_DD19
.text$mn:0000DC66 ; ---------------------------------------------------------------------------
.text$mn:0000DC66
.text$mn:0000DC66 loc_DC66:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+29j
.text$mn:0000DC66                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+34j
.text$mn:0000DC66                 mov     eax, [ebp+var_8]
.text$mn:0000DC69                 mov     ecx, [ebp+arg_4]
.text$mn:0000DC6C                 cmp     ecx, [eax+14h]
.text$mn:0000DC6F                 jnb     loc_DD14
.text$mn:0000DC75                 mov     edx, [ebp+var_8]
.text$mn:0000DC78                 mov     eax, [edx+14h]
.text$mn:0000DC7B                 sub     eax, [ebp+arg_4]
.text$mn:0000DC7E                 mov     [ebp+var_4], eax
.text$mn:0000DC81                 mov     ecx, [ebp+arg_8]
.text$mn:0000DC84                 cmp     ecx, [ebp+var_4]
.text$mn:0000DC87                 ja      loc_DD14
.text$mn:0000DC8D                 mov     edx, [ebp+arg_8]
.text$mn:0000DC90                 sub     edx, 1
.text$mn:0000DC93                 mov     eax, [ebp+var_4]
.text$mn:0000DC96                 sub     eax, edx
.text$mn:0000DC98                 mov     [ebp+var_4], eax
.text$mn:0000DC9B                 mov     ecx, [ebp+var_8]
.text$mn:0000DC9E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000DCA3                 mov     ecx, [ebp+arg_4]
.text$mn:0000DCA6                 lea     edx, [eax+ecx*2]
.text$mn:0000DCA9                 mov     [ebp+var_10], edx
.text$mn:0000DCAC                 jmp     short loc_DCCA
.text$mn:0000DCAE ; ---------------------------------------------------------------------------
.text$mn:0000DCAE
.text$mn:0000DCAE loc_DCAE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint):loc_DD12j
.text$mn:0000DCAE                 mov     eax, [ebp+var_C]
.text$mn:0000DCB1                 sub     eax, [ebp+var_10]
.text$mn:0000DCB4                 sar     eax, 1
.text$mn:0000DCB6                 add     eax, 1
.text$mn:0000DCB9                 mov     ecx, [ebp+var_4]
.text$mn:0000DCBC                 sub     ecx, eax
.text$mn:0000DCBE                 mov     [ebp+var_4], ecx
.text$mn:0000DCC1                 mov     edx, [ebp+var_C]
.text$mn:0000DCC4                 add     edx, 2
.text$mn:0000DCC7                 mov     [ebp+var_10], edx
.text$mn:0000DCCA
.text$mn:0000DCCA loc_DCCA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+84j
.text$mn:0000DCCA                 mov     eax, [ebp+arg_0]
.text$mn:0000DCCD                 push    eax
.text$mn:0000DCCE                 mov     ecx, [ebp+var_4]
.text$mn:0000DCD1                 push    ecx
.text$mn:0000DCD2                 mov     edx, [ebp+var_10]
.text$mn:0000DCD5                 push    edx
.text$mn:0000DCD6                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:0000DCDB                 add     esp, 0Ch
.text$mn:0000DCDE                 mov     [ebp+var_C], eax
.text$mn:0000DCE1                 cmp     [ebp+var_C], 0
.text$mn:0000DCE5                 jz      short loc_DD14
.text$mn:0000DCE7                 mov     eax, [ebp+arg_8]
.text$mn:0000DCEA                 push    eax
.text$mn:0000DCEB                 mov     ecx, [ebp+arg_0]
.text$mn:0000DCEE                 push    ecx
.text$mn:0000DCEF                 mov     edx, [ebp+var_C]
.text$mn:0000DCF2                 push    edx
.text$mn:0000DCF3                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000DCF8                 add     esp, 0Ch
.text$mn:0000DCFB                 test    eax, eax
.text$mn:0000DCFD                 jnz     short loc_DD12
.text$mn:0000DCFF                 mov     ecx, [ebp+var_8]
.text$mn:0000DD02                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000DD07                 mov     ecx, [ebp+var_C]
.text$mn:0000DD0A                 sub     ecx, eax
.text$mn:0000DD0C                 sar     ecx, 1
.text$mn:0000DD0E                 mov     eax, ecx
.text$mn:0000DD10                 jmp     short loc_DD19
.text$mn:0000DD12 ; ---------------------------------------------------------------------------
.text$mn:0000DD12
.text$mn:0000DD12 loc_DD12:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+D5j
.text$mn:0000DD12                 jmp     short loc_DCAE
.text$mn:0000DD14 ; ---------------------------------------------------------------------------
.text$mn:0000DD14
.text$mn:0000DD14 loc_DD14:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+47j
.text$mn:0000DD14                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+5Fj ...
.text$mn:0000DD14                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000DD19
.text$mn:0000DD19 loc_DD19:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+39j
.text$mn:0000DD19                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+E8j
.text$mn:0000DD19                 mov     esp, ebp
.text$mn:0000DD1B                 pop     ebp
.text$mn:0000DD1C                 retn    0Ch
.text$mn:0000DD1C ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000DD1C
.text$mn:0000DD1C ; ---------------------------------------------------------------------------
.text$mn:0000DD1F                 align 10h
.text$mn:0000DD1F _text$mn        ends
.text$mn:0000DD1F
.text$mn:0000DD20 ; ===========================================================================
.text$mn:0000DD20
.text$mn:0000DD20 ; Segment type: Pure code
.text$mn:0000DD20 ; Segment permissions: Read/Execute
.text$mn:0000DD20 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD20                 assume cs:_text$mn
.text$mn:0000DD20                 ;org 0DD20h
.text$mn:0000DD20 ; COMDAT (pick any)
.text$mn:0000DD20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD20
.text$mn:0000DD20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD20
.text$mn:0000DD20 ; Attributes: bp-based frame
.text$mn:0000DD20
.text$mn:0000DD20 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:0000DD20                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:0000DD20 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:0000DD20                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+AEp
.text$mn:0000DD20
.text$mn:0000DD20 var_4           = dword ptr -4
.text$mn:0000DD20 arg_0           = dword ptr  8
.text$mn:0000DD20 arg_4           = dword ptr  0Ch
.text$mn:0000DD20 arg_8           = dword ptr  10h
.text$mn:0000DD20
.text$mn:0000DD20                 push    ebp
.text$mn:0000DD21                 mov     ebp, esp
.text$mn:0000DD23                 push    ecx
.text$mn:0000DD24                 cmp     [ebp+arg_4], 0
.text$mn:0000DD28                 jnz     short loc_DD33
.text$mn:0000DD2A                 mov     [ebp+var_4], 0
.text$mn:0000DD31                 jmp     short loc_DD4D
.text$mn:0000DD33 ; ---------------------------------------------------------------------------
.text$mn:0000DD33
.text$mn:0000DD33 loc_DD33:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:0000DD33                 mov     eax, [ebp+arg_4]
.text$mn:0000DD36                 push    eax
.text$mn:0000DD37                 mov     ecx, [ebp+arg_8]
.text$mn:0000DD3A                 movzx   edx, word ptr [ecx]
.text$mn:0000DD3D                 push    edx
.text$mn:0000DD3E                 mov     eax, [ebp+arg_0]
.text$mn:0000DD41                 push    eax
.text$mn:0000DD42                 call    _wmemchr
.text$mn:0000DD47                 add     esp, 0Ch
.text$mn:0000DD4A                 mov     [ebp+var_4], eax
.text$mn:0000DD4D
.text$mn:0000DD4D loc_DD4D:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:0000DD4D                 mov     eax, [ebp+var_4]
.text$mn:0000DD50                 mov     esp, ebp
.text$mn:0000DD52                 pop     ebp
.text$mn:0000DD53                 retn
.text$mn:0000DD53 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:0000DD53
.text$mn:0000DD53 _text$mn        ends
.text$mn:0000DD53
.text$mn:0000DD54 ; ===========================================================================
.text$mn:0000DD54
.text$mn:0000DD54 ; Segment type: Pure code
.text$mn:0000DD54 ; Segment permissions: Read/Execute
.text$mn:0000DD54 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD54                 assume cs:_text$mn
.text$mn:0000DD54                 ;org 0DD54h
.text$mn:0000DD54 ; COMDAT (pick any)
.text$mn:0000DD54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD54
.text$mn:0000DD54 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD54
.text$mn:0000DD54 ; Attributes: bp-based frame
.text$mn:0000DD54
.text$mn:0000DD54 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:0000DD54                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:0000DD54 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000DD54                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:0000DD54                 push    ebp
.text$mn:0000DD55                 mov     ebp, esp
.text$mn:0000DD57                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:0000DD5C                 pop     ebp
.text$mn:0000DD5D                 retn
.text$mn:0000DD5D ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000DD5D
.text$mn:0000DD5D ; ---------------------------------------------------------------------------
.text$mn:0000DD5E                 align 10h
.text$mn:0000DD5E _text$mn        ends
.text$mn:0000DD5E
.text$mn:0000DD60 ; ===========================================================================
.text$mn:0000DD60
.text$mn:0000DD60 ; Segment type: Pure code
.text$mn:0000DD60 ; Segment permissions: Read/Execute
.text$mn:0000DD60 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD60                 assume cs:_text$mn
.text$mn:0000DD60                 ;org 0DD60h
.text$mn:0000DD60 ; COMDAT (pick any)
.text$mn:0000DD60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD60
.text$mn:0000DD60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD60
.text$mn:0000DD60 ; Attributes: bp-based frame
.text$mn:0000DD60
.text$mn:0000DD60 ; struct Buffer *__thiscall ScintillaEditView::getCurrentBuffer(ScintillaEditView *__hidden this)
.text$mn:0000DD60                 public ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ
.text$mn:0000DD60 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ proc near
.text$mn:0000DD60                                         ; CODE XREF: AutoCompletion::getApiFileName(void)+18p
.text$mn:0000DD60
.text$mn:0000DD60 var_4           = dword ptr -4
.text$mn:0000DD60
.text$mn:0000DD60                 push    ebp
.text$mn:0000DD61                 mov     ebp, esp
.text$mn:0000DD63                 push    ecx
.text$mn:0000DD64                 mov     [ebp+var_4], ecx
.text$mn:0000DD67                 mov     eax, [ebp+var_4]
.text$mn:0000DD6A                 mov     eax, [eax+20h]
.text$mn:0000DD6D                 mov     esp, ebp
.text$mn:0000DD6F                 pop     ebp
.text$mn:0000DD70                 retn
.text$mn:0000DD70 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ endp
.text$mn:0000DD70
.text$mn:0000DD70 ; ---------------------------------------------------------------------------
.text$mn:0000DD71                 align 4
.text$mn:0000DD71 _text$mn        ends
.text$mn:0000DD71
.text$mn:0000DD74 ; ===========================================================================
.text$mn:0000DD74
.text$mn:0000DD74 ; Segment type: Pure code
.text$mn:0000DD74 ; Segment permissions: Read/Execute
.text$mn:0000DD74 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD74                 assume cs:_text$mn
.text$mn:0000DD74                 ;org 0DD74h
.text$mn:0000DD74 ; COMDAT (pick any)
.text$mn:0000DD74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD74
.text$mn:0000DD74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD74
.text$mn:0000DD74 ; Attributes: bp-based frame
.text$mn:0000DD74
.text$mn:0000DD74 ; struct ExternalLangContainer *__thiscall NppParameters::getELCFromIndex(NppParameters *this, int)
.text$mn:0000DD74                 public ?getELCFromIndex@NppParameters@@QAEAAVExternalLangContainer@@H@Z
.text$mn:0000DD74 ?getELCFromIndex@NppParameters@@QAEAAVExternalLangContainer@@H@Z proc near
.text$mn:0000DD74                                         ; CODE XREF: AutoCompletion::getApiFileName(void)+63p
.text$mn:0000DD74
.text$mn:0000DD74 var_4           = dword ptr -4
.text$mn:0000DD74 arg_0           = dword ptr  8
.text$mn:0000DD74
.text$mn:0000DD74                 push    ebp
.text$mn:0000DD75                 mov     ebp, esp
.text$mn:0000DD77                 push    ecx
.text$mn:0000DD78                 mov     [ebp+var_4], ecx
.text$mn:0000DD7B                 mov     eax, [ebp+arg_0]
.text$mn:0000DD7E                 mov     ecx, [ebp+var_4]
.text$mn:0000DD81                 mov     eax, [ecx+eax*4+0AB8h]
.text$mn:0000DD88                 mov     esp, ebp
.text$mn:0000DD8A                 pop     ebp
.text$mn:0000DD8B                 retn    4
.text$mn:0000DD8B ?getELCFromIndex@NppParameters@@QAEAAVExternalLangContainer@@H@Z endp
.text$mn:0000DD8B
.text$mn:0000DD8B ; ---------------------------------------------------------------------------
.text$mn:0000DD8E                 align 10h
.text$mn:0000DD8E _text$mn        ends
.text$mn:0000DD8E
.text$mn:0000DD90 ; ===========================================================================
.text$mn:0000DD90
.text$mn:0000DD90 ; Segment type: Pure code
.text$mn:0000DD90 ; Segment permissions: Read/Execute
.text$mn:0000DD90 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD90                 assume cs:_text$mn
.text$mn:0000DD90                 ;org 0DD90h
.text$mn:0000DD90 ; COMDAT (pick any)
.text$mn:0000DD90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD90
.text$mn:0000DD90 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD90
.text$mn:0000DD90 ; Attributes: bp-based frame
.text$mn:0000DD90
.text$mn:0000DD90 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:0000DD90                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:0000DD90 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:0000DD90                                         ; CODE XREF: AutoCompletion::update(int)+19p
.text$mn:0000DD90                                         ; AutoCompletion::getApiFileName(void)+42p ...
.text$mn:0000DD90                 push    ebp
.text$mn:0000DD91                 mov     ebp, esp
.text$mn:0000DD93                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:0000DD98                 pop     ebp
.text$mn:0000DD99                 retn
.text$mn:0000DD99 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:0000DD99
.text$mn:0000DD99 ; ---------------------------------------------------------------------------
.text$mn:0000DD9A                 align 4
.text$mn:0000DD9A _text$mn        ends
.text$mn:0000DD9A
.text$mn:0000DD9C ; ===========================================================================
.text$mn:0000DD9C
.text$mn:0000DD9C ; Segment type: Pure code
.text$mn:0000DD9C ; Segment permissions: Read/Execute
.text$mn:0000DD9C _text$mn        segment para public 'CODE' use32
.text$mn:0000DD9C                 assume cs:_text$mn
.text$mn:0000DD9C                 ;org 0DD9Ch
.text$mn:0000DD9C ; COMDAT (pick any)
.text$mn:0000DD9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD9C
.text$mn:0000DD9C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD9C
.text$mn:0000DD9C ; Attributes: bp-based frame
.text$mn:0000DD9C
.text$mn:0000DD9C ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:0000DD9C                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:0000DD9C ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:0000DD9C                                         ; CODE XREF: AutoCompletion::update(int)+20p
.text$mn:0000DD9C
.text$mn:0000DD9C var_4           = dword ptr -4
.text$mn:0000DD9C
.text$mn:0000DD9C                 push    ebp
.text$mn:0000DD9D                 mov     ebp, esp
.text$mn:0000DD9F                 push    ecx
.text$mn:0000DDA0                 mov     [ebp+var_4], ecx
.text$mn:0000DDA3                 mov     eax, [ebp+var_4]
.text$mn:0000DDA6                 add     eax, 118h
.text$mn:0000DDAB                 mov     esp, ebp
.text$mn:0000DDAD                 pop     ebp
.text$mn:0000DDAE                 retn
.text$mn:0000DDAE ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:0000DDAE
.text$mn:0000DDAE ; ---------------------------------------------------------------------------
.text$mn:0000DDAF                 align 10h
.text$mn:0000DDAF _text$mn        ends
.text$mn:0000DDAF
.text$mn:0000DDB0 ; ===========================================================================
.text$mn:0000DDB0
.text$mn:0000DDB0 ; Segment type: Pure code
.text$mn:0000DDB0 ; Segment permissions: Read/Execute
.text$mn:0000DDB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DDB0                 assume cs:_text$mn
.text$mn:0000DDB0                 ;org 0DDB0h
.text$mn:0000DDB0 ; COMDAT (pick any)
.text$mn:0000DDB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DDB0
.text$mn:0000DDB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DDB0
.text$mn:0000DDB0 ; Attributes: bp-based frame
.text$mn:0000DDB0
.text$mn:0000DDB0 ; const wchar_t *__thiscall Buffer::getUserDefineLangName(Buffer *__hidden this)
.text$mn:0000DDB0                 public ?getUserDefineLangName@Buffer@@QBEPB_WXZ
.text$mn:0000DDB0 ?getUserDefineLangName@Buffer@@QBEPB_WXZ proc near
.text$mn:0000DDB0                                         ; CODE XREF: AutoCompletion::getApiFileName(void)+32p
.text$mn:0000DDB0
.text$mn:0000DDB0 var_4           = dword ptr -4
.text$mn:0000DDB0
.text$mn:0000DDB0                 push    ebp
.text$mn:0000DDB1                 mov     ebp, esp
.text$mn:0000DDB3                 push    ecx
.text$mn:0000DDB4                 mov     [ebp+var_4], ecx
.text$mn:0000DDB7                 mov     ecx, [ebp+var_4]
.text$mn:0000DDBA                 add     ecx, 18h
.text$mn:0000DDBD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000DDC2                 mov     esp, ebp
.text$mn:0000DDC4                 pop     ebp
.text$mn:0000DDC5                 retn
.text$mn:0000DDC5 ?getUserDefineLangName@Buffer@@QBEPB_WXZ endp
.text$mn:0000DDC5
.text$mn:0000DDC5 ; ---------------------------------------------------------------------------
.text$mn:0000DDC6                 align 4
.text$mn:0000DDC6 _text$mn        ends
.text$mn:0000DDC6
.text$mn:0000DDC8 ; ===========================================================================
.text$mn:0000DDC8
.text$mn:0000DDC8 ; Segment type: Pure code
.text$mn:0000DDC8 ; Segment permissions: Read/Execute
.text$mn:0000DDC8 _text$mn        segment para public 'CODE' use32
.text$mn:0000DDC8                 assume cs:_text$mn
.text$mn:0000DDC8                 ;org 0DDC8h
.text$mn:0000DDC8 ; COMDAT (pick any)
.text$mn:0000DDC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DDC8
.text$mn:0000DDC8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DDC8
.text$mn:0000DDC8 ; Attributes: bp-based frame
.text$mn:0000DDC8
.text$mn:0000DDC8 ; void __thiscall ScintillaEditView::getWordToCurrentPos(ScintillaEditView *this, wchar_t *, int)
.text$mn:0000DDC8                 public ?getWordToCurrentPos@ScintillaEditView@@QBEXPA_WH@Z
.text$mn:0000DDC8 ?getWordToCurrentPos@ScintillaEditView@@QBEXPA_WH@Z proc near
.text$mn:0000DDC8                                         ; CODE XREF: AutoCompletion::update(int)+D9p
.text$mn:0000DDC8
.text$mn:0000DDC8 var_C           = dword ptr -0Ch
.text$mn:0000DDC8 var_8           = dword ptr -8
.text$mn:0000DDC8 var_4           = dword ptr -4
.text$mn:0000DDC8 arg_0           = dword ptr  8
.text$mn:0000DDC8 arg_4           = dword ptr  0Ch
.text$mn:0000DDC8
.text$mn:0000DDC8                 push    ebp
.text$mn:0000DDC9                 mov     ebp, esp
.text$mn:0000DDCB                 sub     esp, 0Ch
.text$mn:0000DDCE                 mov     [ebp+var_8], ecx
.text$mn:0000DDD1                 push    0               ; __int32
.text$mn:0000DDD3                 push    0               ; unsigned int
.text$mn:0000DDD5                 push    7D8h            ; unsigned int
.text$mn:0000DDDA                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000DDDD                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000DDE2                 mov     [ebp+var_4], eax
.text$mn:0000DDE5                 push    1               ; __int32
.text$mn:0000DDE7                 mov     eax, [ebp+var_4]
.text$mn:0000DDEA                 push    eax             ; unsigned int
.text$mn:0000DDEB                 push    8DAh            ; unsigned int
.text$mn:0000DDF0                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000DDF3                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000DDF8                 mov     [ebp+var_C], eax
.text$mn:0000DDFB                 mov     ecx, 2
.text$mn:0000DE00                 imul    edx, ecx, 0
.text$mn:0000DE03                 xor     eax, eax
.text$mn:0000DE05                 mov     ecx, [ebp+arg_0]
.text$mn:0000DE08                 mov     [ecx+edx], ax
.text$mn:0000DE0C                 mov     edx, [ebp+var_4]
.text$mn:0000DE0F                 sub     edx, [ebp+var_C]
.text$mn:0000DE12                 cmp     edx, [ebp+arg_4]
.text$mn:0000DE15                 jge     short loc_DE2F
.text$mn:0000DE17                 mov     eax, [ebp+var_4]
.text$mn:0000DE1A                 push    eax             ; int
.text$mn:0000DE1B                 mov     ecx, [ebp+var_C]
.text$mn:0000DE1E                 push    ecx             ; int
.text$mn:0000DE1F                 mov     edx, [ebp+arg_4]
.text$mn:0000DE22                 push    edx             ; unsigned int
.text$mn:0000DE23                 mov     eax, [ebp+arg_0]
.text$mn:0000DE26                 push    eax             ; wchar_t *
.text$mn:0000DE27                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000DE2A                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:0000DE2F
.text$mn:0000DE2F loc_DE2F:                               ; CODE XREF: ScintillaEditView::getWordToCurrentPos(wchar_t *,int)+4Dj
.text$mn:0000DE2F                 mov     esp, ebp
.text$mn:0000DE31                 pop     ebp
.text$mn:0000DE32                 retn    8
.text$mn:0000DE32 ?getWordToCurrentPos@ScintillaEditView@@QBEXPA_WH@Z endp
.text$mn:0000DE32
.text$mn:0000DE32 ; ---------------------------------------------------------------------------
.text$mn:0000DE35                 align 4
.text$mn:0000DE35 _text$mn        ends
.text$mn:0000DE35
.text$mn:0000DE38 ; ===========================================================================
.text$mn:0000DE38
.text$mn:0000DE38 ; Segment type: Pure code
.text$mn:0000DE38 ; Segment permissions: Read/Execute
.text$mn:0000DE38 _text$mn        segment para public 'CODE' use32
.text$mn:0000DE38                 assume cs:_text$mn
.text$mn:0000DE38                 ;org 0DE38h
.text$mn:0000DE38 ; COMDAT (pick any)
.text$mn:0000DE38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DE38
.text$mn:0000DE38 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DE38
.text$mn:0000DE38 ; Attributes: bp-based frame
.text$mn:0000DE38
.text$mn:0000DE38 ; public: class std::allocator<wchar_t> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::get_allocator(void)const
.text$mn:0000DE38                 public ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
.text$mn:0000DE38 ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ proc near
.text$mn:0000DE38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+36p
.text$mn:0000DE38
.text$mn:0000DE38 var_8           = dword ptr -8
.text$mn:0000DE38 var_1           = byte ptr -1
.text$mn:0000DE38 arg_0           = dword ptr  8
.text$mn:0000DE38
.text$mn:0000DE38                 push    ebp
.text$mn:0000DE39                 mov     ebp, esp
.text$mn:0000DE3B                 sub     esp, 8
.text$mn:0000DE3E                 mov     [ebp+var_8], ecx
.text$mn:0000DE41                 lea     eax, [ebp+var_1]
.text$mn:0000DE44                 push    eax
.text$mn:0000DE45                 mov     ecx, [ebp+var_8]
.text$mn:0000DE48                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000DE4D                 push    eax
.text$mn:0000DE4E                 mov     ecx, [ebp+arg_0]
.text$mn:0000DE51                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000DE56                 mov     eax, [ebp+arg_0]
.text$mn:0000DE59                 mov     esp, ebp
.text$mn:0000DE5B                 pop     ebp
.text$mn:0000DE5C                 retn    4
.text$mn:0000DE5C ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ endp
.text$mn:0000DE5C
.text$mn:0000DE5C ; ---------------------------------------------------------------------------
.text$mn:0000DE5F                 align 10h
.text$mn:0000DE5F _text$mn        ends
.text$mn:0000DE5F
.text$mn:0000DE60 ; ===========================================================================
.text$mn:0000DE60
.text$mn:0000DE60 ; Segment type: Pure code
.text$mn:0000DE60 ; Segment permissions: Read/Execute
.text$mn:0000DE60 _text$mn        segment para public 'CODE' use32
.text$mn:0000DE60                 assume cs:_text$mn
.text$mn:0000DE60                 ;org 0DE60h
.text$mn:0000DE60 ; COMDAT (pick any)
.text$mn:0000DE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DE60
.text$mn:0000DE60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DE60
.text$mn:0000DE60 ; Attributes: bp-based frame
.text$mn:0000DE60
.text$mn:0000DE60 ; public: bool __thiscall std::ctype<wchar_t>::is(short, wchar_t)const
.text$mn:0000DE60                 public ?is@?$ctype@_W@std@@QBE_NF_W@Z
.text$mn:0000DE60 ?is@?$ctype@_W@std@@QBE_NF_W@Z proc near
.text$mn:0000DE60                                         ; CODE XREF: std::isalpha<wchar_t>(wchar_t,std::locale const &)+1Bp
.text$mn:0000DE60                                         ; std::isspace<wchar_t>(wchar_t,std::locale const &)+18p ...
.text$mn:0000DE60
.text$mn:0000DE60 var_4           = dword ptr -4
.text$mn:0000DE60 arg_0           = word ptr  8
.text$mn:0000DE60 arg_4           = word ptr  0Ch
.text$mn:0000DE60
.text$mn:0000DE60                 push    ebp
.text$mn:0000DE61                 mov     ebp, esp
.text$mn:0000DE63                 push    ecx
.text$mn:0000DE64                 mov     [ebp+var_4], ecx
.text$mn:0000DE67                 movzx   eax, [ebp+arg_4]
.text$mn:0000DE6B                 push    eax
.text$mn:0000DE6C                 movzx   ecx, [ebp+arg_0]
.text$mn:0000DE70                 push    ecx
.text$mn:0000DE71                 mov     edx, [ebp+var_4]
.text$mn:0000DE74                 mov     eax, [edx]
.text$mn:0000DE76                 mov     ecx, [ebp+var_4]
.text$mn:0000DE79                 mov     edx, [eax+10h]
.text$mn:0000DE7C                 call    edx
.text$mn:0000DE7E                 mov     esp, ebp
.text$mn:0000DE80                 pop     ebp
.text$mn:0000DE81                 retn    8
.text$mn:0000DE81 ?is@?$ctype@_W@std@@QBE_NF_W@Z endp
.text$mn:0000DE81
.text$mn:0000DE81 _text$mn        ends
.text$mn:0000DE81
.text$mn:0000DE84 ; ===========================================================================
.text$mn:0000DE84
.text$mn:0000DE84 ; Segment type: Pure code
.text$mn:0000DE84 ; Segment permissions: Read/Execute
.text$mn:0000DE84 _text$mn        segment para public 'CODE' use32
.text$mn:0000DE84                 assume cs:_text$mn
.text$mn:0000DE84                 ;org 0DE84h
.text$mn:0000DE84 ; COMDAT (pick any)
.text$mn:0000DE84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DE84
.text$mn:0000DE84 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DE84
.text$mn:0000DE84 ; Attributes: bp-based frame
.text$mn:0000DE84
.text$mn:0000DE84 ; bool __thiscall InsertedMatchedChars::isEmpty(InsertedMatchedChars *__hidden this)
.text$mn:0000DE84                 public ?isEmpty@InsertedMatchedChars@@QBE_NXZ
.text$mn:0000DE84 ?isEmpty@InsertedMatchedChars@@QBE_NXZ proc near
.text$mn:0000DE84                                         ; CODE XREF: InsertedMatchedChars::search(char,char,int)+2Ep
.text$mn:0000DE84                                         ; AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+25Fp ...
.text$mn:0000DE84
.text$mn:0000DE84 var_8           = dword ptr -8
.text$mn:0000DE84 var_4           = dword ptr -4
.text$mn:0000DE84
.text$mn:0000DE84                 push    ebp
.text$mn:0000DE85                 mov     ebp, esp
.text$mn:0000DE87                 sub     esp, 8
.text$mn:0000DE8A                 mov     [ebp+var_8], ecx
.text$mn:0000DE8D                 mov     ecx, [ebp+var_8]
.text$mn:0000DE90                 call    ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::size(void)
.text$mn:0000DE95                 test    eax, eax
.text$mn:0000DE97                 jnz     short loc_DEA2
.text$mn:0000DE99                 mov     [ebp+var_4], 1
.text$mn:0000DEA0                 jmp     short loc_DEA9
.text$mn:0000DEA2 ; ---------------------------------------------------------------------------
.text$mn:0000DEA2
.text$mn:0000DEA2 loc_DEA2:                               ; CODE XREF: InsertedMatchedChars::isEmpty(void)+13j
.text$mn:0000DEA2                 mov     [ebp+var_4], 0
.text$mn:0000DEA9
.text$mn:0000DEA9 loc_DEA9:                               ; CODE XREF: InsertedMatchedChars::isEmpty(void)+1Cj
.text$mn:0000DEA9                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000DEAC                 mov     esp, ebp
.text$mn:0000DEAE                 pop     ebp
.text$mn:0000DEAF                 retn
.text$mn:0000DEAF ?isEmpty@InsertedMatchedChars@@QBE_NXZ endp
.text$mn:0000DEAF
.text$mn:0000DEAF _text$mn        ends
.text$mn:0000DEAF
.text$mn:0000DEB0 ; ===========================================================================
.text$mn:0000DEB0
.text$mn:0000DEB0 ; Segment type: Pure code
.text$mn:0000DEB0 ; Segment permissions: Read/Execute
.text$mn:0000DEB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DEB0                 assume cs:_text$mn
.text$mn:0000DEB0                 ;org 0DEB0h
.text$mn:0000DEB0 ; COMDAT (pick any)
.text$mn:0000DEB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DEB0
.text$mn:0000DEB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DEB0
.text$mn:0000DEB0 ; Attributes: bp-based frame
.text$mn:0000DEB0
.text$mn:0000DEB0 ; bool __thiscall Buffer::isUserDefineLangExt(Buffer *__hidden this)
.text$mn:0000DEB0                 public ?isUserDefineLangExt@Buffer@@QBE_NXZ
.text$mn:0000DEB0 ?isUserDefineLangExt@Buffer@@QBE_NXZ proc near
.text$mn:0000DEB0                                         ; CODE XREF: AutoCompletion::getApiFileName(void)+23p
.text$mn:0000DEB0
.text$mn:0000DEB0 var_8           = dword ptr -8
.text$mn:0000DEB0 var_4           = dword ptr -4
.text$mn:0000DEB0
.text$mn:0000DEB0                 push    ebp
.text$mn:0000DEB1                 mov     ebp, esp
.text$mn:0000DEB3                 sub     esp, 8
.text$mn:0000DEB6                 mov     [ebp+var_8], ecx
.text$mn:0000DEB9                 push    0
.text$mn:0000DEBB                 mov     ecx, [ebp+var_8]
.text$mn:0000DEBE                 add     ecx, 18h
.text$mn:0000DEC1                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:0000DEC6                 movzx   eax, word ptr [eax]
.text$mn:0000DEC9                 test    eax, eax
.text$mn:0000DECB                 jz      short loc_DED6
.text$mn:0000DECD                 mov     [ebp+var_4], 1
.text$mn:0000DED4                 jmp     short loc_DEDD
.text$mn:0000DED6 ; ---------------------------------------------------------------------------
.text$mn:0000DED6
.text$mn:0000DED6 loc_DED6:                               ; CODE XREF: Buffer::isUserDefineLangExt(void)+1Bj
.text$mn:0000DED6                 mov     [ebp+var_4], 0
.text$mn:0000DEDD
.text$mn:0000DEDD loc_DEDD:                               ; CODE XREF: Buffer::isUserDefineLangExt(void)+24j
.text$mn:0000DEDD                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000DEE0                 mov     esp, ebp
.text$mn:0000DEE2                 pop     ebp
.text$mn:0000DEE3                 retn
.text$mn:0000DEE3 ?isUserDefineLangExt@Buffer@@QBE_NXZ endp
.text$mn:0000DEE3
.text$mn:0000DEE3 _text$mn        ends
.text$mn:0000DEE3
.text$mn:0000DEE4 ; ===========================================================================
.text$mn:0000DEE4
.text$mn:0000DEE4 ; Segment type: Pure code
.text$mn:0000DEE4 ; Segment permissions: Read/Execute
.text$mn:0000DEE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000DEE4                 assume cs:_text$mn
.text$mn:0000DEE4                 ;org 0DEE4h
.text$mn:0000DEE4 ; COMDAT (pick any)
.text$mn:0000DEE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DEE4
.text$mn:0000DEE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DEE4
.text$mn:0000DEE4 ; Attributes: bp-based frame
.text$mn:0000DEE4
.text$mn:0000DEE4 ; bool __thiscall FunctionCallTip::isVisible(FunctionCallTip *__hidden this)
.text$mn:0000DEE4                 public ?isVisible@FunctionCallTip@@QAE_NXZ
.text$mn:0000DEE4 ?isVisible@FunctionCallTip@@QAE_NXZ proc near
.text$mn:0000DEE4                                         ; CODE XREF: AutoCompletion::update(int)+66p
.text$mn:0000DEE4
.text$mn:0000DEE4 var_C           = dword ptr -0Ch
.text$mn:0000DEE4 var_8           = dword ptr -8
.text$mn:0000DEE4 var_4           = dword ptr -4
.text$mn:0000DEE4
.text$mn:0000DEE4                 push    ebp
.text$mn:0000DEE5                 mov     ebp, esp
.text$mn:0000DEE7                 sub     esp, 0Ch
.text$mn:0000DEEA                 mov     [ebp+var_4], ecx
.text$mn:0000DEED                 mov     eax, [ebp+var_4]
.text$mn:0000DEF0                 cmp     dword ptr [eax], 0
.text$mn:0000DEF3                 jz      short loc_DF25
.text$mn:0000DEF5                 push    0               ; __int32
.text$mn:0000DEF7                 push    0               ; unsigned int
.text$mn:0000DEF9                 push    89Ah            ; unsigned int
.text$mn:0000DEFE                 mov     ecx, [ebp+var_4]
.text$mn:0000DF01                 mov     ecx, [ecx]      ; this
.text$mn:0000DF03                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000DF08                 cmp     eax, 1
.text$mn:0000DF0B                 jnz     short loc_DF16
.text$mn:0000DF0D                 mov     [ebp+var_8], 1
.text$mn:0000DF14                 jmp     short loc_DF1D
.text$mn:0000DF16 ; ---------------------------------------------------------------------------
.text$mn:0000DF16
.text$mn:0000DF16 loc_DF16:                               ; CODE XREF: FunctionCallTip::isVisible(void)+27j
.text$mn:0000DF16                 mov     [ebp+var_8], 0
.text$mn:0000DF1D
.text$mn:0000DF1D loc_DF1D:                               ; CODE XREF: FunctionCallTip::isVisible(void)+30j
.text$mn:0000DF1D                 mov     edx, [ebp+var_8]
.text$mn:0000DF20                 mov     [ebp+var_C], edx
.text$mn:0000DF23                 jmp     short loc_DF2C
.text$mn:0000DF25 ; ---------------------------------------------------------------------------
.text$mn:0000DF25
.text$mn:0000DF25 loc_DF25:                               ; CODE XREF: FunctionCallTip::isVisible(void)+Fj
.text$mn:0000DF25                 mov     [ebp+var_C], 0
.text$mn:0000DF2C
.text$mn:0000DF2C loc_DF2C:                               ; CODE XREF: FunctionCallTip::isVisible(void)+3Fj
.text$mn:0000DF2C                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000DF2F                 mov     esp, ebp
.text$mn:0000DF31                 pop     ebp
.text$mn:0000DF32                 retn
.text$mn:0000DF32 ?isVisible@FunctionCallTip@@QAE_NXZ endp
.text$mn:0000DF32
.text$mn:0000DF32 ; ---------------------------------------------------------------------------
.text$mn:0000DF33                 align 4
.text$mn:0000DF33 _text$mn        ends
.text$mn:0000DF33
.text$mn:0000DF34 ; ===========================================================================
.text$mn:0000DF34
.text$mn:0000DF34 ; Segment type: Pure code
.text$mn:0000DF34 ; Segment permissions: Read/Execute
.text$mn:0000DF34 _text$mn        segment para public 'CODE' use32
.text$mn:0000DF34                 assume cs:_text$mn
.text$mn:0000DF34                 ;org 0DF34h
.text$mn:0000DF34 ; COMDAT (pick any)
.text$mn:0000DF34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DF34
.text$mn:0000DF34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DF34
.text$mn:0000DF34 ; Attributes: bp-based frame
.text$mn:0000DF34
.text$mn:0000DF34 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:0000DF34                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000DF34 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000DF34                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+1CAp
.text$mn:0000DF34                                         ; AutoCompletion::showPathCompletion(void)+4D3p ...
.text$mn:0000DF34
.text$mn:0000DF34 var_4           = dword ptr -4
.text$mn:0000DF34
.text$mn:0000DF34                 push    ebp
.text$mn:0000DF35                 mov     ebp, esp
.text$mn:0000DF37                 push    ecx
.text$mn:0000DF38                 mov     [ebp+var_4], ecx
.text$mn:0000DF3B                 mov     eax, [ebp+var_4]
.text$mn:0000DF3E                 mov     eax, [eax+14h]
.text$mn:0000DF41                 mov     esp, ebp
.text$mn:0000DF43                 pop     ebp
.text$mn:0000DF44                 retn
.text$mn:0000DF44 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000DF44
.text$mn:0000DF44 ; ---------------------------------------------------------------------------
.text$mn:0000DF45                 align 4
.text$mn:0000DF45 _text$mn        ends
.text$mn:0000DF45
.text$mn:0000DF48 ; ===========================================================================
.text$mn:0000DF48
.text$mn:0000DF48 ; Segment type: Pure code
.text$mn:0000DF48 ; Segment permissions: Read/Execute
.text$mn:0000DF48 _text$mn        segment para public 'CODE' use32
.text$mn:0000DF48                 assume cs:_text$mn
.text$mn:0000DF48                 ;org 0DF48h
.text$mn:0000DF48 ; COMDAT (pick any)
.text$mn:0000DF48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DF48
.text$mn:0000DF48 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DF48
.text$mn:0000DF48 ; Attributes: bp-based frame
.text$mn:0000DF48
.text$mn:0000DF48 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:0000DF48                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:0000DF48 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:0000DF48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:0000DF48
.text$mn:0000DF48 var_4           = dword ptr -4
.text$mn:0000DF48 Str             = dword ptr  8
.text$mn:0000DF48
.text$mn:0000DF48                 push    ebp
.text$mn:0000DF49                 mov     ebp, esp
.text$mn:0000DF4B                 push    ecx
.text$mn:0000DF4C                 mov     eax, [ebp+Str]
.text$mn:0000DF4F                 movsx   ecx, byte ptr [eax]
.text$mn:0000DF52                 test    ecx, ecx
.text$mn:0000DF54                 jnz     short loc_DF5F
.text$mn:0000DF56                 mov     [ebp+var_4], 0
.text$mn:0000DF5D                 jmp     short loc_DF6E
.text$mn:0000DF5F ; ---------------------------------------------------------------------------
.text$mn:0000DF5F
.text$mn:0000DF5F loc_DF5F:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000DF5F                 mov     edx, [ebp+Str]
.text$mn:0000DF62                 push    edx             ; Str
.text$mn:0000DF63                 call    _strlen
.text$mn:0000DF68                 add     esp, 4
.text$mn:0000DF6B                 mov     [ebp+var_4], eax
.text$mn:0000DF6E
.text$mn:0000DF6E loc_DF6E:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000DF6E                 mov     eax, [ebp+var_4]
.text$mn:0000DF71                 mov     esp, ebp
.text$mn:0000DF73                 pop     ebp
.text$mn:0000DF74                 retn
.text$mn:0000DF74 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:0000DF74
.text$mn:0000DF74 ; ---------------------------------------------------------------------------
.text$mn:0000DF75                 align 4
.text$mn:0000DF75 _text$mn        ends
.text$mn:0000DF75
.text$mn:0000DF78 ; ===========================================================================
.text$mn:0000DF78
.text$mn:0000DF78 ; Segment type: Pure code
.text$mn:0000DF78 ; Segment permissions: Read/Execute
.text$mn:0000DF78 _text$mn        segment para public 'CODE' use32
.text$mn:0000DF78                 assume cs:_text$mn
.text$mn:0000DF78                 ;org 0DF78h
.text$mn:0000DF78 ; COMDAT (pick any)
.text$mn:0000DF78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DF78
.text$mn:0000DF78 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DF78
.text$mn:0000DF78 ; Attributes: bp-based frame
.text$mn:0000DF78
.text$mn:0000DF78 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:0000DF78                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:0000DF78 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:0000DF78                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+4Dp
.text$mn:0000DF78                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p ...
.text$mn:0000DF78
.text$mn:0000DF78 var_4           = dword ptr -4
.text$mn:0000DF78 Str             = dword ptr  8
.text$mn:0000DF78
.text$mn:0000DF78                 push    ebp
.text$mn:0000DF79                 mov     ebp, esp
.text$mn:0000DF7B                 push    ecx
.text$mn:0000DF7C                 mov     eax, [ebp+Str]
.text$mn:0000DF7F                 movzx   ecx, word ptr [eax]
.text$mn:0000DF82                 test    ecx, ecx
.text$mn:0000DF84                 jnz     short loc_DF8F
.text$mn:0000DF86                 mov     [ebp+var_4], 0
.text$mn:0000DF8D                 jmp     short loc_DF9E
.text$mn:0000DF8F ; ---------------------------------------------------------------------------
.text$mn:0000DF8F
.text$mn:0000DF8F loc_DF8F:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000DF8F                 mov     edx, [ebp+Str]
.text$mn:0000DF92                 push    edx             ; Str
.text$mn:0000DF93                 call    _wcslen
.text$mn:0000DF98                 add     esp, 4
.text$mn:0000DF9B                 mov     [ebp+var_4], eax
.text$mn:0000DF9E
.text$mn:0000DF9E loc_DF9E:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000DF9E                 mov     eax, [ebp+var_4]
.text$mn:0000DFA1                 mov     esp, ebp
.text$mn:0000DFA3                 pop     ebp
.text$mn:0000DFA4                 retn
.text$mn:0000DFA4 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:0000DFA4
.text$mn:0000DFA4 ; ---------------------------------------------------------------------------
.text$mn:0000DFA5                 align 4
.text$mn:0000DFA5 _text$mn        ends
.text$mn:0000DFA5
.text$mn:0000DFA8 ; ===========================================================================
.text$mn:0000DFA8
.text$mn:0000DFA8 ; Segment type: Pure code
.text$mn:0000DFA8 ; Segment permissions: Read/Execute
.text$mn:0000DFA8 _text$mn        segment para public 'CODE' use32
.text$mn:0000DFA8                 assume cs:_text$mn
.text$mn:0000DFA8                 ;org 0DFA8h
.text$mn:0000DFA8 ; COMDAT (pick any)
.text$mn:0000DFA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DFA8
.text$mn:0000DFA8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DFA8
.text$mn:0000DFA8 ; Attributes: bp-based frame
.text$mn:0000DFA8
.text$mn:0000DFA8 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000DFA8                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000DFA8 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000DFA8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000DFA8
.text$mn:0000DFA8 var_4           = dword ptr -4
.text$mn:0000DFA8
.text$mn:0000DFA8                 push    ebp
.text$mn:0000DFA9                 mov     ebp, esp
.text$mn:0000DFAB                 push    ecx
.text$mn:0000DFAC                 mov     [ebp+var_4], ecx
.text$mn:0000DFAF                 mov     eax, [ebp+var_4]
.text$mn:0000DFB2                 push    eax
.text$mn:0000DFB3                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000DFB8                 add     esp, 4
.text$mn:0000DFBB                 mov     esp, ebp
.text$mn:0000DFBD                 pop     ebp
.text$mn:0000DFBE                 retn
.text$mn:0000DFBE ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000DFBE
.text$mn:0000DFBE ; ---------------------------------------------------------------------------
.text$mn:0000DFBF                 align 10h
.text$mn:0000DFBF _text$mn        ends
.text$mn:0000DFBF
.text$mn:0000DFC0 ; ===========================================================================
.text$mn:0000DFC0
.text$mn:0000DFC0 ; Segment type: Pure code
.text$mn:0000DFC0 ; Segment permissions: Read/Execute
.text$mn:0000DFC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DFC0                 assume cs:_text$mn
.text$mn:0000DFC0                 ;org 0DFC0h
.text$mn:0000DFC0 ; COMDAT (pick any)
.text$mn:0000DFC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DFC0
.text$mn:0000DFC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DFC0
.text$mn:0000DFC0 ; Attributes: bp-based frame
.text$mn:0000DFC0
.text$mn:0000DFC0 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct MatchedCharInserted>>::max_size(void)const
.text$mn:0000DFC0                 public ?max_size@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ
.text$mn:0000DFC0 ?max_size@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ proc near
.text$mn:0000DFC0                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::max_size(void)+17p
.text$mn:0000DFC0
.text$mn:0000DFC0 var_4           = dword ptr -4
.text$mn:0000DFC0
.text$mn:0000DFC0                 push    ebp
.text$mn:0000DFC1                 mov     ebp, esp
.text$mn:0000DFC3                 push    ecx
.text$mn:0000DFC4                 mov     [ebp+var_4], ecx
.text$mn:0000DFC7                 mov     eax, [ebp+var_4]
.text$mn:0000DFCA                 push    eax
.text$mn:0000DFCB                 call    ?max_size@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAIABV?$allocator@UMatchedCharInserted@@@2@@Z ; std::allocator_traits<std::allocator<MatchedCharInserted>>::max_size(std::allocator<MatchedCharInserted> const &)
.text$mn:0000DFD0                 add     esp, 4
.text$mn:0000DFD3                 mov     esp, ebp
.text$mn:0000DFD5                 pop     ebp
.text$mn:0000DFD6                 retn
.text$mn:0000DFD6 ?max_size@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ endp
.text$mn:0000DFD6
.text$mn:0000DFD6 ; ---------------------------------------------------------------------------
.text$mn:0000DFD7                 align 4
.text$mn:0000DFD7 _text$mn        ends
.text$mn:0000DFD7
.text$mn:0000DFD8 ; ===========================================================================
.text$mn:0000DFD8
.text$mn:0000DFD8 ; Segment type: Pure code
.text$mn:0000DFD8 ; Segment permissions: Read/Execute
.text$mn:0000DFD8 _text$mn        segment para public 'CODE' use32
.text$mn:0000DFD8                 assume cs:_text$mn
.text$mn:0000DFD8                 ;org 0DFD8h
.text$mn:0000DFD8 ; COMDAT (pick any)
.text$mn:0000DFD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DFD8
.text$mn:0000DFD8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DFD8
.text$mn:0000DFD8 ; Attributes: bp-based frame
.text$mn:0000DFD8
.text$mn:0000DFD8 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000DFD8                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:0000DFD8 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000DFD8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:0000DFD8
.text$mn:0000DFD8 var_4           = dword ptr -4
.text$mn:0000DFD8
.text$mn:0000DFD8                 push    ebp
.text$mn:0000DFD9                 mov     ebp, esp
.text$mn:0000DFDB                 push    ecx
.text$mn:0000DFDC                 mov     [ebp+var_4], ecx
.text$mn:0000DFDF                 mov     eax, [ebp+var_4]
.text$mn:0000DFE2                 push    eax
.text$mn:0000DFE3                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000DFE8                 add     esp, 4
.text$mn:0000DFEB                 mov     esp, ebp
.text$mn:0000DFED                 pop     ebp
.text$mn:0000DFEE                 retn
.text$mn:0000DFEE ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000DFEE
.text$mn:0000DFEE ; ---------------------------------------------------------------------------
.text$mn:0000DFEF                 align 10h
.text$mn:0000DFEF _text$mn        ends
.text$mn:0000DFEF
.text$mn:0000DFF0 ; ===========================================================================
.text$mn:0000DFF0
.text$mn:0000DFF0 ; Segment type: Pure code
.text$mn:0000DFF0 ; Segment permissions: Read/Execute
.text$mn:0000DFF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DFF0                 assume cs:_text$mn
.text$mn:0000DFF0                 ;org 0DFF0h
.text$mn:0000DFF0 ; COMDAT (pick any)
.text$mn:0000DFF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DFF0
.text$mn:0000DFF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DFF0
.text$mn:0000DFF0 ; Attributes: bp-based frame
.text$mn:0000DFF0
.text$mn:0000DFF0 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000DFF0                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000DFF0 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000DFF0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000DFF0
.text$mn:0000DFF0 var_4           = dword ptr -4
.text$mn:0000DFF0
.text$mn:0000DFF0                 push    ebp
.text$mn:0000DFF1                 mov     ebp, esp
.text$mn:0000DFF3                 push    ecx
.text$mn:0000DFF4                 mov     [ebp+var_4], ecx
.text$mn:0000DFF7                 mov     eax, [ebp+var_4]
.text$mn:0000DFFA                 push    eax
.text$mn:0000DFFB                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000E000                 add     esp, 4
.text$mn:0000E003                 mov     esp, ebp
.text$mn:0000E005                 pop     ebp
.text$mn:0000E006                 retn
.text$mn:0000E006 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000E006
.text$mn:0000E006 ; ---------------------------------------------------------------------------
.text$mn:0000E007                 align 4
.text$mn:0000E007 _text$mn        ends
.text$mn:0000E007
.text$mn:0000E008 ; ===========================================================================
.text$mn:0000E008
.text$mn:0000E008 ; Segment type: Pure code
.text$mn:0000E008 ; Segment permissions: Read/Execute
.text$mn:0000E008 _text$mn        segment para public 'CODE' use32
.text$mn:0000E008                 assume cs:_text$mn
.text$mn:0000E008                 ;org 0E008h
.text$mn:0000E008 ; COMDAT (pick any)
.text$mn:0000E008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E008
.text$mn:0000E008 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E008
.text$mn:0000E008 ; Attributes: bp-based frame
.text$mn:0000E008
.text$mn:0000E008 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000E008                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000E008 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000E008                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000E008
.text$mn:0000E008 var_4           = dword ptr -4
.text$mn:0000E008
.text$mn:0000E008                 push    ebp
.text$mn:0000E009                 mov     ebp, esp
.text$mn:0000E00B                 push    ecx
.text$mn:0000E00C                 mov     [ebp+var_4], ecx
.text$mn:0000E00F                 or      eax, 0FFFFFFFFh
.text$mn:0000E012                 mov     esp, ebp
.text$mn:0000E014                 pop     ebp
.text$mn:0000E015                 retn
.text$mn:0000E015 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:0000E015
.text$mn:0000E015 ; ---------------------------------------------------------------------------
.text$mn:0000E016                 align 4
.text$mn:0000E016 _text$mn        ends
.text$mn:0000E016
.text$mn:0000E018 ; ===========================================================================
.text$mn:0000E018
.text$mn:0000E018 ; Segment type: Pure code
.text$mn:0000E018 ; Segment permissions: Read/Execute
.text$mn:0000E018 _text$mn        segment para public 'CODE' use32
.text$mn:0000E018                 assume cs:_text$mn
.text$mn:0000E018                 ;org 0E018h
.text$mn:0000E018 ; COMDAT (pick any)
.text$mn:0000E018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E018
.text$mn:0000E018 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E018
.text$mn:0000E018 ; Attributes: bp-based frame
.text$mn:0000E018
.text$mn:0000E018 ; public: unsigned int __thiscall std::allocator<struct MatchedCharInserted>::max_size(void)const
.text$mn:0000E018                 public ?max_size@?$allocator@UMatchedCharInserted@@@std@@QBEIXZ
.text$mn:0000E018 ?max_size@?$allocator@UMatchedCharInserted@@@std@@QBEIXZ proc near
.text$mn:0000E018                                         ; CODE XREF: std::allocator_traits<std::allocator<MatchedCharInserted>>::max_size(std::allocator<MatchedCharInserted> const &)+6p
.text$mn:0000E018
.text$mn:0000E018 var_4           = dword ptr -4
.text$mn:0000E018
.text$mn:0000E018                 push    ebp
.text$mn:0000E019                 mov     ebp, esp
.text$mn:0000E01B                 push    ecx
.text$mn:0000E01C                 mov     [ebp+var_4], ecx
.text$mn:0000E01F                 mov     eax, 1FFFFFFFh
.text$mn:0000E024                 mov     esp, ebp
.text$mn:0000E026                 pop     ebp
.text$mn:0000E027                 retn
.text$mn:0000E027 ?max_size@?$allocator@UMatchedCharInserted@@@std@@QBEIXZ endp
.text$mn:0000E027
.text$mn:0000E027 _text$mn        ends
.text$mn:0000E027
.text$mn:0000E028 ; ===========================================================================
.text$mn:0000E028
.text$mn:0000E028 ; Segment type: Pure code
.text$mn:0000E028 ; Segment permissions: Read/Execute
.text$mn:0000E028 _text$mn        segment para public 'CODE' use32
.text$mn:0000E028                 assume cs:_text$mn
.text$mn:0000E028                 ;org 0E028h
.text$mn:0000E028 ; COMDAT (pick any)
.text$mn:0000E028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E028
.text$mn:0000E028 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E028
.text$mn:0000E028 ; Attributes: bp-based frame
.text$mn:0000E028
.text$mn:0000E028 ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:0000E028                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:0000E028 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:0000E028                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:0000E028
.text$mn:0000E028 var_4           = dword ptr -4
.text$mn:0000E028
.text$mn:0000E028                 push    ebp
.text$mn:0000E029                 mov     ebp, esp
.text$mn:0000E02B                 push    ecx
.text$mn:0000E02C                 mov     [ebp+var_4], ecx
.text$mn:0000E02F                 mov     eax, 9249249h
.text$mn:0000E034                 mov     esp, ebp
.text$mn:0000E036                 pop     ebp
.text$mn:0000E037                 retn
.text$mn:0000E037 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:0000E037
.text$mn:0000E037 _text$mn        ends
.text$mn:0000E037
.text$mn:0000E038 ; ===========================================================================
.text$mn:0000E038
.text$mn:0000E038 ; Segment type: Pure code
.text$mn:0000E038 ; Segment permissions: Read/Execute
.text$mn:0000E038 _text$mn        segment para public 'CODE' use32
.text$mn:0000E038                 assume cs:_text$mn
.text$mn:0000E038                 ;org 0E038h
.text$mn:0000E038 ; COMDAT (pick any)
.text$mn:0000E038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E038
.text$mn:0000E038 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E038
.text$mn:0000E038 ; Attributes: bp-based frame
.text$mn:0000E038
.text$mn:0000E038 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000E038                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000E038 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000E038                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000E038
.text$mn:0000E038 var_4           = dword ptr -4
.text$mn:0000E038
.text$mn:0000E038                 push    ebp
.text$mn:0000E039                 mov     ebp, esp
.text$mn:0000E03B                 push    ecx
.text$mn:0000E03C                 mov     [ebp+var_4], ecx
.text$mn:0000E03F                 mov     eax, 7FFFFFFFh
.text$mn:0000E044                 mov     esp, ebp
.text$mn:0000E046                 pop     ebp
.text$mn:0000E047                 retn
.text$mn:0000E047 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000E047
.text$mn:0000E047 _text$mn        ends
.text$mn:0000E047
.text$mn:0000E048 ; ===========================================================================
.text$mn:0000E048
.text$mn:0000E048 ; Segment type: Pure code
.text$mn:0000E048 ; Segment permissions: Read/Execute
.text$mn:0000E048 _text$mn        segment para public 'CODE' use32
.text$mn:0000E048                 assume cs:_text$mn
.text$mn:0000E048                 ;org 0E048h
.text$mn:0000E048 ; COMDAT (pick any)
.text$mn:0000E048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E048
.text$mn:0000E048 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E048
.text$mn:0000E048 ; Attributes: bp-based frame
.text$mn:0000E048
.text$mn:0000E048 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000E048                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000E048 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000E048                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000E048
.text$mn:0000E048 arg_0           = dword ptr  8
.text$mn:0000E048
.text$mn:0000E048                 push    ebp
.text$mn:0000E049                 mov     ebp, esp
.text$mn:0000E04B                 mov     ecx, [ebp+arg_0]
.text$mn:0000E04E                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000E053                 pop     ebp
.text$mn:0000E054                 retn
.text$mn:0000E054 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:0000E054
.text$mn:0000E054 ; ---------------------------------------------------------------------------
.text$mn:0000E055                 align 4
.text$mn:0000E055 _text$mn        ends
.text$mn:0000E055
.text$mn:0000E058 ; ===========================================================================
.text$mn:0000E058
.text$mn:0000E058 ; Segment type: Pure code
.text$mn:0000E058 ; Segment permissions: Read/Execute
.text$mn:0000E058 _text$mn        segment para public 'CODE' use32
.text$mn:0000E058                 assume cs:_text$mn
.text$mn:0000E058                 ;org 0E058h
.text$mn:0000E058 ; COMDAT (pick any)
.text$mn:0000E058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E058
.text$mn:0000E058 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E058
.text$mn:0000E058 ; Attributes: bp-based frame
.text$mn:0000E058
.text$mn:0000E058 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct MatchedCharInserted>>::max_size(class std::allocator<struct MatchedCharInserted> const &)
.text$mn:0000E058                 public ?max_size@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAIABV?$allocator@UMatchedCharInserted@@@2@@Z
.text$mn:0000E058 ?max_size@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAIABV?$allocator@UMatchedCharInserted@@@2@@Z proc near
.text$mn:0000E058                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::max_size(void)+Bp
.text$mn:0000E058
.text$mn:0000E058 arg_0           = dword ptr  8
.text$mn:0000E058
.text$mn:0000E058                 push    ebp
.text$mn:0000E059                 mov     ebp, esp
.text$mn:0000E05B                 mov     ecx, [ebp+arg_0]
.text$mn:0000E05E                 call    ?max_size@?$allocator@UMatchedCharInserted@@@std@@QBEIXZ ; std::allocator<MatchedCharInserted>::max_size(void)
.text$mn:0000E063                 pop     ebp
.text$mn:0000E064                 retn
.text$mn:0000E064 ?max_size@?$allocator_traits@V?$allocator@UMatchedCharInserted@@@std@@@std@@SAIABV?$allocator@UMatchedCharInserted@@@2@@Z endp
.text$mn:0000E064
.text$mn:0000E064 ; ---------------------------------------------------------------------------
.text$mn:0000E065                 align 4
.text$mn:0000E065 _text$mn        ends
.text$mn:0000E065
.text$mn:0000E068 ; ===========================================================================
.text$mn:0000E068
.text$mn:0000E068 ; Segment type: Pure code
.text$mn:0000E068 ; Segment permissions: Read/Execute
.text$mn:0000E068 _text$mn        segment para public 'CODE' use32
.text$mn:0000E068                 assume cs:_text$mn
.text$mn:0000E068                 ;org 0E068h
.text$mn:0000E068 ; COMDAT (pick any)
.text$mn:0000E068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E068
.text$mn:0000E068 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E068
.text$mn:0000E068 ; Attributes: bp-based frame
.text$mn:0000E068
.text$mn:0000E068 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000E068                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:0000E068 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:0000E068                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:0000E068
.text$mn:0000E068 arg_0           = dword ptr  8
.text$mn:0000E068
.text$mn:0000E068                 push    ebp
.text$mn:0000E069                 mov     ebp, esp
.text$mn:0000E06B                 mov     ecx, [ebp+arg_0]
.text$mn:0000E06E                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:0000E073                 pop     ebp
.text$mn:0000E074                 retn
.text$mn:0000E074 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:0000E074
.text$mn:0000E074 ; ---------------------------------------------------------------------------
.text$mn:0000E075                 align 4
.text$mn:0000E075 _text$mn        ends
.text$mn:0000E075
.text$mn:0000E078 ; ===========================================================================
.text$mn:0000E078
.text$mn:0000E078 ; Segment type: Pure code
.text$mn:0000E078 ; Segment permissions: Read/Execute
.text$mn:0000E078 _text$mn        segment para public 'CODE' use32
.text$mn:0000E078                 assume cs:_text$mn
.text$mn:0000E078                 ;org 0E078h
.text$mn:0000E078 ; COMDAT (pick any)
.text$mn:0000E078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E078
.text$mn:0000E078 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E078
.text$mn:0000E078 ; Attributes: bp-based frame
.text$mn:0000E078
.text$mn:0000E078 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000E078                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000E078 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000E078                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000E078
.text$mn:0000E078 arg_0           = dword ptr  8
.text$mn:0000E078
.text$mn:0000E078                 push    ebp
.text$mn:0000E079                 mov     ebp, esp
.text$mn:0000E07B                 mov     ecx, [ebp+arg_0]
.text$mn:0000E07E                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000E083                 pop     ebp
.text$mn:0000E084                 retn
.text$mn:0000E084 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:0000E084
.text$mn:0000E084 ; ---------------------------------------------------------------------------
.text$mn:0000E085                 align 4
.text$mn:0000E085 _text$mn        ends
.text$mn:0000E085
.text$mn:0000E088 ; ===========================================================================
.text$mn:0000E088
.text$mn:0000E088 ; Segment type: Pure code
.text$mn:0000E088 ; Segment permissions: Read/Execute
.text$mn:0000E088 _text$mn        segment para public 'CODE' use32
.text$mn:0000E088                 assume cs:_text$mn
.text$mn:0000E088                 ;org 0E088h
.text$mn:0000E088 ; COMDAT (pick any)
.text$mn:0000E088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E088
.text$mn:0000E088 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E088
.text$mn:0000E088 ; Attributes: bp-based frame
.text$mn:0000E088
.text$mn:0000E088 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000E088                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000E088 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000E088                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000E088                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000E088
.text$mn:0000E088 var_10          = dword ptr -10h
.text$mn:0000E088 var_C           = dword ptr -0Ch
.text$mn:0000E088 var_8           = dword ptr -8
.text$mn:0000E088 var_1           = byte ptr -1
.text$mn:0000E088
.text$mn:0000E088                 push    ebp
.text$mn:0000E089                 mov     ebp, esp
.text$mn:0000E08B                 sub     esp, 10h
.text$mn:0000E08E                 mov     [ebp+var_10], ecx
.text$mn:0000E091                 lea     eax, [ebp+var_1]
.text$mn:0000E094                 push    eax
.text$mn:0000E095                 mov     ecx, [ebp+var_10]
.text$mn:0000E098                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000E09D                 mov     ecx, eax
.text$mn:0000E09F                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:0000E0A4                 mov     [ebp+var_8], eax
.text$mn:0000E0A7                 cmp     [ebp+var_8], 1
.text$mn:0000E0AB                 ja      short loc_E0B6
.text$mn:0000E0AD                 mov     [ebp+var_C], 1
.text$mn:0000E0B4                 jmp     short loc_E0BF
.text$mn:0000E0B6 ; ---------------------------------------------------------------------------
.text$mn:0000E0B6
.text$mn:0000E0B6 loc_E0B6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000E0B6                 mov     ecx, [ebp+var_8]
.text$mn:0000E0B9                 sub     ecx, 1
.text$mn:0000E0BC                 mov     [ebp+var_C], ecx
.text$mn:0000E0BF
.text$mn:0000E0BF loc_E0BF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000E0BF                 mov     eax, [ebp+var_C]
.text$mn:0000E0C2                 mov     esp, ebp
.text$mn:0000E0C4                 pop     ebp
.text$mn:0000E0C5                 retn
.text$mn:0000E0C5 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000E0C5
.text$mn:0000E0C5 ; ---------------------------------------------------------------------------
.text$mn:0000E0C6                 align 4
.text$mn:0000E0C6 _text$mn        ends
.text$mn:0000E0C6
.text$mn:0000E0C8 ; ===========================================================================
.text$mn:0000E0C8
.text$mn:0000E0C8 ; Segment type: Pure code
.text$mn:0000E0C8 ; Segment permissions: Read/Execute
.text$mn:0000E0C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000E0C8                 assume cs:_text$mn
.text$mn:0000E0C8                 ;org 0E0C8h
.text$mn:0000E0C8 ; COMDAT (pick any)
.text$mn:0000E0C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E0C8
.text$mn:0000E0C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E0C8
.text$mn:0000E0C8 ; Attributes: bp-based frame
.text$mn:0000E0C8
.text$mn:0000E0C8 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000E0C8                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000E0C8 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000E0C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000E0C8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000E0C8
.text$mn:0000E0C8 var_10          = dword ptr -10h
.text$mn:0000E0C8 var_C           = dword ptr -0Ch
.text$mn:0000E0C8 var_8           = dword ptr -8
.text$mn:0000E0C8 var_1           = byte ptr -1
.text$mn:0000E0C8
.text$mn:0000E0C8                 push    ebp
.text$mn:0000E0C9                 mov     ebp, esp
.text$mn:0000E0CB                 sub     esp, 10h
.text$mn:0000E0CE                 mov     [ebp+var_10], ecx
.text$mn:0000E0D1                 lea     eax, [ebp+var_1]
.text$mn:0000E0D4                 push    eax
.text$mn:0000E0D5                 mov     ecx, [ebp+var_10]
.text$mn:0000E0D8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000E0DD                 mov     ecx, eax
.text$mn:0000E0DF                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:0000E0E4                 mov     [ebp+var_8], eax
.text$mn:0000E0E7                 cmp     [ebp+var_8], 1
.text$mn:0000E0EB                 ja      short loc_E0F6
.text$mn:0000E0ED                 mov     [ebp+var_C], 1
.text$mn:0000E0F4                 jmp     short loc_E0FF
.text$mn:0000E0F6 ; ---------------------------------------------------------------------------
.text$mn:0000E0F6
.text$mn:0000E0F6 loc_E0F6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000E0F6                 mov     ecx, [ebp+var_8]
.text$mn:0000E0F9                 sub     ecx, 1
.text$mn:0000E0FC                 mov     [ebp+var_C], ecx
.text$mn:0000E0FF
.text$mn:0000E0FF loc_E0FF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000E0FF                 mov     eax, [ebp+var_C]
.text$mn:0000E102                 mov     esp, ebp
.text$mn:0000E104                 pop     ebp
.text$mn:0000E105                 retn
.text$mn:0000E105 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000E105
.text$mn:0000E105 ; ---------------------------------------------------------------------------
.text$mn:0000E106                 align 4
.text$mn:0000E106 _text$mn        ends
.text$mn:0000E106
.text$mn:0000E108 ; ===========================================================================
.text$mn:0000E108
.text$mn:0000E108 ; Segment type: Pure code
.text$mn:0000E108 ; Segment permissions: Read/Execute
.text$mn:0000E108 _text$mn        segment para public 'CODE' use32
.text$mn:0000E108                 assume cs:_text$mn
.text$mn:0000E108                 ;org 0E108h
.text$mn:0000E108 ; COMDAT (pick any)
.text$mn:0000E108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E108
.text$mn:0000E108 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E108
.text$mn:0000E108 ; Attributes: bp-based frame
.text$mn:0000E108
.text$mn:0000E108 ; public: unsigned int __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::max_size(void)const
.text$mn:0000E108                 public ?max_size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ
.text$mn:0000E108 ?max_size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ proc near
.text$mn:0000E108                                         ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Grow_to(uint)+17p
.text$mn:0000E108                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)+18p
.text$mn:0000E108
.text$mn:0000E108 var_8           = dword ptr -8
.text$mn:0000E108 var_1           = byte ptr -1
.text$mn:0000E108
.text$mn:0000E108                 push    ebp
.text$mn:0000E109                 mov     ebp, esp
.text$mn:0000E10B                 sub     esp, 8
.text$mn:0000E10E                 mov     [ebp+var_8], ecx
.text$mn:0000E111                 lea     eax, [ebp+var_1]
.text$mn:0000E114                 push    eax
.text$mn:0000E115                 mov     ecx, [ebp+var_8]
.text$mn:0000E118                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000E11D                 mov     ecx, eax
.text$mn:0000E11F                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::max_size(void)
.text$mn:0000E124                 mov     esp, ebp
.text$mn:0000E126                 pop     ebp
.text$mn:0000E127                 retn
.text$mn:0000E127 ?max_size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ endp
.text$mn:0000E127
.text$mn:0000E127 _text$mn        ends
.text$mn:0000E127
.text$mn:0000E128 ; ===========================================================================
.text$mn:0000E128
.text$mn:0000E128 ; Segment type: Pure code
.text$mn:0000E128 ; Segment permissions: Read/Execute
.text$mn:0000E128 _text$mn        segment para public 'CODE' use32
.text$mn:0000E128                 assume cs:_text$mn
.text$mn:0000E128                 ;org 0E128h
.text$mn:0000E128 ; COMDAT (pick any)
.text$mn:0000E128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E128
.text$mn:0000E128 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E128
.text$mn:0000E128 ; Attributes: bp-based frame
.text$mn:0000E128
.text$mn:0000E128 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000E128                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000E128 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000E128                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+17p
.text$mn:0000E128                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+18p
.text$mn:0000E128
.text$mn:0000E128 var_8           = dword ptr -8
.text$mn:0000E128 var_1           = byte ptr -1
.text$mn:0000E128
.text$mn:0000E128                 push    ebp
.text$mn:0000E129                 mov     ebp, esp
.text$mn:0000E12B                 sub     esp, 8
.text$mn:0000E12E                 mov     [ebp+var_8], ecx
.text$mn:0000E131                 lea     eax, [ebp+var_1]
.text$mn:0000E134                 push    eax
.text$mn:0000E135                 mov     ecx, [ebp+var_8]
.text$mn:0000E138                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E13D                 mov     ecx, eax
.text$mn:0000E13F                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000E144                 mov     esp, ebp
.text$mn:0000E146                 pop     ebp
.text$mn:0000E147                 retn
.text$mn:0000E147 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000E147
.text$mn:0000E147 _text$mn        ends
.text$mn:0000E147
.text$mn:0000E148 ; ===========================================================================
.text$mn:0000E148
.text$mn:0000E148 ; Segment type: Pure code
.text$mn:0000E148 ; Segment permissions: Read/Execute
.text$mn:0000E148 _text$mn        segment para public 'CODE' use32
.text$mn:0000E148                 assume cs:_text$mn
.text$mn:0000E148                 ;org 0E148h
.text$mn:0000E148 ; COMDAT (pick any)
.text$mn:0000E148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E148
.text$mn:0000E148 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E148
.text$mn:0000E148 ; Attributes: bp-based frame
.text$mn:0000E148
.text$mn:0000E148 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000E148                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E148 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000E148                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000E148                                         ; DATA XREF: .rdata:00011310o
.text$mn:0000E148
.text$mn:0000E148 var_1C          = dword ptr -1Ch
.text$mn:0000E148 var_18          = dword ptr -18h
.text$mn:0000E148 Str             = dword ptr -14h
.text$mn:0000E148 var_10          = dword ptr -10h
.text$mn:0000E148 var_C           = dword ptr -0Ch
.text$mn:0000E148 var_4           = dword ptr -4
.text$mn:0000E148 arg_0           = dword ptr  8
.text$mn:0000E148 arg_4           = dword ptr  0Ch
.text$mn:0000E148
.text$mn:0000E148                 push    ebp
.text$mn:0000E149                 mov     ebp, esp
.text$mn:0000E14B                 push    0FFFFFFFFh
.text$mn:0000E14D                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E152                 mov     eax, large fs:0
.text$mn:0000E158                 push    eax
.text$mn:0000E159                 sub     esp, 10h
.text$mn:0000E15C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000E161                 xor     eax, ebp
.text$mn:0000E163                 push    eax
.text$mn:0000E164                 lea     eax, [ebp+var_C]
.text$mn:0000E167                 mov     large fs:0, eax
.text$mn:0000E16D                 mov     [ebp+var_1C], ecx
.text$mn:0000E170                 mov     [ebp+var_18], 0
.text$mn:0000E177                 mov     eax, [ebp+arg_4]
.text$mn:0000E17A                 push    eax             ; int
.text$mn:0000E17B                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000E180                 add     esp, 4
.text$mn:0000E183                 mov     [ebp+var_10], eax
.text$mn:0000E186                 cmp     [ebp+var_10], 0
.text$mn:0000E18A                 jz      short loc_E194
.text$mn:0000E18C                 mov     ecx, [ebp+var_10]
.text$mn:0000E18F                 mov     [ebp+Str], ecx
.text$mn:0000E192                 jmp     short loc_E19B
.text$mn:0000E194 ; ---------------------------------------------------------------------------
.text$mn:0000E194
.text$mn:0000E194 loc_E194:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:0000E194                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000E19B
.text$mn:0000E19B loc_E19B:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000E19B                 mov     edx, [ebp+Str]
.text$mn:0000E19E                 push    edx             ; Str
.text$mn:0000E19F                 mov     ecx, [ebp+arg_0]
.text$mn:0000E1A2                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000E1A7                 mov     [ebp+var_4], 0
.text$mn:0000E1AE                 mov     eax, [ebp+var_18]
.text$mn:0000E1B1                 or      eax, 1
.text$mn:0000E1B4                 mov     [ebp+var_18], eax
.text$mn:0000E1B7                 mov     eax, [ebp+arg_0]
.text$mn:0000E1BA                 mov     ecx, [ebp+var_C]
.text$mn:0000E1BD                 mov     large fs:0, ecx
.text$mn:0000E1C4                 pop     ecx
.text$mn:0000E1C5                 mov     esp, ebp
.text$mn:0000E1C7                 pop     ebp
.text$mn:0000E1C8                 retn    8
.text$mn:0000E1C8 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000E1C8
.text$mn:0000E1C8 ; ---------------------------------------------------------------------------
.text$mn:0000E1CB                 align 4
.text$mn:0000E1CB _text$mn        ends
.text$mn:0000E1CB
.text$x:0000E1CC ; ===========================================================================
.text$x:0000E1CC
.text$x:0000E1CC ; Segment type: Pure code
.text$x:0000E1CC ; Segment permissions: Read/Execute
.text$x:0000E1CC _text$x         segment para public 'CODE' use32
.text$x:0000E1CC                 assume cs:_text$x
.text$x:0000E1CC                 ;org 0E1CCh
.text$x:0000E1CC ; COMDAT (pick associative to section at E148)
.text$x:0000E1CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000E1CC
.text$x:0000E1CC ; =============== S U B R O U T I N E =======================================
.text$x:0000E1CC
.text$x:0000E1CC
.text$x:0000E1CC __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000E1CC                                         ; DATA XREF: .xdata$x:0000FA18o
.text$x:0000E1CC                 mov     eax, [ebp-18h]
.text$x:0000E1CF                 and     eax, 1
.text$x:0000E1D2                 jz      $LN6
.text$x:0000E1D8                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000E1DC                 mov     ecx, [ebp+8]
.text$x:0000E1DF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000E1E4 ; ---------------------------------------------------------------------------
.text$x:0000E1E4
.text$x:0000E1E4 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000E1E4                 retn
.text$x:0000E1E4 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000E1E4
.text$x:0000E1E5
.text$x:0000E1E5 ; =============== S U B R O U T I N E =======================================
.text$x:0000E1E5
.text$x:0000E1E5
.text$x:0000E1E5 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000E1E5                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:0000E1E5
.text$x:0000E1E5 arg_4           = dword ptr  8
.text$x:0000E1E5
.text$x:0000E1E5                 mov     edx, [esp+arg_4]
.text$x:0000E1E9                 lea     eax, [edx+0Ch]
.text$x:0000E1EC                 mov     ecx, [edx-14h]
.text$x:0000E1EF                 xor     ecx, eax
.text$x:0000E1F1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000E1F6                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000E1FB                 jmp     ___CxxFrameHandler3
.text$x:0000E1FB __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000E1FB
.text$x:0000E1FB _text$x         ends
.text$x:0000E1FB
.text$mn:0000E200 ; ===========================================================================
.text$mn:0000E200
.text$mn:0000E200 ; Segment type: Pure code
.text$mn:0000E200 ; Segment permissions: Read/Execute
.text$mn:0000E200 _text$mn        segment para public 'CODE' use32
.text$mn:0000E200                 assume cs:_text$mn
.text$mn:0000E200                 ;org 0E200h
.text$mn:0000E200 ; COMDAT (pick any)
.text$mn:0000E200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E200
.text$mn:0000E200 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E200
.text$mn:0000E200 ; Attributes: bp-based frame
.text$mn:0000E200
.text$mn:0000E200 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000E200                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E200 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000E200                                         ; DATA XREF: .rdata:00011344o
.text$mn:0000E200
.text$mn:0000E200 var_14          = dword ptr -14h
.text$mn:0000E200 var_10          = dword ptr -10h
.text$mn:0000E200 var_C           = dword ptr -0Ch
.text$mn:0000E200 var_4           = dword ptr -4
.text$mn:0000E200 arg_0           = dword ptr  8
.text$mn:0000E200 arg_4           = dword ptr  0Ch
.text$mn:0000E200
.text$mn:0000E200                 push    ebp
.text$mn:0000E201                 mov     ebp, esp
.text$mn:0000E203                 push    0FFFFFFFFh
.text$mn:0000E205                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E20A                 mov     eax, large fs:0
.text$mn:0000E210                 push    eax
.text$mn:0000E211                 sub     esp, 8
.text$mn:0000E214                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000E219                 xor     eax, ebp
.text$mn:0000E21B                 push    eax
.text$mn:0000E21C                 lea     eax, [ebp+var_C]
.text$mn:0000E21F                 mov     large fs:0, eax
.text$mn:0000E225                 mov     [ebp+var_14], ecx
.text$mn:0000E228                 mov     [ebp+var_10], 0
.text$mn:0000E22F                 cmp     [ebp+arg_4], 1
.text$mn:0000E233                 jnz     short loc_E259
.text$mn:0000E235                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000E23A                 mov     ecx, [ebp+arg_0]
.text$mn:0000E23D                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000E242                 mov     [ebp+var_4], 0
.text$mn:0000E249                 mov     eax, [ebp+var_10]
.text$mn:0000E24C                 or      eax, 1
.text$mn:0000E24F                 mov     [ebp+var_10], eax
.text$mn:0000E252                 mov     eax, [ebp+arg_0]
.text$mn:0000E255                 jmp     short loc_E27C
.text$mn:0000E257 ; ---------------------------------------------------------------------------
.text$mn:0000E257                 jmp     short loc_E27C
.text$mn:0000E259 ; ---------------------------------------------------------------------------
.text$mn:0000E259
.text$mn:0000E259 loc_E259:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000E259                 mov     ecx, [ebp+arg_4]
.text$mn:0000E25C                 push    ecx
.text$mn:0000E25D                 mov     edx, [ebp+arg_0]
.text$mn:0000E260                 push    edx
.text$mn:0000E261                 mov     ecx, [ebp+var_14]
.text$mn:0000E264                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000E269                 mov     [ebp+var_4], 0
.text$mn:0000E270                 mov     eax, [ebp+var_10]
.text$mn:0000E273                 or      eax, 1
.text$mn:0000E276                 mov     [ebp+var_10], eax
.text$mn:0000E279                 mov     eax, [ebp+arg_0]
.text$mn:0000E27C
.text$mn:0000E27C loc_E27C:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:0000E27C                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:0000E27C                 mov     ecx, [ebp+var_C]
.text$mn:0000E27F                 mov     large fs:0, ecx
.text$mn:0000E286                 pop     ecx
.text$mn:0000E287                 mov     esp, ebp
.text$mn:0000E289                 pop     ebp
.text$mn:0000E28A                 retn    8
.text$mn:0000E28A ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000E28A
.text$mn:0000E28A ; ---------------------------------------------------------------------------
.text$mn:0000E28D                 align 10h
.text$mn:0000E28D _text$mn        ends
.text$mn:0000E28D
.text$x:0000E290 ; ===========================================================================
.text$x:0000E290
.text$x:0000E290 ; Segment type: Pure code
.text$x:0000E290 ; Segment permissions: Read/Execute
.text$x:0000E290 _text$x         segment para public 'CODE' use32
.text$x:0000E290                 assume cs:_text$x
.text$x:0000E290                 ;org 0E290h
.text$x:0000E290 ; COMDAT (pick associative to section at E200)
.text$x:0000E290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000E290
.text$x:0000E290 ; =============== S U B R O U T I N E =======================================
.text$x:0000E290
.text$x:0000E290
.text$x:0000E290 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000E290                                         ; DATA XREF: .xdata$x:0000FA9Co
.text$x:0000E290                 mov     eax, [ebp-10h]
.text$x:0000E293                 and     eax, 1
.text$x:0000E296                 jz      $LN6_0
.text$x:0000E29C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000E2A0                 mov     ecx, [ebp+8]
.text$x:0000E2A3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000E2A8 ; ---------------------------------------------------------------------------
.text$x:0000E2A8
.text$x:0000E2A8 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000E2A8                 retn
.text$x:0000E2A8 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000E2A8
.text$x:0000E2A9
.text$x:0000E2A9 ; =============== S U B R O U T I N E =======================================
.text$x:0000E2A9
.text$x:0000E2A9
.text$x:0000E2A9 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000E2A9                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000E2A9
.text$x:0000E2A9 arg_4           = dword ptr  8
.text$x:0000E2A9
.text$x:0000E2A9                 mov     edx, [esp+arg_4]
.text$x:0000E2AD                 lea     eax, [edx+0Ch]
.text$x:0000E2B0                 mov     ecx, [edx-0Ch]
.text$x:0000E2B3                 xor     ecx, eax
.text$x:0000E2B5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000E2BA                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000E2BF                 jmp     ___CxxFrameHandler3
.text$x:0000E2BF __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000E2BF
.text$x:0000E2BF _text$x         ends
.text$x:0000E2BF
.text$mn:0000E2C4 ; ===========================================================================
.text$mn:0000E2C4
.text$mn:0000E2C4 ; Segment type: Pure code
.text$mn:0000E2C4 ; Segment permissions: Read/Execute
.text$mn:0000E2C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000E2C4                 assume cs:_text$mn
.text$mn:0000E2C4                 ;org 0E2C4h
.text$mn:0000E2C4 ; COMDAT (pick any)
.text$mn:0000E2C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E2C4
.text$mn:0000E2C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E2C4
.text$mn:0000E2C4 ; Attributes: bp-based frame
.text$mn:0000E2C4
.text$mn:0000E2C4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:0000E2C4                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E2C4 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000E2C4                                         ; DATA XREF: .rdata:00011384o
.text$mn:0000E2C4
.text$mn:0000E2C4 var_1C          = dword ptr -1Ch
.text$mn:0000E2C4 var_18          = dword ptr -18h
.text$mn:0000E2C4 Str             = dword ptr -14h
.text$mn:0000E2C4 var_10          = dword ptr -10h
.text$mn:0000E2C4 var_C           = dword ptr -0Ch
.text$mn:0000E2C4 var_4           = dword ptr -4
.text$mn:0000E2C4 arg_0           = dword ptr  8
.text$mn:0000E2C4 arg_4           = dword ptr  0Ch
.text$mn:0000E2C4
.text$mn:0000E2C4                 push    ebp
.text$mn:0000E2C5                 mov     ebp, esp
.text$mn:0000E2C7                 push    0FFFFFFFFh
.text$mn:0000E2C9                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000E2CE                 mov     eax, large fs:0
.text$mn:0000E2D4                 push    eax
.text$mn:0000E2D5                 sub     esp, 10h
.text$mn:0000E2D8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000E2DD                 xor     eax, ebp
.text$mn:0000E2DF                 push    eax
.text$mn:0000E2E0                 lea     eax, [ebp+var_C]
.text$mn:0000E2E3                 mov     large fs:0, eax
.text$mn:0000E2E9                 mov     [ebp+var_1C], ecx
.text$mn:0000E2EC                 mov     [ebp+var_18], 0
.text$mn:0000E2F3                 mov     eax, [ebp+arg_4]
.text$mn:0000E2F6                 push    eax             ; int
.text$mn:0000E2F7                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000E2FC                 add     esp, 4
.text$mn:0000E2FF                 mov     [ebp+var_10], eax
.text$mn:0000E302                 cmp     [ebp+var_10], 0
.text$mn:0000E306                 jz      short loc_E310
.text$mn:0000E308                 mov     ecx, [ebp+var_10]
.text$mn:0000E30B                 mov     [ebp+Str], ecx
.text$mn:0000E30E                 jmp     short loc_E317
.text$mn:0000E310 ; ---------------------------------------------------------------------------
.text$mn:0000E310
.text$mn:0000E310 loc_E310:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000E310                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000E317
.text$mn:0000E317 loc_E317:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000E317                 mov     edx, [ebp+Str]
.text$mn:0000E31A                 push    edx             ; Str
.text$mn:0000E31B                 mov     ecx, [ebp+arg_0]
.text$mn:0000E31E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000E323                 mov     [ebp+var_4], 0
.text$mn:0000E32A                 mov     eax, [ebp+var_18]
.text$mn:0000E32D                 or      eax, 1
.text$mn:0000E330                 mov     [ebp+var_18], eax
.text$mn:0000E333                 mov     eax, [ebp+arg_0]
.text$mn:0000E336                 mov     ecx, [ebp+var_C]
.text$mn:0000E339                 mov     large fs:0, ecx
.text$mn:0000E340                 pop     ecx
.text$mn:0000E341                 mov     esp, ebp
.text$mn:0000E343                 pop     ebp
.text$mn:0000E344                 retn    8
.text$mn:0000E344 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000E344
.text$mn:0000E344 ; ---------------------------------------------------------------------------
.text$mn:0000E347                 align 4
.text$mn:0000E347 _text$mn        ends
.text$mn:0000E347
.text$x:0000E348 ; ===========================================================================
.text$x:0000E348
.text$x:0000E348 ; Segment type: Pure code
.text$x:0000E348 ; Segment permissions: Read/Execute
.text$x:0000E348 _text$x         segment para public 'CODE' use32
.text$x:0000E348                 assume cs:_text$x
.text$x:0000E348                 ;org 0E348h
.text$x:0000E348 ; COMDAT (pick associative to section at E2C4)
.text$x:0000E348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000E348
.text$x:0000E348 ; =============== S U B R O U T I N E =======================================
.text$x:0000E348
.text$x:0000E348
.text$x:0000E348 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000E348                                         ; DATA XREF: .xdata$x:0000FB20o
.text$x:0000E348                 mov     eax, [ebp-18h]
.text$x:0000E34B                 and     eax, 1
.text$x:0000E34E                 jz      $LN6_1
.text$x:0000E354                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000E358                 mov     ecx, [ebp+8]
.text$x:0000E35B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000E360 ; ---------------------------------------------------------------------------
.text$x:0000E360
.text$x:0000E360 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000E360                 retn
.text$x:0000E360 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000E360
.text$x:0000E361
.text$x:0000E361 ; =============== S U B R O U T I N E =======================================
.text$x:0000E361
.text$x:0000E361
.text$x:0000E361 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000E361                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000E361
.text$x:0000E361 arg_4           = dword ptr  8
.text$x:0000E361
.text$x:0000E361                 mov     edx, [esp+arg_4]
.text$x:0000E365                 lea     eax, [edx+0Ch]
.text$x:0000E368                 mov     ecx, [edx-14h]
.text$x:0000E36B                 xor     ecx, eax
.text$x:0000E36D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000E372                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000E377                 jmp     ___CxxFrameHandler3
.text$x:0000E377 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000E377
.text$x:0000E377 _text$x         ends
.text$x:0000E377
.text$mn:0000E37C ; ===========================================================================
.text$mn:0000E37C
.text$mn:0000E37C ; Segment type: Pure code
.text$mn:0000E37C ; Segment permissions: Read/Execute
.text$mn:0000E37C _text$mn        segment para public 'CODE' use32
.text$mn:0000E37C                 assume cs:_text$mn
.text$mn:0000E37C                 ;org 0E37Ch
.text$mn:0000E37C ; COMDAT (pick any)
.text$mn:0000E37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E37C
.text$mn:0000E37C ; =============== S U B R O U T I N E =======================================
.text$mn:0000E37C
.text$mn:0000E37C ; Attributes: bp-based frame
.text$mn:0000E37C
.text$mn:0000E37C ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:0000E37C                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000E37C ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:0000E37C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:0000E37C
.text$mn:0000E37C var_4           = dword ptr -4
.text$mn:0000E37C Dst             = dword ptr  8
.text$mn:0000E37C Src             = dword ptr  0Ch
.text$mn:0000E37C Size            = dword ptr  10h
.text$mn:0000E37C
.text$mn:0000E37C                 push    ebp
.text$mn:0000E37D                 mov     ebp, esp
.text$mn:0000E37F                 push    ecx
.text$mn:0000E380                 cmp     [ebp+Size], 0
.text$mn:0000E384                 jnz     short loc_E38E
.text$mn:0000E386                 mov     eax, [ebp+Dst]
.text$mn:0000E389                 mov     [ebp+var_4], eax
.text$mn:0000E38C                 jmp     short loc_E3A5
.text$mn:0000E38E ; ---------------------------------------------------------------------------
.text$mn:0000E38E
.text$mn:0000E38E loc_E38E:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000E38E                 mov     ecx, [ebp+Size]
.text$mn:0000E391                 push    ecx             ; Size
.text$mn:0000E392                 mov     edx, [ebp+Src]
.text$mn:0000E395                 push    edx             ; Src
.text$mn:0000E396                 mov     eax, [ebp+Dst]
.text$mn:0000E399                 push    eax             ; Dst
.text$mn:0000E39A                 call    _memmove
.text$mn:0000E39F                 add     esp, 0Ch
.text$mn:0000E3A2                 mov     [ebp+var_4], eax
.text$mn:0000E3A5
.text$mn:0000E3A5 loc_E3A5:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:0000E3A5                 mov     eax, [ebp+var_4]
.text$mn:0000E3A8                 mov     esp, ebp
.text$mn:0000E3AA                 pop     ebp
.text$mn:0000E3AB                 retn
.text$mn:0000E3AB ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000E3AB
.text$mn:0000E3AB _text$mn        ends
.text$mn:0000E3AB
.text$mn:0000E3AC ; ===========================================================================
.text$mn:0000E3AC
.text$mn:0000E3AC ; Segment type: Pure code
.text$mn:0000E3AC ; Segment permissions: Read/Execute
.text$mn:0000E3AC _text$mn        segment para public 'CODE' use32
.text$mn:0000E3AC                 assume cs:_text$mn
.text$mn:0000E3AC                 ;org 0E3ACh
.text$mn:0000E3AC ; COMDAT (pick any)
.text$mn:0000E3AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E3AC
.text$mn:0000E3AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000E3AC
.text$mn:0000E3AC ; Attributes: bp-based frame
.text$mn:0000E3AC
.text$mn:0000E3AC ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000E3AC                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000E3AC ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000E3AC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000E3AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:0000E3AC
.text$mn:0000E3AC var_4           = dword ptr -4
.text$mn:0000E3AC Dst             = dword ptr  8
.text$mn:0000E3AC Src             = dword ptr  0Ch
.text$mn:0000E3AC arg_8           = dword ptr  10h
.text$mn:0000E3AC
.text$mn:0000E3AC                 push    ebp
.text$mn:0000E3AD                 mov     ebp, esp
.text$mn:0000E3AF                 push    ecx
.text$mn:0000E3B0                 cmp     [ebp+arg_8], 0
.text$mn:0000E3B4                 jnz     short loc_E3BE
.text$mn:0000E3B6                 mov     eax, [ebp+Dst]
.text$mn:0000E3B9                 mov     [ebp+var_4], eax
.text$mn:0000E3BC                 jmp     short loc_E3D5
.text$mn:0000E3BE ; ---------------------------------------------------------------------------
.text$mn:0000E3BE
.text$mn:0000E3BE loc_E3BE:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000E3BE                 mov     ecx, [ebp+arg_8]
.text$mn:0000E3C1                 push    ecx             ; int
.text$mn:0000E3C2                 mov     edx, [ebp+Src]
.text$mn:0000E3C5                 push    edx             ; Src
.text$mn:0000E3C6                 mov     eax, [ebp+Dst]
.text$mn:0000E3C9                 push    eax             ; Dst
.text$mn:0000E3CA                 call    _wmemmove
.text$mn:0000E3CF                 add     esp, 0Ch
.text$mn:0000E3D2                 mov     [ebp+var_4], eax
.text$mn:0000E3D5
.text$mn:0000E3D5 loc_E3D5:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000E3D5                 mov     eax, [ebp+var_4]
.text$mn:0000E3D8                 mov     esp, ebp
.text$mn:0000E3DA                 pop     ebp
.text$mn:0000E3DB                 retn
.text$mn:0000E3DB ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000E3DB
.text$mn:0000E3DB _text$mn        ends
.text$mn:0000E3DB
.text$mn:0000E3DC ; ===========================================================================
.text$mn:0000E3DC
.text$mn:0000E3DC ; Segment type: Pure code
.text$mn:0000E3DC ; Segment permissions: Read/Execute
.text$mn:0000E3DC _text$mn        segment para public 'CODE' use32
.text$mn:0000E3DC                 assume cs:_text$mn
.text$mn:0000E3DC                 ;org 0E3DCh
.text$mn:0000E3DC ; COMDAT (pick any)
.text$mn:0000E3DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E3DC
.text$mn:0000E3DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000E3DC
.text$mn:0000E3DC ; Attributes: bp-based frame
.text$mn:0000E3DC
.text$mn:0000E3DC ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000E3DC                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000E3DC ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000E3DC                                         ; DATA XREF: .rdata:0001130Co
.text$mn:0000E3DC
.text$mn:0000E3DC var_4           = dword ptr -4
.text$mn:0000E3DC
.text$mn:0000E3DC                 push    ebp
.text$mn:0000E3DD                 mov     ebp, esp
.text$mn:0000E3DF                 push    ecx
.text$mn:0000E3E0                 mov     [ebp+var_4], ecx
.text$mn:0000E3E3                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000E3E8                 mov     esp, ebp
.text$mn:0000E3EA                 pop     ebp
.text$mn:0000E3EB                 retn
.text$mn:0000E3EB ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000E3EB
.text$mn:0000E3EB _text$mn        ends
.text$mn:0000E3EB
.text$mn:0000E3EC ; ===========================================================================
.text$mn:0000E3EC
.text$mn:0000E3EC ; Segment type: Pure code
.text$mn:0000E3EC ; Segment permissions: Read/Execute
.text$mn:0000E3EC _text$mn        segment para public 'CODE' use32
.text$mn:0000E3EC                 assume cs:_text$mn
.text$mn:0000E3EC                 ;org 0E3ECh
.text$mn:0000E3EC ; COMDAT (pick any)
.text$mn:0000E3EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E3EC
.text$mn:0000E3EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000E3EC
.text$mn:0000E3EC ; Attributes: bp-based frame
.text$mn:0000E3EC
.text$mn:0000E3EC ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000E3EC                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000E3EC ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000E3EC                                         ; DATA XREF: .rdata:00011340o
.text$mn:0000E3EC
.text$mn:0000E3EC var_4           = dword ptr -4
.text$mn:0000E3EC
.text$mn:0000E3EC                 push    ebp
.text$mn:0000E3ED                 mov     ebp, esp
.text$mn:0000E3EF                 push    ecx
.text$mn:0000E3F0                 mov     [ebp+var_4], ecx
.text$mn:0000E3F3                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000E3F8                 mov     esp, ebp
.text$mn:0000E3FA                 pop     ebp
.text$mn:0000E3FB                 retn
.text$mn:0000E3FB ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000E3FB
.text$mn:0000E3FB _text$mn        ends
.text$mn:0000E3FB
.text$mn:0000E3FC ; ===========================================================================
.text$mn:0000E3FC
.text$mn:0000E3FC ; Segment type: Pure code
.text$mn:0000E3FC ; Segment permissions: Read/Execute
.text$mn:0000E3FC _text$mn        segment para public 'CODE' use32
.text$mn:0000E3FC                 assume cs:_text$mn
.text$mn:0000E3FC                 ;org 0E3FCh
.text$mn:0000E3FC ; COMDAT (pick any)
.text$mn:0000E3FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E3FC
.text$mn:0000E3FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000E3FC
.text$mn:0000E3FC ; Attributes: bp-based frame
.text$mn:0000E3FC
.text$mn:0000E3FC ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000E3FC                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000E3FC ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000E3FC                                         ; DATA XREF: .rdata:00011380o
.text$mn:0000E3FC
.text$mn:0000E3FC var_4           = dword ptr -4
.text$mn:0000E3FC
.text$mn:0000E3FC                 push    ebp
.text$mn:0000E3FD                 mov     ebp, esp
.text$mn:0000E3FF                 push    ecx
.text$mn:0000E400                 mov     [ebp+var_4], ecx
.text$mn:0000E403                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000E408                 mov     esp, ebp
.text$mn:0000E40A                 pop     ebp
.text$mn:0000E40B                 retn
.text$mn:0000E40B ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000E40B
.text$mn:0000E40B _text$mn        ends
.text$mn:0000E40B
.text$mn:0000E40C ; ===========================================================================
.text$mn:0000E40C
.text$mn:0000E40C ; Segment type: Pure code
.text$mn:0000E40C ; Segment permissions: Read/Execute
.text$mn:0000E40C _text$mn        segment para public 'CODE' use32
.text$mn:0000E40C                 assume cs:_text$mn
.text$mn:0000E40C                 ;org 0E40Ch
.text$mn:0000E40C ; COMDAT (pick any)
.text$mn:0000E40C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E40C
.text$mn:0000E40C ; =============== S U B R O U T I N E =======================================
.text$mn:0000E40C
.text$mn:0000E40C ; Attributes: bp-based frame
.text$mn:0000E40C
.text$mn:0000E40C ; public: void __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::push_back(struct MatchedCharInserted const &)
.text$mn:0000E40C                 public ?push_back@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXABUMatchedCharInserted@@@Z
.text$mn:0000E40C ?push_back@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXABUMatchedCharInserted@@@Z proc near
.text$mn:0000E40C                                         ; CODE XREF: InsertedMatchedChars::add(MatchedCharInserted)+1Ep
.text$mn:0000E40C
.text$mn:0000E40C var_C           = dword ptr -0Ch
.text$mn:0000E40C var_8           = dword ptr -8
.text$mn:0000E40C var_2           = byte ptr -2
.text$mn:0000E40C var_1           = byte ptr -1
.text$mn:0000E40C arg_0           = dword ptr  8
.text$mn:0000E40C
.text$mn:0000E40C                 push    ebp
.text$mn:0000E40D                 mov     ebp, esp
.text$mn:0000E40F                 sub     esp, 0Ch
.text$mn:0000E412                 mov     [ebp+var_8], ecx
.text$mn:0000E415                 mov     eax, [ebp+arg_0]
.text$mn:0000E418                 push    eax
.text$mn:0000E419                 call    ??$addressof@$$CBUMatchedCharInserted@@@std@@YAPBUMatchedCharInserted@@ABU1@@Z ; std::addressof<MatchedCharInserted const>(MatchedCharInserted const &)
.text$mn:0000E41E                 add     esp, 4
.text$mn:0000E421                 push    eax
.text$mn:0000E422                 mov     ecx, [ebp+var_8]
.text$mn:0000E425                 call    ?_Inside@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBE_NPBUMatchedCharInserted@@@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Inside(MatchedCharInserted const *)
.text$mn:0000E42A                 movzx   ecx, al
.text$mn:0000E42D                 test    ecx, ecx
.text$mn:0000E42F                 jz      short loc_E4AF
.text$mn:0000E431                 mov     edx, [ebp+arg_0]
.text$mn:0000E434                 push    edx
.text$mn:0000E435                 call    ??$addressof@$$CBUMatchedCharInserted@@@std@@YAPBUMatchedCharInserted@@ABU1@@Z ; std::addressof<MatchedCharInserted const>(MatchedCharInserted const &)
.text$mn:0000E43A                 add     esp, 4
.text$mn:0000E43D                 mov     ecx, [ebp+var_8]
.text$mn:0000E440                 sub     eax, [ecx+4]
.text$mn:0000E443                 sar     eax, 3
.text$mn:0000E446                 mov     [ebp+var_C], eax
.text$mn:0000E449                 mov     edx, [ebp+var_8]
.text$mn:0000E44C                 mov     eax, [ebp+var_8]
.text$mn:0000E44F                 mov     ecx, [edx+8]
.text$mn:0000E452                 cmp     ecx, [eax+0Ch]
.text$mn:0000E455                 jnz     short loc_E461
.text$mn:0000E457                 push    1
.text$mn:0000E459                 mov     ecx, [ebp+var_8]
.text$mn:0000E45C                 call    ?_Reserve@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)
.text$mn:0000E461
.text$mn:0000E461 loc_E461:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+49j
.text$mn:0000E461                 mov     edx, [ebp+var_8]
.text$mn:0000E464                 mov     eax, [edx+8]
.text$mn:0000E467                 push    eax
.text$mn:0000E468                 mov     ecx, [ebp+var_8]
.text$mn:0000E46B                 mov     edx, [ecx+8]
.text$mn:0000E46E                 push    edx
.text$mn:0000E46F                 mov     ecx, [ebp+var_8]
.text$mn:0000E472                 call    ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000E477                 mov     eax, [ebp+var_8]
.text$mn:0000E47A                 mov     ecx, [eax+4]
.text$mn:0000E47D                 mov     edx, [ebp+var_C]
.text$mn:0000E480                 lea     eax, [ecx+edx*8]
.text$mn:0000E483                 push    eax             ; int
.text$mn:0000E484                 mov     ecx, [ebp+var_8]
.text$mn:0000E487                 mov     edx, [ecx+8]
.text$mn:0000E48A                 push    edx             ; void *
.text$mn:0000E48B                 lea     eax, [ebp+var_1]
.text$mn:0000E48E                 push    eax
.text$mn:0000E48F                 mov     ecx, [ebp+var_8]
.text$mn:0000E492                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000E497                 mov     ecx, eax
.text$mn:0000E499                 call    ??$construct@UMatchedCharInserted@@AAU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted &>(MatchedCharInserted *,MatchedCharInserted &)
.text$mn:0000E49E                 mov     ecx, [ebp+var_8]
.text$mn:0000E4A1                 mov     edx, [ecx+8]
.text$mn:0000E4A4                 add     edx, 8
.text$mn:0000E4A7                 mov     eax, [ebp+var_8]
.text$mn:0000E4AA                 mov     [eax+8], edx
.text$mn:0000E4AD                 jmp     short loc_E50A
.text$mn:0000E4AF ; ---------------------------------------------------------------------------
.text$mn:0000E4AF
.text$mn:0000E4AF loc_E4AF:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+23j
.text$mn:0000E4AF                 mov     ecx, [ebp+var_8]
.text$mn:0000E4B2                 mov     edx, [ebp+var_8]
.text$mn:0000E4B5                 mov     eax, [ecx+8]
.text$mn:0000E4B8                 cmp     eax, [edx+0Ch]
.text$mn:0000E4BB                 jnz     short loc_E4C7
.text$mn:0000E4BD                 push    1
.text$mn:0000E4BF                 mov     ecx, [ebp+var_8]
.text$mn:0000E4C2                 call    ?_Reserve@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Reserve(uint)
.text$mn:0000E4C7
.text$mn:0000E4C7 loc_E4C7:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+AFj
.text$mn:0000E4C7                 mov     ecx, [ebp+var_8]
.text$mn:0000E4CA                 mov     edx, [ecx+8]
.text$mn:0000E4CD                 push    edx
.text$mn:0000E4CE                 mov     eax, [ebp+var_8]
.text$mn:0000E4D1                 mov     ecx, [eax+8]
.text$mn:0000E4D4                 push    ecx
.text$mn:0000E4D5                 mov     ecx, [ebp+var_8]
.text$mn:0000E4D8                 call    ?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Orphan_range(MatchedCharInserted *,MatchedCharInserted *)
.text$mn:0000E4DD                 mov     edx, [ebp+arg_0]
.text$mn:0000E4E0                 push    edx             ; int
.text$mn:0000E4E1                 mov     eax, [ebp+var_8]
.text$mn:0000E4E4                 mov     ecx, [eax+8]
.text$mn:0000E4E7                 push    ecx             ; void *
.text$mn:0000E4E8                 lea     edx, [ebp+var_2]
.text$mn:0000E4EB                 push    edx
.text$mn:0000E4EC                 mov     ecx, [ebp+var_8]
.text$mn:0000E4EF                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<MatchedCharInserted,std::allocator<MatchedCharInserted>>>::_Getal(void)
.text$mn:0000E4F4                 mov     ecx, eax
.text$mn:0000E4F6                 call    ??$construct@UMatchedCharInserted@@ABU1@@?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXPAUMatchedCharInserted@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<MatchedCharInserted>>::construct<MatchedCharInserted,MatchedCharInserted const &>(MatchedCharInserted *,MatchedCharInserted const &)
.text$mn:0000E4FB                 mov     eax, [ebp+var_8]
.text$mn:0000E4FE                 mov     ecx, [eax+8]
.text$mn:0000E501                 add     ecx, 8
.text$mn:0000E504                 mov     edx, [ebp+var_8]
.text$mn:0000E507                 mov     [edx+8], ecx
.text$mn:0000E50A
.text$mn:0000E50A loc_E50A:                               ; CODE XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::push_back(MatchedCharInserted const &)+A1j
.text$mn:0000E50A                 mov     esp, ebp
.text$mn:0000E50C                 pop     ebp
.text$mn:0000E50D                 retn    4
.text$mn:0000E50D ?push_back@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAEXABUMatchedCharInserted@@@Z endp
.text$mn:0000E50D
.text$mn:0000E50D _text$mn        ends
.text$mn:0000E50D
.text$mn:0000E510 ; ===========================================================================
.text$mn:0000E510
.text$mn:0000E510 ; Segment type: Pure code
.text$mn:0000E510 ; Segment permissions: Read/Execute
.text$mn:0000E510 _text$mn        segment para public 'CODE' use32
.text$mn:0000E510                 assume cs:_text$mn
.text$mn:0000E510                 ;org 0E510h
.text$mn:0000E510 ; COMDAT (pick any)
.text$mn:0000E510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E510
.text$mn:0000E510 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E510
.text$mn:0000E510 ; Attributes: bp-based frame
.text$mn:0000E510
.text$mn:0000E510 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000E510                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000E510 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000E510                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+5EFp
.text$mn:0000E510                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+20Ep
.text$mn:0000E510
.text$mn:0000E510 var_C           = dword ptr -0Ch
.text$mn:0000E510 var_8           = dword ptr -8
.text$mn:0000E510 var_2           = byte ptr -2
.text$mn:0000E510 var_1           = byte ptr -1
.text$mn:0000E510 arg_0           = dword ptr  8
.text$mn:0000E510
.text$mn:0000E510                 push    ebp
.text$mn:0000E511                 mov     ebp, esp
.text$mn:0000E513                 sub     esp, 0Ch
.text$mn:0000E516                 mov     [ebp+var_8], ecx
.text$mn:0000E519                 mov     eax, [ebp+arg_0]
.text$mn:0000E51C                 push    eax
.text$mn:0000E51D                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E522                 add     esp, 4
.text$mn:0000E525                 push    eax
.text$mn:0000E526                 mov     ecx, [ebp+var_8]
.text$mn:0000E529                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:0000E52E                 movzx   ecx, al
.text$mn:0000E531                 test    ecx, ecx
.text$mn:0000E533                 jz      loc_E5C3
.text$mn:0000E539                 mov     edx, [ebp+arg_0]
.text$mn:0000E53C                 push    edx
.text$mn:0000E53D                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E542                 add     esp, 4
.text$mn:0000E545                 mov     ecx, [ebp+var_8]
.text$mn:0000E548                 sub     eax, [ecx+4]
.text$mn:0000E54B                 cdq
.text$mn:0000E54C                 mov     ecx, 1Ch
.text$mn:0000E551                 idiv    ecx
.text$mn:0000E553                 mov     [ebp+var_C], eax
.text$mn:0000E556                 mov     edx, [ebp+var_8]
.text$mn:0000E559                 mov     eax, [ebp+var_8]
.text$mn:0000E55C                 mov     ecx, [edx+8]
.text$mn:0000E55F                 cmp     ecx, [eax+0Ch]
.text$mn:0000E562                 jnz     short loc_E56E
.text$mn:0000E564                 push    1
.text$mn:0000E566                 mov     ecx, [ebp+var_8]
.text$mn:0000E569                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E56E
.text$mn:0000E56E loc_E56E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+52j
.text$mn:0000E56E                 mov     edx, [ebp+var_8]
.text$mn:0000E571                 mov     eax, [edx+8]
.text$mn:0000E574                 push    eax
.text$mn:0000E575                 mov     ecx, [ebp+var_8]
.text$mn:0000E578                 mov     edx, [ecx+8]
.text$mn:0000E57B                 push    edx
.text$mn:0000E57C                 mov     ecx, [ebp+var_8]
.text$mn:0000E57F                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E584                 imul    eax, [ebp+var_C], 1Ch
.text$mn:0000E588                 mov     ecx, [ebp+var_8]
.text$mn:0000E58B                 add     eax, [ecx+4]
.text$mn:0000E58E                 push    eax
.text$mn:0000E58F                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E594                 add     esp, 4
.text$mn:0000E597                 push    eax             ; int
.text$mn:0000E598                 mov     edx, [ebp+var_8]
.text$mn:0000E59B                 mov     eax, [edx+8]
.text$mn:0000E59E                 push    eax             ; void *
.text$mn:0000E59F                 lea     ecx, [ebp+var_1]
.text$mn:0000E5A2                 push    ecx
.text$mn:0000E5A3                 mov     ecx, [ebp+var_8]
.text$mn:0000E5A6                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E5AB                 mov     ecx, eax
.text$mn:0000E5AD                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000E5B2                 mov     edx, [ebp+var_8]
.text$mn:0000E5B5                 mov     eax, [edx+8]
.text$mn:0000E5B8                 add     eax, 1Ch
.text$mn:0000E5BB                 mov     ecx, [ebp+var_8]
.text$mn:0000E5BE                 mov     [ecx+8], eax
.text$mn:0000E5C1                 jmp     short loc_E627
.text$mn:0000E5C3 ; ---------------------------------------------------------------------------
.text$mn:0000E5C3
.text$mn:0000E5C3 loc_E5C3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+23j
.text$mn:0000E5C3                 mov     edx, [ebp+var_8]
.text$mn:0000E5C6                 mov     eax, [ebp+var_8]
.text$mn:0000E5C9                 mov     ecx, [edx+8]
.text$mn:0000E5CC                 cmp     ecx, [eax+0Ch]
.text$mn:0000E5CF                 jnz     short loc_E5DB
.text$mn:0000E5D1                 push    1
.text$mn:0000E5D3                 mov     ecx, [ebp+var_8]
.text$mn:0000E5D6                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E5DB
.text$mn:0000E5DB loc_E5DB:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+BFj
.text$mn:0000E5DB                 mov     edx, [ebp+var_8]
.text$mn:0000E5DE                 mov     eax, [edx+8]
.text$mn:0000E5E1                 push    eax
.text$mn:0000E5E2                 mov     ecx, [ebp+var_8]
.text$mn:0000E5E5                 mov     edx, [ecx+8]
.text$mn:0000E5E8                 push    edx
.text$mn:0000E5E9                 mov     ecx, [ebp+var_8]
.text$mn:0000E5EC                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E5F1                 mov     eax, [ebp+arg_0]
.text$mn:0000E5F4                 push    eax
.text$mn:0000E5F5                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E5FA                 add     esp, 4
.text$mn:0000E5FD                 push    eax             ; int
.text$mn:0000E5FE                 mov     ecx, [ebp+var_8]
.text$mn:0000E601                 mov     edx, [ecx+8]
.text$mn:0000E604                 push    edx             ; void *
.text$mn:0000E605                 lea     eax, [ebp+var_2]
.text$mn:0000E608                 push    eax
.text$mn:0000E609                 mov     ecx, [ebp+var_8]
.text$mn:0000E60C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E611                 mov     ecx, eax
.text$mn:0000E613                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000E618                 mov     ecx, [ebp+var_8]
.text$mn:0000E61B                 mov     edx, [ecx+8]
.text$mn:0000E61E                 add     edx, 1Ch
.text$mn:0000E621                 mov     eax, [ebp+var_8]
.text$mn:0000E624                 mov     [eax+8], edx
.text$mn:0000E627
.text$mn:0000E627 loc_E627:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+B1j
.text$mn:0000E627                 mov     esp, ebp
.text$mn:0000E629                 pop     ebp
.text$mn:0000E62A                 retn    4
.text$mn:0000E62A ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000E62A
.text$mn:0000E62A ; ---------------------------------------------------------------------------
.text$mn:0000E62D                 align 10h
.text$mn:0000E62D _text$mn        ends
.text$mn:0000E62D
.text$mn:0000E630 ; ===========================================================================
.text$mn:0000E630
.text$mn:0000E630 ; Segment type: Pure code
.text$mn:0000E630 ; Segment permissions: Read/Execute
.text$mn:0000E630 _text$mn        segment para public 'CODE' use32
.text$mn:0000E630                 assume cs:_text$mn
.text$mn:0000E630                 ;org 0E630h
.text$mn:0000E630 ; COMDAT (pick any)
.text$mn:0000E630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E630
.text$mn:0000E630 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E630
.text$mn:0000E630 ; Attributes: bp-based frame
.text$mn:0000E630
.text$mn:0000E630 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000E630                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000E630 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000E630                                         ; CODE XREF: AutoCompletion::showApiAndWordComplete(void)+21Fp
.text$mn:0000E630
.text$mn:0000E630 var_C           = dword ptr -0Ch
.text$mn:0000E630 var_8           = dword ptr -8
.text$mn:0000E630 var_2           = byte ptr -2
.text$mn:0000E630 var_1           = byte ptr -1
.text$mn:0000E630 arg_0           = dword ptr  8
.text$mn:0000E630
.text$mn:0000E630                 push    ebp
.text$mn:0000E631                 mov     ebp, esp
.text$mn:0000E633                 sub     esp, 0Ch
.text$mn:0000E636                 mov     [ebp+var_8], ecx
.text$mn:0000E639                 mov     eax, [ebp+arg_0]
.text$mn:0000E63C                 push    eax
.text$mn:0000E63D                 call    ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000E642                 add     esp, 4
.text$mn:0000E645                 push    eax
.text$mn:0000E646                 mov     ecx, [ebp+var_8]
.text$mn:0000E649                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:0000E64E                 movzx   ecx, al
.text$mn:0000E651                 test    ecx, ecx
.text$mn:0000E653                 jz      loc_E6DA
.text$mn:0000E659                 mov     edx, [ebp+arg_0]
.text$mn:0000E65C                 push    edx
.text$mn:0000E65D                 call    ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000E662                 add     esp, 4
.text$mn:0000E665                 mov     ecx, [ebp+var_8]
.text$mn:0000E668                 sub     eax, [ecx+4]
.text$mn:0000E66B                 cdq
.text$mn:0000E66C                 mov     ecx, 1Ch
.text$mn:0000E671                 idiv    ecx
.text$mn:0000E673                 mov     [ebp+var_C], eax
.text$mn:0000E676                 mov     edx, [ebp+var_8]
.text$mn:0000E679                 mov     eax, [ebp+var_8]
.text$mn:0000E67C                 mov     ecx, [edx+8]
.text$mn:0000E67F                 cmp     ecx, [eax+0Ch]
.text$mn:0000E682                 jnz     short loc_E68E
.text$mn:0000E684                 push    1
.text$mn:0000E686                 mov     ecx, [ebp+var_8]
.text$mn:0000E689                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E68E
.text$mn:0000E68E loc_E68E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+52j
.text$mn:0000E68E                 mov     edx, [ebp+var_8]
.text$mn:0000E691                 mov     eax, [edx+8]
.text$mn:0000E694                 push    eax
.text$mn:0000E695                 mov     ecx, [ebp+var_8]
.text$mn:0000E698                 mov     edx, [ecx+8]
.text$mn:0000E69B                 push    edx
.text$mn:0000E69C                 mov     ecx, [ebp+var_8]
.text$mn:0000E69F                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E6A4                 imul    eax, [ebp+var_C], 1Ch
.text$mn:0000E6A8                 mov     ecx, [ebp+var_8]
.text$mn:0000E6AB                 add     eax, [ecx+4]
.text$mn:0000E6AE                 push    eax             ; int
.text$mn:0000E6AF                 mov     edx, [ebp+var_8]
.text$mn:0000E6B2                 mov     eax, [edx+8]
.text$mn:0000E6B5                 push    eax             ; void *
.text$mn:0000E6B6                 lea     ecx, [ebp+var_1]
.text$mn:0000E6B9                 push    ecx
.text$mn:0000E6BA                 mov     ecx, [ebp+var_8]
.text$mn:0000E6BD                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E6C2                 mov     ecx, eax
.text$mn:0000E6C4                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E6C9                 mov     edx, [ebp+var_8]
.text$mn:0000E6CC                 mov     eax, [edx+8]
.text$mn:0000E6CF                 add     eax, 1Ch
.text$mn:0000E6D2                 mov     ecx, [ebp+var_8]
.text$mn:0000E6D5                 mov     [ecx+8], eax
.text$mn:0000E6D8                 jmp     short loc_E735
.text$mn:0000E6DA ; ---------------------------------------------------------------------------
.text$mn:0000E6DA
.text$mn:0000E6DA loc_E6DA:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+23j
.text$mn:0000E6DA                 mov     edx, [ebp+var_8]
.text$mn:0000E6DD                 mov     eax, [ebp+var_8]
.text$mn:0000E6E0                 mov     ecx, [edx+8]
.text$mn:0000E6E3                 cmp     ecx, [eax+0Ch]
.text$mn:0000E6E6                 jnz     short loc_E6F2
.text$mn:0000E6E8                 push    1
.text$mn:0000E6EA                 mov     ecx, [ebp+var_8]
.text$mn:0000E6ED                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E6F2
.text$mn:0000E6F2 loc_E6F2:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+B6j
.text$mn:0000E6F2                 mov     edx, [ebp+var_8]
.text$mn:0000E6F5                 mov     eax, [edx+8]
.text$mn:0000E6F8                 push    eax
.text$mn:0000E6F9                 mov     ecx, [ebp+var_8]
.text$mn:0000E6FC                 mov     edx, [ecx+8]
.text$mn:0000E6FF                 push    edx
.text$mn:0000E700                 mov     ecx, [ebp+var_8]
.text$mn:0000E703                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E708                 mov     eax, [ebp+arg_0]
.text$mn:0000E70B                 push    eax             ; int
.text$mn:0000E70C                 mov     ecx, [ebp+var_8]
.text$mn:0000E70F                 mov     edx, [ecx+8]
.text$mn:0000E712                 push    edx             ; void *
.text$mn:0000E713                 lea     eax, [ebp+var_2]
.text$mn:0000E716                 push    eax
.text$mn:0000E717                 mov     ecx, [ebp+var_8]
.text$mn:0000E71A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E71F                 mov     ecx, eax
.text$mn:0000E721                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000E726                 mov     ecx, [ebp+var_8]
.text$mn:0000E729                 mov     edx, [ecx+8]
.text$mn:0000E72C                 add     edx, 1Ch
.text$mn:0000E72F                 mov     eax, [ebp+var_8]
.text$mn:0000E732                 mov     [eax+8], edx
.text$mn:0000E735
.text$mn:0000E735 loc_E735:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+A8j
.text$mn:0000E735                 mov     esp, ebp
.text$mn:0000E737                 pop     ebp
.text$mn:0000E738                 retn    4
.text$mn:0000E738 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000E738
.text$mn:0000E738 ; ---------------------------------------------------------------------------
.text$mn:0000E73B                 align 4
.text$mn:0000E73B _text$mn        ends
.text$mn:0000E73B
.text$mn:0000E73C ; ===========================================================================
.text$mn:0000E73C
.text$mn:0000E73C ; Segment type: Pure code
.text$mn:0000E73C ; Segment permissions: Read/Execute
.text$mn:0000E73C _text$mn        segment para public 'CODE' use32
.text$mn:0000E73C                 assume cs:_text$mn
.text$mn:0000E73C                 ;org 0E73Ch
.text$mn:0000E73C ; COMDAT (pick any)
.text$mn:0000E73C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E73C
.text$mn:0000E73C ; =============== S U B R O U T I N E =======================================
.text$mn:0000E73C
.text$mn:0000E73C ; Attributes: bp-based frame
.text$mn:0000E73C
.text$mn:0000E73C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000E73C                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000E73C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000E73C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000E73C
.text$mn:0000E73C var_10          = dword ptr -10h
.text$mn:0000E73C var_C           = dword ptr -0Ch
.text$mn:0000E73C var_8           = dword ptr -8
.text$mn:0000E73C var_4           = dword ptr -4
.text$mn:0000E73C arg_0           = dword ptr  8
.text$mn:0000E73C arg_4           = dword ptr  0Ch
.text$mn:0000E73C arg_8           = dword ptr  10h
.text$mn:0000E73C arg_C           = dword ptr  14h
.text$mn:0000E73C arg_10          = dword ptr  18h
.text$mn:0000E73C
.text$mn:0000E73C                 push    ebp
.text$mn:0000E73D                 mov     ebp, esp
.text$mn:0000E73F                 sub     esp, 10h
.text$mn:0000E742                 mov     [ebp+var_4], ecx
.text$mn:0000E745                 mov     eax, [ebp+var_4]
.text$mn:0000E748                 mov     ecx, [eax+14h]
.text$mn:0000E74B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000E74E                 jb      short loc_E75D
.text$mn:0000E750                 mov     ecx, [ebp+arg_8]
.text$mn:0000E753                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000E758                 cmp     eax, [ebp+arg_C]
.text$mn:0000E75B                 jnb     short loc_E765
.text$mn:0000E75D
.text$mn:0000E75D loc_E75D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:0000E75D                 mov     ecx, [ebp+var_4]
.text$mn:0000E760                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000E765
.text$mn:0000E765 loc_E765:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:0000E765                 mov     edx, [ebp+var_4]
.text$mn:0000E768                 mov     eax, [edx+14h]
.text$mn:0000E76B                 sub     eax, [ebp+arg_0]
.text$mn:0000E76E                 cmp     eax, [ebp+arg_4]
.text$mn:0000E771                 jnb     short loc_E77F
.text$mn:0000E773                 mov     ecx, [ebp+var_4]
.text$mn:0000E776                 mov     edx, [ecx+14h]
.text$mn:0000E779                 sub     edx, [ebp+arg_0]
.text$mn:0000E77C                 mov     [ebp+arg_4], edx
.text$mn:0000E77F
.text$mn:0000E77F loc_E77F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:0000E77F                 mov     ecx, [ebp+arg_8]
.text$mn:0000E782                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000E787                 sub     eax, [ebp+arg_C]
.text$mn:0000E78A                 mov     [ebp+var_10], eax
.text$mn:0000E78D                 mov     eax, [ebp+var_10]
.text$mn:0000E790                 cmp     eax, [ebp+arg_10]
.text$mn:0000E793                 jnb     short loc_E79B
.text$mn:0000E795                 mov     ecx, [ebp+var_10]
.text$mn:0000E798                 mov     [ebp+arg_10], ecx
.text$mn:0000E79B
.text$mn:0000E79B loc_E79B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:0000E79B                 or      edx, 0FFFFFFFFh
.text$mn:0000E79E                 sub     edx, [ebp+arg_10]
.text$mn:0000E7A1                 mov     eax, [ebp+var_4]
.text$mn:0000E7A4                 mov     ecx, [eax+14h]
.text$mn:0000E7A7                 sub     ecx, [ebp+arg_4]
.text$mn:0000E7AA                 cmp     edx, ecx
.text$mn:0000E7AC                 ja      short loc_E7B6
.text$mn:0000E7AE                 mov     ecx, [ebp+var_4]
.text$mn:0000E7B1                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000E7B6
.text$mn:0000E7B6 loc_E7B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+70j
.text$mn:0000E7B6                 mov     edx, [ebp+var_4]
.text$mn:0000E7B9                 mov     eax, [edx+14h]
.text$mn:0000E7BC                 sub     eax, [ebp+arg_4]
.text$mn:0000E7BF                 sub     eax, [ebp+arg_0]
.text$mn:0000E7C2                 mov     [ebp+var_8], eax
.text$mn:0000E7C5                 mov     ecx, [ebp+var_4]
.text$mn:0000E7C8                 mov     edx, [ecx+14h]
.text$mn:0000E7CB                 add     edx, [ebp+arg_10]
.text$mn:0000E7CE                 sub     edx, [ebp+arg_4]
.text$mn:0000E7D1                 mov     [ebp+var_C], edx
.text$mn:0000E7D4                 mov     eax, [ebp+var_4]
.text$mn:0000E7D7                 mov     ecx, [eax+14h]
.text$mn:0000E7DA                 cmp     ecx, [ebp+var_C]
.text$mn:0000E7DD                 jnb     short loc_E7ED
.text$mn:0000E7DF                 push    0
.text$mn:0000E7E1                 mov     edx, [ebp+var_C]
.text$mn:0000E7E4                 push    edx
.text$mn:0000E7E5                 mov     ecx, [ebp+var_4]
.text$mn:0000E7E8                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000E7ED
.text$mn:0000E7ED loc_E7ED:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A1j
.text$mn:0000E7ED                 mov     eax, [ebp+var_4]
.text$mn:0000E7F0                 cmp     eax, [ebp+arg_8]
.text$mn:0000E7F3                 jz      short loc_E85A
.text$mn:0000E7F5                 mov     ecx, [ebp+var_8]
.text$mn:0000E7F8                 push    ecx             ; int
.text$mn:0000E7F9                 mov     ecx, [ebp+var_4]
.text$mn:0000E7FC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E801                 mov     edx, [ebp+arg_0]
.text$mn:0000E804                 lea     eax, [eax+edx*2]
.text$mn:0000E807                 mov     ecx, [ebp+arg_4]
.text$mn:0000E80A                 lea     edx, [eax+ecx*2]
.text$mn:0000E80D                 push    edx             ; Src
.text$mn:0000E80E                 mov     ecx, [ebp+var_4]
.text$mn:0000E811                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E816                 mov     ecx, [ebp+arg_0]
.text$mn:0000E819                 lea     edx, [eax+ecx*2]
.text$mn:0000E81C                 mov     eax, [ebp+arg_10]
.text$mn:0000E81F                 lea     ecx, [edx+eax*2]
.text$mn:0000E822                 push    ecx             ; Dst
.text$mn:0000E823                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E828                 add     esp, 0Ch
.text$mn:0000E82B                 mov     edx, [ebp+arg_10]
.text$mn:0000E82E                 push    edx             ; int
.text$mn:0000E82F                 mov     ecx, [ebp+arg_8]
.text$mn:0000E832                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E837                 mov     ecx, [ebp+arg_C]
.text$mn:0000E83A                 lea     edx, [eax+ecx*2]
.text$mn:0000E83D                 push    edx             ; Src
.text$mn:0000E83E                 mov     ecx, [ebp+var_4]
.text$mn:0000E841                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E846                 mov     ecx, [ebp+arg_0]
.text$mn:0000E849                 lea     edx, [eax+ecx*2]
.text$mn:0000E84C                 push    edx             ; Dst
.text$mn:0000E84D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000E852                 add     esp, 0Ch
.text$mn:0000E855                 jmp     loc_EA43
.text$mn:0000E85A ; ---------------------------------------------------------------------------
.text$mn:0000E85A
.text$mn:0000E85A loc_E85A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+B7j
.text$mn:0000E85A                 mov     eax, [ebp+arg_10]
.text$mn:0000E85D                 cmp     eax, [ebp+arg_4]
.text$mn:0000E860                 ja      short loc_E8C7
.text$mn:0000E862                 mov     ecx, [ebp+arg_10]
.text$mn:0000E865                 push    ecx             ; int
.text$mn:0000E866                 mov     ecx, [ebp+var_4]
.text$mn:0000E869                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E86E                 mov     edx, [ebp+arg_C]
.text$mn:0000E871                 lea     eax, [eax+edx*2]
.text$mn:0000E874                 push    eax             ; Src
.text$mn:0000E875                 mov     ecx, [ebp+var_4]
.text$mn:0000E878                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E87D                 mov     ecx, [ebp+arg_0]
.text$mn:0000E880                 lea     edx, [eax+ecx*2]
.text$mn:0000E883                 push    edx             ; Dst
.text$mn:0000E884                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E889                 add     esp, 0Ch
.text$mn:0000E88C                 mov     eax, [ebp+var_8]
.text$mn:0000E88F                 push    eax             ; int
.text$mn:0000E890                 mov     ecx, [ebp+var_4]
.text$mn:0000E893                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E898                 mov     ecx, [ebp+arg_0]
.text$mn:0000E89B                 lea     edx, [eax+ecx*2]
.text$mn:0000E89E                 mov     eax, [ebp+arg_4]
.text$mn:0000E8A1                 lea     ecx, [edx+eax*2]
.text$mn:0000E8A4                 push    ecx             ; Src
.text$mn:0000E8A5                 mov     ecx, [ebp+var_4]
.text$mn:0000E8A8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8AD                 mov     edx, [ebp+arg_0]
.text$mn:0000E8B0                 lea     eax, [eax+edx*2]
.text$mn:0000E8B3                 mov     ecx, [ebp+arg_10]
.text$mn:0000E8B6                 lea     edx, [eax+ecx*2]
.text$mn:0000E8B9                 push    edx             ; Dst
.text$mn:0000E8BA                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E8BF                 add     esp, 0Ch
.text$mn:0000E8C2                 jmp     loc_EA43
.text$mn:0000E8C7 ; ---------------------------------------------------------------------------
.text$mn:0000E8C7
.text$mn:0000E8C7 loc_E8C7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+124j
.text$mn:0000E8C7                 mov     eax, [ebp+arg_C]
.text$mn:0000E8CA                 cmp     eax, [ebp+arg_0]
.text$mn:0000E8CD                 ja      short loc_E934
.text$mn:0000E8CF                 mov     ecx, [ebp+var_8]
.text$mn:0000E8D2                 push    ecx             ; int
.text$mn:0000E8D3                 mov     ecx, [ebp+var_4]
.text$mn:0000E8D6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8DB                 mov     edx, [ebp+arg_0]
.text$mn:0000E8DE                 lea     eax, [eax+edx*2]
.text$mn:0000E8E1                 mov     ecx, [ebp+arg_4]
.text$mn:0000E8E4                 lea     edx, [eax+ecx*2]
.text$mn:0000E8E7                 push    edx             ; Src
.text$mn:0000E8E8                 mov     ecx, [ebp+var_4]
.text$mn:0000E8EB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8F0                 mov     ecx, [ebp+arg_0]
.text$mn:0000E8F3                 lea     edx, [eax+ecx*2]
.text$mn:0000E8F6                 mov     eax, [ebp+arg_10]
.text$mn:0000E8F9                 lea     ecx, [edx+eax*2]
.text$mn:0000E8FC                 push    ecx             ; Dst
.text$mn:0000E8FD                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E902                 add     esp, 0Ch
.text$mn:0000E905                 mov     edx, [ebp+arg_10]
.text$mn:0000E908                 push    edx             ; int
.text$mn:0000E909                 mov     ecx, [ebp+var_4]
.text$mn:0000E90C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E911                 mov     ecx, [ebp+arg_C]
.text$mn:0000E914                 lea     edx, [eax+ecx*2]
.text$mn:0000E917                 push    edx             ; Src
.text$mn:0000E918                 mov     ecx, [ebp+var_4]
.text$mn:0000E91B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E920                 mov     ecx, [ebp+arg_0]
.text$mn:0000E923                 lea     edx, [eax+ecx*2]
.text$mn:0000E926                 push    edx             ; Dst
.text$mn:0000E927                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E92C                 add     esp, 0Ch
.text$mn:0000E92F                 jmp     loc_EA43
.text$mn:0000E934 ; ---------------------------------------------------------------------------
.text$mn:0000E934
.text$mn:0000E934 loc_E934:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+191j
.text$mn:0000E934                 mov     eax, [ebp+arg_0]
.text$mn:0000E937                 add     eax, [ebp+arg_4]
.text$mn:0000E93A                 cmp     eax, [ebp+arg_C]
.text$mn:0000E93D                 ja      short loc_E9AA
.text$mn:0000E93F                 mov     ecx, [ebp+var_8]
.text$mn:0000E942                 push    ecx             ; int
.text$mn:0000E943                 mov     ecx, [ebp+var_4]
.text$mn:0000E946                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E94B                 mov     edx, [ebp+arg_0]
.text$mn:0000E94E                 lea     eax, [eax+edx*2]
.text$mn:0000E951                 mov     ecx, [ebp+arg_4]
.text$mn:0000E954                 lea     edx, [eax+ecx*2]
.text$mn:0000E957                 push    edx             ; Src
.text$mn:0000E958                 mov     ecx, [ebp+var_4]
.text$mn:0000E95B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E960                 mov     ecx, [ebp+arg_0]
.text$mn:0000E963                 lea     edx, [eax+ecx*2]
.text$mn:0000E966                 mov     eax, [ebp+arg_10]
.text$mn:0000E969                 lea     ecx, [edx+eax*2]
.text$mn:0000E96C                 push    ecx             ; Dst
.text$mn:0000E96D                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E972                 add     esp, 0Ch
.text$mn:0000E975                 mov     edx, [ebp+arg_10]
.text$mn:0000E978                 push    edx             ; int
.text$mn:0000E979                 mov     ecx, [ebp+var_4]
.text$mn:0000E97C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E981                 mov     ecx, [ebp+arg_C]
.text$mn:0000E984                 add     ecx, [ebp+arg_10]
.text$mn:0000E987                 sub     ecx, [ebp+arg_4]
.text$mn:0000E98A                 lea     edx, [eax+ecx*2]
.text$mn:0000E98D                 push    edx             ; Src
.text$mn:0000E98E                 mov     ecx, [ebp+var_4]
.text$mn:0000E991                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E996                 mov     ecx, [ebp+arg_0]
.text$mn:0000E999                 lea     edx, [eax+ecx*2]
.text$mn:0000E99C                 push    edx             ; Dst
.text$mn:0000E99D                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E9A2                 add     esp, 0Ch
.text$mn:0000E9A5                 jmp     loc_EA43
.text$mn:0000E9AA ; ---------------------------------------------------------------------------
.text$mn:0000E9AA
.text$mn:0000E9AA loc_E9AA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+201j
.text$mn:0000E9AA                 mov     eax, [ebp+arg_4]
.text$mn:0000E9AD                 push    eax             ; int
.text$mn:0000E9AE                 mov     ecx, [ebp+var_4]
.text$mn:0000E9B1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E9B6                 mov     ecx, [ebp+arg_C]
.text$mn:0000E9B9                 lea     edx, [eax+ecx*2]
.text$mn:0000E9BC                 push    edx             ; Src
.text$mn:0000E9BD                 mov     ecx, [ebp+var_4]
.text$mn:0000E9C0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E9C5                 mov     ecx, [ebp+arg_0]
.text$mn:0000E9C8                 lea     edx, [eax+ecx*2]
.text$mn:0000E9CB                 push    edx             ; Dst
.text$mn:0000E9CC                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E9D1                 add     esp, 0Ch
.text$mn:0000E9D4                 mov     eax, [ebp+var_8]
.text$mn:0000E9D7                 push    eax             ; int
.text$mn:0000E9D8                 mov     ecx, [ebp+var_4]
.text$mn:0000E9DB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E9E0                 mov     ecx, [ebp+arg_0]
.text$mn:0000E9E3                 lea     edx, [eax+ecx*2]
.text$mn:0000E9E6                 mov     eax, [ebp+arg_4]
.text$mn:0000E9E9                 lea     ecx, [edx+eax*2]
.text$mn:0000E9EC                 push    ecx             ; Src
.text$mn:0000E9ED                 mov     ecx, [ebp+var_4]
.text$mn:0000E9F0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E9F5                 mov     edx, [ebp+arg_0]
.text$mn:0000E9F8                 lea     eax, [eax+edx*2]
.text$mn:0000E9FB                 mov     ecx, [ebp+arg_10]
.text$mn:0000E9FE                 lea     edx, [eax+ecx*2]
.text$mn:0000EA01                 push    edx             ; Dst
.text$mn:0000EA02                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000EA07                 add     esp, 0Ch
.text$mn:0000EA0A                 mov     eax, [ebp+arg_10]
.text$mn:0000EA0D                 sub     eax, [ebp+arg_4]
.text$mn:0000EA10                 push    eax             ; int
.text$mn:0000EA11                 mov     ecx, [ebp+var_4]
.text$mn:0000EA14                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EA19                 mov     ecx, [ebp+arg_C]
.text$mn:0000EA1C                 lea     edx, [eax+ecx*2]
.text$mn:0000EA1F                 mov     eax, [ebp+arg_10]
.text$mn:0000EA22                 lea     ecx, [edx+eax*2]
.text$mn:0000EA25                 push    ecx             ; Src
.text$mn:0000EA26                 mov     ecx, [ebp+var_4]
.text$mn:0000EA29                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EA2E                 mov     edx, [ebp+arg_0]
.text$mn:0000EA31                 lea     eax, [eax+edx*2]
.text$mn:0000EA34                 mov     ecx, [ebp+arg_4]
.text$mn:0000EA37                 lea     edx, [eax+ecx*2]
.text$mn:0000EA3A                 push    edx             ; Dst
.text$mn:0000EA3B                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000EA40                 add     esp, 0Ch
.text$mn:0000EA43
.text$mn:0000EA43 loc_EA43:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+119j
.text$mn:0000EA43                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+186j ...
.text$mn:0000EA43                 mov     eax, [ebp+var_C]
.text$mn:0000EA46                 push    eax
.text$mn:0000EA47                 mov     ecx, [ebp+var_4]
.text$mn:0000EA4A                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000EA4F                 mov     eax, [ebp+var_4]
.text$mn:0000EA52                 mov     esp, ebp
.text$mn:0000EA54                 pop     ebp
.text$mn:0000EA55                 retn    14h
.text$mn:0000EA55 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000EA55
.text$mn:0000EA55 _text$mn        ends
.text$mn:0000EA55
.text$mn:0000EA58 ; ===========================================================================
.text$mn:0000EA58
.text$mn:0000EA58 ; Segment type: Pure code
.text$mn:0000EA58 ; Segment permissions: Read/Execute
.text$mn:0000EA58 _text$mn        segment para public 'CODE' use32
.text$mn:0000EA58                 assume cs:_text$mn
.text$mn:0000EA58                 ;org 0EA58h
.text$mn:0000EA58 ; COMDAT (pick any)
.text$mn:0000EA58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EA58
.text$mn:0000EA58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EA58
.text$mn:0000EA58 ; Attributes: bp-based frame
.text$mn:0000EA58
.text$mn:0000EA58 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:0000EA58                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:0000EA58 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:0000EA58                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:0000EA58
.text$mn:0000EA58 var_C           = dword ptr -0Ch
.text$mn:0000EA58 var_8           = dword ptr -8
.text$mn:0000EA58 var_4           = dword ptr -4
.text$mn:0000EA58 arg_0           = dword ptr  8
.text$mn:0000EA58 arg_4           = dword ptr  0Ch
.text$mn:0000EA58 Src             = dword ptr  10h
.text$mn:0000EA58 arg_C           = dword ptr  14h
.text$mn:0000EA58
.text$mn:0000EA58                 push    ebp
.text$mn:0000EA59                 mov     ebp, esp
.text$mn:0000EA5B                 sub     esp, 0Ch
.text$mn:0000EA5E                 mov     [ebp+var_4], ecx
.text$mn:0000EA61                 cmp     [ebp+arg_C], 0
.text$mn:0000EA65                 jz      short loc_EA7D
.text$mn:0000EA67                 push    5A9h            ; unsigned int
.text$mn:0000EA6C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000EA71                 mov     eax, [ebp+Src]
.text$mn:0000EA74                 push    eax             ; int
.text$mn:0000EA75                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000EA7A                 add     esp, 0Ch
.text$mn:0000EA7D
.text$mn:0000EA7D loc_EA7D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000EA7D                 mov     ecx, [ebp+Src]
.text$mn:0000EA80                 push    ecx
.text$mn:0000EA81                 mov     ecx, [ebp+var_4]
.text$mn:0000EA84                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000EA89                 movzx   edx, al
.text$mn:0000EA8C                 test    edx, edx
.text$mn:0000EA8E                 jz      short loc_EABD
.text$mn:0000EA90                 mov     eax, [ebp+arg_C]
.text$mn:0000EA93                 push    eax
.text$mn:0000EA94                 mov     ecx, [ebp+var_4]
.text$mn:0000EA97                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EA9C                 mov     ecx, [ebp+Src]
.text$mn:0000EA9F                 sub     ecx, eax
.text$mn:0000EAA1                 sar     ecx, 1
.text$mn:0000EAA3                 push    ecx
.text$mn:0000EAA4                 mov     edx, [ebp+var_4]
.text$mn:0000EAA7                 push    edx
.text$mn:0000EAA8                 mov     eax, [ebp+arg_4]
.text$mn:0000EAAB                 push    eax
.text$mn:0000EAAC                 mov     ecx, [ebp+arg_0]
.text$mn:0000EAAF                 push    ecx
.text$mn:0000EAB0                 mov     ecx, [ebp+var_4]
.text$mn:0000EAB3                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000EAB8                 jmp     loc_EBF2
.text$mn:0000EABD ; ---------------------------------------------------------------------------
.text$mn:0000EABD
.text$mn:0000EABD loc_EABD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000EABD                 mov     edx, [ebp+var_4]
.text$mn:0000EAC0                 mov     eax, [edx+14h]
.text$mn:0000EAC3                 cmp     eax, [ebp+arg_0]
.text$mn:0000EAC6                 jnb     short loc_EAD0
.text$mn:0000EAC8                 mov     ecx, [ebp+var_4]
.text$mn:0000EACB                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000EAD0
.text$mn:0000EAD0 loc_EAD0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000EAD0                 mov     ecx, [ebp+var_4]
.text$mn:0000EAD3                 mov     edx, [ecx+14h]
.text$mn:0000EAD6                 sub     edx, [ebp+arg_0]
.text$mn:0000EAD9                 cmp     edx, [ebp+arg_4]
.text$mn:0000EADC                 jnb     short loc_EAEA
.text$mn:0000EADE                 mov     eax, [ebp+var_4]
.text$mn:0000EAE1                 mov     ecx, [eax+14h]
.text$mn:0000EAE4                 sub     ecx, [ebp+arg_0]
.text$mn:0000EAE7                 mov     [ebp+arg_4], ecx
.text$mn:0000EAEA
.text$mn:0000EAEA loc_EAEA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000EAEA                 or      edx, 0FFFFFFFFh
.text$mn:0000EAED                 sub     edx, [ebp+arg_C]
.text$mn:0000EAF0                 mov     eax, [ebp+var_4]
.text$mn:0000EAF3                 mov     ecx, [eax+14h]
.text$mn:0000EAF6                 sub     ecx, [ebp+arg_4]
.text$mn:0000EAF9                 cmp     edx, ecx
.text$mn:0000EAFB                 ja      short loc_EB05
.text$mn:0000EAFD                 mov     ecx, [ebp+var_4]
.text$mn:0000EB00                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000EB05
.text$mn:0000EB05 loc_EB05:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:0000EB05                 mov     edx, [ebp+var_4]
.text$mn:0000EB08                 mov     eax, [edx+14h]
.text$mn:0000EB0B                 sub     eax, [ebp+arg_4]
.text$mn:0000EB0E                 sub     eax, [ebp+arg_0]
.text$mn:0000EB11                 mov     [ebp+var_8], eax
.text$mn:0000EB14                 mov     ecx, [ebp+arg_C]
.text$mn:0000EB17                 cmp     ecx, [ebp+arg_4]
.text$mn:0000EB1A                 jnb     short loc_EB52
.text$mn:0000EB1C                 mov     edx, [ebp+var_8]
.text$mn:0000EB1F                 push    edx             ; int
.text$mn:0000EB20                 mov     ecx, [ebp+var_4]
.text$mn:0000EB23                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EB28                 mov     ecx, [ebp+arg_0]
.text$mn:0000EB2B                 lea     edx, [eax+ecx*2]
.text$mn:0000EB2E                 mov     eax, [ebp+arg_4]
.text$mn:0000EB31                 lea     ecx, [edx+eax*2]
.text$mn:0000EB34                 push    ecx             ; Src
.text$mn:0000EB35                 mov     ecx, [ebp+var_4]
.text$mn:0000EB38                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EB3D                 mov     edx, [ebp+arg_0]
.text$mn:0000EB40                 lea     eax, [eax+edx*2]
.text$mn:0000EB43                 mov     ecx, [ebp+arg_C]
.text$mn:0000EB46                 lea     edx, [eax+ecx*2]
.text$mn:0000EB49                 push    edx             ; Dst
.text$mn:0000EB4A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000EB4F                 add     esp, 0Ch
.text$mn:0000EB52
.text$mn:0000EB52 loc_EB52:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:0000EB52                 cmp     [ebp+arg_C], 0
.text$mn:0000EB56                 ja      short loc_EB62
.text$mn:0000EB58                 cmp     [ebp+arg_4], 0
.text$mn:0000EB5C                 jbe     loc_EBEF
.text$mn:0000EB62
.text$mn:0000EB62 loc_EB62:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:0000EB62                 mov     eax, [ebp+var_4]
.text$mn:0000EB65                 mov     ecx, [eax+14h]
.text$mn:0000EB68                 add     ecx, [ebp+arg_C]
.text$mn:0000EB6B                 sub     ecx, [ebp+arg_4]
.text$mn:0000EB6E                 mov     [ebp+var_C], ecx
.text$mn:0000EB71                 push    0
.text$mn:0000EB73                 mov     edx, [ebp+var_C]
.text$mn:0000EB76                 push    edx
.text$mn:0000EB77                 mov     ecx, [ebp+var_4]
.text$mn:0000EB7A                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000EB7F                 movzx   eax, al
.text$mn:0000EB82                 test    eax, eax
.text$mn:0000EB84                 jz      short loc_EBEF
.text$mn:0000EB86                 mov     ecx, [ebp+arg_4]
.text$mn:0000EB89                 cmp     ecx, [ebp+arg_C]
.text$mn:0000EB8C                 jnb     short loc_EBC4
.text$mn:0000EB8E                 mov     edx, [ebp+var_8]
.text$mn:0000EB91                 push    edx             ; int
.text$mn:0000EB92                 mov     ecx, [ebp+var_4]
.text$mn:0000EB95                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EB9A                 mov     ecx, [ebp+arg_0]
.text$mn:0000EB9D                 lea     edx, [eax+ecx*2]
.text$mn:0000EBA0                 mov     eax, [ebp+arg_4]
.text$mn:0000EBA3                 lea     ecx, [edx+eax*2]
.text$mn:0000EBA6                 push    ecx             ; Src
.text$mn:0000EBA7                 mov     ecx, [ebp+var_4]
.text$mn:0000EBAA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EBAF                 mov     edx, [ebp+arg_0]
.text$mn:0000EBB2                 lea     eax, [eax+edx*2]
.text$mn:0000EBB5                 mov     ecx, [ebp+arg_C]
.text$mn:0000EBB8                 lea     edx, [eax+ecx*2]
.text$mn:0000EBBB                 push    edx             ; Dst
.text$mn:0000EBBC                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000EBC1                 add     esp, 0Ch
.text$mn:0000EBC4
.text$mn:0000EBC4 loc_EBC4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:0000EBC4                 mov     eax, [ebp+arg_C]
.text$mn:0000EBC7                 push    eax             ; int
.text$mn:0000EBC8                 mov     ecx, [ebp+Src]
.text$mn:0000EBCB                 push    ecx             ; Src
.text$mn:0000EBCC                 mov     ecx, [ebp+var_4]
.text$mn:0000EBCF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000EBD4                 mov     edx, [ebp+arg_0]
.text$mn:0000EBD7                 lea     eax, [eax+edx*2]
.text$mn:0000EBDA                 push    eax             ; Dst
.text$mn:0000EBDB                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000EBE0                 add     esp, 0Ch
.text$mn:0000EBE3                 mov     ecx, [ebp+var_C]
.text$mn:0000EBE6                 push    ecx
.text$mn:0000EBE7                 mov     ecx, [ebp+var_4]
.text$mn:0000EBEA                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000EBEF
.text$mn:0000EBEF loc_EBEF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:0000EBEF                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:0000EBEF                 mov     eax, [ebp+var_4]
.text$mn:0000EBF2
.text$mn:0000EBF2 loc_EBF2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000EBF2                 mov     esp, ebp
.text$mn:0000EBF4                 pop     ebp
.text$mn:0000EBF5                 retn    10h
.text$mn:0000EBF5 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:0000EBF5
.text$mn:0000EBF5 _text$mn        ends
.text$mn:0000EBF5
.text$mn:0000EBF8 ; ===========================================================================
.text$mn:0000EBF8
.text$mn:0000EBF8 ; Segment type: Pure code
.text$mn:0000EBF8 ; Segment permissions: Read/Execute
.text$mn:0000EBF8 _text$mn        segment para public 'CODE' use32
.text$mn:0000EBF8                 assume cs:_text$mn
.text$mn:0000EBF8                 ;org 0EBF8h
.text$mn:0000EBF8 ; COMDAT (pick any)
.text$mn:0000EBF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EBF8
.text$mn:0000EBF8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EBF8
.text$mn:0000EBF8 ; Attributes: bp-based frame
.text$mn:0000EBF8
.text$mn:0000EBF8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000EBF8                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000EBF8 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:0000EBF8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:0000EBF8
.text$mn:0000EBF8 var_AC          = byte ptr -0ACh
.text$mn:0000EBF8 var_A0          = byte ptr -0A0h
.text$mn:0000EBF8 var_94          = dword ptr -94h
.text$mn:0000EBF8 var_90          = dword ptr -90h
.text$mn:0000EBF8 var_8C          = dword ptr -8Ch
.text$mn:0000EBF8 var_88          = dword ptr -88h
.text$mn:0000EBF8 var_84          = dword ptr -84h
.text$mn:0000EBF8 var_80          = dword ptr -80h
.text$mn:0000EBF8 var_7C          = dword ptr -7Ch
.text$mn:0000EBF8 var_78          = dword ptr -78h
.text$mn:0000EBF8 var_74          = dword ptr -74h
.text$mn:0000EBF8 var_70          = dword ptr -70h
.text$mn:0000EBF8 var_6C          = dword ptr -6Ch
.text$mn:0000EBF8 var_68          = dword ptr -68h
.text$mn:0000EBF8 var_64          = dword ptr -64h
.text$mn:0000EBF8 var_60          = dword ptr -60h
.text$mn:0000EBF8 var_5C          = dword ptr -5Ch
.text$mn:0000EBF8 var_58          = dword ptr -58h
.text$mn:0000EBF8 var_54          = dword ptr -54h
.text$mn:0000EBF8 var_50          = dword ptr -50h
.text$mn:0000EBF8 var_4C          = dword ptr -4Ch
.text$mn:0000EBF8 var_48          = dword ptr -48h
.text$mn:0000EBF8 var_44          = dword ptr -44h
.text$mn:0000EBF8 var_40          = dword ptr -40h
.text$mn:0000EBF8 var_3C          = dword ptr -3Ch
.text$mn:0000EBF8 var_38          = dword ptr -38h
.text$mn:0000EBF8 var_34          = dword ptr -34h
.text$mn:0000EBF8 var_30          = dword ptr -30h
.text$mn:0000EBF8 var_2C          = dword ptr -2Ch
.text$mn:0000EBF8 var_28          = dword ptr -28h
.text$mn:0000EBF8 var_24          = dword ptr -24h
.text$mn:0000EBF8 var_20          = dword ptr -20h
.text$mn:0000EBF8 var_1C          = dword ptr -1Ch
.text$mn:0000EBF8 var_18          = dword ptr -18h
.text$mn:0000EBF8 var_14          = dword ptr -14h
.text$mn:0000EBF8 var_10          = dword ptr -10h
.text$mn:0000EBF8 var_C           = dword ptr -0Ch
.text$mn:0000EBF8 var_4           = dword ptr -4
.text$mn:0000EBF8 arg_0           = byte ptr  8
.text$mn:0000EBF8 arg_C           = byte ptr  14h
.text$mn:0000EBF8 arg_18          = byte ptr  20h
.text$mn:0000EBF8 arg_24          = byte ptr  2Ch
.text$mn:0000EBF8
.text$mn:0000EBF8                 push    ebp
.text$mn:0000EBF9                 mov     ebp, esp
.text$mn:0000EBFB                 push    0FFFFFFFFh
.text$mn:0000EBFD                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000EC02                 mov     eax, large fs:0
.text$mn:0000EC08                 push    eax
.text$mn:0000EC09                 sub     esp, 0A0h
.text$mn:0000EC0F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000EC14                 xor     eax, ebp
.text$mn:0000EC16                 push    eax
.text$mn:0000EC17                 lea     eax, [ebp+var_C]
.text$mn:0000EC1A                 mov     large fs:0, eax
.text$mn:0000EC20                 mov     [ebp+var_10], ecx
.text$mn:0000EC23                 mov     [ebp+var_4], 3
.text$mn:0000EC2A                 lea     eax, [ebp+arg_24]
.text$mn:0000EC2D                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000EC2E                 lea     ecx, [ebp+arg_18]
.text$mn:0000EC31                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EC36                 movzx   ecx, al
.text$mn:0000EC39                 test    ecx, ecx
.text$mn:0000EC3B                 jz      loc_ED1D
.text$mn:0000EC41                 sub     esp, 0Ch
.text$mn:0000EC44                 mov     ecx, esp
.text$mn:0000EC46                 mov     [ebp+var_58], esp
.text$mn:0000EC49                 lea     edx, [ebp+arg_0]
.text$mn:0000EC4C                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EC4D                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EC52                 mov     [ebp+var_54], eax
.text$mn:0000EC55                 mov     eax, [ebp+var_54]
.text$mn:0000EC58                 mov     [ebp+var_60], eax
.text$mn:0000EC5B                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000EC5F                 sub     esp, 0Ch
.text$mn:0000EC62                 mov     ecx, esp
.text$mn:0000EC64                 mov     [ebp+var_80], esp
.text$mn:0000EC67                 lea     edx, [ebp+arg_C]
.text$mn:0000EC6A                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EC6B                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EC70                 mov     [ebp+var_38], eax
.text$mn:0000EC73                 mov     eax, [ebp+var_38]
.text$mn:0000EC76                 mov     [ebp+var_68], eax
.text$mn:0000EC79                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000EC7D                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000EC81                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000EC86                 add     esp, 18h
.text$mn:0000EC89                 mov     [ebp+var_20], eax
.text$mn:0000EC8C                 mov     ecx, [ebp+var_20]
.text$mn:0000EC8F                 push    ecx
.text$mn:0000EC90                 lea     edx, [ebp+var_A0]
.text$mn:0000EC96                 push    edx
.text$mn:0000EC97                 mov     ecx, [ebp+var_10]
.text$mn:0000EC9A                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000EC9F                 mov     [ebp+var_48], eax
.text$mn:0000ECA2                 mov     eax, [ebp+var_48]
.text$mn:0000ECA5                 mov     [ebp+var_28], eax
.text$mn:0000ECA8                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000ECAC                 sub     esp, 0Ch
.text$mn:0000ECAF                 mov     ecx, esp
.text$mn:0000ECB1                 mov     [ebp+var_90], esp
.text$mn:0000ECB7                 mov     edx, [ebp+var_28]
.text$mn:0000ECBA                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000ECBB                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000ECC0                 mov     [ebp+var_40], eax
.text$mn:0000ECC3                 mov     eax, [ebp+var_40]
.text$mn:0000ECC6                 mov     [ebp+var_70], eax
.text$mn:0000ECC9                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000ECCD                 sub     esp, 0Ch
.text$mn:0000ECD0                 mov     ecx, esp
.text$mn:0000ECD2                 mov     [ebp+var_88], esp
.text$mn:0000ECD8                 lea     edx, [ebp+arg_0]
.text$mn:0000ECDB                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000ECDC                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000ECE1                 mov     [ebp+var_30], eax
.text$mn:0000ECE4                 mov     eax, [ebp+var_30]
.text$mn:0000ECE7                 mov     [ebp+var_78], eax
.text$mn:0000ECEA                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000ECEE                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000ECF2                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000ECF7                 add     esp, 18h
.text$mn:0000ECFA                 mov     [ebp+var_50], eax
.text$mn:0000ECFD                 mov     ecx, [ebp+var_50]
.text$mn:0000ED00                 push    ecx
.text$mn:0000ED01                 mov     ecx, [ebp+var_10]
.text$mn:0000ED04                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000ED09                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000ED0D                 lea     ecx, [ebp+var_A0]
.text$mn:0000ED13                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000ED18                 jmp     loc_EE0D
.text$mn:0000ED1D ; ---------------------------------------------------------------------------
.text$mn:0000ED1D
.text$mn:0000ED1D loc_ED1D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000ED1D                 lea     edx, [ebp+arg_18]
.text$mn:0000ED20                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000ED21                 lea     ecx, [ebp+arg_24]
.text$mn:0000ED24                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000ED29                 push    eax             ; int
.text$mn:0000ED2A                 lea     ecx, [ebp+arg_18]
.text$mn:0000ED2D                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000ED32                 push    eax             ; Src
.text$mn:0000ED33                 sub     esp, 0Ch
.text$mn:0000ED36                 mov     ecx, esp
.text$mn:0000ED38                 mov     [ebp+var_94], esp
.text$mn:0000ED3E                 lea     eax, [ebp+arg_0]
.text$mn:0000ED41                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000ED42                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000ED47                 mov     [ebp+var_18], eax
.text$mn:0000ED4A                 mov     ecx, [ebp+var_18]
.text$mn:0000ED4D                 mov     [ebp+var_5C], ecx
.text$mn:0000ED50                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000ED54                 sub     esp, 0Ch
.text$mn:0000ED57                 mov     ecx, esp
.text$mn:0000ED59                 mov     [ebp+var_64], esp
.text$mn:0000ED5C                 lea     edx, [ebp+arg_C]
.text$mn:0000ED5F                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000ED60                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000ED65                 mov     [ebp+var_1C], eax
.text$mn:0000ED68                 mov     eax, [ebp+var_1C]
.text$mn:0000ED6B                 mov     [ebp+var_6C], eax
.text$mn:0000ED6E                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000ED72                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000ED76                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000ED7B                 add     esp, 18h
.text$mn:0000ED7E                 mov     [ebp+var_24], eax
.text$mn:0000ED81                 mov     ecx, [ebp+var_24]
.text$mn:0000ED84                 push    ecx             ; int
.text$mn:0000ED85                 lea     edx, [ebp+var_AC]
.text$mn:0000ED8B                 push    edx
.text$mn:0000ED8C                 mov     ecx, [ebp+var_10]
.text$mn:0000ED8F                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000ED94                 mov     [ebp+var_2C], eax
.text$mn:0000ED97                 mov     eax, [ebp+var_2C]
.text$mn:0000ED9A                 mov     [ebp+var_34], eax
.text$mn:0000ED9D                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000EDA1                 sub     esp, 0Ch
.text$mn:0000EDA4                 mov     ecx, esp
.text$mn:0000EDA6                 mov     [ebp+var_74], esp
.text$mn:0000EDA9                 mov     edx, [ebp+var_34]
.text$mn:0000EDAC                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EDAD                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EDB2                 mov     [ebp+var_3C], eax
.text$mn:0000EDB5                 mov     eax, [ebp+var_3C]
.text$mn:0000EDB8                 mov     [ebp+var_7C], eax
.text$mn:0000EDBB                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000EDBF                 sub     esp, 0Ch
.text$mn:0000EDC2                 mov     ecx, esp
.text$mn:0000EDC4                 mov     [ebp+var_84], esp
.text$mn:0000EDCA                 lea     edx, [ebp+arg_0]
.text$mn:0000EDCD                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EDCE                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EDD3                 mov     [ebp+var_44], eax
.text$mn:0000EDD6                 mov     eax, [ebp+var_44]
.text$mn:0000EDD9                 mov     [ebp+var_8C], eax
.text$mn:0000EDDF                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000EDE3                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000EDE7                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000EDEC                 add     esp, 18h
.text$mn:0000EDEF                 mov     [ebp+var_4C], eax
.text$mn:0000EDF2                 mov     ecx, [ebp+var_4C]
.text$mn:0000EDF5                 push    ecx             ; int
.text$mn:0000EDF6                 mov     ecx, [ebp+var_10]
.text$mn:0000EDF9                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000EDFE                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000EE02                 lea     ecx, [ebp+var_AC]
.text$mn:0000EE08                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EE0D
.text$mn:0000EE0D loc_EE0D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000EE0D                 mov     edx, [ebp+var_10]
.text$mn:0000EE10                 mov     [ebp+var_14], edx
.text$mn:0000EE13                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000EE17                 lea     ecx, [ebp+arg_0]
.text$mn:0000EE1A                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EE1F                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000EE23                 lea     ecx, [ebp+arg_C]
.text$mn:0000EE26                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EE2B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000EE2F                 lea     ecx, [ebp+arg_18]
.text$mn:0000EE32                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EE37                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000EE3E                 lea     ecx, [ebp+arg_24]
.text$mn:0000EE41                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EE46                 mov     eax, [ebp+var_14]
.text$mn:0000EE49                 mov     ecx, [ebp+var_C]
.text$mn:0000EE4C                 mov     large fs:0, ecx
.text$mn:0000EE53                 pop     ecx
.text$mn:0000EE54                 mov     esp, ebp
.text$mn:0000EE56                 pop     ebp
.text$mn:0000EE57                 retn    30h
.text$mn:0000EE57 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:0000EE57
.text$mn:0000EE57 ; ---------------------------------------------------------------------------
.text$mn:0000EE5A                 align 4
.text$mn:0000EE5A _text$mn        ends
.text$mn:0000EE5A
.text$x:0000EE5C ; ===========================================================================
.text$x:0000EE5C
.text$x:0000EE5C ; Segment type: Pure code
.text$x:0000EE5C ; Segment permissions: Read/Execute
.text$x:0000EE5C _text$x         segment para public 'CODE' use32
.text$x:0000EE5C                 assume cs:_text$x
.text$x:0000EE5C                 ;org 0EE5Ch
.text$x:0000EE5C ; COMDAT (pick associative to section at EBF8)
.text$x:0000EE5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000EE5C
.text$x:0000EE5C ; =============== S U B R O U T I N E =======================================
.text$x:0000EE5C
.text$x:0000EE5C
.text$x:0000EE5C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:0000EE5C                                         ; DATA XREF: .xdata$x:0000FDB4o
.text$x:0000EE5C                 lea     ecx, [ebp+2Ch]
.text$x:0000EE5F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE5F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:0000EE5F
.text$x:0000EE64
.text$x:0000EE64 ; =============== S U B R O U T I N E =======================================
.text$x:0000EE64
.text$x:0000EE64
.text$x:0000EE64 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:0000EE64                                         ; DATA XREF: .xdata$x:0000FDBCo
.text$x:0000EE64                 lea     ecx, [ebp+20h]
.text$x:0000EE67                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE67 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:0000EE67
.text$x:0000EE6C
.text$x:0000EE6C ; =============== S U B R O U T I N E =======================================
.text$x:0000EE6C
.text$x:0000EE6C
.text$x:0000EE6C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:0000EE6C                                         ; DATA XREF: .xdata$x:0000FDC4o
.text$x:0000EE6C                 lea     ecx, [ebp+14h]
.text$x:0000EE6F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE6F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:0000EE6F
.text$x:0000EE74
.text$x:0000EE74 ; =============== S U B R O U T I N E =======================================
.text$x:0000EE74
.text$x:0000EE74
.text$x:0000EE74 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:0000EE74                                         ; DATA XREF: .xdata$x:0000FDCCo
.text$x:0000EE74                 lea     ecx, [ebp+8]
.text$x:0000EE77                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE77 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:0000EE77
.text$x:0000EE7C
.text$x:0000EE7C ; =============== S U B R O U T I N E =======================================
.text$x:0000EE7C
.text$x:0000EE7C
.text$x:0000EE7C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:0000EE7C                                         ; DATA XREF: .xdata$x:0000FDD4o
.text$x:0000EE7C                 mov     ecx, [ebp-58h]
.text$x:0000EE7F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE7F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:0000EE7F
.text$x:0000EE84
.text$x:0000EE84 ; =============== S U B R O U T I N E =======================================
.text$x:0000EE84
.text$x:0000EE84
.text$x:0000EE84 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:0000EE84                                         ; DATA XREF: .xdata$x:0000FDDCo
.text$x:0000EE84                 mov     ecx, [ebp-80h]
.text$x:0000EE87                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE87 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:0000EE87
.text$x:0000EE8C
.text$x:0000EE8C ; =============== S U B R O U T I N E =======================================
.text$x:0000EE8C
.text$x:0000EE8C
.text$x:0000EE8C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:0000EE8C                                         ; DATA XREF: .xdata$x:0000FDE4o
.text$x:0000EE8C                 lea     ecx, [ebp-0A0h]
.text$x:0000EE92                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE92 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:0000EE92
.text$x:0000EE97
.text$x:0000EE97 ; =============== S U B R O U T I N E =======================================
.text$x:0000EE97
.text$x:0000EE97
.text$x:0000EE97 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:0000EE97                                         ; DATA XREF: .xdata$x:0000FDECo
.text$x:0000EE97                 mov     ecx, [ebp-90h]
.text$x:0000EE9D                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EE9D __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:0000EE9D
.text$x:0000EEA2
.text$x:0000EEA2 ; =============== S U B R O U T I N E =======================================
.text$x:0000EEA2
.text$x:0000EEA2
.text$x:0000EEA2 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:0000EEA2                                         ; DATA XREF: .xdata$x:0000FDF4o
.text$x:0000EEA2                 mov     ecx, [ebp-88h]
.text$x:0000EEA8                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EEA8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:0000EEA8
.text$x:0000EEAD
.text$x:0000EEAD ; =============== S U B R O U T I N E =======================================
.text$x:0000EEAD
.text$x:0000EEAD
.text$x:0000EEAD __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:0000EEAD                                         ; DATA XREF: .xdata$x:0000FDFCo
.text$x:0000EEAD                 mov     ecx, [ebp-94h]
.text$x:0000EEB3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EEB3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:0000EEB3
.text$x:0000EEB8
.text$x:0000EEB8 ; =============== S U B R O U T I N E =======================================
.text$x:0000EEB8
.text$x:0000EEB8
.text$x:0000EEB8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000EEB8                                         ; DATA XREF: .xdata$x:0000FE04o
.text$x:0000EEB8                 mov     ecx, [ebp-64h]
.text$x:0000EEBB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EEBB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000EEBB
.text$x:0000EEC0
.text$x:0000EEC0 ; =============== S U B R O U T I N E =======================================
.text$x:0000EEC0
.text$x:0000EEC0
.text$x:0000EEC0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:0000EEC0                                         ; DATA XREF: .xdata$x:0000FE0Co
.text$x:0000EEC0                 lea     ecx, [ebp-0ACh]
.text$x:0000EEC6                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EEC6 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000EEC6
.text$x:0000EECB
.text$x:0000EECB ; =============== S U B R O U T I N E =======================================
.text$x:0000EECB
.text$x:0000EECB
.text$x:0000EECB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000EECB                                         ; DATA XREF: .xdata$x:0000FE14o
.text$x:0000EECB                 mov     ecx, [ebp-74h]
.text$x:0000EECE                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EECE __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000EECE
.text$x:0000EED3
.text$x:0000EED3 ; =============== S U B R O U T I N E =======================================
.text$x:0000EED3
.text$x:0000EED3
.text$x:0000EED3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:0000EED3                                         ; DATA XREF: .xdata$x:0000FE1Co
.text$x:0000EED3                 mov     ecx, [ebp-84h]
.text$x:0000EED9                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EED9 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000EED9
.text$x:0000EEDE
.text$x:0000EEDE ; =============== S U B R O U T I N E =======================================
.text$x:0000EEDE
.text$x:0000EEDE
.text$x:0000EEDE __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000EEDE                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000EEDE
.text$x:0000EEDE arg_4           = dword ptr  8
.text$x:0000EEDE
.text$x:0000EEDE                 mov     edx, [esp+arg_4]
.text$x:0000EEE2                 lea     eax, [edx+0Ch]
.text$x:0000EEE5                 mov     ecx, [edx-0A4h]
.text$x:0000EEEB                 xor     ecx, eax
.text$x:0000EEED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000EEF2                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000EEF7                 jmp     ___CxxFrameHandler3
.text$x:0000EEF7 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000EEF7
.text$x:0000EEF7 _text$x         ends
.text$x:0000EEF7
.text$mn:0000EEFC ; ===========================================================================
.text$mn:0000EEFC
.text$mn:0000EEFC ; Segment type: Pure code
.text$mn:0000EEFC ; Segment permissions: Read/Execute
.text$mn:0000EEFC _text$mn        segment para public 'CODE' use32
.text$mn:0000EEFC                 assume cs:_text$mn
.text$mn:0000EEFC                 ;org 0EEFCh
.text$mn:0000EEFC ; COMDAT (pick any)
.text$mn:0000EEFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EEFC
.text$mn:0000EEFC ; =============== S U B R O U T I N E =======================================
.text$mn:0000EEFC
.text$mn:0000EEFC ; Attributes: bp-based frame
.text$mn:0000EEFC
.text$mn:0000EEFC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::reserve(unsigned int)
.text$mn:0000EEFC                 public ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000EEFC ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000EEFC                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+5Bp
.text$mn:0000EEFC
.text$mn:0000EEFC var_8           = dword ptr -8
.text$mn:0000EEFC var_4           = dword ptr -4
.text$mn:0000EEFC arg_0           = dword ptr  8
.text$mn:0000EEFC
.text$mn:0000EEFC                 push    ebp
.text$mn:0000EEFD                 mov     ebp, esp
.text$mn:0000EEFF                 sub     esp, 8
.text$mn:0000EF02                 mov     [ebp+var_4], ecx
.text$mn:0000EF05                 mov     eax, [ebp+var_4]
.text$mn:0000EF08                 mov     ecx, [eax+14h]
.text$mn:0000EF0B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000EF0E                 ja      short loc_EF45
.text$mn:0000EF10                 mov     edx, [ebp+var_4]
.text$mn:0000EF13                 mov     eax, [edx+18h]
.text$mn:0000EF16                 cmp     eax, [ebp+arg_0]
.text$mn:0000EF19                 jz      short loc_EF45
.text$mn:0000EF1B                 mov     ecx, [ebp+var_4]
.text$mn:0000EF1E                 mov     edx, [ecx+14h]
.text$mn:0000EF21                 mov     [ebp+var_8], edx
.text$mn:0000EF24                 push    1
.text$mn:0000EF26                 mov     eax, [ebp+arg_0]
.text$mn:0000EF29                 push    eax
.text$mn:0000EF2A                 mov     ecx, [ebp+var_4]
.text$mn:0000EF2D                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000EF32                 movzx   ecx, al
.text$mn:0000EF35                 test    ecx, ecx
.text$mn:0000EF37                 jz      short loc_EF45
.text$mn:0000EF39                 mov     edx, [ebp+var_8]
.text$mn:0000EF3C                 push    edx
.text$mn:0000EF3D                 mov     ecx, [ebp+var_4]
.text$mn:0000EF40                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000EF45
.text$mn:0000EF45 loc_EF45:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+12j
.text$mn:0000EF45                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+1Dj ...
.text$mn:0000EF45                 mov     esp, ebp
.text$mn:0000EF47                 pop     ebp
.text$mn:0000EF48                 retn    4
.text$mn:0000EF48 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000EF48
.text$mn:0000EF48 ; ---------------------------------------------------------------------------
.text$mn:0000EF4B                 align 4
.text$mn:0000EF4B _text$mn        ends
.text$mn:0000EF4B
.text$mn:0000EF4C ; ===========================================================================
.text$mn:0000EF4C
.text$mn:0000EF4C ; Segment type: Pure code
.text$mn:0000EF4C ; Segment permissions: Read/Execute
.text$mn:0000EF4C _text$mn        segment para public 'CODE' use32
.text$mn:0000EF4C                 assume cs:_text$mn
.text$mn:0000EF4C                 ;org 0EF4Ch
.text$mn:0000EF4C ; COMDAT (pick any)
.text$mn:0000EF4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EF4C
.text$mn:0000EF4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000EF4C
.text$mn:0000EF4C ; Attributes: bp-based frame
.text$mn:0000EF4C
.text$mn:0000EF4C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t *Str, int)
.text$mn:0000EF4C                 public ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:0000EF4C ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:0000EF4C                                         ; CODE XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+49p
.text$mn:0000EF4C                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1F9p
.text$mn:0000EF4C
.text$mn:0000EF4C var_4           = dword ptr -4
.text$mn:0000EF4C Str             = dword ptr  8
.text$mn:0000EF4C arg_4           = dword ptr  0Ch
.text$mn:0000EF4C
.text$mn:0000EF4C                 push    ebp
.text$mn:0000EF4D                 mov     ebp, esp
.text$mn:0000EF4F                 push    ecx
.text$mn:0000EF50                 mov     [ebp+var_4], ecx
.text$mn:0000EF53                 push    7A9h            ; unsigned int
.text$mn:0000EF58                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000EF5D                 mov     eax, [ebp+Str]
.text$mn:0000EF60                 push    eax             ; int
.text$mn:0000EF61                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000EF66                 add     esp, 0Ch
.text$mn:0000EF69                 mov     ecx, [ebp+Str]
.text$mn:0000EF6C                 push    ecx             ; Str
.text$mn:0000EF6D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000EF72                 add     esp, 4
.text$mn:0000EF75                 push    eax
.text$mn:0000EF76                 mov     edx, [ebp+arg_4]
.text$mn:0000EF79                 push    edx
.text$mn:0000EF7A                 mov     eax, [ebp+Str]
.text$mn:0000EF7D                 push    eax
.text$mn:0000EF7E                 mov     ecx, [ebp+var_4]
.text$mn:0000EF81                 call    ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)
.text$mn:0000EF86                 mov     esp, ebp
.text$mn:0000EF88                 pop     ebp
.text$mn:0000EF89                 retn    8
.text$mn:0000EF89 ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:0000EF89
.text$mn:0000EF89 _text$mn        ends
.text$mn:0000EF89
.text$mn:0000EF8C ; ===========================================================================
.text$mn:0000EF8C
.text$mn:0000EF8C ; Segment type: Pure code
.text$mn:0000EF8C ; Segment permissions: Read/Execute
.text$mn:0000EF8C _text$mn        segment para public 'CODE' use32
.text$mn:0000EF8C                 assume cs:_text$mn
.text$mn:0000EF8C                 ;org 0EF8Ch
.text$mn:0000EF8C ; COMDAT (pick any)
.text$mn:0000EF8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EF8C
.text$mn:0000EF8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000EF8C
.text$mn:0000EF8C ; Attributes: bp-based frame
.text$mn:0000EF8C
.text$mn:0000EF8C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::rfind(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000EF8C                 public ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000EF8C ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000EF8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint)+35p
.text$mn:0000EF8C
.text$mn:0000EF8C var_10          = dword ptr -10h
.text$mn:0000EF8C var_C           = dword ptr -0Ch
.text$mn:0000EF8C var_8           = dword ptr -8
.text$mn:0000EF8C var_4           = dword ptr -4
.text$mn:0000EF8C arg_0           = dword ptr  8
.text$mn:0000EF8C arg_4           = dword ptr  0Ch
.text$mn:0000EF8C arg_8           = dword ptr  10h
.text$mn:0000EF8C
.text$mn:0000EF8C                 push    ebp
.text$mn:0000EF8D                 mov     ebp, esp
.text$mn:0000EF8F                 sub     esp, 10h
.text$mn:0000EF92                 mov     [ebp+var_4], ecx
.text$mn:0000EF95                 cmp     [ebp+arg_8], 0
.text$mn:0000EF99                 jz      short loc_EFB1
.text$mn:0000EF9B                 push    791h            ; unsigned int
.text$mn:0000EFA0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000EFA5                 mov     eax, [ebp+arg_0]
.text$mn:0000EFA8                 push    eax             ; int
.text$mn:0000EFA9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000EFAE                 add     esp, 0Ch
.text$mn:0000EFB1
.text$mn:0000EFB1 loc_EFB1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+Dj
.text$mn:0000EFB1                 cmp     [ebp+arg_8], 0
.text$mn:0000EFB5                 jnz     short loc_EFDB
.text$mn:0000EFB7                 mov     ecx, [ebp+var_4]
.text$mn:0000EFBA                 mov     edx, [ebp+arg_4]
.text$mn:0000EFBD                 cmp     edx, [ecx+14h]
.text$mn:0000EFC0                 jnb     short loc_EFCA
.text$mn:0000EFC2                 mov     eax, [ebp+arg_4]
.text$mn:0000EFC5                 mov     [ebp+var_C], eax
.text$mn:0000EFC8                 jmp     short loc_EFD3
.text$mn:0000EFCA ; ---------------------------------------------------------------------------
.text$mn:0000EFCA
.text$mn:0000EFCA loc_EFCA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+34j
.text$mn:0000EFCA                 mov     ecx, [ebp+var_4]
.text$mn:0000EFCD                 mov     edx, [ecx+14h]
.text$mn:0000EFD0                 mov     [ebp+var_C], edx
.text$mn:0000EFD3
.text$mn:0000EFD3 loc_EFD3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+3Cj
.text$mn:0000EFD3                 mov     eax, [ebp+var_C]
.text$mn:0000EFD6                 jmp     loc_F082
.text$mn:0000EFDB ; ---------------------------------------------------------------------------
.text$mn:0000EFDB
.text$mn:0000EFDB loc_EFDB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+29j
.text$mn:0000EFDB                 mov     eax, [ebp+var_4]
.text$mn:0000EFDE                 mov     ecx, [ebp+arg_8]
.text$mn:0000EFE1                 cmp     ecx, [eax+14h]
.text$mn:0000EFE4                 ja      loc_F07D
.text$mn:0000EFEA                 mov     edx, [ebp+var_4]
.text$mn:0000EFED                 mov     eax, [edx+14h]
.text$mn:0000EFF0                 sub     eax, [ebp+arg_8]
.text$mn:0000EFF3                 cmp     [ebp+arg_4], eax
.text$mn:0000EFF6                 jnb     short loc_F000
.text$mn:0000EFF8                 mov     ecx, [ebp+arg_4]
.text$mn:0000EFFB                 mov     [ebp+var_10], ecx
.text$mn:0000EFFE                 jmp     short loc_F00C
.text$mn:0000F000 ; ---------------------------------------------------------------------------
.text$mn:0000F000
.text$mn:0000F000 loc_F000:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+6Aj
.text$mn:0000F000                 mov     edx, [ebp+var_4]
.text$mn:0000F003                 mov     eax, [edx+14h]
.text$mn:0000F006                 sub     eax, [ebp+arg_8]
.text$mn:0000F009                 mov     [ebp+var_10], eax
.text$mn:0000F00C
.text$mn:0000F00C loc_F00C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+72j
.text$mn:0000F00C                 mov     ecx, [ebp+var_4]
.text$mn:0000F00F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000F014                 mov     ecx, [ebp+var_10]
.text$mn:0000F017                 lea     edx, [eax+ecx*2]
.text$mn:0000F01A                 mov     [ebp+var_8], edx
.text$mn:0000F01D                 jmp     short loc_F028
.text$mn:0000F01F ; ---------------------------------------------------------------------------
.text$mn:0000F01F
.text$mn:0000F01F loc_F01F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint):loc_F07Bj
.text$mn:0000F01F                 mov     eax, [ebp+var_8]
.text$mn:0000F022                 sub     eax, 2
.text$mn:0000F025                 mov     [ebp+var_8], eax
.text$mn:0000F028
.text$mn:0000F028 loc_F028:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+91j
.text$mn:0000F028                 mov     ecx, [ebp+arg_0]
.text$mn:0000F02B                 push    ecx
.text$mn:0000F02C                 mov     edx, [ebp+var_8]
.text$mn:0000F02F                 push    edx
.text$mn:0000F030                 call    ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ; std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)
.text$mn:0000F035                 add     esp, 8
.text$mn:0000F038                 movzx   eax, al
.text$mn:0000F03B                 test    eax, eax
.text$mn:0000F03D                 jz      short loc_F06C
.text$mn:0000F03F                 mov     ecx, [ebp+arg_8]
.text$mn:0000F042                 push    ecx
.text$mn:0000F043                 mov     edx, [ebp+arg_0]
.text$mn:0000F046                 push    edx
.text$mn:0000F047                 mov     eax, [ebp+var_8]
.text$mn:0000F04A                 push    eax
.text$mn:0000F04B                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000F050                 add     esp, 0Ch
.text$mn:0000F053                 test    eax, eax
.text$mn:0000F055                 jnz     short loc_F06C
.text$mn:0000F057                 mov     ecx, [ebp+var_4]
.text$mn:0000F05A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000F05F                 mov     ecx, [ebp+var_8]
.text$mn:0000F062                 sub     ecx, eax
.text$mn:0000F064                 sar     ecx, 1
.text$mn:0000F066                 mov     eax, ecx
.text$mn:0000F068                 jmp     short loc_F082
.text$mn:0000F06A ; ---------------------------------------------------------------------------
.text$mn:0000F06A                 jmp     short loc_F07B
.text$mn:0000F06C ; ---------------------------------------------------------------------------
.text$mn:0000F06C
.text$mn:0000F06C loc_F06C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+B1j
.text$mn:0000F06C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+C9j
.text$mn:0000F06C                 mov     ecx, [ebp+var_4]
.text$mn:0000F06F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000F074                 cmp     [ebp+var_8], eax
.text$mn:0000F077                 jnz     short loc_F07B
.text$mn:0000F079                 jmp     short loc_F07D
.text$mn:0000F07B ; ---------------------------------------------------------------------------
.text$mn:0000F07B
.text$mn:0000F07B loc_F07B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+DEj
.text$mn:0000F07B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+EBj
.text$mn:0000F07B                 jmp     short loc_F01F
.text$mn:0000F07D ; ---------------------------------------------------------------------------
.text$mn:0000F07D
.text$mn:0000F07D loc_F07D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+58j
.text$mn:0000F07D                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+EDj
.text$mn:0000F07D                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000F082
.text$mn:0000F082 loc_F082:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+4Aj
.text$mn:0000F082                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+DCj
.text$mn:0000F082                 mov     esp, ebp
.text$mn:0000F084                 pop     ebp
.text$mn:0000F085                 retn    0Ch
.text$mn:0000F085 ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000F085
.text$mn:0000F085 _text$mn        ends
.text$mn:0000F085
.text$mn:0000F088 ; ===========================================================================
.text$mn:0000F088
.text$mn:0000F088 ; Segment type: Pure code
.text$mn:0000F088 ; Segment permissions: Read/Execute
.text$mn:0000F088 _text$mn        segment para public 'CODE' use32
.text$mn:0000F088                 assume cs:_text$mn
.text$mn:0000F088                 ;org 0F088h
.text$mn:0000F088 ; COMDAT (pick any)
.text$mn:0000F088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F088
.text$mn:0000F088 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F088
.text$mn:0000F088 ; Attributes: bp-based frame
.text$mn:0000F088
.text$mn:0000F088 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000F088                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000F088 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000F088                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000F088
.text$mn:0000F088 var_8           = dword ptr -8
.text$mn:0000F088 var_1           = byte ptr -1
.text$mn:0000F088 arg_0           = dword ptr  8
.text$mn:0000F088
.text$mn:0000F088                 push    ebp
.text$mn:0000F089                 mov     ebp, esp
.text$mn:0000F08B                 sub     esp, 8
.text$mn:0000F08E                 mov     [ebp+var_8], ecx
.text$mn:0000F091                 mov     eax, [ebp+var_8]
.text$mn:0000F094                 push    eax
.text$mn:0000F095                 lea     ecx, [ebp+var_1]
.text$mn:0000F098                 push    ecx
.text$mn:0000F099                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000F09E                 add     esp, 8
.text$mn:0000F0A1                 push    eax
.text$mn:0000F0A2                 mov     ecx, [ebp+arg_0]
.text$mn:0000F0A5                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000F0AA                 mov     eax, [ebp+arg_0]
.text$mn:0000F0AD                 mov     esp, ebp
.text$mn:0000F0AF                 pop     ebp
.text$mn:0000F0B0                 retn    4
.text$mn:0000F0B0 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000F0B0
.text$mn:0000F0B0 ; ---------------------------------------------------------------------------
.text$mn:0000F0B3                 align 4
.text$mn:0000F0B3 _text$mn        ends
.text$mn:0000F0B3
.text$mn:0000F0B4 ; ===========================================================================
.text$mn:0000F0B4
.text$mn:0000F0B4 ; Segment type: Pure code
.text$mn:0000F0B4 ; Segment permissions: Read/Execute
.text$mn:0000F0B4 _text$mn        segment para public 'CODE' use32
.text$mn:0000F0B4                 assume cs:_text$mn
.text$mn:0000F0B4                 ;org 0F0B4h
.text$mn:0000F0B4 ; COMDAT (pick any)
.text$mn:0000F0B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F0B4
.text$mn:0000F0B4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F0B4
.text$mn:0000F0B4 ; Attributes: bp-based frame
.text$mn:0000F0B4
.text$mn:0000F0B4 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000F0B4                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000F0B4 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000F0B4                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000F0B4
.text$mn:0000F0B4 var_4           = dword ptr -4
.text$mn:0000F0B4 arg_0           = dword ptr  8
.text$mn:0000F0B4
.text$mn:0000F0B4                 push    ebp
.text$mn:0000F0B5                 mov     ebp, esp
.text$mn:0000F0B7                 push    ecx
.text$mn:0000F0B8                 mov     [ebp+var_4], ecx
.text$mn:0000F0BB                 mov     eax, [ebp+var_4]
.text$mn:0000F0BE                 push    eax
.text$mn:0000F0BF                 mov     ecx, [ebp+arg_0]
.text$mn:0000F0C2                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000F0C7                 mov     eax, [ebp+arg_0]
.text$mn:0000F0CA                 mov     esp, ebp
.text$mn:0000F0CC                 pop     ebp
.text$mn:0000F0CD                 retn    4
.text$mn:0000F0CD ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000F0CD
.text$mn:0000F0CD _text$mn        ends
.text$mn:0000F0CD
.text$mn:0000F0D0 ; ===========================================================================
.text$mn:0000F0D0
.text$mn:0000F0D0 ; Segment type: Pure code
.text$mn:0000F0D0 ; Segment permissions: Read/Execute
.text$mn:0000F0D0 _text$mn        segment para public 'CODE' use32
.text$mn:0000F0D0                 assume cs:_text$mn
.text$mn:0000F0D0                 ;org 0F0D0h
.text$mn:0000F0D0 ; COMDAT (pick any)
.text$mn:0000F0D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F0D0
.text$mn:0000F0D0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F0D0
.text$mn:0000F0D0 ; Attributes: bp-based frame
.text$mn:0000F0D0
.text$mn:0000F0D0 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000F0D0                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000F0D0 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000F0D0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000F0D0
.text$mn:0000F0D0 arg_0           = dword ptr  8
.text$mn:0000F0D0 arg_4           = dword ptr  0Ch
.text$mn:0000F0D0
.text$mn:0000F0D0                 push    ebp
.text$mn:0000F0D1                 mov     ebp, esp
.text$mn:0000F0D3                 mov     eax, [ebp+arg_0]
.text$mn:0000F0D6                 push    eax
.text$mn:0000F0D7                 mov     ecx, [ebp+arg_4]
.text$mn:0000F0DA                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000F0DF                 mov     eax, [ebp+arg_0]
.text$mn:0000F0E2                 pop     ebp
.text$mn:0000F0E3                 retn
.text$mn:0000F0E3 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000F0E3
.text$mn:0000F0E3 _text$mn        ends
.text$mn:0000F0E3
.text$mn:0000F0E4 ; ===========================================================================
.text$mn:0000F0E4
.text$mn:0000F0E4 ; Segment type: Pure code
.text$mn:0000F0E4 ; Segment permissions: Read/Execute
.text$mn:0000F0E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000F0E4                 assume cs:_text$mn
.text$mn:0000F0E4                 ;org 0F0E4h
.text$mn:0000F0E4 ; COMDAT (pick any)
.text$mn:0000F0E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F0E4
.text$mn:0000F0E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F0E4
.text$mn:0000F0E4 ; Attributes: bp-based frame
.text$mn:0000F0E4
.text$mn:0000F0E4 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000F0E4                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000F0E4 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000F0E4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000F0E4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:0000F0E4
.text$mn:0000F0E4 var_4           = dword ptr -4
.text$mn:0000F0E4
.text$mn:0000F0E4                 push    ebp
.text$mn:0000F0E5                 mov     ebp, esp
.text$mn:0000F0E7                 push    ecx
.text$mn:0000F0E8                 mov     [ebp+var_4], ecx
.text$mn:0000F0EB                 mov     eax, [ebp+var_4]
.text$mn:0000F0EE                 mov     eax, [eax+14h]
.text$mn:0000F0F1                 mov     esp, ebp
.text$mn:0000F0F3                 pop     ebp
.text$mn:0000F0F4                 retn
.text$mn:0000F0F4 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000F0F4
.text$mn:0000F0F4 ; ---------------------------------------------------------------------------
.text$mn:0000F0F5                 align 4
.text$mn:0000F0F5 _text$mn        ends
.text$mn:0000F0F5
.text$mn:0000F0F8 ; ===========================================================================
.text$mn:0000F0F8
.text$mn:0000F0F8 ; Segment type: Pure code
.text$mn:0000F0F8 ; Segment permissions: Read/Execute
.text$mn:0000F0F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000F0F8                 assume cs:_text$mn
.text$mn:0000F0F8                 ;org 0F0F8h
.text$mn:0000F0F8 ; COMDAT (pick any)
.text$mn:0000F0F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F0F8
.text$mn:0000F0F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F0F8
.text$mn:0000F0F8 ; Attributes: bp-based frame
.text$mn:0000F0F8
.text$mn:0000F0F8 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000F0F8                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000F0F8 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000F0F8                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+42p
.text$mn:0000F0F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp ...
.text$mn:0000F0F8
.text$mn:0000F0F8 var_4           = dword ptr -4
.text$mn:0000F0F8
.text$mn:0000F0F8                 push    ebp
.text$mn:0000F0F9                 mov     ebp, esp
.text$mn:0000F0FB                 push    ecx
.text$mn:0000F0FC                 mov     [ebp+var_4], ecx
.text$mn:0000F0FF                 mov     eax, [ebp+var_4]
.text$mn:0000F102                 mov     eax, [eax+14h]
.text$mn:0000F105                 mov     esp, ebp
.text$mn:0000F107                 pop     ebp
.text$mn:0000F108                 retn
.text$mn:0000F108 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000F108
.text$mn:0000F108 ; ---------------------------------------------------------------------------
.text$mn:0000F109                 align 4
.text$mn:0000F109 _text$mn        ends
.text$mn:0000F109
.text$mn:0000F10C ; ===========================================================================
.text$mn:0000F10C
.text$mn:0000F10C ; Segment type: Pure code
.text$mn:0000F10C ; Segment permissions: Read/Execute
.text$mn:0000F10C _text$mn        segment para public 'CODE' use32
.text$mn:0000F10C                 assume cs:_text$mn
.text$mn:0000F10C                 ;org 0F10Ch
.text$mn:0000F10C ; COMDAT (pick any)
.text$mn:0000F10C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F10C
.text$mn:0000F10C ; =============== S U B R O U T I N E =======================================
.text$mn:0000F10C
.text$mn:0000F10C ; Attributes: bp-based frame
.text$mn:0000F10C
.text$mn:0000F10C ; public: unsigned int __thiscall std::vector<struct std::pair<char, char>, class std::allocator<struct std::pair<char, char>>>::size(void)const
.text$mn:0000F10C                 public ?size@?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEIXZ
.text$mn:0000F10C ?size@?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000F10C                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &)+59p
.text$mn:0000F10C                                         ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+Ap
.text$mn:0000F10C
.text$mn:0000F10C var_4           = dword ptr -4
.text$mn:0000F10C
.text$mn:0000F10C                 push    ebp
.text$mn:0000F10D                 mov     ebp, esp
.text$mn:0000F10F                 push    ecx
.text$mn:0000F110                 mov     [ebp+var_4], ecx
.text$mn:0000F113                 mov     eax, [ebp+var_4]
.text$mn:0000F116                 mov     ecx, [ebp+var_4]
.text$mn:0000F119                 mov     eax, [eax+8]
.text$mn:0000F11C                 sub     eax, [ecx+4]
.text$mn:0000F11F                 sar     eax, 1
.text$mn:0000F121                 mov     esp, ebp
.text$mn:0000F123                 pop     ebp
.text$mn:0000F124                 retn
.text$mn:0000F124 ?size@?$vector@U?$pair@DD@std@@V?$allocator@U?$pair@DD@std@@@2@@std@@QBEIXZ endp
.text$mn:0000F124
.text$mn:0000F124 ; ---------------------------------------------------------------------------
.text$mn:0000F125                 align 4
.text$mn:0000F125 _text$mn        ends
.text$mn:0000F125
.text$mn:0000F128 ; ===========================================================================
.text$mn:0000F128
.text$mn:0000F128 ; Segment type: Pure code
.text$mn:0000F128 ; Segment permissions: Read/Execute
.text$mn:0000F128 _text$mn        segment para public 'CODE' use32
.text$mn:0000F128                 assume cs:_text$mn
.text$mn:0000F128                 ;org 0F128h
.text$mn:0000F128 ; COMDAT (pick any)
.text$mn:0000F128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F128
.text$mn:0000F128 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F128
.text$mn:0000F128 ; Attributes: bp-based frame
.text$mn:0000F128
.text$mn:0000F128 ; public: unsigned int __thiscall std::vector<struct MatchedCharInserted, class std::allocator<struct MatchedCharInserted>>::size(void)const
.text$mn:0000F128                 public ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ
.text$mn:0000F128 ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ proc near
.text$mn:0000F128                                         ; CODE XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+4Dp
.text$mn:0000F128                                         ; InsertedMatchedChars::search(char,char,int)+5Ep ...
.text$mn:0000F128
.text$mn:0000F128 var_4           = dword ptr -4
.text$mn:0000F128
.text$mn:0000F128                 push    ebp
.text$mn:0000F129                 mov     ebp, esp
.text$mn:0000F12B                 push    ecx
.text$mn:0000F12C                 mov     [ebp+var_4], ecx
.text$mn:0000F12F                 mov     eax, [ebp+var_4]
.text$mn:0000F132                 mov     ecx, [ebp+var_4]
.text$mn:0000F135                 mov     eax, [eax+8]
.text$mn:0000F138                 sub     eax, [ecx+4]
.text$mn:0000F13B                 sar     eax, 3
.text$mn:0000F13E                 mov     esp, ebp
.text$mn:0000F140                 pop     ebp
.text$mn:0000F141                 retn
.text$mn:0000F141 ?size@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBEIXZ endp
.text$mn:0000F141
.text$mn:0000F141 ; ---------------------------------------------------------------------------
.text$mn:0000F142                 align 4
.text$mn:0000F142 _text$mn        ends
.text$mn:0000F142
.text$mn:0000F144 ; ===========================================================================
.text$mn:0000F144
.text$mn:0000F144 ; Segment type: Pure code
.text$mn:0000F144 ; Segment permissions: Read/Execute
.text$mn:0000F144 _text$mn        segment para public 'CODE' use32
.text$mn:0000F144                 assume cs:_text$mn
.text$mn:0000F144                 ;org 0F144h
.text$mn:0000F144 ; COMDAT (pick any)
.text$mn:0000F144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F144
.text$mn:0000F144 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F144
.text$mn:0000F144 ; Attributes: bp-based frame
.text$mn:0000F144
.text$mn:0000F144 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:0000F144                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000F144 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000F144                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+6B0p
.text$mn:0000F144                                         ; AutoCompletion::showWordComplete(bool)+13Bp ...
.text$mn:0000F144
.text$mn:0000F144 var_4           = dword ptr -4
.text$mn:0000F144
.text$mn:0000F144                 push    ebp
.text$mn:0000F145                 mov     ebp, esp
.text$mn:0000F147                 push    ecx
.text$mn:0000F148                 mov     [ebp+var_4], ecx
.text$mn:0000F14B                 mov     eax, [ebp+var_4]
.text$mn:0000F14E                 mov     ecx, [ebp+var_4]
.text$mn:0000F151                 mov     eax, [eax+8]
.text$mn:0000F154                 sub     eax, [ecx+4]
.text$mn:0000F157                 cdq
.text$mn:0000F158                 mov     ecx, 1Ch
.text$mn:0000F15D                 idiv    ecx
.text$mn:0000F15F                 mov     esp, ebp
.text$mn:0000F161                 pop     ebp
.text$mn:0000F162                 retn
.text$mn:0000F162 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000F162
.text$mn:0000F162 ; ---------------------------------------------------------------------------
.text$mn:0000F163                 align 4
.text$mn:0000F163 _text$mn        ends
.text$mn:0000F163
.text$mn:0000F164 ; ===========================================================================
.text$mn:0000F164
.text$mn:0000F164 ; Segment type: Pure code
.text$mn:0000F164 ; Segment permissions: Read/Execute
.text$mn:0000F164 _text$mn        segment para public 'CODE' use32
.text$mn:0000F164                 assume cs:_text$mn
.text$mn:0000F164                 ;org 0F164h
.text$mn:0000F164 ; COMDAT (pick any)
.text$mn:0000F164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F164
.text$mn:0000F164 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F164
.text$mn:0000F164 ; Attributes: bp-based frame
.text$mn:0000F164
.text$mn:0000F164 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::substr(unsigned int, unsigned int)const
.text$mn:0000F164                 public ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$mn:0000F164 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z proc near
.text$mn:0000F164                                         ; CODE XREF: removeTrailingSlash(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+6Fp
.text$mn:0000F164                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+170p ...
.text$mn:0000F164
.text$mn:0000F164 var_18          = dword ptr -18h
.text$mn:0000F164 var_14          = dword ptr -14h
.text$mn:0000F164 var_D           = byte ptr -0Dh
.text$mn:0000F164 var_C           = dword ptr -0Ch
.text$mn:0000F164 var_4           = dword ptr -4
.text$mn:0000F164 arg_0           = dword ptr  8
.text$mn:0000F164 arg_4           = dword ptr  0Ch
.text$mn:0000F164 arg_8           = dword ptr  10h
.text$mn:0000F164
.text$mn:0000F164                 push    ebp
.text$mn:0000F165                 mov     ebp, esp
.text$mn:0000F167                 push    0FFFFFFFFh
.text$mn:0000F169                 push    offset __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$mn:0000F16E                 mov     eax, large fs:0
.text$mn:0000F174                 push    eax
.text$mn:0000F175                 sub     esp, 0Ch
.text$mn:0000F178                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000F17D                 xor     eax, ebp
.text$mn:0000F17F                 push    eax
.text$mn:0000F180                 lea     eax, [ebp+var_C]
.text$mn:0000F183                 mov     large fs:0, eax
.text$mn:0000F189                 mov     [ebp+var_14], ecx
.text$mn:0000F18C                 mov     [ebp+var_18], 0
.text$mn:0000F193                 lea     eax, [ebp+var_D]
.text$mn:0000F196                 push    eax
.text$mn:0000F197                 mov     ecx, [ebp+var_14]
.text$mn:0000F19A                 call    ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::get_allocator(void)
.text$mn:0000F19F                 push    eax
.text$mn:0000F1A0                 mov     ecx, [ebp+arg_8]
.text$mn:0000F1A3                 push    ecx
.text$mn:0000F1A4                 mov     edx, [ebp+arg_4]
.text$mn:0000F1A7                 push    edx
.text$mn:0000F1A8                 mov     eax, [ebp+var_14]
.text$mn:0000F1AB                 push    eax
.text$mn:0000F1AC                 mov     ecx, [ebp+arg_0]
.text$mn:0000F1AF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)
.text$mn:0000F1B4                 mov     [ebp+var_4], 0
.text$mn:0000F1BB                 mov     ecx, [ebp+var_18]
.text$mn:0000F1BE                 or      ecx, 1
.text$mn:0000F1C1                 mov     [ebp+var_18], ecx
.text$mn:0000F1C4                 mov     eax, [ebp+arg_0]
.text$mn:0000F1C7                 mov     ecx, [ebp+var_C]
.text$mn:0000F1CA                 mov     large fs:0, ecx
.text$mn:0000F1D1                 pop     ecx
.text$mn:0000F1D2                 mov     esp, ebp
.text$mn:0000F1D4                 pop     ebp
.text$mn:0000F1D5                 retn    0Ch
.text$mn:0000F1D5 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z endp
.text$mn:0000F1D5
.text$mn:0000F1D5 _text$mn        ends
.text$mn:0000F1D5
.text$x:0000F1D8 ; ===========================================================================
.text$x:0000F1D8
.text$x:0000F1D8 ; Segment type: Pure code
.text$x:0000F1D8 ; Segment permissions: Read/Execute
.text$x:0000F1D8 _text$x         segment para public 'CODE' use32
.text$x:0000F1D8                 assume cs:_text$x
.text$x:0000F1D8                 ;org 0F1D8h
.text$x:0000F1D8 ; COMDAT (pick associative to section at F164)
.text$x:0000F1D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000F1D8
.text$x:0000F1D8 ; =============== S U B R O U T I N E =======================================
.text$x:0000F1D8
.text$x:0000F1D8
.text$x:0000F1D8 __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0 proc near
.text$x:0000F1D8                                         ; DATA XREF: .xdata$x:0000FEA8o
.text$x:0000F1D8                 mov     eax, [ebp-18h]
.text$x:0000F1DB                 and     eax, 1
.text$x:0000F1DE                 jz      $LN4_1
.text$x:0000F1E4                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000F1E8                 mov     ecx, [ebp+8]
.text$x:0000F1EB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000F1F0 ; ---------------------------------------------------------------------------
.text$x:0000F1F0
.text$x:0000F1F0 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0+6j
.text$x:0000F1F0                 retn
.text$x:0000F1F0 __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0 endp
.text$x:0000F1F0
.text$x:0000F1F1
.text$x:0000F1F1 ; =============== S U B R O U T I N E =======================================
.text$x:0000F1F1
.text$x:0000F1F1
.text$x:0000F1F1 __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z proc near
.text$x:0000F1F1                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+5o
.text$x:0000F1F1
.text$x:0000F1F1 arg_4           = dword ptr  8
.text$x:0000F1F1
.text$x:0000F1F1                 mov     edx, [esp+arg_4]
.text$x:0000F1F5                 lea     eax, [edx+0Ch]
.text$x:0000F1F8                 mov     ecx, [edx-10h]
.text$x:0000F1FB                 xor     ecx, eax
.text$x:0000F1FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000F202                 mov     eax, offset __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$x:0000F207                 jmp     ___CxxFrameHandler3
.text$x:0000F207 __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z endp
.text$x:0000F207
.text$x:0000F207 _text$x         ends
.text$x:0000F207
.text$mn:0000F20C ; ===========================================================================
.text$mn:0000F20C
.text$mn:0000F20C ; Segment type: Pure code
.text$mn:0000F20C ; Segment permissions: Read/Execute
.text$mn:0000F20C _text$mn        segment para public 'CODE' use32
.text$mn:0000F20C                 assume cs:_text$mn
.text$mn:0000F20C                 ;org 0F20Ch
.text$mn:0000F20C ; COMDAT (pick any)
.text$mn:0000F20C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F20C
.text$mn:0000F20C ; =============== S U B R O U T I N E =======================================
.text$mn:0000F20C
.text$mn:0000F20C ; Attributes: bp-based frame
.text$mn:0000F20C
.text$mn:0000F20C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(struct std::_Container_base12 *)
.text$mn:0000F20C                 public ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z
.text$mn:0000F20C ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z proc near
.text$mn:0000F20C                                         ; CODE XREF: std::swap<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+Ap
.text$mn:0000F20C
.text$mn:0000F20C var_32          = byte ptr -32h
.text$mn:0000F20C var_31          = byte ptr -31h
.text$mn:0000F20C var_30          = dword ptr -30h
.text$mn:0000F20C var_2C          = byte ptr -2Ch
.text$mn:0000F20C var_10          = dword ptr -10h
.text$mn:0000F20C var_C           = dword ptr -0Ch
.text$mn:0000F20C var_4           = dword ptr -4
.text$mn:0000F20C arg_0           = dword ptr  8
.text$mn:0000F20C
.text$mn:0000F20C                 push    ebp
.text$mn:0000F20D                 mov     ebp, esp
.text$mn:0000F20F                 push    0FFFFFFFFh
.text$mn:0000F211                 push    offset __ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z
.text$mn:0000F216                 mov     eax, large fs:0
.text$mn:0000F21C                 push    eax
.text$mn:0000F21D                 sub     esp, 28h
.text$mn:0000F220                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000F225                 xor     eax, ebp
.text$mn:0000F227                 mov     [ebp+var_10], eax
.text$mn:0000F22A                 push    eax
.text$mn:0000F22B                 lea     eax, [ebp+var_C]
.text$mn:0000F22E                 mov     large fs:0, eax
.text$mn:0000F234                 mov     [ebp+var_30], ecx
.text$mn:0000F237                 mov     eax, [ebp+var_30]
.text$mn:0000F23A                 cmp     eax, [ebp+arg_0]
.text$mn:0000F23D                 jnz     short loc_F244
.text$mn:0000F23F                 jmp     loc_F350
.text$mn:0000F244 ; ---------------------------------------------------------------------------
.text$mn:0000F244
.text$mn:0000F244 loc_F244:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+31j
.text$mn:0000F244                 lea     ecx, [ebp+var_32]
.text$mn:0000F247                 push    ecx
.text$mn:0000F248                 mov     ecx, [ebp+arg_0]
.text$mn:0000F24B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000F250                 push    eax
.text$mn:0000F251                 lea     edx, [ebp+var_31]
.text$mn:0000F254                 push    edx
.text$mn:0000F255                 mov     ecx, [ebp+var_30]
.text$mn:0000F258                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000F25D                 push    eax
.text$mn:0000F25E                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:0000F263                 add     esp, 8
.text$mn:0000F266                 movzx   eax, al
.text$mn:0000F269                 test    eax, eax
.text$mn:0000F26B                 jz      short loc_F2B6
.text$mn:0000F26D                 mov     ecx, [ebp+arg_0]
.text$mn:0000F270                 push    ecx             ; struct std::_Container_base12 *
.text$mn:0000F271                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000F274                 call    ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all(std::_Container_base12 &)
.text$mn:0000F279                 mov     edx, [ebp+arg_0]
.text$mn:0000F27C                 push    edx
.text$mn:0000F27D                 mov     ecx, [ebp+var_30]
.text$mn:0000F280                 call    ?_Swap_bx@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000F285                 mov     eax, [ebp+arg_0]
.text$mn:0000F288                 add     eax, 14h
.text$mn:0000F28B                 push    eax
.text$mn:0000F28C                 mov     ecx, [ebp+var_30]
.text$mn:0000F28F                 add     ecx, 14h
.text$mn:0000F292                 push    ecx
.text$mn:0000F293                 call    ??$swap@I@std@@YAXAAI0@Z ; std::swap<uint>(uint &,uint &)
.text$mn:0000F298                 add     esp, 8
.text$mn:0000F29B                 mov     edx, [ebp+arg_0]
.text$mn:0000F29E                 add     edx, 18h
.text$mn:0000F2A1                 push    edx
.text$mn:0000F2A2                 mov     eax, [ebp+var_30]
.text$mn:0000F2A5                 add     eax, 18h
.text$mn:0000F2A8                 push    eax
.text$mn:0000F2A9                 call    ??$swap@I@std@@YAXAAI0@Z ; std::swap<uint>(uint &,uint &)
.text$mn:0000F2AE                 add     esp, 8
.text$mn:0000F2B1                 jmp     loc_F350
.text$mn:0000F2B6 ; ---------------------------------------------------------------------------
.text$mn:0000F2B6
.text$mn:0000F2B6 loc_F2B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5Fj
.text$mn:0000F2B6                 xor     ecx, ecx
.text$mn:0000F2B8                 jz      short loc_F316
.text$mn:0000F2BA                 mov     edx, [ebp+arg_0]
.text$mn:0000F2BD                 push    edx
.text$mn:0000F2BE                 mov     ecx, [ebp+var_30]
.text$mn:0000F2C1                 call    ?_Swap_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Swap_alloc(std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>> &)
.text$mn:0000F2C6                 mov     eax, [ebp+arg_0]
.text$mn:0000F2C9                 push    eax
.text$mn:0000F2CA                 mov     ecx, [ebp+var_30]
.text$mn:0000F2CD                 call    ?_Swap_bx@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Swap_bx(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000F2D2                 mov     ecx, [ebp+arg_0]
.text$mn:0000F2D5                 add     ecx, 4
.text$mn:0000F2D8                 push    ecx
.text$mn:0000F2D9                 mov     edx, [ebp+var_30]
.text$mn:0000F2DC                 add     edx, 4
.text$mn:0000F2DF                 push    edx
.text$mn:0000F2E0                 call    ??$swap@T_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@0@0@Z ; std::swap<std::_String_val<std::_Simple_types<wchar_t>>::_Bxty>(std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &,std::_String_val<std::_Simple_types<wchar_t>>::_Bxty &)
.text$mn:0000F2E5                 add     esp, 8
.text$mn:0000F2E8                 mov     eax, [ebp+arg_0]
.text$mn:0000F2EB                 add     eax, 14h
.text$mn:0000F2EE                 push    eax
.text$mn:0000F2EF                 mov     ecx, [ebp+var_30]
.text$mn:0000F2F2                 add     ecx, 14h
.text$mn:0000F2F5                 push    ecx
.text$mn:0000F2F6                 call    ??$swap@I@std@@YAXAAI0@Z ; std::swap<uint>(uint &,uint &)
.text$mn:0000F2FB                 add     esp, 8
.text$mn:0000F2FE                 mov     edx, [ebp+arg_0]
.text$mn:0000F301                 add     edx, 18h
.text$mn:0000F304                 push    edx
.text$mn:0000F305                 mov     eax, [ebp+var_30]
.text$mn:0000F308                 add     eax, 18h
.text$mn:0000F30B                 push    eax
.text$mn:0000F30C                 call    ??$swap@I@std@@YAXAAI0@Z ; std::swap<uint>(uint &,uint &)
.text$mn:0000F311                 add     esp, 8
.text$mn:0000F314                 jmp     short loc_F350
.text$mn:0000F316 ; ---------------------------------------------------------------------------
.text$mn:0000F316
.text$mn:0000F316 loc_F316:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+ACj
.text$mn:0000F316                 mov     ecx, [ebp+var_30]
.text$mn:0000F319                 push    ecx
.text$mn:0000F31A                 lea     ecx, [ebp+var_2C]
.text$mn:0000F31D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000F322                 mov     [ebp+var_4], 0
.text$mn:0000F329                 mov     edx, [ebp+arg_0]
.text$mn:0000F32C                 push    edx
.text$mn:0000F32D                 mov     ecx, [ebp+var_30]
.text$mn:0000F330                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000F335                 lea     eax, [ebp+var_2C]
.text$mn:0000F338                 push    eax
.text$mn:0000F339                 mov     ecx, [ebp+arg_0]
.text$mn:0000F33C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000F341                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000F348                 lea     ecx, [ebp+var_2C]
.text$mn:0000F34B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000F350
.text$mn:0000F350 loc_F350:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+33j
.text$mn:0000F350                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+A5j ...
.text$mn:0000F350                 mov     ecx, [ebp+var_C]
.text$mn:0000F353                 mov     large fs:0, ecx
.text$mn:0000F35A                 pop     ecx
.text$mn:0000F35B                 mov     ecx, [ebp+var_10]
.text$mn:0000F35E                 xor     ecx, ebp
.text$mn:0000F360                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000F365                 mov     esp, ebp
.text$mn:0000F367                 pop     ebp
.text$mn:0000F368                 retn    4
.text$mn:0000F368 ?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z endp
.text$mn:0000F368
.text$mn:0000F368 ; ---------------------------------------------------------------------------
.text$mn:0000F36B                 align 4
.text$mn:0000F36B _text$mn        ends
.text$mn:0000F36B
.text$x:0000F36C ; ===========================================================================
.text$x:0000F36C
.text$x:0000F36C ; Segment type: Pure code
.text$x:0000F36C ; Segment permissions: Read/Execute
.text$x:0000F36C _text$x         segment para public 'CODE' use32
.text$x:0000F36C                 assume cs:_text$x
.text$x:0000F36C                 ;org 0F36Ch
.text$x:0000F36C ; COMDAT (pick associative to section at F20C)
.text$x:0000F36C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000F36C
.text$x:0000F36C ; =============== S U B R O U T I N E =======================================
.text$x:0000F36C
.text$x:0000F36C
.text$x:0000F36C __unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z$0 proc near
.text$x:0000F36C                                         ; DATA XREF: .xdata$x:0000FE7Co
.text$x:0000F36C                 lea     ecx, [ebp-2Ch]
.text$x:0000F36F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000F36F __unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z$0 endp
.text$x:0000F36F
.text$x:0000F374
.text$x:0000F374 ; =============== S U B R O U T I N E =======================================
.text$x:0000F374
.text$x:0000F374
.text$x:0000F374 __ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z proc near
.text$x:0000F374                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::swap(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:0000F374
.text$x:0000F374 arg_4           = dword ptr  8
.text$x:0000F374
.text$x:0000F374                 mov     edx, [esp+arg_4]
.text$x:0000F378                 lea     eax, [edx+0Ch]
.text$x:0000F37B                 mov     ecx, [edx-2Ch]
.text$x:0000F37E                 xor     ecx, eax
.text$x:0000F380                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000F385                 mov     ecx, [edx-4]
.text$x:0000F388                 xor     ecx, eax
.text$x:0000F38A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000F38F                 mov     eax, offset __ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z
.text$x:0000F394                 jmp     ___CxxFrameHandler3
.text$x:0000F394 __ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z endp
.text$x:0000F394
.text$x:0000F394 ; ---------------------------------------------------------------------------
.text$x:0000F399                 align 4
.text$x:0000F399 _text$x         ends
.text$x:0000F399
.text$mn:0000F39C ; ===========================================================================
.text$mn:0000F39C
.text$mn:0000F39C ; Segment type: Pure code
.text$mn:0000F39C ; Segment permissions: Read/Execute
.text$mn:0000F39C _text$mn        segment para public 'CODE' use32
.text$mn:0000F39C                 assume cs:_text$mn
.text$mn:0000F39C                 ;org 0F39Ch
.text$mn:0000F39C ; COMDAT (pick any)
.text$mn:0000F39C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F39C
.text$mn:0000F39C ; =============== S U B R O U T I N E =======================================
.text$mn:0000F39C
.text$mn:0000F39C ; Attributes: bp-based frame
.text$mn:0000F39C
.text$mn:0000F39C ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000F39C                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000F39C ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000F39C                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_D314p
.text$mn:0000F39C                 push    ebp
.text$mn:0000F39D                 mov     ebp, esp
.text$mn:0000F39F                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000F3A4                 pop     ebp
.text$mn:0000F3A5                 retn
.text$mn:0000F3A5 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000F3A5
.text$mn:0000F3A5 ; ---------------------------------------------------------------------------
.text$mn:0000F3A6                 align 4
.text$mn:0000F3A6 _text$mn        ends
.text$mn:0000F3A6
.text$mn:0000F3A8 ; ===========================================================================
.text$mn:0000F3A8
.text$mn:0000F3A8 ; Segment type: Pure code
.text$mn:0000F3A8 ; Segment permissions: Read/Execute
.text$mn:0000F3A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000F3A8                 assume cs:_text$mn
.text$mn:0000F3A8                 ;org 0F3A8h
.text$mn:0000F3A8 ; COMDAT (pick any)
.text$mn:0000F3A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F3A8
.text$mn:0000F3A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F3A8
.text$mn:0000F3A8 ; Attributes: bp-based frame
.text$mn:0000F3A8
.text$mn:0000F3A8 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000F3A8                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000F3A8 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000F3A8
.text$mn:0000F3A8 var_4           = dword ptr -4
.text$mn:0000F3A8
.text$mn:0000F3A8                 push    ebp
.text$mn:0000F3A9                 mov     ebp, esp
.text$mn:0000F3AB                 push    ecx
.text$mn:0000F3AC                 mov     [ebp+var_4], ecx
.text$mn:0000F3AF                 mov     eax, [ebp+var_4]
.text$mn:0000F3B2                 mov     eax, [eax]
.text$mn:0000F3B4                 mov     esp, ebp
.text$mn:0000F3B6                 pop     ebp
.text$mn:0000F3B7                 retn
.text$mn:0000F3B7 ?value@error_code@std@@QBEHXZ endp
.text$mn:0000F3B7
.text$mn:0000F3B7 _text$mn        ends
.text$mn:0000F3B7
.text$mn:0000F3B8 ; ===========================================================================
.text$mn:0000F3B8
.text$mn:0000F3B8 ; Segment type: Pure code
.text$mn:0000F3B8 ; Segment permissions: Read/Execute
.text$mn:0000F3B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000F3B8                 assume cs:_text$mn
.text$mn:0000F3B8                 ;org 0F3B8h
.text$mn:0000F3B8 ; COMDAT (pick any)
.text$mn:0000F3B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F3B8
.text$mn:0000F3B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F3B8
.text$mn:0000F3B8 ; Attributes: bp-based frame
.text$mn:0000F3B8
.text$mn:0000F3B8 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000F3B8                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000F3B8 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000F3B8                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000F3B8                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000F3B8
.text$mn:0000F3B8 var_4           = dword ptr -4
.text$mn:0000F3B8
.text$mn:0000F3B8                 push    ebp
.text$mn:0000F3B9                 mov     ebp, esp
.text$mn:0000F3BB                 push    ecx
.text$mn:0000F3BC                 mov     [ebp+var_4], ecx
.text$mn:0000F3BF                 mov     eax, [ebp+var_4]
.text$mn:0000F3C2                 mov     eax, [eax]
.text$mn:0000F3C4                 mov     esp, ebp
.text$mn:0000F3C6                 pop     ebp
.text$mn:0000F3C7                 retn
.text$mn:0000F3C7 ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000F3C7
.text$mn:0000F3C7 _text$mn        ends
.text$mn:0000F3C7
.text$mn:0000F3C8 ; ===========================================================================
.text$mn:0000F3C8
.text$mn:0000F3C8 ; Segment type: Pure code
.text$mn:0000F3C8 ; Segment permissions: Read/Execute
.text$mn:0000F3C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000F3C8                 assume cs:_text$mn
.text$mn:0000F3C8                 ;org 0F3C8h
.text$mn:0000F3C8 ; COMDAT (pick any)
.text$mn:0000F3C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F3C8
.text$mn:0000F3C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F3C8
.text$mn:0000F3C8 ; Attributes: bp-based frame
.text$mn:0000F3C8
.text$mn:0000F3C8                 public _hypot
.text$mn:0000F3C8 _hypot          proc near
.text$mn:0000F3C8
.text$mn:0000F3C8 var_10          = qword ptr -10h
.text$mn:0000F3C8 var_8           = qword ptr -8
.text$mn:0000F3C8 arg_0           = qword ptr  8
.text$mn:0000F3C8 arg_8           = qword ptr  10h
.text$mn:0000F3C8
.text$mn:0000F3C8                 push    ebp
.text$mn:0000F3C9                 mov     ebp, esp
.text$mn:0000F3CB                 sub     esp, 8
.text$mn:0000F3CE                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000F3D3                 movsd   [esp+8+var_8], xmm0
.text$mn:0000F3D8                 sub     esp, 8
.text$mn:0000F3DB                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000F3E0                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000F3E5                 call    __hypot
.text$mn:0000F3EA                 add     esp, 10h
.text$mn:0000F3ED                 pop     ebp
.text$mn:0000F3EE                 retn
.text$mn:0000F3EE _hypot          endp
.text$mn:0000F3EE
.text$mn:0000F3EE ; ---------------------------------------------------------------------------
.text$mn:0000F3EF                 align 10h
.text$mn:0000F3EF _text$mn        ends
.text$mn:0000F3EF
.text$mn:0000F3F0 ; ===========================================================================
.text$mn:0000F3F0
.text$mn:0000F3F0 ; Segment type: Pure code
.text$mn:0000F3F0 ; Segment permissions: Read/Execute
.text$mn:0000F3F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000F3F0                 assume cs:_text$mn
.text$mn:0000F3F0                 ;org 0F3F0h
.text$mn:0000F3F0 ; COMDAT (pick any)
.text$mn:0000F3F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F3F0
.text$mn:0000F3F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F3F0
.text$mn:0000F3F0 ; Attributes: bp-based frame
.text$mn:0000F3F0
.text$mn:0000F3F0                 public _wmemchr
.text$mn:0000F3F0 _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000F3F0
.text$mn:0000F3F0 arg_0           = dword ptr  8
.text$mn:0000F3F0 arg_4           = word ptr  0Ch
.text$mn:0000F3F0 arg_8           = dword ptr  10h
.text$mn:0000F3F0
.text$mn:0000F3F0                 push    ebp
.text$mn:0000F3F1                 mov     ebp, esp
.text$mn:0000F3F3                 jmp     short loc_F407
.text$mn:0000F3F5 ; ---------------------------------------------------------------------------
.text$mn:0000F3F5
.text$mn:0000F3F5 loc_F3F5:                               ; CODE XREF: _wmemchr:loc_F420j
.text$mn:0000F3F5                 mov     eax, [ebp+arg_0]
.text$mn:0000F3F8                 add     eax, 2
.text$mn:0000F3FB                 mov     [ebp+arg_0], eax
.text$mn:0000F3FE                 mov     ecx, [ebp+arg_8]
.text$mn:0000F401                 sub     ecx, 1
.text$mn:0000F404                 mov     [ebp+arg_8], ecx
.text$mn:0000F407
.text$mn:0000F407 loc_F407:                               ; CODE XREF: _wmemchr+3j
.text$mn:0000F407                 cmp     [ebp+arg_8], 0
.text$mn:0000F40B                 jbe     short loc_F422
.text$mn:0000F40D                 mov     edx, [ebp+arg_0]
.text$mn:0000F410                 movzx   eax, word ptr [edx]
.text$mn:0000F413                 movzx   ecx, [ebp+arg_4]
.text$mn:0000F417                 cmp     eax, ecx
.text$mn:0000F419                 jnz     short loc_F420
.text$mn:0000F41B                 mov     eax, [ebp+arg_0]
.text$mn:0000F41E                 jmp     short loc_F424
.text$mn:0000F420 ; ---------------------------------------------------------------------------
.text$mn:0000F420
.text$mn:0000F420 loc_F420:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000F420                 jmp     short loc_F3F5
.text$mn:0000F422 ; ---------------------------------------------------------------------------
.text$mn:0000F422
.text$mn:0000F422 loc_F422:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000F422                 xor     eax, eax
.text$mn:0000F424
.text$mn:0000F424 loc_F424:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:0000F424                 pop     ebp
.text$mn:0000F425                 retn
.text$mn:0000F425 _wmemchr        endp
.text$mn:0000F425
.text$mn:0000F425 ; ---------------------------------------------------------------------------
.text$mn:0000F426                 align 4
.text$mn:0000F426 _text$mn        ends
.text$mn:0000F426
.text$mn:0000F428 ; ===========================================================================
.text$mn:0000F428
.text$mn:0000F428 ; Segment type: Pure code
.text$mn:0000F428 ; Segment permissions: Read/Execute
.text$mn:0000F428 _text$mn        segment para public 'CODE' use32
.text$mn:0000F428                 assume cs:_text$mn
.text$mn:0000F428                 ;org 0F428h
.text$mn:0000F428 ; COMDAT (pick any)
.text$mn:0000F428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F428
.text$mn:0000F428 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F428
.text$mn:0000F428 ; Attributes: bp-based frame
.text$mn:0000F428
.text$mn:0000F428                 public _wmemcmp
.text$mn:0000F428 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000F428
.text$mn:0000F428 var_4           = dword ptr -4
.text$mn:0000F428 arg_0           = dword ptr  8
.text$mn:0000F428 arg_4           = dword ptr  0Ch
.text$mn:0000F428 arg_8           = dword ptr  10h
.text$mn:0000F428
.text$mn:0000F428                 push    ebp
.text$mn:0000F429                 mov     ebp, esp
.text$mn:0000F42B                 push    ecx
.text$mn:0000F42C                 jmp     short loc_F449
.text$mn:0000F42E ; ---------------------------------------------------------------------------
.text$mn:0000F42E
.text$mn:0000F42E loc_F42E:                               ; CODE XREF: _wmemcmp:loc_F484j
.text$mn:0000F42E                 mov     eax, [ebp+arg_0]
.text$mn:0000F431                 add     eax, 2
.text$mn:0000F434                 mov     [ebp+arg_0], eax
.text$mn:0000F437                 mov     ecx, [ebp+arg_4]
.text$mn:0000F43A                 add     ecx, 2
.text$mn:0000F43D                 mov     [ebp+arg_4], ecx
.text$mn:0000F440                 mov     edx, [ebp+arg_8]
.text$mn:0000F443                 sub     edx, 1
.text$mn:0000F446                 mov     [ebp+arg_8], edx
.text$mn:0000F449
.text$mn:0000F449 loc_F449:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000F449                 cmp     [ebp+arg_8], 0
.text$mn:0000F44D                 jbe     short loc_F486
.text$mn:0000F44F                 mov     eax, [ebp+arg_0]
.text$mn:0000F452                 movzx   ecx, word ptr [eax]
.text$mn:0000F455                 mov     edx, [ebp+arg_4]
.text$mn:0000F458                 movzx   eax, word ptr [edx]
.text$mn:0000F45B                 cmp     ecx, eax
.text$mn:0000F45D                 jz      short loc_F484
.text$mn:0000F45F                 mov     ecx, [ebp+arg_0]
.text$mn:0000F462                 movzx   edx, word ptr [ecx]
.text$mn:0000F465                 mov     eax, [ebp+arg_4]
.text$mn:0000F468                 movzx   ecx, word ptr [eax]
.text$mn:0000F46B                 cmp     edx, ecx
.text$mn:0000F46D                 jge     short loc_F478
.text$mn:0000F46F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000F476                 jmp     short loc_F47F
.text$mn:0000F478 ; ---------------------------------------------------------------------------
.text$mn:0000F478
.text$mn:0000F478 loc_F478:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000F478                 mov     [ebp+var_4], 1
.text$mn:0000F47F
.text$mn:0000F47F loc_F47F:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000F47F                 mov     eax, [ebp+var_4]
.text$mn:0000F482                 jmp     short loc_F488
.text$mn:0000F484 ; ---------------------------------------------------------------------------
.text$mn:0000F484
.text$mn:0000F484 loc_F484:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000F484                 jmp     short loc_F42E
.text$mn:0000F486 ; ---------------------------------------------------------------------------
.text$mn:0000F486
.text$mn:0000F486 loc_F486:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000F486                 xor     eax, eax
.text$mn:0000F488
.text$mn:0000F488 loc_F488:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000F488                 mov     esp, ebp
.text$mn:0000F48A                 pop     ebp
.text$mn:0000F48B                 retn
.text$mn:0000F48B _wmemcmp        endp
.text$mn:0000F48B
.text$mn:0000F48B _text$mn        ends
.text$mn:0000F48B
.text$mn:0000F48C ; ===========================================================================
.text$mn:0000F48C
.text$mn:0000F48C ; Segment type: Pure code
.text$mn:0000F48C ; Segment permissions: Read/Execute
.text$mn:0000F48C _text$mn        segment para public 'CODE' use32
.text$mn:0000F48C                 assume cs:_text$mn
.text$mn:0000F48C                 ;org 0F48Ch
.text$mn:0000F48C ; COMDAT (pick any)
.text$mn:0000F48C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F48C
.text$mn:0000F48C ; =============== S U B R O U T I N E =======================================
.text$mn:0000F48C
.text$mn:0000F48C ; Attributes: bp-based frame
.text$mn:0000F48C
.text$mn:0000F48C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000F48C                 public _wmemcpy
.text$mn:0000F48C _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000F48C
.text$mn:0000F48C Dst             = dword ptr  8
.text$mn:0000F48C Src             = dword ptr  0Ch
.text$mn:0000F48C arg_8           = dword ptr  10h
.text$mn:0000F48C
.text$mn:0000F48C                 push    ebp
.text$mn:0000F48D                 mov     ebp, esp
.text$mn:0000F48F                 mov     eax, [ebp+arg_8]
.text$mn:0000F492                 shl     eax, 1
.text$mn:0000F494                 push    eax             ; Size
.text$mn:0000F495                 mov     ecx, [ebp+Src]
.text$mn:0000F498                 push    ecx             ; Src
.text$mn:0000F499                 mov     edx, [ebp+Dst]
.text$mn:0000F49C                 push    edx             ; Dst
.text$mn:0000F49D                 call    _memcpy
.text$mn:0000F4A2                 add     esp, 0Ch
.text$mn:0000F4A5                 pop     ebp
.text$mn:0000F4A6                 retn
.text$mn:0000F4A6 _wmemcpy        endp
.text$mn:0000F4A6
.text$mn:0000F4A6 ; ---------------------------------------------------------------------------
.text$mn:0000F4A7                 align 4
.text$mn:0000F4A7 _text$mn        ends
.text$mn:0000F4A7
.text$mn:0000F4A8 ; ===========================================================================
.text$mn:0000F4A8
.text$mn:0000F4A8 ; Segment type: Pure code
.text$mn:0000F4A8 ; Segment permissions: Read/Execute
.text$mn:0000F4A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000F4A8                 assume cs:_text$mn
.text$mn:0000F4A8                 ;org 0F4A8h
.text$mn:0000F4A8 ; COMDAT (pick any)
.text$mn:0000F4A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000F4A8
.text$mn:0000F4A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000F4A8
.text$mn:0000F4A8 ; Attributes: bp-based frame
.text$mn:0000F4A8
.text$mn:0000F4A8 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000F4A8                 public _wmemmove
.text$mn:0000F4A8 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000F4A8
.text$mn:0000F4A8 Dst             = dword ptr  8
.text$mn:0000F4A8 Src             = dword ptr  0Ch
.text$mn:0000F4A8 arg_8           = dword ptr  10h
.text$mn:0000F4A8
.text$mn:0000F4A8                 push    ebp
.text$mn:0000F4A9                 mov     ebp, esp
.text$mn:0000F4AB                 mov     eax, [ebp+arg_8]
.text$mn:0000F4AE                 shl     eax, 1
.text$mn:0000F4B0                 push    eax             ; Size
.text$mn:0000F4B1                 mov     ecx, [ebp+Src]
.text$mn:0000F4B4                 push    ecx             ; Src
.text$mn:0000F4B5                 mov     edx, [ebp+Dst]
.text$mn:0000F4B8                 push    edx             ; Dst
.text$mn:0000F4B9                 call    _memmove
.text$mn:0000F4BE                 add     esp, 0Ch
.text$mn:0000F4C1                 pop     ebp
.text$mn:0000F4C2                 retn
.text$mn:0000F4C2 _wmemmove       endp
.text$mn:0000F4C2
.text$mn:0000F4C2 ; ---------------------------------------------------------------------------
.text$mn:0000F4C3                 align 4
.text$mn:0000F4C3 _text$mn        ends
.text$mn:0000F4C3
.xdata$x:0000F4C4 ; ===========================================================================
.xdata$x:0000F4C4
.xdata$x:0000F4C4 ; Segment type: Pure data
.xdata$x:0000F4C4 ; Segment permissions: Read
.xdata$x:0000F4C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F4C4                 assume cs:_xdata$x
.xdata$x:0000F4C4                 ;org 0F4C4h
.xdata$x:0000F4C4 ; COMDAT (pick associative to section at B95C)
.xdata$x:0000F4C4 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000F4C4                                         ; DATA XREF: .xdata$x:0000F4D4o
.xdata$x:0000F4C5                 db 0FFh
.xdata$x:0000F4C6                 db 0FFh
.xdata$x:0000F4C7                 db 0FFh
.xdata$x:0000F4C8                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000F4CC __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000F4CC                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000F4CD                 db    5
.xdata$x:0000F4CE                 db  93h ; ô
.xdata$x:0000F4CF                 db  19h
.xdata$x:0000F4D0                 db    1
.xdata$x:0000F4D1                 db    0
.xdata$x:0000F4D2                 db    0
.xdata$x:0000F4D3                 db    0
.xdata$x:0000F4D4                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000F4D8                 db    0
.xdata$x:0000F4D9                 db    0
.xdata$x:0000F4DA                 db    0
.xdata$x:0000F4DB                 db    0
.xdata$x:0000F4DC                 db    0
.xdata$x:0000F4DD                 db    0
.xdata$x:0000F4DE                 db    0
.xdata$x:0000F4DF                 db    0
.xdata$x:0000F4E0                 db    0
.xdata$x:0000F4E1                 db    0
.xdata$x:0000F4E2                 db    0
.xdata$x:0000F4E3                 db    0
.xdata$x:0000F4E4                 db    0
.xdata$x:0000F4E5                 db    0
.xdata$x:0000F4E6                 db    0
.xdata$x:0000F4E7                 db    0
.xdata$x:0000F4E8                 db    0
.xdata$x:0000F4E9                 db    0
.xdata$x:0000F4EA                 db    0
.xdata$x:0000F4EB                 db    0
.xdata$x:0000F4EC                 db    0
.xdata$x:0000F4ED                 db    0
.xdata$x:0000F4EE                 db    0
.xdata$x:0000F4EF                 db    0
.xdata$x:0000F4EF _xdata$x        ends
.xdata$x:0000F4EF
.xdata$x:0000F4F0 ; ===========================================================================
.xdata$x:0000F4F0
.xdata$x:0000F4F0 ; Segment type: Pure data
.xdata$x:0000F4F0 ; Segment permissions: Read
.xdata$x:0000F4F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F4F0                 assume cs:_xdata$x
.xdata$x:0000F4F0                 ;org 0F4F0h
.xdata$x:0000F4F0 ; COMDAT (pick associative to section at C064)
.xdata$x:0000F4F0 __unwindtable$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z db 0FFh
.xdata$x:0000F4F0                                         ; DATA XREF: .xdata$x:0000F500o
.xdata$x:0000F4F1                 db 0FFh
.xdata$x:0000F4F2                 db 0FFh
.xdata$x:0000F4F3                 db 0FFh
.xdata$x:0000F4F4                 dd offset __unwindfunclet$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z$0
.xdata$x:0000F4F8 __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z db  22h ; "
.xdata$x:0000F4F8                                         ; DATA XREF: __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z+11o
.xdata$x:0000F4F9                 db    5
.xdata$x:0000F4FA                 db  93h ; ô
.xdata$x:0000F4FB                 db  19h
.xdata$x:0000F4FC                 db    1
.xdata$x:0000F4FD                 db    0
.xdata$x:0000F4FE                 db    0
.xdata$x:0000F4FF                 db    0
.xdata$x:0000F500                 dd offset __unwindtable$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
.xdata$x:0000F504                 db    0
.xdata$x:0000F505                 db    0
.xdata$x:0000F506                 db    0
.xdata$x:0000F507                 db    0
.xdata$x:0000F508                 db    0
.xdata$x:0000F509                 db    0
.xdata$x:0000F50A                 db    0
.xdata$x:0000F50B                 db    0
.xdata$x:0000F50C                 db    0
.xdata$x:0000F50D                 db    0
.xdata$x:0000F50E                 db    0
.xdata$x:0000F50F                 db    0
.xdata$x:0000F510                 db    0
.xdata$x:0000F511                 db    0
.xdata$x:0000F512                 db    0
.xdata$x:0000F513                 db    0
.xdata$x:0000F514                 db    0
.xdata$x:0000F515                 db    0
.xdata$x:0000F516                 db    0
.xdata$x:0000F517                 db    0
.xdata$x:0000F518                 db    0
.xdata$x:0000F519                 db    0
.xdata$x:0000F51A                 db    0
.xdata$x:0000F51B                 db    0
.xdata$x:0000F51B _xdata$x        ends
.xdata$x:0000F51B
.xdata$x:0000F51C ; ===========================================================================
.xdata$x:0000F51C
.xdata$x:0000F51C ; Segment type: Pure data
.xdata$x:0000F51C ; Segment permissions: Read
.xdata$x:0000F51C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F51C                 assume cs:_xdata$x
.xdata$x:0000F51C                 ;org 0F51Ch
.xdata$x:0000F51C ; COMDAT (pick associative to section at 9B4C)
.xdata$x:0000F51C __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000F51C                                         ; DATA XREF: .xdata$x:0000F52Co
.xdata$x:0000F51D                 db 0FFh
.xdata$x:0000F51E                 db 0FFh
.xdata$x:0000F51F                 db 0FFh
.xdata$x:0000F520                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000F524 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000F524                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000F525                 db    5
.xdata$x:0000F526                 db  93h ; ô
.xdata$x:0000F527                 db  19h
.xdata$x:0000F528                 db    1
.xdata$x:0000F529                 db    0
.xdata$x:0000F52A                 db    0
.xdata$x:0000F52B                 db    0
.xdata$x:0000F52C                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:0000F530                 db    0
.xdata$x:0000F531                 db    0
.xdata$x:0000F532                 db    0
.xdata$x:0000F533                 db    0
.xdata$x:0000F534                 db    0
.xdata$x:0000F535                 db    0
.xdata$x:0000F536                 db    0
.xdata$x:0000F537                 db    0
.xdata$x:0000F538                 db    0
.xdata$x:0000F539                 db    0
.xdata$x:0000F53A                 db    0
.xdata$x:0000F53B                 db    0
.xdata$x:0000F53C                 db    0
.xdata$x:0000F53D                 db    0
.xdata$x:0000F53E                 db    0
.xdata$x:0000F53F                 db    0
.xdata$x:0000F540                 db    0
.xdata$x:0000F541                 db    0
.xdata$x:0000F542                 db    0
.xdata$x:0000F543                 db    0
.xdata$x:0000F544                 db    0
.xdata$x:0000F545                 db    0
.xdata$x:0000F546                 db    0
.xdata$x:0000F547                 db    0
.xdata$x:0000F547 _xdata$x        ends
.xdata$x:0000F547
.xdata$x:0000F548 ; ===========================================================================
.xdata$x:0000F548
.xdata$x:0000F548 ; Segment type: Pure data
.xdata$x:0000F548 ; Segment permissions: Read
.xdata$x:0000F548 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F548                 assume cs:_xdata$x
.xdata$x:0000F548                 ;org 0F548h
.xdata$x:0000F548 ; COMDAT (pick associative to section at 9588)
.xdata$x:0000F548 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:0000F548                                         ; DATA XREF: .xdata$x:0000F558o
.xdata$x:0000F549                 db 0FFh
.xdata$x:0000F54A                 db 0FFh
.xdata$x:0000F54B                 db 0FFh
.xdata$x:0000F54C                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:0000F550 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:0000F550                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:0000F551                 db    5
.xdata$x:0000F552                 db  93h ; ô
.xdata$x:0000F553                 db  19h
.xdata$x:0000F554                 db    1
.xdata$x:0000F555                 db    0
.xdata$x:0000F556                 db    0
.xdata$x:0000F557                 db    0
.xdata$x:0000F558                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000F55C                 db    0
.xdata$x:0000F55D                 db    0
.xdata$x:0000F55E                 db    0
.xdata$x:0000F55F                 db    0
.xdata$x:0000F560                 db    0
.xdata$x:0000F561                 db    0
.xdata$x:0000F562                 db    0
.xdata$x:0000F563                 db    0
.xdata$x:0000F564                 db    0
.xdata$x:0000F565                 db    0
.xdata$x:0000F566                 db    0
.xdata$x:0000F567                 db    0
.xdata$x:0000F568                 db    0
.xdata$x:0000F569                 db    0
.xdata$x:0000F56A                 db    0
.xdata$x:0000F56B                 db    0
.xdata$x:0000F56C                 db    0
.xdata$x:0000F56D                 db    0
.xdata$x:0000F56E                 db    0
.xdata$x:0000F56F                 db    0
.xdata$x:0000F570                 db    0
.xdata$x:0000F571                 db    0
.xdata$x:0000F572                 db    0
.xdata$x:0000F573                 db    0
.xdata$x:0000F573 _xdata$x        ends
.xdata$x:0000F573
.xdata$x:0000F574 ; ===========================================================================
.xdata$x:0000F574
.xdata$x:0000F574 ; Segment type: Pure data
.xdata$x:0000F574 ; Segment permissions: Read
.xdata$x:0000F574 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F574                 assume cs:_xdata$x
.xdata$x:0000F574                 ;org 0F574h
.xdata$x:0000F574 ; COMDAT (pick associative to section at A768)
.xdata$x:0000F574 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000F574                                         ; DATA XREF: .xdata$x:0000F58Co
.xdata$x:0000F575                 db 0FFh
.xdata$x:0000F576                 db 0FFh
.xdata$x:0000F577                 db 0FFh
.xdata$x:0000F578                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000F57C                 db 0FFh
.xdata$x:0000F57D                 db 0FFh
.xdata$x:0000F57E                 db 0FFh
.xdata$x:0000F57F                 db 0FFh
.xdata$x:0000F580                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:0000F584 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:0000F584                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:0000F585                 db    5
.xdata$x:0000F586                 db  93h ; ô
.xdata$x:0000F587                 db  19h
.xdata$x:0000F588                 db    2
.xdata$x:0000F589                 db    0
.xdata$x:0000F58A                 db    0
.xdata$x:0000F58B                 db    0
.xdata$x:0000F58C                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000F590                 db    0
.xdata$x:0000F591                 db    0
.xdata$x:0000F592                 db    0
.xdata$x:0000F593                 db    0
.xdata$x:0000F594                 db    0
.xdata$x:0000F595                 db    0
.xdata$x:0000F596                 db    0
.xdata$x:0000F597                 db    0
.xdata$x:0000F598                 db    0
.xdata$x:0000F599                 db    0
.xdata$x:0000F59A                 db    0
.xdata$x:0000F59B                 db    0
.xdata$x:0000F59C                 db    0
.xdata$x:0000F59D                 db    0
.xdata$x:0000F59E                 db    0
.xdata$x:0000F59F                 db    0
.xdata$x:0000F5A0                 db    0
.xdata$x:0000F5A1                 db    0
.xdata$x:0000F5A2                 db    0
.xdata$x:0000F5A3                 db    0
.xdata$x:0000F5A4                 db    0
.xdata$x:0000F5A5                 db    0
.xdata$x:0000F5A6                 db    0
.xdata$x:0000F5A7                 db    0
.xdata$x:0000F5A7 _xdata$x        ends
.xdata$x:0000F5A7
.xdata$x:0000F5A8 ; ===========================================================================
.xdata$x:0000F5A8
.xdata$x:0000F5A8 ; Segment type: Pure data
.xdata$x:0000F5A8 ; Segment permissions: Read
.xdata$x:0000F5A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F5A8                 assume cs:_xdata$x
.xdata$x:0000F5A8                 ;org 0F5A8h
.xdata$x:0000F5A8 ; COMDAT (pick associative to section at 7968)
.xdata$x:0000F5A8 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F5A8                                         ; DATA XREF: .xdata$x:0000F5B8o
.xdata$x:0000F5A9                 db 0FFh
.xdata$x:0000F5AA                 db 0FFh
.xdata$x:0000F5AB                 db 0FFh
.xdata$x:0000F5AC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000F5B0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F5B0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000F5B1                 db    5
.xdata$x:0000F5B2                 db  93h ; ô
.xdata$x:0000F5B3                 db  19h
.xdata$x:0000F5B4                 db    1
.xdata$x:0000F5B5                 db    0
.xdata$x:0000F5B6                 db    0
.xdata$x:0000F5B7                 db    0
.xdata$x:0000F5B8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000F5BC                 db    0
.xdata$x:0000F5BD                 db    0
.xdata$x:0000F5BE                 db    0
.xdata$x:0000F5BF                 db    0
.xdata$x:0000F5C0                 db    0
.xdata$x:0000F5C1                 db    0
.xdata$x:0000F5C2                 db    0
.xdata$x:0000F5C3                 db    0
.xdata$x:0000F5C4                 db    0
.xdata$x:0000F5C5                 db    0
.xdata$x:0000F5C6                 db    0
.xdata$x:0000F5C7                 db    0
.xdata$x:0000F5C8                 db    0
.xdata$x:0000F5C9                 db    0
.xdata$x:0000F5CA                 db    0
.xdata$x:0000F5CB                 db    0
.xdata$x:0000F5CC                 db    0
.xdata$x:0000F5CD                 db    0
.xdata$x:0000F5CE                 db    0
.xdata$x:0000F5CF                 db    0
.xdata$x:0000F5D0                 db    0
.xdata$x:0000F5D1                 db    0
.xdata$x:0000F5D2                 db    0
.xdata$x:0000F5D3                 db    0
.xdata$x:0000F5D3 _xdata$x        ends
.xdata$x:0000F5D3
.xdata$x:0000F5D4 ; ===========================================================================
.xdata$x:0000F5D4
.xdata$x:0000F5D4 ; Segment type: Pure data
.xdata$x:0000F5D4 ; Segment permissions: Read
.xdata$x:0000F5D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F5D4                 assume cs:_xdata$x
.xdata$x:0000F5D4                 ;org 0F5D4h
.xdata$x:0000F5D4 ; COMDAT (pick associative to section at 8EC0)
.xdata$x:0000F5D4 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F5D4                                         ; DATA XREF: .xdata$x:0000F5E4o
.xdata$x:0000F5D5                 db 0FFh
.xdata$x:0000F5D6                 db 0FFh
.xdata$x:0000F5D7                 db 0FFh
.xdata$x:0000F5D8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000F5DC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F5DC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000F5DD                 db    5
.xdata$x:0000F5DE                 db  93h ; ô
.xdata$x:0000F5DF                 db  19h
.xdata$x:0000F5E0                 db    1
.xdata$x:0000F5E1                 db    0
.xdata$x:0000F5E2                 db    0
.xdata$x:0000F5E3                 db    0
.xdata$x:0000F5E4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000F5E8                 align 20h
.xdata$x:0000F5E8 _xdata$x        ends
.xdata$x:0000F5E8
.xdata$x:0000F600 ; ===========================================================================
.xdata$x:0000F600
.xdata$x:0000F600 ; Segment type: Pure data
.xdata$x:0000F600 ; Segment permissions: Read
.xdata$x:0000F600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F600                 assume cs:_xdata$x
.xdata$x:0000F600                 ;org 0F600h
.xdata$x:0000F600 ; COMDAT (pick associative to section at 766C)
.xdata$x:0000F600 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000F600                                         ; DATA XREF: .xdata$x:0000F610o
.xdata$x:0000F601                 db 0FFh
.xdata$x:0000F602                 db 0FFh
.xdata$x:0000F603                 db 0FFh
.xdata$x:0000F604                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000F608 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000F608                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000F609                 db    5
.xdata$x:0000F60A                 db  93h ; ô
.xdata$x:0000F60B                 db  19h
.xdata$x:0000F60C                 db    1
.xdata$x:0000F60D                 db    0
.xdata$x:0000F60E                 db    0
.xdata$x:0000F60F                 db    0
.xdata$x:0000F610                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000F614                 db    0
.xdata$x:0000F615                 db    0
.xdata$x:0000F616                 db    0
.xdata$x:0000F617                 db    0
.xdata$x:0000F618                 db    0
.xdata$x:0000F619                 db    0
.xdata$x:0000F61A                 db    0
.xdata$x:0000F61B                 db    0
.xdata$x:0000F61C                 db    0
.xdata$x:0000F61D                 db    0
.xdata$x:0000F61E                 db    0
.xdata$x:0000F61F                 db    0
.xdata$x:0000F620                 db    0
.xdata$x:0000F621                 db    0
.xdata$x:0000F622                 db    0
.xdata$x:0000F623                 db    0
.xdata$x:0000F624                 db    0
.xdata$x:0000F625                 db    0
.xdata$x:0000F626                 db    0
.xdata$x:0000F627                 db    0
.xdata$x:0000F628                 db    0
.xdata$x:0000F629                 db    0
.xdata$x:0000F62A                 db    0
.xdata$x:0000F62B                 db    0
.xdata$x:0000F62B _xdata$x        ends
.xdata$x:0000F62B
.xdata$x:0000F62C ; ===========================================================================
.xdata$x:0000F62C
.xdata$x:0000F62C ; Segment type: Pure data
.xdata$x:0000F62C ; Segment permissions: Read
.xdata$x:0000F62C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F62C                 assume cs:_xdata$x
.xdata$x:0000F62C                 ;org 0F62Ch
.xdata$x:0000F62C ; COMDAT (pick associative to section at 8CF0)
.xdata$x:0000F62C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F62C                                         ; DATA XREF: .xdata$x:0000F63Co
.xdata$x:0000F62D                 db 0FFh
.xdata$x:0000F62E                 db 0FFh
.xdata$x:0000F62F                 db 0FFh
.xdata$x:0000F630                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000F634 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F634                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000F635                 db    5
.xdata$x:0000F636                 db  93h ; ô
.xdata$x:0000F637                 db  19h
.xdata$x:0000F638                 db    1
.xdata$x:0000F639                 db    0
.xdata$x:0000F63A                 db    0
.xdata$x:0000F63B                 db    0
.xdata$x:0000F63C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000F640                 db    0
.xdata$x:0000F641                 db    0
.xdata$x:0000F642                 db    0
.xdata$x:0000F643                 db    0
.xdata$x:0000F644                 db    0
.xdata$x:0000F645                 db    0
.xdata$x:0000F646                 db    0
.xdata$x:0000F647                 db    0
.xdata$x:0000F648                 db    0
.xdata$x:0000F649                 db    0
.xdata$x:0000F64A                 db    0
.xdata$x:0000F64B                 db    0
.xdata$x:0000F64C                 db    0
.xdata$x:0000F64D                 db    0
.xdata$x:0000F64E                 db    0
.xdata$x:0000F64F                 db    0
.xdata$x:0000F650                 db    0
.xdata$x:0000F651                 db    0
.xdata$x:0000F652                 db    0
.xdata$x:0000F653                 db    0
.xdata$x:0000F654                 db    0
.xdata$x:0000F655                 db    0
.xdata$x:0000F656                 db    0
.xdata$x:0000F657                 db    0
.xdata$x:0000F657 _xdata$x        ends
.xdata$x:0000F657
.xdata$x:0000F658 ; ===========================================================================
.xdata$x:0000F658
.xdata$x:0000F658 ; Segment type: Pure data
.xdata$x:0000F658 ; Segment permissions: Read
.xdata$x:0000F658 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F658                 assume cs:_xdata$x
.xdata$x:0000F658                 ;org 0F658h
.xdata$x:0000F658 ; COMDAT (pick associative to section at 80C0)
.xdata$x:0000F658 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000F658                                         ; DATA XREF: .xdata$x:0000F668o
.xdata$x:0000F659                 db 0FFh
.xdata$x:0000F65A                 db 0FFh
.xdata$x:0000F65B                 db 0FFh
.xdata$x:0000F65C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000F660 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000F660                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000F661                 db    5
.xdata$x:0000F662                 db  93h ; ô
.xdata$x:0000F663                 db  19h
.xdata$x:0000F664                 db    1
.xdata$x:0000F665                 db    0
.xdata$x:0000F666                 db    0
.xdata$x:0000F667                 db    0
.xdata$x:0000F668                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000F66C                 db    0
.xdata$x:0000F66D                 db    0
.xdata$x:0000F66E                 db    0
.xdata$x:0000F66F                 db    0
.xdata$x:0000F670                 db    0
.xdata$x:0000F671                 db    0
.xdata$x:0000F672                 db    0
.xdata$x:0000F673                 db    0
.xdata$x:0000F674                 db    0
.xdata$x:0000F675                 db    0
.xdata$x:0000F676                 db    0
.xdata$x:0000F677                 db    0
.xdata$x:0000F678                 db    0
.xdata$x:0000F679                 db    0
.xdata$x:0000F67A                 db    0
.xdata$x:0000F67B                 db    0
.xdata$x:0000F67C                 db    0
.xdata$x:0000F67D                 db    0
.xdata$x:0000F67E                 db    0
.xdata$x:0000F67F                 db    0
.xdata$x:0000F680                 db    0
.xdata$x:0000F681                 db    0
.xdata$x:0000F682                 db    0
.xdata$x:0000F683                 db    0
.xdata$x:0000F683 _xdata$x        ends
.xdata$x:0000F683
.xdata$x:0000F684 ; ===========================================================================
.xdata$x:0000F684
.xdata$x:0000F684 ; Segment type: Pure data
.xdata$x:0000F684 ; Segment permissions: Read
.xdata$x:0000F684 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F684                 assume cs:_xdata$x
.xdata$x:0000F684                 ;org 0F684h
.xdata$x:0000F684 ; COMDAT (pick associative to section at 9270)
.xdata$x:0000F684 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000F684                                         ; DATA XREF: .xdata$x:0000F694o
.xdata$x:0000F685                 db 0FFh
.xdata$x:0000F686                 db 0FFh
.xdata$x:0000F687                 db 0FFh
.xdata$x:0000F688                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000F68C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F68C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000F68D                 db    5
.xdata$x:0000F68E                 db  93h ; ô
.xdata$x:0000F68F                 db  19h
.xdata$x:0000F690                 db    1
.xdata$x:0000F691                 db    0
.xdata$x:0000F692                 db    0
.xdata$x:0000F693                 db    0
.xdata$x:0000F694                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000F698                 db    0
.xdata$x:0000F699                 db    0
.xdata$x:0000F69A                 db    0
.xdata$x:0000F69B                 db    0
.xdata$x:0000F69C                 db    0
.xdata$x:0000F69D                 db    0
.xdata$x:0000F69E                 db    0
.xdata$x:0000F69F                 db    0
.xdata$x:0000F6A0                 db    0
.xdata$x:0000F6A1                 db    0
.xdata$x:0000F6A2                 db    0
.xdata$x:0000F6A3                 db    0
.xdata$x:0000F6A4                 db    0
.xdata$x:0000F6A5                 db    0
.xdata$x:0000F6A6                 db    0
.xdata$x:0000F6A7                 db    0
.xdata$x:0000F6A8                 db    0
.xdata$x:0000F6A9                 db    0
.xdata$x:0000F6AA                 db    0
.xdata$x:0000F6AB                 db    0
.xdata$x:0000F6AC                 db    0
.xdata$x:0000F6AD                 db    0
.xdata$x:0000F6AE                 db    0
.xdata$x:0000F6AF                 db    0
.xdata$x:0000F6AF _xdata$x        ends
.xdata$x:0000F6AF
.xdata$x:0000F6B0 ; ===========================================================================
.xdata$x:0000F6B0
.xdata$x:0000F6B0 ; Segment type: Pure data
.xdata$x:0000F6B0 ; Segment permissions: Read
.xdata$x:0000F6B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F6B0                 assume cs:_xdata$x
.xdata$x:0000F6B0                 ;org 0F6B0h
.xdata$x:0000F6B0 ; COMDAT (pick associative to section at AB14)
.xdata$x:0000F6B0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000F6B0                                         ; DATA XREF: .xdata$x:0000F738o
.xdata$x:0000F6B1                 db    0
.xdata$x:0000F6B2                 db    0
.xdata$x:0000F6B3                 db    0
.xdata$x:0000F6B4                 db    0
.xdata$x:0000F6B5                 db    0
.xdata$x:0000F6B6                 db    0
.xdata$x:0000F6B7                 db    0
.xdata$x:0000F6B8                 db    0
.xdata$x:0000F6B9                 db    0
.xdata$x:0000F6BA                 db    0
.xdata$x:0000F6BB                 db    0
.xdata$x:0000F6BC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000F6C0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000F6C0                                         ; DATA XREF: .xdata$x:0000F724o
.xdata$x:0000F6C1                 db    0
.xdata$x:0000F6C2                 db    0
.xdata$x:0000F6C3                 db    0
.xdata$x:0000F6C4                 db    0
.xdata$x:0000F6C5                 db    0
.xdata$x:0000F6C6                 db    0
.xdata$x:0000F6C7                 db    0
.xdata$x:0000F6C8                 db    0
.xdata$x:0000F6C9                 db    0
.xdata$x:0000F6CA                 db    0
.xdata$x:0000F6CB                 db    0
.xdata$x:0000F6CC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000F6D0 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000F6D0                                         ; DATA XREF: .xdata$x:0000F6F8o
.xdata$x:0000F6D1                 db 0FFh
.xdata$x:0000F6D2                 db 0FFh
.xdata$x:0000F6D3                 db 0FFh
.xdata$x:0000F6D4                 db    0
.xdata$x:0000F6D5                 db    0
.xdata$x:0000F6D6                 db    0
.xdata$x:0000F6D7                 db    0
.xdata$x:0000F6D8                 db 0FFh
.xdata$x:0000F6D9                 db 0FFh
.xdata$x:0000F6DA                 db 0FFh
.xdata$x:0000F6DB                 db 0FFh
.xdata$x:0000F6DC                 db    0
.xdata$x:0000F6DD                 db    0
.xdata$x:0000F6DE                 db    0
.xdata$x:0000F6DF                 db    0
.xdata$x:0000F6E0                 db    1
.xdata$x:0000F6E1                 db    0
.xdata$x:0000F6E2                 db    0
.xdata$x:0000F6E3                 db    0
.xdata$x:0000F6E4                 db    0
.xdata$x:0000F6E5                 db    0
.xdata$x:0000F6E6                 db    0
.xdata$x:0000F6E7                 db    0
.xdata$x:0000F6E8                 db    1
.xdata$x:0000F6E9                 db    0
.xdata$x:0000F6EA                 db    0
.xdata$x:0000F6EB                 db    0
.xdata$x:0000F6EC                 db    0
.xdata$x:0000F6ED                 db    0
.xdata$x:0000F6EE                 db    0
.xdata$x:0000F6EF                 db    0
.xdata$x:0000F6F0 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000F6F0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000F6F1                 db    5
.xdata$x:0000F6F2                 db  93h ; ô
.xdata$x:0000F6F3                 db  19h
.xdata$x:0000F6F4                 db    4
.xdata$x:0000F6F5                 db    0
.xdata$x:0000F6F6                 db    0
.xdata$x:0000F6F7                 db    0
.xdata$x:0000F6F8                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000F6FC                 db    2
.xdata$x:0000F6FD                 db    0
.xdata$x:0000F6FE                 db    0
.xdata$x:0000F6FF                 db    0
.xdata$x:0000F700                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000F704                 db    0
.xdata$x:0000F705                 db    0
.xdata$x:0000F706                 db    0
.xdata$x:0000F707                 db    0
.xdata$x:0000F708                 db    0
.xdata$x:0000F709                 db    0
.xdata$x:0000F70A                 db    0
.xdata$x:0000F70B                 db    0
.xdata$x:0000F70C                 db    0
.xdata$x:0000F70D                 db    0
.xdata$x:0000F70E                 db    0
.xdata$x:0000F70F                 db    0
.xdata$x:0000F710                 db    0
.xdata$x:0000F711                 db    0
.xdata$x:0000F712                 db    0
.xdata$x:0000F713                 db    0
.xdata$x:0000F714 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000F714                                         ; DATA XREF: .xdata$x:0000F700o
.xdata$x:0000F715                 db    0
.xdata$x:0000F716                 db    0
.xdata$x:0000F717                 db    0
.xdata$x:0000F718                 db    2
.xdata$x:0000F719                 db    0
.xdata$x:0000F71A                 db    0
.xdata$x:0000F71B                 db    0
.xdata$x:0000F71C                 db    3
.xdata$x:0000F71D                 db    0
.xdata$x:0000F71E                 db    0
.xdata$x:0000F71F                 db    0
.xdata$x:0000F720                 db    1
.xdata$x:0000F721                 db    0
.xdata$x:0000F722                 db    0
.xdata$x:0000F723                 db    0
.xdata$x:0000F724                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000F728                 align 10h
.xdata$x:0000F730                 db    3
.xdata$x:0000F731                 db    0
.xdata$x:0000F732                 db    0
.xdata$x:0000F733                 db    0
.xdata$x:0000F734                 db    1
.xdata$x:0000F735                 db    0
.xdata$x:0000F736                 db    0
.xdata$x:0000F737                 db    0
.xdata$x:0000F738                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000F738 _xdata$x        ends
.xdata$x:0000F738
.xdata$x:0000F73C ; ===========================================================================
.xdata$x:0000F73C
.xdata$x:0000F73C ; Segment type: Pure data
.xdata$x:0000F73C ; Segment permissions: Read
.xdata$x:0000F73C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F73C                 assume cs:_xdata$x
.xdata$x:0000F73C                 ;org 0F73Ch
.xdata$x:0000F73C ; COMDAT (pick associative to section at 8B1C)
.xdata$x:0000F73C __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000F73C                                         ; DATA XREF: .xdata$x:0000F74Co
.xdata$x:0000F73D                 db 0FFh
.xdata$x:0000F73E                 db 0FFh
.xdata$x:0000F73F                 db 0FFh
.xdata$x:0000F740                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:0000F744 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000F744                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:0000F745                 db    5
.xdata$x:0000F746                 db  93h ; ô
.xdata$x:0000F747                 db  19h
.xdata$x:0000F748                 db    1
.xdata$x:0000F749                 db    0
.xdata$x:0000F74A                 db    0
.xdata$x:0000F74B                 db    0
.xdata$x:0000F74C                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:0000F750                 db    0
.xdata$x:0000F751                 db    0
.xdata$x:0000F752                 db    0
.xdata$x:0000F753                 db    0
.xdata$x:0000F754                 db    0
.xdata$x:0000F755                 db    0
.xdata$x:0000F756                 db    0
.xdata$x:0000F757                 db    0
.xdata$x:0000F758                 db    0
.xdata$x:0000F759                 db    0
.xdata$x:0000F75A                 db    0
.xdata$x:0000F75B                 db    0
.xdata$x:0000F75C                 db    0
.xdata$x:0000F75D                 db    0
.xdata$x:0000F75E                 db    0
.xdata$x:0000F75F                 db    0
.xdata$x:0000F760                 db    0
.xdata$x:0000F761                 db    0
.xdata$x:0000F762                 db    0
.xdata$x:0000F763                 db    0
.xdata$x:0000F764                 db    0
.xdata$x:0000F765                 db    0
.xdata$x:0000F766                 db    0
.xdata$x:0000F767                 db    0
.xdata$x:0000F767 _xdata$x        ends
.xdata$x:0000F767
.xdata$x:0000F768 ; ===========================================================================
.xdata$x:0000F768
.xdata$x:0000F768 ; Segment type: Pure data
.xdata$x:0000F768 ; Segment permissions: Read
.xdata$x:0000F768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F768                 assume cs:_xdata$x
.xdata$x:0000F768                 ;org 0F768h
.xdata$x:0000F768 ; COMDAT (pick associative to section at 98CC)
.xdata$x:0000F768 __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:0000F768                                         ; DATA XREF: .xdata$x:0000F778o
.xdata$x:0000F769                 db 0FFh
.xdata$x:0000F76A                 db 0FFh
.xdata$x:0000F76B                 db 0FFh
.xdata$x:0000F76C                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:0000F770 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:0000F770                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:0000F771                 db    5
.xdata$x:0000F772                 db  93h ; ô
.xdata$x:0000F773                 db  19h
.xdata$x:0000F774                 db    1
.xdata$x:0000F775                 db    0
.xdata$x:0000F776                 db    0
.xdata$x:0000F777                 db    0
.xdata$x:0000F778                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:0000F77C                 db    0
.xdata$x:0000F77D                 db    0
.xdata$x:0000F77E                 db    0
.xdata$x:0000F77F                 db    0
.xdata$x:0000F780                 db    0
.xdata$x:0000F781                 db    0
.xdata$x:0000F782                 db    0
.xdata$x:0000F783                 db    0
.xdata$x:0000F784                 db    0
.xdata$x:0000F785                 db    0
.xdata$x:0000F786                 db    0
.xdata$x:0000F787                 db    0
.xdata$x:0000F788                 db    0
.xdata$x:0000F789                 db    0
.xdata$x:0000F78A                 db    0
.xdata$x:0000F78B                 db    0
.xdata$x:0000F78C                 db    0
.xdata$x:0000F78D                 db    0
.xdata$x:0000F78E                 db    0
.xdata$x:0000F78F                 db    0
.xdata$x:0000F790                 db    0
.xdata$x:0000F791                 db    0
.xdata$x:0000F792                 db    0
.xdata$x:0000F793                 db    0
.xdata$x:0000F793 _xdata$x        ends
.xdata$x:0000F793
.xdata$x:0000F794 ; ===========================================================================
.xdata$x:0000F794
.xdata$x:0000F794 ; Segment type: Pure data
.xdata$x:0000F794 ; Segment permissions: Read
.xdata$x:0000F794 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F794                 assume cs:_xdata$x
.xdata$x:0000F794                 ;org 0F794h
.xdata$x:0000F794 ; COMDAT (pick associative to section at 8A98)
.xdata$x:0000F794 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000F794                                         ; DATA XREF: .xdata$x:0000F7A4o
.xdata$x:0000F795                 db 0FFh
.xdata$x:0000F796                 db 0FFh
.xdata$x:0000F797                 db 0FFh
.xdata$x:0000F798                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000F79C __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000F79C                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000F79D                 db    5
.xdata$x:0000F79E                 db  93h ; ô
.xdata$x:0000F79F                 db  19h
.xdata$x:0000F7A0                 db    1
.xdata$x:0000F7A1                 db    0
.xdata$x:0000F7A2                 db    0
.xdata$x:0000F7A3                 db    0
.xdata$x:0000F7A4                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:0000F7A8                 align 20h
.xdata$x:0000F7A8 _xdata$x        ends
.xdata$x:0000F7A8
.xdata$x:0000F7C0 ; ===========================================================================
.xdata$x:0000F7C0
.xdata$x:0000F7C0 ; Segment type: Pure data
.xdata$x:0000F7C0 ; Segment permissions: Read
.xdata$x:0000F7C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F7C0                 assume cs:_xdata$x
.xdata$x:0000F7C0                 ;org 0F7C0h
.xdata$x:0000F7C0 ; COMDAT (pick associative to section at 874C)
.xdata$x:0000F7C0 __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000F7C0                                         ; DATA XREF: __ehhandler$??0_Locinfo@std@@QAE@PBD@Z+11o
.xdata$x:0000F7C1                 db    5
.xdata$x:0000F7C2                 db  93h ; ô
.xdata$x:0000F7C3                 db  19h
.xdata$x:0000F7C4                 db    7
.xdata$x:0000F7C5                 db    0
.xdata$x:0000F7C6                 db    0
.xdata$x:0000F7C7                 db    0
.xdata$x:0000F7C8                 dd offset __unwindtable$??0_Locinfo@std@@QAE@PBD@Z
.xdata$x:0000F7CC                 db    0
.xdata$x:0000F7CD                 db    0
.xdata$x:0000F7CE                 db    0
.xdata$x:0000F7CF                 db    0
.xdata$x:0000F7D0                 db    0
.xdata$x:0000F7D1                 db    0
.xdata$x:0000F7D2                 db    0
.xdata$x:0000F7D3                 db    0
.xdata$x:0000F7D4                 db    0
.xdata$x:0000F7D5                 db    0
.xdata$x:0000F7D6                 db    0
.xdata$x:0000F7D7                 db    0
.xdata$x:0000F7D8                 db    0
.xdata$x:0000F7D9                 db    0
.xdata$x:0000F7DA                 db    0
.xdata$x:0000F7DB                 db    0
.xdata$x:0000F7DC                 db    0
.xdata$x:0000F7DD                 db    0
.xdata$x:0000F7DE                 db    0
.xdata$x:0000F7DF                 db    0
.xdata$x:0000F7E0                 db    0
.xdata$x:0000F7E1                 db    0
.xdata$x:0000F7E2                 db    0
.xdata$x:0000F7E3                 db    0
.xdata$x:0000F7E4 __unwindtable$??0_Locinfo@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000F7E4                                         ; DATA XREF: .xdata$x:0000F7C8o
.xdata$x:0000F7E5                 db 0FFh
.xdata$x:0000F7E6                 db 0FFh
.xdata$x:0000F7E7                 db 0FFh
.xdata$x:0000F7E8                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
.xdata$x:0000F7EC                 align 10h
.xdata$x:0000F7F0                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
.xdata$x:0000F7F4                 db    1
.xdata$x:0000F7F5                 db    0
.xdata$x:0000F7F6                 db    0
.xdata$x:0000F7F7                 db    0
.xdata$x:0000F7F8                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
.xdata$x:0000F7FC                 db    2
.xdata$x:0000F7FD                 db    0
.xdata$x:0000F7FE                 db    0
.xdata$x:0000F7FF                 db    0
.xdata$x:0000F800                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
.xdata$x:0000F804                 db    3
.xdata$x:0000F805                 db    0
.xdata$x:0000F806                 db    0
.xdata$x:0000F807                 db    0
.xdata$x:0000F808                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
.xdata$x:0000F80C                 db    4
.xdata$x:0000F80D                 db    0
.xdata$x:0000F80E                 db    0
.xdata$x:0000F80F                 db    0
.xdata$x:0000F810                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
.xdata$x:0000F814                 db    5
.xdata$x:0000F815                 db    0
.xdata$x:0000F816                 db    0
.xdata$x:0000F817                 db    0
.xdata$x:0000F818                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
.xdata$x:0000F818 _xdata$x        ends
.xdata$x:0000F818
.xdata$x:0000F81C ; ===========================================================================
.xdata$x:0000F81C
.xdata$x:0000F81C ; Segment type: Pure data
.xdata$x:0000F81C ; Segment permissions: Read
.xdata$x:0000F81C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F81C                 assume cs:_xdata$x
.xdata$x:0000F81C                 ;org 0F81Ch
.xdata$x:0000F81C ; COMDAT (pick associative to section at 960C)
.xdata$x:0000F81C __ehfuncinfo$??1_Locinfo@std@@QAE@XZ db  22h ; "
.xdata$x:0000F81C                                         ; DATA XREF: __ehhandler$??1_Locinfo@std@@QAE@XZ+11o
.xdata$x:0000F81D                 db    5
.xdata$x:0000F81E                 db  93h ; ô
.xdata$x:0000F81F                 db  19h
.xdata$x:0000F820                 db    7
.xdata$x:0000F821                 db    0
.xdata$x:0000F822                 db    0
.xdata$x:0000F823                 db    0
.xdata$x:0000F824                 dd offset __unwindtable$??1_Locinfo@std@@QAE@XZ
.xdata$x:0000F828                 align 20h
.xdata$x:0000F840 __unwindtable$??1_Locinfo@std@@QAE@XZ db 0FFh
.xdata$x:0000F840                                         ; DATA XREF: .xdata$x:0000F824o
.xdata$x:0000F841                 db 0FFh
.xdata$x:0000F842                 db 0FFh
.xdata$x:0000F843                 db 0FFh
.xdata$x:0000F844                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
.xdata$x:0000F848                 db    0
.xdata$x:0000F849                 db    0
.xdata$x:0000F84A                 db    0
.xdata$x:0000F84B                 db    0
.xdata$x:0000F84C                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
.xdata$x:0000F850                 db    1
.xdata$x:0000F851                 db    0
.xdata$x:0000F852                 db    0
.xdata$x:0000F853                 db    0
.xdata$x:0000F854                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
.xdata$x:0000F858                 db    2
.xdata$x:0000F859                 db    0
.xdata$x:0000F85A                 db    0
.xdata$x:0000F85B                 db    0
.xdata$x:0000F85C                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
.xdata$x:0000F860                 db    3
.xdata$x:0000F861                 db    0
.xdata$x:0000F862                 db    0
.xdata$x:0000F863                 db    0
.xdata$x:0000F864                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
.xdata$x:0000F868                 db    4
.xdata$x:0000F869                 db    0
.xdata$x:0000F86A                 db    0
.xdata$x:0000F86B                 db    0
.xdata$x:0000F86C                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5
.xdata$x:0000F870                 db    5
.xdata$x:0000F871                 db    0
.xdata$x:0000F872                 db    0
.xdata$x:0000F873                 db    0
.xdata$x:0000F874                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6
.xdata$x:0000F874 _xdata$x        ends
.xdata$x:0000F874
.xdata$x:0000F878 ; ===========================================================================
.xdata$x:0000F878
.xdata$x:0000F878 ; Segment type: Pure data
.xdata$x:0000F878 ; Segment permissions: Read
.xdata$x:0000F878 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F878                 assume cs:_xdata$x
.xdata$x:0000F878                 ;org 0F878h
.xdata$x:0000F878 ; COMDAT (pick associative to section at 9FEC)
.xdata$x:0000F878 __unwindtable$??Bid@locale@std@@QAEIXZ db 0FFh
.xdata$x:0000F878                                         ; DATA XREF: .xdata$x:0000F888o
.xdata$x:0000F879                 db 0FFh
.xdata$x:0000F87A                 db 0FFh
.xdata$x:0000F87B                 db 0FFh
.xdata$x:0000F87C                 dd offset __unwindfunclet$??Bid@locale@std@@QAEIXZ$0
.xdata$x:0000F880 __ehfuncinfo$??Bid@locale@std@@QAEIXZ db  22h ; "
.xdata$x:0000F880                                         ; DATA XREF: __ehhandler$??Bid@locale@std@@QAEIXZ+11o
.xdata$x:0000F881                 db    5
.xdata$x:0000F882                 db  93h ; ô
.xdata$x:0000F883                 db  19h
.xdata$x:0000F884                 db    1
.xdata$x:0000F885                 db    0
.xdata$x:0000F886                 db    0
.xdata$x:0000F887                 db    0
.xdata$x:0000F888                 dd offset __unwindtable$??Bid@locale@std@@QAEIXZ
.xdata$x:0000F88C                 db    0
.xdata$x:0000F88D                 db    0
.xdata$x:0000F88E                 db    0
.xdata$x:0000F88F                 db    0
.xdata$x:0000F890                 db    0
.xdata$x:0000F891                 db    0
.xdata$x:0000F892                 db    0
.xdata$x:0000F893                 db    0
.xdata$x:0000F894                 db    0
.xdata$x:0000F895                 db    0
.xdata$x:0000F896                 db    0
.xdata$x:0000F897                 db    0
.xdata$x:0000F898                 db    0
.xdata$x:0000F899                 db    0
.xdata$x:0000F89A                 db    0
.xdata$x:0000F89B                 db    0
.xdata$x:0000F89C                 db    0
.xdata$x:0000F89D                 db    0
.xdata$x:0000F89E                 db    0
.xdata$x:0000F89F                 db    0
.xdata$x:0000F8A0                 db    0
.xdata$x:0000F8A1                 db    0
.xdata$x:0000F8A2                 db    0
.xdata$x:0000F8A3                 db    0
.xdata$x:0000F8A3 _xdata$x        ends
.xdata$x:0000F8A3
.xdata$x:0000F8A4 ; ===========================================================================
.xdata$x:0000F8A4
.xdata$x:0000F8A4 ; Segment type: Pure data
.xdata$x:0000F8A4 ; Segment permissions: Read
.xdata$x:0000F8A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F8A4                 assume cs:_xdata$x
.xdata$x:0000F8A4                 ;org 0F8A4h
.xdata$x:0000F8A4 ; COMDAT (pick associative to section at 89D0)
.xdata$x:0000F8A4 __unwindtable$??0facet@locale@std@@IAE@I@Z db 0FFh
.xdata$x:0000F8A4                                         ; DATA XREF: .xdata$x:0000F8B4o
.xdata$x:0000F8A5                 db 0FFh
.xdata$x:0000F8A6                 db 0FFh
.xdata$x:0000F8A7                 db 0FFh
.xdata$x:0000F8A8                 dd offset __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
.xdata$x:0000F8AC __ehfuncinfo$??0facet@locale@std@@IAE@I@Z db  22h ; "
.xdata$x:0000F8AC                                         ; DATA XREF: __ehhandler$??0facet@locale@std@@IAE@I@Z+11o
.xdata$x:0000F8AD                 db    5
.xdata$x:0000F8AE                 db  93h ; ô
.xdata$x:0000F8AF                 db  19h
.xdata$x:0000F8B0                 db    1
.xdata$x:0000F8B1                 db    0
.xdata$x:0000F8B2                 db    0
.xdata$x:0000F8B3                 db    0
.xdata$x:0000F8B4                 dd offset __unwindtable$??0facet@locale@std@@IAE@I@Z
.xdata$x:0000F8B8                 db    0
.xdata$x:0000F8B9                 db    0
.xdata$x:0000F8BA                 db    0
.xdata$x:0000F8BB                 db    0
.xdata$x:0000F8BC                 db    0
.xdata$x:0000F8BD                 db    0
.xdata$x:0000F8BE                 db    0
.xdata$x:0000F8BF                 db    0
.xdata$x:0000F8C0                 db    0
.xdata$x:0000F8C1                 db    0
.xdata$x:0000F8C2                 db    0
.xdata$x:0000F8C3                 db    0
.xdata$x:0000F8C4                 db    0
.xdata$x:0000F8C5                 db    0
.xdata$x:0000F8C6                 db    0
.xdata$x:0000F8C7                 db    0
.xdata$x:0000F8C8                 db    0
.xdata$x:0000F8C9                 db    0
.xdata$x:0000F8CA                 db    0
.xdata$x:0000F8CB                 db    0
.xdata$x:0000F8CC                 db    0
.xdata$x:0000F8CD                 db    0
.xdata$x:0000F8CE                 db    0
.xdata$x:0000F8CF                 db    0
.xdata$x:0000F8CF _xdata$x        ends
.xdata$x:0000F8CF
.xdata$x:0000F8D0 ; ===========================================================================
.xdata$x:0000F8D0
.xdata$x:0000F8D0 ; Segment type: Pure data
.xdata$x:0000F8D0 ; Segment permissions: Read
.xdata$x:0000F8D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F8D0                 assume cs:_xdata$x
.xdata$x:0000F8D0                 ;org 0F8D0h
.xdata$x:0000F8D0 ; COMDAT (pick associative to section at 9824)
.xdata$x:0000F8D0 __unwindtable$??1facet@locale@std@@MAE@XZ db 0FFh
.xdata$x:0000F8D0                                         ; DATA XREF: .xdata$x:0000F8E0o
.xdata$x:0000F8D1                 db 0FFh
.xdata$x:0000F8D2                 db 0FFh
.xdata$x:0000F8D3                 db 0FFh
.xdata$x:0000F8D4                 dd offset __unwindfunclet$??1facet@locale@std@@MAE@XZ$0
.xdata$x:0000F8D8 __ehfuncinfo$??1facet@locale@std@@MAE@XZ db  22h ; "
.xdata$x:0000F8D8                                         ; DATA XREF: __ehhandler$??1facet@locale@std@@MAE@XZ+11o
.xdata$x:0000F8D9                 db    5
.xdata$x:0000F8DA                 db  93h ; ô
.xdata$x:0000F8DB                 db  19h
.xdata$x:0000F8DC                 db    1
.xdata$x:0000F8DD                 db    0
.xdata$x:0000F8DE                 db    0
.xdata$x:0000F8DF                 db    0
.xdata$x:0000F8E0                 dd offset __unwindtable$??1facet@locale@std@@MAE@XZ
.xdata$x:0000F8E4                 db    0
.xdata$x:0000F8E5                 db    0
.xdata$x:0000F8E6                 db    0
.xdata$x:0000F8E7                 db    0
.xdata$x:0000F8E8                 db    0
.xdata$x:0000F8E9                 db    0
.xdata$x:0000F8EA                 db    0
.xdata$x:0000F8EB                 db    0
.xdata$x:0000F8EC                 db    0
.xdata$x:0000F8ED                 db    0
.xdata$x:0000F8EE                 db    0
.xdata$x:0000F8EF                 db    0
.xdata$x:0000F8F0                 db    0
.xdata$x:0000F8F1                 db    0
.xdata$x:0000F8F2                 db    0
.xdata$x:0000F8F3                 db    0
.xdata$x:0000F8F4                 db    0
.xdata$x:0000F8F5                 db    0
.xdata$x:0000F8F6                 db    0
.xdata$x:0000F8F7                 db    0
.xdata$x:0000F8F8                 db    0
.xdata$x:0000F8F9                 db    0
.xdata$x:0000F8FA                 db    0
.xdata$x:0000F8FB                 db    0
.xdata$x:0000F8FB _xdata$x        ends
.xdata$x:0000F8FB
.xdata$x:0000F8FC ; ===========================================================================
.xdata$x:0000F8FC
.xdata$x:0000F8FC ; Segment type: Pure data
.xdata$x:0000F8FC ; Segment permissions: Read
.xdata$x:0000F8FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F8FC                 assume cs:_xdata$x
.xdata$x:0000F8FC                 ;org 0F8FCh
.xdata$x:0000F8FC ; COMDAT (pick associative to section at 8910)
.xdata$x:0000F8FC __unwindtable$??0ctype_base@std@@QAE@I@Z db 0FFh
.xdata$x:0000F8FC                                         ; DATA XREF: .xdata$x:0000F90Co
.xdata$x:0000F8FD                 db 0FFh
.xdata$x:0000F8FE                 db 0FFh
.xdata$x:0000F8FF                 db 0FFh
.xdata$x:0000F900                 dd offset __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0
.xdata$x:0000F904 __ehfuncinfo$??0ctype_base@std@@QAE@I@Z db  22h ; "
.xdata$x:0000F904                                         ; DATA XREF: __ehhandler$??0ctype_base@std@@QAE@I@Z+11o
.xdata$x:0000F905                 db    5
.xdata$x:0000F906                 db  93h ; ô
.xdata$x:0000F907                 db  19h
.xdata$x:0000F908                 db    1
.xdata$x:0000F909                 db    0
.xdata$x:0000F90A                 db    0
.xdata$x:0000F90B                 db    0
.xdata$x:0000F90C                 dd offset __unwindtable$??0ctype_base@std@@QAE@I@Z
.xdata$x:0000F910                 db    0
.xdata$x:0000F911                 db    0
.xdata$x:0000F912                 db    0
.xdata$x:0000F913                 db    0
.xdata$x:0000F914                 db    0
.xdata$x:0000F915                 db    0
.xdata$x:0000F916                 db    0
.xdata$x:0000F917                 db    0
.xdata$x:0000F918                 db    0
.xdata$x:0000F919                 db    0
.xdata$x:0000F91A                 db    0
.xdata$x:0000F91B                 db    0
.xdata$x:0000F91C                 db    0
.xdata$x:0000F91D                 db    0
.xdata$x:0000F91E                 db    0
.xdata$x:0000F91F                 db    0
.xdata$x:0000F920                 db    0
.xdata$x:0000F921                 db    0
.xdata$x:0000F922                 db    0
.xdata$x:0000F923                 db    0
.xdata$x:0000F924                 db    0
.xdata$x:0000F925                 db    0
.xdata$x:0000F926                 db    0
.xdata$x:0000F927                 db    0
.xdata$x:0000F927 _xdata$x        ends
.xdata$x:0000F927
.xdata$x:0000F928 ; ===========================================================================
.xdata$x:0000F928
.xdata$x:0000F928 ; Segment type: Pure data
.xdata$x:0000F928 ; Segment permissions: Read
.xdata$x:0000F928 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F928                 assume cs:_xdata$x
.xdata$x:0000F928                 ;org 0F928h
.xdata$x:0000F928 ; COMDAT (pick associative to section at 9798)
.xdata$x:0000F928 __unwindtable$??1ctype_base@std@@UAE@XZ db 0FFh
.xdata$x:0000F928                                         ; DATA XREF: .xdata$x:0000F938o
.xdata$x:0000F929                 db 0FFh
.xdata$x:0000F92A                 db 0FFh
.xdata$x:0000F92B                 db 0FFh
.xdata$x:0000F92C                 dd offset __unwindfunclet$??1ctype_base@std@@UAE@XZ$0
.xdata$x:0000F930 __ehfuncinfo$??1ctype_base@std@@UAE@XZ db  22h ; "
.xdata$x:0000F930                                         ; DATA XREF: __ehhandler$??1ctype_base@std@@UAE@XZ+11o
.xdata$x:0000F931                 db    5
.xdata$x:0000F932                 db  93h ; ô
.xdata$x:0000F933                 db  19h
.xdata$x:0000F934                 db    1
.xdata$x:0000F935                 db    0
.xdata$x:0000F936                 db    0
.xdata$x:0000F937                 db    0
.xdata$x:0000F938                 dd offset __unwindtable$??1ctype_base@std@@UAE@XZ
.xdata$x:0000F93C                 db    0
.xdata$x:0000F93D                 db    0
.xdata$x:0000F93E                 db    0
.xdata$x:0000F93F                 db    0
.xdata$x:0000F940                 db    0
.xdata$x:0000F941                 db    0
.xdata$x:0000F942                 db    0
.xdata$x:0000F943                 db    0
.xdata$x:0000F944                 db    0
.xdata$x:0000F945                 db    0
.xdata$x:0000F946                 db    0
.xdata$x:0000F947                 db    0
.xdata$x:0000F948                 db    0
.xdata$x:0000F949                 db    0
.xdata$x:0000F94A                 db    0
.xdata$x:0000F94B                 db    0
.xdata$x:0000F94C                 db    0
.xdata$x:0000F94D                 db    0
.xdata$x:0000F94E                 db    0
.xdata$x:0000F94F                 db    0
.xdata$x:0000F950                 db    0
.xdata$x:0000F951                 db    0
.xdata$x:0000F952                 db    0
.xdata$x:0000F953                 db    0
.xdata$x:0000F953 _xdata$x        ends
.xdata$x:0000F953
.xdata$x:0000F954 ; ===========================================================================
.xdata$x:0000F954
.xdata$x:0000F954 ; Segment type: Pure data
.xdata$x:0000F954 ; Segment permissions: Read
.xdata$x:0000F954 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F954                 assume cs:_xdata$x
.xdata$x:0000F954                 ;org 0F954h
.xdata$x:0000F954 ; COMDAT (pick associative to section at 8468)
.xdata$x:0000F954 __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db 0FFh
.xdata$x:0000F954                                         ; DATA XREF: .xdata$x:0000F964o
.xdata$x:0000F955                 db 0FFh
.xdata$x:0000F956                 db 0FFh
.xdata$x:0000F957                 db 0FFh
.xdata$x:0000F958                 dd offset __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0
.xdata$x:0000F95C __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db  22h ; "
.xdata$x:0000F95C                                         ; DATA XREF: __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z+11o
.xdata$x:0000F95D                 db    5
.xdata$x:0000F95E                 db  93h ; ô
.xdata$x:0000F95F                 db  19h
.xdata$x:0000F960                 db    1
.xdata$x:0000F961                 db    0
.xdata$x:0000F962                 db    0
.xdata$x:0000F963                 db    0
.xdata$x:0000F964                 dd offset __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.xdata$x:0000F968                 align 20h
.xdata$x:0000F968 _xdata$x        ends
.xdata$x:0000F968
.xdata$x:0000F980 ; ===========================================================================
.xdata$x:0000F980
.xdata$x:0000F980 ; Segment type: Pure data
.xdata$x:0000F980 ; Segment permissions: Read
.xdata$x:0000F980 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F980                 assume cs:_xdata$x
.xdata$x:0000F980                 ;org 0F980h
.xdata$x:0000F980 ; COMDAT (pick associative to section at B16C)
.xdata$x:0000F980 __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db 0FFh
.xdata$x:0000F980                                         ; DATA XREF: .xdata$x:0000F9A0o
.xdata$x:0000F981                 db 0FFh
.xdata$x:0000F982                 db 0FFh
.xdata$x:0000F983                 db 0FFh
.xdata$x:0000F984                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
.xdata$x:0000F988                 db    0
.xdata$x:0000F989                 db    0
.xdata$x:0000F98A                 db    0
.xdata$x:0000F98B                 db    0
.xdata$x:0000F98C                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000F990                 db 0FFh
.xdata$x:0000F991                 db 0FFh
.xdata$x:0000F992                 db 0FFh
.xdata$x:0000F993                 db 0FFh
.xdata$x:0000F994                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000F998 __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db  22h ; "
.xdata$x:0000F998                                         ; DATA XREF: __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z+11o
.xdata$x:0000F999                 db    5
.xdata$x:0000F99A                 db  93h ; ô
.xdata$x:0000F99B                 db  19h
.xdata$x:0000F99C                 db    3
.xdata$x:0000F99D                 db    0
.xdata$x:0000F99E                 db    0
.xdata$x:0000F99F                 db    0
.xdata$x:0000F9A0                 dd offset __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.xdata$x:0000F9A4                 db    0
.xdata$x:0000F9A5                 db    0
.xdata$x:0000F9A6                 db    0
.xdata$x:0000F9A7                 db    0
.xdata$x:0000F9A8                 db    0
.xdata$x:0000F9A9                 db    0
.xdata$x:0000F9AA                 db    0
.xdata$x:0000F9AB                 db    0
.xdata$x:0000F9AC                 db    0
.xdata$x:0000F9AD                 db    0
.xdata$x:0000F9AE                 db    0
.xdata$x:0000F9AF                 db    0
.xdata$x:0000F9B0                 db    0
.xdata$x:0000F9B1                 db    0
.xdata$x:0000F9B2                 db    0
.xdata$x:0000F9B3                 db    0
.xdata$x:0000F9B4                 db    0
.xdata$x:0000F9B5                 db    0
.xdata$x:0000F9B6                 db    0
.xdata$x:0000F9B7                 db    0
.xdata$x:0000F9B8                 db    0
.xdata$x:0000F9B9                 db    0
.xdata$x:0000F9BA                 db    0
.xdata$x:0000F9BB                 db    0
.xdata$x:0000F9BB _xdata$x        ends
.xdata$x:0000F9BB
.xdata$x:0000F9BC ; ===========================================================================
.xdata$x:0000F9BC
.xdata$x:0000F9BC ; Segment type: Pure data
.xdata$x:0000F9BC ; Segment permissions: Read
.xdata$x:0000F9BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F9BC                 assume cs:_xdata$x
.xdata$x:0000F9BC                 ;org 0F9BCh
.xdata$x:0000F9BC ; COMDAT (pick associative to section at 9368)
.xdata$x:0000F9BC __unwindtable$??1?$ctype@_W@std@@MAE@XZ db 0FFh
.xdata$x:0000F9BC                                         ; DATA XREF: .xdata$x:0000F9CCo
.xdata$x:0000F9BD                 db 0FFh
.xdata$x:0000F9BE                 db 0FFh
.xdata$x:0000F9BF                 db 0FFh
.xdata$x:0000F9C0                 dd offset __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0
.xdata$x:0000F9C4 __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ db  22h ; "
.xdata$x:0000F9C4                                         ; DATA XREF: __ehhandler$??1?$ctype@_W@std@@MAE@XZ+11o
.xdata$x:0000F9C5                 db    5
.xdata$x:0000F9C6                 db  93h ; ô
.xdata$x:0000F9C7                 db  19h
.xdata$x:0000F9C8                 db    1
.xdata$x:0000F9C9                 db    0
.xdata$x:0000F9CA                 db    0
.xdata$x:0000F9CB                 db    0
.xdata$x:0000F9CC                 dd offset __unwindtable$??1?$ctype@_W@std@@MAE@XZ
.xdata$x:0000F9D0                 db    0
.xdata$x:0000F9D1                 db    0
.xdata$x:0000F9D2                 db    0
.xdata$x:0000F9D3                 db    0
.xdata$x:0000F9D4                 db    0
.xdata$x:0000F9D5                 db    0
.xdata$x:0000F9D6                 db    0
.xdata$x:0000F9D7                 db    0
.xdata$x:0000F9D8                 db    0
.xdata$x:0000F9D9                 db    0
.xdata$x:0000F9DA                 db    0
.xdata$x:0000F9DB                 db    0
.xdata$x:0000F9DC                 db    0
.xdata$x:0000F9DD                 db    0
.xdata$x:0000F9DE                 db    0
.xdata$x:0000F9DF                 db    0
.xdata$x:0000F9E0                 db    0
.xdata$x:0000F9E1                 db    0
.xdata$x:0000F9E2                 db    0
.xdata$x:0000F9E3                 db    0
.xdata$x:0000F9E4                 db    0
.xdata$x:0000F9E5                 db    0
.xdata$x:0000F9E6                 db    0
.xdata$x:0000F9E7                 db    0
.xdata$x:0000F9E7 _xdata$x        ends
.xdata$x:0000F9E7
.xdata$x:0000F9E8 ; ===========================================================================
.xdata$x:0000F9E8
.xdata$x:0000F9E8 ; Segment type: Pure data
.xdata$x:0000F9E8 ; Segment permissions: Read
.xdata$x:0000F9E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F9E8                 assume cs:_xdata$x
.xdata$x:0000F9E8                 ;org 0F9E8h
.xdata$x:0000F9E8 ; COMDAT (pick associative to section at 85F0)
.xdata$x:0000F9E8 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000F9E8                                         ; DATA XREF: .xdata$x:0000F9F8o
.xdata$x:0000F9E9                 db 0FFh
.xdata$x:0000F9EA                 db 0FFh
.xdata$x:0000F9EB                 db 0FFh
.xdata$x:0000F9EC                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000F9F0 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000F9F0                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000F9F1                 db    5
.xdata$x:0000F9F2                 db  93h ; ô
.xdata$x:0000F9F3                 db  19h
.xdata$x:0000F9F4                 db    1
.xdata$x:0000F9F5                 db    0
.xdata$x:0000F9F6                 db    0
.xdata$x:0000F9F7                 db    0
.xdata$x:0000F9F8                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000F9FC                 db    0
.xdata$x:0000F9FD                 db    0
.xdata$x:0000F9FE                 db    0
.xdata$x:0000F9FF                 db    0
.xdata$x:0000FA00                 db    0
.xdata$x:0000FA01                 db    0
.xdata$x:0000FA02                 db    0
.xdata$x:0000FA03                 db    0
.xdata$x:0000FA04                 db    0
.xdata$x:0000FA05                 db    0
.xdata$x:0000FA06                 db    0
.xdata$x:0000FA07                 db    0
.xdata$x:0000FA08                 db    0
.xdata$x:0000FA09                 db    0
.xdata$x:0000FA0A                 db    0
.xdata$x:0000FA0B                 db    0
.xdata$x:0000FA0C                 db    0
.xdata$x:0000FA0D                 db    0
.xdata$x:0000FA0E                 db    0
.xdata$x:0000FA0F                 db    0
.xdata$x:0000FA10                 db    0
.xdata$x:0000FA11                 db    0
.xdata$x:0000FA12                 db    0
.xdata$x:0000FA13                 db    0
.xdata$x:0000FA13 _xdata$x        ends
.xdata$x:0000FA13
.xdata$x:0000FA14 ; ===========================================================================
.xdata$x:0000FA14
.xdata$x:0000FA14 ; Segment type: Pure data
.xdata$x:0000FA14 ; Segment permissions: Read
.xdata$x:0000FA14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FA14                 assume cs:_xdata$x
.xdata$x:0000FA14                 ;org 0FA14h
.xdata$x:0000FA14 ; COMDAT (pick associative to section at E148)
.xdata$x:0000FA14 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000FA14                                         ; DATA XREF: .xdata$x:0000FA24o
.xdata$x:0000FA15                 db 0FFh
.xdata$x:0000FA16                 db 0FFh
.xdata$x:0000FA17                 db 0FFh
.xdata$x:0000FA18                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000FA1C __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000FA1C                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000FA1D                 db    5
.xdata$x:0000FA1E                 db  93h ; ô
.xdata$x:0000FA1F                 db  19h
.xdata$x:0000FA20                 db    1
.xdata$x:0000FA21                 db    0
.xdata$x:0000FA22                 db    0
.xdata$x:0000FA23                 db    0
.xdata$x:0000FA24                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000FA28                 align 20h
.xdata$x:0000FA28 _xdata$x        ends
.xdata$x:0000FA28
.xdata$x:0000FA40 ; ===========================================================================
.xdata$x:0000FA40
.xdata$x:0000FA40 ; Segment type: Pure data
.xdata$x:0000FA40 ; Segment permissions: Read
.xdata$x:0000FA40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FA40                 assume cs:_xdata$x
.xdata$x:0000FA40                 ;org 0FA40h
.xdata$x:0000FA40 ; COMDAT (pick associative to section at 94A8)
.xdata$x:0000FA40 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000FA40                                         ; DATA XREF: .xdata$x:0000FA50o
.xdata$x:0000FA41                 db 0FFh
.xdata$x:0000FA42                 db 0FFh
.xdata$x:0000FA43                 db 0FFh
.xdata$x:0000FA44                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000FA48 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000FA48                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000FA49                 db    5
.xdata$x:0000FA4A                 db  93h ; ô
.xdata$x:0000FA4B                 db  19h
.xdata$x:0000FA4C                 db    1
.xdata$x:0000FA4D                 db    0
.xdata$x:0000FA4E                 db    0
.xdata$x:0000FA4F                 db    0
.xdata$x:0000FA50                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000FA54                 db    0
.xdata$x:0000FA55                 db    0
.xdata$x:0000FA56                 db    0
.xdata$x:0000FA57                 db    0
.xdata$x:0000FA58                 db    0
.xdata$x:0000FA59                 db    0
.xdata$x:0000FA5A                 db    0
.xdata$x:0000FA5B                 db    0
.xdata$x:0000FA5C                 db    0
.xdata$x:0000FA5D                 db    0
.xdata$x:0000FA5E                 db    0
.xdata$x:0000FA5F                 db    0
.xdata$x:0000FA60                 db    0
.xdata$x:0000FA61                 db    0
.xdata$x:0000FA62                 db    0
.xdata$x:0000FA63                 db    0
.xdata$x:0000FA64                 db    0
.xdata$x:0000FA65                 db    0
.xdata$x:0000FA66                 db    0
.xdata$x:0000FA67                 db    0
.xdata$x:0000FA68                 db    0
.xdata$x:0000FA69                 db    0
.xdata$x:0000FA6A                 db    0
.xdata$x:0000FA6B                 db    0
.xdata$x:0000FA6B _xdata$x        ends
.xdata$x:0000FA6B
.xdata$x:0000FA6C ; ===========================================================================
.xdata$x:0000FA6C
.xdata$x:0000FA6C ; Segment type: Pure data
.xdata$x:0000FA6C ; Segment permissions: Read
.xdata$x:0000FA6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FA6C                 assume cs:_xdata$x
.xdata$x:0000FA6C                 ;org 0FA6Ch
.xdata$x:0000FA6C ; COMDAT (pick associative to section at 867C)
.xdata$x:0000FA6C __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000FA6C                                         ; DATA XREF: .xdata$x:0000FA7Co
.xdata$x:0000FA6D                 db 0FFh
.xdata$x:0000FA6E                 db 0FFh
.xdata$x:0000FA6F                 db 0FFh
.xdata$x:0000FA70                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000FA74 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000FA74                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000FA75                 db    5
.xdata$x:0000FA76                 db  93h ; ô
.xdata$x:0000FA77                 db  19h
.xdata$x:0000FA78                 db    1
.xdata$x:0000FA79                 db    0
.xdata$x:0000FA7A                 db    0
.xdata$x:0000FA7B                 db    0
.xdata$x:0000FA7C                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000FA80                 db    0
.xdata$x:0000FA81                 db    0
.xdata$x:0000FA82                 db    0
.xdata$x:0000FA83                 db    0
.xdata$x:0000FA84                 db    0
.xdata$x:0000FA85                 db    0
.xdata$x:0000FA86                 db    0
.xdata$x:0000FA87                 db    0
.xdata$x:0000FA88                 db    0
.xdata$x:0000FA89                 db    0
.xdata$x:0000FA8A                 db    0
.xdata$x:0000FA8B                 db    0
.xdata$x:0000FA8C                 db    0
.xdata$x:0000FA8D                 db    0
.xdata$x:0000FA8E                 db    0
.xdata$x:0000FA8F                 db    0
.xdata$x:0000FA90                 db    0
.xdata$x:0000FA91                 db    0
.xdata$x:0000FA92                 db    0
.xdata$x:0000FA93                 db    0
.xdata$x:0000FA94                 db    0
.xdata$x:0000FA95                 db    0
.xdata$x:0000FA96                 db    0
.xdata$x:0000FA97                 db    0
.xdata$x:0000FA97 _xdata$x        ends
.xdata$x:0000FA97
.xdata$x:0000FA98 ; ===========================================================================
.xdata$x:0000FA98
.xdata$x:0000FA98 ; Segment type: Pure data
.xdata$x:0000FA98 ; Segment permissions: Read
.xdata$x:0000FA98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FA98                 assume cs:_xdata$x
.xdata$x:0000FA98                 ;org 0FA98h
.xdata$x:0000FA98 ; COMDAT (pick associative to section at E200)
.xdata$x:0000FA98 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000FA98                                         ; DATA XREF: .xdata$x:0000FAA8o
.xdata$x:0000FA99                 db 0FFh
.xdata$x:0000FA9A                 db 0FFh
.xdata$x:0000FA9B                 db 0FFh
.xdata$x:0000FA9C                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000FAA0 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000FAA0                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000FAA1                 db    5
.xdata$x:0000FAA2                 db  93h ; ô
.xdata$x:0000FAA3                 db  19h
.xdata$x:0000FAA4                 db    1
.xdata$x:0000FAA5                 db    0
.xdata$x:0000FAA6                 db    0
.xdata$x:0000FAA7                 db    0
.xdata$x:0000FAA8                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000FAAC                 db    0
.xdata$x:0000FAAD                 db    0
.xdata$x:0000FAAE                 db    0
.xdata$x:0000FAAF                 db    0
.xdata$x:0000FAB0                 db    0
.xdata$x:0000FAB1                 db    0
.xdata$x:0000FAB2                 db    0
.xdata$x:0000FAB3                 db    0
.xdata$x:0000FAB4                 db    0
.xdata$x:0000FAB5                 db    0
.xdata$x:0000FAB6                 db    0
.xdata$x:0000FAB7                 db    0
.xdata$x:0000FAB8                 db    0
.xdata$x:0000FAB9                 db    0
.xdata$x:0000FABA                 db    0
.xdata$x:0000FABB                 db    0
.xdata$x:0000FABC                 db    0
.xdata$x:0000FABD                 db    0
.xdata$x:0000FABE                 db    0
.xdata$x:0000FABF                 db    0
.xdata$x:0000FAC0                 db    0
.xdata$x:0000FAC1                 db    0
.xdata$x:0000FAC2                 db    0
.xdata$x:0000FAC3                 db    0
.xdata$x:0000FAC3 _xdata$x        ends
.xdata$x:0000FAC3
.xdata$x:0000FAC4 ; ===========================================================================
.xdata$x:0000FAC4
.xdata$x:0000FAC4 ; Segment type: Pure data
.xdata$x:0000FAC4 ; Segment permissions: Read
.xdata$x:0000FAC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FAC4                 assume cs:_xdata$x
.xdata$x:0000FAC4                 ;org 0FAC4h
.xdata$x:0000FAC4 ; COMDAT (pick associative to section at 9518)
.xdata$x:0000FAC4 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000FAC4                                         ; DATA XREF: .xdata$x:0000FAD4o
.xdata$x:0000FAC5                 db 0FFh
.xdata$x:0000FAC6                 db 0FFh
.xdata$x:0000FAC7                 db 0FFh
.xdata$x:0000FAC8                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000FACC __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000FACC                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000FACD                 db    5
.xdata$x:0000FACE                 db  93h ; ô
.xdata$x:0000FACF                 db  19h
.xdata$x:0000FAD0                 db    1
.xdata$x:0000FAD1                 db    0
.xdata$x:0000FAD2                 db    0
.xdata$x:0000FAD3                 db    0
.xdata$x:0000FAD4                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000FAD8                 db    0
.xdata$x:0000FAD9                 db    0
.xdata$x:0000FADA                 db    0
.xdata$x:0000FADB                 db    0
.xdata$x:0000FADC                 db    0
.xdata$x:0000FADD                 db    0
.xdata$x:0000FADE                 db    0
.xdata$x:0000FADF                 db    0
.xdata$x:0000FAE0                 db    0
.xdata$x:0000FAE1                 db    0
.xdata$x:0000FAE2                 db    0
.xdata$x:0000FAE3                 db    0
.xdata$x:0000FAE4                 db    0
.xdata$x:0000FAE5                 db    0
.xdata$x:0000FAE6                 db    0
.xdata$x:0000FAE7                 db    0
.xdata$x:0000FAE8                 db    0
.xdata$x:0000FAE9                 db    0
.xdata$x:0000FAEA                 db    0
.xdata$x:0000FAEB                 db    0
.xdata$x:0000FAEC                 db    0
.xdata$x:0000FAED                 db    0
.xdata$x:0000FAEE                 db    0
.xdata$x:0000FAEF                 db    0
.xdata$x:0000FAEF _xdata$x        ends
.xdata$x:0000FAEF
.xdata$x:0000FAF0 ; ===========================================================================
.xdata$x:0000FAF0
.xdata$x:0000FAF0 ; Segment type: Pure data
.xdata$x:0000FAF0 ; Segment permissions: Read
.xdata$x:0000FAF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FAF0                 assume cs:_xdata$x
.xdata$x:0000FAF0                 ;org 0FAF0h
.xdata$x:0000FAF0 ; COMDAT (pick associative to section at 8894)
.xdata$x:0000FAF0 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000FAF0                                         ; DATA XREF: .xdata$x:0000FB00o
.xdata$x:0000FAF1                 db 0FFh
.xdata$x:0000FAF2                 db 0FFh
.xdata$x:0000FAF3                 db 0FFh
.xdata$x:0000FAF4                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000FAF8 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000FAF8                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000FAF9                 db    5
.xdata$x:0000FAFA                 db  93h ; ô
.xdata$x:0000FAFB                 db  19h
.xdata$x:0000FAFC                 db    1
.xdata$x:0000FAFD                 db    0
.xdata$x:0000FAFE                 db    0
.xdata$x:0000FAFF                 db    0
.xdata$x:0000FB00                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000FB04                 db    0
.xdata$x:0000FB05                 db    0
.xdata$x:0000FB06                 db    0
.xdata$x:0000FB07                 db    0
.xdata$x:0000FB08                 db    0
.xdata$x:0000FB09                 db    0
.xdata$x:0000FB0A                 db    0
.xdata$x:0000FB0B                 db    0
.xdata$x:0000FB0C                 db    0
.xdata$x:0000FB0D                 db    0
.xdata$x:0000FB0E                 db    0
.xdata$x:0000FB0F                 db    0
.xdata$x:0000FB10                 db    0
.xdata$x:0000FB11                 db    0
.xdata$x:0000FB12                 db    0
.xdata$x:0000FB13                 db    0
.xdata$x:0000FB14                 db    0
.xdata$x:0000FB15                 db    0
.xdata$x:0000FB16                 db    0
.xdata$x:0000FB17                 db    0
.xdata$x:0000FB18                 db    0
.xdata$x:0000FB19                 db    0
.xdata$x:0000FB1A                 db    0
.xdata$x:0000FB1B                 db    0
.xdata$x:0000FB1B _xdata$x        ends
.xdata$x:0000FB1B
.xdata$x:0000FB1C ; ===========================================================================
.xdata$x:0000FB1C
.xdata$x:0000FB1C ; Segment type: Pure data
.xdata$x:0000FB1C ; Segment permissions: Read
.xdata$x:0000FB1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FB1C                 assume cs:_xdata$x
.xdata$x:0000FB1C                 ;org 0FB1Ch
.xdata$x:0000FB1C ; COMDAT (pick associative to section at E2C4)
.xdata$x:0000FB1C __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000FB1C                                         ; DATA XREF: .xdata$x:0000FB2Co
.xdata$x:0000FB1D                 db 0FFh
.xdata$x:0000FB1E                 db 0FFh
.xdata$x:0000FB1F                 db 0FFh
.xdata$x:0000FB20                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000FB24 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000FB24                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000FB25                 db    5
.xdata$x:0000FB26                 db  93h ; ô
.xdata$x:0000FB27                 db  19h
.xdata$x:0000FB28                 db    1
.xdata$x:0000FB29                 db    0
.xdata$x:0000FB2A                 db    0
.xdata$x:0000FB2B                 db    0
.xdata$x:0000FB2C                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000FB30                 db    0
.xdata$x:0000FB31                 db    0
.xdata$x:0000FB32                 db    0
.xdata$x:0000FB33                 db    0
.xdata$x:0000FB34                 db    0
.xdata$x:0000FB35                 db    0
.xdata$x:0000FB36                 db    0
.xdata$x:0000FB37                 db    0
.xdata$x:0000FB38                 db    0
.xdata$x:0000FB39                 db    0
.xdata$x:0000FB3A                 db    0
.xdata$x:0000FB3B                 db    0
.xdata$x:0000FB3C                 db    0
.xdata$x:0000FB3D                 db    0
.xdata$x:0000FB3E                 db    0
.xdata$x:0000FB3F                 db    0
.xdata$x:0000FB40                 db    0
.xdata$x:0000FB41                 db    0
.xdata$x:0000FB42                 db    0
.xdata$x:0000FB43                 db    0
.xdata$x:0000FB44                 db    0
.xdata$x:0000FB45                 db    0
.xdata$x:0000FB46                 db    0
.xdata$x:0000FB47                 db    0
.xdata$x:0000FB47 _xdata$x        ends
.xdata$x:0000FB47
.xdata$x:0000FB48 ; ===========================================================================
.xdata$x:0000FB48
.xdata$x:0000FB48 ; Segment type: Pure data
.xdata$x:0000FB48 ; Segment permissions: Read
.xdata$x:0000FB48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FB48                 assume cs:_xdata$x
.xdata$x:0000FB48                 ;org 0FB48h
.xdata$x:0000FB48 ; COMDAT (pick associative to section at 9728)
.xdata$x:0000FB48 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000FB48                                         ; DATA XREF: .xdata$x:0000FB58o
.xdata$x:0000FB49                 db 0FFh
.xdata$x:0000FB4A                 db 0FFh
.xdata$x:0000FB4B                 db 0FFh
.xdata$x:0000FB4C                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000FB50 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000FB50                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000FB51                 db    5
.xdata$x:0000FB52                 db  93h ; ô
.xdata$x:0000FB53                 db  19h
.xdata$x:0000FB54                 db    1
.xdata$x:0000FB55                 db    0
.xdata$x:0000FB56                 db    0
.xdata$x:0000FB57                 db    0
.xdata$x:0000FB58                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000FB5C                 db    0
.xdata$x:0000FB5D                 db    0
.xdata$x:0000FB5E                 db    0
.xdata$x:0000FB5F                 db    0
.xdata$x:0000FB60                 db    0
.xdata$x:0000FB61                 db    0
.xdata$x:0000FB62                 db    0
.xdata$x:0000FB63                 db    0
.xdata$x:0000FB64                 db    0
.xdata$x:0000FB65                 db    0
.xdata$x:0000FB66                 db    0
.xdata$x:0000FB67                 db    0
.xdata$x:0000FB68                 db    0
.xdata$x:0000FB69                 db    0
.xdata$x:0000FB6A                 db    0
.xdata$x:0000FB6B                 db    0
.xdata$x:0000FB6C                 db    0
.xdata$x:0000FB6D                 db    0
.xdata$x:0000FB6E                 db    0
.xdata$x:0000FB6F                 db    0
.xdata$x:0000FB70                 db    0
.xdata$x:0000FB71                 db    0
.xdata$x:0000FB72                 db    0
.xdata$x:0000FB73                 db    0
.xdata$x:0000FB73 _xdata$x        ends
.xdata$x:0000FB73
.xdata$x:0000FB74 ; ===========================================================================
.xdata$x:0000FB74
.xdata$x:0000FB74 ; Segment type: Pure data
.xdata$x:0000FB74 ; Segment permissions: Read
.xdata$x:0000FB74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FB74                 assume cs:_xdata$x
.xdata$x:0000FB74                 ;org 0FB74h
.xdata$x:0000FB74 ; COMDAT (pick associative to section at 728C)
.xdata$x:0000FB74 __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db 0FFh
.xdata$x:0000FB74                                         ; DATA XREF: .xdata$x:0000FB84o
.xdata$x:0000FB75                 db 0FFh
.xdata$x:0000FB76                 db 0FFh
.xdata$x:0000FB77                 db 0FFh
.xdata$x:0000FB78                 dd offset __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
.xdata$x:0000FB7C __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db  22h ; "
.xdata$x:0000FB7C                                         ; DATA XREF: __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z+11o
.xdata$x:0000FB7D                 db    5
.xdata$x:0000FB7E                 db  93h ; ô
.xdata$x:0000FB7F                 db  19h
.xdata$x:0000FB80                 db    1
.xdata$x:0000FB81                 db    0
.xdata$x:0000FB82                 db    0
.xdata$x:0000FB83                 db    0
.xdata$x:0000FB84                 dd offset __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.xdata$x:0000FB88                 align 20h
.xdata$x:0000FB88 _xdata$x        ends
.xdata$x:0000FB88
.xdata$x:0000FBA0 ; ===========================================================================
.xdata$x:0000FBA0
.xdata$x:0000FBA0 ; Segment type: Pure data
.xdata$x:0000FBA0 ; Segment permissions: Read
.xdata$x:0000FBA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FBA0                 assume cs:_xdata$x
.xdata$x:0000FBA0                 ;org 0FBA0h
.xdata$x:0000FBA0 ; COMDAT (pick associative to section at 79F0)
.xdata$x:0000FBA0 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000FBA0                                         ; DATA XREF: .xdata$x:0000FBB0o
.xdata$x:0000FBA1                 db 0FFh
.xdata$x:0000FBA2                 db 0FFh
.xdata$x:0000FBA3                 db 0FFh
.xdata$x:0000FBA4                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000FBA8 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FBA8                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000FBA9                 db    5
.xdata$x:0000FBAA                 db  93h ; ô
.xdata$x:0000FBAB                 db  19h
.xdata$x:0000FBAC                 db    1
.xdata$x:0000FBAD                 db    0
.xdata$x:0000FBAE                 db    0
.xdata$x:0000FBAF                 db    0
.xdata$x:0000FBB0                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000FBB4                 db    0
.xdata$x:0000FBB5                 db    0
.xdata$x:0000FBB6                 db    0
.xdata$x:0000FBB7                 db    0
.xdata$x:0000FBB8                 db    0
.xdata$x:0000FBB9                 db    0
.xdata$x:0000FBBA                 db    0
.xdata$x:0000FBBB                 db    0
.xdata$x:0000FBBC                 db    0
.xdata$x:0000FBBD                 db    0
.xdata$x:0000FBBE                 db    0
.xdata$x:0000FBBF                 db    0
.xdata$x:0000FBC0                 db    0
.xdata$x:0000FBC1                 db    0
.xdata$x:0000FBC2                 db    0
.xdata$x:0000FBC3                 db    0
.xdata$x:0000FBC4                 db    0
.xdata$x:0000FBC5                 db    0
.xdata$x:0000FBC6                 db    0
.xdata$x:0000FBC7                 db    0
.xdata$x:0000FBC8                 db    0
.xdata$x:0000FBC9                 db    0
.xdata$x:0000FBCA                 db    0
.xdata$x:0000FBCB                 db    0
.xdata$x:0000FBCB _xdata$x        ends
.xdata$x:0000FBCB
.xdata$x:0000FBCC ; ===========================================================================
.xdata$x:0000FBCC
.xdata$x:0000FBCC ; Segment type: Pure data
.xdata$x:0000FBCC ; Segment permissions: Read
.xdata$x:0000FBCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FBCC                 assume cs:_xdata$x
.xdata$x:0000FBCC                 ;org 0FBCCh
.xdata$x:0000FBCC ; COMDAT (pick associative to section at 8F30)
.xdata$x:0000FBCC __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000FBCC                                         ; DATA XREF: .xdata$x:0000FBDCo
.xdata$x:0000FBCD                 db 0FFh
.xdata$x:0000FBCE                 db 0FFh
.xdata$x:0000FBCF                 db 0FFh
.xdata$x:0000FBD0                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000FBD4 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FBD4                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000FBD5                 db    5
.xdata$x:0000FBD6                 db  93h ; ô
.xdata$x:0000FBD7                 db  19h
.xdata$x:0000FBD8                 db    1
.xdata$x:0000FBD9                 db    0
.xdata$x:0000FBDA                 db    0
.xdata$x:0000FBDB                 db    0
.xdata$x:0000FBDC                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000FBE0                 db    0
.xdata$x:0000FBE1                 db    0
.xdata$x:0000FBE2                 db    0
.xdata$x:0000FBE3                 db    0
.xdata$x:0000FBE4                 db    0
.xdata$x:0000FBE5                 db    0
.xdata$x:0000FBE6                 db    0
.xdata$x:0000FBE7                 db    0
.xdata$x:0000FBE8                 db    0
.xdata$x:0000FBE9                 db    0
.xdata$x:0000FBEA                 db    0
.xdata$x:0000FBEB                 db    0
.xdata$x:0000FBEC                 db    0
.xdata$x:0000FBED                 db    0
.xdata$x:0000FBEE                 db    0
.xdata$x:0000FBEF                 db    0
.xdata$x:0000FBF0                 db    0
.xdata$x:0000FBF1                 db    0
.xdata$x:0000FBF2                 db    0
.xdata$x:0000FBF3                 db    0
.xdata$x:0000FBF4                 db    0
.xdata$x:0000FBF5                 db    0
.xdata$x:0000FBF6                 db    0
.xdata$x:0000FBF7                 db    0
.xdata$x:0000FBF7 _xdata$x        ends
.xdata$x:0000FBF7
.xdata$x:0000FBF8 ; ===========================================================================
.xdata$x:0000FBF8
.xdata$x:0000FBF8 ; Segment type: Pure data
.xdata$x:0000FBF8 ; Segment permissions: Read
.xdata$x:0000FBF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FBF8                 assume cs:_xdata$x
.xdata$x:0000FBF8                 ;org 0FBF8h
.xdata$x:0000FBF8 ; COMDAT (pick associative to section at 76E8)
.xdata$x:0000FBF8 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000FBF8                                         ; DATA XREF: .xdata$x:0000FC08o
.xdata$x:0000FBF9                 db 0FFh
.xdata$x:0000FBFA                 db 0FFh
.xdata$x:0000FBFB                 db 0FFh
.xdata$x:0000FBFC                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000FC00 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000FC00                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000FC01                 db    5
.xdata$x:0000FC02                 db  93h ; ô
.xdata$x:0000FC03                 db  19h
.xdata$x:0000FC04                 db    1
.xdata$x:0000FC05                 db    0
.xdata$x:0000FC06                 db    0
.xdata$x:0000FC07                 db    0
.xdata$x:0000FC08                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000FC0C                 db    0
.xdata$x:0000FC0D                 db    0
.xdata$x:0000FC0E                 db    0
.xdata$x:0000FC0F                 db    0
.xdata$x:0000FC10                 db    0
.xdata$x:0000FC11                 db    0
.xdata$x:0000FC12                 db    0
.xdata$x:0000FC13                 db    0
.xdata$x:0000FC14                 db    0
.xdata$x:0000FC15                 db    0
.xdata$x:0000FC16                 db    0
.xdata$x:0000FC17                 db    0
.xdata$x:0000FC18                 db    0
.xdata$x:0000FC19                 db    0
.xdata$x:0000FC1A                 db    0
.xdata$x:0000FC1B                 db    0
.xdata$x:0000FC1C                 db    0
.xdata$x:0000FC1D                 db    0
.xdata$x:0000FC1E                 db    0
.xdata$x:0000FC1F                 db    0
.xdata$x:0000FC20                 db    0
.xdata$x:0000FC21                 db    0
.xdata$x:0000FC22                 db    0
.xdata$x:0000FC23                 db    0
.xdata$x:0000FC23 _xdata$x        ends
.xdata$x:0000FC23
.xdata$x:0000FC24 ; ===========================================================================
.xdata$x:0000FC24
.xdata$x:0000FC24 ; Segment type: Pure data
.xdata$x:0000FC24 ; Segment permissions: Read
.xdata$x:0000FC24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FC24                 assume cs:_xdata$x
.xdata$x:0000FC24                 ;org 0FC24h
.xdata$x:0000FC24 ; COMDAT (pick associative to section at 8D68)
.xdata$x:0000FC24 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000FC24                                         ; DATA XREF: .xdata$x:0000FC34o
.xdata$x:0000FC25                 db 0FFh
.xdata$x:0000FC26                 db 0FFh
.xdata$x:0000FC27                 db 0FFh
.xdata$x:0000FC28                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000FC2C __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FC2C                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000FC2D                 db    5
.xdata$x:0000FC2E                 db  93h ; ô
.xdata$x:0000FC2F                 db  19h
.xdata$x:0000FC30                 db    1
.xdata$x:0000FC31                 db    0
.xdata$x:0000FC32                 db    0
.xdata$x:0000FC33                 db    0
.xdata$x:0000FC34                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000FC38                 db    0
.xdata$x:0000FC39                 db    0
.xdata$x:0000FC3A                 db    0
.xdata$x:0000FC3B                 db    0
.xdata$x:0000FC3C                 db    0
.xdata$x:0000FC3D                 db    0
.xdata$x:0000FC3E                 db    0
.xdata$x:0000FC3F                 db    0
.xdata$x:0000FC40                 db    0
.xdata$x:0000FC41                 db    0
.xdata$x:0000FC42                 db    0
.xdata$x:0000FC43                 db    0
.xdata$x:0000FC44                 db    0
.xdata$x:0000FC45                 db    0
.xdata$x:0000FC46                 db    0
.xdata$x:0000FC47                 db    0
.xdata$x:0000FC48                 db    0
.xdata$x:0000FC49                 db    0
.xdata$x:0000FC4A                 db    0
.xdata$x:0000FC4B                 db    0
.xdata$x:0000FC4C                 db    0
.xdata$x:0000FC4D                 db    0
.xdata$x:0000FC4E                 db    0
.xdata$x:0000FC4F                 db    0
.xdata$x:0000FC4F _xdata$x        ends
.xdata$x:0000FC4F
.xdata$x:0000FC50 ; ===========================================================================
.xdata$x:0000FC50
.xdata$x:0000FC50 ; Segment type: Pure data
.xdata$x:0000FC50 ; Segment permissions: Read
.xdata$x:0000FC50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FC50                 assume cs:_xdata$x
.xdata$x:0000FC50                 ;org 0FC50h
.xdata$x:0000FC50 ; COMDAT (pick associative to section at 81FC)
.xdata$x:0000FC50 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000FC50                                         ; DATA XREF: .xdata$x:0000FC60o
.xdata$x:0000FC51                 db 0FFh
.xdata$x:0000FC52                 db 0FFh
.xdata$x:0000FC53                 db 0FFh
.xdata$x:0000FC54                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000FC58 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000FC58                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000FC59                 db    5
.xdata$x:0000FC5A                 db  93h ; ô
.xdata$x:0000FC5B                 db  19h
.xdata$x:0000FC5C                 db    1
.xdata$x:0000FC5D                 db    0
.xdata$x:0000FC5E                 db    0
.xdata$x:0000FC5F                 db    0
.xdata$x:0000FC60                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000FC64                 db    0
.xdata$x:0000FC65                 db    0
.xdata$x:0000FC66                 db    0
.xdata$x:0000FC67                 db    0
.xdata$x:0000FC68                 db    0
.xdata$x:0000FC69                 db    0
.xdata$x:0000FC6A                 db    0
.xdata$x:0000FC6B                 db    0
.xdata$x:0000FC6C                 db    0
.xdata$x:0000FC6D                 db    0
.xdata$x:0000FC6E                 db    0
.xdata$x:0000FC6F                 db    0
.xdata$x:0000FC70                 db    0
.xdata$x:0000FC71                 db    0
.xdata$x:0000FC72                 db    0
.xdata$x:0000FC73                 db    0
.xdata$x:0000FC74                 db    0
.xdata$x:0000FC75                 db    0
.xdata$x:0000FC76                 db    0
.xdata$x:0000FC77                 db    0
.xdata$x:0000FC78                 db    0
.xdata$x:0000FC79                 db    0
.xdata$x:0000FC7A                 db    0
.xdata$x:0000FC7B                 db    0
.xdata$x:0000FC7B _xdata$x        ends
.xdata$x:0000FC7B
.xdata$x:0000FC7C ; ===========================================================================
.xdata$x:0000FC7C
.xdata$x:0000FC7C ; Segment type: Pure data
.xdata$x:0000FC7C ; Segment permissions: Read
.xdata$x:0000FC7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FC7C                 assume cs:_xdata$x
.xdata$x:0000FC7C                 ;org 0FC7Ch
.xdata$x:0000FC7C ; COMDAT (pick associative to section at 83DC)
.xdata$x:0000FC7C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000FC7C                                         ; DATA XREF: .xdata$x:0000FC8Co
.xdata$x:0000FC7D                 db 0FFh
.xdata$x:0000FC7E                 db 0FFh
.xdata$x:0000FC7F                 db 0FFh
.xdata$x:0000FC80                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000FC84 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FC84                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000FC85                 db    5
.xdata$x:0000FC86                 db  93h ; ô
.xdata$x:0000FC87                 db  19h
.xdata$x:0000FC88                 db    1
.xdata$x:0000FC89                 db    0
.xdata$x:0000FC8A                 db    0
.xdata$x:0000FC8B                 db    0
.xdata$x:0000FC8C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000FC90                 db    0
.xdata$x:0000FC91                 db    0
.xdata$x:0000FC92                 db    0
.xdata$x:0000FC93                 db    0
.xdata$x:0000FC94                 db    0
.xdata$x:0000FC95                 db    0
.xdata$x:0000FC96                 db    0
.xdata$x:0000FC97                 db    0
.xdata$x:0000FC98                 db    0
.xdata$x:0000FC99                 db    0
.xdata$x:0000FC9A                 db    0
.xdata$x:0000FC9B                 db    0
.xdata$x:0000FC9C                 db    0
.xdata$x:0000FC9D                 db    0
.xdata$x:0000FC9E                 db    0
.xdata$x:0000FC9F                 db    0
.xdata$x:0000FCA0                 db    0
.xdata$x:0000FCA1                 db    0
.xdata$x:0000FCA2                 db    0
.xdata$x:0000FCA3                 db    0
.xdata$x:0000FCA4                 db    0
.xdata$x:0000FCA5                 db    0
.xdata$x:0000FCA6                 db    0
.xdata$x:0000FCA7                 db    0
.xdata$x:0000FCA7 _xdata$x        ends
.xdata$x:0000FCA7
.xdata$x:0000FCA8 ; ===========================================================================
.xdata$x:0000FCA8
.xdata$x:0000FCA8 ; Segment type: Pure data
.xdata$x:0000FCA8 ; Segment permissions: Read
.xdata$x:0000FCA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FCA8                 assume cs:_xdata$x
.xdata$x:0000FCA8                 ;org 0FCA8h
.xdata$x:0000FCA8 ; COMDAT (pick associative to section at 82AC)
.xdata$x:0000FCA8 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000FCA8                                         ; DATA XREF: .xdata$x:0000FCB8o
.xdata$x:0000FCA9                 db 0FFh
.xdata$x:0000FCAA                 db 0FFh
.xdata$x:0000FCAB                 db 0FFh
.xdata$x:0000FCAC                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0
.xdata$x:0000FCB0 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000FCB0                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z+11o
.xdata$x:0000FCB1                 db    5
.xdata$x:0000FCB2                 db  93h ; ô
.xdata$x:0000FCB3                 db  19h
.xdata$x:0000FCB4                 db    1
.xdata$x:0000FCB5                 db    0
.xdata$x:0000FCB6                 db    0
.xdata$x:0000FCB7                 db    0
.xdata$x:0000FCB8                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.xdata$x:0000FCBC                 db    0
.xdata$x:0000FCBD                 db    0
.xdata$x:0000FCBE                 db    0
.xdata$x:0000FCBF                 db    0
.xdata$x:0000FCC0                 db    0
.xdata$x:0000FCC1                 db    0
.xdata$x:0000FCC2                 db    0
.xdata$x:0000FCC3                 db    0
.xdata$x:0000FCC4                 db    0
.xdata$x:0000FCC5                 db    0
.xdata$x:0000FCC6                 db    0
.xdata$x:0000FCC7                 db    0
.xdata$x:0000FCC8                 db    0
.xdata$x:0000FCC9                 db    0
.xdata$x:0000FCCA                 db    0
.xdata$x:0000FCCB                 db    0
.xdata$x:0000FCCC                 db    0
.xdata$x:0000FCCD                 db    0
.xdata$x:0000FCCE                 db    0
.xdata$x:0000FCCF                 db    0
.xdata$x:0000FCD0                 db    0
.xdata$x:0000FCD1                 db    0
.xdata$x:0000FCD2                 db    0
.xdata$x:0000FCD3                 db    0
.xdata$x:0000FCD3 _xdata$x        ends
.xdata$x:0000FCD3
.xdata$x:0000FCD4 ; ===========================================================================
.xdata$x:0000FCD4
.xdata$x:0000FCD4 ; Segment type: Pure data
.xdata$x:0000FCD4 ; Segment permissions: Read
.xdata$x:0000FCD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FCD4                 assume cs:_xdata$x
.xdata$x:0000FCD4                 ;org 0FCD4h
.xdata$x:0000FCD4 ; COMDAT (pick associative to section at 8344)
.xdata$x:0000FCD4 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000FCD4                                         ; DATA XREF: .xdata$x:0000FCE4o
.xdata$x:0000FCD5                 db 0FFh
.xdata$x:0000FCD6                 db 0FFh
.xdata$x:0000FCD7                 db 0FFh
.xdata$x:0000FCD8                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000FCDC __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000FCDC                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000FCDD                 db    5
.xdata$x:0000FCDE                 db  93h ; ô
.xdata$x:0000FCDF                 db  19h
.xdata$x:0000FCE0                 db    1
.xdata$x:0000FCE1                 db    0
.xdata$x:0000FCE2                 db    0
.xdata$x:0000FCE3                 db    0
.xdata$x:0000FCE4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000FCE8                 align 20h
.xdata$x:0000FCE8 _xdata$x        ends
.xdata$x:0000FCE8
.xdata$x:0000FD00 ; ===========================================================================
.xdata$x:0000FD00
.xdata$x:0000FD00 ; Segment type: Pure data
.xdata$x:0000FD00 ; Segment permissions: Read
.xdata$x:0000FD00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FD00                 assume cs:_xdata$x
.xdata$x:0000FD00                 ;org 0FD00h
.xdata$x:0000FD00 ; COMDAT (pick associative to section at 8158)
.xdata$x:0000FD00 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000FD00                                         ; DATA XREF: .xdata$x:0000FD10o
.xdata$x:0000FD01                 db 0FFh
.xdata$x:0000FD02                 db 0FFh
.xdata$x:0000FD03                 db 0FFh
.xdata$x:0000FD04                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000FD08 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000FD08                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000FD09                 db    5
.xdata$x:0000FD0A                 db  93h ; ô
.xdata$x:0000FD0B                 db  19h
.xdata$x:0000FD0C                 db    1
.xdata$x:0000FD0D                 db    0
.xdata$x:0000FD0E                 db    0
.xdata$x:0000FD0F                 db    0
.xdata$x:0000FD10                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000FD14                 db    0
.xdata$x:0000FD15                 db    0
.xdata$x:0000FD16                 db    0
.xdata$x:0000FD17                 db    0
.xdata$x:0000FD18                 db    0
.xdata$x:0000FD19                 db    0
.xdata$x:0000FD1A                 db    0
.xdata$x:0000FD1B                 db    0
.xdata$x:0000FD1C                 db    0
.xdata$x:0000FD1D                 db    0
.xdata$x:0000FD1E                 db    0
.xdata$x:0000FD1F                 db    0
.xdata$x:0000FD20                 db    0
.xdata$x:0000FD21                 db    0
.xdata$x:0000FD22                 db    0
.xdata$x:0000FD23                 db    0
.xdata$x:0000FD24                 db    0
.xdata$x:0000FD25                 db    0
.xdata$x:0000FD26                 db    0
.xdata$x:0000FD27                 db    0
.xdata$x:0000FD28                 db    0
.xdata$x:0000FD29                 db    0
.xdata$x:0000FD2A                 db    0
.xdata$x:0000FD2B                 db    0
.xdata$x:0000FD2B _xdata$x        ends
.xdata$x:0000FD2B
.xdata$x:0000FD2C ; ===========================================================================
.xdata$x:0000FD2C
.xdata$x:0000FD2C ; Segment type: Pure data
.xdata$x:0000FD2C ; Segment permissions: Read
.xdata$x:0000FD2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FD2C                 assume cs:_xdata$x
.xdata$x:0000FD2C                 ;org 0FD2Ch
.xdata$x:0000FD2C ; COMDAT (pick associative to section at 9994)
.xdata$x:0000FD2C __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000FD2C                                         ; DATA XREF: .xdata$x:0000FD44o
.xdata$x:0000FD2D                 db 0FFh
.xdata$x:0000FD2E                 db 0FFh
.xdata$x:0000FD2F                 db 0FFh
.xdata$x:0000FD30                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000FD34                 align 8
.xdata$x:0000FD38                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000FD3C __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000FD3C                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000FD3D                 db    5
.xdata$x:0000FD3E                 db  93h ; ô
.xdata$x:0000FD3F                 db  19h
.xdata$x:0000FD40                 db    2
.xdata$x:0000FD41                 db    0
.xdata$x:0000FD42                 db    0
.xdata$x:0000FD43                 db    0
.xdata$x:0000FD44                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000FD48                 align 20h
.xdata$x:0000FD48 _xdata$x        ends
.xdata$x:0000FD48
.xdata$x:0000FD60 ; ===========================================================================
.xdata$x:0000FD60
.xdata$x:0000FD60 ; Segment type: Pure data
.xdata$x:0000FD60 ; Segment permissions: Read
.xdata$x:0000FD60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FD60                 assume cs:_xdata$x
.xdata$x:0000FD60                 ;org 0FD60h
.xdata$x:0000FD60 ; COMDAT (pick associative to section at 92EC)
.xdata$x:0000FD60 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000FD60                                         ; DATA XREF: .xdata$x:0000FD70o
.xdata$x:0000FD61                 db 0FFh
.xdata$x:0000FD62                 db 0FFh
.xdata$x:0000FD63                 db 0FFh
.xdata$x:0000FD64                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000FD68 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FD68                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000FD69                 db    5
.xdata$x:0000FD6A                 db  93h ; ô
.xdata$x:0000FD6B                 db  19h
.xdata$x:0000FD6C                 db    1
.xdata$x:0000FD6D                 db    0
.xdata$x:0000FD6E                 db    0
.xdata$x:0000FD6F                 db    0
.xdata$x:0000FD70                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000FD74                 db    0
.xdata$x:0000FD75                 db    0
.xdata$x:0000FD76                 db    0
.xdata$x:0000FD77                 db    0
.xdata$x:0000FD78                 db    0
.xdata$x:0000FD79                 db    0
.xdata$x:0000FD7A                 db    0
.xdata$x:0000FD7B                 db    0
.xdata$x:0000FD7C                 db    0
.xdata$x:0000FD7D                 db    0
.xdata$x:0000FD7E                 db    0
.xdata$x:0000FD7F                 db    0
.xdata$x:0000FD80                 db    0
.xdata$x:0000FD81                 db    0
.xdata$x:0000FD82                 db    0
.xdata$x:0000FD83                 db    0
.xdata$x:0000FD84                 db    0
.xdata$x:0000FD85                 db    0
.xdata$x:0000FD86                 db    0
.xdata$x:0000FD87                 db    0
.xdata$x:0000FD88                 db    0
.xdata$x:0000FD89                 db    0
.xdata$x:0000FD8A                 db    0
.xdata$x:0000FD8B                 db    0
.xdata$x:0000FD8B _xdata$x        ends
.xdata$x:0000FD8B
.xdata$x:0000FD8C ; ===========================================================================
.xdata$x:0000FD8C
.xdata$x:0000FD8C ; Segment type: Pure data
.xdata$x:0000FD8C ; Segment permissions: Read
.xdata$x:0000FD8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FD8C                 assume cs:_xdata$x
.xdata$x:0000FD8C                 ;org 0FD8Ch
.xdata$x:0000FD8C ; COMDAT (pick associative to section at EBF8)
.xdata$x:0000FD8C __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000FD8C                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000FD8D                 db    5
.xdata$x:0000FD8E                 db  93h ; ô
.xdata$x:0000FD8F                 db  19h
.xdata$x:0000FD90                 db  0Eh
.xdata$x:0000FD91                 db    0
.xdata$x:0000FD92                 db    0
.xdata$x:0000FD93                 db    0
.xdata$x:0000FD94                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000FD98                 db    0
.xdata$x:0000FD99                 db    0
.xdata$x:0000FD9A                 db    0
.xdata$x:0000FD9B                 db    0
.xdata$x:0000FD9C                 db    0
.xdata$x:0000FD9D                 db    0
.xdata$x:0000FD9E                 db    0
.xdata$x:0000FD9F                 db    0
.xdata$x:0000FDA0                 db    0
.xdata$x:0000FDA1                 db    0
.xdata$x:0000FDA2                 db    0
.xdata$x:0000FDA3                 db    0
.xdata$x:0000FDA4                 db    0
.xdata$x:0000FDA5                 db    0
.xdata$x:0000FDA6                 db    0
.xdata$x:0000FDA7                 db    0
.xdata$x:0000FDA8                 db    0
.xdata$x:0000FDA9                 db    0
.xdata$x:0000FDAA                 db    0
.xdata$x:0000FDAB                 db    0
.xdata$x:0000FDAC                 db    0
.xdata$x:0000FDAD                 db    0
.xdata$x:0000FDAE                 db    0
.xdata$x:0000FDAF                 db    0
.xdata$x:0000FDB0 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000FDB0                                         ; DATA XREF: .xdata$x:0000FD94o
.xdata$x:0000FDB1                 db 0FFh
.xdata$x:0000FDB2                 db 0FFh
.xdata$x:0000FDB3                 db 0FFh
.xdata$x:0000FDB4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000FDB8                 db    0
.xdata$x:0000FDB9                 db    0
.xdata$x:0000FDBA                 db    0
.xdata$x:0000FDBB                 db    0
.xdata$x:0000FDBC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000FDC0                 db    1
.xdata$x:0000FDC1                 db    0
.xdata$x:0000FDC2                 db    0
.xdata$x:0000FDC3                 db    0
.xdata$x:0000FDC4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000FDC8                 db    2
.xdata$x:0000FDC9                 db    0
.xdata$x:0000FDCA                 db    0
.xdata$x:0000FDCB                 db    0
.xdata$x:0000FDCC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000FDD0                 db    3
.xdata$x:0000FDD1                 db    0
.xdata$x:0000FDD2                 db    0
.xdata$x:0000FDD3                 db    0
.xdata$x:0000FDD4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000FDD8                 db    4
.xdata$x:0000FDD9                 db    0
.xdata$x:0000FDDA                 db    0
.xdata$x:0000FDDB                 db    0
.xdata$x:0000FDDC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000FDE0                 db    3
.xdata$x:0000FDE1                 db    0
.xdata$x:0000FDE2                 db    0
.xdata$x:0000FDE3                 db    0
.xdata$x:0000FDE4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000FDE8                 db    6
.xdata$x:0000FDE9                 db    0
.xdata$x:0000FDEA                 db    0
.xdata$x:0000FDEB                 db    0
.xdata$x:0000FDEC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000FDF0                 db    7
.xdata$x:0000FDF1                 db    0
.xdata$x:0000FDF2                 db    0
.xdata$x:0000FDF3                 db    0
.xdata$x:0000FDF4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000FDF8                 db    3
.xdata$x:0000FDF9                 db    0
.xdata$x:0000FDFA                 db    0
.xdata$x:0000FDFB                 db    0
.xdata$x:0000FDFC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000FE00                 db    9
.xdata$x:0000FE01                 db    0
.xdata$x:0000FE02                 db    0
.xdata$x:0000FE03                 db    0
.xdata$x:0000FE04                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000FE08                 db    3
.xdata$x:0000FE09                 db    0
.xdata$x:0000FE0A                 db    0
.xdata$x:0000FE0B                 db    0
.xdata$x:0000FE0C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000FE10                 db  0Bh
.xdata$x:0000FE11                 db    0
.xdata$x:0000FE12                 db    0
.xdata$x:0000FE13                 db    0
.xdata$x:0000FE14                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000FE18                 db  0Ch
.xdata$x:0000FE19                 db    0
.xdata$x:0000FE1A                 db    0
.xdata$x:0000FE1B                 db    0
.xdata$x:0000FE1C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000FE1C _xdata$x        ends
.xdata$x:0000FE1C
.xdata$x:0000FE20 ; ===========================================================================
.xdata$x:0000FE20
.xdata$x:0000FE20 ; Segment type: Pure data
.xdata$x:0000FE20 ; Segment permissions: Read
.xdata$x:0000FE20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FE20                 assume cs:_xdata$x
.xdata$x:0000FE20                 ;org 0FE20h
.xdata$x:0000FE20 ; COMDAT (pick associative to section at CBC8)
.xdata$x:0000FE20 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000FE20                                         ; DATA XREF: .xdata$x:0000FE30o
.xdata$x:0000FE21                 db 0FFh
.xdata$x:0000FE22                 db 0FFh
.xdata$x:0000FE23                 db 0FFh
.xdata$x:0000FE24                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000FE28 __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000FE28                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000FE29                 db    5
.xdata$x:0000FE2A                 db  93h ; ô
.xdata$x:0000FE2B                 db  19h
.xdata$x:0000FE2C                 db    1
.xdata$x:0000FE2D                 db    0
.xdata$x:0000FE2E                 db    0
.xdata$x:0000FE2F                 db    0
.xdata$x:0000FE30                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000FE34                 db    0
.xdata$x:0000FE35                 db    0
.xdata$x:0000FE36                 db    0
.xdata$x:0000FE37                 db    0
.xdata$x:0000FE38                 db    0
.xdata$x:0000FE39                 db    0
.xdata$x:0000FE3A                 db    0
.xdata$x:0000FE3B                 db    0
.xdata$x:0000FE3C                 db    0
.xdata$x:0000FE3D                 db    0
.xdata$x:0000FE3E                 db    0
.xdata$x:0000FE3F                 db    0
.xdata$x:0000FE40                 db    0
.xdata$x:0000FE41                 db    0
.xdata$x:0000FE42                 db    0
.xdata$x:0000FE43                 db    0
.xdata$x:0000FE44                 db    0
.xdata$x:0000FE45                 db    0
.xdata$x:0000FE46                 db    0
.xdata$x:0000FE47                 db    0
.xdata$x:0000FE48                 db    0
.xdata$x:0000FE49                 db    0
.xdata$x:0000FE4A                 db    0
.xdata$x:0000FE4B                 db    0
.xdata$x:0000FE4B _xdata$x        ends
.xdata$x:0000FE4B
.xdata$x:0000FE4C ; ===========================================================================
.xdata$x:0000FE4C
.xdata$x:0000FE4C ; Segment type: Pure data
.xdata$x:0000FE4C ; Segment permissions: Read
.xdata$x:0000FE4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FE4C                 assume cs:_xdata$x
.xdata$x:0000FE4C                 ;org 0FE4Ch
.xdata$x:0000FE4C ; COMDAT (pick associative to section at D6F8)
.xdata$x:0000FE4C __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000FE4C                                         ; DATA XREF: .xdata$x:0000FE5Co
.xdata$x:0000FE4D                 db 0FFh
.xdata$x:0000FE4E                 db 0FFh
.xdata$x:0000FE4F                 db 0FFh
.xdata$x:0000FE50                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000FE54 __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000FE54                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000FE55                 db    5
.xdata$x:0000FE56                 db  93h ; ô
.xdata$x:0000FE57                 db  19h
.xdata$x:0000FE58                 db    1
.xdata$x:0000FE59                 db    0
.xdata$x:0000FE5A                 db    0
.xdata$x:0000FE5B                 db    0
.xdata$x:0000FE5C                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000FE60                 db    0
.xdata$x:0000FE61                 db    0
.xdata$x:0000FE62                 db    0
.xdata$x:0000FE63                 db    0
.xdata$x:0000FE64                 db    0
.xdata$x:0000FE65                 db    0
.xdata$x:0000FE66                 db    0
.xdata$x:0000FE67                 db    0
.xdata$x:0000FE68                 db    0
.xdata$x:0000FE69                 db    0
.xdata$x:0000FE6A                 db    0
.xdata$x:0000FE6B                 db    0
.xdata$x:0000FE6C                 db    0
.xdata$x:0000FE6D                 db    0
.xdata$x:0000FE6E                 db    0
.xdata$x:0000FE6F                 db    0
.xdata$x:0000FE70                 db    0
.xdata$x:0000FE71                 db    0
.xdata$x:0000FE72                 db    0
.xdata$x:0000FE73                 db    0
.xdata$x:0000FE74                 db    0
.xdata$x:0000FE75                 db    0
.xdata$x:0000FE76                 db    0
.xdata$x:0000FE77                 db    0
.xdata$x:0000FE77 _xdata$x        ends
.xdata$x:0000FE77
.xdata$x:0000FE78 ; ===========================================================================
.xdata$x:0000FE78
.xdata$x:0000FE78 ; Segment type: Pure data
.xdata$x:0000FE78 ; Segment permissions: Read
.xdata$x:0000FE78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FE78                 assume cs:_xdata$x
.xdata$x:0000FE78                 ;org 0FE78h
.xdata$x:0000FE78 ; COMDAT (pick associative to section at F20C)
.xdata$x:0000FE78 __unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z db 0FFh
.xdata$x:0000FE78                                         ; DATA XREF: .xdata$x:0000FE88o
.xdata$x:0000FE79                 db 0FFh
.xdata$x:0000FE7A                 db 0FFh
.xdata$x:0000FE7B                 db 0FFh
.xdata$x:0000FE7C                 dd offset __unwindfunclet$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z$0
.xdata$x:0000FE80 __ehfuncinfo$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z db  22h ; "
.xdata$x:0000FE80                                         ; DATA XREF: __ehhandler$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z+1Bo
.xdata$x:0000FE81                 db    5
.xdata$x:0000FE82                 db  93h ; ô
.xdata$x:0000FE83                 db  19h
.xdata$x:0000FE84                 db    1
.xdata$x:0000FE85                 db    0
.xdata$x:0000FE86                 db    0
.xdata$x:0000FE87                 db    0
.xdata$x:0000FE88                 dd offset __unwindtable$?swap@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXAAV12@@Z
.xdata$x:0000FE8C                 db    0
.xdata$x:0000FE8D                 db    0
.xdata$x:0000FE8E                 db    0
.xdata$x:0000FE8F                 db    0
.xdata$x:0000FE90                 db    0
.xdata$x:0000FE91                 db    0
.xdata$x:0000FE92                 db    0
.xdata$x:0000FE93                 db    0
.xdata$x:0000FE94                 db    0
.xdata$x:0000FE95                 db    0
.xdata$x:0000FE96                 db    0
.xdata$x:0000FE97                 db    0
.xdata$x:0000FE98                 db    0
.xdata$x:0000FE99                 db    0
.xdata$x:0000FE9A                 db    0
.xdata$x:0000FE9B                 db    0
.xdata$x:0000FE9C                 db    0
.xdata$x:0000FE9D                 db    0
.xdata$x:0000FE9E                 db    0
.xdata$x:0000FE9F                 db    0
.xdata$x:0000FEA0                 db    0
.xdata$x:0000FEA1                 db    0
.xdata$x:0000FEA2                 db    0
.xdata$x:0000FEA3                 db    0
.xdata$x:0000FEA3 _xdata$x        ends
.xdata$x:0000FEA3
.xdata$x:0000FEA4 ; ===========================================================================
.xdata$x:0000FEA4
.xdata$x:0000FEA4 ; Segment type: Pure data
.xdata$x:0000FEA4 ; Segment permissions: Read
.xdata$x:0000FEA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FEA4                 assume cs:_xdata$x
.xdata$x:0000FEA4                 ;org 0FEA4h
.xdata$x:0000FEA4 ; COMDAT (pick associative to section at F164)
.xdata$x:0000FEA4 __unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z db 0FFh
.xdata$x:0000FEA4                                         ; DATA XREF: .xdata$x:0000FEB4o
.xdata$x:0000FEA5                 db 0FFh
.xdata$x:0000FEA6                 db 0FFh
.xdata$x:0000FEA7                 db 0FFh
.xdata$x:0000FEA8                 dd offset __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0
.xdata$x:0000FEAC __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z db  22h ; "
.xdata$x:0000FEAC                                         ; DATA XREF: __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z+11o
.xdata$x:0000FEAD                 db    5
.xdata$x:0000FEAE                 db  93h ; ô
.xdata$x:0000FEAF                 db  19h
.xdata$x:0000FEB0                 db    1
.xdata$x:0000FEB1                 db    0
.xdata$x:0000FEB2                 db    0
.xdata$x:0000FEB3                 db    0
.xdata$x:0000FEB4                 dd offset __unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.xdata$x:0000FEB8                 db    0
.xdata$x:0000FEB9                 db    0
.xdata$x:0000FEBA                 db    0
.xdata$x:0000FEBB                 db    0
.xdata$x:0000FEBC                 db    0
.xdata$x:0000FEBD                 db    0
.xdata$x:0000FEBE                 db    0
.xdata$x:0000FEBF                 db    0
.xdata$x:0000FEC0                 db    0
.xdata$x:0000FEC1                 db    0
.xdata$x:0000FEC2                 db    0
.xdata$x:0000FEC3                 db    0
.xdata$x:0000FEC4                 db    0
.xdata$x:0000FEC5                 db    0
.xdata$x:0000FEC6                 db    0
.xdata$x:0000FEC7                 db    0
.xdata$x:0000FEC8                 db    0
.xdata$x:0000FEC9                 db    0
.xdata$x:0000FECA                 db    0
.xdata$x:0000FECB                 db    0
.xdata$x:0000FECC                 db    0
.xdata$x:0000FECD                 db    0
.xdata$x:0000FECE                 db    0
.xdata$x:0000FECF                 db    0
.xdata$x:0000FECF _xdata$x        ends
.xdata$x:0000FECF
.xdata$x:0000FED0 ; ===========================================================================
.xdata$x:0000FED0
.xdata$x:0000FED0 ; Segment type: Pure data
.xdata$x:0000FED0 ; Segment permissions: Read
.xdata$x:0000FED0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FED0                 assume cs:_xdata$x
.xdata$x:0000FED0                 ;org 0FED0h
.xdata$x:0000FED0 ; COMDAT (pick associative to section at ACD4)
.xdata$x:0000FED0 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000FED0                                         ; DATA XREF: .xdata$x:0000FF58o
.xdata$x:0000FED1                 db    0
.xdata$x:0000FED2                 db    0
.xdata$x:0000FED3                 db    0
.xdata$x:0000FED4                 db    0
.xdata$x:0000FED5                 db    0
.xdata$x:0000FED6                 db    0
.xdata$x:0000FED7                 db    0
.xdata$x:0000FED8                 db    0
.xdata$x:0000FED9                 db    0
.xdata$x:0000FEDA                 db    0
.xdata$x:0000FEDB                 db    0
.xdata$x:0000FEDC                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000FEE0 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000FEE0                                         ; DATA XREF: .xdata$x:0000FF44o
.xdata$x:0000FEE1                 db    0
.xdata$x:0000FEE2                 db    0
.xdata$x:0000FEE3                 db    0
.xdata$x:0000FEE4                 db    0
.xdata$x:0000FEE5                 db    0
.xdata$x:0000FEE6                 db    0
.xdata$x:0000FEE7                 db    0
.xdata$x:0000FEE8                 db    0
.xdata$x:0000FEE9                 db    0
.xdata$x:0000FEEA                 db    0
.xdata$x:0000FEEB                 db    0
.xdata$x:0000FEEC                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000FEF0 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000FEF0                                         ; DATA XREF: .xdata$x:0000FF18o
.xdata$x:0000FEF1                 db 0FFh
.xdata$x:0000FEF2                 db 0FFh
.xdata$x:0000FEF3                 db 0FFh
.xdata$x:0000FEF4                 db    0
.xdata$x:0000FEF5                 db    0
.xdata$x:0000FEF6                 db    0
.xdata$x:0000FEF7                 db    0
.xdata$x:0000FEF8                 db 0FFh
.xdata$x:0000FEF9                 db 0FFh
.xdata$x:0000FEFA                 db 0FFh
.xdata$x:0000FEFB                 db 0FFh
.xdata$x:0000FEFC                 db    0
.xdata$x:0000FEFD                 db    0
.xdata$x:0000FEFE                 db    0
.xdata$x:0000FEFF                 db    0
.xdata$x:0000FF00                 db    1
.xdata$x:0000FF01                 db    0
.xdata$x:0000FF02                 db    0
.xdata$x:0000FF03                 db    0
.xdata$x:0000FF04                 db    0
.xdata$x:0000FF05                 db    0
.xdata$x:0000FF06                 db    0
.xdata$x:0000FF07                 db    0
.xdata$x:0000FF08                 db    1
.xdata$x:0000FF09                 db    0
.xdata$x:0000FF0A                 db    0
.xdata$x:0000FF0B                 db    0
.xdata$x:0000FF0C                 db    0
.xdata$x:0000FF0D                 db    0
.xdata$x:0000FF0E                 db    0
.xdata$x:0000FF0F                 db    0
.xdata$x:0000FF10 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000FF10                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000FF11                 db    5
.xdata$x:0000FF12                 db  93h ; ô
.xdata$x:0000FF13                 db  19h
.xdata$x:0000FF14                 db    4
.xdata$x:0000FF15                 db    0
.xdata$x:0000FF16                 db    0
.xdata$x:0000FF17                 db    0
.xdata$x:0000FF18                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000FF1C                 db    2
.xdata$x:0000FF1D                 db    0
.xdata$x:0000FF1E                 db    0
.xdata$x:0000FF1F                 db    0
.xdata$x:0000FF20                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000FF24                 db    0
.xdata$x:0000FF25                 db    0
.xdata$x:0000FF26                 db    0
.xdata$x:0000FF27                 db    0
.xdata$x:0000FF28                 db    0
.xdata$x:0000FF29                 db    0
.xdata$x:0000FF2A                 db    0
.xdata$x:0000FF2B                 db    0
.xdata$x:0000FF2C                 db    0
.xdata$x:0000FF2D                 db    0
.xdata$x:0000FF2E                 db    0
.xdata$x:0000FF2F                 db    0
.xdata$x:0000FF30                 db    0
.xdata$x:0000FF31                 db    0
.xdata$x:0000FF32                 db    0
.xdata$x:0000FF33                 db    0
.xdata$x:0000FF34 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000FF34                                         ; DATA XREF: .xdata$x:0000FF20o
.xdata$x:0000FF35                 db    0
.xdata$x:0000FF36                 db    0
.xdata$x:0000FF37                 db    0
.xdata$x:0000FF38                 db    2
.xdata$x:0000FF39                 db    0
.xdata$x:0000FF3A                 db    0
.xdata$x:0000FF3B                 db    0
.xdata$x:0000FF3C                 db    3
.xdata$x:0000FF3D                 db    0
.xdata$x:0000FF3E                 db    0
.xdata$x:0000FF3F                 db    0
.xdata$x:0000FF40                 db    1
.xdata$x:0000FF41                 db    0
.xdata$x:0000FF42                 db    0
.xdata$x:0000FF43                 db    0
.xdata$x:0000FF44                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000FF48                 align 10h
.xdata$x:0000FF50                 db    3
.xdata$x:0000FF51                 db    0
.xdata$x:0000FF52                 db    0
.xdata$x:0000FF53                 db    0
.xdata$x:0000FF54                 db    1
.xdata$x:0000FF55                 db    0
.xdata$x:0000FF56                 db    0
.xdata$x:0000FF57                 db    0
.xdata$x:0000FF58                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000FF58 _xdata$x        ends
.xdata$x:0000FF58
.xdata$x:0000FF5C ; ===========================================================================
.xdata$x:0000FF5C
.xdata$x:0000FF5C ; Segment type: Pure data
.xdata$x:0000FF5C ; Segment permissions: Read
.xdata$x:0000FF5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FF5C                 assume cs:_xdata$x
.xdata$x:0000FF5C                 ;org 0FF5Ch
.xdata$x:0000FF5C ; COMDAT (pick associative to section at BC48)
.xdata$x:0000FF5C __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000FF5C                                         ; DATA XREF: .xdata$x:0000FF74o
.xdata$x:0000FF5D                 db 0FFh
.xdata$x:0000FF5E                 db 0FFh
.xdata$x:0000FF5F                 db 0FFh
.xdata$x:0000FF60                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000FF64                 align 8
.xdata$x:0000FF68                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000FF6C __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000FF6C                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000FF6D                 db    5
.xdata$x:0000FF6E                 db  93h ; ô
.xdata$x:0000FF6F                 db  19h
.xdata$x:0000FF70                 db    2
.xdata$x:0000FF71                 db    0
.xdata$x:0000FF72                 db    0
.xdata$x:0000FF73                 db    0
.xdata$x:0000FF74                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000FF78                 db    0
.xdata$x:0000FF79                 db    0
.xdata$x:0000FF7A                 db    0
.xdata$x:0000FF7B                 db    0
.xdata$x:0000FF7C                 db    0
.xdata$x:0000FF7D                 db    0
.xdata$x:0000FF7E                 db    0
.xdata$x:0000FF7F                 db    0
.xdata$x:0000FF80                 db    0
.xdata$x:0000FF81                 db    0
.xdata$x:0000FF82                 db    0
.xdata$x:0000FF83                 db    0
.xdata$x:0000FF84                 db    0
.xdata$x:0000FF85                 db    0
.xdata$x:0000FF86                 db    0
.xdata$x:0000FF87                 db    0
.xdata$x:0000FF88                 db    0
.xdata$x:0000FF89                 db    0
.xdata$x:0000FF8A                 db    0
.xdata$x:0000FF8B                 db    0
.xdata$x:0000FF8C                 db    0
.xdata$x:0000FF8D                 db    0
.xdata$x:0000FF8E                 db    0
.xdata$x:0000FF8F                 db    0
.xdata$x:0000FF8F _xdata$x        ends
.xdata$x:0000FF8F
.xdata$x:0000FF90 ; ===========================================================================
.xdata$x:0000FF90
.xdata$x:0000FF90 ; Segment type: Pure data
.xdata$x:0000FF90 ; Segment permissions: Read
.xdata$x:0000FF90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FF90                 assume cs:_xdata$x
.xdata$x:0000FF90                 ;org 0FF90h
.xdata$x:0000FF90 ; COMDAT (pick associative to section at D0B0)
.xdata$x:0000FF90 __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db 0FFh
.xdata$x:0000FF90                                         ; DATA XREF: .xdata$x:0000FFA0o
.xdata$x:0000FF91                 db 0FFh
.xdata$x:0000FF92                 db 0FFh
.xdata$x:0000FF93                 db 0FFh
.xdata$x:0000FF94                 dd offset __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0
.xdata$x:0000FF98 __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db  22h ; "
.xdata$x:0000FF98                                         ; DATA XREF: __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z+11o
.xdata$x:0000FF99                 db    5
.xdata$x:0000FF9A                 db  93h ; ô
.xdata$x:0000FF9B                 db  19h
.xdata$x:0000FF9C                 db    1
.xdata$x:0000FF9D                 db    0
.xdata$x:0000FF9E                 db    0
.xdata$x:0000FF9F                 db    0
.xdata$x:0000FFA0                 dd offset __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.xdata$x:0000FFA4                 db    0
.xdata$x:0000FFA5                 db    0
.xdata$x:0000FFA6                 db    0
.xdata$x:0000FFA7                 db    0
.xdata$x:0000FFA8                 db    0
.xdata$x:0000FFA9                 db    0
.xdata$x:0000FFAA                 db    0
.xdata$x:0000FFAB                 db    0
.xdata$x:0000FFAC                 db    0
.xdata$x:0000FFAD                 db    0
.xdata$x:0000FFAE                 db    0
.xdata$x:0000FFAF                 db    0
.xdata$x:0000FFB0                 db    0
.xdata$x:0000FFB1                 db    0
.xdata$x:0000FFB2                 db    0
.xdata$x:0000FFB3                 db    0
.xdata$x:0000FFB4                 db    0
.xdata$x:0000FFB5                 db    0
.xdata$x:0000FFB6                 db    0
.xdata$x:0000FFB7                 db    0
.xdata$x:0000FFB8                 db    0
.xdata$x:0000FFB9                 db    0
.xdata$x:0000FFBA                 db    0
.xdata$x:0000FFBB                 db    0
.xdata$x:0000FFBB _xdata$x        ends
.xdata$x:0000FFBB
.xdata$x:0000FFBC ; ===========================================================================
.xdata$x:0000FFBC
.xdata$x:0000FFBC ; Segment type: Pure data
.xdata$x:0000FFBC ; Segment permissions: Read
.xdata$x:0000FFBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FFBC                 assume cs:_xdata$x
.xdata$x:0000FFBC                 ;org 0FFBCh
.xdata$x:0000FFBC ; COMDAT (pick associative to section at 7EFC)
.xdata$x:0000FFBC __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000FFBC                                         ; DATA XREF: .xdata$x:0000FFCCo
.xdata$x:0000FFBD                 db 0FFh
.xdata$x:0000FFBE                 db 0FFh
.xdata$x:0000FFBF                 db 0FFh
.xdata$x:0000FFC0                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000FFC4 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FFC4                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000FFC5                 db    5
.xdata$x:0000FFC6                 db  93h ; ô
.xdata$x:0000FFC7                 db  19h
.xdata$x:0000FFC8                 db    1
.xdata$x:0000FFC9                 db    0
.xdata$x:0000FFCA                 db    0
.xdata$x:0000FFCB                 db    0
.xdata$x:0000FFCC                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000FFD0                 db    0
.xdata$x:0000FFD1                 db    0
.xdata$x:0000FFD2                 db    0
.xdata$x:0000FFD3                 db    0
.xdata$x:0000FFD4                 db    0
.xdata$x:0000FFD5                 db    0
.xdata$x:0000FFD6                 db    0
.xdata$x:0000FFD7                 db    0
.xdata$x:0000FFD8                 db    0
.xdata$x:0000FFD9                 db    0
.xdata$x:0000FFDA                 db    0
.xdata$x:0000FFDB                 db    0
.xdata$x:0000FFDC                 db    0
.xdata$x:0000FFDD                 db    0
.xdata$x:0000FFDE                 db    0
.xdata$x:0000FFDF                 db    0
.xdata$x:0000FFE0                 db    0
.xdata$x:0000FFE1                 db    0
.xdata$x:0000FFE2                 db    0
.xdata$x:0000FFE3                 db    0
.xdata$x:0000FFE4                 db    0
.xdata$x:0000FFE5                 db    0
.xdata$x:0000FFE6                 db    0
.xdata$x:0000FFE7                 db    0
.xdata$x:0000FFE7 _xdata$x        ends
.xdata$x:0000FFE7
.xdata$x:0000FFE8 ; ===========================================================================
.xdata$x:0000FFE8
.xdata$x:0000FFE8 ; Segment type: Pure data
.xdata$x:0000FFE8 ; Segment permissions: Read
.xdata$x:0000FFE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FFE8                 assume cs:_xdata$x
.xdata$x:0000FFE8                 ;org 0FFE8h
.xdata$x:0000FFE8 ; COMDAT (pick associative to section at 91D8)
.xdata$x:0000FFE8 __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000FFE8                                         ; DATA XREF: .xdata$x:0000FFF8o
.xdata$x:0000FFE9                 db 0FFh
.xdata$x:0000FFEA                 db 0FFh
.xdata$x:0000FFEB                 db 0FFh
.xdata$x:0000FFEC                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000FFF0 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000FFF0                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000FFF1                 db    5
.xdata$x:0000FFF2                 db  93h ; ô
.xdata$x:0000FFF3                 db  19h
.xdata$x:0000FFF4                 db    1
.xdata$x:0000FFF5                 db    0
.xdata$x:0000FFF6                 db    0
.xdata$x:0000FFF7                 db    0
.xdata$x:0000FFF8                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000FFFC                 db    0
.xdata$x:0000FFFD                 db    0
.xdata$x:0000FFFE                 db    0
.xdata$x:0000FFFF                 db    0
.xdata$x:00010000                 db    0
.xdata$x:00010001                 db    0
.xdata$x:00010002                 db    0
.xdata$x:00010003                 db    0
.xdata$x:00010004                 db    0
.xdata$x:00010005                 db    0
.xdata$x:00010006                 db    0
.xdata$x:00010007                 db    0
.xdata$x:00010008                 db    0
.xdata$x:00010009                 db    0
.xdata$x:0001000A                 db    0
.xdata$x:0001000B                 db    0
.xdata$x:0001000C                 db    0
.xdata$x:0001000D                 db    0
.xdata$x:0001000E                 db    0
.xdata$x:0001000F                 db    0
.xdata$x:00010010                 db    0
.xdata$x:00010011                 db    0
.xdata$x:00010012                 db    0
.xdata$x:00010013                 db    0
.xdata$x:00010013 _xdata$x        ends
.xdata$x:00010013
.xdata$x:00010014 ; ===========================================================================
.xdata$x:00010014
.xdata$x:00010014 ; Segment type: Pure data
.xdata$x:00010014 ; Segment permissions: Read
.xdata$x:00010014 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010014                 assume cs:_xdata$x
.xdata$x:00010014                 ;org 10014h
.xdata$x:00010014 ; COMDAT (pick associative to section at 7A78)
.xdata$x:00010014 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:00010014                                         ; DATA XREF: .xdata$x:00010024o
.xdata$x:00010015                 db 0FFh
.xdata$x:00010016                 db 0FFh
.xdata$x:00010017                 db 0FFh
.xdata$x:00010018                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:0001001C __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:0001001C                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:0001001D                 db    5
.xdata$x:0001001E                 db  93h ; ô
.xdata$x:0001001F                 db  19h
.xdata$x:00010020                 db    1
.xdata$x:00010021                 db    0
.xdata$x:00010022                 db    0
.xdata$x:00010023                 db    0
.xdata$x:00010024                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:00010028                 align 20h
.xdata$x:00010028 _xdata$x        ends
.xdata$x:00010028
.xdata$x:00010040 ; ===========================================================================
.xdata$x:00010040
.xdata$x:00010040 ; Segment type: Pure data
.xdata$x:00010040 ; Segment permissions: Read
.xdata$x:00010040 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010040                 assume cs:_xdata$x
.xdata$x:00010040                 ;org 10040h
.xdata$x:00010040 ; COMDAT (pick associative to section at 8FA0)
.xdata$x:00010040 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010040                                         ; DATA XREF: .xdata$x:00010050o
.xdata$x:00010041                 db 0FFh
.xdata$x:00010042                 db 0FFh
.xdata$x:00010043                 db 0FFh
.xdata$x:00010044                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:00010048 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010048                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:00010049                 db    5
.xdata$x:0001004A                 db  93h ; ô
.xdata$x:0001004B                 db  19h
.xdata$x:0001004C                 db    1
.xdata$x:0001004D                 db    0
.xdata$x:0001004E                 db    0
.xdata$x:0001004F                 db    0
.xdata$x:00010050                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:00010054                 db    0
.xdata$x:00010055                 db    0
.xdata$x:00010056                 db    0
.xdata$x:00010057                 db    0
.xdata$x:00010058                 db    0
.xdata$x:00010059                 db    0
.xdata$x:0001005A                 db    0
.xdata$x:0001005B                 db    0
.xdata$x:0001005C                 db    0
.xdata$x:0001005D                 db    0
.xdata$x:0001005E                 db    0
.xdata$x:0001005F                 db    0
.xdata$x:00010060                 db    0
.xdata$x:00010061                 db    0
.xdata$x:00010062                 db    0
.xdata$x:00010063                 db    0
.xdata$x:00010064                 db    0
.xdata$x:00010065                 db    0
.xdata$x:00010066                 db    0
.xdata$x:00010067                 db    0
.xdata$x:00010068                 db    0
.xdata$x:00010069                 db    0
.xdata$x:0001006A                 db    0
.xdata$x:0001006B                 db    0
.xdata$x:0001006B _xdata$x        ends
.xdata$x:0001006B
.xdata$x:0001006C ; ===========================================================================
.xdata$x:0001006C
.xdata$x:0001006C ; Segment type: Pure data
.xdata$x:0001006C ; Segment permissions: Read
.xdata$x:0001006C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001006C                 assume cs:_xdata$x
.xdata$x:0001006C                 ;org 1006Ch
.xdata$x:0001006C ; COMDAT (pick associative to section at 84F8)
.xdata$x:0001006C __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0001006C                                         ; DATA XREF: .xdata$x:0001007Co
.xdata$x:0001006D                 db 0FFh
.xdata$x:0001006E                 db 0FFh
.xdata$x:0001006F                 db 0FFh
.xdata$x:00010070                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:00010074 __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010074                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00010075                 db    5
.xdata$x:00010076                 db  93h ; ô
.xdata$x:00010077                 db  19h
.xdata$x:00010078                 db    1
.xdata$x:00010079                 db    0
.xdata$x:0001007A                 db    0
.xdata$x:0001007B                 db    0
.xdata$x:0001007C                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:00010080                 db    0
.xdata$x:00010081                 db    0
.xdata$x:00010082                 db    0
.xdata$x:00010083                 db    0
.xdata$x:00010084                 db    0
.xdata$x:00010085                 db    0
.xdata$x:00010086                 db    0
.xdata$x:00010087                 db    0
.xdata$x:00010088                 db    0
.xdata$x:00010089                 db    0
.xdata$x:0001008A                 db    0
.xdata$x:0001008B                 db    0
.xdata$x:0001008C                 db    0
.xdata$x:0001008D                 db    0
.xdata$x:0001008E                 db    0
.xdata$x:0001008F                 db    0
.xdata$x:00010090                 db    0
.xdata$x:00010091                 db    0
.xdata$x:00010092                 db    0
.xdata$x:00010093                 db    0
.xdata$x:00010094                 db    0
.xdata$x:00010095                 db    0
.xdata$x:00010096                 db    0
.xdata$x:00010097                 db    0
.xdata$x:00010097 _xdata$x        ends
.xdata$x:00010097
.xdata$x:00010098 ; ===========================================================================
.xdata$x:00010098
.xdata$x:00010098 ; Segment type: Pure data
.xdata$x:00010098 ; Segment permissions: Read
.xdata$x:00010098 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010098                 assume cs:_xdata$x
.xdata$x:00010098                 ;org 10098h
.xdata$x:00010098 ; COMDAT (pick associative to section at 9408)
.xdata$x:00010098 __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010098                                         ; DATA XREF: .xdata$x:000100A8o
.xdata$x:00010099                 db 0FFh
.xdata$x:0001009A                 db 0FFh
.xdata$x:0001009B                 db 0FFh
.xdata$x:0001009C                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:000100A0 __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000100A0                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:000100A1                 db    5
.xdata$x:000100A2                 db  93h ; ô
.xdata$x:000100A3                 db  19h
.xdata$x:000100A4                 db    1
.xdata$x:000100A5                 db    0
.xdata$x:000100A6                 db    0
.xdata$x:000100A7                 db    0
.xdata$x:000100A8                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:000100AC                 db    0
.xdata$x:000100AD                 db    0
.xdata$x:000100AE                 db    0
.xdata$x:000100AF                 db    0
.xdata$x:000100B0                 db    0
.xdata$x:000100B1                 db    0
.xdata$x:000100B2                 db    0
.xdata$x:000100B3                 db    0
.xdata$x:000100B4                 db    0
.xdata$x:000100B5                 db    0
.xdata$x:000100B6                 db    0
.xdata$x:000100B7                 db    0
.xdata$x:000100B8                 db    0
.xdata$x:000100B9                 db    0
.xdata$x:000100BA                 db    0
.xdata$x:000100BB                 db    0
.xdata$x:000100BC                 db    0
.xdata$x:000100BD                 db    0
.xdata$x:000100BE                 db    0
.xdata$x:000100BF                 db    0
.xdata$x:000100C0                 db    0
.xdata$x:000100C1                 db    0
.xdata$x:000100C2                 db    0
.xdata$x:000100C3                 db    0
.xdata$x:000100C3 _xdata$x        ends
.xdata$x:000100C3
.xdata$x:000100C4 ; ===========================================================================
.xdata$x:000100C4
.xdata$x:000100C4 ; Segment type: Pure data
.xdata$x:000100C4 ; Segment permissions: Read
.xdata$x:000100C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000100C4                 assume cs:_xdata$x
.xdata$x:000100C4                 ;org 100C4h
.xdata$x:000100C4 ; COMDAT (pick associative to section at CD00)
.xdata$x:000100C4 __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:000100C4                                         ; DATA XREF: .xdata$x:000100D4o
.xdata$x:000100C5                 db 0FFh
.xdata$x:000100C6                 db 0FFh
.xdata$x:000100C7                 db 0FFh
.xdata$x:000100C8                 dd offset __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:000100CC __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:000100CC                                         ; DATA XREF: __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:000100CD                 db    5
.xdata$x:000100CE                 db  93h ; ô
.xdata$x:000100CF                 db  19h
.xdata$x:000100D0                 db    1
.xdata$x:000100D1                 db    0
.xdata$x:000100D2                 db    0
.xdata$x:000100D3                 db    0
.xdata$x:000100D4                 dd offset __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:000100D8                 db    0
.xdata$x:000100D9                 db    0
.xdata$x:000100DA                 db    0
.xdata$x:000100DB                 db    0
.xdata$x:000100DC                 db    0
.xdata$x:000100DD                 db    0
.xdata$x:000100DE                 db    0
.xdata$x:000100DF                 db    0
.xdata$x:000100E0                 db    0
.xdata$x:000100E1                 db    0
.xdata$x:000100E2                 db    0
.xdata$x:000100E3                 db    0
.xdata$x:000100E4                 db    0
.xdata$x:000100E5                 db    0
.xdata$x:000100E6                 db    0
.xdata$x:000100E7                 db    0
.xdata$x:000100E8                 db    0
.xdata$x:000100E9                 db    0
.xdata$x:000100EA                 db    0
.xdata$x:000100EB                 db    0
.xdata$x:000100EC                 db    0
.xdata$x:000100ED                 db    0
.xdata$x:000100EE                 db    0
.xdata$x:000100EF                 db    0
.xdata$x:000100EF _xdata$x        ends
.xdata$x:000100EF
.xdata$x:000100F0 ; ===========================================================================
.xdata$x:000100F0
.xdata$x:000100F0 ; Segment type: Pure data
.xdata$x:000100F0 ; Segment permissions: Read
.xdata$x:000100F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000100F0                 assume cs:_xdata$x
.xdata$x:000100F0                 ;org 100F0h
.xdata$x:000100F0 ; COMDAT (pick associative to section at D7A0)
.xdata$x:000100F0 __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:000100F0                                         ; DATA XREF: .xdata$x:00010100o
.xdata$x:000100F1                 db 0FFh
.xdata$x:000100F2                 db 0FFh
.xdata$x:000100F3                 db 0FFh
.xdata$x:000100F4                 dd offset __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:000100F8 __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:000100F8                                         ; DATA XREF: __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:000100F9                 db    5
.xdata$x:000100FA                 db  93h ; ô
.xdata$x:000100FB                 db  19h
.xdata$x:000100FC                 db    1
.xdata$x:000100FD                 db    0
.xdata$x:000100FE                 db    0
.xdata$x:000100FF                 db    0
.xdata$x:00010100                 dd offset __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:00010104                 db    0
.xdata$x:00010105                 db    0
.xdata$x:00010106                 db    0
.xdata$x:00010107                 db    0
.xdata$x:00010108                 db    0
.xdata$x:00010109                 db    0
.xdata$x:0001010A                 db    0
.xdata$x:0001010B                 db    0
.xdata$x:0001010C                 db    0
.xdata$x:0001010D                 db    0
.xdata$x:0001010E                 db    0
.xdata$x:0001010F                 db    0
.xdata$x:00010110                 db    0
.xdata$x:00010111                 db    0
.xdata$x:00010112                 db    0
.xdata$x:00010113                 db    0
.xdata$x:00010114                 db    0
.xdata$x:00010115                 db    0
.xdata$x:00010116                 db    0
.xdata$x:00010117                 db    0
.xdata$x:00010118                 db    0
.xdata$x:00010119                 db    0
.xdata$x:0001011A                 db    0
.xdata$x:0001011B                 db    0
.xdata$x:0001011B _xdata$x        ends
.xdata$x:0001011B
.xdata$x:0001011C ; ===========================================================================
.xdata$x:0001011C
.xdata$x:0001011C ; Segment type: Pure data
.xdata$x:0001011C ; Segment permissions: Read
.xdata$x:0001011C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001011C                 assume cs:_xdata$x
.xdata$x:0001011C                 ;org 1011Ch
.xdata$x:0001011C ; COMDAT (pick associative to section at BE50)
.xdata$x:0001011C __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:0001011C                                         ; DATA XREF: .xdata$x:0001014Co
.xdata$x:0001011D                 db    0
.xdata$x:0001011E                 db    0
.xdata$x:0001011F                 db    0
.xdata$x:00010120                 db    0
.xdata$x:00010121                 db    0
.xdata$x:00010122                 db    0
.xdata$x:00010123                 db    0
.xdata$x:00010124                 db    0
.xdata$x:00010125                 db    0
.xdata$x:00010126                 db    0
.xdata$x:00010127                 db    0
.xdata$x:00010128                 dd offset __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:0001012C __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:0001012C                                         ; DATA XREF: .xdata$x:00010158o
.xdata$x:0001012D                 db 0FFh
.xdata$x:0001012E                 db 0FFh
.xdata$x:0001012F                 db 0FFh
.xdata$x:00010130                 db    0
.xdata$x:00010131                 db    0
.xdata$x:00010132                 db    0
.xdata$x:00010133                 db    0
.xdata$x:00010134                 db 0FFh
.xdata$x:00010135                 db 0FFh
.xdata$x:00010136                 db 0FFh
.xdata$x:00010137                 db 0FFh
.xdata$x:00010138                 db    0
.xdata$x:00010139                 db    0
.xdata$x:0001013A                 db    0
.xdata$x:0001013B                 db    0
.xdata$x:0001013C __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:0001013C                                         ; DATA XREF: .xdata$x:00010160o
.xdata$x:0001013D                 db    0
.xdata$x:0001013E                 db    0
.xdata$x:0001013F                 db    0
.xdata$x:00010140                 db    0
.xdata$x:00010141                 db    0
.xdata$x:00010142                 db    0
.xdata$x:00010143                 db    0
.xdata$x:00010144                 db    1
.xdata$x:00010145                 db    0
.xdata$x:00010146                 db    0
.xdata$x:00010147                 db    0
.xdata$x:00010148                 db    1
.xdata$x:00010149                 db    0
.xdata$x:0001014A                 db    0
.xdata$x:0001014B                 db    0
.xdata$x:0001014C                 dd offset __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:00010150 __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:00010150                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:00010151                 db    5
.xdata$x:00010152                 db  93h ; ô
.xdata$x:00010153                 db  19h
.xdata$x:00010154                 db    2
.xdata$x:00010155                 db    0
.xdata$x:00010156                 db    0
.xdata$x:00010157                 db    0
.xdata$x:00010158                 dd offset __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:0001015C                 db    1
.xdata$x:0001015D                 db    0
.xdata$x:0001015E                 db    0
.xdata$x:0001015F                 db    0
.xdata$x:00010160                 dd offset __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:00010164                 db    0
.xdata$x:00010165                 db    0
.xdata$x:00010166                 db    0
.xdata$x:00010167                 db    0
.xdata$x:00010168                 db    0
.xdata$x:00010169                 db    0
.xdata$x:0001016A                 db    0
.xdata$x:0001016B                 db    0
.xdata$x:0001016C                 db    0
.xdata$x:0001016D                 db    0
.xdata$x:0001016E                 db    0
.xdata$x:0001016F                 db    0
.xdata$x:00010170                 db    0
.xdata$x:00010171                 db    0
.xdata$x:00010172                 db    0
.xdata$x:00010173                 db    0
.xdata$x:00010173 _xdata$x        ends
.xdata$x:00010173
.xdata$x:00010174 ; ===========================================================================
.xdata$x:00010174
.xdata$x:00010174 ; Segment type: Pure data
.xdata$x:00010174 ; Segment permissions: Read
.xdata$x:00010174 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010174                 assume cs:_xdata$x
.xdata$x:00010174                 ;org 10174h
.xdata$x:00010174 ; COMDAT (pick associative to section at BB6C)
.xdata$x:00010174 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:00010174                                         ; DATA XREF: .xdata$x:00010184o
.xdata$x:00010175                 db 0FFh
.xdata$x:00010176                 db 0FFh
.xdata$x:00010177                 db 0FFh
.xdata$x:00010178                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:0001017C __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:0001017C                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:0001017D                 db    5
.xdata$x:0001017E                 db  93h ; ô
.xdata$x:0001017F                 db  19h
.xdata$x:00010180                 db    1
.xdata$x:00010181                 db    0
.xdata$x:00010182                 db    0
.xdata$x:00010183                 db    0
.xdata$x:00010184                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:00010188                 align 20h
.xdata$x:00010188 _xdata$x        ends
.xdata$x:00010188
.xdata$x:000101A0 ; ===========================================================================
.xdata$x:000101A0
.xdata$x:000101A0 ; Segment type: Pure data
.xdata$x:000101A0 ; Segment permissions: Read
.xdata$x:000101A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000101A0                 assume cs:_xdata$x
.xdata$x:000101A0                 ;org 101A0h
.xdata$x:000101A0 __unwindtable$?isAllowedBeforeDriveLetter@@YA_N_W@Z db 0FFh
.xdata$x:000101A0                                         ; DATA XREF: .xdata$x:000102A0o
.xdata$x:000101A1                 db 0FFh
.xdata$x:000101A2                 db 0FFh
.xdata$x:000101A3                 db 0FFh
.xdata$x:000101A4                 dd offset __unwindfunclet$?isAllowedBeforeDriveLetter@@YA_N_W@Z$0
.xdata$x:000101A8 __unwindtable$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:000101A8                                         ; DATA XREF: .xdata$x:000102C4o
.xdata$x:000101A9                 db 0FFh
.xdata$x:000101AA                 db 0FFh
.xdata$x:000101AB                 db 0FFh
.xdata$x:000101AC                 dd offset __unwindfunclet$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:000101B0 __unwindtable$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:000101B0                                         ; DATA XREF: .xdata$x:000102E8o
.xdata$x:000101B1                 db 0FFh
.xdata$x:000101B2                 db 0FFh
.xdata$x:000101B3                 db 0FFh
.xdata$x:000101B4                 dd offset __unwindfunclet$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:000101B8 __unwindtable$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z db 0FFh
.xdata$x:000101B8                                         ; DATA XREF: .xdata$x:00010354o
.xdata$x:000101B9                 db 0FFh
.xdata$x:000101BA                 db 0FFh
.xdata$x:000101BB                 db 0FFh
.xdata$x:000101BC                 dd offset __unwindfunclet$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z$0
.xdata$x:000101C0 __unwindtable$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z db 0FFh
.xdata$x:000101C0                                         ; DATA XREF: .xdata$x:0001030Co
.xdata$x:000101C1                 db 0FFh
.xdata$x:000101C2                 db 0FFh
.xdata$x:000101C3                 db 0FFh
.xdata$x:000101C4                 dd offset __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1
.xdata$x:000101C8                 db    0
.xdata$x:000101C9                 db    0
.xdata$x:000101CA                 db    0
.xdata$x:000101CB                 db    0
.xdata$x:000101CC                 dd offset __unwindfunclet$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0
.xdata$x:000101D0 __unwindtable$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z db 0FFh
.xdata$x:000101D0                                         ; DATA XREF: .xdata$x:00010330o
.xdata$x:000101D1                 db 0FFh
.xdata$x:000101D2                 db 0FFh
.xdata$x:000101D3                 db 0FFh
.xdata$x:000101D4                 dd offset __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$1
.xdata$x:000101D8                 db    0
.xdata$x:000101D9                 db    0
.xdata$x:000101DA                 db    0
.xdata$x:000101DB                 db    0
.xdata$x:000101DC                 dd offset __unwindfunclet$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z$0
.xdata$x:000101E0 __unwindtable$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z db 0FFh
.xdata$x:000101E0                                         ; DATA XREF: .xdata$x:0001027Co
.xdata$x:000101E1                 db 0FFh
.xdata$x:000101E2                 db 0FFh
.xdata$x:000101E3                 db 0FFh
.xdata$x:000101E4                 dd offset __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$0
.xdata$x:000101E8                 db    0
.xdata$x:000101E9                 db    0
.xdata$x:000101EA                 db    0
.xdata$x:000101EB                 db    0
.xdata$x:000101EC                 dd offset __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$1
.xdata$x:000101F0                 db    1
.xdata$x:000101F1                 db    0
.xdata$x:000101F2                 db    0
.xdata$x:000101F3                 db    0
.xdata$x:000101F4                 dd offset __unwindfunclet$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z$2
.xdata$x:000101F8 __unwindtable$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z db 0FFh
.xdata$x:000101F8                                         ; DATA XREF: .xdata$x:00010378o
.xdata$x:000101F9                 db 0FFh
.xdata$x:000101FA                 db 0FFh
.xdata$x:000101FB                 db 0FFh
.xdata$x:000101FC                 dd offset __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$0
.xdata$x:00010200                 db    0
.xdata$x:00010201                 db    0
.xdata$x:00010202                 db    0
.xdata$x:00010203                 db    0
.xdata$x:00010204                 dd offset __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$1
.xdata$x:00010208                 db    0
.xdata$x:00010209                 db    0
.xdata$x:0001020A                 db    0
.xdata$x:0001020B                 db    0
.xdata$x:0001020C                 dd offset __unwindfunclet$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z$2
.xdata$x:00010210 __unwindtable$?showWordComplete@AutoCompletion@@QAE_N_N@Z db 0FFh
.xdata$x:00010210                                         ; DATA XREF: .xdata$x:000103E4o
.xdata$x:00010211                 db 0FFh
.xdata$x:00010212                 db 0FFh
.xdata$x:00010213                 db 0FFh
.xdata$x:00010214                 dd offset __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$0
.xdata$x:00010218                 db    0
.xdata$x:00010219                 db    0
.xdata$x:0001021A                 db    0
.xdata$x:0001021B                 db    0
.xdata$x:0001021C                 dd offset __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$1
.xdata$x:00010220                 db    1
.xdata$x:00010221                 db    0
.xdata$x:00010222                 db    0
.xdata$x:00010223                 db    0
.xdata$x:00010224                 dd offset __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$2
.xdata$x:00010228                 db    0
.xdata$x:00010229                 db    0
.xdata$x:0001022A                 db    0
.xdata$x:0001022B                 db    0
.xdata$x:0001022C                 dd offset __unwindfunclet$?showWordComplete@AutoCompletion@@QAE_N_N@Z$3
.xdata$x:00010230 __unwindtable$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z db 0FFh
.xdata$x:00010230                                         ; DATA XREF: .xdata$x:00010408o
.xdata$x:00010231                 db 0FFh
.xdata$x:00010232                 db 0FFh
.xdata$x:00010233                 db 0FFh
.xdata$x:00010234                 dd offset __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$0
.xdata$x:00010238                 db 0FFh
.xdata$x:00010239                 db 0FFh
.xdata$x:0001023A                 db 0FFh
.xdata$x:0001023B                 db 0FFh
.xdata$x:0001023C                 dd offset __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$1
.xdata$x:00010240                 db 0FFh
.xdata$x:00010241                 db 0FFh
.xdata$x:00010242                 db 0FFh
.xdata$x:00010243                 db 0FFh
.xdata$x:00010244                 dd offset __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$2
.xdata$x:00010248                 db    2
.xdata$x:00010249                 db    0
.xdata$x:0001024A                 db    0
.xdata$x:0001024B                 db    0
.xdata$x:0001024C                 dd offset __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$3
.xdata$x:00010250 __ehfuncinfo$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z db  22h ; "
.xdata$x:00010250                                         ; DATA XREF: __ehhandler$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z+1Eo
.xdata$x:00010251                 db    5
.xdata$x:00010252                 db  93h ; ô
.xdata$x:00010253                 db  19h
.xdata$x:00010254                 db    8
.xdata$x:00010255                 db    0
.xdata$x:00010256                 db    0
.xdata$x:00010257                 db    0
.xdata$x:00010258                 dd offset __unwindtable$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z
.xdata$x:0001025C                 db    0
.xdata$x:0001025D                 db    0
.xdata$x:0001025E                 db    0
.xdata$x:0001025F                 db    0
.xdata$x:00010260                 db    0
.xdata$x:00010261                 db    0
.xdata$x:00010262                 db    0
.xdata$x:00010263                 db    0
.xdata$x:00010264                 db    0
.xdata$x:00010265                 db    0
.xdata$x:00010266                 db    0
.xdata$x:00010267                 db    0
.xdata$x:00010268                 db    0
.xdata$x:00010269                 db    0
.xdata$x:0001026A                 db    0
.xdata$x:0001026B                 db    0
.xdata$x:0001026C                 db    0
.xdata$x:0001026D                 db    0
.xdata$x:0001026E                 db    0
.xdata$x:0001026F                 db    0
.xdata$x:00010270                 db    0
.xdata$x:00010271                 db    0
.xdata$x:00010272                 db    0
.xdata$x:00010273                 db    0
.xdata$x:00010274 __ehfuncinfo$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z db  22h ; "
.xdata$x:00010274                                         ; DATA XREF: __ehhandler$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z+1Bo
.xdata$x:00010275                 db    5
.xdata$x:00010276                 db  93h ; ô
.xdata$x:00010277                 db  19h
.xdata$x:00010278                 db    3
.xdata$x:00010279                 db    0
.xdata$x:0001027A                 db    0
.xdata$x:0001027B                 db    0
.xdata$x:0001027C                 dd offset __unwindtable$?getRawPath@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@Z
.xdata$x:00010280                 db    0
.xdata$x:00010281                 db    0
.xdata$x:00010282                 db    0
.xdata$x:00010283                 db    0
.xdata$x:00010284                 db    0
.xdata$x:00010285                 db    0
.xdata$x:00010286                 db    0
.xdata$x:00010287                 db    0
.xdata$x:00010288                 db    0
.xdata$x:00010289                 db    0
.xdata$x:0001028A                 db    0
.xdata$x:0001028B                 db    0
.xdata$x:0001028C                 db    0
.xdata$x:0001028D                 db    0
.xdata$x:0001028E                 db    0
.xdata$x:0001028F                 db    0
.xdata$x:00010290                 db    0
.xdata$x:00010291                 db    0
.xdata$x:00010292                 db    0
.xdata$x:00010293                 db    0
.xdata$x:00010294                 db    0
.xdata$x:00010295                 db    0
.xdata$x:00010296                 db    0
.xdata$x:00010297                 db    0
.xdata$x:00010298 __ehfuncinfo$?isAllowedBeforeDriveLetter@@YA_N_W@Z db  22h ; "
.xdata$x:00010298                                         ; DATA XREF: __ehhandler$?isAllowedBeforeDriveLetter@@YA_N_W@Z+11o
.xdata$x:00010299                 db    5
.xdata$x:0001029A                 db  93h ; ô
.xdata$x:0001029B                 db  19h
.xdata$x:0001029C                 db    1
.xdata$x:0001029D                 db    0
.xdata$x:0001029E                 db    0
.xdata$x:0001029F                 db    0
.xdata$x:000102A0                 dd offset __unwindtable$?isAllowedBeforeDriveLetter@@YA_N_W@Z
.xdata$x:000102A4                 db    0
.xdata$x:000102A5                 db    0
.xdata$x:000102A6                 db    0
.xdata$x:000102A7                 db    0
.xdata$x:000102A8                 db    0
.xdata$x:000102A9                 db    0
.xdata$x:000102AA                 db    0
.xdata$x:000102AB                 db    0
.xdata$x:000102AC                 db    0
.xdata$x:000102AD                 db    0
.xdata$x:000102AE                 db    0
.xdata$x:000102AF                 db    0
.xdata$x:000102B0                 db    0
.xdata$x:000102B1                 db    0
.xdata$x:000102B2                 db    0
.xdata$x:000102B3                 db    0
.xdata$x:000102B4                 db    0
.xdata$x:000102B5                 db    0
.xdata$x:000102B6                 db    0
.xdata$x:000102B7                 db    0
.xdata$x:000102B8                 db    0
.xdata$x:000102B9                 db    0
.xdata$x:000102BA                 db    0
.xdata$x:000102BB                 db    0
.xdata$x:000102BC __ehfuncinfo$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:000102BC                                         ; DATA XREF: __ehhandler$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:000102BD                 db    5
.xdata$x:000102BE                 db  93h ; ô
.xdata$x:000102BF                 db  19h
.xdata$x:000102C0                 db    1
.xdata$x:000102C1                 db    0
.xdata$x:000102C2                 db    0
.xdata$x:000102C3                 db    0
.xdata$x:000102C4                 dd offset __unwindtable$?isFile@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:000102C8                 align 20h
.xdata$x:000102E0 __ehfuncinfo$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:000102E0                                         ; DATA XREF: __ehhandler$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:000102E1                 db    5
.xdata$x:000102E2                 db  93h ; ô
.xdata$x:000102E3                 db  19h
.xdata$x:000102E4                 db    1
.xdata$x:000102E5                 db    0
.xdata$x:000102E6                 db    0
.xdata$x:000102E7                 db    0
.xdata$x:000102E8                 dd offset __unwindtable$?isDirectory@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:000102EC                 db    0
.xdata$x:000102ED                 db    0
.xdata$x:000102EE                 db    0
.xdata$x:000102EF                 db    0
.xdata$x:000102F0                 db    0
.xdata$x:000102F1                 db    0
.xdata$x:000102F2                 db    0
.xdata$x:000102F3                 db    0
.xdata$x:000102F4                 db    0
.xdata$x:000102F5                 db    0
.xdata$x:000102F6                 db    0
.xdata$x:000102F7                 db    0
.xdata$x:000102F8                 db    0
.xdata$x:000102F9                 db    0
.xdata$x:000102FA                 db    0
.xdata$x:000102FB                 db    0
.xdata$x:000102FC                 db    0
.xdata$x:000102FD                 db    0
.xdata$x:000102FE                 db    0
.xdata$x:000102FF                 db    0
.xdata$x:00010300                 db    0
.xdata$x:00010301                 db    0
.xdata$x:00010302                 db    0
.xdata$x:00010303                 db    0
.xdata$x:00010304 __ehfuncinfo$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z db  22h ; "
.xdata$x:00010304                                         ; DATA XREF: __ehhandler$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z+11o
.xdata$x:00010305                 db    5
.xdata$x:00010306                 db  93h ; ô
.xdata$x:00010307                 db  19h
.xdata$x:00010308                 db    2
.xdata$x:00010309                 db    0
.xdata$x:0001030A                 db    0
.xdata$x:0001030B                 db    0
.xdata$x:0001030C                 dd offset __unwindtable$?removeTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.xdata$x:00010310                 db    0
.xdata$x:00010311                 db    0
.xdata$x:00010312                 db    0
.xdata$x:00010313                 db    0
.xdata$x:00010314                 db    0
.xdata$x:00010315                 db    0
.xdata$x:00010316                 db    0
.xdata$x:00010317                 db    0
.xdata$x:00010318                 db    0
.xdata$x:00010319                 db    0
.xdata$x:0001031A                 db    0
.xdata$x:0001031B                 db    0
.xdata$x:0001031C                 db    0
.xdata$x:0001031D                 db    0
.xdata$x:0001031E                 db    0
.xdata$x:0001031F                 db    0
.xdata$x:00010320                 db    0
.xdata$x:00010321                 db    0
.xdata$x:00010322                 db    0
.xdata$x:00010323                 db    0
.xdata$x:00010324                 db    0
.xdata$x:00010325                 db    0
.xdata$x:00010326                 db    0
.xdata$x:00010327                 db    0
.xdata$x:00010328 __ehfuncinfo$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z db  22h ; "
.xdata$x:00010328                                         ; DATA XREF: __ehhandler$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z+11o
.xdata$x:00010329                 db    5
.xdata$x:0001032A                 db  93h ; ô
.xdata$x:0001032B                 db  19h
.xdata$x:0001032C                 db    2
.xdata$x:0001032D                 db    0
.xdata$x:0001032E                 db    0
.xdata$x:0001032F                 db    0
.xdata$x:00010330                 dd offset __unwindtable$?addTrailingSlash@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@Z
.xdata$x:00010334                 db    0
.xdata$x:00010335                 db    0
.xdata$x:00010336                 db    0
.xdata$x:00010337                 db    0
.xdata$x:00010338                 db    0
.xdata$x:00010339                 db    0
.xdata$x:0001033A                 db    0
.xdata$x:0001033B                 db    0
.xdata$x:0001033C                 db    0
.xdata$x:0001033D                 db    0
.xdata$x:0001033E                 db    0
.xdata$x:0001033F                 db    0
.xdata$x:00010340                 db    0
.xdata$x:00010341                 db    0
.xdata$x:00010342                 db    0
.xdata$x:00010343                 db    0
.xdata$x:00010344                 db    0
.xdata$x:00010345                 db    0
.xdata$x:00010346                 db    0
.xdata$x:00010347                 db    0
.xdata$x:00010348                 db    0
.xdata$x:00010349                 db    0
.xdata$x:0001034A                 db    0
.xdata$x:0001034B                 db    0
.xdata$x:0001034C __ehfuncinfo$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z db  22h ; "
.xdata$x:0001034C                                         ; DATA XREF: __ehhandler$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z+11o
.xdata$x:0001034D                 db    5
.xdata$x:0001034E                 db  93h ; ô
.xdata$x:0001034F                 db  19h
.xdata$x:00010350                 db    1
.xdata$x:00010351                 db    0
.xdata$x:00010352                 db    0
.xdata$x:00010353                 db    0
.xdata$x:00010354                 dd offset __unwindtable$?isInList@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@Z
.xdata$x:00010358                 db    0
.xdata$x:00010359                 db    0
.xdata$x:0001035A                 db    0
.xdata$x:0001035B                 db    0
.xdata$x:0001035C                 db    0
.xdata$x:0001035D                 db    0
.xdata$x:0001035E                 db    0
.xdata$x:0001035F                 db    0
.xdata$x:00010360                 db    0
.xdata$x:00010361                 db    0
.xdata$x:00010362                 db    0
.xdata$x:00010363                 db    0
.xdata$x:00010364                 db    0
.xdata$x:00010365                 db    0
.xdata$x:00010366                 db    0
.xdata$x:00010367                 db    0
.xdata$x:00010368                 db    0
.xdata$x:00010369                 db    0
.xdata$x:0001036A                 db    0
.xdata$x:0001036B                 db    0
.xdata$x:0001036C                 db    0
.xdata$x:0001036D                 db    0
.xdata$x:0001036E                 db    0
.xdata$x:0001036F                 db    0
.xdata$x:00010370 __ehfuncinfo$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z db  22h ; "
.xdata$x:00010370                                         ; DATA XREF: __ehhandler$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z+1Eo
.xdata$x:00010371                 db    5
.xdata$x:00010372                 db  93h ; ô
.xdata$x:00010373                 db  19h
.xdata$x:00010374                 db    3
.xdata$x:00010375                 db    0
.xdata$x:00010376                 db    0
.xdata$x:00010377                 db    0
.xdata$x:00010378                 dd offset __unwindtable$?getWordArray@AutoCompletion@@AAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@PA_W@Z
.xdata$x:0001037C                 db    0
.xdata$x:0001037D                 db    0
.xdata$x:0001037E                 db    0
.xdata$x:0001037F                 db    0
.xdata$x:00010380                 db    0
.xdata$x:00010381                 db    0
.xdata$x:00010382                 db    0
.xdata$x:00010383                 db    0
.xdata$x:00010384                 db    0
.xdata$x:00010385                 db    0
.xdata$x:00010386                 db    0
.xdata$x:00010387                 db    0
.xdata$x:00010388                 db    0
.xdata$x:00010389                 db    0
.xdata$x:0001038A                 db    0
.xdata$x:0001038B                 db    0
.xdata$x:0001038C                 db    0
.xdata$x:0001038D                 db    0
.xdata$x:0001038E                 db    0
.xdata$x:0001038F                 db    0
.xdata$x:00010390                 db    0
.xdata$x:00010391                 db    0
.xdata$x:00010392                 db    0
.xdata$x:00010393                 db    0
.xdata$x:00010394 __ehfuncinfo$?showPathCompletion@AutoCompletion@@QAEXXZ db  22h ; "
.xdata$x:00010394                                         ; DATA XREF: __ehhandler$?showPathCompletion@AutoCompletion@@QAEXXZ+1Eo
.xdata$x:00010395                 db    5
.xdata$x:00010396                 db  93h ; ô
.xdata$x:00010397                 db  19h
.xdata$x:00010398                 db  0Ah
.xdata$x:00010399                 db    0
.xdata$x:0001039A                 db    0
.xdata$x:0001039B                 db    0
.xdata$x:0001039C                 dd offset __unwindtable$?showPathCompletion@AutoCompletion@@QAEXXZ
.xdata$x:000103A0                 db    0
.xdata$x:000103A1                 db    0
.xdata$x:000103A2                 db    0
.xdata$x:000103A3                 db    0
.xdata$x:000103A4                 db    0
.xdata$x:000103A5                 db    0
.xdata$x:000103A6                 db    0
.xdata$x:000103A7                 db    0
.xdata$x:000103A8                 db    0
.xdata$x:000103A9                 db    0
.xdata$x:000103AA                 db    0
.xdata$x:000103AB                 db    0
.xdata$x:000103AC                 db    0
.xdata$x:000103AD                 db    0
.xdata$x:000103AE                 db    0
.xdata$x:000103AF                 db    0
.xdata$x:000103B0                 db    0
.xdata$x:000103B1                 db    0
.xdata$x:000103B2                 db    0
.xdata$x:000103B3                 db    0
.xdata$x:000103B4                 db    0
.xdata$x:000103B5                 db    0
.xdata$x:000103B6                 db    0
.xdata$x:000103B7                 db    0
.xdata$x:000103B8 __ehfuncinfo$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ db  22h ; "
.xdata$x:000103B8                                         ; DATA XREF: __ehhandler$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ+1Eo
.xdata$x:000103B9                 db    5
.xdata$x:000103BA                 db  93h ; ô
.xdata$x:000103BB                 db  19h
.xdata$x:000103BC                 db    5
.xdata$x:000103BD                 db    0
.xdata$x:000103BE                 db    0
.xdata$x:000103BF                 db    0
.xdata$x:000103C0                 dd offset __unwindtable$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ
.xdata$x:000103C4                 db    0
.xdata$x:000103C5                 db    0
.xdata$x:000103C6                 db    0
.xdata$x:000103C7                 db    0
.xdata$x:000103C8                 db    0
.xdata$x:000103C9                 db    0
.xdata$x:000103CA                 db    0
.xdata$x:000103CB                 db    0
.xdata$x:000103CC                 db    0
.xdata$x:000103CD                 db    0
.xdata$x:000103CE                 db    0
.xdata$x:000103CF                 db    0
.xdata$x:000103D0                 db    0
.xdata$x:000103D1                 db    0
.xdata$x:000103D2                 db    0
.xdata$x:000103D3                 db    0
.xdata$x:000103D4                 db    0
.xdata$x:000103D5                 db    0
.xdata$x:000103D6                 db    0
.xdata$x:000103D7                 db    0
.xdata$x:000103D8                 db    0
.xdata$x:000103D9                 db    0
.xdata$x:000103DA                 db    0
.xdata$x:000103DB                 db    0
.xdata$x:000103DC __ehfuncinfo$?showWordComplete@AutoCompletion@@QAE_N_N@Z db  22h ; "
.xdata$x:000103DC                                         ; DATA XREF: __ehhandler$?showWordComplete@AutoCompletion@@QAE_N_N@Z+1Eo
.xdata$x:000103DD                 db    5
.xdata$x:000103DE                 db  93h ; ô
.xdata$x:000103DF                 db  19h
.xdata$x:000103E0                 db    4
.xdata$x:000103E1                 db    0
.xdata$x:000103E2                 db    0
.xdata$x:000103E3                 db    0
.xdata$x:000103E4                 dd offset __unwindtable$?showWordComplete@AutoCompletion@@QAE_N_N@Z
.xdata$x:000103E8                 align 20h
.xdata$x:00010400 __ehfuncinfo$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z db  22h ; "
.xdata$x:00010400                                         ; DATA XREF: __ehhandler$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z+1Eo
.xdata$x:00010401                 db    5
.xdata$x:00010402                 db  93h ; ô
.xdata$x:00010403                 db  19h
.xdata$x:00010404                 db    4
.xdata$x:00010405                 db    0
.xdata$x:00010406                 db    0
.xdata$x:00010407                 db    0
.xdata$x:00010408                 dd offset __unwindtable$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z
.xdata$x:0001040C                 db    0
.xdata$x:0001040D                 db    0
.xdata$x:0001040E                 db    0
.xdata$x:0001040F                 db    0
.xdata$x:00010410                 db    0
.xdata$x:00010411                 db    0
.xdata$x:00010412                 db    0
.xdata$x:00010413                 db    0
.xdata$x:00010414                 db    0
.xdata$x:00010415                 db    0
.xdata$x:00010416                 db    0
.xdata$x:00010417                 db    0
.xdata$x:00010418                 db    0
.xdata$x:00010419                 db    0
.xdata$x:0001041A                 db    0
.xdata$x:0001041B                 db    0
.xdata$x:0001041C                 db    0
.xdata$x:0001041D                 db    0
.xdata$x:0001041E                 db    0
.xdata$x:0001041F                 db    0
.xdata$x:00010420                 db    0
.xdata$x:00010421                 db    0
.xdata$x:00010422                 db    0
.xdata$x:00010423                 db    0
.xdata$x:00010424 __ehfuncinfo$?search@InsertedMatchedChars@@QAEHDDH@Z db  22h ; "
.xdata$x:00010424                                         ; DATA XREF: __ehhandler$?search@InsertedMatchedChars@@QAEHDDH@Z+14o
.xdata$x:00010425                 db    5
.xdata$x:00010426                 db  93h ; ô
.xdata$x:00010427                 db  19h
.xdata$x:00010428                 db  0Ch
.xdata$x:00010429                 db    0
.xdata$x:0001042A                 db    0
.xdata$x:0001042B                 db    0
.xdata$x:0001042C                 dd offset __unwindtable$?search@InsertedMatchedChars@@QAEHDDH@Z
.xdata$x:00010430                 db    0
.xdata$x:00010431                 db    0
.xdata$x:00010432                 db    0
.xdata$x:00010433                 db    0
.xdata$x:00010434                 db    0
.xdata$x:00010435                 db    0
.xdata$x:00010436                 db    0
.xdata$x:00010437                 db    0
.xdata$x:00010438                 db    0
.xdata$x:00010439                 db    0
.xdata$x:0001043A                 db    0
.xdata$x:0001043B                 db    0
.xdata$x:0001043C                 db    0
.xdata$x:0001043D                 db    0
.xdata$x:0001043E                 db    0
.xdata$x:0001043F                 db    0
.xdata$x:00010440                 db    0
.xdata$x:00010441                 db    0
.xdata$x:00010442                 db    0
.xdata$x:00010443                 db    0
.xdata$x:00010444                 db    0
.xdata$x:00010445                 db    0
.xdata$x:00010446                 db    0
.xdata$x:00010447                 db    0
.xdata$x:00010448 __ehfuncinfo$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z db  22h ; "
.xdata$x:00010448                                         ; DATA XREF: __ehhandler$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z+14o
.xdata$x:00010449                 db    5
.xdata$x:0001044A                 db  93h ; ô
.xdata$x:0001044B                 db  19h
.xdata$x:0001044C                 db    6
.xdata$x:0001044D                 db    0
.xdata$x:0001044E                 db    0
.xdata$x:0001044F                 db    0
.xdata$x:00010450                 dd offset __unwindtable$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z
.xdata$x:00010454                 db    0
.xdata$x:00010455                 db    0
.xdata$x:00010456                 db    0
.xdata$x:00010457                 db    0
.xdata$x:00010458                 db    0
.xdata$x:00010459                 db    0
.xdata$x:0001045A                 db    0
.xdata$x:0001045B                 db    0
.xdata$x:0001045C                 db    0
.xdata$x:0001045D                 db    0
.xdata$x:0001045E                 db    0
.xdata$x:0001045F                 db    0
.xdata$x:00010460                 db    0
.xdata$x:00010461                 db    0
.xdata$x:00010462                 db    0
.xdata$x:00010463                 db    0
.xdata$x:00010464                 db    0
.xdata$x:00010465                 db    0
.xdata$x:00010466                 db    0
.xdata$x:00010467                 db    0
.xdata$x:00010468                 db    0
.xdata$x:00010469                 db    0
.xdata$x:0001046A                 db    0
.xdata$x:0001046B                 db    0
.xdata$x:0001046C __unwindtable$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ db 0FFh
.xdata$x:0001046C                                         ; DATA XREF: .xdata$x:000103C0o
.xdata$x:0001046D                 db 0FFh
.xdata$x:0001046E                 db 0FFh
.xdata$x:0001046F                 db 0FFh
.xdata$x:00010470                 dd offset __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$0
.xdata$x:00010474                 align 8
.xdata$x:00010478                 dd offset __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$1
.xdata$x:0001047C                 align 10h
.xdata$x:00010480                 dd offset __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$2
.xdata$x:00010484                 db    2
.xdata$x:00010485                 db    0
.xdata$x:00010486                 db    0
.xdata$x:00010487                 db    0
.xdata$x:00010488                 dd offset __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$3
.xdata$x:0001048C                 align 10h
.xdata$x:00010490                 dd offset __unwindfunclet$?showApiAndWordComplete@AutoCompletion@@QAE_NXZ$4
.xdata$x:00010494 __unwindtable$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z db 0FFh
.xdata$x:00010494                                         ; DATA XREF: .xdata$x:00010450o
.xdata$x:00010495                 db 0FFh
.xdata$x:00010496                 db 0FFh
.xdata$x:00010497                 db 0FFh
.xdata$x:00010498                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$0
.xdata$x:0001049C                 align 10h
.xdata$x:000104A0                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$1
.xdata$x:000104A4                 db    1
.xdata$x:000104A5                 db    0
.xdata$x:000104A6                 db    0
.xdata$x:000104A7                 db    0
.xdata$x:000104A8                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$2
.xdata$x:000104AC                 db 0FFh
.xdata$x:000104AD                 db 0FFh
.xdata$x:000104AE                 db 0FFh
.xdata$x:000104AF                 db 0FFh
.xdata$x:000104B0                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$4
.xdata$x:000104B4                 db    3
.xdata$x:000104B5                 db    0
.xdata$x:000104B6                 db    0
.xdata$x:000104B7                 db    0
.xdata$x:000104B8                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$5
.xdata$x:000104BC                 db    4
.xdata$x:000104BD                 db    0
.xdata$x:000104BE                 db    0
.xdata$x:000104BF                 db    0
.xdata$x:000104C0                 dd offset __unwindfunclet$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z$6
.xdata$x:000104C4 __unwindtable$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z db 0FFh
.xdata$x:000104C4                                         ; DATA XREF: .xdata$x:00010258o
.xdata$x:000104C5                 db 0FFh
.xdata$x:000104C6                 db 0FFh
.xdata$x:000104C7                 db 0FFh
.xdata$x:000104C8                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$0
.xdata$x:000104CC                 align 10h
.xdata$x:000104D0                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$1
.xdata$x:000104D4                 db    1
.xdata$x:000104D5                 db    0
.xdata$x:000104D6                 db    0
.xdata$x:000104D7                 db    0
.xdata$x:000104D8                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$2
.xdata$x:000104DC                 db    1
.xdata$x:000104DD                 db    0
.xdata$x:000104DE                 db    0
.xdata$x:000104DF                 db    0
.xdata$x:000104E0                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$3
.xdata$x:000104E4                 db    1
.xdata$x:000104E5                 db    0
.xdata$x:000104E6                 db    0
.xdata$x:000104E7                 db    0
.xdata$x:000104E8                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$4
.xdata$x:000104EC                 db    1
.xdata$x:000104ED                 db    0
.xdata$x:000104EE                 db    0
.xdata$x:000104EF                 db    0
.xdata$x:000104F0                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$5
.xdata$x:000104F4                 db    1
.xdata$x:000104F5                 db    0
.xdata$x:000104F6                 db    0
.xdata$x:000104F7                 db    0
.xdata$x:000104F8                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$6
.xdata$x:000104FC                 db    1
.xdata$x:000104FD                 db    0
.xdata$x:000104FE                 db    0
.xdata$x:000104FF                 db    0
.xdata$x:00010500                 dd offset __unwindfunclet$?getPathsForPathCompletion@@YA_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@1@Z$7
.xdata$x:00010504 __unwindtable$?showPathCompletion@AutoCompletion@@QAEXXZ db 0FFh
.xdata$x:00010504                                         ; DATA XREF: .xdata$x:0001039Co
.xdata$x:00010505                 db 0FFh
.xdata$x:00010506                 db 0FFh
.xdata$x:00010507                 db 0FFh
.xdata$x:00010508                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$0
.xdata$x:0001050C                 align 10h
.xdata$x:00010510                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$1
.xdata$x:00010514                 db    1
.xdata$x:00010515                 db    0
.xdata$x:00010516                 db    0
.xdata$x:00010517                 db    0
.xdata$x:00010518                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$2
.xdata$x:0001051C                 db    2
.xdata$x:0001051D                 db    0
.xdata$x:0001051E                 db    0
.xdata$x:0001051F                 db    0
.xdata$x:00010520                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$3
.xdata$x:00010524                 db    2
.xdata$x:00010525                 db    0
.xdata$x:00010526                 db    0
.xdata$x:00010527                 db    0
.xdata$x:00010528                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$4
.xdata$x:0001052C                 db    4
.xdata$x:0001052D                 db    0
.xdata$x:0001052E                 db    0
.xdata$x:0001052F                 db    0
.xdata$x:00010530                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$5
.xdata$x:00010534                 db    4
.xdata$x:00010535                 db    0
.xdata$x:00010536                 db    0
.xdata$x:00010537                 db    0
.xdata$x:00010538                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$6
.xdata$x:0001053C                 db    6
.xdata$x:0001053D                 db    0
.xdata$x:0001053E                 db    0
.xdata$x:0001053F                 db    0
.xdata$x:00010540                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$7
.xdata$x:00010544                 db    7
.xdata$x:00010545                 db    0
.xdata$x:00010546                 db    0
.xdata$x:00010547                 db    0
.xdata$x:00010548                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$8
.xdata$x:0001054C                 db    8
.xdata$x:0001054D                 db    0
.xdata$x:0001054E                 db    0
.xdata$x:0001054F                 db    0
.xdata$x:00010550                 dd offset __unwindfunclet$?showPathCompletion@AutoCompletion@@QAEXXZ$9
.xdata$x:00010554 __unwindtable$?search@InsertedMatchedChars@@QAEHDDH@Z db 0FFh
.xdata$x:00010554                                         ; DATA XREF: .xdata$x:0001042Co
.xdata$x:00010555                 db 0FFh
.xdata$x:00010556                 db 0FFh
.xdata$x:00010557                 db 0FFh
.xdata$x:00010558                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$0
.xdata$x:0001055C                 align 10h
.xdata$x:00010560                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$1
.xdata$x:00010564                 db    1
.xdata$x:00010565                 db    0
.xdata$x:00010566                 db    0
.xdata$x:00010567                 db    0
.xdata$x:00010568                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$2
.xdata$x:0001056C                 db 0FFh
.xdata$x:0001056D                 db 0FFh
.xdata$x:0001056E                 db 0FFh
.xdata$x:0001056F                 db 0FFh
.xdata$x:00010570                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$4
.xdata$x:00010574                 db    3
.xdata$x:00010575                 db    0
.xdata$x:00010576                 db    0
.xdata$x:00010577                 db    0
.xdata$x:00010578                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$5
.xdata$x:0001057C                 db    4
.xdata$x:0001057D                 db    0
.xdata$x:0001057E                 db    0
.xdata$x:0001057F                 db    0
.xdata$x:00010580                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$6
.xdata$x:00010584                 db 0FFh
.xdata$x:00010585                 db 0FFh
.xdata$x:00010586                 db 0FFh
.xdata$x:00010587                 db 0FFh
.xdata$x:00010588                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$8
.xdata$x:0001058C                 db    6
.xdata$x:0001058D                 db    0
.xdata$x:0001058E                 db    0
.xdata$x:0001058F                 db    0
.xdata$x:00010590                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$9
.xdata$x:00010594                 db    7
.xdata$x:00010595                 db    0
.xdata$x:00010596                 db    0
.xdata$x:00010597                 db    0
.xdata$x:00010598                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$10
.xdata$x:0001059C                 db 0FFh
.xdata$x:0001059D                 db 0FFh
.xdata$x:0001059E                 db 0FFh
.xdata$x:0001059F                 db 0FFh
.xdata$x:000105A0                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$12
.xdata$x:000105A4                 db    9
.xdata$x:000105A5                 db    0
.xdata$x:000105A6                 db    0
.xdata$x:000105A7                 db    0
.xdata$x:000105A8                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$13
.xdata$x:000105AC                 db  0Ah
.xdata$x:000105AD                 db    0
.xdata$x:000105AE                 db    0
.xdata$x:000105AF                 db    0
.xdata$x:000105B0                 dd offset __unwindfunclet$?search@InsertedMatchedChars@@QAEHDDH@Z$14
.xdata$x:000105B0 _xdata$x        ends
.xdata$x:000105B0
.xdata$x:000105B4 ; ===========================================================================
.xdata$x:000105B4
.xdata$x:000105B4 ; Segment type: Pure data
.xdata$x:000105B4 ; Segment permissions: Read
.xdata$x:000105B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000105B4                 assume cs:_xdata$x
.xdata$x:000105B4                 ;org 105B4h
.xdata$x:000105B4 ; COMDAT (pick associative to section at CC64)
.xdata$x:000105B4 __unwindtable$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:000105B4                                         ; DATA XREF: .xdata$x:000105C4o
.xdata$x:000105B5                 db 0FFh
.xdata$x:000105B6                 db 0FFh
.xdata$x:000105B7                 db 0FFh
.xdata$x:000105B8                 dd offset __unwindfunclet$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ$0
.xdata$x:000105BC __ehfuncinfo$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:000105BC                                         ; DATA XREF: __ehhandler$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ+11o
.xdata$x:000105BD                 db    5
.xdata$x:000105BE                 db  93h ; ô
.xdata$x:000105BF                 db  19h
.xdata$x:000105C0                 db    1
.xdata$x:000105C1                 db    0
.xdata$x:000105C2                 db    0
.xdata$x:000105C3                 db    0
.xdata$x:000105C4                 dd offset __unwindtable$?begin@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@XZ
.xdata$x:000105C8                 align 20h
.xdata$x:000105C8 _xdata$x        ends
.xdata$x:000105C8
.xdata$x:000105E0 ; ===========================================================================
.xdata$x:000105E0
.xdata$x:000105E0 ; Segment type: Pure data
.xdata$x:000105E0 ; Segment permissions: Read
.xdata$x:000105E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000105E0                 assume cs:_xdata$x
.xdata$x:000105E0                 ;org 105E0h
.xdata$x:000105E0 ; COMDAT (pick associative to section at B7D0)
.xdata$x:000105E0 __unwindtable$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:000105E0                                         ; DATA XREF: .xdata$x:000105F8o
.xdata$x:000105E1                 db 0FFh
.xdata$x:000105E2                 db 0FFh
.xdata$x:000105E3                 db 0FFh
.xdata$x:000105E4                 dd offset __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1
.xdata$x:000105E8                 db    0
.xdata$x:000105E9                 db    0
.xdata$x:000105EA                 db    0
.xdata$x:000105EB                 db    0
.xdata$x:000105EC                 dd offset __unwindfunclet$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0
.xdata$x:000105F0 __ehfuncinfo$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:000105F0                                         ; DATA XREF: __ehhandler$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z+11o
.xdata$x:000105F1                 db    5
.xdata$x:000105F2                 db  93h ; ô
.xdata$x:000105F3                 db  19h
.xdata$x:000105F4                 db    2
.xdata$x:000105F5                 db    0
.xdata$x:000105F6                 db    0
.xdata$x:000105F7                 db    0
.xdata$x:000105F8                 dd offset __unwindtable$?_Make_iter@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.xdata$x:000105FC                 db    0
.xdata$x:000105FD                 db    0
.xdata$x:000105FE                 db    0
.xdata$x:000105FF                 db    0
.xdata$x:00010600                 db    0
.xdata$x:00010601                 db    0
.xdata$x:00010602                 db    0
.xdata$x:00010603                 db    0
.xdata$x:00010604                 db    0
.xdata$x:00010605                 db    0
.xdata$x:00010606                 db    0
.xdata$x:00010607                 db    0
.xdata$x:00010608                 db    0
.xdata$x:00010609                 db    0
.xdata$x:0001060A                 db    0
.xdata$x:0001060B                 db    0
.xdata$x:0001060C                 db    0
.xdata$x:0001060D                 db    0
.xdata$x:0001060E                 db    0
.xdata$x:0001060F                 db    0
.xdata$x:00010610                 db    0
.xdata$x:00010611                 db    0
.xdata$x:00010612                 db    0
.xdata$x:00010613                 db    0
.xdata$x:00010613 _xdata$x        ends
.xdata$x:00010613
.xdata$x:00010614 ; ===========================================================================
.xdata$x:00010614
.xdata$x:00010614 ; Segment type: Pure data
.xdata$x:00010614 ; Segment permissions: Read
.xdata$x:00010614 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010614                 assume cs:_xdata$x
.xdata$x:00010614                 ;org 10614h
.xdata$x:00010614 ; COMDAT (pick associative to section at DA58)
.xdata$x:00010614 __unwindtable$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:00010614                                         ; DATA XREF: .xdata$x:00010634o
.xdata$x:00010615                 db 0FFh
.xdata$x:00010616                 db 0FFh
.xdata$x:00010617                 db 0FFh
.xdata$x:00010618                 dd offset __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$2
.xdata$x:0001061C                 align 10h
.xdata$x:00010620                 dd offset __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$0
.xdata$x:00010624                 db    1
.xdata$x:00010625                 db    0
.xdata$x:00010626                 db    0
.xdata$x:00010627                 db    0
.xdata$x:00010628                 dd offset __unwindfunclet$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z$1
.xdata$x:0001062C __ehfuncinfo$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0001062C                                         ; DATA XREF: __ehhandler$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z+11o
.xdata$x:0001062D                 db    5
.xdata$x:0001062E                 db  93h ; ô
.xdata$x:0001062F                 db  19h
.xdata$x:00010630                 db    3
.xdata$x:00010631                 db    0
.xdata$x:00010632                 db    0
.xdata$x:00010633                 db    0
.xdata$x:00010634                 dd offset __unwindtable$?erase@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@2@@Z
.xdata$x:00010638                 db    0
.xdata$x:00010639                 db    0
.xdata$x:0001063A                 db    0
.xdata$x:0001063B                 db    0
.xdata$x:0001063C                 db    0
.xdata$x:0001063D                 db    0
.xdata$x:0001063E                 db    0
.xdata$x:0001063F                 db    0
.xdata$x:00010640                 db    0
.xdata$x:00010641                 db    0
.xdata$x:00010642                 db    0
.xdata$x:00010643                 db    0
.xdata$x:00010644                 db    0
.xdata$x:00010645                 db    0
.xdata$x:00010646                 db    0
.xdata$x:00010647                 db    0
.xdata$x:00010648                 db    0
.xdata$x:00010649                 db    0
.xdata$x:0001064A                 db    0
.xdata$x:0001064B                 db    0
.xdata$x:0001064C                 db    0
.xdata$x:0001064D                 db    0
.xdata$x:0001064E                 db    0
.xdata$x:0001064F                 db    0
.xdata$x:0001064F _xdata$x        ends
.xdata$x:0001064F
.xdata$x:00010650 ; ===========================================================================
.xdata$x:00010650
.xdata$x:00010650 ; Segment type: Pure data
.xdata$x:00010650 ; Segment permissions: Read
.xdata$x:00010650 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010650                 assume cs:_xdata$x
.xdata$x:00010650                 ;org 10650h
.xdata$x:00010650 ; COMDAT (pick associative to section at BCF4)
.xdata$x:00010650 __catchsym$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:00010650                                         ; DATA XREF: .xdata$x:00010680o
.xdata$x:00010651                 db    0
.xdata$x:00010652                 db    0
.xdata$x:00010653                 db    0
.xdata$x:00010654                 db    0
.xdata$x:00010655                 db    0
.xdata$x:00010656                 db    0
.xdata$x:00010657                 db    0
.xdata$x:00010658                 db    0
.xdata$x:00010659                 db    0
.xdata$x:0001065A                 db    0
.xdata$x:0001065B                 db    0
.xdata$x:0001065C                 dd offset __catch$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$0
.xdata$x:00010660 __unwindtable$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:00010660                                         ; DATA XREF: .xdata$x:0001068Co
.xdata$x:00010661                 db 0FFh
.xdata$x:00010662                 db 0FFh
.xdata$x:00010663                 db 0FFh
.xdata$x:00010664                 db    0
.xdata$x:00010665                 db    0
.xdata$x:00010666                 db    0
.xdata$x:00010667                 db    0
.xdata$x:00010668                 db 0FFh
.xdata$x:00010669                 db 0FFh
.xdata$x:0001066A                 db 0FFh
.xdata$x:0001066B                 db 0FFh
.xdata$x:0001066C                 db    0
.xdata$x:0001066D                 db    0
.xdata$x:0001066E                 db    0
.xdata$x:0001066F                 db    0
.xdata$x:00010670 __tryblocktable$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z db    0
.xdata$x:00010670                                         ; DATA XREF: .xdata$x:00010694o
.xdata$x:00010671                 db    0
.xdata$x:00010672                 db    0
.xdata$x:00010673                 db    0
.xdata$x:00010674                 db    0
.xdata$x:00010675                 db    0
.xdata$x:00010676                 db    0
.xdata$x:00010677                 db    0
.xdata$x:00010678                 db    1
.xdata$x:00010679                 db    0
.xdata$x:0001067A                 db    0
.xdata$x:0001067B                 db    0
.xdata$x:0001067C                 db    1
.xdata$x:0001067D                 db    0
.xdata$x:0001067E                 db    0
.xdata$x:0001067F                 db    0
.xdata$x:00010680                 dd offset __catchsym$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z$2
.xdata$x:00010684 __ehfuncinfo$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:00010684                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z+11o
.xdata$x:00010685                 db    5
.xdata$x:00010686                 db  93h ; ô
.xdata$x:00010687                 db  19h
.xdata$x:00010688                 db    2
.xdata$x:00010689                 db    0
.xdata$x:0001068A                 db    0
.xdata$x:0001068B                 db    0
.xdata$x:0001068C                 dd offset __unwindtable$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.xdata$x:00010690                 db    1
.xdata$x:00010691                 db    0
.xdata$x:00010692                 db    0
.xdata$x:00010693                 db    0
.xdata$x:00010694                 dd offset __tryblocktable$?_Reallocate@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IAEXI@Z
.xdata$x:00010698                 db    0
.xdata$x:00010699                 db    0
.xdata$x:0001069A                 db    0
.xdata$x:0001069B                 db    0
.xdata$x:0001069C                 db    0
.xdata$x:0001069D                 db    0
.xdata$x:0001069E                 db    0
.xdata$x:0001069F                 db    0
.xdata$x:000106A0                 db    0
.xdata$x:000106A1                 db    0
.xdata$x:000106A2                 db    0
.xdata$x:000106A3                 db    0
.xdata$x:000106A4                 db    0
.xdata$x:000106A5                 db    0
.xdata$x:000106A6                 db    0
.xdata$x:000106A7                 db    0
.xdata$x:000106A7 _xdata$x        ends
.xdata$x:000106A7
.xdata$x:000106A8 ; ===========================================================================
.xdata$x:000106A8
.xdata$x:000106A8 ; Segment type: Pure data
.xdata$x:000106A8 ; Segment permissions: Read
.xdata$x:000106A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000106A8                 assume cs:_xdata$x
.xdata$x:000106A8                 ;org 106A8h
.xdata$x:000106A8 ; COMDAT (pick associative to section at BA90)
.xdata$x:000106A8 __unwindtable$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z db 0FFh
.xdata$x:000106A8                                         ; DATA XREF: .xdata$x:000106B8o
.xdata$x:000106A9                 db 0FFh
.xdata$x:000106AA                 db 0FFh
.xdata$x:000106AB                 db 0FFh
.xdata$x:000106AC                 dd offset __unwindfunclet$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z$0
.xdata$x:000106B0 __ehfuncinfo$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z db  22h ; "
.xdata$x:000106B0                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z+11o
.xdata$x:000106B1                 db    5
.xdata$x:000106B2                 db  93h ; ô
.xdata$x:000106B3                 db  19h
.xdata$x:000106B4                 db    1
.xdata$x:000106B5                 db    0
.xdata$x:000106B6                 db    0
.xdata$x:000106B7                 db    0
.xdata$x:000106B8                 dd offset __unwindtable$?_Orphan_range@?$vector@UMatchedCharInserted@@V?$allocator@UMatchedCharInserted@@@std@@@std@@IBEXPAUMatchedCharInserted@@0@Z
.xdata$x:000106BC                 db    0
.xdata$x:000106BD                 db    0
.xdata$x:000106BE                 db    0
.xdata$x:000106BF                 db    0
.xdata$x:000106C0                 db    0
.xdata$x:000106C1                 db    0
.xdata$x:000106C2                 db    0
.xdata$x:000106C3                 db    0
.xdata$x:000106C4                 db    0
.xdata$x:000106C5                 db    0
.xdata$x:000106C6                 db    0
.xdata$x:000106C7                 db    0
.xdata$x:000106C8                 db    0
.xdata$x:000106C9                 db    0
.xdata$x:000106CA                 db    0
.xdata$x:000106CB                 db    0
.xdata$x:000106CC                 db    0
.xdata$x:000106CD                 db    0
.xdata$x:000106CE                 db    0
.xdata$x:000106CF                 db    0
.xdata$x:000106D0                 db    0
.xdata$x:000106D1                 db    0
.xdata$x:000106D2                 db    0
.xdata$x:000106D3                 db    0
.xdata$x:000106D3 _xdata$x        ends
.xdata$x:000106D3
.xdata$x:000106D4 ; ===========================================================================
.xdata$x:000106D4
.xdata$x:000106D4 ; Segment type: Pure data
.xdata$x:000106D4 ; Segment permissions: Read
.xdata$x:000106D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000106D4                 assume cs:_xdata$x
.xdata$x:000106D4                 ;org 106D4h
.xdata$x:000106D4 ; COMDAT (pick associative to section at 750C)
.xdata$x:000106D4 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:000106D4                                         ; DATA XREF: .xdata$x:000106E4o
.xdata$x:000106D5                 db 0FFh
.xdata$x:000106D6                 db 0FFh
.xdata$x:000106D7                 db 0FFh
.xdata$x:000106D8                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:000106DC __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000106DC                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:000106DD                 db    5
.xdata$x:000106DE                 db  93h ; ô
.xdata$x:000106DF                 db  19h
.xdata$x:000106E0                 db    1
.xdata$x:000106E1                 db    0
.xdata$x:000106E2                 db    0
.xdata$x:000106E3                 db    0
.xdata$x:000106E4                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:000106E8                 align 20h
.xdata$x:000106E8 _xdata$x        ends
.xdata$x:000106E8
.xdata$x:00010700 ; ===========================================================================
.xdata$x:00010700
.xdata$x:00010700 ; Segment type: Pure data
.xdata$x:00010700 ; Segment permissions: Read
.xdata$x:00010700 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010700                 assume cs:_xdata$x
.xdata$x:00010700                 ;org 10700h
.xdata$x:00010700 ; COMDAT (pick associative to section at 8C10)
.xdata$x:00010700 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010700                                         ; DATA XREF: .xdata$x:00010710o
.xdata$x:00010701                 db 0FFh
.xdata$x:00010702                 db 0FFh
.xdata$x:00010703                 db 0FFh
.xdata$x:00010704                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010708 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010708                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010709                 db    5
.xdata$x:0001070A                 db  93h ; ô
.xdata$x:0001070B                 db  19h
.xdata$x:0001070C                 db    1
.xdata$x:0001070D                 db    0
.xdata$x:0001070E                 db    0
.xdata$x:0001070F                 db    0
.xdata$x:00010710                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010714                 db    0
.xdata$x:00010715                 db    0
.xdata$x:00010716                 db    0
.xdata$x:00010717                 db    0
.xdata$x:00010718                 db    0
.xdata$x:00010719                 db    0
.xdata$x:0001071A                 db    0
.xdata$x:0001071B                 db    0
.xdata$x:0001071C                 db    0
.xdata$x:0001071D                 db    0
.xdata$x:0001071E                 db    0
.xdata$x:0001071F                 db    0
.xdata$x:00010720                 db    0
.xdata$x:00010721                 db    0
.xdata$x:00010722                 db    0
.xdata$x:00010723                 db    0
.xdata$x:00010724                 db    0
.xdata$x:00010725                 db    0
.xdata$x:00010726                 db    0
.xdata$x:00010727                 db    0
.xdata$x:00010728                 db    0
.xdata$x:00010729                 db    0
.xdata$x:0001072A                 db    0
.xdata$x:0001072B                 db    0
.xdata$x:0001072B _xdata$x        ends
.xdata$x:0001072B
.xdata$x:0001072C ; ===========================================================================
.xdata$x:0001072C
.xdata$x:0001072C ; Segment type: Pure data
.xdata$x:0001072C ; Segment permissions: Read
.xdata$x:0001072C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001072C                 assume cs:_xdata$x
.xdata$x:0001072C                 ;org 1072Ch
.xdata$x:0001072C ; COMDAT (pick associative to section at 7494)
.xdata$x:0001072C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0001072C                                         ; DATA XREF: .xdata$x:0001073Co
.xdata$x:0001072D                 db 0FFh
.xdata$x:0001072E                 db 0FFh
.xdata$x:0001072F                 db 0FFh
.xdata$x:00010730                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00010734 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00010734                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00010735                 db    5
.xdata$x:00010736                 db  93h ; ô
.xdata$x:00010737                 db  19h
.xdata$x:00010738                 db    1
.xdata$x:00010739                 db    0
.xdata$x:0001073A                 db    0
.xdata$x:0001073B                 db    0
.xdata$x:0001073C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00010740                 db    0
.xdata$x:00010741                 db    0
.xdata$x:00010742                 db    0
.xdata$x:00010743                 db    0
.xdata$x:00010744                 db    0
.xdata$x:00010745                 db    0
.xdata$x:00010746                 db    0
.xdata$x:00010747                 db    0
.xdata$x:00010748                 db    0
.xdata$x:00010749                 db    0
.xdata$x:0001074A                 db    0
.xdata$x:0001074B                 db    0
.xdata$x:0001074C                 db    0
.xdata$x:0001074D                 db    0
.xdata$x:0001074E                 db    0
.xdata$x:0001074F                 db    0
.xdata$x:00010750                 db    0
.xdata$x:00010751                 db    0
.xdata$x:00010752                 db    0
.xdata$x:00010753                 db    0
.xdata$x:00010754                 db    0
.xdata$x:00010755                 db    0
.xdata$x:00010756                 db    0
.xdata$x:00010757                 db    0
.xdata$x:00010757 _xdata$x        ends
.xdata$x:00010757
.xdata$x:00010758 ; ===========================================================================
.xdata$x:00010758
.xdata$x:00010758 ; Segment type: Pure data
.xdata$x:00010758 ; Segment permissions: Read
.xdata$x:00010758 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010758                 assume cs:_xdata$x
.xdata$x:00010758                 ;org 10758h
.xdata$x:00010758 ; COMDAT (pick associative to section at 7C88)
.xdata$x:00010758 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:00010758                                         ; DATA XREF: .xdata$x:00010768o
.xdata$x:00010759                 db 0FFh
.xdata$x:0001075A                 db 0FFh
.xdata$x:0001075B                 db 0FFh
.xdata$x:0001075C                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:00010760 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00010760                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:00010761                 db    5
.xdata$x:00010762                 db  93h ; ô
.xdata$x:00010763                 db  19h
.xdata$x:00010764                 db    1
.xdata$x:00010765                 db    0
.xdata$x:00010766                 db    0
.xdata$x:00010767                 db    0
.xdata$x:00010768                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:0001076C                 db    0
.xdata$x:0001076D                 db    0
.xdata$x:0001076E                 db    0
.xdata$x:0001076F                 db    0
.xdata$x:00010770                 db    0
.xdata$x:00010771                 db    0
.xdata$x:00010772                 db    0
.xdata$x:00010773                 db    0
.xdata$x:00010774                 db    0
.xdata$x:00010775                 db    0
.xdata$x:00010776                 db    0
.xdata$x:00010777                 db    0
.xdata$x:00010778                 db    0
.xdata$x:00010779                 db    0
.xdata$x:0001077A                 db    0
.xdata$x:0001077B                 db    0
.xdata$x:0001077C                 db    0
.xdata$x:0001077D                 db    0
.xdata$x:0001077E                 db    0
.xdata$x:0001077F                 db    0
.xdata$x:00010780                 db    0
.xdata$x:00010781                 db    0
.xdata$x:00010782                 db    0
.xdata$x:00010783                 db    0
.xdata$x:00010783 _xdata$x        ends
.xdata$x:00010783
.xdata$x:00010784 ; ===========================================================================
.xdata$x:00010784
.xdata$x:00010784 ; Segment type: Pure data
.xdata$x:00010784 ; Segment permissions: Read
.xdata$x:00010784 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010784                 assume cs:_xdata$x
.xdata$x:00010784                 ;org 10784h
.xdata$x:00010784 ; COMDAT (pick associative to section at 9088)
.xdata$x:00010784 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010784                                         ; DATA XREF: .xdata$x:00010794o
.xdata$x:00010785                 db 0FFh
.xdata$x:00010786                 db 0FFh
.xdata$x:00010787                 db 0FFh
.xdata$x:00010788                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0001078C __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0001078C                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0001078D                 db    5
.xdata$x:0001078E                 db  93h ; ô
.xdata$x:0001078F                 db  19h
.xdata$x:00010790                 db    1
.xdata$x:00010791                 db    0
.xdata$x:00010792                 db    0
.xdata$x:00010793                 db    0
.xdata$x:00010794                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00010798                 db    0
.xdata$x:00010799                 db    0
.xdata$x:0001079A                 db    0
.xdata$x:0001079B                 db    0
.xdata$x:0001079C                 db    0
.xdata$x:0001079D                 db    0
.xdata$x:0001079E                 db    0
.xdata$x:0001079F                 db    0
.xdata$x:000107A0                 db    0
.xdata$x:000107A1                 db    0
.xdata$x:000107A2                 db    0
.xdata$x:000107A3                 db    0
.xdata$x:000107A4                 db    0
.xdata$x:000107A5                 db    0
.xdata$x:000107A6                 db    0
.xdata$x:000107A7                 db    0
.xdata$x:000107A8                 db    0
.xdata$x:000107A9                 db    0
.xdata$x:000107AA                 db    0
.xdata$x:000107AB                 db    0
.xdata$x:000107AC                 db    0
.xdata$x:000107AD                 db    0
.xdata$x:000107AE                 db    0
.xdata$x:000107AF                 db    0
.xdata$x:000107AF _xdata$x        ends
.xdata$x:000107AF
.xdata$x:000107B0 ; ===========================================================================
.xdata$x:000107B0
.xdata$x:000107B0 ; Segment type: Pure data
.xdata$x:000107B0 ; Segment permissions: Read
.xdata$x:000107B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000107B0                 assume cs:_xdata$x
.xdata$x:000107B0                 ;org 107B0h
.xdata$x:000107B0 ; COMDAT (pick associative to section at 7C04)
.xdata$x:000107B0 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000107B0                                         ; DATA XREF: .xdata$x:000107C0o
.xdata$x:000107B1                 db 0FFh
.xdata$x:000107B2                 db 0FFh
.xdata$x:000107B3                 db 0FFh
.xdata$x:000107B4                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:000107B8 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:000107B8                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:000107B9                 db    5
.xdata$x:000107BA                 db  93h ; ô
.xdata$x:000107BB                 db  19h
.xdata$x:000107BC                 db    1
.xdata$x:000107BD                 db    0
.xdata$x:000107BE                 db    0
.xdata$x:000107BF                 db    0
.xdata$x:000107C0                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:000107C4                 db    0
.xdata$x:000107C5                 db    0
.xdata$x:000107C6                 db    0
.xdata$x:000107C7                 db    0
.xdata$x:000107C8                 db    0
.xdata$x:000107C9                 db    0
.xdata$x:000107CA                 db    0
.xdata$x:000107CB                 db    0
.xdata$x:000107CC                 db    0
.xdata$x:000107CD                 db    0
.xdata$x:000107CE                 db    0
.xdata$x:000107CF                 db    0
.xdata$x:000107D0                 db    0
.xdata$x:000107D1                 db    0
.xdata$x:000107D2                 db    0
.xdata$x:000107D3                 db    0
.xdata$x:000107D4                 db    0
.xdata$x:000107D5                 db    0
.xdata$x:000107D6                 db    0
.xdata$x:000107D7                 db    0
.xdata$x:000107D8                 db    0
.xdata$x:000107D9                 db    0
.xdata$x:000107DA                 db    0
.xdata$x:000107DB                 db    0
.xdata$x:000107DB _xdata$x        ends
.xdata$x:000107DB
.xdata$x:000107DC ; ===========================================================================
.xdata$x:000107DC
.xdata$x:000107DC ; Segment type: Pure data
.xdata$x:000107DC ; Segment permissions: Read
.xdata$x:000107DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000107DC                 assume cs:_xdata$x
.xdata$x:000107DC                 ;org 107DCh
.xdata$x:000107DC ; COMDAT (pick associative to section at 7E80)
.xdata$x:000107DC __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:000107DC                                         ; DATA XREF: .xdata$x:000107ECo
.xdata$x:000107DD                 db 0FFh
.xdata$x:000107DE                 db 0FFh
.xdata$x:000107DF                 db 0FFh
.xdata$x:000107E0                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:000107E4 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:000107E4                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:000107E5                 db    5
.xdata$x:000107E6                 db  93h ; ô
.xdata$x:000107E7                 db  19h
.xdata$x:000107E8                 db    1
.xdata$x:000107E9                 db    0
.xdata$x:000107EA                 db    0
.xdata$x:000107EB                 db    0
.xdata$x:000107EC                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:000107F0                 db    0
.xdata$x:000107F1                 db    0
.xdata$x:000107F2                 db    0
.xdata$x:000107F3                 db    0
.xdata$x:000107F4                 db    0
.xdata$x:000107F5                 db    0
.xdata$x:000107F6                 db    0
.xdata$x:000107F7                 db    0
.xdata$x:000107F8                 db    0
.xdata$x:000107F9                 db    0
.xdata$x:000107FA                 db    0
.xdata$x:000107FB                 db    0
.xdata$x:000107FC                 db    0
.xdata$x:000107FD                 db    0
.xdata$x:000107FE                 db    0
.xdata$x:000107FF                 db    0
.xdata$x:00010800                 db    0
.xdata$x:00010801                 db    0
.xdata$x:00010802                 db    0
.xdata$x:00010803                 db    0
.xdata$x:00010804                 db    0
.xdata$x:00010805                 db    0
.xdata$x:00010806                 db    0
.xdata$x:00010807                 db    0
.xdata$x:00010807 _xdata$x        ends
.xdata$x:00010807
.xdata$x:00010808 ; ===========================================================================
.xdata$x:00010808
.xdata$x:00010808 ; Segment type: Pure data
.xdata$x:00010808 ; Segment permissions: Read
.xdata$x:00010808 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010808                 assume cs:_xdata$x
.xdata$x:00010808                 ;org 10808h
.xdata$x:00010808 ; COMDAT (pick associative to section at 9168)
.xdata$x:00010808 __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010808                                         ; DATA XREF: .xdata$x:00010818o
.xdata$x:00010809                 db 0FFh
.xdata$x:0001080A                 db 0FFh
.xdata$x:0001080B                 db 0FFh
.xdata$x:0001080C                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010810 __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010810                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010811                 db    5
.xdata$x:00010812                 db  93h ; ô
.xdata$x:00010813                 db  19h
.xdata$x:00010814                 db    1
.xdata$x:00010815                 db    0
.xdata$x:00010816                 db    0
.xdata$x:00010817                 db    0
.xdata$x:00010818                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0001081C                 db    0
.xdata$x:0001081D                 db    0
.xdata$x:0001081E                 db    0
.xdata$x:0001081F                 db    0
.xdata$x:00010820                 db    0
.xdata$x:00010821                 db    0
.xdata$x:00010822                 db    0
.xdata$x:00010823                 db    0
.xdata$x:00010824                 db    0
.xdata$x:00010825                 db    0
.xdata$x:00010826                 db    0
.xdata$x:00010827                 db    0
.xdata$x:00010828                 db    0
.xdata$x:00010829                 db    0
.xdata$x:0001082A                 db    0
.xdata$x:0001082B                 db    0
.xdata$x:0001082C                 db    0
.xdata$x:0001082D                 db    0
.xdata$x:0001082E                 db    0
.xdata$x:0001082F                 db    0
.xdata$x:00010830                 db    0
.xdata$x:00010831                 db    0
.xdata$x:00010832                 db    0
.xdata$x:00010833                 db    0
.xdata$x:00010833 _xdata$x        ends
.xdata$x:00010833
.xdata$x:00010834 ; ===========================================================================
.xdata$x:00010834
.xdata$x:00010834 ; Segment type: Pure data
.xdata$x:00010834 ; Segment permissions: Read
.xdata$x:00010834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010834                 assume cs:_xdata$x
.xdata$x:00010834                 ;org 10834h
.xdata$x:00010834 ; COMDAT (pick associative to section at 7E08)
.xdata$x:00010834 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00010834                                         ; DATA XREF: .xdata$x:00010844o
.xdata$x:00010835                 db 0FFh
.xdata$x:00010836                 db 0FFh
.xdata$x:00010837                 db 0FFh
.xdata$x:00010838                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0001083C __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0001083C                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0001083D                 db    5
.xdata$x:0001083E                 db  93h ; ô
.xdata$x:0001083F                 db  19h
.xdata$x:00010840                 db    1
.xdata$x:00010841                 db    0
.xdata$x:00010842                 db    0
.xdata$x:00010843                 db    0
.xdata$x:00010844                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00010848                 align 20h
.xdata$x:00010848 _xdata$x        ends
.xdata$x:00010848
.xdata$x:00010860 ; ===========================================================================
.xdata$x:00010860
.xdata$x:00010860 ; Segment type: Pure data
.xdata$x:00010860 ; Segment permissions: Read
.xdata$x:00010860 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010860                 assume cs:_xdata$x
.xdata$x:00010860                 ;org 10860h
.xdata$x:00010860 ; COMDAT (pick associative to section at 6D9C)
.xdata$x:00010860 __unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z db 0FFh
.xdata$x:00010860                                         ; DATA XREF: .xdata$x:00010888o
.xdata$x:00010861                 db 0FFh
.xdata$x:00010862                 db 0FFh
.xdata$x:00010863                 db 0FFh
.xdata$x:00010864                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$0
.xdata$x:00010868                 db    0
.xdata$x:00010869                 db    0
.xdata$x:0001086A                 db    0
.xdata$x:0001086B                 db    0
.xdata$x:0001086C                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$1
.xdata$x:00010870                 db    1
.xdata$x:00010871                 db    0
.xdata$x:00010872                 db    0
.xdata$x:00010873                 db    0
.xdata$x:00010874                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$2
.xdata$x:00010878                 db    2
.xdata$x:00010879                 db    0
.xdata$x:0001087A                 db    0
.xdata$x:0001087B                 db    0
.xdata$x:0001087C                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z$3
.xdata$x:00010880 __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z db  22h ; "
.xdata$x:00010880                                         ; DATA XREF: __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z+11o
.xdata$x:00010881                 db    5
.xdata$x:00010882                 db  93h ; ô
.xdata$x:00010883                 db  19h
.xdata$x:00010884                 db    4
.xdata$x:00010885                 db    0
.xdata$x:00010886                 db    0
.xdata$x:00010887                 db    0
.xdata$x:00010888                 dd offset __unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0@Z
.xdata$x:0001088C                 db    0
.xdata$x:0001088D                 db    0
.xdata$x:0001088E                 db    0
.xdata$x:0001088F                 db    0
.xdata$x:00010890                 db    0
.xdata$x:00010891                 db    0
.xdata$x:00010892                 db    0
.xdata$x:00010893                 db    0
.xdata$x:00010894                 db    0
.xdata$x:00010895                 db    0
.xdata$x:00010896                 db    0
.xdata$x:00010897                 db    0
.xdata$x:00010898                 db    0
.xdata$x:00010899                 db    0
.xdata$x:0001089A                 db    0
.xdata$x:0001089B                 db    0
.xdata$x:0001089C                 db    0
.xdata$x:0001089D                 db    0
.xdata$x:0001089E                 db    0
.xdata$x:0001089F                 db    0
.xdata$x:000108A0                 db    0
.xdata$x:000108A1                 db    0
.xdata$x:000108A2                 db    0
.xdata$x:000108A3                 db    0
.xdata$x:000108A3 _xdata$x        ends
.xdata$x:000108A3
.xdata$x:000108A4 ; ===========================================================================
.xdata$x:000108A4
.xdata$x:000108A4 ; Segment type: Pure data
.xdata$x:000108A4 ; Segment permissions: Read
.xdata$x:000108A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000108A4                 assume cs:_xdata$x
.xdata$x:000108A4                 ;org 108A4h
.xdata$x:000108A4 ; COMDAT (pick associative to section at 4608)
.xdata$x:000108A4 __unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z db 0FFh
.xdata$x:000108A4                                         ; DATA XREF: .xdata$x:000108BCo
.xdata$x:000108A5                 db 0FFh
.xdata$x:000108A6                 db 0FFh
.xdata$x:000108A7                 db 0FFh
.xdata$x:000108A8                 dd offset __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1
.xdata$x:000108AC                 align 10h
.xdata$x:000108B0                 dd offset __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
.xdata$x:000108B4 __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z db  22h ; "
.xdata$x:000108B4                                         ; DATA XREF: __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z+1Bo
.xdata$x:000108B5                 db    5
.xdata$x:000108B6                 db  93h ; ô
.xdata$x:000108B7                 db  19h
.xdata$x:000108B8                 db    2
.xdata$x:000108B9                 db    0
.xdata$x:000108BA                 db    0
.xdata$x:000108BB                 db    0
.xdata$x:000108BC                 dd offset __unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.xdata$x:000108C0                 db    0
.xdata$x:000108C1                 db    0
.xdata$x:000108C2                 db    0
.xdata$x:000108C3                 db    0
.xdata$x:000108C4                 db    0
.xdata$x:000108C5                 db    0
.xdata$x:000108C6                 db    0
.xdata$x:000108C7                 db    0
.xdata$x:000108C8                 db    0
.xdata$x:000108C9                 db    0
.xdata$x:000108CA                 db    0
.xdata$x:000108CB                 db    0
.xdata$x:000108CC                 db    0
.xdata$x:000108CD                 db    0
.xdata$x:000108CE                 db    0
.xdata$x:000108CF                 db    0
.xdata$x:000108D0                 db    0
.xdata$x:000108D1                 db    0
.xdata$x:000108D2                 db    0
.xdata$x:000108D3                 db    0
.xdata$x:000108D4                 db    0
.xdata$x:000108D5                 db    0
.xdata$x:000108D6                 db    0
.xdata$x:000108D7                 db    0
.xdata$x:000108D7 _xdata$x        ends
.xdata$x:000108D7
.xdata$x:000108D8 ; ===========================================================================
.xdata$x:000108D8
.xdata$x:000108D8 ; Segment type: Pure data
.xdata$x:000108D8 ; Segment permissions: Read
.xdata$x:000108D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000108D8                 assume cs:_xdata$x
.xdata$x:000108D8                 ;org 108D8h
.xdata$x:000108D8 ; COMDAT (pick associative to section at 7420)
.xdata$x:000108D8 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:000108D8                                         ; DATA XREF: .xdata$x:000108E8o
.xdata$x:000108D9                 db 0FFh
.xdata$x:000108DA                 db 0FFh
.xdata$x:000108DB                 db 0FFh
.xdata$x:000108DC                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:000108E0 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000108E0                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:000108E1                 db    5
.xdata$x:000108E2                 db  93h ; ô
.xdata$x:000108E3                 db  19h
.xdata$x:000108E4                 db    1
.xdata$x:000108E5                 db    0
.xdata$x:000108E6                 db    0
.xdata$x:000108E7                 db    0
.xdata$x:000108E8                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:000108EC                 db    0
.xdata$x:000108ED                 db    0
.xdata$x:000108EE                 db    0
.xdata$x:000108EF                 db    0
.xdata$x:000108F0                 db    0
.xdata$x:000108F1                 db    0
.xdata$x:000108F2                 db    0
.xdata$x:000108F3                 db    0
.xdata$x:000108F4                 db    0
.xdata$x:000108F5                 db    0
.xdata$x:000108F6                 db    0
.xdata$x:000108F7                 db    0
.xdata$x:000108F8                 db    0
.xdata$x:000108F9                 db    0
.xdata$x:000108FA                 db    0
.xdata$x:000108FB                 db    0
.xdata$x:000108FC                 db    0
.xdata$x:000108FD                 db    0
.xdata$x:000108FE                 db    0
.xdata$x:000108FF                 db    0
.xdata$x:00010900                 db    0
.xdata$x:00010901                 db    0
.xdata$x:00010902                 db    0
.xdata$x:00010903                 db    0
.xdata$x:00010903 _xdata$x        ends
.xdata$x:00010903
.xdata$x:00010904 ; ===========================================================================
.xdata$x:00010904
.xdata$x:00010904 ; Segment type: Pure data
.xdata$x:00010904 ; Segment permissions: Read
.xdata$x:00010904 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010904                 assume cs:_xdata$x
.xdata$x:00010904                 ;org 10904h
.xdata$x:00010904 ; COMDAT (pick associative to section at 8BA0)
.xdata$x:00010904 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010904                                         ; DATA XREF: .xdata$x:00010914o
.xdata$x:00010905                 db 0FFh
.xdata$x:00010906                 db 0FFh
.xdata$x:00010907                 db 0FFh
.xdata$x:00010908                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0001090C __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0001090C                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0001090D                 db    5
.xdata$x:0001090E                 db  93h ; ô
.xdata$x:0001090F                 db  19h
.xdata$x:00010910                 db    1
.xdata$x:00010911                 db    0
.xdata$x:00010912                 db    0
.xdata$x:00010913                 db    0
.xdata$x:00010914                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010918                 db    0
.xdata$x:00010919                 db    0
.xdata$x:0001091A                 db    0
.xdata$x:0001091B                 db    0
.xdata$x:0001091C                 db    0
.xdata$x:0001091D                 db    0
.xdata$x:0001091E                 db    0
.xdata$x:0001091F                 db    0
.xdata$x:00010920                 db    0
.xdata$x:00010921                 db    0
.xdata$x:00010922                 db    0
.xdata$x:00010923                 db    0
.xdata$x:00010924                 db    0
.xdata$x:00010925                 db    0
.xdata$x:00010926                 db    0
.xdata$x:00010927                 db    0
.xdata$x:00010928                 db    0
.xdata$x:00010929                 db    0
.xdata$x:0001092A                 db    0
.xdata$x:0001092B                 db    0
.xdata$x:0001092C                 db    0
.xdata$x:0001092D                 db    0
.xdata$x:0001092E                 db    0
.xdata$x:0001092F                 db    0
.xdata$x:0001092F _xdata$x        ends
.xdata$x:0001092F
.xdata$x:00010930 ; ===========================================================================
.xdata$x:00010930
.xdata$x:00010930 ; Segment type: Pure data
.xdata$x:00010930 ; Segment permissions: Read
.xdata$x:00010930 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010930                 assume cs:_xdata$x
.xdata$x:00010930                 ;org 10930h
.xdata$x:00010930 ; COMDAT (pick associative to section at 73A8)
.xdata$x:00010930 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00010930                                         ; DATA XREF: .xdata$x:00010940o
.xdata$x:00010931                 db 0FFh
.xdata$x:00010932                 db 0FFh
.xdata$x:00010933                 db 0FFh
.xdata$x:00010934                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00010938 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00010938                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00010939                 db    5
.xdata$x:0001093A                 db  93h ; ô
.xdata$x:0001093B                 db  19h
.xdata$x:0001093C                 db    1
.xdata$x:0001093D                 db    0
.xdata$x:0001093E                 db    0
.xdata$x:0001093F                 db    0
.xdata$x:00010940                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UMatchedCharInserted@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00010944                 db    0
.xdata$x:00010945                 db    0
.xdata$x:00010946                 db    0
.xdata$x:00010947                 db    0
.xdata$x:00010948                 db    0
.xdata$x:00010949                 db    0
.xdata$x:0001094A                 db    0
.xdata$x:0001094B                 db    0
.xdata$x:0001094C                 db    0
.xdata$x:0001094D                 db    0
.xdata$x:0001094E                 db    0
.xdata$x:0001094F                 db    0
.xdata$x:00010950                 db    0
.xdata$x:00010951                 db    0
.xdata$x:00010952                 db    0
.xdata$x:00010953                 db    0
.xdata$x:00010954                 db    0
.xdata$x:00010955                 db    0
.xdata$x:00010956                 db    0
.xdata$x:00010957                 db    0
.xdata$x:00010958                 db    0
.xdata$x:00010959                 db    0
.xdata$x:0001095A                 db    0
.xdata$x:0001095B                 db    0
.xdata$x:0001095B _xdata$x        ends
.xdata$x:0001095B
.xdata$x:0001095C ; ===========================================================================
.xdata$x:0001095C
.xdata$x:0001095C ; Segment type: Pure data
.xdata$x:0001095C ; Segment permissions: Read
.xdata$x:0001095C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001095C                 assume cs:_xdata$x
.xdata$x:0001095C                 ;org 1095Ch
.xdata$x:0001095C ; COMDAT (pick associative to section at 7B78)
.xdata$x:0001095C __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:0001095C                                         ; DATA XREF: .xdata$x:0001096Co
.xdata$x:0001095D                 db 0FFh
.xdata$x:0001095E                 db 0FFh
.xdata$x:0001095F                 db 0FFh
.xdata$x:00010960                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0
.xdata$x:00010964 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00010964                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z+11o
.xdata$x:00010965                 db    5
.xdata$x:00010966                 db  93h ; ô
.xdata$x:00010967                 db  19h
.xdata$x:00010968                 db    1
.xdata$x:00010969                 db    0
.xdata$x:0001096A                 db    0
.xdata$x:0001096B                 db    0
.xdata$x:0001096C                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.xdata$x:00010970                 db    0
.xdata$x:00010971                 db    0
.xdata$x:00010972                 db    0
.xdata$x:00010973                 db    0
.xdata$x:00010974                 db    0
.xdata$x:00010975                 db    0
.xdata$x:00010976                 db    0
.xdata$x:00010977                 db    0
.xdata$x:00010978                 db    0
.xdata$x:00010979                 db    0
.xdata$x:0001097A                 db    0
.xdata$x:0001097B                 db    0
.xdata$x:0001097C                 db    0
.xdata$x:0001097D                 db    0
.xdata$x:0001097E                 db    0
.xdata$x:0001097F                 db    0
.xdata$x:00010980                 db    0
.xdata$x:00010981                 db    0
.xdata$x:00010982                 db    0
.xdata$x:00010983                 db    0
.xdata$x:00010984                 db    0
.xdata$x:00010985                 db    0
.xdata$x:00010986                 db    0
.xdata$x:00010987                 db    0
.xdata$x:00010987 _xdata$x        ends
.xdata$x:00010987
.xdata$x:00010988 ; ===========================================================================
.xdata$x:00010988
.xdata$x:00010988 ; Segment type: Pure data
.xdata$x:00010988 ; Segment permissions: Read
.xdata$x:00010988 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010988                 assume cs:_xdata$x
.xdata$x:00010988                 ;org 10988h
.xdata$x:00010988 ; COMDAT (pick associative to section at 9018)
.xdata$x:00010988 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010988                                         ; DATA XREF: .xdata$x:00010998o
.xdata$x:00010989                 db 0FFh
.xdata$x:0001098A                 db 0FFh
.xdata$x:0001098B                 db 0FFh
.xdata$x:0001098C                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010990 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010990                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010991                 db    5
.xdata$x:00010992                 db  93h ; ô
.xdata$x:00010993                 db  19h
.xdata$x:00010994                 db    1
.xdata$x:00010995                 db    0
.xdata$x:00010996                 db    0
.xdata$x:00010997                 db    0
.xdata$x:00010998                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.xdata$x:0001099C                 db    0
.xdata$x:0001099D                 db    0
.xdata$x:0001099E                 db    0
.xdata$x:0001099F                 db    0
.xdata$x:000109A0                 db    0
.xdata$x:000109A1                 db    0
.xdata$x:000109A2                 db    0
.xdata$x:000109A3                 db    0
.xdata$x:000109A4                 db    0
.xdata$x:000109A5                 db    0
.xdata$x:000109A6                 db    0
.xdata$x:000109A7                 db    0
.xdata$x:000109A8                 db    0
.xdata$x:000109A9                 db    0
.xdata$x:000109AA                 db    0
.xdata$x:000109AB                 db    0
.xdata$x:000109AC                 db    0
.xdata$x:000109AD                 db    0
.xdata$x:000109AE                 db    0
.xdata$x:000109AF                 db    0
.xdata$x:000109B0                 db    0
.xdata$x:000109B1                 db    0
.xdata$x:000109B2                 db    0
.xdata$x:000109B3                 db    0
.xdata$x:000109B3 _xdata$x        ends
.xdata$x:000109B3
.xdata$x:000109B4 ; ===========================================================================
.xdata$x:000109B4
.xdata$x:000109B4 ; Segment type: Pure data
.xdata$x:000109B4 ; Segment permissions: Read
.xdata$x:000109B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000109B4                 assume cs:_xdata$x
.xdata$x:000109B4                 ;org 109B4h
.xdata$x:000109B4 ; COMDAT (pick associative to section at 7AF4)
.xdata$x:000109B4 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000109B4                                         ; DATA XREF: .xdata$x:000109C4o
.xdata$x:000109B5                 db 0FFh
.xdata$x:000109B6                 db 0FFh
.xdata$x:000109B7                 db 0FFh
.xdata$x:000109B8                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:000109BC __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:000109BC                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:000109BD                 db    5
.xdata$x:000109BE                 db  93h ; ô
.xdata$x:000109BF                 db  19h
.xdata$x:000109C0                 db    1
.xdata$x:000109C1                 db    0
.xdata$x:000109C2                 db    0
.xdata$x:000109C3                 db    0
.xdata$x:000109C4                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:000109C8                 align 20h
.xdata$x:000109C8 _xdata$x        ends
.xdata$x:000109C8
.xdata$x:000109E0 ; ===========================================================================
.xdata$x:000109E0
.xdata$x:000109E0 ; Segment type: Pure data
.xdata$x:000109E0 ; Segment permissions: Read
.xdata$x:000109E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000109E0                 assume cs:_xdata$x
.xdata$x:000109E0                 ;org 109E0h
.xdata$x:000109E0 ; COMDAT (pick associative to section at 7D8C)
.xdata$x:000109E0 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:000109E0                                         ; DATA XREF: .xdata$x:000109F0o
.xdata$x:000109E1                 db 0FFh
.xdata$x:000109E2                 db 0FFh
.xdata$x:000109E3                 db 0FFh
.xdata$x:000109E4                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z$0
.xdata$x:000109E8 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:000109E8                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z+11o
.xdata$x:000109E9                 db    5
.xdata$x:000109EA                 db  93h ; ô
.xdata$x:000109EB                 db  19h
.xdata$x:000109EC                 db    1
.xdata$x:000109ED                 db    0
.xdata$x:000109EE                 db    0
.xdata$x:000109EF                 db    0
.xdata$x:000109F0                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@PAUMatchedCharInserted@@PBU_Container_base12@1@@Z
.xdata$x:000109F4                 db    0
.xdata$x:000109F5                 db    0
.xdata$x:000109F6                 db    0
.xdata$x:000109F7                 db    0
.xdata$x:000109F8                 db    0
.xdata$x:000109F9                 db    0
.xdata$x:000109FA                 db    0
.xdata$x:000109FB                 db    0
.xdata$x:000109FC                 db    0
.xdata$x:000109FD                 db    0
.xdata$x:000109FE                 db    0
.xdata$x:000109FF                 db    0
.xdata$x:00010A00                 db    0
.xdata$x:00010A01                 db    0
.xdata$x:00010A02                 db    0
.xdata$x:00010A03                 db    0
.xdata$x:00010A04                 db    0
.xdata$x:00010A05                 db    0
.xdata$x:00010A06                 db    0
.xdata$x:00010A07                 db    0
.xdata$x:00010A08                 db    0
.xdata$x:00010A09                 db    0
.xdata$x:00010A0A                 db    0
.xdata$x:00010A0B                 db    0
.xdata$x:00010A0B _xdata$x        ends
.xdata$x:00010A0B
.xdata$x:00010A0C ; ===========================================================================
.xdata$x:00010A0C
.xdata$x:00010A0C ; Segment type: Pure data
.xdata$x:00010A0C ; Segment permissions: Read
.xdata$x:00010A0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A0C                 assume cs:_xdata$x
.xdata$x:00010A0C                 ;org 10A0Ch
.xdata$x:00010A0C ; COMDAT (pick associative to section at A284)
.xdata$x:00010A0C __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z db 0FFh
.xdata$x:00010A0C                                         ; DATA XREF: .xdata$x:00010A24o
.xdata$x:00010A0D                 db 0FFh
.xdata$x:00010A0E                 db 0FFh
.xdata$x:00010A0F                 db 0FFh
.xdata$x:00010A10                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$1
.xdata$x:00010A14                 align 8
.xdata$x:00010A18                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z$0
.xdata$x:00010A1C __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z db  22h ; "
.xdata$x:00010A1C                                         ; DATA XREF: __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z+11o
.xdata$x:00010A1D                 db    5
.xdata$x:00010A1E                 db  93h ; ô
.xdata$x:00010A1F                 db  19h
.xdata$x:00010A20                 db    2
.xdata$x:00010A21                 db    0
.xdata$x:00010A22                 db    0
.xdata$x:00010A23                 db    0
.xdata$x:00010A24                 dd offset __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QBE?AV01@H@Z
.xdata$x:00010A28                 align 20h
.xdata$x:00010A28 _xdata$x        ends
.xdata$x:00010A28
.xdata$x:00010A40 ; ===========================================================================
.xdata$x:00010A40
.xdata$x:00010A40 ; Segment type: Pure data
.xdata$x:00010A40 ; Segment permissions: Read
.xdata$x:00010A40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A40                 assume cs:_xdata$x
.xdata$x:00010A40                 ;org 10A40h
.xdata$x:00010A40 ; COMDAT (pick associative to section at 90F8)
.xdata$x:00010A40 __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010A40                                         ; DATA XREF: .xdata$x:00010A50o
.xdata$x:00010A41                 db 0FFh
.xdata$x:00010A42                 db 0FFh
.xdata$x:00010A43                 db 0FFh
.xdata$x:00010A44                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010A48 __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010A48                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010A49                 db    5
.xdata$x:00010A4A                 db  93h ; ô
.xdata$x:00010A4B                 db  19h
.xdata$x:00010A4C                 db    1
.xdata$x:00010A4D                 db    0
.xdata$x:00010A4E                 db    0
.xdata$x:00010A4F                 db    0
.xdata$x:00010A50                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00010A54                 db    0
.xdata$x:00010A55                 db    0
.xdata$x:00010A56                 db    0
.xdata$x:00010A57                 db    0
.xdata$x:00010A58                 db    0
.xdata$x:00010A59                 db    0
.xdata$x:00010A5A                 db    0
.xdata$x:00010A5B                 db    0
.xdata$x:00010A5C                 db    0
.xdata$x:00010A5D                 db    0
.xdata$x:00010A5E                 db    0
.xdata$x:00010A5F                 db    0
.xdata$x:00010A60                 db    0
.xdata$x:00010A61                 db    0
.xdata$x:00010A62                 db    0
.xdata$x:00010A63                 db    0
.xdata$x:00010A64                 db    0
.xdata$x:00010A65                 db    0
.xdata$x:00010A66                 db    0
.xdata$x:00010A67                 db    0
.xdata$x:00010A68                 db    0
.xdata$x:00010A69                 db    0
.xdata$x:00010A6A                 db    0
.xdata$x:00010A6B                 db    0
.xdata$x:00010A6B _xdata$x        ends
.xdata$x:00010A6B
.xdata$x:00010A6C ; ===========================================================================
.xdata$x:00010A6C
.xdata$x:00010A6C ; Segment type: Pure data
.xdata$x:00010A6C ; Segment permissions: Read
.xdata$x:00010A6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A6C                 assume cs:_xdata$x
.xdata$x:00010A6C                 ;org 10A6Ch
.xdata$x:00010A6C ; COMDAT (pick associative to section at 7D14)
.xdata$x:00010A6C __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00010A6C                                         ; DATA XREF: .xdata$x:00010A7Co
.xdata$x:00010A6D                 db 0FFh
.xdata$x:00010A6E                 db 0FFh
.xdata$x:00010A6F                 db 0FFh
.xdata$x:00010A70                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00010A74 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00010A74                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00010A75                 db    5
.xdata$x:00010A76                 db  93h ; ô
.xdata$x:00010A77                 db  19h
.xdata$x:00010A78                 db    1
.xdata$x:00010A79                 db    0
.xdata$x:00010A7A                 db    0
.xdata$x:00010A7B                 db    0
.xdata$x:00010A7C                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMatchedCharInserted@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00010A80                 db    0
.xdata$x:00010A81                 db    0
.xdata$x:00010A82                 db    0
.xdata$x:00010A83                 db    0
.xdata$x:00010A84                 db    0
.xdata$x:00010A85                 db    0
.xdata$x:00010A86                 db    0
.xdata$x:00010A87                 db    0
.xdata$x:00010A88                 db    0
.xdata$x:00010A89                 db    0
.xdata$x:00010A8A                 db    0
.xdata$x:00010A8B                 db    0
.xdata$x:00010A8C                 db    0
.xdata$x:00010A8D                 db    0
.xdata$x:00010A8E                 db    0
.xdata$x:00010A8F                 db    0
.xdata$x:00010A90                 db    0
.xdata$x:00010A91                 db    0
.xdata$x:00010A92                 db    0
.xdata$x:00010A93                 db    0
.xdata$x:00010A94                 db    0
.xdata$x:00010A95                 db    0
.xdata$x:00010A96                 db    0
.xdata$x:00010A97                 db    0
.xdata$x:00010A97 _xdata$x        ends
.xdata$x:00010A97
.xdata$x:00010A98 ; ===========================================================================
.xdata$x:00010A98
.xdata$x:00010A98 ; Segment type: Pure data
.xdata$x:00010A98 ; Segment permissions: Read
.xdata$x:00010A98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A98                 assume cs:_xdata$x
.xdata$x:00010A98                 ;org 10A98h
.xdata$x:00010A98 ; COMDAT (pick associative to section at 75F8)
.xdata$x:00010A98 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010A98                                         ; DATA XREF: .xdata$x:00010AA8o
.xdata$x:00010A99                 db 0FFh
.xdata$x:00010A9A                 db 0FFh
.xdata$x:00010A9B                 db 0FFh
.xdata$x:00010A9C                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010AA0 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010AA0                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010AA1                 db    5
.xdata$x:00010AA2                 db  93h ; ô
.xdata$x:00010AA3                 db  19h
.xdata$x:00010AA4                 db    1
.xdata$x:00010AA5                 db    0
.xdata$x:00010AA6                 db    0
.xdata$x:00010AA7                 db    0
.xdata$x:00010AA8                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010AAC                 db    0
.xdata$x:00010AAD                 db    0
.xdata$x:00010AAE                 db    0
.xdata$x:00010AAF                 db    0
.xdata$x:00010AB0                 db    0
.xdata$x:00010AB1                 db    0
.xdata$x:00010AB2                 db    0
.xdata$x:00010AB3                 db    0
.xdata$x:00010AB4                 db    0
.xdata$x:00010AB5                 db    0
.xdata$x:00010AB6                 db    0
.xdata$x:00010AB7                 db    0
.xdata$x:00010AB8                 db    0
.xdata$x:00010AB9                 db    0
.xdata$x:00010ABA                 db    0
.xdata$x:00010ABB                 db    0
.xdata$x:00010ABC                 db    0
.xdata$x:00010ABD                 db    0
.xdata$x:00010ABE                 db    0
.xdata$x:00010ABF                 db    0
.xdata$x:00010AC0                 db    0
.xdata$x:00010AC1                 db    0
.xdata$x:00010AC2                 db    0
.xdata$x:00010AC3                 db    0
.xdata$x:00010AC3 _xdata$x        ends
.xdata$x:00010AC3
.xdata$x:00010AC4 ; ===========================================================================
.xdata$x:00010AC4
.xdata$x:00010AC4 ; Segment type: Pure data
.xdata$x:00010AC4 ; Segment permissions: Read
.xdata$x:00010AC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010AC4                 assume cs:_xdata$x
.xdata$x:00010AC4                 ;org 10AC4h
.xdata$x:00010AC4 ; COMDAT (pick associative to section at 8C80)
.xdata$x:00010AC4 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010AC4                                         ; DATA XREF: .xdata$x:00010AD4o
.xdata$x:00010AC5                 db 0FFh
.xdata$x:00010AC6                 db 0FFh
.xdata$x:00010AC7                 db 0FFh
.xdata$x:00010AC8                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010ACC __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010ACC                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010ACD                 db    5
.xdata$x:00010ACE                 db  93h ; ô
.xdata$x:00010ACF                 db  19h
.xdata$x:00010AD0                 db    1
.xdata$x:00010AD1                 db    0
.xdata$x:00010AD2                 db    0
.xdata$x:00010AD3                 db    0
.xdata$x:00010AD4                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010AD8                 db    0
.xdata$x:00010AD9                 db    0
.xdata$x:00010ADA                 db    0
.xdata$x:00010ADB                 db    0
.xdata$x:00010ADC                 db    0
.xdata$x:00010ADD                 db    0
.xdata$x:00010ADE                 db    0
.xdata$x:00010ADF                 db    0
.xdata$x:00010AE0                 db    0
.xdata$x:00010AE1                 db    0
.xdata$x:00010AE2                 db    0
.xdata$x:00010AE3                 db    0
.xdata$x:00010AE4                 db    0
.xdata$x:00010AE5                 db    0
.xdata$x:00010AE6                 db    0
.xdata$x:00010AE7                 db    0
.xdata$x:00010AE8                 db    0
.xdata$x:00010AE9                 db    0
.xdata$x:00010AEA                 db    0
.xdata$x:00010AEB                 db    0
.xdata$x:00010AEC                 db    0
.xdata$x:00010AED                 db    0
.xdata$x:00010AEE                 db    0
.xdata$x:00010AEF                 db    0
.xdata$x:00010AEF _xdata$x        ends
.xdata$x:00010AEF
.xdata$x:00010AF0 ; ===========================================================================
.xdata$x:00010AF0
.xdata$x:00010AF0 ; Segment type: Pure data
.xdata$x:00010AF0 ; Segment permissions: Read
.xdata$x:00010AF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010AF0                 assume cs:_xdata$x
.xdata$x:00010AF0                 ;org 10AF0h
.xdata$x:00010AF0 ; COMDAT (pick associative to section at 7580)
.xdata$x:00010AF0 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00010AF0                                         ; DATA XREF: .xdata$x:00010B00o
.xdata$x:00010AF1                 db 0FFh
.xdata$x:00010AF2                 db 0FFh
.xdata$x:00010AF3                 db 0FFh
.xdata$x:00010AF4                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00010AF8 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00010AF8                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00010AF9                 db    5
.xdata$x:00010AFA                 db  93h ; ô
.xdata$x:00010AFB                 db  19h
.xdata$x:00010AFC                 db    1
.xdata$x:00010AFD                 db    0
.xdata$x:00010AFE                 db    0
.xdata$x:00010AFF                 db    0
.xdata$x:00010B00                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00010B04                 db    0
.xdata$x:00010B05                 db    0
.xdata$x:00010B06                 db    0
.xdata$x:00010B07                 db    0
.xdata$x:00010B08                 db    0
.xdata$x:00010B09                 db    0
.xdata$x:00010B0A                 db    0
.xdata$x:00010B0B                 db    0
.xdata$x:00010B0C                 db    0
.xdata$x:00010B0D                 db    0
.xdata$x:00010B0E                 db    0
.xdata$x:00010B0F                 db    0
.xdata$x:00010B10                 db    0
.xdata$x:00010B11                 db    0
.xdata$x:00010B12                 db    0
.xdata$x:00010B13                 db    0
.xdata$x:00010B14                 db    0
.xdata$x:00010B15                 db    0
.xdata$x:00010B16                 db    0
.xdata$x:00010B17                 db    0
.xdata$x:00010B18                 db    0
.xdata$x:00010B19                 db    0
.xdata$x:00010B1A                 db    0
.xdata$x:00010B1B                 db    0
.xdata$x:00010B1B _xdata$x        ends
.xdata$x:00010B1B
.xdata$x:00010B1C ; ===========================================================================
.xdata$x:00010B1C
.xdata$x:00010B1C ; Segment type: Pure data
.xdata$x:00010B1C ; Segment permissions: Read
.xdata$x:00010B1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B1C                 assume cs:_xdata$x
.xdata$x:00010B1C                 ;org 10B1Ch
.xdata$x:00010B1C ; COMDAT (pick associative to section at 77E8)
.xdata$x:00010B1C __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00010B1C                                         ; DATA XREF: .xdata$x:00010B2Co
.xdata$x:00010B1D                 db 0FFh
.xdata$x:00010B1E                 db 0FFh
.xdata$x:00010B1F                 db 0FFh
.xdata$x:00010B20                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:00010B24 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00010B24                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:00010B25                 db    5
.xdata$x:00010B26                 db  93h ; ô
.xdata$x:00010B27                 db  19h
.xdata$x:00010B28                 db    1
.xdata$x:00010B29                 db    0
.xdata$x:00010B2A                 db    0
.xdata$x:00010B2B                 db    0
.xdata$x:00010B2C                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:00010B30                 db    0
.xdata$x:00010B31                 db    0
.xdata$x:00010B32                 db    0
.xdata$x:00010B33                 db    0
.xdata$x:00010B34                 db    0
.xdata$x:00010B35                 db    0
.xdata$x:00010B36                 db    0
.xdata$x:00010B37                 db    0
.xdata$x:00010B38                 db    0
.xdata$x:00010B39                 db    0
.xdata$x:00010B3A                 db    0
.xdata$x:00010B3B                 db    0
.xdata$x:00010B3C                 db    0
.xdata$x:00010B3D                 db    0
.xdata$x:00010B3E                 db    0
.xdata$x:00010B3F                 db    0
.xdata$x:00010B40                 db    0
.xdata$x:00010B41                 db    0
.xdata$x:00010B42                 db    0
.xdata$x:00010B43                 db    0
.xdata$x:00010B44                 db    0
.xdata$x:00010B45                 db    0
.xdata$x:00010B46                 db    0
.xdata$x:00010B47                 db    0
.xdata$x:00010B47 _xdata$x        ends
.xdata$x:00010B47
.xdata$x:00010B48 ; ===========================================================================
.xdata$x:00010B48
.xdata$x:00010B48 ; Segment type: Pure data
.xdata$x:00010B48 ; Segment permissions: Read
.xdata$x:00010B48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B48                 assume cs:_xdata$x
.xdata$x:00010B48                 ;org 10B48h
.xdata$x:00010B48 ; COMDAT (pick associative to section at 8DE0)
.xdata$x:00010B48 __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010B48                                         ; DATA XREF: .xdata$x:00010B58o
.xdata$x:00010B49                 db 0FFh
.xdata$x:00010B4A                 db 0FFh
.xdata$x:00010B4B                 db 0FFh
.xdata$x:00010B4C                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010B50 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010B50                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010B51                 db    5
.xdata$x:00010B52                 db  93h ; ô
.xdata$x:00010B53                 db  19h
.xdata$x:00010B54                 db    1
.xdata$x:00010B55                 db    0
.xdata$x:00010B56                 db    0
.xdata$x:00010B57                 db    0
.xdata$x:00010B58                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00010B5C                 db    0
.xdata$x:00010B5D                 db    0
.xdata$x:00010B5E                 db    0
.xdata$x:00010B5F                 db    0
.xdata$x:00010B60                 db    0
.xdata$x:00010B61                 db    0
.xdata$x:00010B62                 db    0
.xdata$x:00010B63                 db    0
.xdata$x:00010B64                 db    0
.xdata$x:00010B65                 db    0
.xdata$x:00010B66                 db    0
.xdata$x:00010B67                 db    0
.xdata$x:00010B68                 db    0
.xdata$x:00010B69                 db    0
.xdata$x:00010B6A                 db    0
.xdata$x:00010B6B                 db    0
.xdata$x:00010B6C                 db    0
.xdata$x:00010B6D                 db    0
.xdata$x:00010B6E                 db    0
.xdata$x:00010B6F                 db    0
.xdata$x:00010B70                 db    0
.xdata$x:00010B71                 db    0
.xdata$x:00010B72                 db    0
.xdata$x:00010B73                 db    0
.xdata$x:00010B73 _xdata$x        ends
.xdata$x:00010B73
.xdata$x:00010B74 ; ===========================================================================
.xdata$x:00010B74
.xdata$x:00010B74 ; Segment type: Pure data
.xdata$x:00010B74 ; Segment permissions: Read
.xdata$x:00010B74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B74                 assume cs:_xdata$x
.xdata$x:00010B74                 ;org 10B74h
.xdata$x:00010B74 ; COMDAT (pick associative to section at 7764)
.xdata$x:00010B74 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00010B74                                         ; DATA XREF: .xdata$x:00010B84o
.xdata$x:00010B75                 db 0FFh
.xdata$x:00010B76                 db 0FFh
.xdata$x:00010B77                 db 0FFh
.xdata$x:00010B78                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00010B7C __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00010B7C                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00010B7D                 db    5
.xdata$x:00010B7E                 db  93h ; ô
.xdata$x:00010B7F                 db  19h
.xdata$x:00010B80                 db    1
.xdata$x:00010B81                 db    0
.xdata$x:00010B82                 db    0
.xdata$x:00010B83                 db    0
.xdata$x:00010B84                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00010B88                 align 20h
.xdata$x:00010B88 _xdata$x        ends
.xdata$x:00010B88
.xdata$x:00010BA0 ; ===========================================================================
.xdata$x:00010BA0
.xdata$x:00010BA0 ; Segment type: Pure data
.xdata$x:00010BA0 ; Segment permissions: Read
.xdata$x:00010BA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010BA0                 assume cs:_xdata$x
.xdata$x:00010BA0                 ;org 10BA0h
.xdata$x:00010BA0 ; COMDAT (pick associative to section at 78EC)
.xdata$x:00010BA0 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00010BA0                                         ; DATA XREF: .xdata$x:00010BB0o
.xdata$x:00010BA1                 db 0FFh
.xdata$x:00010BA2                 db 0FFh
.xdata$x:00010BA3                 db 0FFh
.xdata$x:00010BA4                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:00010BA8 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00010BA8                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:00010BA9                 db    5
.xdata$x:00010BAA                 db  93h ; ô
.xdata$x:00010BAB                 db  19h
.xdata$x:00010BAC                 db    1
.xdata$x:00010BAD                 db    0
.xdata$x:00010BAE                 db    0
.xdata$x:00010BAF                 db    0
.xdata$x:00010BB0                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:00010BB4                 db    0
.xdata$x:00010BB5                 db    0
.xdata$x:00010BB6                 db    0
.xdata$x:00010BB7                 db    0
.xdata$x:00010BB8                 db    0
.xdata$x:00010BB9                 db    0
.xdata$x:00010BBA                 db    0
.xdata$x:00010BBB                 db    0
.xdata$x:00010BBC                 db    0
.xdata$x:00010BBD                 db    0
.xdata$x:00010BBE                 db    0
.xdata$x:00010BBF                 db    0
.xdata$x:00010BC0                 db    0
.xdata$x:00010BC1                 db    0
.xdata$x:00010BC2                 db    0
.xdata$x:00010BC3                 db    0
.xdata$x:00010BC4                 db    0
.xdata$x:00010BC5                 db    0
.xdata$x:00010BC6                 db    0
.xdata$x:00010BC7                 db    0
.xdata$x:00010BC8                 db    0
.xdata$x:00010BC9                 db    0
.xdata$x:00010BCA                 db    0
.xdata$x:00010BCB                 db    0
.xdata$x:00010BCB _xdata$x        ends
.xdata$x:00010BCB
.xdata$x:00010BCC ; ===========================================================================
.xdata$x:00010BCC
.xdata$x:00010BCC ; Segment type: Pure data
.xdata$x:00010BCC ; Segment permissions: Read
.xdata$x:00010BCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010BCC                 assume cs:_xdata$x
.xdata$x:00010BCC                 ;org 10BCCh
.xdata$x:00010BCC ; COMDAT (pick associative to section at A19C)
.xdata$x:00010BCC __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:00010BCC                                         ; DATA XREF: .xdata$x:00010BDCo
.xdata$x:00010BCD                 db 0FFh
.xdata$x:00010BCE                 db 0FFh
.xdata$x:00010BCF                 db 0FFh
.xdata$x:00010BD0                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:00010BD4 __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:00010BD4                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:00010BD5                 db    5
.xdata$x:00010BD6                 db  93h ; ô
.xdata$x:00010BD7                 db  19h
.xdata$x:00010BD8                 db    1
.xdata$x:00010BD9                 db    0
.xdata$x:00010BDA                 db    0
.xdata$x:00010BDB                 db    0
.xdata$x:00010BDC                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:00010BE0                 db    0
.xdata$x:00010BE1                 db    0
.xdata$x:00010BE2                 db    0
.xdata$x:00010BE3                 db    0
.xdata$x:00010BE4                 db    0
.xdata$x:00010BE5                 db    0
.xdata$x:00010BE6                 db    0
.xdata$x:00010BE7                 db    0
.xdata$x:00010BE8                 db    0
.xdata$x:00010BE9                 db    0
.xdata$x:00010BEA                 db    0
.xdata$x:00010BEB                 db    0
.xdata$x:00010BEC                 db    0
.xdata$x:00010BED                 db    0
.xdata$x:00010BEE                 db    0
.xdata$x:00010BEF                 db    0
.xdata$x:00010BF0                 db    0
.xdata$x:00010BF1                 db    0
.xdata$x:00010BF2                 db    0
.xdata$x:00010BF3                 db    0
.xdata$x:00010BF4                 db    0
.xdata$x:00010BF5                 db    0
.xdata$x:00010BF6                 db    0
.xdata$x:00010BF7                 db    0
.xdata$x:00010BF7 _xdata$x        ends
.xdata$x:00010BF7
.xdata$x:00010BF8 ; ===========================================================================
.xdata$x:00010BF8
.xdata$x:00010BF8 ; Segment type: Pure data
.xdata$x:00010BF8 ; Segment permissions: Read
.xdata$x:00010BF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010BF8                 assume cs:_xdata$x
.xdata$x:00010BF8                 ;org 10BF8h
.xdata$x:00010BF8 ; COMDAT (pick associative to section at 8E50)
.xdata$x:00010BF8 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010BF8                                         ; DATA XREF: .xdata$x:00010C08o
.xdata$x:00010BF9                 db 0FFh
.xdata$x:00010BFA                 db 0FFh
.xdata$x:00010BFB                 db 0FFh
.xdata$x:00010BFC                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010C00 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010C00                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010C01                 db    5
.xdata$x:00010C02                 db  93h ; ô
.xdata$x:00010C03                 db  19h
.xdata$x:00010C04                 db    1
.xdata$x:00010C05                 db    0
.xdata$x:00010C06                 db    0
.xdata$x:00010C07                 db    0
.xdata$x:00010C08                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00010C0C                 db    0
.xdata$x:00010C0D                 db    0
.xdata$x:00010C0E                 db    0
.xdata$x:00010C0F                 db    0
.xdata$x:00010C10                 db    0
.xdata$x:00010C11                 db    0
.xdata$x:00010C12                 db    0
.xdata$x:00010C13                 db    0
.xdata$x:00010C14                 db    0
.xdata$x:00010C15                 db    0
.xdata$x:00010C16                 db    0
.xdata$x:00010C17                 db    0
.xdata$x:00010C18                 db    0
.xdata$x:00010C19                 db    0
.xdata$x:00010C1A                 db    0
.xdata$x:00010C1B                 db    0
.xdata$x:00010C1C                 db    0
.xdata$x:00010C1D                 db    0
.xdata$x:00010C1E                 db    0
.xdata$x:00010C1F                 db    0
.xdata$x:00010C20                 db    0
.xdata$x:00010C21                 db    0
.xdata$x:00010C22                 db    0
.xdata$x:00010C23                 db    0
.xdata$x:00010C23 _xdata$x        ends
.xdata$x:00010C23
.xdata$x:00010C24 ; ===========================================================================
.xdata$x:00010C24
.xdata$x:00010C24 ; Segment type: Pure data
.xdata$x:00010C24 ; Segment permissions: Read
.xdata$x:00010C24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010C24                 assume cs:_xdata$x
.xdata$x:00010C24                 ;org 10C24h
.xdata$x:00010C24 ; COMDAT (pick associative to section at 7874)
.xdata$x:00010C24 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00010C24                                         ; DATA XREF: .xdata$x:00010C34o
.xdata$x:00010C25                 db 0FFh
.xdata$x:00010C26                 db 0FFh
.xdata$x:00010C27                 db 0FFh
.xdata$x:00010C28                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00010C2C __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00010C2C                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00010C2D                 db    5
.xdata$x:00010C2E                 db  93h ; ô
.xdata$x:00010C2F                 db  19h
.xdata$x:00010C30                 db    1
.xdata$x:00010C31                 db    0
.xdata$x:00010C32                 db    0
.xdata$x:00010C33                 db    0
.xdata$x:00010C34                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00010C38                 db    0
.xdata$x:00010C39                 db    0
.xdata$x:00010C3A                 db    0
.xdata$x:00010C3B                 db    0
.xdata$x:00010C3C                 db    0
.xdata$x:00010C3D                 db    0
.xdata$x:00010C3E                 db    0
.xdata$x:00010C3F                 db    0
.xdata$x:00010C40                 db    0
.xdata$x:00010C41                 db    0
.xdata$x:00010C42                 db    0
.xdata$x:00010C43                 db    0
.xdata$x:00010C44                 db    0
.xdata$x:00010C45                 db    0
.xdata$x:00010C46                 db    0
.xdata$x:00010C47                 db    0
.xdata$x:00010C48                 db    0
.xdata$x:00010C49                 db    0
.xdata$x:00010C4A                 db    0
.xdata$x:00010C4B                 db    0
.xdata$x:00010C4C                 db    0
.xdata$x:00010C4D                 db    0
.xdata$x:00010C4E                 db    0
.xdata$x:00010C4F                 db    0
.xdata$x:00010C4F _xdata$x        ends
.xdata$x:00010C4F
.xdata$x:00010C50 ; ===========================================================================
.xdata$x:00010C50
.xdata$x:00010C50 ; Segment type: Pure data
.xdata$x:00010C50 ; Segment permissions: Read
.xdata$x:00010C50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010C50                 assume cs:_xdata$x
.xdata$x:00010C50                 ;org 10C50h
.xdata$x:00010C50 ; COMDAT (pick associative to section at 61A8)
.xdata$x:00010C50 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:00010C50                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:00010C51                 db    5
.xdata$x:00010C52                 db  93h ; ô
.xdata$x:00010C53                 db  19h
.xdata$x:00010C54                 db  0Ah
.xdata$x:00010C55                 db    0
.xdata$x:00010C56                 db    0
.xdata$x:00010C57                 db    0
.xdata$x:00010C58                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:00010C5C                 db    0
.xdata$x:00010C5D                 db    0
.xdata$x:00010C5E                 db    0
.xdata$x:00010C5F                 db    0
.xdata$x:00010C60                 db    0
.xdata$x:00010C61                 db    0
.xdata$x:00010C62                 db    0
.xdata$x:00010C63                 db    0
.xdata$x:00010C64                 db    0
.xdata$x:00010C65                 db    0
.xdata$x:00010C66                 db    0
.xdata$x:00010C67                 db    0
.xdata$x:00010C68                 db    0
.xdata$x:00010C69                 db    0
.xdata$x:00010C6A                 db    0
.xdata$x:00010C6B                 db    0
.xdata$x:00010C6C                 db    0
.xdata$x:00010C6D                 db    0
.xdata$x:00010C6E                 db    0
.xdata$x:00010C6F                 db    0
.xdata$x:00010C70                 db    0
.xdata$x:00010C71                 db    0
.xdata$x:00010C72                 db    0
.xdata$x:00010C73                 db    0
.xdata$x:00010C74 __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:00010C74                                         ; DATA XREF: .xdata$x:00010C58o
.xdata$x:00010C75                 db 0FFh
.xdata$x:00010C76                 db 0FFh
.xdata$x:00010C77                 db 0FFh
.xdata$x:00010C78                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:00010C7C                 align 10h
.xdata$x:00010C80                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:00010C84                 db    1
.xdata$x:00010C85                 db    0
.xdata$x:00010C86                 db    0
.xdata$x:00010C87                 db    0
.xdata$x:00010C88                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:00010C8C                 db    2
.xdata$x:00010C8D                 db    0
.xdata$x:00010C8E                 db    0
.xdata$x:00010C8F                 db    0
.xdata$x:00010C90                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:00010C94                 db    3
.xdata$x:00010C95                 db    0
.xdata$x:00010C96                 db    0
.xdata$x:00010C97                 db    0
.xdata$x:00010C98                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:00010C9C                 db    4
.xdata$x:00010C9D                 db    0
.xdata$x:00010C9E                 db    0
.xdata$x:00010C9F                 db    0
.xdata$x:00010CA0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:00010CA4                 db    5
.xdata$x:00010CA5                 db    0
.xdata$x:00010CA6                 db    0
.xdata$x:00010CA7                 db    0
.xdata$x:00010CA8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:00010CAC                 db    6
.xdata$x:00010CAD                 db    0
.xdata$x:00010CAE                 db    0
.xdata$x:00010CAF                 db    0
.xdata$x:00010CB0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:00010CB4                 db    1
.xdata$x:00010CB5                 db    0
.xdata$x:00010CB6                 db    0
.xdata$x:00010CB7                 db    0
.xdata$x:00010CB8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:00010CBC                 db    8
.xdata$x:00010CBD                 db    0
.xdata$x:00010CBE                 db    0
.xdata$x:00010CBF                 db    0
.xdata$x:00010CC0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:00010CC0 _xdata$x        ends
.xdata$x:00010CC0
.xdata$x:00010CC4 ; ===========================================================================
.xdata$x:00010CC4
.xdata$x:00010CC4 ; Segment type: Pure data
.xdata$x:00010CC4 ; Segment permissions: Read
.xdata$x:00010CC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010CC4                 assume cs:_xdata$x
.xdata$x:00010CC4                 ;org 10CC4h
.xdata$x:00010CC4 ; COMDAT (pick associative to section at 67BC)
.xdata$x:00010CC4 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00010CC4                                         ; DATA XREF: .xdata$x:00010CD4o
.xdata$x:00010CC5                 db 0FFh
.xdata$x:00010CC6                 db 0FFh
.xdata$x:00010CC7                 db 0FFh
.xdata$x:00010CC8                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00010CCC __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00010CCC                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00010CCD                 db    5
.xdata$x:00010CCE                 db  93h ; ô
.xdata$x:00010CCF                 db  19h
.xdata$x:00010CD0                 db    1
.xdata$x:00010CD1                 db    0
.xdata$x:00010CD2                 db    0
.xdata$x:00010CD3                 db    0
.xdata$x:00010CD4                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:00010CD8                 db    0
.xdata$x:00010CD9                 db    0
.xdata$x:00010CDA                 db    0
.xdata$x:00010CDB                 db    0
.xdata$x:00010CDC                 db    0
.xdata$x:00010CDD                 db    0
.xdata$x:00010CDE                 db    0
.xdata$x:00010CDF                 db    0
.xdata$x:00010CE0                 db    0
.xdata$x:00010CE1                 db    0
.xdata$x:00010CE2                 db    0
.xdata$x:00010CE3                 db    0
.xdata$x:00010CE4                 db    0
.xdata$x:00010CE5                 db    0
.xdata$x:00010CE6                 db    0
.xdata$x:00010CE7                 db    0
.xdata$x:00010CE8                 db    0
.xdata$x:00010CE9                 db    0
.xdata$x:00010CEA                 db    0
.xdata$x:00010CEB                 db    0
.xdata$x:00010CEC                 db    0
.xdata$x:00010CED                 db    0
.xdata$x:00010CEE                 db    0
.xdata$x:00010CEF                 db    0
.xdata$x:00010CEF _xdata$x        ends
.xdata$x:00010CEF
.xdata$x:00010CF0 ; ===========================================================================
.xdata$x:00010CF0
.xdata$x:00010CF0 ; Segment type: Pure data
.xdata$x:00010CF0 ; Segment permissions: Read
.xdata$x:00010CF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010CF0                 assume cs:_xdata$x
.xdata$x:00010CF0                 ;org 10CF0h
.xdata$x:00010CF0 ; COMDAT (pick associative to section at 6E80)
.xdata$x:00010CF0 __ehfuncinfo$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z db  22h ; "
.xdata$x:00010CF0                                         ; DATA XREF: __ehhandler$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z+11o
.xdata$x:00010CF1                 db    5
.xdata$x:00010CF2                 db  93h ; ô
.xdata$x:00010CF3                 db  19h
.xdata$x:00010CF4                 db    6
.xdata$x:00010CF5                 db    0
.xdata$x:00010CF6                 db    0
.xdata$x:00010CF7                 db    0
.xdata$x:00010CF8                 dd offset __unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z
.xdata$x:00010CFC                 db    0
.xdata$x:00010CFD                 db    0
.xdata$x:00010CFE                 db    0
.xdata$x:00010CFF                 db    0
.xdata$x:00010D00                 db    0
.xdata$x:00010D01                 db    0
.xdata$x:00010D02                 db    0
.xdata$x:00010D03                 db    0
.xdata$x:00010D04                 db    0
.xdata$x:00010D05                 db    0
.xdata$x:00010D06                 db    0
.xdata$x:00010D07                 db    0
.xdata$x:00010D08                 db    0
.xdata$x:00010D09                 db    0
.xdata$x:00010D0A                 db    0
.xdata$x:00010D0B                 db    0
.xdata$x:00010D0C                 db    0
.xdata$x:00010D0D                 db    0
.xdata$x:00010D0E                 db    0
.xdata$x:00010D0F                 db    0
.xdata$x:00010D10                 db    0
.xdata$x:00010D11                 db    0
.xdata$x:00010D12                 db    0
.xdata$x:00010D13                 db    0
.xdata$x:00010D14 __unwindtable$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z db 0FFh
.xdata$x:00010D14                                         ; DATA XREF: .xdata$x:00010CF8o
.xdata$x:00010D15                 db 0FFh
.xdata$x:00010D16                 db 0FFh
.xdata$x:00010D17                 db 0FFh
.xdata$x:00010D18                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$0
.xdata$x:00010D1C                 align 10h
.xdata$x:00010D20                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$1
.xdata$x:00010D24                 db    1
.xdata$x:00010D25                 db    0
.xdata$x:00010D26                 db    0
.xdata$x:00010D27                 db    0
.xdata$x:00010D28                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$2
.xdata$x:00010D2C                 db    2
.xdata$x:00010D2D                 db    0
.xdata$x:00010D2E                 db    0
.xdata$x:00010D2F                 db    0
.xdata$x:00010D30                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$3
.xdata$x:00010D34                 db    1
.xdata$x:00010D35                 db    0
.xdata$x:00010D36                 db    0
.xdata$x:00010D37                 db    0
.xdata$x:00010D38                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$4
.xdata$x:00010D3C                 db    1
.xdata$x:00010D3D                 db    0
.xdata$x:00010D3E                 db    0
.xdata$x:00010D3F                 db    0
.xdata$x:00010D40                 dd offset __unwindfunclet$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0U?$less@X@0@@Z$5
.xdata$x:00010D40 _xdata$x        ends
.xdata$x:00010D40
.xdata$x:00010D44 ; ===========================================================================
.xdata$x:00010D44
.xdata$x:00010D44 ; Segment type: Pure data
.xdata$x:00010D44 ; Segment permissions: Read
.xdata$x:00010D44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010D44                 assume cs:_xdata$x
.xdata$x:00010D44                 ;org 10D44h
.xdata$x:00010D44 ; COMDAT (pick associative to section at 4F10)
.xdata$x:00010D44 __unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z db 0FFh
.xdata$x:00010D44                                         ; DATA XREF: .xdata$x:00010D6Co
.xdata$x:00010D45                 db 0FFh
.xdata$x:00010D46                 db 0FFh
.xdata$x:00010D47                 db 0FFh
.xdata$x:00010D48                 dd offset __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$0
.xdata$x:00010D4C                 align 10h
.xdata$x:00010D50                 dd offset __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$1
.xdata$x:00010D54                 db    1
.xdata$x:00010D55                 db    0
.xdata$x:00010D56                 db    0
.xdata$x:00010D57                 db    0
.xdata$x:00010D58                 dd offset __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$2
.xdata$x:00010D5C                 db    2
.xdata$x:00010D5D                 db    0
.xdata$x:00010D5E                 db    0
.xdata$x:00010D5F                 db    0
.xdata$x:00010D60                 dd offset __unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z$3
.xdata$x:00010D64 __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z db  22h ; "
.xdata$x:00010D64                                         ; DATA XREF: __ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z+11o
.xdata$x:00010D65                 db    5
.xdata$x:00010D66                 db  93h ; ô
.xdata$x:00010D67                 db  19h
.xdata$x:00010D68                 db    4
.xdata$x:00010D69                 db    0
.xdata$x:00010D6A                 db    0
.xdata$x:00010D6B                 db    0
.xdata$x:00010D6C                 dd offset __unwindtable$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WI@Z
.xdata$x:00010D70                 db    0
.xdata$x:00010D71                 db    0
.xdata$x:00010D72                 db    0
.xdata$x:00010D73                 db    0
.xdata$x:00010D74                 db    0
.xdata$x:00010D75                 db    0
.xdata$x:00010D76                 db    0
.xdata$x:00010D77                 db    0
.xdata$x:00010D78                 db    0
.xdata$x:00010D79                 db    0
.xdata$x:00010D7A                 db    0
.xdata$x:00010D7B                 db    0
.xdata$x:00010D7C                 db    0
.xdata$x:00010D7D                 db    0
.xdata$x:00010D7E                 db    0
.xdata$x:00010D7F                 db    0
.xdata$x:00010D80                 db    0
.xdata$x:00010D81                 db    0
.xdata$x:00010D82                 db    0
.xdata$x:00010D83                 db    0
.xdata$x:00010D84                 db    0
.xdata$x:00010D85                 db    0
.xdata$x:00010D86                 db    0
.xdata$x:00010D87                 db    0
.xdata$x:00010D87 _xdata$x        ends
.xdata$x:00010D87
.xdata$x:00010D88 ; ===========================================================================
.xdata$x:00010D88
.xdata$x:00010D88 ; Segment type: Pure data
.xdata$x:00010D88 ; Segment permissions: Read
.xdata$x:00010D88 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010D88                 assume cs:_xdata$x
.xdata$x:00010D88                 ;org 10D88h
.xdata$x:00010D88 ; COMDAT (pick associative to section at 5AB0)
.xdata$x:00010D88 __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db 0FFh
.xdata$x:00010D88                                         ; DATA XREF: .xdata$x:00010D98o
.xdata$x:00010D89                 db 0FFh
.xdata$x:00010D8A                 db 0FFh
.xdata$x:00010D8B                 db 0FFh
.xdata$x:00010D8C                 dd offset __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0
.xdata$x:00010D90 __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db  22h ; "
.xdata$x:00010D90                                         ; DATA XREF: __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z+11o
.xdata$x:00010D91                 db    5
.xdata$x:00010D92                 db  93h ; ô
.xdata$x:00010D93                 db  19h
.xdata$x:00010D94                 db    1
.xdata$x:00010D95                 db    0
.xdata$x:00010D96                 db    0
.xdata$x:00010D97                 db    0
.xdata$x:00010D98                 dd offset __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.xdata$x:00010D9C                 db    0
.xdata$x:00010D9D                 db    0
.xdata$x:00010D9E                 db    0
.xdata$x:00010D9F                 db    0
.xdata$x:00010DA0                 db    0
.xdata$x:00010DA1                 db    0
.xdata$x:00010DA2                 db    0
.xdata$x:00010DA3                 db    0
.xdata$x:00010DA4                 db    0
.xdata$x:00010DA5                 db    0
.xdata$x:00010DA6                 db    0
.xdata$x:00010DA7                 db    0
.xdata$x:00010DA8                 db    0
.xdata$x:00010DA9                 db    0
.xdata$x:00010DAA                 db    0
.xdata$x:00010DAB                 db    0
.xdata$x:00010DAC                 db    0
.xdata$x:00010DAD                 db    0
.xdata$x:00010DAE                 db    0
.xdata$x:00010DAF                 db    0
.xdata$x:00010DB0                 db    0
.xdata$x:00010DB1                 db    0
.xdata$x:00010DB2                 db    0
.xdata$x:00010DB3                 db    0
.xdata$x:00010DB3 _xdata$x        ends
.xdata$x:00010DB3
.xdata$x:00010DB4 ; ===========================================================================
.xdata$x:00010DB4
.xdata$x:00010DB4 ; Segment type: Pure data
.xdata$x:00010DB4 ; Segment permissions: Read
.xdata$x:00010DB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010DB4                 assume cs:_xdata$x
.xdata$x:00010DB4                 ;org 10DB4h
.xdata$x:00010DB4 ; COMDAT (pick associative to section at 6A0C)
.xdata$x:00010DB4 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db 0FFh
.xdata$x:00010DB4                                         ; DATA XREF: .xdata$x:00010DC4o
.xdata$x:00010DB5                 db 0FFh
.xdata$x:00010DB6                 db 0FFh
.xdata$x:00010DB7                 db 0FFh
.xdata$x:00010DB8                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0
.xdata$x:00010DBC __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db  22h ; "
.xdata$x:00010DBC                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z+11o
.xdata$x:00010DBD                 db    5
.xdata$x:00010DBE                 db  93h ; ô
.xdata$x:00010DBF                 db  19h
.xdata$x:00010DC0                 db    1
.xdata$x:00010DC1                 db    0
.xdata$x:00010DC2                 db    0
.xdata$x:00010DC3                 db    0
.xdata$x:00010DC4                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.xdata$x:00010DC8                 align 20h
.xdata$x:00010DC8 _xdata$x        ends
.xdata$x:00010DC8
.xdata$x:00010DE0 ; ===========================================================================
.xdata$x:00010DE0
.xdata$x:00010DE0 ; Segment type: Pure data
.xdata$x:00010DE0 ; Segment permissions: Read
.xdata$x:00010DE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010DE0                 assume cs:_xdata$x
.xdata$x:00010DE0                 ;org 10DE0h
.xdata$x:00010DE0 ; COMDAT (pick associative to section at 68C0)
.xdata$x:00010DE0 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z db 0FFh
.xdata$x:00010DE0                                         ; DATA XREF: .xdata$x:00010DF0o
.xdata$x:00010DE1                 db 0FFh
.xdata$x:00010DE2                 db 0FFh
.xdata$x:00010DE3                 db 0FFh
.xdata$x:00010DE4                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0
.xdata$x:00010DE8 __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z db  22h ; "
.xdata$x:00010DE8                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z+11o
.xdata$x:00010DE9                 db    5
.xdata$x:00010DEA                 db  93h ; ô
.xdata$x:00010DEB                 db  19h
.xdata$x:00010DEC                 db    1
.xdata$x:00010DED                 db    0
.xdata$x:00010DEE                 db    0
.xdata$x:00010DEF                 db    0
.xdata$x:00010DF0                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.xdata$x:00010DF4                 db    0
.xdata$x:00010DF5                 db    0
.xdata$x:00010DF6                 db    0
.xdata$x:00010DF7                 db    0
.xdata$x:00010DF8                 db    0
.xdata$x:00010DF9                 db    0
.xdata$x:00010DFA                 db    0
.xdata$x:00010DFB                 db    0
.xdata$x:00010DFC                 db    0
.xdata$x:00010DFD                 db    0
.xdata$x:00010DFE                 db    0
.xdata$x:00010DFF                 db    0
.xdata$x:00010E00                 db    0
.xdata$x:00010E01                 db    0
.xdata$x:00010E02                 db    0
.xdata$x:00010E03                 db    0
.xdata$x:00010E04                 db    0
.xdata$x:00010E05                 db    0
.xdata$x:00010E06                 db    0
.xdata$x:00010E07                 db    0
.xdata$x:00010E08                 db    0
.xdata$x:00010E09                 db    0
.xdata$x:00010E0A                 db    0
.xdata$x:00010E0B                 db    0
.xdata$x:00010E0B _xdata$x        ends
.xdata$x:00010E0B
.xdata$x:00010E0C ; ===========================================================================
.xdata$x:00010E0C
.xdata$x:00010E0C ; Segment type: Pure data
.xdata$x:00010E0C ; Segment permissions: Read
.xdata$x:00010E0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010E0C                 assume cs:_xdata$x
.xdata$x:00010E0C                 ;org 10E0Ch
.xdata$x:00010E0C ; COMDAT (pick associative to section at 6568)
.xdata$x:00010E0C __unwindtable$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z db 0FFh
.xdata$x:00010E0C                                         ; DATA XREF: .xdata$x:00010E1Co
.xdata$x:00010E0D                 db 0FFh
.xdata$x:00010E0E                 db 0FFh
.xdata$x:00010E0F                 db 0FFh
.xdata$x:00010E10                 dd offset __unwindfunclet$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z$0
.xdata$x:00010E14 __ehfuncinfo$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z db  22h ; "
.xdata$x:00010E14                                         ; DATA XREF: __ehhandler$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z+11o
.xdata$x:00010E15                 db    5
.xdata$x:00010E16                 db  93h ; ô
.xdata$x:00010E17                 db  19h
.xdata$x:00010E18                 db    1
.xdata$x:00010E19                 db    0
.xdata$x:00010E1A                 db    0
.xdata$x:00010E1B                 db    0
.xdata$x:00010E1C                 dd offset __unwindtable$??$construct@UMatchedCharInserted@@AAU1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@AAU2@@Z
.xdata$x:00010E20                 db    0
.xdata$x:00010E21                 db    0
.xdata$x:00010E22                 db    0
.xdata$x:00010E23                 db    0
.xdata$x:00010E24                 db    0
.xdata$x:00010E25                 db    0
.xdata$x:00010E26                 db    0
.xdata$x:00010E27                 db    0
.xdata$x:00010E28                 db    0
.xdata$x:00010E29                 db    0
.xdata$x:00010E2A                 db    0
.xdata$x:00010E2B                 db    0
.xdata$x:00010E2C                 db    0
.xdata$x:00010E2D                 db    0
.xdata$x:00010E2E                 db    0
.xdata$x:00010E2F                 db    0
.xdata$x:00010E30                 db    0
.xdata$x:00010E31                 db    0
.xdata$x:00010E32                 db    0
.xdata$x:00010E33                 db    0
.xdata$x:00010E34                 db    0
.xdata$x:00010E35                 db    0
.xdata$x:00010E36                 db    0
.xdata$x:00010E37                 db    0
.xdata$x:00010E37 _xdata$x        ends
.xdata$x:00010E37
.xdata$x:00010E38 ; ===========================================================================
.xdata$x:00010E38
.xdata$x:00010E38 ; Segment type: Pure data
.xdata$x:00010E38 ; Segment permissions: Read
.xdata$x:00010E38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010E38                 assume cs:_xdata$x
.xdata$x:00010E38                 ;org 10E38h
.xdata$x:00010E38 ; COMDAT (pick associative to section at 6368)
.xdata$x:00010E38 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00010E38                                         ; DATA XREF: .xdata$x:00010E48o
.xdata$x:00010E39                 db 0FFh
.xdata$x:00010E3A                 db 0FFh
.xdata$x:00010E3B                 db 0FFh
.xdata$x:00010E3C                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00010E40 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00010E40                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00010E41                 db    5
.xdata$x:00010E42                 db  93h ; ô
.xdata$x:00010E43                 db  19h
.xdata$x:00010E44                 db    1
.xdata$x:00010E45                 db    0
.xdata$x:00010E46                 db    0
.xdata$x:00010E47                 db    0
.xdata$x:00010E48                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00010E4C                 db    0
.xdata$x:00010E4D                 db    0
.xdata$x:00010E4E                 db    0
.xdata$x:00010E4F                 db    0
.xdata$x:00010E50                 db    0
.xdata$x:00010E51                 db    0
.xdata$x:00010E52                 db    0
.xdata$x:00010E53                 db    0
.xdata$x:00010E54                 db    0
.xdata$x:00010E55                 db    0
.xdata$x:00010E56                 db    0
.xdata$x:00010E57                 db    0
.xdata$x:00010E58                 db    0
.xdata$x:00010E59                 db    0
.xdata$x:00010E5A                 db    0
.xdata$x:00010E5B                 db    0
.xdata$x:00010E5C                 db    0
.xdata$x:00010E5D                 db    0
.xdata$x:00010E5E                 db    0
.xdata$x:00010E5F                 db    0
.xdata$x:00010E60                 db    0
.xdata$x:00010E61                 db    0
.xdata$x:00010E62                 db    0
.xdata$x:00010E63                 db    0
.xdata$x:00010E63 _xdata$x        ends
.xdata$x:00010E63
.xdata$x:00010E64 ; ===========================================================================
.xdata$x:00010E64
.xdata$x:00010E64 ; Segment type: Pure data
.xdata$x:00010E64 ; Segment permissions: Read
.xdata$x:00010E64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010E64                 assume cs:_xdata$x
.xdata$x:00010E64                 ;org 10E64h
.xdata$x:00010E64 ; COMDAT (pick associative to section at 6468)
.xdata$x:00010E64 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00010E64                                         ; DATA XREF: .xdata$x:00010E74o
.xdata$x:00010E65                 db 0FFh
.xdata$x:00010E66                 db 0FFh
.xdata$x:00010E67                 db 0FFh
.xdata$x:00010E68                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00010E6C __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00010E6C                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00010E6D                 db    5
.xdata$x:00010E6E                 db  93h ; ô
.xdata$x:00010E6F                 db  19h
.xdata$x:00010E70                 db    1
.xdata$x:00010E71                 db    0
.xdata$x:00010E72                 db    0
.xdata$x:00010E73                 db    0
.xdata$x:00010E74                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00010E78                 db    0
.xdata$x:00010E79                 db    0
.xdata$x:00010E7A                 db    0
.xdata$x:00010E7B                 db    0
.xdata$x:00010E7C                 db    0
.xdata$x:00010E7D                 db    0
.xdata$x:00010E7E                 db    0
.xdata$x:00010E7F                 db    0
.xdata$x:00010E80                 db    0
.xdata$x:00010E81                 db    0
.xdata$x:00010E82                 db    0
.xdata$x:00010E83                 db    0
.xdata$x:00010E84                 db    0
.xdata$x:00010E85                 db    0
.xdata$x:00010E86                 db    0
.xdata$x:00010E87                 db    0
.xdata$x:00010E88                 db    0
.xdata$x:00010E89                 db    0
.xdata$x:00010E8A                 db    0
.xdata$x:00010E8B                 db    0
.xdata$x:00010E8C                 db    0
.xdata$x:00010E8D                 db    0
.xdata$x:00010E8E                 db    0
.xdata$x:00010E8F                 db    0
.xdata$x:00010E8F _xdata$x        ends
.xdata$x:00010E8F
.xdata$x:00010E90 ; ===========================================================================
.xdata$x:00010E90
.xdata$x:00010E90 ; Segment type: Pure data
.xdata$x:00010E90 ; Segment permissions: Read
.xdata$x:00010E90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010E90                 assume cs:_xdata$x
.xdata$x:00010E90                 ;org 10E90h
.xdata$x:00010E90 ; COMDAT (pick associative to section at 4D4C)
.xdata$x:00010E90 __unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z db 0FFh
.xdata$x:00010E90                                         ; DATA XREF: .xdata$x:00010EA8o
.xdata$x:00010E91                 db 0FFh
.xdata$x:00010E92                 db 0FFh
.xdata$x:00010E93                 db 0FFh
.xdata$x:00010E94                 dd offset __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
.xdata$x:00010E98                 db    0
.xdata$x:00010E99                 db    0
.xdata$x:00010E9A                 db    0
.xdata$x:00010E9B                 db    0
.xdata$x:00010E9C                 dd offset __unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
.xdata$x:00010EA0 __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010EA0                                         ; DATA XREF: __ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z+11o
.xdata$x:00010EA1                 db    5
.xdata$x:00010EA2                 db  93h ; ô
.xdata$x:00010EA3                 db  19h
.xdata$x:00010EA4                 db    2
.xdata$x:00010EA5                 db    0
.xdata$x:00010EA6                 db    0
.xdata$x:00010EA7                 db    0
.xdata$x:00010EA8                 dd offset __unwindtable$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.xdata$x:00010EAC                 db    0
.xdata$x:00010EAD                 db    0
.xdata$x:00010EAE                 db    0
.xdata$x:00010EAF                 db    0
.xdata$x:00010EB0                 db    0
.xdata$x:00010EB1                 db    0
.xdata$x:00010EB2                 db    0
.xdata$x:00010EB3                 db    0
.xdata$x:00010EB4                 db    0
.xdata$x:00010EB5                 db    0
.xdata$x:00010EB6                 db    0
.xdata$x:00010EB7                 db    0
.xdata$x:00010EB8                 db    0
.xdata$x:00010EB9                 db    0
.xdata$x:00010EBA                 db    0
.xdata$x:00010EBB                 db    0
.xdata$x:00010EBC                 db    0
.xdata$x:00010EBD                 db    0
.xdata$x:00010EBE                 db    0
.xdata$x:00010EBF                 db    0
.xdata$x:00010EC0                 db    0
.xdata$x:00010EC1                 db    0
.xdata$x:00010EC2                 db    0
.xdata$x:00010EC3                 db    0
.xdata$x:00010EC3 _xdata$x        ends
.xdata$x:00010EC3
.xdata$x:00010EC4 ; ===========================================================================
.xdata$x:00010EC4
.xdata$x:00010EC4 ; Segment type: Pure data
.xdata$x:00010EC4 ; Segment permissions: Read
.xdata$x:00010EC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010EC4                 assume cs:_xdata$x
.xdata$x:00010EC4                 ;org 10EC4h
.xdata$x:00010EC4 ; COMDAT (pick associative to section at 5FD8)
.xdata$x:00010EC4 __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010EC4                                         ; DATA XREF: .xdata$x:00010EF4o
.xdata$x:00010EC5                 db    0
.xdata$x:00010EC6                 db    0
.xdata$x:00010EC7                 db    0
.xdata$x:00010EC8                 db    0
.xdata$x:00010EC9                 db    0
.xdata$x:00010ECA                 db    0
.xdata$x:00010ECB                 db    0
.xdata$x:00010ECC                 db    0
.xdata$x:00010ECD                 db    0
.xdata$x:00010ECE                 db    0
.xdata$x:00010ECF                 db    0
.xdata$x:00010ED0                 dd offset __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010ED4 __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010ED4                                         ; DATA XREF: .xdata$x:00010F00o
.xdata$x:00010ED5                 db 0FFh
.xdata$x:00010ED6                 db 0FFh
.xdata$x:00010ED7                 db 0FFh
.xdata$x:00010ED8                 db    0
.xdata$x:00010ED9                 db    0
.xdata$x:00010EDA                 db    0
.xdata$x:00010EDB                 db    0
.xdata$x:00010EDC                 db 0FFh
.xdata$x:00010EDD                 db 0FFh
.xdata$x:00010EDE                 db 0FFh
.xdata$x:00010EDF                 db 0FFh
.xdata$x:00010EE0                 db    0
.xdata$x:00010EE1                 db    0
.xdata$x:00010EE2                 db    0
.xdata$x:00010EE3                 db    0
.xdata$x:00010EE4 __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010EE4                                         ; DATA XREF: .xdata$x:00010F08o
.xdata$x:00010EE5                 db    0
.xdata$x:00010EE6                 db    0
.xdata$x:00010EE7                 db    0
.xdata$x:00010EE8                 db    0
.xdata$x:00010EE9                 db    0
.xdata$x:00010EEA                 db    0
.xdata$x:00010EEB                 db    0
.xdata$x:00010EEC                 db    1
.xdata$x:00010EED                 db    0
.xdata$x:00010EEE                 db    0
.xdata$x:00010EEF                 db    0
.xdata$x:00010EF0                 db    1
.xdata$x:00010EF1                 db    0
.xdata$x:00010EF2                 db    0
.xdata$x:00010EF3                 db    0
.xdata$x:00010EF4                 dd offset __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010EF8 __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010EF8                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010EF9                 db    5
.xdata$x:00010EFA                 db  93h ; ô
.xdata$x:00010EFB                 db  19h
.xdata$x:00010EFC                 db    2
.xdata$x:00010EFD                 db    0
.xdata$x:00010EFE                 db    0
.xdata$x:00010EFF                 db    0
.xdata$x:00010F00                 dd offset __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010F04                 db    1
.xdata$x:00010F05                 db    0
.xdata$x:00010F06                 db    0
.xdata$x:00010F07                 db    0
.xdata$x:00010F08                 dd offset __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010F0C                 db    0
.xdata$x:00010F0D                 db    0
.xdata$x:00010F0E                 db    0
.xdata$x:00010F0F                 db    0
.xdata$x:00010F10                 db    0
.xdata$x:00010F11                 db    0
.xdata$x:00010F12                 db    0
.xdata$x:00010F13                 db    0
.xdata$x:00010F14                 db    0
.xdata$x:00010F15                 db    0
.xdata$x:00010F16                 db    0
.xdata$x:00010F17                 db    0
.xdata$x:00010F18                 db    0
.xdata$x:00010F19                 db    0
.xdata$x:00010F1A                 db    0
.xdata$x:00010F1B                 db    0
.xdata$x:00010F1B _xdata$x        ends
.xdata$x:00010F1B
.xdata$x:00010F1C ; ===========================================================================
.xdata$x:00010F1C
.xdata$x:00010F1C ; Segment type: Pure data
.xdata$x:00010F1C ; Segment permissions: Read
.xdata$x:00010F1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010F1C                 assume cs:_xdata$x
.xdata$x:00010F1C                 ;org 10F1Ch
.xdata$x:00010F1C ; COMDAT (pick associative to section at 5E88)
.xdata$x:00010F1C __catchsym$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010F1C                                         ; DATA XREF: .xdata$x:00010F4Co
.xdata$x:00010F1D                 db    0
.xdata$x:00010F1E                 db    0
.xdata$x:00010F1F                 db    0
.xdata$x:00010F20                 db    0
.xdata$x:00010F21                 db    0
.xdata$x:00010F22                 db    0
.xdata$x:00010F23                 db    0
.xdata$x:00010F24                 db    0
.xdata$x:00010F25                 db    0
.xdata$x:00010F26                 db    0
.xdata$x:00010F27                 db    0
.xdata$x:00010F28                 dd offset __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010F2C __unwindtable$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010F2C                                         ; DATA XREF: .xdata$x:00010F58o
.xdata$x:00010F2D                 db 0FFh
.xdata$x:00010F2E                 db 0FFh
.xdata$x:00010F2F                 db 0FFh
.xdata$x:00010F30                 db    0
.xdata$x:00010F31                 db    0
.xdata$x:00010F32                 db    0
.xdata$x:00010F33                 db    0
.xdata$x:00010F34                 db 0FFh
.xdata$x:00010F35                 db 0FFh
.xdata$x:00010F36                 db 0FFh
.xdata$x:00010F37                 db 0FFh
.xdata$x:00010F38                 db    0
.xdata$x:00010F39                 db    0
.xdata$x:00010F3A                 db    0
.xdata$x:00010F3B                 db    0
.xdata$x:00010F3C __tryblocktable$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010F3C                                         ; DATA XREF: .xdata$x:00010F60o
.xdata$x:00010F3D                 db    0
.xdata$x:00010F3E                 db    0
.xdata$x:00010F3F                 db    0
.xdata$x:00010F40                 db    0
.xdata$x:00010F41                 db    0
.xdata$x:00010F42                 db    0
.xdata$x:00010F43                 db    0
.xdata$x:00010F44                 db    1
.xdata$x:00010F45                 db    0
.xdata$x:00010F46                 db    0
.xdata$x:00010F47                 db    0
.xdata$x:00010F48                 db    1
.xdata$x:00010F49                 db    0
.xdata$x:00010F4A                 db    0
.xdata$x:00010F4B                 db    0
.xdata$x:00010F4C                 dd offset __catchsym$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010F50 __ehfuncinfo$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010F50                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010F51                 db    5
.xdata$x:00010F52                 db  93h ; ô
.xdata$x:00010F53                 db  19h
.xdata$x:00010F54                 db    2
.xdata$x:00010F55                 db    0
.xdata$x:00010F56                 db    0
.xdata$x:00010F57                 db    0
.xdata$x:00010F58                 dd offset __unwindtable$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010F5C                 db    1
.xdata$x:00010F5D                 db    0
.xdata$x:00010F5E                 db    0
.xdata$x:00010F5F                 db    0
.xdata$x:00010F60                 dd offset __tryblocktable$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010F64                 db    0
.xdata$x:00010F65                 db    0
.xdata$x:00010F66                 db    0
.xdata$x:00010F67                 db    0
.xdata$x:00010F68                 db    0
.xdata$x:00010F69                 db    0
.xdata$x:00010F6A                 db    0
.xdata$x:00010F6B                 db    0
.xdata$x:00010F6C                 db    0
.xdata$x:00010F6D                 db    0
.xdata$x:00010F6E                 db    0
.xdata$x:00010F6F                 db    0
.xdata$x:00010F70                 db    0
.xdata$x:00010F71                 db    0
.xdata$x:00010F72                 db    0
.xdata$x:00010F73                 db    0
.xdata$x:00010F73 _xdata$x        ends
.xdata$x:00010F73
.xdata$x:00010F74 ; ===========================================================================
.xdata$x:00010F74
.xdata$x:00010F74 ; Segment type: Pure data
.xdata$x:00010F74 ; Segment permissions: Read
.xdata$x:00010F74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010F74                 assume cs:_xdata$x
.xdata$x:00010F74                 ;org 10F74h
.xdata$x:00010F74 ; COMDAT (pick associative to section at 52E8)
.xdata$x:00010F74 __unwindtable$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z db 0FFh
.xdata$x:00010F74                                         ; DATA XREF: .xdata$x:00010F84o
.xdata$x:00010F75                 db 0FFh
.xdata$x:00010F76                 db 0FFh
.xdata$x:00010F77                 db 0FFh
.xdata$x:00010F78                 dd offset __unwindfunclet$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z$0
.xdata$x:00010F7C __ehfuncinfo$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z db  22h ; "
.xdata$x:00010F7C                                         ; DATA XREF: __ehhandler$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z+1Bo
.xdata$x:00010F7D                 db    5
.xdata$x:00010F7E                 db  93h ; ô
.xdata$x:00010F7F                 db  19h
.xdata$x:00010F80                 db    1
.xdata$x:00010F81                 db    0
.xdata$x:00010F82                 db    0
.xdata$x:00010F83                 db    0
.xdata$x:00010F84                 dd offset __unwindtable$??$_Make_heap@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HV12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@PAH0@Z
.xdata$x:00010F88                 align 20h
.xdata$x:00010F88 _xdata$x        ends
.xdata$x:00010F88
.xdata$x:00010FA0 ; ===========================================================================
.xdata$x:00010FA0
.xdata$x:00010FA0 ; Segment type: Pure data
.xdata$x:00010FA0 ; Segment permissions: Read
.xdata$x:00010FA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010FA0                 assume cs:_xdata$x
.xdata$x:00010FA0                 ;org 10FA0h
.xdata$x:00010FA0 ; COMDAT (pick associative to section at 50C8)
.xdata$x:00010FA0 __unwindtable$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z db 0FFh
.xdata$x:00010FA0                                         ; DATA XREF: .xdata$x:00010FB0o
.xdata$x:00010FA1                 db 0FFh
.xdata$x:00010FA2                 db 0FFh
.xdata$x:00010FA3                 db 0FFh
.xdata$x:00010FA4                 dd offset __unwindfunclet$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0
.xdata$x:00010FA8 __ehfuncinfo$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z db  22h ; "
.xdata$x:00010FA8                                         ; DATA XREF: __ehhandler$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z+1Bo
.xdata$x:00010FA9                 db    5
.xdata$x:00010FAA                 db  93h ; ô
.xdata$x:00010FAB                 db  19h
.xdata$x:00010FAC                 db    1
.xdata$x:00010FAD                 db    0
.xdata$x:00010FAE                 db    0
.xdata$x:00010FAF                 db    0
.xdata$x:00010FB0                 dd offset __unwindtable$??$_Insertion_sort1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@X@2@V12@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.xdata$x:00010FB4                 db    0
.xdata$x:00010FB5                 db    0
.xdata$x:00010FB6                 db    0
.xdata$x:00010FB7                 db    0
.xdata$x:00010FB8                 db    0
.xdata$x:00010FB9                 db    0
.xdata$x:00010FBA                 db    0
.xdata$x:00010FBB                 db    0
.xdata$x:00010FBC                 db    0
.xdata$x:00010FBD                 db    0
.xdata$x:00010FBE                 db    0
.xdata$x:00010FBF                 db    0
.xdata$x:00010FC0                 db    0
.xdata$x:00010FC1                 db    0
.xdata$x:00010FC2                 db    0
.xdata$x:00010FC3                 db    0
.xdata$x:00010FC4                 db    0
.xdata$x:00010FC5                 db    0
.xdata$x:00010FC6                 db    0
.xdata$x:00010FC7                 db    0
.xdata$x:00010FC8                 db    0
.xdata$x:00010FC9                 db    0
.xdata$x:00010FCA                 db    0
.xdata$x:00010FCB                 db    0
.xdata$x:00010FCB _xdata$x        ends
.xdata$x:00010FCB
.xdata$x:00010FCC ; ===========================================================================
.xdata$x:00010FCC
.xdata$x:00010FCC ; Segment type: Pure data
.xdata$x:00010FCC ; Segment permissions: Read
.xdata$x:00010FCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010FCC                 assume cs:_xdata$x
.xdata$x:00010FCC                 ;org 10FCCh
.xdata$x:00010FCC ; COMDAT (pick associative to section at 570C)
.xdata$x:00010FCC __unwindtable$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z db 0FFh
.xdata$x:00010FCC                                         ; DATA XREF: .xdata$x:00010FDCo
.xdata$x:00010FCD                 db 0FFh
.xdata$x:00010FCE                 db 0FFh
.xdata$x:00010FCF                 db 0FFh
.xdata$x:00010FD0                 dd offset __unwindfunclet$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z$0
.xdata$x:00010FD4 __ehfuncinfo$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z db  22h ; "
.xdata$x:00010FD4                                         ; DATA XREF: __ehhandler$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z+1Bo
.xdata$x:00010FD5                 db    5
.xdata$x:00010FD6                 db  93h ; ô
.xdata$x:00010FD7                 db  19h
.xdata$x:00010FD8                 db    1
.xdata$x:00010FD9                 db    0
.xdata$x:00010FDA                 db    0
.xdata$x:00010FDB                 db    0
.xdata$x:00010FDC                 dd offset __unwindtable$??$_Pop_heap_0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@U?$less@X@2@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0U?$less@X@0@0@Z
.xdata$x:00010FE0                 db    0
.xdata$x:00010FE1                 db    0
.xdata$x:00010FE2                 db    0
.xdata$x:00010FE3                 db    0
.xdata$x:00010FE4                 db    0
.xdata$x:00010FE5                 db    0
.xdata$x:00010FE6                 db    0
.xdata$x:00010FE7                 db    0
.xdata$x:00010FE8                 db    0
.xdata$x:00010FE9                 db    0
.xdata$x:00010FEA                 db    0
.xdata$x:00010FEB                 db    0
.xdata$x:00010FEC                 db    0
.xdata$x:00010FED                 db    0
.xdata$x:00010FEE                 db    0
.xdata$x:00010FEF                 db    0
.xdata$x:00010FF0                 db    0
.xdata$x:00010FF1                 db    0
.xdata$x:00010FF2                 db    0
.xdata$x:00010FF3                 db    0
.xdata$x:00010FF4                 db    0
.xdata$x:00010FF5                 db    0
.xdata$x:00010FF6                 db    0
.xdata$x:00010FF7                 db    0
.xdata$x:00010FF7 _xdata$x        ends
.xdata$x:00010FF7
.xdata$x:00010FF8 ; ===========================================================================
.xdata$x:00010FF8
.xdata$x:00010FF8 ; Segment type: Pure data
.xdata$x:00010FF8 ; Segment permissions: Read
.xdata$x:00010FF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010FF8                 assume cs:_xdata$x
.xdata$x:00010FF8                 ;org 10FF8h
.xdata$x:00010FF8 ; COMDAT (pick associative to section at 66B8)
.xdata$x:00010FF8 __unwindtable$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z db 0FFh
.xdata$x:00010FF8                                         ; DATA XREF: .xdata$x:00011008o
.xdata$x:00010FF9                 db 0FFh
.xdata$x:00010FFA                 db 0FFh
.xdata$x:00010FFB                 db 0FFh
.xdata$x:00010FFC                 dd offset __unwindfunclet$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z$0
.xdata$x:00011000 __ehfuncinfo$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z db  22h ; "
.xdata$x:00011000                                         ; DATA XREF: __ehhandler$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z+11o
.xdata$x:00011001                 db    5
.xdata$x:00011002                 db  93h ; ô
.xdata$x:00011003                 db  19h
.xdata$x:00011004                 db    1
.xdata$x:00011005                 db    0
.xdata$x:00011006                 db    0
.xdata$x:00011007                 db    0
.xdata$x:00011008                 dd offset __unwindtable$??$construct@UMatchedCharInserted@@U1@@?$allocator@UMatchedCharInserted@@@std@@QAEXPAUMatchedCharInserted@@$$QAU2@@Z
.xdata$x:0001100C                 db    0
.xdata$x:0001100D                 db    0
.xdata$x:0001100E                 db    0
.xdata$x:0001100F                 db    0
.xdata$x:00011010                 db    0
.xdata$x:00011011                 db    0
.xdata$x:00011012                 db    0
.xdata$x:00011013                 db    0
.xdata$x:00011014                 db    0
.xdata$x:00011015                 db    0
.xdata$x:00011016                 db    0
.xdata$x:00011017                 db    0
.xdata$x:00011018                 db    0
.xdata$x:00011019                 db    0
.xdata$x:0001101A                 db    0
.xdata$x:0001101B                 db    0
.xdata$x:0001101C                 db    0
.xdata$x:0001101D                 db    0
.xdata$x:0001101E                 db    0
.xdata$x:0001101F                 db    0
.xdata$x:00011020                 db    0
.xdata$x:00011021                 db    0
.xdata$x:00011022                 db    0
.xdata$x:00011023                 db    0
.xdata$x:00011023 _xdata$x        ends
.xdata$x:00011023
.bss:00011024 ; ===========================================================================
.bss:00011024
.bss:00011024 ; Segment type: Uninitialized
.bss:00011024 ; Segment permissions: Read/Write
.bss:00011024 _bss            segment byte public 'BSS' use32
.bss:00011024                 assume cs:_bss
.bss:00011024                 ;org 11024h
.bss:00011024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00011024 __Tuple_alloc   db    ? ;
.bss:00011025 ; std::_Ignore ignore
.bss:00011025 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00011026 _allocator_arg  db    ? ;
.bss:00011027 _piecewise_construct db    ? ;
.bss:00011027 _bss            ends
.bss:00011027
.rdata:00011028 ; ===========================================================================
.rdata:00011028
.rdata:00011028 ; Segment type: Pure data
.rdata:00011028 ; Segment permissions: Read
.rdata:00011028 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011028 _rdata          segment para public 'DATA' use32
.rdata:00011028                 assume cs:_rdata
.rdata:00011028                 ;org 11028h
.rdata:00011028 ; COMDAT (pick any)
.rdata:00011028                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00011028 ; wchar_t `string'
.rdata:00011028 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00011028                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:00011028                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00011028                 unicode 0, <clude\xutility>,0
.rdata:00011028 _rdata          ends
.rdata:00011028
.rdata:000110B8 ; ===========================================================================
.rdata:000110B8
.rdata:000110B8 ; Segment type: Pure data
.rdata:000110B8 ; Segment permissions: Read
.rdata:000110B8 _rdata          segment dword public 'DATA' use32
.rdata:000110B8                 assume cs:_rdata
.rdata:000110B8                 ;org 110B8h
.rdata:000110B8 ; COMDAT (pick any)
.rdata:000110B8                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:000110B8 ; wchar_t `string'
.rdata:000110B8 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:000110B8                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:000110B8                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:000110EA                 align 4
.rdata:000110EA _rdata          ends
.rdata:000110EA
.rdata:000110EC ; ===========================================================================
.rdata:000110EC
.rdata:000110EC ; Segment type: Pure data
.rdata:000110EC ; Segment permissions: Read
.rdata:000110EC _rdata          segment dword public 'DATA' use32
.rdata:000110EC                 assume cs:_rdata
.rdata:000110EC                 ;org 110ECh
.rdata:000110EC ; COMDAT (pick any)
.rdata:000110EC                 public ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
.rdata:000110EC ; public: static unsigned int const std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::npos
.rdata:000110EC ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB dd 0FFFFFFFFh
.rdata:000110EC                                         ; DATA XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+54r
.rdata:000110EC                                         ; getPathsForPathCompletion(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+204r
.rdata:000110EC _rdata          ends
.rdata:000110EC
.rdata:000110F0 ; ===========================================================================
.rdata:000110F0
.rdata:000110F0 ; Segment type: Pure data
.rdata:000110F0 ; Segment permissions: Read
.rdata:000110F0 _rdata          segment dword public 'DATA' use32
.rdata:000110F0                 assume cs:_rdata
.rdata:000110F0                 ;org 110F0h
.rdata:000110F0 ; COMDAT (pick largest)
.rdata:000110F0                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:000110F4                 public ??_7runtime_error@std@@6B@
.rdata:000110F4 ; const std::runtime_error::`vftable'
.rdata:000110F4 ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:000110F4                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:000110F4                                         ; std::runtime_error::runtime_error(char const *)+3Co
.rdata:000110F4                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:000110F8                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:000110F8 _rdata          ends
.rdata:000110F8
.xdata$x:000110FC ; ===========================================================================
.xdata$x:000110FC
.xdata$x:000110FC ; Segment type: Pure data
.xdata$x:000110FC ; Segment permissions: Read
.xdata$x:000110FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000110FC                 assume cs:_xdata$x
.xdata$x:000110FC                 ;org 110FCh
.xdata$x:000110FC ; COMDAT (pick any)
.xdata$x:000110FC                 public __TI2?AVruntime_error@std@@
.xdata$x:000110FC __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+A6o
.xdata$x:000110FD                 db    0
.xdata$x:000110FE                 db    0
.xdata$x:000110FF                 db    0
.xdata$x:00011100                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:00011104                 align 8
.xdata$x:00011108                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:00011108 _xdata$x        ends
.xdata$x:00011108
.xdata$x:0001110C ; ===========================================================================
.xdata$x:0001110C
.xdata$x:0001110C ; Segment type: Pure data
.xdata$x:0001110C ; Segment permissions: Read
.xdata$x:0001110C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001110C                 assume cs:_xdata$x
.xdata$x:0001110C                 ;org 1110Ch
.xdata$x:0001110C ; COMDAT (pick any)
.xdata$x:0001110C                 public __CTA2?AVruntime_error@std@@
.xdata$x:0001110C __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:00011108o
.xdata$x:0001110D                 db    0
.xdata$x:0001110E                 db    0
.xdata$x:0001110F                 db    0
.xdata$x:00011110                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:00011114                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00011114 _xdata$x        ends
.xdata$x:00011114
.data$r:00011118 ; ===========================================================================
.data$r:00011118
.data$r:00011118 ; Segment type: Pure data
.data$r:00011118 ; Segment permissions: Read/Write
.data$r:00011118 _data$r         segment dword public 'DATA' use32
.data$r:00011118                 assume cs:_data$r
.data$r:00011118                 ;org 11118h
.data$r:00011118 ; COMDAT (pick any)
.data$r:00011118                 public ??_R0?AVruntime_error@std@@@8
.data$r:00011118 ; class std::runtime_error `RTTI Type Descriptor'
.data$r:00011118 ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011118                                         ; DATA XREF: .xdata$x:0001113Co
.data$r:00011118                                         ; .rdata$r:00012228o ...
.data$r:00011118                                         ; const type_info::`vftable'
.data$r:0001111C                 align 10h
.data$r:00011120 a_?avruntime_er db '.?AVruntime_error@std@@',0
.data$r:00011120 _data$r         ends
.data$r:00011120
.xdata$x:00011138 ; ===========================================================================
.xdata$x:00011138
.xdata$x:00011138 ; Segment type: Pure data
.xdata$x:00011138 ; Segment permissions: Read
.xdata$x:00011138 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011138                 assume cs:_xdata$x
.xdata$x:00011138                 ;org 11138h
.xdata$x:00011138 ; COMDAT (pick any)
.xdata$x:00011138                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:00011138 __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:00011138                                         ; DATA XREF: .xdata$x:00011110o
.xdata$x:00011139                 db    0
.xdata$x:0001113A                 db    0
.xdata$x:0001113B                 db    0
.xdata$x:0001113C                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:00011140                 db    0
.xdata$x:00011141                 db    0
.xdata$x:00011142                 db    0
.xdata$x:00011143                 db    0
.xdata$x:00011144                 db 0FFh
.xdata$x:00011145                 db 0FFh
.xdata$x:00011146                 db 0FFh
.xdata$x:00011147                 db 0FFh
.xdata$x:00011148                 db    0
.xdata$x:00011149                 db    0
.xdata$x:0001114A                 db    0
.xdata$x:0001114B                 db    0
.xdata$x:0001114C                 db  0Ch
.xdata$x:0001114D                 db    0
.xdata$x:0001114E                 db    0
.xdata$x:0001114F                 db    0
.xdata$x:00011150                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:00011150 _xdata$x        ends
.xdata$x:00011150
.data$r:00011154 ; ===========================================================================
.data$r:00011154
.data$r:00011154 ; Segment type: Pure data
.data$r:00011154 ; Segment permissions: Read/Write
.data$r:00011154 _data$r         segment dword public 'DATA' use32
.data$r:00011154                 assume cs:_data$r
.data$r:00011154                 ;org 11154h
.data$r:00011154 ; COMDAT (pick any)
.data$r:00011154                 public ??_R0?AVexception@std@@@8
.data$r:00011154 ; class std::exception `RTTI Type Descriptor'
.data$r:00011154 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011154                                         ; DATA XREF: .xdata$x:00011174o
.data$r:00011154                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011154                                         ; const type_info::`vftable'
.data$r:00011158                 db    0
.data$r:00011159                 db    0
.data$r:0001115A                 db    0
.data$r:0001115B                 db    0
.data$r:0001115C                 db  2Eh ; .
.data$r:0001115D                 db  3Fh ; ?
.data$r:0001115E                 db  41h ; A
.data$r:0001115F                 db  56h ; V
.data$r:00011160                 db  65h ; e
.data$r:00011161                 db  78h ; x
.data$r:00011162                 db  63h ; c
.data$r:00011163                 db  65h ; e
.data$r:00011164                 db  70h ; p
.data$r:00011165                 db  74h ; t
.data$r:00011166                 db  69h ; i
.data$r:00011167                 db  6Fh ; o
.data$r:00011168                 db  6Eh ; n
.data$r:00011169                 db  40h ; @
.data$r:0001116A                 db  73h ; s
.data$r:0001116B                 db  74h ; t
.data$r:0001116C                 db  64h ; d
.data$r:0001116D                 db  40h ; @
.data$r:0001116E                 db  40h ; @
.data$r:0001116F                 db    0
.data$r:0001116F _data$r         ends
.data$r:0001116F
.xdata$x:00011170 ; ===========================================================================
.xdata$x:00011170
.xdata$x:00011170 ; Segment type: Pure data
.xdata$x:00011170 ; Segment permissions: Read
.xdata$x:00011170 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011170                 assume cs:_xdata$x
.xdata$x:00011170                 ;org 11170h
.xdata$x:00011170 ; COMDAT (pick any)
.xdata$x:00011170                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00011170 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:00011170                                         ; DATA XREF: .xdata$x:00011114o
.xdata$x:00011170                                         ; .xdata$x:00011D78o
.xdata$x:00011171                 db    0
.xdata$x:00011172                 db    0
.xdata$x:00011173                 db    0
.xdata$x:00011174                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:00011178                 db    0
.xdata$x:00011179                 db    0
.xdata$x:0001117A                 db    0
.xdata$x:0001117B                 db    0
.xdata$x:0001117C                 db 0FFh
.xdata$x:0001117D                 db 0FFh
.xdata$x:0001117E                 db 0FFh
.xdata$x:0001117F                 db 0FFh
.xdata$x:00011180                 db    0
.xdata$x:00011181                 db    0
.xdata$x:00011182                 db    0
.xdata$x:00011183                 db    0
.xdata$x:00011184                 db  0Ch
.xdata$x:00011185                 db    0
.xdata$x:00011186                 db    0
.xdata$x:00011187                 db    0
.xdata$x:00011188                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:00011188 _xdata$x        ends
.xdata$x:00011188
.rdata:0001118C ; ===========================================================================
.rdata:0001118C
.rdata:0001118C ; Segment type: Pure data
.rdata:0001118C ; Segment permissions: Read
.rdata:0001118C _rdata          segment dword public 'DATA' use32
.rdata:0001118C                 assume cs:_rdata
.rdata:0001118C                 ;org 1118Ch
.rdata:0001118C ; COMDAT (pick any)
.rdata:0001118C                 public ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
.rdata:0001118C ; char `string'[]
.rdata:0001118C ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ db 'bad locale name',0
.rdata:0001118C                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+99o
.rdata:0001118C _rdata          ends
.rdata:0001118C
.rdata:0001119C ; ===========================================================================
.rdata:0001119C
.rdata:0001119C ; Segment type: Pure data
.rdata:0001119C ; Segment permissions: Read
.rdata:0001119C _rdata          segment dword public 'DATA' use32
.rdata:0001119C                 assume cs:_rdata
.rdata:0001119C                 ;org 1119Ch
.rdata:0001119C ; COMDAT (pick largest)
.rdata:0001119C                 dd offset ??_R4_Facet_base@std@@6B@ ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata:000111A0                 public ??_7_Facet_base@std@@6B@
.rdata:000111A0 ; const std::_Facet_base::`vftable'
.rdata:000111A0 ??_7_Facet_base@std@@6B@ dd offset ??_E_Facet_base@std@@UAEPAXI@Z
.rdata:000111A0                                         ; DATA XREF: std::_Facet_base::_Facet_base(void)+Ao
.rdata:000111A0                                         ; std::_Facet_base::~_Facet_base(void)+Ao
.rdata:000111A0                                         ; std::_Facet_base::`vector deleting destructor'(uint)
.rdata:000111A4                 dd offset __purecall
.rdata:000111A8                 dd offset __purecall
.rdata:000111A8 _rdata          ends
.rdata:000111A8
.rdata:000111AC ; ===========================================================================
.rdata:000111AC
.rdata:000111AC ; Segment type: Pure data
.rdata:000111AC ; Segment permissions: Read
.rdata:000111AC _rdata          segment dword public 'DATA' use32
.rdata:000111AC                 assume cs:_rdata
.rdata:000111AC                 ;org 111ACh
.rdata:000111AC ; COMDAT (pick largest)
.rdata:000111AC                 dd offset ??_R4facet@locale@std@@6B@ ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata:000111B0                 public ??_7facet@locale@std@@6B@
.rdata:000111B0 ; const std::locale::facet::`vftable'
.rdata:000111B0 ??_7facet@locale@std@@6B@ dd offset ??_Efacet@locale@std@@MAEPAXI@Z
.rdata:000111B0                                         ; DATA XREF: std::locale::facet::facet(uint)+38o
.rdata:000111B0                                         ; std::locale::facet::~facet(void)+29o
.rdata:000111B0                                         ; std::locale::facet::`vector deleting destructor'(uint)
.rdata:000111B4                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:000111B8                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:000111B8 _rdata          ends
.rdata:000111B8
.rdata:000111BC ; ===========================================================================
.rdata:000111BC
.rdata:000111BC ; Segment type: Pure data
.rdata:000111BC ; Segment permissions: Read
.rdata:000111BC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000111BC _rdata          segment para public 'DATA' use32
.rdata:000111BC                 assume cs:_rdata
.rdata:000111BC                 ;org 111BCh
.rdata:000111BC ; COMDAT (pick any)
.rdata:000111BC                 public ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:000111BC ; char `string'[]
.rdata:000111BC ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xl'
.rdata:000111BC                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+4Fo
.rdata:000111BC                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+5o
.rdata:000111BC                 db 'ocale',0
.rdata:00011203                 align 4
.rdata:00011203 _rdata          ends
.rdata:00011203
.rdata:00011204 ; ===========================================================================
.rdata:00011204
.rdata:00011204 ; Segment type: Pure data
.rdata:00011204 ; Segment permissions: Read
.rdata:00011204 _rdata          segment byte public 'DATA' use32
.rdata:00011204                 assume cs:_rdata
.rdata:00011204                 ;org 11204h
.rdata:00011204 ; COMDAT (pick any)
.rdata:00011204                 public ??_C@_00CNPNBAHC@?$AA@
.rdata:00011204 ; `string'
.rdata:00011204 ??_C@_00CNPNBAHC@?$AA@ db    0          ; DATA XREF: std::locale::c_str(void)+11o
.rdata:00011205                 align 4
.rdata:00011205 _rdata          ends
.rdata:00011205
.rdata:00011208 ; ===========================================================================
.rdata:00011208
.rdata:00011208 ; Segment type: Pure data
.rdata:00011208 ; Segment permissions: Read
.rdata:00011208 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011208 _rdata          segment para public 'DATA' use32
.rdata:00011208                 assume cs:_rdata
.rdata:00011208                 ;org 11208h
.rdata:00011208 ; COMDAT (pick any)
.rdata:00011208                 public ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00011208 ; wchar_t `string'
.rdata:00011208 ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00011208                                         ; DATA XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+Co
.rdata:00011208                                         ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+26o ...
.rdata:00011208                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00011208                 unicode 0, <clude\xlocale>,0
.rdata:00011296                 align 4
.rdata:00011296 _rdata          ends
.rdata:00011296
.rdata:00011298 ; ===========================================================================
.rdata:00011298
.rdata:00011298 ; Segment type: Pure data
.rdata:00011298 ; Segment permissions: Read
.rdata:00011298 _rdata          segment dword public 'DATA' use32
.rdata:00011298                 assume cs:_rdata
.rdata:00011298                 ;org 11298h
.rdata:00011298 ; COMDAT (pick largest)
.rdata:00011298                 dd offset ??_R4ctype_base@std@@6B@ ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata:0001129C                 public ??_7ctype_base@std@@6B@
.rdata:0001129C ; const std::ctype_base::`vftable'
.rdata:0001129C ??_7ctype_base@std@@6B@ dd offset ??_Ectype_base@std@@UAEPAXI@Z
.rdata:0001129C                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+3Co
.rdata:0001129C                                         ; std::ctype_base::~ctype_base(void)+29o
.rdata:0001129C                                         ; std::ctype_base::`vector deleting destructor'(uint)
.rdata:000112A0                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:000112A4                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:000112A4 _rdata          ends
.rdata:000112A4
.rdata:000112A8 ; ===========================================================================
.rdata:000112A8
.rdata:000112A8 ; Segment type: Pure data
.rdata:000112A8 ; Segment permissions: Read
.rdata:000112A8 _rdata          segment dword public 'DATA' use32
.rdata:000112A8                 assume cs:_rdata
.rdata:000112A8                 ;org 112A8h
.rdata:000112A8 ; COMDAT (pick largest)
.rdata:000112A8                 dd offset ??_R4?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata:000112AC                 public ??_7?$ctype@_W@std@@6B@
.rdata:000112AC ; const std::ctype<wchar_t>::`vftable'
.rdata:000112AC ??_7?$ctype@_W@std@@6B@ dd offset ??_E?$ctype@_W@std@@MAEPAXI@Z
.rdata:000112AC                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+3Co
.rdata:000112AC                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+29o
.rdata:000112AC                                         ; std::ctype<wchar_t>::`vector deleting destructor'(uint)
.rdata:000112B0                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:000112B4                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:000112B8                 dd offset ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)
.rdata:000112BC                 dd offset ?do_is@?$ctype@_W@std@@MBE_NF_W@Z ; std::ctype<wchar_t>::do_is(short,wchar_t)
.rdata:000112C0                 dd offset ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)
.rdata:000112C4                 dd offset ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)
.rdata:000112C8                 dd offset ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)
.rdata:000112CC                 dd offset ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t)
.rdata:000112D0                 dd offset ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)
.rdata:000112D4                 dd offset ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t)
.rdata:000112D8                 dd offset ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ; std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)
.rdata:000112DC                 dd offset ?do_widen@?$ctype@_W@std@@MBE_WD@Z ; std::ctype<wchar_t>::do_widen(char)
.rdata:000112E0                 dd offset ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)
.rdata:000112E4                 dd offset ?do_narrow@?$ctype@_W@std@@MBED_WD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t,char)
.rdata:000112E4 _rdata          ends
.rdata:000112E4
.rdata:000112E8 ; ===========================================================================
.rdata:000112E8
.rdata:000112E8 ; Segment type: Pure data
.rdata:000112E8 ; Segment permissions: Read
.rdata:000112E8 _rdata          segment dword public 'DATA' use32
.rdata:000112E8                 assume cs:_rdata
.rdata:000112E8                 ;org 112E8h
.rdata:000112E8 ; COMDAT (pick largest)
.rdata:000112E8                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:000112EC                 public ??_7error_category@std@@6B@
.rdata:000112EC ; const std::error_category::`vftable'
.rdata:000112EC ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:000112EC                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:000112EC                                         ; std::error_category::~error_category(void)+Ao
.rdata:000112EC                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:000112F0                 dd offset __purecall
.rdata:000112F4                 dd offset __purecall
.rdata:000112F8                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:000112FC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00011300                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00011300 _rdata          ends
.rdata:00011300
.rdata:00011304 ; ===========================================================================
.rdata:00011304
.rdata:00011304 ; Segment type: Pure data
.rdata:00011304 ; Segment permissions: Read
.rdata:00011304 _rdata          segment dword public 'DATA' use32
.rdata:00011304                 assume cs:_rdata
.rdata:00011304                 ;org 11304h
.rdata:00011304 ; COMDAT (pick largest)
.rdata:00011304                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:00011308                 public ??_7_Generic_error_category@std@@6B@
.rdata:00011308 ; const std::_Generic_error_category::`vftable'
.rdata:00011308 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:00011308                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:00011308                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0001130C                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00011310                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:00011314                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00011318                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0001131C                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0001131C _rdata          ends
.rdata:0001131C
.rdata:00011320 ; ===========================================================================
.rdata:00011320
.rdata:00011320 ; Segment type: Pure data
.rdata:00011320 ; Segment permissions: Read
.rdata:00011320 _rdata          segment dword public 'DATA' use32
.rdata:00011320                 assume cs:_rdata
.rdata:00011320                 ;org 11320h
.rdata:00011320 ; COMDAT (pick any)
.rdata:00011320                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00011320 ; `string'
.rdata:00011320 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00011320                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00011320 _rdata          ends
.rdata:00011320
.rdata:00011328 ; ===========================================================================
.rdata:00011328
.rdata:00011328 ; Segment type: Pure data
.rdata:00011328 ; Segment permissions: Read
.rdata:00011328 _rdata          segment dword public 'DATA' use32
.rdata:00011328                 assume cs:_rdata
.rdata:00011328                 ;org 11328h
.rdata:00011328 ; COMDAT (pick any)
.rdata:00011328                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:00011328 ; `string'
.rdata:00011328 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:00011328                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_E194o
.rdata:00011328                                         ; std::_System_error_category::message(int):loc_E310o
.rdata:00011336                 align 4
.rdata:00011336 _rdata          ends
.rdata:00011336
.rdata:00011338 ; ===========================================================================
.rdata:00011338
.rdata:00011338 ; Segment type: Pure data
.rdata:00011338 ; Segment permissions: Read
.rdata:00011338 _rdata          segment dword public 'DATA' use32
.rdata:00011338                 assume cs:_rdata
.rdata:00011338                 ;org 11338h
.rdata:00011338 ; COMDAT (pick largest)
.rdata:00011338                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0001133C                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0001133C ; const std::_Iostream_error_category::`vftable'
.rdata:0001133C ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0001133C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0001133C                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00011340                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:00011344                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:00011348                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0001134C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00011350                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00011350 _rdata          ends
.rdata:00011350
.rdata:00011354 ; ===========================================================================
.rdata:00011354
.rdata:00011354 ; Segment type: Pure data
.rdata:00011354 ; Segment permissions: Read
.rdata:00011354 _rdata          segment dword public 'DATA' use32
.rdata:00011354                 assume cs:_rdata
.rdata:00011354                 ;org 11354h
.rdata:00011354 ; COMDAT (pick any)
.rdata:00011354                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00011354 ; `string'
.rdata:00011354 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00011354                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0001135D                 align 10h
.rdata:0001135D _rdata          ends
.rdata:0001135D
.rdata:00011360 ; ===========================================================================
.rdata:00011360
.rdata:00011360 ; Segment type: Pure data
.rdata:00011360 ; Segment permissions: Read
.rdata:00011360 _rdata          segment dword public 'DATA' use32
.rdata:00011360                 assume cs:_rdata
.rdata:00011360                 ;org 11360h
.rdata:00011360 ; COMDAT (pick any)
.rdata:00011360                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00011360 ; char `string'[]
.rdata:00011360 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00011360                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:00011376                 align 4
.rdata:00011376 _rdata          ends
.rdata:00011376
.rdata:00011378 ; ===========================================================================
.rdata:00011378
.rdata:00011378 ; Segment type: Pure data
.rdata:00011378 ; Segment permissions: Read
.rdata:00011378 _rdata          segment dword public 'DATA' use32
.rdata:00011378                 assume cs:_rdata
.rdata:00011378                 ;org 11378h
.rdata:00011378 ; COMDAT (pick largest)
.rdata:00011378                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0001137C                 public ??_7_System_error_category@std@@6B@
.rdata:0001137C ; const std::_System_error_category::`vftable'
.rdata:0001137C ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0001137C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0001137C                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00011380                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00011384                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00011388                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0001138C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00011390                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00011390 _rdata          ends
.rdata:00011390
.rdata:00011394 ; ===========================================================================
.rdata:00011394
.rdata:00011394 ; Segment type: Pure data
.rdata:00011394 ; Segment permissions: Read
.rdata:00011394 _rdata          segment dword public 'DATA' use32
.rdata:00011394                 assume cs:_rdata
.rdata:00011394                 ;org 11394h
.rdata:00011394 ; COMDAT (pick any)
.rdata:00011394                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:00011394 ; `string'
.rdata:00011394 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:00011394                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0001139B                 align 4
.rdata:0001139B _rdata          ends
.rdata:0001139B
.bss:0001139C ; ===========================================================================
.bss:0001139C
.bss:0001139C ; Segment type: Uninitialized
.bss:0001139C ; Segment permissions: Read/Write
.bss:0001139C _bss            segment dword public 'BSS' use32
.bss:0001139C                 assume cs:_bss
.bss:0001139C                 ;org 1139Ch
.bss:0001139C ; COMDAT (pick any)
.bss:0001139C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0001139C                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0001139C ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0001139C ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0001139C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0001139C                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0001139D                 db    ? ;
.bss:0001139E                 db    ? ;
.bss:0001139F                 db    ? ;
.bss:0001139F _bss            ends
.bss:0001139F
.bss:000113A0 ; ===========================================================================
.bss:000113A0
.bss:000113A0 ; Segment type: Uninitialized
.bss:000113A0 ; Segment permissions: Read/Write
.bss:000113A0 _bss            segment dword public 'BSS' use32
.bss:000113A0                 assume cs:_bss
.bss:000113A0                 ;org 113A0h
.bss:000113A0 ; COMDAT (pick any)
.bss:000113A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000113A0                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:000113A0 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:000113A0 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:000113A0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000113A0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000113A1                 db    ? ;
.bss:000113A2                 db    ? ;
.bss:000113A3                 db    ? ;
.bss:000113A3 _bss            ends
.bss:000113A3
.bss:000113A4 ; ===========================================================================
.bss:000113A4
.bss:000113A4 ; Segment type: Uninitialized
.bss:000113A4 ; Segment permissions: Read/Write
.bss:000113A4 _bss            segment dword public 'BSS' use32
.bss:000113A4                 assume cs:_bss
.bss:000113A4                 ;org 113A4h
.bss:000113A4 ; COMDAT (pick any)
.bss:000113A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000113A4                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:000113A4 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:000113A4 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:000113A4                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:000113A4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:000113A5                 db    ? ;
.bss:000113A6                 db    ? ;
.bss:000113A7                 db    ? ;
.bss:000113A7 _bss            ends
.bss:000113A7
.rdata:000113A8 ; ===========================================================================
.rdata:000113A8
.rdata:000113A8 ; Segment type: Pure data
.rdata:000113A8 ; Segment permissions: Read
.rdata:000113A8 _rdata          segment dword public 'DATA' use32
.rdata:000113A8                 assume cs:_rdata
.rdata:000113A8                 ;org 113A8h
.rdata:000113A8 ; COMDAT (pick any)
.rdata:000113A8                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:000113A8 ; int std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.rdata:000113A8 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:000113A8                                         ; DATA XREF: getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+3Br
.rdata:000113A8                                         ; getRawPath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3CF3r ...
.rdata:000113A8 _rdata          ends
.rdata:000113A8
.bss:000113AC ; ===========================================================================
.bss:000113AC
.bss:000113AC ; Segment type: Uninitialized
.bss:000113AC ; Segment permissions: Read/Write
.bss:000113AC _bss            segment dword public 'BSS' use32
.bss:000113AC                 assume cs:_bss
.bss:000113AC                 ;org 113ACh
.bss:000113AC ; COMDAT (pick any)
.bss:000113AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000113AC                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000113AC ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:000113AC ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000113AC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:000113AD                 db    ? ;
.bss:000113AE                 db    ? ;
.bss:000113AF                 db    ? ;
.bss:000113AF _bss            ends
.bss:000113AF
.bss:000113B0 ; ===========================================================================
.bss:000113B0
.bss:000113B0 ; Segment type: Uninitialized
.bss:000113B0 ; Segment permissions: Read/Write
.bss:000113B0 _bss            segment dword public 'BSS' use32
.bss:000113B0                 assume cs:_bss
.bss:000113B0                 ;org 113B0h
.bss:000113B0 ; COMDAT (pick any)
.bss:000113B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000113B0                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000113B0 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:000113B0 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000113B0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:000113B1                 db    ? ;
.bss:000113B2                 db    ? ;
.bss:000113B3                 db    ? ;
.bss:000113B3 _bss            ends
.bss:000113B3
.rdata:000113B4 ; ===========================================================================
.rdata:000113B4
.rdata:000113B4 ; Segment type: Pure data
.rdata:000113B4 ; Segment permissions: Read
.rdata:000113B4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000113B4 _rdata          segment para public 'DATA' use32
.rdata:000113B4                 assume cs:_rdata
.rdata:000113B4                 ;org 113B4h
.rdata:000113B4 ; COMDAT (pick any)
.rdata:000113B4                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:000113B4 ; wchar_t `string'
.rdata:000113B4 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:000113B4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+17o
.rdata:000113B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+17o ...
.rdata:000113B4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:000113B4                 unicode 0, <clude\xstring>,0
.rdata:00011442                 align 4
.rdata:00011442 _rdata          ends
.rdata:00011442
.rdata:00011444 ; ===========================================================================
.rdata:00011444
.rdata:00011444 ; Segment type: Pure data
.rdata:00011444 ; Segment permissions: Read
.rdata:00011444 _rdata          segment dword public 'DATA' use32
.rdata:00011444                 assume cs:_rdata
.rdata:00011444                 ;org 11444h
.rdata:00011444 ; COMDAT (pick any)
.rdata:00011444                 public ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:00011444 ; wchar_t `string'
.rdata:00011444 ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:00011444                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+1Co
.rdata:00011444                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+1Co
.rdata:00011444                 unicode 0, <string subscript out of range>,0
.rdata:00011444 _rdata          ends
.rdata:00011444
.bss:00011480 ; ===========================================================================
.bss:00011480
.bss:00011480 ; Segment type: Uninitialized
.bss:00011480 ; Segment permissions: Read/Write
.bss:00011480 _bss            segment dword public 'BSS' use32
.bss:00011480                 assume cs:_bss
.bss:00011480                 ;org 11480h
.bss:00011480 ; COMDAT (pick any)
.bss:00011480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00011480                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:00011480 ; std::locale::id std::numpunct<char>::id
.bss:00011480 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:00011480                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:00011481                 db    ? ;
.bss:00011482                 db    ? ;
.bss:00011483                 db    ? ;
.bss:00011483 _bss            ends
.bss:00011483
.bss:00011484 ; ===========================================================================
.bss:00011484
.bss:00011484 ; Segment type: Uninitialized
.bss:00011484 ; Segment permissions: Read/Write
.bss:00011484 _bss            segment dword public 'BSS' use32
.bss:00011484                 assume cs:_bss
.bss:00011484                 ;org 11484h
.bss:00011484 ; COMDAT (pick any)
.bss:00011484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00011484                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00011484 ; std::locale::id std::numpunct<wchar_t>::id
.bss:00011484 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00011484                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00011485                 db    ? ;
.bss:00011486                 db    ? ;
.bss:00011487                 db    ? ;
.bss:00011487 _bss            ends
.bss:00011487
.rdata:00011488 ; ===========================================================================
.rdata:00011488
.rdata:00011488 ; Segment type: Pure data
.rdata:00011488 ; Segment permissions: Read
.rdata:00011488 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011488 _rdata          segment para public 'DATA' use32
.rdata:00011488                 assume cs:_rdata
.rdata:00011488                 ;org 11488h
.rdata:00011488 ; COMDAT (pick any)
.rdata:00011488                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00011488 ; wchar_t `string'
.rdata:00011488 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00011488                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+19o
.rdata:00011488                                         ; std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+49o ...
.rdata:00011488                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00011488                 unicode 0, <clude\vector>,0
.rdata:00011488 _rdata          ends
.rdata:00011488
.rdata:00011514 ; ===========================================================================
.rdata:00011514
.rdata:00011514 ; Segment type: Pure data
.rdata:00011514 ; Segment permissions: Read
.rdata:00011514 _rdata          segment dword public 'DATA' use32
.rdata:00011514                 assume cs:_rdata
.rdata:00011514                 ;org 11514h
.rdata:00011514 ; COMDAT (pick any)
.rdata:00011514                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:00011514 ; wchar_t `string'
.rdata:00011514 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:00011514                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+1Eo
.rdata:00011514                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+1Eo ...
.rdata:00011514                 unicode 0, <vector subscript out of range>,0
.rdata:00011514 _rdata          ends
.rdata:00011514
.rdata:00011550 ; ===========================================================================
.rdata:00011550
.rdata:00011550 ; Segment type: Pure data
.rdata:00011550 ; Segment permissions: Read
.rdata:00011550 _rdata          segment dword public 'DATA' use32
.rdata:00011550                 assume cs:_rdata
.rdata:00011550                 ;org 11550h
.rdata:00011550 ; COMDAT (pick any)
.rdata:00011550                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:00011550 ; `string'
.rdata:00011550 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:00011550                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+2Bo
.rdata:00011550                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+2Bo ...
.rdata:00011550 _rdata          ends
.rdata:00011550
.rdata:00011574 ; ===========================================================================
.rdata:00011574
.rdata:00011574 ; Segment type: Pure data
.rdata:00011574 ; Segment permissions: Read
.rdata:00011574 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011574 _rdata          segment para public 'DATA' use32
.rdata:00011574                 assume cs:_rdata
.rdata:00011574                 ;org 11574h
.rdata:00011574 ; COMDAT (pick any)
.rdata:00011574                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:00011574 ; `string'
.rdata:00011574 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:00011574                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint):loc_9DECo
.rdata:00011574                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint):loc_9E7Co ...
.rdata:00011574                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:000115CA                 align 4
.rdata:000115CA _rdata          ends
.rdata:000115CA
.rdata:000115CC ; ===========================================================================
.rdata:000115CC
.rdata:000115CC ; Segment type: Pure data
.rdata:000115CC ; Segment permissions: Read
.rdata:000115CC _rdata          segment dword public 'DATA' use32
.rdata:000115CC                 assume cs:_rdata
.rdata:000115CC                 ;org 115CCh
.rdata:000115CC ; COMDAT (pick any)
.rdata:000115CC                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:000115CC ; `string'
.rdata:000115CC ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:000115CC                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+3Do
.rdata:000115CC                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+3Do ...
.rdata:000115CC                 unicode 0, <%s>,0
.rdata:000115D2                 align 4
.rdata:000115D2 _rdata          ends
.rdata:000115D2
.rdata:000115D4 ; ===========================================================================
.rdata:000115D4
.rdata:000115D4 ; Segment type: Pure data
.rdata:000115D4 ; Segment permissions: Read
.rdata:000115D4 _rdata          segment dword public 'DATA' use32
.rdata:000115D4                 assume cs:_rdata
.rdata:000115D4                 ;org 115D4h
.rdata:000115D4 ; COMDAT (pick any)
.rdata:000115D4                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:000115D4 ; `string'
.rdata:000115D4 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:000115D4                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+6Fo
.rdata:000115D4                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+6Fo ...
.rdata:000115D4                 unicode 0, <"out of range">,0
.rdata:000115F2                 align 4
.rdata:000115F2 _rdata          ends
.rdata:000115F2
.rdata:000115F4 ; ===========================================================================
.rdata:000115F4
.rdata:000115F4 ; Segment type: Pure data
.rdata:000115F4 ; Segment permissions: Read
.rdata:000115F4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000115F4 _rdata          segment para public 'DATA' use32
.rdata:000115F4                 assume cs:_rdata
.rdata:000115F4                 ;org 115F4h
.rdata:000115F4 ; COMDAT (pick any)
.rdata:000115F4                 public ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
.rdata:000115F4 ; wchar_t `string'
.rdata:000115F4 ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@:
.rdata:000115F4                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>)+63o
.rdata:000115F4                 unicode 0, <vector erase iterator outside range>,0
.rdata:000115F4 _rdata          ends
.rdata:000115F4
.rdata:0001163C ; ===========================================================================
.rdata:0001163C
.rdata:0001163C ; Segment type: Pure data
.rdata:0001163C ; Segment permissions: Read
.rdata:0001163C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0001163C _rdata          segment para public 'DATA' use32
.rdata:0001163C                 assume cs:_rdata
.rdata:0001163C                 ;org 1163Ch
.rdata:0001163C ; COMDAT (pick any)
.rdata:0001163C                 public ??_C@_1NE@NHMFFEGJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa@
.rdata:0001163C ; `string'
.rdata:0001163C ??_C@_1NE@NHMFFEGJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAh?$AAa@:
.rdata:0001163C                                         ; DATA XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+6Ao
.rdata:0001163C                 unicode 0, <std::vector>
.rdata:0001163C                 dw 3Ch
.rdata:0001163C                 unicode 0, <struct std::pair>
.rdata:0001163C                 dw 3Ch
.rdata:0001163C                 unicode 0, <char,char>
.rdata:0001163C                 dw 3Eh
.rdata:0001163C                 unicode 0, <,class std::allocator>
.rdata:0001163C                 dw 3Ch
.rdata:0001163C                 unicode 0, <struct std::pair>
.rdata:0001163C                 dw 3Ch
.rdata:0001163C                 unicode 0, <char,char>
.rdata:0001163C                 dw 3Eh
.rdata:0001163C                 unicode 0, < >
.rdata:0001163C                 dw 3Eh
.rdata:0001163C                 unicode 0, < >
.rdata:0001163C                 dw 3Eh
.rdata:0001163C                 unicode 0, <::operator []>,0
.rdata:0001163C _rdata          ends
.rdata:0001163C
.rdata:00011710 ; ===========================================================================
.rdata:00011710
.rdata:00011710 ; Segment type: Pure data
.rdata:00011710 ; Segment permissions: Read
.rdata:00011710 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011710 _rdata          segment para public 'DATA' use32
.rdata:00011710                 assume cs:_rdata
.rdata:00011710                 ;org 11710h
.rdata:00011710 ; COMDAT (pick any)
.rdata:00011710                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:00011710 ; `string'
.rdata:00011710 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:00011710                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:00011710                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:00011710                 unicode 0, <std::vector>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <class std::basic_string>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t>
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, <,class std::allocator>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t>
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, < >
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, <,class std::allocator>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <class std::basic_string>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t>
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, <,class std::allocator>
.rdata:00011710                 dw 3Ch
.rdata:00011710                 unicode 0, <wchar_t>
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, < >
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, < >
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, < >
.rdata:00011710                 dw 3Eh
.rdata:00011710                 unicode 0, <::operator []>,0
.rdata:00011710 _rdata          ends
.rdata:00011710
.rdata:000118F8 ; ===========================================================================
.rdata:000118F8
.rdata:000118F8 ; Segment type: Pure data
.rdata:000118F8 ; Segment permissions: Read
.rdata:000118F8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000118F8 _rdata          segment para public 'DATA' use32
.rdata:000118F8                 assume cs:_rdata
.rdata:000118F8                 ;org 118F8h
.rdata:000118F8 ; COMDAT (pick any)
.rdata:000118F8                 public ??_C@_1MO@CFNABMPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAM?$AAa?$AAt?$AAc?$AAh?$AAe?$AAd?$AAC?$AAh?$AAa?$AAr?$AAI?$AAn@
.rdata:000118F8 ; `string'
.rdata:000118F8 ??_C@_1MO@CFNABMPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAM?$AAa?$AAt?$AAc?$AAh?$AAe?$AAd?$AAC?$AAh?$AAa?$AAr?$AAI?$AAn@:
.rdata:000118F8                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+6Ao
.rdata:000118F8                 unicode 0, <std::vector>
.rdata:000118F8                 dw 3Ch
.rdata:000118F8                 unicode 0, <struct MatchedCharInserted,class std::allocator>
.rdata:000118F8                 dw 3Ch
.rdata:000118F8                 unicode 0, <struct MatchedCharInserted>
.rdata:000118F8                 dw 3Eh
.rdata:000118F8                 unicode 0, < >
.rdata:000118F8                 dw 3Eh
.rdata:000118F8                 unicode 0, <::operator []>,0
.rdata:000119C6                 align 4
.rdata:000119C6 _rdata          ends
.rdata:000119C6
.rdata:000119C8 ; ===========================================================================
.rdata:000119C8
.rdata:000119C8 ; Segment type: Pure data
.rdata:000119C8 ; Segment permissions: Read
.rdata:000119C8 _rdata          segment dword public 'DATA' use32
.rdata:000119C8                 assume cs:_rdata
.rdata:000119C8                 ;org 119C8h
.rdata:000119C8 ; COMDAT (pick any)
.rdata:000119C8                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:000119C8 ; `string'
.rdata:000119C8 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:000119C8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:000119C8                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+41o
.rdata:000119C8 _rdata          ends
.rdata:000119C8
.rdata:000119F0 ; ===========================================================================
.rdata:000119F0
.rdata:000119F0 ; Segment type: Pure data
.rdata:000119F0 ; Segment permissions: Read
.rdata:000119F0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000119F0 _rdata          segment para public 'DATA' use32
.rdata:000119F0                 assume cs:_rdata
.rdata:000119F0                 ;org 119F0h
.rdata:000119F0 ; COMDAT (pick any)
.rdata:000119F0                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:000119F0 ; `string'
.rdata:000119F0 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:000119F0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_AA2Ao
.rdata:000119F0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &):loc_AAC6o
.rdata:000119F0                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:00011A4E                 align 10h
.rdata:00011A4E _rdata          ends
.rdata:00011A4E
.rdata:00011A50 ; ===========================================================================
.rdata:00011A50
.rdata:00011A50 ; Segment type: Pure data
.rdata:00011A50 ; Segment permissions: Read
.rdata:00011A50 _rdata          segment dword public 'DATA' use32
.rdata:00011A50                 assume cs:_rdata
.rdata:00011A50                 ;org 11A50h
.rdata:00011A50 ; COMDAT (pick any)
.rdata:00011A50                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:00011A50 ; `string'
.rdata:00011A50 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:00011A50                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:00011A50                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+85o
.rdata:00011A50                 unicode 0, <"invalid argument">,0
.rdata:00011A76                 align 4
.rdata:00011A76 _rdata          ends
.rdata:00011A76
.rdata:00011A78 ; ===========================================================================
.rdata:00011A78
.rdata:00011A78 ; Segment type: Pure data
.rdata:00011A78 ; Segment permissions: Read
.rdata:00011A78 _rdata          segment dword public 'DATA' use32
.rdata:00011A78                 assume cs:_rdata
.rdata:00011A78                 ;org 11A78h
.rdata:00011A78 ; COMDAT (pick any)
.rdata:00011A78                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:00011A78 ; char `string'[]
.rdata:00011A78 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:00011A78                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:00011A78                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:00011A78 _rdata          ends
.rdata:00011A78
.rdata:00011A88 ; ===========================================================================
.rdata:00011A88
.rdata:00011A88 ; Segment type: Pure data
.rdata:00011A88 ; Segment permissions: Read
.rdata:00011A88 _rdata          segment dword public 'DATA' use32
.rdata:00011A88                 assume cs:_rdata
.rdata:00011A88                 ;org 11A88h
.rdata:00011A88 ; COMDAT (pick any)
.rdata:00011A88                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:00011A88 ; char `string'[]
.rdata:00011A88 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:00011A88                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:00011A88                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:00011A88 _rdata          ends
.rdata:00011A88
.rdata:00011AA0 ; ===========================================================================
.rdata:00011AA0
.rdata:00011AA0 ; Segment type: Pure data
.rdata:00011AA0 ; Segment permissions: Read
.rdata:00011AA0 _rdata          segment dword public 'DATA' use32
.rdata:00011AA0                 assume cs:_rdata
.rdata:00011AA0                 ;org 11AA0h
.rdata:00011AA0 ; COMDAT (pick any)
.rdata:00011AA0                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:00011AA0 ; char `string'[]
.rdata:00011AA0 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:00011AA0                                         ; DATA XREF: std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::_Xlen(void)+7o
.rdata:00011AA0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)+7o
.rdata:00011AB3                 align 4
.rdata:00011AB3 _rdata          ends
.rdata:00011AB3
.rdata:00011AB4 ; ===========================================================================
.rdata:00011AB4
.rdata:00011AB4 ; Segment type: Pure data
.rdata:00011AB4 ; Segment permissions: Read
.rdata:00011AB4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011AB4 _rdata          segment para public 'DATA' use32
.rdata:00011AB4                 assume cs:_rdata
.rdata:00011AB4                 ;org 11AB4h
.rdata:00011AB4 ; COMDAT (pick any)
.rdata:00011AB4                 public ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
.rdata:00011AB4 ; wchar_t `string'
.rdata:00011AB4 ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@:
.rdata:00011AB4                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+50o
.rdata:00011AB4                 unicode 0, <vector iterator + offset out of range>,0
.rdata:00011AB4 _rdata          ends
.rdata:00011AB4
.rdata:00011B00 ; ===========================================================================
.rdata:00011B00
.rdata:00011B00 ; Segment type: Pure data
.rdata:00011B00 ; Segment permissions: Read
.rdata:00011B00 _rdata          segment dword public 'DATA' use32
.rdata:00011B00                 assume cs:_rdata
.rdata:00011B00                 ;org 11B00h
.rdata:00011B00 ; COMDAT (pick any)
.rdata:00011B00                 public ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:00011B00 ; wchar_t `string'
.rdata:00011B00 ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:00011B00                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+34o
.rdata:00011B00                 unicode 0, <vector iterators incompatible>,0
.rdata:00011B00 _rdata          ends
.rdata:00011B00
.rdata:00011B3C ; ===========================================================================
.rdata:00011B3C
.rdata:00011B3C ; Segment type: Pure data
.rdata:00011B3C ; Segment permissions: Read
.rdata:00011B3C ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011B3C _rdata          segment para public 'DATA' use32
.rdata:00011B3C                 assume cs:_rdata
.rdata:00011B3C                 ;org 11B3Ch
.rdata:00011B3C ; COMDAT (pick any)
.rdata:00011B3C                 public ??_C@_1PE@MBOMHNCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00011B3C ; `string'
.rdata:00011B3C ??_C@_1PE@MBOMHNCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00011B3C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MatchedCharInserted>>>::operator+=(int)+9Co
.rdata:00011B3C                 unicode 0, <std::_Vector_const_iterator>
.rdata:00011B3C                 dw 3Ch
.rdata:00011B3C                 unicode 0, <class std::_Vector_val>
.rdata:00011B3C                 dw 3Ch
.rdata:00011B3C                 unicode 0, <struct std::_Simple_types>
.rdata:00011B3C                 dw 3Ch
.rdata:00011B3C                 unicode 0, <struct MatchedCharInserted>
.rdata:00011B3C                 dw 3Eh
.rdata:00011B3C                 unicode 0, < >
.rdata:00011B3C                 dw 3Eh
.rdata:00011B3C                 unicode 0, < >
.rdata:00011B3C                 dw 3Eh
.rdata:00011B3C                 unicode 0, <::operator +=>,0
.rdata:00011B3C _rdata          ends
.rdata:00011B3C
.rdata:00011C30 ; ===========================================================================
.rdata:00011C30
.rdata:00011C30 ; Segment type: Pure data
.rdata:00011C30 ; Segment permissions: Read
.rdata:00011C30 _rdata          segment dword public 'DATA' use32
.rdata:00011C30                 assume cs:_rdata
.rdata:00011C30                 ;org 11C30h
.rdata:00011C30 ; COMDAT (pick any)
.rdata:00011C30                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:00011C30 ; wchar_t `string'
.rdata:00011C30 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:00011C30                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:00011C30                 unicode 0, <string iterators incompatible>,0
.rdata:00011C30 _rdata          ends
.rdata:00011C30
.rdata:00011C6C ; ===========================================================================
.rdata:00011C6C
.rdata:00011C6C ; Segment type: Pure data
.rdata:00011C6C ; Segment permissions: Read
.rdata:00011C6C ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011C6C _rdata          segment para public 'DATA' use32
.rdata:00011C6C                 assume cs:_rdata
.rdata:00011C6C                 ;org 11C6Ch
.rdata:00011C6C ; COMDAT (pick any)
.rdata:00011C6C                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00011C6C ; `string'
.rdata:00011C6C ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00011C6C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:00011C6C                 unicode 0, <std::_String_const_iterator>
.rdata:00011C6C                 dw 3Ch
.rdata:00011C6C                 unicode 0, <class std::_String_val>
.rdata:00011C6C                 dw 3Ch
.rdata:00011C6C                 unicode 0, <struct std::_Simple_types>
.rdata:00011C6C                 dw 3Ch
.rdata:00011C6C                 unicode 0, <wchar_t>
.rdata:00011C6C                 dw 3Eh
.rdata:00011C6C                 unicode 0, < >
.rdata:00011C6C                 dw 3Eh
.rdata:00011C6C                 unicode 0, < >
.rdata:00011C6C                 dw 3Eh
.rdata:00011C6C                 unicode 0, <::_Compat>,0
.rdata:00011D32                 align 4
.rdata:00011D32 _rdata          ends
.rdata:00011D32
.rdata:00011D34 ; ===========================================================================
.rdata:00011D34
.rdata:00011D34 ; Segment type: Pure data
.rdata:00011D34 ; Segment permissions: Read
.rdata:00011D34 _rdata          segment dword public 'DATA' use32
.rdata:00011D34                 assume cs:_rdata
.rdata:00011D34                 ;org 11D34h
.rdata:00011D34 ; COMDAT (pick any)
.rdata:00011D34                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00011D34 ; wchar_t `string'
.rdata:00011D34 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00011D34                                         ; DATA XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+11o
.rdata:00011D34                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o ...
.rdata:00011D34                 unicode 0, <invalid null pointer>,0
.rdata:00011D5E                 align 10h
.rdata:00011D5E _rdata          ends
.rdata:00011D5E
.xdata$x:00011D60 ; ===========================================================================
.xdata$x:00011D60
.xdata$x:00011D60 ; Segment type: Pure data
.xdata$x:00011D60 ; Segment permissions: Read
.xdata$x:00011D60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011D60                 assume cs:_xdata$x
.xdata$x:00011D60                 ;org 11D60h
.xdata$x:00011D60 ; COMDAT (pick any)
.xdata$x:00011D60                 public __TI2?AVbad_cast@std@@
.xdata$x:00011D60 __TI2?AVbad_cast@std@@ db    0          ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+92o
.xdata$x:00011D61                 db    0
.xdata$x:00011D62                 db    0
.xdata$x:00011D63                 db    0
.xdata$x:00011D64                 dd offset ??1bad_cast@std@@UAE@XZ ; std::bad_cast::~bad_cast(void)
.xdata$x:00011D68                 db    0
.xdata$x:00011D69                 db    0
.xdata$x:00011D6A                 db    0
.xdata$x:00011D6B                 db    0
.xdata$x:00011D6C                 dd offset __CTA2?AVbad_cast@std@@
.xdata$x:00011D6C _xdata$x        ends
.xdata$x:00011D6C
.xdata$x:00011D70 ; ===========================================================================
.xdata$x:00011D70
.xdata$x:00011D70 ; Segment type: Pure data
.xdata$x:00011D70 ; Segment permissions: Read
.xdata$x:00011D70 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011D70                 assume cs:_xdata$x
.xdata$x:00011D70                 ;org 11D70h
.xdata$x:00011D70 ; COMDAT (pick any)
.xdata$x:00011D70                 public __CTA2?AVbad_cast@std@@
.xdata$x:00011D70 __CTA2?AVbad_cast@std@@ db    2         ; DATA XREF: .xdata$x:00011D6Co
.xdata$x:00011D71                 db    0
.xdata$x:00011D72                 db    0
.xdata$x:00011D73                 db    0
.xdata$x:00011D74                 dd offset __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:00011D78                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00011D78 _xdata$x        ends
.xdata$x:00011D78
.data$r:00011D7C ; ===========================================================================
.data$r:00011D7C
.data$r:00011D7C ; Segment type: Pure data
.data$r:00011D7C ; Segment permissions: Read/Write
.data$r:00011D7C _data$r         segment dword public 'DATA' use32
.data$r:00011D7C                 assume cs:_data$r
.data$r:00011D7C                 ;org 11D7Ch
.data$r:00011D7C ; COMDAT (pick any)
.data$r:00011D7C                 public ??_R0?AVbad_cast@std@@@8
.data$r:00011D7C ; class std::bad_cast `RTTI Type Descriptor'
.data$r:00011D7C ??_R0?AVbad_cast@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011D7C                                         ; DATA XREF: .xdata$x:00011D9Co
.data$r:00011D7C                                         ; const type_info::`vftable'
.data$r:00011D80                 db    0
.data$r:00011D81                 db    0
.data$r:00011D82                 db    0
.data$r:00011D83                 db    0
.data$r:00011D84                 db  2Eh ; .
.data$r:00011D85                 db  3Fh ; ?
.data$r:00011D86                 db  41h ; A
.data$r:00011D87                 db  56h ; V
.data$r:00011D88                 db  62h ; b
.data$r:00011D89                 db  61h ; a
.data$r:00011D8A                 db  64h ; d
.data$r:00011D8B                 db  5Fh ; _
.data$r:00011D8C                 db  63h ; c
.data$r:00011D8D                 db  61h ; a
.data$r:00011D8E                 db  73h ; s
.data$r:00011D8F                 db  74h ; t
.data$r:00011D90                 db  40h ; @
.data$r:00011D91                 db  73h ; s
.data$r:00011D92                 db  74h ; t
.data$r:00011D93                 db  64h ; d
.data$r:00011D94                 db  40h ; @
.data$r:00011D95                 db  40h ; @
.data$r:00011D96                 db    0
.data$r:00011D97                 align 4
.data$r:00011D97 _data$r         ends
.data$r:00011D97
.xdata$x:00011D98 ; ===========================================================================
.xdata$x:00011D98
.xdata$x:00011D98 ; Segment type: Pure data
.xdata$x:00011D98 ; Segment permissions: Read
.xdata$x:00011D98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00011D98                 assume cs:_xdata$x
.xdata$x:00011D98                 ;org 11D98h
.xdata$x:00011D98 ; COMDAT (pick any)
.xdata$x:00011D98                 public __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:00011D98 __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 db    0
.xdata$x:00011D98                                         ; DATA XREF: .xdata$x:00011D74o
.xdata$x:00011D99                 db    0
.xdata$x:00011D9A                 db    0
.xdata$x:00011D9B                 db    0
.xdata$x:00011D9C                 dd offset ??_R0?AVbad_cast@std@@@8 ; std::bad_cast `RTTI Type Descriptor'
.xdata$x:00011DA0                 db    0
.xdata$x:00011DA1                 db    0
.xdata$x:00011DA2                 db    0
.xdata$x:00011DA3                 db    0
.xdata$x:00011DA4                 db 0FFh
.xdata$x:00011DA5                 db 0FFh
.xdata$x:00011DA6                 db 0FFh
.xdata$x:00011DA7                 db 0FFh
.xdata$x:00011DA8                 db    0
.xdata$x:00011DA9                 db    0
.xdata$x:00011DAA                 db    0
.xdata$x:00011DAB                 db    0
.xdata$x:00011DAC                 db  0Ch
.xdata$x:00011DAD                 db    0
.xdata$x:00011DAE                 db    0
.xdata$x:00011DAF                 db    0
.xdata$x:00011DB0                 dd offset ??0bad_cast@std@@QAE@ABV01@@Z ; std::bad_cast::bad_cast(std::bad_cast const &)
.xdata$x:00011DB0 _xdata$x        ends
.xdata$x:00011DB0
.rdata:00011DB4 ; ===========================================================================
.rdata:00011DB4
.rdata:00011DB4 ; Segment type: Pure data
.rdata:00011DB4 ; Segment permissions: Read
.rdata:00011DB4 _rdata          segment dword public 'DATA' use32
.rdata:00011DB4                 assume cs:_rdata
.rdata:00011DB4                 ;org 11DB4h
.rdata:00011DB4 ; COMDAT (pick any)
.rdata:00011DB4                 public ??_C@_08EPJLHIJG@bad?5cast?$AA@
.rdata:00011DB4 ; char `string'[]
.rdata:00011DB4 ??_C@_08EPJLHIJG@bad?5cast?$AA@ db 'bad cast',0
.rdata:00011DB4                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+85o
.rdata:00011DBD                 align 10h
.rdata:00011DBD _rdata          ends
.rdata:00011DBD
.bss:00011DC0 ; ===========================================================================
.bss:00011DC0
.bss:00011DC0 ; Segment type: Uninitialized
.bss:00011DC0 ; Segment permissions: Read/Write
.bss:00011DC0 _bss            segment dword public 'BSS' use32
.bss:00011DC0                 assume cs:_bss
.bss:00011DC0                 ;org 11DC0h
.bss:00011DC0 ; COMDAT (pick any)
.bss:00011DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00011DC0                 public ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
.bss:00011DC0 ; public: static class std::locale::facet const * const std::_Facetptr<class std::ctype<wchar_t>>::_Psave
.bss:00011DC0 ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B dd ?
.bss:00011DC0                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+36r
.bss:00011DC0                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+ABw
.bss:00011DC0 _bss            ends
.bss:00011DC0
.rdata:00011DC4 ; ===========================================================================
.rdata:00011DC4
.rdata:00011DC4 ; Segment type: Pure data
.rdata:00011DC4 ; Segment permissions: Read
.rdata:00011DC4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011DC4 _rdata          segment para public 'DATA' use32
.rdata:00011DC4                 assume cs:_rdata
.rdata:00011DC4                 ;org 11DC4h
.rdata:00011DC4 ; COMDAT (pick any)
.rdata:00011DC4                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:00011DC4 ; wchar_t `string'
.rdata:00011DC4 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:00011DC4                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:00011DC4                 unicode 0, <string iterator not dereferencable>,0
.rdata:00011E0A                 align 4
.rdata:00011E0A _rdata          ends
.rdata:00011E0A
.rdata:00011E0C ; ===========================================================================
.rdata:00011E0C
.rdata:00011E0C ; Segment type: Pure data
.rdata:00011E0C ; Segment permissions: Read
.rdata:00011E0C ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011E0C _rdata          segment para public 'DATA' use32
.rdata:00011E0C                 assume cs:_rdata
.rdata:00011E0C                 ;org 11E0Ch
.rdata:00011E0C ; COMDAT (pick any)
.rdata:00011E0C                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00011E0C ; `string'
.rdata:00011E0C ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00011E0C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:00011E0C                 unicode 0, <std::_String_const_iterator>
.rdata:00011E0C                 dw 3Ch
.rdata:00011E0C                 unicode 0, <class std::_String_val>
.rdata:00011E0C                 dw 3Ch
.rdata:00011E0C                 unicode 0, <struct std::_Simple_types>
.rdata:00011E0C                 dw 3Ch
.rdata:00011E0C                 unicode 0, <wchar_t>
.rdata:00011E0C                 dw 3Eh
.rdata:00011E0C                 unicode 0, < >
.rdata:00011E0C                 dw 3Eh
.rdata:00011E0C                 unicode 0, < >
.rdata:00011E0C                 dw 3Eh
.rdata:00011E0C                 unicode 0, <::operator *>,0
.rdata:00011E0C _rdata          ends
.rdata:00011E0C
.rdata:00011ED8 ; ===========================================================================
.rdata:00011ED8
.rdata:00011ED8 ; Segment type: Pure data
.rdata:00011ED8 ; Segment permissions: Read
.rdata:00011ED8 _rdata          segment dword public 'DATA' use32
.rdata:00011ED8                 assume cs:_rdata
.rdata:00011ED8                 ;org 11ED8h
.rdata:00011ED8 ; COMDAT (pick any)
.rdata:00011ED8                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:00011ED8 ; wchar_t `string'
.rdata:00011ED8 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:00011ED8                                         ; DATA XREF: std::_Debug_range2<MatchedCharInserted *>(MatchedCharInserted *,MatchedCharInserted *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:00011ED8                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o ...
.rdata:00011ED8                 unicode 0, <invalid iterator range>,0
.rdata:00011F06                 align 4
.rdata:00011F06 _rdata          ends
.rdata:00011F06
.rdata:00011F08 ; ===========================================================================
.rdata:00011F08
.rdata:00011F08 ; Segment type: Pure data
.rdata:00011F08 ; Segment permissions: Read
.rdata:00011F08 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011F08 _rdata          segment para public 'DATA' use32
.rdata:00011F08                 assume cs:_rdata
.rdata:00011F08                 ;org 11F08h
.rdata:00011F08 ; COMDAT (pick any)
.rdata:00011F08                 public ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00011F08 ; wchar_t `string'
.rdata:00011F08 ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00011F08                                         ; DATA XREF: std::_Adjust_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,int,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::less<void>)+2Fo
.rdata:00011F08                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+3Bo ...
.rdata:00011F08                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00011F08                 unicode 0, <clude\algorithm>,0
.rdata:00011F9A                 align 4
.rdata:00011F9A _rdata          ends
.rdata:00011F9A
.rdata:00011F9C ; ===========================================================================
.rdata:00011F9C
.rdata:00011F9C ; Segment type: Pure data
.rdata:00011F9C ; Segment permissions: Read
.rdata:00011F9C ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011F9C _rdata          segment para public 'DATA' use32
.rdata:00011F9C                 assume cs:_rdata
.rdata:00011F9C                 ;org 11F9Ch
.rdata:00011F9C ; COMDAT (pick any)
.rdata:00011F9C                 public ??_C@_1BHK@KDGLPCFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00011F9C ; `string'
.rdata:00011F9C ??_C@_1BHK@KDGLPCFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00011F9C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Compat(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+80o
.rdata:00011F9C                 unicode 0, <std::_Vector_const_iterator>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <class std::_Vector_val>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <struct std::_Simple_types>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <class std::basic_string>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <wchar_t>
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, <,class std::allocator>
.rdata:00011F9C                 dw 3Ch
.rdata:00011F9C                 unicode 0, <wchar_t>
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, < >
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, < >
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, < >
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, < >
.rdata:00011F9C                 dw 3Eh
.rdata:00011F9C                 unicode 0, <::_Compat>,0
.rdata:00012116                 align 4
.rdata:00012116 _rdata          ends
.rdata:00012116
.rdata:00012118 ; ===========================================================================
.rdata:00012118
.rdata:00012118 ; Segment type: Pure data
.rdata:00012118 ; Segment permissions: Read
.rdata:00012118 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00012118 _rdata          segment para public 'DATA' use32
.rdata:00012118                 assume cs:_rdata
.rdata:00012118                 ;org 12118h
.rdata:00012118 ; COMDAT (pick any)
.rdata:00012118                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00012118 ; wchar_t `string'
.rdata:00012118 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00012118                                         ; DATA XREF: std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+2Fo
.rdata:00012118                                         ; std::_Uninit_move<MatchedCharInserted *,MatchedCharInserted *,std::allocator<MatchedCharInserted>,MatchedCharInserted>(MatchedCharInserted *,MatchedCharInserted *,MatchedCharInserted *,std::_Wrap_alloc<std::allocator<MatchedCharInserted>> &,MatchedCharInserted *,std::_Nonscalar_ptr_iterator_tag)+49o ...
.rdata:00012118                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00012118                 unicode 0, <clude\xmemory>,0
.rdata:000121A6                 align 4
.rdata:000121A6 _rdata          ends
.rdata:000121A6
.rdata:000121A8 ; ===========================================================================
.rdata:000121A8
.rdata:000121A8 ; Segment type: Pure data
.rdata:000121A8 ; Segment permissions: Read
.rdata:000121A8 _rdata          segment dword public 'DATA' use32
.rdata:000121A8                 assume cs:_rdata
.rdata:000121A8                 ;org 121A8h
.rdata:000121A8 ; COMDAT (pick any)
.rdata:000121A8                 public ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
.rdata:000121A8 ; wchar_t `string'
.rdata:000121A8 ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@:
.rdata:000121A8                                         ; DATA XREF: std::_Debug_lt_pred<std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::less<void>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,wchar_t const *,uint)+63o
.rdata:000121A8                 unicode 0, <invalid operator>
.rdata:000121A8                 dw 3Ch, 0
.rdata:000121A8 _rdata          ends
.rdata:000121A8
.rdata:000121CC ; ===========================================================================
.rdata:000121CC
.rdata:000121CC ; Segment type: Pure data
.rdata:000121CC ; Segment permissions: Read
.rdata:000121CC _rdata          segment dword public 'DATA' use32
.rdata:000121CC                 assume cs:_rdata
.rdata:000121CC                 ;org 121CCh
.rdata:000121CC ; COMDAT (pick any)
.rdata:000121CC                 public ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
.rdata:000121CC ; wchar_t `string'
.rdata:000121CC ??_C@_1BK@KAECGCDK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAe?$AAa?$AAp?$AA?$AA@:
.rdata:000121CC                                         ; DATA XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+66o
.rdata:000121CC                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+BAo
.rdata:000121CC                 unicode 0, <invalid heap>,0
.rdata:000121E6                 align 4
.rdata:000121E6 _rdata          ends
.rdata:000121E6
.rdata$r:000121E8 ; ===========================================================================
.rdata$r:000121E8
.rdata$r:000121E8 ; Segment type: Pure data
.rdata$r:000121E8 ; Segment permissions: Read
.rdata$r:000121E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000121E8                 assume cs:_rdata$r
.rdata$r:000121E8                 ;org 121E8h
.rdata$r:000121E8 ; COMDAT (pick any)
.rdata$r:000121E8                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:000121E8 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000121E8 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:000121E8                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:000121E8                                         ; .rdata$r:00012244o
.rdata$r:000121E8                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:000121EC                 db    0
.rdata$r:000121ED                 db    0
.rdata$r:000121EE                 db    0
.rdata$r:000121EF                 db    0
.rdata$r:000121F0                 db    0
.rdata$r:000121F1                 db    0
.rdata$r:000121F2                 db    0
.rdata$r:000121F3                 db    0
.rdata$r:000121F4                 db 0FFh
.rdata$r:000121F5                 db 0FFh
.rdata$r:000121F6                 db 0FFh
.rdata$r:000121F7                 db 0FFh
.rdata$r:000121F8                 db    0
.rdata$r:000121F9                 db    0
.rdata$r:000121FA                 db    0
.rdata$r:000121FB                 db    0
.rdata$r:000121FC                 db  40h ; @
.rdata$r:000121FD                 db    0
.rdata$r:000121FE                 db    0
.rdata$r:000121FF                 db    0
.rdata$r:00012200                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012200 _rdata$r        ends
.rdata$r:00012200
.rdata$r:00012204 ; ===========================================================================
.rdata$r:00012204
.rdata$r:00012204 ; Segment type: Pure data
.rdata$r:00012204 ; Segment permissions: Read
.rdata$r:00012204 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012204                 assume cs:_rdata$r
.rdata$r:00012204                 ;org 12204h
.rdata$r:00012204 ; COMDAT (pick any)
.rdata$r:00012204                 public ??_R3exception@std@@8
.rdata$r:00012204 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012204 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:00012200o
.rdata$r:00012205                 db    0
.rdata$r:00012206                 db    0
.rdata$r:00012207                 db    0
.rdata$r:00012208                 db    0
.rdata$r:00012209                 db    0
.rdata$r:0001220A                 db    0
.rdata$r:0001220B                 db    0
.rdata$r:0001220C                 db    1
.rdata$r:0001220D                 db    0
.rdata$r:0001220E                 db    0
.rdata$r:0001220F                 db    0
.rdata$r:00012210                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:00012210 _rdata$r        ends
.rdata$r:00012210
.rdata$r:00012214 ; ===========================================================================
.rdata$r:00012214
.rdata$r:00012214 ; Segment type: Pure data
.rdata$r:00012214 ; Segment permissions: Read
.rdata$r:00012214 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012214                 assume cs:_rdata$r
.rdata$r:00012214                 ;org 12214h
.rdata$r:00012214 ; COMDAT (pick any)
.rdata$r:00012214                 public ??_R2exception@std@@8
.rdata$r:00012214 ; std::exception::`RTTI Base Class Array'
.rdata$r:00012214 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:00012214                                         ; DATA XREF: .rdata$r:00012210o
.rdata$r:00012214                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012218                 db    0
.rdata$r:00012219                 align 4
.rdata$r:00012219 _rdata$r        ends
.rdata$r:00012219
.rdata$r:0001221C ; ===========================================================================
.rdata$r:0001221C
.rdata$r:0001221C ; Segment type: Pure data
.rdata$r:0001221C ; Segment permissions: Read
.rdata$r:0001221C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001221C                 assume cs:_rdata$r
.rdata$r:0001221C                 ;org 1221Ch
.rdata$r:0001221C ; COMDAT (pick any)
.rdata$r:0001221C                 public ??_R4runtime_error@std@@6B@
.rdata$r:0001221C ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:0001221C ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:000110F0o
.rdata$r:0001221D                 db    0
.rdata$r:0001221E                 db    0
.rdata$r:0001221F                 db    0
.rdata$r:00012220                 db    0
.rdata$r:00012221                 db    0
.rdata$r:00012222                 db    0
.rdata$r:00012223                 db    0
.rdata$r:00012224                 db    0
.rdata$r:00012225                 db    0
.rdata$r:00012226                 db    0
.rdata$r:00012227                 db    0
.rdata$r:00012228                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0001222C                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001222C _rdata$r        ends
.rdata$r:0001222C
.rdata$r:00012230 ; ===========================================================================
.rdata$r:00012230
.rdata$r:00012230 ; Segment type: Pure data
.rdata$r:00012230 ; Segment permissions: Read
.rdata$r:00012230 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012230                 assume cs:_rdata$r
.rdata$r:00012230                 ;org 12230h
.rdata$r:00012230 ; COMDAT (pick any)
.rdata$r:00012230                 public ??_R3runtime_error@std@@8
.rdata$r:00012230 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012230 ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:0001222Co
.rdata$r:00012230                                         ; .rdata$r:00012264o
.rdata$r:00012231                 db    0
.rdata$r:00012232                 db    0
.rdata$r:00012233                 db    0
.rdata$r:00012234                 db    0
.rdata$r:00012235                 db    0
.rdata$r:00012236                 db    0
.rdata$r:00012237                 db    0
.rdata$r:00012238                 db    2
.rdata$r:00012239                 db    0
.rdata$r:0001223A                 db    0
.rdata$r:0001223B                 db    0
.rdata$r:0001223C                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0001223C _rdata$r        ends
.rdata$r:0001223C
.rdata$r:00012240 ; ===========================================================================
.rdata$r:00012240
.rdata$r:00012240 ; Segment type: Pure data
.rdata$r:00012240 ; Segment permissions: Read
.rdata$r:00012240 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012240                 assume cs:_rdata$r
.rdata$r:00012240                 ;org 12240h
.rdata$r:00012240 ; COMDAT (pick any)
.rdata$r:00012240                 public ??_R2runtime_error@std@@8
.rdata$r:00012240 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:00012240 ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:00012240                                         ; DATA XREF: .rdata$r:0001223Co
.rdata$r:00012240                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012244                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012248                 db    0
.rdata$r:00012249                 align 4
.rdata$r:00012249 _rdata$r        ends
.rdata$r:00012249
.rdata$r:0001224C ; ===========================================================================
.rdata$r:0001224C
.rdata$r:0001224C ; Segment type: Pure data
.rdata$r:0001224C ; Segment permissions: Read
.rdata$r:0001224C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001224C                 assume cs:_rdata$r
.rdata$r:0001224C                 ;org 1224Ch
.rdata$r:0001224C ; COMDAT (pick any)
.rdata$r:0001224C                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0001224C ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0001224C ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:0001224C                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:0001224C                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:00012250                 db    1
.rdata$r:00012251                 db    0
.rdata$r:00012252                 db    0
.rdata$r:00012253                 db    0
.rdata$r:00012254                 db    0
.rdata$r:00012255                 db    0
.rdata$r:00012256                 db    0
.rdata$r:00012257                 db    0
.rdata$r:00012258                 db 0FFh
.rdata$r:00012259                 db 0FFh
.rdata$r:0001225A                 db 0FFh
.rdata$r:0001225B                 db 0FFh
.rdata$r:0001225C                 db    0
.rdata$r:0001225D                 db    0
.rdata$r:0001225E                 db    0
.rdata$r:0001225F                 db    0
.rdata$r:00012260                 db  40h ; @
.rdata$r:00012261                 db    0
.rdata$r:00012262                 db    0
.rdata$r:00012263                 db    0
.rdata$r:00012264                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012264 _rdata$r        ends
.rdata$r:00012264
.rdata$r:00012268 ; ===========================================================================
.rdata$r:00012268
.rdata$r:00012268 ; Segment type: Pure data
.rdata$r:00012268 ; Segment permissions: Read
.rdata$r:00012268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012268                 assume cs:_rdata$r
.rdata$r:00012268                 ;org 12268h
.rdata$r:00012268 ; COMDAT (pick any)
.rdata$r:00012268                 public ??_R4_Facet_base@std@@6B@
.rdata$r:00012268 ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata$r:00012268 ??_R4_Facet_base@std@@6B@ db    0       ; DATA XREF: .rdata:0001119Co
.rdata$r:00012269                 db    0
.rdata$r:0001226A                 db    0
.rdata$r:0001226B                 db    0
.rdata$r:0001226C                 db    0
.rdata$r:0001226D                 db    0
.rdata$r:0001226E                 db    0
.rdata$r:0001226F                 db    0
.rdata$r:00012270                 db    0
.rdata$r:00012271                 db    0
.rdata$r:00012272                 db    0
.rdata$r:00012273                 db    0
.rdata$r:00012274                 dd offset ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:00012278                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012278 _rdata$r        ends
.rdata$r:00012278
.data$r:0001227C ; ===========================================================================
.data$r:0001227C
.data$r:0001227C ; Segment type: Pure data
.data$r:0001227C ; Segment permissions: Read/Write
.data$r:0001227C _data$r         segment dword public 'DATA' use32
.data$r:0001227C                 assume cs:_data$r
.data$r:0001227C                 ;org 1227Ch
.data$r:0001227C ; COMDAT (pick any)
.data$r:0001227C                 public ??_R0?AV_Facet_base@std@@@8
.data$r:0001227C ; class std::_Facet_base `RTTI Type Descriptor'
.data$r:0001227C ??_R0?AV_Facet_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0001227C                                         ; DATA XREF: .rdata$r:00012274o
.data$r:0001227C                                         ; .rdata$r:std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0001227C                                         ; const type_info::`vftable'
.data$r:00012280                 db    0
.data$r:00012281                 db    0
.data$r:00012282                 db    0
.data$r:00012283                 db    0
.data$r:00012284                 db  2Eh ; .
.data$r:00012285                 db  3Fh ; ?
.data$r:00012286                 db  41h ; A
.data$r:00012287                 db  56h ; V
.data$r:00012288                 db  5Fh ; _
.data$r:00012289                 db  46h ; F
.data$r:0001228A                 db  61h ; a
.data$r:0001228B                 db  63h ; c
.data$r:0001228C                 db  65h ; e
.data$r:0001228D                 db  74h ; t
.data$r:0001228E                 db  5Fh ; _
.data$r:0001228F                 db  62h ; b
.data$r:00012290                 db  61h ; a
.data$r:00012291                 db  73h ; s
.data$r:00012292                 db  65h ; e
.data$r:00012293                 db  40h ; @
.data$r:00012294                 db  73h ; s
.data$r:00012295                 db  74h ; t
.data$r:00012296                 db  64h ; d
.data$r:00012297                 db  40h ; @
.data$r:00012298                 db  40h ; @
.data$r:00012299                 db    0
.data$r:0001229A                 align 4
.data$r:0001229A _data$r         ends
.data$r:0001229A
.rdata$r:0001229C ; ===========================================================================
.rdata$r:0001229C
.rdata$r:0001229C ; Segment type: Pure data
.rdata$r:0001229C ; Segment permissions: Read
.rdata$r:0001229C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001229C                 assume cs:_rdata$r
.rdata$r:0001229C                 ;org 1229Ch
.rdata$r:0001229C ; COMDAT (pick any)
.rdata$r:0001229C                 public ??_R3_Facet_base@std@@8
.rdata$r:0001229C ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001229C ??_R3_Facet_base@std@@8 db    0         ; DATA XREF: .rdata$r:00012278o
.rdata$r:0001229C                                         ; .rdata$r:000122CCo
.rdata$r:0001229D                 db    0
.rdata$r:0001229E                 db    0
.rdata$r:0001229F                 db    0
.rdata$r:000122A0                 db    0
.rdata$r:000122A1                 db    0
.rdata$r:000122A2                 db    0
.rdata$r:000122A3                 db    0
.rdata$r:000122A4                 db    1
.rdata$r:000122A5                 db    0
.rdata$r:000122A6                 db    0
.rdata$r:000122A7                 db    0
.rdata$r:000122A8                 dd offset ??_R2_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:000122A8 _rdata$r        ends
.rdata$r:000122A8
.rdata$r:000122AC ; ===========================================================================
.rdata$r:000122AC
.rdata$r:000122AC ; Segment type: Pure data
.rdata$r:000122AC ; Segment permissions: Read
.rdata$r:000122AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000122AC                 assume cs:_rdata$r
.rdata$r:000122AC                 ;org 122ACh
.rdata$r:000122AC ; COMDAT (pick any)
.rdata$r:000122AC                 public ??_R2_Facet_base@std@@8
.rdata$r:000122AC ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:000122AC ??_R2_Facet_base@std@@8 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:000122AC                                         ; DATA XREF: .rdata$r:000122A8o
.rdata$r:000122AC                                         ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000122B0                 db    0
.rdata$r:000122B1                 align 4
.rdata$r:000122B1 _rdata$r        ends
.rdata$r:000122B1
.rdata$r:000122B4 ; ===========================================================================
.rdata$r:000122B4
.rdata$r:000122B4 ; Segment type: Pure data
.rdata$r:000122B4 ; Segment permissions: Read
.rdata$r:000122B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000122B4                 assume cs:_rdata$r
.rdata$r:000122B4                 ;org 122B4h
.rdata$r:000122B4 ; COMDAT (pick any)
.rdata$r:000122B4                 public ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:000122B4 ; std::_Facet_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000122B4 ??_R1A@?0A@EA@_Facet_base@std@@8 dd offset ??_R0?AV_Facet_base@std@@@8
.rdata$r:000122B4                                         ; DATA XREF: .rdata$r:std::_Facet_base::`RTTI Base Class Array'o
.rdata$r:000122B4                                         ; .rdata$r:00012320o ...
.rdata$r:000122B4                                         ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:000122B8                 align 10h
.rdata$r:000122C0                 db 0FFh
.rdata$r:000122C1                 db 0FFh
.rdata$r:000122C2                 db 0FFh
.rdata$r:000122C3                 db 0FFh
.rdata$r:000122C4                 db    0
.rdata$r:000122C5                 db    0
.rdata$r:000122C6                 db    0
.rdata$r:000122C7                 db    0
.rdata$r:000122C8                 db  40h ; @
.rdata$r:000122C9                 db    0
.rdata$r:000122CA                 db    0
.rdata$r:000122CB                 db    0
.rdata$r:000122CC                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:000122CC _rdata$r        ends
.rdata$r:000122CC
.rdata$r:000122D0 ; ===========================================================================
.rdata$r:000122D0
.rdata$r:000122D0 ; Segment type: Pure data
.rdata$r:000122D0 ; Segment permissions: Read
.rdata$r:000122D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000122D0                 assume cs:_rdata$r
.rdata$r:000122D0                 ;org 122D0h
.rdata$r:000122D0 ; COMDAT (pick any)
.rdata$r:000122D0                 public ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:000122D0 ; std::locale::facet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000122D0 ??_R1A@?0A@EA@facet@locale@std@@8 dd offset ??_R0?AVfacet@locale@std@@@8
.rdata$r:000122D0                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Array'o
.rdata$r:000122D0                                         ; .rdata$r:00012384o ...
.rdata$r:000122D0                                         ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:000122D4                 db    1
.rdata$r:000122D5                 db    0
.rdata$r:000122D6                 db    0
.rdata$r:000122D7                 db    0
.rdata$r:000122D8                 db    0
.rdata$r:000122D9                 db    0
.rdata$r:000122DA                 db    0
.rdata$r:000122DB                 db    0
.rdata$r:000122DC                 db 0FFh
.rdata$r:000122DD                 db 0FFh
.rdata$r:000122DE                 db 0FFh
.rdata$r:000122DF                 db 0FFh
.rdata$r:000122E0                 db    0
.rdata$r:000122E1                 db    0
.rdata$r:000122E2                 db    0
.rdata$r:000122E3                 db    0
.rdata$r:000122E4                 db  40h ; @
.rdata$r:000122E5                 db    0
.rdata$r:000122E6                 db    0
.rdata$r:000122E7                 db    0
.rdata$r:000122E8                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:000122E8 _rdata$r        ends
.rdata$r:000122E8
.data$r:000122EC ; ===========================================================================
.data$r:000122EC
.data$r:000122EC ; Segment type: Pure data
.data$r:000122EC ; Segment permissions: Read/Write
.data$r:000122EC _data$r         segment dword public 'DATA' use32
.data$r:000122EC                 assume cs:_data$r
.data$r:000122EC                 ;org 122ECh
.data$r:000122EC ; COMDAT (pick any)
.data$r:000122EC                 public ??_R0?AVfacet@locale@std@@@8
.data$r:000122EC ; class std::locale::facet `RTTI Type Descriptor'
.data$r:000122EC ??_R0?AVfacet@locale@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000122EC                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000122EC                                         ; .rdata$r:00012334o
.data$r:000122EC                                         ; const type_info::`vftable'
.data$r:000122F0                 db    0
.data$r:000122F1                 db    0
.data$r:000122F2                 db    0
.data$r:000122F3                 db    0
.data$r:000122F4                 db  2Eh ; .
.data$r:000122F5                 db  3Fh ; ?
.data$r:000122F6                 db  41h ; A
.data$r:000122F7                 db  56h ; V
.data$r:000122F8                 db  66h ; f
.data$r:000122F9                 db  61h ; a
.data$r:000122FA                 db  63h ; c
.data$r:000122FB                 db  65h ; e
.data$r:000122FC                 db  74h ; t
.data$r:000122FD                 db  40h ; @
.data$r:000122FE                 db  6Ch ; l
.data$r:000122FF                 db  6Fh ; o
.data$r:00012300                 db  63h ; c
.data$r:00012301                 db  61h ; a
.data$r:00012302                 db  6Ch ; l
.data$r:00012303                 db  65h ; e
.data$r:00012304                 db  40h ; @
.data$r:00012305                 db  73h ; s
.data$r:00012306                 db  74h ; t
.data$r:00012307                 db  64h ; d
.data$r:00012308                 db  40h ; @
.data$r:00012309                 db  40h ; @
.data$r:0001230A                 db    0
.data$r:0001230B                 align 4
.data$r:0001230B _data$r         ends
.data$r:0001230B
.rdata$r:0001230C ; ===========================================================================
.rdata$r:0001230C
.rdata$r:0001230C ; Segment type: Pure data
.rdata$r:0001230C ; Segment permissions: Read
.rdata$r:0001230C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001230C                 assume cs:_rdata$r
.rdata$r:0001230C                 ;org 1230Ch
.rdata$r:0001230C ; COMDAT (pick any)
.rdata$r:0001230C                 public ??_R3facet@locale@std@@8
.rdata$r:0001230C ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001230C ??_R3facet@locale@std@@8 db    0        ; DATA XREF: .rdata$r:000122E8o
.rdata$r:0001230C                                         ; .rdata$r:00012338o
.rdata$r:0001230D                 db    0
.rdata$r:0001230E                 db    0
.rdata$r:0001230F                 db    0
.rdata$r:00012310                 db    0
.rdata$r:00012311                 db    0
.rdata$r:00012312                 db    0
.rdata$r:00012313                 db    0
.rdata$r:00012314                 db    2
.rdata$r:00012315                 db    0
.rdata$r:00012316                 db    0
.rdata$r:00012317                 db    0
.rdata$r:00012318                 dd offset ??_R2facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:00012318 _rdata$r        ends
.rdata$r:00012318
.rdata$r:0001231C ; ===========================================================================
.rdata$r:0001231C
.rdata$r:0001231C ; Segment type: Pure data
.rdata$r:0001231C ; Segment permissions: Read
.rdata$r:0001231C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001231C                 assume cs:_rdata$r
.rdata$r:0001231C                 ;org 1231Ch
.rdata$r:0001231C ; COMDAT (pick any)
.rdata$r:0001231C                 public ??_R2facet@locale@std@@8
.rdata$r:0001231C ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0001231C ??_R2facet@locale@std@@8 dd offset ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0001231C                                         ; DATA XREF: .rdata$r:00012318o
.rdata$r:0001231C                                         ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012320                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012324                 db    0
.rdata$r:00012325                 align 4
.rdata$r:00012325 _rdata$r        ends
.rdata$r:00012325
.rdata$r:00012328 ; ===========================================================================
.rdata$r:00012328
.rdata$r:00012328 ; Segment type: Pure data
.rdata$r:00012328 ; Segment permissions: Read
.rdata$r:00012328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012328                 assume cs:_rdata$r
.rdata$r:00012328                 ;org 12328h
.rdata$r:00012328 ; COMDAT (pick any)
.rdata$r:00012328                 public ??_R4facet@locale@std@@6B@
.rdata$r:00012328 ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata$r:00012328 ??_R4facet@locale@std@@6B@ db    0      ; DATA XREF: .rdata:000111ACo
.rdata$r:00012329                 db    0
.rdata$r:0001232A                 db    0
.rdata$r:0001232B                 db    0
.rdata$r:0001232C                 db    0
.rdata$r:0001232D                 db    0
.rdata$r:0001232E                 db    0
.rdata$r:0001232F                 db    0
.rdata$r:00012330                 db    0
.rdata$r:00012331                 db    0
.rdata$r:00012332                 db    0
.rdata$r:00012333                 db    0
.rdata$r:00012334                 dd offset ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:00012338                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012338 _rdata$r        ends
.rdata$r:00012338
.rdata$r:0001233C ; ===========================================================================
.rdata$r:0001233C
.rdata$r:0001233C ; Segment type: Pure data
.rdata$r:0001233C ; Segment permissions: Read
.rdata$r:0001233C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001233C                 assume cs:_rdata$r
.rdata$r:0001233C                 ;org 1233Ch
.rdata$r:0001233C ; COMDAT (pick any)
.rdata$r:0001233C                 public ??_R4ctype_base@std@@6B@
.rdata$r:0001233C ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata$r:0001233C ??_R4ctype_base@std@@6B@ db    0        ; DATA XREF: .rdata:00011298o
.rdata$r:0001233D                 db    0
.rdata$r:0001233E                 db    0
.rdata$r:0001233F                 db    0
.rdata$r:00012340                 db    0
.rdata$r:00012341                 db    0
.rdata$r:00012342                 db    0
.rdata$r:00012343                 db    0
.rdata$r:00012344                 db    0
.rdata$r:00012345                 db    0
.rdata$r:00012346                 db    0
.rdata$r:00012347                 db    0
.rdata$r:00012348                 dd offset ??_R0?AUctype_base@std@@@8 ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0001234C                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001234C _rdata$r        ends
.rdata$r:0001234C
.data$r:00012350 ; ===========================================================================
.data$r:00012350
.data$r:00012350 ; Segment type: Pure data
.data$r:00012350 ; Segment permissions: Read/Write
.data$r:00012350 _data$r         segment dword public 'DATA' use32
.data$r:00012350                 assume cs:_data$r
.data$r:00012350                 ;org 12350h
.data$r:00012350 ; COMDAT (pick any)
.data$r:00012350                 public ??_R0?AUctype_base@std@@@8
.data$r:00012350 ; struct std::ctype_base `RTTI Type Descriptor'
.data$r:00012350 ??_R0?AUctype_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00012350                                         ; DATA XREF: .rdata$r:00012348o
.data$r:00012350                                         ; .rdata$r:std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00012350                                         ; const type_info::`vftable'
.data$r:00012354                 align 8
.data$r:00012358 a_?auctype_base db '.?AUctype_base@std@@',0
.data$r:0001236D                 align 10h
.data$r:0001236D _data$r         ends
.data$r:0001236D
.rdata$r:00012370 ; ===========================================================================
.rdata$r:00012370
.rdata$r:00012370 ; Segment type: Pure data
.rdata$r:00012370 ; Segment permissions: Read
.rdata$r:00012370 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012370                 assume cs:_rdata$r
.rdata$r:00012370                 ;org 12370h
.rdata$r:00012370 ; COMDAT (pick any)
.rdata$r:00012370                 public ??_R3ctype_base@std@@8
.rdata$r:00012370 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012370 ??_R3ctype_base@std@@8 db    0          ; DATA XREF: .rdata$r:0001234Co
.rdata$r:00012370                                         ; .rdata$r:000123A8o
.rdata$r:00012371                 db    0
.rdata$r:00012372                 db    0
.rdata$r:00012373                 db    0
.rdata$r:00012374                 db    0
.rdata$r:00012375                 db    0
.rdata$r:00012376                 db    0
.rdata$r:00012377                 db    0
.rdata$r:00012378                 db    3
.rdata$r:00012379                 db    0
.rdata$r:0001237A                 db    0
.rdata$r:0001237B                 db    0
.rdata$r:0001237C                 dd offset ??_R2ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0001237C _rdata$r        ends
.rdata$r:0001237C
.rdata$r:00012380 ; ===========================================================================
.rdata$r:00012380
.rdata$r:00012380 ; Segment type: Pure data
.rdata$r:00012380 ; Segment permissions: Read
.rdata$r:00012380 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012380                 assume cs:_rdata$r
.rdata$r:00012380                 ;org 12380h
.rdata$r:00012380 ; COMDAT (pick any)
.rdata$r:00012380                 public ??_R2ctype_base@std@@8
.rdata$r:00012380 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:00012380 ??_R2ctype_base@std@@8 dd offset ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:00012380                                         ; DATA XREF: .rdata$r:0001237Co
.rdata$r:00012380                                         ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012384                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012388                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0001238C                 db    0
.rdata$r:0001238D                 align 10h
.rdata$r:0001238D _rdata$r        ends
.rdata$r:0001238D
.rdata$r:00012390 ; ===========================================================================
.rdata$r:00012390
.rdata$r:00012390 ; Segment type: Pure data
.rdata$r:00012390 ; Segment permissions: Read
.rdata$r:00012390 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012390                 assume cs:_rdata$r
.rdata$r:00012390                 ;org 12390h
.rdata$r:00012390 ; COMDAT (pick any)
.rdata$r:00012390                 public ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:00012390 ; std::ctype_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00012390 ??_R1A@?0A@EA@ctype_base@std@@8 dd offset ??_R0?AUctype_base@std@@@8
.rdata$r:00012390                                         ; DATA XREF: .rdata$r:std::ctype_base::`RTTI Base Class Array'o
.rdata$r:00012390                                         ; .rdata$r:000123F4o
.rdata$r:00012390                                         ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:00012394                 db    2
.rdata$r:00012395                 db    0
.rdata$r:00012396                 db    0
.rdata$r:00012397                 db    0
.rdata$r:00012398                 db    0
.rdata$r:00012399                 db    0
.rdata$r:0001239A                 db    0
.rdata$r:0001239B                 db    0
.rdata$r:0001239C                 db 0FFh
.rdata$r:0001239D                 db 0FFh
.rdata$r:0001239E                 db 0FFh
.rdata$r:0001239F                 db 0FFh
.rdata$r:000123A0                 db    0
.rdata$r:000123A1                 db    0
.rdata$r:000123A2                 db    0
.rdata$r:000123A3                 db    0
.rdata$r:000123A4                 db  40h ; @
.rdata$r:000123A5                 db    0
.rdata$r:000123A6                 db    0
.rdata$r:000123A7                 db    0
.rdata$r:000123A8                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:000123A8 _rdata$r        ends
.rdata$r:000123A8
.rdata$r:000123AC ; ===========================================================================
.rdata$r:000123AC
.rdata$r:000123AC ; Segment type: Pure data
.rdata$r:000123AC ; Segment permissions: Read
.rdata$r:000123AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000123AC                 assume cs:_rdata$r
.rdata$r:000123AC                 ;org 123ACh
.rdata$r:000123AC ; COMDAT (pick any)
.rdata$r:000123AC                 public ??_R4?$ctype@_W@std@@6B@
.rdata$r:000123AC ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata$r:000123AC ??_R4?$ctype@_W@std@@6B@ db    0        ; DATA XREF: .rdata:000112A8o
.rdata$r:000123AD                 db    0
.rdata$r:000123AE                 db    0
.rdata$r:000123AF                 db    0
.rdata$r:000123B0                 db    0
.rdata$r:000123B1                 db    0
.rdata$r:000123B2                 db    0
.rdata$r:000123B3                 db    0
.rdata$r:000123B4                 db    0
.rdata$r:000123B5                 db    0
.rdata$r:000123B6                 db    0
.rdata$r:000123B7                 db    0
.rdata$r:000123B8                 dd offset ??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:000123BC                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:000123BC _rdata$r        ends
.rdata$r:000123BC
.data$r:000123C0 ; ===========================================================================
.data$r:000123C0
.data$r:000123C0 ; Segment type: Pure data
.data$r:000123C0 ; Segment permissions: Read/Write
.data$r:000123C0 _data$r         segment dword public 'DATA' use32
.data$r:000123C0                 assume cs:_data$r
.data$r:000123C0                 ;org 123C0h
.data$r:000123C0 ; COMDAT (pick any)
.data$r:000123C0                 public ??_R0?AV?$ctype@_W@std@@@8
.data$r:000123C0 ; class std::ctype<wchar_t> `RTTI Type Descriptor'
.data$r:000123C0 ??_R0?AV?$ctype@_W@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000123C0                                         ; DATA XREF: .rdata$r:000123B8o
.data$r:000123C0                                         ; .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000123C0                                         ; const type_info::`vftable'
.data$r:000123C4                 align 8
.data$r:000123C8 a_?av?Ctype@_w@ db '.?AV?$ctype@_W@std@@',0
.data$r:000123DD                 align 10h
.data$r:000123DD _data$r         ends
.data$r:000123DD
.rdata$r:000123E0 ; ===========================================================================
.rdata$r:000123E0
.rdata$r:000123E0 ; Segment type: Pure data
.rdata$r:000123E0 ; Segment permissions: Read
.rdata$r:000123E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000123E0                 assume cs:_rdata$r
.rdata$r:000123E0                 ;org 123E0h
.rdata$r:000123E0 ; COMDAT (pick any)
.rdata$r:000123E0                 public ??_R3?$ctype@_W@std@@8
.rdata$r:000123E0 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:000123E0 ??_R3?$ctype@_W@std@@8 db    0          ; DATA XREF: .rdata$r:000123BCo
.rdata$r:000123E0                                         ; .rdata$r:0001241Co
.rdata$r:000123E1                 db    0
.rdata$r:000123E2                 db    0
.rdata$r:000123E3                 db    0
.rdata$r:000123E4                 db    0
.rdata$r:000123E5                 db    0
.rdata$r:000123E6                 db    0
.rdata$r:000123E7                 db    0
.rdata$r:000123E8                 db    4
.rdata$r:000123E9                 db    0
.rdata$r:000123EA                 db    0
.rdata$r:000123EB                 db    0
.rdata$r:000123EC                 dd offset ??_R2?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:000123EC _rdata$r        ends
.rdata$r:000123EC
.rdata$r:000123F0 ; ===========================================================================
.rdata$r:000123F0
.rdata$r:000123F0 ; Segment type: Pure data
.rdata$r:000123F0 ; Segment permissions: Read
.rdata$r:000123F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000123F0                 assume cs:_rdata$r
.rdata$r:000123F0                 ;org 123F0h
.rdata$r:000123F0 ; COMDAT (pick any)
.rdata$r:000123F0                 public ??_R2?$ctype@_W@std@@8
.rdata$r:000123F0 ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:000123F0 ??_R2?$ctype@_W@std@@8 dd offset ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:000123F0                                         ; DATA XREF: .rdata$r:000123ECo
.rdata$r:000123F0                                         ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000123F4                 dd offset ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000123F8                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000123FC                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012400                 db    0
.rdata$r:00012401                 align 4
.rdata$r:00012401 _rdata$r        ends
.rdata$r:00012401
.rdata$r:00012404 ; ===========================================================================
.rdata$r:00012404
.rdata$r:00012404 ; Segment type: Pure data
.rdata$r:00012404 ; Segment permissions: Read
.rdata$r:00012404 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012404                 assume cs:_rdata$r
.rdata$r:00012404                 ;org 12404h
.rdata$r:00012404 ; COMDAT (pick any)
.rdata$r:00012404                 public ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:00012404 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00012404 ??_R1A@?0A@EA@?$ctype@_W@std@@8 dd offset ??_R0?AV?$ctype@_W@std@@@8
.rdata$r:00012404                                         ; DATA XREF: .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Array'o
.rdata$r:00012404                                         ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:00012408                 db    3
.rdata$r:00012409                 db    0
.rdata$r:0001240A                 db    0
.rdata$r:0001240B                 db    0
.rdata$r:0001240C                 db    0
.rdata$r:0001240D                 db    0
.rdata$r:0001240E                 db    0
.rdata$r:0001240F                 db    0
.rdata$r:00012410                 db 0FFh
.rdata$r:00012411                 db 0FFh
.rdata$r:00012412                 db 0FFh
.rdata$r:00012413                 db 0FFh
.rdata$r:00012414                 db    0
.rdata$r:00012415                 db    0
.rdata$r:00012416                 db    0
.rdata$r:00012417                 db    0
.rdata$r:00012418                 db  40h ; @
.rdata$r:00012419                 db    0
.rdata$r:0001241A                 db    0
.rdata$r:0001241B                 db    0
.rdata$r:0001241C                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001241C _rdata$r        ends
.rdata$r:0001241C
.rdata$r:00012420 ; ===========================================================================
.rdata$r:00012420
.rdata$r:00012420 ; Segment type: Pure data
.rdata$r:00012420 ; Segment permissions: Read
.rdata$r:00012420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012420                 assume cs:_rdata$r
.rdata$r:00012420                 ;org 12420h
.rdata$r:00012420 ; COMDAT (pick any)
.rdata$r:00012420                 public ??_R4error_category@std@@6B@
.rdata$r:00012420 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00012420 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:000112E8o
.rdata$r:00012421                 db    0
.rdata$r:00012422                 db    0
.rdata$r:00012423                 db    0
.rdata$r:00012424                 db    0
.rdata$r:00012425                 db    0
.rdata$r:00012426                 db    0
.rdata$r:00012427                 db    0
.rdata$r:00012428                 db    0
.rdata$r:00012429                 db    0
.rdata$r:0001242A                 db    0
.rdata$r:0001242B                 db    0
.rdata$r:0001242C                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:00012430                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012430 _rdata$r        ends
.rdata$r:00012430
.data$r:00012434 ; ===========================================================================
.data$r:00012434
.data$r:00012434 ; Segment type: Pure data
.data$r:00012434 ; Segment permissions: Read/Write
.data$r:00012434 _data$r         segment dword public 'DATA' use32
.data$r:00012434                 assume cs:_data$r
.data$r:00012434                 ;org 12434h
.data$r:00012434 ; COMDAT (pick any)
.data$r:00012434                 public ??_R0?AVerror_category@std@@@8
.data$r:00012434 ; class std::error_category `RTTI Type Descriptor'
.data$r:00012434 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00012434                                         ; DATA XREF: .rdata$r:0001242Co
.data$r:00012434                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00012434                                         ; const type_info::`vftable'
.data$r:00012438                 db    0
.data$r:00012439                 db    0
.data$r:0001243A                 db    0
.data$r:0001243B                 db    0
.data$r:0001243C                 db  2Eh ; .
.data$r:0001243D                 db  3Fh ; ?
.data$r:0001243E                 db  41h ; A
.data$r:0001243F                 db  56h ; V
.data$r:00012440                 db  65h ; e
.data$r:00012441                 db  72h ; r
.data$r:00012442                 db  72h ; r
.data$r:00012443                 db  6Fh ; o
.data$r:00012444                 db  72h ; r
.data$r:00012445                 db  5Fh ; _
.data$r:00012446                 db  63h ; c
.data$r:00012447                 db  61h ; a
.data$r:00012448                 db  74h ; t
.data$r:00012449                 db  65h ; e
.data$r:0001244A                 db  67h ; g
.data$r:0001244B                 db  6Fh ; o
.data$r:0001244C                 db  72h ; r
.data$r:0001244D                 db  79h ; y
.data$r:0001244E                 db  40h ; @
.data$r:0001244F                 db  73h ; s
.data$r:00012450                 db  74h ; t
.data$r:00012451                 db  64h ; d
.data$r:00012452                 db  40h ; @
.data$r:00012453                 db  40h ; @
.data$r:00012454                 db    0
.data$r:00012455                 align 4
.data$r:00012455 _data$r         ends
.data$r:00012455
.rdata$r:00012458 ; ===========================================================================
.rdata$r:00012458
.rdata$r:00012458 ; Segment type: Pure data
.rdata$r:00012458 ; Segment permissions: Read
.rdata$r:00012458 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012458                 assume cs:_rdata$r
.rdata$r:00012458                 ;org 12458h
.rdata$r:00012458 ; COMDAT (pick any)
.rdata$r:00012458                 public ??_R3error_category@std@@8
.rdata$r:00012458 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012458 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:00012430o
.rdata$r:00012458                                         ; .rdata$r:00012488o
.rdata$r:00012459                 db    0
.rdata$r:0001245A                 db    0
.rdata$r:0001245B                 db    0
.rdata$r:0001245C                 db    0
.rdata$r:0001245D                 db    0
.rdata$r:0001245E                 db    0
.rdata$r:0001245F                 db    0
.rdata$r:00012460                 db    1
.rdata$r:00012461                 db    0
.rdata$r:00012462                 db    0
.rdata$r:00012463                 db    0
.rdata$r:00012464                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00012464 _rdata$r        ends
.rdata$r:00012464
.rdata$r:00012468 ; ===========================================================================
.rdata$r:00012468
.rdata$r:00012468 ; Segment type: Pure data
.rdata$r:00012468 ; Segment permissions: Read
.rdata$r:00012468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012468                 assume cs:_rdata$r
.rdata$r:00012468                 ;org 12468h
.rdata$r:00012468 ; COMDAT (pick any)
.rdata$r:00012468                 public ??_R2error_category@std@@8
.rdata$r:00012468 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00012468 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00012468                                         ; DATA XREF: .rdata$r:00012464o
.rdata$r:00012468                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0001246C                 db    0
.rdata$r:0001246D                 align 10h
.rdata$r:0001246D _rdata$r        ends
.rdata$r:0001246D
.rdata$r:00012470 ; ===========================================================================
.rdata$r:00012470
.rdata$r:00012470 ; Segment type: Pure data
.rdata$r:00012470 ; Segment permissions: Read
.rdata$r:00012470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012470                 assume cs:_rdata$r
.rdata$r:00012470                 ;org 12470h
.rdata$r:00012470 ; COMDAT (pick any)
.rdata$r:00012470                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00012470 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00012470 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00012470                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00012470                                         ; .rdata$r:000124E0o ...
.rdata$r:00012470                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:00012474                 db    0
.rdata$r:00012475                 db    0
.rdata$r:00012476                 db    0
.rdata$r:00012477                 db    0
.rdata$r:00012478                 db    0
.rdata$r:00012479                 db    0
.rdata$r:0001247A                 db    0
.rdata$r:0001247B                 db    0
.rdata$r:0001247C                 db 0FFh
.rdata$r:0001247D                 db 0FFh
.rdata$r:0001247E                 db 0FFh
.rdata$r:0001247F                 db 0FFh
.rdata$r:00012480                 db    0
.rdata$r:00012481                 db    0
.rdata$r:00012482                 db    0
.rdata$r:00012483                 db    0
.rdata$r:00012484                 db  40h ; @
.rdata$r:00012485                 db    0
.rdata$r:00012486                 db    0
.rdata$r:00012487                 db    0
.rdata$r:00012488                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012488 _rdata$r        ends
.rdata$r:00012488
.rdata$r:0001248C ; ===========================================================================
.rdata$r:0001248C
.rdata$r:0001248C ; Segment type: Pure data
.rdata$r:0001248C ; Segment permissions: Read
.rdata$r:0001248C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0001248C                 assume cs:_rdata$r
.rdata$r:0001248C                 ;org 1248Ch
.rdata$r:0001248C ; COMDAT (pick any)
.rdata$r:0001248C                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0001248C ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0001248C ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0001248C                                         ; DATA XREF: .rdata:00011304o
.rdata$r:0001248D                 db    0
.rdata$r:0001248E                 db    0
.rdata$r:0001248F                 db    0
.rdata$r:00012490                 db    0
.rdata$r:00012491                 db    0
.rdata$r:00012492                 db    0
.rdata$r:00012493                 db    0
.rdata$r:00012494                 db    0
.rdata$r:00012495                 db    0
.rdata$r:00012496                 db    0
.rdata$r:00012497                 db    0
.rdata$r:00012498                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0001249C                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001249C _rdata$r        ends
.rdata$r:0001249C
.data$r:000124A0 ; ===========================================================================
.data$r:000124A0
.data$r:000124A0 ; Segment type: Pure data
.data$r:000124A0 ; Segment permissions: Read/Write
.data$r:000124A0 _data$r         segment dword public 'DATA' use32
.data$r:000124A0                 assume cs:_data$r
.data$r:000124A0                 ;org 124A0h
.data$r:000124A0 ; COMDAT (pick any)
.data$r:000124A0                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:000124A0 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:000124A0 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000124A0                                         ; DATA XREF: .rdata$r:00012498o
.data$r:000124A0                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000124A0                                         ; const type_info::`vftable'
.data$r:000124A4                 align 8
.data$r:000124A8 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:000124CA                 align 4
.data$r:000124CA _data$r         ends
.data$r:000124CA
.rdata$r:000124CC ; ===========================================================================
.rdata$r:000124CC
.rdata$r:000124CC ; Segment type: Pure data
.rdata$r:000124CC ; Segment permissions: Read
.rdata$r:000124CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000124CC                 assume cs:_rdata$r
.rdata$r:000124CC                 ;org 124CCh
.rdata$r:000124CC ; COMDAT (pick any)
.rdata$r:000124CC                 public ??_R3_Generic_error_category@std@@8
.rdata$r:000124CC ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000124CC ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:000124CC                                         ; DATA XREF: .rdata$r:0001249Co
.rdata$r:000124CC                                         ; .rdata$r:00012500o
.rdata$r:000124CD                 db    0
.rdata$r:000124CE                 db    0
.rdata$r:000124CF                 db    0
.rdata$r:000124D0                 db    0
.rdata$r:000124D1                 db    0
.rdata$r:000124D2                 db    0
.rdata$r:000124D3                 db    0
.rdata$r:000124D4                 db    2
.rdata$r:000124D5                 db    0
.rdata$r:000124D6                 db    0
.rdata$r:000124D7                 db    0
.rdata$r:000124D8                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000124D8 _rdata$r        ends
.rdata$r:000124D8
.rdata$r:000124DC ; ===========================================================================
.rdata$r:000124DC
.rdata$r:000124DC ; Segment type: Pure data
.rdata$r:000124DC ; Segment permissions: Read
.rdata$r:000124DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000124DC                 assume cs:_rdata$r
.rdata$r:000124DC                 ;org 124DCh
.rdata$r:000124DC ; COMDAT (pick any)
.rdata$r:000124DC                 public ??_R2_Generic_error_category@std@@8
.rdata$r:000124DC ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000124DC ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000124DC                                         ; DATA XREF: .rdata$r:000124D8o
.rdata$r:000124DC                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000124E0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000124E4                 db    0
.rdata$r:000124E5                 align 4
.rdata$r:000124E5 _rdata$r        ends
.rdata$r:000124E5
.rdata$r:000124E8 ; ===========================================================================
.rdata$r:000124E8
.rdata$r:000124E8 ; Segment type: Pure data
.rdata$r:000124E8 ; Segment permissions: Read
.rdata$r:000124E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000124E8                 assume cs:_rdata$r
.rdata$r:000124E8                 ;org 124E8h
.rdata$r:000124E8 ; COMDAT (pick any)
.rdata$r:000124E8                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000124E8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000124E8 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:000124E8                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:000124E8                                         ; .rdata$r:00012558o ...
.rdata$r:000124E8                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:000124EC                 db    1
.rdata$r:000124ED                 db    0
.rdata$r:000124EE                 db    0
.rdata$r:000124EF                 db    0
.rdata$r:000124F0                 db    0
.rdata$r:000124F1                 db    0
.rdata$r:000124F2                 db    0
.rdata$r:000124F3                 db    0
.rdata$r:000124F4                 db 0FFh
.rdata$r:000124F5                 db 0FFh
.rdata$r:000124F6                 db 0FFh
.rdata$r:000124F7                 db 0FFh
.rdata$r:000124F8                 db    0
.rdata$r:000124F9                 db    0
.rdata$r:000124FA                 db    0
.rdata$r:000124FB                 db    0
.rdata$r:000124FC                 db  40h ; @
.rdata$r:000124FD                 db    0
.rdata$r:000124FE                 db    0
.rdata$r:000124FF                 db    0
.rdata$r:00012500                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012500 _rdata$r        ends
.rdata$r:00012500
.rdata$r:00012504 ; ===========================================================================
.rdata$r:00012504
.rdata$r:00012504 ; Segment type: Pure data
.rdata$r:00012504 ; Segment permissions: Read
.rdata$r:00012504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012504                 assume cs:_rdata$r
.rdata$r:00012504                 ;org 12504h
.rdata$r:00012504 ; COMDAT (pick any)
.rdata$r:00012504                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:00012504 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:00012504 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:00012504                                         ; DATA XREF: .rdata:00011338o
.rdata$r:00012505                 db    0
.rdata$r:00012506                 db    0
.rdata$r:00012507                 db    0
.rdata$r:00012508                 db    0
.rdata$r:00012509                 db    0
.rdata$r:0001250A                 db    0
.rdata$r:0001250B                 db    0
.rdata$r:0001250C                 db    0
.rdata$r:0001250D                 db    0
.rdata$r:0001250E                 db    0
.rdata$r:0001250F                 db    0
.rdata$r:00012510                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00012514                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012514 _rdata$r        ends
.rdata$r:00012514
.data$r:00012518 ; ===========================================================================
.data$r:00012518
.data$r:00012518 ; Segment type: Pure data
.data$r:00012518 ; Segment permissions: Read/Write
.data$r:00012518 _data$r         segment dword public 'DATA' use32
.data$r:00012518                 assume cs:_data$r
.data$r:00012518                 ;org 12518h
.data$r:00012518 ; COMDAT (pick any)
.data$r:00012518                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00012518 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00012518 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00012518                                         ; DATA XREF: .rdata$r:00012510o
.data$r:00012518                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00012518                                         ; const type_info::`vftable'
.data$r:0001251C                 align 10h
.data$r:00012520 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:00012543                 align 4
.data$r:00012543 _data$r         ends
.data$r:00012543
.rdata$r:00012544 ; ===========================================================================
.rdata$r:00012544
.rdata$r:00012544 ; Segment type: Pure data
.rdata$r:00012544 ; Segment permissions: Read
.rdata$r:00012544 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012544                 assume cs:_rdata$r
.rdata$r:00012544                 ;org 12544h
.rdata$r:00012544 ; COMDAT (pick any)
.rdata$r:00012544                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00012544 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012544 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00012544                                         ; DATA XREF: .rdata$r:00012514o
.rdata$r:00012544                                         ; .rdata$r:0001257Co
.rdata$r:00012545                 db    0
.rdata$r:00012546                 db    0
.rdata$r:00012547                 db    0
.rdata$r:00012548                 db    0
.rdata$r:00012549                 db    0
.rdata$r:0001254A                 db    0
.rdata$r:0001254B                 db    0
.rdata$r:0001254C                 db    3
.rdata$r:0001254D                 db    0
.rdata$r:0001254E                 db    0
.rdata$r:0001254F                 db    0
.rdata$r:00012550                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00012550 _rdata$r        ends
.rdata$r:00012550
.rdata$r:00012554 ; ===========================================================================
.rdata$r:00012554
.rdata$r:00012554 ; Segment type: Pure data
.rdata$r:00012554 ; Segment permissions: Read
.rdata$r:00012554 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012554                 assume cs:_rdata$r
.rdata$r:00012554                 ;org 12554h
.rdata$r:00012554 ; COMDAT (pick any)
.rdata$r:00012554                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00012554 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00012554 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00012554                                         ; DATA XREF: .rdata$r:00012550o
.rdata$r:00012554                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012558                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0001255C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00012560                 db    0
.rdata$r:00012561                 align 4
.rdata$r:00012561 _rdata$r        ends
.rdata$r:00012561
.rdata$r:00012564 ; ===========================================================================
.rdata$r:00012564
.rdata$r:00012564 ; Segment type: Pure data
.rdata$r:00012564 ; Segment permissions: Read
.rdata$r:00012564 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012564                 assume cs:_rdata$r
.rdata$r:00012564                 ;org 12564h
.rdata$r:00012564 ; COMDAT (pick any)
.rdata$r:00012564                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00012564 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00012564 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00012564                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00012564                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00012568                 db    2
.rdata$r:00012569                 db    0
.rdata$r:0001256A                 db    0
.rdata$r:0001256B                 db    0
.rdata$r:0001256C                 db    0
.rdata$r:0001256D                 db    0
.rdata$r:0001256E                 db    0
.rdata$r:0001256F                 db    0
.rdata$r:00012570                 db 0FFh
.rdata$r:00012571                 db 0FFh
.rdata$r:00012572                 db 0FFh
.rdata$r:00012573                 db 0FFh
.rdata$r:00012574                 db    0
.rdata$r:00012575                 db    0
.rdata$r:00012576                 db    0
.rdata$r:00012577                 db    0
.rdata$r:00012578                 db  40h ; @
.rdata$r:00012579                 db    0
.rdata$r:0001257A                 db    0
.rdata$r:0001257B                 db    0
.rdata$r:0001257C                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0001257C _rdata$r        ends
.rdata$r:0001257C
.rdata$r:00012580 ; ===========================================================================
.rdata$r:00012580
.rdata$r:00012580 ; Segment type: Pure data
.rdata$r:00012580 ; Segment permissions: Read
.rdata$r:00012580 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00012580                 assume cs:_rdata$r
.rdata$r:00012580                 ;org 12580h
.rdata$r:00012580 ; COMDAT (pick any)
.rdata$r:00012580                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00012580 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00012580 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00011378o
.rdata$r:00012581                 db    0
.rdata$r:00012582                 db    0
.rdata$r:00012583                 db    0
.rdata$r:00012584                 db    0
.rdata$r:00012585                 db    0
.rdata$r:00012586                 db    0
.rdata$r:00012587                 db    0
.rdata$r:00012588                 db    0
.rdata$r:00012589                 db    0
.rdata$r:0001258A                 db    0
.rdata$r:0001258B                 db    0
.rdata$r:0001258C                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00012590                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00012590 _rdata$r        ends
.rdata$r:00012590
.data$r:00012594 ; ===========================================================================
.data$r:00012594
.data$r:00012594 ; Segment type: Pure data
.data$r:00012594 ; Segment permissions: Read/Write
.data$r:00012594 _data$r         segment dword public 'DATA' use32
.data$r:00012594                 assume cs:_data$r
.data$r:00012594                 ;org 12594h
.data$r:00012594 ; COMDAT (pick any)
.data$r:00012594                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00012594 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00012594 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00012594                                         ; DATA XREF: .rdata$r:0001258Co
.data$r:00012594                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00012594                                         ; const type_info::`vftable'
.data$r:00012598                 db    0
.data$r:00012599                 db    0
.data$r:0001259A                 db    0
.data$r:0001259B                 db    0
.data$r:0001259C                 db  2Eh ; .
.data$r:0001259D                 db  3Fh ; ?
.data$r:0001259E                 db  41h ; A
.data$r:0001259F                 db  56h ; V
.data$r:000125A0                 db  5Fh ; _
.data$r:000125A1                 db  53h ; S
.data$r:000125A2                 db  79h ; y
.data$r:000125A3                 db  73h ; s
.data$r:000125A4                 db  74h ; t
.data$r:000125A5                 db  65h ; e
.data$r:000125A6                 db  6Dh ; m
.data$r:000125A7                 db  5Fh ; _
.data$r:000125A8                 db  65h ; e
.data$r:000125A9                 db  72h ; r
.data$r:000125AA                 db  72h ; r
.data$r:000125AB                 db  6Fh ; o
.data$r:000125AC                 db  72h ; r
.data$r:000125AD                 db  5Fh ; _
.data$r:000125AE                 db  63h ; c
.data$r:000125AF                 db  61h ; a
.data$r:000125B0                 db  74h ; t
.data$r:000125B1                 db  65h ; e
.data$r:000125B2                 db  67h ; g
.data$r:000125B3                 db  6Fh ; o
.data$r:000125B4                 db  72h ; r
.data$r:000125B5                 db  79h ; y
.data$r:000125B6                 db  40h ; @
.data$r:000125B7                 db  73h ; s
.data$r:000125B8                 db  74h ; t
.data$r:000125B9                 db  64h ; d
.data$r:000125BA                 db  40h ; @
.data$r:000125BB                 db  40h ; @
.data$r:000125BC                 db    0
.data$r:000125BD                 align 10h
.data$r:000125BD _data$r         ends
.data$r:000125BD
.rdata$r:000125C0 ; ===========================================================================
.rdata$r:000125C0
.rdata$r:000125C0 ; Segment type: Pure data
.rdata$r:000125C0 ; Segment permissions: Read
.rdata$r:000125C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000125C0                 assume cs:_rdata$r
.rdata$r:000125C0                 ;org 125C0h
.rdata$r:000125C0 ; COMDAT (pick any)
.rdata$r:000125C0                 public ??_R3_System_error_category@std@@8
.rdata$r:000125C0 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000125C0 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00012590o
.rdata$r:000125C0                                         ; .rdata$r:000125F8o
.rdata$r:000125C1                 db    0
.rdata$r:000125C2                 db    0
.rdata$r:000125C3                 db    0
.rdata$r:000125C4                 db    0
.rdata$r:000125C5                 db    0
.rdata$r:000125C6                 db    0
.rdata$r:000125C7                 db    0
.rdata$r:000125C8                 db    3
.rdata$r:000125C9                 db    0
.rdata$r:000125CA                 db    0
.rdata$r:000125CB                 db    0
.rdata$r:000125CC                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:000125CC _rdata$r        ends
.rdata$r:000125CC
.rdata$r:000125D0 ; ===========================================================================
.rdata$r:000125D0
.rdata$r:000125D0 ; Segment type: Pure data
.rdata$r:000125D0 ; Segment permissions: Read
.rdata$r:000125D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000125D0                 assume cs:_rdata$r
.rdata$r:000125D0                 ;org 125D0h
.rdata$r:000125D0 ; COMDAT (pick any)
.rdata$r:000125D0                 public ??_R2_System_error_category@std@@8
.rdata$r:000125D0 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:000125D0 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:000125D0                                         ; DATA XREF: .rdata$r:000125CCo
.rdata$r:000125D0                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000125D4                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000125D8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000125DC                 db    0
.rdata$r:000125DD                 align 10h
.rdata$r:000125DD _rdata$r        ends
.rdata$r:000125DD
.rdata$r:000125E0 ; ===========================================================================
.rdata$r:000125E0
.rdata$r:000125E0 ; Segment type: Pure data
.rdata$r:000125E0 ; Segment permissions: Read
.rdata$r:000125E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000125E0                 assume cs:_rdata$r
.rdata$r:000125E0                 ;org 125E0h
.rdata$r:000125E0 ; COMDAT (pick any)
.rdata$r:000125E0                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:000125E0 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000125E0 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:000125E0                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:000125E0                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:000125E4                 db    2
.rdata$r:000125E5                 db    0
.rdata$r:000125E6                 db    0
.rdata$r:000125E7                 db    0
.rdata$r:000125E8                 db    0
.rdata$r:000125E9                 db    0
.rdata$r:000125EA                 db    0
.rdata$r:000125EB                 db    0
.rdata$r:000125EC                 db 0FFh
.rdata$r:000125ED                 db 0FFh
.rdata$r:000125EE                 db 0FFh
.rdata$r:000125EF                 db 0FFh
.rdata$r:000125F0                 db    0
.rdata$r:000125F1                 db    0
.rdata$r:000125F2                 db    0
.rdata$r:000125F3                 db    0
.rdata$r:000125F4                 db  40h ; @
.rdata$r:000125F5                 db    0
.rdata$r:000125F6                 db    0
.rdata$r:000125F7                 db    0
.rdata$r:000125F8                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000125F8 _rdata$r        ends
.rdata$r:000125F8
.CRT$XCU:000125FC ; ===========================================================================
.CRT$XCU:000125FC
.CRT$XCU:000125FC ; Segment type: Pure data
.CRT$XCU:000125FC ; Segment permissions: Read
.CRT$XCU:000125FC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000125FC                 assume cs:_CRT$XCU
.CRT$XCU:000125FC                 ;org 125FCh
.CRT$XCU:000125FC _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00012600 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00012604 _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:00012608 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:00012608 _CRT$XCU        ends
.CRT$XCU:00012608
.CRT$XCU:0001260C ; ===========================================================================
.CRT$XCU:0001260C
.CRT$XCU:0001260C ; Segment type: Pure data
.CRT$XCU:0001260C ; Segment permissions: Read
.CRT$XCU:0001260C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0001260C                 assume cs:_CRT$XCU
.CRT$XCU:0001260C                 ;org 1260Ch
.CRT$XCU:0001260C ; COMDAT (pick associative to section at 1139C)
.CRT$XCU:0001260C ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0001260C ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0001260C _CRT$XCU        ends
.CRT$XCU:0001260C
.CRT$XCU:00012610 ; ===========================================================================
.CRT$XCU:00012610
.CRT$XCU:00012610 ; Segment type: Pure data
.CRT$XCU:00012610 ; Segment permissions: Read
.CRT$XCU:00012610 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00012610                 assume cs:_CRT$XCU
.CRT$XCU:00012610                 ;org 12610h
.CRT$XCU:00012610 ; COMDAT (pick associative to section at 113A0)
.CRT$XCU:00012610 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:00012610 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:00012610 _CRT$XCU        ends
.CRT$XCU:00012610
.CRT$XCU:00012614 ; ===========================================================================
.CRT$XCU:00012614
.CRT$XCU:00012614 ; Segment type: Pure data
.CRT$XCU:00012614 ; Segment permissions: Read
.CRT$XCU:00012614 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00012614                 assume cs:_CRT$XCU
.CRT$XCU:00012614                 ;org 12614h
.CRT$XCU:00012614 ; COMDAT (pick associative to section at 113A4)
.CRT$XCU:00012614 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:00012614 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:00012614 _CRT$XCU        ends
.CRT$XCU:00012614
.CRT$XCU:00012618 ; ===========================================================================
.CRT$XCU:00012618
.CRT$XCU:00012618 ; Segment type: Pure data
.CRT$XCU:00012618 ; Segment permissions: Read
.CRT$XCU:00012618 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00012618                 assume cs:_CRT$XCU
.CRT$XCU:00012618                 ;org 12618h
.CRT$XCU:00012618 ; COMDAT (pick associative to section at 113AC)
.CRT$XCU:00012618 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00012618 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00012618 _CRT$XCU        ends
.CRT$XCU:00012618
.CRT$XCU:0001261C ; ===========================================================================
.CRT$XCU:0001261C
.CRT$XCU:0001261C ; Segment type: Pure data
.CRT$XCU:0001261C ; Segment permissions: Read
.CRT$XCU:0001261C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0001261C                 assume cs:_CRT$XCU
.CRT$XCU:0001261C                 ;org 1261Ch
.CRT$XCU:0001261C ; COMDAT (pick associative to section at 113B0)
.CRT$XCU:0001261C ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0001261C ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0001261C _CRT$XCU        ends
.CRT$XCU:0001261C
.CRT$XCU:00012620 ; ===========================================================================
.CRT$XCU:00012620
.CRT$XCU:00012620 ; Segment type: Pure data
.CRT$XCU:00012620 ; Segment permissions: Read
.CRT$XCU:00012620 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00012620                 assume cs:_CRT$XCU
.CRT$XCU:00012620                 ;org 12620h
.CRT$XCU:00012620 ; COMDAT (pick associative to section at 11480)
.CRT$XCU:00012620 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00012620 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00012620 _CRT$XCU        ends
.CRT$XCU:00012620
.CRT$XCU:00012624 ; ===========================================================================
.CRT$XCU:00012624
.CRT$XCU:00012624 ; Segment type: Pure data
.CRT$XCU:00012624 ; Segment permissions: Read
.CRT$XCU:00012624 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00012624                 assume cs:_CRT$XCU
.CRT$XCU:00012624                 ;org 12624h
.CRT$XCU:00012624 ; COMDAT (pick associative to section at 11484)
.CRT$XCU:00012624 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:00012624 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:00012624 _CRT$XCU        ends
.CRT$XCU:00012624
UNDEF:00012630 ; ===========================================================================
UNDEF:00012630
UNDEF:00012630 ; Segment type: Externs
UNDEF:00012630 ; UNDEF
UNDEF:00012630                 extrn __purecall:near   ; DATA XREF: .rdata:000111A4o
UNDEF:00012630                                         ; .rdata:000111A8o ...
UNDEF:00012634 ; void *__cdecl operator new(unsigned int)
UNDEF:00012634                 extrn ??2@YAPAXI@Z:near ; CODE XREF: AutoCompletion::setLanguage(LangType)+108p
UNDEF:00012634                                         ; std::_Allocate<char>(uint,char *)+1Dp ...
UNDEF:00012638 ; void __cdecl operator delete(void *)
UNDEF:00012638                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?setLanguage@AutoCompletion@@QAE_NW4LangType@@@Z$0+7p
UNDEF:00012638                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0001263C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0001263C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0001263C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:00012640                 extrn ___report_rangecheckfailure:near
UNDEF:00012640                                         ; CODE XREF: AutoCompletion::insertMatchedChars(int,MatchedPairConf const &):loc_2C28p
UNDEF:00012644                 extrn __invalid_parameter:near
UNDEF:00012644                                         ; CODE XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+74p
UNDEF:00012644                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+74p ...
UNDEF:00012648 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00012648                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00012648                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+2Ap
UNDEF:00012648                                         ; std::_Locinfo::_Locinfo(char const *)+2Dp ...
UNDEF:0001264C ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0001264C                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0001264C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+E0p
UNDEF:0001264C                                         ; __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0+3j ...
UNDEF:00012650 ; void __cdecl free(void *Memory)
UNDEF:00012650                 extrn _free:near        ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+1Bp
UNDEF:00012650                                         ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+1Bp ...
UNDEF:00012654                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00012658 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:00012658                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0001265C ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0001265C                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0001265C                                         ; _wmemmove+11p
UNDEF:00012660 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00012660                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:00012660                                         ; _wmemcpy+11p
UNDEF:00012664 ; size_t __cdecl strlen(const char *Str)
UNDEF:00012664                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00012668 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:00012668                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:00012668                                         ; CODE XREF: std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0001266C ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0001266C                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0001266C                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0001266C                                         ; DATA XREF: .xdata$x:00011188o
UNDEF:00012670 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:00012670                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:00012670                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:00012670                                         ; __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0+3j ...
UNDEF:00012674 ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:00012674                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:00012674                                         ; DATA XREF: .rdata:000110F8o
UNDEF:00012678                 extrn __CrtDbgReportW:near
UNDEF:00012678                                         ; CODE XREF: std::vector<std::pair<char,char>,std::allocator<std::pair<char,char>>>::operator[](uint)+50p
UNDEF:00012678                                         ; std::vector<MatchedCharInserted,std::allocator<MatchedCharInserted>>::operator[](uint)+50p ...
UNDEF:0001267C                 extrn __free_dbg:near   ; CODE XREF: std::_Yarn<char>::_Tidy(void)+17p
UNDEF:0001267C                                         ; std::_Yarn<wchar_t>::_Tidy(void)+17p
UNDEF:00012680 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:00012680                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:00012680                                         ; CODE XREF: std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+6Bp
UNDEF:00012680                                         ; std::_Debug_heap<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::less<void>)+BFp ...
UNDEF:00012684 ; void __cdecl std::_Xbad_alloc()
UNDEF:00012684                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00012684                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_486Ap
UNDEF:00012684                                         ; std::_Allocate<MatchedCharInserted>(uint,MatchedCharInserted *):loc_48ACp ...
UNDEF:00012688 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00012688                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00012688                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:00012688                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:0001268C ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0001268C                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0001268C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0001268C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:00012690 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:00012690                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:00012690                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:00012694 ; _DWORD __thiscall std::bad_cast::bad_cast(std::bad_cast *__hidden this, const char *)
UNDEF:00012694                 extrn ??0bad_cast@std@@QAE@PBD@Z:near
UNDEF:00012694                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+8Dp
UNDEF:00012698 ; public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)
UNDEF:00012698                 extrn ??0bad_cast@std@@QAE@ABV01@@Z:near
UNDEF:00012698                                         ; DATA XREF: .xdata$x:00011DB0o
UNDEF:0001269C ; public: virtual __thiscall std::bad_cast::~bad_cast(void)
UNDEF:0001269C                 extrn ??1bad_cast@std@@UAE@XZ:near
UNDEF:0001269C                                         ; DATA XREF: .xdata$x:00011D64o
UNDEF:000126A0                 extrn __Getctype:near   ; CODE XREF: std::_Locinfo::_Getctype(void)+Dp
UNDEF:000126A4                 extrn __Getcvt:near     ; CODE XREF: std::_Locinfo::_Getcvt(void)+19p
UNDEF:000126A8                 extrn __Mbrtowc:near    ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+25p
UNDEF:000126AC                 extrn __Wcrtomb:near    ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+2Ep
UNDEF:000126B0                 extrn __Getwctype:near  ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+15p
UNDEF:000126B4                 extrn __Getwctypes:near ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+4Ap
UNDEF:000126B8                 extrn __Towlower:near   ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+42p
UNDEF:000126B8                                         ; std::ctype<wchar_t>::do_tolower(wchar_t)+13p
UNDEF:000126BC                 extrn __Towupper:near   ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+42p
UNDEF:000126BC                                         ; std::ctype<wchar_t>::do_toupper(wchar_t)+13p
UNDEF:000126C0 ; void __cdecl static std::_Locinfo::_Locinfo_ctor(struct std::_Locinfo *, const char *)
UNDEF:000126C0                 extrn ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:near
UNDEF:000126C0                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+BCp
UNDEF:000126C4 ; void __cdecl static std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *)
UNDEF:000126C4                 extrn ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:near
UNDEF:000126C4                                         ; CODE XREF: std::_Locinfo::~_Locinfo(void)+31p
UNDEF:000126C8 ; void *__cdecl operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
UNDEF:000126C8                 extrn ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z:near
UNDEF:000126C8                                         ; CODE XREF: std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)+13p
UNDEF:000126CC ; const struct std::_DebugHeapTag_t *__cdecl std::_DebugHeapTag_func()
UNDEF:000126CC                 extrn ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ:near
UNDEF:000126CC                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+42p
UNDEF:000126D0 ; public: virtual void * __thiscall std::_Facet_base::`vector deleting destructor'(unsigned int)
UNDEF:000126D0                 extrn ??_E_Facet_base@std@@UAEPAXI@Z:near ; weak
UNDEF:000126D0                                         ; DATA XREF: .rdata:const std::_Facet_base::`vftable'o
UNDEF:000126D4 ; void __cdecl std::_Facet_Register(struct std::_Facet_base *)
UNDEF:000126D4                 extrn ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:near
UNDEF:000126D4                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+C8p
UNDEF:000126D8 ; protected: virtual void * __thiscall std::locale::facet::`vector deleting destructor'(unsigned int)
UNDEF:000126D8                 extrn ??_Efacet@locale@std@@MAEPAXI@Z:near ; weak
UNDEF:000126D8                                         ; DATA XREF: .rdata:const std::locale::facet::`vftable'o
UNDEF:000126DC ; struct std::locale::_Locimp *__cdecl static std::locale::_Init(bool)
UNDEF:000126DC                 extrn ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:near
UNDEF:000126DC                                         ; CODE XREF: std::locale::locale(void)+9p
UNDEF:000126E0 ; struct std::locale::_Locimp *__cdecl static std::locale::_Getgloballocale()
UNDEF:000126E0                 extrn ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:near
UNDEF:000126E0                                         ; CODE XREF: std::locale::_Getfacet(uint):loc_B3D0p
UNDEF:000126E4 ; public: virtual void * __thiscall std::ctype_base::`vector deleting destructor'(unsigned int)
UNDEF:000126E4                 extrn ??_Ectype_base@std@@UAEPAXI@Z:near ; weak
UNDEF:000126E4                                         ; DATA XREF: .rdata:const std::ctype_base::`vftable'o
UNDEF:000126E8 ; protected: virtual void * __thiscall std::ctype<wchar_t>::`vector deleting destructor'(unsigned int)
UNDEF:000126E8                 extrn ??_E?$ctype@_W@std@@MAEPAXI@Z:near ; weak
UNDEF:000126E8                                         ; DATA XREF: .rdata:const std::ctype<wchar_t>::`vftable'o
UNDEF:000126EC ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:000126EC                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000126EC                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:000126F0 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:000126F0                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:000126F0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:000126F0                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:000126F4 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:000126F4                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:000126F4                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:000126F8 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:000126F8                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000126F8                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:000126FC ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:000126FC                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000126FC                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00012700 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00012700                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00012700                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:00012704 ; BOOL __stdcall FindClose(HANDLE hFindFile)
UNDEF:00012704                 extrn __imp__FindClose@4:near
UNDEF:00012704                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+40Bp
UNDEF:00012704                                         ; DATA XREF: AutoCompletion::showPathCompletion(void)+40Br
UNDEF:00012708 ; HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:00012708                 extrn __imp__FindFirstFileW@8:near
UNDEF:00012708                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+21Cp
UNDEF:00012708                                         ; DATA XREF: AutoCompletion::showPathCompletion(void)+21Cr
UNDEF:0001270C ; BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:0001270C                 extrn __imp__FindNextFileW@8:near
UNDEF:0001270C                                         ; CODE XREF: AutoCompletion::showPathCompletion(void)+3F6p
UNDEF:0001270C                                         ; DATA XREF: AutoCompletion::showPathCompletion(void)+3F6r
UNDEF:00012710 ; DWORD __stdcall GetFileAttributesW(LPCWSTR lpFileName)
UNDEF:00012710                 extrn __imp__GetFileAttributesW@4:near
UNDEF:00012710                                         ; CODE XREF: isDirectory(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+35p
UNDEF:00012710                                         ; isFile(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+35p
UNDEF:00012710                                         ; DATA XREF: ...
UNDEF:00012714 ; DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
UNDEF:00012714                 extrn __imp__GetModuleFileNameW@12:near
UNDEF:00012714                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+60p
UNDEF:00012714                                         ; DATA XREF: AutoCompletion::setLanguage(LangType)+60r
UNDEF:00012718 ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:00012718                 extrn __imp__lstrcmpW@8:near
UNDEF:00012718                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+330p
UNDEF:00012718                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+192p
UNDEF:00012718                                         ; DATA XREF: ...
UNDEF:0001271C ; LPWSTR __stdcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:0001271C                 extrn __imp__lstrcatW@8:near
UNDEF:0001271C                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+7Fp
UNDEF:0001271C                                         ; AutoCompletion::setLanguage(LangType)+98p ...
UNDEF:00012720 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:00012720                 extrn __imp__lstrlenW@4:near
UNDEF:00012720                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+5B1p
UNDEF:00012720                                         ; AutoCompletion::update(int)+E5p ...
UNDEF:00012724 ; BOOL __stdcall PathRemoveFileSpecW(LPWSTR pszPath)
UNDEF:00012724                 extrn __imp__PathRemoveFileSpecW@4:near
UNDEF:00012724                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+6Dp
UNDEF:00012724                                         ; DATA XREF: AutoCompletion::setLanguage(LangType)+6Dr
UNDEF:00012728 ; struct TiXmlNode *__thiscall TiXmlNode::FirstChild(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:00012728                 extrn ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z:near
UNDEF:00012728                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+1B4p
UNDEF:0001272C ; struct TiXmlElement *__thiscall TiXmlNode::NextSiblingElement(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:0001272C                 extrn ?NextSiblingElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z:near
UNDEF:0001272C                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+573p
UNDEF:00012730 ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:00012730                 extrn ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z:near
UNDEF:00012730                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+1DAp
UNDEF:00012730                                         ; AutoCompletion::setLanguage(LangType)+20Cp ...
UNDEF:00012734 ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *__hidden this, const wchar_t *)
UNDEF:00012734                 extrn ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z:near
UNDEF:00012734                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+310p
UNDEF:00012734                                         ; AutoCompletion::setLanguage(LangType)+35Cp ...
UNDEF:00012738 ; _DWORD __thiscall TiXmlDocument::TiXmlDocument(TiXmlDocument *__hidden this, const wchar_t *)
UNDEF:00012738                 extrn ??0TiXmlDocument@@QAE@PB_W@Z:near
UNDEF:00012738                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+133p
UNDEF:0001273C ; bool __thiscall TiXmlDocument::LoadFile(TiXmlDocument *__hidden this)
UNDEF:0001273C                 extrn ?LoadFile@TiXmlDocument@@QAE_NXZ:near
UNDEF:0001273C                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+175p
UNDEF:00012740 ; void __thiscall ScintillaEditView::getText(ScintillaEditView *__hidden this, char *, int, int)
UNDEF:00012740                 extrn ?getText@ScintillaEditView@@QBEXPADHH@Z:near
UNDEF:00012740                                         ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+E1p
UNDEF:00012740                                         ; AutoCompletion::getCloseTag(char *,uint,uint)+115p ...
UNDEF:00012744 ; void __thiscall ScintillaEditView::getGenericText(ScintillaEditView *__hidden this, wchar_t *, unsigned int, int, int)
UNDEF:00012744                 extrn ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z:near
UNDEF:00012744                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+117p
UNDEF:00012744                                         ; AutoCompletion::showApiAndWordComplete(void)+117p ...
UNDEF:00012748 ; int __thiscall ScintillaEditView::searchInTarget(ScintillaEditView *__hidden this, const wchar_t *, int, int, int)
UNDEF:00012748                 extrn ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z:near
UNDEF:00012748                                         ; CODE XREF: AutoCompletion::getCloseTag(char *,uint,uint)+78p
UNDEF:00012748                                         ; AutoCompletion::getWordArray(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,wchar_t *)+DEp ...
UNDEF:0001274C ; int __thiscall ScintillaEditView::replaceTargetRegExMode(ScintillaEditView *__hidden this, const wchar_t *, int, int)
UNDEF:0001274C                 extrn ?replaceTargetRegExMode@ScintillaEditView@@QBEHPB_WHH@Z:near
UNDEF:0001274C                                         ; CODE XREF: AutoCompletion::showWordComplete(bool)+1B4p
UNDEF:00012750 ; void __thiscall ScintillaEditView::showAutoComletion(ScintillaEditView *__hidden this, int, const wchar_t *)
UNDEF:00012750                 extrn ?showAutoComletion@ScintillaEditView@@QAEXHPB_W@Z:near
UNDEF:00012750                                         ; CODE XREF: AutoCompletion::showApiComplete(void)+CEp
UNDEF:00012750                                         ; AutoCompletion::showWordComplete(bool)+360p ...
UNDEF:00012754 ; void __thiscall FunctionCallTip::setLanguageXML(FunctionCallTip *__hidden this, struct TiXmlElement *)
UNDEF:00012754                 extrn ?setLanguageXML@FunctionCallTip@@QAEXPAVTiXmlElement@@@Z:near
UNDEF:00012754                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+50Ep
UNDEF:00012754                                         ; AutoCompletion::setLanguage(LangType)+520p
UNDEF:00012758 ; bool __thiscall FunctionCallTip::updateCalltip(FunctionCallTip *__hidden this, int, bool)
UNDEF:00012758                 extrn ?updateCalltip@FunctionCallTip@@QAE_NH_N@Z:near
UNDEF:00012758                                         ; CODE XREF: AutoCompletion::showFunctionComplete(void)+1Fp
UNDEF:00012758                                         ; AutoCompletion::update(int)+81p
UNDEF:0001275C ; void __thiscall FunctionCallTip::showNextOverload(FunctionCallTip *__hidden this)
UNDEF:0001275C                 extrn ?showNextOverload@FunctionCallTip@@QAEXXZ:near
UNDEF:0001275C                                         ; CODE XREF: AutoCompletion::callTipClick(int)+32p
UNDEF:00012760 ; void __thiscall FunctionCallTip::showPrevOverload(FunctionCallTip *__hidden this)
UNDEF:00012760                 extrn ?showPrevOverload@FunctionCallTip@@QAEXXZ:near
UNDEF:00012760                                         ; CODE XREF: AutoCompletion::callTipClick(int)+1Fp
UNDEF:00012764 ; __fastcall __security_check_cookie(x)
UNDEF:00012764                 extrn @__security_check_cookie@4:near
UNDEF:00012764                                         ; CODE XREF: AutoCompletion::setLanguage(LangType)+72Bp
UNDEF:00012764                                         ; AutoCompletion::showWordComplete(bool)+3A3p ...
UNDEF:00012768 ; __stdcall _CxxThrowException(x, x)
UNDEF:00012768                 extrn __CxxThrowException@8:near
UNDEF:00012768                                         ; CODE XREF: __catch$??$_Uninit_move@PAUMatchedCharInserted@@PAU1@V?$allocator@UMatchedCharInserted@@@std@@U1@@std@@YAPAUMatchedCharInserted@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMatchedCharInserted@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p
UNDEF:00012768                                         ; __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p ...
UNDEF:0001276C                 extrn ___CxxFrameHandler3:near
UNDEF:0001276C                                         ; CODE XREF: __ehhandler$?removeInvalidElements@InsertedMatchedChars@@QAEXUMatchedCharInserted@@@Z+19j
UNDEF:0001276C                                         ; __ehhandler$?search@InsertedMatchedChars@@QAEHDDH@Z+19j ...
UNDEF:00012770 ; const type_info::`vftable'
UNDEF:00012770                 extrn ??_7type_info@@6B@:near
UNDEF:00012770                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:00012770                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:00012774 ; private: static int std::locale::id::_Id_cnt
UNDEF:00012774                 extrn ?_Id_cnt@id@locale@std@@0HA:near
UNDEF:00012774                                         ; DATA XREF: std::locale::id::operator uint(void)+49r
UNDEF:00012774                                         ; std::locale::id::operator uint(void)+52w ...
UNDEF:00012778 ; public: static class std::locale::id std::ctype<wchar_t>::id
UNDEF:00012778                 extrn ?id@?$ctype@_W@std@@2V0locale@2@A:near
UNDEF:00012778                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+3Eo
UNDEF:0001277C ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0001277C                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0001277C                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:00012780 ; public: static struct LanguageName * ScintillaEditView::langNames
UNDEF:00012780                 extrn ?langNames@ScintillaEditView@@2PAULanguageName@@A:near
UNDEF:00012780                                         ; DATA XREF: AutoCompletion::getApiFileName(void)+84r
UNDEF:00012784                 extrn ___security_cookie:near
UNDEF:00012784                                         ; DATA XREF: InsertedMatchedChars::removeInvalidElements(MatchedCharInserted)+17r
UNDEF:00012784                                         ; InsertedMatchedChars::search(char,char,int)+17r ...
UNDEF:00012788                 extrn __fltused:near
UNDEF:00012788
UNDEF:00012788
UNDEF:00012788                 end