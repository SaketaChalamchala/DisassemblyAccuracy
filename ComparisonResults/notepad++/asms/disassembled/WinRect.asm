.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : C8E3F6138CD1B34A7F28480D802F4D4F
.rdata:00000000 ; Input CRC32 : FF38B19F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\WinRect.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG63886
.rdata:00000000 $SG63886:                               ; DATA XREF: WINRECT::Parent(void)+48o
.rdata:00000000                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:00000054 ; wchar_t _SG63887
.rdata:00000054 $SG63887:                               ; DATA XREF: WINRECT::Parent(void)+4Do
.rdata:00000054                 unicode 0, <parent->
.rdata:00000054                 dw 3Eh
.rdata:00000054                 unicode 0, <IsGroup()>,0
.rdata:00000078 ; wchar_t _SG63905
.rdata:00000078 $SG63905:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+Eo
.rdata:00000078                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:000000CC ; wchar_t _SG63906
.rdata:000000CC $SG63906:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+13o
.rdata:000000CC                 unicode 0, <pWinMap>,0
.rdata:000000DC ; wchar_t _SG63922
.rdata:000000DC $SG63922:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+D9o
.rdata:000000DC                 unicode 0, <prev>,0
.rdata:000000E6                 align 4
.rdata:000000E8 ; wchar_t _SG63915
.rdata:000000E8 $SG63915:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+8Fo
.rdata:000000E8                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:0000013C ; wchar_t _SG63916
.rdata:0000013C $SG63916:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+94o
.rdata:0000013C                 unicode 0, <pwrc->
.rdata:0000013C                 dw 3Eh
.rdata:0000013C                 unicode 0, <IsEndGroup()>,0
.rdata:00000162                 align 8
.rdata:00000168 ; wchar_t _SG63918
.rdata:00000168 $SG63918:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+BAo
.rdata:00000168                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:000001BC ; wchar_t _SG63919
.rdata:000001BC $SG63919:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+BFo
.rdata:000001BC                 unicode 0, <pwrc->
.rdata:000001BC                 dw 3Eh
.rdata:000001BC                 unicode 0, <IsEndGroup()>,0
.rdata:000001E2                 align 8
.rdata:000001E8 ; wchar_t _SG63921
.rdata:000001E8 $SG63921:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+D4o
.rdata:000001E8                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:0000023C                 align 10h
.rdata:00000240 ; wchar_t _SG63924
.rdata:00000240 $SG63924:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+F0o
.rdata:00000240                 unicode 0, <..\src\WinControls\WindowsDlg\WinRect.cpp>,0
.rdata:00000294 ; wchar_t _SG63925
.rdata:00000294 $SG63925:                               ; DATA XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+F5o
.rdata:00000294                 unicode 0, <prev->
.rdata:00000294                 dw 3Eh
.rdata:00000294                 unicode 0, <next==NULL>,0
.rdata:000002B6                 align 4
.rdata:000002B6 _rdata          ends
.rdata:000002B6
.text$mn:000002B8 ; ===========================================================================
.text$mn:000002B8
.text$mn:000002B8 ; Segment type: Pure code
.text$mn:000002B8 ; Segment permissions: Read/Execute
.text$mn:000002B8 _text$mn        segment para public 'CODE' use32
.text$mn:000002B8                 assume cs:_text$mn
.text$mn:000002B8                 ;org 2B8h
.text$mn:000002B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000002B8
.text$mn:000002B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000002B8
.text$mn:000002B8 ; Attributes: bp-based frame
.text$mn:000002B8
.text$mn:000002B8 ; _DWORD __thiscall WINRECT::WINRECT(WINRECT *this, unsigned __int16, int, __int32)
.text$mn:000002B8                 public ??0WINRECT@@QAE@GHJ@Z
.text$mn:000002B8 ??0WINRECT@@QAE@GHJ@Z proc near
.text$mn:000002B8
.text$mn:000002B8 Dst             = dword ptr -4
.text$mn:000002B8 arg_0           = word ptr  8
.text$mn:000002B8 arg_4           = dword ptr  0Ch
.text$mn:000002B8 arg_8           = dword ptr  10h
.text$mn:000002B8
.text$mn:000002B8                 push    ebp
.text$mn:000002B9                 mov     ebp, esp
.text$mn:000002BB                 push    ecx
.text$mn:000002BC                 mov     [ebp+Dst], ecx
.text$mn:000002BF                 push    24h ; '$'       ; Size
.text$mn:000002C1                 push    0               ; Val
.text$mn:000002C3                 mov     eax, [ebp+Dst]
.text$mn:000002C6                 push    eax             ; Dst
.text$mn:000002C7                 call    _memset
.text$mn:000002CC                 add     esp, 0Ch
.text$mn:000002CF                 mov     ecx, [ebp+Dst]
.text$mn:000002D2                 mov     dx, [ebp+arg_0]
.text$mn:000002D6                 mov     [ecx+18h], dx
.text$mn:000002DA                 mov     eax, [ebp+Dst]
.text$mn:000002DD                 mov     ecx, [ebp+arg_4]
.text$mn:000002E0                 mov     [eax+1Ch], ecx
.text$mn:000002E3                 mov     edx, [ebp+Dst]
.text$mn:000002E6                 mov     eax, [ebp+arg_8]
.text$mn:000002E9                 mov     [edx+20h], eax
.text$mn:000002EC                 mov     eax, [ebp+Dst]
.text$mn:000002EF                 mov     esp, ebp
.text$mn:000002F1                 pop     ebp
.text$mn:000002F2                 retn    0Ch
.text$mn:000002F2 ??0WINRECT@@QAE@GHJ@Z endp
.text$mn:000002F2
.text$mn:000002F2 ; ---------------------------------------------------------------------------
.text$mn:000002F5                 align 4
.text$mn:000002F8
.text$mn:000002F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000002F8
.text$mn:000002F8 ; Attributes: bp-based frame
.text$mn:000002F8
.text$mn:000002F8 ; struct WINRECT *__cdecl WINRECT::InitMap(struct WINRECT *, struct WINRECT *)
.text$mn:000002F8                 public ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z
.text$mn:000002F8 ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z proc near
.text$mn:000002F8                                         ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+76p
.text$mn:000002F8
.text$mn:000002F8 var_C           = dword ptr -0Ch
.text$mn:000002F8 var_8           = dword ptr -8
.text$mn:000002F8 var_4           = dword ptr -4
.text$mn:000002F8 arg_0           = dword ptr  8
.text$mn:000002F8 arg_4           = dword ptr  0Ch
.text$mn:000002F8
.text$mn:000002F8                 push    ebp
.text$mn:000002F9                 mov     ebp, esp
.text$mn:000002FB                 sub     esp, 0Ch
.text$mn:000002FE                 cmp     [ebp+arg_0], 0
.text$mn:00000302                 jnz     short loc_318
.text$mn:00000304                 push    3Ch ; '<'       ; Line
.text$mn:00000306                 push    offset $SG63905 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:0000030B                 push    offset $SG63906 ; "pWinMap"
.text$mn:00000310                 call    __wassert
.text$mn:00000315 ; ---------------------------------------------------------------------------
.text$mn:00000315                 add     esp, 0Ch
.text$mn:00000318
.text$mn:00000318 loc_318:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+Aj
.text$mn:00000318                 mov     ecx, [ebp+arg_0]
.text$mn:0000031B                 mov     [ebp+var_4], ecx
.text$mn:0000031E                 mov     [ebp+var_8], 0
.text$mn:00000325
.text$mn:00000325 loc_325:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+AAj
.text$mn:00000325                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000328                 call    ?IsEndGroup@WINRECT@@QBEHXZ ; WINRECT::IsEndGroup(void)
.text$mn:0000032D                 test    eax, eax
.text$mn:0000032F                 jnz     short loc_3A4
.text$mn:00000331                 mov     edx, [ebp+var_4]
.text$mn:00000334                 mov     eax, [ebp+var_8]
.text$mn:00000337                 mov     [edx+4], eax
.text$mn:0000033A                 mov     ecx, [ebp+var_4]
.text$mn:0000033D                 mov     dword ptr [ecx], 0
.text$mn:00000343                 cmp     [ebp+var_8], 0
.text$mn:00000347                 jz      short loc_351
.text$mn:00000349                 mov     edx, [ebp+var_8]
.text$mn:0000034C                 mov     eax, [ebp+var_4]
.text$mn:0000034F                 mov     [edx], eax
.text$mn:00000351
.text$mn:00000351 loc_351:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+4Fj
.text$mn:00000351                 mov     ecx, [ebp+var_4]
.text$mn:00000354                 mov     [ebp+var_8], ecx
.text$mn:00000357                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000035A                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:0000035F                 test    eax, eax
.text$mn:00000361                 jz      short loc_399
.text$mn:00000363                 mov     edx, [ebp+var_4]
.text$mn:00000366                 push    edx             ; struct WINRECT *
.text$mn:00000367                 mov     eax, [ebp+var_4]
.text$mn:0000036A                 add     eax, 24h ; '$'
.text$mn:0000036D                 push    eax             ; struct WINRECT *
.text$mn:0000036E                 call    ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z ; WINRECT::InitMap(WINRECT *,WINRECT *)
.text$mn:00000373                 add     esp, 8
.text$mn:00000376                 mov     [ebp+var_4], eax
.text$mn:00000379                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000037C                 call    ?IsEndGroup@WINRECT@@QBEHXZ ; WINRECT::IsEndGroup(void)
.text$mn:00000381                 test    eax, eax
.text$mn:00000383                 jnz     short loc_399
.text$mn:00000385                 push    49h ; 'I'       ; Line
.text$mn:00000387                 push    offset $SG63915 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:0000038C                 push    offset $SG63916 ; "pwrc->IsEndGroup()"
.text$mn:00000391                 call    __wassert
.text$mn:00000396 ; ---------------------------------------------------------------------------
.text$mn:00000396                 add     esp, 0Ch
.text$mn:00000399
.text$mn:00000399 loc_399:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+69j
.text$mn:00000399                                         ; WINRECT::InitMap(WINRECT *,WINRECT *)+8Bj
.text$mn:00000399                 mov     edx, [ebp+var_4]
.text$mn:0000039C                 add     edx, 24h ; '$'
.text$mn:0000039F                 mov     [ebp+var_4], edx
.text$mn:000003A2                 jmp     short loc_325
.text$mn:000003A4 ; ---------------------------------------------------------------------------
.text$mn:000003A4
.text$mn:000003A4 loc_3A4:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+37j
.text$mn:000003A4                 mov     ecx, [ebp+var_4] ; this
.text$mn:000003A7                 call    ?IsEndGroup@WINRECT@@QBEHXZ ; WINRECT::IsEndGroup(void)
.text$mn:000003AC                 test    eax, eax
.text$mn:000003AE                 jnz     short loc_3C4
.text$mn:000003B0                 push    4Eh ; 'N'       ; Line
.text$mn:000003B2                 push    offset $SG63918 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:000003B7                 push    offset $SG63919 ; "pwrc->IsEndGroup()"
.text$mn:000003BC                 call    __wassert
.text$mn:000003C1 ; ---------------------------------------------------------------------------
.text$mn:000003C1                 add     esp, 0Ch
.text$mn:000003C4
.text$mn:000003C4 loc_3C4:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+B6j
.text$mn:000003C4                 cmp     [ebp+var_8], 0
.text$mn:000003C8                 jnz     short loc_3DE
.text$mn:000003CA                 push    4Fh ; 'O'       ; Line
.text$mn:000003CC                 push    offset $SG63921 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:000003D1                 push    offset $SG63922 ; "prev"
.text$mn:000003D6                 call    __wassert
.text$mn:000003DB ; ---------------------------------------------------------------------------
.text$mn:000003DB                 add     esp, 0Ch
.text$mn:000003DE
.text$mn:000003DE loc_3DE:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+D0j
.text$mn:000003DE                 mov     edx, [ebp+var_8]
.text$mn:000003E1                 cmp     dword ptr [edx], 0
.text$mn:000003E4                 jz      short loc_3FA
.text$mn:000003E6                 push    50h ; 'P'       ; Line
.text$mn:000003E8                 push    offset $SG63924 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:000003ED                 push    offset $SG63925 ; "prev->next==NULL"
.text$mn:000003F2                 call    __wassert
.text$mn:000003F7 ; ---------------------------------------------------------------------------
.text$mn:000003F7                 add     esp, 0Ch
.text$mn:000003FA
.text$mn:000003FA loc_3FA:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+ECj
.text$mn:000003FA                 cmp     [ebp+arg_4], 0
.text$mn:000003FE                 jz      short loc_408
.text$mn:00000400                 mov     ecx, [ebp+var_4]
.text$mn:00000403                 mov     [ebp+var_C], ecx
.text$mn:00000406                 jmp     short loc_40F
.text$mn:00000408 ; ---------------------------------------------------------------------------
.text$mn:00000408
.text$mn:00000408 loc_408:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+106j
.text$mn:00000408                 mov     [ebp+var_C], 0
.text$mn:0000040F
.text$mn:0000040F loc_40F:                                ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+10Ej
.text$mn:0000040F                 mov     eax, [ebp+var_C]
.text$mn:00000412                 mov     esp, ebp
.text$mn:00000414                 pop     ebp
.text$mn:00000415                 retn
.text$mn:00000415 ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z endp
.text$mn:00000415
.text$mn:00000415 ; ---------------------------------------------------------------------------
.text$mn:00000416                 align 4
.text$mn:00000418
.text$mn:00000418 ; =============== S U B R O U T I N E =======================================
.text$mn:00000418
.text$mn:00000418 ; Attributes: bp-based frame
.text$mn:00000418
.text$mn:00000418 ; struct WINRECT *__thiscall WINRECT::Parent(WINRECT *__hidden this)
.text$mn:00000418                 public ?Parent@WINRECT@@QAEPAV1@XZ
.text$mn:00000418 ?Parent@WINRECT@@QAEPAV1@XZ proc near
.text$mn:00000418
.text$mn:00000418 var_C           = dword ptr -0Ch
.text$mn:00000418 var_8           = dword ptr -8
.text$mn:00000418 var_4           = dword ptr -4
.text$mn:00000418
.text$mn:00000418                 push    ebp
.text$mn:00000419                 mov     ebp, esp
.text$mn:0000041B                 sub     esp, 0Ch
.text$mn:0000041E                 mov     [ebp+var_C], ecx
.text$mn:00000421                 mov     [ebp+var_4], 0
.text$mn:00000428                 mov     eax, [ebp+var_C]
.text$mn:0000042B                 mov     [ebp+var_4], eax
.text$mn:0000042E                 jmp     short loc_43B
.text$mn:00000430 ; ---------------------------------------------------------------------------
.text$mn:00000430
.text$mn:00000430 loc_430:                                ; CODE XREF: WINRECT::Parent(void)+2Fj
.text$mn:00000430                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000433                 call    ?Prev@WINRECT@@QAEPAV1@XZ ; WINRECT::Prev(void)
.text$mn:00000438                 mov     [ebp+var_4], eax
.text$mn:0000043B
.text$mn:0000043B loc_43B:                                ; CODE XREF: WINRECT::Parent(void)+16j
.text$mn:0000043B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000043E                 call    ?Prev@WINRECT@@QAEPAV1@XZ ; WINRECT::Prev(void)
.text$mn:00000443                 test    eax, eax
.text$mn:00000445                 jz      short loc_449
.text$mn:00000447                 jmp     short loc_430
.text$mn:00000449 ; ---------------------------------------------------------------------------
.text$mn:00000449
.text$mn:00000449 loc_449:                                ; CODE XREF: WINRECT::Parent(void)+2Dj
.text$mn:00000449                 mov     ecx, [ebp+var_4]
.text$mn:0000044C                 sub     ecx, 24h ; '$'
.text$mn:0000044F                 mov     [ebp+var_8], ecx
.text$mn:00000452                 mov     ecx, [ebp+var_8] ; this
.text$mn:00000455                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:0000045A                 test    eax, eax
.text$mn:0000045C                 jnz     short loc_472
.text$mn:0000045E                 push    24h ; '$'       ; Line
.text$mn:00000460                 push    offset $SG63886 ; "..\\src\\WinControls\\WindowsDlg\\WinRe"...
.text$mn:00000465                 push    offset $SG63887 ; "parent->IsGroup()"
.text$mn:0000046A                 call    __wassert
.text$mn:0000046F ; ---------------------------------------------------------------------------
.text$mn:0000046F                 add     esp, 0Ch
.text$mn:00000472
.text$mn:00000472 loc_472:                                ; CODE XREF: WINRECT::Parent(void)+44j
.text$mn:00000472                 mov     eax, [ebp+var_8]
.text$mn:00000475                 mov     esp, ebp
.text$mn:00000477                 pop     ebp
.text$mn:00000478                 retn
.text$mn:00000478 ?Parent@WINRECT@@QAEPAV1@XZ endp
.text$mn:00000478
.text$mn:00000478 ; ---------------------------------------------------------------------------
.text$mn:00000479                 db 0Fh dup(0CCh)
.text$mn:00000488
.text$mn:00000488 ; =============== S U B R O U T I N E =======================================
.text$mn:00000488
.text$mn:00000488 ; Attributes: bp-based frame
.text$mn:00000488
.text$mn:00000488 ; int __thiscall WINRECT::GetMargins(WINRECT *this, int *, int *)
.text$mn:00000488                 public ?GetMargins@WINRECT@@QAEHAAH0@Z
.text$mn:00000488 ?GetMargins@WINRECT@@QAEHAAH0@Z proc near
.text$mn:00000488
.text$mn:00000488 var_4           = dword ptr -4
.text$mn:00000488 arg_0           = dword ptr  8
.text$mn:00000488 arg_4           = dword ptr  0Ch
.text$mn:00000488
.text$mn:00000488                 push    ebp
.text$mn:00000489                 mov     ebp, esp
.text$mn:0000048B                 push    ecx
.text$mn:0000048C                 mov     [ebp+var_4], ecx
.text$mn:0000048F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000492                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00000497                 test    eax, eax
.text$mn:00000499                 jz      short loc_4CD
.text$mn:0000049B                 mov     eax, [ebp+var_4]
.text$mn:0000049E                 mov     ecx, [eax+20h]
.text$mn:000004A1                 and     ecx, 0FFFFh
.text$mn:000004A7                 movsx   edx, cx
.text$mn:000004AA                 mov     eax, [ebp+arg_0]
.text$mn:000004AD                 mov     [eax], edx
.text$mn:000004AF                 mov     ecx, [ebp+var_4]
.text$mn:000004B2                 mov     edx, [ecx+20h]
.text$mn:000004B5                 shr     edx, 10h
.text$mn:000004B8                 and     edx, 0FFFFh
.text$mn:000004BE                 movsx   eax, dx
.text$mn:000004C1                 mov     ecx, [ebp+arg_4]
.text$mn:000004C4                 mov     [ecx], eax
.text$mn:000004C6                 mov     eax, 1
.text$mn:000004CB                 jmp     short loc_4E1
.text$mn:000004CD ; ---------------------------------------------------------------------------
.text$mn:000004CD
.text$mn:000004CD loc_4CD:                                ; CODE XREF: WINRECT::GetMargins(int &,int &)+11j
.text$mn:000004CD                 mov     edx, [ebp+arg_4]
.text$mn:000004D0                 mov     dword ptr [edx], 0
.text$mn:000004D6                 mov     eax, [ebp+arg_0]
.text$mn:000004D9                 mov     dword ptr [eax], 0
.text$mn:000004DF                 xor     eax, eax
.text$mn:000004E1
.text$mn:000004E1 loc_4E1:                                ; CODE XREF: WINRECT::GetMargins(int &,int &)+43j
.text$mn:000004E1                 mov     esp, ebp
.text$mn:000004E3                 pop     ebp
.text$mn:000004E4                 retn    8
.text$mn:000004E4 ?GetMargins@WINRECT@@QAEHAAH0@Z endp
.text$mn:000004E4
.text$mn:000004E4 ; ---------------------------------------------------------------------------
.text$mn:000004E7                 align 4
.text$mn:000004E7 _text$mn        ends
.text$mn:000004E7
.text$mn:000004E8 ; ===========================================================================
.text$mn:000004E8
.text$mn:000004E8 ; Segment type: Pure code
.text$mn:000004E8 ; Segment permissions: Read/Execute
.text$mn:000004E8 _text$mn        segment para public 'CODE' use32
.text$mn:000004E8                 assume cs:_text$mn
.text$mn:000004E8                 ;org 4E8h
.text$mn:000004E8 ; COMDAT (pick any)
.text$mn:000004E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000004E8
.text$mn:000004E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000004E8
.text$mn:000004E8 ; Attributes: bp-based frame
.text$mn:000004E8
.text$mn:000004E8 ; unsigned __int16 __thiscall WINRECT::GroupType(WINRECT *__hidden this)
.text$mn:000004E8                 public ?GroupType@WINRECT@@QBEGXZ
.text$mn:000004E8 ?GroupType@WINRECT@@QBEGXZ proc near    ; CODE XREF: WINRECT::IsGroup(void)+Cp
.text$mn:000004E8                                         ; WINRECT::IsGroup(void)+1Bp
.text$mn:000004E8
.text$mn:000004E8 var_4           = dword ptr -4
.text$mn:000004E8
.text$mn:000004E8                 push    ebp
.text$mn:000004E9                 mov     ebp, esp
.text$mn:000004EB                 push    ecx
.text$mn:000004EC                 mov     [ebp+var_4], ecx
.text$mn:000004EF                 mov     eax, [ebp+var_4]
.text$mn:000004F2                 movzx   eax, word ptr [eax+18h]
.text$mn:000004F6                 and     eax, 0F0h
.text$mn:000004FB                 mov     esp, ebp
.text$mn:000004FD                 pop     ebp
.text$mn:000004FE                 retn
.text$mn:000004FE ?GroupType@WINRECT@@QBEGXZ endp
.text$mn:000004FE
.text$mn:000004FE ; ---------------------------------------------------------------------------
.text$mn:000004FF                 align 10h
.text$mn:000004FF _text$mn        ends
.text$mn:000004FF
.text$mn:00000500 ; ===========================================================================
.text$mn:00000500
.text$mn:00000500 ; Segment type: Pure code
.text$mn:00000500 ; Segment permissions: Read/Execute
.text$mn:00000500 _text$mn        segment para public 'CODE' use32
.text$mn:00000500                 assume cs:_text$mn
.text$mn:00000500                 ;org 500h
.text$mn:00000500 ; COMDAT (pick any)
.text$mn:00000500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000500
.text$mn:00000500 ; =============== S U B R O U T I N E =======================================
.text$mn:00000500
.text$mn:00000500 ; Attributes: bp-based frame
.text$mn:00000500
.text$mn:00000500 ; int __thiscall WINRECT::IsEndGroup(WINRECT *__hidden this)
.text$mn:00000500                 public ?IsEndGroup@WINRECT@@QBEHXZ
.text$mn:00000500 ?IsEndGroup@WINRECT@@QBEHXZ proc near   ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+30p
.text$mn:00000500                                         ; WINRECT::InitMap(WINRECT *,WINRECT *)+84p ...
.text$mn:00000500
.text$mn:00000500 var_8           = dword ptr -8
.text$mn:00000500 var_4           = dword ptr -4
.text$mn:00000500
.text$mn:00000500                 push    ebp
.text$mn:00000501                 mov     ebp, esp
.text$mn:00000503                 sub     esp, 8
.text$mn:00000506                 mov     [ebp+var_4], ecx
.text$mn:00000509                 mov     eax, [ebp+var_4]
.text$mn:0000050C                 movzx   ecx, word ptr [eax+18h]
.text$mn:00000510                 test    ecx, ecx
.text$mn:00000512                 jz      short loc_52B
.text$mn:00000514                 mov     edx, [ebp+var_4]
.text$mn:00000517                 movzx   eax, word ptr [edx+18h]
.text$mn:0000051B                 cmp     eax, 0F0h ; '='
.text$mn:00000520                 jz      short loc_52B
.text$mn:00000522                 mov     [ebp+var_8], 0
.text$mn:00000529                 jmp     short loc_532
.text$mn:0000052B ; ---------------------------------------------------------------------------
.text$mn:0000052B
.text$mn:0000052B loc_52B:                                ; CODE XREF: WINRECT::IsEndGroup(void)+12j
.text$mn:0000052B                                         ; WINRECT::IsEndGroup(void)+20j
.text$mn:0000052B                 mov     [ebp+var_8], 1
.text$mn:00000532
.text$mn:00000532 loc_532:                                ; CODE XREF: WINRECT::IsEndGroup(void)+29j
.text$mn:00000532                 mov     eax, [ebp+var_8]
.text$mn:00000535                 mov     esp, ebp
.text$mn:00000537                 pop     ebp
.text$mn:00000538                 retn
.text$mn:00000538 ?IsEndGroup@WINRECT@@QBEHXZ endp
.text$mn:00000538
.text$mn:00000538 ; ---------------------------------------------------------------------------
.text$mn:00000539                 align 4
.text$mn:00000539 _text$mn        ends
.text$mn:00000539
.text$mn:0000053C ; ===========================================================================
.text$mn:0000053C
.text$mn:0000053C ; Segment type: Pure code
.text$mn:0000053C ; Segment permissions: Read/Execute
.text$mn:0000053C _text$mn        segment para public 'CODE' use32
.text$mn:0000053C                 assume cs:_text$mn
.text$mn:0000053C                 ;org 53Ch
.text$mn:0000053C ; COMDAT (pick any)
.text$mn:0000053C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000053C
.text$mn:0000053C ; =============== S U B R O U T I N E =======================================
.text$mn:0000053C
.text$mn:0000053C ; Attributes: bp-based frame
.text$mn:0000053C
.text$mn:0000053C ; int __thiscall WINRECT::IsGroup(WINRECT *__hidden this)
.text$mn:0000053C                 public ?IsGroup@WINRECT@@QBEHXZ
.text$mn:0000053C ?IsGroup@WINRECT@@QBEHXZ proc near      ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+62p
.text$mn:0000053C                                         ; WINRECT::Parent(void)+3Dp ...
.text$mn:0000053C
.text$mn:0000053C var_8           = dword ptr -8
.text$mn:0000053C var_4           = dword ptr -4
.text$mn:0000053C
.text$mn:0000053C                 push    ebp
.text$mn:0000053D                 mov     ebp, esp
.text$mn:0000053F                 sub     esp, 8
.text$mn:00000542                 mov     [ebp+var_4], ecx
.text$mn:00000545                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000548                 call    ?GroupType@WINRECT@@QBEGXZ ; WINRECT::GroupType(void)
.text$mn:0000054D                 movzx   eax, ax
.text$mn:00000550                 test    eax, eax
.text$mn:00000552                 jz      short loc_570
.text$mn:00000554                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000557                 call    ?GroupType@WINRECT@@QBEGXZ ; WINRECT::GroupType(void)
.text$mn:0000055C                 movzx   ecx, ax
.text$mn:0000055F                 cmp     ecx, 0F0h ; '='
.text$mn:00000565                 jz      short loc_570
.text$mn:00000567                 mov     [ebp+var_8], 1
.text$mn:0000056E                 jmp     short loc_577
.text$mn:00000570 ; ---------------------------------------------------------------------------
.text$mn:00000570
.text$mn:00000570 loc_570:                                ; CODE XREF: WINRECT::IsGroup(void)+16j
.text$mn:00000570                                         ; WINRECT::IsGroup(void)+29j
.text$mn:00000570                 mov     [ebp+var_8], 0
.text$mn:00000577
.text$mn:00000577 loc_577:                                ; CODE XREF: WINRECT::IsGroup(void)+32j
.text$mn:00000577                 mov     eax, [ebp+var_8]
.text$mn:0000057A                 mov     esp, ebp
.text$mn:0000057C                 pop     ebp
.text$mn:0000057D                 retn
.text$mn:0000057D ?IsGroup@WINRECT@@QBEHXZ endp
.text$mn:0000057D
.text$mn:0000057D ; ---------------------------------------------------------------------------
.text$mn:0000057E                 align 10h
.text$mn:0000057E _text$mn        ends
.text$mn:0000057E
.text$mn:00000580 ; ===========================================================================
.text$mn:00000580
.text$mn:00000580 ; Segment type: Pure code
.text$mn:00000580 ; Segment permissions: Read/Execute
.text$mn:00000580 _text$mn        segment para public 'CODE' use32
.text$mn:00000580                 assume cs:_text$mn
.text$mn:00000580                 ;org 580h
.text$mn:00000580 ; COMDAT (pick any)
.text$mn:00000580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000580
.text$mn:00000580 ; =============== S U B R O U T I N E =======================================
.text$mn:00000580
.text$mn:00000580 ; Attributes: bp-based frame
.text$mn:00000580
.text$mn:00000580 ; struct WINRECT *__thiscall WINRECT::Prev(WINRECT *__hidden this)
.text$mn:00000580                 public ?Prev@WINRECT@@QAEPAV1@XZ
.text$mn:00000580 ?Prev@WINRECT@@QAEPAV1@XZ proc near     ; CODE XREF: WINRECT::Parent(void)+1Bp
.text$mn:00000580                                         ; WINRECT::Parent(void)+26p
.text$mn:00000580
.text$mn:00000580 var_4           = dword ptr -4
.text$mn:00000580
.text$mn:00000580                 push    ebp
.text$mn:00000581                 mov     ebp, esp
.text$mn:00000583                 push    ecx
.text$mn:00000584                 mov     [ebp+var_4], ecx
.text$mn:00000587                 mov     eax, [ebp+var_4]
.text$mn:0000058A                 mov     eax, [eax+4]
.text$mn:0000058D                 mov     esp, ebp
.text$mn:0000058F                 pop     ebp
.text$mn:00000590                 retn
.text$mn:00000590 ?Prev@WINRECT@@QAEPAV1@XZ endp
.text$mn:00000590
.text$mn:00000590 _text$mn        ends
.text$mn:00000590
UNDEF:000005A0 ; ===========================================================================
UNDEF:000005A0
UNDEF:000005A0 ; Segment type: Externs
UNDEF:000005A0 ; UNDEF
UNDEF:000005A0 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000005A0                 extrn __wassert:near    ; CODE XREF: WINRECT::InitMap(WINRECT *,WINRECT *)+18p
UNDEF:000005A0                                         ; WINRECT::InitMap(WINRECT *,WINRECT *)+99p ...
UNDEF:000005A4 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000005A4                 extrn _memset:near      ; CODE XREF: WINRECT::WINRECT(ushort,int,long)+Fp
UNDEF:000005A4
UNDEF:000005A4
UNDEF:000005A4                 end