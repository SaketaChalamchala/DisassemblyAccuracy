.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : CD3A7A37F0F0C054EF4F23364345DBEA
.text$mn:00000000 ; Input CRC32 : 0BCC3645
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\nsUTF8Prober.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; public: virtual enum  nsProbingState __thiscall nsUTF8Prober::HandleData(char const *, unsigned int)
.text$mn:00000000                 public ?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z
.text$mn:00000000 ?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z proc near
.text$mn:00000000
.text$mn:00000000 var_10          = dword ptr -10h
.text$mn:00000000 var_C           = dword ptr -0Ch
.text$mn:00000000 var_8           = dword ptr -8
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000 arg_0           = dword ptr  8
.text$mn:00000000 arg_4           = dword ptr  0Ch
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 sub     esp, 10h
.text$mn:00000006                 mov     [ebp+var_4], ecx
.text$mn:00000009                 mov     [ebp+var_8], 0
.text$mn:00000010                 jmp     short loc_1B
.text$mn:00000012 ; ---------------------------------------------------------------------------
.text$mn:00000012
.text$mn:00000012 loc_12:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint):loc_72j
.text$mn:00000012                 mov     eax, [ebp+var_8]
.text$mn:00000015                 add     eax, 1
.text$mn:00000018                 mov     [ebp+var_8], eax
.text$mn:0000001B
.text$mn:0000001B loc_1B:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+10j
.text$mn:0000001B                 mov     ecx, [ebp+var_8]
.text$mn:0000001E                 cmp     ecx, [ebp+arg_4]
.text$mn:00000021                 jnb     short loc_74
.text$mn:00000023                 mov     edx, [ebp+arg_0]
.text$mn:00000026                 add     edx, [ebp+var_8]
.text$mn:00000029                 movzx   eax, byte ptr [edx]
.text$mn:0000002C                 push    eax
.text$mn:0000002D                 mov     ecx, [ebp+var_4]
.text$mn:00000030                 mov     ecx, [ecx+4]
.text$mn:00000033                 call    ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z ; nsCodingStateMachine::NextState(char)
.text$mn:00000038                 mov     [ebp+var_C], eax
.text$mn:0000003B                 cmp     [ebp+var_C], 2
.text$mn:0000003F                 jnz     short loc_4D
.text$mn:00000041                 mov     edx, [ebp+var_4]
.text$mn:00000044                 mov     dword ptr [edx+8], 1
.text$mn:0000004B                 jmp     short loc_74
.text$mn:0000004D ; ---------------------------------------------------------------------------
.text$mn:0000004D
.text$mn:0000004D loc_4D:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+3Fj
.text$mn:0000004D                 cmp     [ebp+var_C], 0
.text$mn:00000051                 jnz     short loc_72
.text$mn:00000053                 mov     eax, [ebp+var_4]
.text$mn:00000056                 mov     ecx, [eax+4]    ; this
.text$mn:00000059                 call    ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ ; nsCodingStateMachine::GetCurrentCharLen(void)
.text$mn:0000005E                 cmp     eax, 2
.text$mn:00000061                 jb      short loc_72
.text$mn:00000063                 mov     ecx, [ebp+var_4]
.text$mn:00000066                 mov     edx, [ecx+0Ch]
.text$mn:00000069                 add     edx, 1
.text$mn:0000006C                 mov     eax, [ebp+var_4]
.text$mn:0000006F                 mov     [eax+0Ch], edx
.text$mn:00000072
.text$mn:00000072 loc_72:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+51j
.text$mn:00000072                                         ; nsUTF8Prober::HandleData(char const *,uint)+61j
.text$mn:00000072                 jmp     short loc_12
.text$mn:00000074 ; ---------------------------------------------------------------------------
.text$mn:00000074
.text$mn:00000074 loc_74:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+21j
.text$mn:00000074                                         ; nsUTF8Prober::HandleData(char const *,uint)+4Bj
.text$mn:00000074                 mov     ecx, [ebp+var_4]
.text$mn:00000077                 cmp     dword ptr [ecx+8], 0
.text$mn:0000007B                 jnz     short loc_A5
.text$mn:0000007D                 mov     edx, [ebp+var_4]
.text$mn:00000080                 mov     eax, [edx]
.text$mn:00000082                 mov     ecx, [ebp+var_4]
.text$mn:00000085                 mov     edx, [eax+14h]
.text$mn:00000088                 call    edx
.text$mn:0000008A                 fstp    [ebp+var_10]
.text$mn:0000008D                 movss   xmm0, [ebp+var_10]
.text$mn:00000092                 comiss  xmm0, ds:__real@3f733333
.text$mn:00000099                 jbe     short loc_A5
.text$mn:0000009B                 mov     eax, [ebp+var_4]
.text$mn:0000009E                 mov     dword ptr [eax+8], 1
.text$mn:000000A5
.text$mn:000000A5 loc_A5:                                 ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+7Bj
.text$mn:000000A5                                         ; nsUTF8Prober::HandleData(char const *,uint)+99j
.text$mn:000000A5                 mov     ecx, [ebp+var_4]
.text$mn:000000A8                 mov     eax, [ecx+8]
.text$mn:000000AB                 mov     esp, ebp
.text$mn:000000AD                 pop     ebp
.text$mn:000000AE                 retn    8
.text$mn:000000AE ?HandleData@nsUTF8Prober@@UAE?AW4nsProbingState@@PBDI@Z endp
.text$mn:000000AE
.text$mn:000000AE ; ---------------------------------------------------------------------------
.text$mn:000000B1                 align 10h
.text$mn:000000C0
.text$mn:000000C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000000C0
.text$mn:000000C0 ; Attributes: bp-based frame
.text$mn:000000C0
.text$mn:000000C0 ; void __thiscall nsUTF8Prober::Reset(nsUTF8Prober *__hidden this)
.text$mn:000000C0                 public ?Reset@nsUTF8Prober@@UAEXXZ
.text$mn:000000C0 ?Reset@nsUTF8Prober@@UAEXXZ proc near
.text$mn:000000C0
.text$mn:000000C0 var_4           = dword ptr -4
.text$mn:000000C0
.text$mn:000000C0                 push    ebp
.text$mn:000000C1                 mov     ebp, esp
.text$mn:000000C3                 push    ecx
.text$mn:000000C4                 mov     [ebp+var_4], ecx
.text$mn:000000C7                 mov     eax, [ebp+var_4]
.text$mn:000000CA                 mov     ecx, [eax+4]    ; this
.text$mn:000000CD                 call    ?Reset@nsCodingStateMachine@@QAEXXZ ; nsCodingStateMachine::Reset(void)
.text$mn:000000D2                 mov     ecx, [ebp+var_4]
.text$mn:000000D5                 mov     dword ptr [ecx+0Ch], 0
.text$mn:000000DC                 mov     edx, [ebp+var_4]
.text$mn:000000DF                 mov     dword ptr [edx+8], 0
.text$mn:000000E6                 mov     esp, ebp
.text$mn:000000E8                 pop     ebp
.text$mn:000000E9                 retn
.text$mn:000000E9 ?Reset@nsUTF8Prober@@UAEXXZ endp
.text$mn:000000E9
.text$mn:000000E9 ; ---------------------------------------------------------------------------
.text$mn:000000EA                 align 10h
.text$mn:000000F0
.text$mn:000000F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000000F0
.text$mn:000000F0 ; Attributes: bp-based frame
.text$mn:000000F0
.text$mn:000000F0 ; float __thiscall nsUTF8Prober::GetConfidence(nsUTF8Prober *__hidden this)
.text$mn:000000F0                 public ?GetConfidence@nsUTF8Prober@@UAEMXZ
.text$mn:000000F0 ?GetConfidence@nsUTF8Prober@@UAEMXZ proc near
.text$mn:000000F0
.text$mn:000000F0 var_10          = dword ptr -10h
.text$mn:000000F0 var_C           = dword ptr -0Ch
.text$mn:000000F0 var_8           = dword ptr -8
.text$mn:000000F0 var_4           = dword ptr -4
.text$mn:000000F0
.text$mn:000000F0                 push    ebp
.text$mn:000000F1                 mov     ebp, esp
.text$mn:000000F3                 sub     esp, 10h
.text$mn:000000F6                 mov     [ebp+var_C], ecx
.text$mn:000000F9                 movss   xmm0, ds:__real@3f7d70a4
.text$mn:00000101                 movss   [ebp+var_8], xmm0
.text$mn:00000106                 mov     eax, [ebp+var_C]
.text$mn:00000109                 cmp     dword ptr [eax+0Ch], 6
.text$mn:0000010D                 jnb     short loc_159
.text$mn:0000010F                 mov     [ebp+var_4], 0
.text$mn:00000116                 jmp     short loc_121
.text$mn:00000118 ; ---------------------------------------------------------------------------
.text$mn:00000118
.text$mn:00000118 loc_118:                                ; CODE XREF: nsUTF8Prober::GetConfidence(void)+4Ej
.text$mn:00000118                 mov     ecx, [ebp+var_4]
.text$mn:0000011B                 add     ecx, 1
.text$mn:0000011E                 mov     [ebp+var_4], ecx
.text$mn:00000121
.text$mn:00000121 loc_121:                                ; CODE XREF: nsUTF8Prober::GetConfidence(void)+26j
.text$mn:00000121                 mov     edx, [ebp+var_C]
.text$mn:00000124                 mov     eax, [ebp+var_4]
.text$mn:00000127                 cmp     eax, [edx+0Ch]
.text$mn:0000012A                 jnb     short loc_140
.text$mn:0000012C                 movss   xmm0, [ebp+var_8]
.text$mn:00000131                 mulss   xmm0, __real@3f000000
.text$mn:00000139                 movss   [ebp+var_8], xmm0
.text$mn:0000013E                 jmp     short loc_118
.text$mn:00000140 ; ---------------------------------------------------------------------------
.text$mn:00000140
.text$mn:00000140 loc_140:                                ; CODE XREF: nsUTF8Prober::GetConfidence(void)+3Aj
.text$mn:00000140                 movss   xmm0, ds:__real@3f800000
.text$mn:00000148                 subss   xmm0, [ebp+var_8]
.text$mn:0000014D                 movss   [ebp+var_10], xmm0
.text$mn:00000152                 fld     [ebp+var_10]
.text$mn:00000155                 jmp     short loc_15F
.text$mn:00000157 ; ---------------------------------------------------------------------------
.text$mn:00000157                 jmp     short loc_15F
.text$mn:00000159 ; ---------------------------------------------------------------------------
.text$mn:00000159
.text$mn:00000159 loc_159:                                ; CODE XREF: nsUTF8Prober::GetConfidence(void)+1Dj
.text$mn:00000159                 fld     ds:__real@3f7d70a4
.text$mn:0000015F
.text$mn:0000015F loc_15F:                                ; CODE XREF: nsUTF8Prober::GetConfidence(void)+65j
.text$mn:0000015F                                         ; nsUTF8Prober::GetConfidence(void)+67j
.text$mn:0000015F                 mov     esp, ebp
.text$mn:00000161                 pop     ebp
.text$mn:00000162                 retn
.text$mn:00000162 ?GetConfidence@nsUTF8Prober@@UAEMXZ endp
.text$mn:00000162
.text$mn:00000162 ; ---------------------------------------------------------------------------
.text$mn:00000163                 align 4
.text$mn:00000163 _text$mn        ends
.text$mn:00000163
.text$mn:00000164 ; ===========================================================================
.text$mn:00000164
.text$mn:00000164 ; Segment type: Pure code
.text$mn:00000164 ; Segment permissions: Read/Execute
.text$mn:00000164 _text$mn        segment para public 'CODE' use32
.text$mn:00000164                 assume cs:_text$mn
.text$mn:00000164                 ;org 164h
.text$mn:00000164 ; COMDAT (pick any)
.text$mn:00000164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000164
.text$mn:00000164 ; =============== S U B R O U T I N E =======================================
.text$mn:00000164
.text$mn:00000164 ; Attributes: bp-based frame
.text$mn:00000164
.text$mn:00000164 ; unsigned int __thiscall nsCodingStateMachine::GetCurrentCharLen(nsCodingStateMachine *__hidden this)
.text$mn:00000164                 public ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ
.text$mn:00000164 ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ proc near
.text$mn:00000164                                         ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+59p
.text$mn:00000164
.text$mn:00000164 var_4           = dword ptr -4
.text$mn:00000164
.text$mn:00000164                 push    ebp
.text$mn:00000165                 mov     ebp, esp
.text$mn:00000167                 push    ecx
.text$mn:00000168                 mov     [ebp+var_4], ecx
.text$mn:0000016B                 mov     eax, [ebp+var_4]
.text$mn:0000016E                 mov     eax, [eax+4]
.text$mn:00000171                 mov     esp, ebp
.text$mn:00000173                 pop     ebp
.text$mn:00000174                 retn
.text$mn:00000174 ?GetCurrentCharLen@nsCodingStateMachine@@QAEIXZ endp
.text$mn:00000174
.text$mn:00000174 ; ---------------------------------------------------------------------------
.text$mn:00000175                 align 4
.text$mn:00000175 _text$mn        ends
.text$mn:00000175
.text$mn:00000178 ; ===========================================================================
.text$mn:00000178
.text$mn:00000178 ; Segment type: Pure code
.text$mn:00000178 ; Segment permissions: Read/Execute
.text$mn:00000178 _text$mn        segment para public 'CODE' use32
.text$mn:00000178                 assume cs:_text$mn
.text$mn:00000178                 ;org 178h
.text$mn:00000178 ; COMDAT (pick any)
.text$mn:00000178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000178
.text$mn:00000178 ; =============== S U B R O U T I N E =======================================
.text$mn:00000178
.text$mn:00000178 ; Attributes: bp-based frame
.text$mn:00000178
.text$mn:00000178 ; public: enum  nsSMState __thiscall nsCodingStateMachine::NextState(char)
.text$mn:00000178                 public ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z
.text$mn:00000178 ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z proc near
.text$mn:00000178                                         ; CODE XREF: nsUTF8Prober::HandleData(char const *,uint)+33p
.text$mn:00000178
.text$mn:00000178 var_8           = dword ptr -8
.text$mn:00000178 var_4           = dword ptr -4
.text$mn:00000178 arg_0           = byte ptr  8
.text$mn:00000178
.text$mn:00000178                 push    ebp
.text$mn:00000179                 mov     ebp, esp
.text$mn:0000017B                 sub     esp, 8
.text$mn:0000017E                 push    esi
.text$mn:0000017F                 mov     [ebp+var_4], ecx
.text$mn:00000182                 mov     eax, [ebp+var_4]
.text$mn:00000185                 mov     edx, [eax+0Ch]
.text$mn:00000188                 movzx   eax, [ebp+arg_0]
.text$mn:0000018C                 mov     ecx, [ebp+var_4]
.text$mn:0000018F                 mov     ecx, [ecx+0Ch]
.text$mn:00000192                 mov     ecx, [ecx]
.text$mn:00000194                 sar     eax, cl
.text$mn:00000196                 mov     edx, [edx+10h]
.text$mn:00000199                 movzx   esi, [ebp+arg_0]
.text$mn:0000019D                 mov     ecx, [ebp+var_4]
.text$mn:000001A0                 mov     ecx, [ecx+0Ch]
.text$mn:000001A3                 and     esi, [ecx+4]
.text$mn:000001A6                 mov     ecx, [ebp+var_4]
.text$mn:000001A9                 mov     ecx, [ecx+0Ch]
.text$mn:000001AC                 mov     ecx, [ecx+8]
.text$mn:000001AF                 shl     esi, cl
.text$mn:000001B1                 mov     edx, [edx+eax*4]
.text$mn:000001B4                 mov     ecx, esi
.text$mn:000001B6                 shr     edx, cl
.text$mn:000001B8                 mov     eax, [ebp+var_4]
.text$mn:000001BB                 mov     ecx, [eax+0Ch]
.text$mn:000001BE                 and     edx, [ecx+0Ch]
.text$mn:000001C1                 mov     [ebp+var_8], edx
.text$mn:000001C4                 mov     edx, [ebp+var_4]
.text$mn:000001C7                 cmp     dword ptr [edx], 0
.text$mn:000001CA                 jnz     short loc_1EB
.text$mn:000001CC                 mov     eax, [ebp+var_4]
.text$mn:000001CF                 mov     dword ptr [eax+8], 0
.text$mn:000001D6                 mov     ecx, [ebp+var_4]
.text$mn:000001D9                 mov     edx, [ecx+0Ch]
.text$mn:000001DC                 mov     eax, [edx+2Ch]
.text$mn:000001DF                 mov     ecx, [ebp+var_4]
.text$mn:000001E2                 mov     edx, [ebp+var_8]
.text$mn:000001E5                 mov     eax, [eax+edx*4]
.text$mn:000001E8                 mov     [ecx+4], eax
.text$mn:000001EB
.text$mn:000001EB loc_1EB:                                ; CODE XREF: nsCodingStateMachine::NextState(char)+52j
.text$mn:000001EB                 mov     ecx, [ebp+var_4]
.text$mn:000001EE                 mov     edx, [ecx+0Ch]
.text$mn:000001F1                 mov     eax, [ebp+var_4]
.text$mn:000001F4                 mov     ecx, [eax+0Ch]
.text$mn:000001F7                 mov     eax, [ebp+var_4]
.text$mn:000001FA                 mov     eax, [eax]
.text$mn:000001FC                 imul    eax, [ecx+14h]
.text$mn:00000200                 add     eax, [ebp+var_8]
.text$mn:00000203                 mov     ecx, [ebp+var_4]
.text$mn:00000206                 mov     ecx, [ecx+0Ch]
.text$mn:00000209                 mov     ecx, [ecx+18h]
.text$mn:0000020C                 shr     eax, cl
.text$mn:0000020E                 mov     edx, [edx+28h]
.text$mn:00000211                 mov     ecx, [ebp+var_4]
.text$mn:00000214                 mov     ecx, [ecx+0Ch]
.text$mn:00000217                 mov     esi, [ebp+var_4]
.text$mn:0000021A                 mov     esi, [esi]
.text$mn:0000021C                 imul    esi, [ecx+14h]
.text$mn:00000220                 add     esi, [ebp+var_8]
.text$mn:00000223                 mov     ecx, [ebp+var_4]
.text$mn:00000226                 mov     ecx, [ecx+0Ch]
.text$mn:00000229                 and     esi, [ecx+1Ch]
.text$mn:0000022C                 mov     ecx, [ebp+var_4]
.text$mn:0000022F                 mov     ecx, [ecx+0Ch]
.text$mn:00000232                 mov     ecx, [ecx+20h]
.text$mn:00000235                 shl     esi, cl
.text$mn:00000237                 mov     edx, [edx+eax*4]
.text$mn:0000023A                 mov     ecx, esi
.text$mn:0000023C                 shr     edx, cl
.text$mn:0000023E                 mov     eax, [ebp+var_4]
.text$mn:00000241                 mov     ecx, [eax+0Ch]
.text$mn:00000244                 and     edx, [ecx+24h]
.text$mn:00000247                 mov     eax, [ebp+var_4]
.text$mn:0000024A                 mov     [eax], edx
.text$mn:0000024C                 mov     ecx, [ebp+var_4]
.text$mn:0000024F                 mov     edx, [ecx+8]
.text$mn:00000252                 add     edx, 1
.text$mn:00000255                 mov     eax, [ebp+var_4]
.text$mn:00000258                 mov     [eax+8], edx
.text$mn:0000025B                 mov     ecx, [ebp+var_4]
.text$mn:0000025E                 mov     eax, [ecx]
.text$mn:00000260                 pop     esi
.text$mn:00000261                 mov     esp, ebp
.text$mn:00000263                 pop     ebp
.text$mn:00000264                 retn    4
.text$mn:00000264 ?NextState@nsCodingStateMachine@@QAE?AW4nsSMState@@D@Z endp
.text$mn:00000264
.text$mn:00000264 ; ---------------------------------------------------------------------------
.text$mn:00000267                 align 4
.text$mn:00000267 _text$mn        ends
.text$mn:00000267
.text$mn:00000268 ; ===========================================================================
.text$mn:00000268
.text$mn:00000268 ; Segment type: Pure code
.text$mn:00000268 ; Segment permissions: Read/Execute
.text$mn:00000268 _text$mn        segment para public 'CODE' use32
.text$mn:00000268                 assume cs:_text$mn
.text$mn:00000268                 ;org 268h
.text$mn:00000268 ; COMDAT (pick any)
.text$mn:00000268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000268
.text$mn:00000268 ; =============== S U B R O U T I N E =======================================
.text$mn:00000268
.text$mn:00000268 ; Attributes: bp-based frame
.text$mn:00000268
.text$mn:00000268 ; void __thiscall nsCodingStateMachine::Reset(nsCodingStateMachine *__hidden this)
.text$mn:00000268                 public ?Reset@nsCodingStateMachine@@QAEXXZ
.text$mn:00000268 ?Reset@nsCodingStateMachine@@QAEXXZ proc near
.text$mn:00000268                                         ; CODE XREF: nsUTF8Prober::Reset(void)+Dp
.text$mn:00000268
.text$mn:00000268 var_4           = dword ptr -4
.text$mn:00000268
.text$mn:00000268                 push    ebp
.text$mn:00000269                 mov     ebp, esp
.text$mn:0000026B                 push    ecx
.text$mn:0000026C                 mov     [ebp+var_4], ecx
.text$mn:0000026F                 mov     eax, [ebp+var_4]
.text$mn:00000272                 mov     dword ptr [eax], 0
.text$mn:00000278                 mov     esp, ebp
.text$mn:0000027A                 pop     ebp
.text$mn:0000027B                 retn
.text$mn:0000027B ?Reset@nsCodingStateMachine@@QAEXXZ endp
.text$mn:0000027B
.text$mn:0000027B _text$mn        ends
.text$mn:0000027B
.rdata:0000027C ; ===========================================================================
.rdata:0000027C
.rdata:0000027C ; Segment type: Pure data
.rdata:0000027C ; Segment permissions: Read
.rdata:0000027C _rdata          segment dword public 'DATA' use32
.rdata:0000027C                 assume cs:_rdata
.rdata:0000027C                 ;org 27Ch
.rdata:0000027C ; COMDAT (pick any)
.rdata:0000027C                 public __real@3f000000
.rdata:0000027C __real@3f000000 dd 3F000000h            ; DATA XREF: nsUTF8Prober::GetConfidence(void)+41r
.rdata:0000027C _rdata          ends
.rdata:0000027C
.rdata:00000280 ; ===========================================================================
.rdata:00000280
.rdata:00000280 ; Segment type: Pure data
.rdata:00000280 ; Segment permissions: Read
.rdata:00000280 _rdata          segment dword public 'DATA' use32
.rdata:00000280                 assume cs:_rdata
.rdata:00000280                 ;org 280h
.rdata:00000280 ; COMDAT (pick any)
.rdata:00000280                 public __real@3f733333
.rdata:00000280 __real@3f733333 dd 3F733333h            ; DATA XREF: nsUTF8Prober::HandleData(char const *,uint)+92r
.rdata:00000280 _rdata          ends
.rdata:00000280
.rdata:00000284 ; ===========================================================================
.rdata:00000284
.rdata:00000284 ; Segment type: Pure data
.rdata:00000284 ; Segment permissions: Read
.rdata:00000284 _rdata          segment dword public 'DATA' use32
.rdata:00000284                 assume cs:_rdata
.rdata:00000284                 ;org 284h
.rdata:00000284 ; COMDAT (pick any)
.rdata:00000284                 public __real@3f7d70a4
.rdata:00000284 __real@3f7d70a4 dd 3F7D70A4h            ; DATA XREF: nsUTF8Prober::GetConfidence(void)+9r
.rdata:00000284                                         ; nsUTF8Prober::GetConfidence(void):loc_159r
.rdata:00000284 _rdata          ends
.rdata:00000284
.rdata:00000288 ; ===========================================================================
.rdata:00000288
.rdata:00000288 ; Segment type: Pure data
.rdata:00000288 ; Segment permissions: Read
.rdata:00000288 _rdata          segment dword public 'DATA' use32
.rdata:00000288                 assume cs:_rdata
.rdata:00000288                 ;org 288h
.rdata:00000288 ; COMDAT (pick any)
.rdata:00000288                 public __real@3f800000
.rdata:00000288 __real@3f800000 dd 3F800000h            ; DATA XREF: nsUTF8Prober::GetConfidence(void):loc_140r
.rdata:00000288 _rdata          ends
.rdata:00000288
UNDEF:00000290 ; ===========================================================================
UNDEF:00000290
UNDEF:00000290 ; Segment type: Externs
UNDEF:00000290 ; UNDEF
UNDEF:00000290                 extrn __fltused:near
UNDEF:00000290
UNDEF:00000290
UNDEF:00000290                 end