.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 7B3E8E538F6756B5AFA87F3B36C167BA
.rdata:00000000 ; Input CRC32 : 238BAC49
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\Win32Exception.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG64999        db 'Access violation',0 ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+8Do
.rdata:00000011                 align 4
.rdata:00000014 $SG65003        db 'Division by zero',0 ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+99o
.rdata:00000025                 align 4
.rdata:00000028 $SG65005        db 'Unlisted exception',0
.rdata:00000028                                         ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+A5o
.rdata:0000003B                 align 4
.rdata:0000003B _rdata          ends
.rdata:0000003B
.text$mn:0000003C ; ===========================================================================
.text$mn:0000003C
.text$mn:0000003C ; Segment type: Pure code
.text$mn:0000003C ; Segment permissions: Read/Execute
.text$mn:0000003C _text$mn        segment para public 'CODE' use32
.text$mn:0000003C                 assume cs:_text$mn
.text$mn:0000003C                 ;org 3Ch
.text$mn:0000003C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000003C
.text$mn:0000003C ; =============== S U B R O U T I N E =======================================
.text$mn:0000003C
.text$mn:0000003C ; Attributes: bp-based frame
.text$mn:0000003C
.text$mn:0000003C ; void __cdecl Win32Exception::installHandler()
.text$mn:0000003C                 public ?installHandler@Win32Exception@@SAXXZ
.text$mn:0000003C ?installHandler@Win32Exception@@SAXXZ proc near
.text$mn:0000003C                 push    ebp
.text$mn:0000003D                 mov     ebp, esp
.text$mn:0000003F                 push    offset ?translate@Win32Exception@@KAXIPAU_EXCEPTION_POINTERS@@@Z ; void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)
.text$mn:00000044                 call    ?_set_se_translator@@YAP6AXIPAU_EXCEPTION_POINTERS@@@ZP6AXI0@Z@Z ; _set_se_translator(void (*)(uint,_EXCEPTION_POINTERS *))
.text$mn:00000049                 add     esp, 4
.text$mn:0000004C                 pop     ebp
.text$mn:0000004D                 retn
.text$mn:0000004D ?installHandler@Win32Exception@@SAXXZ endp
.text$mn:0000004D
.text$mn:0000004D ; ---------------------------------------------------------------------------
.text$mn:0000004E                 db 0Eh dup(0CCh)
.text$mn:0000005C
.text$mn:0000005C ; =============== S U B R O U T I N E =======================================
.text$mn:0000005C
.text$mn:0000005C ; Attributes: bp-based frame
.text$mn:0000005C
.text$mn:0000005C ; void __cdecl Win32Exception::removeHandler()
.text$mn:0000005C                 public ?removeHandler@Win32Exception@@SAXXZ
.text$mn:0000005C ?removeHandler@Win32Exception@@SAXXZ proc near
.text$mn:0000005C                 push    ebp
.text$mn:0000005D                 mov     ebp, esp
.text$mn:0000005F                 push    0               ; void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)
.text$mn:00000061                 call    ?_set_se_translator@@YAP6AXIPAU_EXCEPTION_POINTERS@@@ZP6AXI0@Z@Z ; _set_se_translator(void (*)(uint,_EXCEPTION_POINTERS *))
.text$mn:00000066                 add     esp, 4
.text$mn:00000069                 pop     ebp
.text$mn:0000006A                 retn
.text$mn:0000006A ?removeHandler@Win32Exception@@SAXXZ endp
.text$mn:0000006A
.text$mn:0000006A ; ---------------------------------------------------------------------------
.text$mn:0000006B                 align 4
.text$mn:0000006C
.text$mn:0000006C ; =============== S U B R O U T I N E =======================================
.text$mn:0000006C
.text$mn:0000006C ; Attributes: bp-based frame
.text$mn:0000006C
.text$mn:0000006C ; protected: __thiscall Win32Exception::Win32Exception(struct _EXCEPTION_POINTERS *)
.text$mn:0000006C                 public ??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z
.text$mn:0000006C ??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z proc near
.text$mn:0000006C                                         ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+3Ap
.text$mn:0000006C                                         ; Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+2Fp
.text$mn:0000006C
.text$mn:0000006C var_14          = dword ptr -14h
.text$mn:0000006C var_10          = dword ptr -10h
.text$mn:0000006C var_C           = dword ptr -0Ch
.text$mn:0000006C var_4           = dword ptr -4
.text$mn:0000006C arg_0           = dword ptr  8
.text$mn:0000006C
.text$mn:0000006C                 push    ebp
.text$mn:0000006D                 mov     ebp, esp
.text$mn:0000006F                 push    0FFFFFFFFh
.text$mn:00000071                 push    offset __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z
.text$mn:00000076                 mov     eax, large fs:0
.text$mn:0000007C                 push    eax
.text$mn:0000007D                 sub     esp, 8
.text$mn:00000080                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000085                 xor     eax, ebp
.text$mn:00000087                 push    eax
.text$mn:00000088                 lea     eax, [ebp+var_C]
.text$mn:0000008B                 mov     large fs:0, eax
.text$mn:00000091                 mov     [ebp+var_10], ecx
.text$mn:00000094                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000097                 call    ??0exception@std@@QAE@XZ ; std::exception::exception(void)
.text$mn:0000009C                 mov     [ebp+var_4], 0
.text$mn:000000A3                 mov     eax, [ebp+var_10]
.text$mn:000000A6                 mov     dword ptr [eax], offset ??_7Win32Exception@@6B@ ; const Win32Exception::`vftable'
.text$mn:000000AC                 mov     ecx, [ebp+arg_0]
.text$mn:000000AF                 mov     edx, [ecx]
.text$mn:000000B1                 mov     eax, [ebp+var_10]
.text$mn:000000B4                 mov     ecx, [edx+0Ch]
.text$mn:000000B7                 mov     [eax+10h], ecx
.text$mn:000000BA                 mov     edx, [ebp+arg_0]
.text$mn:000000BD                 mov     eax, [edx]
.text$mn:000000BF                 mov     ecx, [ebp+var_10]
.text$mn:000000C2                 mov     edx, [eax]
.text$mn:000000C4                 mov     [ecx+14h], edx
.text$mn:000000C7                 mov     eax, [ebp+var_10]
.text$mn:000000CA                 mov     ecx, [ebp+arg_0]
.text$mn:000000CD                 mov     [eax+18h], ecx
.text$mn:000000D0                 mov     edx, [ebp+var_10]
.text$mn:000000D3                 mov     eax, [edx+14h]
.text$mn:000000D6                 mov     [ebp+var_14], eax
.text$mn:000000D9                 cmp     [ebp+var_14], 0C0000005h
.text$mn:000000E0                 jz      short loc_F6
.text$mn:000000E2                 cmp     [ebp+var_14], 0C000008Eh
.text$mn:000000E9                 jz      short loc_102
.text$mn:000000EB                 cmp     [ebp+var_14], 0C0000094h
.text$mn:000000F2                 jz      short loc_102
.text$mn:000000F4                 jmp     short loc_10E
.text$mn:000000F6 ; ---------------------------------------------------------------------------
.text$mn:000000F6
.text$mn:000000F6 loc_F6:                                 ; CODE XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+74j
.text$mn:000000F6                 mov     ecx, [ebp+var_10]
.text$mn:000000F9                 mov     dword ptr [ecx+0Ch], offset $SG64999 ; "Access violation"
.text$mn:00000100                 jmp     short loc_118
.text$mn:00000102 ; ---------------------------------------------------------------------------
.text$mn:00000102
.text$mn:00000102 loc_102:                                ; CODE XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+7Dj
.text$mn:00000102                                         ; Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+86j
.text$mn:00000102                 mov     edx, [ebp+var_10]
.text$mn:00000105                 mov     dword ptr [edx+0Ch], offset $SG65003 ; "Division by zero"
.text$mn:0000010C                 jmp     short loc_118
.text$mn:0000010E ; ---------------------------------------------------------------------------
.text$mn:0000010E
.text$mn:0000010E loc_10E:                                ; CODE XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+88j
.text$mn:0000010E                 mov     eax, [ebp+var_10]
.text$mn:00000111                 mov     dword ptr [eax+0Ch], offset $SG65005 ; "Unlisted exception"
.text$mn:00000118
.text$mn:00000118 loc_118:                                ; CODE XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+94j
.text$mn:00000118                                         ; Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+A0j
.text$mn:00000118                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000011F                 mov     eax, [ebp+var_10]
.text$mn:00000122                 mov     ecx, [ebp+var_C]
.text$mn:00000125                 mov     large fs:0, ecx
.text$mn:0000012C                 pop     ecx
.text$mn:0000012D                 mov     esp, ebp
.text$mn:0000012F                 pop     ebp
.text$mn:00000130                 retn    4
.text$mn:00000130 ??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z endp
.text$mn:00000130
.text$mn:00000130 ; ---------------------------------------------------------------------------
.text$mn:00000133                 db 9 dup(0CCh)
.text$mn:0000013C
.text$mn:0000013C ; =============== S U B R O U T I N E =======================================
.text$mn:0000013C
.text$mn:0000013C ; Attributes: noreturn bp-based frame
.text$mn:0000013C
.text$mn:0000013C ; void __cdecl Win32Exception::translate(unsigned int, struct _EXCEPTION_POINTERS *)
.text$mn:0000013C                 public ?translate@Win32Exception@@KAXIPAU_EXCEPTION_POINTERS@@@Z
.text$mn:0000013C ?translate@Win32Exception@@KAXIPAU_EXCEPTION_POINTERS@@@Z proc near
.text$mn:0000013C                                         ; DATA XREF: Win32Exception::installHandler(void)+3o
.text$mn:0000013C
.text$mn:0000013C var_44          = byte ptr -44h
.text$mn:0000013C var_20          = byte ptr -20h
.text$mn:0000013C var_4           = dword ptr -4
.text$mn:0000013C arg_0           = dword ptr  8
.text$mn:0000013C arg_4           = dword ptr  0Ch
.text$mn:0000013C
.text$mn:0000013C                 push    ebp
.text$mn:0000013D                 mov     ebp, esp
.text$mn:0000013F                 sub     esp, 44h
.text$mn:00000142                 mov     eax, [ebp+arg_0]
.text$mn:00000145                 mov     [ebp+var_4], eax
.text$mn:00000148                 cmp     [ebp+var_4], 0C0000005h
.text$mn:0000014F                 jz      short loc_153
.text$mn:00000151                 jmp     short loc_16F
.text$mn:00000153 ; ---------------------------------------------------------------------------
.text$mn:00000153
.text$mn:00000153 loc_153:                                ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+13j
.text$mn:00000153                 mov     ecx, [ebp+arg_4]
.text$mn:00000156                 push    ecx             ; struct _EXCEPTION_POINTERS *
.text$mn:00000157                 lea     ecx, [ebp+var_44] ; this
.text$mn:0000015A                 call    ??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z ; Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)
.text$mn:0000015F                 push    offset __TI3?AVWin32AccessViolation@@
.text$mn:00000164                 lea     edx, [ebp+var_44]
.text$mn:00000167                 push    edx
.text$mn:00000168                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000016D ; ---------------------------------------------------------------------------
.text$mn:0000016D                 jmp     short loc_189
.text$mn:0000016F ; ---------------------------------------------------------------------------
.text$mn:0000016F
.text$mn:0000016F loc_16F:                                ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+15j
.text$mn:0000016F                 mov     eax, [ebp+arg_4]
.text$mn:00000172                 push    eax
.text$mn:00000173                 lea     ecx, [ebp+var_20]
.text$mn:00000176                 call    ??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z ; Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)
.text$mn:0000017B                 push    offset __TI2?AVWin32Exception@@
.text$mn:00000180                 lea     ecx, [ebp+var_20]
.text$mn:00000183                 push    ecx
.text$mn:00000184                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00000189 ; ---------------------------------------------------------------------------
.text$mn:00000189
.text$mn:00000189 loc_189:                                ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+31j
.text$mn:00000189                 mov     esp, ebp
.text$mn:0000018B                 pop     ebp
.text$mn:0000018C                 retn
.text$mn:0000018C ?translate@Win32Exception@@KAXIPAU_EXCEPTION_POINTERS@@@Z endp
.text$mn:0000018C
.text$mn:0000018C ; ---------------------------------------------------------------------------
.text$mn:0000018D                 db 0Fh dup(0CCh)
.text$mn:0000019C
.text$mn:0000019C ; =============== S U B R O U T I N E =======================================
.text$mn:0000019C
.text$mn:0000019C ; Attributes: bp-based frame
.text$mn:0000019C
.text$mn:0000019C ; _DWORD __thiscall Win32AccessViolation::Win32AccessViolation(Win32AccessViolation *this, struct _EXCEPTION_POINTERS *)
.text$mn:0000019C                 public ??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z
.text$mn:0000019C ??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z proc near
.text$mn:0000019C                                         ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+1Ep
.text$mn:0000019C
.text$mn:0000019C var_14          = dword ptr -14h
.text$mn:0000019C var_10          = dword ptr -10h
.text$mn:0000019C var_C           = dword ptr -0Ch
.text$mn:0000019C var_4           = dword ptr -4
.text$mn:0000019C arg_0           = dword ptr  8
.text$mn:0000019C
.text$mn:0000019C                 push    ebp
.text$mn:0000019D                 mov     ebp, esp
.text$mn:0000019F                 push    0FFFFFFFFh
.text$mn:000001A1                 push    offset __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z
.text$mn:000001A6                 mov     eax, large fs:0
.text$mn:000001AC                 push    eax
.text$mn:000001AD                 sub     esp, 8
.text$mn:000001B0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000001B5                 xor     eax, ebp
.text$mn:000001B7                 push    eax
.text$mn:000001B8                 lea     eax, [ebp+var_C]
.text$mn:000001BB                 mov     large fs:0, eax
.text$mn:000001C1                 mov     [ebp+var_10], ecx
.text$mn:000001C4                 mov     eax, [ebp+arg_0]
.text$mn:000001C7                 push    eax
.text$mn:000001C8                 mov     ecx, [ebp+var_10]
.text$mn:000001CB                 call    ??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z ; Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)
.text$mn:000001D0                 mov     [ebp+var_4], 0
.text$mn:000001D7                 mov     ecx, [ebp+var_10]
.text$mn:000001DA                 mov     dword ptr [ecx], offset ??_7Win32AccessViolation@@6B@ ; const Win32AccessViolation::`vftable'
.text$mn:000001E0                 mov     edx, [ebp+arg_0]
.text$mn:000001E3                 mov     eax, [edx]
.text$mn:000001E5                 mov     ecx, 4
.text$mn:000001EA                 imul    edx, ecx, 0
.text$mn:000001ED                 cmp     dword ptr [eax+edx+14h], 1
.text$mn:000001F2                 jnz     short loc_1FD
.text$mn:000001F4                 mov     [ebp+var_14], 1
.text$mn:000001FB                 jmp     short loc_204
.text$mn:000001FD ; ---------------------------------------------------------------------------
.text$mn:000001FD
.text$mn:000001FD loc_1FD:                                ; CODE XREF: Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+56j
.text$mn:000001FD                 mov     [ebp+var_14], 0
.text$mn:00000204
.text$mn:00000204 loc_204:                                ; CODE XREF: Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+5Fj
.text$mn:00000204                 mov     eax, [ebp+var_10]
.text$mn:00000207                 mov     cl, byte ptr [ebp+var_14]
.text$mn:0000020A                 mov     [eax+1Ch], cl
.text$mn:0000020D                 mov     edx, [ebp+arg_0]
.text$mn:00000210                 mov     eax, [edx]
.text$mn:00000212                 mov     ecx, 4
.text$mn:00000217                 shl     ecx, 0
.text$mn:0000021A                 mov     edx, [ebp+var_10]
.text$mn:0000021D                 mov     eax, [eax+ecx+14h]
.text$mn:00000221                 mov     [edx+20h], eax
.text$mn:00000224                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000022B                 mov     eax, [ebp+var_10]
.text$mn:0000022E                 mov     ecx, [ebp+var_C]
.text$mn:00000231                 mov     large fs:0, ecx
.text$mn:00000238                 pop     ecx
.text$mn:00000239                 mov     esp, ebp
.text$mn:0000023B                 pop     ebp
.text$mn:0000023C                 retn    4
.text$mn:0000023C ??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z endp
.text$mn:0000023C
.text$mn:0000023C ; ---------------------------------------------------------------------------
.text$mn:0000023F                 align 10h
.text$mn:0000023F _text$mn        ends
.text$mn:0000023F
.text$x:00000240 ; ===========================================================================
.text$x:00000240
.text$x:00000240 ; Segment type: Pure code
.text$x:00000240 ; Segment permissions: Read/Execute
.text$x:00000240 _text$x         segment para public 'CODE' use32
.text$x:00000240                 assume cs:_text$x
.text$x:00000240                 ;org 240h
.text$x:00000240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000240
.text$x:00000240 ; =============== S U B R O U T I N E =======================================
.text$x:00000240
.text$x:00000240
.text$x:00000240 __unwindfunclet$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z$0 proc near
.text$x:00000240                                         ; DATA XREF: .xdata$x:00000530o
.text$x:00000240                 mov     ecx, [ebp-10h]  ; this
.text$x:00000243                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00000243 __unwindfunclet$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z$0 endp
.text$x:00000243
.text$x:00000248
.text$x:00000248 ; =============== S U B R O U T I N E =======================================
.text$x:00000248
.text$x:00000248
.text$x:00000248 __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z proc near
.text$x:00000248                                         ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+5o
.text$x:00000248
.text$x:00000248 arg_4           = dword ptr  8
.text$x:00000248
.text$x:00000248                 mov     edx, [esp+arg_4]
.text$x:0000024C                 lea     eax, [edx+0Ch]
.text$x:0000024F                 mov     ecx, [edx-0Ch]
.text$x:00000252                 xor     ecx, eax
.text$x:00000254                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000259                 mov     eax, offset __ehfuncinfo$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z
.text$x:0000025E                 jmp     ___CxxFrameHandler3
.text$x:0000025E __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z endp
.text$x:0000025E
.text$x:00000263
.text$x:00000263 ; =============== S U B R O U T I N E =======================================
.text$x:00000263
.text$x:00000263
.text$x:00000263 __unwindfunclet$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z$0 proc near
.text$x:00000263                                         ; DATA XREF: .xdata$x:00000528o
.text$x:00000263                 mov     ecx, [ebp-10h]  ; this
.text$x:00000266                 jmp     ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.text$x:00000266 __unwindfunclet$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z$0 endp
.text$x:00000266
.text$x:0000026B
.text$x:0000026B ; =============== S U B R O U T I N E =======================================
.text$x:0000026B
.text$x:0000026B
.text$x:0000026B __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z proc near
.text$x:0000026B                                         ; DATA XREF: Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+5o
.text$x:0000026B
.text$x:0000026B arg_4           = dword ptr  8
.text$x:0000026B
.text$x:0000026B                 mov     edx, [esp+arg_4]
.text$x:0000026F                 lea     eax, [edx+0Ch]
.text$x:00000272                 mov     ecx, [edx-0Ch]
.text$x:00000275                 xor     ecx, eax
.text$x:00000277                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000027C                 mov     eax, offset __ehfuncinfo$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z
.text$x:00000281                 jmp     ___CxxFrameHandler3
.text$x:00000281 __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z endp
.text$x:00000281
.text$x:00000281 ; ---------------------------------------------------------------------------
.text$x:00000286                 align 4
.text$x:00000286 _text$x         ends
.text$x:00000286
.text$mn:00000288 ; ===========================================================================
.text$mn:00000288
.text$mn:00000288 ; Segment type: Pure code
.text$mn:00000288 ; Segment permissions: Read/Execute
.text$mn:00000288 _text$mn        segment para public 'CODE' use32
.text$mn:00000288                 assume cs:_text$mn
.text$mn:00000288                 ;org 288h
.text$mn:00000288 ; COMDAT (pick any)
.text$mn:00000288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000288
.text$mn:00000288 ; =============== S U B R O U T I N E =======================================
.text$mn:00000288
.text$mn:00000288 ; Attributes: bp-based frame
.text$mn:00000288
.text$mn:00000288 ; int __stdcall Win32AccessViolation::Win32AccessViolation(struct std::exception *)
.text$mn:00000288                 public ??0Win32AccessViolation@@QAE@ABV0@@Z
.text$mn:00000288 ??0Win32AccessViolation@@QAE@ABV0@@Z proc near
.text$mn:00000288                                         ; DATA XREF: .xdata$x:000006A0o
.text$mn:00000288
.text$mn:00000288 var_10          = dword ptr -10h
.text$mn:00000288 var_C           = dword ptr -0Ch
.text$mn:00000288 var_4           = dword ptr -4
.text$mn:00000288 arg_0           = dword ptr  8
.text$mn:00000288
.text$mn:00000288                 push    ebp
.text$mn:00000289                 mov     ebp, esp
.text$mn:0000028B                 push    0FFFFFFFFh
.text$mn:0000028D                 push    offset __ehhandler$??0Win32AccessViolation@@QAE@ABV0@@Z
.text$mn:00000292                 mov     eax, large fs:0
.text$mn:00000298                 push    eax
.text$mn:00000299                 push    ecx
.text$mn:0000029A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000029F                 xor     eax, ebp
.text$mn:000002A1                 push    eax
.text$mn:000002A2                 lea     eax, [ebp+var_C]
.text$mn:000002A5                 mov     large fs:0, eax
.text$mn:000002AB                 mov     [ebp+var_10], ecx
.text$mn:000002AE                 mov     eax, [ebp+arg_0]
.text$mn:000002B1                 push    eax             ; struct std::exception *
.text$mn:000002B2                 mov     ecx, [ebp+var_10]
.text$mn:000002B5                 call    ??0Win32Exception@@QAE@ABV0@@Z ; Win32Exception::Win32Exception(Win32Exception const &)
.text$mn:000002BA                 mov     [ebp+var_4], 0
.text$mn:000002C1                 mov     ecx, [ebp+var_10]
.text$mn:000002C4                 mov     dword ptr [ecx], offset ??_7Win32AccessViolation@@6B@ ; const Win32AccessViolation::`vftable'
.text$mn:000002CA                 mov     edx, [ebp+var_10]
.text$mn:000002CD                 mov     eax, [ebp+arg_0]
.text$mn:000002D0                 mov     cl, [eax+1Ch]
.text$mn:000002D3                 mov     [edx+1Ch], cl
.text$mn:000002D6                 mov     edx, [ebp+var_10]
.text$mn:000002D9                 mov     eax, [ebp+arg_0]
.text$mn:000002DC                 mov     ecx, [eax+20h]
.text$mn:000002DF                 mov     [edx+20h], ecx
.text$mn:000002E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000002E9                 mov     eax, [ebp+var_10]
.text$mn:000002EC                 mov     ecx, [ebp+var_C]
.text$mn:000002EF                 mov     large fs:0, ecx
.text$mn:000002F6                 pop     ecx
.text$mn:000002F7                 mov     esp, ebp
.text$mn:000002F9                 pop     ebp
.text$mn:000002FA                 retn    4
.text$mn:000002FA ??0Win32AccessViolation@@QAE@ABV0@@Z endp
.text$mn:000002FA
.text$mn:000002FA ; ---------------------------------------------------------------------------
.text$mn:000002FD                 align 10h
.text$mn:000002FD _text$mn        ends
.text$mn:000002FD
.text$x:00000300 ; ===========================================================================
.text$x:00000300
.text$x:00000300 ; Segment type: Pure code
.text$x:00000300 ; Segment permissions: Read/Execute
.text$x:00000300 _text$x         segment para public 'CODE' use32
.text$x:00000300                 assume cs:_text$x
.text$x:00000300                 ;org 300h
.text$x:00000300 ; COMDAT (pick associative to section at 288)
.text$x:00000300                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000300
.text$x:00000300 ; =============== S U B R O U T I N E =======================================
.text$x:00000300
.text$x:00000300
.text$x:00000300 __unwindfunclet$??0Win32AccessViolation@@QAE@ABV0@@Z$0 proc near
.text$x:00000300                                         ; DATA XREF: .xdata$x:00000604o
.text$x:00000300                 mov     ecx, [ebp-10h]  ; this
.text$x:00000303                 jmp     ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.text$x:00000303 __unwindfunclet$??0Win32AccessViolation@@QAE@ABV0@@Z$0 endp
.text$x:00000303
.text$x:00000308
.text$x:00000308 ; =============== S U B R O U T I N E =======================================
.text$x:00000308
.text$x:00000308
.text$x:00000308 __ehhandler$??0Win32AccessViolation@@QAE@ABV0@@Z proc near
.text$x:00000308                                         ; DATA XREF: Win32AccessViolation::Win32AccessViolation(Win32AccessViolation const &)+5o
.text$x:00000308
.text$x:00000308 arg_4           = dword ptr  8
.text$x:00000308
.text$x:00000308                 mov     edx, [esp+arg_4]
.text$x:0000030C                 lea     eax, [edx+0Ch]
.text$x:0000030F                 mov     ecx, [edx-8]
.text$x:00000312                 xor     ecx, eax
.text$x:00000314                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000319                 mov     eax, offset __ehfuncinfo$??0Win32AccessViolation@@QAE@ABV0@@Z
.text$x:0000031E                 jmp     ___CxxFrameHandler3
.text$x:0000031E __ehhandler$??0Win32AccessViolation@@QAE@ABV0@@Z endp
.text$x:0000031E
.text$x:0000031E ; ---------------------------------------------------------------------------
.text$x:00000323                 align 4
.text$x:00000323 _text$x         ends
.text$x:00000323
.text$mn:00000324 ; ===========================================================================
.text$mn:00000324
.text$mn:00000324 ; Segment type: Pure code
.text$mn:00000324 ; Segment permissions: Read/Execute
.text$mn:00000324 _text$mn        segment para public 'CODE' use32
.text$mn:00000324                 assume cs:_text$mn
.text$mn:00000324                 ;org 324h
.text$mn:00000324 ; COMDAT (pick any)
.text$mn:00000324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000324
.text$mn:00000324 ; =============== S U B R O U T I N E =======================================
.text$mn:00000324
.text$mn:00000324 ; Attributes: bp-based frame
.text$mn:00000324
.text$mn:00000324 ; int __stdcall Win32Exception::Win32Exception(struct std::exception *)
.text$mn:00000324                 public ??0Win32Exception@@QAE@ABV0@@Z
.text$mn:00000324 ??0Win32Exception@@QAE@ABV0@@Z proc near
.text$mn:00000324                                         ; CODE XREF: Win32AccessViolation::Win32AccessViolation(Win32AccessViolation const &)+2Dp
.text$mn:00000324                                         ; DATA XREF: .xdata$x:000006DCo
.text$mn:00000324
.text$mn:00000324 var_10          = dword ptr -10h
.text$mn:00000324 var_C           = dword ptr -0Ch
.text$mn:00000324 var_4           = dword ptr -4
.text$mn:00000324 arg_0           = dword ptr  8
.text$mn:00000324
.text$mn:00000324                 push    ebp
.text$mn:00000325                 mov     ebp, esp
.text$mn:00000327                 push    0FFFFFFFFh
.text$mn:00000329                 push    offset __ehhandler$??0Win32Exception@@QAE@ABV0@@Z
.text$mn:0000032E                 mov     eax, large fs:0
.text$mn:00000334                 push    eax
.text$mn:00000335                 push    ecx
.text$mn:00000336                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000033B                 xor     eax, ebp
.text$mn:0000033D                 push    eax
.text$mn:0000033E                 lea     eax, [ebp+var_C]
.text$mn:00000341                 mov     large fs:0, eax
.text$mn:00000347                 mov     [ebp+var_10], ecx
.text$mn:0000034A                 mov     eax, [ebp+arg_0]
.text$mn:0000034D                 push    eax             ; struct std::exception *
.text$mn:0000034E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000351                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:00000356                 mov     [ebp+var_4], 0
.text$mn:0000035D                 mov     ecx, [ebp+var_10]
.text$mn:00000360                 mov     dword ptr [ecx], offset ??_7Win32Exception@@6B@ ; const Win32Exception::`vftable'
.text$mn:00000366                 mov     edx, [ebp+var_10]
.text$mn:00000369                 mov     eax, [ebp+arg_0]
.text$mn:0000036C                 mov     ecx, [eax+0Ch]
.text$mn:0000036F                 mov     [edx+0Ch], ecx
.text$mn:00000372                 mov     edx, [ebp+var_10]
.text$mn:00000375                 mov     eax, [ebp+arg_0]
.text$mn:00000378                 mov     ecx, [eax+10h]
.text$mn:0000037B                 mov     [edx+10h], ecx
.text$mn:0000037E                 mov     edx, [ebp+var_10]
.text$mn:00000381                 mov     eax, [ebp+arg_0]
.text$mn:00000384                 mov     ecx, [eax+14h]
.text$mn:00000387                 mov     [edx+14h], ecx
.text$mn:0000038A                 mov     edx, [ebp+var_10]
.text$mn:0000038D                 mov     eax, [ebp+arg_0]
.text$mn:00000390                 mov     ecx, [eax+18h]
.text$mn:00000393                 mov     [edx+18h], ecx
.text$mn:00000396                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000039D                 mov     eax, [ebp+var_10]
.text$mn:000003A0                 mov     ecx, [ebp+var_C]
.text$mn:000003A3                 mov     large fs:0, ecx
.text$mn:000003AA                 pop     ecx
.text$mn:000003AB                 mov     esp, ebp
.text$mn:000003AD                 pop     ebp
.text$mn:000003AE                 retn    4
.text$mn:000003AE ??0Win32Exception@@QAE@ABV0@@Z endp
.text$mn:000003AE
.text$mn:000003AE ; ---------------------------------------------------------------------------
.text$mn:000003B1                 align 4
.text$mn:000003B1 _text$mn        ends
.text$mn:000003B1
.text$x:000003B4 ; ===========================================================================
.text$x:000003B4
.text$x:000003B4 ; Segment type: Pure code
.text$x:000003B4 ; Segment permissions: Read/Execute
.text$x:000003B4 _text$x         segment para public 'CODE' use32
.text$x:000003B4                 assume cs:_text$x
.text$x:000003B4                 ;org 3B4h
.text$x:000003B4 ; COMDAT (pick associative to section at 324)
.text$x:000003B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000003B4
.text$x:000003B4 ; =============== S U B R O U T I N E =======================================
.text$x:000003B4
.text$x:000003B4
.text$x:000003B4 __unwindfunclet$??0Win32Exception@@QAE@ABV0@@Z$0 proc near
.text$x:000003B4                                         ; DATA XREF: .xdata$x:000005ACo
.text$x:000003B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000003B7                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:000003B7 __unwindfunclet$??0Win32Exception@@QAE@ABV0@@Z$0 endp
.text$x:000003B7
.text$x:000003BC
.text$x:000003BC ; =============== S U B R O U T I N E =======================================
.text$x:000003BC
.text$x:000003BC
.text$x:000003BC __ehhandler$??0Win32Exception@@QAE@ABV0@@Z proc near
.text$x:000003BC                                         ; DATA XREF: Win32Exception::Win32Exception(Win32Exception const &)+5o
.text$x:000003BC
.text$x:000003BC arg_4           = dword ptr  8
.text$x:000003BC
.text$x:000003BC                 mov     edx, [esp+arg_4]
.text$x:000003C0                 lea     eax, [edx+0Ch]
.text$x:000003C3                 mov     ecx, [edx-8]
.text$x:000003C6                 xor     ecx, eax
.text$x:000003C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000003CD                 mov     eax, offset __ehfuncinfo$??0Win32Exception@@QAE@ABV0@@Z
.text$x:000003D2                 jmp     ___CxxFrameHandler3
.text$x:000003D2 __ehhandler$??0Win32Exception@@QAE@ABV0@@Z endp
.text$x:000003D2
.text$x:000003D2 ; ---------------------------------------------------------------------------
.text$x:000003D7                 align 4
.text$x:000003D7 _text$x         ends
.text$x:000003D7
.text$mn:000003D8 ; ===========================================================================
.text$mn:000003D8
.text$mn:000003D8 ; Segment type: Pure code
.text$mn:000003D8 ; Segment permissions: Read/Execute
.text$mn:000003D8 _text$mn        segment para public 'CODE' use32
.text$mn:000003D8                 assume cs:_text$mn
.text$mn:000003D8                 ;org 3D8h
.text$mn:000003D8 ; COMDAT (pick any)
.text$mn:000003D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000003D8
.text$mn:000003D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000003D8
.text$mn:000003D8 ; Attributes: bp-based frame
.text$mn:000003D8
.text$mn:000003D8 ; _DWORD __thiscall Win32AccessViolation::~Win32AccessViolation(Win32AccessViolation *__hidden this)
.text$mn:000003D8                 public ??1Win32AccessViolation@@UAE@XZ
.text$mn:000003D8 ??1Win32AccessViolation@@UAE@XZ proc near
.text$mn:000003D8                                         ; CODE XREF: Win32AccessViolation::`scalar deleting destructor'(uint)+Ap
.text$mn:000003D8                                         ; DATA XREF: .xdata$x:00000648o
.text$mn:000003D8
.text$mn:000003D8 var_10          = dword ptr -10h
.text$mn:000003D8 var_C           = dword ptr -0Ch
.text$mn:000003D8 var_4           = dword ptr -4
.text$mn:000003D8
.text$mn:000003D8                 push    ebp
.text$mn:000003D9                 mov     ebp, esp
.text$mn:000003DB                 push    0FFFFFFFFh
.text$mn:000003DD                 push    offset __ehhandler$??1Win32AccessViolation@@UAE@XZ
.text$mn:000003E2                 mov     eax, large fs:0
.text$mn:000003E8                 push    eax
.text$mn:000003E9                 push    ecx
.text$mn:000003EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000003EF                 xor     eax, ebp
.text$mn:000003F1                 push    eax
.text$mn:000003F2                 lea     eax, [ebp+var_C]
.text$mn:000003F5                 mov     large fs:0, eax
.text$mn:000003FB                 mov     [ebp+var_10], ecx
.text$mn:000003FE                 mov     [ebp+var_4], 0
.text$mn:00000405                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000040C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000040F                 call    ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.text$mn:00000414                 mov     ecx, [ebp+var_C]
.text$mn:00000417                 mov     large fs:0, ecx
.text$mn:0000041E                 pop     ecx
.text$mn:0000041F                 mov     esp, ebp
.text$mn:00000421                 pop     ebp
.text$mn:00000422                 retn
.text$mn:00000422 ??1Win32AccessViolation@@UAE@XZ endp
.text$mn:00000422
.text$mn:00000422 ; ---------------------------------------------------------------------------
.text$mn:00000423                 align 4
.text$mn:00000423 _text$mn        ends
.text$mn:00000423
.text$x:00000424 ; ===========================================================================
.text$x:00000424
.text$x:00000424 ; Segment type: Pure code
.text$x:00000424 ; Segment permissions: Read/Execute
.text$x:00000424 _text$x         segment para public 'CODE' use32
.text$x:00000424                 assume cs:_text$x
.text$x:00000424                 ;org 424h
.text$x:00000424 ; COMDAT (pick associative to section at 3D8)
.text$x:00000424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000424
.text$x:00000424 ; =============== S U B R O U T I N E =======================================
.text$x:00000424
.text$x:00000424
.text$x:00000424 __unwindfunclet$??1Win32AccessViolation@@UAE@XZ$0 proc near
.text$x:00000424                                         ; DATA XREF: .xdata$x:000005D8o
.text$x:00000424                 mov     ecx, [ebp-10h]  ; this
.text$x:00000427                 jmp     ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.text$x:00000427 __unwindfunclet$??1Win32AccessViolation@@UAE@XZ$0 endp
.text$x:00000427
.text$x:0000042C
.text$x:0000042C ; =============== S U B R O U T I N E =======================================
.text$x:0000042C
.text$x:0000042C
.text$x:0000042C __ehhandler$??1Win32AccessViolation@@UAE@XZ proc near
.text$x:0000042C                                         ; DATA XREF: Win32AccessViolation::~Win32AccessViolation(void)+5o
.text$x:0000042C
.text$x:0000042C arg_4           = dword ptr  8
.text$x:0000042C
.text$x:0000042C                 mov     edx, [esp+arg_4]
.text$x:00000430                 lea     eax, [edx+0Ch]
.text$x:00000433                 mov     ecx, [edx-8]
.text$x:00000436                 xor     ecx, eax
.text$x:00000438                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000043D                 mov     eax, offset __ehfuncinfo$??1Win32AccessViolation@@UAE@XZ
.text$x:00000442                 jmp     ___CxxFrameHandler3
.text$x:00000442 __ehhandler$??1Win32AccessViolation@@UAE@XZ endp
.text$x:00000442
.text$x:00000442 ; ---------------------------------------------------------------------------
.text$x:00000447                 align 4
.text$x:00000447 _text$x         ends
.text$x:00000447
.text$mn:00000448 ; ===========================================================================
.text$mn:00000448
.text$mn:00000448 ; Segment type: Pure code
.text$mn:00000448 ; Segment permissions: Read/Execute
.text$mn:00000448 _text$mn        segment para public 'CODE' use32
.text$mn:00000448                 assume cs:_text$mn
.text$mn:00000448                 ;org 448h
.text$mn:00000448 ; COMDAT (pick any)
.text$mn:00000448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000448
.text$mn:00000448 ; =============== S U B R O U T I N E =======================================
.text$mn:00000448
.text$mn:00000448 ; Attributes: bp-based frame
.text$mn:00000448
.text$mn:00000448 ; _DWORD __thiscall Win32Exception::~Win32Exception(Win32Exception *__hidden this)
.text$mn:00000448                 public ??1Win32Exception@@UAE@XZ
.text$mn:00000448 ??1Win32Exception@@UAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z$0+3j
.text$mn:00000448                                         ; __unwindfunclet$??0Win32AccessViolation@@QAE@ABV0@@Z$0+3j ...
.text$mn:00000448
.text$mn:00000448 var_10          = dword ptr -10h
.text$mn:00000448 var_C           = dword ptr -0Ch
.text$mn:00000448 var_4           = dword ptr -4
.text$mn:00000448
.text$mn:00000448                 push    ebp
.text$mn:00000449                 mov     ebp, esp
.text$mn:0000044B                 push    0FFFFFFFFh
.text$mn:0000044D                 push    offset __ehhandler$??1Win32Exception@@UAE@XZ
.text$mn:00000452                 mov     eax, large fs:0
.text$mn:00000458                 push    eax
.text$mn:00000459                 push    ecx
.text$mn:0000045A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000045F                 xor     eax, ebp
.text$mn:00000461                 push    eax
.text$mn:00000462                 lea     eax, [ebp+var_C]
.text$mn:00000465                 mov     large fs:0, eax
.text$mn:0000046B                 mov     [ebp+var_10], ecx
.text$mn:0000046E                 mov     [ebp+var_4], 0
.text$mn:00000475                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000047C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000047F                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00000484                 mov     ecx, [ebp+var_C]
.text$mn:00000487                 mov     large fs:0, ecx
.text$mn:0000048E                 pop     ecx
.text$mn:0000048F                 mov     esp, ebp
.text$mn:00000491                 pop     ebp
.text$mn:00000492                 retn
.text$mn:00000492 ??1Win32Exception@@UAE@XZ endp
.text$mn:00000492
.text$mn:00000492 ; ---------------------------------------------------------------------------
.text$mn:00000493                 align 4
.text$mn:00000493 _text$mn        ends
.text$mn:00000493
.text$x:00000494 ; ===========================================================================
.text$x:00000494
.text$x:00000494 ; Segment type: Pure code
.text$x:00000494 ; Segment permissions: Read/Execute
.text$x:00000494 _text$x         segment para public 'CODE' use32
.text$x:00000494                 assume cs:_text$x
.text$x:00000494                 ;org 494h
.text$x:00000494 ; COMDAT (pick associative to section at 448)
.text$x:00000494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000494
.text$x:00000494 ; =============== S U B R O U T I N E =======================================
.text$x:00000494
.text$x:00000494
.text$x:00000494 __unwindfunclet$??1Win32Exception@@UAE@XZ$0 proc near
.text$x:00000494                                         ; DATA XREF: .xdata$x:00000580o
.text$x:00000494                 mov     ecx, [ebp-10h]  ; this
.text$x:00000497                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00000497 __unwindfunclet$??1Win32Exception@@UAE@XZ$0 endp
.text$x:00000497
.text$x:0000049C
.text$x:0000049C ; =============== S U B R O U T I N E =======================================
.text$x:0000049C
.text$x:0000049C
.text$x:0000049C __ehhandler$??1Win32Exception@@UAE@XZ proc near
.text$x:0000049C                                         ; DATA XREF: Win32Exception::~Win32Exception(void)+5o
.text$x:0000049C
.text$x:0000049C arg_4           = dword ptr  8
.text$x:0000049C
.text$x:0000049C                 mov     edx, [esp+arg_4]
.text$x:000004A0                 lea     eax, [edx+0Ch]
.text$x:000004A3                 mov     ecx, [edx-8]
.text$x:000004A6                 xor     ecx, eax
.text$x:000004A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000004AD                 mov     eax, offset __ehfuncinfo$??1Win32Exception@@UAE@XZ
.text$x:000004B2                 jmp     ___CxxFrameHandler3
.text$x:000004B2 __ehhandler$??1Win32Exception@@UAE@XZ endp
.text$x:000004B2
.text$x:000004B2 ; ---------------------------------------------------------------------------
.text$x:000004B7                 align 4
.text$x:000004B7 _text$x         ends
.text$x:000004B7
.text$mn:000004B8 ; ===========================================================================
.text$mn:000004B8
.text$mn:000004B8 ; Segment type: Pure code
.text$mn:000004B8 ; Segment permissions: Read/Execute
.text$mn:000004B8 _text$mn        segment para public 'CODE' use32
.text$mn:000004B8                 assume cs:_text$mn
.text$mn:000004B8                 ;org 4B8h
.text$mn:000004B8 ; COMDAT (pick any)
.text$mn:000004B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000004B8
.text$mn:000004B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000004B8
.text$mn:000004B8 ; Attributes: bp-based frame
.text$mn:000004B8
.text$mn:000004B8 ; public: virtual void * __thiscall Win32AccessViolation::`scalar deleting destructor'(unsigned int)
.text$mn:000004B8                 public ??_GWin32AccessViolation@@UAEPAXI@Z
.text$mn:000004B8 ??_GWin32AccessViolation@@UAEPAXI@Z proc near
.text$mn:000004B8
.text$mn:000004B8 var_4           = dword ptr -4
.text$mn:000004B8 arg_0           = dword ptr  8
.text$mn:000004B8
.text$mn:000004B8                 push    ebp
.text$mn:000004B9                 mov     ebp, esp
.text$mn:000004BB                 push    ecx
.text$mn:000004BC                 mov     [ebp+var_4], ecx
.text$mn:000004BF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000004C2                 call    ??1Win32AccessViolation@@UAE@XZ ; Win32AccessViolation::~Win32AccessViolation(void)
.text$mn:000004C7                 mov     eax, [ebp+arg_0]
.text$mn:000004CA                 and     eax, 1
.text$mn:000004CD                 jz      short loc_4DB
.text$mn:000004CF                 mov     ecx, [ebp+var_4]
.text$mn:000004D2                 push    ecx             ; void *
.text$mn:000004D3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000004D8                 add     esp, 4
.text$mn:000004DB
.text$mn:000004DB loc_4DB:                                ; CODE XREF: Win32AccessViolation::`scalar deleting destructor'(uint)+15j
.text$mn:000004DB                 mov     eax, [ebp+var_4]
.text$mn:000004DE                 mov     esp, ebp
.text$mn:000004E0                 pop     ebp
.text$mn:000004E1                 retn    4
.text$mn:000004E1 ??_GWin32AccessViolation@@UAEPAXI@Z endp
.text$mn:000004E1
.text$mn:000004E1 _text$mn        ends
.text$mn:000004E1
.text$mn:000004E4 ; ===========================================================================
.text$mn:000004E4
.text$mn:000004E4 ; Segment type: Pure code
.text$mn:000004E4 ; Segment permissions: Read/Execute
.text$mn:000004E4 _text$mn        segment para public 'CODE' use32
.text$mn:000004E4                 assume cs:_text$mn
.text$mn:000004E4                 ;org 4E4h
.text$mn:000004E4 ; COMDAT (pick any)
.text$mn:000004E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000004E4
.text$mn:000004E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000004E4
.text$mn:000004E4 ; Attributes: bp-based frame
.text$mn:000004E4
.text$mn:000004E4 ; public: virtual void * __thiscall Win32Exception::`scalar deleting destructor'(unsigned int)
.text$mn:000004E4                 public ??_GWin32Exception@@UAEPAXI@Z
.text$mn:000004E4 ??_GWin32Exception@@UAEPAXI@Z proc near
.text$mn:000004E4
.text$mn:000004E4 var_4           = dword ptr -4
.text$mn:000004E4 arg_0           = dword ptr  8
.text$mn:000004E4
.text$mn:000004E4                 push    ebp
.text$mn:000004E5                 mov     ebp, esp
.text$mn:000004E7                 push    ecx
.text$mn:000004E8                 mov     [ebp+var_4], ecx
.text$mn:000004EB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000004EE                 call    ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.text$mn:000004F3                 mov     eax, [ebp+arg_0]
.text$mn:000004F6                 and     eax, 1
.text$mn:000004F9                 jz      short loc_507
.text$mn:000004FB                 mov     ecx, [ebp+var_4]
.text$mn:000004FE                 push    ecx             ; void *
.text$mn:000004FF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000504                 add     esp, 4
.text$mn:00000507
.text$mn:00000507 loc_507:                                ; CODE XREF: Win32Exception::`scalar deleting destructor'(uint)+15j
.text$mn:00000507                 mov     eax, [ebp+var_4]
.text$mn:0000050A                 mov     esp, ebp
.text$mn:0000050C                 pop     ebp
.text$mn:0000050D                 retn    4
.text$mn:0000050D ??_GWin32Exception@@UAEPAXI@Z endp
.text$mn:0000050D
.text$mn:0000050D _text$mn        ends
.text$mn:0000050D
.text$mn:00000510 ; ===========================================================================
.text$mn:00000510
.text$mn:00000510 ; Segment type: Pure code
.text$mn:00000510 ; Segment permissions: Read/Execute
.text$mn:00000510 _text$mn        segment para public 'CODE' use32
.text$mn:00000510                 assume cs:_text$mn
.text$mn:00000510                 ;org 510h
.text$mn:00000510 ; COMDAT (pick any)
.text$mn:00000510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000510
.text$mn:00000510 ; =============== S U B R O U T I N E =======================================
.text$mn:00000510
.text$mn:00000510 ; Attributes: bp-based frame
.text$mn:00000510
.text$mn:00000510 ; const char *__thiscall Win32Exception::what(Win32Exception *__hidden this)
.text$mn:00000510                 public ?what@Win32Exception@@UBEPBDXZ
.text$mn:00000510 ?what@Win32Exception@@UBEPBDXZ proc near ; DATA XREF: .rdata:00000634o
.text$mn:00000510                                         ; .rdata:00000640o
.text$mn:00000510
.text$mn:00000510 var_4           = dword ptr -4
.text$mn:00000510
.text$mn:00000510                 push    ebp
.text$mn:00000511                 mov     ebp, esp
.text$mn:00000513                 push    ecx
.text$mn:00000514                 mov     [ebp+var_4], ecx
.text$mn:00000517                 mov     eax, [ebp+var_4]
.text$mn:0000051A                 mov     eax, [eax+0Ch]
.text$mn:0000051D                 mov     esp, ebp
.text$mn:0000051F                 pop     ebp
.text$mn:00000520                 retn
.text$mn:00000520 ?what@Win32Exception@@UBEPBDXZ endp
.text$mn:00000520
.text$mn:00000520 ; ---------------------------------------------------------------------------
.text$mn:00000521                 align 4
.text$mn:00000521 _text$mn        ends
.text$mn:00000521
.xdata$x:00000524 ; ===========================================================================
.xdata$x:00000524
.xdata$x:00000524 ; Segment type: Pure data
.xdata$x:00000524 ; Segment permissions: Read
.xdata$x:00000524 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000524                 assume cs:_xdata$x
.xdata$x:00000524                 ;org 524h
.xdata$x:00000524 __unwindtable$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z db 0FFh
.xdata$x:00000524                                         ; DATA XREF: .xdata$x:0000053Co
.xdata$x:00000525                 db 0FFh
.xdata$x:00000526                 db 0FFh
.xdata$x:00000527                 db 0FFh
.xdata$x:00000528                 dd offset __unwindfunclet$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z$0
.xdata$x:0000052C __unwindtable$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z db 0FFh
.xdata$x:0000052C                                         ; DATA XREF: .xdata$x:00000560o
.xdata$x:0000052D                 db 0FFh
.xdata$x:0000052E                 db 0FFh
.xdata$x:0000052F                 db 0FFh
.xdata$x:00000530                 dd offset __unwindfunclet$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z$0
.xdata$x:00000534 __ehfuncinfo$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z db  22h ; "
.xdata$x:00000534                                         ; DATA XREF: __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z+11o
.xdata$x:00000535                 db    5
.xdata$x:00000536                 db  93h ; ô
.xdata$x:00000537                 db  19h
.xdata$x:00000538                 db    1
.xdata$x:00000539                 db    0
.xdata$x:0000053A                 db    0
.xdata$x:0000053B                 db    0
.xdata$x:0000053C                 dd offset __unwindtable$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z
.xdata$x:00000540                 db    0
.xdata$x:00000541                 db    0
.xdata$x:00000542                 db    0
.xdata$x:00000543                 db    0
.xdata$x:00000544                 db    0
.xdata$x:00000545                 db    0
.xdata$x:00000546                 db    0
.xdata$x:00000547                 db    0
.xdata$x:00000548                 db    0
.xdata$x:00000549                 db    0
.xdata$x:0000054A                 db    0
.xdata$x:0000054B                 db    0
.xdata$x:0000054C                 db    0
.xdata$x:0000054D                 db    0
.xdata$x:0000054E                 db    0
.xdata$x:0000054F                 db    0
.xdata$x:00000550                 db    0
.xdata$x:00000551                 db    0
.xdata$x:00000552                 db    0
.xdata$x:00000553                 db    0
.xdata$x:00000554                 db    0
.xdata$x:00000555                 db    0
.xdata$x:00000556                 db    0
.xdata$x:00000557                 db    0
.xdata$x:00000558 __ehfuncinfo$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z db  22h ; "
.xdata$x:00000558                                         ; DATA XREF: __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z+11o
.xdata$x:00000559                 db    5
.xdata$x:0000055A                 db  93h ; ô
.xdata$x:0000055B                 db  19h
.xdata$x:0000055C                 db    1
.xdata$x:0000055D                 db    0
.xdata$x:0000055E                 db    0
.xdata$x:0000055F                 db    0
.xdata$x:00000560                 dd offset __unwindtable$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z
.xdata$x:00000564                 db    0
.xdata$x:00000565                 db    0
.xdata$x:00000566                 db    0
.xdata$x:00000567                 db    0
.xdata$x:00000568                 db    0
.xdata$x:00000569                 db    0
.xdata$x:0000056A                 db    0
.xdata$x:0000056B                 db    0
.xdata$x:0000056C                 db    0
.xdata$x:0000056D                 db    0
.xdata$x:0000056E                 db    0
.xdata$x:0000056F                 db    0
.xdata$x:00000570                 db    0
.xdata$x:00000571                 db    0
.xdata$x:00000572                 db    0
.xdata$x:00000573                 db    0
.xdata$x:00000574                 db    0
.xdata$x:00000575                 db    0
.xdata$x:00000576                 db    0
.xdata$x:00000577                 db    0
.xdata$x:00000578                 db    0
.xdata$x:00000579                 db    0
.xdata$x:0000057A                 db    0
.xdata$x:0000057B                 db    0
.xdata$x:0000057B _xdata$x        ends
.xdata$x:0000057B
.xdata$x:0000057C ; ===========================================================================
.xdata$x:0000057C
.xdata$x:0000057C ; Segment type: Pure data
.xdata$x:0000057C ; Segment permissions: Read
.xdata$x:0000057C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000057C                 assume cs:_xdata$x
.xdata$x:0000057C                 ;org 57Ch
.xdata$x:0000057C ; COMDAT (pick associative to section at 448)
.xdata$x:0000057C __unwindtable$??1Win32Exception@@UAE@XZ db 0FFh
.xdata$x:0000057C                                         ; DATA XREF: .xdata$x:0000058Co
.xdata$x:0000057D                 db 0FFh
.xdata$x:0000057E                 db 0FFh
.xdata$x:0000057F                 db 0FFh
.xdata$x:00000580                 dd offset __unwindfunclet$??1Win32Exception@@UAE@XZ$0
.xdata$x:00000584 __ehfuncinfo$??1Win32Exception@@UAE@XZ db  22h ; "
.xdata$x:00000584                                         ; DATA XREF: __ehhandler$??1Win32Exception@@UAE@XZ+11o
.xdata$x:00000585                 db    5
.xdata$x:00000586                 db  93h ; ô
.xdata$x:00000587                 db  19h
.xdata$x:00000588                 db    1
.xdata$x:00000589                 db    0
.xdata$x:0000058A                 db    0
.xdata$x:0000058B                 db    0
.xdata$x:0000058C                 dd offset __unwindtable$??1Win32Exception@@UAE@XZ
.xdata$x:00000590                 db    0
.xdata$x:00000591                 db    0
.xdata$x:00000592                 db    0
.xdata$x:00000593                 db    0
.xdata$x:00000594                 db    0
.xdata$x:00000595                 db    0
.xdata$x:00000596                 db    0
.xdata$x:00000597                 db    0
.xdata$x:00000598                 db    0
.xdata$x:00000599                 db    0
.xdata$x:0000059A                 db    0
.xdata$x:0000059B                 db    0
.xdata$x:0000059C                 db    0
.xdata$x:0000059D                 db    0
.xdata$x:0000059E                 db    0
.xdata$x:0000059F                 db    0
.xdata$x:000005A0                 db    0
.xdata$x:000005A1                 db    0
.xdata$x:000005A2                 db    0
.xdata$x:000005A3                 db    0
.xdata$x:000005A4                 db    0
.xdata$x:000005A5                 db    0
.xdata$x:000005A6                 db    0
.xdata$x:000005A7                 db    0
.xdata$x:000005A7 _xdata$x        ends
.xdata$x:000005A7
.xdata$x:000005A8 ; ===========================================================================
.xdata$x:000005A8
.xdata$x:000005A8 ; Segment type: Pure data
.xdata$x:000005A8 ; Segment permissions: Read
.xdata$x:000005A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000005A8                 assume cs:_xdata$x
.xdata$x:000005A8                 ;org 5A8h
.xdata$x:000005A8 ; COMDAT (pick associative to section at 324)
.xdata$x:000005A8 __unwindtable$??0Win32Exception@@QAE@ABV0@@Z db 0FFh
.xdata$x:000005A8                                         ; DATA XREF: .xdata$x:000005B8o
.xdata$x:000005A9                 db 0FFh
.xdata$x:000005AA                 db 0FFh
.xdata$x:000005AB                 db 0FFh
.xdata$x:000005AC                 dd offset __unwindfunclet$??0Win32Exception@@QAE@ABV0@@Z$0
.xdata$x:000005B0 __ehfuncinfo$??0Win32Exception@@QAE@ABV0@@Z db  22h ; "
.xdata$x:000005B0                                         ; DATA XREF: __ehhandler$??0Win32Exception@@QAE@ABV0@@Z+11o
.xdata$x:000005B1                 db    5
.xdata$x:000005B2                 db  93h ; ô
.xdata$x:000005B3                 db  19h
.xdata$x:000005B4                 db    1
.xdata$x:000005B5                 db    0
.xdata$x:000005B6                 db    0
.xdata$x:000005B7                 db    0
.xdata$x:000005B8                 dd offset __unwindtable$??0Win32Exception@@QAE@ABV0@@Z
.xdata$x:000005BC                 db    0
.xdata$x:000005BD                 db    0
.xdata$x:000005BE                 db    0
.xdata$x:000005BF                 db    0
.xdata$x:000005C0                 db    0
.xdata$x:000005C1                 db    0
.xdata$x:000005C2                 db    0
.xdata$x:000005C3                 db    0
.xdata$x:000005C4                 db    0
.xdata$x:000005C5                 db    0
.xdata$x:000005C6                 db    0
.xdata$x:000005C7                 db    0
.xdata$x:000005C8                 db    0
.xdata$x:000005C9                 db    0
.xdata$x:000005CA                 db    0
.xdata$x:000005CB                 db    0
.xdata$x:000005CC                 db    0
.xdata$x:000005CD                 db    0
.xdata$x:000005CE                 db    0
.xdata$x:000005CF                 db    0
.xdata$x:000005D0                 db    0
.xdata$x:000005D1                 db    0
.xdata$x:000005D2                 db    0
.xdata$x:000005D3                 db    0
.xdata$x:000005D3 _xdata$x        ends
.xdata$x:000005D3
.xdata$x:000005D4 ; ===========================================================================
.xdata$x:000005D4
.xdata$x:000005D4 ; Segment type: Pure data
.xdata$x:000005D4 ; Segment permissions: Read
.xdata$x:000005D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000005D4                 assume cs:_xdata$x
.xdata$x:000005D4                 ;org 5D4h
.xdata$x:000005D4 ; COMDAT (pick associative to section at 3D8)
.xdata$x:000005D4 __unwindtable$??1Win32AccessViolation@@UAE@XZ db 0FFh
.xdata$x:000005D4                                         ; DATA XREF: .xdata$x:000005E4o
.xdata$x:000005D5                 db 0FFh
.xdata$x:000005D6                 db 0FFh
.xdata$x:000005D7                 db 0FFh
.xdata$x:000005D8                 dd offset __unwindfunclet$??1Win32AccessViolation@@UAE@XZ$0
.xdata$x:000005DC __ehfuncinfo$??1Win32AccessViolation@@UAE@XZ db  22h ; "
.xdata$x:000005DC                                         ; DATA XREF: __ehhandler$??1Win32AccessViolation@@UAE@XZ+11o
.xdata$x:000005DD                 db    5
.xdata$x:000005DE                 db  93h ; ô
.xdata$x:000005DF                 db  19h
.xdata$x:000005E0                 db    1
.xdata$x:000005E1                 db    0
.xdata$x:000005E2                 db    0
.xdata$x:000005E3                 db    0
.xdata$x:000005E4                 dd offset __unwindtable$??1Win32AccessViolation@@UAE@XZ
.xdata$x:000005E8                 align 20h
.xdata$x:000005E8 _xdata$x        ends
.xdata$x:000005E8
.xdata$x:00000600 ; ===========================================================================
.xdata$x:00000600
.xdata$x:00000600 ; Segment type: Pure data
.xdata$x:00000600 ; Segment permissions: Read
.xdata$x:00000600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000600                 assume cs:_xdata$x
.xdata$x:00000600                 ;org 600h
.xdata$x:00000600 ; COMDAT (pick associative to section at 288)
.xdata$x:00000600 __unwindtable$??0Win32AccessViolation@@QAE@ABV0@@Z db 0FFh
.xdata$x:00000600                                         ; DATA XREF: .xdata$x:00000610o
.xdata$x:00000601                 db 0FFh
.xdata$x:00000602                 db 0FFh
.xdata$x:00000603                 db 0FFh
.xdata$x:00000604                 dd offset __unwindfunclet$??0Win32AccessViolation@@QAE@ABV0@@Z$0
.xdata$x:00000608 __ehfuncinfo$??0Win32AccessViolation@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00000608                                         ; DATA XREF: __ehhandler$??0Win32AccessViolation@@QAE@ABV0@@Z+11o
.xdata$x:00000609                 db    5
.xdata$x:0000060A                 db  93h ; ô
.xdata$x:0000060B                 db  19h
.xdata$x:0000060C                 db    1
.xdata$x:0000060D                 db    0
.xdata$x:0000060E                 db    0
.xdata$x:0000060F                 db    0
.xdata$x:00000610                 dd offset __unwindtable$??0Win32AccessViolation@@QAE@ABV0@@Z
.xdata$x:00000614                 db    0
.xdata$x:00000615                 db    0
.xdata$x:00000616                 db    0
.xdata$x:00000617                 db    0
.xdata$x:00000618                 db    0
.xdata$x:00000619                 db    0
.xdata$x:0000061A                 db    0
.xdata$x:0000061B                 db    0
.xdata$x:0000061C                 db    0
.xdata$x:0000061D                 db    0
.xdata$x:0000061E                 db    0
.xdata$x:0000061F                 db    0
.xdata$x:00000620                 db    0
.xdata$x:00000621                 db    0
.xdata$x:00000622                 db    0
.xdata$x:00000623                 db    0
.xdata$x:00000624                 db    0
.xdata$x:00000625                 db    0
.xdata$x:00000626                 db    0
.xdata$x:00000627                 db    0
.xdata$x:00000628                 db    0
.xdata$x:00000629                 db    0
.xdata$x:0000062A                 db    0
.xdata$x:0000062B                 db    0
.xdata$x:0000062B _xdata$x        ends
.xdata$x:0000062B
.rdata:0000062C ; ===========================================================================
.rdata:0000062C
.rdata:0000062C ; Segment type: Pure data
.rdata:0000062C ; Segment permissions: Read
.rdata:0000062C _rdata          segment dword public 'DATA' use32
.rdata:0000062C                 assume cs:_rdata
.rdata:0000062C                 ;org 62Ch
.rdata:0000062C ; COMDAT (pick largest)
.rdata:0000062C                 dd offset ??_R4Win32Exception@@6B@ ; const Win32Exception::`RTTI Complete Object Locator'
.rdata:00000630                 public ??_7Win32Exception@@6B@
.rdata:00000630 ; const Win32Exception::`vftable'
.rdata:00000630 ??_7Win32Exception@@6B@ dd offset ??_EWin32Exception@@UAEPAXI@Z
.rdata:00000630                                         ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+3Ao
.rdata:00000630                                         ; Win32Exception::Win32Exception(Win32Exception const &)+3Co
.rdata:00000630                                         ; Win32Exception::`vector deleting destructor'(uint)
.rdata:00000634                 dd offset ?what@Win32Exception@@UBEPBDXZ ; Win32Exception::what(void)
.rdata:00000634 _rdata          ends
.rdata:00000634
.rdata:00000638 ; ===========================================================================
.rdata:00000638
.rdata:00000638 ; Segment type: Pure data
.rdata:00000638 ; Segment permissions: Read
.rdata:00000638 _rdata          segment dword public 'DATA' use32
.rdata:00000638                 assume cs:_rdata
.rdata:00000638                 ;org 638h
.rdata:00000638 ; COMDAT (pick largest)
.rdata:00000638                 dd offset ??_R4Win32AccessViolation@@6B@ ; const Win32AccessViolation::`RTTI Complete Object Locator'
.rdata:0000063C                 public ??_7Win32AccessViolation@@6B@
.rdata:0000063C ; const Win32AccessViolation::`vftable'
.rdata:0000063C ??_7Win32AccessViolation@@6B@ dd offset ??_EWin32AccessViolation@@UAEPAXI@Z
.rdata:0000063C                                         ; DATA XREF: Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+3Eo
.rdata:0000063C                                         ; Win32AccessViolation::Win32AccessViolation(Win32AccessViolation const &)+3Co
.rdata:0000063C                                         ; Win32AccessViolation::`vector deleting destructor'(uint)
.rdata:00000640                 dd offset ?what@Win32Exception@@UBEPBDXZ ; Win32Exception::what(void)
.rdata:00000640 _rdata          ends
.rdata:00000640
.xdata$x:00000644 ; ===========================================================================
.xdata$x:00000644
.xdata$x:00000644 ; Segment type: Pure data
.xdata$x:00000644 ; Segment permissions: Read
.xdata$x:00000644 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000644                 assume cs:_xdata$x
.xdata$x:00000644                 ;org 644h
.xdata$x:00000644 ; COMDAT (pick any)
.xdata$x:00000644                 public __TI3?AVWin32AccessViolation@@
.xdata$x:00000644 __TI3?AVWin32AccessViolation@@ db    0  ; DATA XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+23o
.xdata$x:00000645                 db    0
.xdata$x:00000646                 db    0
.xdata$x:00000647                 db    0
.xdata$x:00000648                 dd offset ??1Win32AccessViolation@@UAE@XZ ; Win32AccessViolation::~Win32AccessViolation(void)
.xdata$x:0000064C                 align 10h
.xdata$x:00000650                 dd offset __CTA3?AVWin32AccessViolation@@
.xdata$x:00000650 _xdata$x        ends
.xdata$x:00000650
.xdata$x:00000654 ; ===========================================================================
.xdata$x:00000654
.xdata$x:00000654 ; Segment type: Pure data
.xdata$x:00000654 ; Segment permissions: Read
.xdata$x:00000654 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000654                 assume cs:_xdata$x
.xdata$x:00000654                 ;org 654h
.xdata$x:00000654 ; COMDAT (pick any)
.xdata$x:00000654                 public __CTA3?AVWin32AccessViolation@@
.xdata$x:00000654 __CTA3?AVWin32AccessViolation@@ db    3 ; DATA XREF: .xdata$x:00000650o
.xdata$x:00000655                 db    0
.xdata$x:00000656                 db    0
.xdata$x:00000657                 db    0
.xdata$x:00000658                 dd offset __CT??_R0?AVWin32AccessViolation@@@8??0Win32AccessViolation@@QAE@ABV0@@Z36
.xdata$x:0000065C                 dd offset __CT??_R0?AVWin32Exception@@@8??0Win32Exception@@QAE@ABV0@@Z28
.xdata$x:00000660                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00000660 _xdata$x        ends
.xdata$x:00000660
.data$r:00000664 ; ===========================================================================
.data$r:00000664
.data$r:00000664 ; Segment type: Pure data
.data$r:00000664 ; Segment permissions: Read/Write
.data$r:00000664 _data$r         segment dword public 'DATA' use32
.data$r:00000664                 assume cs:_data$r
.data$r:00000664                 ;org 664h
.data$r:00000664 ; COMDAT (pick any)
.data$r:00000664                 public ??_R0?AVWin32AccessViolation@@@8
.data$r:00000664 ; class Win32AccessViolation `RTTI Type Descriptor'
.data$r:00000664 ??_R0?AVWin32AccessViolation@@@8 dd offset ??_7type_info@@6B@
.data$r:00000664                                         ; DATA XREF: .xdata$x:0000068Co
.data$r:00000664                                         ; .rdata$r:000007C0o ...
.data$r:00000664                                         ; const type_info::`vftable'
.data$r:00000668                 db    0
.data$r:00000669                 db    0
.data$r:0000066A                 db    0
.data$r:0000066B                 db    0
.data$r:0000066C                 db  2Eh ; .
.data$r:0000066D                 db  3Fh ; ?
.data$r:0000066E                 db  41h ; A
.data$r:0000066F                 db  56h ; V
.data$r:00000670                 db  57h ; W
.data$r:00000671                 db  69h ; i
.data$r:00000672                 db  6Eh ; n
.data$r:00000673                 db  33h ; 3
.data$r:00000674                 db  32h ; 2
.data$r:00000675                 db  41h ; A
.data$r:00000676                 db  63h ; c
.data$r:00000677                 db  63h ; c
.data$r:00000678                 db  65h ; e
.data$r:00000679                 db  73h ; s
.data$r:0000067A                 db  73h ; s
.data$r:0000067B                 db  56h ; V
.data$r:0000067C                 db  69h ; i
.data$r:0000067D                 db  6Fh ; o
.data$r:0000067E                 db  6Ch ; l
.data$r:0000067F                 db  61h ; a
.data$r:00000680                 db  74h ; t
.data$r:00000681                 db  69h ; i
.data$r:00000682                 db  6Fh ; o
.data$r:00000683                 db  6Eh ; n
.data$r:00000684                 db  40h ; @
.data$r:00000685                 db  40h ; @
.data$r:00000686                 db    0
.data$r:00000687                 align 4
.data$r:00000687 _data$r         ends
.data$r:00000687
.xdata$x:00000688 ; ===========================================================================
.xdata$x:00000688
.xdata$x:00000688 ; Segment type: Pure data
.xdata$x:00000688 ; Segment permissions: Read
.xdata$x:00000688 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000688                 assume cs:_xdata$x
.xdata$x:00000688                 ;org 688h
.xdata$x:00000688 ; COMDAT (pick any)
.xdata$x:00000688                 public __CT??_R0?AVWin32AccessViolation@@@8??0Win32AccessViolation@@QAE@ABV0@@Z36
.xdata$x:00000688 __CT??_R0?AVWin32AccessViolation@@@8??0Win32AccessViolation@@QAE@ABV0@@Z36 db    0
.xdata$x:00000688                                         ; DATA XREF: .xdata$x:00000658o
.xdata$x:00000689                 db    0
.xdata$x:0000068A                 db    0
.xdata$x:0000068B                 db    0
.xdata$x:0000068C                 dd offset ??_R0?AVWin32AccessViolation@@@8 ; Win32AccessViolation `RTTI Type Descriptor'
.xdata$x:00000690                 db    0
.xdata$x:00000691                 db    0
.xdata$x:00000692                 db    0
.xdata$x:00000693                 db    0
.xdata$x:00000694                 db 0FFh
.xdata$x:00000695                 db 0FFh
.xdata$x:00000696                 db 0FFh
.xdata$x:00000697                 db 0FFh
.xdata$x:00000698                 db    0
.xdata$x:00000699                 db    0
.xdata$x:0000069A                 db    0
.xdata$x:0000069B                 db    0
.xdata$x:0000069C                 db  24h ; $
.xdata$x:0000069D                 db    0
.xdata$x:0000069E                 db    0
.xdata$x:0000069F                 db    0
.xdata$x:000006A0                 dd offset ??0Win32AccessViolation@@QAE@ABV0@@Z ; Win32AccessViolation::Win32AccessViolation(Win32AccessViolation const &)
.xdata$x:000006A0 _xdata$x        ends
.xdata$x:000006A0
.data$r:000006A4 ; ===========================================================================
.data$r:000006A4
.data$r:000006A4 ; Segment type: Pure data
.data$r:000006A4 ; Segment permissions: Read/Write
.data$r:000006A4 _data$r         segment dword public 'DATA' use32
.data$r:000006A4                 assume cs:_data$r
.data$r:000006A4                 ;org 6A4h
.data$r:000006A4 ; COMDAT (pick any)
.data$r:000006A4                 public ??_R0?AVWin32Exception@@@8
.data$r:000006A4 ; class Win32Exception `RTTI Type Descriptor'
.data$r:000006A4 ??_R0?AVWin32Exception@@@8 dd offset ??_7type_info@@6B@
.data$r:000006A4                                         ; DATA XREF: .xdata$x:000006C8o
.data$r:000006A4                                         ; .rdata$r:00000774o ...
.data$r:000006A4                                         ; const type_info::`vftable'
.data$r:000006A8                 db    0
.data$r:000006A9                 db    0
.data$r:000006AA                 db    0
.data$r:000006AB                 db    0
.data$r:000006AC                 db  2Eh ; .
.data$r:000006AD                 db  3Fh ; ?
.data$r:000006AE                 db  41h ; A
.data$r:000006AF                 db  56h ; V
.data$r:000006B0                 db  57h ; W
.data$r:000006B1                 db  69h ; i
.data$r:000006B2                 db  6Eh ; n
.data$r:000006B3                 db  33h ; 3
.data$r:000006B4                 db  32h ; 2
.data$r:000006B5                 db  45h ; E
.data$r:000006B6                 db  78h ; x
.data$r:000006B7                 db  63h ; c
.data$r:000006B8                 db  65h ; e
.data$r:000006B9                 db  70h ; p
.data$r:000006BA                 db  74h ; t
.data$r:000006BB                 db  69h ; i
.data$r:000006BC                 db  6Fh ; o
.data$r:000006BD                 db  6Eh ; n
.data$r:000006BE                 db  40h ; @
.data$r:000006BF                 db  40h ; @
.data$r:000006C0                 db    0
.data$r:000006C1                 align 4
.data$r:000006C1 _data$r         ends
.data$r:000006C1
.xdata$x:000006C4 ; ===========================================================================
.xdata$x:000006C4
.xdata$x:000006C4 ; Segment type: Pure data
.xdata$x:000006C4 ; Segment permissions: Read
.xdata$x:000006C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000006C4                 assume cs:_xdata$x
.xdata$x:000006C4                 ;org 6C4h
.xdata$x:000006C4 ; COMDAT (pick any)
.xdata$x:000006C4                 public __CT??_R0?AVWin32Exception@@@8??0Win32Exception@@QAE@ABV0@@Z28
.xdata$x:000006C4 __CT??_R0?AVWin32Exception@@@8??0Win32Exception@@QAE@ABV0@@Z28 db    0
.xdata$x:000006C4                                         ; DATA XREF: .xdata$x:0000065Co
.xdata$x:000006C4                                         ; .xdata$x:0000072Co
.xdata$x:000006C5                 db    0
.xdata$x:000006C6                 db    0
.xdata$x:000006C7                 db    0
.xdata$x:000006C8                 dd offset ??_R0?AVWin32Exception@@@8 ; Win32Exception `RTTI Type Descriptor'
.xdata$x:000006CC                 align 10h
.xdata$x:000006D0                 db 0FFh
.xdata$x:000006D1                 db 0FFh
.xdata$x:000006D2                 db 0FFh
.xdata$x:000006D3                 db 0FFh
.xdata$x:000006D4                 db    0
.xdata$x:000006D5                 db    0
.xdata$x:000006D6                 db    0
.xdata$x:000006D7                 db    0
.xdata$x:000006D8                 db  1Ch
.xdata$x:000006D9                 db    0
.xdata$x:000006DA                 db    0
.xdata$x:000006DB                 db    0
.xdata$x:000006DC                 dd offset ??0Win32Exception@@QAE@ABV0@@Z ; Win32Exception::Win32Exception(Win32Exception const &)
.xdata$x:000006DC _xdata$x        ends
.xdata$x:000006DC
.data$r:000006E0 ; ===========================================================================
.data$r:000006E0
.data$r:000006E0 ; Segment type: Pure data
.data$r:000006E0 ; Segment permissions: Read/Write
.data$r:000006E0 _data$r         segment dword public 'DATA' use32
.data$r:000006E0                 assume cs:_data$r
.data$r:000006E0                 ;org 6E0h
.data$r:000006E0 ; COMDAT (pick any)
.data$r:000006E0                 public ??_R0?AVexception@std@@@8
.data$r:000006E0 ; class std::exception `RTTI Type Descriptor'
.data$r:000006E0 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000006E0                                         ; DATA XREF: .xdata$x:00000700o
.data$r:000006E0                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000006E0                                         ; const type_info::`vftable'
.data$r:000006E4                 align 8
.data$r:000006E8 a_?avexception@ db '.?AVexception@std@@',0
.data$r:000006E8 _data$r         ends
.data$r:000006E8
.xdata$x:000006FC ; ===========================================================================
.xdata$x:000006FC
.xdata$x:000006FC ; Segment type: Pure data
.xdata$x:000006FC ; Segment permissions: Read
.xdata$x:000006FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000006FC                 assume cs:_xdata$x
.xdata$x:000006FC                 ;org 6FCh
.xdata$x:000006FC ; COMDAT (pick any)
.xdata$x:000006FC                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:000006FC __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:000006FC                                         ; DATA XREF: .xdata$x:00000660o
.xdata$x:000006FC                                         ; .xdata$x:00000730o
.xdata$x:000006FD                 db    0
.xdata$x:000006FE                 db    0
.xdata$x:000006FF                 db    0
.xdata$x:00000700                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:00000704                 align 8
.xdata$x:00000708                 db 0FFh
.xdata$x:00000709                 db 0FFh
.xdata$x:0000070A                 db 0FFh
.xdata$x:0000070B                 db 0FFh
.xdata$x:0000070C                 db    0
.xdata$x:0000070D                 db    0
.xdata$x:0000070E                 db    0
.xdata$x:0000070F                 db    0
.xdata$x:00000710                 db  0Ch
.xdata$x:00000711                 db    0
.xdata$x:00000712                 db    0
.xdata$x:00000713                 db    0
.xdata$x:00000714                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:00000714 _xdata$x        ends
.xdata$x:00000714
.xdata$x:00000718 ; ===========================================================================
.xdata$x:00000718
.xdata$x:00000718 ; Segment type: Pure data
.xdata$x:00000718 ; Segment permissions: Read
.xdata$x:00000718 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000718                 assume cs:_xdata$x
.xdata$x:00000718                 ;org 718h
.xdata$x:00000718 ; COMDAT (pick any)
.xdata$x:00000718                 public __TI2?AVWin32Exception@@
.xdata$x:00000718 __TI2?AVWin32Exception@@ db    0        ; DATA XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+3Fo
.xdata$x:00000719                 db    0
.xdata$x:0000071A                 db    0
.xdata$x:0000071B                 db    0
.xdata$x:0000071C                 dd offset ??1Win32Exception@@UAE@XZ ; Win32Exception::~Win32Exception(void)
.xdata$x:00000720                 db    0
.xdata$x:00000721                 db    0
.xdata$x:00000722                 db    0
.xdata$x:00000723                 db    0
.xdata$x:00000724                 dd offset __CTA2?AVWin32Exception@@
.xdata$x:00000724 _xdata$x        ends
.xdata$x:00000724
.xdata$x:00000728 ; ===========================================================================
.xdata$x:00000728
.xdata$x:00000728 ; Segment type: Pure data
.xdata$x:00000728 ; Segment permissions: Read
.xdata$x:00000728 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000728                 assume cs:_xdata$x
.xdata$x:00000728                 ;org 728h
.xdata$x:00000728 ; COMDAT (pick any)
.xdata$x:00000728                 public __CTA2?AVWin32Exception@@
.xdata$x:00000728 __CTA2?AVWin32Exception@@ db    2       ; DATA XREF: .xdata$x:00000724o
.xdata$x:00000729                 db    0
.xdata$x:0000072A                 db    0
.xdata$x:0000072B                 db    0
.xdata$x:0000072C                 dd offset __CT??_R0?AVWin32Exception@@@8??0Win32Exception@@QAE@ABV0@@Z28
.xdata$x:00000730                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00000730 _xdata$x        ends
.xdata$x:00000730
.rdata$r:00000734 ; ===========================================================================
.rdata$r:00000734
.rdata$r:00000734 ; Segment type: Pure data
.rdata$r:00000734 ; Segment permissions: Read
.rdata$r:00000734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000734                 assume cs:_rdata$r
.rdata$r:00000734                 ;org 734h
.rdata$r:00000734 ; COMDAT (pick any)
.rdata$r:00000734                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:00000734 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000734 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:00000734                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:00000734                                         ; .rdata$r:00000790o ...
.rdata$r:00000734                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:00000738                 align 10h
.rdata$r:00000740                 db 0FFh
.rdata$r:00000741                 db 0FFh
.rdata$r:00000742                 db 0FFh
.rdata$r:00000743                 db 0FFh
.rdata$r:00000744                 db    0
.rdata$r:00000745                 db    0
.rdata$r:00000746                 db    0
.rdata$r:00000747                 db    0
.rdata$r:00000748                 db  40h ; @
.rdata$r:00000749                 db    0
.rdata$r:0000074A                 db    0
.rdata$r:0000074B                 db    0
.rdata$r:0000074C                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000074C _rdata$r        ends
.rdata$r:0000074C
.rdata$r:00000750 ; ===========================================================================
.rdata$r:00000750
.rdata$r:00000750 ; Segment type: Pure data
.rdata$r:00000750 ; Segment permissions: Read
.rdata$r:00000750 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000750                 assume cs:_rdata$r
.rdata$r:00000750                 ;org 750h
.rdata$r:00000750 ; COMDAT (pick any)
.rdata$r:00000750                 public ??_R3exception@std@@8
.rdata$r:00000750 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000750 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:0000074Co
.rdata$r:00000751                 db    0
.rdata$r:00000752                 db    0
.rdata$r:00000753                 db    0
.rdata$r:00000754                 db    0
.rdata$r:00000755                 db    0
.rdata$r:00000756                 db    0
.rdata$r:00000757                 db    0
.rdata$r:00000758                 db    1
.rdata$r:00000759                 db    0
.rdata$r:0000075A                 db    0
.rdata$r:0000075B                 db    0
.rdata$r:0000075C                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000075C _rdata$r        ends
.rdata$r:0000075C
.rdata$r:00000760 ; ===========================================================================
.rdata$r:00000760
.rdata$r:00000760 ; Segment type: Pure data
.rdata$r:00000760 ; Segment permissions: Read
.rdata$r:00000760 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000760                 assume cs:_rdata$r
.rdata$r:00000760                 ;org 760h
.rdata$r:00000760 ; COMDAT (pick any)
.rdata$r:00000760                 public ??_R2exception@std@@8
.rdata$r:00000760 ; std::exception::`RTTI Base Class Array'
.rdata$r:00000760 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:00000760                                         ; DATA XREF: .rdata$r:0000075Co
.rdata$r:00000760                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000764                 db    0
.rdata$r:00000765                 align 4
.rdata$r:00000765 _rdata$r        ends
.rdata$r:00000765
.rdata$r:00000768 ; ===========================================================================
.rdata$r:00000768
.rdata$r:00000768 ; Segment type: Pure data
.rdata$r:00000768 ; Segment permissions: Read
.rdata$r:00000768 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000768                 assume cs:_rdata$r
.rdata$r:00000768                 ;org 768h
.rdata$r:00000768 ; COMDAT (pick any)
.rdata$r:00000768                 public ??_R4Win32Exception@@6B@
.rdata$r:00000768 ; const Win32Exception::`RTTI Complete Object Locator'
.rdata$r:00000768 ??_R4Win32Exception@@6B@ db    0        ; DATA XREF: .rdata:0000062Co
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 db    0
.rdata$r:0000076D                 db    0
.rdata$r:0000076E                 db    0
.rdata$r:0000076F                 db    0
.rdata$r:00000770                 db    0
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 dd offset ??_R0?AVWin32Exception@@@8 ; Win32Exception `RTTI Type Descriptor'
.rdata$r:00000778                 dd offset ??_R3Win32Exception@@8 ; Win32Exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000778 _rdata$r        ends
.rdata$r:00000778
.rdata$r:0000077C ; ===========================================================================
.rdata$r:0000077C
.rdata$r:0000077C ; Segment type: Pure data
.rdata$r:0000077C ; Segment permissions: Read
.rdata$r:0000077C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000077C                 assume cs:_rdata$r
.rdata$r:0000077C                 ;org 77Ch
.rdata$r:0000077C ; COMDAT (pick any)
.rdata$r:0000077C                 public ??_R3Win32Exception@@8
.rdata$r:0000077C ; Win32Exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000077C ??_R3Win32Exception@@8 db    0          ; DATA XREF: .rdata$r:00000778o
.rdata$r:0000077C                                         ; .rdata$r:000007B0o
.rdata$r:0000077D                 db    0
.rdata$r:0000077E                 db    0
.rdata$r:0000077F                 db    0
.rdata$r:00000780                 db    0
.rdata$r:00000781                 db    0
.rdata$r:00000782                 db    0
.rdata$r:00000783                 db    0
.rdata$r:00000784                 db    2
.rdata$r:00000785                 db    0
.rdata$r:00000786                 db    0
.rdata$r:00000787                 db    0
.rdata$r:00000788                 dd offset ??_R2Win32Exception@@8 ; Win32Exception::`RTTI Base Class Array'
.rdata$r:00000788 _rdata$r        ends
.rdata$r:00000788
.rdata$r:0000078C ; ===========================================================================
.rdata$r:0000078C
.rdata$r:0000078C ; Segment type: Pure data
.rdata$r:0000078C ; Segment permissions: Read
.rdata$r:0000078C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000078C                 assume cs:_rdata$r
.rdata$r:0000078C                 ;org 78Ch
.rdata$r:0000078C ; COMDAT (pick any)
.rdata$r:0000078C                 public ??_R2Win32Exception@@8
.rdata$r:0000078C ; Win32Exception::`RTTI Base Class Array'
.rdata$r:0000078C ??_R2Win32Exception@@8 dd offset ??_R1A@?0A@EA@Win32Exception@@8
.rdata$r:0000078C                                         ; DATA XREF: .rdata$r:00000788o
.rdata$r:0000078C                                         ; Win32Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000790                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000794                 db    0
.rdata$r:00000795                 align 4
.rdata$r:00000795 _rdata$r        ends
.rdata$r:00000795
.rdata$r:00000798 ; ===========================================================================
.rdata$r:00000798
.rdata$r:00000798 ; Segment type: Pure data
.rdata$r:00000798 ; Segment permissions: Read
.rdata$r:00000798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000798                 assume cs:_rdata$r
.rdata$r:00000798                 ;org 798h
.rdata$r:00000798 ; COMDAT (pick any)
.rdata$r:00000798                 public ??_R1A@?0A@EA@Win32Exception@@8
.rdata$r:00000798 ; Win32Exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000798 ??_R1A@?0A@EA@Win32Exception@@8 dd offset ??_R0?AVWin32Exception@@@8
.rdata$r:00000798                                         ; DATA XREF: .rdata$r:Win32Exception::`RTTI Base Class Array'o
.rdata$r:00000798                                         ; .rdata$r:000007DCo
.rdata$r:00000798                                         ; Win32Exception `RTTI Type Descriptor'
.rdata$r:0000079C                 db    1
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 db    0
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db 0FFh
.rdata$r:000007A5                 db 0FFh
.rdata$r:000007A6                 db 0FFh
.rdata$r:000007A7                 db 0FFh
.rdata$r:000007A8                 db    0
.rdata$r:000007A9                 db    0
.rdata$r:000007AA                 db    0
.rdata$r:000007AB                 db    0
.rdata$r:000007AC                 db  40h ; @
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 dd offset ??_R3Win32Exception@@8 ; Win32Exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007B0 _rdata$r        ends
.rdata$r:000007B0
.rdata$r:000007B4 ; ===========================================================================
.rdata$r:000007B4
.rdata$r:000007B4 ; Segment type: Pure data
.rdata$r:000007B4 ; Segment permissions: Read
.rdata$r:000007B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007B4                 assume cs:_rdata$r
.rdata$r:000007B4                 ;org 7B4h
.rdata$r:000007B4 ; COMDAT (pick any)
.rdata$r:000007B4                 public ??_R4Win32AccessViolation@@6B@
.rdata$r:000007B4 ; const Win32AccessViolation::`RTTI Complete Object Locator'
.rdata$r:000007B4 ??_R4Win32AccessViolation@@6B@ db    0  ; DATA XREF: .rdata:00000638o
.rdata$r:000007B5                 db    0
.rdata$r:000007B6                 db    0
.rdata$r:000007B7                 db    0
.rdata$r:000007B8                 db    0
.rdata$r:000007B9                 db    0
.rdata$r:000007BA                 db    0
.rdata$r:000007BB                 db    0
.rdata$r:000007BC                 db    0
.rdata$r:000007BD                 db    0
.rdata$r:000007BE                 db    0
.rdata$r:000007BF                 db    0
.rdata$r:000007C0                 dd offset ??_R0?AVWin32AccessViolation@@@8 ; Win32AccessViolation `RTTI Type Descriptor'
.rdata$r:000007C4                 dd offset ??_R3Win32AccessViolation@@8 ; Win32AccessViolation::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007C4 _rdata$r        ends
.rdata$r:000007C4
.rdata$r:000007C8 ; ===========================================================================
.rdata$r:000007C8
.rdata$r:000007C8 ; Segment type: Pure data
.rdata$r:000007C8 ; Segment permissions: Read
.rdata$r:000007C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007C8                 assume cs:_rdata$r
.rdata$r:000007C8                 ;org 7C8h
.rdata$r:000007C8 ; COMDAT (pick any)
.rdata$r:000007C8                 public ??_R3Win32AccessViolation@@8
.rdata$r:000007C8 ; Win32AccessViolation::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007C8 ??_R3Win32AccessViolation@@8 db    0    ; DATA XREF: .rdata$r:000007C4o
.rdata$r:000007C8                                         ; .rdata$r:00000800o
.rdata$r:000007C9                 db    0
.rdata$r:000007CA                 db    0
.rdata$r:000007CB                 db    0
.rdata$r:000007CC                 db    0
.rdata$r:000007CD                 db    0
.rdata$r:000007CE                 db    0
.rdata$r:000007CF                 db    0
.rdata$r:000007D0                 db    3
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 dd offset ??_R2Win32AccessViolation@@8 ; Win32AccessViolation::`RTTI Base Class Array'
.rdata$r:000007D4 _rdata$r        ends
.rdata$r:000007D4
.rdata$r:000007D8 ; ===========================================================================
.rdata$r:000007D8
.rdata$r:000007D8 ; Segment type: Pure data
.rdata$r:000007D8 ; Segment permissions: Read
.rdata$r:000007D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007D8                 assume cs:_rdata$r
.rdata$r:000007D8                 ;org 7D8h
.rdata$r:000007D8 ; COMDAT (pick any)
.rdata$r:000007D8                 public ??_R2Win32AccessViolation@@8
.rdata$r:000007D8 ; Win32AccessViolation::`RTTI Base Class Array'
.rdata$r:000007D8 ??_R2Win32AccessViolation@@8 dd offset ??_R1A@?0A@EA@Win32AccessViolation@@8
.rdata$r:000007D8                                         ; DATA XREF: .rdata$r:000007D4o
.rdata$r:000007D8                                         ; Win32AccessViolation::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007DC                 dd offset ??_R1A@?0A@EA@Win32Exception@@8 ; Win32Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E0                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007E4                 db    0
.rdata$r:000007E5                 align 4
.rdata$r:000007E5 _rdata$r        ends
.rdata$r:000007E5
.rdata$r:000007E8 ; ===========================================================================
.rdata$r:000007E8
.rdata$r:000007E8 ; Segment type: Pure data
.rdata$r:000007E8 ; Segment permissions: Read
.rdata$r:000007E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007E8                 assume cs:_rdata$r
.rdata$r:000007E8                 ;org 7E8h
.rdata$r:000007E8 ; COMDAT (pick any)
.rdata$r:000007E8                 public ??_R1A@?0A@EA@Win32AccessViolation@@8
.rdata$r:000007E8 ; Win32AccessViolation::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000007E8 ??_R1A@?0A@EA@Win32AccessViolation@@8 dd offset ??_R0?AVWin32AccessViolation@@@8
.rdata$r:000007E8                                         ; DATA XREF: .rdata$r:Win32AccessViolation::`RTTI Base Class Array'o
.rdata$r:000007E8                                         ; Win32AccessViolation `RTTI Type Descriptor'
.rdata$r:000007EC                 db    2
.rdata$r:000007ED                 db    0
.rdata$r:000007EE                 db    0
.rdata$r:000007EF                 db    0
.rdata$r:000007F0                 db    0
.rdata$r:000007F1                 db    0
.rdata$r:000007F2                 db    0
.rdata$r:000007F3                 db    0
.rdata$r:000007F4                 db 0FFh
.rdata$r:000007F5                 db 0FFh
.rdata$r:000007F6                 db 0FFh
.rdata$r:000007F7                 db 0FFh
.rdata$r:000007F8                 db    0
.rdata$r:000007F9                 db    0
.rdata$r:000007FA                 db    0
.rdata$r:000007FB                 db    0
.rdata$r:000007FC                 db  40h ; @
.rdata$r:000007FD                 db    0
.rdata$r:000007FE                 db    0
.rdata$r:000007FF                 db    0
.rdata$r:00000800                 dd offset ??_R3Win32AccessViolation@@8 ; Win32AccessViolation::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000800 _rdata$r        ends
.rdata$r:00000800
UNDEF:00000810 ; ===========================================================================
UNDEF:00000810
UNDEF:00000810 ; Segment type: Externs
UNDEF:00000810 ; UNDEF
UNDEF:00000810 ; void __cdecl operator delete(void *)
UNDEF:00000810                 extrn ??3@YAXPAX@Z:near ; CODE XREF: Win32AccessViolation::`scalar deleting destructor'(uint)+1Bp
UNDEF:00000810                                         ; Win32Exception::`scalar deleting destructor'(uint)+1Bp
UNDEF:00000814 ; void (__cdecl *__cdecl _set_se_translator(void (__cdecl *)(unsigned int, struct _EXCEPTION_POINTERS *)))(unsigned int, struct _EXCEPTION_POINTERS *)
UNDEF:00000814                 extrn ?_set_se_translator@@YAP6AXIPAU_EXCEPTION_POINTERS@@@ZP6AXI0@Z@Z:near
UNDEF:00000814                                         ; CODE XREF: Win32Exception::installHandler(void)+8p
UNDEF:00000814                                         ; Win32Exception::removeHandler(void)+5p
UNDEF:00000818 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this)
UNDEF:00000818                 extrn ??0exception@std@@QAE@XZ:near
UNDEF:00000818                                         ; CODE XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+2Bp
UNDEF:0000081C ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000081C                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000081C                                         ; CODE XREF: Win32Exception::Win32Exception(Win32Exception const &)+2Dp
UNDEF:0000081C                                         ; DATA XREF: .xdata$x:00000714o
UNDEF:00000820 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:00000820                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:00000820                                         ; CODE XREF: __unwindfunclet$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z$0+3j
UNDEF:00000820                                         ; __unwindfunclet$??0Win32Exception@@QAE@ABV0@@Z$0+3j ...
UNDEF:00000824 ; public: virtual void * __thiscall Win32Exception::`vector deleting destructor'(unsigned int)
UNDEF:00000824                 extrn ??_EWin32Exception@@UAEPAXI@Z:near ; weak
UNDEF:00000824                                         ; DATA XREF: .rdata:const Win32Exception::`vftable'o
UNDEF:00000828 ; public: virtual void * __thiscall Win32AccessViolation::`vector deleting destructor'(unsigned int)
UNDEF:00000828                 extrn ??_EWin32AccessViolation@@UAEPAXI@Z:near ; weak
UNDEF:00000828                                         ; DATA XREF: .rdata:const Win32AccessViolation::`vftable'o
UNDEF:0000082C ; __fastcall __security_check_cookie(x)
UNDEF:0000082C                 extrn @__security_check_cookie@4:near
UNDEF:0000082C                                         ; CODE XREF: __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z+Cp
UNDEF:0000082C                                         ; __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z+Cp ...
UNDEF:00000830 ; __stdcall _CxxThrowException(x, x)
UNDEF:00000830                 extrn __CxxThrowException@8:near
UNDEF:00000830                                         ; CODE XREF: Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+2Cp
UNDEF:00000830                                         ; Win32Exception::translate(uint,_EXCEPTION_POINTERS *)+48p
UNDEF:00000834                 extrn ___CxxFrameHandler3:near
UNDEF:00000834                                         ; CODE XREF: __ehhandler$??0Win32Exception@@IAE@PAU_EXCEPTION_POINTERS@@@Z+16j
UNDEF:00000834                                         ; __ehhandler$??0Win32AccessViolation@@AAE@PAU_EXCEPTION_POINTERS@@@Z+16j ...
UNDEF:00000838 ; const type_info::`vftable'
UNDEF:00000838                 extrn ??_7type_info@@6B@:near
UNDEF:00000838                                         ; DATA XREF: .data$r:Win32AccessViolation `RTTI Type Descriptor'o
UNDEF:00000838                                         ; .data$r:Win32Exception `RTTI Type Descriptor'o ...
UNDEF:0000083C                 extrn ___security_cookie:near
UNDEF:0000083C                                         ; DATA XREF: Win32Exception::Win32Exception(_EXCEPTION_POINTERS *)+14r
UNDEF:0000083C                                         ; Win32AccessViolation::Win32AccessViolation(_EXCEPTION_POINTERS *)+14r ...
UNDEF:0000083C
UNDEF:0000083C
UNDEF:0000083C                 end