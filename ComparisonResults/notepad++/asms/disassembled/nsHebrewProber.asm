.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : D586C2284975B411BAC39D885778EE18
.rdata:00000000 ; Input CRC32 : 4CB17589
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\nsHebrewProber.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG3995         db 'windows-1255',0     ; DATA XREF: nsHebrewProber::GetCharSetName(void)+1Eo
.rdata:0000000D                 align 10h
.rdata:00000010 $SG3997         db 'ISO-8859-8',0       ; DATA XREF: nsHebrewProber::GetCharSetName(void)+2Eo
.rdata:0000001B                 align 4
.rdata:0000001C $SG4000         db 'windows-1255',0     ; DATA XREF: nsHebrewProber::GetCharSetName(void)+8Co
.rdata:00000029                 align 4
.rdata:0000002C $SG4002         db 'ISO-8859-8',0       ; DATA XREF: nsHebrewProber::GetCharSetName(void)+A6o
.rdata:00000037                 align 4
.rdata:00000038 $SG4004         db 'ISO-8859-8',0       ; DATA XREF: nsHebrewProber::GetCharSetName(void)+B3o
.rdata:00000043                 align 4
.rdata:00000044 $SG4005         db 'windows-1255',0     ; DATA XREF: nsHebrewProber::GetCharSetName(void):loc_22Eo
.rdata:00000051                 align 4
.rdata:00000051 _rdata          ends
.rdata:00000051
.text$mn:00000054 ; ===========================================================================
.text$mn:00000054
.text$mn:00000054 ; Segment type: Pure code
.text$mn:00000054 ; Segment permissions: Read/Execute
.text$mn:00000054 _text$mn        segment para public 'CODE' use32
.text$mn:00000054                 assume cs:_text$mn
.text$mn:00000054                 ;org 54h
.text$mn:00000054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000054
.text$mn:00000054 ; =============== S U B R O U T I N E =======================================
.text$mn:00000054
.text$mn:00000054 ; Attributes: bp-based frame
.text$mn:00000054
.text$mn:00000054 ; public: virtual enum  nsProbingState __thiscall nsHebrewProber::HandleData(char const *, unsigned int)
.text$mn:00000054                 public ?HandleData@nsHebrewProber@@UAE?AW4nsProbingState@@PBDI@Z
.text$mn:00000054 ?HandleData@nsHebrewProber@@UAE?AW4nsProbingState@@PBDI@Z proc near
.text$mn:00000054
.text$mn:00000054 var_10          = dword ptr -10h
.text$mn:00000054 var_C           = dword ptr -0Ch
.text$mn:00000054 var_8           = dword ptr -8
.text$mn:00000054 var_1           = byte ptr -1
.text$mn:00000054 arg_0           = dword ptr  8
.text$mn:00000054 arg_4           = dword ptr  0Ch
.text$mn:00000054
.text$mn:00000054                 push    ebp
.text$mn:00000055                 mov     ebp, esp
.text$mn:00000057                 sub     esp, 10h
.text$mn:0000005A                 mov     [ebp+var_8], ecx
.text$mn:0000005D                 mov     eax, [ebp+var_8]
.text$mn:00000060                 mov     edx, [eax]
.text$mn:00000062                 mov     ecx, [ebp+var_8]
.text$mn:00000065                 mov     eax, [edx+0Ch]
.text$mn:00000068                 call    eax
.text$mn:0000006A                 cmp     eax, 2
.text$mn:0000006D                 jnz     short loc_79
.text$mn:0000006F                 mov     eax, 2
.text$mn:00000074                 jmp     loc_163
.text$mn:00000079 ; ---------------------------------------------------------------------------
.text$mn:00000079
.text$mn:00000079 loc_79:                                 ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+19j
.text$mn:00000079                 mov     ecx, [ebp+arg_0]
.text$mn:0000007C                 add     ecx, [ebp+arg_4]
.text$mn:0000007F                 mov     [ebp+var_10], ecx
.text$mn:00000082                 mov     edx, [ebp+arg_0]
.text$mn:00000085                 mov     [ebp+var_C], edx
.text$mn:00000088                 jmp     short loc_93
.text$mn:0000008A ; ---------------------------------------------------------------------------
.text$mn:0000008A
.text$mn:0000008A loc_8A:                                 ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+108j
.text$mn:0000008A                 mov     eax, [ebp+var_C]
.text$mn:0000008D                 add     eax, 1
.text$mn:00000090                 mov     [ebp+var_C], eax
.text$mn:00000093
.text$mn:00000093 loc_93:                                 ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+34j
.text$mn:00000093                 mov     ecx, [ebp+var_C]
.text$mn:00000096                 cmp     ecx, [ebp+var_10]
.text$mn:00000099                 jnb     loc_161
.text$mn:0000009F                 mov     edx, [ebp+var_C]
.text$mn:000000A2                 mov     al, [edx]
.text$mn:000000A4                 mov     [ebp+var_1], al
.text$mn:000000A7                 movsx   ecx, [ebp+var_1]
.text$mn:000000AB                 cmp     ecx, 20h ; ' '
.text$mn:000000AE                 jnz     short loc_10C
.text$mn:000000B0                 mov     edx, [ebp+var_8]
.text$mn:000000B3                 movsx   eax, byte ptr [edx+0Dh]
.text$mn:000000B7                 cmp     eax, 20h ; ' '
.text$mn:000000BA                 jz      short loc_10A
.text$mn:000000BC                 mov     ecx, [ebp+var_8]
.text$mn:000000BF                 movzx   edx, byte ptr [ecx+0Ch]
.text$mn:000000C3                 push    edx             ; char
.text$mn:000000C4                 call    ?isFinal@nsHebrewProber@@KA_ND@Z ; nsHebrewProber::isFinal(char)
.text$mn:000000C9                 add     esp, 4
.text$mn:000000CC                 movzx   eax, al
.text$mn:000000CF                 test    eax, eax
.text$mn:000000D1                 jz      short loc_E4
.text$mn:000000D3                 mov     ecx, [ebp+var_8]
.text$mn:000000D6                 mov     edx, [ecx+4]
.text$mn:000000D9                 add     edx, 1
.text$mn:000000DC                 mov     eax, [ebp+var_8]
.text$mn:000000DF                 mov     [eax+4], edx
.text$mn:000000E2                 jmp     short loc_10A
.text$mn:000000E4 ; ---------------------------------------------------------------------------
.text$mn:000000E4
.text$mn:000000E4 loc_E4:                                 ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+7Dj
.text$mn:000000E4                 mov     ecx, [ebp+var_8]
.text$mn:000000E7                 movzx   edx, byte ptr [ecx+0Ch]
.text$mn:000000EB                 push    edx             ; char
.text$mn:000000EC                 call    ?isNonFinal@nsHebrewProber@@KA_ND@Z ; nsHebrewProber::isNonFinal(char)
.text$mn:000000F1                 add     esp, 4
.text$mn:000000F4                 movzx   eax, al
.text$mn:000000F7                 test    eax, eax
.text$mn:000000F9                 jz      short loc_10A
.text$mn:000000FB                 mov     ecx, [ebp+var_8]
.text$mn:000000FE                 mov     edx, [ecx+8]
.text$mn:00000101                 add     edx, 1
.text$mn:00000104                 mov     eax, [ebp+var_8]
.text$mn:00000107                 mov     [eax+8], edx
.text$mn:0000010A
.text$mn:0000010A loc_10A:                                ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+66j
.text$mn:0000010A                                         ; nsHebrewProber::HandleData(char const *,uint)+8Ej ...
.text$mn:0000010A                 jmp     short loc_147
.text$mn:0000010C ; ---------------------------------------------------------------------------
.text$mn:0000010C
.text$mn:0000010C loc_10C:                                ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+5Aj
.text$mn:0000010C                 mov     ecx, [ebp+var_8]
.text$mn:0000010F                 movsx   edx, byte ptr [ecx+0Dh]
.text$mn:00000113                 cmp     edx, 20h ; ' '
.text$mn:00000116                 jnz     short loc_147
.text$mn:00000118                 mov     eax, [ebp+var_8]
.text$mn:0000011B                 movzx   ecx, byte ptr [eax+0Ch]
.text$mn:0000011F                 push    ecx             ; char
.text$mn:00000120                 call    ?isFinal@nsHebrewProber@@KA_ND@Z ; nsHebrewProber::isFinal(char)
.text$mn:00000125                 add     esp, 4
.text$mn:00000128                 movzx   edx, al
.text$mn:0000012B                 test    edx, edx
.text$mn:0000012D                 jz      short loc_147
.text$mn:0000012F                 movsx   eax, [ebp+var_1]
.text$mn:00000133                 cmp     eax, 20h ; ' '
.text$mn:00000136                 jz      short loc_147
.text$mn:00000138                 mov     ecx, [ebp+var_8]
.text$mn:0000013B                 mov     edx, [ecx+8]
.text$mn:0000013E                 add     edx, 1
.text$mn:00000141                 mov     eax, [ebp+var_8]
.text$mn:00000144                 mov     [eax+8], edx
.text$mn:00000147
.text$mn:00000147 loc_147:                                ; CODE XREF: nsHebrewProber::HandleData(char const *,uint):loc_10Aj
.text$mn:00000147                                         ; nsHebrewProber::HandleData(char const *,uint)+C2j ...
.text$mn:00000147                 mov     ecx, [ebp+var_8]
.text$mn:0000014A                 mov     edx, [ebp+var_8]
.text$mn:0000014D                 mov     al, [edx+0Ch]
.text$mn:00000150                 mov     [ecx+0Dh], al
.text$mn:00000153                 mov     ecx, [ebp+var_8]
.text$mn:00000156                 mov     dl, [ebp+var_1]
.text$mn:00000159                 mov     [ecx+0Ch], dl
.text$mn:0000015C                 jmp     loc_8A
.text$mn:00000161 ; ---------------------------------------------------------------------------
.text$mn:00000161
.text$mn:00000161 loc_161:                                ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+45j
.text$mn:00000161                 xor     eax, eax
.text$mn:00000163
.text$mn:00000163 loc_163:                                ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+20j
.text$mn:00000163                 mov     esp, ebp
.text$mn:00000165                 pop     ebp
.text$mn:00000166                 retn    8
.text$mn:00000166 ?HandleData@nsHebrewProber@@UAE?AW4nsProbingState@@PBDI@Z endp
.text$mn:00000166
.text$mn:00000166 ; ---------------------------------------------------------------------------
.text$mn:00000169                 db 0Bh dup(0CCh)
.text$mn:00000174
.text$mn:00000174 ; =============== S U B R O U T I N E =======================================
.text$mn:00000174
.text$mn:00000174 ; Attributes: bp-based frame
.text$mn:00000174
.text$mn:00000174 ; const char *__thiscall nsHebrewProber::GetCharSetName(nsHebrewProber *__hidden this)
.text$mn:00000174                 public ?GetCharSetName@nsHebrewProber@@UAEPBDXZ
.text$mn:00000174 ?GetCharSetName@nsHebrewProber@@UAEPBDXZ proc near
.text$mn:00000174
.text$mn:00000174 var_18          = dword ptr -18h
.text$mn:00000174 var_14          = dword ptr -14h
.text$mn:00000174 var_10          = dword ptr -10h
.text$mn:00000174 var_C           = dword ptr -0Ch
.text$mn:00000174 var_8           = dword ptr -8
.text$mn:00000174 var_4           = dword ptr -4
.text$mn:00000174
.text$mn:00000174                 push    ebp
.text$mn:00000175                 mov     ebp, esp
.text$mn:00000177                 sub     esp, 18h
.text$mn:0000017A                 mov     [ebp+var_4], ecx
.text$mn:0000017D                 mov     eax, [ebp+var_4]
.text$mn:00000180                 mov     ecx, [ebp+var_4]
.text$mn:00000183                 mov     edx, [eax+4]
.text$mn:00000186                 sub     edx, [ecx+8]
.text$mn:00000189                 mov     [ebp+var_8], edx
.text$mn:0000018C                 cmp     [ebp+var_8], 5
.text$mn:00000190                 jl      short loc_19C
.text$mn:00000192                 mov     eax, offset $SG3995 ; "windows-1255"
.text$mn:00000197                 jmp     loc_233
.text$mn:0000019C ; ---------------------------------------------------------------------------
.text$mn:0000019C
.text$mn:0000019C loc_19C:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+1Cj
.text$mn:0000019C                 cmp     [ebp+var_8], 0FFFFFFFBh
.text$mn:000001A0                 jg      short loc_1AC
.text$mn:000001A2                 mov     eax, offset $SG3997 ; "ISO-8859-8"
.text$mn:000001A7                 jmp     loc_233
.text$mn:000001AC ; ---------------------------------------------------------------------------
.text$mn:000001AC
.text$mn:000001AC loc_1AC:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+2Cj
.text$mn:000001AC                 mov     eax, [ebp+var_4]
.text$mn:000001AF                 mov     ecx, [eax+10h]
.text$mn:000001B2                 mov     edx, [ebp+var_4]
.text$mn:000001B5                 mov     eax, [ecx]
.text$mn:000001B7                 mov     ecx, [edx+10h]
.text$mn:000001BA                 mov     edx, [eax+14h]
.text$mn:000001BD                 call    edx
.text$mn:000001BF                 fstp    [ebp+var_10]
.text$mn:000001C2                 movss   xmm0, [ebp+var_10]
.text$mn:000001C7                 mov     eax, [ebp+var_4]
.text$mn:000001CA                 mov     ecx, [eax+14h]
.text$mn:000001CD                 mov     edx, [ebp+var_4]
.text$mn:000001D0                 mov     eax, [ecx]
.text$mn:000001D2                 mov     ecx, [edx+14h]
.text$mn:000001D5                 mov     edx, [eax+14h]
.text$mn:000001D8                 movss   [ebp+var_14], xmm0
.text$mn:000001DD                 call    edx
.text$mn:000001DF                 fstp    [ebp+var_18]
.text$mn:000001E2                 movss   xmm0, [ebp+var_14]
.text$mn:000001E7                 subss   xmm0, [ebp+var_18]
.text$mn:000001EC                 movss   [ebp+var_C], xmm0
.text$mn:000001F1                 cvtss2sd xmm0, [ebp+var_C]
.text$mn:000001F6                 comisd  xmm0, ds:__real@3f847ae147ae147b
.text$mn:000001FE                 jbe     short loc_207
.text$mn:00000200                 mov     eax, offset $SG4000 ; "windows-1255"
.text$mn:00000205                 jmp     short loc_233
.text$mn:00000207 ; ---------------------------------------------------------------------------
.text$mn:00000207
.text$mn:00000207 loc_207:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+8Aj
.text$mn:00000207                 cvtss2sd xmm0, [ebp+var_C]
.text$mn:0000020C                 movsd   xmm1, ds:__real@bf847ae147ae147b
.text$mn:00000214                 comisd  xmm1, xmm0
.text$mn:00000218                 jbe     short loc_221
.text$mn:0000021A                 mov     eax, offset $SG4002 ; "ISO-8859-8"
.text$mn:0000021F                 jmp     short loc_233
.text$mn:00000221 ; ---------------------------------------------------------------------------
.text$mn:00000221
.text$mn:00000221 loc_221:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+A4j
.text$mn:00000221                 cmp     [ebp+var_8], 0
.text$mn:00000225                 jge     short loc_22E
.text$mn:00000227                 mov     eax, offset $SG4004 ; "ISO-8859-8"
.text$mn:0000022C                 jmp     short loc_233
.text$mn:0000022E ; ---------------------------------------------------------------------------
.text$mn:0000022E
.text$mn:0000022E loc_22E:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+B1j
.text$mn:0000022E                 mov     eax, offset $SG4005 ; "windows-1255"
.text$mn:00000233
.text$mn:00000233 loc_233:                                ; CODE XREF: nsHebrewProber::GetCharSetName(void)+23j
.text$mn:00000233                                         ; nsHebrewProber::GetCharSetName(void)+33j ...
.text$mn:00000233                 mov     esp, ebp
.text$mn:00000235                 pop     ebp
.text$mn:00000236                 retn
.text$mn:00000236 ?GetCharSetName@nsHebrewProber@@UAEPBDXZ endp
.text$mn:00000236
.text$mn:00000236 ; ---------------------------------------------------------------------------
.text$mn:00000237                 db 0Dh dup(0CCh)
.text$mn:00000244
.text$mn:00000244 ; =============== S U B R O U T I N E =======================================
.text$mn:00000244
.text$mn:00000244 ; Attributes: bp-based frame
.text$mn:00000244
.text$mn:00000244 ; void __thiscall nsHebrewProber::Reset(nsHebrewProber *__hidden this)
.text$mn:00000244                 public ?Reset@nsHebrewProber@@UAEXXZ
.text$mn:00000244 ?Reset@nsHebrewProber@@UAEXXZ proc near
.text$mn:00000244
.text$mn:00000244 var_4           = dword ptr -4
.text$mn:00000244
.text$mn:00000244                 push    ebp
.text$mn:00000245                 mov     ebp, esp
.text$mn:00000247                 push    ecx
.text$mn:00000248                 mov     [ebp+var_4], ecx
.text$mn:0000024B                 mov     eax, [ebp+var_4]
.text$mn:0000024E                 mov     dword ptr [eax+4], 0
.text$mn:00000255                 mov     ecx, [ebp+var_4]
.text$mn:00000258                 mov     dword ptr [ecx+8], 0
.text$mn:0000025F                 mov     edx, [ebp+var_4]
.text$mn:00000262                 mov     byte ptr [edx+0Ch], 20h ; ' '
.text$mn:00000266                 mov     eax, [ebp+var_4]
.text$mn:00000269                 mov     byte ptr [eax+0Dh], 20h ; ' '
.text$mn:0000026D                 mov     esp, ebp
.text$mn:0000026F                 pop     ebp
.text$mn:00000270                 retn
.text$mn:00000270 ?Reset@nsHebrewProber@@UAEXXZ endp
.text$mn:00000270
.text$mn:00000270 ; ---------------------------------------------------------------------------
.text$mn:00000271                 align 4
.text$mn:00000274
.text$mn:00000274 ; =============== S U B R O U T I N E =======================================
.text$mn:00000274
.text$mn:00000274 ; Attributes: bp-based frame
.text$mn:00000274
.text$mn:00000274 ; public: virtual enum  nsProbingState __thiscall nsHebrewProber::GetState(void)
.text$mn:00000274                 public ?GetState@nsHebrewProber@@UAE?AW4nsProbingState@@XZ
.text$mn:00000274 ?GetState@nsHebrewProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00000274
.text$mn:00000274 var_4           = dword ptr -4
.text$mn:00000274
.text$mn:00000274                 push    ebp
.text$mn:00000275                 mov     ebp, esp
.text$mn:00000277                 push    ecx
.text$mn:00000278                 mov     [ebp+var_4], ecx
.text$mn:0000027B                 mov     eax, [ebp+var_4]
.text$mn:0000027E                 mov     ecx, [eax+10h]
.text$mn:00000281                 mov     edx, [ebp+var_4]
.text$mn:00000284                 mov     eax, [ecx]
.text$mn:00000286                 mov     ecx, [edx+10h]
.text$mn:00000289                 mov     edx, [eax+0Ch]
.text$mn:0000028C                 call    edx
.text$mn:0000028E                 cmp     eax, 2
.text$mn:00000291                 jnz     short loc_2B2
.text$mn:00000293                 mov     eax, [ebp+var_4]
.text$mn:00000296                 mov     ecx, [eax+14h]
.text$mn:00000299                 mov     edx, [ebp+var_4]
.text$mn:0000029C                 mov     eax, [ecx]
.text$mn:0000029E                 mov     ecx, [edx+14h]
.text$mn:000002A1                 mov     edx, [eax+0Ch]
.text$mn:000002A4                 call    edx
.text$mn:000002A6                 cmp     eax, 2
.text$mn:000002A9                 jnz     short loc_2B2
.text$mn:000002AB                 mov     eax, 2
.text$mn:000002B0                 jmp     short loc_2B4
.text$mn:000002B2 ; ---------------------------------------------------------------------------
.text$mn:000002B2
.text$mn:000002B2 loc_2B2:                                ; CODE XREF: nsHebrewProber::GetState(void)+1Dj
.text$mn:000002B2                                         ; nsHebrewProber::GetState(void)+35j
.text$mn:000002B2                 xor     eax, eax
.text$mn:000002B4
.text$mn:000002B4 loc_2B4:                                ; CODE XREF: nsHebrewProber::GetState(void)+3Cj
.text$mn:000002B4                 mov     esp, ebp
.text$mn:000002B6                 pop     ebp
.text$mn:000002B7                 retn
.text$mn:000002B7 ?GetState@nsHebrewProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:000002B7
.text$mn:000002B7 ; ---------------------------------------------------------------------------
.text$mn:000002B8                 db 0Ch dup(0CCh)
.text$mn:000002C4
.text$mn:000002C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000002C4
.text$mn:000002C4 ; Attributes: bp-based frame
.text$mn:000002C4
.text$mn:000002C4 ; bool __cdecl nsHebrewProber::isFinal(char)
.text$mn:000002C4                 public ?isFinal@nsHebrewProber@@KA_ND@Z
.text$mn:000002C4 ?isFinal@nsHebrewProber@@KA_ND@Z proc near
.text$mn:000002C4                                         ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+70p
.text$mn:000002C4                                         ; nsHebrewProber::HandleData(char const *,uint)+CCp
.text$mn:000002C4
.text$mn:000002C4 var_4           = dword ptr -4
.text$mn:000002C4 arg_0           = byte ptr  8
.text$mn:000002C4
.text$mn:000002C4                 push    ebp
.text$mn:000002C5                 mov     ebp, esp
.text$mn:000002C7                 push    ecx
.text$mn:000002C8                 movsx   eax, [ebp+arg_0]
.text$mn:000002CC                 cmp     eax, 0FFFFFFEAh
.text$mn:000002CF                 jz      short loc_2FE
.text$mn:000002D1                 movsx   ecx, [ebp+arg_0]
.text$mn:000002D5                 cmp     ecx, 0FFFFFFEDh
.text$mn:000002D8                 jz      short loc_2FE
.text$mn:000002DA                 movsx   edx, [ebp+arg_0]
.text$mn:000002DE                 cmp     edx, 0FFFFFFEFh
.text$mn:000002E1                 jz      short loc_2FE
.text$mn:000002E3                 movsx   eax, [ebp+arg_0]
.text$mn:000002E7                 cmp     eax, 0FFFFFFF3h
.text$mn:000002EA                 jz      short loc_2FE
.text$mn:000002EC                 movsx   ecx, [ebp+arg_0]
.text$mn:000002F0                 cmp     ecx, 0FFFFFFF5h
.text$mn:000002F3                 jz      short loc_2FE
.text$mn:000002F5                 mov     [ebp+var_4], 0
.text$mn:000002FC                 jmp     short loc_305
.text$mn:000002FE ; ---------------------------------------------------------------------------
.text$mn:000002FE
.text$mn:000002FE loc_2FE:                                ; CODE XREF: nsHebrewProber::isFinal(char)+Bj
.text$mn:000002FE                                         ; nsHebrewProber::isFinal(char)+14j ...
.text$mn:000002FE                 mov     [ebp+var_4], 1
.text$mn:00000305
.text$mn:00000305 loc_305:                                ; CODE XREF: nsHebrewProber::isFinal(char)+38j
.text$mn:00000305                 mov     al, byte ptr [ebp+var_4]
.text$mn:00000308                 mov     esp, ebp
.text$mn:0000030A                 pop     ebp
.text$mn:0000030B                 retn
.text$mn:0000030B ?isFinal@nsHebrewProber@@KA_ND@Z endp
.text$mn:0000030B
.text$mn:0000030B ; ---------------------------------------------------------------------------
.text$mn:0000030C                 db 8 dup(0CCh)
.text$mn:00000314
.text$mn:00000314 ; =============== S U B R O U T I N E =======================================
.text$mn:00000314
.text$mn:00000314 ; Attributes: bp-based frame
.text$mn:00000314
.text$mn:00000314 ; bool __cdecl nsHebrewProber::isNonFinal(char)
.text$mn:00000314                 public ?isNonFinal@nsHebrewProber@@KA_ND@Z
.text$mn:00000314 ?isNonFinal@nsHebrewProber@@KA_ND@Z proc near
.text$mn:00000314                                         ; CODE XREF: nsHebrewProber::HandleData(char const *,uint)+98p
.text$mn:00000314
.text$mn:00000314 var_4           = dword ptr -4
.text$mn:00000314 arg_0           = byte ptr  8
.text$mn:00000314
.text$mn:00000314                 push    ebp
.text$mn:00000315                 mov     ebp, esp
.text$mn:00000317                 push    ecx
.text$mn:00000318                 movsx   eax, [ebp+arg_0]
.text$mn:0000031C                 cmp     eax, 0FFFFFFEBh
.text$mn:0000031F                 jz      short loc_345
.text$mn:00000321                 movsx   ecx, [ebp+arg_0]
.text$mn:00000325                 cmp     ecx, 0FFFFFFEEh
.text$mn:00000328                 jz      short loc_345
.text$mn:0000032A                 movsx   edx, [ebp+arg_0]
.text$mn:0000032E                 cmp     edx, 0FFFFFFF0h
.text$mn:00000331                 jz      short loc_345
.text$mn:00000333                 movsx   eax, [ebp+arg_0]
.text$mn:00000337                 cmp     eax, 0FFFFFFF4h
.text$mn:0000033A                 jz      short loc_345
.text$mn:0000033C                 mov     [ebp+var_4], 0
.text$mn:00000343                 jmp     short loc_34C
.text$mn:00000345 ; ---------------------------------------------------------------------------
.text$mn:00000345
.text$mn:00000345 loc_345:                                ; CODE XREF: nsHebrewProber::isNonFinal(char)+Bj
.text$mn:00000345                                         ; nsHebrewProber::isNonFinal(char)+14j ...
.text$mn:00000345                 mov     [ebp+var_4], 1
.text$mn:0000034C
.text$mn:0000034C loc_34C:                                ; CODE XREF: nsHebrewProber::isNonFinal(char)+2Fj
.text$mn:0000034C                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000034F                 mov     esp, ebp
.text$mn:00000351                 pop     ebp
.text$mn:00000352                 retn
.text$mn:00000352 ?isNonFinal@nsHebrewProber@@KA_ND@Z endp
.text$mn:00000352
.text$mn:00000352 ; ---------------------------------------------------------------------------
.text$mn:00000353                 align 4
.text$mn:00000353 _text$mn        ends
.text$mn:00000353
.rdata:00000354 ; ===========================================================================
.rdata:00000354
.rdata:00000354 ; Segment type: Pure data
.rdata:00000354 ; Segment permissions: Read
.rdata:00000354 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000354 _rdata          segment para public 'DATA' use32
.rdata:00000354                 assume cs:_rdata
.rdata:00000354                 ;org 354h
.rdata:00000354 ; COMDAT (pick any)
.rdata:00000354                 public __real@3f847ae147ae147b
.rdata:00000354 __real@3f847ae147ae147b dq 3F847AE147AE147Bh
.rdata:00000354                                         ; DATA XREF: nsHebrewProber::GetCharSetName(void)+82r
.rdata:00000354 _rdata          ends
.rdata:00000354
.rdata:0000035C ; ===========================================================================
.rdata:0000035C
.rdata:0000035C ; Segment type: Pure data
.rdata:0000035C ; Segment permissions: Read
.rdata:0000035C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000035C _rdata          segment para public 'DATA' use32
.rdata:0000035C                 assume cs:_rdata
.rdata:0000035C                 ;org 35Ch
.rdata:0000035C ; COMDAT (pick any)
.rdata:0000035C                 public __real@bf847ae147ae147b
.rdata:0000035C __real@bf847ae147ae147b dq 0BF847AE147AE147Bh
.rdata:0000035C                                         ; DATA XREF: nsHebrewProber::GetCharSetName(void)+98r
.rdata:0000035C _rdata          ends
.rdata:0000035C
UNDEF:00000370 ; ===========================================================================
UNDEF:00000370
UNDEF:00000370 ; Segment type: Externs
UNDEF:00000370 ; UNDEF
UNDEF:00000370                 extrn __fltused:near
UNDEF:00000370
UNDEF:00000370
UNDEF:00000370                 end