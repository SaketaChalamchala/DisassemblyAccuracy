.text$mn:00000000 ;
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : BF86A685E97E28DFD4215BD187574E3B
.text$mn:00000000 ; Input CRC32 : 0A409DED
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\nsSBCSGroupProber.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; public: __thiscall nsSBCSGroupProber::nsSBCSGroupProber(void)
.text$mn:00000000                 public ??0nsSBCSGroupProber@@QAE@XZ
.text$mn:00000000 ??0nsSBCSGroupProber@@QAE@XZ proc near
.text$mn:00000000
.text$mn:00000000 var_CC          = dword ptr -0CCh
.text$mn:00000000 var_C8          = dword ptr -0C8h
.text$mn:00000000 var_C4          = dword ptr -0C4h
.text$mn:00000000 var_C0          = dword ptr -0C0h
.text$mn:00000000 var_BC          = dword ptr -0BCh
.text$mn:00000000 var_B8          = dword ptr -0B8h
.text$mn:00000000 var_B4          = dword ptr -0B4h
.text$mn:00000000 var_B0          = dword ptr -0B0h
.text$mn:00000000 var_AC          = dword ptr -0ACh
.text$mn:00000000 var_A8          = dword ptr -0A8h
.text$mn:00000000 var_A4          = dword ptr -0A4h
.text$mn:00000000 var_A0          = dword ptr -0A0h
.text$mn:00000000 var_9C          = dword ptr -9Ch
.text$mn:00000000 var_98          = dword ptr -98h
.text$mn:00000000 var_94          = dword ptr -94h
.text$mn:00000000 var_90          = dword ptr -90h
.text$mn:00000000 var_8C          = dword ptr -8Ch
.text$mn:00000000 var_88          = dword ptr -88h
.text$mn:00000000 var_84          = dword ptr -84h
.text$mn:00000000 var_80          = dword ptr -80h
.text$mn:00000000 var_7C          = dword ptr -7Ch
.text$mn:00000000 var_78          = dword ptr -78h
.text$mn:00000000 var_74          = dword ptr -74h
.text$mn:00000000 var_70          = dword ptr -70h
.text$mn:00000000 var_6C          = dword ptr -6Ch
.text$mn:00000000 var_68          = dword ptr -68h
.text$mn:00000000 var_64          = dword ptr -64h
.text$mn:00000000 var_60          = dword ptr -60h
.text$mn:00000000 var_5C          = dword ptr -5Ch
.text$mn:00000000 var_58          = dword ptr -58h
.text$mn:00000000 var_54          = dword ptr -54h
.text$mn:00000000 var_50          = dword ptr -50h
.text$mn:00000000 var_4C          = dword ptr -4Ch
.text$mn:00000000 var_48          = dword ptr -48h
.text$mn:00000000 var_44          = dword ptr -44h
.text$mn:00000000 var_40          = dword ptr -40h
.text$mn:00000000 var_3C          = dword ptr -3Ch
.text$mn:00000000 var_38          = dword ptr -38h
.text$mn:00000000 var_34          = dword ptr -34h
.text$mn:00000000 var_30          = dword ptr -30h
.text$mn:00000000 var_2C          = dword ptr -2Ch
.text$mn:00000000 var_28          = dword ptr -28h
.text$mn:00000000 var_24          = dword ptr -24h
.text$mn:00000000 var_20          = dword ptr -20h
.text$mn:00000000 var_1C          = dword ptr -1Ch
.text$mn:00000000 var_18          = dword ptr -18h
.text$mn:00000000 var_14          = dword ptr -14h
.text$mn:00000000 var_10          = dword ptr -10h
.text$mn:00000000 var_C           = dword ptr -0Ch
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 push    0FFFFFFFFh
.text$mn:00000005                 push    offset __ehhandler$??0nsSBCSGroupProber@@QAE@XZ
.text$mn:0000000A                 mov     eax, large fs:0
.text$mn:00000010                 push    eax
.text$mn:00000011                 sub     esp, 0C0h
.text$mn:00000017                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000001C                 xor     eax, ebp
.text$mn:0000001E                 push    eax
.text$mn:0000001F                 lea     eax, [ebp+var_C]
.text$mn:00000022                 mov     large fs:0, eax
.text$mn:00000028                 mov     [ebp+var_10], ecx
.text$mn:0000002B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000002E                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000033                 mov     [ebp+var_4], 0
.text$mn:0000003A                 mov     eax, [ebp+var_10]
.text$mn:0000003D                 mov     dword ptr [eax], offset ??_7nsSBCSGroupProber@@6B@ ; const nsSBCSGroupProber::`vftable'
.text$mn:00000043                 push    30h ; '0'       ; unsigned int
.text$mn:00000045                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000004A                 add     esp, 4
.text$mn:0000004D                 mov     [ebp+var_70], eax
.text$mn:00000050                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000054                 cmp     [ebp+var_70], 0
.text$mn:00000058                 jz      short loc_6C
.text$mn:0000005A                 push    offset ?Win1251Model@@3USequenceModel@@B ; SequenceModel const Win1251Model
.text$mn:0000005F                 mov     ecx, [ebp+var_70]
.text$mn:00000062                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:00000067                 mov     [ebp+var_28], eax
.text$mn:0000006A                 jmp     short loc_73
.text$mn:0000006C ; ---------------------------------------------------------------------------
.text$mn:0000006C
.text$mn:0000006C loc_6C:                                 ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+58j
.text$mn:0000006C                 mov     [ebp+var_28], 0
.text$mn:00000073
.text$mn:00000073 loc_73:                                 ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+6Aj
.text$mn:00000073                 mov     ecx, [ebp+var_28]
.text$mn:00000076                 mov     [ebp+var_90], ecx
.text$mn:0000007C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000080                 mov     edx, 4
.text$mn:00000085                 imul    eax, edx, 0
.text$mn:00000088                 mov     ecx, [ebp+var_10]
.text$mn:0000008B                 mov     edx, [ebp+var_90]
.text$mn:00000091                 mov     [ecx+eax+8], edx
.text$mn:00000095                 push    30h ; '0'       ; unsigned int
.text$mn:00000097                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000009C                 add     esp, 4
.text$mn:0000009F                 mov     [ebp+var_64], eax
.text$mn:000000A2                 mov     byte ptr [ebp+var_4], 2
.text$mn:000000A6                 cmp     [ebp+var_64], 0
.text$mn:000000AA                 jz      short loc_BE
.text$mn:000000AC                 push    offset ?Koi8rModel@@3USequenceModel@@B ; SequenceModel const Koi8rModel
.text$mn:000000B1                 mov     ecx, [ebp+var_64]
.text$mn:000000B4                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:000000B9                 mov     [ebp+var_30], eax
.text$mn:000000BC                 jmp     short loc_C5
.text$mn:000000BE ; ---------------------------------------------------------------------------
.text$mn:000000BE
.text$mn:000000BE loc_BE:                                 ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+AAj
.text$mn:000000BE                 mov     [ebp+var_30], 0
.text$mn:000000C5
.text$mn:000000C5 loc_C5:                                 ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+BCj
.text$mn:000000C5                 mov     eax, [ebp+var_30]
.text$mn:000000C8                 mov     [ebp+var_98], eax
.text$mn:000000CE                 mov     byte ptr [ebp+var_4], 0
.text$mn:000000D2                 mov     ecx, 4
.text$mn:000000D7                 shl     ecx, 0
.text$mn:000000DA                 mov     edx, [ebp+var_10]
.text$mn:000000DD                 mov     eax, [ebp+var_98]
.text$mn:000000E3                 mov     [edx+ecx+8], eax
.text$mn:000000E7                 push    30h ; '0'       ; unsigned int
.text$mn:000000E9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000000EE                 add     esp, 4
.text$mn:000000F1                 mov     [ebp+var_6C], eax
.text$mn:000000F4                 mov     byte ptr [ebp+var_4], 3
.text$mn:000000F8                 cmp     [ebp+var_6C], 0
.text$mn:000000FC                 jz      short loc_110
.text$mn:000000FE                 push    offset ?Latin5Model@@3USequenceModel@@B ; SequenceModel const Latin5Model
.text$mn:00000103                 mov     ecx, [ebp+var_6C]
.text$mn:00000106                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:0000010B                 mov     [ebp+var_38], eax
.text$mn:0000010E                 jmp     short loc_117
.text$mn:00000110 ; ---------------------------------------------------------------------------
.text$mn:00000110
.text$mn:00000110 loc_110:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+FCj
.text$mn:00000110                 mov     [ebp+var_38], 0
.text$mn:00000117
.text$mn:00000117 loc_117:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+10Ej
.text$mn:00000117                 mov     ecx, [ebp+var_38]
.text$mn:0000011A                 mov     [ebp+var_C0], ecx
.text$mn:00000120                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000124                 mov     edx, 4
.text$mn:00000129                 shl     edx, 1
.text$mn:0000012B                 mov     eax, [ebp+var_10]
.text$mn:0000012E                 mov     ecx, [ebp+var_C0]
.text$mn:00000134                 mov     [eax+edx+8], ecx
.text$mn:00000138                 push    30h ; '0'       ; unsigned int
.text$mn:0000013A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000013F                 add     esp, 4
.text$mn:00000142                 mov     [ebp+var_74], eax
.text$mn:00000145                 mov     byte ptr [ebp+var_4], 4
.text$mn:00000149                 cmp     [ebp+var_74], 0
.text$mn:0000014D                 jz      short loc_161
.text$mn:0000014F                 push    offset ?MacCyrillicModel@@3USequenceModel@@B ; SequenceModel const MacCyrillicModel
.text$mn:00000154                 mov     ecx, [ebp+var_74]
.text$mn:00000157                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:0000015C                 mov     [ebp+var_40], eax
.text$mn:0000015F                 jmp     short loc_168
.text$mn:00000161 ; ---------------------------------------------------------------------------
.text$mn:00000161
.text$mn:00000161 loc_161:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+14Dj
.text$mn:00000161                 mov     [ebp+var_40], 0
.text$mn:00000168
.text$mn:00000168 loc_168:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+15Fj
.text$mn:00000168                 mov     edx, [ebp+var_40]
.text$mn:0000016B                 mov     [ebp+var_A0], edx
.text$mn:00000171                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000175                 mov     eax, 4
.text$mn:0000017A                 imul    ecx, eax, 3
.text$mn:0000017D                 mov     edx, [ebp+var_10]
.text$mn:00000180                 mov     eax, [ebp+var_A0]
.text$mn:00000186                 mov     [edx+ecx+8], eax
.text$mn:0000018A                 push    30h ; '0'       ; unsigned int
.text$mn:0000018C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000191                 add     esp, 4
.text$mn:00000194                 mov     [ebp+var_7C], eax
.text$mn:00000197                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000019B                 cmp     [ebp+var_7C], 0
.text$mn:0000019F                 jz      short loc_1B3
.text$mn:000001A1                 push    offset ?Ibm866Model@@3USequenceModel@@B ; SequenceModel const Ibm866Model
.text$mn:000001A6                 mov     ecx, [ebp+var_7C]
.text$mn:000001A9                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:000001AE                 mov     [ebp+var_48], eax
.text$mn:000001B1                 jmp     short loc_1BA
.text$mn:000001B3 ; ---------------------------------------------------------------------------
.text$mn:000001B3
.text$mn:000001B3 loc_1B3:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+19Fj
.text$mn:000001B3                 mov     [ebp+var_48], 0
.text$mn:000001BA
.text$mn:000001BA loc_1BA:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+1B1j
.text$mn:000001BA                 mov     ecx, [ebp+var_48]
.text$mn:000001BD                 mov     [ebp+var_B8], ecx
.text$mn:000001C3                 mov     byte ptr [ebp+var_4], 0
.text$mn:000001C7                 mov     edx, 4
.text$mn:000001CC                 shl     edx, 2
.text$mn:000001CF                 mov     eax, [ebp+var_10]
.text$mn:000001D2                 mov     ecx, [ebp+var_B8]
.text$mn:000001D8                 mov     [eax+edx+8], ecx
.text$mn:000001DC                 push    30h ; '0'       ; unsigned int
.text$mn:000001DE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000001E3                 add     esp, 4
.text$mn:000001E6                 mov     [ebp+var_84], eax
.text$mn:000001EC                 mov     byte ptr [ebp+var_4], 6
.text$mn:000001F0                 cmp     [ebp+var_84], 0
.text$mn:000001F7                 jz      short loc_20E
.text$mn:000001F9                 push    offset ?Ibm855Model@@3USequenceModel@@B ; SequenceModel const Ibm855Model
.text$mn:000001FE                 mov     ecx, [ebp+var_84]
.text$mn:00000204                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:00000209                 mov     [ebp+var_50], eax
.text$mn:0000020C                 jmp     short loc_215
.text$mn:0000020E ; ---------------------------------------------------------------------------
.text$mn:0000020E
.text$mn:0000020E loc_20E:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+1F7j
.text$mn:0000020E                 mov     [ebp+var_50], 0
.text$mn:00000215
.text$mn:00000215 loc_215:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+20Cj
.text$mn:00000215                 mov     edx, [ebp+var_50]
.text$mn:00000218                 mov     [ebp+var_A8], edx
.text$mn:0000021E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000222                 mov     eax, 4
.text$mn:00000227                 imul    ecx, eax, 5
.text$mn:0000022A                 mov     edx, [ebp+var_10]
.text$mn:0000022D                 mov     eax, [ebp+var_A8]
.text$mn:00000233                 mov     [edx+ecx+8], eax
.text$mn:00000237                 push    30h ; '0'       ; unsigned int
.text$mn:00000239                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000023E                 add     esp, 4
.text$mn:00000241                 mov     [ebp+var_8C], eax
.text$mn:00000247                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000024B                 cmp     [ebp+var_8C], 0
.text$mn:00000252                 jz      short loc_269
.text$mn:00000254                 push    offset ?Latin7Model@@3USequenceModel@@B ; SequenceModel const Latin7Model
.text$mn:00000259                 mov     ecx, [ebp+var_8C]
.text$mn:0000025F                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:00000264                 mov     [ebp+var_58], eax
.text$mn:00000267                 jmp     short loc_270
.text$mn:00000269 ; ---------------------------------------------------------------------------
.text$mn:00000269
.text$mn:00000269 loc_269:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+252j
.text$mn:00000269                 mov     [ebp+var_58], 0
.text$mn:00000270
.text$mn:00000270 loc_270:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+267j
.text$mn:00000270                 mov     ecx, [ebp+var_58]
.text$mn:00000273                 mov     [ebp+var_C8], ecx
.text$mn:00000279                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000027D                 mov     edx, 4
.text$mn:00000282                 imul    eax, edx, 6
.text$mn:00000285                 mov     ecx, [ebp+var_10]
.text$mn:00000288                 mov     edx, [ebp+var_C8]
.text$mn:0000028E                 mov     [ecx+eax+8], edx
.text$mn:00000292                 push    30h ; '0'       ; unsigned int
.text$mn:00000294                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000299                 add     esp, 4
.text$mn:0000029C                 mov     [ebp+var_80], eax
.text$mn:0000029F                 mov     byte ptr [ebp+var_4], 8
.text$mn:000002A3                 cmp     [ebp+var_80], 0
.text$mn:000002A7                 jz      short loc_2BB
.text$mn:000002A9                 push    offset ?Win1253Model@@3USequenceModel@@B ; SequenceModel const Win1253Model
.text$mn:000002AE                 mov     ecx, [ebp+var_80]
.text$mn:000002B1                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:000002B6                 mov     [ebp+var_60], eax
.text$mn:000002B9                 jmp     short loc_2C2
.text$mn:000002BB ; ---------------------------------------------------------------------------
.text$mn:000002BB
.text$mn:000002BB loc_2BB:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2A7j
.text$mn:000002BB                 mov     [ebp+var_60], 0
.text$mn:000002C2
.text$mn:000002C2 loc_2C2:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2B9j
.text$mn:000002C2                 mov     eax, [ebp+var_60]
.text$mn:000002C5                 mov     [ebp+var_B0], eax
.text$mn:000002CB                 mov     byte ptr [ebp+var_4], 0
.text$mn:000002CF                 mov     ecx, 4
.text$mn:000002D4                 imul    edx, ecx, 7
.text$mn:000002D7                 mov     eax, [ebp+var_10]
.text$mn:000002DA                 mov     ecx, [ebp+var_B0]
.text$mn:000002E0                 mov     [eax+edx+8], ecx
.text$mn:000002E4                 push    30h ; '0'       ; unsigned int
.text$mn:000002E6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000002EB                 add     esp, 4
.text$mn:000002EE                 mov     [ebp+var_78], eax
.text$mn:000002F1                 mov     byte ptr [ebp+var_4], 9
.text$mn:000002F5                 cmp     [ebp+var_78], 0
.text$mn:000002F9                 jz      short loc_30D
.text$mn:000002FB                 push    offset ?Latin5BulgarianModel@@3USequenceModel@@B ; SequenceModel const Latin5BulgarianModel
.text$mn:00000300                 mov     ecx, [ebp+var_78]
.text$mn:00000303                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:00000308                 mov     [ebp+var_68], eax
.text$mn:0000030B                 jmp     short loc_314
.text$mn:0000030D ; ---------------------------------------------------------------------------
.text$mn:0000030D
.text$mn:0000030D loc_30D:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2F9j
.text$mn:0000030D                 mov     [ebp+var_68], 0
.text$mn:00000314
.text$mn:00000314 loc_314:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+30Bj
.text$mn:00000314                 mov     edx, [ebp+var_68]
.text$mn:00000317                 mov     [ebp+var_94], edx
.text$mn:0000031D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000321                 mov     eax, 4
.text$mn:00000326                 shl     eax, 3
.text$mn:00000329                 mov     ecx, [ebp+var_10]
.text$mn:0000032C                 mov     edx, [ebp+var_94]
.text$mn:00000332                 mov     [ecx+eax+8], edx
.text$mn:00000336                 push    30h ; '0'       ; unsigned int
.text$mn:00000338                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000033D                 add     esp, 4
.text$mn:00000340                 mov     [ebp+var_88], eax
.text$mn:00000346                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000034A                 cmp     [ebp+var_88], 0
.text$mn:00000351                 jz      short loc_368
.text$mn:00000353                 push    offset ?Win1251BulgarianModel@@3USequenceModel@@B ; SequenceModel const Win1251BulgarianModel
.text$mn:00000358                 mov     ecx, [ebp+var_88]
.text$mn:0000035E                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:00000363                 mov     [ebp+var_20], eax
.text$mn:00000366                 jmp     short loc_36F
.text$mn:00000368 ; ---------------------------------------------------------------------------
.text$mn:00000368
.text$mn:00000368 loc_368:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+351j
.text$mn:00000368                 mov     [ebp+var_20], 0
.text$mn:0000036F
.text$mn:0000036F loc_36F:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+366j
.text$mn:0000036F                 mov     eax, [ebp+var_20]
.text$mn:00000372                 mov     [ebp+var_9C], eax
.text$mn:00000378                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000037C                 mov     ecx, 4
.text$mn:00000381                 imul    edx, ecx, 9
.text$mn:00000384                 mov     eax, [ebp+var_10]
.text$mn:00000387                 mov     ecx, [ebp+var_9C]
.text$mn:0000038D                 mov     [eax+edx+8], ecx
.text$mn:00000391                 push    30h ; '0'       ; unsigned int
.text$mn:00000393                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000398                 add     esp, 4
.text$mn:0000039B                 mov     [ebp+var_54], eax
.text$mn:0000039E                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:000003A2                 cmp     [ebp+var_54], 0
.text$mn:000003A6                 jz      short loc_3BA
.text$mn:000003A8                 push    offset ?TIS620ThaiModel@@3USequenceModel@@B ; SequenceModel const TIS620ThaiModel
.text$mn:000003AD                 mov     ecx, [ebp+var_54]
.text$mn:000003B0                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)
.text$mn:000003B5                 mov     [ebp+var_5C], eax
.text$mn:000003B8                 jmp     short loc_3C1
.text$mn:000003BA ; ---------------------------------------------------------------------------
.text$mn:000003BA
.text$mn:000003BA loc_3BA:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3A6j
.text$mn:000003BA                 mov     [ebp+var_5C], 0
.text$mn:000003C1
.text$mn:000003C1 loc_3C1:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3B8j
.text$mn:000003C1                 mov     edx, [ebp+var_5C]
.text$mn:000003C4                 mov     [ebp+var_A4], edx
.text$mn:000003CA                 mov     byte ptr [ebp+var_4], 0
.text$mn:000003CE                 mov     eax, 4
.text$mn:000003D3                 imul    ecx, eax, 0Ah
.text$mn:000003D6                 mov     edx, [ebp+var_10]
.text$mn:000003D9                 mov     eax, [ebp+var_A4]
.text$mn:000003DF                 mov     [edx+ecx+8], eax
.text$mn:000003E3                 push    18h             ; unsigned int
.text$mn:000003E5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000003EA                 add     esp, 4
.text$mn:000003ED                 mov     [ebp+var_24], eax
.text$mn:000003F0                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:000003F4                 cmp     [ebp+var_24], 0
.text$mn:000003F8                 jz      short loc_407
.text$mn:000003FA                 mov     ecx, [ebp+var_24]
.text$mn:000003FD                 call    ??0nsHebrewProber@@QAE@XZ ; nsHebrewProber::nsHebrewProber(void)
.text$mn:00000402                 mov     [ebp+var_2C], eax
.text$mn:00000405                 jmp     short loc_40E
.text$mn:00000407 ; ---------------------------------------------------------------------------
.text$mn:00000407
.text$mn:00000407 loc_407:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3F8j
.text$mn:00000407                 mov     [ebp+var_2C], 0
.text$mn:0000040E
.text$mn:0000040E loc_40E:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+405j
.text$mn:0000040E                 mov     ecx, [ebp+var_2C]
.text$mn:00000411                 mov     [ebp+var_AC], ecx
.text$mn:00000417                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000041B                 mov     edx, [ebp+var_AC]
.text$mn:00000421                 mov     [ebp+var_18], edx
.text$mn:00000424                 mov     eax, 4
.text$mn:00000429                 imul    ecx, eax, 0Bh
.text$mn:0000042C                 mov     edx, [ebp+var_10]
.text$mn:0000042F                 mov     eax, [ebp+var_18]
.text$mn:00000432                 mov     [edx+ecx+8], eax
.text$mn:00000436                 push    30h ; '0'       ; unsigned int
.text$mn:00000438                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000043D                 add     esp, 4
.text$mn:00000440                 mov     [ebp+var_34], eax
.text$mn:00000443                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00000447                 cmp     [ebp+var_34], 0
.text$mn:0000044B                 jz      short loc_465
.text$mn:0000044D                 mov     ecx, [ebp+var_18]
.text$mn:00000450                 push    ecx
.text$mn:00000451                 push    0
.text$mn:00000453                 push    offset ?Win1255Model@@3USequenceModel@@B ; SequenceModel const Win1255Model
.text$mn:00000458                 mov     ecx, [ebp+var_34]
.text$mn:0000045B                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *,bool,nsCharSetProber *)
.text$mn:00000460                 mov     [ebp+var_3C], eax
.text$mn:00000463                 jmp     short loc_46C
.text$mn:00000465 ; ---------------------------------------------------------------------------
.text$mn:00000465
.text$mn:00000465 loc_465:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+44Bj
.text$mn:00000465                 mov     [ebp+var_3C], 0
.text$mn:0000046C
.text$mn:0000046C loc_46C:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+463j
.text$mn:0000046C                 mov     edx, [ebp+var_3C]
.text$mn:0000046F                 mov     [ebp+var_B4], edx
.text$mn:00000475                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000479                 mov     eax, 4
.text$mn:0000047E                 imul    ecx, eax, 0Ch
.text$mn:00000481                 mov     edx, [ebp+var_10]
.text$mn:00000484                 mov     eax, [ebp+var_B4]
.text$mn:0000048A                 mov     [edx+ecx+8], eax
.text$mn:0000048E                 push    30h ; '0'       ; unsigned int
.text$mn:00000490                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000495                 add     esp, 4
.text$mn:00000498                 mov     [ebp+var_44], eax
.text$mn:0000049B                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:0000049F                 cmp     [ebp+var_44], 0
.text$mn:000004A3                 jz      short loc_4BD
.text$mn:000004A5                 mov     ecx, [ebp+var_18]
.text$mn:000004A8                 push    ecx
.text$mn:000004A9                 push    1
.text$mn:000004AB                 push    offset ?Win1255Model@@3USequenceModel@@B ; SequenceModel const Win1255Model
.text$mn:000004B0                 mov     ecx, [ebp+var_44]
.text$mn:000004B3                 call    ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *,bool,nsCharSetProber *)
.text$mn:000004B8                 mov     [ebp+var_4C], eax
.text$mn:000004BB                 jmp     short loc_4C4
.text$mn:000004BD ; ---------------------------------------------------------------------------
.text$mn:000004BD
.text$mn:000004BD loc_4BD:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+4A3j
.text$mn:000004BD                 mov     [ebp+var_4C], 0
.text$mn:000004C4
.text$mn:000004C4 loc_4C4:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+4BBj
.text$mn:000004C4                 mov     edx, [ebp+var_4C]
.text$mn:000004C7                 mov     [ebp+var_BC], edx
.text$mn:000004CD                 mov     byte ptr [ebp+var_4], 0
.text$mn:000004D1                 mov     eax, 4
.text$mn:000004D6                 imul    ecx, eax, 0Dh
.text$mn:000004D9                 mov     edx, [ebp+var_10]
.text$mn:000004DC                 mov     eax, [ebp+var_BC]
.text$mn:000004E2                 mov     [edx+ecx+8], eax
.text$mn:000004E6                 mov     ecx, 4
.text$mn:000004EB                 imul    edx, ecx, 0Bh
.text$mn:000004EE                 mov     eax, [ebp+var_10]
.text$mn:000004F1                 cmp     dword ptr [eax+edx+8], 0
.text$mn:000004F6                 jz      short loc_546
.text$mn:000004F8                 mov     ecx, 4
.text$mn:000004FD                 imul    edx, ecx, 0Ch
.text$mn:00000500                 mov     eax, [ebp+var_10]
.text$mn:00000503                 cmp     dword ptr [eax+edx+8], 0
.text$mn:00000508                 jz      short loc_546
.text$mn:0000050A                 mov     ecx, 4
.text$mn:0000050F                 imul    edx, ecx, 0Dh
.text$mn:00000512                 mov     eax, [ebp+var_10]
.text$mn:00000515                 cmp     dword ptr [eax+edx+8], 0
.text$mn:0000051A                 jz      short loc_546
.text$mn:0000051C                 mov     ecx, 4
.text$mn:00000521                 imul    edx, ecx, 0Dh
.text$mn:00000524                 mov     eax, [ebp+var_10]
.text$mn:00000527                 mov     ecx, [eax+edx+8]
.text$mn:0000052B                 push    ecx             ; struct nsCharSetProber *
.text$mn:0000052C                 mov     edx, 4
.text$mn:00000531                 imul    eax, edx, 0Ch
.text$mn:00000534                 mov     ecx, [ebp+var_10]
.text$mn:00000537                 mov     edx, [ecx+eax+8]
.text$mn:0000053B                 push    edx             ; struct nsCharSetProber *
.text$mn:0000053C                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000053F                 call    ?SetModelProbers@nsHebrewProber@@QAEXPAVnsCharSetProber@@0@Z ; nsHebrewProber::SetModelProbers(nsCharSetProber *,nsCharSetProber *)
.text$mn:00000544                 jmp     short loc_5AD
.text$mn:00000546 ; ---------------------------------------------------------------------------
.text$mn:00000546
.text$mn:00000546 loc_546:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+4F6j
.text$mn:00000546                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+508j ...
.text$mn:00000546                 mov     [ebp+var_14], 0Bh
.text$mn:0000054D                 jmp     short loc_558
.text$mn:0000054F ; ---------------------------------------------------------------------------
.text$mn:0000054F
.text$mn:0000054F loc_54F:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+5ABj
.text$mn:0000054F                 mov     eax, [ebp+var_14]
.text$mn:00000552                 add     eax, 1
.text$mn:00000555                 mov     [ebp+var_14], eax
.text$mn:00000558
.text$mn:00000558 loc_558:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+54Dj
.text$mn:00000558                 cmp     [ebp+var_14], 0Dh
.text$mn:0000055C                 ja      short loc_5AD
.text$mn:0000055E                 mov     ecx, [ebp+var_14]
.text$mn:00000561                 mov     edx, [ebp+var_10]
.text$mn:00000564                 mov     eax, [edx+ecx*4+8]
.text$mn:00000568                 mov     [ebp+var_C4], eax
.text$mn:0000056E                 mov     ecx, [ebp+var_C4]
.text$mn:00000574                 mov     [ebp+var_1C], ecx
.text$mn:00000577                 cmp     [ebp+var_1C], 0
.text$mn:0000057B                 jz      short loc_593
.text$mn:0000057D                 push    1
.text$mn:0000057F                 mov     edx, [ebp+var_1C]
.text$mn:00000582                 mov     eax, [edx]
.text$mn:00000584                 mov     ecx, [ebp+var_1C]
.text$mn:00000587                 mov     edx, [eax]
.text$mn:00000589                 call    edx
.text$mn:0000058B                 mov     [ebp+var_CC], eax
.text$mn:00000591                 jmp     short loc_59D
.text$mn:00000593 ; ---------------------------------------------------------------------------
.text$mn:00000593
.text$mn:00000593 loc_593:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+57Bj
.text$mn:00000593                 mov     [ebp+var_CC], 0
.text$mn:0000059D
.text$mn:0000059D loc_59D:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+591j
.text$mn:0000059D                 mov     eax, [ebp+var_14]
.text$mn:000005A0                 mov     ecx, [ebp+var_10]
.text$mn:000005A3                 mov     dword ptr [ecx+eax*4+8], 0
.text$mn:000005AB                 jmp     short loc_54F
.text$mn:000005AD ; ---------------------------------------------------------------------------
.text$mn:000005AD
.text$mn:000005AD loc_5AD:                                ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+544j
.text$mn:000005AD                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+55Cj
.text$mn:000005AD                 mov     ecx, [ebp+var_10] ; this
.text$mn:000005B0                 call    ?Reset@nsSBCSGroupProber@@UAEXXZ ; nsSBCSGroupProber::Reset(void)
.text$mn:000005B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000005BC                 mov     eax, [ebp+var_10]
.text$mn:000005BF                 mov     ecx, [ebp+var_C]
.text$mn:000005C2                 mov     large fs:0, ecx
.text$mn:000005C9                 pop     ecx
.text$mn:000005CA                 mov     esp, ebp
.text$mn:000005CC                 pop     ebp
.text$mn:000005CD                 retn
.text$mn:000005CD ??0nsSBCSGroupProber@@QAE@XZ endp
.text$mn:000005CD
.text$mn:000005CD ; ---------------------------------------------------------------------------
.text$mn:000005CE                 align 10h
.text$mn:000005D0
.text$mn:000005D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000005D0
.text$mn:000005D0 ; Attributes: bp-based frame
.text$mn:000005D0
.text$mn:000005D0 ; _DWORD __thiscall nsSBCSGroupProber::~nsSBCSGroupProber(nsSBCSGroupProber *__hidden this)
.text$mn:000005D0                 public ??1nsSBCSGroupProber@@UAE@XZ
.text$mn:000005D0 ??1nsSBCSGroupProber@@UAE@XZ proc near  ; CODE XREF: nsSBCSGroupProber::`scalar deleting destructor'(uint)+Ap
.text$mn:000005D0
.text$mn:000005D0 var_20          = dword ptr -20h
.text$mn:000005D0 var_1C          = dword ptr -1Ch
.text$mn:000005D0 var_18          = dword ptr -18h
.text$mn:000005D0 var_14          = dword ptr -14h
.text$mn:000005D0 var_10          = dword ptr -10h
.text$mn:000005D0 var_C           = dword ptr -0Ch
.text$mn:000005D0 var_4           = dword ptr -4
.text$mn:000005D0
.text$mn:000005D0                 push    ebp
.text$mn:000005D1                 mov     ebp, esp
.text$mn:000005D3                 push    0FFFFFFFFh
.text$mn:000005D5                 push    offset __ehhandler$??1nsSBCSGroupProber@@UAE@XZ
.text$mn:000005DA                 mov     eax, large fs:0
.text$mn:000005E0                 push    eax
.text$mn:000005E1                 sub     esp, 14h
.text$mn:000005E4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000005E9                 xor     eax, ebp
.text$mn:000005EB                 push    eax
.text$mn:000005EC                 lea     eax, [ebp+var_C]
.text$mn:000005EF                 mov     large fs:0, eax
.text$mn:000005F5                 mov     [ebp+var_18], ecx
.text$mn:000005F8                 mov     eax, [ebp+var_18]
.text$mn:000005FB                 mov     dword ptr [eax], offset ??_7nsSBCSGroupProber@@6B@ ; const nsSBCSGroupProber::`vftable'
.text$mn:00000601                 mov     [ebp+var_4], 0
.text$mn:00000608                 mov     [ebp+var_10], 0
.text$mn:0000060F                 jmp     short loc_61A
.text$mn:00000611 ; ---------------------------------------------------------------------------
.text$mn:00000611
.text$mn:00000611 loc_611:                                ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void):loc_653j
.text$mn:00000611                 mov     ecx, [ebp+var_10]
.text$mn:00000614                 add     ecx, 1
.text$mn:00000617                 mov     [ebp+var_10], ecx
.text$mn:0000061A
.text$mn:0000061A loc_61A:                                ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+3Fj
.text$mn:0000061A                 cmp     [ebp+var_10], 0Eh
.text$mn:0000061E                 jnb     short loc_655
.text$mn:00000620                 mov     edx, [ebp+var_10]
.text$mn:00000623                 mov     eax, [ebp+var_18]
.text$mn:00000626                 mov     ecx, [eax+edx*4+8]
.text$mn:0000062A                 mov     [ebp+var_1C], ecx
.text$mn:0000062D                 mov     edx, [ebp+var_1C]
.text$mn:00000630                 mov     [ebp+var_14], edx
.text$mn:00000633                 cmp     [ebp+var_14], 0
.text$mn:00000637                 jz      short loc_64C
.text$mn:00000639                 push    1
.text$mn:0000063B                 mov     eax, [ebp+var_14]
.text$mn:0000063E                 mov     edx, [eax]
.text$mn:00000640                 mov     ecx, [ebp+var_14]
.text$mn:00000643                 mov     eax, [edx]
.text$mn:00000645                 call    eax
.text$mn:00000647                 mov     [ebp+var_20], eax
.text$mn:0000064A                 jmp     short loc_653
.text$mn:0000064C ; ---------------------------------------------------------------------------
.text$mn:0000064C
.text$mn:0000064C loc_64C:                                ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+67j
.text$mn:0000064C                 mov     [ebp+var_20], 0
.text$mn:00000653
.text$mn:00000653 loc_653:                                ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+7Aj
.text$mn:00000653                 jmp     short loc_611
.text$mn:00000655 ; ---------------------------------------------------------------------------
.text$mn:00000655
.text$mn:00000655 loc_655:                                ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+4Ej
.text$mn:00000655                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000065C                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000065F                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000664                 mov     ecx, [ebp+var_C]
.text$mn:00000667                 mov     large fs:0, ecx
.text$mn:0000066E                 pop     ecx
.text$mn:0000066F                 mov     esp, ebp
.text$mn:00000671                 pop     ebp
.text$mn:00000672                 retn
.text$mn:00000672 ??1nsSBCSGroupProber@@UAE@XZ endp
.text$mn:00000672
.text$mn:00000672 ; ---------------------------------------------------------------------------
.text$mn:00000673                 align 10h
.text$mn:00000680
.text$mn:00000680 ; =============== S U B R O U T I N E =======================================
.text$mn:00000680
.text$mn:00000680 ; Attributes: bp-based frame
.text$mn:00000680
.text$mn:00000680 ; public: virtual enum  nsProbingState __thiscall nsSBCSGroupProber::HandleData(char const *, unsigned int)
.text$mn:00000680                 public ?HandleData@nsSBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z
.text$mn:00000680 ?HandleData@nsSBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z proc near
.text$mn:00000680                                         ; DATA XREF: .rdata:00001040o
.text$mn:00000680
.text$mn:00000680 var_14          = dword ptr -14h
.text$mn:00000680 var_10          = dword ptr -10h
.text$mn:00000680 Memory          = dword ptr -0Ch
.text$mn:00000680 var_8           = dword ptr -8
.text$mn:00000680 var_4           = dword ptr -4
.text$mn:00000680 arg_0           = dword ptr  8
.text$mn:00000680 arg_4           = dword ptr  0Ch
.text$mn:00000680
.text$mn:00000680                 push    ebp
.text$mn:00000681                 mov     ebp, esp
.text$mn:00000683                 sub     esp, 14h
.text$mn:00000686                 mov     [ebp+var_4], ecx
.text$mn:00000689                 mov     [ebp+Memory], 0
.text$mn:00000690                 mov     [ebp+var_10], 0
.text$mn:00000697                 lea     eax, [ebp+var_10]
.text$mn:0000069A                 push    eax             ; unsigned int *
.text$mn:0000069B                 lea     ecx, [ebp+Memory]
.text$mn:0000069E                 push    ecx             ; char **
.text$mn:0000069F                 mov     edx, [ebp+arg_4]
.text$mn:000006A2                 push    edx             ; unsigned int
.text$mn:000006A3                 mov     eax, [ebp+arg_0]
.text$mn:000006A6                 push    eax             ; char *
.text$mn:000006A7                 call    ?FilterWithoutEnglishLetters@nsCharSetProber@@SA_NPBDIPAPADAAI@Z ; nsCharSetProber::FilterWithoutEnglishLetters(char const *,uint,char * *,uint &)
.text$mn:000006AC                 add     esp, 10h
.text$mn:000006AF                 movzx   ecx, al
.text$mn:000006B2                 test    ecx, ecx
.text$mn:000006B4                 jnz     short loc_6C0
.text$mn:000006B6                 jmp     $done$16
.text$mn:000006BB ; ---------------------------------------------------------------------------
.text$mn:000006BB                 jmp     $done$16
.text$mn:000006C0 ; ---------------------------------------------------------------------------
.text$mn:000006C0
.text$mn:000006C0 loc_6C0:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+34j
.text$mn:000006C0                 cmp     [ebp+var_10], 0
.text$mn:000006C4                 jnz     short loc_6D0
.text$mn:000006C6                 jmp     $done$16
.text$mn:000006CB ; ---------------------------------------------------------------------------
.text$mn:000006CB                 jmp     $done$16
.text$mn:000006D0 ; ---------------------------------------------------------------------------
.text$mn:000006D0
.text$mn:000006D0 loc_6D0:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+44j
.text$mn:000006D0                 mov     [ebp+var_8], 0
.text$mn:000006D7                 jmp     short loc_6E2
.text$mn:000006D9 ; ---------------------------------------------------------------------------
.text$mn:000006D9
.text$mn:000006D9 loc_6D9:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+7Aj
.text$mn:000006D9                                         ; nsSBCSGroupProber::HandleData(char const *,uint):loc_773j
.text$mn:000006D9                 mov     edx, [ebp+var_8]
.text$mn:000006DC                 add     edx, 1
.text$mn:000006DF                 mov     [ebp+var_8], edx
.text$mn:000006E2
.text$mn:000006E2 loc_6E2:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+57j
.text$mn:000006E2                 cmp     [ebp+var_8], 0Eh
.text$mn:000006E6                 jnb     $done$16
.text$mn:000006EC                 mov     eax, [ebp+var_4]
.text$mn:000006EF                 add     eax, [ebp+var_8]
.text$mn:000006F2                 movzx   ecx, byte ptr [eax+40h]
.text$mn:000006F6                 test    ecx, ecx
.text$mn:000006F8                 jnz     short loc_6FC
.text$mn:000006FA                 jmp     short loc_6D9
.text$mn:000006FC ; ---------------------------------------------------------------------------
.text$mn:000006FC
.text$mn:000006FC loc_6FC:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+78j
.text$mn:000006FC                 mov     edx, [ebp+var_10]
.text$mn:000006FF                 push    edx
.text$mn:00000700                 mov     eax, [ebp+Memory]
.text$mn:00000703                 push    eax
.text$mn:00000704                 mov     ecx, [ebp+var_8]
.text$mn:00000707                 mov     edx, [ebp+var_4]
.text$mn:0000070A                 mov     eax, [edx+ecx*4+8]
.text$mn:0000070E                 mov     ecx, [ebp+var_8]
.text$mn:00000711                 mov     edx, [ebp+var_4]
.text$mn:00000714                 mov     eax, [eax]
.text$mn:00000716                 mov     ecx, [edx+ecx*4+8]
.text$mn:0000071A                 mov     edx, [eax+8]
.text$mn:0000071D                 call    edx
.text$mn:0000071F                 mov     [ebp+var_14], eax
.text$mn:00000722                 cmp     [ebp+var_14], 1
.text$mn:00000726                 jnz     short loc_73F
.text$mn:00000728                 mov     eax, [ebp+var_4]
.text$mn:0000072B                 mov     ecx, [ebp+var_8]
.text$mn:0000072E                 mov     [eax+50h], ecx
.text$mn:00000731                 mov     edx, [ebp+var_4]
.text$mn:00000734                 mov     dword ptr [edx+4], 1
.text$mn:0000073B                 jmp     short $done$16
.text$mn:0000073D ; ---------------------------------------------------------------------------
.text$mn:0000073D                 jmp     short loc_773
.text$mn:0000073F ; ---------------------------------------------------------------------------
.text$mn:0000073F
.text$mn:0000073F loc_73F:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+A6j
.text$mn:0000073F                 cmp     [ebp+var_14], 2
.text$mn:00000743                 jnz     short loc_773
.text$mn:00000745                 mov     eax, [ebp+var_4]
.text$mn:00000748                 add     eax, [ebp+var_8]
.text$mn:0000074B                 mov     byte ptr [eax+40h], 0
.text$mn:0000074F                 mov     ecx, [ebp+var_4]
.text$mn:00000752                 mov     edx, [ecx+54h]
.text$mn:00000755                 sub     edx, 1
.text$mn:00000758                 mov     eax, [ebp+var_4]
.text$mn:0000075B                 mov     [eax+54h], edx
.text$mn:0000075E                 mov     ecx, [ebp+var_4]
.text$mn:00000761                 cmp     dword ptr [ecx+54h], 0
.text$mn:00000765                 ja      short loc_773
.text$mn:00000767                 mov     edx, [ebp+var_4]
.text$mn:0000076A                 mov     dword ptr [edx+4], 2
.text$mn:00000771                 jmp     short $done$16
.text$mn:00000773 ; ---------------------------------------------------------------------------
.text$mn:00000773
.text$mn:00000773 loc_773:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+BDj
.text$mn:00000773                                         ; nsSBCSGroupProber::HandleData(char const *,uint)+C3j ...
.text$mn:00000773                 jmp     loc_6D9
.text$mn:00000778 ; ---------------------------------------------------------------------------
.text$mn:00000778
.text$mn:00000778 $done$16:                               ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+36j
.text$mn:00000778                                         ; nsSBCSGroupProber::HandleData(char const *,uint)+3Bj ...
.text$mn:00000778                 cmp     [ebp+Memory], 0
.text$mn:0000077C                 jz      short loc_78A
.text$mn:0000077E                 mov     eax, [ebp+Memory]
.text$mn:00000781                 push    eax             ; Memory
.text$mn:00000782                 call    _free
.text$mn:00000787                 add     esp, 4
.text$mn:0000078A
.text$mn:0000078A loc_78A:                                ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+FCj
.text$mn:0000078A                 mov     ecx, [ebp+var_4]
.text$mn:0000078D                 mov     eax, [ecx+4]
.text$mn:00000790                 mov     esp, ebp
.text$mn:00000792                 pop     ebp
.text$mn:00000793                 retn    8
.text$mn:00000793 ?HandleData@nsSBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z endp
.text$mn:00000793
.text$mn:00000793 ; ---------------------------------------------------------------------------
.text$mn:00000796                 align 10h
.text$mn:000007A0
.text$mn:000007A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000007A0
.text$mn:000007A0 ; Attributes: bp-based frame
.text$mn:000007A0
.text$mn:000007A0 ; const char *__thiscall nsSBCSGroupProber::GetCharSetName(nsSBCSGroupProber *__hidden this)
.text$mn:000007A0                 public ?GetCharSetName@nsSBCSGroupProber@@UAEPBDXZ
.text$mn:000007A0 ?GetCharSetName@nsSBCSGroupProber@@UAEPBDXZ proc near
.text$mn:000007A0                                         ; DATA XREF: .rdata:0000103Co
.text$mn:000007A0
.text$mn:000007A0 var_4           = dword ptr -4
.text$mn:000007A0
.text$mn:000007A0                 push    ebp
.text$mn:000007A1                 mov     ebp, esp
.text$mn:000007A3                 push    ecx
.text$mn:000007A4                 mov     [ebp+var_4], ecx
.text$mn:000007A7                 mov     eax, [ebp+var_4]
.text$mn:000007AA                 cmp     dword ptr [eax+50h], 0FFFFFFFFh
.text$mn:000007AE                 jnz     short loc_7D2
.text$mn:000007B0                 mov     ecx, [ebp+var_4]
.text$mn:000007B3                 mov     edx, [ecx]
.text$mn:000007B5                 mov     ecx, [ebp+var_4]
.text$mn:000007B8                 mov     eax, [edx+14h]
.text$mn:000007BB                 call    eax
.text$mn:000007BD                 fstp    st
.text$mn:000007BF                 mov     ecx, [ebp+var_4]
.text$mn:000007C2                 cmp     dword ptr [ecx+50h], 0FFFFFFFFh
.text$mn:000007C6                 jnz     short loc_7D2
.text$mn:000007C8                 mov     edx, [ebp+var_4]
.text$mn:000007CB                 mov     dword ptr [edx+50h], 0
.text$mn:000007D2
.text$mn:000007D2 loc_7D2:                                ; CODE XREF: nsSBCSGroupProber::GetCharSetName(void)+Ej
.text$mn:000007D2                                         ; nsSBCSGroupProber::GetCharSetName(void)+26j
.text$mn:000007D2                 mov     eax, [ebp+var_4]
.text$mn:000007D5                 mov     ecx, [eax+50h]
.text$mn:000007D8                 mov     edx, [ebp+var_4]
.text$mn:000007DB                 mov     eax, [edx+ecx*4+8]
.text$mn:000007DF                 mov     ecx, [ebp+var_4]
.text$mn:000007E2                 mov     edx, [ecx+50h]
.text$mn:000007E5                 mov     ecx, [ebp+var_4]
.text$mn:000007E8                 mov     eax, [eax]
.text$mn:000007EA                 mov     ecx, [ecx+edx*4+8]
.text$mn:000007EE                 mov     edx, [eax+4]
.text$mn:000007F1                 call    edx
.text$mn:000007F3                 mov     esp, ebp
.text$mn:000007F5                 pop     ebp
.text$mn:000007F6                 retn
.text$mn:000007F6 ?GetCharSetName@nsSBCSGroupProber@@UAEPBDXZ endp
.text$mn:000007F6
.text$mn:000007F6 ; ---------------------------------------------------------------------------
.text$mn:000007F7                 align 10h
.text$mn:00000800
.text$mn:00000800 ; =============== S U B R O U T I N E =======================================
.text$mn:00000800
.text$mn:00000800 ; Attributes: bp-based frame
.text$mn:00000800
.text$mn:00000800 ; void __thiscall nsSBCSGroupProber::Reset(nsSBCSGroupProber *__hidden this)
.text$mn:00000800                 public ?Reset@nsSBCSGroupProber@@UAEXXZ
.text$mn:00000800 ?Reset@nsSBCSGroupProber@@UAEXXZ proc near
.text$mn:00000800                                         ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+5B0p
.text$mn:00000800                                         ; DATA XREF: .rdata:00001048o
.text$mn:00000800
.text$mn:00000800 var_8           = dword ptr -8
.text$mn:00000800 var_4           = dword ptr -4
.text$mn:00000800
.text$mn:00000800                 push    ebp
.text$mn:00000801                 mov     ebp, esp
.text$mn:00000803                 sub     esp, 8
.text$mn:00000806                 mov     [ebp+var_4], ecx
.text$mn:00000809                 mov     eax, [ebp+var_4]
.text$mn:0000080C                 mov     dword ptr [eax+54h], 0
.text$mn:00000813                 mov     [ebp+var_8], 0
.text$mn:0000081A                 jmp     short loc_825
.text$mn:0000081C ; ---------------------------------------------------------------------------
.text$mn:0000081C
.text$mn:0000081C loc_81C:                                ; CODE XREF: nsSBCSGroupProber::Reset(void):loc_878j
.text$mn:0000081C                 mov     ecx, [ebp+var_8]
.text$mn:0000081F                 add     ecx, 1
.text$mn:00000822                 mov     [ebp+var_8], ecx
.text$mn:00000825
.text$mn:00000825 loc_825:                                ; CODE XREF: nsSBCSGroupProber::Reset(void)+1Aj
.text$mn:00000825                 cmp     [ebp+var_8], 0Eh
.text$mn:00000829                 jnb     short loc_87A
.text$mn:0000082B                 mov     edx, [ebp+var_8]
.text$mn:0000082E                 mov     eax, [ebp+var_4]
.text$mn:00000831                 cmp     dword ptr [eax+edx*4+8], 0
.text$mn:00000836                 jz      short loc_86E
.text$mn:00000838                 mov     ecx, [ebp+var_8]
.text$mn:0000083B                 mov     edx, [ebp+var_4]
.text$mn:0000083E                 mov     eax, [edx+ecx*4+8]
.text$mn:00000842                 mov     ecx, [ebp+var_8]
.text$mn:00000845                 mov     edx, [ebp+var_4]
.text$mn:00000848                 mov     eax, [eax]
.text$mn:0000084A                 mov     ecx, [edx+ecx*4+8]
.text$mn:0000084E                 mov     edx, [eax+10h]
.text$mn:00000851                 call    edx
.text$mn:00000853                 mov     eax, [ebp+var_4]
.text$mn:00000856                 add     eax, [ebp+var_8]
.text$mn:00000859                 mov     byte ptr [eax+40h], 1
.text$mn:0000085D                 mov     ecx, [ebp+var_4]
.text$mn:00000860                 mov     edx, [ecx+54h]
.text$mn:00000863                 add     edx, 1
.text$mn:00000866                 mov     eax, [ebp+var_4]
.text$mn:00000869                 mov     [eax+54h], edx
.text$mn:0000086C                 jmp     short loc_878
.text$mn:0000086E ; ---------------------------------------------------------------------------
.text$mn:0000086E
.text$mn:0000086E loc_86E:                                ; CODE XREF: nsSBCSGroupProber::Reset(void)+36j
.text$mn:0000086E                 mov     ecx, [ebp+var_4]
.text$mn:00000871                 add     ecx, [ebp+var_8]
.text$mn:00000874                 mov     byte ptr [ecx+40h], 0
.text$mn:00000878
.text$mn:00000878 loc_878:                                ; CODE XREF: nsSBCSGroupProber::Reset(void)+6Cj
.text$mn:00000878                 jmp     short loc_81C
.text$mn:0000087A ; ---------------------------------------------------------------------------
.text$mn:0000087A
.text$mn:0000087A loc_87A:                                ; CODE XREF: nsSBCSGroupProber::Reset(void)+29j
.text$mn:0000087A                 mov     edx, [ebp+var_4]
.text$mn:0000087D                 mov     dword ptr [edx+50h], 0FFFFFFFFh
.text$mn:00000884                 mov     eax, [ebp+var_4]
.text$mn:00000887                 mov     dword ptr [eax+4], 0
.text$mn:0000088E                 mov     esp, ebp
.text$mn:00000890                 pop     ebp
.text$mn:00000891                 retn
.text$mn:00000891 ?Reset@nsSBCSGroupProber@@UAEXXZ endp
.text$mn:00000891
.text$mn:00000891 ; ---------------------------------------------------------------------------
.text$mn:00000892                 align 10h
.text$mn:000008A0
.text$mn:000008A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000008A0
.text$mn:000008A0 ; Attributes: bp-based frame
.text$mn:000008A0
.text$mn:000008A0 ; float __thiscall nsSBCSGroupProber::GetConfidence(nsSBCSGroupProber *__hidden this)
.text$mn:000008A0                 public ?GetConfidence@nsSBCSGroupProber@@UAEMXZ
.text$mn:000008A0 ?GetConfidence@nsSBCSGroupProber@@UAEMXZ proc near
.text$mn:000008A0                                         ; DATA XREF: .rdata:0000104Co
.text$mn:000008A0
.text$mn:000008A0 var_14          = dword ptr -14h
.text$mn:000008A0 var_10          = dword ptr -10h
.text$mn:000008A0 var_C           = dword ptr -0Ch
.text$mn:000008A0 var_8           = dword ptr -8
.text$mn:000008A0 var_4           = dword ptr -4
.text$mn:000008A0
.text$mn:000008A0                 push    ebp
.text$mn:000008A1                 mov     ebp, esp
.text$mn:000008A3                 sub     esp, 14h
.text$mn:000008A6                 push    esi
.text$mn:000008A7                 mov     [ebp+var_8], ecx
.text$mn:000008AA                 movss   xmm0, ds:__real@00000000
.text$mn:000008B2                 movss   [ebp+var_C], xmm0
.text$mn:000008B7                 mov     eax, [ebp+var_8]
.text$mn:000008BA                 mov     ecx, [eax+4]
.text$mn:000008BD                 mov     [ebp+var_10], ecx
.text$mn:000008C0                 cmp     [ebp+var_10], 1
.text$mn:000008C4                 jz      short loc_8CE
.text$mn:000008C6                 cmp     [ebp+var_10], 2
.text$mn:000008CA                 jz      short loc_8D6
.text$mn:000008CC                 jmp     short loc_8DE
.text$mn:000008CE ; ---------------------------------------------------------------------------
.text$mn:000008CE
.text$mn:000008CE loc_8CE:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+24j
.text$mn:000008CE                 fld     ds:__real@3f7d70a4
.text$mn:000008D4                 jmp     short loc_947
.text$mn:000008D6 ; ---------------------------------------------------------------------------
.text$mn:000008D6
.text$mn:000008D6 loc_8D6:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+2Aj
.text$mn:000008D6                 fld     ds:__real@3c23d70a
.text$mn:000008DC                 jmp     short loc_947
.text$mn:000008DE ; ---------------------------------------------------------------------------
.text$mn:000008DE
.text$mn:000008DE loc_8DE:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+2Cj
.text$mn:000008DE                 mov     [ebp+var_4], 0
.text$mn:000008E5                 jmp     short loc_8F0
.text$mn:000008E7 ; ---------------------------------------------------------------------------
.text$mn:000008E7
.text$mn:000008E7 loc_8E7:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+64j
.text$mn:000008E7                                         ; nsSBCSGroupProber::GetConfidence(void):loc_942j
.text$mn:000008E7                 mov     edx, [ebp+var_4]
.text$mn:000008EA                 add     edx, 1
.text$mn:000008ED                 mov     [ebp+var_4], edx
.text$mn:000008F0
.text$mn:000008F0 loc_8F0:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+45j
.text$mn:000008F0                 cmp     [ebp+var_4], 0Eh
.text$mn:000008F4                 jnb     short loc_944
.text$mn:000008F6                 mov     eax, [ebp+var_8]
.text$mn:000008F9                 add     eax, [ebp+var_4]
.text$mn:000008FC                 movzx   ecx, byte ptr [eax+40h]
.text$mn:00000900                 test    ecx, ecx
.text$mn:00000902                 jnz     short loc_906
.text$mn:00000904                 jmp     short loc_8E7
.text$mn:00000906 ; ---------------------------------------------------------------------------
.text$mn:00000906
.text$mn:00000906 loc_906:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+62j
.text$mn:00000906                 mov     edx, [ebp+var_4]
.text$mn:00000909                 mov     eax, [ebp+var_8]
.text$mn:0000090C                 mov     ecx, [eax+edx*4+8]
.text$mn:00000910                 mov     edx, [ebp+var_4]
.text$mn:00000913                 mov     eax, [ebp+var_8]
.text$mn:00000916                 mov     esi, [ecx]
.text$mn:00000918                 mov     ecx, [eax+edx*4+8]
.text$mn:0000091C                 mov     edx, [esi+14h]
.text$mn:0000091F                 call    edx
.text$mn:00000921                 fstp    [ebp+var_14]
.text$mn:00000924                 movss   xmm0, [ebp+var_14]
.text$mn:00000929                 comiss  xmm0, [ebp+var_C]
.text$mn:0000092D                 jbe     short loc_942
.text$mn:0000092F                 movss   xmm0, [ebp+var_14]
.text$mn:00000934                 movss   [ebp+var_C], xmm0
.text$mn:00000939                 mov     eax, [ebp+var_8]
.text$mn:0000093C                 mov     ecx, [ebp+var_4]
.text$mn:0000093F                 mov     [eax+50h], ecx
.text$mn:00000942
.text$mn:00000942 loc_942:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+8Dj
.text$mn:00000942                 jmp     short loc_8E7
.text$mn:00000944 ; ---------------------------------------------------------------------------
.text$mn:00000944
.text$mn:00000944 loc_944:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+54j
.text$mn:00000944                 fld     [ebp+var_C]
.text$mn:00000947
.text$mn:00000947 loc_947:                                ; CODE XREF: nsSBCSGroupProber::GetConfidence(void)+34j
.text$mn:00000947                                         ; nsSBCSGroupProber::GetConfidence(void)+3Cj
.text$mn:00000947                 pop     esi
.text$mn:00000948                 mov     esp, ebp
.text$mn:0000094A                 pop     ebp
.text$mn:0000094B                 retn
.text$mn:0000094B ?GetConfidence@nsSBCSGroupProber@@UAEMXZ endp
.text$mn:0000094B
.text$mn:0000094B _text$mn        ends
.text$mn:0000094B
.text$x:0000094C ; ===========================================================================
.text$x:0000094C
.text$x:0000094C ; Segment type: Pure code
.text$x:0000094C ; Segment permissions: Read/Execute
.text$x:0000094C _text$x         segment para public 'CODE' use32
.text$x:0000094C                 assume cs:_text$x
.text$x:0000094C                 ;org 94Ch
.text$x:0000094C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:0000094C
.text$x:0000094C ; =============== S U B R O U T I N E =======================================
.text$x:0000094C
.text$x:0000094C
.text$x:0000094C __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$0 proc near
.text$x:0000094C                                         ; DATA XREF: .xdata$x:00000F28o
.text$x:0000094C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000094F                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:0000094F __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$0 endp
.text$x:0000094F
.text$x:00000954
.text$x:00000954 ; =============== S U B R O U T I N E =======================================
.text$x:00000954
.text$x:00000954
.text$x:00000954 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$1 proc near
.text$x:00000954                                         ; DATA XREF: .xdata$x:00000F30o
.text$x:00000954                 mov     eax, [ebp-70h]
.text$x:00000957                 push    eax             ; void *
.text$x:00000958                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000095D                 pop     ecx
.text$x:0000095E                 retn
.text$x:0000095E __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$1 endp
.text$x:0000095E
.text$x:0000095F
.text$x:0000095F ; =============== S U B R O U T I N E =======================================
.text$x:0000095F
.text$x:0000095F
.text$x:0000095F __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$2 proc near
.text$x:0000095F                                         ; DATA XREF: .xdata$x:00000F38o
.text$x:0000095F                 mov     eax, [ebp-64h]
.text$x:00000962                 push    eax             ; void *
.text$x:00000963                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000968                 pop     ecx
.text$x:00000969                 retn
.text$x:00000969 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$2 endp
.text$x:00000969
.text$x:0000096A
.text$x:0000096A ; =============== S U B R O U T I N E =======================================
.text$x:0000096A
.text$x:0000096A
.text$x:0000096A __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$3 proc near
.text$x:0000096A                                         ; DATA XREF: .xdata$x:00000F40o
.text$x:0000096A                 mov     eax, [ebp-6Ch]
.text$x:0000096D                 push    eax             ; void *
.text$x:0000096E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000973                 pop     ecx
.text$x:00000974                 retn
.text$x:00000974 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$3 endp
.text$x:00000974
.text$x:00000975
.text$x:00000975 ; =============== S U B R O U T I N E =======================================
.text$x:00000975
.text$x:00000975
.text$x:00000975 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$4 proc near
.text$x:00000975                                         ; DATA XREF: .xdata$x:00000F48o
.text$x:00000975                 mov     eax, [ebp-74h]
.text$x:00000978                 push    eax             ; void *
.text$x:00000979                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000097E                 pop     ecx
.text$x:0000097F                 retn
.text$x:0000097F __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$4 endp
.text$x:0000097F
.text$x:00000980
.text$x:00000980 ; =============== S U B R O U T I N E =======================================
.text$x:00000980
.text$x:00000980
.text$x:00000980 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$5 proc near
.text$x:00000980                                         ; DATA XREF: .xdata$x:00000F50o
.text$x:00000980                 mov     eax, [ebp-7Ch]
.text$x:00000983                 push    eax             ; void *
.text$x:00000984                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000989                 pop     ecx
.text$x:0000098A                 retn
.text$x:0000098A __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$5 endp
.text$x:0000098A
.text$x:0000098B
.text$x:0000098B ; =============== S U B R O U T I N E =======================================
.text$x:0000098B
.text$x:0000098B
.text$x:0000098B __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$6 proc near
.text$x:0000098B                                         ; DATA XREF: .xdata$x:00000F58o
.text$x:0000098B                 mov     eax, [ebp-84h]
.text$x:00000991                 push    eax             ; void *
.text$x:00000992                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000997                 pop     ecx
.text$x:00000998                 retn
.text$x:00000998 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$6 endp
.text$x:00000998
.text$x:00000999
.text$x:00000999 ; =============== S U B R O U T I N E =======================================
.text$x:00000999
.text$x:00000999
.text$x:00000999 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$7 proc near
.text$x:00000999                                         ; DATA XREF: .xdata$x:00000F60o
.text$x:00000999                 mov     eax, [ebp-8Ch]
.text$x:0000099F                 push    eax             ; void *
.text$x:000009A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009A5                 pop     ecx
.text$x:000009A6                 retn
.text$x:000009A6 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$7 endp
.text$x:000009A6
.text$x:000009A7
.text$x:000009A7 ; =============== S U B R O U T I N E =======================================
.text$x:000009A7
.text$x:000009A7
.text$x:000009A7 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$8 proc near
.text$x:000009A7                                         ; DATA XREF: .xdata$x:00000F68o
.text$x:000009A7                 mov     eax, [ebp-80h]
.text$x:000009AA                 push    eax             ; void *
.text$x:000009AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009B0                 pop     ecx
.text$x:000009B1                 retn
.text$x:000009B1 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$8 endp
.text$x:000009B1
.text$x:000009B2
.text$x:000009B2 ; =============== S U B R O U T I N E =======================================
.text$x:000009B2
.text$x:000009B2
.text$x:000009B2 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$9 proc near
.text$x:000009B2                                         ; DATA XREF: .xdata$x:00000F70o
.text$x:000009B2                 mov     eax, [ebp-78h]
.text$x:000009B5                 push    eax             ; void *
.text$x:000009B6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009BB                 pop     ecx
.text$x:000009BC                 retn
.text$x:000009BC __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$9 endp
.text$x:000009BC
.text$x:000009BD
.text$x:000009BD ; =============== S U B R O U T I N E =======================================
.text$x:000009BD
.text$x:000009BD
.text$x:000009BD __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$10 proc near
.text$x:000009BD                                         ; DATA XREF: .xdata$x:00000F78o
.text$x:000009BD                 mov     eax, [ebp-88h]
.text$x:000009C3                 push    eax             ; void *
.text$x:000009C4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009C9                 pop     ecx
.text$x:000009CA                 retn
.text$x:000009CA __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$10 endp
.text$x:000009CA
.text$x:000009CB
.text$x:000009CB ; =============== S U B R O U T I N E =======================================
.text$x:000009CB
.text$x:000009CB
.text$x:000009CB __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$11 proc near
.text$x:000009CB                                         ; DATA XREF: .xdata$x:00000F80o
.text$x:000009CB                 mov     eax, [ebp-54h]
.text$x:000009CE                 push    eax             ; void *
.text$x:000009CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009D4                 pop     ecx
.text$x:000009D5                 retn
.text$x:000009D5 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$11 endp
.text$x:000009D5
.text$x:000009D6
.text$x:000009D6 ; =============== S U B R O U T I N E =======================================
.text$x:000009D6
.text$x:000009D6
.text$x:000009D6 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$12 proc near
.text$x:000009D6                                         ; DATA XREF: .xdata$x:00000F88o
.text$x:000009D6                 mov     eax, [ebp-24h]
.text$x:000009D9                 push    eax             ; void *
.text$x:000009DA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009DF                 pop     ecx
.text$x:000009E0                 retn
.text$x:000009E0 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$12 endp
.text$x:000009E0
.text$x:000009E1
.text$x:000009E1 ; =============== S U B R O U T I N E =======================================
.text$x:000009E1
.text$x:000009E1
.text$x:000009E1 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$13 proc near
.text$x:000009E1                                         ; DATA XREF: .xdata$x:00000F90o
.text$x:000009E1                 mov     eax, [ebp-34h]
.text$x:000009E4                 push    eax             ; void *
.text$x:000009E5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009EA                 pop     ecx
.text$x:000009EB                 retn
.text$x:000009EB __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$13 endp
.text$x:000009EB
.text$x:000009EC
.text$x:000009EC ; =============== S U B R O U T I N E =======================================
.text$x:000009EC
.text$x:000009EC
.text$x:000009EC __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$14 proc near
.text$x:000009EC                                         ; DATA XREF: .xdata$x:00000F98o
.text$x:000009EC                 mov     eax, [ebp-44h]
.text$x:000009EF                 push    eax             ; void *
.text$x:000009F0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009F5                 pop     ecx
.text$x:000009F6                 retn
.text$x:000009F6 __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$14 endp
.text$x:000009F6
.text$x:000009F7
.text$x:000009F7 ; =============== S U B R O U T I N E =======================================
.text$x:000009F7
.text$x:000009F7
.text$x:000009F7 __ehhandler$??0nsSBCSGroupProber@@QAE@XZ proc near
.text$x:000009F7                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+5o
.text$x:000009F7
.text$x:000009F7 arg_4           = dword ptr  8
.text$x:000009F7
.text$x:000009F7                 mov     edx, [esp+arg_4]
.text$x:000009FB                 lea     eax, [edx+0Ch]
.text$x:000009FE                 mov     ecx, [edx-0C4h]
.text$x:00000A04                 xor     ecx, eax
.text$x:00000A06                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A0B                 mov     eax, offset __ehfuncinfo$??0nsSBCSGroupProber@@QAE@XZ
.text$x:00000A10                 jmp     ___CxxFrameHandler3
.text$x:00000A10 __ehhandler$??0nsSBCSGroupProber@@QAE@XZ endp
.text$x:00000A10
.text$x:00000A15
.text$x:00000A15 ; =============== S U B R O U T I N E =======================================
.text$x:00000A15
.text$x:00000A15
.text$x:00000A15 __unwindfunclet$??1nsSBCSGroupProber@@UAE@XZ$0 proc near
.text$x:00000A15                                         ; DATA XREF: .xdata$x:00000ED8o
.text$x:00000A15                 mov     ecx, [ebp-18h]  ; this
.text$x:00000A18                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000A18 __unwindfunclet$??1nsSBCSGroupProber@@UAE@XZ$0 endp
.text$x:00000A18
.text$x:00000A1D
.text$x:00000A1D ; =============== S U B R O U T I N E =======================================
.text$x:00000A1D
.text$x:00000A1D
.text$x:00000A1D __ehhandler$??1nsSBCSGroupProber@@UAE@XZ proc near
.text$x:00000A1D                                         ; DATA XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+5o
.text$x:00000A1D
.text$x:00000A1D arg_4           = dword ptr  8
.text$x:00000A1D
.text$x:00000A1D                 mov     edx, [esp+arg_4]
.text$x:00000A21                 lea     eax, [edx+0Ch]
.text$x:00000A24                 mov     ecx, [edx-18h]
.text$x:00000A27                 xor     ecx, eax
.text$x:00000A29                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A2E                 mov     eax, offset __ehfuncinfo$??1nsSBCSGroupProber@@UAE@XZ
.text$x:00000A33                 jmp     ___CxxFrameHandler3
.text$x:00000A33 __ehhandler$??1nsSBCSGroupProber@@UAE@XZ endp
.text$x:00000A33
.text$x:00000A33 _text$x         ends
.text$x:00000A33
.text$mn:00000A38 ; ===========================================================================
.text$mn:00000A38
.text$mn:00000A38 ; Segment type: Pure code
.text$mn:00000A38 ; Segment permissions: Read/Execute
.text$mn:00000A38 _text$mn        segment para public 'CODE' use32
.text$mn:00000A38                 assume cs:_text$mn
.text$mn:00000A38                 ;org 0A38h
.text$mn:00000A38 ; COMDAT (pick any)
.text$mn:00000A38                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000A38
.text$mn:00000A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A38
.text$mn:00000A38 ; Attributes: bp-based frame
.text$mn:00000A38
.text$mn:00000A38 ; _DWORD __thiscall nsCharSetProber::nsCharSetProber(nsCharSetProber *__hidden this)
.text$mn:00000A38                 public ??0nsCharSetProber@@QAE@XZ
.text$mn:00000A38 ??0nsCharSetProber@@QAE@XZ proc near    ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2Ep
.text$mn:00000A38                                         ; nsHebrewProber::nsHebrewProber(void)+29p ...
.text$mn:00000A38
.text$mn:00000A38 var_4           = dword ptr -4
.text$mn:00000A38
.text$mn:00000A38                 push    ebp
.text$mn:00000A39                 mov     ebp, esp
.text$mn:00000A3B                 push    ecx
.text$mn:00000A3C                 mov     [ebp+var_4], ecx
.text$mn:00000A3F                 mov     eax, [ebp+var_4]
.text$mn:00000A42                 mov     dword ptr [eax], offset ??_7nsCharSetProber@@6B@ ; const nsCharSetProber::`vftable'
.text$mn:00000A48                 mov     eax, [ebp+var_4]
.text$mn:00000A4B                 mov     esp, ebp
.text$mn:00000A4D                 pop     ebp
.text$mn:00000A4E                 retn
.text$mn:00000A4E ??0nsCharSetProber@@QAE@XZ endp
.text$mn:00000A4E
.text$mn:00000A4E ; ---------------------------------------------------------------------------
.text$mn:00000A4F                 align 10h
.text$mn:00000A4F _text$mn        ends
.text$mn:00000A4F
.text$mn:00000A50 ; ===========================================================================
.text$mn:00000A50
.text$mn:00000A50 ; Segment type: Pure code
.text$mn:00000A50 ; Segment permissions: Read/Execute
.text$mn:00000A50 _text$mn        segment para public 'CODE' use32
.text$mn:00000A50                 assume cs:_text$mn
.text$mn:00000A50                 ;org 0A50h
.text$mn:00000A50 ; COMDAT (pick any)
.text$mn:00000A50                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000A50
.text$mn:00000A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A50
.text$mn:00000A50 ; Attributes: bp-based frame
.text$mn:00000A50
.text$mn:00000A50 ; public: __thiscall nsHebrewProber::nsHebrewProber(void)
.text$mn:00000A50                 public ??0nsHebrewProber@@QAE@XZ
.text$mn:00000A50 ??0nsHebrewProber@@QAE@XZ proc near     ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3FDp
.text$mn:00000A50
.text$mn:00000A50 var_10          = dword ptr -10h
.text$mn:00000A50 var_C           = dword ptr -0Ch
.text$mn:00000A50 var_4           = dword ptr -4
.text$mn:00000A50
.text$mn:00000A50                 push    ebp
.text$mn:00000A51                 mov     ebp, esp
.text$mn:00000A53                 push    0FFFFFFFFh
.text$mn:00000A55                 push    offset __ehhandler$??0nsHebrewProber@@QAE@XZ
.text$mn:00000A5A                 mov     eax, large fs:0
.text$mn:00000A60                 push    eax
.text$mn:00000A61                 push    ecx
.text$mn:00000A62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000A67                 xor     eax, ebp
.text$mn:00000A69                 push    eax
.text$mn:00000A6A                 lea     eax, [ebp+var_C]
.text$mn:00000A6D                 mov     large fs:0, eax
.text$mn:00000A73                 mov     [ebp+var_10], ecx
.text$mn:00000A76                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000A79                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000A7E                 mov     [ebp+var_4], 0
.text$mn:00000A85                 mov     eax, [ebp+var_10]
.text$mn:00000A88                 mov     dword ptr [eax], offset ??_7nsHebrewProber@@6B@ ; const nsHebrewProber::`vftable'
.text$mn:00000A8E                 mov     ecx, [ebp+var_10]
.text$mn:00000A91                 mov     dword ptr [ecx+10h], 0
.text$mn:00000A98                 mov     edx, [ebp+var_10]
.text$mn:00000A9B                 mov     dword ptr [edx+14h], 0
.text$mn:00000AA2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000AA5                 call    ?Reset@nsHebrewProber@@UAEXXZ ; nsHebrewProber::Reset(void)
.text$mn:00000AAA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000AB1                 mov     eax, [ebp+var_10]
.text$mn:00000AB4                 mov     ecx, [ebp+var_C]
.text$mn:00000AB7                 mov     large fs:0, ecx
.text$mn:00000ABE                 pop     ecx
.text$mn:00000ABF                 mov     esp, ebp
.text$mn:00000AC1                 pop     ebp
.text$mn:00000AC2                 retn
.text$mn:00000AC2 ??0nsHebrewProber@@QAE@XZ endp
.text$mn:00000AC2
.text$mn:00000AC2 ; ---------------------------------------------------------------------------
.text$mn:00000AC3                 align 4
.text$mn:00000AC3 _text$mn        ends
.text$mn:00000AC3
.text$x:00000AC4 ; ===========================================================================
.text$x:00000AC4
.text$x:00000AC4 ; Segment type: Pure code
.text$x:00000AC4 ; Segment permissions: Read/Execute
.text$x:00000AC4 _text$x         segment para public 'CODE' use32
.text$x:00000AC4                 assume cs:_text$x
.text$x:00000AC4                 ;org 0AC4h
.text$x:00000AC4 ; COMDAT (pick associative to section at A50)
.text$x:00000AC4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000AC4
.text$x:00000AC4 ; =============== S U B R O U T I N E =======================================
.text$x:00000AC4
.text$x:00000AC4
.text$x:00000AC4 __unwindfunclet$??0nsHebrewProber@@QAE@XZ$0 proc near
.text$x:00000AC4                                         ; DATA XREF: .xdata$x:00000FA0o
.text$x:00000AC4                 mov     ecx, [ebp-10h]  ; this
.text$x:00000AC7                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000AC7 __unwindfunclet$??0nsHebrewProber@@QAE@XZ$0 endp
.text$x:00000AC7
.text$x:00000ACC
.text$x:00000ACC ; =============== S U B R O U T I N E =======================================
.text$x:00000ACC
.text$x:00000ACC
.text$x:00000ACC __ehhandler$??0nsHebrewProber@@QAE@XZ proc near
.text$x:00000ACC                                         ; DATA XREF: nsHebrewProber::nsHebrewProber(void)+5o
.text$x:00000ACC
.text$x:00000ACC arg_4           = dword ptr  8
.text$x:00000ACC
.text$x:00000ACC                 mov     edx, [esp+arg_4]
.text$x:00000AD0                 lea     eax, [edx+0Ch]
.text$x:00000AD3                 mov     ecx, [edx-8]
.text$x:00000AD6                 xor     ecx, eax
.text$x:00000AD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000ADD                 mov     eax, offset __ehfuncinfo$??0nsHebrewProber@@QAE@XZ
.text$x:00000AE2                 jmp     ___CxxFrameHandler3
.text$x:00000AE2 __ehhandler$??0nsHebrewProber@@QAE@XZ endp
.text$x:00000AE2
.text$x:00000AE2 ; ---------------------------------------------------------------------------
.text$x:00000AE7                 align 4
.text$x:00000AE7 _text$x         ends
.text$x:00000AE7
.text$mn:00000AE8 ; ===========================================================================
.text$mn:00000AE8
.text$mn:00000AE8 ; Segment type: Pure code
.text$mn:00000AE8 ; Segment permissions: Read/Execute
.text$mn:00000AE8 _text$mn        segment para public 'CODE' use32
.text$mn:00000AE8                 assume cs:_text$mn
.text$mn:00000AE8                 ;org 0AE8h
.text$mn:00000AE8 ; COMDAT (pick any)
.text$mn:00000AE8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000AE8
.text$mn:00000AE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000AE8
.text$mn:00000AE8 ; Attributes: bp-based frame
.text$mn:00000AE8
.text$mn:00000AE8 ; public: __thiscall nsSingleByteCharSetProber::nsSingleByteCharSetProber(struct SequenceModel const *)
.text$mn:00000AE8                 public ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z
.text$mn:00000AE8 ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z proc near
.text$mn:00000AE8                                         ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+62p
.text$mn:00000AE8                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+B4p ...
.text$mn:00000AE8
.text$mn:00000AE8 var_10          = dword ptr -10h
.text$mn:00000AE8 var_C           = dword ptr -0Ch
.text$mn:00000AE8 var_4           = dword ptr -4
.text$mn:00000AE8 arg_0           = dword ptr  8
.text$mn:00000AE8
.text$mn:00000AE8                 push    ebp
.text$mn:00000AE9                 mov     ebp, esp
.text$mn:00000AEB                 push    0FFFFFFFFh
.text$mn:00000AED                 push    offset __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z
.text$mn:00000AF2                 mov     eax, large fs:0
.text$mn:00000AF8                 push    eax
.text$mn:00000AF9                 push    ecx
.text$mn:00000AFA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000AFF                 xor     eax, ebp
.text$mn:00000B01                 push    eax
.text$mn:00000B02                 lea     eax, [ebp+var_C]
.text$mn:00000B05                 mov     large fs:0, eax
.text$mn:00000B0B                 mov     [ebp+var_10], ecx
.text$mn:00000B0E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000B11                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000B16                 mov     [ebp+var_4], 0
.text$mn:00000B1D                 mov     eax, [ebp+var_10]
.text$mn:00000B20                 mov     dword ptr [eax], offset ??_7nsSingleByteCharSetProber@@6B@ ; const nsSingleByteCharSetProber::`vftable'
.text$mn:00000B26                 mov     ecx, [ebp+var_10]
.text$mn:00000B29                 mov     edx, [ebp+arg_0]
.text$mn:00000B2C                 mov     [ecx+8], edx
.text$mn:00000B2F                 mov     eax, [ebp+var_10]
.text$mn:00000B32                 mov     byte ptr [eax+0Ch], 0
.text$mn:00000B36                 mov     ecx, [ebp+var_10]
.text$mn:00000B39                 mov     dword ptr [ecx+2Ch], 0
.text$mn:00000B40                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000B43                 call    ?Reset@nsSingleByteCharSetProber@@UAEXXZ ; nsSingleByteCharSetProber::Reset(void)
.text$mn:00000B48                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000B4F                 mov     eax, [ebp+var_10]
.text$mn:00000B52                 mov     ecx, [ebp+var_C]
.text$mn:00000B55                 mov     large fs:0, ecx
.text$mn:00000B5C                 pop     ecx
.text$mn:00000B5D                 mov     esp, ebp
.text$mn:00000B5F                 pop     ebp
.text$mn:00000B60                 retn    4
.text$mn:00000B60 ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z endp
.text$mn:00000B60
.text$mn:00000B60 ; ---------------------------------------------------------------------------
.text$mn:00000B63                 align 4
.text$mn:00000B63 _text$mn        ends
.text$mn:00000B63
.text$x:00000B64 ; ===========================================================================
.text$x:00000B64
.text$x:00000B64 ; Segment type: Pure code
.text$x:00000B64 ; Segment permissions: Read/Execute
.text$x:00000B64 _text$x         segment para public 'CODE' use32
.text$x:00000B64                 assume cs:_text$x
.text$x:00000B64                 ;org 0B64h
.text$x:00000B64 ; COMDAT (pick associative to section at AE8)
.text$x:00000B64                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000B64
.text$x:00000B64 ; =============== S U B R O U T I N E =======================================
.text$x:00000B64
.text$x:00000B64
.text$x:00000B64 __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z$0 proc near
.text$x:00000B64                                         ; DATA XREF: .xdata$x:00000E54o
.text$x:00000B64                 mov     ecx, [ebp-10h]  ; this
.text$x:00000B67                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000B67 __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z$0 endp
.text$x:00000B67
.text$x:00000B6C
.text$x:00000B6C ; =============== S U B R O U T I N E =======================================
.text$x:00000B6C
.text$x:00000B6C
.text$x:00000B6C __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z proc near
.text$x:00000B6C                                         ; DATA XREF: nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)+5o
.text$x:00000B6C
.text$x:00000B6C arg_4           = dword ptr  8
.text$x:00000B6C
.text$x:00000B6C                 mov     edx, [esp+arg_4]
.text$x:00000B70                 lea     eax, [edx+0Ch]
.text$x:00000B73                 mov     ecx, [edx-8]
.text$x:00000B76                 xor     ecx, eax
.text$x:00000B78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B7D                 mov     eax, offset __ehfuncinfo$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z
.text$x:00000B82                 jmp     ___CxxFrameHandler3
.text$x:00000B82 __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z endp
.text$x:00000B82
.text$x:00000B82 ; ---------------------------------------------------------------------------
.text$x:00000B87                 align 4
.text$x:00000B87 _text$x         ends
.text$x:00000B87
.text$mn:00000B88 ; ===========================================================================
.text$mn:00000B88
.text$mn:00000B88 ; Segment type: Pure code
.text$mn:00000B88 ; Segment permissions: Read/Execute
.text$mn:00000B88 _text$mn        segment para public 'CODE' use32
.text$mn:00000B88                 assume cs:_text$mn
.text$mn:00000B88                 ;org 0B88h
.text$mn:00000B88 ; COMDAT (pick any)
.text$mn:00000B88                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000B88
.text$mn:00000B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B88
.text$mn:00000B88 ; Attributes: bp-based frame
.text$mn:00000B88
.text$mn:00000B88 ; public: __thiscall nsSingleByteCharSetProber::nsSingleByteCharSetProber(struct SequenceModel const *, bool, class nsCharSetProber *)
.text$mn:00000B88                 public ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z
.text$mn:00000B88 ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z proc near
.text$mn:00000B88                                         ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+45Bp
.text$mn:00000B88                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+4B3p
.text$mn:00000B88
.text$mn:00000B88 var_10          = dword ptr -10h
.text$mn:00000B88 var_C           = dword ptr -0Ch
.text$mn:00000B88 var_4           = dword ptr -4
.text$mn:00000B88 arg_0           = dword ptr  8
.text$mn:00000B88 arg_4           = byte ptr  0Ch
.text$mn:00000B88 arg_8           = dword ptr  10h
.text$mn:00000B88
.text$mn:00000B88                 push    ebp
.text$mn:00000B89                 mov     ebp, esp
.text$mn:00000B8B                 push    0FFFFFFFFh
.text$mn:00000B8D                 push    offset __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z
.text$mn:00000B92                 mov     eax, large fs:0
.text$mn:00000B98                 push    eax
.text$mn:00000B99                 push    ecx
.text$mn:00000B9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000B9F                 xor     eax, ebp
.text$mn:00000BA1                 push    eax
.text$mn:00000BA2                 lea     eax, [ebp+var_C]
.text$mn:00000BA5                 mov     large fs:0, eax
.text$mn:00000BAB                 mov     [ebp+var_10], ecx
.text$mn:00000BAE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000BB1                 call    ??0nsCharSetProber@@QAE@XZ ; nsCharSetProber::nsCharSetProber(void)
.text$mn:00000BB6                 mov     [ebp+var_4], 0
.text$mn:00000BBD                 mov     eax, [ebp+var_10]
.text$mn:00000BC0                 mov     dword ptr [eax], offset ??_7nsSingleByteCharSetProber@@6B@ ; const nsSingleByteCharSetProber::`vftable'
.text$mn:00000BC6                 mov     ecx, [ebp+var_10]
.text$mn:00000BC9                 mov     edx, [ebp+arg_0]
.text$mn:00000BCC                 mov     [ecx+8], edx
.text$mn:00000BCF                 mov     eax, [ebp+var_10]
.text$mn:00000BD2                 mov     cl, [ebp+arg_4]
.text$mn:00000BD5                 mov     [eax+0Ch], cl
.text$mn:00000BD8                 mov     edx, [ebp+var_10]
.text$mn:00000BDB                 mov     eax, [ebp+arg_8]
.text$mn:00000BDE                 mov     [edx+2Ch], eax
.text$mn:00000BE1                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000BE4                 call    ?Reset@nsSingleByteCharSetProber@@UAEXXZ ; nsSingleByteCharSetProber::Reset(void)
.text$mn:00000BE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000BF0                 mov     eax, [ebp+var_10]
.text$mn:00000BF3                 mov     ecx, [ebp+var_C]
.text$mn:00000BF6                 mov     large fs:0, ecx
.text$mn:00000BFD                 pop     ecx
.text$mn:00000BFE                 mov     esp, ebp
.text$mn:00000C00                 pop     ebp
.text$mn:00000C01                 retn    0Ch
.text$mn:00000C01 ??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z endp
.text$mn:00000C01
.text$mn:00000C01 _text$mn        ends
.text$mn:00000C01
.text$x:00000C04 ; ===========================================================================
.text$x:00000C04
.text$x:00000C04 ; Segment type: Pure code
.text$x:00000C04 ; Segment permissions: Read/Execute
.text$x:00000C04 _text$x         segment para public 'CODE' use32
.text$x:00000C04                 assume cs:_text$x
.text$x:00000C04                 ;org 0C04h
.text$x:00000C04 ; COMDAT (pick associative to section at B88)
.text$x:00000C04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000C04
.text$x:00000C04 ; =============== S U B R O U T I N E =======================================
.text$x:00000C04
.text$x:00000C04
.text$x:00000C04 __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z$0 proc near
.text$x:00000C04                                         ; DATA XREF: .xdata$x:00000E80o
.text$x:00000C04                 mov     ecx, [ebp-10h]  ; this
.text$x:00000C07                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000C07 __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z$0 endp
.text$x:00000C07
.text$x:00000C0C
.text$x:00000C0C ; =============== S U B R O U T I N E =======================================
.text$x:00000C0C
.text$x:00000C0C
.text$x:00000C0C __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z proc near
.text$x:00000C0C                                         ; DATA XREF: nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *,bool,nsCharSetProber *)+5o
.text$x:00000C0C
.text$x:00000C0C arg_4           = dword ptr  8
.text$x:00000C0C
.text$x:00000C0C                 mov     edx, [esp+arg_4]
.text$x:00000C10                 lea     eax, [edx+0Ch]
.text$x:00000C13                 mov     ecx, [edx-8]
.text$x:00000C16                 xor     ecx, eax
.text$x:00000C18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C1D                 mov     eax, offset __ehfuncinfo$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z
.text$x:00000C22                 jmp     ___CxxFrameHandler3
.text$x:00000C22 __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z endp
.text$x:00000C22
.text$x:00000C22 ; ---------------------------------------------------------------------------
.text$x:00000C27                 align 4
.text$x:00000C27 _text$x         ends
.text$x:00000C27
.text$mn:00000C28 ; ===========================================================================
.text$mn:00000C28
.text$mn:00000C28 ; Segment type: Pure code
.text$mn:00000C28 ; Segment permissions: Read/Execute
.text$mn:00000C28 _text$mn        segment para public 'CODE' use32
.text$mn:00000C28                 assume cs:_text$mn
.text$mn:00000C28                 ;org 0C28h
.text$mn:00000C28 ; COMDAT (pick any)
.text$mn:00000C28                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000C28
.text$mn:00000C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00000C28
.text$mn:00000C28 ; Attributes: bp-based frame
.text$mn:00000C28
.text$mn:00000C28 ; _DWORD __thiscall nsCharSetProber::~nsCharSetProber(nsCharSetProber *__hidden this)
.text$mn:00000C28                 public ??1nsCharSetProber@@UAE@XZ
.text$mn:00000C28 ??1nsCharSetProber@@UAE@XZ proc near    ; CODE XREF: nsSBCSGroupProber::~nsSBCSGroupProber(void)+8Fp
.text$mn:00000C28                                         ; __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$0+3j ...
.text$mn:00000C28
.text$mn:00000C28 var_4           = dword ptr -4
.text$mn:00000C28
.text$mn:00000C28                 push    ebp
.text$mn:00000C29                 mov     ebp, esp
.text$mn:00000C2B                 push    ecx
.text$mn:00000C2C                 mov     [ebp+var_4], ecx
.text$mn:00000C2F                 mov     eax, [ebp+var_4]
.text$mn:00000C32                 mov     dword ptr [eax], offset ??_7nsCharSetProber@@6B@ ; const nsCharSetProber::`vftable'
.text$mn:00000C38                 mov     esp, ebp
.text$mn:00000C3A                 pop     ebp
.text$mn:00000C3B                 retn
.text$mn:00000C3B ??1nsCharSetProber@@UAE@XZ endp
.text$mn:00000C3B
.text$mn:00000C3B _text$mn        ends
.text$mn:00000C3B
.text$mn:00000C3C ; ===========================================================================
.text$mn:00000C3C
.text$mn:00000C3C ; Segment type: Pure code
.text$mn:00000C3C ; Segment permissions: Read/Execute
.text$mn:00000C3C _text$mn        segment para public 'CODE' use32
.text$mn:00000C3C                 assume cs:_text$mn
.text$mn:00000C3C                 ;org 0C3Ch
.text$mn:00000C3C ; COMDAT (pick any)
.text$mn:00000C3C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000C3C
.text$mn:00000C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00000C3C
.text$mn:00000C3C ; Attributes: bp-based frame
.text$mn:00000C3C
.text$mn:00000C3C ; _DWORD __thiscall nsHebrewProber::~nsHebrewProber(nsHebrewProber *__hidden this)
.text$mn:00000C3C                 public ??1nsHebrewProber@@UAE@XZ
.text$mn:00000C3C ??1nsHebrewProber@@UAE@XZ proc near     ; CODE XREF: nsHebrewProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00000C3C
.text$mn:00000C3C var_10          = dword ptr -10h
.text$mn:00000C3C var_C           = dword ptr -0Ch
.text$mn:00000C3C var_4           = dword ptr -4
.text$mn:00000C3C
.text$mn:00000C3C                 push    ebp
.text$mn:00000C3D                 mov     ebp, esp
.text$mn:00000C3F                 push    0FFFFFFFFh
.text$mn:00000C41                 push    offset __ehhandler$??1nsHebrewProber@@UAE@XZ
.text$mn:00000C46                 mov     eax, large fs:0
.text$mn:00000C4C                 push    eax
.text$mn:00000C4D                 push    ecx
.text$mn:00000C4E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000C53                 xor     eax, ebp
.text$mn:00000C55                 push    eax
.text$mn:00000C56                 lea     eax, [ebp+var_C]
.text$mn:00000C59                 mov     large fs:0, eax
.text$mn:00000C5F                 mov     [ebp+var_10], ecx
.text$mn:00000C62                 mov     eax, [ebp+var_10]
.text$mn:00000C65                 mov     dword ptr [eax], offset ??_7nsHebrewProber@@6B@ ; const nsHebrewProber::`vftable'
.text$mn:00000C6B                 mov     [ebp+var_4], 0
.text$mn:00000C72                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000C79                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000C7C                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000C81                 mov     ecx, [ebp+var_C]
.text$mn:00000C84                 mov     large fs:0, ecx
.text$mn:00000C8B                 pop     ecx
.text$mn:00000C8C                 mov     esp, ebp
.text$mn:00000C8E                 pop     ebp
.text$mn:00000C8F                 retn
.text$mn:00000C8F ??1nsHebrewProber@@UAE@XZ endp
.text$mn:00000C8F
.text$mn:00000C8F _text$mn        ends
.text$mn:00000C8F
.text$x:00000C90 ; ===========================================================================
.text$x:00000C90
.text$x:00000C90 ; Segment type: Pure code
.text$x:00000C90 ; Segment permissions: Read/Execute
.text$x:00000C90 _text$x         segment para public 'CODE' use32
.text$x:00000C90                 assume cs:_text$x
.text$x:00000C90                 ;org 0C90h
.text$x:00000C90 ; COMDAT (pick associative to section at C3C)
.text$x:00000C90                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000C90
.text$x:00000C90 ; =============== S U B R O U T I N E =======================================
.text$x:00000C90
.text$x:00000C90
.text$x:00000C90 __unwindfunclet$??1nsHebrewProber@@UAE@XZ$0 proc near
.text$x:00000C90                                         ; DATA XREF: .xdata$x:00000FCCo
.text$x:00000C90                 mov     ecx, [ebp-10h]  ; this
.text$x:00000C93                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000C93 __unwindfunclet$??1nsHebrewProber@@UAE@XZ$0 endp
.text$x:00000C93
.text$x:00000C98
.text$x:00000C98 ; =============== S U B R O U T I N E =======================================
.text$x:00000C98
.text$x:00000C98
.text$x:00000C98 __ehhandler$??1nsHebrewProber@@UAE@XZ proc near
.text$x:00000C98                                         ; DATA XREF: nsHebrewProber::~nsHebrewProber(void)+5o
.text$x:00000C98
.text$x:00000C98 arg_4           = dword ptr  8
.text$x:00000C98
.text$x:00000C98                 mov     edx, [esp+arg_4]
.text$x:00000C9C                 lea     eax, [edx+0Ch]
.text$x:00000C9F                 mov     ecx, [edx-8]
.text$x:00000CA2                 xor     ecx, eax
.text$x:00000CA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000CA9                 mov     eax, offset __ehfuncinfo$??1nsHebrewProber@@UAE@XZ
.text$x:00000CAE                 jmp     ___CxxFrameHandler3
.text$x:00000CAE __ehhandler$??1nsHebrewProber@@UAE@XZ endp
.text$x:00000CAE
.text$x:00000CAE ; ---------------------------------------------------------------------------
.text$x:00000CB3                 align 4
.text$x:00000CB3 _text$x         ends
.text$x:00000CB3
.text$mn:00000CB4 ; ===========================================================================
.text$mn:00000CB4
.text$mn:00000CB4 ; Segment type: Pure code
.text$mn:00000CB4 ; Segment permissions: Read/Execute
.text$mn:00000CB4 _text$mn        segment para public 'CODE' use32
.text$mn:00000CB4                 assume cs:_text$mn
.text$mn:00000CB4                 ;org 0CB4h
.text$mn:00000CB4 ; COMDAT (pick any)
.text$mn:00000CB4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000CB4
.text$mn:00000CB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000CB4
.text$mn:00000CB4 ; Attributes: bp-based frame
.text$mn:00000CB4
.text$mn:00000CB4 ; _DWORD __thiscall nsSingleByteCharSetProber::~nsSingleByteCharSetProber(nsSingleByteCharSetProber *__hidden this)
.text$mn:00000CB4                 public ??1nsSingleByteCharSetProber@@UAE@XZ
.text$mn:00000CB4 ??1nsSingleByteCharSetProber@@UAE@XZ proc near
.text$mn:00000CB4                                         ; CODE XREF: nsSingleByteCharSetProber::`scalar deleting destructor'(uint)+Ap
.text$mn:00000CB4
.text$mn:00000CB4 var_10          = dword ptr -10h
.text$mn:00000CB4 var_C           = dword ptr -0Ch
.text$mn:00000CB4 var_4           = dword ptr -4
.text$mn:00000CB4
.text$mn:00000CB4                 push    ebp
.text$mn:00000CB5                 mov     ebp, esp
.text$mn:00000CB7                 push    0FFFFFFFFh
.text$mn:00000CB9                 push    offset __ehhandler$??1nsSingleByteCharSetProber@@UAE@XZ
.text$mn:00000CBE                 mov     eax, large fs:0
.text$mn:00000CC4                 push    eax
.text$mn:00000CC5                 push    ecx
.text$mn:00000CC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000CCB                 xor     eax, ebp
.text$mn:00000CCD                 push    eax
.text$mn:00000CCE                 lea     eax, [ebp+var_C]
.text$mn:00000CD1                 mov     large fs:0, eax
.text$mn:00000CD7                 mov     [ebp+var_10], ecx
.text$mn:00000CDA                 mov     [ebp+var_4], 0
.text$mn:00000CE1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000CE8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00000CEB                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000CF0                 mov     ecx, [ebp+var_C]
.text$mn:00000CF3                 mov     large fs:0, ecx
.text$mn:00000CFA                 pop     ecx
.text$mn:00000CFB                 mov     esp, ebp
.text$mn:00000CFD                 pop     ebp
.text$mn:00000CFE                 retn
.text$mn:00000CFE ??1nsSingleByteCharSetProber@@UAE@XZ endp
.text$mn:00000CFE
.text$mn:00000CFE ; ---------------------------------------------------------------------------
.text$mn:00000CFF                 align 10h
.text$mn:00000CFF _text$mn        ends
.text$mn:00000CFF
.text$x:00000D00 ; ===========================================================================
.text$x:00000D00
.text$x:00000D00 ; Segment type: Pure code
.text$x:00000D00 ; Segment permissions: Read/Execute
.text$x:00000D00 _text$x         segment para public 'CODE' use32
.text$x:00000D00                 assume cs:_text$x
.text$x:00000D00                 ;org 0D00h
.text$x:00000D00 ; COMDAT (pick associative to section at CB4)
.text$x:00000D00                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000D00
.text$x:00000D00 ; =============== S U B R O U T I N E =======================================
.text$x:00000D00
.text$x:00000D00
.text$x:00000D00 __unwindfunclet$??1nsSingleByteCharSetProber@@UAE@XZ$0 proc near
.text$x:00000D00                                         ; DATA XREF: .xdata$x:00000EACo
.text$x:00000D00                 mov     ecx, [ebp-10h]  ; this
.text$x:00000D03                 jmp     ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$x:00000D03 __unwindfunclet$??1nsSingleByteCharSetProber@@UAE@XZ$0 endp
.text$x:00000D03
.text$x:00000D08
.text$x:00000D08 ; =============== S U B R O U T I N E =======================================
.text$x:00000D08
.text$x:00000D08
.text$x:00000D08 __ehhandler$??1nsSingleByteCharSetProber@@UAE@XZ proc near
.text$x:00000D08                                         ; DATA XREF: nsSingleByteCharSetProber::~nsSingleByteCharSetProber(void)+5o
.text$x:00000D08
.text$x:00000D08 arg_4           = dword ptr  8
.text$x:00000D08
.text$x:00000D08                 mov     edx, [esp+arg_4]
.text$x:00000D0C                 lea     eax, [edx+0Ch]
.text$x:00000D0F                 mov     ecx, [edx-8]
.text$x:00000D12                 xor     ecx, eax
.text$x:00000D14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000D19                 mov     eax, offset __ehfuncinfo$??1nsSingleByteCharSetProber@@UAE@XZ
.text$x:00000D1E                 jmp     ___CxxFrameHandler3
.text$x:00000D1E __ehhandler$??1nsSingleByteCharSetProber@@UAE@XZ endp
.text$x:00000D1E
.text$x:00000D1E ; ---------------------------------------------------------------------------
.text$x:00000D23                 align 4
.text$x:00000D23 _text$x         ends
.text$x:00000D23
.text$mn:00000D24 ; ===========================================================================
.text$mn:00000D24
.text$mn:00000D24 ; Segment type: Pure code
.text$mn:00000D24 ; Segment permissions: Read/Execute
.text$mn:00000D24 _text$mn        segment para public 'CODE' use32
.text$mn:00000D24                 assume cs:_text$mn
.text$mn:00000D24                 ;org 0D24h
.text$mn:00000D24 ; COMDAT (pick any)
.text$mn:00000D24                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000D24
.text$mn:00000D24 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D24
.text$mn:00000D24 ; Attributes: bp-based frame
.text$mn:00000D24
.text$mn:00000D24 ; public: virtual void * __thiscall nsCharSetProber::`scalar deleting destructor'(unsigned int)
.text$mn:00000D24                 public ??_GnsCharSetProber@@UAEPAXI@Z
.text$mn:00000D24 ??_GnsCharSetProber@@UAEPAXI@Z proc near
.text$mn:00000D24
.text$mn:00000D24 var_4           = dword ptr -4
.text$mn:00000D24 arg_0           = dword ptr  8
.text$mn:00000D24
.text$mn:00000D24                 push    ebp
.text$mn:00000D25                 mov     ebp, esp
.text$mn:00000D27                 push    ecx
.text$mn:00000D28                 mov     [ebp+var_4], ecx
.text$mn:00000D2B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000D2E                 call    ??1nsCharSetProber@@UAE@XZ ; nsCharSetProber::~nsCharSetProber(void)
.text$mn:00000D33                 mov     eax, [ebp+arg_0]
.text$mn:00000D36                 and     eax, 1
.text$mn:00000D39                 jz      short loc_D47
.text$mn:00000D3B                 mov     ecx, [ebp+var_4]
.text$mn:00000D3E                 push    ecx             ; void *
.text$mn:00000D3F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000D44                 add     esp, 4
.text$mn:00000D47
.text$mn:00000D47 loc_D47:                                ; CODE XREF: nsCharSetProber::`scalar deleting destructor'(uint)+15j
.text$mn:00000D47                 mov     eax, [ebp+var_4]
.text$mn:00000D4A                 mov     esp, ebp
.text$mn:00000D4C                 pop     ebp
.text$mn:00000D4D                 retn    4
.text$mn:00000D4D ??_GnsCharSetProber@@UAEPAXI@Z endp
.text$mn:00000D4D
.text$mn:00000D4D _text$mn        ends
.text$mn:00000D4D
.text$mn:00000D50 ; ===========================================================================
.text$mn:00000D50
.text$mn:00000D50 ; Segment type: Pure code
.text$mn:00000D50 ; Segment permissions: Read/Execute
.text$mn:00000D50 _text$mn        segment para public 'CODE' use32
.text$mn:00000D50                 assume cs:_text$mn
.text$mn:00000D50                 ;org 0D50h
.text$mn:00000D50 ; COMDAT (pick any)
.text$mn:00000D50                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000D50
.text$mn:00000D50 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D50
.text$mn:00000D50 ; Attributes: bp-based frame
.text$mn:00000D50
.text$mn:00000D50 ; public: virtual void * __thiscall nsHebrewProber::`scalar deleting destructor'(unsigned int)
.text$mn:00000D50                 public ??_GnsHebrewProber@@UAEPAXI@Z
.text$mn:00000D50 ??_GnsHebrewProber@@UAEPAXI@Z proc near
.text$mn:00000D50
.text$mn:00000D50 var_4           = dword ptr -4
.text$mn:00000D50 arg_0           = dword ptr  8
.text$mn:00000D50
.text$mn:00000D50                 push    ebp
.text$mn:00000D51                 mov     ebp, esp
.text$mn:00000D53                 push    ecx
.text$mn:00000D54                 mov     [ebp+var_4], ecx
.text$mn:00000D57                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000D5A                 call    ??1nsHebrewProber@@UAE@XZ ; nsHebrewProber::~nsHebrewProber(void)
.text$mn:00000D5F                 mov     eax, [ebp+arg_0]
.text$mn:00000D62                 and     eax, 1
.text$mn:00000D65                 jz      short loc_D73
.text$mn:00000D67                 mov     ecx, [ebp+var_4]
.text$mn:00000D6A                 push    ecx             ; void *
.text$mn:00000D6B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000D70                 add     esp, 4
.text$mn:00000D73
.text$mn:00000D73 loc_D73:                                ; CODE XREF: nsHebrewProber::`scalar deleting destructor'(uint)+15j
.text$mn:00000D73                 mov     eax, [ebp+var_4]
.text$mn:00000D76                 mov     esp, ebp
.text$mn:00000D78                 pop     ebp
.text$mn:00000D79                 retn    4
.text$mn:00000D79 ??_GnsHebrewProber@@UAEPAXI@Z endp
.text$mn:00000D79
.text$mn:00000D79 _text$mn        ends
.text$mn:00000D79
.text$mn:00000D7C ; ===========================================================================
.text$mn:00000D7C
.text$mn:00000D7C ; Segment type: Pure code
.text$mn:00000D7C ; Segment permissions: Read/Execute
.text$mn:00000D7C _text$mn        segment para public 'CODE' use32
.text$mn:00000D7C                 assume cs:_text$mn
.text$mn:00000D7C                 ;org 0D7Ch
.text$mn:00000D7C ; COMDAT (pick any)
.text$mn:00000D7C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000D7C
.text$mn:00000D7C ; =============== S U B R O U T I N E =======================================
.text$mn:00000D7C
.text$mn:00000D7C ; Attributes: bp-based frame
.text$mn:00000D7C
.text$mn:00000D7C ; public: virtual void * __thiscall nsSBCSGroupProber::`scalar deleting destructor'(unsigned int)
.text$mn:00000D7C                 public ??_GnsSBCSGroupProber@@UAEPAXI@Z
.text$mn:00000D7C ??_GnsSBCSGroupProber@@UAEPAXI@Z proc near
.text$mn:00000D7C
.text$mn:00000D7C var_4           = dword ptr -4
.text$mn:00000D7C arg_0           = dword ptr  8
.text$mn:00000D7C
.text$mn:00000D7C                 push    ebp
.text$mn:00000D7D                 mov     ebp, esp
.text$mn:00000D7F                 push    ecx
.text$mn:00000D80                 mov     [ebp+var_4], ecx
.text$mn:00000D83                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000D86                 call    ??1nsSBCSGroupProber@@UAE@XZ ; nsSBCSGroupProber::~nsSBCSGroupProber(void)
.text$mn:00000D8B                 mov     eax, [ebp+arg_0]
.text$mn:00000D8E                 and     eax, 1
.text$mn:00000D91                 jz      short loc_D9F
.text$mn:00000D93                 mov     ecx, [ebp+var_4]
.text$mn:00000D96                 push    ecx             ; void *
.text$mn:00000D97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000D9C                 add     esp, 4
.text$mn:00000D9F
.text$mn:00000D9F loc_D9F:                                ; CODE XREF: nsSBCSGroupProber::`scalar deleting destructor'(uint)+15j
.text$mn:00000D9F                 mov     eax, [ebp+var_4]
.text$mn:00000DA2                 mov     esp, ebp
.text$mn:00000DA4                 pop     ebp
.text$mn:00000DA5                 retn    4
.text$mn:00000DA5 ??_GnsSBCSGroupProber@@UAEPAXI@Z endp
.text$mn:00000DA5
.text$mn:00000DA5 _text$mn        ends
.text$mn:00000DA5
.text$mn:00000DA8 ; ===========================================================================
.text$mn:00000DA8
.text$mn:00000DA8 ; Segment type: Pure code
.text$mn:00000DA8 ; Segment permissions: Read/Execute
.text$mn:00000DA8 _text$mn        segment para public 'CODE' use32
.text$mn:00000DA8                 assume cs:_text$mn
.text$mn:00000DA8                 ;org 0DA8h
.text$mn:00000DA8 ; COMDAT (pick any)
.text$mn:00000DA8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000DA8
.text$mn:00000DA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DA8
.text$mn:00000DA8 ; Attributes: bp-based frame
.text$mn:00000DA8
.text$mn:00000DA8 ; public: virtual void * __thiscall nsSingleByteCharSetProber::`scalar deleting destructor'(unsigned int)
.text$mn:00000DA8                 public ??_GnsSingleByteCharSetProber@@UAEPAXI@Z
.text$mn:00000DA8 ??_GnsSingleByteCharSetProber@@UAEPAXI@Z proc near
.text$mn:00000DA8
.text$mn:00000DA8 var_4           = dword ptr -4
.text$mn:00000DA8 arg_0           = dword ptr  8
.text$mn:00000DA8
.text$mn:00000DA8                 push    ebp
.text$mn:00000DA9                 mov     ebp, esp
.text$mn:00000DAB                 push    ecx
.text$mn:00000DAC                 mov     [ebp+var_4], ecx
.text$mn:00000DAF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000DB2                 call    ??1nsSingleByteCharSetProber@@UAE@XZ ; nsSingleByteCharSetProber::~nsSingleByteCharSetProber(void)
.text$mn:00000DB7                 mov     eax, [ebp+arg_0]
.text$mn:00000DBA                 and     eax, 1
.text$mn:00000DBD                 jz      short loc_DCB
.text$mn:00000DBF                 mov     ecx, [ebp+var_4]
.text$mn:00000DC2                 push    ecx             ; void *
.text$mn:00000DC3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000DC8                 add     esp, 4
.text$mn:00000DCB
.text$mn:00000DCB loc_DCB:                                ; CODE XREF: nsSingleByteCharSetProber::`scalar deleting destructor'(uint)+15j
.text$mn:00000DCB                 mov     eax, [ebp+var_4]
.text$mn:00000DCE                 mov     esp, ebp
.text$mn:00000DD0                 pop     ebp
.text$mn:00000DD1                 retn    4
.text$mn:00000DD1 ??_GnsSingleByteCharSetProber@@UAEPAXI@Z endp
.text$mn:00000DD1
.text$mn:00000DD1 _text$mn        ends
.text$mn:00000DD1
.text$mn:00000DD4 ; ===========================================================================
.text$mn:00000DD4
.text$mn:00000DD4 ; Segment type: Pure code
.text$mn:00000DD4 ; Segment permissions: Read/Execute
.text$mn:00000DD4 _text$mn        segment para public 'CODE' use32
.text$mn:00000DD4                 assume cs:_text$mn
.text$mn:00000DD4                 ;org 0DD4h
.text$mn:00000DD4 ; COMDAT (pick any)
.text$mn:00000DD4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000DD4
.text$mn:00000DD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DD4
.text$mn:00000DD4 ; Attributes: bp-based frame
.text$mn:00000DD4
.text$mn:00000DD4 ; float __thiscall nsHebrewProber::GetConfidence(nsHebrewProber *__hidden this)
.text$mn:00000DD4                 public ?GetConfidence@nsHebrewProber@@UAEMXZ
.text$mn:00000DD4 ?GetConfidence@nsHebrewProber@@UAEMXZ proc near
.text$mn:00000DD4                                         ; DATA XREF: .rdata:0000106Co
.text$mn:00000DD4
.text$mn:00000DD4 var_4           = dword ptr -4
.text$mn:00000DD4
.text$mn:00000DD4                 push    ebp
.text$mn:00000DD5                 mov     ebp, esp
.text$mn:00000DD7                 push    ecx
.text$mn:00000DD8                 mov     [ebp+var_4], ecx
.text$mn:00000DDB                 fldz
.text$mn:00000DDD                 mov     esp, ebp
.text$mn:00000DDF                 pop     ebp
.text$mn:00000DE0                 retn
.text$mn:00000DE0 ?GetConfidence@nsHebrewProber@@UAEMXZ endp
.text$mn:00000DE0
.text$mn:00000DE0 ; ---------------------------------------------------------------------------
.text$mn:00000DE1                 align 4
.text$mn:00000DE1 _text$mn        ends
.text$mn:00000DE1
.text$mn:00000DE4 ; ===========================================================================
.text$mn:00000DE4
.text$mn:00000DE4 ; Segment type: Pure code
.text$mn:00000DE4 ; Segment permissions: Read/Execute
.text$mn:00000DE4 _text$mn        segment para public 'CODE' use32
.text$mn:00000DE4                 assume cs:_text$mn
.text$mn:00000DE4                 ;org 0DE4h
.text$mn:00000DE4 ; COMDAT (pick any)
.text$mn:00000DE4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000DE4
.text$mn:00000DE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DE4
.text$mn:00000DE4 ; Attributes: bp-based frame
.text$mn:00000DE4
.text$mn:00000DE4 ; public: virtual enum  nsProbingState __thiscall nsSBCSGroupProber::GetState(void)
.text$mn:00000DE4                 public ?GetState@nsSBCSGroupProber@@UAE?AW4nsProbingState@@XZ
.text$mn:00000DE4 ?GetState@nsSBCSGroupProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00000DE4                                         ; DATA XREF: .rdata:00001044o
.text$mn:00000DE4
.text$mn:00000DE4 var_4           = dword ptr -4
.text$mn:00000DE4
.text$mn:00000DE4                 push    ebp
.text$mn:00000DE5                 mov     ebp, esp
.text$mn:00000DE7                 push    ecx
.text$mn:00000DE8                 mov     [ebp+var_4], ecx
.text$mn:00000DEB                 mov     eax, [ebp+var_4]
.text$mn:00000DEE                 mov     eax, [eax+4]
.text$mn:00000DF1                 mov     esp, ebp
.text$mn:00000DF3                 pop     ebp
.text$mn:00000DF4                 retn
.text$mn:00000DF4 ?GetState@nsSBCSGroupProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:00000DF4
.text$mn:00000DF4 ; ---------------------------------------------------------------------------
.text$mn:00000DF5                 align 4
.text$mn:00000DF5 _text$mn        ends
.text$mn:00000DF5
.text$mn:00000DF8 ; ===========================================================================
.text$mn:00000DF8
.text$mn:00000DF8 ; Segment type: Pure code
.text$mn:00000DF8 ; Segment permissions: Read/Execute
.text$mn:00000DF8 _text$mn        segment para public 'CODE' use32
.text$mn:00000DF8                 assume cs:_text$mn
.text$mn:00000DF8                 ;org 0DF8h
.text$mn:00000DF8 ; COMDAT (pick any)
.text$mn:00000DF8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000DF8
.text$mn:00000DF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DF8
.text$mn:00000DF8 ; Attributes: bp-based frame
.text$mn:00000DF8
.text$mn:00000DF8 ; public: virtual enum  nsProbingState __thiscall nsSingleByteCharSetProber::GetState(void)
.text$mn:00000DF8                 public ?GetState@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@XZ
.text$mn:00000DF8 ?GetState@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@XZ proc near
.text$mn:00000DF8                                         ; DATA XREF: .rdata:00001024o
.text$mn:00000DF8
.text$mn:00000DF8 var_4           = dword ptr -4
.text$mn:00000DF8
.text$mn:00000DF8                 push    ebp
.text$mn:00000DF9                 mov     ebp, esp
.text$mn:00000DFB                 push    ecx
.text$mn:00000DFC                 mov     [ebp+var_4], ecx
.text$mn:00000DFF                 mov     eax, [ebp+var_4]
.text$mn:00000E02                 mov     eax, [eax+4]
.text$mn:00000E05                 mov     esp, ebp
.text$mn:00000E07                 pop     ebp
.text$mn:00000E08                 retn
.text$mn:00000E08 ?GetState@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@XZ endp
.text$mn:00000E08
.text$mn:00000E08 ; ---------------------------------------------------------------------------
.text$mn:00000E09                 align 4
.text$mn:00000E09 _text$mn        ends
.text$mn:00000E09
.text$mn:00000E0C ; ===========================================================================
.text$mn:00000E0C
.text$mn:00000E0C ; Segment type: Pure code
.text$mn:00000E0C ; Segment permissions: Read/Execute
.text$mn:00000E0C _text$mn        segment para public 'CODE' use32
.text$mn:00000E0C                 assume cs:_text$mn
.text$mn:00000E0C                 ;org 0E0Ch
.text$mn:00000E0C ; COMDAT (pick any)
.text$mn:00000E0C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000E0C
.text$mn:00000E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00000E0C
.text$mn:00000E0C ; Attributes: bp-based frame
.text$mn:00000E0C
.text$mn:00000E0C ; void __thiscall nsHebrewProber::SetModelProbers(nsHebrewProber *this, struct nsCharSetProber *, struct nsCharSetProber *)
.text$mn:00000E0C                 public ?SetModelProbers@nsHebrewProber@@QAEXPAVnsCharSetProber@@0@Z
.text$mn:00000E0C ?SetModelProbers@nsHebrewProber@@QAEXPAVnsCharSetProber@@0@Z proc near
.text$mn:00000E0C                                         ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+53Fp
.text$mn:00000E0C
.text$mn:00000E0C var_4           = dword ptr -4
.text$mn:00000E0C arg_0           = dword ptr  8
.text$mn:00000E0C arg_4           = dword ptr  0Ch
.text$mn:00000E0C
.text$mn:00000E0C                 push    ebp
.text$mn:00000E0D                 mov     ebp, esp
.text$mn:00000E0F                 push    ecx
.text$mn:00000E10                 mov     [ebp+var_4], ecx
.text$mn:00000E13                 mov     eax, [ebp+var_4]
.text$mn:00000E16                 mov     ecx, [ebp+arg_0]
.text$mn:00000E19                 mov     [eax+10h], ecx
.text$mn:00000E1C                 mov     edx, [ebp+var_4]
.text$mn:00000E1F                 mov     eax, [ebp+arg_4]
.text$mn:00000E22                 mov     [edx+14h], eax
.text$mn:00000E25                 mov     esp, ebp
.text$mn:00000E27                 pop     ebp
.text$mn:00000E28                 retn    8
.text$mn:00000E28 ?SetModelProbers@nsHebrewProber@@QAEXPAVnsCharSetProber@@0@Z endp
.text$mn:00000E28
.text$mn:00000E28 ; ---------------------------------------------------------------------------
.text$mn:00000E2B                 align 4
.text$mn:00000E2B _text$mn        ends
.text$mn:00000E2B
.text$mn:00000E2C ; ===========================================================================
.text$mn:00000E2C
.text$mn:00000E2C ; Segment type: Pure code
.text$mn:00000E2C ; Segment permissions: Read/Execute
.text$mn:00000E2C _text$mn        segment para public 'CODE' use32
.text$mn:00000E2C                 assume cs:_text$mn
.text$mn:00000E2C                 ;org 0E2Ch
.text$mn:00000E2C ; COMDAT (pick any)
.text$mn:00000E2C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000E2C
.text$mn:00000E2C ; =============== S U B R O U T I N E =======================================
.text$mn:00000E2C
.text$mn:00000E2C ; Attributes: bp-based frame
.text$mn:00000E2C
.text$mn:00000E2C ; void __thiscall nsHebrewProber::SetOpion(nsHebrewProber *__hidden this)
.text$mn:00000E2C                 public ?SetOpion@nsHebrewProber@@UAEXXZ
.text$mn:00000E2C ?SetOpion@nsHebrewProber@@UAEXXZ proc near ; DATA XREF: .rdata:00001070o
.text$mn:00000E2C
.text$mn:00000E2C var_4           = dword ptr -4
.text$mn:00000E2C
.text$mn:00000E2C                 push    ebp
.text$mn:00000E2D                 mov     ebp, esp
.text$mn:00000E2F                 push    ecx
.text$mn:00000E30                 mov     [ebp+var_4], ecx
.text$mn:00000E33                 mov     esp, ebp
.text$mn:00000E35                 pop     ebp
.text$mn:00000E36                 retn
.text$mn:00000E36 ?SetOpion@nsHebrewProber@@UAEXXZ endp
.text$mn:00000E36
.text$mn:00000E36 ; ---------------------------------------------------------------------------
.text$mn:00000E37                 align 4
.text$mn:00000E37 _text$mn        ends
.text$mn:00000E37
.text$mn:00000E38 ; ===========================================================================
.text$mn:00000E38
.text$mn:00000E38 ; Segment type: Pure code
.text$mn:00000E38 ; Segment permissions: Read/Execute
.text$mn:00000E38 _text$mn        segment para public 'CODE' use32
.text$mn:00000E38                 assume cs:_text$mn
.text$mn:00000E38                 ;org 0E38h
.text$mn:00000E38 ; COMDAT (pick any)
.text$mn:00000E38                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000E38
.text$mn:00000E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E38
.text$mn:00000E38 ; Attributes: bp-based frame
.text$mn:00000E38
.text$mn:00000E38 ; void __thiscall nsSBCSGroupProber::SetOpion(nsSBCSGroupProber *__hidden this)
.text$mn:00000E38                 public ?SetOpion@nsSBCSGroupProber@@UAEXXZ
.text$mn:00000E38 ?SetOpion@nsSBCSGroupProber@@UAEXXZ proc near
.text$mn:00000E38                                         ; DATA XREF: .rdata:00001050o
.text$mn:00000E38
.text$mn:00000E38 var_4           = dword ptr -4
.text$mn:00000E38
.text$mn:00000E38                 push    ebp
.text$mn:00000E39                 mov     ebp, esp
.text$mn:00000E3B                 push    ecx
.text$mn:00000E3C                 mov     [ebp+var_4], ecx
.text$mn:00000E3F                 mov     esp, ebp
.text$mn:00000E41                 pop     ebp
.text$mn:00000E42                 retn
.text$mn:00000E42 ?SetOpion@nsSBCSGroupProber@@UAEXXZ endp
.text$mn:00000E42
.text$mn:00000E42 ; ---------------------------------------------------------------------------
.text$mn:00000E43                 align 4
.text$mn:00000E43 _text$mn        ends
.text$mn:00000E43
.text$mn:00000E44 ; ===========================================================================
.text$mn:00000E44
.text$mn:00000E44 ; Segment type: Pure code
.text$mn:00000E44 ; Segment permissions: Read/Execute
.text$mn:00000E44 _text$mn        segment para public 'CODE' use32
.text$mn:00000E44                 assume cs:_text$mn
.text$mn:00000E44                 ;org 0E44h
.text$mn:00000E44 ; COMDAT (pick any)
.text$mn:00000E44                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$mn:00000E44
.text$mn:00000E44 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E44
.text$mn:00000E44 ; Attributes: bp-based frame
.text$mn:00000E44
.text$mn:00000E44 ; void __thiscall nsSingleByteCharSetProber::SetOpion(nsSingleByteCharSetProber *__hidden this)
.text$mn:00000E44                 public ?SetOpion@nsSingleByteCharSetProber@@UAEXXZ
.text$mn:00000E44 ?SetOpion@nsSingleByteCharSetProber@@UAEXXZ proc near
.text$mn:00000E44                                         ; DATA XREF: .rdata:00001030o
.text$mn:00000E44
.text$mn:00000E44 var_4           = dword ptr -4
.text$mn:00000E44
.text$mn:00000E44                 push    ebp
.text$mn:00000E45                 mov     ebp, esp
.text$mn:00000E47                 push    ecx
.text$mn:00000E48                 mov     [ebp+var_4], ecx
.text$mn:00000E4B                 mov     esp, ebp
.text$mn:00000E4D                 pop     ebp
.text$mn:00000E4E                 retn
.text$mn:00000E4E ?SetOpion@nsSingleByteCharSetProber@@UAEXXZ endp
.text$mn:00000E4E
.text$mn:00000E4E ; ---------------------------------------------------------------------------
.text$mn:00000E4F                 align 10h
.text$mn:00000E4F _text$mn        ends
.text$mn:00000E4F
.xdata$x:00000E50 ; ===========================================================================
.xdata$x:00000E50
.xdata$x:00000E50 ; Segment type: Pure data
.xdata$x:00000E50 ; Segment permissions: Read
.xdata$x:00000E50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000E50                 assume cs:_xdata$x
.xdata$x:00000E50                 ;org 0E50h
.xdata$x:00000E50 ; COMDAT (pick associative to section at AE8)
.xdata$x:00000E50 __unwindtable$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z db 0FFh
.xdata$x:00000E50                                         ; DATA XREF: .xdata$x:00000E60o
.xdata$x:00000E51                 db 0FFh
.xdata$x:00000E52                 db 0FFh
.xdata$x:00000E53                 db 0FFh
.xdata$x:00000E54                 dd offset __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z$0
.xdata$x:00000E58 __ehfuncinfo$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z db  22h ; "
.xdata$x:00000E58                                         ; DATA XREF: __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z+11o
.xdata$x:00000E59                 db    5
.xdata$x:00000E5A                 db  93h ; ô
.xdata$x:00000E5B                 db  19h
.xdata$x:00000E5C                 db    1
.xdata$x:00000E5D                 db    0
.xdata$x:00000E5E                 db    0
.xdata$x:00000E5F                 db    0
.xdata$x:00000E60                 dd offset __unwindtable$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@@Z
.xdata$x:00000E64                 db    0
.xdata$x:00000E65                 db    0
.xdata$x:00000E66                 db    0
.xdata$x:00000E67                 db    0
.xdata$x:00000E68                 db    0
.xdata$x:00000E69                 db    0
.xdata$x:00000E6A                 db    0
.xdata$x:00000E6B                 db    0
.xdata$x:00000E6C                 db    0
.xdata$x:00000E6D                 db    0
.xdata$x:00000E6E                 db    0
.xdata$x:00000E6F                 db    0
.xdata$x:00000E70                 db    0
.xdata$x:00000E71                 db    0
.xdata$x:00000E72                 db    0
.xdata$x:00000E73                 db    0
.xdata$x:00000E74                 db    0
.xdata$x:00000E75                 db    0
.xdata$x:00000E76                 db    0
.xdata$x:00000E77                 db    0
.xdata$x:00000E78                 db    0
.xdata$x:00000E79                 db    0
.xdata$x:00000E7A                 db    0
.xdata$x:00000E7B                 db    0
.xdata$x:00000E7B _xdata$x        ends
.xdata$x:00000E7B
.xdata$x:00000E7C ; ===========================================================================
.xdata$x:00000E7C
.xdata$x:00000E7C ; Segment type: Pure data
.xdata$x:00000E7C ; Segment permissions: Read
.xdata$x:00000E7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000E7C                 assume cs:_xdata$x
.xdata$x:00000E7C                 ;org 0E7Ch
.xdata$x:00000E7C ; COMDAT (pick associative to section at B88)
.xdata$x:00000E7C __unwindtable$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z db 0FFh
.xdata$x:00000E7C                                         ; DATA XREF: .xdata$x:00000E8Co
.xdata$x:00000E7D                 db 0FFh
.xdata$x:00000E7E                 db 0FFh
.xdata$x:00000E7F                 db 0FFh
.xdata$x:00000E80                 dd offset __unwindfunclet$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z$0
.xdata$x:00000E84 __ehfuncinfo$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z db  22h ; "
.xdata$x:00000E84                                         ; DATA XREF: __ehhandler$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z+11o
.xdata$x:00000E85                 db    5
.xdata$x:00000E86                 db  93h ; ô
.xdata$x:00000E87                 db  19h
.xdata$x:00000E88                 db    1
.xdata$x:00000E89                 db    0
.xdata$x:00000E8A                 db    0
.xdata$x:00000E8B                 db    0
.xdata$x:00000E8C                 dd offset __unwindtable$??0nsSingleByteCharSetProber@@QAE@PBUSequenceModel@@_NPAVnsCharSetProber@@@Z
.xdata$x:00000E90                 db    0
.xdata$x:00000E91                 db    0
.xdata$x:00000E92                 db    0
.xdata$x:00000E93                 db    0
.xdata$x:00000E94                 db    0
.xdata$x:00000E95                 db    0
.xdata$x:00000E96                 db    0
.xdata$x:00000E97                 db    0
.xdata$x:00000E98                 db    0
.xdata$x:00000E99                 db    0
.xdata$x:00000E9A                 db    0
.xdata$x:00000E9B                 db    0
.xdata$x:00000E9C                 db    0
.xdata$x:00000E9D                 db    0
.xdata$x:00000E9E                 db    0
.xdata$x:00000E9F                 db    0
.xdata$x:00000EA0                 db    0
.xdata$x:00000EA1                 db    0
.xdata$x:00000EA2                 db    0
.xdata$x:00000EA3                 db    0
.xdata$x:00000EA4                 db    0
.xdata$x:00000EA5                 db    0
.xdata$x:00000EA6                 db    0
.xdata$x:00000EA7                 db    0
.xdata$x:00000EA7 _xdata$x        ends
.xdata$x:00000EA7
.xdata$x:00000EA8 ; ===========================================================================
.xdata$x:00000EA8
.xdata$x:00000EA8 ; Segment type: Pure data
.xdata$x:00000EA8 ; Segment permissions: Read
.xdata$x:00000EA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000EA8                 assume cs:_xdata$x
.xdata$x:00000EA8                 ;org 0EA8h
.xdata$x:00000EA8 ; COMDAT (pick associative to section at CB4)
.xdata$x:00000EA8 __unwindtable$??1nsSingleByteCharSetProber@@UAE@XZ db 0FFh
.xdata$x:00000EA8                                         ; DATA XREF: .xdata$x:00000EB8o
.xdata$x:00000EA9                 db 0FFh
.xdata$x:00000EAA                 db 0FFh
.xdata$x:00000EAB                 db 0FFh
.xdata$x:00000EAC                 dd offset __unwindfunclet$??1nsSingleByteCharSetProber@@UAE@XZ$0
.xdata$x:00000EB0 __ehfuncinfo$??1nsSingleByteCharSetProber@@UAE@XZ db  22h ; "
.xdata$x:00000EB0                                         ; DATA XREF: __ehhandler$??1nsSingleByteCharSetProber@@UAE@XZ+11o
.xdata$x:00000EB1                 db    5
.xdata$x:00000EB2                 db  93h ; ô
.xdata$x:00000EB3                 db  19h
.xdata$x:00000EB4                 db    1
.xdata$x:00000EB5                 db    0
.xdata$x:00000EB6                 db    0
.xdata$x:00000EB7                 db    0
.xdata$x:00000EB8                 dd offset __unwindtable$??1nsSingleByteCharSetProber@@UAE@XZ
.xdata$x:00000EBC                 db    0
.xdata$x:00000EBD                 db    0
.xdata$x:00000EBE                 db    0
.xdata$x:00000EBF                 db    0
.xdata$x:00000EC0                 db    0
.xdata$x:00000EC1                 db    0
.xdata$x:00000EC2                 db    0
.xdata$x:00000EC3                 db    0
.xdata$x:00000EC4                 db    0
.xdata$x:00000EC5                 db    0
.xdata$x:00000EC6                 db    0
.xdata$x:00000EC7                 db    0
.xdata$x:00000EC8                 db    0
.xdata$x:00000EC9                 db    0
.xdata$x:00000ECA                 db    0
.xdata$x:00000ECB                 db    0
.xdata$x:00000ECC                 db    0
.xdata$x:00000ECD                 db    0
.xdata$x:00000ECE                 db    0
.xdata$x:00000ECF                 db    0
.xdata$x:00000ED0                 db    0
.xdata$x:00000ED1                 db    0
.xdata$x:00000ED2                 db    0
.xdata$x:00000ED3                 db    0
.xdata$x:00000ED3 _xdata$x        ends
.xdata$x:00000ED3
.xdata$x:00000ED4 ; ===========================================================================
.xdata$x:00000ED4
.xdata$x:00000ED4 ; Segment type: Pure data
.xdata$x:00000ED4 ; Segment permissions: Read
.xdata$x:00000ED4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000ED4                 assume cs:_xdata$x
.xdata$x:00000ED4                 ;org 0ED4h
.xdata$x:00000ED4 __unwindtable$??1nsSBCSGroupProber@@UAE@XZ db 0FFh
.xdata$x:00000ED4                                         ; DATA XREF: .xdata$x:00000EE4o
.xdata$x:00000ED5                 db 0FFh
.xdata$x:00000ED6                 db 0FFh
.xdata$x:00000ED7                 db 0FFh
.xdata$x:00000ED8                 dd offset __unwindfunclet$??1nsSBCSGroupProber@@UAE@XZ$0
.xdata$x:00000EDC __ehfuncinfo$??1nsSBCSGroupProber@@UAE@XZ db  22h ; "
.xdata$x:00000EDC                                         ; DATA XREF: __ehhandler$??1nsSBCSGroupProber@@UAE@XZ+11o
.xdata$x:00000EDD                 db    5
.xdata$x:00000EDE                 db  93h ; ô
.xdata$x:00000EDF                 db  19h
.xdata$x:00000EE0                 db    1
.xdata$x:00000EE1                 db    0
.xdata$x:00000EE2                 db    0
.xdata$x:00000EE3                 db    0
.xdata$x:00000EE4                 dd offset __unwindtable$??1nsSBCSGroupProber@@UAE@XZ
.xdata$x:00000EE8                 align 20h
.xdata$x:00000F00 __ehfuncinfo$??0nsSBCSGroupProber@@QAE@XZ db  22h ; "
.xdata$x:00000F00                                         ; DATA XREF: __ehhandler$??0nsSBCSGroupProber@@QAE@XZ+14o
.xdata$x:00000F01                 db    5
.xdata$x:00000F02                 db  93h ; ô
.xdata$x:00000F03                 db  19h
.xdata$x:00000F04                 db  0Fh
.xdata$x:00000F05                 db    0
.xdata$x:00000F06                 db    0
.xdata$x:00000F07                 db    0
.xdata$x:00000F08                 dd offset __unwindtable$??0nsSBCSGroupProber@@QAE@XZ
.xdata$x:00000F0C                 db    0
.xdata$x:00000F0D                 db    0
.xdata$x:00000F0E                 db    0
.xdata$x:00000F0F                 db    0
.xdata$x:00000F10                 db    0
.xdata$x:00000F11                 db    0
.xdata$x:00000F12                 db    0
.xdata$x:00000F13                 db    0
.xdata$x:00000F14                 db    0
.xdata$x:00000F15                 db    0
.xdata$x:00000F16                 db    0
.xdata$x:00000F17                 db    0
.xdata$x:00000F18                 db    0
.xdata$x:00000F19                 db    0
.xdata$x:00000F1A                 db    0
.xdata$x:00000F1B                 db    0
.xdata$x:00000F1C                 db    0
.xdata$x:00000F1D                 db    0
.xdata$x:00000F1E                 db    0
.xdata$x:00000F1F                 db    0
.xdata$x:00000F20                 db    0
.xdata$x:00000F21                 db    0
.xdata$x:00000F22                 db    0
.xdata$x:00000F23                 db    0
.xdata$x:00000F24 __unwindtable$??0nsSBCSGroupProber@@QAE@XZ db 0FFh
.xdata$x:00000F24                                         ; DATA XREF: .xdata$x:00000F08o
.xdata$x:00000F25                 db 0FFh
.xdata$x:00000F26                 db 0FFh
.xdata$x:00000F27                 db 0FFh
.xdata$x:00000F28                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$0
.xdata$x:00000F2C                 align 10h
.xdata$x:00000F30                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$1
.xdata$x:00000F34                 align 8
.xdata$x:00000F38                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$2
.xdata$x:00000F3C                 align 10h
.xdata$x:00000F40                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$3
.xdata$x:00000F44                 align 8
.xdata$x:00000F48                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$4
.xdata$x:00000F4C                 align 10h
.xdata$x:00000F50                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$5
.xdata$x:00000F54                 align 8
.xdata$x:00000F58                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$6
.xdata$x:00000F5C                 align 10h
.xdata$x:00000F60                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$7
.xdata$x:00000F64                 align 8
.xdata$x:00000F68                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$8
.xdata$x:00000F6C                 align 10h
.xdata$x:00000F70                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$9
.xdata$x:00000F74                 align 8
.xdata$x:00000F78                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$10
.xdata$x:00000F7C                 align 10h
.xdata$x:00000F80                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$11
.xdata$x:00000F84                 align 8
.xdata$x:00000F88                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$12
.xdata$x:00000F8C                 align 10h
.xdata$x:00000F90                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$13
.xdata$x:00000F94                 align 8
.xdata$x:00000F98                 dd offset __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$14
.xdata$x:00000F98 _xdata$x        ends
.xdata$x:00000F98
.xdata$x:00000F9C ; ===========================================================================
.xdata$x:00000F9C
.xdata$x:00000F9C ; Segment type: Pure data
.xdata$x:00000F9C ; Segment permissions: Read
.xdata$x:00000F9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000F9C                 assume cs:_xdata$x
.xdata$x:00000F9C                 ;org 0F9Ch
.xdata$x:00000F9C ; COMDAT (pick associative to section at A50)
.xdata$x:00000F9C __unwindtable$??0nsHebrewProber@@QAE@XZ db 0FFh
.xdata$x:00000F9C                                         ; DATA XREF: .xdata$x:00000FACo
.xdata$x:00000F9D                 db 0FFh
.xdata$x:00000F9E                 db 0FFh
.xdata$x:00000F9F                 db 0FFh
.xdata$x:00000FA0                 dd offset __unwindfunclet$??0nsHebrewProber@@QAE@XZ$0
.xdata$x:00000FA4 __ehfuncinfo$??0nsHebrewProber@@QAE@XZ db  22h ; "
.xdata$x:00000FA4                                         ; DATA XREF: __ehhandler$??0nsHebrewProber@@QAE@XZ+11o
.xdata$x:00000FA5                 db    5
.xdata$x:00000FA6                 db  93h ; ô
.xdata$x:00000FA7                 db  19h
.xdata$x:00000FA8                 db    1
.xdata$x:00000FA9                 db    0
.xdata$x:00000FAA                 db    0
.xdata$x:00000FAB                 db    0
.xdata$x:00000FAC                 dd offset __unwindtable$??0nsHebrewProber@@QAE@XZ
.xdata$x:00000FB0                 db    0
.xdata$x:00000FB1                 db    0
.xdata$x:00000FB2                 db    0
.xdata$x:00000FB3                 db    0
.xdata$x:00000FB4                 db    0
.xdata$x:00000FB5                 db    0
.xdata$x:00000FB6                 db    0
.xdata$x:00000FB7                 db    0
.xdata$x:00000FB8                 db    0
.xdata$x:00000FB9                 db    0
.xdata$x:00000FBA                 db    0
.xdata$x:00000FBB                 db    0
.xdata$x:00000FBC                 db    0
.xdata$x:00000FBD                 db    0
.xdata$x:00000FBE                 db    0
.xdata$x:00000FBF                 db    0
.xdata$x:00000FC0                 db    0
.xdata$x:00000FC1                 db    0
.xdata$x:00000FC2                 db    0
.xdata$x:00000FC3                 db    0
.xdata$x:00000FC4                 db    0
.xdata$x:00000FC5                 db    0
.xdata$x:00000FC6                 db    0
.xdata$x:00000FC7                 db    0
.xdata$x:00000FC7 _xdata$x        ends
.xdata$x:00000FC7
.xdata$x:00000FC8 ; ===========================================================================
.xdata$x:00000FC8
.xdata$x:00000FC8 ; Segment type: Pure data
.xdata$x:00000FC8 ; Segment permissions: Read
.xdata$x:00000FC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000FC8                 assume cs:_xdata$x
.xdata$x:00000FC8                 ;org 0FC8h
.xdata$x:00000FC8 ; COMDAT (pick associative to section at C3C)
.xdata$x:00000FC8 __unwindtable$??1nsHebrewProber@@UAE@XZ db 0FFh
.xdata$x:00000FC8                                         ; DATA XREF: .xdata$x:00000FD8o
.xdata$x:00000FC9                 db 0FFh
.xdata$x:00000FCA                 db 0FFh
.xdata$x:00000FCB                 db 0FFh
.xdata$x:00000FCC                 dd offset __unwindfunclet$??1nsHebrewProber@@UAE@XZ$0
.xdata$x:00000FD0 __ehfuncinfo$??1nsHebrewProber@@UAE@XZ db  22h ; "
.xdata$x:00000FD0                                         ; DATA XREF: __ehhandler$??1nsHebrewProber@@UAE@XZ+11o
.xdata$x:00000FD1                 db    5
.xdata$x:00000FD2                 db  93h ; ô
.xdata$x:00000FD3                 db  19h
.xdata$x:00000FD4                 db    1
.xdata$x:00000FD5                 db    0
.xdata$x:00000FD6                 db    0
.xdata$x:00000FD7                 db    0
.xdata$x:00000FD8                 dd offset __unwindtable$??1nsHebrewProber@@UAE@XZ
.xdata$x:00000FDC                 db    0
.xdata$x:00000FDD                 db    0
.xdata$x:00000FDE                 db    0
.xdata$x:00000FDF                 db    0
.xdata$x:00000FE0                 db    0
.xdata$x:00000FE1                 db    0
.xdata$x:00000FE2                 db    0
.xdata$x:00000FE3                 db    0
.xdata$x:00000FE4                 db    0
.xdata$x:00000FE5                 db    0
.xdata$x:00000FE6                 db    0
.xdata$x:00000FE7                 db    0
.xdata$x:00000FE8                 db    0
.xdata$x:00000FE9                 db    0
.xdata$x:00000FEA                 db    0
.xdata$x:00000FEB                 db    0
.xdata$x:00000FEC                 db    0
.xdata$x:00000FED                 db    0
.xdata$x:00000FEE                 db    0
.xdata$x:00000FEF                 db    0
.xdata$x:00000FF0                 db    0
.xdata$x:00000FF1                 db    0
.xdata$x:00000FF2                 db    0
.xdata$x:00000FF3                 db    0
.xdata$x:00000FF3 _xdata$x        ends
.xdata$x:00000FF3
.rdata:00000FF4 ; ===========================================================================
.rdata:00000FF4
.rdata:00000FF4 ; Segment type: Pure data
.rdata:00000FF4 ; Segment permissions: Read
.rdata:00000FF4 _rdata          segment dword public 'DATA' use32
.rdata:00000FF4                 assume cs:_rdata
.rdata:00000FF4                 ;org 0FF4h
.rdata:00000FF4 ; COMDAT (pick largest)
.rdata:00000FF4                 dd offset ??_R4nsCharSetProber@@6B@ ; const nsCharSetProber::`RTTI Complete Object Locator'
.rdata:00000FF8                 public ??_7nsCharSetProber@@6B@
.rdata:00000FF8 ; const nsCharSetProber::`vftable'
.rdata:00000FF8 ??_7nsCharSetProber@@6B@ dd offset ??_EnsCharSetProber@@UAEPAXI@Z
.rdata:00000FF8                                         ; DATA XREF: nsCharSetProber::nsCharSetProber(void)+Ao
.rdata:00000FF8                                         ; nsCharSetProber::~nsCharSetProber(void)+Ao
.rdata:00000FF8                                         ; nsCharSetProber::`vector deleting destructor'(uint)
.rdata:00000FFC                 dd offset __purecall
.rdata:00001000                 dd offset __purecall
.rdata:00001004                 dd offset __purecall
.rdata:00001008                 dd offset __purecall
.rdata:0000100C                 dd offset __purecall
.rdata:00001010                 dd offset __purecall
.rdata:00001010 _rdata          ends
.rdata:00001010
.rdata:00001014 ; ===========================================================================
.rdata:00001014
.rdata:00001014 ; Segment type: Pure data
.rdata:00001014 ; Segment permissions: Read
.rdata:00001014 _rdata          segment dword public 'DATA' use32
.rdata:00001014                 assume cs:_rdata
.rdata:00001014                 ;org 1014h
.rdata:00001014 ; COMDAT (pick largest)
.rdata:00001014                 dd offset ??_R4nsSingleByteCharSetProber@@6B@ ; const nsSingleByteCharSetProber::`RTTI Complete Object Locator'
.rdata:00001018                 public ??_7nsSingleByteCharSetProber@@6B@
.rdata:00001018 ; const nsSingleByteCharSetProber::`vftable'
.rdata:00001018 ??_7nsSingleByteCharSetProber@@6B@ dd offset ??_EnsSingleByteCharSetProber@@UAEPAXI@Z
.rdata:00001018                                         ; DATA XREF: nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)+38o
.rdata:00001018                                         ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *,bool,nsCharSetProber *)+38o
.rdata:00001018                                         ; nsSingleByteCharSetProber::`vector deleting destructor'(uint)
.rdata:0000101C                 dd offset ?GetCharSetName@nsSingleByteCharSetProber@@UAEPBDXZ ; nsSingleByteCharSetProber::GetCharSetName(void)
.rdata:00001020                 dd offset ?HandleData@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsSingleByteCharSetProber::HandleData(char const *,uint)
.rdata:00001024                 dd offset ?GetState@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@XZ ; nsSingleByteCharSetProber::GetState(void)
.rdata:00001028                 dd offset ?Reset@nsSingleByteCharSetProber@@UAEXXZ ; nsSingleByteCharSetProber::Reset(void)
.rdata:0000102C                 dd offset ?GetConfidence@nsSingleByteCharSetProber@@UAEMXZ ; nsSingleByteCharSetProber::GetConfidence(void)
.rdata:00001030                 dd offset ?SetOpion@nsSingleByteCharSetProber@@UAEXXZ ; nsSingleByteCharSetProber::SetOpion(void)
.rdata:00001030 _rdata          ends
.rdata:00001030
.rdata:00001034 ; ===========================================================================
.rdata:00001034
.rdata:00001034 ; Segment type: Pure data
.rdata:00001034 ; Segment permissions: Read
.rdata:00001034 _rdata          segment dword public 'DATA' use32
.rdata:00001034                 assume cs:_rdata
.rdata:00001034                 ;org 1034h
.rdata:00001034 ; COMDAT (pick largest)
.rdata:00001034                 dd offset ??_R4nsSBCSGroupProber@@6B@ ; const nsSBCSGroupProber::`RTTI Complete Object Locator'
.rdata:00001038                 public ??_7nsSBCSGroupProber@@6B@
.rdata:00001038 ; const nsSBCSGroupProber::`vftable'
.rdata:00001038 ??_7nsSBCSGroupProber@@6B@ dd offset ??_EnsSBCSGroupProber@@UAEPAXI@Z
.rdata:00001038                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3Do
.rdata:00001038                                         ; nsSBCSGroupProber::~nsSBCSGroupProber(void)+2Bo
.rdata:00001038                                         ; nsSBCSGroupProber::`vector deleting destructor'(uint)
.rdata:0000103C                 dd offset ?GetCharSetName@nsSBCSGroupProber@@UAEPBDXZ ; nsSBCSGroupProber::GetCharSetName(void)
.rdata:00001040                 dd offset ?HandleData@nsSBCSGroupProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsSBCSGroupProber::HandleData(char const *,uint)
.rdata:00001044                 dd offset ?GetState@nsSBCSGroupProber@@UAE?AW4nsProbingState@@XZ ; nsSBCSGroupProber::GetState(void)
.rdata:00001048                 dd offset ?Reset@nsSBCSGroupProber@@UAEXXZ ; nsSBCSGroupProber::Reset(void)
.rdata:0000104C                 dd offset ?GetConfidence@nsSBCSGroupProber@@UAEMXZ ; nsSBCSGroupProber::GetConfidence(void)
.rdata:00001050                 dd offset ?SetOpion@nsSBCSGroupProber@@UAEXXZ ; nsSBCSGroupProber::SetOpion(void)
.rdata:00001050 _rdata          ends
.rdata:00001050
.rdata:00001054 ; ===========================================================================
.rdata:00001054
.rdata:00001054 ; Segment type: Pure data
.rdata:00001054 ; Segment permissions: Read
.rdata:00001054 _rdata          segment dword public 'DATA' use32
.rdata:00001054                 assume cs:_rdata
.rdata:00001054                 ;org 1054h
.rdata:00001054 ; COMDAT (pick largest)
.rdata:00001054                 dd offset ??_R4nsHebrewProber@@6B@ ; const nsHebrewProber::`RTTI Complete Object Locator'
.rdata:00001058                 public ??_7nsHebrewProber@@6B@
.rdata:00001058 ; const nsHebrewProber::`vftable'
.rdata:00001058 ??_7nsHebrewProber@@6B@ dd offset ??_EnsHebrewProber@@UAEPAXI@Z
.rdata:00001058                                         ; DATA XREF: nsHebrewProber::nsHebrewProber(void)+38o
.rdata:00001058                                         ; nsHebrewProber::~nsHebrewProber(void)+29o
.rdata:00001058                                         ; nsHebrewProber::`vector deleting destructor'(uint)
.rdata:0000105C                 dd offset ?GetCharSetName@nsHebrewProber@@UAEPBDXZ ; nsHebrewProber::GetCharSetName(void)
.rdata:00001060                 dd offset ?HandleData@nsHebrewProber@@UAE?AW4nsProbingState@@PBDI@Z ; nsHebrewProber::HandleData(char const *,uint)
.rdata:00001064                 dd offset ?GetState@nsHebrewProber@@UAE?AW4nsProbingState@@XZ ; nsHebrewProber::GetState(void)
.rdata:00001068                 dd offset ?Reset@nsHebrewProber@@UAEXXZ ; nsHebrewProber::Reset(void)
.rdata:0000106C                 dd offset ?GetConfidence@nsHebrewProber@@UAEMXZ ; nsHebrewProber::GetConfidence(void)
.rdata:00001070                 dd offset ?SetOpion@nsHebrewProber@@UAEXXZ ; nsHebrewProber::SetOpion(void)
.rdata:00001070 _rdata          ends
.rdata:00001070
.rdata$r:00001074 ; ===========================================================================
.rdata$r:00001074
.rdata$r:00001074 ; Segment type: Pure data
.rdata$r:00001074 ; Segment permissions: Read
.rdata$r:00001074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001074                 assume cs:_rdata$r
.rdata$r:00001074                 ;org 1074h
.rdata$r:00001074 ; COMDAT (pick any)
.rdata$r:00001074                 public ??_R4nsCharSetProber@@6B@
.rdata$r:00001074 ; const nsCharSetProber::`RTTI Complete Object Locator'
.rdata$r:00001074 ??_R4nsCharSetProber@@6B@ db    0       ; DATA XREF: .rdata:00000FF4o
.rdata$r:00001075                 db    0
.rdata$r:00001076                 db    0
.rdata$r:00001077                 db    0
.rdata$r:00001078                 db    0
.rdata$r:00001079                 db    0
.rdata$r:0000107A                 db    0
.rdata$r:0000107B                 db    0
.rdata$r:0000107C                 db    0
.rdata$r:0000107D                 db    0
.rdata$r:0000107E                 db    0
.rdata$r:0000107F                 db    0
.rdata$r:00001080                 dd offset ??_R0?AVnsCharSetProber@@@8 ; nsCharSetProber `RTTI Type Descriptor'
.rdata$r:00001084                 dd offset ??_R3nsCharSetProber@@8 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001084 _rdata$r        ends
.rdata$r:00001084
.data$r:00001088 ; ===========================================================================
.data$r:00001088
.data$r:00001088 ; Segment type: Pure data
.data$r:00001088 ; Segment permissions: Read/Write
.data$r:00001088 _data$r         segment dword public 'DATA' use32
.data$r:00001088                 assume cs:_data$r
.data$r:00001088                 ;org 1088h
.data$r:00001088 ; COMDAT (pick any)
.data$r:00001088                 public ??_R0?AVnsCharSetProber@@@8
.data$r:00001088 ; class nsCharSetProber `RTTI Type Descriptor'
.data$r:00001088 ??_R0?AVnsCharSetProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001088                                         ; DATA XREF: .rdata$r:00001080o
.data$r:00001088                                         ; .rdata$r:nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001088                                         ; const type_info::`vftable'
.data$r:0000108C                 align 10h
.data$r:00001090 a_?avnscharsetp db '.?AVnsCharSetProber@@',0
.data$r:000010A6                 align 4
.data$r:000010A6 _data$r         ends
.data$r:000010A6
.rdata$r:000010A8 ; ===========================================================================
.rdata$r:000010A8
.rdata$r:000010A8 ; Segment type: Pure data
.rdata$r:000010A8 ; Segment permissions: Read
.rdata$r:000010A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010A8                 assume cs:_rdata$r
.rdata$r:000010A8                 ;org 10A8h
.rdata$r:000010A8 ; COMDAT (pick any)
.rdata$r:000010A8                 public ??_R3nsCharSetProber@@8
.rdata$r:000010A8 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010A8 ??_R3nsCharSetProber@@8 db    0         ; DATA XREF: .rdata$r:00001084o
.rdata$r:000010A8                                         ; .rdata$r:000010D8o
.rdata$r:000010A9                 db    0
.rdata$r:000010AA                 db    0
.rdata$r:000010AB                 db    0
.rdata$r:000010AC                 db    0
.rdata$r:000010AD                 db    0
.rdata$r:000010AE                 db    0
.rdata$r:000010AF                 db    0
.rdata$r:000010B0                 db    1
.rdata$r:000010B1                 db    0
.rdata$r:000010B2                 db    0
.rdata$r:000010B3                 db    0
.rdata$r:000010B4                 dd offset ??_R2nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Array'
.rdata$r:000010B4 _rdata$r        ends
.rdata$r:000010B4
.rdata$r:000010B8 ; ===========================================================================
.rdata$r:000010B8
.rdata$r:000010B8 ; Segment type: Pure data
.rdata$r:000010B8 ; Segment permissions: Read
.rdata$r:000010B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010B8                 assume cs:_rdata$r
.rdata$r:000010B8                 ;org 10B8h
.rdata$r:000010B8 ; COMDAT (pick any)
.rdata$r:000010B8                 public ??_R2nsCharSetProber@@8
.rdata$r:000010B8 ; nsCharSetProber::`RTTI Base Class Array'
.rdata$r:000010B8 ??_R2nsCharSetProber@@8 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8
.rdata$r:000010B8                                         ; DATA XREF: .rdata$r:000010B4o
.rdata$r:000010B8                                         ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000010BC                 db    0
.rdata$r:000010BD                 align 10h
.rdata$r:000010BD _rdata$r        ends
.rdata$r:000010BD
.rdata$r:000010C0 ; ===========================================================================
.rdata$r:000010C0
.rdata$r:000010C0 ; Segment type: Pure data
.rdata$r:000010C0 ; Segment permissions: Read
.rdata$r:000010C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010C0                 assume cs:_rdata$r
.rdata$r:000010C0                 ;org 10C0h
.rdata$r:000010C0 ; COMDAT (pick any)
.rdata$r:000010C0                 public ??_R1A@?0A@EA@nsCharSetProber@@8
.rdata$r:000010C0 ; nsCharSetProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000010C0 ??_R1A@?0A@EA@nsCharSetProber@@8 dd offset ??_R0?AVnsCharSetProber@@@8
.rdata$r:000010C0                                         ; DATA XREF: .rdata$r:nsCharSetProber::`RTTI Base Class Array'o
.rdata$r:000010C0                                         ; .rdata$r:0000112Co ...
.rdata$r:000010C0                                         ; nsCharSetProber `RTTI Type Descriptor'
.rdata$r:000010C4                 db    0
.rdata$r:000010C5                 db    0
.rdata$r:000010C6                 db    0
.rdata$r:000010C7                 db    0
.rdata$r:000010C8                 db    0
.rdata$r:000010C9                 db    0
.rdata$r:000010CA                 db    0
.rdata$r:000010CB                 db    0
.rdata$r:000010CC                 db 0FFh
.rdata$r:000010CD                 db 0FFh
.rdata$r:000010CE                 db 0FFh
.rdata$r:000010CF                 db 0FFh
.rdata$r:000010D0                 db    0
.rdata$r:000010D1                 db    0
.rdata$r:000010D2                 db    0
.rdata$r:000010D3                 db    0
.rdata$r:000010D4                 db  40h ; @
.rdata$r:000010D5                 db    0
.rdata$r:000010D6                 db    0
.rdata$r:000010D7                 db    0
.rdata$r:000010D8                 dd offset ??_R3nsCharSetProber@@8 ; nsCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010D8 _rdata$r        ends
.rdata$r:000010D8
.rdata$r:000010DC ; ===========================================================================
.rdata$r:000010DC
.rdata$r:000010DC ; Segment type: Pure data
.rdata$r:000010DC ; Segment permissions: Read
.rdata$r:000010DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010DC                 assume cs:_rdata$r
.rdata$r:000010DC                 ;org 10DCh
.rdata$r:000010DC ; COMDAT (pick any)
.rdata$r:000010DC                 public ??_R4nsSingleByteCharSetProber@@6B@
.rdata$r:000010DC ; const nsSingleByteCharSetProber::`RTTI Complete Object Locator'
.rdata$r:000010DC ??_R4nsSingleByteCharSetProber@@6B@ db    0 ; DATA XREF: .rdata:00001014o
.rdata$r:000010DD                 db    0
.rdata$r:000010DE                 db    0
.rdata$r:000010DF                 db    0
.rdata$r:000010E0                 db    0
.rdata$r:000010E1                 db    0
.rdata$r:000010E2                 db    0
.rdata$r:000010E3                 db    0
.rdata$r:000010E4                 db    0
.rdata$r:000010E5                 db    0
.rdata$r:000010E6                 db    0
.rdata$r:000010E7                 db    0
.rdata$r:000010E8                 dd offset ??_R0?AVnsSingleByteCharSetProber@@@8 ; nsSingleByteCharSetProber `RTTI Type Descriptor'
.rdata$r:000010EC                 dd offset ??_R3nsSingleByteCharSetProber@@8 ; nsSingleByteCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010EC _rdata$r        ends
.rdata$r:000010EC
.data$r:000010F0 ; ===========================================================================
.data$r:000010F0
.data$r:000010F0 ; Segment type: Pure data
.data$r:000010F0 ; Segment permissions: Read/Write
.data$r:000010F0 _data$r         segment dword public 'DATA' use32
.data$r:000010F0                 assume cs:_data$r
.data$r:000010F0                 ;org 10F0h
.data$r:000010F0 ; COMDAT (pick any)
.data$r:000010F0                 public ??_R0?AVnsSingleByteCharSetProber@@@8
.data$r:000010F0 ; class nsSingleByteCharSetProber `RTTI Type Descriptor'
.data$r:000010F0 ??_R0?AVnsSingleByteCharSetProber@@@8 dd offset ??_7type_info@@6B@
.data$r:000010F0                                         ; DATA XREF: .rdata$r:000010E8o
.data$r:000010F0                                         ; .rdata$r:nsSingleByteCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000010F0                                         ; const type_info::`vftable'
.data$r:000010F4                 align 8
.data$r:000010F8 a_?avnssingleby db '.?AVnsSingleByteCharSetProber@@',0
.data$r:000010F8 _data$r         ends
.data$r:000010F8
.rdata$r:00001118 ; ===========================================================================
.rdata$r:00001118
.rdata$r:00001118 ; Segment type: Pure data
.rdata$r:00001118 ; Segment permissions: Read
.rdata$r:00001118 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001118                 assume cs:_rdata$r
.rdata$r:00001118                 ;org 1118h
.rdata$r:00001118 ; COMDAT (pick any)
.rdata$r:00001118                 public ??_R3nsSingleByteCharSetProber@@8
.rdata$r:00001118 ; nsSingleByteCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001118 ??_R3nsSingleByteCharSetProber@@8 db    0 ; DATA XREF: .rdata$r:000010ECo
.rdata$r:00001118                                         ; .rdata$r:0000114Co
.rdata$r:00001119                 db    0
.rdata$r:0000111A                 db    0
.rdata$r:0000111B                 db    0
.rdata$r:0000111C                 db    0
.rdata$r:0000111D                 db    0
.rdata$r:0000111E                 db    0
.rdata$r:0000111F                 db    0
.rdata$r:00001120                 db    2
.rdata$r:00001121                 db    0
.rdata$r:00001122                 db    0
.rdata$r:00001123                 db    0
.rdata$r:00001124                 dd offset ??_R2nsSingleByteCharSetProber@@8 ; nsSingleByteCharSetProber::`RTTI Base Class Array'
.rdata$r:00001124 _rdata$r        ends
.rdata$r:00001124
.rdata$r:00001128 ; ===========================================================================
.rdata$r:00001128
.rdata$r:00001128 ; Segment type: Pure data
.rdata$r:00001128 ; Segment permissions: Read
.rdata$r:00001128 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001128                 assume cs:_rdata$r
.rdata$r:00001128                 ;org 1128h
.rdata$r:00001128 ; COMDAT (pick any)
.rdata$r:00001128                 public ??_R2nsSingleByteCharSetProber@@8
.rdata$r:00001128 ; nsSingleByteCharSetProber::`RTTI Base Class Array'
.rdata$r:00001128 ??_R2nsSingleByteCharSetProber@@8 dd offset ??_R1A@?0A@EA@nsSingleByteCharSetProber@@8
.rdata$r:00001128                                         ; DATA XREF: .rdata$r:00001124o
.rdata$r:00001128                                         ; nsSingleByteCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000112C                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001130                 db    0
.rdata$r:00001131                 align 4
.rdata$r:00001131 _rdata$r        ends
.rdata$r:00001131
.rdata$r:00001134 ; ===========================================================================
.rdata$r:00001134
.rdata$r:00001134 ; Segment type: Pure data
.rdata$r:00001134 ; Segment permissions: Read
.rdata$r:00001134 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001134                 assume cs:_rdata$r
.rdata$r:00001134                 ;org 1134h
.rdata$r:00001134 ; COMDAT (pick any)
.rdata$r:00001134                 public ??_R1A@?0A@EA@nsSingleByteCharSetProber@@8
.rdata$r:00001134 ; nsSingleByteCharSetProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001134 ??_R1A@?0A@EA@nsSingleByteCharSetProber@@8 dd offset ??_R0?AVnsSingleByteCharSetProber@@@8
.rdata$r:00001134                                         ; DATA XREF: .rdata$r:nsSingleByteCharSetProber::`RTTI Base Class Array'o
.rdata$r:00001134                                         ; nsSingleByteCharSetProber `RTTI Type Descriptor'
.rdata$r:00001138                 db    1
.rdata$r:00001139                 db    0
.rdata$r:0000113A                 db    0
.rdata$r:0000113B                 db    0
.rdata$r:0000113C                 db    0
.rdata$r:0000113D                 db    0
.rdata$r:0000113E                 db    0
.rdata$r:0000113F                 db    0
.rdata$r:00001140                 db 0FFh
.rdata$r:00001141                 db 0FFh
.rdata$r:00001142                 db 0FFh
.rdata$r:00001143                 db 0FFh
.rdata$r:00001144                 db    0
.rdata$r:00001145                 db    0
.rdata$r:00001146                 db    0
.rdata$r:00001147                 db    0
.rdata$r:00001148                 db  40h ; @
.rdata$r:00001149                 db    0
.rdata$r:0000114A                 db    0
.rdata$r:0000114B                 db    0
.rdata$r:0000114C                 dd offset ??_R3nsSingleByteCharSetProber@@8 ; nsSingleByteCharSetProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000114C _rdata$r        ends
.rdata$r:0000114C
.rdata$r:00001150 ; ===========================================================================
.rdata$r:00001150
.rdata$r:00001150 ; Segment type: Pure data
.rdata$r:00001150 ; Segment permissions: Read
.rdata$r:00001150 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001150                 assume cs:_rdata$r
.rdata$r:00001150                 ;org 1150h
.rdata$r:00001150 ; COMDAT (pick any)
.rdata$r:00001150                 public ??_R4nsSBCSGroupProber@@6B@
.rdata$r:00001150 ; const nsSBCSGroupProber::`RTTI Complete Object Locator'
.rdata$r:00001150 ??_R4nsSBCSGroupProber@@6B@ db    0     ; DATA XREF: .rdata:00001034o
.rdata$r:00001151                 db    0
.rdata$r:00001152                 db    0
.rdata$r:00001153                 db    0
.rdata$r:00001154                 db    0
.rdata$r:00001155                 db    0
.rdata$r:00001156                 db    0
.rdata$r:00001157                 db    0
.rdata$r:00001158                 db    0
.rdata$r:00001159                 db    0
.rdata$r:0000115A                 db    0
.rdata$r:0000115B                 db    0
.rdata$r:0000115C                 dd offset ??_R0?AVnsSBCSGroupProber@@@8 ; nsSBCSGroupProber `RTTI Type Descriptor'
.rdata$r:00001160                 dd offset ??_R3nsSBCSGroupProber@@8 ; nsSBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001160 _rdata$r        ends
.rdata$r:00001160
.data$r:00001164 ; ===========================================================================
.data$r:00001164
.data$r:00001164 ; Segment type: Pure data
.data$r:00001164 ; Segment permissions: Read/Write
.data$r:00001164 _data$r         segment dword public 'DATA' use32
.data$r:00001164                 assume cs:_data$r
.data$r:00001164                 ;org 1164h
.data$r:00001164 ; COMDAT (pick any)
.data$r:00001164                 public ??_R0?AVnsSBCSGroupProber@@@8
.data$r:00001164 ; class nsSBCSGroupProber `RTTI Type Descriptor'
.data$r:00001164 ??_R0?AVnsSBCSGroupProber@@@8 dd offset ??_7type_info@@6B@
.data$r:00001164                                         ; DATA XREF: .rdata$r:0000115Co
.data$r:00001164                                         ; .rdata$r:nsSBCSGroupProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00001164                                         ; const type_info::`vftable'
.data$r:00001168                 db    0
.data$r:00001169                 db    0
.data$r:0000116A                 db    0
.data$r:0000116B                 db    0
.data$r:0000116C                 db  2Eh ; .
.data$r:0000116D                 db  3Fh ; ?
.data$r:0000116E                 db  41h ; A
.data$r:0000116F                 db  56h ; V
.data$r:00001170                 db  6Eh ; n
.data$r:00001171                 db  73h ; s
.data$r:00001172                 db  53h ; S
.data$r:00001173                 db  42h ; B
.data$r:00001174                 db  43h ; C
.data$r:00001175                 db  53h ; S
.data$r:00001176                 db  47h ; G
.data$r:00001177                 db  72h ; r
.data$r:00001178                 db  6Fh ; o
.data$r:00001179                 db  75h ; u
.data$r:0000117A                 db  70h ; p
.data$r:0000117B                 db  50h ; P
.data$r:0000117C                 db  72h ; r
.data$r:0000117D                 db  6Fh ; o
.data$r:0000117E                 db  62h ; b
.data$r:0000117F                 db  65h ; e
.data$r:00001180                 db  72h ; r
.data$r:00001181                 db  40h ; @
.data$r:00001182                 db  40h ; @
.data$r:00001183                 db    0
.data$r:00001183 _data$r         ends
.data$r:00001183
.rdata$r:00001184 ; ===========================================================================
.rdata$r:00001184
.rdata$r:00001184 ; Segment type: Pure data
.rdata$r:00001184 ; Segment permissions: Read
.rdata$r:00001184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001184                 assume cs:_rdata$r
.rdata$r:00001184                 ;org 1184h
.rdata$r:00001184 ; COMDAT (pick any)
.rdata$r:00001184                 public ??_R3nsSBCSGroupProber@@8
.rdata$r:00001184 ; nsSBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001184 ??_R3nsSBCSGroupProber@@8 db    0       ; DATA XREF: .rdata$r:00001160o
.rdata$r:00001184                                         ; .rdata$r:000011B8o
.rdata$r:00001185                 db    0
.rdata$r:00001186                 db    0
.rdata$r:00001187                 db    0
.rdata$r:00001188                 db    0
.rdata$r:00001189                 db    0
.rdata$r:0000118A                 db    0
.rdata$r:0000118B                 db    0
.rdata$r:0000118C                 db    2
.rdata$r:0000118D                 db    0
.rdata$r:0000118E                 db    0
.rdata$r:0000118F                 db    0
.rdata$r:00001190                 dd offset ??_R2nsSBCSGroupProber@@8 ; nsSBCSGroupProber::`RTTI Base Class Array'
.rdata$r:00001190 _rdata$r        ends
.rdata$r:00001190
.rdata$r:00001194 ; ===========================================================================
.rdata$r:00001194
.rdata$r:00001194 ; Segment type: Pure data
.rdata$r:00001194 ; Segment permissions: Read
.rdata$r:00001194 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001194                 assume cs:_rdata$r
.rdata$r:00001194                 ;org 1194h
.rdata$r:00001194 ; COMDAT (pick any)
.rdata$r:00001194                 public ??_R2nsSBCSGroupProber@@8
.rdata$r:00001194 ; nsSBCSGroupProber::`RTTI Base Class Array'
.rdata$r:00001194 ??_R2nsSBCSGroupProber@@8 dd offset ??_R1A@?0A@EA@nsSBCSGroupProber@@8
.rdata$r:00001194                                         ; DATA XREF: .rdata$r:00001190o
.rdata$r:00001194                                         ; nsSBCSGroupProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001198                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000119C                 db    0
.rdata$r:0000119D                 align 10h
.rdata$r:0000119D _rdata$r        ends
.rdata$r:0000119D
.rdata$r:000011A0 ; ===========================================================================
.rdata$r:000011A0
.rdata$r:000011A0 ; Segment type: Pure data
.rdata$r:000011A0 ; Segment permissions: Read
.rdata$r:000011A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011A0                 assume cs:_rdata$r
.rdata$r:000011A0                 ;org 11A0h
.rdata$r:000011A0 ; COMDAT (pick any)
.rdata$r:000011A0                 public ??_R1A@?0A@EA@nsSBCSGroupProber@@8
.rdata$r:000011A0 ; nsSBCSGroupProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000011A0 ??_R1A@?0A@EA@nsSBCSGroupProber@@8 dd offset ??_R0?AVnsSBCSGroupProber@@@8
.rdata$r:000011A0                                         ; DATA XREF: .rdata$r:nsSBCSGroupProber::`RTTI Base Class Array'o
.rdata$r:000011A0                                         ; nsSBCSGroupProber `RTTI Type Descriptor'
.rdata$r:000011A4                 db    1
.rdata$r:000011A5                 db    0
.rdata$r:000011A6                 db    0
.rdata$r:000011A7                 db    0
.rdata$r:000011A8                 db    0
.rdata$r:000011A9                 db    0
.rdata$r:000011AA                 db    0
.rdata$r:000011AB                 db    0
.rdata$r:000011AC                 db 0FFh
.rdata$r:000011AD                 db 0FFh
.rdata$r:000011AE                 db 0FFh
.rdata$r:000011AF                 db 0FFh
.rdata$r:000011B0                 db    0
.rdata$r:000011B1                 db    0
.rdata$r:000011B2                 db    0
.rdata$r:000011B3                 db    0
.rdata$r:000011B4                 db  40h ; @
.rdata$r:000011B5                 db    0
.rdata$r:000011B6                 db    0
.rdata$r:000011B7                 db    0
.rdata$r:000011B8                 dd offset ??_R3nsSBCSGroupProber@@8 ; nsSBCSGroupProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011B8 _rdata$r        ends
.rdata$r:000011B8
.rdata$r:000011BC ; ===========================================================================
.rdata$r:000011BC
.rdata$r:000011BC ; Segment type: Pure data
.rdata$r:000011BC ; Segment permissions: Read
.rdata$r:000011BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011BC                 assume cs:_rdata$r
.rdata$r:000011BC                 ;org 11BCh
.rdata$r:000011BC ; COMDAT (pick any)
.rdata$r:000011BC                 public ??_R4nsHebrewProber@@6B@
.rdata$r:000011BC ; const nsHebrewProber::`RTTI Complete Object Locator'
.rdata$r:000011BC ??_R4nsHebrewProber@@6B@ db    0        ; DATA XREF: .rdata:00001054o
.rdata$r:000011BD                 db    0
.rdata$r:000011BE                 db    0
.rdata$r:000011BF                 db    0
.rdata$r:000011C0                 db    0
.rdata$r:000011C1                 db    0
.rdata$r:000011C2                 db    0
.rdata$r:000011C3                 db    0
.rdata$r:000011C4                 db    0
.rdata$r:000011C5                 db    0
.rdata$r:000011C6                 db    0
.rdata$r:000011C7                 db    0
.rdata$r:000011C8                 dd offset ??_R0?AVnsHebrewProber@@@8 ; nsHebrewProber `RTTI Type Descriptor'
.rdata$r:000011CC                 dd offset ??_R3nsHebrewProber@@8 ; nsHebrewProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011CC _rdata$r        ends
.rdata$r:000011CC
.data$r:000011D0 ; ===========================================================================
.data$r:000011D0
.data$r:000011D0 ; Segment type: Pure data
.data$r:000011D0 ; Segment permissions: Read/Write
.data$r:000011D0 _data$r         segment dword public 'DATA' use32
.data$r:000011D0                 assume cs:_data$r
.data$r:000011D0                 ;org 11D0h
.data$r:000011D0 ; COMDAT (pick any)
.data$r:000011D0                 public ??_R0?AVnsHebrewProber@@@8
.data$r:000011D0 ; class nsHebrewProber `RTTI Type Descriptor'
.data$r:000011D0 ??_R0?AVnsHebrewProber@@@8 dd offset ??_7type_info@@6B@
.data$r:000011D0                                         ; DATA XREF: .rdata$r:000011C8o
.data$r:000011D0                                         ; .rdata$r:nsHebrewProber::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000011D0                                         ; const type_info::`vftable'
.data$r:000011D4                 align 8
.data$r:000011D8 a_?avnshebrewpr db '.?AVnsHebrewProber@@',0
.data$r:000011ED                 align 10h
.data$r:000011ED _data$r         ends
.data$r:000011ED
.rdata$r:000011F0 ; ===========================================================================
.rdata$r:000011F0
.rdata$r:000011F0 ; Segment type: Pure data
.rdata$r:000011F0 ; Segment permissions: Read
.rdata$r:000011F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011F0                 assume cs:_rdata$r
.rdata$r:000011F0                 ;org 11F0h
.rdata$r:000011F0 ; COMDAT (pick any)
.rdata$r:000011F0                 public ??_R3nsHebrewProber@@8
.rdata$r:000011F0 ; nsHebrewProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011F0 ??_R3nsHebrewProber@@8 db    0          ; DATA XREF: .rdata$r:000011CCo
.rdata$r:000011F0                                         ; .rdata$r:00001224o
.rdata$r:000011F1                 db    0
.rdata$r:000011F2                 db    0
.rdata$r:000011F3                 db    0
.rdata$r:000011F4                 db    0
.rdata$r:000011F5                 db    0
.rdata$r:000011F6                 db    0
.rdata$r:000011F7                 db    0
.rdata$r:000011F8                 db    2
.rdata$r:000011F9                 db    0
.rdata$r:000011FA                 db    0
.rdata$r:000011FB                 db    0
.rdata$r:000011FC                 dd offset ??_R2nsHebrewProber@@8 ; nsHebrewProber::`RTTI Base Class Array'
.rdata$r:000011FC _rdata$r        ends
.rdata$r:000011FC
.rdata$r:00001200 ; ===========================================================================
.rdata$r:00001200
.rdata$r:00001200 ; Segment type: Pure data
.rdata$r:00001200 ; Segment permissions: Read
.rdata$r:00001200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001200                 assume cs:_rdata$r
.rdata$r:00001200                 ;org 1200h
.rdata$r:00001200 ; COMDAT (pick any)
.rdata$r:00001200                 public ??_R2nsHebrewProber@@8
.rdata$r:00001200 ; nsHebrewProber::`RTTI Base Class Array'
.rdata$r:00001200 ??_R2nsHebrewProber@@8 dd offset ??_R1A@?0A@EA@nsHebrewProber@@8
.rdata$r:00001200                                         ; DATA XREF: .rdata$r:000011FCo
.rdata$r:00001200                                         ; nsHebrewProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001204                 dd offset ??_R1A@?0A@EA@nsCharSetProber@@8 ; nsCharSetProber::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001208                 db    0
.rdata$r:00001209                 align 4
.rdata$r:00001209 _rdata$r        ends
.rdata$r:00001209
.rdata$r:0000120C ; ===========================================================================
.rdata$r:0000120C
.rdata$r:0000120C ; Segment type: Pure data
.rdata$r:0000120C ; Segment permissions: Read
.rdata$r:0000120C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000120C                 assume cs:_rdata$r
.rdata$r:0000120C                 ;org 120Ch
.rdata$r:0000120C ; COMDAT (pick any)
.rdata$r:0000120C                 public ??_R1A@?0A@EA@nsHebrewProber@@8
.rdata$r:0000120C ; nsHebrewProber::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000120C ??_R1A@?0A@EA@nsHebrewProber@@8 dd offset ??_R0?AVnsHebrewProber@@@8
.rdata$r:0000120C                                         ; DATA XREF: .rdata$r:nsHebrewProber::`RTTI Base Class Array'o
.rdata$r:0000120C                                         ; nsHebrewProber `RTTI Type Descriptor'
.rdata$r:00001210                 db    1
.rdata$r:00001211                 db    0
.rdata$r:00001212                 db    0
.rdata$r:00001213                 db    0
.rdata$r:00001214                 db    0
.rdata$r:00001215                 db    0
.rdata$r:00001216                 db    0
.rdata$r:00001217                 db    0
.rdata$r:00001218                 db 0FFh
.rdata$r:00001219                 db 0FFh
.rdata$r:0000121A                 db 0FFh
.rdata$r:0000121B                 db 0FFh
.rdata$r:0000121C                 db    0
.rdata$r:0000121D                 db    0
.rdata$r:0000121E                 db    0
.rdata$r:0000121F                 db    0
.rdata$r:00001220                 db  40h ; @
.rdata$r:00001221                 db    0
.rdata$r:00001222                 db    0
.rdata$r:00001223                 db    0
.rdata$r:00001224                 dd offset ??_R3nsHebrewProber@@8 ; nsHebrewProber::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001224 _rdata$r        ends
.rdata$r:00001224
.rdata:00001228 ; ===========================================================================
.rdata:00001228
.rdata:00001228 ; Segment type: Pure data
.rdata:00001228 ; Segment permissions: Read
.rdata:00001228 _rdata          segment dword public 'DATA' use32
.rdata:00001228                 assume cs:_rdata
.rdata:00001228                 ;org 1228h
.rdata:00001228 ; COMDAT (pick any)
.rdata:00001228                 public __real@00000000
.rdata:00001228 __real@00000000 dd 0                    ; DATA XREF: nsSBCSGroupProber::GetConfidence(void)+Ar
.rdata:00001228 _rdata          ends
.rdata:00001228
.rdata:0000122C ; ===========================================================================
.rdata:0000122C
.rdata:0000122C ; Segment type: Pure data
.rdata:0000122C ; Segment permissions: Read
.rdata:0000122C _rdata          segment dword public 'DATA' use32
.rdata:0000122C                 assume cs:_rdata
.rdata:0000122C                 ;org 122Ch
.rdata:0000122C ; COMDAT (pick any)
.rdata:0000122C                 public __real@3c23d70a
.rdata:0000122C __real@3c23d70a dd 0.0099999998         ; DATA XREF: nsSBCSGroupProber::GetConfidence(void):loc_8D6r
.rdata:0000122C _rdata          ends
.rdata:0000122C
.rdata:00001230 ; ===========================================================================
.rdata:00001230
.rdata:00001230 ; Segment type: Pure data
.rdata:00001230 ; Segment permissions: Read
.rdata:00001230 _rdata          segment dword public 'DATA' use32
.rdata:00001230                 assume cs:_rdata
.rdata:00001230                 ;org 1230h
.rdata:00001230 ; COMDAT (pick any)
.rdata:00001230                 public __real@3f7d70a4
.rdata:00001230 __real@3f7d70a4 dd 0.99000001           ; DATA XREF: nsSBCSGroupProber::GetConfidence(void):loc_8CEr
.rdata:00001230 _rdata          ends
.rdata:00001230
UNDEF:00001240 ; ===========================================================================
UNDEF:00001240
UNDEF:00001240 ; Segment type: Externs
UNDEF:00001240 ; UNDEF
UNDEF:00001240                 extrn __purecall:near   ; DATA XREF: .rdata:00000FFCo
UNDEF:00001240                                         ; .rdata:00001000o ...
UNDEF:00001244 ; void *__cdecl operator new(unsigned int)
UNDEF:00001244                 extrn ??2@YAPAXI@Z:near ; CODE XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+45p
UNDEF:00001244                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+97p ...
UNDEF:00001248 ; void __cdecl operator delete(void *)
UNDEF:00001248                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$1+4p
UNDEF:00001248                                         ; __unwindfunclet$??0nsSBCSGroupProber@@QAE@XZ$2+4p ...
UNDEF:0000124C ; void __cdecl free(void *Memory)
UNDEF:0000124C                 extrn _free:near        ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+102p
UNDEF:00001250 ; bool __cdecl static nsCharSetProber::FilterWithoutEnglishLetters(const char *, unsigned int, char **, unsigned int *)
UNDEF:00001250                 extrn ?FilterWithoutEnglishLetters@nsCharSetProber@@SA_NPBDIPAPADAAI@Z:near
UNDEF:00001250                                         ; CODE XREF: nsSBCSGroupProber::HandleData(char const *,uint)+27p
UNDEF:00001254 ; public: virtual void * __thiscall nsCharSetProber::`vector deleting destructor'(unsigned int)
UNDEF:00001254                 extrn ??_EnsCharSetProber@@UAEPAXI@Z:near ; weak
UNDEF:00001254                                         ; DATA XREF: .rdata:const nsCharSetProber::`vftable'o
UNDEF:00001258 ; public: virtual char const * __thiscall nsSingleByteCharSetProber::GetCharSetName(void)
UNDEF:00001258                 extrn ?GetCharSetName@nsSingleByteCharSetProber@@UAEPBDXZ:near
UNDEF:00001258                                         ; DATA XREF: .rdata:0000101Co
UNDEF:0000125C ; public: virtual enum  nsProbingState __thiscall nsSingleByteCharSetProber::HandleData(char const *, unsigned int)
UNDEF:0000125C                 extrn ?HandleData@nsSingleByteCharSetProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:0000125C                                         ; DATA XREF: .rdata:00001020o
UNDEF:00001260 ; void __thiscall nsSingleByteCharSetProber::Reset(nsSingleByteCharSetProber *__hidden this)
UNDEF:00001260                 extrn ?Reset@nsSingleByteCharSetProber@@UAEXXZ:near
UNDEF:00001260                                         ; CODE XREF: nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *)+5Bp
UNDEF:00001260                                         ; nsSingleByteCharSetProber::nsSingleByteCharSetProber(SequenceModel const *,bool,nsCharSetProber *)+5Cp
UNDEF:00001260                                         ; DATA XREF: ...
UNDEF:00001264 ; public: virtual float __thiscall nsSingleByteCharSetProber::GetConfidence(void)
UNDEF:00001264                 extrn ?GetConfidence@nsSingleByteCharSetProber@@UAEMXZ:near
UNDEF:00001264                                         ; DATA XREF: .rdata:0000102Co
UNDEF:00001268 ; public: virtual void * __thiscall nsSingleByteCharSetProber::`vector deleting destructor'(unsigned int)
UNDEF:00001268                 extrn ??_EnsSingleByteCharSetProber@@UAEPAXI@Z:near ; weak
UNDEF:00001268                                         ; DATA XREF: .rdata:const nsSingleByteCharSetProber::`vftable'o
UNDEF:0000126C ; public: virtual void * __thiscall nsSBCSGroupProber::`vector deleting destructor'(unsigned int)
UNDEF:0000126C                 extrn ??_EnsSBCSGroupProber@@UAEPAXI@Z:near ; weak
UNDEF:0000126C                                         ; DATA XREF: .rdata:const nsSBCSGroupProber::`vftable'o
UNDEF:00001270 ; public: virtual enum  nsProbingState __thiscall nsHebrewProber::HandleData(char const *, unsigned int)
UNDEF:00001270                 extrn ?HandleData@nsHebrewProber@@UAE?AW4nsProbingState@@PBDI@Z:near
UNDEF:00001270                                         ; DATA XREF: .rdata:00001060o
UNDEF:00001274 ; public: virtual char const * __thiscall nsHebrewProber::GetCharSetName(void)
UNDEF:00001274                 extrn ?GetCharSetName@nsHebrewProber@@UAEPBDXZ:near
UNDEF:00001274                                         ; DATA XREF: .rdata:0000105Co
UNDEF:00001278 ; void __thiscall nsHebrewProber::Reset(nsHebrewProber *__hidden this)
UNDEF:00001278                 extrn ?Reset@nsHebrewProber@@UAEXXZ:near
UNDEF:00001278                                         ; CODE XREF: nsHebrewProber::nsHebrewProber(void)+55p
UNDEF:00001278                                         ; DATA XREF: .rdata:00001068o
UNDEF:0000127C ; public: virtual enum  nsProbingState __thiscall nsHebrewProber::GetState(void)
UNDEF:0000127C                 extrn ?GetState@nsHebrewProber@@UAE?AW4nsProbingState@@XZ:near
UNDEF:0000127C                                         ; DATA XREF: .rdata:00001064o
UNDEF:00001280 ; public: virtual void * __thiscall nsHebrewProber::`vector deleting destructor'(unsigned int)
UNDEF:00001280                 extrn ??_EnsHebrewProber@@UAEPAXI@Z:near ; weak
UNDEF:00001280                                         ; DATA XREF: .rdata:const nsHebrewProber::`vftable'o
UNDEF:00001284 ; __fastcall __security_check_cookie(x)
UNDEF:00001284                 extrn @__security_check_cookie@4:near
UNDEF:00001284                                         ; CODE XREF: __ehhandler$??0nsSBCSGroupProber@@QAE@XZ+Fp
UNDEF:00001284                                         ; __ehhandler$??1nsSBCSGroupProber@@UAE@XZ+Cp ...
UNDEF:00001288                 extrn ___CxxFrameHandler3:near
UNDEF:00001288                                         ; CODE XREF: __ehhandler$??0nsSBCSGroupProber@@QAE@XZ+19j
UNDEF:00001288                                         ; __ehhandler$??1nsSBCSGroupProber@@UAE@XZ+16j ...
UNDEF:0000128C ; struct SequenceModel const Koi8rModel
UNDEF:0000128C                 extrn ?Koi8rModel@@3USequenceModel@@B:near
UNDEF:0000128C                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+ACo
UNDEF:00001290 ; struct SequenceModel const Win1251Model
UNDEF:00001290                 extrn ?Win1251Model@@3USequenceModel@@B:near
UNDEF:00001290                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+5Ao
UNDEF:00001294 ; struct SequenceModel const Latin5Model
UNDEF:00001294                 extrn ?Latin5Model@@3USequenceModel@@B:near
UNDEF:00001294                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+FEo
UNDEF:00001298 ; struct SequenceModel const MacCyrillicModel
UNDEF:00001298                 extrn ?MacCyrillicModel@@3USequenceModel@@B:near
UNDEF:00001298                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+14Fo
UNDEF:0000129C ; struct SequenceModel const Ibm866Model
UNDEF:0000129C                 extrn ?Ibm866Model@@3USequenceModel@@B:near
UNDEF:0000129C                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+1A1o
UNDEF:000012A0 ; struct SequenceModel const Ibm855Model
UNDEF:000012A0                 extrn ?Ibm855Model@@3USequenceModel@@B:near
UNDEF:000012A0                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+1F9o
UNDEF:000012A4 ; struct SequenceModel const Latin7Model
UNDEF:000012A4                 extrn ?Latin7Model@@3USequenceModel@@B:near
UNDEF:000012A4                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+254o
UNDEF:000012A8 ; struct SequenceModel const Win1253Model
UNDEF:000012A8                 extrn ?Win1253Model@@3USequenceModel@@B:near
UNDEF:000012A8                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2A9o
UNDEF:000012AC ; struct SequenceModel const Latin5BulgarianModel
UNDEF:000012AC                 extrn ?Latin5BulgarianModel@@3USequenceModel@@B:near
UNDEF:000012AC                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+2FBo
UNDEF:000012B0 ; struct SequenceModel const Win1251BulgarianModel
UNDEF:000012B0                 extrn ?Win1251BulgarianModel@@3USequenceModel@@B:near
UNDEF:000012B0                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+353o
UNDEF:000012B4 ; struct SequenceModel const Win1255Model
UNDEF:000012B4                 extrn ?Win1255Model@@3USequenceModel@@B:near
UNDEF:000012B4                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+453o
UNDEF:000012B4                                         ; nsSBCSGroupProber::nsSBCSGroupProber(void)+4ABo
UNDEF:000012B8 ; struct SequenceModel const TIS620ThaiModel
UNDEF:000012B8                 extrn ?TIS620ThaiModel@@3USequenceModel@@B:near
UNDEF:000012B8                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+3A8o
UNDEF:000012BC ; const type_info::`vftable'
UNDEF:000012BC                 extrn ??_7type_info@@6B@:near
UNDEF:000012BC                                         ; DATA XREF: .data$r:nsCharSetProber `RTTI Type Descriptor'o
UNDEF:000012BC                                         ; .data$r:nsSingleByteCharSetProber `RTTI Type Descriptor'o ...
UNDEF:000012C0                 extrn ___security_cookie:near
UNDEF:000012C0                                         ; DATA XREF: nsSBCSGroupProber::nsSBCSGroupProber(void)+17r
UNDEF:000012C0                                         ; nsSBCSGroupProber::~nsSBCSGroupProber(void)+14r ...
UNDEF:000012C4                 extrn __fltused:near
UNDEF:000012C4
UNDEF:000012C4
UNDEF:000012C4                 end