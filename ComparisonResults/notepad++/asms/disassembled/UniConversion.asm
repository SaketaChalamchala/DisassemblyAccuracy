.text$mn:00000000 ;
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text$mn:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text$mn:00000000 ; |                      License info: 48-3677-7074-51                      |
.text$mn:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text$mn:00000000 ; +-------------------------------------------------------------------------+
.text$mn:00000000 ;
.text$mn:00000000 ; Input MD5   : 2C1EA935BD2D2AE6C6F4DD8BF03B354E
.text$mn:00000000 ; Input CRC32 : A37C626F
.text$mn:00000000
.text$mn:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\UniConversion.obj
.text$mn:00000000 ; Format      : COFF (X386MAGIC)
.text$mn:00000000 ; includelib "uuid.lib"
.text$mn:00000000 ; includelib "LIBCMTD"
.text$mn:00000000 ; includelib "OLDNAMES"
.text$mn:00000000
.text$mn:00000000                 .686p
.text$mn:00000000                 .mmx
.text$mn:00000000                 .model flat
.text$mn:00000000
.text$mn:00000000 ; ===========================================================================
.text$mn:00000000
.text$mn:00000000 ; Segment type: Pure code
.text$mn:00000000 ; Segment permissions: Read/Execute
.text$mn:00000000 _text$mn        segment para public 'CODE' use32
.text$mn:00000000                 assume cs:_text$mn
.text$mn:00000000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
.text$mn:00000000
.text$mn:00000000 ; =============== S U B R O U T I N E =======================================
.text$mn:00000000
.text$mn:00000000 ; Attributes: bp-based frame
.text$mn:00000000
.text$mn:00000000 ; unsigned int __cdecl UTF8Length(const wchar_t *, unsigned int)
.text$mn:00000000                 public ?UTF8Length@@YAIPB_WI@Z
.text$mn:00000000 ?UTF8Length@@YAIPB_WI@Z proc near       ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+92p
.text$mn:00000000
.text$mn:00000000 var_C           = dword ptr -0Ch
.text$mn:00000000 var_8           = dword ptr -8
.text$mn:00000000 var_4           = dword ptr -4
.text$mn:00000000 arg_0           = dword ptr  8
.text$mn:00000000 arg_4           = dword ptr  0Ch
.text$mn:00000000
.text$mn:00000000                 push    ebp
.text$mn:00000001                 mov     ebp, esp
.text$mn:00000003                 sub     esp, 0Ch
.text$mn:00000006                 mov     [ebp+var_4], 0
.text$mn:0000000D                 mov     [ebp+var_8], 0
.text$mn:00000014                 jmp     short loc_1F
.text$mn:00000016 ; ---------------------------------------------------------------------------
.text$mn:00000016
.text$mn:00000016 loc_16:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint):loc_73j
.text$mn:00000016                 mov     eax, [ebp+var_8]
.text$mn:00000019                 add     eax, 1
.text$mn:0000001C                 mov     [ebp+var_8], eax
.text$mn:0000001F
.text$mn:0000001F loc_1F:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint)+14j
.text$mn:0000001F                 mov     ecx, [ebp+var_8]
.text$mn:00000022                 cmp     ecx, [ebp+arg_4]
.text$mn:00000025                 jnb     short loc_75
.text$mn:00000027                 mov     edx, [ebp+var_8]
.text$mn:0000002A                 mov     eax, [ebp+arg_0]
.text$mn:0000002D                 movzx   ecx, word ptr [eax+edx*2]
.text$mn:00000031                 test    ecx, ecx
.text$mn:00000033                 jz      short loc_75
.text$mn:00000035                 mov     edx, [ebp+var_8]
.text$mn:00000038                 mov     eax, [ebp+arg_0]
.text$mn:0000003B                 movzx   ecx, word ptr [eax+edx*2]
.text$mn:0000003F                 mov     [ebp+var_C], ecx
.text$mn:00000042                 cmp     [ebp+var_C], 80h ; 'Ç'
.text$mn:00000049                 jnb     short loc_56
.text$mn:0000004B                 mov     edx, [ebp+var_4]
.text$mn:0000004E                 add     edx, 1
.text$mn:00000051                 mov     [ebp+var_4], edx
.text$mn:00000054                 jmp     short loc_73
.text$mn:00000056 ; ---------------------------------------------------------------------------
.text$mn:00000056
.text$mn:00000056 loc_56:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint)+49j
.text$mn:00000056                 cmp     [ebp+var_C], 800h
.text$mn:0000005D                 jnb     short loc_6A
.text$mn:0000005F                 mov     eax, [ebp+var_4]
.text$mn:00000062                 add     eax, 2
.text$mn:00000065                 mov     [ebp+var_4], eax
.text$mn:00000068                 jmp     short loc_73
.text$mn:0000006A ; ---------------------------------------------------------------------------
.text$mn:0000006A
.text$mn:0000006A loc_6A:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint)+5Dj
.text$mn:0000006A                 mov     ecx, [ebp+var_4]
.text$mn:0000006D                 add     ecx, 3
.text$mn:00000070                 mov     [ebp+var_4], ecx
.text$mn:00000073
.text$mn:00000073 loc_73:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint)+54j
.text$mn:00000073                                         ; UTF8Length(wchar_t const *,uint)+68j
.text$mn:00000073                 jmp     short loc_16
.text$mn:00000075 ; ---------------------------------------------------------------------------
.text$mn:00000075
.text$mn:00000075 loc_75:                                 ; CODE XREF: UTF8Length(wchar_t const *,uint)+25j
.text$mn:00000075                                         ; UTF8Length(wchar_t const *,uint)+33j
.text$mn:00000075                 mov     eax, [ebp+var_4]
.text$mn:00000078                 mov     esp, ebp
.text$mn:0000007A                 pop     ebp
.text$mn:0000007B                 retn
.text$mn:0000007B ?UTF8Length@@YAIPB_WI@Z endp
.text$mn:0000007B
.text$mn:0000007B ; ---------------------------------------------------------------------------
.text$mn:0000007C                 align 10h
.text$mn:00000080
.text$mn:00000080 ; =============== S U B R O U T I N E =======================================
.text$mn:00000080
.text$mn:00000080 ; Attributes: bp-based frame
.text$mn:00000080
.text$mn:00000080 ; void __cdecl UTF8FromUCS2(const wchar_t *, unsigned int, char *, unsigned int)
.text$mn:00000080                 public ?UTF8FromUCS2@@YAXPB_WIPADI@Z
.text$mn:00000080 ?UTF8FromUCS2@@YAXPB_WIPADI@Z proc near ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+ADp
.text$mn:00000080
.text$mn:00000080 var_C           = dword ptr -0Ch
.text$mn:00000080 var_8           = dword ptr -8
.text$mn:00000080 var_4           = dword ptr -4
.text$mn:00000080 arg_0           = dword ptr  8
.text$mn:00000080 arg_4           = dword ptr  0Ch
.text$mn:00000080 arg_8           = dword ptr  10h
.text$mn:00000080 arg_C           = dword ptr  14h
.text$mn:00000080
.text$mn:00000080                 push    ebp
.text$mn:00000081                 mov     ebp, esp
.text$mn:00000083                 sub     esp, 0Ch
.text$mn:00000086                 mov     [ebp+var_4], 0
.text$mn:0000008D                 mov     [ebp+var_C], 0
.text$mn:00000094                 jmp     short loc_9F
.text$mn:00000096 ; ---------------------------------------------------------------------------
.text$mn:00000096
.text$mn:00000096 loc_96:                                 ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint):loc_18Bj
.text$mn:00000096                 mov     eax, [ebp+var_C]
.text$mn:00000099                 add     eax, 1
.text$mn:0000009C                 mov     [ebp+var_C], eax
.text$mn:0000009F
.text$mn:0000009F loc_9F:                                 ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint)+14j
.text$mn:0000009F                 mov     ecx, [ebp+var_C]
.text$mn:000000A2                 cmp     ecx, [ebp+arg_4]
.text$mn:000000A5                 jnb     loc_190
.text$mn:000000AB                 mov     edx, [ebp+var_C]
.text$mn:000000AE                 mov     eax, [ebp+arg_0]
.text$mn:000000B1                 movzx   ecx, word ptr [eax+edx*2]
.text$mn:000000B5                 test    ecx, ecx
.text$mn:000000B7                 jz      loc_190
.text$mn:000000BD                 mov     edx, [ebp+var_C]
.text$mn:000000C0                 mov     eax, [ebp+arg_0]
.text$mn:000000C3                 movzx   ecx, word ptr [eax+edx*2]
.text$mn:000000C7                 mov     [ebp+var_8], ecx
.text$mn:000000CA                 cmp     [ebp+var_8], 80h ; 'Ç'
.text$mn:000000D1                 jnb     short loc_EC
.text$mn:000000D3                 mov     edx, [ebp+arg_8]
.text$mn:000000D6                 add     edx, [ebp+var_4]
.text$mn:000000D9                 mov     al, byte ptr [ebp+var_8]
.text$mn:000000DC                 mov     [edx], al
.text$mn:000000DE                 mov     ecx, [ebp+var_4]
.text$mn:000000E1                 add     ecx, 1
.text$mn:000000E4                 mov     [ebp+var_4], ecx
.text$mn:000000E7                 jmp     loc_18B
.text$mn:000000EC ; ---------------------------------------------------------------------------
.text$mn:000000EC
.text$mn:000000EC loc_EC:                                 ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint)+51j
.text$mn:000000EC                 cmp     [ebp+var_8], 800h
.text$mn:000000F3                 jnb     short loc_131
.text$mn:000000F5                 mov     edx, [ebp+var_8]
.text$mn:000000F8                 shr     edx, 6
.text$mn:000000FB                 or      edx, 0C0h
.text$mn:00000101                 mov     eax, [ebp+arg_8]
.text$mn:00000104                 add     eax, [ebp+var_4]
.text$mn:00000107                 mov     [eax], dl
.text$mn:00000109                 mov     ecx, [ebp+var_4]
.text$mn:0000010C                 add     ecx, 1
.text$mn:0000010F                 mov     [ebp+var_4], ecx
.text$mn:00000112                 mov     edx, [ebp+var_8]
.text$mn:00000115                 and     edx, 3Fh
.text$mn:00000118                 or      edx, 80h
.text$mn:0000011E                 mov     eax, [ebp+arg_8]
.text$mn:00000121                 add     eax, [ebp+var_4]
.text$mn:00000124                 mov     [eax], dl
.text$mn:00000126                 mov     ecx, [ebp+var_4]
.text$mn:00000129                 add     ecx, 1
.text$mn:0000012C                 mov     [ebp+var_4], ecx
.text$mn:0000012F                 jmp     short loc_18B
.text$mn:00000131 ; ---------------------------------------------------------------------------
.text$mn:00000131
.text$mn:00000131 loc_131:                                ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint)+73j
.text$mn:00000131                 mov     edx, [ebp+var_8]
.text$mn:00000134                 shr     edx, 0Ch
.text$mn:00000137                 or      edx, 0E0h
.text$mn:0000013D                 mov     eax, [ebp+arg_8]
.text$mn:00000140                 add     eax, [ebp+var_4]
.text$mn:00000143                 mov     [eax], dl
.text$mn:00000145                 mov     ecx, [ebp+var_4]
.text$mn:00000148                 add     ecx, 1
.text$mn:0000014B                 mov     [ebp+var_4], ecx
.text$mn:0000014E                 mov     edx, [ebp+var_8]
.text$mn:00000151                 shr     edx, 6
.text$mn:00000154                 and     edx, 3Fh
.text$mn:00000157                 or      edx, 80h
.text$mn:0000015D                 mov     eax, [ebp+arg_8]
.text$mn:00000160                 add     eax, [ebp+var_4]
.text$mn:00000163                 mov     [eax], dl
.text$mn:00000165                 mov     ecx, [ebp+var_4]
.text$mn:00000168                 add     ecx, 1
.text$mn:0000016B                 mov     [ebp+var_4], ecx
.text$mn:0000016E                 mov     edx, [ebp+var_8]
.text$mn:00000171                 and     edx, 3Fh
.text$mn:00000174                 or      edx, 80h
.text$mn:0000017A                 mov     eax, [ebp+arg_8]
.text$mn:0000017D                 add     eax, [ebp+var_4]
.text$mn:00000180                 mov     [eax], dl
.text$mn:00000182                 mov     ecx, [ebp+var_4]
.text$mn:00000185                 add     ecx, 1
.text$mn:00000188                 mov     [ebp+var_4], ecx
.text$mn:0000018B
.text$mn:0000018B loc_18B:                                ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint)+67j
.text$mn:0000018B                                         ; UTF8FromUCS2(wchar_t const *,uint,char *,uint)+AFj
.text$mn:0000018B                 jmp     loc_96
.text$mn:00000190 ; ---------------------------------------------------------------------------
.text$mn:00000190
.text$mn:00000190 loc_190:                                ; CODE XREF: UTF8FromUCS2(wchar_t const *,uint,char *,uint)+25j
.text$mn:00000190                                         ; UTF8FromUCS2(wchar_t const *,uint,char *,uint)+37j
.text$mn:00000190                 mov     edx, [ebp+arg_8]
.text$mn:00000193                 add     edx, [ebp+arg_C]
.text$mn:00000196                 mov     byte ptr [edx], 0
.text$mn:00000199                 mov     esp, ebp
.text$mn:0000019B                 pop     ebp
.text$mn:0000019C                 retn
.text$mn:0000019C ?UTF8FromUCS2@@YAXPB_WIPADI@Z endp
.text$mn:0000019C
.text$mn:0000019C ; ---------------------------------------------------------------------------
.text$mn:0000019D                 align 10h
.text$mn:000001A0
.text$mn:000001A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000001A0
.text$mn:000001A0 ; Attributes: bp-based frame
.text$mn:000001A0
.text$mn:000001A0 ; unsigned int __cdecl UCS2Length(const char *, unsigned int)
.text$mn:000001A0                 public ?UCS2Length@@YAIPBDI@Z
.text$mn:000001A0 ?UCS2Length@@YAIPBDI@Z proc near
.text$mn:000001A0
.text$mn:000001A0 var_C           = dword ptr -0Ch
.text$mn:000001A0 var_8           = dword ptr -8
.text$mn:000001A0 var_1           = byte ptr -1
.text$mn:000001A0 arg_0           = dword ptr  8
.text$mn:000001A0 arg_4           = dword ptr  0Ch
.text$mn:000001A0
.text$mn:000001A0                 push    ebp
.text$mn:000001A1                 mov     ebp, esp
.text$mn:000001A3                 sub     esp, 0Ch
.text$mn:000001A6                 mov     [ebp+var_C], 0
.text$mn:000001AD                 mov     [ebp+var_8], 0
.text$mn:000001B4                 jmp     short loc_1BF
.text$mn:000001B6 ; ---------------------------------------------------------------------------
.text$mn:000001B6
.text$mn:000001B6 loc_1B6:                                ; CODE XREF: UCS2Length(char const *,uint):loc_1F3j
.text$mn:000001B6                 mov     eax, [ebp+var_8]
.text$mn:000001B9                 add     eax, 1
.text$mn:000001BC                 mov     [ebp+var_8], eax
.text$mn:000001BF
.text$mn:000001BF loc_1BF:                                ; CODE XREF: UCS2Length(char const *,uint)+14j
.text$mn:000001BF                 mov     ecx, [ebp+var_8]
.text$mn:000001C2                 cmp     ecx, [ebp+arg_4]
.text$mn:000001C5                 jnb     short loc_1F5
.text$mn:000001C7                 mov     edx, [ebp+arg_0]
.text$mn:000001CA                 add     edx, [ebp+var_8]
.text$mn:000001CD                 mov     al, [edx]
.text$mn:000001CF                 mov     [ebp+var_1], al
.text$mn:000001D2                 movzx   ecx, [ebp+var_1]
.text$mn:000001D6                 cmp     ecx, 80h ; 'Ç'
.text$mn:000001DC                 jl      short loc_1EA
.text$mn:000001DE                 movzx   edx, [ebp+var_1]
.text$mn:000001E2                 cmp     edx, 0C0h ; '+'
.text$mn:000001E8                 jle     short loc_1F3
.text$mn:000001EA
.text$mn:000001EA loc_1EA:                                ; CODE XREF: UCS2Length(char const *,uint)+3Cj
.text$mn:000001EA                 mov     eax, [ebp+var_C]
.text$mn:000001ED                 add     eax, 1
.text$mn:000001F0                 mov     [ebp+var_C], eax
.text$mn:000001F3
.text$mn:000001F3 loc_1F3:                                ; CODE XREF: UCS2Length(char const *,uint)+48j
.text$mn:000001F3                 jmp     short loc_1B6
.text$mn:000001F5 ; ---------------------------------------------------------------------------
.text$mn:000001F5
.text$mn:000001F5 loc_1F5:                                ; CODE XREF: UCS2Length(char const *,uint)+25j
.text$mn:000001F5                 mov     eax, [ebp+var_C]
.text$mn:000001F8                 mov     esp, ebp
.text$mn:000001FA                 pop     ebp
.text$mn:000001FB                 retn
.text$mn:000001FB ?UCS2Length@@YAIPBDI@Z endp
.text$mn:000001FB
.text$mn:000001FB ; ---------------------------------------------------------------------------
.text$mn:000001FC                 align 10h
.text$mn:00000200
.text$mn:00000200 ; =============== S U B R O U T I N E =======================================
.text$mn:00000200
.text$mn:00000200 ; Attributes: bp-based frame
.text$mn:00000200
.text$mn:00000200 ; unsigned int __cdecl UCS2FromUTF8(const char *, unsigned int, wchar_t *, unsigned int)
.text$mn:00000200                 public ?UCS2FromUTF8@@YAIPBDIPA_WI@Z
.text$mn:00000200 ?UCS2FromUTF8@@YAIPBDIPA_WI@Z proc near ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+79p
.text$mn:00000200
.text$mn:00000200 var_10          = dword ptr -10h
.text$mn:00000200 var_C           = dword ptr -0Ch
.text$mn:00000200 var_8           = dword ptr -8
.text$mn:00000200 var_1           = byte ptr -1
.text$mn:00000200 arg_0           = dword ptr  8
.text$mn:00000200 arg_4           = dword ptr  0Ch
.text$mn:00000200 arg_8           = dword ptr  10h
.text$mn:00000200 arg_C           = dword ptr  14h
.text$mn:00000200
.text$mn:00000200                 push    ebp
.text$mn:00000201                 mov     ebp, esp
.text$mn:00000203                 sub     esp, 10h
.text$mn:00000206                 mov     [ebp+var_C], 0
.text$mn:0000020D                 mov     eax, [ebp+arg_0]
.text$mn:00000210                 mov     [ebp+var_10], eax
.text$mn:00000213                 mov     [ebp+var_8], 0
.text$mn:0000021A
.text$mn:0000021A loc_21A:                                ; CODE XREF: UCS2FromUTF8(char const *,uint,wchar_t *,uint)+13Aj
.text$mn:0000021A                 mov     ecx, [ebp+var_8]
.text$mn:0000021D                 cmp     ecx, [ebp+arg_4]
.text$mn:00000220                 jnb     loc_33F
.text$mn:00000226                 mov     edx, [ebp+var_C]
.text$mn:00000229                 cmp     edx, [ebp+arg_C]
.text$mn:0000022C                 jnb     loc_33F
.text$mn:00000232                 mov     eax, [ebp+var_10]
.text$mn:00000235                 add     eax, [ebp+var_8]
.text$mn:00000238                 mov     cl, [eax]
.text$mn:0000023A                 mov     [ebp+var_1], cl
.text$mn:0000023D                 mov     edx, [ebp+var_8]
.text$mn:00000240                 add     edx, 1
.text$mn:00000243                 mov     [ebp+var_8], edx
.text$mn:00000246                 movzx   eax, [ebp+var_1]
.text$mn:0000024A                 cmp     eax, 80h ; 'Ç'
.text$mn:0000024F                 jge     short loc_265
.text$mn:00000251                 movzx   cx, [ebp+var_1]
.text$mn:00000256                 mov     edx, [ebp+var_C]
.text$mn:00000259                 mov     eax, [ebp+arg_8]
.text$mn:0000025C                 mov     [eax+edx*2], cx
.text$mn:00000260                 jmp     loc_331
.text$mn:00000265 ; ---------------------------------------------------------------------------
.text$mn:00000265
.text$mn:00000265 loc_265:                                ; CODE XREF: UCS2FromUTF8(char const *,uint,wchar_t *,uint)+4Fj
.text$mn:00000265                 movzx   ecx, [ebp+var_1]
.text$mn:00000269                 cmp     ecx, 0E0h ; 'a'
.text$mn:0000026F                 jge     short loc_2B8
.text$mn:00000271                 movzx   edx, [ebp+var_1]
.text$mn:00000275                 and     edx, 1Fh
.text$mn:00000278                 shl     edx, 6
.text$mn:0000027B                 mov     eax, [ebp+var_C]
.text$mn:0000027E                 mov     ecx, [ebp+arg_8]
.text$mn:00000281                 mov     [ecx+eax*2], dx
.text$mn:00000285                 mov     edx, [ebp+var_10]
.text$mn:00000288                 add     edx, [ebp+var_8]
.text$mn:0000028B                 mov     al, [edx]
.text$mn:0000028D                 mov     [ebp+var_1], al
.text$mn:00000290                 mov     ecx, [ebp+var_8]
.text$mn:00000293                 add     ecx, 1
.text$mn:00000296                 mov     [ebp+var_8], ecx
.text$mn:00000299                 mov     edx, [ebp+var_C]
.text$mn:0000029C                 mov     eax, [ebp+arg_8]
.text$mn:0000029F                 movzx   ecx, word ptr [eax+edx*2]
.text$mn:000002A3                 movzx   edx, [ebp+var_1]
.text$mn:000002A7                 and     edx, 7Fh
.text$mn:000002AA                 add     ecx, edx
.text$mn:000002AC                 mov     eax, [ebp+var_C]
.text$mn:000002AF                 mov     edx, [ebp+arg_8]
.text$mn:000002B2                 mov     [edx+eax*2], cx
.text$mn:000002B6                 jmp     short loc_331
.text$mn:000002B8 ; ---------------------------------------------------------------------------
.text$mn:000002B8
.text$mn:000002B8 loc_2B8:                                ; CODE XREF: UCS2FromUTF8(char const *,uint,wchar_t *,uint)+6Fj
.text$mn:000002B8                 movzx   eax, [ebp+var_1]
.text$mn:000002BC                 and     eax, 0Fh
.text$mn:000002BF                 shl     eax, 0Ch
.text$mn:000002C2                 mov     ecx, [ebp+var_C]
.text$mn:000002C5                 mov     edx, [ebp+arg_8]
.text$mn:000002C8                 mov     [edx+ecx*2], ax
.text$mn:000002CC                 mov     eax, [ebp+var_10]
.text$mn:000002CF                 add     eax, [ebp+var_8]
.text$mn:000002D2                 mov     cl, [eax]
.text$mn:000002D4                 mov     [ebp+var_1], cl
.text$mn:000002D7                 mov     edx, [ebp+var_8]
.text$mn:000002DA                 add     edx, 1
.text$mn:000002DD                 mov     [ebp+var_8], edx
.text$mn:000002E0                 mov     eax, [ebp+var_C]
.text$mn:000002E3                 mov     ecx, [ebp+arg_8]
.text$mn:000002E6                 movzx   edx, word ptr [ecx+eax*2]
.text$mn:000002EA                 movzx   eax, [ebp+var_1]
.text$mn:000002EE                 and     eax, 7Fh
.text$mn:000002F1                 shl     eax, 6
.text$mn:000002F4                 add     edx, eax
.text$mn:000002F6                 mov     ecx, [ebp+var_C]
.text$mn:000002F9                 mov     eax, [ebp+arg_8]
.text$mn:000002FC                 mov     [eax+ecx*2], dx
.text$mn:00000300                 mov     ecx, [ebp+var_10]
.text$mn:00000303                 add     ecx, [ebp+var_8]
.text$mn:00000306                 mov     dl, [ecx]
.text$mn:00000308                 mov     [ebp+var_1], dl
.text$mn:0000030B                 mov     eax, [ebp+var_8]
.text$mn:0000030E                 add     eax, 1
.text$mn:00000311                 mov     [ebp+var_8], eax
.text$mn:00000314                 mov     ecx, [ebp+var_C]
.text$mn:00000317                 mov     edx, [ebp+arg_8]
.text$mn:0000031A                 movzx   eax, word ptr [edx+ecx*2]
.text$mn:0000031E                 movzx   ecx, [ebp+var_1]
.text$mn:00000322                 and     ecx, 7Fh
.text$mn:00000325                 add     eax, ecx
.text$mn:00000327                 mov     edx, [ebp+var_C]
.text$mn:0000032A                 mov     ecx, [ebp+arg_8]
.text$mn:0000032D                 mov     [ecx+edx*2], ax
.text$mn:00000331
.text$mn:00000331 loc_331:                                ; CODE XREF: UCS2FromUTF8(char const *,uint,wchar_t *,uint)+60j
.text$mn:00000331                                         ; UCS2FromUTF8(char const *,uint,wchar_t *,uint)+B6j
.text$mn:00000331                 mov     edx, [ebp+var_C]
.text$mn:00000334                 add     edx, 1
.text$mn:00000337                 mov     [ebp+var_C], edx
.text$mn:0000033A                 jmp     loc_21A
.text$mn:0000033F ; ---------------------------------------------------------------------------
.text$mn:0000033F
.text$mn:0000033F loc_33F:                                ; CODE XREF: UCS2FromUTF8(char const *,uint,wchar_t *,uint)+20j
.text$mn:0000033F                                         ; UCS2FromUTF8(char const *,uint,wchar_t *,uint)+2Cj
.text$mn:0000033F                 mov     eax, [ebp+var_C]
.text$mn:00000342                 mov     esp, ebp
.text$mn:00000344                 pop     ebp
.text$mn:00000345                 retn
.text$mn:00000345 ?UCS2FromUTF8@@YAIPBDIPA_WI@Z endp
.text$mn:00000345
.text$mn:00000345 ; ---------------------------------------------------------------------------
.text$mn:00000346                 align 10h
.text$mn:00000350
.text$mn:00000350 ; =============== S U B R O U T I N E =======================================
.text$mn:00000350
.text$mn:00000350 ; Attributes: bp-based frame
.text$mn:00000350
.text$mn:00000350 ; unsigned int __cdecl ascii_to_utf8(LPCSTR lpMultiByteStr, unsigned int cbMultiByte, char *)
.text$mn:00000350                 public ?ascii_to_utf8@@YAIPBDIPAD@Z
.text$mn:00000350 ?ascii_to_utf8@@YAIPBDIPAD@Z proc near
.text$mn:00000350
.text$mn:00000350 var_14          = dword ptr -14h
.text$mn:00000350 var_10          = dword ptr -10h
.text$mn:00000350 var_C           = dword ptr -0Ch
.text$mn:00000350 var_8           = dword ptr -8
.text$mn:00000350 lpWideCharStr   = dword ptr -4
.text$mn:00000350 lpMultiByteStr  = dword ptr  8
.text$mn:00000350 cbMultiByte     = dword ptr  0Ch
.text$mn:00000350 arg_8           = dword ptr  10h
.text$mn:00000350
.text$mn:00000350                 push    ebp
.text$mn:00000351                 mov     ebp, esp
.text$mn:00000353                 sub     esp, 14h
.text$mn:00000356                 cmp     [ebp+cbMultiByte], 0
.text$mn:0000035A                 jz      short loc_362
.text$mn:0000035C                 cmp     [ebp+lpMultiByteStr], 0
.text$mn:00000360                 jnz     short loc_378
.text$mn:00000362
.text$mn:00000362 loc_362:                                ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+Aj
.text$mn:00000362                 mov     eax, 1
.text$mn:00000367                 imul    ecx, eax, 0
.text$mn:0000036A                 mov     edx, [ebp+arg_8]
.text$mn:0000036D                 mov     byte ptr [edx+ecx], 0
.text$mn:00000371                 xor     eax, eax
.text$mn:00000373                 jmp     loc_41A
.text$mn:00000378 ; ---------------------------------------------------------------------------
.text$mn:00000378
.text$mn:00000378 loc_378:                                ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+10j
.text$mn:00000378                 imul    eax, [ebp+cbMultiByte], 3
.text$mn:0000037C                 add     eax, 1
.text$mn:0000037F                 xor     ecx, ecx
.text$mn:00000381                 mov     edx, 2
.text$mn:00000386                 mul     edx
.text$mn:00000388                 seto    cl
.text$mn:0000038B                 neg     ecx
.text$mn:0000038D                 or      ecx, eax
.text$mn:0000038F                 push    ecx             ; unsigned int
.text$mn:00000390                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000395                 add     esp, 4
.text$mn:00000398                 mov     [ebp+var_10], eax
.text$mn:0000039B                 mov     eax, [ebp+var_10]
.text$mn:0000039E                 mov     [ebp+lpWideCharStr], eax
.text$mn:000003A1                 cmp     [ebp+lpWideCharStr], 0
.text$mn:000003A5                 jnz     short loc_3BA
.text$mn:000003A7                 mov     ecx, 1
.text$mn:000003AC                 imul    edx, ecx, 0
.text$mn:000003AF                 mov     eax, [ebp+arg_8]
.text$mn:000003B2                 mov     byte ptr [eax+edx], 0
.text$mn:000003B6                 xor     eax, eax
.text$mn:000003B8                 jmp     short loc_41A
.text$mn:000003BA ; ---------------------------------------------------------------------------
.text$mn:000003BA
.text$mn:000003BA loc_3BA:                                ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+55j
.text$mn:000003BA                 mov     ecx, [ebp+cbMultiByte]
.text$mn:000003BD                 add     ecx, 1
.text$mn:000003C0                 push    ecx             ; cchWideChar
.text$mn:000003C1                 mov     edx, [ebp+lpWideCharStr]
.text$mn:000003C4                 push    edx             ; lpWideCharStr
.text$mn:000003C5                 mov     eax, [ebp+cbMultiByte]
.text$mn:000003C8                 push    eax             ; cbMultiByte
.text$mn:000003C9                 mov     ecx, [ebp+lpMultiByteStr]
.text$mn:000003CC                 push    ecx             ; lpMultiByteStr
.text$mn:000003CD                 push    0               ; dwFlags
.text$mn:000003CF                 push    0               ; CodePage
.text$mn:000003D1                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text$mn:000003D7                 mov     [ebp+var_8], eax
.text$mn:000003DA                 mov     edx, [ebp+var_8]
.text$mn:000003DD                 push    edx             ; unsigned int
.text$mn:000003DE                 mov     eax, [ebp+lpWideCharStr]
.text$mn:000003E1                 push    eax             ; wchar_t *
.text$mn:000003E2                 call    ?UTF8Length@@YAIPB_WI@Z ; UTF8Length(wchar_t const *,uint)
.text$mn:000003E7                 add     esp, 8
.text$mn:000003EA                 mov     [ebp+var_C], eax
.text$mn:000003ED                 mov     ecx, [ebp+var_C]
.text$mn:000003F0                 push    ecx             ; unsigned int
.text$mn:000003F1                 mov     edx, [ebp+arg_8]
.text$mn:000003F4                 push    edx             ; char *
.text$mn:000003F5                 mov     eax, [ebp+var_8]
.text$mn:000003F8                 push    eax             ; unsigned int
.text$mn:000003F9                 mov     ecx, [ebp+lpWideCharStr]
.text$mn:000003FC                 push    ecx             ; wchar_t *
.text$mn:000003FD                 call    ?UTF8FromUCS2@@YAXPB_WIPADI@Z ; UTF8FromUCS2(wchar_t const *,uint,char *,uint)
.text$mn:00000402                 add     esp, 10h
.text$mn:00000405                 mov     edx, [ebp+lpWideCharStr]
.text$mn:00000408                 mov     [ebp+var_14], edx
.text$mn:0000040B                 mov     eax, [ebp+var_14]
.text$mn:0000040E                 push    eax             ; void *
.text$mn:0000040F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00000414                 add     esp, 4
.text$mn:00000417                 mov     eax, [ebp+var_C]
.text$mn:0000041A
.text$mn:0000041A loc_41A:                                ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+23j
.text$mn:0000041A                                         ; ascii_to_utf8(char const *,uint,char *)+68j
.text$mn:0000041A                 mov     esp, ebp
.text$mn:0000041C                 pop     ebp
.text$mn:0000041D                 retn
.text$mn:0000041D ?ascii_to_utf8@@YAIPBDIPAD@Z endp
.text$mn:0000041D
.text$mn:0000041D ; ---------------------------------------------------------------------------
.text$mn:0000041E                 align 10h
.text$mn:00000420
.text$mn:00000420 ; =============== S U B R O U T I N E =======================================
.text$mn:00000420
.text$mn:00000420 ; Attributes: bp-based frame
.text$mn:00000420
.text$mn:00000420 ; int __cdecl utf8_to_ascii(const char *, unsigned int, LPSTR lpMultiByteStr)
.text$mn:00000420                 public ?utf8_to_ascii@@YAHPBDIPAD@Z
.text$mn:00000420 ?utf8_to_ascii@@YAHPBDIPAD@Z proc near
.text$mn:00000420
.text$mn:00000420 var_14          = dword ptr -14h
.text$mn:00000420 var_10          = dword ptr -10h
.text$mn:00000420 var_C           = dword ptr -0Ch
.text$mn:00000420 cchWideChar     = dword ptr -8
.text$mn:00000420 lpWideCharStr   = dword ptr -4
.text$mn:00000420 arg_0           = dword ptr  8
.text$mn:00000420 arg_4           = dword ptr  0Ch
.text$mn:00000420 lpMultiByteStr  = dword ptr  10h
.text$mn:00000420
.text$mn:00000420                 push    ebp
.text$mn:00000421                 mov     ebp, esp
.text$mn:00000423                 sub     esp, 14h
.text$mn:00000426                 cmp     [ebp+arg_4], 0
.text$mn:0000042A                 jz      short loc_432
.text$mn:0000042C                 cmp     [ebp+arg_0], 0
.text$mn:00000430                 jnz     short loc_448
.text$mn:00000432
.text$mn:00000432 loc_432:                                ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+Aj
.text$mn:00000432                 mov     eax, 1
.text$mn:00000437                 imul    ecx, eax, 0
.text$mn:0000043A                 mov     edx, [ebp+lpMultiByteStr]
.text$mn:0000043D                 mov     byte ptr [edx+ecx], 0
.text$mn:00000441                 xor     eax, eax
.text$mn:00000443                 jmp     loc_4E9
.text$mn:00000448 ; ---------------------------------------------------------------------------
.text$mn:00000448
.text$mn:00000448 loc_448:                                ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+10j
.text$mn:00000448                 mov     eax, [ebp+arg_4]
.text$mn:0000044B                 add     eax, 1
.text$mn:0000044E                 xor     ecx, ecx
.text$mn:00000450                 mov     edx, 2
.text$mn:00000455                 mul     edx
.text$mn:00000457                 seto    cl
.text$mn:0000045A                 neg     ecx
.text$mn:0000045C                 or      ecx, eax
.text$mn:0000045E                 push    ecx             ; unsigned int
.text$mn:0000045F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000464                 add     esp, 4
.text$mn:00000467                 mov     [ebp+var_C], eax
.text$mn:0000046A                 mov     eax, [ebp+var_C]
.text$mn:0000046D                 mov     [ebp+lpWideCharStr], eax
.text$mn:00000470                 cmp     [ebp+lpWideCharStr], 0
.text$mn:00000474                 jnz     short loc_489
.text$mn:00000476                 mov     ecx, 1
.text$mn:0000047B                 imul    edx, ecx, 0
.text$mn:0000047E                 mov     eax, [ebp+lpMultiByteStr]
.text$mn:00000481                 mov     byte ptr [eax+edx], 0
.text$mn:00000485                 xor     eax, eax
.text$mn:00000487                 jmp     short loc_4E9
.text$mn:00000489 ; ---------------------------------------------------------------------------
.text$mn:00000489
.text$mn:00000489 loc_489:                                ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+54j
.text$mn:00000489                 mov     ecx, [ebp+arg_4]
.text$mn:0000048C                 push    ecx             ; unsigned int
.text$mn:0000048D                 mov     edx, [ebp+lpWideCharStr]
.text$mn:00000490                 push    edx             ; wchar_t *
.text$mn:00000491                 mov     eax, [ebp+arg_4]
.text$mn:00000494                 push    eax             ; unsigned int
.text$mn:00000495                 mov     ecx, [ebp+arg_0]
.text$mn:00000498                 push    ecx             ; char *
.text$mn:00000499                 call    ?UCS2FromUTF8@@YAIPBDIPA_WI@Z ; UCS2FromUTF8(char const *,uint,wchar_t *,uint)
.text$mn:0000049E                 add     esp, 10h
.text$mn:000004A1                 mov     [ebp+cchWideChar], eax
.text$mn:000004A4                 xor     edx, edx
.text$mn:000004A6                 mov     eax, [ebp+cchWideChar]
.text$mn:000004A9                 mov     ecx, [ebp+lpWideCharStr]
.text$mn:000004AC                 mov     [ecx+eax*2], dx
.text$mn:000004B0                 push    0               ; lpUsedDefaultChar
.text$mn:000004B2                 push    0               ; lpDefaultChar
.text$mn:000004B4                 mov     edx, [ebp+cchWideChar]
.text$mn:000004B7                 add     edx, 1
.text$mn:000004BA                 push    edx             ; cbMultiByte
.text$mn:000004BB                 mov     eax, [ebp+lpMultiByteStr]
.text$mn:000004BE                 push    eax             ; lpMultiByteStr
.text$mn:000004BF                 mov     ecx, [ebp+cchWideChar]
.text$mn:000004C2                 push    ecx             ; cchWideChar
.text$mn:000004C3                 mov     edx, [ebp+lpWideCharStr]
.text$mn:000004C6                 push    edx             ; lpWideCharStr
.text$mn:000004C7                 push    0               ; dwFlags
.text$mn:000004C9                 push    0               ; CodePage
.text$mn:000004CB                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text$mn:000004D1                 mov     [ebp+var_14], eax
.text$mn:000004D4                 mov     eax, [ebp+lpWideCharStr]
.text$mn:000004D7                 mov     [ebp+var_10], eax
.text$mn:000004DA                 mov     ecx, [ebp+var_10]
.text$mn:000004DD                 push    ecx             ; void *
.text$mn:000004DE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000004E3                 add     esp, 4
.text$mn:000004E6                 mov     eax, [ebp+var_14]
.text$mn:000004E9
.text$mn:000004E9 loc_4E9:                                ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+23j
.text$mn:000004E9                                         ; utf8_to_ascii(char const *,uint,char *)+67j
.text$mn:000004E9                 mov     esp, ebp
.text$mn:000004EB                 pop     ebp
.text$mn:000004EC                 retn
.text$mn:000004EC ?utf8_to_ascii@@YAHPBDIPAD@Z endp
.text$mn:000004EC
.text$mn:000004EC _text$mn        ends
.text$mn:000004EC
UNDEF:000004F0 ; ===========================================================================
UNDEF:000004F0
UNDEF:000004F0 ; Segment type: Externs
UNDEF:000004F0 ; UNDEF
UNDEF:000004F0 ; void *__cdecl operator new(unsigned int)
UNDEF:000004F0                 extrn ??2@YAPAXI@Z:near ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+40p
UNDEF:000004F0                                         ; utf8_to_ascii(char const *,uint,char *)+3Fp
UNDEF:000004F4 ; void __cdecl operator delete(void *)
UNDEF:000004F4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+BFp
UNDEF:000004F4                                         ; utf8_to_ascii(char const *,uint,char *)+BEp
UNDEF:000004F8 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
UNDEF:000004F8                 extrn __imp__MultiByteToWideChar@24:near
UNDEF:000004F8                                         ; CODE XREF: ascii_to_utf8(char const *,uint,char *)+81p
UNDEF:000004F8                                         ; DATA XREF: ascii_to_utf8(char const *,uint,char *)+81r
UNDEF:000004FC ; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
UNDEF:000004FC                 extrn __imp__WideCharToMultiByte@32:near
UNDEF:000004FC                                         ; CODE XREF: utf8_to_ascii(char const *,uint,char *)+ABp
UNDEF:000004FC                                         ; DATA XREF: utf8_to_ascii(char const *,uint,char *)+ABr
UNDEF:000004FC
UNDEF:000004FC