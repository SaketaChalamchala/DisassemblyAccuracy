.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 76BCBD70C733A13E52C764F74FE077AD
.rdata:00000000 ; Input CRC32 : 6AEDF4F2
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\tinyxmlparser.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG95533:                               ; DATA XREF: .data:TiXmlBase::Entity * TiXmlBase::entityo
.rdata:00000000                 unicode 0, <&amp;>,0
.rdata:0000000C $SG95534:                               ; DATA XREF: .data:000005C8o
.rdata:0000000C                 unicode 0, <&lt;>,0
.rdata:00000016                 align 4
.rdata:00000018 $SG95535:                               ; DATA XREF: .data:000005D4o
.rdata:00000018                 unicode 0, <&gt;>,0
.rdata:00000022 unk_22          db    0                 ; DATA XREF: .rdata:$SG96055o
.rdata:00000023                 db    0
.rdata:00000024 $SG95536:                               ; DATA XREF: .data:000005E0o
.rdata:00000024                                         ; .rdata:$SG96052o ...
.rdata:00000024                 unicode 0, <&quot;>,0
.rdata:00000032                 align 4
.rdata:00000034 $SG95537:                               ; DATA XREF: .data:000005ECo
.rdata:00000034                                         ; .rdata:off_3Eo ...
.rdata:00000034                 unicode 0, <&apos>
.rdata:0000003E off_3E          dd offset $SG95537+7    ; DATA XREF: .rdata:$SG95894o
.rdata:0000003E                                         ; "猀"
.rdata:00000042                 align 4
.rdata:00000044 ; wchar_t _SG95567
.rdata:00000044 $SG95567:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+16o
.rdata:00000044                 unicode 0, <now>,0
.rdata:0000004C ; wchar_t _SG95574
.rdata:0000004C $SG95574        dd offset $SG95566+20h  ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+58o
.rdata:0000004C                                         ; "inyxmlparser.cpp"
.rdata:00000050 ; wchar_t _SG95566
.rdata:00000050 $SG95566:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+11o
.rdata:00000050                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:00000092                 align 4
.rdata:00000094 ; wchar_t _SG95591
.rdata:00000094 $SG95591:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+154o
.rdata:00000094                 unicode 0, <cursor.row >
.rdata:00000094                 dw 3Eh
.rdata:00000094                 unicode 0, <= -1>,0
.rdata:000000B6                 align 4
.rdata:000000B8 ; wchar_t _SG95573
.rdata:000000B8 $SG95573:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+53o
.rdata:000000B8                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:000000FA                 align 4
.rdata:000000FC ; wchar_t _SG95594
.rdata:000000FC $SG95594:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+174o
.rdata:000000FC                 unicode 0, <cursor.col >
.rdata:000000FC                 dw 3Eh
.rdata:000000FC                 unicode 0, <= -1>,0
.rdata:0000011E                 align 10h
.rdata:00000120 ; wchar_t _SG95590
.rdata:00000120 $SG95590:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+14Fo
.rdata:00000120                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:00000162                 align 4
.rdata:00000164 ; wchar_t _SG95597
.rdata:00000164 $SG95597:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+19Do
.rdata:00000164                 unicode 0, <stamp>,0
.rdata:00000170 ; wchar_t _SG95593
.rdata:00000170 $SG95593:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+16Fo
.rdata:00000170                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:000001B2                 align 4
.rdata:000001B4 ; wchar_t _SG95643
.rdata:000001B4 $SG95643        dw 0                    ; DATA XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3o
.rdata:000001B6                 db    0
.rdata:000001B7                 db    0
.rdata:000001B8 ; wchar_t _SG95596
.rdata:000001B8 $SG95596:                               ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+198o
.rdata:000001B8                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:000001FA                 align 4
.rdata:000001FC ; wchar_t _SG95646
.rdata:000001FC $SG95646        dd offset $SG95566+20h  ; DATA XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20o
.rdata:000001FC                                         ; "inyxmlparser.cpp"
.rdata:00000200 ; wchar_t _SG95645
.rdata:00000200 $SG95645:                               ; DATA XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Bo
.rdata:00000200                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:00000242                 align 4
.rdata:00000244 ; wchar_t _SG95661
.rdata:00000244 $SG95661:                               ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+Co
.rdata:00000244                 unicode 0, <&#x>,0
.rdata:0000024C ; wchar_t _SG95666
.rdata:0000024C $SG95666:                               ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+48o
.rdata:0000024C                 unicode 0, <%x>,0
.rdata:00000252                 align 4
.rdata:00000254 ; wchar_t _SG95683
.rdata:00000254 $SG95683        dd offset $SG95566+20h  ; DATA XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+15o
.rdata:00000254                                         ; "inyxmlparser.cpp"
.rdata:00000258 ; wchar_t _SG95674
.rdata:00000258 $SG95674:                               ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+DAo
.rdata:00000258                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:0000029A                 align 4
.rdata:0000029C ; wchar_t _SG95688
.rdata:0000029C $SG95688        dd offset $SG95536+0Ch  ; DATA XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+40o
.rdata:0000029C                                         ; ""
.rdata:000002A0 ; wchar_t _SG95675
.rdata:000002A0 $SG95675:                               ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+DFo
.rdata:000002A0                 unicode 0, <(unsigned int)lstrlen( entity[i].str ) == entity[i].strLe>
.rdata:000002A0                 unicode 0, <ngth>,0
.rdata:0000031C ; wchar_t _SG95708
.rdata:0000031C $SG95708        dw 0                    ; DATA XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+6o
.rdata:0000031E                 db    0
.rdata:0000031F                 db    0
.rdata:00000320 ; wchar_t _SG95682
.rdata:00000320 $SG95682:                               ; DATA XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+10o
.rdata:00000320                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:00000362                 align 4
.rdata:00000364 $SG95793:                               ; DATA XREF: TiXmlNode::Identify(wchar_t const *):loc_C69o
.rdata:00000364                 dw 3Ch
.rdata:00000364                 unicode 0, <?xml>,0
.rdata:00000370 ; wchar_t _SG95687
.rdata:00000370 $SG95687:                               ; DATA XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+3Bo
.rdata:00000370                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:000003B2                 align 4
.rdata:000003B4 $SG95795:                               ; DATA XREF: TiXmlNode::Identify(wchar_t const *)+98o
.rdata:000003B4                 dw 3Ch
.rdata:000003B4                 unicode 0, <!-->,0
.rdata:000003BE                 align 10h
.rdata:000003C0 ; wchar_t _SG95779
.rdata:000003C0 $SG95779:                               ; DATA XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+28o
.rdata:000003C0                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:00000402                 align 4
.rdata:00000404 ; wchar_t _SG95808
.rdata:00000404 $SG95808        dw 0                    ; DATA XREF: TiXmlNode::Identify(wchar_t const *)+13Eo
.rdata:00000406                 db    0
.rdata:00000407                 db    0
.rdata:00000408 ; wchar_t _SG95780
.rdata:00000408 $SG95780:                               ; DATA XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+2Do
.rdata:00000408                 unicode 0, <err >
.rdata:00000408                 dw 3Eh
.rdata:00000408                 unicode 0, < 0 && err >
.rdata:00000408                 dw 3Ch
.rdata:00000408                 unicode 0, < TIXML_ERROR_STRING_COUNT>,0
.rdata:0000045C ; wchar_t _SG95847
.rdata:0000045C $SG95847        dw 0                    ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+114o
.rdata:0000045E                 db    0
.rdata:0000045F                 db    0
.rdata:00000460 ; wchar_t _SG95850
.rdata:00000460 $SG95850:                               ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+17Ao
.rdata:00000460                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:000004A2                 align 4
.rdata:000004A4 ; wchar_t _SG95851
.rdata:000004A4 $SG95851:                               ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+17Fo
.rdata:000004A4                 unicode 0, <in->
.rdata:000004A4                 dw 3Eh
.rdata:000004A4                 unicode 0, <peek() == >
.rdata:000004A4                 dw 27h, 3Ch, 27h, 0
.rdata:000004C8 ; wchar_t _SG95867
.rdata:000004C8 $SG95867:                               ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+238o
.rdata:000004C8                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:0000050A                 align 4
.rdata:0000050C ; wchar_t _SG95868
.rdata:0000050C $SG95868:                               ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+23Do
.rdata:0000050C                 unicode 0, <c == >
.rdata:0000050C                 dw 27h, 3Eh, 27h, 0
.rdata:0000051E                 align 10h
.rdata:00000520 ; wchar_t _SG95893
.rdata:00000520 $SG95893:                               ; DATA XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *):loc_149Ao
.rdata:00000520                 dw 3Ch
.rdata:00000520                 unicode 0, </>,0
.rdata:00000526                 align 4
.rdata:00000528 ; wchar_t _SG95894
.rdata:00000528 $SG95894        dd offset off_3E        ; DATA XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+145o
.rdata:0000052C ; wchar_t _SG95954
.rdata:0000052C $SG95954        dw 0                    ; DATA XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+83o
.rdata:0000052E                 db    0
.rdata:0000052F                 db    0
.rdata:00000530 ; wchar_t _SG95963
.rdata:00000530 $SG95963:                               ; DATA XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+135o
.rdata:00000530                 dw 3Ch
.rdata:00000530                 unicode 0, </>,0
.rdata:00000536                 align 4
.rdata:00000538 ; wchar_t _SG95995
.rdata:00000538 $SG95995        dw 0                    ; DATA XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+8Eo
.rdata:0000053A                 db    0
.rdata:0000053B                 db    0
.rdata:0000053C ; wchar_t _SG96023
.rdata:0000053C $SG96023        dw 0                    ; DATA XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)+14o
.rdata:0000053E                 db    0
.rdata:0000053F                 db    0
.rdata:00000540 $SG96026:                               ; DATA XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *):loc_1B53o
.rdata:00000540                 dw 3Ch
.rdata:00000540                 unicode 0, <!-->,0
.rdata:0000054A                 align 4
.rdata:0000054C $SG96028:                               ; DATA XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)+62o
.rdata:0000054C                 unicode 0, <-->
.rdata:0000054C                 dw 3Eh, 0
.rdata:00000554 $SG96052        dd offset $SG95536+3    ; DATA XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+176o
.rdata:00000554                                         ; "甀漀琀㬀"
.rdata:00000558 $SG96055        dd offset unk_22        ; DATA XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+1B4o
.rdata:0000055C ; wchar_t _SG96057
.rdata:0000055C $SG96057        dw 0                    ; DATA XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *):loc_1003o
.rdata:0000055E                 db    0
.rdata:0000055F                 db    0
.rdata:00000560 ; wchar_t _SG96081
.rdata:00000560 $SG96081        dw 0                    ; DATA XREF: TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)+9o
.rdata:00000562                 db    0
.rdata:00000563                 db    0
.rdata:00000564 $SG96085        dd offset $SG95537+8    ; DATA XREF: TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)+45o
.rdata:00000564                                         ; "s"
.rdata:00000568 ; wchar_t _SG96110
.rdata:00000568 $SG96110:                               ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+63o
.rdata:00000568                 dw 3Ch
.rdata:00000568                 unicode 0, <?xml>,0
.rdata:00000574 ; wchar_t _SG96113
.rdata:00000574 $SG96113        dw 0                    ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+D0o
.rdata:00000576                 db    0
.rdata:00000577                 db    0
.rdata:00000578 ; wchar_t _SG96114
.rdata:00000578 $SG96114        dw 0                    ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+E3o
.rdata:0000057A                 db    0
.rdata:0000057B                 db    0
.rdata:0000057C ; wchar_t _SG96115
.rdata:0000057C $SG96115        dw 0                    ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+F6o
.rdata:0000057E                 db    0
.rdata:0000057F                 db    0
.rdata:00000580 ; wchar_t _SG96121
.rdata:00000580 $SG96121:                               ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+14Eo
.rdata:00000580                 unicode 0, <version>,0
.rdata:00000590 ; wchar_t _SG96125
.rdata:00000590 $SG96125:                               ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+1B5o
.rdata:00000590                 unicode 0, <encoding>,0
.rdata:000005A2                 align 4
.rdata:000005A4 ; wchar_t _SG96129
.rdata:000005A4 $SG96129:                               ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+228o
.rdata:000005A4                 unicode 0, <standalone>,0
.rdata:000005BA                 align 4
.rdata:000005BA _rdata          ends
.rdata:000005BA
.data:000005BC ; ===========================================================================
.data:000005BC
.data:000005BC ; Segment type: Pure data
.data:000005BC ; Segment permissions: Read/Write
.data:000005BC _data           segment dword public 'DATA' use32
.data:000005BC                 assume cs:_data
.data:000005BC                 ;org 5BCh
.data:000005BC                 public ?entity@TiXmlBase@@0PAUEntity@1@A
.data:000005BC ; private: static struct TiXmlBase::Entity * TiXmlBase::entity
.data:000005BC ?entity@TiXmlBase@@0PAUEntity@1@A dd offset $SG95533
.data:000005BC                                         ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+A5r
.data:000005BC                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+BCr
.data:000005BC                                         ; "&amp;"
.data:000005C0 dword_5C0       dd 5                    ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+96r
.data:000005C0                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+CDr ...
.data:000005C4 word_5C4        dw 26h                  ; DATA XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+F3r
.data:000005C6                 align 4
.data:000005C8                 dd offset $SG95534      ; "&lt;"
.data:000005CC                 db    4
.data:000005CD                 db    0
.data:000005CE                 db    0
.data:000005CF                 db    0
.data:000005D0                 db  3Ch ; <
.data:000005D1                 db    0
.data:000005D2                 db    0
.data:000005D3                 db    0
.data:000005D4                 dd offset $SG95535      ; "&gt;"
.data:000005D8                 db    4
.data:000005D9                 db    0
.data:000005DA                 db    0
.data:000005DB                 db    0
.data:000005DC                 db  3Eh ; >
.data:000005DD                 db    0
.data:000005DE                 db    0
.data:000005DF                 db    0
.data:000005E0                 dd offset $SG95536      ; "&quot;"
.data:000005E4                 db    6
.data:000005E5                 db    0
.data:000005E6                 db    0
.data:000005E7                 db    0
.data:000005E8                 db  22h ; "
.data:000005E9                 db    0
.data:000005EA                 db    0
.data:000005EB                 db    0
.data:000005EC                 dd offset $SG95537      ; "&apos"
.data:000005F0                 db    6
.data:000005F1                 db    0
.data:000005F2                 db    0
.data:000005F3                 db    0
.data:000005F4                 db  27h ; '
.data:000005F5                 db    0
.data:000005F6                 db    0
.data:000005F7                 db    0
.data:000005F7 _data           ends
.data:000005F7
.text$mn:000005F8 ; ===========================================================================
.text$mn:000005F8
.text$mn:000005F8 ; Segment type: Pure code
.text$mn:000005F8 ; Segment permissions: Read/Execute
.text$mn:000005F8 _text$mn        segment para public 'CODE' use32
.text$mn:000005F8                 assume cs:_text$mn
.text$mn:000005F8                 ;org 5F8h
.text$mn:000005F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000005F8
.text$mn:000005F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000005F8
.text$mn:000005F8 ; Attributes: bp-based frame
.text$mn:000005F8
.text$mn:000005F8 ; const wchar_t *__cdecl TiXmlBase::SkipWhiteSpace(const wchar_t *)
.text$mn:000005F8                 public ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z
.text$mn:000005F8 ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z proc near
.text$mn:000005F8                                         ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+81p
.text$mn:000005F8                                         ; TiXmlNode::Identify(wchar_t const *)+33p ...
.text$mn:000005F8
.text$mn:000005F8 arg_0           = dword ptr  8
.text$mn:000005F8
.text$mn:000005F8                 push    ebp
.text$mn:000005F9                 mov     ebp, esp
.text$mn:000005FB                 cmp     [ebp+arg_0], 0
.text$mn:000005FF                 jz      short loc_60B
.text$mn:00000601                 mov     eax, [ebp+arg_0]
.text$mn:00000604                 movzx   ecx, word ptr [eax]
.text$mn:00000607                 test    ecx, ecx
.text$mn:00000609                 jnz     short loc_60F
.text$mn:0000060B
.text$mn:0000060B loc_60B:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+7j
.text$mn:0000060B                 xor     eax, eax
.text$mn:0000060D                 jmp     short loc_65A
.text$mn:0000060F ; ---------------------------------------------------------------------------
.text$mn:0000060F
.text$mn:0000060F loc_60F:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+11j
.text$mn:0000060F                                         ; TiXmlBase::SkipWhiteSpace(wchar_t const *):loc_655j
.text$mn:0000060F                 cmp     [ebp+arg_0], 0
.text$mn:00000613                 jz      short loc_657
.text$mn:00000615                 mov     edx, [ebp+arg_0]
.text$mn:00000618                 movzx   eax, word ptr [edx]
.text$mn:0000061B                 test    eax, eax
.text$mn:0000061D                 jz      short loc_657
.text$mn:0000061F                 mov     ecx, [ebp+arg_0]
.text$mn:00000622                 movzx   edx, word ptr [ecx]
.text$mn:00000625                 push    edx             ; C
.text$mn:00000626                 call    _isspace
.text$mn:0000062B                 add     esp, 4
.text$mn:0000062E                 test    eax, eax
.text$mn:00000630                 jnz     short loc_648
.text$mn:00000632                 mov     eax, [ebp+arg_0]
.text$mn:00000635                 movzx   ecx, word ptr [eax]
.text$mn:00000638                 cmp     ecx, 0Ah
.text$mn:0000063B                 jz      short loc_648
.text$mn:0000063D                 mov     edx, [ebp+arg_0]
.text$mn:00000640                 movzx   eax, word ptr [edx]
.text$mn:00000643                 cmp     eax, 0Dh
.text$mn:00000646                 jnz     short loc_653
.text$mn:00000648
.text$mn:00000648 loc_648:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+38j
.text$mn:00000648                                         ; TiXmlBase::SkipWhiteSpace(wchar_t const *)+43j
.text$mn:00000648                 mov     ecx, [ebp+arg_0]
.text$mn:0000064B                 add     ecx, 2
.text$mn:0000064E                 mov     [ebp+arg_0], ecx
.text$mn:00000651                 jmp     short loc_655
.text$mn:00000653 ; ---------------------------------------------------------------------------
.text$mn:00000653
.text$mn:00000653 loc_653:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+4Ej
.text$mn:00000653                 jmp     short loc_657
.text$mn:00000655 ; ---------------------------------------------------------------------------
.text$mn:00000655
.text$mn:00000655 loc_655:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+59j
.text$mn:00000655                 jmp     short loc_60F
.text$mn:00000657 ; ---------------------------------------------------------------------------
.text$mn:00000657
.text$mn:00000657 loc_657:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+1Bj
.text$mn:00000657                                         ; TiXmlBase::SkipWhiteSpace(wchar_t const *)+25j ...
.text$mn:00000657                 mov     eax, [ebp+arg_0]
.text$mn:0000065A
.text$mn:0000065A loc_65A:                                ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+15j
.text$mn:0000065A                 pop     ebp
.text$mn:0000065B                 retn
.text$mn:0000065B ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z endp
.text$mn:0000065B
.text$mn:0000065B ; ---------------------------------------------------------------------------
.text$mn:0000065C                 db 0Ch dup(0CCh)
.text$mn:00000668
.text$mn:00000668 ; =============== S U B R O U T I N E =======================================
.text$mn:00000668
.text$mn:00000668 ; Attributes: bp-based frame
.text$mn:00000668
.text$mn:00000668 ; protected: static bool __cdecl TiXmlBase::StreamWhiteSpace(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00000668                 public ?StreamWhiteSpace@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00000668 ?StreamWhiteSpace@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00000668                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+E5p
.text$mn:00000668
.text$mn:00000668 C               = dword ptr -4
.text$mn:00000668 arg_0           = dword ptr  8
.text$mn:00000668 arg_4           = dword ptr  0Ch
.text$mn:00000668
.text$mn:00000668                 push    ebp
.text$mn:00000669                 mov     ebp, esp
.text$mn:0000066B                 push    ecx
.text$mn:0000066C
.text$mn:0000066C loc_66C:                                ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Aj
.text$mn:0000066C                 mov     eax, [ebp+arg_0]
.text$mn:0000066F                 mov     ecx, [eax]
.text$mn:00000671                 mov     edx, [ebp+arg_0]
.text$mn:00000674                 add     edx, [ecx+4]
.text$mn:00000677                 mov     ecx, edx        ; this
.text$mn:00000679                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000067E                 movzx   eax, al
.text$mn:00000681                 test    eax, eax
.text$mn:00000683                 jnz     short loc_689
.text$mn:00000685                 xor     al, al
.text$mn:00000687                 jmp     short loc_6C4
.text$mn:00000689 ; ---------------------------------------------------------------------------
.text$mn:00000689
.text$mn:00000689 loc_689:                                ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Bj
.text$mn:00000689                 mov     ecx, [ebp+arg_0]
.text$mn:0000068C                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:00000691                 movzx   ecx, ax
.text$mn:00000694                 mov     [ebp+C], ecx
.text$mn:00000697                 mov     edx, [ebp+C]
.text$mn:0000069A                 push    edx             ; C
.text$mn:0000069B                 call    ?IsWhiteSpace@TiXmlBase@@KA_NH@Z ; TiXmlBase::IsWhiteSpace(int)
.text$mn:000006A0                 add     esp, 4
.text$mn:000006A3                 movzx   eax, al
.text$mn:000006A6                 test    eax, eax
.text$mn:000006A8                 jnz     short loc_6AE
.text$mn:000006AA                 mov     al, 1
.text$mn:000006AC                 jmp     short loc_6C4
.text$mn:000006AE ; ---------------------------------------------------------------------------
.text$mn:000006AE
.text$mn:000006AE loc_6AE:                                ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+40j
.text$mn:000006AE                 mov     ecx, [ebp+arg_0]
.text$mn:000006B1                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:000006B6                 movzx   ecx, ax
.text$mn:000006B9                 push    ecx
.text$mn:000006BA                 mov     ecx, [ebp+arg_4]
.text$mn:000006BD                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:000006C2                 jmp     short loc_66C
.text$mn:000006C4 ; ---------------------------------------------------------------------------
.text$mn:000006C4
.text$mn:000006C4 loc_6C4:                                ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Fj
.text$mn:000006C4                                         ; TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+44j
.text$mn:000006C4                 mov     esp, ebp
.text$mn:000006C6                 pop     ebp
.text$mn:000006C7                 retn
.text$mn:000006C7 ?StreamWhiteSpace@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:000006C7
.text$mn:000006C8
.text$mn:000006C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000006C8
.text$mn:000006C8 ; Attributes: bp-based frame
.text$mn:000006C8
.text$mn:000006C8 ; protected: static bool __cdecl TiXmlBase::StreamTo(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000006C8                 public ?StreamTo@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@HPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:000006C8 ?StreamTo@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@HPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:000006C8                                         ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+13p
.text$mn:000006C8
.text$mn:000006C8 var_4           = dword ptr -4
.text$mn:000006C8 arg_0           = dword ptr  8
.text$mn:000006C8 arg_4           = dword ptr  0Ch
.text$mn:000006C8 arg_8           = dword ptr  10h
.text$mn:000006C8
.text$mn:000006C8                 push    ebp
.text$mn:000006C9                 mov     ebp, esp
.text$mn:000006CB                 push    ecx
.text$mn:000006CC
.text$mn:000006CC loc_6CC:                                ; CODE XREF: TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Cj
.text$mn:000006CC                 mov     eax, [ebp+arg_0]
.text$mn:000006CF                 mov     ecx, [eax]
.text$mn:000006D1                 mov     edx, [ebp+arg_0]
.text$mn:000006D4                 add     edx, [ecx+4]
.text$mn:000006D7                 mov     ecx, edx        ; this
.text$mn:000006D9                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:000006DE                 movzx   eax, al
.text$mn:000006E1                 test    eax, eax
.text$mn:000006E3                 jz      short loc_716
.text$mn:000006E5                 mov     ecx, [ebp+arg_0]
.text$mn:000006E8                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:000006ED                 movzx   ecx, ax
.text$mn:000006F0                 mov     [ebp+var_4], ecx
.text$mn:000006F3                 mov     edx, [ebp+var_4]
.text$mn:000006F6                 cmp     edx, [ebp+arg_4]
.text$mn:000006F9                 jnz     short loc_6FF
.text$mn:000006FB                 mov     al, 1
.text$mn:000006FD                 jmp     short loc_718
.text$mn:000006FF ; ---------------------------------------------------------------------------
.text$mn:000006FF
.text$mn:000006FF loc_6FF:                                ; CODE XREF: TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+31j
.text$mn:000006FF                 mov     ecx, [ebp+arg_0]
.text$mn:00000702                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:00000707                 movzx   eax, word ptr [ebp+var_4]
.text$mn:0000070B                 push    eax
.text$mn:0000070C                 mov     ecx, [ebp+arg_8]
.text$mn:0000070F                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00000714                 jmp     short loc_6CC
.text$mn:00000716 ; ---------------------------------------------------------------------------
.text$mn:00000716
.text$mn:00000716 loc_716:                                ; CODE XREF: TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Bj
.text$mn:00000716                 xor     al, al
.text$mn:00000718
.text$mn:00000718 loc_718:                                ; CODE XREF: TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+35j
.text$mn:00000718                 mov     esp, ebp
.text$mn:0000071A                 pop     ebp
.text$mn:0000071B                 retn
.text$mn:0000071B ?StreamTo@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@HPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:0000071B
.text$mn:0000071B ; ---------------------------------------------------------------------------
.text$mn:0000071C                 db 0Ch dup(0CCh)
.text$mn:00000728
.text$mn:00000728 ; =============== S U B R O U T I N E =======================================
.text$mn:00000728
.text$mn:00000728 ; Attributes: bp-based frame
.text$mn:00000728
.text$mn:00000728 ; protected: static wchar_t const * __cdecl TiXmlBase::ReadName(wchar_t const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00000728                 public ?ReadName@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00000728 ?ReadName@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00000728                                         ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+86p
.text$mn:00000728                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+E8p
.text$mn:00000728
.text$mn:00000728 arg_0           = dword ptr  8
.text$mn:00000728 arg_4           = dword ptr  0Ch
.text$mn:00000728
.text$mn:00000728                 push    ebp
.text$mn:00000729                 mov     ebp, esp
.text$mn:0000072B                 push    offset $SG95643 ; Str
.text$mn:00000730                 mov     ecx, [ebp+arg_4]
.text$mn:00000733                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00000738                 cmp     [ebp+arg_0], 0
.text$mn:0000073C                 jnz     short loc_755
.text$mn:0000073E                 push    0C7h ; '¦'      ; Line
.text$mn:00000743                 push    offset $SG95645 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00000748                 push    offset $SG95646 ; Message
.text$mn:0000074D                 call    __wassert
.text$mn:00000752 ; ---------------------------------------------------------------------------
.text$mn:00000752                 add     esp, 0Ch
.text$mn:00000755
.text$mn:00000755 loc_755:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+14j
.text$mn:00000755                 cmp     [ebp+arg_0], 0
.text$mn:00000759                 jz      loc_7F9
.text$mn:0000075F                 mov     ecx, [ebp+arg_0]
.text$mn:00000762                 movzx   edx, word ptr [ecx]
.text$mn:00000765                 test    edx, edx
.text$mn:00000767                 jz      loc_7F9
.text$mn:0000076D                 mov     eax, [ebp+arg_0]
.text$mn:00000770                 movzx   ecx, byte ptr [eax]
.text$mn:00000773                 push    ecx             ; C
.text$mn:00000774                 call    _isalpha
.text$mn:00000779                 add     esp, 4
.text$mn:0000077C                 test    eax, eax
.text$mn:0000077E                 jnz     short loc_78B
.text$mn:00000780                 mov     edx, [ebp+arg_0]
.text$mn:00000783                 movzx   eax, word ptr [edx]
.text$mn:00000786                 cmp     eax, 5Fh ; '_'
.text$mn:00000789                 jnz     short loc_7F9
.text$mn:0000078B
.text$mn:0000078B loc_78B:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+56j
.text$mn:0000078B                                         ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+CAj
.text$mn:0000078B                 cmp     [ebp+arg_0], 0
.text$mn:0000078F                 jz      short loc_7F4
.text$mn:00000791                 mov     ecx, [ebp+arg_0]
.text$mn:00000794                 movzx   edx, word ptr [ecx]
.text$mn:00000797                 test    edx, edx
.text$mn:00000799                 jz      short loc_7F4
.text$mn:0000079B                 mov     eax, [ebp+arg_0]
.text$mn:0000079E                 movzx   ecx, byte ptr [eax]
.text$mn:000007A1                 push    ecx             ; C
.text$mn:000007A2                 call    _isalnum
.text$mn:000007A7                 add     esp, 4
.text$mn:000007AA                 test    eax, eax
.text$mn:000007AC                 jnz     short loc_7DA
.text$mn:000007AE                 mov     edx, [ebp+arg_0]
.text$mn:000007B1                 movzx   eax, word ptr [edx]
.text$mn:000007B4                 cmp     eax, 5Fh ; '_'
.text$mn:000007B7                 jz      short loc_7DA
.text$mn:000007B9                 mov     ecx, [ebp+arg_0]
.text$mn:000007BC                 movzx   edx, word ptr [ecx]
.text$mn:000007BF                 cmp     edx, 2Dh ; '-'
.text$mn:000007C2                 jz      short loc_7DA
.text$mn:000007C4                 mov     eax, [ebp+arg_0]
.text$mn:000007C7                 movzx   ecx, word ptr [eax]
.text$mn:000007CA                 cmp     ecx, 2Eh ; '.'
.text$mn:000007CD                 jz      short loc_7DA
.text$mn:000007CF                 mov     edx, [ebp+arg_0]
.text$mn:000007D2                 movzx   eax, word ptr [edx]
.text$mn:000007D5                 cmp     eax, 3Ah ; ':'
.text$mn:000007D8                 jnz     short loc_7F4
.text$mn:000007DA
.text$mn:000007DA loc_7DA:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+84j
.text$mn:000007DA                                         ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+8Fj ...
.text$mn:000007DA                 mov     ecx, [ebp+arg_0]
.text$mn:000007DD                 movzx   edx, word ptr [ecx]
.text$mn:000007E0                 push    edx
.text$mn:000007E1                 mov     ecx, [ebp+arg_4]
.text$mn:000007E4                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:000007E9                 mov     eax, [ebp+arg_0]
.text$mn:000007EC                 add     eax, 2
.text$mn:000007EF                 mov     [ebp+arg_0], eax
.text$mn:000007F2                 jmp     short loc_78B
.text$mn:000007F4 ; ---------------------------------------------------------------------------
.text$mn:000007F4
.text$mn:000007F4 loc_7F4:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+67j
.text$mn:000007F4                                         ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+71j ...
.text$mn:000007F4                 mov     eax, [ebp+arg_0]
.text$mn:000007F7                 jmp     short loc_7FB
.text$mn:000007F9 ; ---------------------------------------------------------------------------
.text$mn:000007F9
.text$mn:000007F9 loc_7F9:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+31j
.text$mn:000007F9                                         ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Fj ...
.text$mn:000007F9                 xor     eax, eax
.text$mn:000007FB
.text$mn:000007FB loc_7FB:                                ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+CFj
.text$mn:000007FB                 pop     ebp
.text$mn:000007FC                 retn
.text$mn:000007FC ?ReadName@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:000007FC
.text$mn:000007FC ; ---------------------------------------------------------------------------
.text$mn:000007FD                 db 0Bh dup(0CCh)
.text$mn:00000808
.text$mn:00000808 ; =============== S U B R O U T I N E =======================================
.text$mn:00000808
.text$mn:00000808 ; Attributes: bp-based frame
.text$mn:00000808
.text$mn:00000808 ; int __cdecl TiXmlBase::ReadText(wchar_t *Str2, int, char, LPCWSTR lpString, char)
.text$mn:00000808                 public ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z
.text$mn:00000808 ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z proc near
.text$mn:00000808                                         ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+190p
.text$mn:00000808                                         ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+1CEp ...
.text$mn:00000808
.text$mn:00000808 var_C           = word ptr -0Ch
.text$mn:00000808 var_8           = word ptr -8
.text$mn:00000808 var_1           = byte ptr -1
.text$mn:00000808 Str2            = dword ptr  8
.text$mn:00000808 arg_4           = dword ptr  0Ch
.text$mn:00000808 arg_8           = byte ptr  10h
.text$mn:00000808 lpString        = dword ptr  14h
.text$mn:00000808 arg_10          = byte ptr  18h
.text$mn:00000808
.text$mn:00000808                 push    ebp
.text$mn:00000809                 mov     ebp, esp
.text$mn:0000080B                 sub     esp, 0Ch
.text$mn:0000080E                 push    offset $SG95708 ; Str
.text$mn:00000813                 mov     ecx, [ebp+arg_4]
.text$mn:00000816                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000081B                 movzx   eax, [ebp+arg_8]
.text$mn:0000081F                 test    eax, eax
.text$mn:00000821                 jz      short loc_82E
.text$mn:00000823                 movzx   ecx, byte ptr ds:?condenseWhiteSpace@TiXmlBase@@0_NA ; bool TiXmlBase::condenseWhiteSpace
.text$mn:0000082A                 test    ecx, ecx
.text$mn:0000082C                 jnz     short loc_881
.text$mn:0000082E
.text$mn:0000082E loc_82E:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+19j
.text$mn:0000082E                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+72j
.text$mn:0000082E                 cmp     [ebp+Str2], 0
.text$mn:00000832                 jz      short loc_87C
.text$mn:00000834                 mov     edx, [ebp+Str2]
.text$mn:00000837                 movzx   eax, word ptr [edx]
.text$mn:0000083A                 test    eax, eax
.text$mn:0000083C                 jz      short loc_87C
.text$mn:0000083E                 movzx   ecx, [ebp+arg_10]
.text$mn:00000842                 push    ecx             ; bool
.text$mn:00000843                 mov     edx, [ebp+lpString]
.text$mn:00000846                 push    edx             ; wchar_t *
.text$mn:00000847                 mov     eax, [ebp+Str2]
.text$mn:0000084A                 push    eax             ; wchar_t *
.text$mn:0000084B                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00000850                 add     esp, 0Ch
.text$mn:00000853                 movzx   ecx, al
.text$mn:00000856                 test    ecx, ecx
.text$mn:00000858                 jnz     short loc_87C
.text$mn:0000085A                 lea     edx, [ebp+var_8]
.text$mn:0000085D                 push    edx             ; wchar_t *
.text$mn:0000085E                 mov     eax, [ebp+Str2]
.text$mn:00000861                 push    eax             ; Str2
.text$mn:00000862                 call    ?GetChar@TiXmlBase@@KAPB_WPB_WPA_W@Z ; TiXmlBase::GetChar(wchar_t const *,wchar_t *)
.text$mn:00000867                 add     esp, 8
.text$mn:0000086A                 mov     [ebp+Str2], eax
.text$mn:0000086D                 movzx   ecx, [ebp+var_8]
.text$mn:00000871                 push    ecx
.text$mn:00000872                 mov     ecx, [ebp+arg_4]
.text$mn:00000875                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:0000087A                 jmp     short loc_82E
.text$mn:0000087C ; ---------------------------------------------------------------------------
.text$mn:0000087C
.text$mn:0000087C loc_87C:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+2Aj
.text$mn:0000087C                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+34j ...
.text$mn:0000087C                 jmp     loc_94E
.text$mn:00000881 ; ---------------------------------------------------------------------------
.text$mn:00000881
.text$mn:00000881 loc_881:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+24j
.text$mn:00000881                 mov     [ebp+var_1], 0
.text$mn:00000885                 mov     edx, [ebp+Str2]
.text$mn:00000888                 push    edx             ; wchar_t *
.text$mn:00000889                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:0000088E                 add     esp, 4
.text$mn:00000891                 mov     [ebp+Str2], eax
.text$mn:00000894
.text$mn:00000894 loc_894:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool):loc_949j
.text$mn:00000894                 cmp     [ebp+Str2], 0
.text$mn:00000898                 jz      loc_94E
.text$mn:0000089E                 mov     eax, [ebp+Str2]
.text$mn:000008A1                 movzx   ecx, word ptr [eax]
.text$mn:000008A4                 test    ecx, ecx
.text$mn:000008A6                 jz      loc_94E
.text$mn:000008AC                 movzx   edx, [ebp+arg_10]
.text$mn:000008B0                 push    edx             ; bool
.text$mn:000008B1                 mov     eax, [ebp+lpString]
.text$mn:000008B4                 push    eax             ; wchar_t *
.text$mn:000008B5                 mov     ecx, [ebp+Str2]
.text$mn:000008B8                 push    ecx             ; wchar_t *
.text$mn:000008B9                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:000008BE                 add     esp, 0Ch
.text$mn:000008C1                 movzx   edx, al
.text$mn:000008C4                 test    edx, edx
.text$mn:000008C6                 jnz     loc_94E
.text$mn:000008CC                 mov     eax, [ebp+Str2]
.text$mn:000008CF                 movzx   ecx, word ptr [eax]
.text$mn:000008D2                 cmp     ecx, 0Dh
.text$mn:000008D5                 jz      short loc_8E2
.text$mn:000008D7                 mov     edx, [ebp+Str2]
.text$mn:000008DA                 movzx   eax, word ptr [edx]
.text$mn:000008DD                 cmp     eax, 0Ah
.text$mn:000008E0                 jnz     short loc_8F1
.text$mn:000008E2
.text$mn:000008E2 loc_8E2:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+CDj
.text$mn:000008E2                 mov     [ebp+var_1], 1
.text$mn:000008E6                 mov     ecx, [ebp+Str2]
.text$mn:000008E9                 add     ecx, 2
.text$mn:000008EC                 mov     [ebp+Str2], ecx
.text$mn:000008EF                 jmp     short loc_949
.text$mn:000008F1 ; ---------------------------------------------------------------------------
.text$mn:000008F1
.text$mn:000008F1 loc_8F1:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+D8j
.text$mn:000008F1                 mov     edx, [ebp+Str2]
.text$mn:000008F4                 movzx   eax, word ptr [edx]
.text$mn:000008F7                 push    eax             ; C
.text$mn:000008F8                 call    _isspace
.text$mn:000008FD                 add     esp, 4
.text$mn:00000900                 test    eax, eax
.text$mn:00000902                 jz      short loc_913
.text$mn:00000904                 mov     [ebp+var_1], 1
.text$mn:00000908                 mov     ecx, [ebp+Str2]
.text$mn:0000090B                 add     ecx, 2
.text$mn:0000090E                 mov     [ebp+Str2], ecx
.text$mn:00000911                 jmp     short loc_949
.text$mn:00000913 ; ---------------------------------------------------------------------------
.text$mn:00000913
.text$mn:00000913 loc_913:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+FAj
.text$mn:00000913                 movzx   edx, [ebp+var_1]
.text$mn:00000917                 test    edx, edx
.text$mn:00000919                 jz      short loc_929
.text$mn:0000091B                 push    20h ; ' '
.text$mn:0000091D                 mov     ecx, [ebp+arg_4]
.text$mn:00000920                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00000925                 mov     [ebp+var_1], 0
.text$mn:00000929
.text$mn:00000929 loc_929:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+111j
.text$mn:00000929                 lea     eax, [ebp+var_C]
.text$mn:0000092C                 push    eax             ; wchar_t *
.text$mn:0000092D                 mov     ecx, [ebp+Str2]
.text$mn:00000930                 push    ecx             ; Str2
.text$mn:00000931                 call    ?GetChar@TiXmlBase@@KAPB_WPB_WPA_W@Z ; TiXmlBase::GetChar(wchar_t const *,wchar_t *)
.text$mn:00000936                 add     esp, 8
.text$mn:00000939                 mov     [ebp+Str2], eax
.text$mn:0000093C                 movzx   edx, [ebp+var_C]
.text$mn:00000940                 push    edx
.text$mn:00000941                 mov     ecx, [ebp+arg_4]
.text$mn:00000944                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00000949
.text$mn:00000949 loc_949:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+E7j
.text$mn:00000949                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+109j
.text$mn:00000949                 jmp     loc_894
.text$mn:0000094E ; ---------------------------------------------------------------------------
.text$mn:0000094E
.text$mn:0000094E loc_94E:                                ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool):loc_87Cj
.text$mn:0000094E                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+90j ...
.text$mn:0000094E                 mov     eax, [ebp+lpString]
.text$mn:00000951                 push    eax             ; lpString
.text$mn:00000952                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000958                 mov     ecx, [ebp+Str2]
.text$mn:0000095B                 lea     eax, [ecx+eax*2]
.text$mn:0000095E                 mov     esp, ebp
.text$mn:00000960                 pop     ebp
.text$mn:00000961                 retn
.text$mn:00000961 ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z endp
.text$mn:00000961
.text$mn:00000961 ; ---------------------------------------------------------------------------
.text$mn:00000962                 align 8
.text$mn:00000968
.text$mn:00000968 ; =============== S U B R O U T I N E =======================================
.text$mn:00000968
.text$mn:00000968 ; Attributes: bp-based frame
.text$mn:00000968
.text$mn:00000968 ; const wchar_t *__cdecl TiXmlBase::GetEntity(const wchar_t *Str2, wchar_t *)
.text$mn:00000968                 public ?GetEntity@TiXmlBase@@KAPB_WPB_WPA_W@Z
.text$mn:00000968 ?GetEntity@TiXmlBase@@KAPB_WPB_WPA_W@Z proc near
.text$mn:00000968                                         ; CODE XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+33p
.text$mn:00000968
.text$mn:00000968 var_C           = word ptr -0Ch
.text$mn:00000968 var_8           = dword ptr -8
.text$mn:00000968 var_4           = dword ptr -4
.text$mn:00000968 Str2            = dword ptr  8
.text$mn:00000968 arg_4           = dword ptr  0Ch
.text$mn:00000968
.text$mn:00000968                 push    ebp
.text$mn:00000969                 mov     ebp, esp
.text$mn:0000096B                 sub     esp, 0Ch
.text$mn:0000096E                 push    3               ; MaxCount
.text$mn:00000970                 mov     eax, [ebp+Str2]
.text$mn:00000973                 push    eax             ; Str2
.text$mn:00000974                 push    offset $SG95661 ; "&#x"
.text$mn:00000979                 call    _wcsncmp
.text$mn:0000097E                 add     esp, 0Ch
.text$mn:00000981                 test    eax, eax
.text$mn:00000983                 jnz     short loc_9DE
.text$mn:00000985                 push    3Bh ; ';'       ; Ch
.text$mn:00000987                 mov     ecx, [ebp+Str2]
.text$mn:0000098A                 add     ecx, 6
.text$mn:0000098D                 push    ecx             ; Str
.text$mn:0000098E                 call    _wcschr
.text$mn:00000993                 add     esp, 8
.text$mn:00000996                 mov     [ebp+var_8], eax
.text$mn:00000999                 cmp     [ebp+var_8], 0
.text$mn:0000099D                 jz      short loc_9DE
.text$mn:0000099F                 mov     edx, [ebp+var_8]
.text$mn:000009A2                 sub     edx, [ebp+Str2]
.text$mn:000009A5                 sar     edx, 1
.text$mn:000009A7                 cmp     edx, 7
.text$mn:000009AA                 jg      short loc_9DE
.text$mn:000009AC                 lea     eax, [ebp+var_C]
.text$mn:000009AF                 push    eax
.text$mn:000009B0                 push    offset $SG95666 ; "%x"
.text$mn:000009B5                 mov     ecx, [ebp+Str2]
.text$mn:000009B8                 add     ecx, 6
.text$mn:000009BB                 push    ecx             ; Src
.text$mn:000009BC                 call    _swscanf
.text$mn:000009C1                 add     esp, 0Ch
.text$mn:000009C4                 cmp     eax, 1
.text$mn:000009C7                 jnz     short loc_9DE
.text$mn:000009C9                 mov     edx, [ebp+arg_4]
.text$mn:000009CC                 mov     ax, [ebp+var_C]
.text$mn:000009D0                 mov     [edx], ax
.text$mn:000009D3                 mov     eax, [ebp+var_8]
.text$mn:000009D6                 add     eax, 2
.text$mn:000009D9                 jmp     loc_A8E
.text$mn:000009DE ; ---------------------------------------------------------------------------
.text$mn:000009DE
.text$mn:000009DE loc_9DE:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+1Bj
.text$mn:000009DE                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+35j ...
.text$mn:000009DE                 mov     [ebp+var_4], 0
.text$mn:000009E5                 jmp     short loc_9F0
.text$mn:000009E7 ; ---------------------------------------------------------------------------
.text$mn:000009E7
.text$mn:000009E7 loc_9E7:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *):loc_A77j
.text$mn:000009E7                 mov     ecx, [ebp+var_4]
.text$mn:000009EA                 add     ecx, 1
.text$mn:000009ED                 mov     [ebp+var_4], ecx
.text$mn:000009F0
.text$mn:000009F0 loc_9F0:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+7Dj
.text$mn:000009F0                 cmp     [ebp+var_4], 5
.text$mn:000009F4                 jge     loc_A7C
.text$mn:000009FA                 imul    edx, [ebp+var_4], 0Ch
.text$mn:000009FE                 mov     eax, ds:dword_5C0[edx]
.text$mn:00000A04                 push    eax             ; MaxCount
.text$mn:00000A05                 mov     ecx, [ebp+Str2]
.text$mn:00000A08                 push    ecx             ; Str2
.text$mn:00000A09                 imul    edx, [ebp+var_4], 0Ch
.text$mn:00000A0D                 mov     eax, ds:?entity@TiXmlBase@@0PAUEntity@1@A[edx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000A13                 push    eax             ; Str1
.text$mn:00000A14                 call    _wcsncmp
.text$mn:00000A19                 add     esp, 0Ch
.text$mn:00000A1C                 test    eax, eax
.text$mn:00000A1E                 jnz     short loc_A77
.text$mn:00000A20                 imul    ecx, [ebp+var_4], 0Ch
.text$mn:00000A24                 mov     edx, ds:?entity@TiXmlBase@@0PAUEntity@1@A[ecx] ; TiXmlBase::Entity * TiXmlBase::entity
.text$mn:00000A2A                 push    edx             ; lpString
.text$mn:00000A2B                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000A31                 imul    ecx, [ebp+var_4], 0Ch
.text$mn:00000A35                 cmp     eax, ds:dword_5C0[ecx]
.text$mn:00000A3B                 jz      short loc_A54
.text$mn:00000A3D                 push    0F8h ; '°'      ; Line
.text$mn:00000A42                 push    offset $SG95674 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00000A47                 push    offset $SG95675 ; "(unsigned int)lstrlen( entity[i].str ) "...
.text$mn:00000A4C                 call    __wassert
.text$mn:00000A51 ; ---------------------------------------------------------------------------
.text$mn:00000A51                 add     esp, 0Ch
.text$mn:00000A54
.text$mn:00000A54 loc_A54:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+D3j
.text$mn:00000A54                 imul    eax, [ebp+var_4], 0Ch
.text$mn:00000A58                 mov     ecx, [ebp+arg_4]
.text$mn:00000A5B                 mov     dx, ds:word_5C4[eax]
.text$mn:00000A62                 mov     [ecx], dx
.text$mn:00000A65                 imul    eax, [ebp+var_4], 0Ch
.text$mn:00000A69                 mov     ecx, ds:dword_5C0[eax]
.text$mn:00000A6F                 mov     edx, [ebp+Str2]
.text$mn:00000A72                 lea     eax, [edx+ecx*2]
.text$mn:00000A75                 jmp     short loc_A8E
.text$mn:00000A77 ; ---------------------------------------------------------------------------
.text$mn:00000A77
.text$mn:00000A77 loc_A77:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+B6j
.text$mn:00000A77                 jmp     loc_9E7
.text$mn:00000A7C ; ---------------------------------------------------------------------------
.text$mn:00000A7C
.text$mn:00000A7C loc_A7C:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+8Cj
.text$mn:00000A7C                 mov     eax, [ebp+arg_4]
.text$mn:00000A7F                 mov     ecx, [ebp+Str2]
.text$mn:00000A82                 mov     dx, [ecx]
.text$mn:00000A85                 mov     [eax], dx
.text$mn:00000A88                 mov     eax, [ebp+Str2]
.text$mn:00000A8B                 add     eax, 2
.text$mn:00000A8E
.text$mn:00000A8E loc_A8E:                                ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+71j
.text$mn:00000A8E                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+10Dj
.text$mn:00000A8E                 mov     esp, ebp
.text$mn:00000A90                 pop     ebp
.text$mn:00000A91                 retn
.text$mn:00000A91 ?GetEntity@TiXmlBase@@KAPB_WPB_WPA_W@Z endp
.text$mn:00000A91
.text$mn:00000A91 ; ---------------------------------------------------------------------------
.text$mn:00000A92                 align 8
.text$mn:00000A98
.text$mn:00000A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A98
.text$mn:00000A98 ; Attributes: bp-based frame
.text$mn:00000A98
.text$mn:00000A98 ; bool __cdecl TiXmlBase::StringEqual(const wchar_t *, const wchar_t *, bool)
.text$mn:00000A98                 public ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z
.text$mn:00000A98 ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z proc near
.text$mn:00000A98                                         ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+43p
.text$mn:00000A98                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+B1p ...
.text$mn:00000A98
.text$mn:00000A98 var_4           = dword ptr -4
.text$mn:00000A98 arg_0           = dword ptr  8
.text$mn:00000A98 arg_4           = dword ptr  0Ch
.text$mn:00000A98 arg_8           = byte ptr  10h
.text$mn:00000A98
.text$mn:00000A98                 push    ebp
.text$mn:00000A99                 mov     ebp, esp
.text$mn:00000A9B                 push    ecx
.text$mn:00000A9C                 push    esi
.text$mn:00000A9D                 cmp     [ebp+arg_0], 0
.text$mn:00000AA1                 jnz     short loc_ABA
.text$mn:00000AA3                 push    108h            ; Line
.text$mn:00000AA8                 push    offset $SG95682 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00000AAD                 push    offset $SG95683 ; Message
.text$mn:00000AB2                 call    __wassert
.text$mn:00000AB7 ; ---------------------------------------------------------------------------
.text$mn:00000AB7                 add     esp, 0Ch
.text$mn:00000ABA
.text$mn:00000ABA loc_ABA:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+9j
.text$mn:00000ABA                 cmp     [ebp+arg_0], 0
.text$mn:00000ABE                 jz      short loc_ACA
.text$mn:00000AC0                 mov     ecx, [ebp+arg_0]
.text$mn:00000AC3                 movzx   edx, word ptr [ecx]
.text$mn:00000AC6                 test    edx, edx
.text$mn:00000AC8                 jnz     short loc_AEC
.text$mn:00000ACA
.text$mn:00000ACA loc_ACA:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+26j
.text$mn:00000ACA                 xor     eax, eax
.text$mn:00000ACC                 jnz     short loc_AE5
.text$mn:00000ACE                 push    10Bh            ; Line
.text$mn:00000AD3                 push    offset $SG95687 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00000AD8                 push    offset $SG95688 ; Message
.text$mn:00000ADD                 call    __wassert
.text$mn:00000AE2 ; ---------------------------------------------------------------------------
.text$mn:00000AE2                 add     esp, 0Ch
.text$mn:00000AE5
.text$mn:00000AE5 loc_AE5:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+34j
.text$mn:00000AE5                 xor     al, al
.text$mn:00000AE7                 jmp     loc_BC6
.text$mn:00000AEC ; ---------------------------------------------------------------------------
.text$mn:00000AEC
.text$mn:00000AEC loc_AEC:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+30j
.text$mn:00000AEC                 mov     edx, [ebp+arg_0]
.text$mn:00000AEF                 movzx   eax, word ptr [edx]
.text$mn:00000AF2                 push    eax             ; C
.text$mn:00000AF3                 call    _tolower
.text$mn:00000AF8                 add     esp, 4
.text$mn:00000AFB                 mov     esi, eax
.text$mn:00000AFD                 mov     ecx, [ebp+arg_4]
.text$mn:00000B00                 movzx   edx, word ptr [ecx]
.text$mn:00000B03                 push    edx             ; C
.text$mn:00000B04                 call    _tolower
.text$mn:00000B09                 add     esp, 4
.text$mn:00000B0C                 cmp     esi, eax
.text$mn:00000B0E                 jnz     loc_BC4
.text$mn:00000B14                 mov     eax, [ebp+arg_0]
.text$mn:00000B17                 mov     [ebp+var_4], eax
.text$mn:00000B1A                 movzx   ecx, [ebp+arg_8]
.text$mn:00000B1E                 test    ecx, ecx
.text$mn:00000B20                 jz      short loc_B6A
.text$mn:00000B22
.text$mn:00000B22 loc_B22:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+C0j
.text$mn:00000B22                 mov     edx, [ebp+var_4]
.text$mn:00000B25                 movzx   eax, word ptr [edx]
.text$mn:00000B28                 test    eax, eax
.text$mn:00000B2A                 jz      short loc_B5A
.text$mn:00000B2C                 mov     ecx, [ebp+arg_4]
.text$mn:00000B2F                 movzx   edx, word ptr [ecx]
.text$mn:00000B32                 test    edx, edx
.text$mn:00000B34                 jz      short loc_B5A
.text$mn:00000B36                 mov     eax, [ebp+var_4]
.text$mn:00000B39                 movzx   ecx, word ptr [eax]
.text$mn:00000B3C                 mov     edx, [ebp+arg_4]
.text$mn:00000B3F                 movzx   eax, word ptr [edx]
.text$mn:00000B42                 cmp     ecx, eax
.text$mn:00000B44                 jnz     short loc_B5A
.text$mn:00000B46                 mov     ecx, [ebp+var_4]
.text$mn:00000B49                 add     ecx, 2
.text$mn:00000B4C                 mov     [ebp+var_4], ecx
.text$mn:00000B4F                 mov     edx, [ebp+arg_4]
.text$mn:00000B52                 add     edx, 2
.text$mn:00000B55                 mov     [ebp+arg_4], edx
.text$mn:00000B58                 jmp     short loc_B22
.text$mn:00000B5A ; ---------------------------------------------------------------------------
.text$mn:00000B5A
.text$mn:00000B5A loc_B5A:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+92j
.text$mn:00000B5A                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+9Cj ...
.text$mn:00000B5A                 mov     eax, [ebp+arg_4]
.text$mn:00000B5D                 movzx   ecx, word ptr [eax]
.text$mn:00000B60                 test    ecx, ecx
.text$mn:00000B62                 jnz     short loc_B68
.text$mn:00000B64                 mov     al, 1
.text$mn:00000B66                 jmp     short loc_BC6
.text$mn:00000B68 ; ---------------------------------------------------------------------------
.text$mn:00000B68
.text$mn:00000B68 loc_B68:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+CAj
.text$mn:00000B68                 jmp     short loc_BC4
.text$mn:00000B6A ; ---------------------------------------------------------------------------
.text$mn:00000B6A
.text$mn:00000B6A loc_B6A:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+88j
.text$mn:00000B6A                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+11Cj
.text$mn:00000B6A                 mov     edx, [ebp+var_4]
.text$mn:00000B6D                 movzx   eax, word ptr [edx]
.text$mn:00000B70                 test    eax, eax
.text$mn:00000B72                 jz      short loc_BB6
.text$mn:00000B74                 mov     ecx, [ebp+arg_4]
.text$mn:00000B77                 movzx   edx, word ptr [ecx]
.text$mn:00000B7A                 test    edx, edx
.text$mn:00000B7C                 jz      short loc_BB6
.text$mn:00000B7E                 mov     eax, [ebp+var_4]
.text$mn:00000B81                 movzx   ecx, word ptr [eax]
.text$mn:00000B84                 push    ecx             ; C
.text$mn:00000B85                 call    _tolower
.text$mn:00000B8A                 add     esp, 4
.text$mn:00000B8D                 mov     esi, eax
.text$mn:00000B8F                 mov     edx, [ebp+arg_4]
.text$mn:00000B92                 movzx   eax, word ptr [edx]
.text$mn:00000B95                 push    eax             ; C
.text$mn:00000B96                 call    _tolower
.text$mn:00000B9B                 add     esp, 4
.text$mn:00000B9E                 cmp     esi, eax
.text$mn:00000BA0                 jnz     short loc_BB6
.text$mn:00000BA2                 mov     ecx, [ebp+var_4]
.text$mn:00000BA5                 add     ecx, 2
.text$mn:00000BA8                 mov     [ebp+var_4], ecx
.text$mn:00000BAB                 mov     edx, [ebp+arg_4]
.text$mn:00000BAE                 add     edx, 2
.text$mn:00000BB1                 mov     [ebp+arg_4], edx
.text$mn:00000BB4                 jmp     short loc_B6A
.text$mn:00000BB6 ; ---------------------------------------------------------------------------
.text$mn:00000BB6
.text$mn:00000BB6 loc_BB6:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+DAj
.text$mn:00000BB6                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+E4j ...
.text$mn:00000BB6                 mov     eax, [ebp+arg_4]
.text$mn:00000BB9                 movzx   ecx, word ptr [eax]
.text$mn:00000BBC                 test    ecx, ecx
.text$mn:00000BBE                 jnz     short loc_BC4
.text$mn:00000BC0                 mov     al, 1
.text$mn:00000BC2                 jmp     short loc_BC6
.text$mn:00000BC4 ; ---------------------------------------------------------------------------
.text$mn:00000BC4
.text$mn:00000BC4 loc_BC4:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+76j
.text$mn:00000BC4                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool):loc_B68j ...
.text$mn:00000BC4                 xor     al, al
.text$mn:00000BC6
.text$mn:00000BC6 loc_BC6:                                ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+4Fj
.text$mn:00000BC6                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+CEj ...
.text$mn:00000BC6                 pop     esi
.text$mn:00000BC7                 mov     esp, ebp
.text$mn:00000BC9                 pop     ebp
.text$mn:00000BCA                 retn
.text$mn:00000BCA ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z endp
.text$mn:00000BCA
.text$mn:00000BCA ; ---------------------------------------------------------------------------
.text$mn:00000BCB                 db 0Dh dup(0CCh)
.text$mn:00000BD8
.text$mn:00000BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000BD8
.text$mn:00000BD8 ; Attributes: bp-based frame
.text$mn:00000BD8
.text$mn:00000BD8 ; struct TiXmlNode *__thiscall TiXmlNode::Identify(TiXmlNode *this, const wchar_t *)
.text$mn:00000BD8                 public ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z
.text$mn:00000BD8 ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z proc near
.text$mn:00000BD8                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+273p
.text$mn:00000BD8                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+15Bp ...
.text$mn:00000BD8
.text$mn:00000BD8 var_50          = dword ptr -50h
.text$mn:00000BD8 var_4C          = dword ptr -4Ch
.text$mn:00000BD8 var_48          = dword ptr -48h
.text$mn:00000BD8 var_44          = dword ptr -44h
.text$mn:00000BD8 var_40          = dword ptr -40h
.text$mn:00000BD8 var_3C          = dword ptr -3Ch
.text$mn:00000BD8 var_38          = dword ptr -38h
.text$mn:00000BD8 var_34          = dword ptr -34h
.text$mn:00000BD8 var_30          = dword ptr -30h
.text$mn:00000BD8 var_2C          = dword ptr -2Ch
.text$mn:00000BD8 var_28          = dword ptr -28h
.text$mn:00000BD8 var_24          = dword ptr -24h
.text$mn:00000BD8 var_20          = dword ptr -20h
.text$mn:00000BD8 var_1C          = dword ptr -1Ch
.text$mn:00000BD8 var_18          = dword ptr -18h
.text$mn:00000BD8 var_14          = dword ptr -14h
.text$mn:00000BD8 var_10          = dword ptr -10h
.text$mn:00000BD8 var_C           = dword ptr -0Ch
.text$mn:00000BD8 var_4           = dword ptr -4
.text$mn:00000BD8 arg_0           = dword ptr  8
.text$mn:00000BD8
.text$mn:00000BD8                 push    ebp
.text$mn:00000BD9                 mov     ebp, esp
.text$mn:00000BDB                 push    0FFFFFFFFh
.text$mn:00000BDD                 push    offset __ehhandler$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z
.text$mn:00000BE2                 mov     eax, large fs:0
.text$mn:00000BE8                 push    eax
.text$mn:00000BE9                 sub     esp, 44h
.text$mn:00000BEC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000BF1                 xor     eax, ebp
.text$mn:00000BF3                 push    eax
.text$mn:00000BF4                 lea     eax, [ebp+var_C]
.text$mn:00000BF7                 mov     large fs:0, eax
.text$mn:00000BFD                 mov     [ebp+var_34], ecx
.text$mn:00000C00                 mov     [ebp+var_10], 0
.text$mn:00000C07                 mov     eax, [ebp+arg_0]
.text$mn:00000C0A                 push    eax             ; wchar_t *
.text$mn:00000C0B                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00000C10                 add     esp, 4
.text$mn:00000C13                 mov     [ebp+arg_0], eax
.text$mn:00000C16                 cmp     [ebp+arg_0], 0
.text$mn:00000C1A                 jz      short loc_C31
.text$mn:00000C1C                 mov     ecx, [ebp+arg_0]
.text$mn:00000C1F                 movzx   edx, word ptr [ecx]
.text$mn:00000C22                 test    edx, edx
.text$mn:00000C24                 jz      short loc_C31
.text$mn:00000C26                 mov     eax, [ebp+arg_0]
.text$mn:00000C29                 movzx   ecx, word ptr [eax]
.text$mn:00000C2C                 cmp     ecx, 3Ch ; '<'
.text$mn:00000C2F                 jz      short loc_C38
.text$mn:00000C31
.text$mn:00000C31 loc_C31:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+42j
.text$mn:00000C31                                         ; TiXmlNode::Identify(wchar_t const *)+4Cj
.text$mn:00000C31                 xor     eax, eax
.text$mn:00000C33                 jmp     loc_E0C
.text$mn:00000C38 ; ---------------------------------------------------------------------------
.text$mn:00000C38
.text$mn:00000C38 loc_C38:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+57j
.text$mn:00000C38                 mov     ecx, [ebp+var_34] ; this
.text$mn:00000C3B                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:00000C40                 mov     [ebp+var_38], eax
.text$mn:00000C43                 mov     edx, [ebp+arg_0]
.text$mn:00000C46                 push    edx             ; wchar_t *
.text$mn:00000C47                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00000C4C                 add     esp, 4
.text$mn:00000C4F                 mov     [ebp+arg_0], eax
.text$mn:00000C52                 cmp     [ebp+arg_0], 0
.text$mn:00000C56                 jz      short loc_C62
.text$mn:00000C58                 mov     eax, [ebp+arg_0]
.text$mn:00000C5B                 movzx   ecx, word ptr [eax]
.text$mn:00000C5E                 test    ecx, ecx
.text$mn:00000C60                 jnz     short loc_C69
.text$mn:00000C62
.text$mn:00000C62 loc_C62:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+7Ej
.text$mn:00000C62                 xor     eax, eax
.text$mn:00000C64                 jmp     loc_E0C
.text$mn:00000C69 ; ---------------------------------------------------------------------------
.text$mn:00000C69
.text$mn:00000C69 loc_C69:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+88j
.text$mn:00000C69                 mov     [ebp+var_3C], offset $SG95793 ; "<?xml"
.text$mn:00000C70                 mov     [ebp+var_48], offset $SG95795 ; "<!--"
.text$mn:00000C77                 push    1               ; bool
.text$mn:00000C79                 mov     edx, [ebp+var_3C]
.text$mn:00000C7C                 push    edx             ; wchar_t *
.text$mn:00000C7D                 mov     eax, [ebp+arg_0]
.text$mn:00000C80                 push    eax             ; wchar_t *
.text$mn:00000C81                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00000C86                 add     esp, 0Ch
.text$mn:00000C89                 movzx   ecx, al
.text$mn:00000C8C                 test    ecx, ecx
.text$mn:00000C8E                 jz      short loc_CD9
.text$mn:00000C90                 push    98h ; 'ÿ'       ; unsigned int
.text$mn:00000C95                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000C9A                 add     esp, 4
.text$mn:00000C9D                 mov     [ebp+var_14], eax
.text$mn:00000CA0                 mov     [ebp+var_4], 0
.text$mn:00000CA7                 cmp     [ebp+var_14], 0
.text$mn:00000CAB                 jz      short loc_CBA
.text$mn:00000CAD                 mov     ecx, [ebp+var_14] ; this
.text$mn:00000CB0                 call    ??0TiXmlDeclaration@@QAE@XZ ; TiXmlDeclaration::TiXmlDeclaration(void)
.text$mn:00000CB5                 mov     [ebp+var_18], eax
.text$mn:00000CB8                 jmp     short loc_CC1
.text$mn:00000CBA ; ---------------------------------------------------------------------------
.text$mn:00000CBA
.text$mn:00000CBA loc_CBA:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+D3j
.text$mn:00000CBA                 mov     [ebp+var_18], 0
.text$mn:00000CC1
.text$mn:00000CC1 loc_CC1:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+E0j
.text$mn:00000CC1                 mov     edx, [ebp+var_18]
.text$mn:00000CC4                 mov     [ebp+var_40], edx
.text$mn:00000CC7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000CCE                 mov     eax, [ebp+var_40]
.text$mn:00000CD1                 mov     [ebp+var_10], eax
.text$mn:00000CD4                 jmp     loc_DE4
.text$mn:00000CD9 ; ---------------------------------------------------------------------------
.text$mn:00000CD9
.text$mn:00000CD9 loc_CD9:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+B6j
.text$mn:00000CD9                 mov     ecx, [ebp+arg_0]
.text$mn:00000CDC                 movzx   edx, word ptr [ecx+2]
.text$mn:00000CE0                 push    edx             ; C
.text$mn:00000CE1                 call    _isalpha
.text$mn:00000CE6                 add     esp, 4
.text$mn:00000CE9                 test    eax, eax
.text$mn:00000CEB                 jnz     short loc_CF9
.text$mn:00000CED                 mov     eax, [ebp+arg_0]
.text$mn:00000CF0                 movzx   ecx, word ptr [eax+2]
.text$mn:00000CF4                 cmp     ecx, 5Fh ; '_'
.text$mn:00000CF7                 jnz     short loc_D47
.text$mn:00000CF9
.text$mn:00000CF9 loc_CF9:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+113j
.text$mn:00000CF9                 push    94h ; 'ö'       ; unsigned int
.text$mn:00000CFE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000D03                 add     esp, 4
.text$mn:00000D06                 mov     [ebp+var_1C], eax
.text$mn:00000D09                 mov     [ebp+var_4], 1
.text$mn:00000D10                 cmp     [ebp+var_1C], 0
.text$mn:00000D14                 jz      short loc_D28
.text$mn:00000D16                 push    offset $SG95808 ; wchar_t *
.text$mn:00000D1B                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00000D1E                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:00000D23                 mov     [ebp+var_20], eax
.text$mn:00000D26                 jmp     short loc_D2F
.text$mn:00000D28 ; ---------------------------------------------------------------------------
.text$mn:00000D28
.text$mn:00000D28 loc_D28:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+13Cj
.text$mn:00000D28                 mov     [ebp+var_20], 0
.text$mn:00000D2F
.text$mn:00000D2F loc_D2F:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+14Ej
.text$mn:00000D2F                 mov     edx, [ebp+var_20]
.text$mn:00000D32                 mov     [ebp+var_44], edx
.text$mn:00000D35                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000D3C                 mov     eax, [ebp+var_44]
.text$mn:00000D3F                 mov     [ebp+var_10], eax
.text$mn:00000D42                 jmp     loc_DE4
.text$mn:00000D47 ; ---------------------------------------------------------------------------
.text$mn:00000D47
.text$mn:00000D47 loc_D47:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+11Fj
.text$mn:00000D47                 push    0               ; bool
.text$mn:00000D49                 mov     ecx, [ebp+var_48]
.text$mn:00000D4C                 push    ecx             ; wchar_t *
.text$mn:00000D4D                 mov     edx, [ebp+arg_0]
.text$mn:00000D50                 push    edx             ; wchar_t *
.text$mn:00000D51                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00000D56                 add     esp, 0Ch
.text$mn:00000D59                 movzx   eax, al
.text$mn:00000D5C                 test    eax, eax
.text$mn:00000D5E                 jz      short loc_DA3
.text$mn:00000D60                 push    44h ; 'D'       ; unsigned int
.text$mn:00000D62                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000D67                 add     esp, 4
.text$mn:00000D6A                 mov     [ebp+var_24], eax
.text$mn:00000D6D                 mov     [ebp+var_4], 2
.text$mn:00000D74                 cmp     [ebp+var_24], 0
.text$mn:00000D78                 jz      short loc_D87
.text$mn:00000D7A                 mov     ecx, [ebp+var_24] ; this
.text$mn:00000D7D                 call    ??0TiXmlComment@@QAE@XZ ; TiXmlComment::TiXmlComment(void)
.text$mn:00000D82                 mov     [ebp+var_28], eax
.text$mn:00000D85                 jmp     short loc_D8E
.text$mn:00000D87 ; ---------------------------------------------------------------------------
.text$mn:00000D87
.text$mn:00000D87 loc_D87:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1A0j
.text$mn:00000D87                 mov     [ebp+var_28], 0
.text$mn:00000D8E
.text$mn:00000D8E loc_D8E:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1ADj
.text$mn:00000D8E                 mov     ecx, [ebp+var_28]
.text$mn:00000D91                 mov     [ebp+var_4C], ecx
.text$mn:00000D94                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000D9B                 mov     edx, [ebp+var_4C]
.text$mn:00000D9E                 mov     [ebp+var_10], edx
.text$mn:00000DA1                 jmp     short loc_DE4
.text$mn:00000DA3 ; ---------------------------------------------------------------------------
.text$mn:00000DA3
.text$mn:00000DA3 loc_DA3:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+186j
.text$mn:00000DA3                 push    44h ; 'D'       ; unsigned int
.text$mn:00000DA5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000DAA                 add     esp, 4
.text$mn:00000DAD                 mov     [ebp+var_2C], eax
.text$mn:00000DB0                 mov     [ebp+var_4], 3
.text$mn:00000DB7                 cmp     [ebp+var_2C], 0
.text$mn:00000DBB                 jz      short loc_DCA
.text$mn:00000DBD                 mov     ecx, [ebp+var_2C] ; this
.text$mn:00000DC0                 call    ??0TiXmlUnknown@@QAE@XZ ; TiXmlUnknown::TiXmlUnknown(void)
.text$mn:00000DC5                 mov     [ebp+var_30], eax
.text$mn:00000DC8                 jmp     short loc_DD1
.text$mn:00000DCA ; ---------------------------------------------------------------------------
.text$mn:00000DCA
.text$mn:00000DCA loc_DCA:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1E3j
.text$mn:00000DCA                 mov     [ebp+var_30], 0
.text$mn:00000DD1
.text$mn:00000DD1 loc_DD1:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1F0j
.text$mn:00000DD1                 mov     eax, [ebp+var_30]
.text$mn:00000DD4                 mov     [ebp+var_50], eax
.text$mn:00000DD7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000DDE                 mov     ecx, [ebp+var_50]
.text$mn:00000DE1                 mov     [ebp+var_10], ecx
.text$mn:00000DE4
.text$mn:00000DE4 loc_DE4:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+FCj
.text$mn:00000DE4                                         ; TiXmlNode::Identify(wchar_t const *)+16Aj ...
.text$mn:00000DE4                 cmp     [ebp+var_10], 0
.text$mn:00000DE8                 jz      short loc_DF5
.text$mn:00000DEA                 mov     edx, [ebp+var_10]
.text$mn:00000DED                 mov     eax, [ebp+var_34]
.text$mn:00000DF0                 mov     [edx+0Ch], eax
.text$mn:00000DF3                 jmp     short loc_E09
.text$mn:00000DF5 ; ---------------------------------------------------------------------------
.text$mn:00000DF5
.text$mn:00000DF5 loc_DF5:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+210j
.text$mn:00000DF5                 cmp     [ebp+var_38], 0
.text$mn:00000DF9                 jz      short loc_E09
.text$mn:00000DFB                 push    0               ; struct TiXmlParsingData *
.text$mn:00000DFD                 push    0               ; wchar_t *
.text$mn:00000DFF                 push    3               ; int
.text$mn:00000E01                 mov     ecx, [ebp+var_38] ; this
.text$mn:00000E04                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00000E09
.text$mn:00000E09 loc_E09:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+21Bj
.text$mn:00000E09                                         ; TiXmlNode::Identify(wchar_t const *)+221j
.text$mn:00000E09                 mov     eax, [ebp+var_10]
.text$mn:00000E0C
.text$mn:00000E0C loc_E0C:                                ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+5Bj
.text$mn:00000E0C                                         ; TiXmlNode::Identify(wchar_t const *)+8Cj
.text$mn:00000E0C                 mov     ecx, [ebp+var_C]
.text$mn:00000E0F                 mov     large fs:0, ecx
.text$mn:00000E16                 pop     ecx
.text$mn:00000E17                 mov     esp, ebp
.text$mn:00000E19                 pop     ebp
.text$mn:00000E1A                 retn    4
.text$mn:00000E1A ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z endp
.text$mn:00000E1A
.text$mn:00000E1A ; ---------------------------------------------------------------------------
.text$mn:00000E1D                 db 0Bh dup(0CCh)
.text$mn:00000E28
.text$mn:00000E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E28
.text$mn:00000E28 ; Attributes: bp-based frame
.text$mn:00000E28
.text$mn:00000E28 ; const wchar_t *__thiscall TiXmlAttribute::Parse(TiXmlAttribute *this, const wchar_t *Str2, struct TiXmlParsingData *)
.text$mn:00000E28                 public ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00000E28 ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00000E28                                         ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+180p
.text$mn:00000E28                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+1EDp ...
.text$mn:00000E28
.text$mn:00000E28 var_10          = dword ptr -10h
.text$mn:00000E28 var_C           = dword ptr -0Ch
.text$mn:00000E28 lpString        = dword ptr -8
.text$mn:00000E28 var_4           = dword ptr -4
.text$mn:00000E28 Str2            = dword ptr  8
.text$mn:00000E28 arg_4           = dword ptr  0Ch
.text$mn:00000E28
.text$mn:00000E28                 push    ebp
.text$mn:00000E29                 mov     ebp, esp
.text$mn:00000E2B                 sub     esp, 10h
.text$mn:00000E2E                 mov     [ebp+var_4], ecx
.text$mn:00000E31                 mov     eax, [ebp+Str2]
.text$mn:00000E34                 push    eax             ; wchar_t *
.text$mn:00000E35                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00000E3A                 add     esp, 4
.text$mn:00000E3D                 mov     [ebp+Str2], eax
.text$mn:00000E40                 cmp     [ebp+Str2], 0
.text$mn:00000E44                 jz      short loc_E50
.text$mn:00000E46                 mov     ecx, [ebp+Str2]
.text$mn:00000E49                 movzx   edx, word ptr [ecx]
.text$mn:00000E4C                 test    edx, edx
.text$mn:00000E4E                 jnz     short loc_E57
.text$mn:00000E50
.text$mn:00000E50 loc_E50:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+1Cj
.text$mn:00000E50                 xor     eax, eax
.text$mn:00000E52                 jmp     loc_1082
.text$mn:00000E57 ; ---------------------------------------------------------------------------
.text$mn:00000E57
.text$mn:00000E57 loc_E57:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+26j
.text$mn:00000E57                 mov     [ebp+var_C], 4
.text$mn:00000E5E                 mov     eax, [ebp+var_4]
.text$mn:00000E61                 cmp     dword ptr [eax+0Ch], 0
.text$mn:00000E65                 jz      short loc_E75
.text$mn:00000E67                 mov     ecx, [ebp+var_4]
.text$mn:00000E6A                 mov     ecx, [ecx+0Ch]  ; this
.text$mn:00000E6D                 call    ?TabSize@TiXmlDocument@@QBEHXZ ; TiXmlDocument::TabSize(void)
.text$mn:00000E72                 mov     [ebp+var_C], eax
.text$mn:00000E75
.text$mn:00000E75 loc_E75:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+3Dj
.text$mn:00000E75                 cmp     [ebp+arg_4], 0
.text$mn:00000E79                 jz      short loc_E9D
.text$mn:00000E7B                 mov     edx, [ebp+Str2]
.text$mn:00000E7E                 push    edx             ; wchar_t *
.text$mn:00000E7F                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000E82                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:00000E87                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000E8A                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00000E8F                 mov     ecx, [eax]
.text$mn:00000E91                 mov     edx, [eax+4]
.text$mn:00000E94                 mov     eax, [ebp+var_4]
.text$mn:00000E97                 mov     [eax+4], ecx
.text$mn:00000E9A                 mov     [eax+8], edx
.text$mn:00000E9D
.text$mn:00000E9D loc_E9D:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+51j
.text$mn:00000E9D                 mov     ecx, [ebp+Str2]
.text$mn:00000EA0                 mov     [ebp+var_10], ecx
.text$mn:00000EA3                 mov     edx, [ebp+var_4]
.text$mn:00000EA6                 add     edx, 10h
.text$mn:00000EA9                 push    edx
.text$mn:00000EAA                 mov     eax, [ebp+Str2]
.text$mn:00000EAD                 push    eax
.text$mn:00000EAE                 call    ?ReadName@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00000EB3                 add     esp, 8
.text$mn:00000EB6                 mov     [ebp+Str2], eax
.text$mn:00000EB9                 cmp     [ebp+Str2], 0
.text$mn:00000EBD                 jz      short loc_EC9
.text$mn:00000EBF                 mov     ecx, [ebp+Str2]
.text$mn:00000EC2                 movzx   edx, word ptr [ecx]
.text$mn:00000EC5                 test    edx, edx
.text$mn:00000EC7                 jnz     short loc_EEE
.text$mn:00000EC9
.text$mn:00000EC9 loc_EC9:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+95j
.text$mn:00000EC9                 mov     eax, [ebp+var_4]
.text$mn:00000ECC                 cmp     dword ptr [eax+0Ch], 0
.text$mn:00000ED0                 jz      short loc_EE7
.text$mn:00000ED2                 mov     ecx, [ebp+arg_4]
.text$mn:00000ED5                 push    ecx             ; struct TiXmlParsingData *
.text$mn:00000ED6                 mov     edx, [ebp+var_10]
.text$mn:00000ED9                 push    edx             ; wchar_t *
.text$mn:00000EDA                 push    7               ; int
.text$mn:00000EDC                 mov     eax, [ebp+var_4]
.text$mn:00000EDF                 mov     ecx, [eax+0Ch]  ; this
.text$mn:00000EE2                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00000EE7
.text$mn:00000EE7 loc_EE7:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+A8j
.text$mn:00000EE7                 xor     eax, eax
.text$mn:00000EE9                 jmp     loc_1082
.text$mn:00000EEE ; ---------------------------------------------------------------------------
.text$mn:00000EEE
.text$mn:00000EEE loc_EEE:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+9Fj
.text$mn:00000EEE                 mov     ecx, [ebp+Str2]
.text$mn:00000EF1                 push    ecx             ; wchar_t *
.text$mn:00000EF2                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00000EF7                 add     esp, 4
.text$mn:00000EFA                 mov     [ebp+Str2], eax
.text$mn:00000EFD                 cmp     [ebp+Str2], 0
.text$mn:00000F01                 jz      short loc_F18
.text$mn:00000F03                 mov     edx, [ebp+Str2]
.text$mn:00000F06                 movzx   eax, word ptr [edx]
.text$mn:00000F09                 test    eax, eax
.text$mn:00000F0B                 jz      short loc_F18
.text$mn:00000F0D                 mov     ecx, [ebp+Str2]
.text$mn:00000F10                 movzx   edx, word ptr [ecx]
.text$mn:00000F13                 cmp     edx, 3Dh ; '='
.text$mn:00000F16                 jz      short loc_F3D
.text$mn:00000F18
.text$mn:00000F18 loc_F18:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+D9j
.text$mn:00000F18                                         ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+E3j
.text$mn:00000F18                 mov     eax, [ebp+var_4]
.text$mn:00000F1B                 cmp     dword ptr [eax+0Ch], 0
.text$mn:00000F1F                 jz      short loc_F36
.text$mn:00000F21                 mov     ecx, [ebp+arg_4]
.text$mn:00000F24                 push    ecx             ; struct TiXmlParsingData *
.text$mn:00000F25                 mov     edx, [ebp+Str2]
.text$mn:00000F28                 push    edx             ; wchar_t *
.text$mn:00000F29                 push    7               ; int
.text$mn:00000F2B                 mov     eax, [ebp+var_4]
.text$mn:00000F2E                 mov     ecx, [eax+0Ch]  ; this
.text$mn:00000F31                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00000F36
.text$mn:00000F36 loc_F36:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+F7j
.text$mn:00000F36                 xor     eax, eax
.text$mn:00000F38                 jmp     loc_1082
.text$mn:00000F3D ; ---------------------------------------------------------------------------
.text$mn:00000F3D
.text$mn:00000F3D loc_F3D:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+EEj
.text$mn:00000F3D                 mov     ecx, [ebp+Str2]
.text$mn:00000F40                 add     ecx, 2
.text$mn:00000F43                 mov     [ebp+Str2], ecx
.text$mn:00000F46                 mov     edx, [ebp+Str2]
.text$mn:00000F49                 push    edx             ; wchar_t *
.text$mn:00000F4A                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00000F4F                 add     esp, 4
.text$mn:00000F52                 mov     [ebp+Str2], eax
.text$mn:00000F55                 cmp     [ebp+Str2], 0
.text$mn:00000F59                 jz      short loc_F65
.text$mn:00000F5B                 mov     eax, [ebp+Str2]
.text$mn:00000F5E                 movzx   ecx, word ptr [eax]
.text$mn:00000F61                 test    ecx, ecx
.text$mn:00000F63                 jnz     short loc_F8A
.text$mn:00000F65
.text$mn:00000F65 loc_F65:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+131j
.text$mn:00000F65                 mov     edx, [ebp+var_4]
.text$mn:00000F68                 cmp     dword ptr [edx+0Ch], 0
.text$mn:00000F6C                 jz      short loc_F83
.text$mn:00000F6E                 mov     eax, [ebp+arg_4]
.text$mn:00000F71                 push    eax             ; struct TiXmlParsingData *
.text$mn:00000F72                 mov     ecx, [ebp+Str2]
.text$mn:00000F75                 push    ecx             ; wchar_t *
.text$mn:00000F76                 push    7               ; int
.text$mn:00000F78                 mov     edx, [ebp+var_4]
.text$mn:00000F7B                 mov     ecx, [edx+0Ch]  ; this
.text$mn:00000F7E                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00000F83
.text$mn:00000F83 loc_F83:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+144j
.text$mn:00000F83                 xor     eax, eax
.text$mn:00000F85                 jmp     loc_1082
.text$mn:00000F8A ; ---------------------------------------------------------------------------
.text$mn:00000F8A
.text$mn:00000F8A loc_F8A:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+13Bj
.text$mn:00000F8A                 mov     eax, [ebp+Str2]
.text$mn:00000F8D                 movzx   ecx, word ptr [eax]
.text$mn:00000F90                 cmp     ecx, 27h ; '''
.text$mn:00000F93                 jnz     short loc_FC8
.text$mn:00000F95                 mov     edx, [ebp+Str2]
.text$mn:00000F98                 add     edx, 2
.text$mn:00000F9B                 mov     [ebp+Str2], edx
.text$mn:00000F9E                 mov     [ebp+lpString], offset $SG96052
.text$mn:00000FA5                 push    0               ; char
.text$mn:00000FA7                 mov     eax, [ebp+lpString]
.text$mn:00000FAA                 push    eax             ; lpString
.text$mn:00000FAB                 push    0               ; char
.text$mn:00000FAD                 mov     ecx, [ebp+var_4]
.text$mn:00000FB0                 add     ecx, 2Ch ; ','
.text$mn:00000FB3                 push    ecx             ; int
.text$mn:00000FB4                 mov     edx, [ebp+Str2]
.text$mn:00000FB7                 push    edx             ; Str2
.text$mn:00000FB8                 call    ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)
.text$mn:00000FBD                 add     esp, 14h
.text$mn:00000FC0                 mov     [ebp+Str2], eax
.text$mn:00000FC3                 jmp     loc_107F
.text$mn:00000FC8 ; ---------------------------------------------------------------------------
.text$mn:00000FC8
.text$mn:00000FC8 loc_FC8:                                ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+16Bj
.text$mn:00000FC8                 mov     eax, [ebp+Str2]
.text$mn:00000FCB                 movzx   ecx, word ptr [eax]
.text$mn:00000FCE                 cmp     ecx, 22h ; '"'
.text$mn:00000FD1                 jnz     short loc_1003
.text$mn:00000FD3                 mov     edx, [ebp+Str2]
.text$mn:00000FD6                 add     edx, 2
.text$mn:00000FD9                 mov     [ebp+Str2], edx
.text$mn:00000FDC                 mov     [ebp+lpString], offset $SG96055
.text$mn:00000FE3                 push    0               ; char
.text$mn:00000FE5                 mov     eax, [ebp+lpString]
.text$mn:00000FE8                 push    eax             ; lpString
.text$mn:00000FE9                 push    0               ; char
.text$mn:00000FEB                 mov     ecx, [ebp+var_4]
.text$mn:00000FEE                 add     ecx, 2Ch ; ','
.text$mn:00000FF1                 push    ecx             ; int
.text$mn:00000FF2                 mov     edx, [ebp+Str2]
.text$mn:00000FF5                 push    edx             ; Str2
.text$mn:00000FF6                 call    ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)
.text$mn:00000FFB                 add     esp, 14h
.text$mn:00000FFE                 mov     [ebp+Str2], eax
.text$mn:00001001                 jmp     short loc_107F
.text$mn:00001003 ; ---------------------------------------------------------------------------
.text$mn:00001003
.text$mn:00001003 loc_1003:                               ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+1A9j
.text$mn:00001003                 push    offset $SG96057 ; Str
.text$mn:00001008                 mov     ecx, [ebp+var_4]
.text$mn:0000100B                 add     ecx, 2Ch ; ','
.text$mn:0000100E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001013
.text$mn:00001013 loc_1013:                               ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+255j
.text$mn:00001013                 cmp     [ebp+Str2], 0
.text$mn:00001017                 jz      short loc_107F
.text$mn:00001019                 mov     eax, [ebp+Str2]
.text$mn:0000101C                 movzx   ecx, word ptr [eax]
.text$mn:0000101F                 test    ecx, ecx
.text$mn:00001021                 jz      short loc_107F
.text$mn:00001023                 mov     edx, [ebp+Str2]
.text$mn:00001026                 movzx   eax, word ptr [edx]
.text$mn:00001029                 push    eax             ; C
.text$mn:0000102A                 call    _isspace
.text$mn:0000102F                 add     esp, 4
.text$mn:00001032                 test    eax, eax
.text$mn:00001034                 jnz     short loc_107F
.text$mn:00001036                 mov     ecx, [ebp+Str2]
.text$mn:00001039                 movzx   edx, word ptr [ecx]
.text$mn:0000103C                 cmp     edx, 0Ah
.text$mn:0000103F                 jz      short loc_107F
.text$mn:00001041                 mov     eax, [ebp+Str2]
.text$mn:00001044                 movzx   ecx, word ptr [eax]
.text$mn:00001047                 cmp     ecx, 0Dh
.text$mn:0000104A                 jz      short loc_107F
.text$mn:0000104C                 mov     edx, [ebp+Str2]
.text$mn:0000104F                 movzx   eax, word ptr [edx]
.text$mn:00001052                 cmp     eax, 2Fh ; '/'
.text$mn:00001055                 jz      short loc_107F
.text$mn:00001057                 mov     ecx, [ebp+Str2]
.text$mn:0000105A                 movzx   edx, word ptr [ecx]
.text$mn:0000105D                 cmp     edx, 3Eh ; '>'
.text$mn:00001060                 jz      short loc_107F
.text$mn:00001062                 mov     eax, [ebp+Str2]
.text$mn:00001065                 movzx   ecx, word ptr [eax]
.text$mn:00001068                 push    ecx
.text$mn:00001069                 mov     ecx, [ebp+var_4]
.text$mn:0000106C                 add     ecx, 2Ch ; ','
.text$mn:0000106F                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00001074                 mov     edx, [ebp+Str2]
.text$mn:00001077                 add     edx, 2
.text$mn:0000107A                 mov     [ebp+Str2], edx
.text$mn:0000107D                 jmp     short loc_1013
.text$mn:0000107F ; ---------------------------------------------------------------------------
.text$mn:0000107F
.text$mn:0000107F loc_107F:                               ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+19Bj
.text$mn:0000107F                                         ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+1D9j ...
.text$mn:0000107F                 mov     eax, [ebp+Str2]
.text$mn:00001082
.text$mn:00001082 loc_1082:                               ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+2Aj
.text$mn:00001082                                         ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+C1j ...
.text$mn:00001082                 mov     esp, ebp
.text$mn:00001084                 pop     ebp
.text$mn:00001085                 retn    8
.text$mn:00001085 ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00001085
.text$mn:00001088
.text$mn:00001088 ; =============== S U B R O U T I N E =======================================
.text$mn:00001088
.text$mn:00001088 ; Attributes: bp-based frame
.text$mn:00001088
.text$mn:00001088 ; protected: virtual void __thiscall TiXmlElement::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001088                 public ?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001088 ?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001088
.text$mn:00001088 var_80          = dword ptr -80h
.text$mn:00001088 var_7C          = dword ptr -7Ch
.text$mn:00001088 var_78          = dword ptr -78h
.text$mn:00001088 var_74          = dword ptr -74h
.text$mn:00001088 var_70          = dword ptr -70h
.text$mn:00001088 var_6C          = dword ptr -6Ch
.text$mn:00001088 var_68          = dword ptr -68h
.text$mn:00001088 var_64          = dword ptr -64h
.text$mn:00001088 var_60          = dword ptr -60h
.text$mn:00001088 C               = dword ptr -5Ch
.text$mn:00001088 var_56          = byte ptr -56h
.text$mn:00001088 var_55          = byte ptr -55h
.text$mn:00001088 var_54          = byte ptr -54h
.text$mn:00001088 var_10          = dword ptr -10h
.text$mn:00001088 var_C           = dword ptr -0Ch
.text$mn:00001088 var_4           = dword ptr -4
.text$mn:00001088 arg_0           = dword ptr  8
.text$mn:00001088 arg_4           = dword ptr  0Ch
.text$mn:00001088
.text$mn:00001088                 push    ebp
.text$mn:00001089                 mov     ebp, esp
.text$mn:0000108B                 push    0FFFFFFFFh
.text$mn:0000108D                 push    offset __ehhandler$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001092                 mov     eax, large fs:0
.text$mn:00001098                 push    eax
.text$mn:00001099                 sub     esp, 74h
.text$mn:0000109C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000010A1                 xor     eax, ebp
.text$mn:000010A3                 mov     [ebp+var_10], eax
.text$mn:000010A6                 push    eax
.text$mn:000010A7                 lea     eax, [ebp+var_C]
.text$mn:000010AA                 mov     large fs:0, eax
.text$mn:000010B0                 mov     [ebp+var_70], ecx
.text$mn:000010B3
.text$mn:000010B3 loc_10B3:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_10EFj
.text$mn:000010B3                 mov     eax, [ebp+arg_0]
.text$mn:000010B6                 mov     ecx, [eax]
.text$mn:000010B8                 mov     edx, [ebp+arg_0]
.text$mn:000010BB                 add     edx, [ecx+4]
.text$mn:000010BE                 mov     ecx, edx        ; this
.text$mn:000010C0                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:000010C5                 movzx   eax, al
.text$mn:000010C8                 test    eax, eax
.text$mn:000010CA                 jz      short loc_10F1
.text$mn:000010CC                 mov     ecx, [ebp+arg_0]
.text$mn:000010CF                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:000010D4                 movzx   ecx, ax
.text$mn:000010D7                 mov     [ebp+var_6C], ecx
.text$mn:000010DA                 movzx   edx, word ptr [ebp+var_6C]
.text$mn:000010DE                 push    edx
.text$mn:000010DF                 mov     ecx, [ebp+arg_4]
.text$mn:000010E2                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:000010E7                 cmp     [ebp+var_6C], 3Eh ; '>'
.text$mn:000010EB                 jnz     short loc_10EF
.text$mn:000010ED                 jmp     short loc_10F1
.text$mn:000010EF ; ---------------------------------------------------------------------------
.text$mn:000010EF
.text$mn:000010EF loc_10EF:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+63j
.text$mn:000010EF                 jmp     short loc_10B3
.text$mn:000010F1 ; ---------------------------------------------------------------------------
.text$mn:000010F1
.text$mn:000010F1 loc_10F1:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+42j
.text$mn:000010F1                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+65j
.text$mn:000010F1                 mov     ecx, [ebp+arg_4]
.text$mn:000010F4                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000010F9                 cmp     eax, 3
.text$mn:000010FC                 jnb     short loc_1103
.text$mn:000010FE                 jmp     loc_1358
.text$mn:00001103 ; ---------------------------------------------------------------------------
.text$mn:00001103
.text$mn:00001103 loc_1103:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+74j
.text$mn:00001103                 mov     ecx, [ebp+arg_4]
.text$mn:00001106                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000110B                 sub     eax, 1
.text$mn:0000110E                 push    eax
.text$mn:0000110F                 mov     ecx, [ebp+arg_4]
.text$mn:00001112                 call    ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)
.text$mn:00001117                 movzx   eax, word ptr [eax]
.text$mn:0000111A                 cmp     eax, 3Eh ; '>'
.text$mn:0000111D                 jnz     short loc_1145
.text$mn:0000111F                 mov     ecx, [ebp+arg_4]
.text$mn:00001122                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001127                 sub     eax, 2
.text$mn:0000112A                 push    eax
.text$mn:0000112B                 mov     ecx, [ebp+arg_4]
.text$mn:0000112E                 call    ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)
.text$mn:00001133                 movzx   ecx, word ptr [eax]
.text$mn:00001136                 cmp     ecx, 2Fh ; '/'
.text$mn:00001139                 jnz     short loc_1145
.text$mn:0000113B                 jmp     loc_1358
.text$mn:00001140 ; ---------------------------------------------------------------------------
.text$mn:00001140                 jmp     loc_1358
.text$mn:00001145 ; ---------------------------------------------------------------------------
.text$mn:00001145
.text$mn:00001145 loc_1145:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+95j
.text$mn:00001145                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+B1j
.text$mn:00001145                 mov     ecx, [ebp+arg_4]
.text$mn:00001148                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000114D                 sub     eax, 1
.text$mn:00001150                 push    eax
.text$mn:00001151                 mov     ecx, [ebp+arg_4]
.text$mn:00001154                 call    ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)
.text$mn:00001159                 movzx   edx, word ptr [eax]
.text$mn:0000115C                 cmp     edx, 3Eh ; '>'
.text$mn:0000115F                 jnz     loc_1358
.text$mn:00001165
.text$mn:00001165 loc_1165:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+147j
.text$mn:00001165                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_1353j
.text$mn:00001165                 mov     eax, [ebp+arg_4]
.text$mn:00001168                 push    eax
.text$mn:00001169                 mov     ecx, [ebp+arg_0]
.text$mn:0000116C                 push    ecx
.text$mn:0000116D                 call    ?StreamWhiteSpace@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001172                 add     esp, 8
.text$mn:00001175                 mov     edx, [ebp+arg_0]
.text$mn:00001178                 mov     eax, [edx]
.text$mn:0000117A                 mov     ecx, [ebp+arg_0]
.text$mn:0000117D                 add     ecx, [eax+4]    ; this
.text$mn:00001180                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00001185                 movzx   ecx, al
.text$mn:00001188                 test    ecx, ecx
.text$mn:0000118A                 jz      short loc_11D1
.text$mn:0000118C                 mov     ecx, [ebp+arg_0]
.text$mn:0000118F                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:00001194                 movzx   edx, ax
.text$mn:00001197                 cmp     edx, 3Ch ; '<'
.text$mn:0000119A                 jz      short loc_11D1
.text$mn:0000119C                 push    offset $SG95847 ; wchar_t *
.text$mn:000011A1                 lea     ecx, [ebp+var_54]
.text$mn:000011A4                 call    ??0TiXmlText@@QAE@PB_W@Z ; TiXmlText::TiXmlText(wchar_t const *)
.text$mn:000011A9                 mov     [ebp+var_4], 0
.text$mn:000011B0                 mov     eax, [ebp+arg_4]
.text$mn:000011B3                 push    eax
.text$mn:000011B4                 mov     ecx, [ebp+arg_0]
.text$mn:000011B7                 push    ecx
.text$mn:000011B8                 lea     ecx, [ebp+var_54]
.text$mn:000011BB                 call    ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000011C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000011C7                 lea     ecx, [ebp+var_54] ; this
.text$mn:000011CA                 call    ??1TiXmlText@@UAE@XZ ; TiXmlText::~TiXmlText(void)
.text$mn:000011CF                 jmp     short loc_1165
.text$mn:000011D1 ; ---------------------------------------------------------------------------
.text$mn:000011D1
.text$mn:000011D1 loc_11D1:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+102j
.text$mn:000011D1                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+112j
.text$mn:000011D1                 mov     edx, [ebp+arg_0]
.text$mn:000011D4                 mov     eax, [edx]
.text$mn:000011D6                 mov     ecx, [ebp+arg_0]
.text$mn:000011D9                 add     ecx, [eax+4]    ; this
.text$mn:000011DC                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:000011E1                 movzx   ecx, al
.text$mn:000011E4                 test    ecx, ecx
.text$mn:000011E6                 jnz     short loc_11ED
.text$mn:000011E8                 jmp     loc_1358
.text$mn:000011ED ; ---------------------------------------------------------------------------
.text$mn:000011ED
.text$mn:000011ED loc_11ED:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+15Ej
.text$mn:000011ED                 mov     ecx, [ebp+arg_0]
.text$mn:000011F0                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:000011F5                 movzx   edx, ax
.text$mn:000011F8                 cmp     edx, 3Ch ; '<'
.text$mn:000011FB                 jz      short loc_1214
.text$mn:000011FD                 push    26Dh            ; Line
.text$mn:00001202                 push    offset $SG95850 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00001207                 push    offset $SG95851 ; "in->peek() == '<'"
.text$mn:0000120C                 call    __wassert
.text$mn:00001211 ; ---------------------------------------------------------------------------
.text$mn:00001211                 add     esp, 0Ch
.text$mn:00001214
.text$mn:00001214 loc_1214:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+173j
.text$mn:00001214                 mov     ecx, [ebp+arg_4]
.text$mn:00001217                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000121C                 mov     [ebp+var_7C], eax
.text$mn:0000121F                 mov     [ebp+var_55], 0
.text$mn:00001223                 mov     [ebp+var_56], 0
.text$mn:00001227
.text$mn:00001227 loc_1227:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_129Dj
.text$mn:00001227                 mov     ecx, [ebp+arg_0]
.text$mn:0000122A                 mov     edx, [ecx]
.text$mn:0000122C                 mov     ecx, [ebp+arg_0]
.text$mn:0000122F                 add     ecx, [edx+4]    ; this
.text$mn:00001232                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00001237                 movzx   eax, al
.text$mn:0000123A                 test    eax, eax
.text$mn:0000123C                 jnz     short loc_1243
.text$mn:0000123E                 jmp     loc_1358
.text$mn:00001243 ; ---------------------------------------------------------------------------
.text$mn:00001243
.text$mn:00001243 loc_1243:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1B4j
.text$mn:00001243                 mov     ecx, [ebp+arg_0]
.text$mn:00001246                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:0000124B                 movzx   ecx, ax
.text$mn:0000124E                 mov     [ebp+C], ecx
.text$mn:00001251                 cmp     [ebp+C], 3Eh ; '>'
.text$mn:00001255                 jnz     short loc_1259
.text$mn:00001257                 jmp     short loc_129F
.text$mn:00001259 ; ---------------------------------------------------------------------------
.text$mn:00001259
.text$mn:00001259 loc_1259:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1CDj
.text$mn:00001259                 movzx   edx, word ptr [ebp+C]
.text$mn:0000125D                 push    edx
.text$mn:0000125E                 mov     ecx, [ebp+arg_4]
.text$mn:00001261                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00001266                 mov     ecx, [ebp+arg_0]
.text$mn:00001269                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:0000126E                 movzx   eax, [ebp+var_56]
.text$mn:00001272                 test    eax, eax
.text$mn:00001274                 jnz     short loc_129D
.text$mn:00001276                 cmp     [ebp+C], 3Ch ; '<'
.text$mn:0000127A                 jz      short loc_129D
.text$mn:0000127C                 mov     ecx, [ebp+C]
.text$mn:0000127F                 push    ecx             ; C
.text$mn:00001280                 call    ?IsWhiteSpace@TiXmlBase@@KA_NH@Z ; TiXmlBase::IsWhiteSpace(int)
.text$mn:00001285                 add     esp, 4
.text$mn:00001288                 movzx   edx, al
.text$mn:0000128B                 test    edx, edx
.text$mn:0000128D                 jnz     short loc_129D
.text$mn:0000128F                 mov     [ebp+var_56], 1
.text$mn:00001293                 cmp     [ebp+C], 2Fh ; '/'
.text$mn:00001297                 jnz     short loc_129D
.text$mn:00001299                 mov     [ebp+var_55], 1
.text$mn:0000129D
.text$mn:0000129D loc_129D:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1ECj
.text$mn:0000129D                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1F2j ...
.text$mn:0000129D                 jmp     short loc_1227
.text$mn:0000129F ; ---------------------------------------------------------------------------
.text$mn:0000129F
.text$mn:0000129F loc_129F:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1CFj
.text$mn:0000129F                 movzx   eax, [ebp+var_55]
.text$mn:000012A3                 test    eax, eax
.text$mn:000012A5                 jz      short loc_12E3
.text$mn:000012A7                 mov     ecx, [ebp+arg_0]
.text$mn:000012AA                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:000012AF                 movzx   ecx, ax
.text$mn:000012B2                 mov     [ebp+var_68], ecx
.text$mn:000012B5                 cmp     [ebp+var_68], 3Eh ; '>'
.text$mn:000012B9                 jz      short loc_12D2
.text$mn:000012BB                 push    28Ch            ; Line
.text$mn:000012C0                 push    offset $SG95867 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:000012C5                 push    offset $SG95868 ; "c == '>'"
.text$mn:000012CA                 call    __wassert
.text$mn:000012CF ; ---------------------------------------------------------------------------
.text$mn:000012CF                 add     esp, 0Ch
.text$mn:000012D2
.text$mn:000012D2 loc_12D2:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+231j
.text$mn:000012D2                 movzx   eax, word ptr [ebp+var_68]
.text$mn:000012D6                 push    eax
.text$mn:000012D7                 mov     ecx, [ebp+arg_4]
.text$mn:000012DA                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:000012DF                 jmp     short loc_1358
.text$mn:000012E1 ; ---------------------------------------------------------------------------
.text$mn:000012E1                 jmp     short loc_1353
.text$mn:000012E3 ; ---------------------------------------------------------------------------
.text$mn:000012E3
.text$mn:000012E3 loc_12E3:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21Dj
.text$mn:000012E3                 mov     ecx, [ebp+arg_4]
.text$mn:000012E6                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000012EB                 mov     ecx, [ebp+var_7C]
.text$mn:000012EE                 lea     edx, [eax+ecx*2]
.text$mn:000012F1                 mov     [ebp+var_80], edx
.text$mn:000012F4                 mov     eax, [ebp+var_80]
.text$mn:000012F7                 push    eax             ; wchar_t *
.text$mn:000012F8                 mov     ecx, [ebp+var_70] ; this
.text$mn:000012FB                 call    ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z ; TiXmlNode::Identify(wchar_t const *)
.text$mn:00001300                 mov     [ebp+var_60], eax
.text$mn:00001303                 cmp     [ebp+var_60], 0
.text$mn:00001307                 jnz     short loc_130B
.text$mn:00001309                 jmp     short loc_1358
.text$mn:0000130B ; ---------------------------------------------------------------------------
.text$mn:0000130B
.text$mn:0000130B loc_130B:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+27Fj
.text$mn:0000130B                 mov     ecx, [ebp+arg_4]
.text$mn:0000130E                 push    ecx
.text$mn:0000130F                 mov     edx, [ebp+arg_0]
.text$mn:00001312                 push    edx
.text$mn:00001313                 mov     eax, [ebp+var_60]
.text$mn:00001316                 mov     edx, [eax]
.text$mn:00001318                 mov     ecx, [ebp+var_60]
.text$mn:0000131B                 mov     eax, [edx+18h]
.text$mn:0000131E                 call    eax
.text$mn:00001320                 mov     ecx, [ebp+var_60]
.text$mn:00001323                 mov     [ebp+var_74], ecx
.text$mn:00001326                 mov     edx, [ebp+var_74]
.text$mn:00001329                 mov     [ebp+var_64], edx
.text$mn:0000132C                 cmp     [ebp+var_64], 0
.text$mn:00001330                 jz      short loc_1345
.text$mn:00001332                 push    1
.text$mn:00001334                 mov     eax, [ebp+var_64]
.text$mn:00001337                 mov     edx, [eax]
.text$mn:00001339                 mov     ecx, [ebp+var_64]
.text$mn:0000133C                 mov     eax, [edx]
.text$mn:0000133E                 call    eax
.text$mn:00001340                 mov     [ebp+var_78], eax
.text$mn:00001343                 jmp     short loc_134C
.text$mn:00001345 ; ---------------------------------------------------------------------------
.text$mn:00001345
.text$mn:00001345 loc_1345:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+2A8j
.text$mn:00001345                 mov     [ebp+var_78], 0
.text$mn:0000134C
.text$mn:0000134C loc_134C:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+2BBj
.text$mn:0000134C                 mov     [ebp+var_60], 0
.text$mn:00001353
.text$mn:00001353 loc_1353:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+259j
.text$mn:00001353                 jmp     loc_1165
.text$mn:00001358 ; ---------------------------------------------------------------------------
.text$mn:00001358
.text$mn:00001358 loc_1358:                               ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+76j
.text$mn:00001358                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+B3j ...
.text$mn:00001358                 mov     ecx, [ebp+var_C]
.text$mn:0000135B                 mov     large fs:0, ecx
.text$mn:00001362                 pop     ecx
.text$mn:00001363                 mov     ecx, [ebp+var_10]
.text$mn:00001366                 xor     ecx, ebp
.text$mn:00001368                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000136D                 mov     esp, ebp
.text$mn:0000136F                 pop     ebp
.text$mn:00001370                 retn    8
.text$mn:00001370 ?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001370
.text$mn:00001370 ; ---------------------------------------------------------------------------
.text$mn:00001373                 align 8
.text$mn:00001378
.text$mn:00001378 ; =============== S U B R O U T I N E =======================================
.text$mn:00001378
.text$mn:00001378 ; Attributes: bp-based frame
.text$mn:00001378
.text$mn:00001378 ; const wchar_t *__thiscall TiXmlElement::Parse(TiXmlElement *this, const wchar_t *, struct TiXmlParsingData *)
.text$mn:00001378                 public ?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001378 ?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00001378
.text$mn:00001378 var_90          = dword ptr -90h
.text$mn:00001378 var_8C          = dword ptr -8Ch
.text$mn:00001378 var_88          = dword ptr -88h
.text$mn:00001378 var_84          = dword ptr -84h
.text$mn:00001378 var_80          = dword ptr -80h
.text$mn:00001378 var_7C          = dword ptr -7Ch
.text$mn:00001378 var_78          = dword ptr -78h
.text$mn:00001378 var_74          = dword ptr -74h
.text$mn:00001378 var_70          = dword ptr -70h
.text$mn:00001378 var_6C          = dword ptr -6Ch
.text$mn:00001378 var_68          = dword ptr -68h
.text$mn:00001378 var_64          = dword ptr -64h
.text$mn:00001378 var_60          = dword ptr -60h
.text$mn:00001378 var_5C          = dword ptr -5Ch
.text$mn:00001378 var_58          = dword ptr -58h
.text$mn:00001378 var_54          = dword ptr -54h
.text$mn:00001378 var_50          = dword ptr -50h
.text$mn:00001378 var_4C          = dword ptr -4Ch
.text$mn:00001378 var_48          = dword ptr -48h
.text$mn:00001378 var_44          = dword ptr -44h
.text$mn:00001378 var_40          = dword ptr -40h
.text$mn:00001378 var_3C          = dword ptr -3Ch
.text$mn:00001378 var_38          = dword ptr -38h
.text$mn:00001378 var_34          = dword ptr -34h
.text$mn:00001378 var_30          = dword ptr -30h
.text$mn:00001378 var_2C          = byte ptr -2Ch
.text$mn:00001378 var_10          = dword ptr -10h
.text$mn:00001378 var_C           = dword ptr -0Ch
.text$mn:00001378 var_4           = dword ptr -4
.text$mn:00001378 arg_0           = dword ptr  8
.text$mn:00001378 arg_4           = dword ptr  0Ch
.text$mn:00001378
.text$mn:00001378                 push    ebp
.text$mn:00001379                 mov     ebp, esp
.text$mn:0000137B                 push    0FFFFFFFFh
.text$mn:0000137D                 push    offset __ehhandler$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001382                 mov     eax, large fs:0
.text$mn:00001388                 push    eax
.text$mn:00001389                 sub     esp, 84h
.text$mn:0000138F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001394                 xor     eax, ebp
.text$mn:00001396                 mov     [ebp+var_10], eax
.text$mn:00001399                 push    eax
.text$mn:0000139A                 lea     eax, [ebp+var_C]
.text$mn:0000139D                 mov     large fs:0, eax
.text$mn:000013A3                 mov     [ebp+var_38], ecx
.text$mn:000013A6                 mov     eax, [ebp+arg_0]
.text$mn:000013A9                 push    eax             ; wchar_t *
.text$mn:000013AA                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:000013AF                 add     esp, 4
.text$mn:000013B2                 mov     [ebp+arg_0], eax
.text$mn:000013B5                 mov     ecx, [ebp+var_38] ; this
.text$mn:000013B8                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:000013BD                 mov     [ebp+var_30], eax
.text$mn:000013C0                 cmp     [ebp+arg_0], 0
.text$mn:000013C4                 jz      short loc_13D0
.text$mn:000013C6                 mov     ecx, [ebp+arg_0]
.text$mn:000013C9                 movzx   edx, word ptr [ecx]
.text$mn:000013CC                 test    edx, edx
.text$mn:000013CE                 jnz     short loc_13EB
.text$mn:000013D0
.text$mn:000013D0 loc_13D0:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+4Cj
.text$mn:000013D0                 cmp     [ebp+var_30], 0
.text$mn:000013D4                 jz      short loc_13E4
.text$mn:000013D6                 push    0               ; struct TiXmlParsingData *
.text$mn:000013D8                 push    0               ; wchar_t *
.text$mn:000013DA                 push    4               ; int
.text$mn:000013DC                 mov     ecx, [ebp+var_30] ; this
.text$mn:000013DF                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:000013E4
.text$mn:000013E4 loc_13E4:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+5Cj
.text$mn:000013E4                 xor     eax, eax
.text$mn:000013E6                 jmp     loc_1865
.text$mn:000013EB ; ---------------------------------------------------------------------------
.text$mn:000013EB
.text$mn:000013EB loc_13EB:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+56j
.text$mn:000013EB                 cmp     [ebp+arg_4], 0
.text$mn:000013EF                 jz      short loc_1413
.text$mn:000013F1                 mov     eax, [ebp+arg_0]
.text$mn:000013F4                 push    eax             ; wchar_t *
.text$mn:000013F5                 mov     ecx, [ebp+arg_4] ; this
.text$mn:000013F8                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:000013FD                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001400                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00001405                 mov     ecx, [eax]
.text$mn:00001407                 mov     edx, [eax+4]
.text$mn:0000140A                 mov     eax, [ebp+var_38]
.text$mn:0000140D                 mov     [eax+4], ecx
.text$mn:00001410                 mov     [eax+8], edx
.text$mn:00001413
.text$mn:00001413 loc_1413:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+77j
.text$mn:00001413                 mov     ecx, [ebp+arg_0]
.text$mn:00001416                 movzx   edx, word ptr [ecx]
.text$mn:00001419                 cmp     edx, 3Ch ; '<'
.text$mn:0000141C                 jz      short loc_143D
.text$mn:0000141E                 cmp     [ebp+var_30], 0
.text$mn:00001422                 jz      short loc_1436
.text$mn:00001424                 mov     eax, [ebp+arg_4]
.text$mn:00001427                 push    eax             ; struct TiXmlParsingData *
.text$mn:00001428                 mov     ecx, [ebp+arg_0]
.text$mn:0000142B                 push    ecx             ; wchar_t *
.text$mn:0000142C                 push    4               ; int
.text$mn:0000142E                 mov     ecx, [ebp+var_30] ; this
.text$mn:00001431                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001436
.text$mn:00001436 loc_1436:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+AAj
.text$mn:00001436                 xor     eax, eax
.text$mn:00001438                 jmp     loc_1865
.text$mn:0000143D ; ---------------------------------------------------------------------------
.text$mn:0000143D
.text$mn:0000143D loc_143D:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+A4j
.text$mn:0000143D                 mov     edx, [ebp+arg_0]
.text$mn:00001440                 add     edx, 2
.text$mn:00001443                 push    edx             ; wchar_t *
.text$mn:00001444                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00001449                 add     esp, 4
.text$mn:0000144C                 mov     [ebp+arg_0], eax
.text$mn:0000144F                 mov     eax, [ebp+arg_0]
.text$mn:00001452                 mov     [ebp+var_3C], eax
.text$mn:00001455                 mov     ecx, [ebp+var_38]
.text$mn:00001458                 add     ecx, 1Ch
.text$mn:0000145B                 push    ecx
.text$mn:0000145C                 mov     edx, [ebp+arg_0]
.text$mn:0000145F                 push    edx
.text$mn:00001460                 call    ?ReadName@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001465                 add     esp, 8
.text$mn:00001468                 mov     [ebp+arg_0], eax
.text$mn:0000146B                 cmp     [ebp+arg_0], 0
.text$mn:0000146F                 jz      short loc_147B
.text$mn:00001471                 mov     eax, [ebp+arg_0]
.text$mn:00001474                 movzx   ecx, word ptr [eax]
.text$mn:00001477                 test    ecx, ecx
.text$mn:00001479                 jnz     short loc_149A
.text$mn:0000147B
.text$mn:0000147B loc_147B:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+F7j
.text$mn:0000147B                 cmp     [ebp+var_30], 0
.text$mn:0000147F                 jz      short loc_1493
.text$mn:00001481                 mov     edx, [ebp+arg_4]
.text$mn:00001484                 push    edx             ; struct TiXmlParsingData *
.text$mn:00001485                 mov     eax, [ebp+var_3C]
.text$mn:00001488                 push    eax             ; wchar_t *
.text$mn:00001489                 push    5               ; int
.text$mn:0000148B                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000148E                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001493
.text$mn:00001493 loc_1493:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+107j
.text$mn:00001493                 xor     eax, eax
.text$mn:00001495                 jmp     loc_1865
.text$mn:0000149A ; ---------------------------------------------------------------------------
.text$mn:0000149A
.text$mn:0000149A loc_149A:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+101j
.text$mn:0000149A                 push    offset $SG95893 ; "</"
.text$mn:0000149F                 lea     ecx, [ebp+var_2C]
.text$mn:000014A2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000014A7                 mov     [ebp+var_4], 0
.text$mn:000014AE                 mov     ecx, [ebp+var_38]
.text$mn:000014B1                 add     ecx, 1Ch
.text$mn:000014B4                 push    ecx
.text$mn:000014B5                 lea     ecx, [ebp+var_2C]
.text$mn:000014B8                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000014BD                 push    offset $SG95894 ; Str
.text$mn:000014C2                 lea     ecx, [ebp+var_2C]
.text$mn:000014C5                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000014CA
.text$mn:000014CA loc_14CA:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *):loc_1842j
.text$mn:000014CA                 cmp     [ebp+arg_0], 0
.text$mn:000014CE                 jz      loc_1847
.text$mn:000014D4                 mov     edx, [ebp+arg_0]
.text$mn:000014D7                 movzx   eax, word ptr [edx]
.text$mn:000014DA                 test    eax, eax
.text$mn:000014DC                 jz      loc_1847
.text$mn:000014E2                 mov     ecx, [ebp+arg_0]
.text$mn:000014E5                 mov     [ebp+var_3C], ecx
.text$mn:000014E8                 mov     edx, [ebp+arg_0]
.text$mn:000014EB                 push    edx             ; wchar_t *
.text$mn:000014EC                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:000014F1                 add     esp, 4
.text$mn:000014F4                 mov     [ebp+arg_0], eax
.text$mn:000014F7                 cmp     [ebp+arg_0], 0
.text$mn:000014FB                 jz      short loc_1507
.text$mn:000014FD                 mov     eax, [ebp+arg_0]
.text$mn:00001500                 movzx   ecx, word ptr [eax]
.text$mn:00001503                 test    ecx, ecx
.text$mn:00001505                 jnz     short loc_1543
.text$mn:00001507
.text$mn:00001507 loc_1507:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+183j
.text$mn:00001507                 cmp     [ebp+var_30], 0
.text$mn:0000150B                 jz      short loc_151F
.text$mn:0000150D                 mov     edx, [ebp+arg_4]
.text$mn:00001510                 push    edx             ; struct TiXmlParsingData *
.text$mn:00001511                 mov     eax, [ebp+var_3C]
.text$mn:00001514                 push    eax             ; wchar_t *
.text$mn:00001515                 push    7               ; int
.text$mn:00001517                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000151A                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:0000151F
.text$mn:0000151F loc_151F:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+193j
.text$mn:0000151F                 mov     [ebp+var_84], 0
.text$mn:00001529                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001530                 lea     ecx, [ebp+var_2C]
.text$mn:00001533                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001538                 mov     eax, [ebp+var_84]
.text$mn:0000153E                 jmp     loc_1865
.text$mn:00001543 ; ---------------------------------------------------------------------------
.text$mn:00001543
.text$mn:00001543 loc_1543:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+18Dj
.text$mn:00001543                 mov     ecx, [ebp+arg_0]
.text$mn:00001546                 movzx   edx, word ptr [ecx]
.text$mn:00001549                 cmp     edx, 2Fh ; '/'
.text$mn:0000154C                 jnz     short loc_15C3
.text$mn:0000154E                 mov     eax, [ebp+arg_0]
.text$mn:00001551                 add     eax, 2
.text$mn:00001554                 mov     [ebp+arg_0], eax
.text$mn:00001557                 mov     ecx, [ebp+arg_0]
.text$mn:0000155A                 movzx   edx, word ptr [ecx]
.text$mn:0000155D                 cmp     edx, 3Eh ; '>'
.text$mn:00001560                 jz      short loc_159E
.text$mn:00001562                 cmp     [ebp+var_30], 0
.text$mn:00001566                 jz      short loc_157A
.text$mn:00001568                 mov     eax, [ebp+arg_4]
.text$mn:0000156B                 push    eax             ; struct TiXmlParsingData *
.text$mn:0000156C                 mov     ecx, [ebp+arg_0]
.text$mn:0000156F                 push    ecx             ; wchar_t *
.text$mn:00001570                 push    8               ; int
.text$mn:00001572                 mov     ecx, [ebp+var_30] ; this
.text$mn:00001575                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:0000157A
.text$mn:0000157A loc_157A:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+1EEj
.text$mn:0000157A                 mov     [ebp+var_90], 0
.text$mn:00001584                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000158B                 lea     ecx, [ebp+var_2C]
.text$mn:0000158E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001593                 mov     eax, [ebp+var_90]
.text$mn:00001599                 jmp     loc_1865
.text$mn:0000159E ; ---------------------------------------------------------------------------
.text$mn:0000159E
.text$mn:0000159E loc_159E:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+1E8j
.text$mn:0000159E                 mov     edx, [ebp+arg_0]
.text$mn:000015A1                 add     edx, 2
.text$mn:000015A4                 mov     [ebp+var_5C], edx
.text$mn:000015A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000015AE                 lea     ecx, [ebp+var_2C]
.text$mn:000015B1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000015B6                 mov     eax, [ebp+var_5C]
.text$mn:000015B9                 jmp     loc_1865
.text$mn:000015BE ; ---------------------------------------------------------------------------
.text$mn:000015BE                 jmp     loc_1842
.text$mn:000015C3 ; ---------------------------------------------------------------------------
.text$mn:000015C3
.text$mn:000015C3 loc_15C3:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+1D4j
.text$mn:000015C3                 mov     eax, [ebp+arg_0]
.text$mn:000015C6                 movzx   ecx, word ptr [eax]
.text$mn:000015C9                 cmp     ecx, 3Eh ; '>'
.text$mn:000015CC                 jnz     loc_16A5
.text$mn:000015D2                 mov     edx, [ebp+arg_0]
.text$mn:000015D5                 add     edx, 2
.text$mn:000015D8                 mov     [ebp+arg_0], edx
.text$mn:000015DB                 mov     eax, [ebp+arg_4]
.text$mn:000015DE                 push    eax             ; struct TiXmlParsingData *
.text$mn:000015DF                 mov     ecx, [ebp+arg_0]
.text$mn:000015E2                 push    ecx             ; wchar_t *
.text$mn:000015E3                 mov     ecx, [ebp+var_38] ; this
.text$mn:000015E6                 call    ?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)
.text$mn:000015EB                 mov     [ebp+arg_0], eax
.text$mn:000015EE                 cmp     [ebp+arg_0], 0
.text$mn:000015F2                 jz      short loc_15FE
.text$mn:000015F4                 mov     edx, [ebp+arg_0]
.text$mn:000015F7                 movzx   eax, word ptr [edx]
.text$mn:000015FA                 test    eax, eax
.text$mn:000015FC                 jnz     short loc_161C
.text$mn:000015FE
.text$mn:000015FE loc_15FE:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+27Aj
.text$mn:000015FE                 mov     [ebp+var_54], 0
.text$mn:00001605                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000160C                 lea     ecx, [ebp+var_2C]
.text$mn:0000160F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001614                 mov     eax, [ebp+var_54]
.text$mn:00001617                 jmp     loc_1865
.text$mn:0000161C ; ---------------------------------------------------------------------------
.text$mn:0000161C
.text$mn:0000161C loc_161C:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+284j
.text$mn:0000161C                 push    0               ; bool
.text$mn:0000161E                 lea     ecx, [ebp+var_2C]
.text$mn:00001621                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001626                 push    eax             ; wchar_t *
.text$mn:00001627                 mov     ecx, [ebp+arg_0]
.text$mn:0000162A                 push    ecx             ; wchar_t *
.text$mn:0000162B                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001630                 add     esp, 0Ch
.text$mn:00001633                 movzx   edx, al
.text$mn:00001636                 test    edx, edx
.text$mn:00001638                 jz      short loc_166A
.text$mn:0000163A                 lea     ecx, [ebp+var_2C]
.text$mn:0000163D                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001642                 mov     ecx, [ebp+arg_0]
.text$mn:00001645                 lea     edx, [ecx+eax*2]
.text$mn:00001648                 mov     [ebp+arg_0], edx
.text$mn:0000164B                 mov     eax, [ebp+arg_0]
.text$mn:0000164E                 mov     [ebp+var_64], eax
.text$mn:00001651                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001658                 lea     ecx, [ebp+var_2C]
.text$mn:0000165B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001660                 mov     eax, [ebp+var_64]
.text$mn:00001663                 jmp     loc_1865
.text$mn:00001668 ; ---------------------------------------------------------------------------
.text$mn:00001668                 jmp     short loc_16A0
.text$mn:0000166A ; ---------------------------------------------------------------------------
.text$mn:0000166A
.text$mn:0000166A loc_166A:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+2C0j
.text$mn:0000166A                 cmp     [ebp+var_30], 0
.text$mn:0000166E                 jz      short loc_1682
.text$mn:00001670                 mov     ecx, [ebp+arg_4]
.text$mn:00001673                 push    ecx             ; struct TiXmlParsingData *
.text$mn:00001674                 mov     edx, [ebp+arg_0]
.text$mn:00001677                 push    edx             ; wchar_t *
.text$mn:00001678                 push    9               ; int
.text$mn:0000167A                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000167D                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001682
.text$mn:00001682 loc_1682:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+2F6j
.text$mn:00001682                 mov     [ebp+var_7C], 0
.text$mn:00001689                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001690                 lea     ecx, [ebp+var_2C]
.text$mn:00001693                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001698                 mov     eax, [ebp+var_7C]
.text$mn:0000169B                 jmp     loc_1865
.text$mn:000016A0 ; ---------------------------------------------------------------------------
.text$mn:000016A0
.text$mn:000016A0 loc_16A0:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+2F0j
.text$mn:000016A0                 jmp     loc_1842
.text$mn:000016A5 ; ---------------------------------------------------------------------------
.text$mn:000016A5
.text$mn:000016A5 loc_16A5:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+254j
.text$mn:000016A5                 push    50h ; 'P'       ; unsigned int
.text$mn:000016A7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000016AC                 add     esp, 4
.text$mn:000016AF                 mov     [ebp+var_50], eax
.text$mn:000016B2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000016B6                 cmp     [ebp+var_50], 0
.text$mn:000016BA                 jz      short loc_16C9
.text$mn:000016BC                 mov     ecx, [ebp+var_50]
.text$mn:000016BF                 call    ??0TiXmlAttribute@@QAE@XZ ; TiXmlAttribute::TiXmlAttribute(void)
.text$mn:000016C4                 mov     [ebp+var_48], eax
.text$mn:000016C7                 jmp     short loc_16D0
.text$mn:000016C9 ; ---------------------------------------------------------------------------
.text$mn:000016C9
.text$mn:000016C9 loc_16C9:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+342j
.text$mn:000016C9                 mov     [ebp+var_48], 0
.text$mn:000016D0
.text$mn:000016D0 loc_16D0:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+34Fj
.text$mn:000016D0                 mov     eax, [ebp+var_48]
.text$mn:000016D3                 mov     [ebp+var_6C], eax
.text$mn:000016D6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000016DA                 mov     ecx, [ebp+var_6C]
.text$mn:000016DD                 mov     [ebp+var_34], ecx
.text$mn:000016E0                 cmp     [ebp+var_34], 0
.text$mn:000016E4                 jnz     short loc_1722
.text$mn:000016E6                 cmp     [ebp+var_30], 0
.text$mn:000016EA                 jz      short loc_16FE
.text$mn:000016EC                 mov     edx, [ebp+arg_4]
.text$mn:000016EF                 push    edx             ; struct TiXmlParsingData *
.text$mn:000016F0                 mov     eax, [ebp+var_3C]
.text$mn:000016F3                 push    eax             ; wchar_t *
.text$mn:000016F4                 push    3               ; int
.text$mn:000016F6                 mov     ecx, [ebp+var_30] ; this
.text$mn:000016F9                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:000016FE
.text$mn:000016FE loc_16FE:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+372j
.text$mn:000016FE                 mov     [ebp+var_8C], 0
.text$mn:00001708                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000170F                 lea     ecx, [ebp+var_2C]
.text$mn:00001712                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001717                 mov     eax, [ebp+var_8C]
.text$mn:0000171D                 jmp     loc_1865
.text$mn:00001722 ; ---------------------------------------------------------------------------
.text$mn:00001722
.text$mn:00001722 loc_1722:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+36Cj
.text$mn:00001722                 mov     ecx, [ebp+var_30]
.text$mn:00001725                 push    ecx             ; struct TiXmlDocument *
.text$mn:00001726                 mov     ecx, [ebp+var_34] ; this
.text$mn:00001729                 call    ?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z ; TiXmlAttribute::SetDocument(TiXmlDocument *)
.text$mn:0000172E                 mov     edx, [ebp+arg_0]
.text$mn:00001731                 mov     [ebp+var_74], edx
.text$mn:00001734                 mov     eax, [ebp+arg_4]
.text$mn:00001737                 push    eax
.text$mn:00001738                 mov     ecx, [ebp+arg_0]
.text$mn:0000173B                 push    ecx
.text$mn:0000173C                 mov     edx, [ebp+var_34]
.text$mn:0000173F                 mov     eax, [edx]
.text$mn:00001741                 mov     ecx, [ebp+var_34]
.text$mn:00001744                 mov     edx, [eax+0Ch]
.text$mn:00001747                 call    edx
.text$mn:00001749                 mov     [ebp+arg_0], eax
.text$mn:0000174C                 cmp     [ebp+arg_0], 0
.text$mn:00001750                 jz      short loc_175C
.text$mn:00001752                 mov     eax, [ebp+arg_0]
.text$mn:00001755                 movzx   ecx, word ptr [eax]
.text$mn:00001758                 test    ecx, ecx
.text$mn:0000175A                 jnz     short loc_17BE
.text$mn:0000175C
.text$mn:0000175C loc_175C:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+3D8j
.text$mn:0000175C                 cmp     [ebp+var_30], 0
.text$mn:00001760                 jz      short loc_1774
.text$mn:00001762                 mov     edx, [ebp+arg_4]
.text$mn:00001765                 push    edx             ; struct TiXmlParsingData *
.text$mn:00001766                 mov     eax, [ebp+var_74]
.text$mn:00001769                 push    eax             ; wchar_t *
.text$mn:0000176A                 push    4               ; int
.text$mn:0000176C                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000176F                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001774
.text$mn:00001774 loc_1774:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+3E8j
.text$mn:00001774                 mov     ecx, [ebp+var_34]
.text$mn:00001777                 mov     [ebp+var_58], ecx
.text$mn:0000177A                 mov     edx, [ebp+var_58]
.text$mn:0000177D                 mov     [ebp+var_40], edx
.text$mn:00001780                 cmp     [ebp+var_40], 0
.text$mn:00001784                 jz      short loc_1799
.text$mn:00001786                 push    1
.text$mn:00001788                 mov     eax, [ebp+var_40]
.text$mn:0000178B                 mov     edx, [eax]
.text$mn:0000178D                 mov     ecx, [ebp+var_40]
.text$mn:00001790                 mov     eax, [edx]
.text$mn:00001792                 call    eax
.text$mn:00001794                 mov     [ebp+var_60], eax
.text$mn:00001797                 jmp     short loc_17A0
.text$mn:00001799 ; ---------------------------------------------------------------------------
.text$mn:00001799
.text$mn:00001799 loc_1799:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+40Cj
.text$mn:00001799                 mov     [ebp+var_60], 0
.text$mn:000017A0
.text$mn:000017A0 loc_17A0:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+41Fj
.text$mn:000017A0                 mov     [ebp+var_68], 0
.text$mn:000017A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000017AE                 lea     ecx, [ebp+var_2C]
.text$mn:000017B1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000017B6                 mov     eax, [ebp+var_68]
.text$mn:000017B9                 jmp     loc_1865
.text$mn:000017BE ; ---------------------------------------------------------------------------
.text$mn:000017BE
.text$mn:000017BE loc_17BE:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+3E2j
.text$mn:000017BE                 mov     ecx, [ebp+var_34] ; this
.text$mn:000017C1                 call    ?Name@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Name(void)
.text$mn:000017C6                 push    eax             ; wchar_t *
.text$mn:000017C7                 mov     ecx, [ebp+var_38]
.text$mn:000017CA                 add     ecx, 44h ; 'D'  ; this
.text$mn:000017CD                 call    ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z ; TiXmlAttributeSet::Find(wchar_t const *)
.text$mn:000017D2                 mov     [ebp+var_4C], eax
.text$mn:000017D5                 cmp     [ebp+var_4C], 0
.text$mn:000017D9                 jz      short loc_1833
.text$mn:000017DB                 mov     ecx, [ebp+var_34] ; this
.text$mn:000017DE                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:000017E3                 push    eax             ; wchar_t *
.text$mn:000017E4                 mov     ecx, [ebp+var_4C] ; this
.text$mn:000017E7                 call    ?SetValue@TiXmlAttribute@@QAEXPB_W@Z ; TiXmlAttribute::SetValue(wchar_t const *)
.text$mn:000017EC                 mov     ecx, [ebp+var_34]
.text$mn:000017EF                 mov     [ebp+var_70], ecx
.text$mn:000017F2                 mov     edx, [ebp+var_70]
.text$mn:000017F5                 mov     [ebp+var_44], edx
.text$mn:000017F8                 cmp     [ebp+var_44], 0
.text$mn:000017FC                 jz      short loc_1811
.text$mn:000017FE                 push    1
.text$mn:00001800                 mov     eax, [ebp+var_44]
.text$mn:00001803                 mov     edx, [eax]
.text$mn:00001805                 mov     ecx, [ebp+var_44]
.text$mn:00001808                 mov     eax, [edx]
.text$mn:0000180A                 call    eax
.text$mn:0000180C                 mov     [ebp+var_78], eax
.text$mn:0000180F                 jmp     short loc_1818
.text$mn:00001811 ; ---------------------------------------------------------------------------
.text$mn:00001811
.text$mn:00001811 loc_1811:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+484j
.text$mn:00001811                 mov     [ebp+var_78], 0
.text$mn:00001818
.text$mn:00001818 loc_1818:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+497j
.text$mn:00001818                 mov     [ebp+var_80], 0
.text$mn:0000181F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001826                 lea     ecx, [ebp+var_2C]
.text$mn:00001829                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000182E                 mov     eax, [ebp+var_80]
.text$mn:00001831                 jmp     short loc_1865
.text$mn:00001833 ; ---------------------------------------------------------------------------
.text$mn:00001833
.text$mn:00001833 loc_1833:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+461j
.text$mn:00001833                 mov     ecx, [ebp+var_34]
.text$mn:00001836                 push    ecx             ; struct TiXmlAttribute *
.text$mn:00001837                 mov     ecx, [ebp+var_38]
.text$mn:0000183A                 add     ecx, 44h ; 'D'  ; this
.text$mn:0000183D                 call    ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Add(TiXmlAttribute *)
.text$mn:00001842
.text$mn:00001842 loc_1842:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+246j
.text$mn:00001842                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *):loc_16A0j
.text$mn:00001842                 jmp     loc_14CA
.text$mn:00001847 ; ---------------------------------------------------------------------------
.text$mn:00001847
.text$mn:00001847 loc_1847:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+156j
.text$mn:00001847                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+164j
.text$mn:00001847                 mov     edx, [ebp+arg_0]
.text$mn:0000184A                 mov     [ebp+var_88], edx
.text$mn:00001850                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001857                 lea     ecx, [ebp+var_2C]
.text$mn:0000185A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000185F                 mov     eax, [ebp+var_88]
.text$mn:00001865
.text$mn:00001865 loc_1865:                               ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+6Ej
.text$mn:00001865                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+C0j ...
.text$mn:00001865                 mov     ecx, [ebp+var_C]
.text$mn:00001868                 mov     large fs:0, ecx
.text$mn:0000186F                 pop     ecx
.text$mn:00001870                 mov     ecx, [ebp+var_10]
.text$mn:00001873                 xor     ecx, ebp
.text$mn:00001875                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000187A                 mov     esp, ebp
.text$mn:0000187C                 pop     ebp
.text$mn:0000187D                 retn    8
.text$mn:0000187D ?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:0000187D
.text$mn:0000187D ; ---------------------------------------------------------------------------
.text$mn:00001880                 db 8 dup(0CCh)
.text$mn:00001888
.text$mn:00001888 ; =============== S U B R O U T I N E =======================================
.text$mn:00001888
.text$mn:00001888 ; Attributes: bp-based frame
.text$mn:00001888
.text$mn:00001888 ; const wchar_t *__thiscall TiXmlElement::ReadValue(TiXmlElement *this, const wchar_t *, struct TiXmlParsingData *)
.text$mn:00001888                 public ?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001888 ?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00001888                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+26Ep
.text$mn:00001888
.text$mn:00001888 var_34          = dword ptr -34h
.text$mn:00001888 var_30          = dword ptr -30h
.text$mn:00001888 var_2C          = dword ptr -2Ch
.text$mn:00001888 var_28          = dword ptr -28h
.text$mn:00001888 var_24          = dword ptr -24h
.text$mn:00001888 var_20          = dword ptr -20h
.text$mn:00001888 var_1C          = dword ptr -1Ch
.text$mn:00001888 var_18          = dword ptr -18h
.text$mn:00001888 var_14          = dword ptr -14h
.text$mn:00001888 var_10          = dword ptr -10h
.text$mn:00001888 var_C           = dword ptr -0Ch
.text$mn:00001888 var_4           = dword ptr -4
.text$mn:00001888 arg_0           = dword ptr  8
.text$mn:00001888 arg_4           = dword ptr  0Ch
.text$mn:00001888
.text$mn:00001888                 push    ebp
.text$mn:00001889                 mov     ebp, esp
.text$mn:0000188B                 push    0FFFFFFFFh
.text$mn:0000188D                 push    offset __ehhandler$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001892                 mov     eax, large fs:0
.text$mn:00001898                 push    eax
.text$mn:00001899                 sub     esp, 28h
.text$mn:0000189C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000018A1                 xor     eax, ebp
.text$mn:000018A3                 push    eax
.text$mn:000018A4                 lea     eax, [ebp+var_C]
.text$mn:000018A7                 mov     large fs:0, eax
.text$mn:000018AD                 mov     [ebp+var_18], ecx
.text$mn:000018B0                 mov     ecx, [ebp+var_18] ; this
.text$mn:000018B3                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:000018B8                 mov     [ebp+var_1C], eax
.text$mn:000018BB                 mov     eax, [ebp+arg_0]
.text$mn:000018BE                 push    eax             ; wchar_t *
.text$mn:000018BF                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:000018C4                 add     esp, 4
.text$mn:000018C7                 mov     [ebp+arg_0], eax
.text$mn:000018CA
.text$mn:000018CA loc_18CA:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+1A2j
.text$mn:000018CA                 cmp     [ebp+arg_0], 0
.text$mn:000018CE                 jz      loc_1A2F
.text$mn:000018D4                 mov     ecx, [ebp+arg_0]
.text$mn:000018D7                 movzx   edx, word ptr [ecx]
.text$mn:000018DA                 test    edx, edx
.text$mn:000018DC                 jz      loc_1A2F
.text$mn:000018E2                 mov     eax, [ebp+arg_0]
.text$mn:000018E5                 movzx   ecx, word ptr [eax]
.text$mn:000018E8                 cmp     ecx, 3Ch ; '<'
.text$mn:000018EB                 jz      loc_19BB
.text$mn:000018F1                 push    44h ; 'D'       ; unsigned int
.text$mn:000018F3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000018F8                 add     esp, 4
.text$mn:000018FB                 mov     [ebp+var_24], eax
.text$mn:000018FE                 mov     [ebp+var_4], 0
.text$mn:00001905                 cmp     [ebp+var_24], 0
.text$mn:00001909                 jz      short loc_191D
.text$mn:0000190B                 push    offset $SG95954 ; wchar_t *
.text$mn:00001910                 mov     ecx, [ebp+var_24]
.text$mn:00001913                 call    ??0TiXmlText@@QAE@PB_W@Z ; TiXmlText::TiXmlText(wchar_t const *)
.text$mn:00001918                 mov     [ebp+var_28], eax
.text$mn:0000191B                 jmp     short loc_1924
.text$mn:0000191D ; ---------------------------------------------------------------------------
.text$mn:0000191D
.text$mn:0000191D loc_191D:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+81j
.text$mn:0000191D                 mov     [ebp+var_28], 0
.text$mn:00001924
.text$mn:00001924 loc_1924:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+93j
.text$mn:00001924                 mov     edx, [ebp+var_28]
.text$mn:00001927                 mov     [ebp+var_2C], edx
.text$mn:0000192A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001931                 mov     eax, [ebp+var_2C]
.text$mn:00001934                 mov     [ebp+var_10], eax
.text$mn:00001937                 cmp     [ebp+var_10], 0
.text$mn:0000193B                 jnz     short loc_1958
.text$mn:0000193D                 cmp     [ebp+var_1C], 0
.text$mn:00001941                 jz      short loc_1951
.text$mn:00001943                 push    0               ; struct TiXmlParsingData *
.text$mn:00001945                 push    0               ; wchar_t *
.text$mn:00001947                 push    3               ; int
.text$mn:00001949                 mov     ecx, [ebp+var_1C] ; this
.text$mn:0000194C                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001951
.text$mn:00001951 loc_1951:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+B9j
.text$mn:00001951                 xor     eax, eax
.text$mn:00001953                 jmp     loc_1A4C
.text$mn:00001958 ; ---------------------------------------------------------------------------
.text$mn:00001958
.text$mn:00001958 loc_1958:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+B3j
.text$mn:00001958                 mov     ecx, [ebp+arg_4]
.text$mn:0000195B                 push    ecx
.text$mn:0000195C                 mov     edx, [ebp+arg_0]
.text$mn:0000195F                 push    edx
.text$mn:00001960                 mov     eax, [ebp+var_10]
.text$mn:00001963                 mov     edx, [eax]
.text$mn:00001965                 mov     ecx, [ebp+var_10]
.text$mn:00001968                 mov     eax, [edx+0Ch]
.text$mn:0000196B                 call    eax
.text$mn:0000196D                 mov     [ebp+arg_0], eax
.text$mn:00001970                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001973                 call    ?Blank@TiXmlText@@IBE_NXZ ; TiXmlText::Blank(void)
.text$mn:00001978                 movzx   ecx, al
.text$mn:0000197B                 test    ecx, ecx
.text$mn:0000197D                 jnz     short loc_198D
.text$mn:0000197F                 mov     edx, [ebp+var_10]
.text$mn:00001982                 push    edx             ; struct TiXmlNode *
.text$mn:00001983                 mov     ecx, [ebp+var_18] ; this
.text$mn:00001986                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:0000198B                 jmp     short loc_19B9
.text$mn:0000198D ; ---------------------------------------------------------------------------
.text$mn:0000198D
.text$mn:0000198D loc_198D:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+F5j
.text$mn:0000198D                 mov     eax, [ebp+var_10]
.text$mn:00001990                 mov     [ebp+var_30], eax
.text$mn:00001993                 mov     ecx, [ebp+var_30]
.text$mn:00001996                 mov     [ebp+var_20], ecx
.text$mn:00001999                 cmp     [ebp+var_20], 0
.text$mn:0000199D                 jz      short loc_19B2
.text$mn:0000199F                 push    1
.text$mn:000019A1                 mov     edx, [ebp+var_20]
.text$mn:000019A4                 mov     eax, [edx]
.text$mn:000019A6                 mov     ecx, [ebp+var_20]
.text$mn:000019A9                 mov     edx, [eax]
.text$mn:000019AB                 call    edx
.text$mn:000019AD                 mov     [ebp+var_34], eax
.text$mn:000019B0                 jmp     short loc_19B9
.text$mn:000019B2 ; ---------------------------------------------------------------------------
.text$mn:000019B2
.text$mn:000019B2 loc_19B2:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+115j
.text$mn:000019B2                 mov     [ebp+var_34], 0
.text$mn:000019B9
.text$mn:000019B9 loc_19B9:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+103j
.text$mn:000019B9                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+128j
.text$mn:000019B9                 jmp     short loc_1A1B
.text$mn:000019BB ; ---------------------------------------------------------------------------
.text$mn:000019BB
.text$mn:000019BB loc_19BB:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+63j
.text$mn:000019BB                 push    0               ; bool
.text$mn:000019BD                 push    offset $SG95963 ; "</"
.text$mn:000019C2                 mov     eax, [ebp+arg_0]
.text$mn:000019C5                 push    eax             ; wchar_t *
.text$mn:000019C6                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:000019CB                 add     esp, 0Ch
.text$mn:000019CE                 movzx   ecx, al
.text$mn:000019D1                 test    ecx, ecx
.text$mn:000019D3                 jz      short loc_19DC
.text$mn:000019D5                 mov     eax, [ebp+arg_0]
.text$mn:000019D8                 jmp     short loc_1A4C
.text$mn:000019DA ; ---------------------------------------------------------------------------
.text$mn:000019DA                 jmp     short loc_1A1B
.text$mn:000019DC ; ---------------------------------------------------------------------------
.text$mn:000019DC
.text$mn:000019DC loc_19DC:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+14Bj
.text$mn:000019DC                 mov     edx, [ebp+arg_0]
.text$mn:000019DF                 push    edx             ; wchar_t *
.text$mn:000019E0                 mov     ecx, [ebp+var_18] ; this
.text$mn:000019E3                 call    ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z ; TiXmlNode::Identify(wchar_t const *)
.text$mn:000019E8                 mov     [ebp+var_14], eax
.text$mn:000019EB                 cmp     [ebp+var_14], 0
.text$mn:000019EF                 jz      short loc_1A17
.text$mn:000019F1                 mov     eax, [ebp+arg_4]
.text$mn:000019F4                 push    eax
.text$mn:000019F5                 mov     ecx, [ebp+arg_0]
.text$mn:000019F8                 push    ecx
.text$mn:000019F9                 mov     edx, [ebp+var_14]
.text$mn:000019FC                 mov     eax, [edx]
.text$mn:000019FE                 mov     ecx, [ebp+var_14]
.text$mn:00001A01                 mov     edx, [eax+0Ch]
.text$mn:00001A04                 call    edx
.text$mn:00001A06                 mov     [ebp+arg_0], eax
.text$mn:00001A09                 mov     eax, [ebp+var_14]
.text$mn:00001A0C                 push    eax             ; struct TiXmlNode *
.text$mn:00001A0D                 mov     ecx, [ebp+var_18] ; this
.text$mn:00001A10                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:00001A15                 jmp     short loc_1A1B
.text$mn:00001A17 ; ---------------------------------------------------------------------------
.text$mn:00001A17
.text$mn:00001A17 loc_1A17:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+167j
.text$mn:00001A17                 xor     eax, eax
.text$mn:00001A19                 jmp     short loc_1A4C
.text$mn:00001A1B ; ---------------------------------------------------------------------------
.text$mn:00001A1B
.text$mn:00001A1B loc_1A1B:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *):loc_19B9j
.text$mn:00001A1B                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+152j ...
.text$mn:00001A1B                 mov     ecx, [ebp+arg_0]
.text$mn:00001A1E                 push    ecx             ; wchar_t *
.text$mn:00001A1F                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00001A24                 add     esp, 4
.text$mn:00001A27                 mov     [ebp+arg_0], eax
.text$mn:00001A2A                 jmp     loc_18CA
.text$mn:00001A2F ; ---------------------------------------------------------------------------
.text$mn:00001A2F
.text$mn:00001A2F loc_1A2F:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+46j
.text$mn:00001A2F                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+54j
.text$mn:00001A2F                 cmp     [ebp+arg_0], 0
.text$mn:00001A33                 jnz     short loc_1A49
.text$mn:00001A35                 cmp     [ebp+var_1C], 0
.text$mn:00001A39                 jz      short loc_1A49
.text$mn:00001A3B                 push    0               ; struct TiXmlParsingData *
.text$mn:00001A3D                 push    0               ; wchar_t *
.text$mn:00001A3F                 push    6               ; int
.text$mn:00001A41                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00001A44                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001A49
.text$mn:00001A49 loc_1A49:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+1ABj
.text$mn:00001A49                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+1B1j
.text$mn:00001A49                 mov     eax, [ebp+arg_0]
.text$mn:00001A4C
.text$mn:00001A4C loc_1A4C:                               ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+CBj
.text$mn:00001A4C                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+150j ...
.text$mn:00001A4C                 mov     ecx, [ebp+var_C]
.text$mn:00001A4F                 mov     large fs:0, ecx
.text$mn:00001A56                 pop     ecx
.text$mn:00001A57                 mov     esp, ebp
.text$mn:00001A59                 pop     ebp
.text$mn:00001A5A                 retn    8
.text$mn:00001A5A ?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00001A5A
.text$mn:00001A5A ; ---------------------------------------------------------------------------
.text$mn:00001A5D                 db 0Bh dup(0CCh)
.text$mn:00001A68
.text$mn:00001A68 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A68
.text$mn:00001A68 ; Attributes: bp-based frame
.text$mn:00001A68
.text$mn:00001A68 ; protected: virtual void __thiscall TiXmlComment::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001A68                 public ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001A68 ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001A68                                         ; DATA XREF: .rdata:0000A464o
.text$mn:00001A68
.text$mn:00001A68 var_8           = dword ptr -8
.text$mn:00001A68 var_4           = dword ptr -4
.text$mn:00001A68 arg_0           = dword ptr  8
.text$mn:00001A68 arg_4           = dword ptr  0Ch
.text$mn:00001A68
.text$mn:00001A68                 push    ebp
.text$mn:00001A69                 mov     ebp, esp
.text$mn:00001A6B                 sub     esp, 8
.text$mn:00001A6E                 mov     [ebp+var_8], ecx
.text$mn:00001A71
.text$mn:00001A71 loc_1A71:                               ; CODE XREF: TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_1AE5j
.text$mn:00001A71                 mov     eax, [ebp+arg_0]
.text$mn:00001A74                 mov     ecx, [eax]
.text$mn:00001A76                 mov     edx, [ebp+arg_0]
.text$mn:00001A79                 add     edx, [ecx+4]
.text$mn:00001A7C                 mov     ecx, edx        ; this
.text$mn:00001A7E                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00001A83                 movzx   eax, al
.text$mn:00001A86                 test    eax, eax
.text$mn:00001A88                 jz      short loc_1AE7
.text$mn:00001A8A                 mov     ecx, [ebp+arg_0]
.text$mn:00001A8D                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:00001A92                 movzx   ecx, ax
.text$mn:00001A95                 mov     [ebp+var_4], ecx
.text$mn:00001A98                 movzx   edx, word ptr [ebp+var_4]
.text$mn:00001A9C                 push    edx
.text$mn:00001A9D                 mov     ecx, [ebp+arg_4]
.text$mn:00001AA0                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00001AA5                 cmp     [ebp+var_4], 3Eh ; '>'
.text$mn:00001AA9                 jnz     short loc_1AE5
.text$mn:00001AAB                 mov     ecx, [ebp+arg_4]
.text$mn:00001AAE                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001AB3                 sub     eax, 2
.text$mn:00001AB6                 push    eax
.text$mn:00001AB7                 mov     ecx, [ebp+arg_4]
.text$mn:00001ABA                 call    ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)
.text$mn:00001ABF                 movzx   eax, word ptr [eax]
.text$mn:00001AC2                 cmp     eax, 2Dh ; '-'
.text$mn:00001AC5                 jnz     short loc_1AE5
.text$mn:00001AC7                 mov     ecx, [ebp+arg_4]
.text$mn:00001ACA                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001ACF                 sub     eax, 3
.text$mn:00001AD2                 push    eax
.text$mn:00001AD3                 mov     ecx, [ebp+arg_4]
.text$mn:00001AD6                 call    ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)
.text$mn:00001ADB                 movzx   ecx, word ptr [eax]
.text$mn:00001ADE                 cmp     ecx, 2Dh ; '-'
.text$mn:00001AE1                 jnz     short loc_1AE5
.text$mn:00001AE3                 jmp     short loc_1AE7
.text$mn:00001AE5 ; ---------------------------------------------------------------------------
.text$mn:00001AE5
.text$mn:00001AE5 loc_1AE5:                               ; CODE XREF: TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+41j
.text$mn:00001AE5                                         ; TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj ...
.text$mn:00001AE5                 jmp     short loc_1A71
.text$mn:00001AE7 ; ---------------------------------------------------------------------------
.text$mn:00001AE7
.text$mn:00001AE7 loc_1AE7:                               ; CODE XREF: TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20j
.text$mn:00001AE7                                         ; TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+7Bj
.text$mn:00001AE7                 mov     esp, ebp
.text$mn:00001AE9                 pop     ebp
.text$mn:00001AEA                 retn    8
.text$mn:00001AEA ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001AEA
.text$mn:00001AEA ; ---------------------------------------------------------------------------
.text$mn:00001AED                 db 0Bh dup(0CCh)
.text$mn:00001AF8
.text$mn:00001AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001AF8
.text$mn:00001AF8 ; Attributes: bp-based frame
.text$mn:00001AF8
.text$mn:00001AF8 ; const wchar_t *__thiscall TiXmlComment::Parse(TiXmlComment *this, const wchar_t *Str2, struct TiXmlParsingData *)
.text$mn:00001AF8                 public ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001AF8 ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00001AF8                                         ; DATA XREF: .rdata:0000A458o
.text$mn:00001AF8
.text$mn:00001AF8 var_10          = dword ptr -10h
.text$mn:00001AF8 var_C           = dword ptr -0Ch
.text$mn:00001AF8 lpString        = dword ptr -8
.text$mn:00001AF8 var_4           = dword ptr -4
.text$mn:00001AF8 Str2            = dword ptr  8
.text$mn:00001AF8 arg_4           = dword ptr  0Ch
.text$mn:00001AF8
.text$mn:00001AF8                 push    ebp
.text$mn:00001AF9                 mov     ebp, esp
.text$mn:00001AFB                 sub     esp, 10h
.text$mn:00001AFE                 mov     [ebp+var_4], ecx
.text$mn:00001B01                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001B04                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:00001B09                 mov     [ebp+var_C], eax
.text$mn:00001B0C                 push    offset $SG96023 ; Str
.text$mn:00001B11                 mov     ecx, [ebp+var_4]
.text$mn:00001B14                 add     ecx, 1Ch
.text$mn:00001B17                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001B1C                 mov     eax, [ebp+Str2]
.text$mn:00001B1F                 push    eax             ; wchar_t *
.text$mn:00001B20                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00001B25                 add     esp, 4
.text$mn:00001B28                 mov     [ebp+Str2], eax
.text$mn:00001B2B                 cmp     [ebp+arg_4], 0
.text$mn:00001B2F                 jz      short loc_1B53
.text$mn:00001B31                 mov     ecx, [ebp+Str2]
.text$mn:00001B34                 push    ecx             ; wchar_t *
.text$mn:00001B35                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001B38                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:00001B3D                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001B40                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00001B45                 mov     edx, [eax]
.text$mn:00001B47                 mov     eax, [eax+4]
.text$mn:00001B4A                 mov     ecx, [ebp+var_4]
.text$mn:00001B4D                 mov     [ecx+4], edx
.text$mn:00001B50                 mov     [ecx+8], eax
.text$mn:00001B53
.text$mn:00001B53 loc_1B53:                               ; CODE XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)+37j
.text$mn:00001B53                 mov     [ebp+lpString], offset $SG96026 ; "<!--"
.text$mn:00001B5A                 mov     [ebp+var_10], offset $SG96028 ; "-->"
.text$mn:00001B61                 push    0               ; bool
.text$mn:00001B63                 mov     edx, [ebp+lpString]
.text$mn:00001B66                 push    edx             ; wchar_t *
.text$mn:00001B67                 mov     eax, [ebp+Str2]
.text$mn:00001B6A                 push    eax             ; wchar_t *
.text$mn:00001B6B                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001B70                 add     esp, 0Ch
.text$mn:00001B73                 movzx   ecx, al
.text$mn:00001B76                 test    ecx, ecx
.text$mn:00001B78                 jnz     short loc_1B90
.text$mn:00001B7A                 mov     edx, [ebp+arg_4]
.text$mn:00001B7D                 push    edx             ; struct TiXmlParsingData *
.text$mn:00001B7E                 mov     eax, [ebp+Str2]
.text$mn:00001B81                 push    eax             ; wchar_t *
.text$mn:00001B82                 push    0Bh             ; int
.text$mn:00001B84                 mov     ecx, [ebp+var_C] ; this
.text$mn:00001B87                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001B8C                 xor     eax, eax
.text$mn:00001B8E                 jmp     short loc_1BC4
.text$mn:00001B90 ; ---------------------------------------------------------------------------
.text$mn:00001B90
.text$mn:00001B90 loc_1B90:                               ; CODE XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)+80j
.text$mn:00001B90                 mov     ecx, [ebp+lpString]
.text$mn:00001B93                 push    ecx             ; lpString
.text$mn:00001B94                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001B9A                 mov     edx, [ebp+Str2]
.text$mn:00001B9D                 lea     eax, [edx+eax*2]
.text$mn:00001BA0                 mov     [ebp+Str2], eax
.text$mn:00001BA3                 push    0               ; char
.text$mn:00001BA5                 mov     ecx, [ebp+var_10]
.text$mn:00001BA8                 push    ecx             ; lpString
.text$mn:00001BA9                 push    0               ; char
.text$mn:00001BAB                 mov     edx, [ebp+var_4]
.text$mn:00001BAE                 add     edx, 1Ch
.text$mn:00001BB1                 push    edx             ; int
.text$mn:00001BB2                 mov     eax, [ebp+Str2]
.text$mn:00001BB5                 push    eax             ; Str2
.text$mn:00001BB6                 call    ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)
.text$mn:00001BBB                 add     esp, 14h
.text$mn:00001BBE                 mov     [ebp+Str2], eax
.text$mn:00001BC1                 mov     eax, [ebp+Str2]
.text$mn:00001BC4
.text$mn:00001BC4 loc_1BC4:                               ; CODE XREF: TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)+96j
.text$mn:00001BC4                 mov     esp, ebp
.text$mn:00001BC6                 pop     ebp
.text$mn:00001BC7                 retn    8
.text$mn:00001BC7 ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00001BC7
.text$mn:00001BC7 ; ---------------------------------------------------------------------------
.text$mn:00001BCA                 db 0Eh dup(0CCh)
.text$mn:00001BD8
.text$mn:00001BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BD8
.text$mn:00001BD8 ; Attributes: bp-based frame
.text$mn:00001BD8
.text$mn:00001BD8 ; bool __thiscall TiXmlText::Blank(TiXmlText *__hidden this)
.text$mn:00001BD8                 public ?Blank@TiXmlText@@IBE_NXZ
.text$mn:00001BD8 ?Blank@TiXmlText@@IBE_NXZ proc near     ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+EBp
.text$mn:00001BD8
.text$mn:00001BD8 var_C           = dword ptr -0Ch
.text$mn:00001BD8 var_8           = dword ptr -8
.text$mn:00001BD8 var_4           = dword ptr -4
.text$mn:00001BD8
.text$mn:00001BD8                 push    ebp
.text$mn:00001BD9                 mov     ebp, esp
.text$mn:00001BDB                 sub     esp, 0Ch
.text$mn:00001BDE                 mov     [ebp+var_8], ecx
.text$mn:00001BE1                 mov     [ebp+var_4], 0
.text$mn:00001BE8                 mov     ecx, [ebp+var_8]
.text$mn:00001BEB                 add     ecx, 1Ch
.text$mn:00001BEE                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001BF3                 mov     [ebp+var_C], eax
.text$mn:00001BF6                 jmp     short loc_1C01
.text$mn:00001BF8 ; ---------------------------------------------------------------------------
.text$mn:00001BF8
.text$mn:00001BF8 loc_1BF8:                               ; CODE XREF: TiXmlText::Blank(void):loc_1C2Cj
.text$mn:00001BF8                 mov     eax, [ebp+var_4]
.text$mn:00001BFB                 add     eax, 1
.text$mn:00001BFE                 mov     [ebp+var_4], eax
.text$mn:00001C01
.text$mn:00001C01 loc_1C01:                               ; CODE XREF: TiXmlText::Blank(void)+1Ej
.text$mn:00001C01                 mov     ecx, [ebp+var_4]
.text$mn:00001C04                 cmp     ecx, [ebp+var_C]
.text$mn:00001C07                 jnb     short loc_1C2E
.text$mn:00001C09                 mov     edx, [ebp+var_4]
.text$mn:00001C0C                 push    edx
.text$mn:00001C0D                 mov     ecx, [ebp+var_8]
.text$mn:00001C10                 add     ecx, 1Ch
.text$mn:00001C13                 call    ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)
.text$mn:00001C18                 movzx   eax, word ptr [eax]
.text$mn:00001C1B                 push    eax             ; C
.text$mn:00001C1C                 call    _isspace
.text$mn:00001C21                 add     esp, 4
.text$mn:00001C24                 test    eax, eax
.text$mn:00001C26                 jnz     short loc_1C2C
.text$mn:00001C28                 xor     al, al
.text$mn:00001C2A                 jmp     short loc_1C30
.text$mn:00001C2C ; ---------------------------------------------------------------------------
.text$mn:00001C2C
.text$mn:00001C2C loc_1C2C:                               ; CODE XREF: TiXmlText::Blank(void)+4Ej
.text$mn:00001C2C                 jmp     short loc_1BF8
.text$mn:00001C2E ; ---------------------------------------------------------------------------
.text$mn:00001C2E
.text$mn:00001C2E loc_1C2E:                               ; CODE XREF: TiXmlText::Blank(void)+2Fj
.text$mn:00001C2E                 mov     al, 1
.text$mn:00001C30
.text$mn:00001C30 loc_1C30:                               ; CODE XREF: TiXmlText::Blank(void)+52j
.text$mn:00001C30                 mov     esp, ebp
.text$mn:00001C32                 pop     ebp
.text$mn:00001C33                 retn
.text$mn:00001C33 ?Blank@TiXmlText@@IBE_NXZ endp
.text$mn:00001C33
.text$mn:00001C33 ; ---------------------------------------------------------------------------
.text$mn:00001C34                 align 8
.text$mn:00001C38
.text$mn:00001C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C38
.text$mn:00001C38 ; Attributes: bp-based frame
.text$mn:00001C38
.text$mn:00001C38 ; const wchar_t *__thiscall TiXmlText::Parse(TiXmlText *this, const wchar_t *Str2, struct TiXmlParsingData *)
.text$mn:00001C38                 public ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001C38 ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00001C38                                         ; DATA XREF: .rdata:0000A478o
.text$mn:00001C38
.text$mn:00001C38 lpString        = dword ptr -0Ch
.text$mn:00001C38 var_8           = dword ptr -8
.text$mn:00001C38 var_1           = byte ptr -1
.text$mn:00001C38 Str2            = dword ptr  8
.text$mn:00001C38 arg_4           = dword ptr  0Ch
.text$mn:00001C38
.text$mn:00001C38                 push    ebp
.text$mn:00001C39                 mov     ebp, esp
.text$mn:00001C3B                 sub     esp, 0Ch
.text$mn:00001C3E                 mov     [ebp+var_8], ecx
.text$mn:00001C41                 push    offset $SG96081 ; Str
.text$mn:00001C46                 mov     ecx, [ebp+var_8]
.text$mn:00001C49                 add     ecx, 1Ch
.text$mn:00001C4C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001C51                 cmp     [ebp+arg_4], 0
.text$mn:00001C55                 jz      short loc_1C79
.text$mn:00001C57                 mov     eax, [ebp+Str2]
.text$mn:00001C5A                 push    eax             ; wchar_t *
.text$mn:00001C5B                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001C5E                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:00001C63                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001C66                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00001C6B                 mov     ecx, [eax]
.text$mn:00001C6D                 mov     edx, [eax+4]
.text$mn:00001C70                 mov     eax, [ebp+var_8]
.text$mn:00001C73                 mov     [eax+4], ecx
.text$mn:00001C76                 mov     [eax+8], edx
.text$mn:00001C79
.text$mn:00001C79 loc_1C79:                               ; CODE XREF: TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)+1Dj
.text$mn:00001C79                 mov     [ebp+var_1], 1
.text$mn:00001C7D                 mov     [ebp+lpString], offset $SG96085
.text$mn:00001C84                 push    0               ; char
.text$mn:00001C86                 mov     ecx, [ebp+lpString]
.text$mn:00001C89                 push    ecx             ; lpString
.text$mn:00001C8A                 movzx   edx, [ebp+var_1]
.text$mn:00001C8E                 push    edx             ; char
.text$mn:00001C8F                 mov     eax, [ebp+var_8]
.text$mn:00001C92                 add     eax, 1Ch
.text$mn:00001C95                 push    eax             ; int
.text$mn:00001C96                 mov     ecx, [ebp+Str2]
.text$mn:00001C99                 push    ecx             ; Str2
.text$mn:00001C9A                 call    ?ReadText@TiXmlBase@@KAPB_WPB_WPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@_N02@Z ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)
.text$mn:00001C9F                 add     esp, 14h
.text$mn:00001CA2                 mov     [ebp+Str2], eax
.text$mn:00001CA5                 cmp     [ebp+Str2], 0
.text$mn:00001CA9                 jz      short loc_1CB3
.text$mn:00001CAB                 mov     eax, [ebp+Str2]
.text$mn:00001CAE                 sub     eax, 2
.text$mn:00001CB1                 jmp     short loc_1CB5
.text$mn:00001CB3 ; ---------------------------------------------------------------------------
.text$mn:00001CB3
.text$mn:00001CB3 loc_1CB3:                               ; CODE XREF: TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)+71j
.text$mn:00001CB3                 xor     eax, eax
.text$mn:00001CB5
.text$mn:00001CB5 loc_1CB5:                               ; CODE XREF: TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)+79j
.text$mn:00001CB5                 mov     esp, ebp
.text$mn:00001CB7                 pop     ebp
.text$mn:00001CB8                 retn    8
.text$mn:00001CB8 ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00001CB8
.text$mn:00001CB8 ; ---------------------------------------------------------------------------
.text$mn:00001CBB                 db 0Dh dup(0CCh)
.text$mn:00001CC8
.text$mn:00001CC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CC8
.text$mn:00001CC8 ; Attributes: bp-based frame
.text$mn:00001CC8
.text$mn:00001CC8 ; protected: virtual void __thiscall TiXmlText::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001CC8                 public ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001CC8 ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001CC8                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+133p
.text$mn:00001CC8                                         ; DATA XREF: .rdata:0000A484o
.text$mn:00001CC8
.text$mn:00001CC8 var_8           = dword ptr -8
.text$mn:00001CC8 var_4           = dword ptr -4
.text$mn:00001CC8 arg_0           = dword ptr  8
.text$mn:00001CC8 arg_4           = dword ptr  0Ch
.text$mn:00001CC8
.text$mn:00001CC8                 push    ebp
.text$mn:00001CC9                 mov     ebp, esp
.text$mn:00001CCB                 sub     esp, 8
.text$mn:00001CCE                 mov     [ebp+var_8], ecx
.text$mn:00001CD1
.text$mn:00001CD1 loc_1CD1:                               ; CODE XREF: TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Dj
.text$mn:00001CD1                 mov     eax, [ebp+arg_0]
.text$mn:00001CD4                 mov     ecx, [eax]
.text$mn:00001CD6                 mov     edx, [ebp+arg_0]
.text$mn:00001CD9                 add     edx, [ecx+4]
.text$mn:00001CDC                 mov     ecx, edx        ; this
.text$mn:00001CDE                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00001CE3                 movzx   eax, al
.text$mn:00001CE6                 test    eax, eax
.text$mn:00001CE8                 jz      short loc_1D17
.text$mn:00001CEA                 mov     ecx, [ebp+arg_0]
.text$mn:00001CED                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:00001CF2                 movzx   ecx, ax
.text$mn:00001CF5                 mov     [ebp+var_4], ecx
.text$mn:00001CF8                 cmp     [ebp+var_4], 3Ch ; '<'
.text$mn:00001CFC                 jnz     short loc_1D00
.text$mn:00001CFE                 jmp     short loc_1D17
.text$mn:00001D00 ; ---------------------------------------------------------------------------
.text$mn:00001D00
.text$mn:00001D00 loc_1D00:                               ; CODE XREF: TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+34j
.text$mn:00001D00                 movzx   edx, word ptr [ebp+var_4]
.text$mn:00001D04                 push    edx
.text$mn:00001D05                 mov     ecx, [ebp+arg_4]
.text$mn:00001D08                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00001D0D                 mov     ecx, [ebp+arg_0]
.text$mn:00001D10                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:00001D15                 jmp     short loc_1CD1
.text$mn:00001D17 ; ---------------------------------------------------------------------------
.text$mn:00001D17
.text$mn:00001D17 loc_1D17:                               ; CODE XREF: TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20j
.text$mn:00001D17                                         ; TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+36j
.text$mn:00001D17                 mov     esp, ebp
.text$mn:00001D19                 pop     ebp
.text$mn:00001D1A                 retn    8
.text$mn:00001D1A ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001D1A
.text$mn:00001D1A ; ---------------------------------------------------------------------------
.text$mn:00001D1D                 db 0Bh dup(0CCh)
.text$mn:00001D28
.text$mn:00001D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D28
.text$mn:00001D28 ; Attributes: bp-based frame
.text$mn:00001D28
.text$mn:00001D28 ; protected: virtual void __thiscall TiXmlDeclaration::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001D28                 public ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001D28 ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001D28                                         ; DATA XREF: .rdata:0000A4A4o
.text$mn:00001D28
.text$mn:00001D28 var_8           = dword ptr -8
.text$mn:00001D28 var_4           = dword ptr -4
.text$mn:00001D28 arg_0           = dword ptr  8
.text$mn:00001D28 arg_4           = dword ptr  0Ch
.text$mn:00001D28
.text$mn:00001D28                 push    ebp
.text$mn:00001D29                 mov     ebp, esp
.text$mn:00001D2B                 sub     esp, 8
.text$mn:00001D2E                 mov     [ebp+var_8], ecx
.text$mn:00001D31
.text$mn:00001D31 loc_1D31:                               ; CODE XREF: TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_1D6Dj
.text$mn:00001D31                 mov     eax, [ebp+arg_0]
.text$mn:00001D34                 mov     ecx, [eax]
.text$mn:00001D36                 mov     edx, [ebp+arg_0]
.text$mn:00001D39                 add     edx, [ecx+4]
.text$mn:00001D3C                 mov     ecx, edx        ; this
.text$mn:00001D3E                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00001D43                 movzx   eax, al
.text$mn:00001D46                 test    eax, eax
.text$mn:00001D48                 jz      short loc_1D6F
.text$mn:00001D4A                 mov     ecx, [ebp+arg_0]
.text$mn:00001D4D                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:00001D52                 movzx   ecx, ax
.text$mn:00001D55                 mov     [ebp+var_4], ecx
.text$mn:00001D58                 movzx   edx, word ptr [ebp+var_4]
.text$mn:00001D5C                 push    edx
.text$mn:00001D5D                 mov     ecx, [ebp+arg_4]
.text$mn:00001D60                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00001D65                 cmp     [ebp+var_4], 3Eh ; '>'
.text$mn:00001D69                 jnz     short loc_1D6D
.text$mn:00001D6B                 jmp     short loc_1D6F
.text$mn:00001D6D ; ---------------------------------------------------------------------------
.text$mn:00001D6D
.text$mn:00001D6D loc_1D6D:                               ; CODE XREF: TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+41j
.text$mn:00001D6D                 jmp     short loc_1D31
.text$mn:00001D6F ; ---------------------------------------------------------------------------
.text$mn:00001D6F
.text$mn:00001D6F loc_1D6F:                               ; CODE XREF: TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20j
.text$mn:00001D6F                                         ; TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+43j
.text$mn:00001D6F                 mov     esp, ebp
.text$mn:00001D71                 pop     ebp
.text$mn:00001D72                 retn    8
.text$mn:00001D72 ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001D72
.text$mn:00001D72 ; ---------------------------------------------------------------------------
.text$mn:00001D75                 align 4
.text$mn:00001D78
.text$mn:00001D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D78
.text$mn:00001D78 ; Attributes: bp-based frame
.text$mn:00001D78
.text$mn:00001D78 ; const wchar_t *__thiscall TiXmlDeclaration::Parse(TiXmlDeclaration *this, const wchar_t *Str2, struct TiXmlParsingData *)
.text$mn:00001D78                 public ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001D78 ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00001D78                                         ; DATA XREF: .rdata:0000A498o
.text$mn:00001D78
.text$mn:00001D78 var_108         = dword ptr -108h
.text$mn:00001D78 var_104         = dword ptr -104h
.text$mn:00001D78 var_100         = byte ptr -100h
.text$mn:00001D78 var_B0          = byte ptr -0B0h
.text$mn:00001D78 var_60          = byte ptr -60h
.text$mn:00001D78 var_10          = dword ptr -10h
.text$mn:00001D78 var_C           = dword ptr -0Ch
.text$mn:00001D78 var_4           = dword ptr -4
.text$mn:00001D78 Str2            = dword ptr  8
.text$mn:00001D78 arg_4           = dword ptr  0Ch
.text$mn:00001D78
.text$mn:00001D78                 push    ebp
.text$mn:00001D79                 mov     ebp, esp
.text$mn:00001D7B                 push    0FFFFFFFFh
.text$mn:00001D7D                 push    offset __ehhandler$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:00001D82                 mov     eax, large fs:0
.text$mn:00001D88                 push    eax
.text$mn:00001D89                 sub     esp, 0FCh
.text$mn:00001D8F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001D94                 xor     eax, ebp
.text$mn:00001D96                 mov     [ebp+var_10], eax
.text$mn:00001D99                 push    eax
.text$mn:00001D9A                 lea     eax, [ebp+var_C]
.text$mn:00001D9D                 mov     large fs:0, eax
.text$mn:00001DA3                 mov     [ebp+var_104], ecx
.text$mn:00001DA9                 mov     eax, [ebp+Str2]
.text$mn:00001DAC                 push    eax             ; wchar_t *
.text$mn:00001DAD                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00001DB2                 add     esp, 4
.text$mn:00001DB5                 mov     [ebp+Str2], eax
.text$mn:00001DB8                 mov     ecx, [ebp+var_104] ; this
.text$mn:00001DBE                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:00001DC3                 mov     [ebp+var_108], eax
.text$mn:00001DC9                 cmp     [ebp+Str2], 0
.text$mn:00001DCD                 jz      short loc_1DF3
.text$mn:00001DCF                 mov     ecx, [ebp+Str2]
.text$mn:00001DD2                 movzx   edx, word ptr [ecx]
.text$mn:00001DD5                 test    edx, edx
.text$mn:00001DD7                 jz      short loc_1DF3
.text$mn:00001DD9                 push    1               ; bool
.text$mn:00001DDB                 push    offset $SG96110 ; "<?xml"
.text$mn:00001DE0                 mov     eax, [ebp+Str2]
.text$mn:00001DE3                 push    eax             ; wchar_t *
.text$mn:00001DE4                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001DE9                 add     esp, 0Ch
.text$mn:00001DEC                 movzx   ecx, al
.text$mn:00001DEF                 test    ecx, ecx
.text$mn:00001DF1                 jnz     short loc_1E14
.text$mn:00001DF3
.text$mn:00001DF3 loc_1DF3:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+55j
.text$mn:00001DF3                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+5Fj
.text$mn:00001DF3                 cmp     [ebp+var_108], 0
.text$mn:00001DFA                 jz      short loc_1E0D
.text$mn:00001DFC                 push    0               ; struct TiXmlParsingData *
.text$mn:00001DFE                 push    0               ; wchar_t *
.text$mn:00001E00                 push    0Ch             ; int
.text$mn:00001E02                 mov     ecx, [ebp+var_108] ; this
.text$mn:00001E08                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00001E0D
.text$mn:00001E0D loc_1E0D:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+82j
.text$mn:00001E0D                 xor     eax, eax
.text$mn:00001E0F                 jmp     loc_204E
.text$mn:00001E14 ; ---------------------------------------------------------------------------
.text$mn:00001E14
.text$mn:00001E14 loc_1E14:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+79j
.text$mn:00001E14                 cmp     [ebp+arg_4], 0
.text$mn:00001E18                 jz      short loc_1E3F
.text$mn:00001E1A                 mov     edx, [ebp+Str2]
.text$mn:00001E1D                 push    edx             ; wchar_t *
.text$mn:00001E1E                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001E21                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:00001E26                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001E29                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00001E2E                 mov     ecx, [eax]
.text$mn:00001E30                 mov     edx, [eax+4]
.text$mn:00001E33                 mov     eax, [ebp+var_104]
.text$mn:00001E39                 mov     [eax+4], ecx
.text$mn:00001E3C                 mov     [eax+8], edx
.text$mn:00001E3F
.text$mn:00001E3F loc_1E3F:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+A0j
.text$mn:00001E3F                 mov     ecx, [ebp+Str2]
.text$mn:00001E42                 add     ecx, 0Ah
.text$mn:00001E45                 mov     [ebp+Str2], ecx
.text$mn:00001E48                 push    offset $SG96113 ; Str
.text$mn:00001E4D                 mov     ecx, [ebp+var_104]
.text$mn:00001E53                 add     ecx, 44h ; 'D'
.text$mn:00001E56                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001E5B                 push    offset $SG96114 ; Str
.text$mn:00001E60                 mov     ecx, [ebp+var_104]
.text$mn:00001E66                 add     ecx, 60h ; '`'
.text$mn:00001E69                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001E6E                 push    offset $SG96115 ; Str
.text$mn:00001E73                 mov     ecx, [ebp+var_104]
.text$mn:00001E79                 add     ecx, 7Ch ; '|'
.text$mn:00001E7C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001E81
.text$mn:00001E81 loc_1E81:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *):loc_2047j
.text$mn:00001E81                 cmp     [ebp+Str2], 0
.text$mn:00001E85                 jz      loc_204C
.text$mn:00001E8B                 mov     edx, [ebp+Str2]
.text$mn:00001E8E                 movzx   eax, word ptr [edx]
.text$mn:00001E91                 test    eax, eax
.text$mn:00001E93                 jz      loc_204C
.text$mn:00001E99                 mov     ecx, [ebp+Str2]
.text$mn:00001E9C                 movzx   edx, word ptr [ecx]
.text$mn:00001E9F                 cmp     edx, 3Eh ; '>'
.text$mn:00001EA2                 jnz     short loc_1EB5
.text$mn:00001EA4                 mov     eax, [ebp+Str2]
.text$mn:00001EA7                 add     eax, 2
.text$mn:00001EAA                 mov     [ebp+Str2], eax
.text$mn:00001EAD                 mov     eax, [ebp+Str2]
.text$mn:00001EB0                 jmp     loc_204E
.text$mn:00001EB5 ; ---------------------------------------------------------------------------
.text$mn:00001EB5
.text$mn:00001EB5 loc_1EB5:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+12Aj
.text$mn:00001EB5                 mov     ecx, [ebp+Str2]
.text$mn:00001EB8                 push    ecx             ; wchar_t *
.text$mn:00001EB9                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00001EBE                 add     esp, 4
.text$mn:00001EC1                 mov     [ebp+Str2], eax
.text$mn:00001EC4                 push    1               ; bool
.text$mn:00001EC6                 push    offset $SG96121 ; "version"
.text$mn:00001ECB                 mov     edx, [ebp+Str2]
.text$mn:00001ECE                 push    edx             ; wchar_t *
.text$mn:00001ECF                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001ED4                 add     esp, 0Ch
.text$mn:00001ED7                 movzx   eax, al
.text$mn:00001EDA                 test    eax, eax
.text$mn:00001EDC                 jz      short loc_1F2B
.text$mn:00001EDE                 lea     ecx, [ebp+var_60]
.text$mn:00001EE1                 call    ??0TiXmlAttribute@@QAE@XZ ; TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00001EE6                 mov     [ebp+var_4], 0
.text$mn:00001EED                 mov     ecx, [ebp+arg_4]
.text$mn:00001EF0                 push    ecx             ; struct TiXmlParsingData *
.text$mn:00001EF1                 mov     edx, [ebp+Str2]
.text$mn:00001EF4                 push    edx             ; Str2
.text$mn:00001EF5                 lea     ecx, [ebp+var_60] ; this
.text$mn:00001EF8                 call    ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)
.text$mn:00001EFD                 mov     [ebp+Str2], eax
.text$mn:00001F00                 lea     ecx, [ebp+var_60] ; this
.text$mn:00001F03                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:00001F08                 push    eax             ; Str
.text$mn:00001F09                 mov     ecx, [ebp+var_104]
.text$mn:00001F0F                 add     ecx, 44h ; 'D'
.text$mn:00001F12                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001F17                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F1E                 lea     ecx, [ebp+var_60] ; this
.text$mn:00001F21                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:00001F26                 jmp     loc_2047
.text$mn:00001F2B ; ---------------------------------------------------------------------------
.text$mn:00001F2B
.text$mn:00001F2B loc_1F2B:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+164j
.text$mn:00001F2B                 push    1               ; bool
.text$mn:00001F2D                 push    offset $SG96125 ; "encoding"
.text$mn:00001F32                 mov     eax, [ebp+Str2]
.text$mn:00001F35                 push    eax             ; wchar_t *
.text$mn:00001F36                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001F3B                 add     esp, 0Ch
.text$mn:00001F3E                 movzx   ecx, al
.text$mn:00001F41                 test    ecx, ecx
.text$mn:00001F43                 jz      short loc_1F9E
.text$mn:00001F45                 lea     ecx, [ebp+var_100]
.text$mn:00001F4B                 call    ??0TiXmlAttribute@@QAE@XZ ; TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00001F50                 mov     [ebp+var_4], 1
.text$mn:00001F57                 mov     edx, [ebp+arg_4]
.text$mn:00001F5A                 push    edx             ; struct TiXmlParsingData *
.text$mn:00001F5B                 mov     eax, [ebp+Str2]
.text$mn:00001F5E                 push    eax             ; Str2
.text$mn:00001F5F                 lea     ecx, [ebp+var_100] ; this
.text$mn:00001F65                 call    ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)
.text$mn:00001F6A                 mov     [ebp+Str2], eax
.text$mn:00001F6D                 lea     ecx, [ebp+var_100] ; this
.text$mn:00001F73                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:00001F78                 push    eax             ; Str
.text$mn:00001F79                 mov     ecx, [ebp+var_104]
.text$mn:00001F7F                 add     ecx, 60h ; '`'
.text$mn:00001F82                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001F87                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F8E                 lea     ecx, [ebp+var_100] ; this
.text$mn:00001F94                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:00001F99                 jmp     loc_2047
.text$mn:00001F9E ; ---------------------------------------------------------------------------
.text$mn:00001F9E
.text$mn:00001F9E loc_1F9E:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+1CBj
.text$mn:00001F9E                 push    1               ; bool
.text$mn:00001FA0                 push    offset $SG96129 ; "standalone"
.text$mn:00001FA5                 mov     ecx, [ebp+Str2]
.text$mn:00001FA8                 push    ecx             ; wchar_t *
.text$mn:00001FA9                 call    ?StringEqual@TiXmlBase@@KA_NPB_W0_N@Z ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)
.text$mn:00001FAE                 add     esp, 0Ch
.text$mn:00001FB1                 movzx   edx, al
.text$mn:00001FB4                 test    edx, edx
.text$mn:00001FB6                 jz      short loc_200E
.text$mn:00001FB8                 lea     ecx, [ebp+var_B0]
.text$mn:00001FBE                 call    ??0TiXmlAttribute@@QAE@XZ ; TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00001FC3                 mov     [ebp+var_4], 2
.text$mn:00001FCA                 mov     eax, [ebp+arg_4]
.text$mn:00001FCD                 push    eax             ; struct TiXmlParsingData *
.text$mn:00001FCE                 mov     ecx, [ebp+Str2]
.text$mn:00001FD1                 push    ecx             ; Str2
.text$mn:00001FD2                 lea     ecx, [ebp+var_B0] ; this
.text$mn:00001FD8                 call    ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)
.text$mn:00001FDD                 mov     [ebp+Str2], eax
.text$mn:00001FE0                 lea     ecx, [ebp+var_B0] ; this
.text$mn:00001FE6                 call    ?Value@TiXmlAttribute@@QBEPB_WXZ ; TiXmlAttribute::Value(void)
.text$mn:00001FEB                 push    eax             ; Str
.text$mn:00001FEC                 mov     ecx, [ebp+var_104]
.text$mn:00001FF2                 add     ecx, 7Ch ; '|'
.text$mn:00001FF5                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001FFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002001                 lea     ecx, [ebp+var_B0] ; this
.text$mn:00002007                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:0000200C                 jmp     short loc_2047
.text$mn:0000200E ; ---------------------------------------------------------------------------
.text$mn:0000200E
.text$mn:0000200E loc_200E:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+23Ej
.text$mn:0000200E                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+2CDj
.text$mn:0000200E                 cmp     [ebp+Str2], 0
.text$mn:00002012                 jz      short loc_2047
.text$mn:00002014                 mov     edx, [ebp+Str2]
.text$mn:00002017                 movzx   eax, word ptr [edx]
.text$mn:0000201A                 test    eax, eax
.text$mn:0000201C                 jz      short loc_2047
.text$mn:0000201E                 mov     ecx, [ebp+Str2]
.text$mn:00002021                 movzx   edx, word ptr [ecx]
.text$mn:00002024                 cmp     edx, 3Eh ; '>'
.text$mn:00002027                 jz      short loc_2047
.text$mn:00002029                 mov     eax, [ebp+Str2]
.text$mn:0000202C                 movzx   ecx, word ptr [eax]
.text$mn:0000202F                 push    ecx             ; C
.text$mn:00002030                 call    _isspace
.text$mn:00002035                 add     esp, 4
.text$mn:00002038                 test    eax, eax
.text$mn:0000203A                 jnz     short loc_2047
.text$mn:0000203C                 mov     edx, [ebp+Str2]
.text$mn:0000203F                 add     edx, 2
.text$mn:00002042                 mov     [ebp+Str2], edx
.text$mn:00002045                 jmp     short loc_200E
.text$mn:00002047 ; ---------------------------------------------------------------------------
.text$mn:00002047
.text$mn:00002047 loc_2047:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+1AEj
.text$mn:00002047                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+221j ...
.text$mn:00002047                 jmp     loc_1E81
.text$mn:0000204C ; ---------------------------------------------------------------------------
.text$mn:0000204C
.text$mn:0000204C loc_204C:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+10Dj
.text$mn:0000204C                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+11Bj
.text$mn:0000204C                 xor     eax, eax
.text$mn:0000204E
.text$mn:0000204E loc_204E:                               ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+97j
.text$mn:0000204E                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+138j
.text$mn:0000204E                 mov     ecx, [ebp+var_C]
.text$mn:00002051                 mov     large fs:0, ecx
.text$mn:00002058                 pop     ecx
.text$mn:00002059                 mov     ecx, [ebp+var_10]
.text$mn:0000205C                 xor     ecx, ebp
.text$mn:0000205E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002063                 mov     esp, ebp
.text$mn:00002065                 pop     ebp
.text$mn:00002066                 retn    8
.text$mn:00002066 ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00002066
.text$mn:00002066 ; ---------------------------------------------------------------------------
.text$mn:00002069                 db 0Fh dup(0CCh)
.text$mn:00002078
.text$mn:00002078 ; =============== S U B R O U T I N E =======================================
.text$mn:00002078
.text$mn:00002078 ; Attributes: bp-based frame
.text$mn:00002078
.text$mn:00002078 ; protected: virtual void __thiscall TiXmlUnknown::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002078                 public ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00002078 ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00002078                                         ; DATA XREF: .rdata:0000A4C4o
.text$mn:00002078
.text$mn:00002078 var_8           = dword ptr -8
.text$mn:00002078 var_4           = dword ptr -4
.text$mn:00002078 arg_0           = dword ptr  8
.text$mn:00002078 arg_4           = dword ptr  0Ch
.text$mn:00002078
.text$mn:00002078                 push    ebp
.text$mn:00002079                 mov     ebp, esp
.text$mn:0000207B                 sub     esp, 8
.text$mn:0000207E                 mov     [ebp+var_8], ecx
.text$mn:00002081
.text$mn:00002081 loc_2081:                               ; CODE XREF: TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_20BDj
.text$mn:00002081                 mov     eax, [ebp+arg_0]
.text$mn:00002084                 mov     ecx, [eax]
.text$mn:00002086                 mov     edx, [ebp+arg_0]
.text$mn:00002089                 add     edx, [ecx+4]
.text$mn:0000208C                 mov     ecx, edx        ; this
.text$mn:0000208E                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00002093                 movzx   eax, al
.text$mn:00002096                 test    eax, eax
.text$mn:00002098                 jz      short loc_20BF
.text$mn:0000209A                 mov     ecx, [ebp+arg_0]
.text$mn:0000209D                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:000020A2                 movzx   ecx, ax
.text$mn:000020A5                 mov     [ebp+var_4], ecx
.text$mn:000020A8                 movzx   edx, word ptr [ebp+var_4]
.text$mn:000020AC                 push    edx
.text$mn:000020AD                 mov     ecx, [ebp+arg_4]
.text$mn:000020B0                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:000020B5                 cmp     [ebp+var_4], 3Eh ; '>'
.text$mn:000020B9                 jnz     short loc_20BD
.text$mn:000020BB                 jmp     short loc_20BF
.text$mn:000020BD ; ---------------------------------------------------------------------------
.text$mn:000020BD
.text$mn:000020BD loc_20BD:                               ; CODE XREF: TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+41j
.text$mn:000020BD                 jmp     short loc_2081
.text$mn:000020BF ; ---------------------------------------------------------------------------
.text$mn:000020BF
.text$mn:000020BF loc_20BF:                               ; CODE XREF: TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20j
.text$mn:000020BF                                         ; TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+43j
.text$mn:000020BF                 mov     esp, ebp
.text$mn:000020C1                 pop     ebp
.text$mn:000020C2                 retn    8
.text$mn:000020C2 ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:000020C2
.text$mn:000020C2 ; ---------------------------------------------------------------------------
.text$mn:000020C5                 align 4
.text$mn:000020C8
.text$mn:000020C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000020C8
.text$mn:000020C8 ; Attributes: bp-based frame
.text$mn:000020C8
.text$mn:000020C8 ; const wchar_t *__thiscall TiXmlUnknown::Parse(TiXmlUnknown *this, const wchar_t *, struct TiXmlParsingData *)
.text$mn:000020C8                 public ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:000020C8 ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:000020C8                                         ; DATA XREF: .rdata:0000A4B8o
.text$mn:000020C8
.text$mn:000020C8 var_8           = dword ptr -8
.text$mn:000020C8 var_4           = dword ptr -4
.text$mn:000020C8 arg_0           = dword ptr  8
.text$mn:000020C8 arg_4           = dword ptr  0Ch
.text$mn:000020C8
.text$mn:000020C8                 push    ebp
.text$mn:000020C9                 mov     ebp, esp
.text$mn:000020CB                 sub     esp, 8
.text$mn:000020CE                 mov     [ebp+var_4], ecx
.text$mn:000020D1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000020D4                 call    ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument(void)
.text$mn:000020D9                 mov     [ebp+var_8], eax
.text$mn:000020DC                 mov     eax, [ebp+arg_0]
.text$mn:000020DF                 push    eax             ; wchar_t *
.text$mn:000020E0                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:000020E5                 add     esp, 4
.text$mn:000020E8                 mov     [ebp+arg_0], eax
.text$mn:000020EB                 cmp     [ebp+arg_4], 0
.text$mn:000020EF                 jz      short loc_2113
.text$mn:000020F1                 mov     ecx, [ebp+arg_0]
.text$mn:000020F4                 push    ecx             ; wchar_t *
.text$mn:000020F5                 mov     ecx, [ebp+arg_4] ; this
.text$mn:000020F8                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:000020FD                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00002100                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00002105                 mov     edx, [eax]
.text$mn:00002107                 mov     eax, [eax+4]
.text$mn:0000210A                 mov     ecx, [ebp+var_4]
.text$mn:0000210D                 mov     [ecx+4], edx
.text$mn:00002110                 mov     [ecx+8], eax
.text$mn:00002113
.text$mn:00002113 loc_2113:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+27j
.text$mn:00002113                 cmp     [ebp+arg_0], 0
.text$mn:00002117                 jz      short loc_212E
.text$mn:00002119                 mov     edx, [ebp+arg_0]
.text$mn:0000211C                 movzx   eax, word ptr [edx]
.text$mn:0000211F                 test    eax, eax
.text$mn:00002121                 jz      short loc_212E
.text$mn:00002123                 mov     ecx, [ebp+arg_0]
.text$mn:00002126                 movzx   edx, word ptr [ecx]
.text$mn:00002129                 cmp     edx, 3Ch ; '<'
.text$mn:0000212C                 jz      short loc_214D
.text$mn:0000212E
.text$mn:0000212E loc_212E:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+4Fj
.text$mn:0000212E                                         ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+59j
.text$mn:0000212E                 cmp     [ebp+var_8], 0
.text$mn:00002132                 jz      short loc_2146
.text$mn:00002134                 mov     eax, [ebp+arg_4]
.text$mn:00002137                 push    eax             ; struct TiXmlParsingData *
.text$mn:00002138                 mov     ecx, [ebp+arg_0]
.text$mn:0000213B                 push    ecx             ; wchar_t *
.text$mn:0000213C                 push    0Ah             ; int
.text$mn:0000213E                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002141                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00002146
.text$mn:00002146 loc_2146:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+6Aj
.text$mn:00002146                 xor     eax, eax
.text$mn:00002148                 jmp     loc_21CE
.text$mn:0000214D ; ---------------------------------------------------------------------------
.text$mn:0000214D
.text$mn:0000214D loc_214D:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+64j
.text$mn:0000214D                 mov     edx, [ebp+arg_0]
.text$mn:00002150                 add     edx, 2
.text$mn:00002153                 mov     [ebp+arg_0], edx
.text$mn:00002156                 push    offset $SG95995 ; Str
.text$mn:0000215B                 mov     ecx, [ebp+var_4]
.text$mn:0000215E                 add     ecx, 1Ch
.text$mn:00002161                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002166
.text$mn:00002166 loc_2166:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+D4j
.text$mn:00002166                 cmp     [ebp+arg_0], 0
.text$mn:0000216A                 jz      short loc_219E
.text$mn:0000216C                 mov     eax, [ebp+arg_0]
.text$mn:0000216F                 movzx   ecx, word ptr [eax]
.text$mn:00002172                 test    ecx, ecx
.text$mn:00002174                 jz      short loc_219E
.text$mn:00002176                 mov     edx, [ebp+arg_0]
.text$mn:00002179                 movzx   eax, word ptr [edx]
.text$mn:0000217C                 cmp     eax, 3Eh ; '>'
.text$mn:0000217F                 jz      short loc_219E
.text$mn:00002181                 mov     ecx, [ebp+arg_0]
.text$mn:00002184                 movzx   edx, word ptr [ecx]
.text$mn:00002187                 push    edx
.text$mn:00002188                 mov     ecx, [ebp+var_4]
.text$mn:0000218B                 add     ecx, 1Ch
.text$mn:0000218E                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00002193                 mov     eax, [ebp+arg_0]
.text$mn:00002196                 add     eax, 2
.text$mn:00002199                 mov     [ebp+arg_0], eax
.text$mn:0000219C                 jmp     short loc_2166
.text$mn:0000219E ; ---------------------------------------------------------------------------
.text$mn:0000219E
.text$mn:0000219E loc_219E:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+A2j
.text$mn:0000219E                                         ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+ACj ...
.text$mn:0000219E                 cmp     [ebp+arg_0], 0
.text$mn:000021A2                 jnz     short loc_21B8
.text$mn:000021A4                 cmp     [ebp+var_8], 0
.text$mn:000021A8                 jz      short loc_21B8
.text$mn:000021AA                 push    0               ; struct TiXmlParsingData *
.text$mn:000021AC                 push    0               ; wchar_t *
.text$mn:000021AE                 push    0Ah             ; int
.text$mn:000021B0                 mov     ecx, [ebp+var_8] ; this
.text$mn:000021B3                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:000021B8
.text$mn:000021B8 loc_21B8:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+DAj
.text$mn:000021B8                                         ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+E0j
.text$mn:000021B8                 mov     ecx, [ebp+arg_0]
.text$mn:000021BB                 movzx   edx, word ptr [ecx]
.text$mn:000021BE                 cmp     edx, 3Eh ; '>'
.text$mn:000021C1                 jnz     short loc_21CB
.text$mn:000021C3                 mov     eax, [ebp+arg_0]
.text$mn:000021C6                 add     eax, 2
.text$mn:000021C9                 jmp     short loc_21CE
.text$mn:000021CB ; ---------------------------------------------------------------------------
.text$mn:000021CB
.text$mn:000021CB loc_21CB:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+F9j
.text$mn:000021CB                 mov     eax, [ebp+arg_0]
.text$mn:000021CE
.text$mn:000021CE loc_21CE:                               ; CODE XREF: TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+80j
.text$mn:000021CE                                         ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)+101j
.text$mn:000021CE                 mov     esp, ebp
.text$mn:000021D0                 pop     ebp
.text$mn:000021D1                 retn    8
.text$mn:000021D1 ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:000021D1
.text$mn:000021D1 ; ---------------------------------------------------------------------------
.text$mn:000021D4                 align 8
.text$mn:000021D8
.text$mn:000021D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021D8
.text$mn:000021D8 ; Attributes: bp-based frame
.text$mn:000021D8
.text$mn:000021D8 ; const wchar_t *__thiscall TiXmlDocument::Parse(TiXmlDocument *this, const wchar_t *, struct TiXmlParsingData *)
.text$mn:000021D8                 public ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$mn:000021D8 ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:000021D8
.text$mn:000021D8 var_18          = byte ptr -18h
.text$mn:000021D8 var_8           = dword ptr -8
.text$mn:000021D8 var_4           = dword ptr -4
.text$mn:000021D8 arg_0           = dword ptr  8
.text$mn:000021D8 arg_4           = dword ptr  0Ch
.text$mn:000021D8
.text$mn:000021D8                 push    ebp
.text$mn:000021D9                 mov     ebp, esp
.text$mn:000021DB                 sub     esp, 18h
.text$mn:000021DE                 mov     [ebp+var_4], ecx
.text$mn:000021E1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000021E4                 call    ?ClearError@TiXmlDocument@@QAEXXZ ; TiXmlDocument::ClearError(void)
.text$mn:000021E9                 cmp     [ebp+arg_0], 0
.text$mn:000021ED                 jz      short loc_21F9
.text$mn:000021EF                 mov     eax, [ebp+arg_0]
.text$mn:000021F2                 movzx   ecx, word ptr [eax]
.text$mn:000021F5                 test    ecx, ecx
.text$mn:000021F7                 jnz     short loc_220E
.text$mn:000021F9
.text$mn:000021F9 loc_21F9:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+15j
.text$mn:000021F9                 push    0               ; struct TiXmlParsingData *
.text$mn:000021FB                 push    0               ; wchar_t *
.text$mn:000021FD                 push    0Dh             ; int
.text$mn:000021FF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002202                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00002207                 xor     eax, eax
.text$mn:00002209                 jmp     loc_230D
.text$mn:0000220E ; ---------------------------------------------------------------------------
.text$mn:0000220E
.text$mn:0000220E loc_220E:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+1Fj
.text$mn:0000220E                 mov     ecx, [ebp+var_4]
.text$mn:00002211                 add     ecx, 4          ; this
.text$mn:00002214                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:00002219                 cmp     [ebp+arg_4], 0
.text$mn:0000221D                 jz      short loc_2238
.text$mn:0000221F                 mov     edx, [ebp+var_4]
.text$mn:00002222                 mov     eax, [ebp+arg_4]
.text$mn:00002225                 mov     ecx, [eax]
.text$mn:00002227                 mov     [edx+4], ecx
.text$mn:0000222A                 mov     edx, [ebp+var_4]
.text$mn:0000222D                 mov     eax, [ebp+arg_4]
.text$mn:00002230                 mov     ecx, [eax+4]
.text$mn:00002233                 mov     [edx+8], ecx
.text$mn:00002236                 jmp     short loc_224C
.text$mn:00002238 ; ---------------------------------------------------------------------------
.text$mn:00002238
.text$mn:00002238 loc_2238:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+45j
.text$mn:00002238                 mov     edx, [ebp+var_4]
.text$mn:0000223B                 mov     dword ptr [edx+4], 0
.text$mn:00002242                 mov     eax, [ebp+var_4]
.text$mn:00002245                 mov     dword ptr [eax+8], 0
.text$mn:0000224C
.text$mn:0000224C loc_224C:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+5Ej
.text$mn:0000224C                 mov     ecx, [ebp+var_4]
.text$mn:0000224F                 mov     edx, [ecx+8]
.text$mn:00002252                 push    edx
.text$mn:00002253                 mov     eax, [ebp+var_4]
.text$mn:00002256                 mov     ecx, [eax+4]
.text$mn:00002259                 push    ecx
.text$mn:0000225A                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000225D                 call    ?TabSize@TiXmlDocument@@QBEHXZ ; TiXmlDocument::TabSize(void)
.text$mn:00002262                 push    eax
.text$mn:00002263                 mov     edx, [ebp+arg_0]
.text$mn:00002266                 push    edx
.text$mn:00002267                 lea     ecx, [ebp+var_18]
.text$mn:0000226A                 call    ??0TiXmlParsingData@@AAE@PB_WHHH@Z ; TiXmlParsingData::TiXmlParsingData(wchar_t const *,int,int,int)
.text$mn:0000226F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00002272                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:00002277                 mov     ecx, [eax]
.text$mn:00002279                 mov     edx, [eax+4]
.text$mn:0000227C                 mov     eax, [ebp+var_4]
.text$mn:0000227F                 mov     [eax+4], ecx
.text$mn:00002282                 mov     [eax+8], edx
.text$mn:00002285                 mov     ecx, [ebp+arg_0]
.text$mn:00002288                 push    ecx             ; wchar_t *
.text$mn:00002289                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:0000228E                 add     esp, 4
.text$mn:00002291                 mov     [ebp+arg_0], eax
.text$mn:00002294                 cmp     [ebp+arg_0], 0
.text$mn:00002298                 jnz     short loc_22AC
.text$mn:0000229A                 push    0               ; struct TiXmlParsingData *
.text$mn:0000229C                 push    0               ; wchar_t *
.text$mn:0000229E                 push    0Dh             ; int
.text$mn:000022A0                 mov     ecx, [ebp+var_4] ; this
.text$mn:000022A3                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:000022A8                 xor     eax, eax
.text$mn:000022AA                 jmp     short loc_230D
.text$mn:000022AC ; ---------------------------------------------------------------------------
.text$mn:000022AC
.text$mn:000022AC loc_22AC:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+C0j
.text$mn:000022AC                                         ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+130j
.text$mn:000022AC                 cmp     [ebp+arg_0], 0
.text$mn:000022B0                 jz      short loc_230A
.text$mn:000022B2                 mov     edx, [ebp+arg_0]
.text$mn:000022B5                 movzx   eax, word ptr [edx]
.text$mn:000022B8                 test    eax, eax
.text$mn:000022BA                 jz      short loc_230A
.text$mn:000022BC                 mov     ecx, [ebp+arg_0]
.text$mn:000022BF                 push    ecx             ; wchar_t *
.text$mn:000022C0                 mov     ecx, [ebp+var_4] ; this
.text$mn:000022C3                 call    ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z ; TiXmlNode::Identify(wchar_t const *)
.text$mn:000022C8                 mov     [ebp+var_8], eax
.text$mn:000022CB                 cmp     [ebp+var_8], 0
.text$mn:000022CF                 jz      short loc_22F7
.text$mn:000022D1                 lea     edx, [ebp+var_18]
.text$mn:000022D4                 push    edx
.text$mn:000022D5                 mov     eax, [ebp+arg_0]
.text$mn:000022D8                 push    eax
.text$mn:000022D9                 mov     ecx, [ebp+var_8]
.text$mn:000022DC                 mov     edx, [ecx]
.text$mn:000022DE                 mov     ecx, [ebp+var_8]
.text$mn:000022E1                 mov     eax, [edx+0Ch]
.text$mn:000022E4                 call    eax
.text$mn:000022E6                 mov     [ebp+arg_0], eax
.text$mn:000022E9                 mov     ecx, [ebp+var_8]
.text$mn:000022EC                 push    ecx             ; struct TiXmlNode *
.text$mn:000022ED                 mov     ecx, [ebp+var_4] ; this
.text$mn:000022F0                 call    ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild(TiXmlNode *)
.text$mn:000022F5                 jmp     short loc_22F9
.text$mn:000022F7 ; ---------------------------------------------------------------------------
.text$mn:000022F7
.text$mn:000022F7 loc_22F7:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+F7j
.text$mn:000022F7                 jmp     short loc_230A
.text$mn:000022F9 ; ---------------------------------------------------------------------------
.text$mn:000022F9
.text$mn:000022F9 loc_22F9:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+11Dj
.text$mn:000022F9                 mov     edx, [ebp+arg_0]
.text$mn:000022FC                 push    edx             ; wchar_t *
.text$mn:000022FD                 call    ?SkipWhiteSpace@TiXmlBase@@KAPB_WPB_W@Z ; TiXmlBase::SkipWhiteSpace(wchar_t const *)
.text$mn:00002302                 add     esp, 4
.text$mn:00002305                 mov     [ebp+arg_0], eax
.text$mn:00002308                 jmp     short loc_22AC
.text$mn:0000230A ; ---------------------------------------------------------------------------
.text$mn:0000230A
.text$mn:0000230A loc_230A:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+D8j
.text$mn:0000230A                                         ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+E2j ...
.text$mn:0000230A                 mov     eax, [ebp+arg_0]
.text$mn:0000230D
.text$mn:0000230D loc_230D:                               ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+31j
.text$mn:0000230D                                         ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+D2j
.text$mn:0000230D                 mov     esp, ebp
.text$mn:0000230F                 pop     ebp
.text$mn:00002310                 retn    8
.text$mn:00002310 ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:00002310
.text$mn:00002310 ; ---------------------------------------------------------------------------
.text$mn:00002313                 align 8
.text$mn:00002318
.text$mn:00002318 ; =============== S U B R O U T I N E =======================================
.text$mn:00002318
.text$mn:00002318 ; Attributes: bp-based frame
.text$mn:00002318
.text$mn:00002318 ; void __thiscall TiXmlDocument::SetError(TiXmlDocument *this, int, const wchar_t *, struct TiXmlParsingData *)
.text$mn:00002318                 public ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z
.text$mn:00002318 ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z proc near
.text$mn:00002318                                         ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+22Cp
.text$mn:00002318                                         ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+BAp ...
.text$mn:00002318
.text$mn:00002318 var_4           = dword ptr -4
.text$mn:00002318 arg_0           = dword ptr  8
.text$mn:00002318 arg_4           = dword ptr  0Ch
.text$mn:00002318 arg_8           = dword ptr  10h
.text$mn:00002318
.text$mn:00002318                 push    ebp
.text$mn:00002319                 mov     ebp, esp
.text$mn:0000231B                 push    ecx
.text$mn:0000231C                 mov     [ebp+var_4], ecx
.text$mn:0000231F                 mov     eax, [ebp+var_4]
.text$mn:00002322                 movzx   ecx, byte ptr [eax+44h]
.text$mn:00002326                 test    ecx, ecx
.text$mn:00002328                 jz      short loc_232F
.text$mn:0000232A                 jmp     loc_23B4
.text$mn:0000232F ; ---------------------------------------------------------------------------
.text$mn:0000232F
.text$mn:0000232F loc_232F:                               ; CODE XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+10j
.text$mn:0000232F                 cmp     [ebp+arg_0], 0
.text$mn:00002333                 jle     short loc_233B
.text$mn:00002335                 cmp     [ebp+arg_0], 0Eh
.text$mn:00002339                 jl      short loc_2352
.text$mn:0000233B
.text$mn:0000233B loc_233B:                               ; CODE XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+1Bj
.text$mn:0000233B                 push    1E4h            ; Line
.text$mn:00002340                 push    offset $SG95779 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:00002345                 push    offset $SG95780 ; "err > 0 && err < TIXML_ERROR_STRING_COU"...
.text$mn:0000234A                 call    __wassert
.text$mn:0000234F ; ---------------------------------------------------------------------------
.text$mn:0000234F                 add     esp, 0Ch
.text$mn:00002352
.text$mn:00002352 loc_2352:                               ; CODE XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+21j
.text$mn:00002352                 mov     eax, [ebp+var_4]
.text$mn:00002355                 mov     byte ptr [eax+44h], 1
.text$mn:00002359                 mov     ecx, [ebp+var_4]
.text$mn:0000235C                 mov     edx, [ebp+arg_0]
.text$mn:0000235F                 mov     [ecx+48h], edx
.text$mn:00002362                 mov     eax, [ebp+var_4]
.text$mn:00002365                 mov     ecx, [eax+48h]
.text$mn:00002368                 mov     edx, dword ptr ds:?errorString@TiXmlBase@@1PAPB_WA[ecx*4] ; wchar_t const * * TiXmlBase::errorString
.text$mn:0000236F                 push    edx             ; Str
.text$mn:00002370                 mov     ecx, [ebp+var_4]
.text$mn:00002373                 add     ecx, 4Ch ; 'L'
.text$mn:00002376                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000237B                 mov     ecx, [ebp+var_4]
.text$mn:0000237E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002381                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:00002386                 cmp     [ebp+arg_4], 0
.text$mn:0000238A                 jz      short loc_23B4
.text$mn:0000238C                 cmp     [ebp+arg_8], 0
.text$mn:00002390                 jz      short loc_23B4
.text$mn:00002392                 mov     eax, [ebp+arg_4]
.text$mn:00002395                 push    eax             ; wchar_t *
.text$mn:00002396                 mov     ecx, [ebp+arg_8] ; this
.text$mn:00002399                 call    ?Stamp@TiXmlParsingData@@QAEXPB_W@Z ; TiXmlParsingData::Stamp(wchar_t const *)
.text$mn:0000239E                 mov     ecx, [ebp+arg_8] ; this
.text$mn:000023A1                 call    ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor(void)
.text$mn:000023A6                 mov     ecx, [eax]
.text$mn:000023A8                 mov     edx, [eax+4]
.text$mn:000023AB                 mov     eax, [ebp+var_4]
.text$mn:000023AE                 mov     [eax+6Ch], ecx
.text$mn:000023B1                 mov     [eax+70h], edx
.text$mn:000023B4
.text$mn:000023B4 loc_23B4:                               ; CODE XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+12j
.text$mn:000023B4                                         ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+72j ...
.text$mn:000023B4                 mov     esp, ebp
.text$mn:000023B6                 pop     ebp
.text$mn:000023B7                 retn    0Ch
.text$mn:000023B7 ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z endp
.text$mn:000023B7
.text$mn:000023B7 ; ---------------------------------------------------------------------------
.text$mn:000023BA                 db 0Eh dup(0CCh)
.text$mn:000023C8
.text$mn:000023C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000023C8
.text$mn:000023C8 ; Attributes: bp-based frame
.text$mn:000023C8
.text$mn:000023C8 ; protected: virtual void __thiscall TiXmlDocument::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000023C8                 public ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:000023C8 ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:000023C8
.text$mn:000023C8 var_24          = dword ptr -24h
.text$mn:000023C8 var_20          = dword ptr -20h
.text$mn:000023C8 var_1C          = dword ptr -1Ch
.text$mn:000023C8 var_18          = dword ptr -18h
.text$mn:000023C8 var_14          = dword ptr -14h
.text$mn:000023C8 var_10          = dword ptr -10h
.text$mn:000023C8 var_C           = dword ptr -0Ch
.text$mn:000023C8 var_8           = dword ptr -8
.text$mn:000023C8 var_1           = byte ptr -1
.text$mn:000023C8 arg_0           = dword ptr  8
.text$mn:000023C8 arg_4           = dword ptr  0Ch
.text$mn:000023C8
.text$mn:000023C8                 push    ebp
.text$mn:000023C9                 mov     ebp, esp
.text$mn:000023CB                 sub     esp, 24h
.text$mn:000023CE                 mov     [ebp+var_C], ecx
.text$mn:000023D1                 mov     eax, [ebp+arg_4]
.text$mn:000023D4                 push    eax
.text$mn:000023D5                 push    3Ch ; '<'
.text$mn:000023D7                 mov     ecx, [ebp+arg_0]
.text$mn:000023DA                 push    ecx
.text$mn:000023DB                 call    ?StreamTo@TiXmlBase@@KA_NPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@HPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000023E0                 add     esp, 0Ch
.text$mn:000023E3                 movzx   edx, al
.text$mn:000023E6                 test    edx, edx
.text$mn:000023E8                 jnz     short loc_23FD
.text$mn:000023EA                 push    0               ; struct TiXmlParsingData *
.text$mn:000023EC                 push    0               ; wchar_t *
.text$mn:000023EE                 push    8               ; int
.text$mn:000023F0                 mov     ecx, [ebp+var_C] ; this
.text$mn:000023F3                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:000023F8                 jmp     loc_253D
.text$mn:000023FD ; ---------------------------------------------------------------------------
.text$mn:000023FD
.text$mn:000023FD loc_23FD:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20j
.text$mn:000023FD                                         ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_252Aj
.text$mn:000023FD                 mov     eax, [ebp+arg_0]
.text$mn:00002400                 mov     ecx, [eax]
.text$mn:00002402                 mov     edx, [ebp+arg_0]
.text$mn:00002405                 add     edx, [ecx+4]
.text$mn:00002408                 mov     ecx, edx        ; this
.text$mn:0000240A                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000240F                 movzx   eax, al
.text$mn:00002412                 test    eax, eax
.text$mn:00002414                 jz      loc_252F
.text$mn:0000241A                 mov     ecx, [ebp+arg_4]
.text$mn:0000241D                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002422                 mov     [ebp+var_1C], eax
.text$mn:00002425
.text$mn:00002425 loc_2425:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+9Fj
.text$mn:00002425                 mov     ecx, [ebp+arg_0]
.text$mn:00002428                 mov     edx, [ecx]
.text$mn:0000242A                 mov     ecx, [ebp+arg_0]
.text$mn:0000242D                 add     ecx, [edx+4]    ; this
.text$mn:00002430                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00002435                 movzx   eax, al
.text$mn:00002438                 test    eax, eax
.text$mn:0000243A                 jz      short loc_2469
.text$mn:0000243C                 mov     ecx, [ebp+arg_0]
.text$mn:0000243F                 call    ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)
.text$mn:00002444                 movzx   ecx, ax
.text$mn:00002447                 cmp     ecx, 3Eh ; '>'
.text$mn:0000244A                 jz      short loc_2469
.text$mn:0000244C                 mov     ecx, [ebp+arg_0]
.text$mn:0000244F                 call    ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)
.text$mn:00002454                 movzx   edx, ax
.text$mn:00002457                 mov     [ebp+var_18], edx
.text$mn:0000245A                 movzx   eax, word ptr [ebp+var_18]
.text$mn:0000245E                 push    eax
.text$mn:0000245F                 mov     ecx, [ebp+arg_4]
.text$mn:00002462                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00002467                 jmp     short loc_2425
.text$mn:00002469 ; ---------------------------------------------------------------------------
.text$mn:00002469
.text$mn:00002469 loc_2469:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+72j
.text$mn:00002469                                         ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+82j
.text$mn:00002469                 mov     ecx, [ebp+arg_0]
.text$mn:0000246C                 mov     edx, [ecx]
.text$mn:0000246E                 mov     ecx, [ebp+arg_0]
.text$mn:00002471                 add     ecx, [edx+4]    ; this
.text$mn:00002474                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00002479                 movzx   eax, al
.text$mn:0000247C                 test    eax, eax
.text$mn:0000247E                 jz      loc_252A
.text$mn:00002484                 mov     ecx, [ebp+arg_4]
.text$mn:00002487                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000248C                 mov     ecx, [ebp+var_1C]
.text$mn:0000248F                 lea     edx, [eax+ecx*2]
.text$mn:00002492                 push    edx             ; wchar_t *
.text$mn:00002493                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002496                 call    ?Identify@TiXmlNode@@IAEPAV1@PB_W@Z ; TiXmlNode::Identify(wchar_t const *)
.text$mn:0000249B                 mov     [ebp+var_8], eax
.text$mn:0000249E                 cmp     [ebp+var_8], 0
.text$mn:000024A2                 jz      short loc_251A
.text$mn:000024A4                 mov     eax, [ebp+arg_4]
.text$mn:000024A7                 push    eax
.text$mn:000024A8                 mov     ecx, [ebp+arg_0]
.text$mn:000024AB                 push    ecx
.text$mn:000024AC                 mov     edx, [ebp+var_8]
.text$mn:000024AF                 mov     eax, [edx]
.text$mn:000024B1                 mov     ecx, [ebp+var_8]
.text$mn:000024B4                 mov     edx, [eax+18h]
.text$mn:000024B7                 call    edx
.text$mn:000024B9                 mov     ecx, [ebp+var_8] ; this
.text$mn:000024BC                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000024C1                 test    eax, eax
.text$mn:000024C3                 jz      short loc_24CE
.text$mn:000024C5                 mov     [ebp+var_14], 1
.text$mn:000024CC                 jmp     short loc_24D5
.text$mn:000024CE ; ---------------------------------------------------------------------------
.text$mn:000024CE
.text$mn:000024CE loc_24CE:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+FBj
.text$mn:000024CE                 mov     [ebp+var_14], 0
.text$mn:000024D5
.text$mn:000024D5 loc_24D5:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+104j
.text$mn:000024D5                 mov     al, byte ptr [ebp+var_14]
.text$mn:000024D8                 mov     [ebp+var_1], al
.text$mn:000024DB                 mov     ecx, [ebp+var_8]
.text$mn:000024DE                 mov     [ebp+var_20], ecx
.text$mn:000024E1                 mov     edx, [ebp+var_20]
.text$mn:000024E4                 mov     [ebp+var_10], edx
.text$mn:000024E7                 cmp     [ebp+var_10], 0
.text$mn:000024EB                 jz      short loc_2500
.text$mn:000024ED                 push    1
.text$mn:000024EF                 mov     eax, [ebp+var_10]
.text$mn:000024F2                 mov     edx, [eax]
.text$mn:000024F4                 mov     ecx, [ebp+var_10]
.text$mn:000024F7                 mov     eax, [edx]
.text$mn:000024F9                 call    eax
.text$mn:000024FB                 mov     [ebp+var_24], eax
.text$mn:000024FE                 jmp     short loc_2507
.text$mn:00002500 ; ---------------------------------------------------------------------------
.text$mn:00002500
.text$mn:00002500 loc_2500:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+123j
.text$mn:00002500                 mov     [ebp+var_24], 0
.text$mn:00002507
.text$mn:00002507 loc_2507:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+136j
.text$mn:00002507                 mov     [ebp+var_8], 0
.text$mn:0000250E                 movzx   ecx, [ebp+var_1]
.text$mn:00002512                 test    ecx, ecx
.text$mn:00002514                 jz      short loc_2518
.text$mn:00002516                 jmp     short loc_253D
.text$mn:00002518 ; ---------------------------------------------------------------------------
.text$mn:00002518
.text$mn:00002518 loc_2518:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+14Cj
.text$mn:00002518                 jmp     short loc_252A
.text$mn:0000251A ; ---------------------------------------------------------------------------
.text$mn:0000251A
.text$mn:0000251A loc_251A:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+DAj
.text$mn:0000251A                 push    0               ; struct TiXmlParsingData *
.text$mn:0000251C                 push    0               ; wchar_t *
.text$mn:0000251E                 push    1               ; int
.text$mn:00002520                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002523                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:00002528                 jmp     short loc_253D
.text$mn:0000252A ; ---------------------------------------------------------------------------
.text$mn:0000252A
.text$mn:0000252A loc_252A:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+B6j
.text$mn:0000252A                                         ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_2518j
.text$mn:0000252A                 jmp     loc_23FD
.text$mn:0000252F ; ---------------------------------------------------------------------------
.text$mn:0000252F
.text$mn:0000252F loc_252F:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Cj
.text$mn:0000252F                 push    0               ; struct TiXmlParsingData *
.text$mn:00002531                 push    0               ; wchar_t *
.text$mn:00002533                 push    1               ; int
.text$mn:00002535                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002538                 call    ?SetError@TiXmlDocument@@QAEXHPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)
.text$mn:0000253D
.text$mn:0000253D loc_253D:                               ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:0000253D                                         ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+14Ej ...
.text$mn:0000253D                 mov     esp, ebp
.text$mn:0000253F                 pop     ebp
.text$mn:00002540                 retn    8
.text$mn:00002540 ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00002540
.text$mn:00002540 ; ---------------------------------------------------------------------------
.text$mn:00002543                 align 8
.text$mn:00002548
.text$mn:00002548 ; =============== S U B R O U T I N E =======================================
.text$mn:00002548
.text$mn:00002548 ; Attributes: bp-based frame
.text$mn:00002548
.text$mn:00002548 ; void __thiscall TiXmlParsingData::Stamp(TiXmlParsingData *this, const wchar_t *)
.text$mn:00002548                 public ?Stamp@TiXmlParsingData@@QAEXPB_W@Z
.text$mn:00002548 ?Stamp@TiXmlParsingData@@QAEXPB_W@Z proc near
.text$mn:00002548                                         ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+5Ap
.text$mn:00002548                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+80p ...
.text$mn:00002548
.text$mn:00002548 var_14          = dword ptr -14h
.text$mn:00002548 var_10          = dword ptr -10h
.text$mn:00002548 var_C           = dword ptr -0Ch
.text$mn:00002548 var_8           = dword ptr -8
.text$mn:00002548 var_4           = dword ptr -4
.text$mn:00002548 arg_0           = dword ptr  8
.text$mn:00002548
.text$mn:00002548                 push    ebp
.text$mn:00002549                 mov     ebp, esp
.text$mn:0000254B                 sub     esp, 14h
.text$mn:0000254E                 mov     [ebp+var_8], ecx
.text$mn:00002551                 cmp     [ebp+arg_0], 0
.text$mn:00002555                 jnz     short loc_256B
.text$mn:00002557                 push    48h ; 'H'       ; Line
.text$mn:00002559                 push    offset $SG95566 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:0000255E                 push    offset $SG95567 ; "now"
.text$mn:00002563                 call    __wassert
.text$mn:00002568 ; ---------------------------------------------------------------------------
.text$mn:00002568                 add     esp, 0Ch
.text$mn:0000256B
.text$mn:0000256B loc_256B:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+Dj
.text$mn:0000256B                 mov     ecx, [ebp+var_8]
.text$mn:0000256E                 cmp     dword ptr [ecx+0Ch], 1
.text$mn:00002572                 jge     short loc_2579
.text$mn:00002574                 jmp     loc_26F2
.text$mn:00002579 ; ---------------------------------------------------------------------------
.text$mn:00002579
.text$mn:00002579 loc_2579:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+2Aj
.text$mn:00002579                 mov     edx, [ebp+var_8]
.text$mn:0000257C                 mov     eax, [edx]
.text$mn:0000257E                 mov     [ebp+var_10], eax
.text$mn:00002581                 mov     ecx, [ebp+var_8]
.text$mn:00002584                 mov     edx, [ecx+4]
.text$mn:00002587                 mov     [ebp+var_C], edx
.text$mn:0000258A                 mov     eax, [ebp+var_8]
.text$mn:0000258D                 mov     ecx, [eax+8]
.text$mn:00002590                 mov     [ebp+var_4], ecx
.text$mn:00002593                 cmp     [ebp+var_4], 0
.text$mn:00002597                 jnz     short loc_25AD
.text$mn:00002599                 push    54h ; 'T'       ; Line
.text$mn:0000259B                 push    offset $SG95573 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:000025A0                 push    offset $SG95574 ; Message
.text$mn:000025A5                 call    __wassert
.text$mn:000025AA ; ---------------------------------------------------------------------------
.text$mn:000025AA                 add     esp, 0Ch
.text$mn:000025AD
.text$mn:000025AD loc_25AD:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+4Fj
.text$mn:000025AD                                         ; TiXmlParsingData::Stamp(wchar_t const *):loc_2674j
.text$mn:000025AD                 mov     eax, [ebp+var_4]
.text$mn:000025B0                 cmp     eax, [ebp+arg_0]
.text$mn:000025B3                 jnb     loc_2679
.text$mn:000025B9                 mov     ecx, [ebp+var_4]
.text$mn:000025BC                 movzx   edx, word ptr [ecx]
.text$mn:000025BF                 mov     [ebp+var_14], edx
.text$mn:000025C2                 cmp     [ebp+var_14], 0Dh ; switch 14 cases
.text$mn:000025C6                 ja      $LN1            ; jumptable 000025D6 default case
.text$mn:000025CC                 mov     eax, [ebp+var_14]
.text$mn:000025CF                 movzx   ecx, ds:$LN20[eax]
.text$mn:000025D6                 jmp     ds:$LN21[ecx*4] ; switch jump
.text$mn:000025DD ; ---------------------------------------------------------------------------
.text$mn:000025DD
.text$mn:000025DD $LN7_0:                                 ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+8Ej
.text$mn:000025DD                                         ; DATA XREF: .text$mn:$LN21o
.text$mn:000025DD                 jmp     loc_26F2        ; jumptable 000025D6 case 0
.text$mn:000025E2 ; ---------------------------------------------------------------------------
.text$mn:000025E2
.text$mn:000025E2 $LN6_2:                                 ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+8Ej
.text$mn:000025E2                                         ; DATA XREF: .text$mn:$LN21o
.text$mn:000025E2                 mov     edx, [ebp+var_10] ; jumptable 000025D6 case 13
.text$mn:000025E5                 add     edx, 1
.text$mn:000025E8                 mov     [ebp+var_10], edx
.text$mn:000025EB                 mov     [ebp+var_C], 0
.text$mn:000025F2                 mov     eax, [ebp+var_4]
.text$mn:000025F5                 add     eax, 2
.text$mn:000025F8                 mov     [ebp+var_4], eax
.text$mn:000025FB                 mov     ecx, [ebp+var_4]
.text$mn:000025FE                 movzx   edx, word ptr [ecx]
.text$mn:00002601                 cmp     edx, 0Ah
.text$mn:00002604                 jnz     short loc_260F
.text$mn:00002606                 mov     eax, [ebp+var_4]
.text$mn:00002609                 add     eax, 2
.text$mn:0000260C                 mov     [ebp+var_4], eax
.text$mn:0000260F
.text$mn:0000260F loc_260F:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+BCj
.text$mn:0000260F                 jmp     short loc_2674
.text$mn:00002611 ; ---------------------------------------------------------------------------
.text$mn:00002611
.text$mn:00002611 $LN4_1:                                 ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+8Ej
.text$mn:00002611                                         ; DATA XREF: .text$mn:$LN21o
.text$mn:00002611                 mov     ecx, [ebp+var_10] ; jumptable 000025D6 case 10
.text$mn:00002614                 add     ecx, 1
.text$mn:00002617                 mov     [ebp+var_10], ecx
.text$mn:0000261A                 mov     [ebp+var_C], 0
.text$mn:00002621                 mov     edx, [ebp+var_4]
.text$mn:00002624                 add     edx, 2
.text$mn:00002627                 mov     [ebp+var_4], edx
.text$mn:0000262A                 mov     eax, [ebp+var_4]
.text$mn:0000262D                 movzx   ecx, word ptr [eax]
.text$mn:00002630                 cmp     ecx, 0Dh
.text$mn:00002633                 jnz     short loc_263E
.text$mn:00002635                 mov     edx, [ebp+var_4]
.text$mn:00002638                 add     edx, 2
.text$mn:0000263B                 mov     [ebp+var_4], edx
.text$mn:0000263E
.text$mn:0000263E loc_263E:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+EBj
.text$mn:0000263E                 jmp     short loc_2674
.text$mn:00002640 ; ---------------------------------------------------------------------------
.text$mn:00002640
.text$mn:00002640 $LN2:                                   ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+8Ej
.text$mn:00002640                                         ; DATA XREF: .text$mn:$LN21o
.text$mn:00002640                 mov     eax, [ebp+var_4] ; jumptable 000025D6 case 9
.text$mn:00002643                 add     eax, 2
.text$mn:00002646                 mov     [ebp+var_4], eax
.text$mn:00002649                 mov     ecx, [ebp+var_8]
.text$mn:0000264C                 mov     eax, [ebp+var_C]
.text$mn:0000264F                 cdq
.text$mn:00002650                 idiv    dword ptr [ecx+0Ch]
.text$mn:00002653                 add     eax, 1
.text$mn:00002656                 mov     edx, [ebp+var_8]
.text$mn:00002659                 imul    eax, [edx+0Ch]
.text$mn:0000265D                 mov     [ebp+var_C], eax
.text$mn:00002660                 jmp     short loc_2674
.text$mn:00002662 ; ---------------------------------------------------------------------------
.text$mn:00002662
.text$mn:00002662 $LN1:                                   ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+7Ej
.text$mn:00002662                                         ; TiXmlParsingData::Stamp(wchar_t const *)+8Ej
.text$mn:00002662                                         ; DATA XREF: ...
.text$mn:00002662                 mov     eax, [ebp+var_4] ; jumptable 000025D6 default case
.text$mn:00002665                 add     eax, 2
.text$mn:00002668                 mov     [ebp+var_4], eax
.text$mn:0000266B                 mov     ecx, [ebp+var_C]
.text$mn:0000266E                 add     ecx, 1
.text$mn:00002671                 mov     [ebp+var_C], ecx
.text$mn:00002674
.text$mn:00002674 loc_2674:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *):loc_260Fj
.text$mn:00002674                                         ; TiXmlParsingData::Stamp(wchar_t const *):loc_263Ej ...
.text$mn:00002674                 jmp     loc_25AD
.text$mn:00002679 ; ---------------------------------------------------------------------------
.text$mn:00002679
.text$mn:00002679 loc_2679:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+6Bj
.text$mn:00002679                 mov     edx, [ebp+var_8]
.text$mn:0000267C                 mov     eax, [ebp+var_10]
.text$mn:0000267F                 mov     [edx], eax
.text$mn:00002681                 mov     ecx, [ebp+var_8]
.text$mn:00002684                 mov     edx, [ebp+var_C]
.text$mn:00002687                 mov     [ecx+4], edx
.text$mn:0000268A                 mov     eax, [ebp+var_8]
.text$mn:0000268D                 cmp     dword ptr [eax], 0FFFFFFFFh
.text$mn:00002690                 jge     short loc_26A9
.text$mn:00002692                 push    8Fh ; 'Å'       ; Line
.text$mn:00002697                 push    offset $SG95590 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:0000269C                 push    offset $SG95591 ; "cursor.row >= -1"
.text$mn:000026A1                 call    __wassert
.text$mn:000026A6 ; ---------------------------------------------------------------------------
.text$mn:000026A6                 add     esp, 0Ch
.text$mn:000026A9
.text$mn:000026A9 loc_26A9:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+148j
.text$mn:000026A9                 mov     edx, [ebp+var_8]
.text$mn:000026AC                 cmp     dword ptr [edx+4], 0FFFFFFFFh
.text$mn:000026B0                 jge     short loc_26C9
.text$mn:000026B2                 push    90h ; 'É'       ; Line
.text$mn:000026B7                 push    offset $SG95593 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:000026BC                 push    offset $SG95594 ; "cursor.col >= -1"
.text$mn:000026C1                 call    __wassert
.text$mn:000026C6 ; ---------------------------------------------------------------------------
.text$mn:000026C6                 add     esp, 0Ch
.text$mn:000026C9
.text$mn:000026C9 loc_26C9:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+168j
.text$mn:000026C9                 mov     ecx, [ebp+var_8]
.text$mn:000026CC                 mov     edx, [ebp+var_4]
.text$mn:000026CF                 mov     [ecx+8], edx
.text$mn:000026D2                 mov     eax, [ebp+var_8]
.text$mn:000026D5                 cmp     dword ptr [eax+8], 0
.text$mn:000026D9                 jnz     short loc_26F2
.text$mn:000026DB                 push    92h ; 'Æ'       ; Line
.text$mn:000026E0                 push    offset $SG95596 ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:000026E5                 push    offset $SG95597 ; "stamp"
.text$mn:000026EA                 call    __wassert
.text$mn:000026EF ; ---------------------------------------------------------------------------
.text$mn:000026EF                 add     esp, 0Ch
.text$mn:000026F2
.text$mn:000026F2 loc_26F2:                               ; CODE XREF: TiXmlParsingData::Stamp(wchar_t const *)+2Cj
.text$mn:000026F2                                         ; TiXmlParsingData::Stamp(wchar_t const *):$LN7_0j ...
.text$mn:000026F2                 mov     esp, ebp
.text$mn:000026F4                 pop     ebp
.text$mn:000026F5                 retn    4
.text$mn:000026F5 ?Stamp@TiXmlParsingData@@QAEXPB_W@Z endp
.text$mn:000026F5
.text$mn:000026F5 ; ---------------------------------------------------------------------------
.text$mn:000026F8 $LN21           dd offset $LN7_0        ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+8Er
.text$mn:000026F8                 dd offset $LN2          ; jump table for switch statement
.text$mn:000026F8                 dd offset $LN4_1
.text$mn:000026F8                 dd offset $LN6_2
.text$mn:000026F8                 dd offset $LN1
.text$mn:0000270C $LN20           db      0,     4,     4,     4
.text$mn:0000270C                                         ; DATA XREF: TiXmlParsingData::Stamp(wchar_t const *)+87r
.text$mn:0000270C                 db      4,     4,     4,     4 ; indirect table for switch statement
.text$mn:0000270C                 db      4,     1,     2,     4
.text$mn:0000270C                 db      4,     3
.text$mn:0000271A                 align 4
.text$mn:0000271A _text$mn        ends
.text$mn:0000271A
.text$x:0000271C ; ===========================================================================
.text$x:0000271C
.text$x:0000271C ; Segment type: Pure code
.text$x:0000271C ; Segment permissions: Read/Execute
.text$x:0000271C _text$x         segment para public 'CODE' use32
.text$x:0000271C                 assume cs:_text$x
.text$x:0000271C                 ;org 271Ch
.text$x:0000271C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000271C
.text$x:0000271C ; =============== S U B R O U T I N E =======================================
.text$x:0000271C
.text$x:0000271C
.text$x:0000271C __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$0 proc near
.text$x:0000271C                                         ; DATA XREF: .xdata$x:00009B30o
.text$x:0000271C                 mov     eax, [ebp-14h]
.text$x:0000271F                 push    eax             ; void *
.text$x:00002720                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002725                 pop     ecx
.text$x:00002726                 retn
.text$x:00002726 __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$0 endp
.text$x:00002726
.text$x:00002727
.text$x:00002727 ; =============== S U B R O U T I N E =======================================
.text$x:00002727
.text$x:00002727
.text$x:00002727 __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$1 proc near
.text$x:00002727                                         ; DATA XREF: .xdata$x:00009B38o
.text$x:00002727                 mov     eax, [ebp-1Ch]
.text$x:0000272A                 push    eax             ; void *
.text$x:0000272B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002730                 pop     ecx
.text$x:00002731                 retn
.text$x:00002731 __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$1 endp
.text$x:00002731
.text$x:00002732
.text$x:00002732 ; =============== S U B R O U T I N E =======================================
.text$x:00002732
.text$x:00002732
.text$x:00002732 __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$2 proc near
.text$x:00002732                                         ; DATA XREF: .xdata$x:00009B40o
.text$x:00002732                 mov     eax, [ebp-24h]
.text$x:00002735                 push    eax             ; void *
.text$x:00002736                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000273B                 pop     ecx
.text$x:0000273C                 retn
.text$x:0000273C __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$2 endp
.text$x:0000273C
.text$x:0000273D
.text$x:0000273D ; =============== S U B R O U T I N E =======================================
.text$x:0000273D
.text$x:0000273D
.text$x:0000273D __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$3 proc near
.text$x:0000273D                                         ; DATA XREF: .xdata$x:00009B48o
.text$x:0000273D                 mov     eax, [ebp-2Ch]
.text$x:00002740                 push    eax             ; void *
.text$x:00002741                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002746                 pop     ecx
.text$x:00002747                 retn
.text$x:00002747 __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$3 endp
.text$x:00002747
.text$x:00002748
.text$x:00002748 ; =============== S U B R O U T I N E =======================================
.text$x:00002748
.text$x:00002748
.text$x:00002748 __ehhandler$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z proc near
.text$x:00002748                                         ; DATA XREF: TiXmlNode::Identify(wchar_t const *)+5o
.text$x:00002748
.text$x:00002748 arg_4           = dword ptr  8
.text$x:00002748
.text$x:00002748                 mov     edx, [esp+arg_4]
.text$x:0000274C                 lea     eax, [edx+0Ch]
.text$x:0000274F                 mov     ecx, [edx-48h]
.text$x:00002752                 xor     ecx, eax
.text$x:00002754                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002759                 mov     eax, offset __ehfuncinfo$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z
.text$x:0000275E                 jmp     ___CxxFrameHandler3
.text$x:0000275E __ehhandler$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z endp
.text$x:0000275E
.text$x:00002763
.text$x:00002763 ; =============== S U B R O U T I N E =======================================
.text$x:00002763
.text$x:00002763
.text$x:00002763 __unwindfunclet$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 proc near
.text$x:00002763                                         ; DATA XREF: .xdata$x:00009B00o
.text$x:00002763                 lea     ecx, [ebp-54h]  ; this
.text$x:00002766                 jmp     ??1TiXmlText@@UAE@XZ ; TiXmlText::~TiXmlText(void)
.text$x:00002766 __unwindfunclet$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 endp
.text$x:00002766
.text$x:0000276B
.text$x:0000276B ; =============== S U B R O U T I N E =======================================
.text$x:0000276B
.text$x:0000276B
.text$x:0000276B __ehhandler$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$x:0000276B                                         ; DATA XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:0000276B
.text$x:0000276B arg_4           = dword ptr  8
.text$x:0000276B
.text$x:0000276B                 mov     edx, [esp+arg_4]
.text$x:0000276F                 lea     eax, [edx+0Ch]
.text$x:00002772                 mov     ecx, [edx-78h]
.text$x:00002775                 xor     ecx, eax
.text$x:00002777                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000277C                 mov     ecx, [edx-4]
.text$x:0000277F                 xor     ecx, eax
.text$x:00002781                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002786                 mov     eax, offset __ehfuncinfo$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$x:0000278B                 jmp     ___CxxFrameHandler3
.text$x:0000278B __ehhandler$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$x:0000278B
.text$x:00002790
.text$x:00002790 ; =============== S U B R O U T I N E =======================================
.text$x:00002790
.text$x:00002790
.text$x:00002790 __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 proc near
.text$x:00002790                                         ; DATA XREF: .xdata$x:00009B08o
.text$x:00002790                 lea     ecx, [ebp-2Ch]
.text$x:00002793                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00002793 __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 endp
.text$x:00002793
.text$x:00002798
.text$x:00002798 ; =============== S U B R O U T I N E =======================================
.text$x:00002798
.text$x:00002798
.text$x:00002798 __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1 proc near
.text$x:00002798                                         ; DATA XREF: .xdata$x:00009B10o
.text$x:00002798                 mov     eax, [ebp-50h]
.text$x:0000279B                 push    eax             ; void *
.text$x:0000279C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000027A1                 pop     ecx
.text$x:000027A2                 retn
.text$x:000027A2 __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1 endp
.text$x:000027A2
.text$x:000027A3
.text$x:000027A3 ; =============== S U B R O U T I N E =======================================
.text$x:000027A3
.text$x:000027A3
.text$x:000027A3 __ehhandler$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$x:000027A3                                         ; DATA XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+5o
.text$x:000027A3
.text$x:000027A3 arg_4           = dword ptr  8
.text$x:000027A3
.text$x:000027A3                 mov     edx, [esp+arg_4]
.text$x:000027A7                 lea     eax, [edx+0Ch]
.text$x:000027AA                 mov     ecx, [edx-88h]
.text$x:000027B0                 xor     ecx, eax
.text$x:000027B2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027B7                 mov     ecx, [edx-4]
.text$x:000027BA                 xor     ecx, eax
.text$x:000027BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027C1                 mov     eax, offset __ehfuncinfo$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$x:000027C6                 jmp     ___CxxFrameHandler3
.text$x:000027C6 __ehhandler$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$x:000027C6
.text$x:000027CB
.text$x:000027CB ; =============== S U B R O U T I N E =======================================
.text$x:000027CB
.text$x:000027CB
.text$x:000027CB __unwindfunclet$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 proc near
.text$x:000027CB                                         ; DATA XREF: .xdata$x:00009AF8o
.text$x:000027CB                 mov     eax, [ebp-24h]
.text$x:000027CE                 push    eax             ; void *
.text$x:000027CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000027D4                 pop     ecx
.text$x:000027D5                 retn
.text$x:000027D5 __unwindfunclet$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 endp
.text$x:000027D5
.text$x:000027D6
.text$x:000027D6 ; =============== S U B R O U T I N E =======================================
.text$x:000027D6
.text$x:000027D6
.text$x:000027D6 __ehhandler$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$x:000027D6                                         ; DATA XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+5o
.text$x:000027D6
.text$x:000027D6 arg_4           = dword ptr  8
.text$x:000027D6
.text$x:000027D6                 mov     edx, [esp+arg_4]
.text$x:000027DA                 lea     eax, [edx+0Ch]
.text$x:000027DD                 mov     ecx, [edx-2Ch]
.text$x:000027E0                 xor     ecx, eax
.text$x:000027E2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027E7                 mov     eax, offset __ehfuncinfo$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$x:000027EC                 jmp     ___CxxFrameHandler3
.text$x:000027EC __ehhandler$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$x:000027EC
.text$x:000027F1
.text$x:000027F1 ; =============== S U B R O U T I N E =======================================
.text$x:000027F1
.text$x:000027F1
.text$x:000027F1 __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 proc near
.text$x:000027F1                                         ; DATA XREF: .xdata$x:00009B18o
.text$x:000027F1                 lea     ecx, [ebp-60h]  ; this
.text$x:000027F4                 jmp     ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$x:000027F4 __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0 endp
.text$x:000027F4
.text$x:000027F9
.text$x:000027F9 ; =============== S U B R O U T I N E =======================================
.text$x:000027F9
.text$x:000027F9
.text$x:000027F9 __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1 proc near
.text$x:000027F9                                         ; DATA XREF: .xdata$x:00009B20o
.text$x:000027F9                 lea     ecx, [ebp-100h] ; this
.text$x:000027FF                 jmp     ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$x:000027FF __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1 endp
.text$x:000027FF
.text$x:00002804
.text$x:00002804 ; =============== S U B R O U T I N E =======================================
.text$x:00002804
.text$x:00002804
.text$x:00002804 __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$2 proc near
.text$x:00002804                                         ; DATA XREF: .xdata$x:00009B28o
.text$x:00002804                 lea     ecx, [ebp-0B0h] ; this
.text$x:0000280A                 jmp     ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$x:0000280A __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$2 endp
.text$x:0000280A
.text$x:0000280F
.text$x:0000280F ; =============== S U B R O U T I N E =======================================
.text$x:0000280F
.text$x:0000280F
.text$x:0000280F __ehhandler$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z proc near
.text$x:0000280F                                         ; DATA XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+5o
.text$x:0000280F
.text$x:0000280F arg_4           = dword ptr  8
.text$x:0000280F
.text$x:0000280F                 mov     edx, [esp+arg_4]
.text$x:00002813                 lea     eax, [edx+0Ch]
.text$x:00002816                 mov     ecx, [edx-100h]
.text$x:0000281C                 xor     ecx, eax
.text$x:0000281E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002823                 mov     ecx, [edx-4]
.text$x:00002826                 xor     ecx, eax
.text$x:00002828                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000282D                 mov     eax, offset __ehfuncinfo$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.text$x:00002832                 jmp     ___CxxFrameHandler3
.text$x:00002832 __ehhandler$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z endp
.text$x:00002832
.text$x:00002832 ; ---------------------------------------------------------------------------
.text$x:00002837                 align 4
.text$x:00002837 _text$x         ends
.text$x:00002837
.text$mn:00002838 ; ===========================================================================
.text$mn:00002838
.text$mn:00002838 ; Segment type: Pure code
.text$mn:00002838 ; Segment permissions: Read/Execute
.text$mn:00002838 _text$mn        segment para public 'CODE' use32
.text$mn:00002838                 assume cs:_text$mn
.text$mn:00002838                 ;org 2838h
.text$mn:00002838 ; COMDAT (pick any)
.text$mn:00002838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002838
.text$mn:00002838 ; =============== S U B R O U T I N E =======================================
.text$mn:00002838
.text$mn:00002838 ; Attributes: bp-based frame
.text$mn:00002838
.text$mn:00002838 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00002838                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00002838 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00002838                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00002838
.text$mn:00002838 var_4           = dword ptr -4
.text$mn:00002838 arg_0           = dword ptr  8
.text$mn:00002838
.text$mn:00002838                 push    ebp
.text$mn:00002839                 mov     ebp, esp
.text$mn:0000283B                 push    ecx
.text$mn:0000283C                 mov     [ebp+var_4], 0
.text$mn:00002843                 cmp     [ebp+arg_0], 0
.text$mn:00002847                 jnz     short loc_284B
.text$mn:00002849                 jmp     short loc_286B
.text$mn:0000284B ; ---------------------------------------------------------------------------
.text$mn:0000284B
.text$mn:0000284B loc_284B:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:0000284B                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:0000284F                 ja      short loc_2866
.text$mn:00002851                 mov     eax, [ebp+arg_0]
.text$mn:00002854                 push    eax             ; unsigned int
.text$mn:00002855                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000285A                 add     esp, 4
.text$mn:0000285D                 mov     [ebp+var_4], eax
.text$mn:00002860                 cmp     [ebp+var_4], 0
.text$mn:00002864                 jnz     short loc_286B
.text$mn:00002866
.text$mn:00002866 loc_2866:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00002866                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000286B
.text$mn:0000286B loc_286B:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:0000286B                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:0000286B                 mov     eax, [ebp+var_4]
.text$mn:0000286E                 mov     esp, ebp
.text$mn:00002870                 pop     ebp
.text$mn:00002871                 retn
.text$mn:00002871 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00002871
.text$mn:00002871 ; ---------------------------------------------------------------------------
.text$mn:00002872                 align 4
.text$mn:00002872 _text$mn        ends
.text$mn:00002872
.text$mn:00002874 ; ===========================================================================
.text$mn:00002874
.text$mn:00002874 ; Segment type: Pure code
.text$mn:00002874 ; Segment permissions: Read/Execute
.text$mn:00002874 _text$mn        segment para public 'CODE' use32
.text$mn:00002874                 assume cs:_text$mn
.text$mn:00002874                 ;org 2874h
.text$mn:00002874 ; COMDAT (pick any)
.text$mn:00002874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002874
.text$mn:00002874 ; =============== S U B R O U T I N E =======================================
.text$mn:00002874
.text$mn:00002874 ; Attributes: bp-based frame
.text$mn:00002874
.text$mn:00002874 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00002874                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00002874 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00002874                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00002874
.text$mn:00002874 var_4           = dword ptr -4
.text$mn:00002874 arg_0           = dword ptr  8
.text$mn:00002874
.text$mn:00002874                 push    ebp
.text$mn:00002875                 mov     ebp, esp
.text$mn:00002877                 push    ecx
.text$mn:00002878                 mov     [ebp+var_4], 0
.text$mn:0000287F                 cmp     [ebp+arg_0], 0
.text$mn:00002883                 jnz     short loc_2887
.text$mn:00002885                 jmp     short loc_28AD
.text$mn:00002887 ; ---------------------------------------------------------------------------
.text$mn:00002887
.text$mn:00002887 loc_2887:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00002887                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000288E                 ja      short loc_28A8
.text$mn:00002890                 mov     eax, [ebp+arg_0]
.text$mn:00002893                 shl     eax, 3
.text$mn:00002896                 push    eax             ; unsigned int
.text$mn:00002897                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000289C                 add     esp, 4
.text$mn:0000289F                 mov     [ebp+var_4], eax
.text$mn:000028A2                 cmp     [ebp+var_4], 0
.text$mn:000028A6                 jnz     short loc_28AD
.text$mn:000028A8
.text$mn:000028A8 loc_28A8:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:000028A8                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000028AD
.text$mn:000028AD loc_28AD:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:000028AD                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:000028AD                 mov     eax, [ebp+var_4]
.text$mn:000028B0                 mov     esp, ebp
.text$mn:000028B2                 pop     ebp
.text$mn:000028B3                 retn
.text$mn:000028B3 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:000028B3
.text$mn:000028B3 _text$mn        ends
.text$mn:000028B3
.text$mn:000028B4 ; ===========================================================================
.text$mn:000028B4
.text$mn:000028B4 ; Segment type: Pure code
.text$mn:000028B4 ; Segment permissions: Read/Execute
.text$mn:000028B4 _text$mn        segment para public 'CODE' use32
.text$mn:000028B4                 assume cs:_text$mn
.text$mn:000028B4                 ;org 28B4h
.text$mn:000028B4 ; COMDAT (pick any)
.text$mn:000028B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000028B4
.text$mn:000028B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000028B4
.text$mn:000028B4 ; Attributes: bp-based frame
.text$mn:000028B4
.text$mn:000028B4 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:000028B4                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:000028B4 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:000028B4                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:000028B4
.text$mn:000028B4 var_4           = dword ptr -4
.text$mn:000028B4 arg_0           = dword ptr  8
.text$mn:000028B4
.text$mn:000028B4                 push    ebp
.text$mn:000028B5                 mov     ebp, esp
.text$mn:000028B7                 push    ecx
.text$mn:000028B8                 mov     [ebp+var_4], 0
.text$mn:000028BF                 cmp     [ebp+arg_0], 0
.text$mn:000028C3                 jnz     short loc_28C7
.text$mn:000028C5                 jmp     short loc_28EC
.text$mn:000028C7 ; ---------------------------------------------------------------------------
.text$mn:000028C7
.text$mn:000028C7 loc_28C7:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000028C7                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:000028CE                 ja      short loc_28E7
.text$mn:000028D0                 mov     eax, [ebp+arg_0]
.text$mn:000028D3                 shl     eax, 1
.text$mn:000028D5                 push    eax             ; unsigned int
.text$mn:000028D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000028DB                 add     esp, 4
.text$mn:000028DE                 mov     [ebp+var_4], eax
.text$mn:000028E1                 cmp     [ebp+var_4], 0
.text$mn:000028E5                 jnz     short loc_28EC
.text$mn:000028E7
.text$mn:000028E7 loc_28E7:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:000028E7                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000028EC
.text$mn:000028EC loc_28EC:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:000028EC                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:000028EC                 mov     eax, [ebp+var_4]
.text$mn:000028EF                 mov     esp, ebp
.text$mn:000028F1                 pop     ebp
.text$mn:000028F2                 retn
.text$mn:000028F2 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:000028F2
.text$mn:000028F2 ; ---------------------------------------------------------------------------
.text$mn:000028F3                 align 4
.text$mn:000028F3 _text$mn        ends
.text$mn:000028F3
.text$mn:000028F4 ; ===========================================================================
.text$mn:000028F4
.text$mn:000028F4 ; Segment type: Pure code
.text$mn:000028F4 ; Segment permissions: Read/Execute
.text$mn:000028F4 _text$mn        segment para public 'CODE' use32
.text$mn:000028F4                 assume cs:_text$mn
.text$mn:000028F4                 ;org 28F4h
.text$mn:000028F4 ; COMDAT (pick any)
.text$mn:000028F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000028F4
.text$mn:000028F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000028F4
.text$mn:000028F4 ; Attributes: bp-based frame
.text$mn:000028F4
.text$mn:000028F4 ; int __cdecl std::_DebugHeapDelete<std::_Facet_base>(void *Memory)
.text$mn:000028F4                 public ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z
.text$mn:000028F4 ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z proc near
.text$mn:000028F4                                         ; CODE XREF: std::locale::~locale(void)+21p
.text$mn:000028F4
.text$mn:000028F4 Memory          = dword ptr  8
.text$mn:000028F4
.text$mn:000028F4                 push    ebp
.text$mn:000028F5                 mov     ebp, esp
.text$mn:000028F7                 cmp     [ebp+Memory], 0
.text$mn:000028FB                 jz      short loc_2917
.text$mn:000028FD                 push    0
.text$mn:000028FF                 mov     eax, [ebp+Memory]
.text$mn:00002902                 mov     edx, [eax]
.text$mn:00002904                 mov     ecx, [ebp+Memory]
.text$mn:00002907                 mov     eax, [edx]
.text$mn:00002909                 call    eax
.text$mn:0000290B                 mov     ecx, [ebp+Memory]
.text$mn:0000290E                 push    ecx             ; Memory
.text$mn:0000290F                 call    _free
.text$mn:00002914                 add     esp, 4
.text$mn:00002917
.text$mn:00002917 loc_2917:                               ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+7j
.text$mn:00002917                 pop     ebp
.text$mn:00002918                 retn
.text$mn:00002918 ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z endp
.text$mn:00002918
.text$mn:00002918 ; ---------------------------------------------------------------------------
.text$mn:00002919                 align 4
.text$mn:00002919 _text$mn        ends
.text$mn:00002919
.text$mn:0000291C ; ===========================================================================
.text$mn:0000291C
.text$mn:0000291C ; Segment type: Pure code
.text$mn:0000291C ; Segment permissions: Read/Execute
.text$mn:0000291C _text$mn        segment para public 'CODE' use32
.text$mn:0000291C                 assume cs:_text$mn
.text$mn:0000291C                 ;org 291Ch
.text$mn:0000291C ; COMDAT (pick any)
.text$mn:0000291C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000291C
.text$mn:0000291C ; =============== S U B R O U T I N E =======================================
.text$mn:0000291C
.text$mn:0000291C ; Attributes: bp-based frame
.text$mn:0000291C
.text$mn:0000291C ; int __cdecl std::_DebugHeapDelete<std::locale::facet>(void *Memory)
.text$mn:0000291C                 public ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z
.text$mn:0000291C ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z proc near
.text$mn:0000291C                                         ; CODE XREF: std::locale::facet::operator delete(void *)+7p
.text$mn:0000291C
.text$mn:0000291C Memory          = dword ptr  8
.text$mn:0000291C
.text$mn:0000291C                 push    ebp
.text$mn:0000291D                 mov     ebp, esp
.text$mn:0000291F                 cmp     [ebp+Memory], 0
.text$mn:00002923                 jz      short loc_293F
.text$mn:00002925                 push    0
.text$mn:00002927                 mov     eax, [ebp+Memory]
.text$mn:0000292A                 mov     edx, [eax]
.text$mn:0000292C                 mov     ecx, [ebp+Memory]
.text$mn:0000292F                 mov     eax, [edx]
.text$mn:00002931                 call    eax
.text$mn:00002933                 mov     ecx, [ebp+Memory]
.text$mn:00002936                 push    ecx             ; Memory
.text$mn:00002937                 call    _free
.text$mn:0000293C                 add     esp, 4
.text$mn:0000293F
.text$mn:0000293F loc_293F:                               ; CODE XREF: std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+7j
.text$mn:0000293F                 pop     ebp
.text$mn:00002940                 retn
.text$mn:00002940 ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z endp
.text$mn:00002940
.text$mn:00002940 ; ---------------------------------------------------------------------------
.text$mn:00002941                 align 4
.text$mn:00002941 _text$mn        ends
.text$mn:00002941
.text$mn:00002944 ; ===========================================================================
.text$mn:00002944
.text$mn:00002944 ; Segment type: Pure code
.text$mn:00002944 ; Segment permissions: Read/Execute
.text$mn:00002944 _text$mn        segment para public 'CODE' use32
.text$mn:00002944                 assume cs:_text$mn
.text$mn:00002944                 ;org 2944h
.text$mn:00002944 ; COMDAT (pick any)
.text$mn:00002944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002944
.text$mn:00002944 ; =============== S U B R O U T I N E =======================================
.text$mn:00002944
.text$mn:00002944 ; Attributes: bp-based frame
.text$mn:00002944
.text$mn:00002944 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00002944                 public ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z
.text$mn:00002944 ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z proc near
.text$mn:00002944                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+2Fp
.text$mn:00002944
.text$mn:00002944 arg_0           = dword ptr  8
.text$mn:00002944 arg_4           = dword ptr  0Ch
.text$mn:00002944 arg_8           = dword ptr  10h
.text$mn:00002944
.text$mn:00002944                 push    ebp
.text$mn:00002945                 mov     ebp, esp
.text$mn:00002947                 cmp     [ebp+arg_0], 0
.text$mn:0000294B                 jnz     short loc_2962
.text$mn:0000294D                 mov     eax, [ebp+arg_8]
.text$mn:00002950                 push    eax             ; unsigned int
.text$mn:00002951                 mov     ecx, [ebp+arg_4]
.text$mn:00002954                 push    ecx             ; wchar_t *
.text$mn:00002955                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000295A                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000295F                 add     esp, 0Ch
.text$mn:00002962
.text$mn:00002962 loc_2962:                               ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+7j
.text$mn:00002962                 pop     ebp
.text$mn:00002963                 retn
.text$mn:00002963 ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z endp
.text$mn:00002963
.text$mn:00002963 _text$mn        ends
.text$mn:00002963
.text$mn:00002964 ; ===========================================================================
.text$mn:00002964
.text$mn:00002964 ; Segment type: Pure code
.text$mn:00002964 ; Segment permissions: Read/Execute
.text$mn:00002964 _text$mn        segment para public 'CODE' use32
.text$mn:00002964                 assume cs:_text$mn
.text$mn:00002964                 ;org 2964h
.text$mn:00002964 ; COMDAT (pick any)
.text$mn:00002964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002964
.text$mn:00002964 ; =============== S U B R O U T I N E =======================================
.text$mn:00002964
.text$mn:00002964 ; Attributes: bp-based frame
.text$mn:00002964
.text$mn:00002964 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00002964                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00002964 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00002964                                         ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00002964                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00002964
.text$mn:00002964 arg_0           = dword ptr  8
.text$mn:00002964 arg_4           = dword ptr  0Ch
.text$mn:00002964 arg_8           = dword ptr  10h
.text$mn:00002964
.text$mn:00002964                 push    ebp
.text$mn:00002965                 mov     ebp, esp
.text$mn:00002967                 cmp     [ebp+arg_0], 0
.text$mn:0000296B                 jnz     short loc_2982
.text$mn:0000296D                 mov     eax, [ebp+arg_8]
.text$mn:00002970                 push    eax             ; unsigned int
.text$mn:00002971                 mov     ecx, [ebp+arg_4]
.text$mn:00002974                 push    ecx             ; wchar_t *
.text$mn:00002975                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000297A                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000297F                 add     esp, 0Ch
.text$mn:00002982
.text$mn:00002982 loc_2982:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00002982                 pop     ebp
.text$mn:00002983                 retn
.text$mn:00002983 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00002983
.text$mn:00002983 _text$mn        ends
.text$mn:00002983
.text$mn:00002984 ; ===========================================================================
.text$mn:00002984
.text$mn:00002984 ; Segment type: Pure code
.text$mn:00002984 ; Segment permissions: Read/Execute
.text$mn:00002984 _text$mn        segment para public 'CODE' use32
.text$mn:00002984                 assume cs:_text$mn
.text$mn:00002984                 ;org 2984h
.text$mn:00002984 ; COMDAT (pick any)
.text$mn:00002984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002984
.text$mn:00002984 ; =============== S U B R O U T I N E =======================================
.text$mn:00002984
.text$mn:00002984 ; Attributes: bp-based frame
.text$mn:00002984
.text$mn:00002984 ; int __cdecl std::_Debug_pointer<short>(int, wchar_t *, unsigned int)
.text$mn:00002984                 public ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z
.text$mn:00002984 ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z proc near
.text$mn:00002984                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+2Fp
.text$mn:00002984
.text$mn:00002984 arg_0           = dword ptr  8
.text$mn:00002984 arg_4           = dword ptr  0Ch
.text$mn:00002984 arg_8           = dword ptr  10h
.text$mn:00002984
.text$mn:00002984                 push    ebp
.text$mn:00002985                 mov     ebp, esp
.text$mn:00002987                 cmp     [ebp+arg_0], 0
.text$mn:0000298B                 jnz     short loc_29A2
.text$mn:0000298D                 mov     eax, [ebp+arg_8]
.text$mn:00002990                 push    eax             ; unsigned int
.text$mn:00002991                 mov     ecx, [ebp+arg_4]
.text$mn:00002994                 push    ecx             ; wchar_t *
.text$mn:00002995                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000299A                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000299F                 add     esp, 0Ch
.text$mn:000029A2
.text$mn:000029A2 loc_29A2:                               ; CODE XREF: std::_Debug_pointer<short>(short *,wchar_t const *,uint)+7j
.text$mn:000029A2                 pop     ebp
.text$mn:000029A3                 retn
.text$mn:000029A3 ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z endp
.text$mn:000029A3
.text$mn:000029A3 _text$mn        ends
.text$mn:000029A3
.text$mn:000029A4 ; ===========================================================================
.text$mn:000029A4
.text$mn:000029A4 ; Segment type: Pure code
.text$mn:000029A4 ; Segment permissions: Read/Execute
.text$mn:000029A4 _text$mn        segment para public 'CODE' use32
.text$mn:000029A4                 assume cs:_text$mn
.text$mn:000029A4                 ;org 29A4h
.text$mn:000029A4 ; COMDAT (pick any)
.text$mn:000029A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029A4
.text$mn:000029A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000029A4
.text$mn:000029A4 ; Attributes: bp-based frame
.text$mn:000029A4
.text$mn:000029A4 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000029A4                 public ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z
.text$mn:000029A4 ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z proc near
.text$mn:000029A4                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+2Fp
.text$mn:000029A4
.text$mn:000029A4 arg_0           = dword ptr  8
.text$mn:000029A4 arg_4           = dword ptr  0Ch
.text$mn:000029A4 arg_8           = dword ptr  10h
.text$mn:000029A4
.text$mn:000029A4                 push    ebp
.text$mn:000029A5                 mov     ebp, esp
.text$mn:000029A7                 cmp     [ebp+arg_0], 0
.text$mn:000029AB                 jnz     short loc_29C2
.text$mn:000029AD                 mov     eax, [ebp+arg_8]
.text$mn:000029B0                 push    eax             ; unsigned int
.text$mn:000029B1                 mov     ecx, [ebp+arg_4]
.text$mn:000029B4                 push    ecx             ; wchar_t *
.text$mn:000029B5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000029BA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000029BF                 add     esp, 0Ch
.text$mn:000029C2
.text$mn:000029C2 loc_29C2:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)+7j
.text$mn:000029C2                 pop     ebp
.text$mn:000029C3                 retn
.text$mn:000029C3 ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z endp
.text$mn:000029C3
.text$mn:000029C3 _text$mn        ends
.text$mn:000029C3
.text$mn:000029C4 ; ===========================================================================
.text$mn:000029C4
.text$mn:000029C4 ; Segment type: Pure code
.text$mn:000029C4 ; Segment permissions: Read/Execute
.text$mn:000029C4 _text$mn        segment para public 'CODE' use32
.text$mn:000029C4                 assume cs:_text$mn
.text$mn:000029C4                 ;org 29C4h
.text$mn:000029C4 ; COMDAT (pick any)
.text$mn:000029C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029C4
.text$mn:000029C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000029C4
.text$mn:000029C4 ; Attributes: bp-based frame
.text$mn:000029C4
.text$mn:000029C4 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000029C4                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:000029C4 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:000029C4                                         ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000029C4                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000029C4
.text$mn:000029C4 arg_0           = dword ptr  8
.text$mn:000029C4 arg_4           = dword ptr  0Ch
.text$mn:000029C4 arg_8           = dword ptr  10h
.text$mn:000029C4
.text$mn:000029C4                 push    ebp
.text$mn:000029C5                 mov     ebp, esp
.text$mn:000029C7                 cmp     [ebp+arg_0], 0
.text$mn:000029CB                 jnz     short loc_29E2
.text$mn:000029CD                 mov     eax, [ebp+arg_8]
.text$mn:000029D0                 push    eax             ; unsigned int
.text$mn:000029D1                 mov     ecx, [ebp+arg_4]
.text$mn:000029D4                 push    ecx             ; wchar_t *
.text$mn:000029D5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000029DA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000029DF                 add     esp, 0Ch
.text$mn:000029E2
.text$mn:000029E2 loc_29E2:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:000029E2                 pop     ebp
.text$mn:000029E3                 retn
.text$mn:000029E3 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:000029E3
.text$mn:000029E3 _text$mn        ends
.text$mn:000029E3
.text$mn:000029E4 ; ===========================================================================
.text$mn:000029E4
.text$mn:000029E4 ; Segment type: Pure code
.text$mn:000029E4 ; Segment permissions: Read/Execute
.text$mn:000029E4 _text$mn        segment para public 'CODE' use32
.text$mn:000029E4                 assume cs:_text$mn
.text$mn:000029E4                 ;org 29E4h
.text$mn:000029E4 ; COMDAT (pick any)
.text$mn:000029E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029E4
.text$mn:000029E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000029E4
.text$mn:000029E4 ; Attributes: bp-based frame
.text$mn:000029E4
.text$mn:000029E4 ; int __cdecl std::_Debug_range2<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:000029E4                 public ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000029E4 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000029E4                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+2Ap
.text$mn:000029E4
.text$mn:000029E4 arg_0           = dword ptr  8
.text$mn:000029E4 arg_4           = dword ptr  0Ch
.text$mn:000029E4 arg_8           = dword ptr  10h
.text$mn:000029E4 arg_C           = dword ptr  14h
.text$mn:000029E4
.text$mn:000029E4                 push    ebp
.text$mn:000029E5                 mov     ebp, esp
.text$mn:000029E7                 mov     eax, [ebp+arg_0]
.text$mn:000029EA                 cmp     eax, [ebp+arg_4]
.text$mn:000029ED                 jz      short loc_2A34
.text$mn:000029EF                 mov     ecx, [ebp+arg_C]
.text$mn:000029F2                 push    ecx             ; unsigned int
.text$mn:000029F3                 mov     edx, [ebp+arg_8]
.text$mn:000029F6                 push    edx             ; wchar_t *
.text$mn:000029F7                 mov     eax, [ebp+arg_0]
.text$mn:000029FA                 push    eax             ; int
.text$mn:000029FB                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00002A00                 add     esp, 0Ch
.text$mn:00002A03                 mov     ecx, [ebp+arg_C]
.text$mn:00002A06                 push    ecx             ; unsigned int
.text$mn:00002A07                 mov     edx, [ebp+arg_8]
.text$mn:00002A0A                 push    edx             ; wchar_t *
.text$mn:00002A0B                 mov     eax, [ebp+arg_4]
.text$mn:00002A0E                 push    eax             ; int
.text$mn:00002A0F                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00002A14                 add     esp, 0Ch
.text$mn:00002A17                 mov     ecx, [ebp+arg_4]
.text$mn:00002A1A                 cmp     ecx, [ebp+arg_0]
.text$mn:00002A1D                 jnb     short loc_2A34
.text$mn:00002A1F                 mov     edx, [ebp+arg_C]
.text$mn:00002A22                 push    edx             ; unsigned int
.text$mn:00002A23                 mov     eax, [ebp+arg_8]
.text$mn:00002A26                 push    eax             ; wchar_t *
.text$mn:00002A27                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00002A2C                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00002A31                 add     esp, 0Ch
.text$mn:00002A34
.text$mn:00002A34 loc_2A34:                               ; CODE XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00002A34                                         ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00002A34                 pop     ebp
.text$mn:00002A35                 retn
.text$mn:00002A35 ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00002A35
.text$mn:00002A35 ; ---------------------------------------------------------------------------
.text$mn:00002A36                 align 4
.text$mn:00002A36 _text$mn        ends
.text$mn:00002A36
.text$mn:00002A38 ; ===========================================================================
.text$mn:00002A38
.text$mn:00002A38 ; Segment type: Pure code
.text$mn:00002A38 ; Segment permissions: Read/Execute
.text$mn:00002A38 _text$mn        segment para public 'CODE' use32
.text$mn:00002A38                 assume cs:_text$mn
.text$mn:00002A38                 ;org 2A38h
.text$mn:00002A38 ; COMDAT (pick any)
.text$mn:00002A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002A38
.text$mn:00002A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A38
.text$mn:00002A38 ; Attributes: bp-based frame
.text$mn:00002A38
.text$mn:00002A38 ; int __cdecl std::_Debug_range2<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:00002A38                 public ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z
.text$mn:00002A38 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00002A38                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+2Ap
.text$mn:00002A38
.text$mn:00002A38 arg_0           = dword ptr  8
.text$mn:00002A38 arg_4           = dword ptr  0Ch
.text$mn:00002A38 arg_8           = dword ptr  10h
.text$mn:00002A38 arg_C           = dword ptr  14h
.text$mn:00002A38
.text$mn:00002A38                 push    ebp
.text$mn:00002A39                 mov     ebp, esp
.text$mn:00002A3B                 mov     eax, [ebp+arg_0]
.text$mn:00002A3E                 cmp     eax, [ebp+arg_4]
.text$mn:00002A41                 jz      short loc_2A88
.text$mn:00002A43                 mov     ecx, [ebp+arg_C]
.text$mn:00002A46                 push    ecx             ; unsigned int
.text$mn:00002A47                 mov     edx, [ebp+arg_8]
.text$mn:00002A4A                 push    edx             ; wchar_t *
.text$mn:00002A4B                 mov     eax, [ebp+arg_0]
.text$mn:00002A4E                 push    eax             ; int
.text$mn:00002A4F                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00002A54                 add     esp, 0Ch
.text$mn:00002A57                 mov     ecx, [ebp+arg_C]
.text$mn:00002A5A                 push    ecx             ; unsigned int
.text$mn:00002A5B                 mov     edx, [ebp+arg_8]
.text$mn:00002A5E                 push    edx             ; wchar_t *
.text$mn:00002A5F                 mov     eax, [ebp+arg_4]
.text$mn:00002A62                 push    eax             ; int
.text$mn:00002A63                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00002A68                 add     esp, 0Ch
.text$mn:00002A6B                 mov     ecx, [ebp+arg_4]
.text$mn:00002A6E                 cmp     ecx, [ebp+arg_0]
.text$mn:00002A71                 jnb     short loc_2A88
.text$mn:00002A73                 mov     edx, [ebp+arg_C]
.text$mn:00002A76                 push    edx             ; unsigned int
.text$mn:00002A77                 mov     eax, [ebp+arg_8]
.text$mn:00002A7A                 push    eax             ; wchar_t *
.text$mn:00002A7B                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00002A80                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00002A85                 add     esp, 0Ch
.text$mn:00002A88
.text$mn:00002A88 loc_2A88:                               ; CODE XREF: std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00002A88                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00002A88                 pop     ebp
.text$mn:00002A89                 retn
.text$mn:00002A89 ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z endp
.text$mn:00002A89
.text$mn:00002A89 ; ---------------------------------------------------------------------------
.text$mn:00002A8A                 align 4
.text$mn:00002A8A _text$mn        ends
.text$mn:00002A8A
.text$mn:00002A8C ; ===========================================================================
.text$mn:00002A8C
.text$mn:00002A8C ; Segment type: Pure code
.text$mn:00002A8C ; Segment permissions: Read/Execute
.text$mn:00002A8C _text$mn        segment para public 'CODE' use32
.text$mn:00002A8C                 assume cs:_text$mn
.text$mn:00002A8C                 ;org 2A8Ch
.text$mn:00002A8C ; COMDAT (pick any)
.text$mn:00002A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002A8C
.text$mn:00002A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00002A8C
.text$mn:00002A8C ; Attributes: bp-based frame
.text$mn:00002A8C
.text$mn:00002A8C ; int __cdecl std::_Debug_range<char const *>(int, int, wchar_t *, unsigned int)
.text$mn:00002A8C                 public ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z
.text$mn:00002A8C ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z proc near
.text$mn:00002A8C                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+19p
.text$mn:00002A8C
.text$mn:00002A8C var_1           = byte ptr -1
.text$mn:00002A8C arg_0           = dword ptr  8
.text$mn:00002A8C arg_4           = dword ptr  0Ch
.text$mn:00002A8C arg_8           = dword ptr  10h
.text$mn:00002A8C arg_C           = dword ptr  14h
.text$mn:00002A8C
.text$mn:00002A8C                 push    ebp
.text$mn:00002A8D                 mov     ebp, esp
.text$mn:00002A8F                 push    ecx
.text$mn:00002A90                 lea     eax, [ebp+arg_0]
.text$mn:00002A93                 push    eax
.text$mn:00002A94                 lea     ecx, [ebp+var_1]
.text$mn:00002A97                 push    ecx
.text$mn:00002A98                 call    ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z ; std::_Iter_cat<char const *>(char const * const &)
.text$mn:00002A9D                 add     esp, 8
.text$mn:00002AA0                 mov     dl, [eax]
.text$mn:00002AA2                 movzx   eax, dl
.text$mn:00002AA5                 push    eax
.text$mn:00002AA6                 mov     ecx, [ebp+arg_C]
.text$mn:00002AA9                 push    ecx             ; unsigned int
.text$mn:00002AAA                 mov     edx, [ebp+arg_8]
.text$mn:00002AAD                 push    edx             ; wchar_t *
.text$mn:00002AAE                 mov     eax, [ebp+arg_4]
.text$mn:00002AB1                 push    eax             ; int
.text$mn:00002AB2                 mov     ecx, [ebp+arg_0]
.text$mn:00002AB5                 push    ecx             ; int
.text$mn:00002AB6                 call    ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00002ABB                 add     esp, 14h
.text$mn:00002ABE                 mov     esp, ebp
.text$mn:00002AC0                 pop     ebp
.text$mn:00002AC1                 retn
.text$mn:00002AC1 ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z endp
.text$mn:00002AC1
.text$mn:00002AC1 ; ---------------------------------------------------------------------------
.text$mn:00002AC2                 align 4
.text$mn:00002AC2 _text$mn        ends
.text$mn:00002AC2
.text$mn:00002AC4 ; ===========================================================================
.text$mn:00002AC4
.text$mn:00002AC4 ; Segment type: Pure code
.text$mn:00002AC4 ; Segment permissions: Read/Execute
.text$mn:00002AC4 _text$mn        segment para public 'CODE' use32
.text$mn:00002AC4                 assume cs:_text$mn
.text$mn:00002AC4                 ;org 2AC4h
.text$mn:00002AC4 ; COMDAT (pick any)
.text$mn:00002AC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002AC4
.text$mn:00002AC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002AC4
.text$mn:00002AC4 ; Attributes: bp-based frame
.text$mn:00002AC4
.text$mn:00002AC4 ; int __cdecl std::_Debug_range<wchar_t const *>(int, int, wchar_t *, unsigned int)
.text$mn:00002AC4                 public ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z
.text$mn:00002AC4 ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z proc near
.text$mn:00002AC4                                         ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+19p
.text$mn:00002AC4                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+19p ...
.text$mn:00002AC4
.text$mn:00002AC4 var_1           = byte ptr -1
.text$mn:00002AC4 arg_0           = dword ptr  8
.text$mn:00002AC4 arg_4           = dword ptr  0Ch
.text$mn:00002AC4 arg_8           = dword ptr  10h
.text$mn:00002AC4 arg_C           = dword ptr  14h
.text$mn:00002AC4
.text$mn:00002AC4                 push    ebp
.text$mn:00002AC5                 mov     ebp, esp
.text$mn:00002AC7                 push    ecx
.text$mn:00002AC8                 lea     eax, [ebp+arg_0]
.text$mn:00002ACB                 push    eax
.text$mn:00002ACC                 lea     ecx, [ebp+var_1]
.text$mn:00002ACF                 push    ecx
.text$mn:00002AD0                 call    ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z ; std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:00002AD5                 add     esp, 8
.text$mn:00002AD8                 mov     dl, [eax]
.text$mn:00002ADA                 movzx   eax, dl
.text$mn:00002ADD                 push    eax
.text$mn:00002ADE                 mov     ecx, [ebp+arg_C]
.text$mn:00002AE1                 push    ecx             ; unsigned int
.text$mn:00002AE2                 mov     edx, [ebp+arg_8]
.text$mn:00002AE5                 push    edx             ; wchar_t *
.text$mn:00002AE6                 mov     eax, [ebp+arg_4]
.text$mn:00002AE9                 push    eax             ; int
.text$mn:00002AEA                 mov     ecx, [ebp+arg_0]
.text$mn:00002AED                 push    ecx             ; int
.text$mn:00002AEE                 call    ??$_Debug_range2@PB_W@std@@YAXPB_W00IUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00002AF3                 add     esp, 14h
.text$mn:00002AF6                 mov     esp, ebp
.text$mn:00002AF8                 pop     ebp
.text$mn:00002AF9                 retn
.text$mn:00002AF9 ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z endp
.text$mn:00002AF9
.text$mn:00002AF9 ; ---------------------------------------------------------------------------
.text$mn:00002AFA                 align 4
.text$mn:00002AFA _text$mn        ends
.text$mn:00002AFA
.text$mn:00002AFC ; ===========================================================================
.text$mn:00002AFC
.text$mn:00002AFC ; Segment type: Pure code
.text$mn:00002AFC ; Segment permissions: Read/Execute
.text$mn:00002AFC _text$mn        segment para public 'CODE' use32
.text$mn:00002AFC                 assume cs:_text$mn
.text$mn:00002AFC                 ;org 2AFCh
.text$mn:00002AFC ; COMDAT (pick any)
.text$mn:00002AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002AFC
.text$mn:00002AFC ; =============== S U B R O U T I N E =======================================
.text$mn:00002AFC
.text$mn:00002AFC ; Attributes: bp-based frame
.text$mn:00002AFC
.text$mn:00002AFC ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<char const *>(char const * const &)
.text$mn:00002AFC                 public ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z
.text$mn:00002AFC ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z proc near
.text$mn:00002AFC                                         ; CODE XREF: std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)+Cp
.text$mn:00002AFC
.text$mn:00002AFC var_1           = byte ptr -1
.text$mn:00002AFC arg_0           = dword ptr  8
.text$mn:00002AFC
.text$mn:00002AFC                 push    ebp
.text$mn:00002AFD                 mov     ebp, esp
.text$mn:00002AFF                 push    ecx
.text$mn:00002B00                 mov     eax, [ebp+arg_0]
.text$mn:00002B03                 mov     cl, [ebp+var_1]
.text$mn:00002B06                 mov     [eax], cl
.text$mn:00002B08                 mov     eax, [ebp+arg_0]
.text$mn:00002B0B                 mov     esp, ebp
.text$mn:00002B0D                 pop     ebp
.text$mn:00002B0E                 retn
.text$mn:00002B0E ??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z endp
.text$mn:00002B0E
.text$mn:00002B0E ; ---------------------------------------------------------------------------
.text$mn:00002B0F                 align 10h
.text$mn:00002B0F _text$mn        ends
.text$mn:00002B0F
.text$mn:00002B10 ; ===========================================================================
.text$mn:00002B10
.text$mn:00002B10 ; Segment type: Pure code
.text$mn:00002B10 ; Segment permissions: Read/Execute
.text$mn:00002B10 _text$mn        segment para public 'CODE' use32
.text$mn:00002B10                 assume cs:_text$mn
.text$mn:00002B10                 ;org 2B10h
.text$mn:00002B10 ; COMDAT (pick any)
.text$mn:00002B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B10
.text$mn:00002B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B10
.text$mn:00002B10 ; Attributes: bp-based frame
.text$mn:00002B10
.text$mn:00002B10 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<wchar_t const *>(wchar_t const * const &)
.text$mn:00002B10                 public ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z
.text$mn:00002B10 ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z proc near
.text$mn:00002B10                                         ; CODE XREF: std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)+Cp
.text$mn:00002B10
.text$mn:00002B10 var_1           = byte ptr -1
.text$mn:00002B10 arg_0           = dword ptr  8
.text$mn:00002B10
.text$mn:00002B10                 push    ebp
.text$mn:00002B11                 mov     ebp, esp
.text$mn:00002B13                 push    ecx
.text$mn:00002B14                 mov     eax, [ebp+arg_0]
.text$mn:00002B17                 mov     cl, [ebp+var_1]
.text$mn:00002B1A                 mov     [eax], cl
.text$mn:00002B1C                 mov     eax, [ebp+arg_0]
.text$mn:00002B1F                 mov     esp, ebp
.text$mn:00002B21                 pop     ebp
.text$mn:00002B22                 retn
.text$mn:00002B22 ??$_Iter_cat@PB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQB_W@Z endp
.text$mn:00002B22
.text$mn:00002B22 ; ---------------------------------------------------------------------------
.text$mn:00002B23                 align 4
.text$mn:00002B23 _text$mn        ends
.text$mn:00002B23
.text$mn:00002B24 ; ===========================================================================
.text$mn:00002B24
.text$mn:00002B24 ; Segment type: Pure code
.text$mn:00002B24 ; Segment permissions: Read/Execute
.text$mn:00002B24 _text$mn        segment para public 'CODE' use32
.text$mn:00002B24                 assume cs:_text$mn
.text$mn:00002B24                 ;org 2B24h
.text$mn:00002B24 ; COMDAT (pick any)
.text$mn:00002B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B24
.text$mn:00002B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B24
.text$mn:00002B24 ; Attributes: bp-based frame
.text$mn:00002B24
.text$mn:00002B24 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00002B24                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00002B24 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00002B24                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00002B24                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00002B24
.text$mn:00002B24 arg_0           = dword ptr  8
.text$mn:00002B24
.text$mn:00002B24                 push    ebp
.text$mn:00002B25                 mov     ebp, esp
.text$mn:00002B27                 mov     eax, [ebp+arg_0]
.text$mn:00002B2A                 pop     ebp
.text$mn:00002B2B                 retn
.text$mn:00002B2B ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00002B2B
.text$mn:00002B2B _text$mn        ends
.text$mn:00002B2B
.text$mn:00002B2C ; ===========================================================================
.text$mn:00002B2C
.text$mn:00002B2C ; Segment type: Pure code
.text$mn:00002B2C ; Segment permissions: Read/Execute
.text$mn:00002B2C _text$mn        segment para public 'CODE' use32
.text$mn:00002B2C                 assume cs:_text$mn
.text$mn:00002B2C                 ;org 2B2Ch
.text$mn:00002B2C ; COMDAT (pick any)
.text$mn:00002B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B2C
.text$mn:00002B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00002B2C
.text$mn:00002B2C ; Attributes: bp-based frame
.text$mn:00002B2C
.text$mn:00002B2C ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00002B2C                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00002B2C ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00002B2C                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00002B2C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00002B2C
.text$mn:00002B2C arg_0           = dword ptr  8
.text$mn:00002B2C
.text$mn:00002B2C                 push    ebp
.text$mn:00002B2D                 mov     ebp, esp
.text$mn:00002B2F                 mov     eax, [ebp+arg_0]
.text$mn:00002B32                 pop     ebp
.text$mn:00002B33                 retn
.text$mn:00002B33 ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00002B33
.text$mn:00002B33 _text$mn        ends
.text$mn:00002B33
.text$mn:00002B34 ; ===========================================================================
.text$mn:00002B34
.text$mn:00002B34 ; Segment type: Pure code
.text$mn:00002B34 ; Segment permissions: Read/Execute
.text$mn:00002B34 _text$mn        segment para public 'CODE' use32
.text$mn:00002B34                 assume cs:_text$mn
.text$mn:00002B34                 ;org 2B34h
.text$mn:00002B34 ; COMDAT (pick any)
.text$mn:00002B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B34
.text$mn:00002B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B34
.text$mn:00002B34 ; Attributes: bp-based frame
.text$mn:00002B34
.text$mn:00002B34 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00002B34                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00002B34 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00002B34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+50p
.text$mn:00002B34                                         ; $LN19+4Bp
.text$mn:00002B34
.text$mn:00002B34 var_4           = dword ptr -4
.text$mn:00002B34 arg_0           = dword ptr  8
.text$mn:00002B34 arg_4           = dword ptr  0Ch
.text$mn:00002B34
.text$mn:00002B34                 push    ebp
.text$mn:00002B35                 mov     ebp, esp
.text$mn:00002B37                 push    ecx
.text$mn:00002B38                 mov     [ebp+var_4], ecx
.text$mn:00002B3B                 mov     eax, [ebp+arg_4]
.text$mn:00002B3E                 push    eax
.text$mn:00002B3F                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00002B44                 add     esp, 4
.text$mn:00002B47                 push    eax             ; int
.text$mn:00002B48                 mov     ecx, [ebp+arg_0]
.text$mn:00002B4B                 push    ecx             ; void *
.text$mn:00002B4C                 mov     edx, [ebp+var_4]
.text$mn:00002B4F                 push    edx             ; int
.text$mn:00002B50                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00002B55                 add     esp, 0Ch
.text$mn:00002B58                 mov     esp, ebp
.text$mn:00002B5A                 pop     ebp
.text$mn:00002B5B                 retn    8
.text$mn:00002B5B ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00002B5B
.text$mn:00002B5B ; ---------------------------------------------------------------------------
.text$mn:00002B5E                 align 10h
.text$mn:00002B5E _text$mn        ends
.text$mn:00002B5E
.text$mn:00002B60 ; ===========================================================================
.text$mn:00002B60
.text$mn:00002B60 ; Segment type: Pure code
.text$mn:00002B60 ; Segment permissions: Read/Execute
.text$mn:00002B60 _text$mn        segment para public 'CODE' use32
.text$mn:00002B60                 assume cs:_text$mn
.text$mn:00002B60                 ;org 2B60h
.text$mn:00002B60 ; COMDAT (pick any)
.text$mn:00002B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B60
.text$mn:00002B60 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B60
.text$mn:00002B60 ; Attributes: bp-based frame
.text$mn:00002B60
.text$mn:00002B60 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00002B60                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00002B60 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00002B60                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00002B60
.text$mn:00002B60 var_1C          = dword ptr -1Ch
.text$mn:00002B60 var_18          = dword ptr -18h
.text$mn:00002B60 var_14          = dword ptr -14h
.text$mn:00002B60 var_10          = dword ptr -10h
.text$mn:00002B60 var_C           = dword ptr -0Ch
.text$mn:00002B60 var_4           = dword ptr -4
.text$mn:00002B60 arg_0           = dword ptr  8
.text$mn:00002B60 arg_4           = dword ptr  0Ch
.text$mn:00002B60
.text$mn:00002B60                 push    ebp
.text$mn:00002B61                 mov     ebp, esp
.text$mn:00002B63                 push    0FFFFFFFFh
.text$mn:00002B65                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00002B6A                 mov     eax, large fs:0
.text$mn:00002B70                 push    eax
.text$mn:00002B71                 sub     esp, 10h
.text$mn:00002B74                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B79                 xor     eax, ebp
.text$mn:00002B7B                 push    eax
.text$mn:00002B7C                 lea     eax, [ebp+var_C]
.text$mn:00002B7F                 mov     large fs:0, eax
.text$mn:00002B85                 mov     [ebp+var_18], ecx
.text$mn:00002B88                 mov     eax, [ebp+arg_0]
.text$mn:00002B8B                 push    eax             ; void *
.text$mn:00002B8C                 push    4               ; unsigned int
.text$mn:00002B8E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002B93                 add     esp, 8
.text$mn:00002B96                 mov     [ebp+var_10], eax
.text$mn:00002B99                 mov     [ebp+var_4], 0
.text$mn:00002BA0                 cmp     [ebp+var_10], 0
.text$mn:00002BA4                 jz      short loc_2BC1
.text$mn:00002BA6                 mov     ecx, [ebp+arg_4]
.text$mn:00002BA9                 push    ecx
.text$mn:00002BAA                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00002BAF                 add     esp, 4
.text$mn:00002BB2                 mov     edx, [ebp+var_10]
.text$mn:00002BB5                 mov     eax, [eax]
.text$mn:00002BB7                 mov     [edx], eax
.text$mn:00002BB9                 mov     ecx, [ebp+var_10]
.text$mn:00002BBC                 mov     [ebp+var_14], ecx
.text$mn:00002BBF                 jmp     short loc_2BC8
.text$mn:00002BC1 ; ---------------------------------------------------------------------------
.text$mn:00002BC1
.text$mn:00002BC1 loc_2BC1:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00002BC1                 mov     [ebp+var_14], 0
.text$mn:00002BC8
.text$mn:00002BC8 loc_2BC8:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00002BC8                 mov     edx, [ebp+var_14]
.text$mn:00002BCB                 mov     [ebp+var_1C], edx
.text$mn:00002BCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002BD5                 mov     ecx, [ebp+var_C]
.text$mn:00002BD8                 mov     large fs:0, ecx
.text$mn:00002BDF                 pop     ecx
.text$mn:00002BE0                 mov     esp, ebp
.text$mn:00002BE2                 pop     ebp
.text$mn:00002BE3                 retn    8
.text$mn:00002BE3 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00002BE3
.text$mn:00002BE3 ; ---------------------------------------------------------------------------
.text$mn:00002BE6                 align 4
.text$mn:00002BE6 _text$mn        ends
.text$mn:00002BE6
.text$x:00002BE8 ; ===========================================================================
.text$x:00002BE8
.text$x:00002BE8 ; Segment type: Pure code
.text$x:00002BE8 ; Segment permissions: Read/Execute
.text$x:00002BE8 _text$x         segment para public 'CODE' use32
.text$x:00002BE8                 assume cs:_text$x
.text$x:00002BE8                 ;org 2BE8h
.text$x:00002BE8 ; COMDAT (pick associative to section at 2B60)
.text$x:00002BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002BE8
.text$x:00002BE8 ; =============== S U B R O U T I N E =======================================
.text$x:00002BE8
.text$x:00002BE8
.text$x:00002BE8 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00002BE8                                         ; DATA XREF: .xdata$x:00009F14o
.text$x:00002BE8                 mov     eax, [ebp+8]
.text$x:00002BEB                 push    eax
.text$x:00002BEC                 mov     eax, [ebp-10h]
.text$x:00002BEF                 push    eax             ; void *
.text$x:00002BF0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00002BF5                 add     esp, 8
.text$x:00002BF8                 retn
.text$x:00002BF8 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00002BF8
.text$x:00002BF9
.text$x:00002BF9 ; =============== S U B R O U T I N E =======================================
.text$x:00002BF9
.text$x:00002BF9
.text$x:00002BF9 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00002BF9                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00002BF9
.text$x:00002BF9 arg_4           = dword ptr  8
.text$x:00002BF9
.text$x:00002BF9                 mov     edx, [esp+arg_4]
.text$x:00002BFD                 lea     eax, [edx+0Ch]
.text$x:00002C00                 mov     ecx, [edx-14h]
.text$x:00002C03                 xor     ecx, eax
.text$x:00002C05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C0A                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00002C0F                 jmp     ___CxxFrameHandler3
.text$x:00002C0F __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00002C0F
.text$x:00002C0F _text$x         ends
.text$x:00002C0F
.text$mn:00002C14 ; ===========================================================================
.text$mn:00002C14
.text$mn:00002C14 ; Segment type: Pure code
.text$mn:00002C14 ; Segment permissions: Read/Execute
.text$mn:00002C14 _text$mn        segment para public 'CODE' use32
.text$mn:00002C14                 assume cs:_text$mn
.text$mn:00002C14                 ;org 2C14h
.text$mn:00002C14 ; COMDAT (pick any)
.text$mn:00002C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C14
.text$mn:00002C14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C14
.text$mn:00002C14 ; Attributes: bp-based frame
.text$mn:00002C14
.text$mn:00002C14 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00002C14                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00002C14 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00002C14                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00002C14
.text$mn:00002C14 arg_0           = dword ptr  8
.text$mn:00002C14 arg_4           = dword ptr  0Ch
.text$mn:00002C14 arg_8           = dword ptr  10h
.text$mn:00002C14
.text$mn:00002C14                 push    ebp
.text$mn:00002C15                 mov     ebp, esp
.text$mn:00002C17                 mov     eax, [ebp+arg_8]
.text$mn:00002C1A                 push    eax
.text$mn:00002C1B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00002C20                 add     esp, 4
.text$mn:00002C23                 push    eax             ; int
.text$mn:00002C24                 mov     ecx, [ebp+arg_4]
.text$mn:00002C27                 push    ecx             ; void *
.text$mn:00002C28                 mov     ecx, [ebp+arg_0]
.text$mn:00002C2B                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00002C30                 pop     ebp
.text$mn:00002C31                 retn
.text$mn:00002C31 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00002C31
.text$mn:00002C31 ; ---------------------------------------------------------------------------
.text$mn:00002C32                 align 4
.text$mn:00002C32 _text$mn        ends
.text$mn:00002C32
.text$mn:00002C34 ; ===========================================================================
.text$mn:00002C34
.text$mn:00002C34 ; Segment type: Pure code
.text$mn:00002C34 ; Segment permissions: Read/Execute
.text$mn:00002C34 _text$mn        segment para public 'CODE' use32
.text$mn:00002C34                 assume cs:_text$mn
.text$mn:00002C34                 ;org 2C34h
.text$mn:00002C34 ; COMDAT (pick any)
.text$mn:00002C34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C34
.text$mn:00002C34 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C34
.text$mn:00002C34 ; Attributes: bp-based frame
.text$mn:00002C34
.text$mn:00002C34 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00002C34                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002C34 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00002C34                                         ; CODE XREF: $LN19_0+4Bp
.text$mn:00002C34
.text$mn:00002C34 var_4           = dword ptr -4
.text$mn:00002C34 arg_0           = dword ptr  8
.text$mn:00002C34 arg_4           = dword ptr  0Ch
.text$mn:00002C34
.text$mn:00002C34                 push    ebp
.text$mn:00002C35                 mov     ebp, esp
.text$mn:00002C37                 push    ecx
.text$mn:00002C38                 mov     [ebp+var_4], ecx
.text$mn:00002C3B                 mov     eax, [ebp+arg_4]
.text$mn:00002C3E                 push    eax
.text$mn:00002C3F                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002C44                 add     esp, 4
.text$mn:00002C47                 push    eax             ; int
.text$mn:00002C48                 mov     ecx, [ebp+arg_0]
.text$mn:00002C4B                 push    ecx             ; void *
.text$mn:00002C4C                 mov     edx, [ebp+var_4]
.text$mn:00002C4F                 push    edx             ; int
.text$mn:00002C50                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00002C55                 add     esp, 0Ch
.text$mn:00002C58                 mov     esp, ebp
.text$mn:00002C5A                 pop     ebp
.text$mn:00002C5B                 retn    8
.text$mn:00002C5B ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00002C5B
.text$mn:00002C5B ; ---------------------------------------------------------------------------
.text$mn:00002C5E                 align 10h
.text$mn:00002C5E _text$mn        ends
.text$mn:00002C5E
.text$mn:00002C60 ; ===========================================================================
.text$mn:00002C60
.text$mn:00002C60 ; Segment type: Pure code
.text$mn:00002C60 ; Segment permissions: Read/Execute
.text$mn:00002C60 _text$mn        segment para public 'CODE' use32
.text$mn:00002C60                 assume cs:_text$mn
.text$mn:00002C60                 ;org 2C60h
.text$mn:00002C60 ; COMDAT (pick any)
.text$mn:00002C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C60
.text$mn:00002C60 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C60
.text$mn:00002C60 ; Attributes: bp-based frame
.text$mn:00002C60
.text$mn:00002C60 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00002C60                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002C60 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00002C60                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00002C60
.text$mn:00002C60 var_1C          = dword ptr -1Ch
.text$mn:00002C60 var_18          = dword ptr -18h
.text$mn:00002C60 var_14          = dword ptr -14h
.text$mn:00002C60 var_10          = dword ptr -10h
.text$mn:00002C60 var_C           = dword ptr -0Ch
.text$mn:00002C60 var_4           = dword ptr -4
.text$mn:00002C60 arg_0           = dword ptr  8
.text$mn:00002C60 arg_4           = dword ptr  0Ch
.text$mn:00002C60
.text$mn:00002C60                 push    ebp
.text$mn:00002C61                 mov     ebp, esp
.text$mn:00002C63                 push    0FFFFFFFFh
.text$mn:00002C65                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002C6A                 mov     eax, large fs:0
.text$mn:00002C70                 push    eax
.text$mn:00002C71                 sub     esp, 10h
.text$mn:00002C74                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002C79                 xor     eax, ebp
.text$mn:00002C7B                 push    eax
.text$mn:00002C7C                 lea     eax, [ebp+var_C]
.text$mn:00002C7F                 mov     large fs:0, eax
.text$mn:00002C85                 mov     [ebp+var_18], ecx
.text$mn:00002C88                 mov     eax, [ebp+arg_0]
.text$mn:00002C8B                 push    eax             ; void *
.text$mn:00002C8C                 push    4               ; unsigned int
.text$mn:00002C8E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002C93                 add     esp, 8
.text$mn:00002C96                 mov     [ebp+var_10], eax
.text$mn:00002C99                 mov     [ebp+var_4], 0
.text$mn:00002CA0                 cmp     [ebp+var_10], 0
.text$mn:00002CA4                 jz      short loc_2CC1
.text$mn:00002CA6                 mov     ecx, [ebp+arg_4]
.text$mn:00002CA9                 push    ecx
.text$mn:00002CAA                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002CAF                 add     esp, 4
.text$mn:00002CB2                 mov     edx, [ebp+var_10]
.text$mn:00002CB5                 mov     eax, [eax]
.text$mn:00002CB7                 mov     [edx], eax
.text$mn:00002CB9                 mov     ecx, [ebp+var_10]
.text$mn:00002CBC                 mov     [ebp+var_14], ecx
.text$mn:00002CBF                 jmp     short loc_2CC8
.text$mn:00002CC1 ; ---------------------------------------------------------------------------
.text$mn:00002CC1
.text$mn:00002CC1 loc_2CC1:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00002CC1                 mov     [ebp+var_14], 0
.text$mn:00002CC8
.text$mn:00002CC8 loc_2CC8:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00002CC8                 mov     edx, [ebp+var_14]
.text$mn:00002CCB                 mov     [ebp+var_1C], edx
.text$mn:00002CCE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002CD5                 mov     ecx, [ebp+var_C]
.text$mn:00002CD8                 mov     large fs:0, ecx
.text$mn:00002CDF                 pop     ecx
.text$mn:00002CE0                 mov     esp, ebp
.text$mn:00002CE2                 pop     ebp
.text$mn:00002CE3                 retn    8
.text$mn:00002CE3 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00002CE3
.text$mn:00002CE3 ; ---------------------------------------------------------------------------
.text$mn:00002CE6                 align 4
.text$mn:00002CE6 _text$mn        ends
.text$mn:00002CE6
.text$x:00002CE8 ; ===========================================================================
.text$x:00002CE8
.text$x:00002CE8 ; Segment type: Pure code
.text$x:00002CE8 ; Segment permissions: Read/Execute
.text$x:00002CE8 _text$x         segment para public 'CODE' use32
.text$x:00002CE8                 assume cs:_text$x
.text$x:00002CE8                 ;org 2CE8h
.text$x:00002CE8 ; COMDAT (pick associative to section at 2C60)
.text$x:00002CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002CE8
.text$x:00002CE8 ; =============== S U B R O U T I N E =======================================
.text$x:00002CE8
.text$x:00002CE8
.text$x:00002CE8 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00002CE8                                         ; DATA XREF: .xdata$x:00009F40o
.text$x:00002CE8                 mov     eax, [ebp+8]
.text$x:00002CEB                 push    eax
.text$x:00002CEC                 mov     eax, [ebp-10h]
.text$x:00002CEF                 push    eax             ; void *
.text$x:00002CF0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00002CF5                 add     esp, 8
.text$x:00002CF8                 retn
.text$x:00002CF8 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00002CF8
.text$x:00002CF9
.text$x:00002CF9 ; =============== S U B R O U T I N E =======================================
.text$x:00002CF9
.text$x:00002CF9
.text$x:00002CF9 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00002CF9                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00002CF9
.text$x:00002CF9 arg_4           = dword ptr  8
.text$x:00002CF9
.text$x:00002CF9                 mov     edx, [esp+arg_4]
.text$x:00002CFD                 lea     eax, [edx+0Ch]
.text$x:00002D00                 mov     ecx, [edx-14h]
.text$x:00002D03                 xor     ecx, eax
.text$x:00002D05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D0A                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00002D0F                 jmp     ___CxxFrameHandler3
.text$x:00002D0F __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00002D0F
.text$x:00002D0F _text$x         ends
.text$x:00002D0F
.text$mn:00002D14 ; ===========================================================================
.text$mn:00002D14
.text$mn:00002D14 ; Segment type: Pure code
.text$mn:00002D14 ; Segment permissions: Read/Execute
.text$mn:00002D14 _text$mn        segment para public 'CODE' use32
.text$mn:00002D14                 assume cs:_text$mn
.text$mn:00002D14                 ;org 2D14h
.text$mn:00002D14 ; COMDAT (pick any)
.text$mn:00002D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D14
.text$mn:00002D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D14
.text$mn:00002D14 ; Attributes: bp-based frame
.text$mn:00002D14
.text$mn:00002D14 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00002D14                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00002D14 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00002D14                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00002D14
.text$mn:00002D14 arg_0           = dword ptr  8
.text$mn:00002D14 arg_4           = dword ptr  0Ch
.text$mn:00002D14 arg_8           = dword ptr  10h
.text$mn:00002D14
.text$mn:00002D14                 push    ebp
.text$mn:00002D15                 mov     ebp, esp
.text$mn:00002D17                 mov     eax, [ebp+arg_8]
.text$mn:00002D1A                 push    eax
.text$mn:00002D1B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002D20                 add     esp, 4
.text$mn:00002D23                 push    eax             ; int
.text$mn:00002D24                 mov     ecx, [ebp+arg_4]
.text$mn:00002D27                 push    ecx             ; void *
.text$mn:00002D28                 mov     ecx, [ebp+arg_0]
.text$mn:00002D2B                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00002D30                 pop     ebp
.text$mn:00002D31                 retn
.text$mn:00002D31 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00002D31
.text$mn:00002D31 ; ---------------------------------------------------------------------------
.text$mn:00002D32                 align 4
.text$mn:00002D32 _text$mn        ends
.text$mn:00002D32
.text$mn:00002D34 ; ===========================================================================
.text$mn:00002D34
.text$mn:00002D34 ; Segment type: Pure code
.text$mn:00002D34 ; Segment permissions: Read/Execute
.text$mn:00002D34 _text$mn        segment para public 'CODE' use32
.text$mn:00002D34                 assume cs:_text$mn
.text$mn:00002D34                 ;org 2D34h
.text$mn:00002D34 ; COMDAT (pick any)
.text$mn:00002D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D34
.text$mn:00002D34 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D34
.text$mn:00002D34 ; Attributes: bp-based frame
.text$mn:00002D34
.text$mn:00002D34 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00002D34                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00002D34 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00002D34                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:00002D34                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:00002D34
.text$mn:00002D34 var_1C          = dword ptr -1Ch
.text$mn:00002D34 var_18          = dword ptr -18h
.text$mn:00002D34 var_14          = dword ptr -14h
.text$mn:00002D34 var_10          = dword ptr -10h
.text$mn:00002D34 var_C           = dword ptr -0Ch
.text$mn:00002D34 var_4           = dword ptr -4
.text$mn:00002D34 arg_0           = dword ptr  8
.text$mn:00002D34 arg_4           = dword ptr  0Ch
.text$mn:00002D34
.text$mn:00002D34                 push    ebp
.text$mn:00002D35                 mov     ebp, esp
.text$mn:00002D37                 push    0FFFFFFFFh
.text$mn:00002D39                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00002D3E                 mov     eax, large fs:0
.text$mn:00002D44                 push    eax
.text$mn:00002D45                 sub     esp, 10h
.text$mn:00002D48                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002D4D                 xor     eax, ebp
.text$mn:00002D4F                 push    eax
.text$mn:00002D50                 lea     eax, [ebp+var_C]
.text$mn:00002D53                 mov     large fs:0, eax
.text$mn:00002D59                 mov     [ebp+var_18], ecx
.text$mn:00002D5C                 mov     eax, [ebp+arg_0]
.text$mn:00002D5F                 push    eax             ; void *
.text$mn:00002D60                 push    8               ; unsigned int
.text$mn:00002D62                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002D67                 add     esp, 8
.text$mn:00002D6A                 mov     [ebp+var_10], eax
.text$mn:00002D6D                 mov     [ebp+var_4], 0
.text$mn:00002D74                 cmp     [ebp+var_10], 0
.text$mn:00002D78                 jz      short loc_2D9B
.text$mn:00002D7A                 mov     ecx, [ebp+arg_4]
.text$mn:00002D7D                 push    ecx
.text$mn:00002D7E                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00002D83                 add     esp, 4
.text$mn:00002D86                 mov     edx, [eax]
.text$mn:00002D88                 mov     eax, [eax+4]
.text$mn:00002D8B                 mov     ecx, [ebp+var_10]
.text$mn:00002D8E                 mov     [ecx], edx
.text$mn:00002D90                 mov     [ecx+4], eax
.text$mn:00002D93                 mov     edx, [ebp+var_10]
.text$mn:00002D96                 mov     [ebp+var_14], edx
.text$mn:00002D99                 jmp     short loc_2DA2
.text$mn:00002D9B ; ---------------------------------------------------------------------------
.text$mn:00002D9B
.text$mn:00002D9B loc_2D9B:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00002D9B                 mov     [ebp+var_14], 0
.text$mn:00002DA2
.text$mn:00002DA2 loc_2DA2:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00002DA2                 mov     eax, [ebp+var_14]
.text$mn:00002DA5                 mov     [ebp+var_1C], eax
.text$mn:00002DA8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DAF                 mov     ecx, [ebp+var_C]
.text$mn:00002DB2                 mov     large fs:0, ecx
.text$mn:00002DB9                 pop     ecx
.text$mn:00002DBA                 mov     esp, ebp
.text$mn:00002DBC                 pop     ebp
.text$mn:00002DBD                 retn    8
.text$mn:00002DBD ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00002DBD
.text$mn:00002DBD _text$mn        ends
.text$mn:00002DBD
.text$x:00002DC0 ; ===========================================================================
.text$x:00002DC0
.text$x:00002DC0 ; Segment type: Pure code
.text$x:00002DC0 ; Segment permissions: Read/Execute
.text$x:00002DC0 _text$x         segment para public 'CODE' use32
.text$x:00002DC0                 assume cs:_text$x
.text$x:00002DC0                 ;org 2DC0h
.text$x:00002DC0 ; COMDAT (pick associative to section at 2D34)
.text$x:00002DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002DC0
.text$x:00002DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00002DC0
.text$x:00002DC0
.text$x:00002DC0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00002DC0                                         ; DATA XREF: .xdata$x:00009E90o
.text$x:00002DC0                 mov     eax, [ebp+8]
.text$x:00002DC3                 push    eax
.text$x:00002DC4                 mov     eax, [ebp-10h]
.text$x:00002DC7                 push    eax             ; void *
.text$x:00002DC8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00002DCD                 add     esp, 8
.text$x:00002DD0                 retn
.text$x:00002DD0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00002DD0
.text$x:00002DD1
.text$x:00002DD1 ; =============== S U B R O U T I N E =======================================
.text$x:00002DD1
.text$x:00002DD1
.text$x:00002DD1 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00002DD1                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00002DD1
.text$x:00002DD1 arg_4           = dword ptr  8
.text$x:00002DD1
.text$x:00002DD1                 mov     edx, [esp+arg_4]
.text$x:00002DD5                 lea     eax, [edx+0Ch]
.text$x:00002DD8                 mov     ecx, [edx-14h]
.text$x:00002DDB                 xor     ecx, eax
.text$x:00002DDD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DE2                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00002DE7                 jmp     ___CxxFrameHandler3
.text$x:00002DE7 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00002DE7
.text$x:00002DE7 _text$x         ends
.text$x:00002DE7
.text$mn:00002DEC ; ===========================================================================
.text$mn:00002DEC
.text$mn:00002DEC ; Segment type: Pure code
.text$mn:00002DEC ; Segment permissions: Read/Execute
.text$mn:00002DEC _text$mn        segment para public 'CODE' use32
.text$mn:00002DEC                 assume cs:_text$mn
.text$mn:00002DEC                 ;org 2DECh
.text$mn:00002DEC ; COMDAT (pick any)
.text$mn:00002DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002DEC
.text$mn:00002DEC ; =============== S U B R O U T I N E =======================================
.text$mn:00002DEC
.text$mn:00002DEC ; Attributes: bp-based frame
.text$mn:00002DEC
.text$mn:00002DEC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00002DEC                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00002DEC ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00002DEC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00002DEC
.text$mn:00002DEC var_4           = dword ptr -4
.text$mn:00002DEC arg_0           = dword ptr  8
.text$mn:00002DEC
.text$mn:00002DEC                 push    ebp
.text$mn:00002DED                 mov     ebp, esp
.text$mn:00002DEF                 push    ecx
.text$mn:00002DF0                 mov     [ebp+var_4], ecx
.text$mn:00002DF3                 mov     eax, [ebp+arg_0]
.text$mn:00002DF6                 push    eax
.text$mn:00002DF7                 mov     ecx, [ebp+var_4]
.text$mn:00002DFA                 push    ecx
.text$mn:00002DFB                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00002E00                 add     esp, 8
.text$mn:00002E03                 mov     esp, ebp
.text$mn:00002E05                 pop     ebp
.text$mn:00002E06                 retn    4
.text$mn:00002E06 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00002E06
.text$mn:00002E06 ; ---------------------------------------------------------------------------
.text$mn:00002E09                 align 4
.text$mn:00002E09 _text$mn        ends
.text$mn:00002E09
.text$mn:00002E0C ; ===========================================================================
.text$mn:00002E0C
.text$mn:00002E0C ; Segment type: Pure code
.text$mn:00002E0C ; Segment permissions: Read/Execute
.text$mn:00002E0C _text$mn        segment para public 'CODE' use32
.text$mn:00002E0C                 assume cs:_text$mn
.text$mn:00002E0C                 ;org 2E0Ch
.text$mn:00002E0C ; COMDAT (pick any)
.text$mn:00002E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E0C
.text$mn:00002E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E0C
.text$mn:00002E0C ; Attributes: bp-based frame
.text$mn:00002E0C
.text$mn:00002E0C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00002E0C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00002E0C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00002E0C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00002E0C
.text$mn:00002E0C var_4           = dword ptr -4
.text$mn:00002E0C
.text$mn:00002E0C                 push    ebp
.text$mn:00002E0D                 mov     ebp, esp
.text$mn:00002E0F                 push    ecx
.text$mn:00002E10                 mov     [ebp+var_4], ecx
.text$mn:00002E13                 mov     esp, ebp
.text$mn:00002E15                 pop     ebp
.text$mn:00002E16                 retn    4
.text$mn:00002E16 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00002E16
.text$mn:00002E16 ; ---------------------------------------------------------------------------
.text$mn:00002E19                 align 4
.text$mn:00002E19 _text$mn        ends
.text$mn:00002E19
.text$mn:00002E1C ; ===========================================================================
.text$mn:00002E1C
.text$mn:00002E1C ; Segment type: Pure code
.text$mn:00002E1C ; Segment permissions: Read/Execute
.text$mn:00002E1C _text$mn        segment para public 'CODE' use32
.text$mn:00002E1C                 assume cs:_text$mn
.text$mn:00002E1C                 ;org 2E1Ch
.text$mn:00002E1C ; COMDAT (pick any)
.text$mn:00002E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E1C
.text$mn:00002E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E1C
.text$mn:00002E1C ; Attributes: bp-based frame
.text$mn:00002E1C
.text$mn:00002E1C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00002E1C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00002E1C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00002E1C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00002E1C
.text$mn:00002E1C arg_0           = dword ptr  8
.text$mn:00002E1C arg_4           = dword ptr  0Ch
.text$mn:00002E1C
.text$mn:00002E1C                 push    ebp
.text$mn:00002E1D                 mov     ebp, esp
.text$mn:00002E1F                 mov     eax, [ebp+arg_4]
.text$mn:00002E22                 push    eax
.text$mn:00002E23                 mov     ecx, [ebp+arg_0]
.text$mn:00002E26                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00002E2B                 pop     ebp
.text$mn:00002E2C                 retn
.text$mn:00002E2C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00002E2C
.text$mn:00002E2C ; ---------------------------------------------------------------------------
.text$mn:00002E2D                 align 10h
.text$mn:00002E2D _text$mn        ends
.text$mn:00002E2D
.text$mn:00002E30 ; ===========================================================================
.text$mn:00002E30
.text$mn:00002E30 ; Segment type: Pure code
.text$mn:00002E30 ; Segment permissions: Read/Execute
.text$mn:00002E30 _text$mn        segment para public 'CODE' use32
.text$mn:00002E30                 assume cs:_text$mn
.text$mn:00002E30                 ;org 2E30h
.text$mn:00002E30 ; COMDAT (pick any)
.text$mn:00002E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E30
.text$mn:00002E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E30
.text$mn:00002E30 ; Attributes: bp-based frame
.text$mn:00002E30
.text$mn:00002E30 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00002E30                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00002E30 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00002E30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00002E30
.text$mn:00002E30 var_4           = dword ptr -4
.text$mn:00002E30 arg_0           = dword ptr  8
.text$mn:00002E30
.text$mn:00002E30                 push    ebp
.text$mn:00002E31                 mov     ebp, esp
.text$mn:00002E33                 push    ecx
.text$mn:00002E34                 mov     [ebp+var_4], ecx
.text$mn:00002E37                 mov     eax, [ebp+arg_0]
.text$mn:00002E3A                 push    eax
.text$mn:00002E3B                 mov     ecx, [ebp+var_4]
.text$mn:00002E3E                 push    ecx
.text$mn:00002E3F                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00002E44                 add     esp, 8
.text$mn:00002E47                 mov     esp, ebp
.text$mn:00002E49                 pop     ebp
.text$mn:00002E4A                 retn    4
.text$mn:00002E4A ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00002E4A
.text$mn:00002E4A ; ---------------------------------------------------------------------------
.text$mn:00002E4D                 align 10h
.text$mn:00002E4D _text$mn        ends
.text$mn:00002E4D
.text$mn:00002E50 ; ===========================================================================
.text$mn:00002E50
.text$mn:00002E50 ; Segment type: Pure code
.text$mn:00002E50 ; Segment permissions: Read/Execute
.text$mn:00002E50 _text$mn        segment para public 'CODE' use32
.text$mn:00002E50                 assume cs:_text$mn
.text$mn:00002E50                 ;org 2E50h
.text$mn:00002E50 ; COMDAT (pick any)
.text$mn:00002E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E50
.text$mn:00002E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E50
.text$mn:00002E50 ; Attributes: bp-based frame
.text$mn:00002E50
.text$mn:00002E50 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00002E50                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00002E50 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00002E50                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00002E50
.text$mn:00002E50 var_4           = dword ptr -4
.text$mn:00002E50
.text$mn:00002E50                 push    ebp
.text$mn:00002E51                 mov     ebp, esp
.text$mn:00002E53                 push    ecx
.text$mn:00002E54                 mov     [ebp+var_4], ecx
.text$mn:00002E57                 mov     esp, ebp
.text$mn:00002E59                 pop     ebp
.text$mn:00002E5A                 retn    4
.text$mn:00002E5A ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00002E5A
.text$mn:00002E5A ; ---------------------------------------------------------------------------
.text$mn:00002E5D                 align 10h
.text$mn:00002E5D _text$mn        ends
.text$mn:00002E5D
.text$mn:00002E60 ; ===========================================================================
.text$mn:00002E60
.text$mn:00002E60 ; Segment type: Pure code
.text$mn:00002E60 ; Segment permissions: Read/Execute
.text$mn:00002E60 _text$mn        segment para public 'CODE' use32
.text$mn:00002E60                 assume cs:_text$mn
.text$mn:00002E60                 ;org 2E60h
.text$mn:00002E60 ; COMDAT (pick any)
.text$mn:00002E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E60
.text$mn:00002E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E60
.text$mn:00002E60 ; Attributes: bp-based frame
.text$mn:00002E60
.text$mn:00002E60 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00002E60                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00002E60 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00002E60                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00002E60
.text$mn:00002E60 arg_0           = dword ptr  8
.text$mn:00002E60 arg_4           = dword ptr  0Ch
.text$mn:00002E60
.text$mn:00002E60                 push    ebp
.text$mn:00002E61                 mov     ebp, esp
.text$mn:00002E63                 mov     eax, [ebp+arg_4]
.text$mn:00002E66                 push    eax
.text$mn:00002E67                 mov     ecx, [ebp+arg_0]
.text$mn:00002E6A                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00002E6F                 pop     ebp
.text$mn:00002E70                 retn
.text$mn:00002E70 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00002E70
.text$mn:00002E70 ; ---------------------------------------------------------------------------
.text$mn:00002E71                 align 4
.text$mn:00002E71 _text$mn        ends
.text$mn:00002E71
.text$mn:00002E74 ; ===========================================================================
.text$mn:00002E74
.text$mn:00002E74 ; Segment type: Pure code
.text$mn:00002E74 ; Segment permissions: Read/Execute
.text$mn:00002E74 _text$mn        segment para public 'CODE' use32
.text$mn:00002E74                 assume cs:_text$mn
.text$mn:00002E74                 ;org 2E74h
.text$mn:00002E74 ; COMDAT (pick any)
.text$mn:00002E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E74
.text$mn:00002E74 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E74
.text$mn:00002E74 ; Attributes: bp-based frame
.text$mn:00002E74
.text$mn:00002E74 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00002E74                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00002E74 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00002E74                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:00002E74                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:00002E74
.text$mn:00002E74 var_4           = dword ptr -4
.text$mn:00002E74
.text$mn:00002E74                 push    ebp
.text$mn:00002E75                 mov     ebp, esp
.text$mn:00002E77                 push    ecx
.text$mn:00002E78                 mov     [ebp+var_4], ecx
.text$mn:00002E7B                 mov     esp, ebp
.text$mn:00002E7D                 pop     ebp
.text$mn:00002E7E                 retn    4
.text$mn:00002E7E ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00002E7E
.text$mn:00002E7E ; ---------------------------------------------------------------------------
.text$mn:00002E81                 align 4
.text$mn:00002E81 _text$mn        ends
.text$mn:00002E81
.text$mn:00002E84 ; ===========================================================================
.text$mn:00002E84
.text$mn:00002E84 ; Segment type: Pure code
.text$mn:00002E84 ; Segment permissions: Read/Execute
.text$mn:00002E84 _text$mn        segment para public 'CODE' use32
.text$mn:00002E84                 assume cs:_text$mn
.text$mn:00002E84                 ;org 2E84h
.text$mn:00002E84 ; COMDAT (pick any)
.text$mn:00002E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E84
.text$mn:00002E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E84
.text$mn:00002E84 ; Attributes: bp-based frame
.text$mn:00002E84
.text$mn:00002E84 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00002E84                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00002E84 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00002E84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00002E84                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00002E84
.text$mn:00002E84 arg_0           = dword ptr  8
.text$mn:00002E84
.text$mn:00002E84                 push    ebp
.text$mn:00002E85                 mov     ebp, esp
.text$mn:00002E87                 mov     eax, [ebp+arg_0]
.text$mn:00002E8A                 pop     ebp
.text$mn:00002E8B                 retn
.text$mn:00002E8B ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00002E8B
.text$mn:00002E8B _text$mn        ends
.text$mn:00002E8B
.text$mn:00002E8C ; ===========================================================================
.text$mn:00002E8C
.text$mn:00002E8C ; Segment type: Pure code
.text$mn:00002E8C ; Segment permissions: Read/Execute
.text$mn:00002E8C _text$mn        segment para public 'CODE' use32
.text$mn:00002E8C                 assume cs:_text$mn
.text$mn:00002E8C                 ;org 2E8Ch
.text$mn:00002E8C ; COMDAT (pick any)
.text$mn:00002E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E8C
.text$mn:00002E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E8C
.text$mn:00002E8C ; Attributes: bp-based frame
.text$mn:00002E8C
.text$mn:00002E8C ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002E8C                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00002E8C ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00002E8C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00002E8C                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00002E8C
.text$mn:00002E8C arg_0           = dword ptr  8
.text$mn:00002E8C
.text$mn:00002E8C                 push    ebp
.text$mn:00002E8D                 mov     ebp, esp
.text$mn:00002E8F                 mov     eax, [ebp+arg_0]
.text$mn:00002E92                 pop     ebp
.text$mn:00002E93                 retn
.text$mn:00002E93 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00002E93
.text$mn:00002E93 _text$mn        ends
.text$mn:00002E93
.text$mn:00002E94 ; ===========================================================================
.text$mn:00002E94
.text$mn:00002E94 ; Segment type: Pure code
.text$mn:00002E94 ; Segment permissions: Read/Execute
.text$mn:00002E94 _text$mn        segment para public 'CODE' use32
.text$mn:00002E94                 assume cs:_text$mn
.text$mn:00002E94                 ;org 2E94h
.text$mn:00002E94 ; COMDAT (pick any)
.text$mn:00002E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E94
.text$mn:00002E94 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E94
.text$mn:00002E94 ; Attributes: bp-based frame
.text$mn:00002E94
.text$mn:00002E94 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00002E94                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00002E94 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00002E94                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:00002E94
.text$mn:00002E94 arg_0           = dword ptr  8
.text$mn:00002E94
.text$mn:00002E94                 push    ebp
.text$mn:00002E95                 mov     ebp, esp
.text$mn:00002E97                 mov     eax, [ebp+arg_0]
.text$mn:00002E9A                 pop     ebp
.text$mn:00002E9B                 retn
.text$mn:00002E9B ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00002E9B
.text$mn:00002E9B _text$mn        ends
.text$mn:00002E9B
.text$mn:00002E9C ; ===========================================================================
.text$mn:00002E9C
.text$mn:00002E9C ; Segment type: Pure code
.text$mn:00002E9C ; Segment permissions: Read/Execute
.text$mn:00002E9C _text$mn        segment para public 'CODE' use32
.text$mn:00002E9C                 assume cs:_text$mn
.text$mn:00002E9C                 ;org 2E9Ch
.text$mn:00002E9C ; COMDAT (pick any)
.text$mn:00002E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E9C
.text$mn:00002E9C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E9C
.text$mn:00002E9C ; Attributes: bp-based frame
.text$mn:00002E9C
.text$mn:00002E9C ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> && __cdecl std::forward<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
.text$mn:00002E9C                 public ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
.text$mn:00002E9C ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
.text$mn:00002E9C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+54p
.text$mn:00002E9C
.text$mn:00002E9C arg_0           = dword ptr  8
.text$mn:00002E9C
.text$mn:00002E9C                 push    ebp
.text$mn:00002E9D                 mov     ebp, esp
.text$mn:00002E9F                 mov     eax, [ebp+arg_0]
.text$mn:00002EA2                 pop     ebp
.text$mn:00002EA3                 retn
.text$mn:00002EA3 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z endp
.text$mn:00002EA3
.text$mn:00002EA3 _text$mn        ends
.text$mn:00002EA3
.text$mn:00002EA4 ; ===========================================================================
.text$mn:00002EA4
.text$mn:00002EA4 ; Segment type: Pure code
.text$mn:00002EA4 ; Segment permissions: Read/Execute
.text$mn:00002EA4 _text$mn        segment para public 'CODE' use32
.text$mn:00002EA4                 assume cs:_text$mn
.text$mn:00002EA4                 ;org 2EA4h
.text$mn:00002EA4 ; COMDAT (pick any)
.text$mn:00002EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002EA4
.text$mn:00002EA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002EA4
.text$mn:00002EA4 ; Attributes: bp-based frame
.text$mn:00002EA4
.text$mn:00002EA4 ; int __cdecl std::use_facet<std::ctype<wchar_t>>(std::locale *)
.text$mn:00002EA4                 public ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:00002EA4 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$mn:00002EA4                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+C6p
.text$mn:00002EA4
.text$mn:00002EA4 var_30          = byte ptr -30h
.text$mn:00002EA4 var_24          = dword ptr -24h
.text$mn:00002EA4 var_20          = byte ptr -20h
.text$mn:00002EA4 var_1C          = dword ptr -1Ch
.text$mn:00002EA4 var_18          = dword ptr -18h
.text$mn:00002EA4 var_14          = dword ptr -14h
.text$mn:00002EA4 var_10          = dword ptr -10h
.text$mn:00002EA4 var_C           = dword ptr -0Ch
.text$mn:00002EA4 var_4           = dword ptr -4
.text$mn:00002EA4 arg_0           = dword ptr  8
.text$mn:00002EA4
.text$mn:00002EA4                 push    ebp
.text$mn:00002EA5                 mov     ebp, esp
.text$mn:00002EA7                 push    0FFFFFFFFh
.text$mn:00002EA9                 push    offset __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$mn:00002EAE                 mov     eax, large fs:0
.text$mn:00002EB4                 push    eax
.text$mn:00002EB5                 sub     esp, 24h
.text$mn:00002EB8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002EBD                 xor     eax, ebp
.text$mn:00002EBF                 push    eax
.text$mn:00002EC0                 lea     eax, [ebp+var_C]
.text$mn:00002EC3                 mov     large fs:0, eax
.text$mn:00002EC9                 push    0               ; int
.text$mn:00002ECB                 lea     ecx, [ebp+var_20] ; this
.text$mn:00002ECE                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00002ED3                 mov     [ebp+var_4], 0
.text$mn:00002EDA                 mov     eax, ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:00002EDF                 mov     [ebp+var_10], eax
.text$mn:00002EE2                 mov     ecx, offset ?id@?$ctype@_W@std@@2V0locale@2@A ; std::locale::id std::ctype<wchar_t>::id
.text$mn:00002EE7                 call    ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator uint(void)
.text$mn:00002EEC                 mov     [ebp+var_1C], eax
.text$mn:00002EEF                 mov     ecx, [ebp+var_1C]
.text$mn:00002EF2                 push    ecx             ; unsigned int
.text$mn:00002EF3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002EF6                 call    ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet(uint)
.text$mn:00002EFB                 mov     [ebp+var_14], eax
.text$mn:00002EFE                 cmp     [ebp+var_14], 0
.text$mn:00002F02                 jz      short loc_2F06
.text$mn:00002F04                 jmp     short loc_2F74
.text$mn:00002F06 ; ---------------------------------------------------------------------------
.text$mn:00002F06
.text$mn:00002F06 loc_2F06:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5Ej
.text$mn:00002F06                 cmp     [ebp+var_10], 0
.text$mn:00002F0A                 jz      short loc_2F14
.text$mn:00002F0C                 mov     edx, [ebp+var_10]
.text$mn:00002F0F                 mov     [ebp+var_14], edx
.text$mn:00002F12                 jmp     short loc_2F74
.text$mn:00002F14 ; ---------------------------------------------------------------------------
.text$mn:00002F14
.text$mn:00002F14 loc_2F14:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+66j
.text$mn:00002F14                 mov     eax, [ebp+arg_0]
.text$mn:00002F17                 push    eax             ; std::locale *
.text$mn:00002F18                 lea     ecx, [ebp+var_10]
.text$mn:00002F1B                 push    ecx             ; int
.text$mn:00002F1C                 call    ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)
.text$mn:00002F21                 add     esp, 8
.text$mn:00002F24                 cmp     eax, 0FFFFFFFFh
.text$mn:00002F27                 jnz     short loc_2F46
.text$mn:00002F29                 push    offset ??_C@_08EPJLHIJG@bad?5cast?$AA@ ; "bad cast"
.text$mn:00002F2E                 lea     ecx, [ebp+var_30] ; this
.text$mn:00002F31                 call    ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast(char const *)
.text$mn:00002F36                 push    offset __TI2?AVbad_cast@std@@
.text$mn:00002F3B                 lea     edx, [ebp+var_30]
.text$mn:00002F3E                 push    edx
.text$mn:00002F3F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00002F44 ; ---------------------------------------------------------------------------
.text$mn:00002F44                 jmp     short loc_2F74
.text$mn:00002F46 ; ---------------------------------------------------------------------------
.text$mn:00002F46
.text$mn:00002F46 loc_2F46:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+83j
.text$mn:00002F46                 mov     eax, [ebp+var_10]
.text$mn:00002F49                 mov     [ebp+var_14], eax
.text$mn:00002F4C                 mov     ecx, [ebp+var_10]
.text$mn:00002F4F                 mov     ds:?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::locale::facet const * const std::_Facetptr<std::ctype<wchar_t>>::_Psave
.text$mn:00002F55                 mov     edx, [ebp+var_10]
.text$mn:00002F58                 mov     [ebp+var_18], edx
.text$mn:00002F5B                 mov     eax, [ebp+var_18]
.text$mn:00002F5E                 mov     edx, [eax]
.text$mn:00002F60                 mov     ecx, [ebp+var_18]
.text$mn:00002F63                 mov     eax, [edx+4]
.text$mn:00002F66                 call    eax
.text$mn:00002F68                 mov     ecx, [ebp+var_18]
.text$mn:00002F6B                 push    ecx             ; struct std::_Facet_base *
.text$mn:00002F6C                 call    ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register(std::_Facet_base *)
.text$mn:00002F71                 add     esp, 4
.text$mn:00002F74
.text$mn:00002F74 loc_2F74:                               ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+60j
.text$mn:00002F74                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+6Ej ...
.text$mn:00002F74                 mov     edx, [ebp+var_14]
.text$mn:00002F77                 mov     [ebp+var_24], edx
.text$mn:00002F7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002F81                 lea     ecx, [ebp+var_20] ; this
.text$mn:00002F84                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00002F89                 mov     eax, [ebp+var_24]
.text$mn:00002F8C                 mov     ecx, [ebp+var_C]
.text$mn:00002F8F                 mov     large fs:0, ecx
.text$mn:00002F96                 pop     ecx
.text$mn:00002F97                 mov     esp, ebp
.text$mn:00002F99                 pop     ebp
.text$mn:00002F9A                 retn
.text$mn:00002F9A ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$mn:00002F9A
.text$mn:00002F9A ; ---------------------------------------------------------------------------
.text$mn:00002F9B                 align 4
.text$mn:00002F9B _text$mn        ends
.text$mn:00002F9B
.text$x:00002F9C ; ===========================================================================
.text$x:00002F9C
.text$x:00002F9C ; Segment type: Pure code
.text$x:00002F9C ; Segment permissions: Read/Execute
.text$x:00002F9C _text$x         segment para public 'CODE' use32
.text$x:00002F9C                 assume cs:_text$x
.text$x:00002F9C                 ;org 2F9Ch
.text$x:00002F9C ; COMDAT (pick associative to section at 2EA4)
.text$x:00002F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F9C
.text$x:00002F9C ; =============== S U B R O U T I N E =======================================
.text$x:00002F9C
.text$x:00002F9C
.text$x:00002F9C __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 proc near
.text$x:00002F9C                                         ; DATA XREF: .xdata$x:0000990Co
.text$x:00002F9C                 lea     ecx, [ebp-20h]  ; this
.text$x:00002F9F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00002F9F __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0 endp
.text$x:00002F9F
.text$x:00002FA4
.text$x:00002FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00002FA4
.text$x:00002FA4
.text$x:00002FA4 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z proc near
.text$x:00002FA4                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+5o
.text$x:00002FA4
.text$x:00002FA4 arg_4           = dword ptr  8
.text$x:00002FA4
.text$x:00002FA4                 mov     edx, [esp+arg_4]
.text$x:00002FA8                 lea     eax, [edx+0Ch]
.text$x:00002FAB                 mov     ecx, [edx-28h]
.text$x:00002FAE                 xor     ecx, eax
.text$x:00002FB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FB5                 mov     eax, offset __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.text$x:00002FBA                 jmp     ___CxxFrameHandler3
.text$x:00002FBA __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z endp
.text$x:00002FBA
.text$x:00002FBA ; ---------------------------------------------------------------------------
.text$x:00002FBF                 align 10h
.text$x:00002FBF _text$x         ends
.text$x:00002FBF
.text$mn:00002FC0 ; ===========================================================================
.text$mn:00002FC0
.text$mn:00002FC0 ; Segment type: Pure code
.text$mn:00002FC0 ; Segment permissions: Read/Execute
.text$mn:00002FC0 _text$mn        segment para public 'CODE' use32
.text$mn:00002FC0                 assume cs:_text$mn
.text$mn:00002FC0                 ;org 2FC0h
.text$mn:00002FC0 ; COMDAT (pick any)
.text$mn:00002FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FC0
.text$mn:00002FC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FC0
.text$mn:00002FC0 ; Attributes: bp-based frame
.text$mn:00002FC0
.text$mn:00002FC0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00002FC0                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00002FC0 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00002FC0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+38p
.text$mn:00002FC0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+43p ...
.text$mn:00002FC0
.text$mn:00002FC0 var_10          = dword ptr -10h
.text$mn:00002FC0 var_C           = dword ptr -0Ch
.text$mn:00002FC0 var_4           = dword ptr -4
.text$mn:00002FC0
.text$mn:00002FC0                 push    ebp
.text$mn:00002FC1                 mov     ebp, esp
.text$mn:00002FC3                 push    0FFFFFFFFh
.text$mn:00002FC5                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00002FCA                 mov     eax, large fs:0
.text$mn:00002FD0                 push    eax
.text$mn:00002FD1                 push    ecx
.text$mn:00002FD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002FD7                 xor     eax, ebp
.text$mn:00002FD9                 push    eax
.text$mn:00002FDA                 lea     eax, [ebp+var_C]
.text$mn:00002FDD                 mov     large fs:0, eax
.text$mn:00002FE3                 mov     [ebp+var_10], ecx
.text$mn:00002FE6                 mov     ecx, [ebp+var_10]
.text$mn:00002FE9                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00002FEE                 mov     [ebp+var_4], 0
.text$mn:00002FF5                 mov     ecx, [ebp+var_10]
.text$mn:00002FF8                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00002FFD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003004                 mov     eax, [ebp+var_10]
.text$mn:00003007                 mov     ecx, [ebp+var_C]
.text$mn:0000300A                 mov     large fs:0, ecx
.text$mn:00003011                 pop     ecx
.text$mn:00003012                 mov     esp, ebp
.text$mn:00003014                 pop     ebp
.text$mn:00003015                 retn    4
.text$mn:00003015 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00003015
.text$mn:00003015 _text$mn        ends
.text$mn:00003015
.text$x:00003018 ; ===========================================================================
.text$x:00003018
.text$x:00003018 ; Segment type: Pure code
.text$x:00003018 ; Segment permissions: Read/Execute
.text$x:00003018 _text$x         segment para public 'CODE' use32
.text$x:00003018                 assume cs:_text$x
.text$x:00003018                 ;org 3018h
.text$x:00003018 ; COMDAT (pick associative to section at 2FC0)
.text$x:00003018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003018
.text$x:00003018 ; =============== S U B R O U T I N E =======================================
.text$x:00003018
.text$x:00003018
.text$x:00003018 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00003018                                         ; DATA XREF: .xdata$x:00008F54o
.text$x:00003018                 mov     ecx, [ebp-10h]
.text$x:0000301B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000301B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:0000301B
.text$x:00003020
.text$x:00003020 ; =============== S U B R O U T I N E =======================================
.text$x:00003020
.text$x:00003020
.text$x:00003020 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00003020                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00003020
.text$x:00003020 arg_4           = dword ptr  8
.text$x:00003020
.text$x:00003020                 mov     edx, [esp+arg_4]
.text$x:00003024                 lea     eax, [edx+0Ch]
.text$x:00003027                 mov     ecx, [edx-8]
.text$x:0000302A                 xor     ecx, eax
.text$x:0000302C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003031                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00003036                 jmp     ___CxxFrameHandler3
.text$x:00003036 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00003036
.text$x:00003036 ; ---------------------------------------------------------------------------
.text$x:0000303B                 align 4
.text$x:0000303B _text$x         ends
.text$x:0000303B
.text$mn:0000303C ; ===========================================================================
.text$mn:0000303C
.text$mn:0000303C ; Segment type: Pure code
.text$mn:0000303C ; Segment permissions: Read/Execute
.text$mn:0000303C _text$mn        segment para public 'CODE' use32
.text$mn:0000303C                 assume cs:_text$mn
.text$mn:0000303C                 ;org 303Ch
.text$mn:0000303C ; COMDAT (pick any)
.text$mn:0000303C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000303C
.text$mn:0000303C ; =============== S U B R O U T I N E =======================================
.text$mn:0000303C
.text$mn:0000303C ; Attributes: bp-based frame
.text$mn:0000303C
.text$mn:0000303C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:0000303C                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:0000303C ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:0000303C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p
.text$mn:0000303C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+34p
.text$mn:0000303C
.text$mn:0000303C var_10          = dword ptr -10h
.text$mn:0000303C var_C           = dword ptr -0Ch
.text$mn:0000303C var_4           = dword ptr -4
.text$mn:0000303C
.text$mn:0000303C                 push    ebp
.text$mn:0000303D                 mov     ebp, esp
.text$mn:0000303F                 push    0FFFFFFFFh
.text$mn:00003041                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00003046                 mov     eax, large fs:0
.text$mn:0000304C                 push    eax
.text$mn:0000304D                 push    ecx
.text$mn:0000304E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003053                 xor     eax, ebp
.text$mn:00003055                 push    eax
.text$mn:00003056                 lea     eax, [ebp+var_C]
.text$mn:00003059                 mov     large fs:0, eax
.text$mn:0000305F                 mov     [ebp+var_10], ecx
.text$mn:00003062                 mov     ecx, [ebp+var_10]
.text$mn:00003065                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:0000306A                 mov     [ebp+var_4], 0
.text$mn:00003071                 mov     ecx, [ebp+var_10]
.text$mn:00003074                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00003079                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003080                 mov     eax, [ebp+var_10]
.text$mn:00003083                 mov     ecx, [ebp+var_C]
.text$mn:00003086                 mov     large fs:0, ecx
.text$mn:0000308D                 pop     ecx
.text$mn:0000308E                 mov     esp, ebp
.text$mn:00003090                 pop     ebp
.text$mn:00003091                 retn    4
.text$mn:00003091 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00003091
.text$mn:00003091 _text$mn        ends
.text$mn:00003091
.text$x:00003094 ; ===========================================================================
.text$x:00003094
.text$x:00003094 ; Segment type: Pure code
.text$x:00003094 ; Segment permissions: Read/Execute
.text$x:00003094 _text$x         segment para public 'CODE' use32
.text$x:00003094                 assume cs:_text$x
.text$x:00003094                 ;org 3094h
.text$x:00003094 ; COMDAT (pick associative to section at 303C)
.text$x:00003094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003094
.text$x:00003094 ; =============== S U B R O U T I N E =======================================
.text$x:00003094
.text$x:00003094
.text$x:00003094 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00003094                                         ; DATA XREF: .xdata$x:00009990o
.text$x:00003094                 mov     ecx, [ebp-10h]
.text$x:00003097                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00003097 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00003097
.text$x:0000309C
.text$x:0000309C ; =============== S U B R O U T I N E =======================================
.text$x:0000309C
.text$x:0000309C
.text$x:0000309C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:0000309C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:0000309C
.text$x:0000309C arg_4           = dword ptr  8
.text$x:0000309C
.text$x:0000309C                 mov     edx, [esp+arg_4]
.text$x:000030A0                 lea     eax, [edx+0Ch]
.text$x:000030A3                 mov     ecx, [edx-8]
.text$x:000030A6                 xor     ecx, eax
.text$x:000030A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000030AD                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:000030B2                 jmp     ___CxxFrameHandler3
.text$x:000030B2 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:000030B2
.text$x:000030B2 ; ---------------------------------------------------------------------------
.text$x:000030B7                 align 4
.text$x:000030B7 _text$x         ends
.text$x:000030B7
.text$mn:000030B8 ; ===========================================================================
.text$mn:000030B8
.text$mn:000030B8 ; Segment type: Pure code
.text$mn:000030B8 ; Segment permissions: Read/Execute
.text$mn:000030B8 _text$mn        segment para public 'CODE' use32
.text$mn:000030B8                 assume cs:_text$mn
.text$mn:000030B8                 ;org 30B8h
.text$mn:000030B8 ; COMDAT (pick any)
.text$mn:000030B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000030B8
.text$mn:000030B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000030B8
.text$mn:000030B8 ; Attributes: bp-based frame
.text$mn:000030B8
.text$mn:000030B8 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000030B8                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000030B8 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000030B8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:000030B8
.text$mn:000030B8 var_10          = dword ptr -10h
.text$mn:000030B8 var_C           = dword ptr -0Ch
.text$mn:000030B8 var_4           = dword ptr -4
.text$mn:000030B8
.text$mn:000030B8                 push    ebp
.text$mn:000030B9                 mov     ebp, esp
.text$mn:000030BB                 push    0FFFFFFFFh
.text$mn:000030BD                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000030C2                 mov     eax, large fs:0
.text$mn:000030C8                 push    eax
.text$mn:000030C9                 push    ecx
.text$mn:000030CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000030CF                 xor     eax, ebp
.text$mn:000030D1                 push    eax
.text$mn:000030D2                 lea     eax, [ebp+var_C]
.text$mn:000030D5                 mov     large fs:0, eax
.text$mn:000030DB                 mov     [ebp+var_10], ecx
.text$mn:000030DE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000030E1                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000030E6                 mov     [ebp+var_4], 0
.text$mn:000030ED                 mov     eax, [ebp+var_10]
.text$mn:000030F0                 mov     dword ptr [eax+14h], 0
.text$mn:000030F7                 mov     ecx, [ebp+var_10]
.text$mn:000030FA                 mov     dword ptr [ecx+18h], 0
.text$mn:00003101                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003108                 mov     eax, [ebp+var_10]
.text$mn:0000310B                 mov     ecx, [ebp+var_C]
.text$mn:0000310E                 mov     large fs:0, ecx
.text$mn:00003115                 pop     ecx
.text$mn:00003116                 mov     esp, ebp
.text$mn:00003118                 pop     ebp
.text$mn:00003119                 retn
.text$mn:00003119 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00003119
.text$mn:00003119 ; ---------------------------------------------------------------------------
.text$mn:0000311A                 align 4
.text$mn:0000311A _text$mn        ends
.text$mn:0000311A
.text$x:0000311C ; ===========================================================================
.text$x:0000311C
.text$x:0000311C ; Segment type: Pure code
.text$x:0000311C ; Segment permissions: Read/Execute
.text$x:0000311C _text$x         segment para public 'CODE' use32
.text$x:0000311C                 assume cs:_text$x
.text$x:0000311C                 ;org 311Ch
.text$x:0000311C ; COMDAT (pick associative to section at 30B8)
.text$x:0000311C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000311C
.text$x:0000311C ; =============== S U B R O U T I N E =======================================
.text$x:0000311C
.text$x:0000311C
.text$x:0000311C __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:0000311C                                         ; DATA XREF: .xdata$x:00008EFCo
.text$x:0000311C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000311F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000311F __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000311F
.text$x:00003124
.text$x:00003124 ; =============== S U B R O U T I N E =======================================
.text$x:00003124
.text$x:00003124
.text$x:00003124 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00003124                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00003124
.text$x:00003124 arg_4           = dword ptr  8
.text$x:00003124
.text$x:00003124                 mov     edx, [esp+arg_4]
.text$x:00003128                 lea     eax, [edx+0Ch]
.text$x:0000312B                 mov     ecx, [edx-8]
.text$x:0000312E                 xor     ecx, eax
.text$x:00003130                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003135                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000313A                 jmp     ___CxxFrameHandler3
.text$x:0000313A __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000313A
.text$x:0000313A ; ---------------------------------------------------------------------------
.text$x:0000313F                 align 10h
.text$x:0000313F _text$x         ends
.text$x:0000313F
.text$mn:00003140 ; ===========================================================================
.text$mn:00003140
.text$mn:00003140 ; Segment type: Pure code
.text$mn:00003140 ; Segment permissions: Read/Execute
.text$mn:00003140 _text$mn        segment para public 'CODE' use32
.text$mn:00003140                 assume cs:_text$mn
.text$mn:00003140                 ;org 3140h
.text$mn:00003140 ; COMDAT (pick any)
.text$mn:00003140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003140
.text$mn:00003140 ; =============== S U B R O U T I N E =======================================
.text$mn:00003140
.text$mn:00003140 ; Attributes: bp-based frame
.text$mn:00003140
.text$mn:00003140 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00003140                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00003140 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00003140                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00003140
.text$mn:00003140 var_10          = dword ptr -10h
.text$mn:00003140 var_C           = dword ptr -0Ch
.text$mn:00003140 var_4           = dword ptr -4
.text$mn:00003140
.text$mn:00003140                 push    ebp
.text$mn:00003141                 mov     ebp, esp
.text$mn:00003143                 push    0FFFFFFFFh
.text$mn:00003145                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000314A                 mov     eax, large fs:0
.text$mn:00003150                 push    eax
.text$mn:00003151                 push    ecx
.text$mn:00003152                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003157                 xor     eax, ebp
.text$mn:00003159                 push    eax
.text$mn:0000315A                 lea     eax, [ebp+var_C]
.text$mn:0000315D                 mov     large fs:0, eax
.text$mn:00003163                 mov     [ebp+var_10], ecx
.text$mn:00003166                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003169                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000316E                 mov     [ebp+var_4], 0
.text$mn:00003175                 mov     eax, [ebp+var_10]
.text$mn:00003178                 mov     dword ptr [eax+14h], 0
.text$mn:0000317F                 mov     ecx, [ebp+var_10]
.text$mn:00003182                 mov     dword ptr [ecx+18h], 0
.text$mn:00003189                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003190                 mov     eax, [ebp+var_10]
.text$mn:00003193                 mov     ecx, [ebp+var_C]
.text$mn:00003196                 mov     large fs:0, ecx
.text$mn:0000319D                 pop     ecx
.text$mn:0000319E                 mov     esp, ebp
.text$mn:000031A0                 pop     ebp
.text$mn:000031A1                 retn
.text$mn:000031A1 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000031A1
.text$mn:000031A1 ; ---------------------------------------------------------------------------
.text$mn:000031A2                 align 4
.text$mn:000031A2 _text$mn        ends
.text$mn:000031A2
.text$x:000031A4 ; ===========================================================================
.text$x:000031A4
.text$x:000031A4 ; Segment type: Pure code
.text$x:000031A4 ; Segment permissions: Read/Execute
.text$x:000031A4 _text$x         segment para public 'CODE' use32
.text$x:000031A4                 assume cs:_text$x
.text$x:000031A4                 ;org 31A4h
.text$x:000031A4 ; COMDAT (pick associative to section at 3140)
.text$x:000031A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000031A4
.text$x:000031A4 ; =============== S U B R O U T I N E =======================================
.text$x:000031A4
.text$x:000031A4
.text$x:000031A4 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000031A4                                         ; DATA XREF: .xdata$x:00009938o
.text$x:000031A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000031A7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000031A7 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000031A7
.text$x:000031AC
.text$x:000031AC ; =============== S U B R O U T I N E =======================================
.text$x:000031AC
.text$x:000031AC
.text$x:000031AC __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000031AC                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000031AC
.text$x:000031AC arg_4           = dword ptr  8
.text$x:000031AC
.text$x:000031AC                 mov     edx, [esp+arg_4]
.text$x:000031B0                 lea     eax, [edx+0Ch]
.text$x:000031B3                 mov     ecx, [edx-8]
.text$x:000031B6                 xor     ecx, eax
.text$x:000031B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031BD                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000031C2                 jmp     ___CxxFrameHandler3
.text$x:000031C2 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000031C2
.text$x:000031C2 ; ---------------------------------------------------------------------------
.text$x:000031C7                 align 4
.text$x:000031C7 _text$x         ends
.text$x:000031C7
.text$mn:000031C8 ; ===========================================================================
.text$mn:000031C8
.text$mn:000031C8 ; Segment type: Pure code
.text$mn:000031C8 ; Segment permissions: Read/Execute
.text$mn:000031C8 _text$mn        segment para public 'CODE' use32
.text$mn:000031C8                 assume cs:_text$mn
.text$mn:000031C8                 ;org 31C8h
.text$mn:000031C8 ; COMDAT (pick any)
.text$mn:000031C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000031C8
.text$mn:000031C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000031C8
.text$mn:000031C8 ; Attributes: bp-based frame
.text$mn:000031C8
.text$mn:000031C8 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(class std::allocator<char> const &)
.text$mn:000031C8                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000031C8 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:000031C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+1Dp
.text$mn:000031C8
.text$mn:000031C8 var_4           = dword ptr -4
.text$mn:000031C8 arg_0           = dword ptr  8
.text$mn:000031C8
.text$mn:000031C8                 push    ebp
.text$mn:000031C9                 mov     ebp, esp
.text$mn:000031CB                 push    ecx
.text$mn:000031CC                 mov     [ebp+var_4], ecx
.text$mn:000031CF                 mov     eax, [ebp+arg_0]
.text$mn:000031D2                 push    eax
.text$mn:000031D3                 mov     ecx, [ebp+var_4]
.text$mn:000031D6                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:000031DB                 mov     eax, [ebp+var_4]
.text$mn:000031DE                 mov     esp, ebp
.text$mn:000031E0                 pop     ebp
.text$mn:000031E1                 retn    4
.text$mn:000031E1 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000031E1
.text$mn:000031E1 _text$mn        ends
.text$mn:000031E1
.text$mn:000031E4 ; ===========================================================================
.text$mn:000031E4
.text$mn:000031E4 ; Segment type: Pure code
.text$mn:000031E4 ; Segment permissions: Read/Execute
.text$mn:000031E4 _text$mn        segment para public 'CODE' use32
.text$mn:000031E4                 assume cs:_text$mn
.text$mn:000031E4                 ;org 31E4h
.text$mn:000031E4 ; COMDAT (pick any)
.text$mn:000031E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000031E4
.text$mn:000031E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000031E4
.text$mn:000031E4 ; Attributes: bp-based frame
.text$mn:000031E4
.text$mn:000031E4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:000031E4                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:000031E4 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:000031E4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:000031E4
.text$mn:000031E4 var_4           = dword ptr -4
.text$mn:000031E4
.text$mn:000031E4                 push    ebp
.text$mn:000031E5                 mov     ebp, esp
.text$mn:000031E7                 push    ecx
.text$mn:000031E8                 mov     [ebp+var_4], ecx
.text$mn:000031EB                 mov     ecx, [ebp+var_4]
.text$mn:000031EE                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000031F3                 mov     eax, [ebp+var_4]
.text$mn:000031F6                 mov     esp, ebp
.text$mn:000031F8                 pop     ebp
.text$mn:000031F9                 retn
.text$mn:000031F9 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:000031F9
.text$mn:000031F9 ; ---------------------------------------------------------------------------
.text$mn:000031FA                 align 4
.text$mn:000031FA _text$mn        ends
.text$mn:000031FA
.text$mn:000031FC ; ===========================================================================
.text$mn:000031FC
.text$mn:000031FC ; Segment type: Pure code
.text$mn:000031FC ; Segment permissions: Read/Execute
.text$mn:000031FC _text$mn        segment para public 'CODE' use32
.text$mn:000031FC                 assume cs:_text$mn
.text$mn:000031FC                 ;org 31FCh
.text$mn:000031FC ; COMDAT (pick any)
.text$mn:000031FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000031FC
.text$mn:000031FC ; =============== S U B R O U T I N E =======================================
.text$mn:000031FC
.text$mn:000031FC ; Attributes: bp-based frame
.text$mn:000031FC
.text$mn:000031FC ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:000031FC                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:000031FC ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:000031FC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:000031FC
.text$mn:000031FC var_4           = dword ptr -4
.text$mn:000031FC
.text$mn:000031FC                 push    ebp
.text$mn:000031FD                 mov     ebp, esp
.text$mn:000031FF                 push    ecx
.text$mn:00003200                 mov     [ebp+var_4], ecx
.text$mn:00003203                 mov     ecx, [ebp+var_4]
.text$mn:00003206                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000320B                 mov     eax, [ebp+var_4]
.text$mn:0000320E                 mov     esp, ebp
.text$mn:00003210                 pop     ebp
.text$mn:00003211                 retn
.text$mn:00003211 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00003211
.text$mn:00003211 ; ---------------------------------------------------------------------------
.text$mn:00003212                 align 4
.text$mn:00003212 _text$mn        ends
.text$mn:00003212
.text$mn:00003214 ; ===========================================================================
.text$mn:00003214
.text$mn:00003214 ; Segment type: Pure code
.text$mn:00003214 ; Segment permissions: Read/Execute
.text$mn:00003214 _text$mn        segment para public 'CODE' use32
.text$mn:00003214                 assume cs:_text$mn
.text$mn:00003214                 ;org 3214h
.text$mn:00003214 ; COMDAT (pick any)
.text$mn:00003214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003214
.text$mn:00003214 ; =============== S U B R O U T I N E =======================================
.text$mn:00003214
.text$mn:00003214 ; Attributes: bp-based frame
.text$mn:00003214
.text$mn:00003214 ; public: __thiscall std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00003214                 public ??0?$_Yarn@D@std@@QAE@XZ
.text$mn:00003214 ??0?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+3Fp
.text$mn:00003214                                         ; std::_Locinfo::_Locinfo(char const *)+4Ep ...
.text$mn:00003214
.text$mn:00003214 var_4           = dword ptr -4
.text$mn:00003214
.text$mn:00003214                 push    ebp
.text$mn:00003215                 mov     ebp, esp
.text$mn:00003217                 push    ecx
.text$mn:00003218                 mov     [ebp+var_4], ecx
.text$mn:0000321B                 mov     eax, [ebp+var_4]
.text$mn:0000321E                 mov     dword ptr [eax], 0
.text$mn:00003224                 mov     ecx, [ebp+var_4]
.text$mn:00003227                 mov     byte ptr [ecx+4], 0
.text$mn:0000322B                 mov     eax, [ebp+var_4]
.text$mn:0000322E                 mov     esp, ebp
.text$mn:00003230                 pop     ebp
.text$mn:00003231                 retn
.text$mn:00003231 ??0?$_Yarn@D@std@@QAE@XZ endp
.text$mn:00003231
.text$mn:00003231 ; ---------------------------------------------------------------------------
.text$mn:00003232                 align 4
.text$mn:00003232 _text$mn        ends
.text$mn:00003232
.text$mn:00003234 ; ===========================================================================
.text$mn:00003234
.text$mn:00003234 ; Segment type: Pure code
.text$mn:00003234 ; Segment permissions: Read/Execute
.text$mn:00003234 _text$mn        segment para public 'CODE' use32
.text$mn:00003234                 assume cs:_text$mn
.text$mn:00003234                 ;org 3234h
.text$mn:00003234 ; COMDAT (pick any)
.text$mn:00003234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003234
.text$mn:00003234 ; =============== S U B R O U T I N E =======================================
.text$mn:00003234
.text$mn:00003234 ; Attributes: bp-based frame
.text$mn:00003234
.text$mn:00003234 ; public: __thiscall std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00003234                 public ??0?$_Yarn@_W@std@@QAE@XZ
.text$mn:00003234 ??0?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+5Dp
.text$mn:00003234                                         ; std::_Locinfo::_Locinfo(char const *)+6Cp
.text$mn:00003234
.text$mn:00003234 var_4           = dword ptr -4
.text$mn:00003234
.text$mn:00003234                 push    ebp
.text$mn:00003235                 mov     ebp, esp
.text$mn:00003237                 push    ecx
.text$mn:00003238                 mov     [ebp+var_4], ecx
.text$mn:0000323B                 mov     eax, [ebp+var_4]
.text$mn:0000323E                 mov     dword ptr [eax], 0
.text$mn:00003244                 xor     ecx, ecx
.text$mn:00003246                 mov     edx, [ebp+var_4]
.text$mn:00003249                 mov     [edx+4], cx
.text$mn:0000324D                 mov     eax, [ebp+var_4]
.text$mn:00003250                 mov     esp, ebp
.text$mn:00003252                 pop     ebp
.text$mn:00003253                 retn
.text$mn:00003253 ??0?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:00003253
.text$mn:00003253 _text$mn        ends
.text$mn:00003253
.text$mn:00003254 ; ===========================================================================
.text$mn:00003254
.text$mn:00003254 ; Segment type: Pure code
.text$mn:00003254 ; Segment permissions: Read/Execute
.text$mn:00003254 _text$mn        segment para public 'CODE' use32
.text$mn:00003254                 assume cs:_text$mn
.text$mn:00003254                 ;org 3254h
.text$mn:00003254 ; COMDAT (pick any)
.text$mn:00003254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003254
.text$mn:00003254 ; =============== S U B R O U T I N E =======================================
.text$mn:00003254
.text$mn:00003254 ; Attributes: bp-based frame
.text$mn:00003254
.text$mn:00003254 ; public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)
.text$mn:00003254                 public ??0?$allocator@D@std@@QAE@ABV01@@Z
.text$mn:00003254 ??0?$allocator@D@std@@QAE@ABV01@@Z proc near
.text$mn:00003254                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(std::allocator<char> const &)+Ep
.text$mn:00003254                                         ; std::allocator<char>::select_on_container_copy_construction(void)+Ep
.text$mn:00003254
.text$mn:00003254 var_4           = dword ptr -4
.text$mn:00003254
.text$mn:00003254                 push    ebp
.text$mn:00003255                 mov     ebp, esp
.text$mn:00003257                 push    ecx
.text$mn:00003258                 mov     [ebp+var_4], ecx
.text$mn:0000325B                 mov     eax, [ebp+var_4]
.text$mn:0000325E                 mov     esp, ebp
.text$mn:00003260                 pop     ebp
.text$mn:00003261                 retn    4
.text$mn:00003261 ??0?$allocator@D@std@@QAE@ABV01@@Z endp
.text$mn:00003261
.text$mn:00003261 _text$mn        ends
.text$mn:00003261
.text$mn:00003264 ; ===========================================================================
.text$mn:00003264
.text$mn:00003264 ; Segment type: Pure code
.text$mn:00003264 ; Segment permissions: Read/Execute
.text$mn:00003264 _text$mn        segment para public 'CODE' use32
.text$mn:00003264                 assume cs:_text$mn
.text$mn:00003264                 ;org 3264h
.text$mn:00003264 ; COMDAT (pick any)
.text$mn:00003264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003264
.text$mn:00003264 ; =============== S U B R O U T I N E =======================================
.text$mn:00003264
.text$mn:00003264 ; Attributes: bp-based frame
.text$mn:00003264
.text$mn:00003264 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00003264                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00003264 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00003264                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00003264
.text$mn:00003264 var_4           = dword ptr -4
.text$mn:00003264
.text$mn:00003264                 push    ebp
.text$mn:00003265                 mov     ebp, esp
.text$mn:00003267                 push    ecx
.text$mn:00003268                 mov     [ebp+var_4], ecx
.text$mn:0000326B                 mov     eax, [ebp+var_4]
.text$mn:0000326E                 mov     esp, ebp
.text$mn:00003270                 pop     ebp
.text$mn:00003271                 retn
.text$mn:00003271 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00003271
.text$mn:00003271 ; ---------------------------------------------------------------------------
.text$mn:00003272                 align 4
.text$mn:00003272 _text$mn        ends
.text$mn:00003272
.text$mn:00003274 ; ===========================================================================
.text$mn:00003274
.text$mn:00003274 ; Segment type: Pure code
.text$mn:00003274 ; Segment permissions: Read/Execute
.text$mn:00003274 _text$mn        segment para public 'CODE' use32
.text$mn:00003274                 assume cs:_text$mn
.text$mn:00003274                 ;org 3274h
.text$mn:00003274 ; COMDAT (pick any)
.text$mn:00003274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003274
.text$mn:00003274 ; =============== S U B R O U T I N E =======================================
.text$mn:00003274
.text$mn:00003274 ; Attributes: bp-based frame
.text$mn:00003274
.text$mn:00003274 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00003274                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00003274 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00003274                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:00003274                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00003274
.text$mn:00003274 var_4           = dword ptr -4
.text$mn:00003274
.text$mn:00003274                 push    ebp
.text$mn:00003275                 mov     ebp, esp
.text$mn:00003277                 push    ecx
.text$mn:00003278                 mov     [ebp+var_4], ecx
.text$mn:0000327B                 mov     eax, [ebp+var_4]
.text$mn:0000327E                 mov     esp, ebp
.text$mn:00003280                 pop     ebp
.text$mn:00003281                 retn
.text$mn:00003281 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00003281
.text$mn:00003281 ; ---------------------------------------------------------------------------
.text$mn:00003282                 align 4
.text$mn:00003282 _text$mn        ends
.text$mn:00003282
.text$mn:00003284 ; ===========================================================================
.text$mn:00003284
.text$mn:00003284 ; Segment type: Pure code
.text$mn:00003284 ; Segment permissions: Read/Execute
.text$mn:00003284 _text$mn        segment para public 'CODE' use32
.text$mn:00003284                 assume cs:_text$mn
.text$mn:00003284                 ;org 3284h
.text$mn:00003284 ; COMDAT (pick any)
.text$mn:00003284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003284
.text$mn:00003284 ; =============== S U B R O U T I N E =======================================
.text$mn:00003284
.text$mn:00003284 ; Attributes: bp-based frame
.text$mn:00003284
.text$mn:00003284 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003284                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00003284 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00003284                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00003284
.text$mn:00003284 var_4           = dword ptr -4
.text$mn:00003284
.text$mn:00003284                 push    ebp
.text$mn:00003285                 mov     ebp, esp
.text$mn:00003287                 push    ecx
.text$mn:00003288                 mov     [ebp+var_4], ecx
.text$mn:0000328B                 mov     eax, [ebp+var_4]
.text$mn:0000328E                 mov     esp, ebp
.text$mn:00003290                 pop     ebp
.text$mn:00003291                 retn
.text$mn:00003291 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00003291
.text$mn:00003291 ; ---------------------------------------------------------------------------
.text$mn:00003292                 align 4
.text$mn:00003292 _text$mn        ends
.text$mn:00003292
.text$mn:00003294 ; ===========================================================================
.text$mn:00003294
.text$mn:00003294 ; Segment type: Pure code
.text$mn:00003294 ; Segment permissions: Read/Execute
.text$mn:00003294 _text$mn        segment para public 'CODE' use32
.text$mn:00003294                 assume cs:_text$mn
.text$mn:00003294                 ;org 3294h
.text$mn:00003294 ; COMDAT (pick any)
.text$mn:00003294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003294
.text$mn:00003294 ; =============== S U B R O U T I N E =======================================
.text$mn:00003294
.text$mn:00003294 ; Attributes: bp-based frame
.text$mn:00003294
.text$mn:00003294 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00003294                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:00003294 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00003294                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+8Ap
.text$mn:00003294
.text$mn:00003294 var_14          = dword ptr -14h
.text$mn:00003294 var_D           = byte ptr -0Dh
.text$mn:00003294 var_C           = dword ptr -0Ch
.text$mn:00003294 var_4           = dword ptr -4
.text$mn:00003294 arg_0           = dword ptr  8
.text$mn:00003294
.text$mn:00003294                 push    ebp
.text$mn:00003295                 mov     ebp, esp
.text$mn:00003297                 push    0FFFFFFFFh
.text$mn:00003299                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$mn:0000329E                 mov     eax, large fs:0
.text$mn:000032A4                 push    eax
.text$mn:000032A5                 sub     esp, 8
.text$mn:000032A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000032AD                 xor     eax, ebp
.text$mn:000032AF                 push    eax
.text$mn:000032B0                 lea     eax, [ebp+var_C]
.text$mn:000032B3                 mov     large fs:0, eax
.text$mn:000032B9                 mov     [ebp+var_14], ecx
.text$mn:000032BC                 lea     eax, [ebp+var_D]
.text$mn:000032BF                 push    eax
.text$mn:000032C0                 mov     ecx, [ebp+arg_0]
.text$mn:000032C3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000032C8                 push    eax
.text$mn:000032C9                 mov     ecx, [ebp+var_14]
.text$mn:000032CC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:000032D1                 mov     [ebp+var_4], 0
.text$mn:000032D8                 push    0               ; Size
.text$mn:000032DA                 push    0               ; char
.text$mn:000032DC                 mov     ecx, [ebp+var_14]
.text$mn:000032DF                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000032E4                 mov     ecx, [ebp+arg_0]
.text$mn:000032E7                 push    ecx
.text$mn:000032E8                 call    ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)
.text$mn:000032ED                 add     esp, 4
.text$mn:000032F0                 push    eax
.text$mn:000032F1                 mov     ecx, [ebp+var_14]
.text$mn:000032F4                 call    ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:000032F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003300                 mov     eax, [ebp+var_14]
.text$mn:00003303                 mov     ecx, [ebp+var_C]
.text$mn:00003306                 mov     large fs:0, ecx
.text$mn:0000330D                 pop     ecx
.text$mn:0000330E                 mov     esp, ebp
.text$mn:00003310                 pop     ebp
.text$mn:00003311                 retn    4
.text$mn:00003311 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00003311
.text$mn:00003311 _text$mn        ends
.text$mn:00003311
.text$x:00003314 ; ===========================================================================
.text$x:00003314
.text$x:00003314 ; Segment type: Pure code
.text$x:00003314 ; Segment permissions: Read/Execute
.text$x:00003314 _text$x         segment para public 'CODE' use32
.text$x:00003314                 assume cs:_text$x
.text$x:00003314                 ;org 3314h
.text$x:00003314 ; COMDAT (pick associative to section at 3294)
.text$x:00003314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003314
.text$x:00003314 ; =============== S U B R O U T I N E =======================================
.text$x:00003314
.text$x:00003314
.text$x:00003314 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00003314                                         ; DATA XREF: .xdata$x:00009004o
.text$x:00003314                 mov     ecx, [ebp-14h]
.text$x:00003317                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00003317 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00003317
.text$x:0000331C
.text$x:0000331C ; =============== S U B R O U T I N E =======================================
.text$x:0000331C
.text$x:0000331C
.text$x:0000331C __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:0000331C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+5o
.text$x:0000331C
.text$x:0000331C arg_4           = dword ptr  8
.text$x:0000331C
.text$x:0000331C                 mov     edx, [esp+arg_4]
.text$x:00003320                 lea     eax, [edx+0Ch]
.text$x:00003323                 mov     ecx, [edx-0Ch]
.text$x:00003326                 xor     ecx, eax
.text$x:00003328                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000332D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.text$x:00003332                 jmp     ___CxxFrameHandler3
.text$x:00003332 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z endp
.text$x:00003332
.text$x:00003332 ; ---------------------------------------------------------------------------
.text$x:00003337                 align 4
.text$x:00003337 _text$x         ends
.text$x:00003337
.text$mn:00003338 ; ===========================================================================
.text$mn:00003338
.text$mn:00003338 ; Segment type: Pure code
.text$mn:00003338 ; Segment permissions: Read/Execute
.text$mn:00003338 _text$mn        segment para public 'CODE' use32
.text$mn:00003338                 assume cs:_text$mn
.text$mn:00003338                 ;org 3338h
.text$mn:00003338 ; COMDAT (pick any)
.text$mn:00003338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003338
.text$mn:00003338 ; =============== S U B R O U T I N E =======================================
.text$mn:00003338
.text$mn:00003338 ; Attributes: bp-based frame
.text$mn:00003338
.text$mn:00003338 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00003338                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00003338 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00003338                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+37p
.text$mn:00003338
.text$mn:00003338 var_14          = dword ptr -14h
.text$mn:00003338 var_E           = byte ptr -0Eh
.text$mn:00003338 var_D           = byte ptr -0Dh
.text$mn:00003338 var_C           = dword ptr -0Ch
.text$mn:00003338 var_4           = dword ptr -4
.text$mn:00003338 arg_0           = dword ptr  8
.text$mn:00003338
.text$mn:00003338                 push    ebp
.text$mn:00003339                 mov     ebp, esp
.text$mn:0000333B                 push    0FFFFFFFFh
.text$mn:0000333D                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$mn:00003342                 mov     eax, large fs:0
.text$mn:00003348                 push    eax
.text$mn:00003349                 sub     esp, 8
.text$mn:0000334C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003351                 xor     eax, ebp
.text$mn:00003353                 push    eax
.text$mn:00003354                 lea     eax, [ebp+var_C]
.text$mn:00003357                 mov     large fs:0, eax
.text$mn:0000335D                 mov     [ebp+var_14], ecx
.text$mn:00003360                 lea     eax, [ebp+var_D]
.text$mn:00003363                 push    eax
.text$mn:00003364                 lea     ecx, [ebp+var_E]
.text$mn:00003367                 push    ecx
.text$mn:00003368                 mov     ecx, [ebp+arg_0]
.text$mn:0000336B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00003370                 mov     ecx, eax
.text$mn:00003372                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)
.text$mn:00003377                 push    eax
.text$mn:00003378                 mov     ecx, [ebp+var_14]
.text$mn:0000337B                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00003380                 mov     [ebp+var_4], 0
.text$mn:00003387                 push    0               ; Size
.text$mn:00003389                 push    0               ; char
.text$mn:0000338B                 mov     ecx, [ebp+var_14]
.text$mn:0000338E                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003393                 mov     edx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00003399                 push    edx
.text$mn:0000339A                 push    0
.text$mn:0000339C                 mov     eax, [ebp+arg_0]
.text$mn:0000339F                 push    eax
.text$mn:000033A0                 mov     ecx, [ebp+var_14]
.text$mn:000033A3                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:000033A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000033AF                 mov     eax, [ebp+var_14]
.text$mn:000033B2                 mov     ecx, [ebp+var_C]
.text$mn:000033B5                 mov     large fs:0, ecx
.text$mn:000033BC                 pop     ecx
.text$mn:000033BD                 mov     esp, ebp
.text$mn:000033BF                 pop     ebp
.text$mn:000033C0                 retn    4
.text$mn:000033C0 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$mn:000033C0
.text$mn:000033C0 ; ---------------------------------------------------------------------------
.text$mn:000033C3                 align 4
.text$mn:000033C3 _text$mn        ends
.text$mn:000033C3
.text$x:000033C4 ; ===========================================================================
.text$x:000033C4
.text$x:000033C4 ; Segment type: Pure code
.text$x:000033C4 ; Segment permissions: Read/Execute
.text$x:000033C4 _text$x         segment para public 'CODE' use32
.text$x:000033C4                 assume cs:_text$x
.text$x:000033C4                 ;org 33C4h
.text$x:000033C4 ; COMDAT (pick associative to section at 3338)
.text$x:000033C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000033C4
.text$x:000033C4 ; =============== S U B R O U T I N E =======================================
.text$x:000033C4
.text$x:000033C4
.text$x:000033C4 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000033C4                                         ; DATA XREF: .xdata$x:00008FACo
.text$x:000033C4                 mov     ecx, [ebp-14h]
.text$x:000033C7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000033C7 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:000033C7
.text$x:000033CC
.text$x:000033CC ; =============== S U B R O U T I N E =======================================
.text$x:000033CC
.text$x:000033CC
.text$x:000033CC __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text$x:000033CC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:000033CC
.text$x:000033CC arg_4           = dword ptr  8
.text$x:000033CC
.text$x:000033CC                 mov     edx, [esp+arg_4]
.text$x:000033D0                 lea     eax, [edx+0Ch]
.text$x:000033D3                 mov     ecx, [edx-0Ch]
.text$x:000033D6                 xor     ecx, eax
.text$x:000033D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033DD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text$x:000033E2                 jmp     ___CxxFrameHandler3
.text$x:000033E2 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text$x:000033E2
.text$x:000033E2 ; ---------------------------------------------------------------------------
.text$x:000033E7                 align 4
.text$x:000033E7 _text$x         ends
.text$x:000033E7
.text$mn:000033E8 ; ===========================================================================
.text$mn:000033E8
.text$mn:000033E8 ; Segment type: Pure code
.text$mn:000033E8 ; Segment permissions: Read/Execute
.text$mn:000033E8 _text$mn        segment para public 'CODE' use32
.text$mn:000033E8                 assume cs:_text$mn
.text$mn:000033E8                 ;org 33E8h
.text$mn:000033E8 ; COMDAT (pick any)
.text$mn:000033E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033E8
.text$mn:000033E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000033E8
.text$mn:000033E8 ; Attributes: bp-based frame
.text$mn:000033E8
.text$mn:000033E8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000033E8                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000033E8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000033E8                                         ; CODE XREF: std::system_error::system_error(std::error_code,char const *)+32p
.text$mn:000033E8                                         ; std::_Generic_error_category::message(int)+5Ap ...
.text$mn:000033E8
.text$mn:000033E8 var_14          = dword ptr -14h
.text$mn:000033E8 var_D           = byte ptr -0Dh
.text$mn:000033E8 var_C           = dword ptr -0Ch
.text$mn:000033E8 var_4           = dword ptr -4
.text$mn:000033E8 Str             = dword ptr  8
.text$mn:000033E8
.text$mn:000033E8                 push    ebp
.text$mn:000033E9                 mov     ebp, esp
.text$mn:000033EB                 push    0FFFFFFFFh
.text$mn:000033ED                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000033F2                 mov     eax, large fs:0
.text$mn:000033F8                 push    eax
.text$mn:000033F9                 sub     esp, 8
.text$mn:000033FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003401                 xor     eax, ebp
.text$mn:00003403                 push    eax
.text$mn:00003404                 lea     eax, [ebp+var_C]
.text$mn:00003407                 mov     large fs:0, eax
.text$mn:0000340D                 mov     [ebp+var_14], ecx
.text$mn:00003410                 lea     ecx, [ebp+var_D]
.text$mn:00003413                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00003418                 push    eax
.text$mn:00003419                 mov     ecx, [ebp+var_14]
.text$mn:0000341C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00003421                 mov     [ebp+var_4], 0
.text$mn:00003428                 push    0               ; Size
.text$mn:0000342A                 push    0               ; char
.text$mn:0000342C                 mov     ecx, [ebp+var_14]
.text$mn:0000342F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003434                 mov     eax, [ebp+Str]
.text$mn:00003437                 push    eax             ; Str
.text$mn:00003438                 mov     ecx, [ebp+var_14]
.text$mn:0000343B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00003440                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003447                 mov     eax, [ebp+var_14]
.text$mn:0000344A                 mov     ecx, [ebp+var_C]
.text$mn:0000344D                 mov     large fs:0, ecx
.text$mn:00003454                 pop     ecx
.text$mn:00003455                 mov     esp, ebp
.text$mn:00003457                 pop     ebp
.text$mn:00003458                 retn    4
.text$mn:00003458 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00003458
.text$mn:00003458 ; ---------------------------------------------------------------------------
.text$mn:0000345B                 align 4
.text$mn:0000345B _text$mn        ends
.text$mn:0000345B
.text$x:0000345C ; ===========================================================================
.text$x:0000345C
.text$x:0000345C ; Segment type: Pure code
.text$x:0000345C ; Segment permissions: Read/Execute
.text$x:0000345C _text$x         segment para public 'CODE' use32
.text$x:0000345C                 assume cs:_text$x
.text$x:0000345C                 ;org 345Ch
.text$x:0000345C ; COMDAT (pick associative to section at 33E8)
.text$x:0000345C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000345C
.text$x:0000345C ; =============== S U B R O U T I N E =======================================
.text$x:0000345C
.text$x:0000345C
.text$x:0000345C __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:0000345C                                         ; DATA XREF: .xdata$x:00008FD8o
.text$x:0000345C                 mov     ecx, [ebp-14h]
.text$x:0000345F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000345F __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:0000345F
.text$x:00003464
.text$x:00003464 ; =============== S U B R O U T I N E =======================================
.text$x:00003464
.text$x:00003464
.text$x:00003464 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00003464                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00003464
.text$x:00003464 arg_4           = dword ptr  8
.text$x:00003464
.text$x:00003464                 mov     edx, [esp+arg_4]
.text$x:00003468                 lea     eax, [edx+0Ch]
.text$x:0000346B                 mov     ecx, [edx-0Ch]
.text$x:0000346E                 xor     ecx, eax
.text$x:00003470                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003475                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:0000347A                 jmp     ___CxxFrameHandler3
.text$x:0000347A __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:0000347A
.text$x:0000347A ; ---------------------------------------------------------------------------
.text$x:0000347F                 align 10h
.text$x:0000347F _text$x         ends
.text$x:0000347F
.text$mn:00003480 ; ===========================================================================
.text$mn:00003480
.text$mn:00003480 ; Segment type: Pure code
.text$mn:00003480 ; Segment permissions: Read/Execute
.text$mn:00003480 _text$mn        segment para public 'CODE' use32
.text$mn:00003480                 assume cs:_text$mn
.text$mn:00003480                 ;org 3480h
.text$mn:00003480 ; COMDAT (pick any)
.text$mn:00003480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003480
.text$mn:00003480 ; =============== S U B R O U T I N E =======================================
.text$mn:00003480
.text$mn:00003480 ; Attributes: bp-based frame
.text$mn:00003480
.text$mn:00003480 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00003480                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00003480 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00003480                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+12Ap
.text$mn:00003480
.text$mn:00003480 var_14          = dword ptr -14h
.text$mn:00003480 var_D           = byte ptr -0Dh
.text$mn:00003480 var_C           = dword ptr -0Ch
.text$mn:00003480 var_4           = dword ptr -4
.text$mn:00003480 Str             = dword ptr  8
.text$mn:00003480
.text$mn:00003480                 push    ebp
.text$mn:00003481                 mov     ebp, esp
.text$mn:00003483                 push    0FFFFFFFFh
.text$mn:00003485                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000348A                 mov     eax, large fs:0
.text$mn:00003490                 push    eax
.text$mn:00003491                 sub     esp, 8
.text$mn:00003494                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003499                 xor     eax, ebp
.text$mn:0000349B                 push    eax
.text$mn:0000349C                 lea     eax, [ebp+var_C]
.text$mn:0000349F                 mov     large fs:0, eax
.text$mn:000034A5                 mov     [ebp+var_14], ecx
.text$mn:000034A8                 lea     ecx, [ebp+var_D]
.text$mn:000034AB                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000034B0                 push    eax
.text$mn:000034B1                 mov     ecx, [ebp+var_14]
.text$mn:000034B4                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000034B9                 mov     [ebp+var_4], 0
.text$mn:000034C0                 push    0
.text$mn:000034C2                 push    0
.text$mn:000034C4                 mov     ecx, [ebp+var_14]
.text$mn:000034C7                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000034CC                 mov     eax, [ebp+Str]
.text$mn:000034CF                 push    eax             ; Str
.text$mn:000034D0                 mov     ecx, [ebp+var_14]
.text$mn:000034D3                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000034D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000034DF                 mov     eax, [ebp+var_14]
.text$mn:000034E2                 mov     ecx, [ebp+var_C]
.text$mn:000034E5                 mov     large fs:0, ecx
.text$mn:000034EC                 pop     ecx
.text$mn:000034ED                 mov     esp, ebp
.text$mn:000034EF                 pop     ebp
.text$mn:000034F0                 retn    4
.text$mn:000034F0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000034F0
.text$mn:000034F0 ; ---------------------------------------------------------------------------
.text$mn:000034F3                 align 4
.text$mn:000034F3 _text$mn        ends
.text$mn:000034F3
.text$x:000034F4 ; ===========================================================================
.text$x:000034F4
.text$x:000034F4 ; Segment type: Pure code
.text$x:000034F4 ; Segment permissions: Read/Execute
.text$x:000034F4 _text$x         segment para public 'CODE' use32
.text$x:000034F4                 assume cs:_text$x
.text$x:000034F4                 ;org 34F4h
.text$x:000034F4 ; COMDAT (pick associative to section at 3480)
.text$x:000034F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000034F4
.text$x:000034F4 ; =============== S U B R O U T I N E =======================================
.text$x:000034F4
.text$x:000034F4
.text$x:000034F4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000034F4                                         ; DATA XREF: .xdata$x:00009A14o
.text$x:000034F4                 mov     ecx, [ebp-14h]
.text$x:000034F7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000034F7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000034F7
.text$x:000034FC
.text$x:000034FC ; =============== S U B R O U T I N E =======================================
.text$x:000034FC
.text$x:000034FC
.text$x:000034FC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000034FC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000034FC
.text$x:000034FC arg_4           = dword ptr  8
.text$x:000034FC
.text$x:000034FC                 mov     edx, [esp+arg_4]
.text$x:00003500                 lea     eax, [edx+0Ch]
.text$x:00003503                 mov     ecx, [edx-0Ch]
.text$x:00003506                 xor     ecx, eax
.text$x:00003508                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000350D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:00003512                 jmp     ___CxxFrameHandler3
.text$x:00003512 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:00003512
.text$x:00003512 ; ---------------------------------------------------------------------------
.text$x:00003517                 align 4
.text$x:00003517 _text$x         ends
.text$x:00003517
.text$mn:00003518 ; ===========================================================================
.text$mn:00003518
.text$mn:00003518 ; Segment type: Pure code
.text$mn:00003518 ; Segment permissions: Read/Execute
.text$mn:00003518 _text$mn        segment para public 'CODE' use32
.text$mn:00003518                 assume cs:_text$mn
.text$mn:00003518                 ;org 3518h
.text$mn:00003518 ; COMDAT (pick any)
.text$mn:00003518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003518
.text$mn:00003518 ; =============== S U B R O U T I N E =======================================
.text$mn:00003518
.text$mn:00003518 ; Attributes: bp-based frame
.text$mn:00003518
.text$mn:00003518 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00003518                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00003518 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00003518                                         ; CODE XREF: TiXmlAttribute::TiXmlAttribute(void)+44p
.text$mn:00003518                                         ; TiXmlAttribute::TiXmlAttribute(void)+53p ...
.text$mn:00003518
.text$mn:00003518 var_14          = dword ptr -14h
.text$mn:00003518 var_D           = byte ptr -0Dh
.text$mn:00003518 var_C           = dword ptr -0Ch
.text$mn:00003518 var_4           = dword ptr -4
.text$mn:00003518
.text$mn:00003518                 push    ebp
.text$mn:00003519                 mov     ebp, esp
.text$mn:0000351B                 push    0FFFFFFFFh
.text$mn:0000351D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00003522                 mov     eax, large fs:0
.text$mn:00003528                 push    eax
.text$mn:00003529                 sub     esp, 8
.text$mn:0000352C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003531                 xor     eax, ebp
.text$mn:00003533                 push    eax
.text$mn:00003534                 lea     eax, [ebp+var_C]
.text$mn:00003537                 mov     large fs:0, eax
.text$mn:0000353D                 mov     [ebp+var_14], ecx
.text$mn:00003540                 lea     ecx, [ebp+var_D]
.text$mn:00003543                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003548                 push    eax
.text$mn:00003549                 mov     ecx, [ebp+var_14]
.text$mn:0000354C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00003551                 mov     [ebp+var_4], 0
.text$mn:00003558                 push    0
.text$mn:0000355A                 push    0
.text$mn:0000355C                 mov     ecx, [ebp+var_14]
.text$mn:0000355F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003564                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000356B                 mov     eax, [ebp+var_14]
.text$mn:0000356E                 mov     ecx, [ebp+var_C]
.text$mn:00003571                 mov     large fs:0, ecx
.text$mn:00003578                 pop     ecx
.text$mn:00003579                 mov     esp, ebp
.text$mn:0000357B                 pop     ebp
.text$mn:0000357C                 retn
.text$mn:0000357C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:0000357C
.text$mn:0000357C ; ---------------------------------------------------------------------------
.text$mn:0000357D                 align 10h
.text$mn:0000357D _text$mn        ends
.text$mn:0000357D
.text$x:00003580 ; ===========================================================================
.text$x:00003580
.text$x:00003580 ; Segment type: Pure code
.text$x:00003580 ; Segment permissions: Read/Execute
.text$x:00003580 _text$x         segment para public 'CODE' use32
.text$x:00003580                 assume cs:_text$x
.text$x:00003580                 ;org 3580h
.text$x:00003580 ; COMDAT (pick associative to section at 3518)
.text$x:00003580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003580
.text$x:00003580 ; =============== S U B R O U T I N E =======================================
.text$x:00003580
.text$x:00003580
.text$x:00003580 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00003580                                         ; DATA XREF: .xdata$x:000099E8o
.text$x:00003580                 mov     ecx, [ebp-14h]
.text$x:00003583                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00003583 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00003583
.text$x:00003588
.text$x:00003588 ; =============== S U B R O U T I N E =======================================
.text$x:00003588
.text$x:00003588
.text$x:00003588 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00003588                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00003588
.text$x:00003588 arg_4           = dword ptr  8
.text$x:00003588
.text$x:00003588                 mov     edx, [esp+arg_4]
.text$x:0000358C                 lea     eax, [edx+0Ch]
.text$x:0000358F                 mov     ecx, [edx-0Ch]
.text$x:00003592                 xor     ecx, eax
.text$x:00003594                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003599                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:0000359E                 jmp     ___CxxFrameHandler3
.text$x:0000359E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:0000359E
.text$x:0000359E ; ---------------------------------------------------------------------------
.text$x:000035A3                 align 4
.text$x:000035A3 _text$x         ends
.text$x:000035A3
.text$mn:000035A4 ; ===========================================================================
.text$mn:000035A4
.text$mn:000035A4 ; Segment type: Pure code
.text$mn:000035A4 ; Segment permissions: Read/Execute
.text$mn:000035A4 _text$mn        segment para public 'CODE' use32
.text$mn:000035A4                 assume cs:_text$mn
.text$mn:000035A4                 ;org 35A4h
.text$mn:000035A4 ; COMDAT (pick any)
.text$mn:000035A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035A4
.text$mn:000035A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035A4
.text$mn:000035A4 ; Attributes: bp-based frame
.text$mn:000035A4
.text$mn:000035A4 ; public: __thiscall std::ctype<wchar_t>::ctype<wchar_t>(class std::_Locinfo const &, unsigned int)
.text$mn:000035A4                 public ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:000035A4 ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$mn:000035A4                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+A2p
.text$mn:000035A4
.text$mn:000035A4 var_10          = dword ptr -10h
.text$mn:000035A4 var_C           = dword ptr -0Ch
.text$mn:000035A4 var_4           = dword ptr -4
.text$mn:000035A4 arg_0           = dword ptr  8
.text$mn:000035A4 arg_4           = dword ptr  0Ch
.text$mn:000035A4
.text$mn:000035A4                 push    ebp
.text$mn:000035A5                 mov     ebp, esp
.text$mn:000035A7                 push    0FFFFFFFFh
.text$mn:000035A9                 push    offset __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$mn:000035AE                 mov     eax, large fs:0
.text$mn:000035B4                 push    eax
.text$mn:000035B5                 push    ecx
.text$mn:000035B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000035BB                 xor     eax, ebp
.text$mn:000035BD                 push    eax
.text$mn:000035BE                 lea     eax, [ebp+var_C]
.text$mn:000035C1                 mov     large fs:0, eax
.text$mn:000035C7                 mov     [ebp+var_10], ecx
.text$mn:000035CA                 mov     eax, [ebp+arg_4]
.text$mn:000035CD                 push    eax             ; unsigned int
.text$mn:000035CE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000035D1                 call    ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base(uint)
.text$mn:000035D6                 mov     [ebp+var_4], 0
.text$mn:000035DD                 mov     ecx, [ebp+var_10]
.text$mn:000035E0                 mov     dword ptr [ecx], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:000035E6                 mov     edx, [ebp+arg_0]
.text$mn:000035E9                 push    edx
.text$mn:000035EA                 mov     ecx, [ebp+var_10]
.text$mn:000035ED                 call    ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<wchar_t>::_Init(std::_Locinfo const &)
.text$mn:000035F2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000035F9                 mov     eax, [ebp+var_10]
.text$mn:000035FC                 mov     ecx, [ebp+var_C]
.text$mn:000035FF                 mov     large fs:0, ecx
.text$mn:00003606                 pop     ecx
.text$mn:00003607                 mov     esp, ebp
.text$mn:00003609                 pop     ebp
.text$mn:0000360A                 retn    8
.text$mn:0000360A ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$mn:0000360A
.text$mn:0000360A ; ---------------------------------------------------------------------------
.text$mn:0000360D                 align 10h
.text$mn:0000360D _text$mn        ends
.text$mn:0000360D
.text$x:00003610 ; ===========================================================================
.text$x:00003610
.text$x:00003610 ; Segment type: Pure code
.text$x:00003610 ; Segment permissions: Read/Execute
.text$x:00003610 _text$x         segment para public 'CODE' use32
.text$x:00003610                 assume cs:_text$x
.text$x:00003610                 ;org 3610h
.text$x:00003610 ; COMDAT (pick associative to section at 35A4)
.text$x:00003610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003610
.text$x:00003610 ; =============== S U B R O U T I N E =======================================
.text$x:00003610
.text$x:00003610
.text$x:00003610 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 proc near
.text$x:00003610                                         ; DATA XREF: .xdata$x:0000932Co
.text$x:00003610                 mov     ecx, [ebp-10h]  ; this
.text$x:00003613                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:00003613 __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0 endp
.text$x:00003613
.text$x:00003618
.text$x:00003618 ; =============== S U B R O U T I N E =======================================
.text$x:00003618
.text$x:00003618
.text$x:00003618 __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z proc near
.text$x:00003618                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+5o
.text$x:00003618
.text$x:00003618 arg_4           = dword ptr  8
.text$x:00003618
.text$x:00003618                 mov     edx, [esp+arg_4]
.text$x:0000361C                 lea     eax, [edx+0Ch]
.text$x:0000361F                 mov     ecx, [edx-8]
.text$x:00003622                 xor     ecx, eax
.text$x:00003624                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003629                 mov     eax, offset __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.text$x:0000362E                 jmp     ___CxxFrameHandler3
.text$x:0000362E __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z endp
.text$x:0000362E
.text$x:0000362E ; ---------------------------------------------------------------------------
.text$x:00003633                 align 4
.text$x:00003633 _text$x         ends
.text$x:00003633
.text$mn:00003634 ; ===========================================================================
.text$mn:00003634
.text$mn:00003634 ; Segment type: Pure code
.text$mn:00003634 ; Segment permissions: Read/Execute
.text$mn:00003634 _text$mn        segment para public 'CODE' use32
.text$mn:00003634                 assume cs:_text$mn
.text$mn:00003634                 ;org 3634h
.text$mn:00003634 ; COMDAT (pick any)
.text$mn:00003634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003634
.text$mn:00003634 ; =============== S U B R O U T I N E =======================================
.text$mn:00003634
.text$mn:00003634 ; Attributes: bp-based frame
.text$mn:00003634
.text$mn:00003634 ; public: __thiscall TiXmlAttribute::TiXmlAttribute(void)
.text$mn:00003634                 public ??0TiXmlAttribute@@QAE@XZ
.text$mn:00003634 ??0TiXmlAttribute@@QAE@XZ proc near     ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+347p
.text$mn:00003634                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+169p ...
.text$mn:00003634
.text$mn:00003634 var_10          = dword ptr -10h
.text$mn:00003634 var_C           = dword ptr -0Ch
.text$mn:00003634 var_4           = dword ptr -4
.text$mn:00003634
.text$mn:00003634                 push    ebp
.text$mn:00003635                 mov     ebp, esp
.text$mn:00003637                 push    0FFFFFFFFh
.text$mn:00003639                 push    offset __ehhandler$??0TiXmlAttribute@@QAE@XZ
.text$mn:0000363E                 mov     eax, large fs:0
.text$mn:00003644                 push    eax
.text$mn:00003645                 push    ecx
.text$mn:00003646                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000364B                 xor     eax, ebp
.text$mn:0000364D                 push    eax
.text$mn:0000364E                 lea     eax, [ebp+var_C]
.text$mn:00003651                 mov     large fs:0, eax
.text$mn:00003657                 mov     [ebp+var_10], ecx
.text$mn:0000365A                 mov     ecx, [ebp+var_10]
.text$mn:0000365D                 call    ??0TiXmlBase@@QAE@XZ ; TiXmlBase::TiXmlBase(void)
.text$mn:00003662                 mov     [ebp+var_4], 0
.text$mn:00003669                 mov     eax, [ebp+var_10]
.text$mn:0000366C                 mov     dword ptr [eax], offset ??_7TiXmlAttribute@@6B@ ; const TiXmlAttribute::`vftable'
.text$mn:00003672                 mov     ecx, [ebp+var_10]
.text$mn:00003675                 add     ecx, 10h
.text$mn:00003678                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000367D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003681                 mov     ecx, [ebp+var_10]
.text$mn:00003684                 add     ecx, 2Ch ; ','
.text$mn:00003687                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000368C                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003690                 mov     ecx, [ebp+var_10]
.text$mn:00003693                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000369A                 mov     edx, [ebp+var_10]
.text$mn:0000369D                 mov     dword ptr [edx+4Ch], 0
.text$mn:000036A4                 mov     eax, [ebp+var_10]
.text$mn:000036A7                 mov     dword ptr [eax+48h], 0
.text$mn:000036AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000036B5                 mov     eax, [ebp+var_10]
.text$mn:000036B8                 mov     ecx, [ebp+var_C]
.text$mn:000036BB                 mov     large fs:0, ecx
.text$mn:000036C2                 pop     ecx
.text$mn:000036C3                 mov     esp, ebp
.text$mn:000036C5                 pop     ebp
.text$mn:000036C6                 retn
.text$mn:000036C6 ??0TiXmlAttribute@@QAE@XZ endp
.text$mn:000036C6
.text$mn:000036C6 ; ---------------------------------------------------------------------------
.text$mn:000036C7                 align 4
.text$mn:000036C7 _text$mn        ends
.text$mn:000036C7
.text$x:000036C8 ; ===========================================================================
.text$x:000036C8
.text$x:000036C8 ; Segment type: Pure code
.text$x:000036C8 ; Segment permissions: Read/Execute
.text$x:000036C8 _text$x         segment para public 'CODE' use32
.text$x:000036C8                 assume cs:_text$x
.text$x:000036C8                 ;org 36C8h
.text$x:000036C8 ; COMDAT (pick associative to section at 3634)
.text$x:000036C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000036C8
.text$x:000036C8 ; =============== S U B R O U T I N E =======================================
.text$x:000036C8
.text$x:000036C8
.text$x:000036C8 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0 proc near
.text$x:000036C8                                         ; DATA XREF: .xdata$x:00009C04o
.text$x:000036C8                 mov     ecx, [ebp-10h]  ; this
.text$x:000036CB                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:000036CB __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0 endp
.text$x:000036CB
.text$x:000036D0
.text$x:000036D0 ; =============== S U B R O U T I N E =======================================
.text$x:000036D0
.text$x:000036D0
.text$x:000036D0 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1 proc near
.text$x:000036D0                                         ; DATA XREF: .xdata$x:00009C0Co
.text$x:000036D0                 mov     ecx, [ebp-10h]
.text$x:000036D3                 add     ecx, 10h
.text$x:000036D6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000036D6 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1 endp
.text$x:000036D6
.text$x:000036DB
.text$x:000036DB ; =============== S U B R O U T I N E =======================================
.text$x:000036DB
.text$x:000036DB
.text$x:000036DB __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2 proc near
.text$x:000036DB                                         ; DATA XREF: .xdata$x:00009C14o
.text$x:000036DB                 mov     ecx, [ebp-10h]
.text$x:000036DE                 add     ecx, 2Ch ; ','
.text$x:000036E1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000036E1 __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2 endp
.text$x:000036E1
.text$x:000036E6
.text$x:000036E6 ; =============== S U B R O U T I N E =======================================
.text$x:000036E6
.text$x:000036E6
.text$x:000036E6 __ehhandler$??0TiXmlAttribute@@QAE@XZ proc near
.text$x:000036E6                                         ; DATA XREF: TiXmlAttribute::TiXmlAttribute(void)+5o
.text$x:000036E6
.text$x:000036E6 arg_4           = dword ptr  8
.text$x:000036E6
.text$x:000036E6                 mov     edx, [esp+arg_4]
.text$x:000036EA                 lea     eax, [edx+0Ch]
.text$x:000036ED                 mov     ecx, [edx-8]
.text$x:000036F0                 xor     ecx, eax
.text$x:000036F2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036F7                 mov     eax, offset __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ
.text$x:000036FC                 jmp     ___CxxFrameHandler3
.text$x:000036FC __ehhandler$??0TiXmlAttribute@@QAE@XZ endp
.text$x:000036FC
.text$x:000036FC ; ---------------------------------------------------------------------------
.text$x:00003701                 align 4
.text$x:00003701 _text$x         ends
.text$x:00003701
.text$mn:00003704 ; ===========================================================================
.text$mn:00003704
.text$mn:00003704 ; Segment type: Pure code
.text$mn:00003704 ; Segment permissions: Read/Execute
.text$mn:00003704 _text$mn        segment para public 'CODE' use32
.text$mn:00003704                 assume cs:_text$mn
.text$mn:00003704                 ;org 3704h
.text$mn:00003704 ; COMDAT (pick any)
.text$mn:00003704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003704
.text$mn:00003704 ; =============== S U B R O U T I N E =======================================
.text$mn:00003704
.text$mn:00003704 ; Attributes: bp-based frame
.text$mn:00003704
.text$mn:00003704 ; public: __thiscall TiXmlBase::TiXmlBase(void)
.text$mn:00003704                 public ??0TiXmlBase@@QAE@XZ
.text$mn:00003704 ??0TiXmlBase@@QAE@XZ proc near          ; CODE XREF: TiXmlAttribute::TiXmlAttribute(void)+29p
.text$mn:00003704
.text$mn:00003704 var_4           = dword ptr -4
.text$mn:00003704
.text$mn:00003704                 push    ebp
.text$mn:00003705                 mov     ebp, esp
.text$mn:00003707                 push    ecx
.text$mn:00003708                 mov     [ebp+var_4], ecx
.text$mn:0000370B                 mov     eax, [ebp+var_4]
.text$mn:0000370E                 mov     dword ptr [eax], offset ??_7TiXmlBase@@6B@ ; const TiXmlBase::`vftable'
.text$mn:00003714                 mov     ecx, [ebp+var_4]
.text$mn:00003717                 add     ecx, 4
.text$mn:0000371A                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:0000371F                 mov     eax, [ebp+var_4]
.text$mn:00003722                 mov     esp, ebp
.text$mn:00003724                 pop     ebp
.text$mn:00003725                 retn
.text$mn:00003725 ??0TiXmlBase@@QAE@XZ endp
.text$mn:00003725
.text$mn:00003725 ; ---------------------------------------------------------------------------
.text$mn:00003726                 align 4
.text$mn:00003726 _text$mn        ends
.text$mn:00003726
.text$mn:00003728 ; ===========================================================================
.text$mn:00003728
.text$mn:00003728 ; Segment type: Pure code
.text$mn:00003728 ; Segment permissions: Read/Execute
.text$mn:00003728 _text$mn        segment para public 'CODE' use32
.text$mn:00003728                 assume cs:_text$mn
.text$mn:00003728                 ;org 3728h
.text$mn:00003728 ; COMDAT (pick any)
.text$mn:00003728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003728
.text$mn:00003728 ; =============== S U B R O U T I N E =======================================
.text$mn:00003728
.text$mn:00003728 ; Attributes: bp-based frame
.text$mn:00003728
.text$mn:00003728 ; _DWORD __thiscall TiXmlComment::TiXmlComment(TiXmlComment *__hidden this)
.text$mn:00003728                 public ??0TiXmlComment@@QAE@XZ
.text$mn:00003728 ??0TiXmlComment@@QAE@XZ proc near       ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1A5p
.text$mn:00003728
.text$mn:00003728 var_10          = dword ptr -10h
.text$mn:00003728 var_C           = dword ptr -0Ch
.text$mn:00003728 var_4           = dword ptr -4
.text$mn:00003728
.text$mn:00003728                 push    ebp
.text$mn:00003729                 mov     ebp, esp
.text$mn:0000372B                 push    0FFFFFFFFh
.text$mn:0000372D                 push    offset __ehhandler$??0TiXmlComment@@QAE@XZ
.text$mn:00003732                 mov     eax, large fs:0
.text$mn:00003738                 push    eax
.text$mn:00003739                 push    ecx
.text$mn:0000373A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000373F                 xor     eax, ebp
.text$mn:00003741                 push    eax
.text$mn:00003742                 lea     eax, [ebp+var_C]
.text$mn:00003745                 mov     large fs:0, eax
.text$mn:0000374B                 mov     [ebp+var_10], ecx
.text$mn:0000374E                 push    2
.text$mn:00003750                 mov     ecx, [ebp+var_10]
.text$mn:00003753                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00003758                 mov     [ebp+var_4], 0
.text$mn:0000375F                 mov     eax, [ebp+var_10]
.text$mn:00003762                 mov     dword ptr [eax], offset ??_7TiXmlComment@@6B@ ; const TiXmlComment::`vftable'
.text$mn:00003768                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000376F                 mov     eax, [ebp+var_10]
.text$mn:00003772                 mov     ecx, [ebp+var_C]
.text$mn:00003775                 mov     large fs:0, ecx
.text$mn:0000377C                 pop     ecx
.text$mn:0000377D                 mov     esp, ebp
.text$mn:0000377F                 pop     ebp
.text$mn:00003780                 retn
.text$mn:00003780 ??0TiXmlComment@@QAE@XZ endp
.text$mn:00003780
.text$mn:00003780 ; ---------------------------------------------------------------------------
.text$mn:00003781                 align 4
.text$mn:00003781 _text$mn        ends
.text$mn:00003781
.text$x:00003784 ; ===========================================================================
.text$x:00003784
.text$x:00003784 ; Segment type: Pure code
.text$x:00003784 ; Segment permissions: Read/Execute
.text$x:00003784 _text$x         segment para public 'CODE' use32
.text$x:00003784                 assume cs:_text$x
.text$x:00003784                 ;org 3784h
.text$x:00003784 ; COMDAT (pick associative to section at 3728)
.text$x:00003784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003784
.text$x:00003784 ; =============== S U B R O U T I N E =======================================
.text$x:00003784
.text$x:00003784
.text$x:00003784 __unwindfunclet$??0TiXmlComment@@QAE@XZ$0 proc near
.text$x:00003784                                         ; DATA XREF: .xdata$x:00009C7Co
.text$x:00003784                 mov     ecx, [ebp-10h]  ; this
.text$x:00003787                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00003787 __unwindfunclet$??0TiXmlComment@@QAE@XZ$0 endp
.text$x:00003787
.text$x:0000378C
.text$x:0000378C ; =============== S U B R O U T I N E =======================================
.text$x:0000378C
.text$x:0000378C
.text$x:0000378C __ehhandler$??0TiXmlComment@@QAE@XZ proc near
.text$x:0000378C                                         ; DATA XREF: TiXmlComment::TiXmlComment(void)+5o
.text$x:0000378C
.text$x:0000378C arg_4           = dword ptr  8
.text$x:0000378C
.text$x:0000378C                 mov     edx, [esp+arg_4]
.text$x:00003790                 lea     eax, [edx+0Ch]
.text$x:00003793                 mov     ecx, [edx-8]
.text$x:00003796                 xor     ecx, eax
.text$x:00003798                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000379D                 mov     eax, offset __ehfuncinfo$??0TiXmlComment@@QAE@XZ
.text$x:000037A2                 jmp     ___CxxFrameHandler3
.text$x:000037A2 __ehhandler$??0TiXmlComment@@QAE@XZ endp
.text$x:000037A2
.text$x:000037A2 ; ---------------------------------------------------------------------------
.text$x:000037A7                 align 4
.text$x:000037A7 _text$x         ends
.text$x:000037A7
.text$mn:000037A8 ; ===========================================================================
.text$mn:000037A8
.text$mn:000037A8 ; Segment type: Pure code
.text$mn:000037A8 ; Segment permissions: Read/Execute
.text$mn:000037A8 _text$mn        segment para public 'CODE' use32
.text$mn:000037A8                 assume cs:_text$mn
.text$mn:000037A8                 ;org 37A8h
.text$mn:000037A8 ; COMDAT (pick any)
.text$mn:000037A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037A8
.text$mn:000037A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037A8
.text$mn:000037A8 ; Attributes: bp-based frame
.text$mn:000037A8
.text$mn:000037A8 ; public: __thiscall TiXmlCursor::TiXmlCursor(void)
.text$mn:000037A8                 public ??0TiXmlCursor@@QAE@XZ
.text$mn:000037A8 ??0TiXmlCursor@@QAE@XZ proc near        ; CODE XREF: TiXmlBase::TiXmlBase(void)+16p
.text$mn:000037A8                                         ; TiXmlParsingData::TiXmlParsingData(wchar_t const *,int,int,int)+Ap
.text$mn:000037A8
.text$mn:000037A8 var_4           = dword ptr -4
.text$mn:000037A8
.text$mn:000037A8                 push    ebp
.text$mn:000037A9                 mov     ebp, esp
.text$mn:000037AB                 push    ecx
.text$mn:000037AC                 mov     [ebp+var_4], ecx
.text$mn:000037AF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000037B2                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:000037B7                 mov     eax, [ebp+var_4]
.text$mn:000037BA                 mov     esp, ebp
.text$mn:000037BC                 pop     ebp
.text$mn:000037BD                 retn
.text$mn:000037BD ??0TiXmlCursor@@QAE@XZ endp
.text$mn:000037BD
.text$mn:000037BD ; ---------------------------------------------------------------------------
.text$mn:000037BE                 align 10h
.text$mn:000037BE _text$mn        ends
.text$mn:000037BE
.text$mn:000037C0 ; ===========================================================================
.text$mn:000037C0
.text$mn:000037C0 ; Segment type: Pure code
.text$mn:000037C0 ; Segment permissions: Read/Execute
.text$mn:000037C0 _text$mn        segment para public 'CODE' use32
.text$mn:000037C0                 assume cs:_text$mn
.text$mn:000037C0                 ;org 37C0h
.text$mn:000037C0 ; COMDAT (pick any)
.text$mn:000037C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037C0
.text$mn:000037C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000037C0
.text$mn:000037C0 ; Attributes: bp-based frame
.text$mn:000037C0
.text$mn:000037C0 ; _DWORD __thiscall TiXmlDeclaration::TiXmlDeclaration(TiXmlDeclaration *__hidden this)
.text$mn:000037C0                 public ??0TiXmlDeclaration@@QAE@XZ
.text$mn:000037C0 ??0TiXmlDeclaration@@QAE@XZ proc near   ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+D8p
.text$mn:000037C0
.text$mn:000037C0 var_10          = dword ptr -10h
.text$mn:000037C0 var_C           = dword ptr -0Ch
.text$mn:000037C0 var_4           = dword ptr -4
.text$mn:000037C0
.text$mn:000037C0                 push    ebp
.text$mn:000037C1                 mov     ebp, esp
.text$mn:000037C3                 push    0FFFFFFFFh
.text$mn:000037C5                 push    offset __ehhandler$??0TiXmlDeclaration@@QAE@XZ
.text$mn:000037CA                 mov     eax, large fs:0
.text$mn:000037D0                 push    eax
.text$mn:000037D1                 push    ecx
.text$mn:000037D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000037D7                 xor     eax, ebp
.text$mn:000037D9                 push    eax
.text$mn:000037DA                 lea     eax, [ebp+var_C]
.text$mn:000037DD                 mov     large fs:0, eax
.text$mn:000037E3                 mov     [ebp+var_10], ecx
.text$mn:000037E6                 push    5
.text$mn:000037E8                 mov     ecx, [ebp+var_10]
.text$mn:000037EB                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:000037F0                 mov     [ebp+var_4], 0
.text$mn:000037F7                 mov     eax, [ebp+var_10]
.text$mn:000037FA                 mov     dword ptr [eax], offset ??_7TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`vftable'
.text$mn:00003800                 mov     ecx, [ebp+var_10]
.text$mn:00003803                 add     ecx, 44h ; 'D'
.text$mn:00003806                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000380B                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000380F                 mov     ecx, [ebp+var_10]
.text$mn:00003812                 add     ecx, 60h ; '`'
.text$mn:00003815                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000381A                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000381E                 mov     ecx, [ebp+var_10]
.text$mn:00003821                 add     ecx, 7Ch ; '|'
.text$mn:00003824                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003829                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000382D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003834                 mov     eax, [ebp+var_10]
.text$mn:00003837                 mov     ecx, [ebp+var_C]
.text$mn:0000383A                 mov     large fs:0, ecx
.text$mn:00003841                 pop     ecx
.text$mn:00003842                 mov     esp, ebp
.text$mn:00003844                 pop     ebp
.text$mn:00003845                 retn
.text$mn:00003845 ??0TiXmlDeclaration@@QAE@XZ endp
.text$mn:00003845
.text$mn:00003845 ; ---------------------------------------------------------------------------
.text$mn:00003846                 align 4
.text$mn:00003846 _text$mn        ends
.text$mn:00003846
.text$x:00003848 ; ===========================================================================
.text$x:00003848
.text$x:00003848 ; Segment type: Pure code
.text$x:00003848 ; Segment permissions: Read/Execute
.text$x:00003848 _text$x         segment para public 'CODE' use32
.text$x:00003848                 assume cs:_text$x
.text$x:00003848                 ;org 3848h
.text$x:00003848 ; COMDAT (pick associative to section at 37C0)
.text$x:00003848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003848
.text$x:00003848 ; =============== S U B R O U T I N E =======================================
.text$x:00003848
.text$x:00003848
.text$x:00003848 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0 proc near
.text$x:00003848                                         ; DATA XREF: .xdata$x:00009D2Co
.text$x:00003848                 mov     ecx, [ebp-10h]  ; this
.text$x:0000384B                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:0000384B __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0 endp
.text$x:0000384B
.text$x:00003850
.text$x:00003850 ; =============== S U B R O U T I N E =======================================
.text$x:00003850
.text$x:00003850
.text$x:00003850 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1 proc near
.text$x:00003850                                         ; DATA XREF: .xdata$x:00009D34o
.text$x:00003850                 mov     ecx, [ebp-10h]
.text$x:00003853                 add     ecx, 44h ; 'D'
.text$x:00003856                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003856 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1 endp
.text$x:00003856
.text$x:0000385B
.text$x:0000385B ; =============== S U B R O U T I N E =======================================
.text$x:0000385B
.text$x:0000385B
.text$x:0000385B __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2 proc near
.text$x:0000385B                                         ; DATA XREF: .xdata$x:00009D3Co
.text$x:0000385B                 mov     ecx, [ebp-10h]
.text$x:0000385E                 add     ecx, 60h ; '`'
.text$x:00003861                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003861 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2 endp
.text$x:00003861
.text$x:00003866
.text$x:00003866 ; =============== S U B R O U T I N E =======================================
.text$x:00003866
.text$x:00003866
.text$x:00003866 __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3 proc near
.text$x:00003866                                         ; DATA XREF: .xdata$x:00009D44o
.text$x:00003866                 mov     ecx, [ebp-10h]
.text$x:00003869                 add     ecx, 7Ch ; '|'
.text$x:0000386C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000386C __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3 endp
.text$x:0000386C
.text$x:00003871
.text$x:00003871 ; =============== S U B R O U T I N E =======================================
.text$x:00003871
.text$x:00003871
.text$x:00003871 __ehhandler$??0TiXmlDeclaration@@QAE@XZ proc near
.text$x:00003871                                         ; DATA XREF: TiXmlDeclaration::TiXmlDeclaration(void)+5o
.text$x:00003871
.text$x:00003871 arg_4           = dword ptr  8
.text$x:00003871
.text$x:00003871                 mov     edx, [esp+arg_4]
.text$x:00003875                 lea     eax, [edx+0Ch]
.text$x:00003878                 mov     ecx, [edx-8]
.text$x:0000387B                 xor     ecx, eax
.text$x:0000387D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003882                 mov     eax, offset __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ
.text$x:00003887                 jmp     ___CxxFrameHandler3
.text$x:00003887 __ehhandler$??0TiXmlDeclaration@@QAE@XZ endp
.text$x:00003887
.text$x:00003887 _text$x         ends
.text$x:00003887
.text$mn:0000388C ; ===========================================================================
.text$mn:0000388C
.text$mn:0000388C ; Segment type: Pure code
.text$mn:0000388C ; Segment permissions: Read/Execute
.text$mn:0000388C _text$mn        segment para public 'CODE' use32
.text$mn:0000388C                 assume cs:_text$mn
.text$mn:0000388C                 ;org 388Ch
.text$mn:0000388C ; COMDAT (pick any)
.text$mn:0000388C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000388C
.text$mn:0000388C ; =============== S U B R O U T I N E =======================================
.text$mn:0000388C
.text$mn:0000388C ; Attributes: bp-based frame
.text$mn:0000388C
.text$mn:0000388C ; private: __thiscall TiXmlParsingData::TiXmlParsingData(wchar_t const *, int, int, int)
.text$mn:0000388C                 public ??0TiXmlParsingData@@AAE@PB_WHHH@Z
.text$mn:0000388C ??0TiXmlParsingData@@AAE@PB_WHHH@Z proc near
.text$mn:0000388C                                         ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+92p
.text$mn:0000388C
.text$mn:0000388C var_4           = dword ptr -4
.text$mn:0000388C arg_0           = dword ptr  8
.text$mn:0000388C arg_4           = dword ptr  0Ch
.text$mn:0000388C arg_8           = dword ptr  10h
.text$mn:0000388C arg_C           = dword ptr  14h
.text$mn:0000388C
.text$mn:0000388C                 push    ebp
.text$mn:0000388D                 mov     ebp, esp
.text$mn:0000388F                 push    ecx
.text$mn:00003890                 mov     [ebp+var_4], ecx
.text$mn:00003893                 mov     ecx, [ebp+var_4]
.text$mn:00003896                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:0000389B                 cmp     [ebp+arg_0], 0
.text$mn:0000389F                 jnz     short loc_38B5
.text$mn:000038A1                 push    39h ; '9'       ; Line
.text$mn:000038A3                 push    offset ??_C@_1EC@ODHFGFFM@?$AA?4?$AA?4?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAT?$AAi?$AAn?$AAy?$AAX?$AAm?$AAl?$AA?2?$AAt?$AAi?$AAn?$AAy?$AAx?$AAm?$AAl?$AAp?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?4?$AAc?$AAp?$AAp@ ; "..\\src\\TinyXml\\tinyxmlparser.cpp"
.text$mn:000038A8                 push    offset ??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; "start"
.text$mn:000038AD                 call    __wassert
.text$mn:000038B2 ; ---------------------------------------------------------------------------
.text$mn:000038B2                 add     esp, 0Ch
.text$mn:000038B5
.text$mn:000038B5 loc_38B5:                               ; CODE XREF: TiXmlParsingData::TiXmlParsingData(wchar_t const *,int,int,int)+13j
.text$mn:000038B5                 mov     ecx, [ebp+var_4]
.text$mn:000038B8                 mov     edx, [ebp+arg_0]
.text$mn:000038BB                 mov     [ecx+8], edx
.text$mn:000038BE                 mov     eax, [ebp+var_4]
.text$mn:000038C1                 mov     ecx, [ebp+arg_4]
.text$mn:000038C4                 mov     [eax+0Ch], ecx
.text$mn:000038C7                 mov     edx, [ebp+var_4]
.text$mn:000038CA                 mov     eax, [ebp+arg_8]
.text$mn:000038CD                 mov     [edx], eax
.text$mn:000038CF                 mov     ecx, [ebp+var_4]
.text$mn:000038D2                 mov     edx, [ebp+arg_C]
.text$mn:000038D5                 mov     [ecx+4], edx
.text$mn:000038D8                 mov     eax, [ebp+var_4]
.text$mn:000038DB                 mov     esp, ebp
.text$mn:000038DD                 pop     ebp
.text$mn:000038DE                 retn    10h
.text$mn:000038DE ??0TiXmlParsingData@@AAE@PB_WHHH@Z endp
.text$mn:000038DE
.text$mn:000038DE ; ---------------------------------------------------------------------------
.text$mn:000038E1                 align 4
.text$mn:000038E1 _text$mn        ends
.text$mn:000038E1
.text$mn:000038E4 ; ===========================================================================
.text$mn:000038E4
.text$mn:000038E4 ; Segment type: Pure code
.text$mn:000038E4 ; Segment permissions: Read/Execute
.text$mn:000038E4 _text$mn        segment para public 'CODE' use32
.text$mn:000038E4                 assume cs:_text$mn
.text$mn:000038E4                 ;org 38E4h
.text$mn:000038E4 ; COMDAT (pick any)
.text$mn:000038E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038E4
.text$mn:000038E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000038E4
.text$mn:000038E4 ; Attributes: bp-based frame
.text$mn:000038E4
.text$mn:000038E4 ; int __stdcall TiXmlText::TiXmlText(wchar_t *)
.text$mn:000038E4                 public ??0TiXmlText@@QAE@PB_W@Z
.text$mn:000038E4 ??0TiXmlText@@QAE@PB_W@Z proc near      ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11Cp
.text$mn:000038E4                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+8Bp
.text$mn:000038E4
.text$mn:000038E4 var_10          = dword ptr -10h
.text$mn:000038E4 var_C           = dword ptr -0Ch
.text$mn:000038E4 var_4           = dword ptr -4
.text$mn:000038E4 arg_0           = dword ptr  8
.text$mn:000038E4
.text$mn:000038E4                 push    ebp
.text$mn:000038E5                 mov     ebp, esp
.text$mn:000038E7                 push    0FFFFFFFFh
.text$mn:000038E9                 push    offset __ehhandler$??0TiXmlText@@QAE@PB_W@Z
.text$mn:000038EE                 mov     eax, large fs:0
.text$mn:000038F4                 push    eax
.text$mn:000038F5                 push    ecx
.text$mn:000038F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000038FB                 xor     eax, ebp
.text$mn:000038FD                 push    eax
.text$mn:000038FE                 lea     eax, [ebp+var_C]
.text$mn:00003901                 mov     large fs:0, eax
.text$mn:00003907                 mov     [ebp+var_10], ecx
.text$mn:0000390A                 push    4
.text$mn:0000390C                 mov     ecx, [ebp+var_10]
.text$mn:0000390F                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00003914                 mov     [ebp+var_4], 0
.text$mn:0000391B                 mov     eax, [ebp+var_10]
.text$mn:0000391E                 mov     dword ptr [eax], offset ??_7TiXmlText@@6B@ ; const TiXmlText::`vftable'
.text$mn:00003924                 mov     ecx, [ebp+arg_0]
.text$mn:00003927                 push    ecx             ; wchar_t *
.text$mn:00003928                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000392B                 call    ?SetValue@TiXmlNode@@QAEXPB_W@Z ; TiXmlNode::SetValue(wchar_t const *)
.text$mn:00003930                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003937                 mov     eax, [ebp+var_10]
.text$mn:0000393A                 mov     ecx, [ebp+var_C]
.text$mn:0000393D                 mov     large fs:0, ecx
.text$mn:00003944                 pop     ecx
.text$mn:00003945                 mov     esp, ebp
.text$mn:00003947                 pop     ebp
.text$mn:00003948                 retn    4
.text$mn:00003948 ??0TiXmlText@@QAE@PB_W@Z endp
.text$mn:00003948
.text$mn:00003948 ; ---------------------------------------------------------------------------
.text$mn:0000394B                 align 4
.text$mn:0000394B _text$mn        ends
.text$mn:0000394B
.text$x:0000394C ; ===========================================================================
.text$x:0000394C
.text$x:0000394C ; Segment type: Pure code
.text$x:0000394C ; Segment permissions: Read/Execute
.text$x:0000394C _text$x         segment para public 'CODE' use32
.text$x:0000394C                 assume cs:_text$x
.text$x:0000394C                 ;org 394Ch
.text$x:0000394C ; COMDAT (pick associative to section at 38E4)
.text$x:0000394C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000394C
.text$x:0000394C ; =============== S U B R O U T I N E =======================================
.text$x:0000394C
.text$x:0000394C
.text$x:0000394C __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0 proc near
.text$x:0000394C                                         ; DATA XREF: .xdata$x:00009CD4o
.text$x:0000394C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000394F                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:0000394F __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0 endp
.text$x:0000394F
.text$x:00003954
.text$x:00003954 ; =============== S U B R O U T I N E =======================================
.text$x:00003954
.text$x:00003954
.text$x:00003954 __ehhandler$??0TiXmlText@@QAE@PB_W@Z proc near
.text$x:00003954                                         ; DATA XREF: TiXmlText::TiXmlText(wchar_t const *)+5o
.text$x:00003954
.text$x:00003954 arg_4           = dword ptr  8
.text$x:00003954
.text$x:00003954                 mov     edx, [esp+arg_4]
.text$x:00003958                 lea     eax, [edx+0Ch]
.text$x:0000395B                 mov     ecx, [edx-8]
.text$x:0000395E                 xor     ecx, eax
.text$x:00003960                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003965                 mov     eax, offset __ehfuncinfo$??0TiXmlText@@QAE@PB_W@Z
.text$x:0000396A                 jmp     ___CxxFrameHandler3
.text$x:0000396A __ehhandler$??0TiXmlText@@QAE@PB_W@Z endp
.text$x:0000396A
.text$x:0000396A ; ---------------------------------------------------------------------------
.text$x:0000396F                 align 10h
.text$x:0000396F _text$x         ends
.text$x:0000396F
.text$mn:00003970 ; ===========================================================================
.text$mn:00003970
.text$mn:00003970 ; Segment type: Pure code
.text$mn:00003970 ; Segment permissions: Read/Execute
.text$mn:00003970 _text$mn        segment para public 'CODE' use32
.text$mn:00003970                 assume cs:_text$mn
.text$mn:00003970                 ;org 3970h
.text$mn:00003970 ; COMDAT (pick any)
.text$mn:00003970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003970
.text$mn:00003970 ; =============== S U B R O U T I N E =======================================
.text$mn:00003970
.text$mn:00003970 ; Attributes: bp-based frame
.text$mn:00003970
.text$mn:00003970 ; _DWORD __thiscall TiXmlUnknown::TiXmlUnknown(TiXmlUnknown *__hidden this)
.text$mn:00003970                 public ??0TiXmlUnknown@@QAE@XZ
.text$mn:00003970 ??0TiXmlUnknown@@QAE@XZ proc near       ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+1E8p
.text$mn:00003970
.text$mn:00003970 var_10          = dword ptr -10h
.text$mn:00003970 var_C           = dword ptr -0Ch
.text$mn:00003970 var_4           = dword ptr -4
.text$mn:00003970
.text$mn:00003970                 push    ebp
.text$mn:00003971                 mov     ebp, esp
.text$mn:00003973                 push    0FFFFFFFFh
.text$mn:00003975                 push    offset __ehhandler$??0TiXmlUnknown@@QAE@XZ
.text$mn:0000397A                 mov     eax, large fs:0
.text$mn:00003980                 push    eax
.text$mn:00003981                 push    ecx
.text$mn:00003982                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003987                 xor     eax, ebp
.text$mn:00003989                 push    eax
.text$mn:0000398A                 lea     eax, [ebp+var_C]
.text$mn:0000398D                 mov     large fs:0, eax
.text$mn:00003993                 mov     [ebp+var_10], ecx
.text$mn:00003996                 push    3
.text$mn:00003998                 mov     ecx, [ebp+var_10]
.text$mn:0000399B                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:000039A0                 mov     [ebp+var_4], 0
.text$mn:000039A7                 mov     eax, [ebp+var_10]
.text$mn:000039AA                 mov     dword ptr [eax], offset ??_7TiXmlUnknown@@6B@ ; const TiXmlUnknown::`vftable'
.text$mn:000039B0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000039B7                 mov     eax, [ebp+var_10]
.text$mn:000039BA                 mov     ecx, [ebp+var_C]
.text$mn:000039BD                 mov     large fs:0, ecx
.text$mn:000039C4                 pop     ecx
.text$mn:000039C5                 mov     esp, ebp
.text$mn:000039C7                 pop     ebp
.text$mn:000039C8                 retn
.text$mn:000039C8 ??0TiXmlUnknown@@QAE@XZ endp
.text$mn:000039C8
.text$mn:000039C8 ; ---------------------------------------------------------------------------
.text$mn:000039C9                 align 4
.text$mn:000039C9 _text$mn        ends
.text$mn:000039C9
.text$x:000039CC ; ===========================================================================
.text$x:000039CC
.text$x:000039CC ; Segment type: Pure code
.text$x:000039CC ; Segment permissions: Read/Execute
.text$x:000039CC _text$x         segment para public 'CODE' use32
.text$x:000039CC                 assume cs:_text$x
.text$x:000039CC                 ;org 39CCh
.text$x:000039CC ; COMDAT (pick associative to section at 3970)
.text$x:000039CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000039CC
.text$x:000039CC ; =============== S U B R O U T I N E =======================================
.text$x:000039CC
.text$x:000039CC
.text$x:000039CC __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0 proc near
.text$x:000039CC                                         ; DATA XREF: .xdata$x:00009DB4o
.text$x:000039CC                 mov     ecx, [ebp-10h]  ; this
.text$x:000039CF                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:000039CF __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0 endp
.text$x:000039CF
.text$x:000039D4
.text$x:000039D4 ; =============== S U B R O U T I N E =======================================
.text$x:000039D4
.text$x:000039D4
.text$x:000039D4 __ehhandler$??0TiXmlUnknown@@QAE@XZ proc near
.text$x:000039D4                                         ; DATA XREF: TiXmlUnknown::TiXmlUnknown(void)+5o
.text$x:000039D4
.text$x:000039D4 arg_4           = dword ptr  8
.text$x:000039D4
.text$x:000039D4                 mov     edx, [esp+arg_4]
.text$x:000039D8                 lea     eax, [edx+0Ch]
.text$x:000039DB                 mov     ecx, [edx-8]
.text$x:000039DE                 xor     ecx, eax
.text$x:000039E0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039E5                 mov     eax, offset __ehfuncinfo$??0TiXmlUnknown@@QAE@XZ
.text$x:000039EA                 jmp     ___CxxFrameHandler3
.text$x:000039EA __ehhandler$??0TiXmlUnknown@@QAE@XZ endp
.text$x:000039EA
.text$x:000039EA ; ---------------------------------------------------------------------------
.text$x:000039EF                 align 10h
.text$x:000039EF _text$x         ends
.text$x:000039EF
.text$mn:000039F0 ; ===========================================================================
.text$mn:000039F0
.text$mn:000039F0 ; Segment type: Pure code
.text$mn:000039F0 ; Segment permissions: Read/Execute
.text$mn:000039F0 _text$mn        segment para public 'CODE' use32
.text$mn:000039F0                 assume cs:_text$mn
.text$mn:000039F0                 ;org 39F0h
.text$mn:000039F0 ; COMDAT (pick any)
.text$mn:000039F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000039F0
.text$mn:000039F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000039F0
.text$mn:000039F0 ; Attributes: bp-based frame
.text$mn:000039F0
.text$mn:000039F0 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000039F0                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000039F0 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000039F0                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000039F0                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:000039F0
.text$mn:000039F0 var_4           = dword ptr -4
.text$mn:000039F0
.text$mn:000039F0                 push    ebp
.text$mn:000039F1                 mov     ebp, esp
.text$mn:000039F3                 push    ecx
.text$mn:000039F4                 mov     [ebp+var_4], ecx
.text$mn:000039F7                 mov     eax, [ebp+var_4]
.text$mn:000039FA                 mov     dword ptr [eax], 0
.text$mn:00003A00                 mov     eax, [ebp+var_4]
.text$mn:00003A03                 mov     esp, ebp
.text$mn:00003A05                 pop     ebp
.text$mn:00003A06                 retn
.text$mn:00003A06 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00003A06
.text$mn:00003A06 ; ---------------------------------------------------------------------------
.text$mn:00003A07                 align 4
.text$mn:00003A07 _text$mn        ends
.text$mn:00003A07
.text$mn:00003A08 ; ===========================================================================
.text$mn:00003A08
.text$mn:00003A08 ; Segment type: Pure code
.text$mn:00003A08 ; Segment permissions: Read/Execute
.text$mn:00003A08 _text$mn        segment para public 'CODE' use32
.text$mn:00003A08                 assume cs:_text$mn
.text$mn:00003A08                 ;org 3A08h
.text$mn:00003A08 ; COMDAT (pick any)
.text$mn:00003A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A08
.text$mn:00003A08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A08
.text$mn:00003A08 ; Attributes: bp-based frame
.text$mn:00003A08
.text$mn:00003A08 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00003A08                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00003A08 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00003A08                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00003A08                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:00003A08
.text$mn:00003A08 var_4           = dword ptr -4
.text$mn:00003A08
.text$mn:00003A08                 push    ebp
.text$mn:00003A09                 mov     ebp, esp
.text$mn:00003A0B                 push    ecx
.text$mn:00003A0C                 mov     [ebp+var_4], ecx
.text$mn:00003A0F                 mov     eax, [ebp+var_4]
.text$mn:00003A12                 mov     dword ptr [eax], 0
.text$mn:00003A18                 mov     ecx, [ebp+var_4]
.text$mn:00003A1B                 mov     dword ptr [ecx+4], 0
.text$mn:00003A22                 mov     eax, [ebp+var_4]
.text$mn:00003A25                 mov     esp, ebp
.text$mn:00003A27                 pop     ebp
.text$mn:00003A28                 retn
.text$mn:00003A28 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00003A28
.text$mn:00003A28 ; ---------------------------------------------------------------------------
.text$mn:00003A29                 align 4
.text$mn:00003A29 _text$mn        ends
.text$mn:00003A29
.text$mn:00003A2C ; ===========================================================================
.text$mn:00003A2C
.text$mn:00003A2C ; Segment type: Pure code
.text$mn:00003A2C ; Segment permissions: Read/Execute
.text$mn:00003A2C _text$mn        segment para public 'CODE' use32
.text$mn:00003A2C                 assume cs:_text$mn
.text$mn:00003A2C                 ;org 3A2Ch
.text$mn:00003A2C ; COMDAT (pick any)
.text$mn:00003A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A2C
.text$mn:00003A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00003A2C
.text$mn:00003A2C ; Attributes: bp-based frame
.text$mn:00003A2C
.text$mn:00003A2C ; _DWORD __thiscall std::_Facet_base::_Facet_base(std::_Facet_base *__hidden this)
.text$mn:00003A2C                 public ??0_Facet_base@std@@QAE@XZ
.text$mn:00003A2C ??0_Facet_base@std@@QAE@XZ proc near    ; CODE XREF: std::locale::facet::facet(uint)+29p
.text$mn:00003A2C
.text$mn:00003A2C var_4           = dword ptr -4
.text$mn:00003A2C
.text$mn:00003A2C                 push    ebp
.text$mn:00003A2D                 mov     ebp, esp
.text$mn:00003A2F                 push    ecx
.text$mn:00003A30                 mov     [ebp+var_4], ecx
.text$mn:00003A33                 mov     eax, [ebp+var_4]
.text$mn:00003A36                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:00003A3C                 mov     eax, [ebp+var_4]
.text$mn:00003A3F                 mov     esp, ebp
.text$mn:00003A41                 pop     ebp
.text$mn:00003A42                 retn
.text$mn:00003A42 ??0_Facet_base@std@@QAE@XZ endp
.text$mn:00003A42
.text$mn:00003A42 ; ---------------------------------------------------------------------------
.text$mn:00003A43                 align 4
.text$mn:00003A43 _text$mn        ends
.text$mn:00003A43
.text$mn:00003A44 ; ===========================================================================
.text$mn:00003A44
.text$mn:00003A44 ; Segment type: Pure code
.text$mn:00003A44 ; Segment permissions: Read/Execute
.text$mn:00003A44 _text$mn        segment para public 'CODE' use32
.text$mn:00003A44                 assume cs:_text$mn
.text$mn:00003A44                 ;org 3A44h
.text$mn:00003A44 ; COMDAT (pick any)
.text$mn:00003A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A44
.text$mn:00003A44 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A44
.text$mn:00003A44 ; Attributes: bp-based frame
.text$mn:00003A44
.text$mn:00003A44 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00003A44                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003A44 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00003A44                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00003A44                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00003A44
.text$mn:00003A44 var_10          = dword ptr -10h
.text$mn:00003A44 var_C           = dword ptr -0Ch
.text$mn:00003A44 var_4           = dword ptr -4
.text$mn:00003A44
.text$mn:00003A44                 push    ebp
.text$mn:00003A45                 mov     ebp, esp
.text$mn:00003A47                 push    0FFFFFFFFh
.text$mn:00003A49                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003A4E                 mov     eax, large fs:0
.text$mn:00003A54                 push    eax
.text$mn:00003A55                 push    ecx
.text$mn:00003A56                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A5B                 xor     eax, ebp
.text$mn:00003A5D                 push    eax
.text$mn:00003A5E                 lea     eax, [ebp+var_C]
.text$mn:00003A61                 mov     large fs:0, eax
.text$mn:00003A67                 mov     [ebp+var_10], ecx
.text$mn:00003A6A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003A6D                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00003A72                 mov     [ebp+var_4], 0
.text$mn:00003A79                 mov     eax, [ebp+var_10]
.text$mn:00003A7C                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00003A82                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A89                 mov     eax, [ebp+var_10]
.text$mn:00003A8C                 mov     ecx, [ebp+var_C]
.text$mn:00003A8F                 mov     large fs:0, ecx
.text$mn:00003A96                 pop     ecx
.text$mn:00003A97                 mov     esp, ebp
.text$mn:00003A99                 pop     ebp
.text$mn:00003A9A                 retn
.text$mn:00003A9A ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00003A9A
.text$mn:00003A9A ; ---------------------------------------------------------------------------
.text$mn:00003A9B                 align 4
.text$mn:00003A9B _text$mn        ends
.text$mn:00003A9B
.text$x:00003A9C ; ===========================================================================
.text$x:00003A9C
.text$x:00003A9C ; Segment type: Pure code
.text$x:00003A9C ; Segment permissions: Read/Execute
.text$x:00003A9C _text$x         segment para public 'CODE' use32
.text$x:00003A9C                 assume cs:_text$x
.text$x:00003A9C                 ;org 3A9Ch
.text$x:00003A9C ; COMDAT (pick associative to section at 3A44)
.text$x:00003A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A9C
.text$x:00003A9C ; =============== S U B R O U T I N E =======================================
.text$x:00003A9C
.text$x:00003A9C
.text$x:00003A9C __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00003A9C                                         ; DATA XREF: .xdata$x:00009558o
.text$x:00003A9C                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A9F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00003A9F __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00003A9F
.text$x:00003AA4
.text$x:00003AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00003AA4
.text$x:00003AA4
.text$x:00003AA4 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00003AA4                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00003AA4
.text$x:00003AA4 arg_4           = dword ptr  8
.text$x:00003AA4
.text$x:00003AA4                 mov     edx, [esp+arg_4]
.text$x:00003AA8                 lea     eax, [edx+0Ch]
.text$x:00003AAB                 mov     ecx, [edx-8]
.text$x:00003AAE                 xor     ecx, eax
.text$x:00003AB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AB5                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00003ABA                 jmp     ___CxxFrameHandler3
.text$x:00003ABA __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00003ABA
.text$x:00003ABA ; ---------------------------------------------------------------------------
.text$x:00003ABF                 align 10h
.text$x:00003ABF _text$x         ends
.text$x:00003ABF
.text$mn:00003AC0 ; ===========================================================================
.text$mn:00003AC0
.text$mn:00003AC0 ; Segment type: Pure code
.text$mn:00003AC0 ; Segment permissions: Read/Execute
.text$mn:00003AC0 _text$mn        segment para public 'CODE' use32
.text$mn:00003AC0                 assume cs:_text$mn
.text$mn:00003AC0                 ;org 3AC0h
.text$mn:00003AC0 ; COMDAT (pick any)
.text$mn:00003AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AC0
.text$mn:00003AC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AC0
.text$mn:00003AC0 ; Attributes: bp-based frame
.text$mn:00003AC0
.text$mn:00003AC0 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00003AC0                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00003AC0 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00003AC0                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00003AC0
.text$mn:00003AC0 var_10          = dword ptr -10h
.text$mn:00003AC0 var_C           = dword ptr -0Ch
.text$mn:00003AC0 var_4           = dword ptr -4
.text$mn:00003AC0
.text$mn:00003AC0                 push    ebp
.text$mn:00003AC1                 mov     ebp, esp
.text$mn:00003AC3                 push    0FFFFFFFFh
.text$mn:00003AC5                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00003ACA                 mov     eax, large fs:0
.text$mn:00003AD0                 push    eax
.text$mn:00003AD1                 push    ecx
.text$mn:00003AD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003AD7                 xor     eax, ebp
.text$mn:00003AD9                 push    eax
.text$mn:00003ADA                 lea     eax, [ebp+var_C]
.text$mn:00003ADD                 mov     large fs:0, eax
.text$mn:00003AE3                 mov     [ebp+var_10], ecx
.text$mn:00003AE6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003AE9                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00003AEE                 mov     [ebp+var_4], 0
.text$mn:00003AF5                 mov     eax, [ebp+var_10]
.text$mn:00003AF8                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00003AFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003B05                 mov     eax, [ebp+var_10]
.text$mn:00003B08                 mov     ecx, [ebp+var_C]
.text$mn:00003B0B                 mov     large fs:0, ecx
.text$mn:00003B12                 pop     ecx
.text$mn:00003B13                 mov     esp, ebp
.text$mn:00003B15                 pop     ebp
.text$mn:00003B16                 retn
.text$mn:00003B16 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00003B16
.text$mn:00003B16 ; ---------------------------------------------------------------------------
.text$mn:00003B17                 align 4
.text$mn:00003B17 _text$mn        ends
.text$mn:00003B17
.text$x:00003B18 ; ===========================================================================
.text$x:00003B18
.text$x:00003B18 ; Segment type: Pure code
.text$x:00003B18 ; Segment permissions: Read/Execute
.text$x:00003B18 _text$x         segment para public 'CODE' use32
.text$x:00003B18                 assume cs:_text$x
.text$x:00003B18                 ;org 3B18h
.text$x:00003B18 ; COMDAT (pick associative to section at 3AC0)
.text$x:00003B18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003B18
.text$x:00003B18 ; =============== S U B R O U T I N E =======================================
.text$x:00003B18
.text$x:00003B18
.text$x:00003B18 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00003B18                                         ; DATA XREF: .xdata$x:000095DCo
.text$x:00003B18                 mov     ecx, [ebp-10h]  ; this
.text$x:00003B1B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00003B1B __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00003B1B
.text$x:00003B20
.text$x:00003B20 ; =============== S U B R O U T I N E =======================================
.text$x:00003B20
.text$x:00003B20
.text$x:00003B20 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00003B20                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00003B20
.text$x:00003B20 arg_4           = dword ptr  8
.text$x:00003B20
.text$x:00003B20                 mov     edx, [esp+arg_4]
.text$x:00003B24                 lea     eax, [edx+0Ch]
.text$x:00003B27                 mov     ecx, [edx-8]
.text$x:00003B2A                 xor     ecx, eax
.text$x:00003B2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B31                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00003B36                 jmp     ___CxxFrameHandler3
.text$x:00003B36 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00003B36
.text$x:00003B36 ; ---------------------------------------------------------------------------
.text$x:00003B3B                 align 4
.text$x:00003B3B _text$x         ends
.text$x:00003B3B
.text$mn:00003B3C ; ===========================================================================
.text$mn:00003B3C
.text$mn:00003B3C ; Segment type: Pure code
.text$mn:00003B3C ; Segment permissions: Read/Execute
.text$mn:00003B3C _text$mn        segment para public 'CODE' use32
.text$mn:00003B3C                 assume cs:_text$mn
.text$mn:00003B3C                 ;org 3B3Ch
.text$mn:00003B3C ; COMDAT (pick any)
.text$mn:00003B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B3C
.text$mn:00003B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B3C
.text$mn:00003B3C ; Attributes: bp-based frame
.text$mn:00003B3C
.text$mn:00003B3C ; _DWORD __thiscall std::_Locinfo::_Locinfo(std::_Locinfo *this, const char *)
.text$mn:00003B3C                 public ??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00003B3C ??0_Locinfo@std@@QAE@PBD@Z proc near    ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+80p
.text$mn:00003B3C
.text$mn:00003B3C var_1C          = byte ptr -1Ch
.text$mn:00003B3C var_10          = dword ptr -10h
.text$mn:00003B3C var_C           = dword ptr -0Ch
.text$mn:00003B3C var_4           = dword ptr -4
.text$mn:00003B3C arg_0           = dword ptr  8
.text$mn:00003B3C
.text$mn:00003B3C                 push    ebp
.text$mn:00003B3D                 mov     ebp, esp
.text$mn:00003B3F                 push    0FFFFFFFFh
.text$mn:00003B41                 push    offset __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
.text$mn:00003B46                 mov     eax, large fs:0
.text$mn:00003B4C                 push    eax
.text$mn:00003B4D                 sub     esp, 10h
.text$mn:00003B50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B55                 xor     eax, ebp
.text$mn:00003B57                 push    eax
.text$mn:00003B58                 lea     eax, [ebp+var_C]
.text$mn:00003B5B                 mov     large fs:0, eax
.text$mn:00003B61                 mov     [ebp+var_10], ecx
.text$mn:00003B64                 push    0               ; int
.text$mn:00003B66                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003B69                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00003B6E                 mov     [ebp+var_4], 0
.text$mn:00003B75                 mov     ecx, [ebp+var_10]
.text$mn:00003B78                 add     ecx, 4
.text$mn:00003B7B                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00003B80                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003B84                 mov     ecx, [ebp+var_10]
.text$mn:00003B87                 add     ecx, 0Ch
.text$mn:00003B8A                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00003B8F                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003B93                 mov     ecx, [ebp+var_10]
.text$mn:00003B96                 add     ecx, 14h
.text$mn:00003B99                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00003B9E                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003BA2                 mov     ecx, [ebp+var_10]
.text$mn:00003BA5                 add     ecx, 1Ch
.text$mn:00003BA8                 call    ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>(void)
.text$mn:00003BAD                 mov     byte ptr [ebp+var_4], 4
.text$mn:00003BB1                 mov     ecx, [ebp+var_10]
.text$mn:00003BB4                 add     ecx, 24h ; '$'
.text$mn:00003BB7                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00003BBC                 mov     byte ptr [ebp+var_4], 5
.text$mn:00003BC0                 mov     ecx, [ebp+var_10]
.text$mn:00003BC3                 add     ecx, 2Ch ; ','
.text$mn:00003BC6                 call    ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>(void)
.text$mn:00003BCB                 mov     byte ptr [ebp+var_4], 6
.text$mn:00003BCF                 cmp     [ebp+arg_0], 0
.text$mn:00003BD3                 jnz     short loc_3BF0
.text$mn:00003BD5                 push    offset ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ ; "bad locale name"
.text$mn:00003BDA                 lea     ecx, [ebp+var_1C] ; this
.text$mn:00003BDD                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00003BE2                 push    offset __TI2?AVruntime_error@std@@
.text$mn:00003BE7                 lea     eax, [ebp+var_1C]
.text$mn:00003BEA                 push    eax
.text$mn:00003BEB                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00003BF0 ; ---------------------------------------------------------------------------
.text$mn:00003BF0
.text$mn:00003BF0 loc_3BF0:                               ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+97j
.text$mn:00003BF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003BF3                 push    ecx             ; char *
.text$mn:00003BF4                 mov     edx, [ebp+var_10]
.text$mn:00003BF7                 push    edx             ; struct std::_Locinfo *
.text$mn:00003BF8                 call    ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor(std::_Locinfo *,char const *)
.text$mn:00003BFD                 add     esp, 8
.text$mn:00003C00                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C07                 mov     eax, [ebp+var_10]
.text$mn:00003C0A                 mov     ecx, [ebp+var_C]
.text$mn:00003C0D                 mov     large fs:0, ecx
.text$mn:00003C14                 pop     ecx
.text$mn:00003C15                 mov     esp, ebp
.text$mn:00003C17                 pop     ebp
.text$mn:00003C18                 retn    4
.text$mn:00003C18 ??0_Locinfo@std@@QAE@PBD@Z endp
.text$mn:00003C18
.text$mn:00003C18 ; ---------------------------------------------------------------------------
.text$mn:00003C1B                 align 4
.text$mn:00003C1B _text$mn        ends
.text$mn:00003C1B
.text$x:00003C1C ; ===========================================================================
.text$x:00003C1C
.text$x:00003C1C ; Segment type: Pure code
.text$x:00003C1C ; Segment permissions: Read/Execute
.text$x:00003C1C _text$x         segment para public 'CODE' use32
.text$x:00003C1C                 assume cs:_text$x
.text$x:00003C1C                 ;org 3C1Ch
.text$x:00003C1C ; COMDAT (pick associative to section at 3B3C)
.text$x:00003C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003C1C
.text$x:00003C1C ; =============== S U B R O U T I N E =======================================
.text$x:00003C1C
.text$x:00003C1C
.text$x:00003C1C __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 proc near
.text$x:00003C1C                                         ; DATA XREF: .xdata$x:000091BCo
.text$x:00003C1C                 mov     ecx, [ebp-10h]  ; this
.text$x:00003C1F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00003C1F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0 endp
.text$x:00003C1F
.text$x:00003C24
.text$x:00003C24 ; =============== S U B R O U T I N E =======================================
.text$x:00003C24
.text$x:00003C24
.text$x:00003C24 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 proc near
.text$x:00003C24                                         ; DATA XREF: .xdata$x:000091C4o
.text$x:00003C24                 mov     ecx, [ebp-10h]
.text$x:00003C27                 add     ecx, 4
.text$x:00003C2A                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00003C2A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1 endp
.text$x:00003C2A
.text$x:00003C2F
.text$x:00003C2F ; =============== S U B R O U T I N E =======================================
.text$x:00003C2F
.text$x:00003C2F
.text$x:00003C2F __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 proc near
.text$x:00003C2F                                         ; DATA XREF: .xdata$x:000091CCo
.text$x:00003C2F                 mov     ecx, [ebp-10h]
.text$x:00003C32                 add     ecx, 0Ch
.text$x:00003C35                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00003C35 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2 endp
.text$x:00003C35
.text$x:00003C3A
.text$x:00003C3A ; =============== S U B R O U T I N E =======================================
.text$x:00003C3A
.text$x:00003C3A
.text$x:00003C3A __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 proc near
.text$x:00003C3A                                         ; DATA XREF: .xdata$x:000091D4o
.text$x:00003C3A                 mov     ecx, [ebp-10h]
.text$x:00003C3D                 add     ecx, 14h
.text$x:00003C40                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00003C40 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3 endp
.text$x:00003C40
.text$x:00003C45
.text$x:00003C45 ; =============== S U B R O U T I N E =======================================
.text$x:00003C45
.text$x:00003C45
.text$x:00003C45 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 proc near
.text$x:00003C45                                         ; DATA XREF: .xdata$x:000091DCo
.text$x:00003C45                 mov     ecx, [ebp-10h]
.text$x:00003C48                 add     ecx, 1Ch
.text$x:00003C4B                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00003C4B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4 endp
.text$x:00003C4B
.text$x:00003C50
.text$x:00003C50 ; =============== S U B R O U T I N E =======================================
.text$x:00003C50
.text$x:00003C50
.text$x:00003C50 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 proc near
.text$x:00003C50                                         ; DATA XREF: .xdata$x:000091E4o
.text$x:00003C50                 mov     ecx, [ebp-10h]
.text$x:00003C53                 add     ecx, 24h ; '$'
.text$x:00003C56                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00003C56 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5 endp
.text$x:00003C56
.text$x:00003C5B
.text$x:00003C5B ; =============== S U B R O U T I N E =======================================
.text$x:00003C5B
.text$x:00003C5B
.text$x:00003C5B __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 proc near
.text$x:00003C5B                                         ; DATA XREF: .xdata$x:000091ECo
.text$x:00003C5B                 mov     ecx, [ebp-10h]
.text$x:00003C5E                 add     ecx, 2Ch ; ','
.text$x:00003C61                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00003C61 __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6 endp
.text$x:00003C61
.text$x:00003C66
.text$x:00003C66 ; =============== S U B R O U T I N E =======================================
.text$x:00003C66
.text$x:00003C66
.text$x:00003C66 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z proc near
.text$x:00003C66                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+5o
.text$x:00003C66
.text$x:00003C66 arg_4           = dword ptr  8
.text$x:00003C66
.text$x:00003C66                 mov     edx, [esp+arg_4]
.text$x:00003C6A                 lea     eax, [edx+0Ch]
.text$x:00003C6D                 mov     ecx, [edx-14h]
.text$x:00003C70                 xor     ecx, eax
.text$x:00003C72                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C77                 mov     eax, offset __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
.text$x:00003C7C                 jmp     ___CxxFrameHandler3
.text$x:00003C7C __ehhandler$??0_Locinfo@std@@QAE@PBD@Z endp
.text$x:00003C7C
.text$x:00003C7C ; ---------------------------------------------------------------------------
.text$x:00003C81                 align 4
.text$x:00003C81 _text$x         ends
.text$x:00003C81
.text$mn:00003C84 ; ===========================================================================
.text$mn:00003C84
.text$mn:00003C84 ; Segment type: Pure code
.text$mn:00003C84 ; Segment permissions: Read/Execute
.text$mn:00003C84 _text$mn        segment para public 'CODE' use32
.text$mn:00003C84                 assume cs:_text$mn
.text$mn:00003C84                 ;org 3C84h
.text$mn:00003C84 ; COMDAT (pick any)
.text$mn:00003C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C84
.text$mn:00003C84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C84
.text$mn:00003C84 ; Attributes: bp-based frame
.text$mn:00003C84
.text$mn:00003C84 ; public: __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> &)
.text$mn:00003C84                 public ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:00003C84 ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00003C84                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,bool)+2Dp
.text$mn:00003C84
.text$mn:00003C84 var_10          = dword ptr -10h
.text$mn:00003C84 var_C           = dword ptr -0Ch
.text$mn:00003C84 var_8           = dword ptr -8
.text$mn:00003C84 var_4           = dword ptr -4
.text$mn:00003C84 arg_0           = dword ptr  8
.text$mn:00003C84
.text$mn:00003C84                 push    ebp
.text$mn:00003C85                 mov     ebp, esp
.text$mn:00003C87                 sub     esp, 10h
.text$mn:00003C8A                 mov     [ebp+var_4], ecx
.text$mn:00003C8D                 mov     eax, [ebp+var_4]
.text$mn:00003C90                 mov     ecx, [ebp+arg_0]
.text$mn:00003C93                 mov     [eax], ecx
.text$mn:00003C95                 mov     edx, [ebp+var_4]
.text$mn:00003C98                 mov     eax, [edx]
.text$mn:00003C9A                 mov     [ebp+var_8], eax
.text$mn:00003C9D                 mov     ecx, [ebp+var_8]
.text$mn:00003CA0                 mov     edx, [ecx]
.text$mn:00003CA2                 mov     ecx, [ebp+var_8]
.text$mn:00003CA5                 add     ecx, [edx+4]
.text$mn:00003CA8                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003CAD                 test    eax, eax
.text$mn:00003CAF                 jz      short loc_3CD9
.text$mn:00003CB1                 mov     eax, [ebp+var_4]
.text$mn:00003CB4                 mov     ecx, [eax]
.text$mn:00003CB6                 mov     [ebp+var_C], ecx
.text$mn:00003CB9                 mov     edx, [ebp+var_C]
.text$mn:00003CBC                 mov     eax, [edx]
.text$mn:00003CBE                 mov     ecx, [ebp+var_C]
.text$mn:00003CC1                 add     ecx, [eax+4]
.text$mn:00003CC4                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003CC9                 mov     [ebp+var_10], eax
.text$mn:00003CCC                 mov     ecx, [ebp+var_10]
.text$mn:00003CCF                 mov     edx, [ecx]
.text$mn:00003CD1                 mov     ecx, [ebp+var_10]
.text$mn:00003CD4                 mov     eax, [edx+4]
.text$mn:00003CD7                 call    eax
.text$mn:00003CD9
.text$mn:00003CD9 loc_3CD9:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &)+2Bj
.text$mn:00003CD9                 mov     eax, [ebp+var_4]
.text$mn:00003CDC                 mov     esp, ebp
.text$mn:00003CDE                 pop     ebp
.text$mn:00003CDF                 retn    4
.text$mn:00003CDF ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$mn:00003CDF
.text$mn:00003CDF ; ---------------------------------------------------------------------------
.text$mn:00003CE2                 align 4
.text$mn:00003CE2 _text$mn        ends
.text$mn:00003CE2
.text$mn:00003CE4 ; ===========================================================================
.text$mn:00003CE4
.text$mn:00003CE4 ; Segment type: Pure code
.text$mn:00003CE4 ; Segment permissions: Read/Execute
.text$mn:00003CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003CE4                 assume cs:_text$mn
.text$mn:00003CE4                 ;org 3CE4h
.text$mn:00003CE4 ; COMDAT (pick any)
.text$mn:00003CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CE4
.text$mn:00003CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CE4
.text$mn:00003CE4 ; Attributes: bp-based frame
.text$mn:00003CE4
.text$mn:00003CE4 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &)
.text$mn:00003CE4                 public ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:00003CE4 ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00003CE4                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+2Dp
.text$mn:00003CE4
.text$mn:00003CE4 var_10          = dword ptr -10h
.text$mn:00003CE4 var_C           = dword ptr -0Ch
.text$mn:00003CE4 var_8           = dword ptr -8
.text$mn:00003CE4 var_4           = dword ptr -4
.text$mn:00003CE4 arg_0           = dword ptr  8
.text$mn:00003CE4
.text$mn:00003CE4                 push    ebp
.text$mn:00003CE5                 mov     ebp, esp
.text$mn:00003CE7                 sub     esp, 10h
.text$mn:00003CEA                 mov     [ebp+var_4], ecx
.text$mn:00003CED                 mov     eax, [ebp+var_4]
.text$mn:00003CF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003CF3                 mov     [eax], ecx
.text$mn:00003CF5                 mov     edx, [ebp+var_4]
.text$mn:00003CF8                 mov     eax, [edx]
.text$mn:00003CFA                 mov     [ebp+var_8], eax
.text$mn:00003CFD                 mov     ecx, [ebp+var_8]
.text$mn:00003D00                 mov     edx, [ecx]
.text$mn:00003D02                 mov     ecx, [ebp+var_8]
.text$mn:00003D05                 add     ecx, [edx+4]
.text$mn:00003D08                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003D0D                 test    eax, eax
.text$mn:00003D0F                 jz      short loc_3D39
.text$mn:00003D11                 mov     eax, [ebp+var_4]
.text$mn:00003D14                 mov     ecx, [eax]
.text$mn:00003D16                 mov     [ebp+var_C], ecx
.text$mn:00003D19                 mov     edx, [ebp+var_C]
.text$mn:00003D1C                 mov     eax, [edx]
.text$mn:00003D1E                 mov     ecx, [ebp+var_C]
.text$mn:00003D21                 add     ecx, [eax+4]
.text$mn:00003D24                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00003D29                 mov     [ebp+var_10], eax
.text$mn:00003D2C                 mov     ecx, [ebp+var_10]
.text$mn:00003D2F                 mov     edx, [ecx]
.text$mn:00003D31                 mov     ecx, [ebp+var_10]
.text$mn:00003D34                 mov     eax, [edx+4]
.text$mn:00003D37                 call    eax
.text$mn:00003D39
.text$mn:00003D39 loc_3D39:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+2Bj
.text$mn:00003D39                 mov     eax, [ebp+var_4]
.text$mn:00003D3C                 mov     esp, ebp
.text$mn:00003D3E                 pop     ebp
.text$mn:00003D3F                 retn    4
.text$mn:00003D3F ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$mn:00003D3F
.text$mn:00003D3F ; ---------------------------------------------------------------------------
.text$mn:00003D42                 align 4
.text$mn:00003D42 _text$mn        ends
.text$mn:00003D42
.text$mn:00003D44 ; ===========================================================================
.text$mn:00003D44
.text$mn:00003D44 ; Segment type: Pure code
.text$mn:00003D44 ; Segment permissions: Read/Execute
.text$mn:00003D44 _text$mn        segment para public 'CODE' use32
.text$mn:00003D44                 assume cs:_text$mn
.text$mn:00003D44                 ;org 3D44h
.text$mn:00003D44 ; COMDAT (pick any)
.text$mn:00003D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D44
.text$mn:00003D44 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D44
.text$mn:00003D44 ; Attributes: bp-based frame
.text$mn:00003D44
.text$mn:00003D44 ; protected: __thiscall std::_System_error::_System_error(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:00003D44                 public ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00003D44 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:00003D44                                         ; CODE XREF: std::system_error::system_error(std::error_code,char const *)+4Dp
.text$mn:00003D44
.text$mn:00003D44 var_44          = dword ptr -44h
.text$mn:00003D44 var_40          = dword ptr -40h
.text$mn:00003D44 var_3C          = dword ptr -3Ch
.text$mn:00003D44 var_38          = dword ptr -38h
.text$mn:00003D44 var_34          = dword ptr -34h
.text$mn:00003D44 var_30          = dword ptr -30h
.text$mn:00003D44 var_2C          = byte ptr -2Ch
.text$mn:00003D44 var_10          = dword ptr -10h
.text$mn:00003D44 var_C           = dword ptr -0Ch
.text$mn:00003D44 var_4           = dword ptr -4
.text$mn:00003D44 arg_0           = dword ptr  8
.text$mn:00003D44 arg_4           = dword ptr  0Ch
.text$mn:00003D44 arg_8           = dword ptr  10h
.text$mn:00003D44
.text$mn:00003D44                 push    ebp
.text$mn:00003D45                 mov     ebp, esp
.text$mn:00003D47                 push    0FFFFFFFFh
.text$mn:00003D49                 push    offset __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:00003D4E                 mov     eax, large fs:0
.text$mn:00003D54                 push    eax
.text$mn:00003D55                 sub     esp, 38h
.text$mn:00003D58                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D5D                 xor     eax, ebp
.text$mn:00003D5F                 mov     [ebp+var_10], eax
.text$mn:00003D62                 push    eax
.text$mn:00003D63                 lea     eax, [ebp+var_C]
.text$mn:00003D66                 mov     large fs:0, eax
.text$mn:00003D6C                 mov     [ebp+var_30], ecx
.text$mn:00003D6F                 sub     esp, 1Ch
.text$mn:00003D72                 mov     ecx, esp
.text$mn:00003D74                 mov     [ebp+var_40], esp
.text$mn:00003D77                 mov     eax, [ebp+arg_8]
.text$mn:00003D7A                 push    eax
.text$mn:00003D7B                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00003D80                 mov     [ebp+var_3C], eax
.text$mn:00003D83                 mov     ecx, [ebp+var_3C]
.text$mn:00003D86                 mov     [ebp+var_44], ecx
.text$mn:00003D89                 mov     [ebp+var_4], 0
.text$mn:00003D90                 mov     edx, [ebp+arg_4]
.text$mn:00003D93                 push    edx
.text$mn:00003D94                 mov     eax, [ebp+arg_0]
.text$mn:00003D97                 push    eax
.text$mn:00003D98                 lea     ecx, [ebp+var_2C]
.text$mn:00003D9B                 push    ecx
.text$mn:00003D9C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003DA3                 call    ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)
.text$mn:00003DA8                 add     esp, 28h
.text$mn:00003DAB                 mov     [ebp+var_38], eax
.text$mn:00003DAE                 mov     edx, [ebp+var_38]
.text$mn:00003DB1                 mov     [ebp+var_34], edx
.text$mn:00003DB4                 mov     [ebp+var_4], 1
.text$mn:00003DBB                 mov     eax, [ebp+var_34]
.text$mn:00003DBE                 push    eax
.text$mn:00003DBF                 mov     ecx, [ebp+var_30]
.text$mn:00003DC2                 call    ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00003DC7                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003DCB                 lea     ecx, [ebp+var_2C]
.text$mn:00003DCE                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00003DD3                 mov     ecx, [ebp+var_30]
.text$mn:00003DD6                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:00003DDC                 mov     edx, [ebp+var_30]
.text$mn:00003DDF                 mov     eax, [ebp+arg_0]
.text$mn:00003DE2                 mov     [edx+0Ch], eax
.text$mn:00003DE5                 mov     ecx, [ebp+arg_4]
.text$mn:00003DE8                 mov     [edx+10h], ecx
.text$mn:00003DEB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003DF2                 mov     eax, [ebp+var_30]
.text$mn:00003DF5                 mov     ecx, [ebp+var_C]
.text$mn:00003DF8                 mov     large fs:0, ecx
.text$mn:00003DFF                 pop     ecx
.text$mn:00003E00                 mov     ecx, [ebp+var_10]
.text$mn:00003E03                 xor     ecx, ebp
.text$mn:00003E05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003E0A                 mov     esp, ebp
.text$mn:00003E0C                 pop     ebp
.text$mn:00003E0D                 retn    0Ch
.text$mn:00003E0D ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:00003E0D
.text$mn:00003E0D _text$mn        ends
.text$mn:00003E0D
.text$x:00003E10 ; ===========================================================================
.text$x:00003E10
.text$x:00003E10 ; Segment type: Pure code
.text$x:00003E10 ; Segment permissions: Read/Execute
.text$x:00003E10 _text$x         segment para public 'CODE' use32
.text$x:00003E10                 assume cs:_text$x
.text$x:00003E10                 ;org 3E10h
.text$x:00003E10 ; COMDAT (pick associative to section at 3D44)
.text$x:00003E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003E10
.text$x:00003E10 ; =============== S U B R O U T I N E =======================================
.text$x:00003E10
.text$x:00003E10
.text$x:00003E10 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:00003E10                                         ; DATA XREF: .xdata$x:00009428o
.text$x:00003E10                 mov     ecx, [ebp-40h]
.text$x:00003E13                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003E13 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:00003E13
.text$x:00003E18
.text$x:00003E18 ; =============== S U B R O U T I N E =======================================
.text$x:00003E18
.text$x:00003E18
.text$x:00003E18 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 proc near
.text$x:00003E18                                         ; DATA XREF: .xdata$x:00009430o
.text$x:00003E18                 lea     ecx, [ebp-2Ch]
.text$x:00003E1B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00003E1B __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1 endp
.text$x:00003E1B
.text$x:00003E20
.text$x:00003E20 ; =============== S U B R O U T I N E =======================================
.text$x:00003E20
.text$x:00003E20
.text$x:00003E20 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 proc near
.text$x:00003E20                                         ; DATA XREF: .xdata$x:00009438o
.text$x:00003E20                                         ; .xdata$x:00009440o
.text$x:00003E20                 mov     ecx, [ebp-30h]  ; this
.text$x:00003E23                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00003E23 __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2 endp
.text$x:00003E23
.text$x:00003E28
.text$x:00003E28 ; =============== S U B R O U T I N E =======================================
.text$x:00003E28
.text$x:00003E28
.text$x:00003E28 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:00003E28                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00003E28
.text$x:00003E28 arg_4           = dword ptr  8
.text$x:00003E28
.text$x:00003E28                 mov     edx, [esp+arg_4]
.text$x:00003E2C                 lea     eax, [edx+0Ch]
.text$x:00003E2F                 mov     ecx, [edx-3Ch]
.text$x:00003E32                 xor     ecx, eax
.text$x:00003E34                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E39                 mov     ecx, [edx-4]
.text$x:00003E3C                 xor     ecx, eax
.text$x:00003E3E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E43                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:00003E48                 jmp     ___CxxFrameHandler3
.text$x:00003E48 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:00003E48
.text$x:00003E48 ; ---------------------------------------------------------------------------
.text$x:00003E4D                 align 10h
.text$x:00003E4D _text$x         ends
.text$x:00003E4D
.text$mn:00003E50 ; ===========================================================================
.text$mn:00003E50
.text$mn:00003E50 ; Segment type: Pure code
.text$mn:00003E50 ; Segment permissions: Read/Execute
.text$mn:00003E50 _text$mn        segment para public 'CODE' use32
.text$mn:00003E50                 assume cs:_text$mn
.text$mn:00003E50                 ;org 3E50h
.text$mn:00003E50 ; COMDAT (pick any)
.text$mn:00003E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E50
.text$mn:00003E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E50
.text$mn:00003E50 ; Attributes: bp-based frame
.text$mn:00003E50
.text$mn:00003E50 ; _DWORD __thiscall std::_System_error::_System_error(std::_System_error *this, const struct std::_System_error *)
.text$mn:00003E50                 public ??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00003E50 ??0_System_error@std@@QAE@ABV01@@Z proc near
.text$mn:00003E50                                         ; CODE XREF: std::system_error::system_error(std::system_error const &)+2Dp
.text$mn:00003E50                                         ; DATA XREF: .xdata$x:0000A32Co
.text$mn:00003E50
.text$mn:00003E50 var_10          = dword ptr -10h
.text$mn:00003E50 var_C           = dword ptr -0Ch
.text$mn:00003E50 var_4           = dword ptr -4
.text$mn:00003E50 arg_0           = dword ptr  8
.text$mn:00003E50
.text$mn:00003E50                 push    ebp
.text$mn:00003E51                 mov     ebp, esp
.text$mn:00003E53                 push    0FFFFFFFFh
.text$mn:00003E55                 push    offset __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
.text$mn:00003E5A                 mov     eax, large fs:0
.text$mn:00003E60                 push    eax
.text$mn:00003E61                 push    ecx
.text$mn:00003E62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003E67                 xor     eax, ebp
.text$mn:00003E69                 push    eax
.text$mn:00003E6A                 lea     eax, [ebp+var_C]
.text$mn:00003E6D                 mov     large fs:0, eax
.text$mn:00003E73                 mov     [ebp+var_10], ecx
.text$mn:00003E76                 mov     eax, [ebp+arg_0]
.text$mn:00003E79                 push    eax             ; struct std::runtime_error *
.text$mn:00003E7A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003E7D                 call    ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.text$mn:00003E82                 mov     [ebp+var_4], 0
.text$mn:00003E89                 mov     ecx, [ebp+var_10]
.text$mn:00003E8C                 mov     dword ptr [ecx], offset ??_7_System_error@std@@6B@ ; const std::_System_error::`vftable'
.text$mn:00003E92                 mov     edx, [ebp+arg_0]
.text$mn:00003E95                 mov     eax, [edx+0Ch]
.text$mn:00003E98                 mov     ecx, [edx+10h]
.text$mn:00003E9B                 mov     edx, [ebp+var_10]
.text$mn:00003E9E                 mov     [edx+0Ch], eax
.text$mn:00003EA1                 mov     [edx+10h], ecx
.text$mn:00003EA4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003EAB                 mov     eax, [ebp+var_10]
.text$mn:00003EAE                 mov     ecx, [ebp+var_C]
.text$mn:00003EB1                 mov     large fs:0, ecx
.text$mn:00003EB8                 pop     ecx
.text$mn:00003EB9                 mov     esp, ebp
.text$mn:00003EBB                 pop     ebp
.text$mn:00003EBC                 retn    4
.text$mn:00003EBC ??0_System_error@std@@QAE@ABV01@@Z endp
.text$mn:00003EBC
.text$mn:00003EBC ; ---------------------------------------------------------------------------
.text$mn:00003EBF                 align 10h
.text$mn:00003EBF _text$mn        ends
.text$mn:00003EBF
.text$x:00003EC0 ; ===========================================================================
.text$x:00003EC0
.text$x:00003EC0 ; Segment type: Pure code
.text$x:00003EC0 ; Segment permissions: Read/Execute
.text$x:00003EC0 _text$x         segment para public 'CODE' use32
.text$x:00003EC0                 assume cs:_text$x
.text$x:00003EC0                 ;org 3EC0h
.text$x:00003EC0 ; COMDAT (pick associative to section at 3E50)
.text$x:00003EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003EC0
.text$x:00003EC0 ; =============== S U B R O U T I N E =======================================
.text$x:00003EC0
.text$x:00003EC0
.text$x:00003EC0 __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00003EC0                                         ; DATA XREF: .xdata$x:00009498o
.text$x:00003EC0                 mov     ecx, [ebp-10h]  ; this
.text$x:00003EC3                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:00003EC3 __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00003EC3
.text$x:00003EC8
.text$x:00003EC8 ; =============== S U B R O U T I N E =======================================
.text$x:00003EC8
.text$x:00003EC8
.text$x:00003EC8 __ehhandler$??0_System_error@std@@QAE@ABV01@@Z proc near
.text$x:00003EC8                                         ; DATA XREF: std::_System_error::_System_error(std::_System_error const &)+5o
.text$x:00003EC8
.text$x:00003EC8 arg_4           = dword ptr  8
.text$x:00003EC8
.text$x:00003EC8                 mov     edx, [esp+arg_4]
.text$x:00003ECC                 lea     eax, [edx+0Ch]
.text$x:00003ECF                 mov     ecx, [edx-8]
.text$x:00003ED2                 xor     ecx, eax
.text$x:00003ED4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ED9                 mov     eax, offset __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z
.text$x:00003EDE                 jmp     ___CxxFrameHandler3
.text$x:00003EDE __ehhandler$??0_System_error@std@@QAE@ABV01@@Z endp
.text$x:00003EDE
.text$x:00003EDE ; ---------------------------------------------------------------------------
.text$x:00003EE3                 align 4
.text$x:00003EE3 _text$x         ends
.text$x:00003EE3
.text$mn:00003EE4 ; ===========================================================================
.text$mn:00003EE4
.text$mn:00003EE4 ; Segment type: Pure code
.text$mn:00003EE4 ; Segment permissions: Read/Execute
.text$mn:00003EE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003EE4                 assume cs:_text$mn
.text$mn:00003EE4                 ;org 3EE4h
.text$mn:00003EE4 ; COMDAT (pick any)
.text$mn:00003EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EE4
.text$mn:00003EE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EE4
.text$mn:00003EE4 ; Attributes: bp-based frame
.text$mn:00003EE4
.text$mn:00003EE4 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00003EE4                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00003EE4 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00003EE4                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00003EE4
.text$mn:00003EE4 var_10          = dword ptr -10h
.text$mn:00003EE4 var_C           = dword ptr -0Ch
.text$mn:00003EE4 var_4           = dword ptr -4
.text$mn:00003EE4
.text$mn:00003EE4                 push    ebp
.text$mn:00003EE5                 mov     ebp, esp
.text$mn:00003EE7                 push    0FFFFFFFFh
.text$mn:00003EE9                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00003EEE                 mov     eax, large fs:0
.text$mn:00003EF4                 push    eax
.text$mn:00003EF5                 push    ecx
.text$mn:00003EF6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003EFB                 xor     eax, ebp
.text$mn:00003EFD                 push    eax
.text$mn:00003EFE                 lea     eax, [ebp+var_C]
.text$mn:00003F01                 mov     large fs:0, eax
.text$mn:00003F07                 mov     [ebp+var_10], ecx
.text$mn:00003F0A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003F0D                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00003F12                 mov     [ebp+var_4], 0
.text$mn:00003F19                 mov     eax, [ebp+var_10]
.text$mn:00003F1C                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00003F22                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F29                 mov     eax, [ebp+var_10]
.text$mn:00003F2C                 mov     ecx, [ebp+var_C]
.text$mn:00003F2F                 mov     large fs:0, ecx
.text$mn:00003F36                 pop     ecx
.text$mn:00003F37                 mov     esp, ebp
.text$mn:00003F39                 pop     ebp
.text$mn:00003F3A                 retn
.text$mn:00003F3A ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00003F3A
.text$mn:00003F3A ; ---------------------------------------------------------------------------
.text$mn:00003F3B                 align 4
.text$mn:00003F3B _text$mn        ends
.text$mn:00003F3B
.text$x:00003F3C ; ===========================================================================
.text$x:00003F3C
.text$x:00003F3C ; Segment type: Pure code
.text$x:00003F3C ; Segment permissions: Read/Execute
.text$x:00003F3C _text$x         segment para public 'CODE' use32
.text$x:00003F3C                 assume cs:_text$x
.text$x:00003F3C                 ;org 3F3Ch
.text$x:00003F3C ; COMDAT (pick associative to section at 3EE4)
.text$x:00003F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F3C
.text$x:00003F3C ; =============== S U B R O U T I N E =======================================
.text$x:00003F3C
.text$x:00003F3C
.text$x:00003F3C __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00003F3C                                         ; DATA XREF: .xdata$x:00009660o
.text$x:00003F3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00003F3F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00003F3F __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00003F3F
.text$x:00003F44
.text$x:00003F44 ; =============== S U B R O U T I N E =======================================
.text$x:00003F44
.text$x:00003F44
.text$x:00003F44 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00003F44                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00003F44
.text$x:00003F44 arg_4           = dword ptr  8
.text$x:00003F44
.text$x:00003F44                 mov     edx, [esp+arg_4]
.text$x:00003F48                 lea     eax, [edx+0Ch]
.text$x:00003F4B                 mov     ecx, [edx-8]
.text$x:00003F4E                 xor     ecx, eax
.text$x:00003F50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F55                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00003F5A                 jmp     ___CxxFrameHandler3
.text$x:00003F5A __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00003F5A
.text$x:00003F5A ; ---------------------------------------------------------------------------
.text$x:00003F5F                 align 10h
.text$x:00003F5F _text$x         ends
.text$x:00003F5F
.text$mn:00003F60 ; ===========================================================================
.text$mn:00003F60
.text$mn:00003F60 ; Segment type: Pure code
.text$mn:00003F60 ; Segment permissions: Read/Execute
.text$mn:00003F60 _text$mn        segment para public 'CODE' use32
.text$mn:00003F60                 assume cs:_text$mn
.text$mn:00003F60                 ;org 3F60h
.text$mn:00003F60 ; COMDAT (pick any)
.text$mn:00003F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F60
.text$mn:00003F60 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F60
.text$mn:00003F60 ; Attributes: bp-based frame
.text$mn:00003F60
.text$mn:00003F60 ; _DWORD __thiscall std::ctype_base::ctype_base(std::ctype_base *this, unsigned int)
.text$mn:00003F60                 public ??0ctype_base@std@@QAE@I@Z
.text$mn:00003F60 ??0ctype_base@std@@QAE@I@Z proc near    ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+2Dp
.text$mn:00003F60
.text$mn:00003F60 var_10          = dword ptr -10h
.text$mn:00003F60 var_C           = dword ptr -0Ch
.text$mn:00003F60 var_4           = dword ptr -4
.text$mn:00003F60 arg_0           = dword ptr  8
.text$mn:00003F60
.text$mn:00003F60                 push    ebp
.text$mn:00003F61                 mov     ebp, esp
.text$mn:00003F63                 push    0FFFFFFFFh
.text$mn:00003F65                 push    offset __ehhandler$??0ctype_base@std@@QAE@I@Z
.text$mn:00003F6A                 mov     eax, large fs:0
.text$mn:00003F70                 push    eax
.text$mn:00003F71                 push    ecx
.text$mn:00003F72                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F77                 xor     eax, ebp
.text$mn:00003F79                 push    eax
.text$mn:00003F7A                 lea     eax, [ebp+var_C]
.text$mn:00003F7D                 mov     large fs:0, eax
.text$mn:00003F83                 mov     [ebp+var_10], ecx
.text$mn:00003F86                 mov     eax, [ebp+arg_0]
.text$mn:00003F89                 push    eax             ; unsigned int
.text$mn:00003F8A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003F8D                 call    ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet(uint)
.text$mn:00003F92                 mov     [ebp+var_4], 0
.text$mn:00003F99                 mov     ecx, [ebp+var_10]
.text$mn:00003F9C                 mov     dword ptr [ecx], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:00003FA2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003FA9                 mov     eax, [ebp+var_10]
.text$mn:00003FAC                 mov     ecx, [ebp+var_C]
.text$mn:00003FAF                 mov     large fs:0, ecx
.text$mn:00003FB6                 pop     ecx
.text$mn:00003FB7                 mov     esp, ebp
.text$mn:00003FB9                 pop     ebp
.text$mn:00003FBA                 retn    4
.text$mn:00003FBA ??0ctype_base@std@@QAE@I@Z endp
.text$mn:00003FBA
.text$mn:00003FBA ; ---------------------------------------------------------------------------
.text$mn:00003FBD                 align 10h
.text$mn:00003FBD _text$mn        ends
.text$mn:00003FBD
.text$x:00003FC0 ; ===========================================================================
.text$x:00003FC0
.text$x:00003FC0 ; Segment type: Pure code
.text$x:00003FC0 ; Segment permissions: Read/Execute
.text$x:00003FC0 _text$x         segment para public 'CODE' use32
.text$x:00003FC0                 assume cs:_text$x
.text$x:00003FC0                 ;org 3FC0h
.text$x:00003FC0 ; COMDAT (pick associative to section at 3F60)
.text$x:00003FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003FC0
.text$x:00003FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00003FC0
.text$x:00003FC0
.text$x:00003FC0 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 proc near
.text$x:00003FC0                                         ; DATA XREF: .xdata$x:000092D4o
.text$x:00003FC0                 mov     ecx, [ebp-10h]  ; this
.text$x:00003FC3                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00003FC3 __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0 endp
.text$x:00003FC3
.text$x:00003FC8
.text$x:00003FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00003FC8
.text$x:00003FC8
.text$x:00003FC8 __ehhandler$??0ctype_base@std@@QAE@I@Z proc near
.text$x:00003FC8                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+5o
.text$x:00003FC8
.text$x:00003FC8 arg_4           = dword ptr  8
.text$x:00003FC8
.text$x:00003FC8                 mov     edx, [esp+arg_4]
.text$x:00003FCC                 lea     eax, [edx+0Ch]
.text$x:00003FCF                 mov     ecx, [edx-8]
.text$x:00003FD2                 xor     ecx, eax
.text$x:00003FD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FD9                 mov     eax, offset __ehfuncinfo$??0ctype_base@std@@QAE@I@Z
.text$x:00003FDE                 jmp     ___CxxFrameHandler3
.text$x:00003FDE __ehhandler$??0ctype_base@std@@QAE@I@Z endp
.text$x:00003FDE
.text$x:00003FDE ; ---------------------------------------------------------------------------
.text$x:00003FE3                 align 4
.text$x:00003FE3 _text$x         ends
.text$x:00003FE3
.text$mn:00003FE4 ; ===========================================================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Segment type: Pure code
.text$mn:00003FE4 ; Segment permissions: Read/Execute
.text$mn:00003FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003FE4                 assume cs:_text$mn
.text$mn:00003FE4                 ;org 3FE4h
.text$mn:00003FE4 ; COMDAT (pick any)
.text$mn:00003FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FE4
.text$mn:00003FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Attributes: bp-based frame
.text$mn:00003FE4
.text$mn:00003FE4 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00003FE4                 public ??0error_category@std@@QAE@XZ
.text$mn:00003FE4 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00003FE4
.text$mn:00003FE4 var_4           = dword ptr -4
.text$mn:00003FE4
.text$mn:00003FE4                 push    ebp
.text$mn:00003FE5                 mov     ebp, esp
.text$mn:00003FE7                 push    ecx
.text$mn:00003FE8                 mov     [ebp+var_4], ecx
.text$mn:00003FEB                 mov     eax, [ebp+var_4]
.text$mn:00003FEE                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00003FF4                 mov     eax, [ebp+var_4]
.text$mn:00003FF7                 mov     esp, ebp
.text$mn:00003FF9                 pop     ebp
.text$mn:00003FFA                 retn
.text$mn:00003FFA ??0error_category@std@@QAE@XZ endp
.text$mn:00003FFA
.text$mn:00003FFA ; ---------------------------------------------------------------------------
.text$mn:00003FFB                 align 4
.text$mn:00003FFB _text$mn        ends
.text$mn:00003FFB
.text$mn:00003FFC ; ===========================================================================
.text$mn:00003FFC
.text$mn:00003FFC ; Segment type: Pure code
.text$mn:00003FFC ; Segment permissions: Read/Execute
.text$mn:00003FFC _text$mn        segment para public 'CODE' use32
.text$mn:00003FFC                 assume cs:_text$mn
.text$mn:00003FFC                 ;org 3FFCh
.text$mn:00003FFC ; COMDAT (pick any)
.text$mn:00003FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FFC
.text$mn:00003FFC ; =============== S U B R O U T I N E =======================================
.text$mn:00003FFC
.text$mn:00003FFC ; Attributes: bp-based frame
.text$mn:00003FFC
.text$mn:00003FFC ; _DWORD __thiscall std::error_code::error_code(std::error_code *this, int, const struct std::error_category *)
.text$mn:00003FFC                 public ??0error_code@std@@QAE@HABVerror_category@1@@Z
.text$mn:00003FFC ??0error_code@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00003FFC                                         ; CODE XREF: std::make_error_code(std::io_errc)+10p
.text$mn:00003FFC
.text$mn:00003FFC var_4           = dword ptr -4
.text$mn:00003FFC arg_0           = dword ptr  8
.text$mn:00003FFC arg_4           = dword ptr  0Ch
.text$mn:00003FFC
.text$mn:00003FFC                 push    ebp
.text$mn:00003FFD                 mov     ebp, esp
.text$mn:00003FFF                 push    ecx
.text$mn:00004000                 mov     [ebp+var_4], ecx
.text$mn:00004003                 mov     eax, [ebp+var_4]
.text$mn:00004006                 mov     ecx, [ebp+arg_0]
.text$mn:00004009                 mov     [eax], ecx
.text$mn:0000400B                 mov     edx, [ebp+var_4]
.text$mn:0000400E                 mov     eax, [ebp+arg_4]
.text$mn:00004011                 mov     [edx+4], eax
.text$mn:00004014                 mov     eax, [ebp+var_4]
.text$mn:00004017                 mov     esp, ebp
.text$mn:00004019                 pop     ebp
.text$mn:0000401A                 retn    8
.text$mn:0000401A ??0error_code@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:0000401A
.text$mn:0000401A ; ---------------------------------------------------------------------------
.text$mn:0000401D                 align 10h
.text$mn:0000401D _text$mn        ends
.text$mn:0000401D
.text$mn:00004020 ; ===========================================================================
.text$mn:00004020
.text$mn:00004020 ; Segment type: Pure code
.text$mn:00004020 ; Segment permissions: Read/Execute
.text$mn:00004020 _text$mn        segment para public 'CODE' use32
.text$mn:00004020                 assume cs:_text$mn
.text$mn:00004020                 ;org 4020h
.text$mn:00004020 ; COMDAT (pick any)
.text$mn:00004020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004020
.text$mn:00004020 ; =============== S U B R O U T I N E =======================================
.text$mn:00004020
.text$mn:00004020 ; Attributes: bp-based frame
.text$mn:00004020
.text$mn:00004020 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00004020                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00004020 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00004020                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00004020                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00004020
.text$mn:00004020 var_4           = dword ptr -4
.text$mn:00004020 arg_0           = dword ptr  8
.text$mn:00004020 arg_4           = dword ptr  0Ch
.text$mn:00004020
.text$mn:00004020                 push    ebp
.text$mn:00004021                 mov     ebp, esp
.text$mn:00004023                 push    ecx
.text$mn:00004024                 mov     [ebp+var_4], ecx
.text$mn:00004027                 mov     eax, [ebp+var_4]
.text$mn:0000402A                 mov     ecx, [ebp+arg_0]
.text$mn:0000402D                 mov     [eax], ecx
.text$mn:0000402F                 mov     edx, [ebp+var_4]
.text$mn:00004032                 mov     eax, [ebp+arg_4]
.text$mn:00004035                 mov     [edx+4], eax
.text$mn:00004038                 mov     eax, [ebp+var_4]
.text$mn:0000403B                 mov     esp, ebp
.text$mn:0000403D                 pop     ebp
.text$mn:0000403E                 retn    8
.text$mn:0000403E ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:0000403E
.text$mn:0000403E ; ---------------------------------------------------------------------------
.text$mn:00004041                 align 4
.text$mn:00004041 _text$mn        ends
.text$mn:00004041
.text$mn:00004044 ; ===========================================================================
.text$mn:00004044
.text$mn:00004044 ; Segment type: Pure code
.text$mn:00004044 ; Segment permissions: Read/Execute
.text$mn:00004044 _text$mn        segment para public 'CODE' use32
.text$mn:00004044                 assume cs:_text$mn
.text$mn:00004044                 ;org 4044h
.text$mn:00004044 ; COMDAT (pick any)
.text$mn:00004044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004044
.text$mn:00004044 ; =============== S U B R O U T I N E =======================================
.text$mn:00004044
.text$mn:00004044 ; Attributes: bp-based frame
.text$mn:00004044
.text$mn:00004044 ; _DWORD __thiscall std::locale::facet::facet(std::locale::facet *this, unsigned int)
.text$mn:00004044                 public ??0facet@locale@std@@IAE@I@Z
.text$mn:00004044 ??0facet@locale@std@@IAE@I@Z proc near  ; CODE XREF: std::ctype_base::ctype_base(uint)+2Dp
.text$mn:00004044
.text$mn:00004044 var_10          = dword ptr -10h
.text$mn:00004044 var_C           = dword ptr -0Ch
.text$mn:00004044 var_4           = dword ptr -4
.text$mn:00004044 arg_0           = dword ptr  8
.text$mn:00004044
.text$mn:00004044                 push    ebp
.text$mn:00004045                 mov     ebp, esp
.text$mn:00004047                 push    0FFFFFFFFh
.text$mn:00004049                 push    offset __ehhandler$??0facet@locale@std@@IAE@I@Z
.text$mn:0000404E                 mov     eax, large fs:0
.text$mn:00004054                 push    eax
.text$mn:00004055                 push    ecx
.text$mn:00004056                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000405B                 xor     eax, ebp
.text$mn:0000405D                 push    eax
.text$mn:0000405E                 lea     eax, [ebp+var_C]
.text$mn:00004061                 mov     large fs:0, eax
.text$mn:00004067                 mov     [ebp+var_10], ecx
.text$mn:0000406A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000406D                 call    ??0_Facet_base@std@@QAE@XZ ; std::_Facet_base::_Facet_base(void)
.text$mn:00004072                 mov     [ebp+var_4], 0
.text$mn:00004079                 mov     eax, [ebp+var_10]
.text$mn:0000407C                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00004082                 mov     ecx, [ebp+arg_0]
.text$mn:00004085                 push    ecx             ; unsigned __int32
.text$mn:00004086                 mov     edx, [ebp+var_10]
.text$mn:00004089                 add     edx, 4
.text$mn:0000408C                 push    edx             ; unsigned __int32 *
.text$mn:0000408D                 call    ?_Init_atomic_counter@std@@YAXAAKK@Z ; std::_Init_atomic_counter(ulong &,ulong)
.text$mn:00004092                 add     esp, 8
.text$mn:00004095                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000409C                 mov     eax, [ebp+var_10]
.text$mn:0000409F                 mov     ecx, [ebp+var_C]
.text$mn:000040A2                 mov     large fs:0, ecx
.text$mn:000040A9                 pop     ecx
.text$mn:000040AA                 mov     esp, ebp
.text$mn:000040AC                 pop     ebp
.text$mn:000040AD                 retn    4
.text$mn:000040AD ??0facet@locale@std@@IAE@I@Z endp
.text$mn:000040AD
.text$mn:000040AD _text$mn        ends
.text$mn:000040AD
.text$x:000040B0 ; ===========================================================================
.text$x:000040B0
.text$x:000040B0 ; Segment type: Pure code
.text$x:000040B0 ; Segment permissions: Read/Execute
.text$x:000040B0 _text$x         segment para public 'CODE' use32
.text$x:000040B0                 assume cs:_text$x
.text$x:000040B0                 ;org 40B0h
.text$x:000040B0 ; COMDAT (pick associative to section at 4044)
.text$x:000040B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000040B0
.text$x:000040B0 ; =============== S U B R O U T I N E =======================================
.text$x:000040B0
.text$x:000040B0
.text$x:000040B0 __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 proc near
.text$x:000040B0                                         ; DATA XREF: .xdata$x:0000927Co
.text$x:000040B0                 mov     ecx, [ebp-10h]  ; this
.text$x:000040B3                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:000040B3 __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0 endp
.text$x:000040B3
.text$x:000040B8
.text$x:000040B8 ; =============== S U B R O U T I N E =======================================
.text$x:000040B8
.text$x:000040B8
.text$x:000040B8 __ehhandler$??0facet@locale@std@@IAE@I@Z proc near
.text$x:000040B8                                         ; DATA XREF: std::locale::facet::facet(uint)+5o
.text$x:000040B8
.text$x:000040B8 arg_4           = dword ptr  8
.text$x:000040B8
.text$x:000040B8                 mov     edx, [esp+arg_4]
.text$x:000040BC                 lea     eax, [edx+0Ch]
.text$x:000040BF                 mov     ecx, [edx-8]
.text$x:000040C2                 xor     ecx, eax
.text$x:000040C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040C9                 mov     eax, offset __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
.text$x:000040CE                 jmp     ___CxxFrameHandler3
.text$x:000040CE __ehhandler$??0facet@locale@std@@IAE@I@Z endp
.text$x:000040CE
.text$x:000040CE ; ---------------------------------------------------------------------------
.text$x:000040D3                 align 4
.text$x:000040D3 _text$x         ends
.text$x:000040D3
.text$mn:000040D4 ; ===========================================================================
.text$mn:000040D4
.text$mn:000040D4 ; Segment type: Pure code
.text$mn:000040D4 ; Segment permissions: Read/Execute
.text$mn:000040D4 _text$mn        segment para public 'CODE' use32
.text$mn:000040D4                 assume cs:_text$mn
.text$mn:000040D4                 ;org 40D4h
.text$mn:000040D4 ; COMDAT (pick any)
.text$mn:000040D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040D4
.text$mn:000040D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000040D4
.text$mn:000040D4 ; Attributes: bp-based frame
.text$mn:000040D4
.text$mn:000040D4 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const struct std::ios_base::failure *)
.text$mn:000040D4                 public ??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:000040D4 ??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$mn:000040D4                                         ; DATA XREF: .xdata$x:0000A2B4o
.text$mn:000040D4
.text$mn:000040D4 var_10          = dword ptr -10h
.text$mn:000040D4 var_C           = dword ptr -0Ch
.text$mn:000040D4 var_4           = dword ptr -4
.text$mn:000040D4 arg_0           = dword ptr  8
.text$mn:000040D4
.text$mn:000040D4                 push    ebp
.text$mn:000040D5                 mov     ebp, esp
.text$mn:000040D7                 push    0FFFFFFFFh
.text$mn:000040D9                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$mn:000040DE                 mov     eax, large fs:0
.text$mn:000040E4                 push    eax
.text$mn:000040E5                 push    ecx
.text$mn:000040E6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000040EB                 xor     eax, ebp
.text$mn:000040ED                 push    eax
.text$mn:000040EE                 lea     eax, [ebp+var_C]
.text$mn:000040F1                 mov     large fs:0, eax
.text$mn:000040F7                 mov     [ebp+var_10], ecx
.text$mn:000040FA                 mov     eax, [ebp+arg_0]
.text$mn:000040FD                 push    eax             ; struct std::system_error *
.text$mn:000040FE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004101                 call    ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.text$mn:00004106                 mov     [ebp+var_4], 0
.text$mn:0000410D                 mov     ecx, [ebp+var_10]
.text$mn:00004110                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:00004116                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000411D                 mov     eax, [ebp+var_10]
.text$mn:00004120                 mov     ecx, [ebp+var_C]
.text$mn:00004123                 mov     large fs:0, ecx
.text$mn:0000412A                 pop     ecx
.text$mn:0000412B                 mov     esp, ebp
.text$mn:0000412D                 pop     ebp
.text$mn:0000412E                 retn    4
.text$mn:0000412E ??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$mn:0000412E
.text$mn:0000412E ; ---------------------------------------------------------------------------
.text$mn:00004131                 align 4
.text$mn:00004131 _text$mn        ends
.text$mn:00004131
.text$x:00004134 ; ===========================================================================
.text$x:00004134
.text$x:00004134 ; Segment type: Pure code
.text$x:00004134 ; Segment permissions: Read/Execute
.text$x:00004134 _text$x         segment para public 'CODE' use32
.text$x:00004134                 assume cs:_text$x
.text$x:00004134                 ;org 4134h
.text$x:00004134 ; COMDAT (pick associative to section at 40D4)
.text$x:00004134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004134
.text$x:00004134 ; =============== S U B R O U T I N E =======================================
.text$x:00004134
.text$x:00004134
.text$x:00004134 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 proc near
.text$x:00004134                                         ; DATA XREF: .xdata$x:0000973Co
.text$x:00004134                 mov     ecx, [ebp-10h]  ; this
.text$x:00004137                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:00004137 __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0 endp
.text$x:00004137
.text$x:0000413C
.text$x:0000413C ; =============== S U B R O U T I N E =======================================
.text$x:0000413C
.text$x:0000413C
.text$x:0000413C __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z proc near
.text$x:0000413C                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+5o
.text$x:0000413C
.text$x:0000413C arg_4           = dword ptr  8
.text$x:0000413C
.text$x:0000413C                 mov     edx, [esp+arg_4]
.text$x:00004140                 lea     eax, [edx+0Ch]
.text$x:00004143                 mov     ecx, [edx-8]
.text$x:00004146                 xor     ecx, eax
.text$x:00004148                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000414D                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z
.text$x:00004152                 jmp     ___CxxFrameHandler3
.text$x:00004152 __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z endp
.text$x:00004152
.text$x:00004152 ; ---------------------------------------------------------------------------
.text$x:00004157                 align 4
.text$x:00004157 _text$x         ends
.text$x:00004157
.text$mn:00004158 ; ===========================================================================
.text$mn:00004158
.text$mn:00004158 ; Segment type: Pure code
.text$mn:00004158 ; Segment permissions: Read/Execute
.text$mn:00004158 _text$mn        segment para public 'CODE' use32
.text$mn:00004158                 assume cs:_text$mn
.text$mn:00004158                 ;org 4158h
.text$mn:00004158 ; COMDAT (pick any)
.text$mn:00004158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004158
.text$mn:00004158 ; =============== S U B R O U T I N E =======================================
.text$mn:00004158
.text$mn:00004158 ; Attributes: bp-based frame
.text$mn:00004158
.text$mn:00004158 ; _DWORD __thiscall std::ios_base::failure::failure(std::ios_base::failure *this, const char *, const struct std::error_code *)
.text$mn:00004158                 public ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:00004158 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$mn:00004158                                         ; CODE XREF: std::ios_base::clear(int,bool)+66p
.text$mn:00004158                                         ; std::ios_base::clear(int,bool)+A3p ...
.text$mn:00004158
.text$mn:00004158 var_10          = dword ptr -10h
.text$mn:00004158 var_C           = dword ptr -0Ch
.text$mn:00004158 var_4           = dword ptr -4
.text$mn:00004158 arg_0           = dword ptr  8
.text$mn:00004158 arg_4           = dword ptr  0Ch
.text$mn:00004158
.text$mn:00004158                 push    ebp
.text$mn:00004159                 mov     ebp, esp
.text$mn:0000415B                 push    0FFFFFFFFh
.text$mn:0000415D                 push    offset __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$mn:00004162                 mov     eax, large fs:0
.text$mn:00004168                 push    eax
.text$mn:00004169                 push    ecx
.text$mn:0000416A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000416F                 xor     eax, ebp
.text$mn:00004171                 push    eax
.text$mn:00004172                 lea     eax, [ebp+var_C]
.text$mn:00004175                 mov     large fs:0, eax
.text$mn:0000417B                 mov     [ebp+var_10], ecx
.text$mn:0000417E                 mov     eax, [ebp+arg_0]
.text$mn:00004181                 push    eax
.text$mn:00004182                 mov     ecx, [ebp+arg_4]
.text$mn:00004185                 mov     edx, [ecx+4]
.text$mn:00004188                 push    edx
.text$mn:00004189                 mov     eax, [ecx]
.text$mn:0000418B                 push    eax
.text$mn:0000418C                 mov     ecx, [ebp+var_10]
.text$mn:0000418F                 call    ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error(std::error_code,char const *)
.text$mn:00004194                 mov     [ebp+var_4], 0
.text$mn:0000419B                 mov     ecx, [ebp+var_10]
.text$mn:0000419E                 mov     dword ptr [ecx], offset ??_7failure@ios_base@std@@6B@ ; const std::ios_base::failure::`vftable'
.text$mn:000041A4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041AB                 mov     eax, [ebp+var_10]
.text$mn:000041AE                 mov     ecx, [ebp+var_C]
.text$mn:000041B1                 mov     large fs:0, ecx
.text$mn:000041B8                 pop     ecx
.text$mn:000041B9                 mov     esp, ebp
.text$mn:000041BB                 pop     ebp
.text$mn:000041BC                 retn    8
.text$mn:000041BC ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$mn:000041BC
.text$mn:000041BC ; ---------------------------------------------------------------------------
.text$mn:000041BF                 align 10h
.text$mn:000041BF _text$mn        ends
.text$mn:000041BF
.text$x:000041C0 ; ===========================================================================
.text$x:000041C0
.text$x:000041C0 ; Segment type: Pure code
.text$x:000041C0 ; Segment permissions: Read/Execute
.text$x:000041C0 _text$x         segment para public 'CODE' use32
.text$x:000041C0                 assume cs:_text$x
.text$x:000041C0                 ;org 41C0h
.text$x:000041C0 ; COMDAT (pick associative to section at 4158)
.text$x:000041C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000041C0
.text$x:000041C0 ; =============== S U B R O U T I N E =======================================
.text$x:000041C0
.text$x:000041C0
.text$x:000041C0 __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 proc near
.text$x:000041C0                                         ; DATA XREF: .xdata$x:000096E4o
.text$x:000041C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000041C3                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:000041C3 __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0 endp
.text$x:000041C3
.text$x:000041C8
.text$x:000041C8 ; =============== S U B R O U T I N E =======================================
.text$x:000041C8
.text$x:000041C8
.text$x:000041C8 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z proc near
.text$x:000041C8                                         ; DATA XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+5o
.text$x:000041C8
.text$x:000041C8 arg_4           = dword ptr  8
.text$x:000041C8
.text$x:000041C8                 mov     edx, [esp+arg_4]
.text$x:000041CC                 lea     eax, [edx+0Ch]
.text$x:000041CF                 mov     ecx, [edx-8]
.text$x:000041D2                 xor     ecx, eax
.text$x:000041D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041D9                 mov     eax, offset __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.text$x:000041DE                 jmp     ___CxxFrameHandler3
.text$x:000041DE __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z endp
.text$x:000041DE
.text$x:000041DE ; ---------------------------------------------------------------------------
.text$x:000041E3                 align 4
.text$x:000041E3 _text$x         ends
.text$x:000041E3
.text$mn:000041E4 ; ===========================================================================
.text$mn:000041E4
.text$mn:000041E4 ; Segment type: Pure code
.text$mn:000041E4 ; Segment permissions: Read/Execute
.text$mn:000041E4 _text$mn        segment para public 'CODE' use32
.text$mn:000041E4                 assume cs:_text$mn
.text$mn:000041E4                 ;org 41E4h
.text$mn:000041E4 ; COMDAT (pick any)
.text$mn:000041E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041E4
.text$mn:000041E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000041E4
.text$mn:000041E4 ; Attributes: bp-based frame
.text$mn:000041E4
.text$mn:000041E4 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:000041E4                 public ??0id@locale@std@@QAE@I@Z
.text$mn:000041E4 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:000041E4                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:000041E4
.text$mn:000041E4 var_4           = dword ptr -4
.text$mn:000041E4 arg_0           = dword ptr  8
.text$mn:000041E4
.text$mn:000041E4                 push    ebp
.text$mn:000041E5                 mov     ebp, esp
.text$mn:000041E7                 push    ecx
.text$mn:000041E8                 mov     [ebp+var_4], ecx
.text$mn:000041EB                 mov     eax, [ebp+var_4]
.text$mn:000041EE                 mov     ecx, [ebp+arg_0]
.text$mn:000041F1                 mov     [eax], ecx
.text$mn:000041F3                 mov     eax, [ebp+var_4]
.text$mn:000041F6                 mov     esp, ebp
.text$mn:000041F8                 pop     ebp
.text$mn:000041F9                 retn    4
.text$mn:000041F9 ??0id@locale@std@@QAE@I@Z endp
.text$mn:000041F9
.text$mn:000041F9 _text$mn        ends
.text$mn:000041F9
.text$mn:000041FC ; ===========================================================================
.text$mn:000041FC
.text$mn:000041FC ; Segment type: Pure code
.text$mn:000041FC ; Segment permissions: Read/Execute
.text$mn:000041FC _text$mn        segment para public 'CODE' use32
.text$mn:000041FC                 assume cs:_text$mn
.text$mn:000041FC                 ;org 41FCh
.text$mn:000041FC ; COMDAT (pick any)
.text$mn:000041FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041FC
.text$mn:000041FC ; =============== S U B R O U T I N E =======================================
.text$mn:000041FC
.text$mn:000041FC ; Attributes: bp-based frame
.text$mn:000041FC
.text$mn:000041FC ; _DWORD __thiscall std::locale::locale(std::locale *this, const struct std::locale *)
.text$mn:000041FC                 public ??0locale@std@@QAE@ABV01@@Z
.text$mn:000041FC ??0locale@std@@QAE@ABV01@@Z proc near   ; CODE XREF: std::ios_base::getloc(void)+39p
.text$mn:000041FC
.text$mn:000041FC var_4           = dword ptr -4
.text$mn:000041FC arg_0           = dword ptr  8
.text$mn:000041FC
.text$mn:000041FC                 push    ebp
.text$mn:000041FD                 mov     ebp, esp
.text$mn:000041FF                 push    ecx
.text$mn:00004200                 mov     [ebp+var_4], ecx
.text$mn:00004203                 mov     eax, [ebp+var_4]
.text$mn:00004206                 mov     ecx, [ebp+arg_0]
.text$mn:00004209                 mov     edx, [ecx]
.text$mn:0000420B                 mov     [eax], edx
.text$mn:0000420D                 mov     eax, [ebp+var_4]
.text$mn:00004210                 mov     ecx, [eax]
.text$mn:00004212                 mov     edx, [ebp+var_4]
.text$mn:00004215                 mov     eax, [ecx]
.text$mn:00004217                 mov     ecx, [edx]
.text$mn:00004219                 mov     edx, [eax+4]
.text$mn:0000421C                 call    edx
.text$mn:0000421E                 mov     eax, [ebp+var_4]
.text$mn:00004221                 mov     esp, ebp
.text$mn:00004223                 pop     ebp
.text$mn:00004224                 retn    4
.text$mn:00004224 ??0locale@std@@QAE@ABV01@@Z endp
.text$mn:00004224
.text$mn:00004224 ; ---------------------------------------------------------------------------
.text$mn:00004227                 align 4
.text$mn:00004227 _text$mn        ends
.text$mn:00004227
.text$mn:00004228 ; ===========================================================================
.text$mn:00004228
.text$mn:00004228 ; Segment type: Pure code
.text$mn:00004228 ; Segment permissions: Read/Execute
.text$mn:00004228 _text$mn        segment para public 'CODE' use32
.text$mn:00004228                 assume cs:_text$mn
.text$mn:00004228                 ;org 4228h
.text$mn:00004228 ; COMDAT (pick any)
.text$mn:00004228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004228
.text$mn:00004228 ; =============== S U B R O U T I N E =======================================
.text$mn:00004228
.text$mn:00004228 ; Attributes: bp-based frame
.text$mn:00004228
.text$mn:00004228 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:00004228                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00004228 ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:00004228                                         ; CODE XREF: std::_System_error::_System_error(std::_System_error const &)+2Dp
.text$mn:00004228                                         ; DATA XREF: .xdata$x:00009FD0o
.text$mn:00004228
.text$mn:00004228 var_10          = dword ptr -10h
.text$mn:00004228 var_C           = dword ptr -0Ch
.text$mn:00004228 var_4           = dword ptr -4
.text$mn:00004228 arg_0           = dword ptr  8
.text$mn:00004228
.text$mn:00004228                 push    ebp
.text$mn:00004229                 mov     ebp, esp
.text$mn:0000422B                 push    0FFFFFFFFh
.text$mn:0000422D                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00004232                 mov     eax, large fs:0
.text$mn:00004238                 push    eax
.text$mn:00004239                 push    ecx
.text$mn:0000423A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000423F                 xor     eax, ebp
.text$mn:00004241                 push    eax
.text$mn:00004242                 lea     eax, [ebp+var_C]
.text$mn:00004245                 mov     large fs:0, eax
.text$mn:0000424B                 mov     [ebp+var_10], ecx
.text$mn:0000424E                 mov     eax, [ebp+arg_0]
.text$mn:00004251                 push    eax             ; struct std::exception *
.text$mn:00004252                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004255                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:0000425A                 mov     [ebp+var_4], 0
.text$mn:00004261                 mov     ecx, [ebp+var_10]
.text$mn:00004264                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:0000426A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004271                 mov     eax, [ebp+var_10]
.text$mn:00004274                 mov     ecx, [ebp+var_C]
.text$mn:00004277                 mov     large fs:0, ecx
.text$mn:0000427E                 pop     ecx
.text$mn:0000427F                 mov     esp, ebp
.text$mn:00004281                 pop     ebp
.text$mn:00004282                 retn    4
.text$mn:00004282 ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:00004282
.text$mn:00004282 ; ---------------------------------------------------------------------------
.text$mn:00004285                 align 4
.text$mn:00004285 _text$mn        ends
.text$mn:00004285
.text$x:00004288 ; ===========================================================================
.text$x:00004288
.text$x:00004288 ; Segment type: Pure code
.text$x:00004288 ; Segment permissions: Read/Execute
.text$x:00004288 _text$x         segment para public 'CODE' use32
.text$x:00004288                 assume cs:_text$x
.text$x:00004288                 ;org 4288h
.text$x:00004288 ; COMDAT (pick associative to section at 4228)
.text$x:00004288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004288
.text$x:00004288 ; =============== S U B R O U T I N E =======================================
.text$x:00004288
.text$x:00004288
.text$x:00004288 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00004288                                         ; DATA XREF: .xdata$x:0000916Co
.text$x:00004288                 mov     ecx, [ebp-10h]  ; this
.text$x:0000428B                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000428B __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:0000428B
.text$x:00004290
.text$x:00004290 ; =============== S U B R O U T I N E =======================================
.text$x:00004290
.text$x:00004290
.text$x:00004290 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:00004290                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:00004290
.text$x:00004290 arg_4           = dword ptr  8
.text$x:00004290
.text$x:00004290                 mov     edx, [esp+arg_4]
.text$x:00004294                 lea     eax, [edx+0Ch]
.text$x:00004297                 mov     ecx, [edx-8]
.text$x:0000429A                 xor     ecx, eax
.text$x:0000429C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042A1                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:000042A6                 jmp     ___CxxFrameHandler3
.text$x:000042A6 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:000042A6
.text$x:000042A6 ; ---------------------------------------------------------------------------
.text$x:000042AB                 align 4
.text$x:000042AB _text$x         ends
.text$x:000042AB
.text$mn:000042AC ; ===========================================================================
.text$mn:000042AC
.text$mn:000042AC ; Segment type: Pure code
.text$mn:000042AC ; Segment permissions: Read/Execute
.text$mn:000042AC _text$mn        segment para public 'CODE' use32
.text$mn:000042AC                 assume cs:_text$mn
.text$mn:000042AC                 ;org 42ACh
.text$mn:000042AC ; COMDAT (pick any)
.text$mn:000042AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042AC
.text$mn:000042AC ; =============== S U B R O U T I N E =======================================
.text$mn:000042AC
.text$mn:000042AC ; Attributes: bp-based frame
.text$mn:000042AC
.text$mn:000042AC ; public: __thiscall std::runtime_error::runtime_error(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:000042AC                 public ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:000042AC ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$mn:000042AC                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+7Ep
.text$mn:000042AC
.text$mn:000042AC var_14          = dword ptr -14h
.text$mn:000042AC var_10          = dword ptr -10h
.text$mn:000042AC var_C           = dword ptr -0Ch
.text$mn:000042AC var_4           = dword ptr -4
.text$mn:000042AC arg_0           = dword ptr  8
.text$mn:000042AC
.text$mn:000042AC                 push    ebp
.text$mn:000042AD                 mov     ebp, esp
.text$mn:000042AF                 push    0FFFFFFFFh
.text$mn:000042B1                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$mn:000042B6                 mov     eax, large fs:0
.text$mn:000042BC                 push    eax
.text$mn:000042BD                 sub     esp, 8
.text$mn:000042C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000042C5                 xor     eax, ebp
.text$mn:000042C7                 push    eax
.text$mn:000042C8                 lea     eax, [ebp+var_C]
.text$mn:000042CB                 mov     large fs:0, eax
.text$mn:000042D1                 mov     [ebp+var_10], ecx
.text$mn:000042D4                 mov     ecx, [ebp+arg_0]
.text$mn:000042D7                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:000042DC                 mov     [ebp+var_14], eax
.text$mn:000042DF                 lea     eax, [ebp+var_14]
.text$mn:000042E2                 push    eax             ; char **
.text$mn:000042E3                 mov     ecx, [ebp+var_10] ; this
.text$mn:000042E6                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:000042EB                 mov     [ebp+var_4], 0
.text$mn:000042F2                 mov     ecx, [ebp+var_10]
.text$mn:000042F5                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:000042FB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004302                 mov     eax, [ebp+var_10]
.text$mn:00004305                 mov     ecx, [ebp+var_C]
.text$mn:00004308                 mov     large fs:0, ecx
.text$mn:0000430F                 pop     ecx
.text$mn:00004310                 mov     esp, ebp
.text$mn:00004312                 pop     ebp
.text$mn:00004313                 retn    4
.text$mn:00004313 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$mn:00004313
.text$mn:00004313 ; ---------------------------------------------------------------------------
.text$mn:00004316                 align 4
.text$mn:00004316 _text$mn        ends
.text$mn:00004316
.text$x:00004318 ; ===========================================================================
.text$x:00004318
.text$x:00004318 ; Segment type: Pure code
.text$x:00004318 ; Segment permissions: Read/Execute
.text$x:00004318 _text$x         segment para public 'CODE' use32
.text$x:00004318                 assume cs:_text$x
.text$x:00004318                 ;org 4318h
.text$x:00004318 ; COMDAT (pick associative to section at 42AC)
.text$x:00004318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004318
.text$x:00004318 ; =============== S U B R O U T I N E =======================================
.text$x:00004318
.text$x:00004318
.text$x:00004318 __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 proc near
.text$x:00004318                                         ; DATA XREF: .xdata$x:000090E8o
.text$x:00004318                 mov     ecx, [ebp-10h]  ; this
.text$x:0000431B                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000431B __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0 endp
.text$x:0000431B
.text$x:00004320
.text$x:00004320 ; =============== S U B R O U T I N E =======================================
.text$x:00004320
.text$x:00004320
.text$x:00004320 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z proc near
.text$x:00004320                                         ; DATA XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5o
.text$x:00004320
.text$x:00004320 arg_4           = dword ptr  8
.text$x:00004320
.text$x:00004320                 mov     edx, [esp+arg_4]
.text$x:00004324                 lea     eax, [edx+0Ch]
.text$x:00004327                 mov     ecx, [edx-0Ch]
.text$x:0000432A                 xor     ecx, eax
.text$x:0000432C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004331                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.text$x:00004336                 jmp     ___CxxFrameHandler3
.text$x:00004336 __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z endp
.text$x:00004336
.text$x:00004336 ; ---------------------------------------------------------------------------
.text$x:0000433B                 align 4
.text$x:0000433B _text$x         ends
.text$x:0000433B
.text$mn:0000433C ; ===========================================================================
.text$mn:0000433C
.text$mn:0000433C ; Segment type: Pure code
.text$mn:0000433C ; Segment permissions: Read/Execute
.text$mn:0000433C _text$mn        segment para public 'CODE' use32
.text$mn:0000433C                 assume cs:_text$mn
.text$mn:0000433C                 ;org 433Ch
.text$mn:0000433C ; COMDAT (pick any)
.text$mn:0000433C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000433C
.text$mn:0000433C ; =============== S U B R O U T I N E =======================================
.text$mn:0000433C
.text$mn:0000433C ; Attributes: bp-based frame
.text$mn:0000433C
.text$mn:0000433C ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:0000433C                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:0000433C ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:0000433C                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+A1p
.text$mn:0000433C
.text$mn:0000433C var_10          = dword ptr -10h
.text$mn:0000433C var_C           = dword ptr -0Ch
.text$mn:0000433C var_4           = dword ptr -4
.text$mn:0000433C arg_0           = dword ptr  8
.text$mn:0000433C
.text$mn:0000433C                 push    ebp
.text$mn:0000433D                 mov     ebp, esp
.text$mn:0000433F                 push    0FFFFFFFFh
.text$mn:00004341                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:00004346                 mov     eax, large fs:0
.text$mn:0000434C                 push    eax
.text$mn:0000434D                 push    ecx
.text$mn:0000434E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004353                 xor     eax, ebp
.text$mn:00004355                 push    eax
.text$mn:00004356                 lea     eax, [ebp+var_C]
.text$mn:00004359                 mov     large fs:0, eax
.text$mn:0000435F                 mov     [ebp+var_10], ecx
.text$mn:00004362                 lea     eax, [ebp+arg_0]
.text$mn:00004365                 push    eax             ; char **
.text$mn:00004366                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004369                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:0000436E                 mov     [ebp+var_4], 0
.text$mn:00004375                 mov     ecx, [ebp+var_10]
.text$mn:00004378                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:0000437E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004385                 mov     eax, [ebp+var_10]
.text$mn:00004388                 mov     ecx, [ebp+var_C]
.text$mn:0000438B                 mov     large fs:0, ecx
.text$mn:00004392                 pop     ecx
.text$mn:00004393                 mov     esp, ebp
.text$mn:00004395                 pop     ebp
.text$mn:00004396                 retn    4
.text$mn:00004396 ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:00004396
.text$mn:00004396 ; ---------------------------------------------------------------------------
.text$mn:00004399                 align 4
.text$mn:00004399 _text$mn        ends
.text$mn:00004399
.text$x:0000439C ; ===========================================================================
.text$x:0000439C
.text$x:0000439C ; Segment type: Pure code
.text$x:0000439C ; Segment permissions: Read/Execute
.text$x:0000439C _text$x         segment para public 'CODE' use32
.text$x:0000439C                 assume cs:_text$x
.text$x:0000439C                 ;org 439Ch
.text$x:0000439C ; COMDAT (pick associative to section at 433C)
.text$x:0000439C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000439C
.text$x:0000439C ; =============== S U B R O U T I N E =======================================
.text$x:0000439C
.text$x:0000439C
.text$x:0000439C __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:0000439C                                         ; DATA XREF: .xdata$x:00009114o
.text$x:0000439C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000439F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000439F __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:0000439F
.text$x:000043A4
.text$x:000043A4 ; =============== S U B R O U T I N E =======================================
.text$x:000043A4
.text$x:000043A4
.text$x:000043A4 __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:000043A4                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:000043A4
.text$x:000043A4 arg_4           = dword ptr  8
.text$x:000043A4
.text$x:000043A4                 mov     edx, [esp+arg_4]
.text$x:000043A8                 lea     eax, [edx+0Ch]
.text$x:000043AB                 mov     ecx, [edx-8]
.text$x:000043AE                 xor     ecx, eax
.text$x:000043B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000043B5                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:000043BA                 jmp     ___CxxFrameHandler3
.text$x:000043BA __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:000043BA
.text$x:000043BA ; ---------------------------------------------------------------------------
.text$x:000043BF                 align 10h
.text$x:000043BF _text$x         ends
.text$x:000043BF
.text$mn:000043C0 ; ===========================================================================
.text$mn:000043C0
.text$mn:000043C0 ; Segment type: Pure code
.text$mn:000043C0 ; Segment permissions: Read/Execute
.text$mn:000043C0 _text$mn        segment para public 'CODE' use32
.text$mn:000043C0                 assume cs:_text$mn
.text$mn:000043C0                 ;org 43C0h
.text$mn:000043C0 ; COMDAT (pick any)
.text$mn:000043C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043C0
.text$mn:000043C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000043C0
.text$mn:000043C0 ; Attributes: bp-based frame
.text$mn:000043C0
.text$mn:000043C0 ; public: __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::sentry::sentry(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> &, bool)
.text$mn:000043C0                 public ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
.text$mn:000043C0 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z proc near
.text$mn:000043C0                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+56p
.text$mn:000043C0                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+56p
.text$mn:000043C0
.text$mn:000043C0 var_10          = dword ptr -10h
.text$mn:000043C0 var_C           = dword ptr -0Ch
.text$mn:000043C0 var_4           = dword ptr -4
.text$mn:000043C0 arg_0           = dword ptr  8
.text$mn:000043C0 arg_4           = byte ptr  0Ch
.text$mn:000043C0
.text$mn:000043C0                 push    ebp
.text$mn:000043C1                 mov     ebp, esp
.text$mn:000043C3                 push    0FFFFFFFFh
.text$mn:000043C5                 push    offset __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
.text$mn:000043CA                 mov     eax, large fs:0
.text$mn:000043D0                 push    eax
.text$mn:000043D1                 push    ecx
.text$mn:000043D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000043D7                 xor     eax, ebp
.text$mn:000043D9                 push    eax
.text$mn:000043DA                 lea     eax, [ebp+var_C]
.text$mn:000043DD                 mov     large fs:0, eax
.text$mn:000043E3                 mov     [ebp+var_10], ecx
.text$mn:000043E6                 mov     eax, [ebp+arg_0]
.text$mn:000043E9                 push    eax
.text$mn:000043EA                 mov     ecx, [ebp+var_10]
.text$mn:000043ED                 call    ??0_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:000043F2                 mov     [ebp+var_4], 0
.text$mn:000043F9                 movzx   ecx, [ebp+arg_4]
.text$mn:000043FD                 push    ecx
.text$mn:000043FE                 mov     edx, [ebp+var_10]
.text$mn:00004401                 mov     ecx, [edx]
.text$mn:00004403                 call    ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)
.text$mn:00004408                 mov     ecx, [ebp+var_10]
.text$mn:0000440B                 mov     [ecx+4], al
.text$mn:0000440E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004415                 mov     eax, [ebp+var_10]
.text$mn:00004418                 mov     ecx, [ebp+var_C]
.text$mn:0000441B                 mov     large fs:0, ecx
.text$mn:00004422                 pop     ecx
.text$mn:00004423                 mov     esp, ebp
.text$mn:00004425                 pop     ebp
.text$mn:00004426                 retn    8
.text$mn:00004426 ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z endp
.text$mn:00004426
.text$mn:00004426 ; ---------------------------------------------------------------------------
.text$mn:00004429                 align 4
.text$mn:00004429 _text$mn        ends
.text$mn:00004429
.text$x:0000442C ; ===========================================================================
.text$x:0000442C
.text$x:0000442C ; Segment type: Pure code
.text$x:0000442C ; Segment permissions: Read/Execute
.text$x:0000442C _text$x         segment para public 'CODE' use32
.text$x:0000442C                 assume cs:_text$x
.text$x:0000442C                 ;org 442Ch
.text$x:0000442C ; COMDAT (pick associative to section at 43C0)
.text$x:0000442C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000442C
.text$x:0000442C ; =============== S U B R O U T I N E =======================================
.text$x:0000442C
.text$x:0000442C
.text$x:0000442C __unwindfunclet$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z$0 proc near
.text$x:0000442C                                         ; DATA XREF: .xdata$x:000098B4o
.text$x:0000442C                 mov     ecx, [ebp-10h]
.text$x:0000442F                 jmp     ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:0000442F __unwindfunclet$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z$0 endp
.text$x:0000442F
.text$x:00004434
.text$x:00004434 ; =============== S U B R O U T I N E =======================================
.text$x:00004434
.text$x:00004434
.text$x:00004434 __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z proc near
.text$x:00004434                                         ; DATA XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,bool)+5o
.text$x:00004434
.text$x:00004434 arg_4           = dword ptr  8
.text$x:00004434
.text$x:00004434                 mov     edx, [esp+arg_4]
.text$x:00004438                 lea     eax, [edx+0Ch]
.text$x:0000443B                 mov     ecx, [edx-8]
.text$x:0000443E                 xor     ecx, eax
.text$x:00004440                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004445                 mov     eax, offset __ehfuncinfo$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
.text$x:0000444A                 jmp     ___CxxFrameHandler3
.text$x:0000444A __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z endp
.text$x:0000444A
.text$x:0000444A ; ---------------------------------------------------------------------------
.text$x:0000444F                 align 10h
.text$x:0000444F _text$x         ends
.text$x:0000444F
.text$mn:00004450 ; ===========================================================================
.text$mn:00004450
.text$mn:00004450 ; Segment type: Pure code
.text$mn:00004450 ; Segment permissions: Read/Execute
.text$mn:00004450 _text$mn        segment para public 'CODE' use32
.text$mn:00004450                 assume cs:_text$mn
.text$mn:00004450                 ;org 4450h
.text$mn:00004450 ; COMDAT (pick any)
.text$mn:00004450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004450
.text$mn:00004450 ; =============== S U B R O U T I N E =======================================
.text$mn:00004450
.text$mn:00004450 ; Attributes: bp-based frame
.text$mn:00004450
.text$mn:00004450 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::sentry(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> &)
.text$mn:00004450                 public ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:00004450 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$mn:00004450                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+45p
.text$mn:00004450
.text$mn:00004450 var_10          = dword ptr -10h
.text$mn:00004450 var_C           = dword ptr -0Ch
.text$mn:00004450 var_4           = dword ptr -4
.text$mn:00004450 arg_0           = dword ptr  8
.text$mn:00004450
.text$mn:00004450                 push    ebp
.text$mn:00004451                 mov     ebp, esp
.text$mn:00004453                 push    0FFFFFFFFh
.text$mn:00004455                 push    offset __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$mn:0000445A                 mov     eax, large fs:0
.text$mn:00004460                 push    eax
.text$mn:00004461                 push    ecx
.text$mn:00004462                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004467                 xor     eax, ebp
.text$mn:00004469                 push    eax
.text$mn:0000446A                 lea     eax, [ebp+var_C]
.text$mn:0000446D                 mov     large fs:0, eax
.text$mn:00004473                 mov     [ebp+var_10], ecx
.text$mn:00004476                 mov     eax, [ebp+arg_0]
.text$mn:00004479                 push    eax
.text$mn:0000447A                 mov     ecx, [ebp+var_10]
.text$mn:0000447D                 call    ??0_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:00004482                 mov     [ebp+var_4], 0
.text$mn:00004489                 mov     ecx, [ebp+arg_0]
.text$mn:0000448C                 mov     edx, [ecx]
.text$mn:0000448E                 mov     ecx, [ebp+arg_0]
.text$mn:00004491                 add     ecx, [edx+4]    ; this
.text$mn:00004494                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00004499                 movzx   eax, al
.text$mn:0000449C                 test    eax, eax
.text$mn:0000449E                 jz      short loc_44E4
.text$mn:000044A0                 mov     ecx, [ebp+arg_0]
.text$mn:000044A3                 mov     edx, [ecx]
.text$mn:000044A5                 mov     ecx, [ebp+arg_0]
.text$mn:000044A8                 add     ecx, [edx+4]
.text$mn:000044AB                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:000044B0                 test    eax, eax
.text$mn:000044B2                 jz      short loc_44E4
.text$mn:000044B4                 mov     eax, [ebp+arg_0]
.text$mn:000044B7                 mov     ecx, [eax]
.text$mn:000044B9                 mov     edx, [ebp+arg_0]
.text$mn:000044BC                 add     edx, [ecx+4]
.text$mn:000044BF                 mov     ecx, edx
.text$mn:000044C1                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:000044C6                 cmp     eax, [ebp+arg_0]
.text$mn:000044C9                 jz      short loc_44E4
.text$mn:000044CB                 mov     eax, [ebp+arg_0]
.text$mn:000044CE                 mov     ecx, [eax]
.text$mn:000044D0                 mov     edx, [ebp+arg_0]
.text$mn:000044D3                 add     edx, [ecx+4]
.text$mn:000044D6                 mov     ecx, edx
.text$mn:000044D8                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:000044DD                 mov     ecx, eax
.text$mn:000044DF                 call    ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)
.text$mn:000044E4
.text$mn:000044E4 loc_44E4:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+4Ej
.text$mn:000044E4                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+62j ...
.text$mn:000044E4                 mov     eax, [ebp+arg_0]
.text$mn:000044E7                 mov     ecx, [eax]
.text$mn:000044E9                 mov     edx, [ebp+arg_0]
.text$mn:000044EC                 add     edx, [ecx+4]
.text$mn:000044EF                 mov     ecx, edx        ; this
.text$mn:000044F1                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:000044F6                 mov     ecx, [ebp+var_10]
.text$mn:000044F9                 mov     [ecx+4], al
.text$mn:000044FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004503                 mov     eax, [ebp+var_10]
.text$mn:00004506                 mov     ecx, [ebp+var_C]
.text$mn:00004509                 mov     large fs:0, ecx
.text$mn:00004510                 pop     ecx
.text$mn:00004511                 mov     esp, ebp
.text$mn:00004513                 pop     ebp
.text$mn:00004514                 retn    4
.text$mn:00004514 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$mn:00004514
.text$mn:00004514 ; ---------------------------------------------------------------------------
.text$mn:00004517                 align 4
.text$mn:00004517 _text$mn        ends
.text$mn:00004517
.text$x:00004518 ; ===========================================================================
.text$x:00004518
.text$x:00004518 ; Segment type: Pure code
.text$x:00004518 ; Segment permissions: Read/Execute
.text$x:00004518 _text$x         segment para public 'CODE' use32
.text$x:00004518                 assume cs:_text$x
.text$x:00004518                 ;org 4518h
.text$x:00004518 ; COMDAT (pick associative to section at 4450)
.text$x:00004518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004518
.text$x:00004518 ; =============== S U B R O U T I N E =======================================
.text$x:00004518
.text$x:00004518
.text$x:00004518 __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0 proc near
.text$x:00004518                                         ; DATA XREF: .xdata$x:00009EBCo
.text$x:00004518                 mov     ecx, [ebp-10h]
.text$x:0000451B                 jmp     ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:0000451B __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0 endp
.text$x:0000451B
.text$x:00004520
.text$x:00004520 ; =============== S U B R O U T I N E =======================================
.text$x:00004520
.text$x:00004520
.text$x:00004520 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z proc near
.text$x:00004520                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+5o
.text$x:00004520
.text$x:00004520 arg_4           = dword ptr  8
.text$x:00004520
.text$x:00004520                 mov     edx, [esp+arg_4]
.text$x:00004524                 lea     eax, [edx+0Ch]
.text$x:00004527                 mov     ecx, [edx-8]
.text$x:0000452A                 xor     ecx, eax
.text$x:0000452C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004531                 mov     eax, offset __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.text$x:00004536                 jmp     ___CxxFrameHandler3
.text$x:00004536 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z endp
.text$x:00004536
.text$x:00004536 ; ---------------------------------------------------------------------------
.text$x:0000453B                 align 4
.text$x:0000453B _text$x         ends
.text$x:0000453B
.text$mn:0000453C ; ===========================================================================
.text$mn:0000453C
.text$mn:0000453C ; Segment type: Pure code
.text$mn:0000453C ; Segment permissions: Read/Execute
.text$mn:0000453C _text$mn        segment para public 'CODE' use32
.text$mn:0000453C                 assume cs:_text$mn
.text$mn:0000453C                 ;org 453Ch
.text$mn:0000453C ; COMDAT (pick any)
.text$mn:0000453C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000453C
.text$mn:0000453C ; =============== S U B R O U T I N E =======================================
.text$mn:0000453C
.text$mn:0000453C ; Attributes: bp-based frame
.text$mn:0000453C
.text$mn:0000453C ; _DWORD __thiscall std::system_error::system_error(std::system_error *this, const struct std::system_error *)
.text$mn:0000453C                 public ??0system_error@std@@QAE@ABV01@@Z
.text$mn:0000453C ??0system_error@std@@QAE@ABV01@@Z proc near
.text$mn:0000453C                                         ; CODE XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+2Dp
.text$mn:0000453C                                         ; DATA XREF: .xdata$x:0000A2F0o
.text$mn:0000453C
.text$mn:0000453C var_10          = dword ptr -10h
.text$mn:0000453C var_C           = dword ptr -0Ch
.text$mn:0000453C var_4           = dword ptr -4
.text$mn:0000453C arg_0           = dword ptr  8
.text$mn:0000453C
.text$mn:0000453C                 push    ebp
.text$mn:0000453D                 mov     ebp, esp
.text$mn:0000453F                 push    0FFFFFFFFh
.text$mn:00004541                 push    offset __ehhandler$??0system_error@std@@QAE@ABV01@@Z
.text$mn:00004546                 mov     eax, large fs:0
.text$mn:0000454C                 push    eax
.text$mn:0000454D                 push    ecx
.text$mn:0000454E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004553                 xor     eax, ebp
.text$mn:00004555                 push    eax
.text$mn:00004556                 lea     eax, [ebp+var_C]
.text$mn:00004559                 mov     large fs:0, eax
.text$mn:0000455F                 mov     [ebp+var_10], ecx
.text$mn:00004562                 mov     eax, [ebp+arg_0]
.text$mn:00004565                 push    eax             ; struct std::_System_error *
.text$mn:00004566                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004569                 call    ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.text$mn:0000456E                 mov     [ebp+var_4], 0
.text$mn:00004575                 mov     ecx, [ebp+var_10]
.text$mn:00004578                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:0000457E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004585                 mov     eax, [ebp+var_10]
.text$mn:00004588                 mov     ecx, [ebp+var_C]
.text$mn:0000458B                 mov     large fs:0, ecx
.text$mn:00004592                 pop     ecx
.text$mn:00004593                 mov     esp, ebp
.text$mn:00004595                 pop     ebp
.text$mn:00004596                 retn    4
.text$mn:00004596 ??0system_error@std@@QAE@ABV01@@Z endp
.text$mn:00004596
.text$mn:00004596 ; ---------------------------------------------------------------------------
.text$mn:00004599                 align 4
.text$mn:00004599 _text$mn        ends
.text$mn:00004599
.text$x:0000459C ; ===========================================================================
.text$x:0000459C
.text$x:0000459C ; Segment type: Pure code
.text$x:0000459C ; Segment permissions: Read/Execute
.text$x:0000459C _text$x         segment para public 'CODE' use32
.text$x:0000459C                 assume cs:_text$x
.text$x:0000459C                 ;org 459Ch
.text$x:0000459C ; COMDAT (pick associative to section at 453C)
.text$x:0000459C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000459C
.text$x:0000459C ; =============== S U B R O U T I N E =======================================
.text$x:0000459C
.text$x:0000459C
.text$x:0000459C __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000459C                                         ; DATA XREF: .xdata$x:0000952Co
.text$x:0000459C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000459F                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:0000459F __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0 endp
.text$x:0000459F
.text$x:000045A4
.text$x:000045A4 ; =============== S U B R O U T I N E =======================================
.text$x:000045A4
.text$x:000045A4
.text$x:000045A4 __ehhandler$??0system_error@std@@QAE@ABV01@@Z proc near
.text$x:000045A4                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+5o
.text$x:000045A4
.text$x:000045A4 arg_4           = dword ptr  8
.text$x:000045A4
.text$x:000045A4                 mov     edx, [esp+arg_4]
.text$x:000045A8                 lea     eax, [edx+0Ch]
.text$x:000045AB                 mov     ecx, [edx-8]
.text$x:000045AE                 xor     ecx, eax
.text$x:000045B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045B5                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z
.text$x:000045BA                 jmp     ___CxxFrameHandler3
.text$x:000045BA __ehhandler$??0system_error@std@@QAE@ABV01@@Z endp
.text$x:000045BA
.text$x:000045BA ; ---------------------------------------------------------------------------
.text$x:000045BF                 align 10h
.text$x:000045BF _text$x         ends
.text$x:000045BF
.text$mn:000045C0 ; ===========================================================================
.text$mn:000045C0
.text$mn:000045C0 ; Segment type: Pure code
.text$mn:000045C0 ; Segment permissions: Read/Execute
.text$mn:000045C0 _text$mn        segment para public 'CODE' use32
.text$mn:000045C0                 assume cs:_text$mn
.text$mn:000045C0                 ;org 45C0h
.text$mn:000045C0 ; COMDAT (pick any)
.text$mn:000045C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045C0
.text$mn:000045C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000045C0
.text$mn:000045C0 ; Attributes: bp-based frame
.text$mn:000045C0
.text$mn:000045C0 ; public: __thiscall std::system_error::system_error(class std::error_code, char const *)
.text$mn:000045C0                 public ??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:000045C0 ??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$mn:000045C0                                         ; CODE XREF: std::ios_base::failure::failure(char const *,std::error_code const &)+37p
.text$mn:000045C0
.text$mn:000045C0 var_30          = dword ptr -30h
.text$mn:000045C0 var_2C          = byte ptr -2Ch
.text$mn:000045C0 var_10          = dword ptr -10h
.text$mn:000045C0 var_C           = dword ptr -0Ch
.text$mn:000045C0 var_4           = dword ptr -4
.text$mn:000045C0 arg_0           = dword ptr  8
.text$mn:000045C0 arg_4           = dword ptr  0Ch
.text$mn:000045C0 Str             = dword ptr  10h
.text$mn:000045C0
.text$mn:000045C0                 push    ebp
.text$mn:000045C1                 mov     ebp, esp
.text$mn:000045C3                 push    0FFFFFFFFh
.text$mn:000045C5                 push    offset __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$mn:000045CA                 mov     eax, large fs:0
.text$mn:000045D0                 push    eax
.text$mn:000045D1                 sub     esp, 24h
.text$mn:000045D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045D9                 xor     eax, ebp
.text$mn:000045DB                 mov     [ebp+var_10], eax
.text$mn:000045DE                 push    eax
.text$mn:000045DF                 lea     eax, [ebp+var_C]
.text$mn:000045E2                 mov     large fs:0, eax
.text$mn:000045E8                 mov     [ebp+var_30], ecx
.text$mn:000045EB                 mov     eax, [ebp+Str]
.text$mn:000045EE                 push    eax             ; Str
.text$mn:000045EF                 lea     ecx, [ebp+var_2C]
.text$mn:000045F2                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000045F7                 mov     [ebp+var_4], 0
.text$mn:000045FE                 lea     ecx, [ebp+var_2C]
.text$mn:00004601                 push    ecx
.text$mn:00004602                 mov     edx, [ebp+arg_4]
.text$mn:00004605                 push    edx
.text$mn:00004606                 mov     eax, [ebp+arg_0]
.text$mn:00004609                 push    eax
.text$mn:0000460A                 mov     ecx, [ebp+var_30]
.text$mn:0000460D                 call    ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00004612                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004616                 lea     ecx, [ebp+var_2C]
.text$mn:00004619                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000461E                 mov     ecx, [ebp+var_30]
.text$mn:00004621                 mov     dword ptr [ecx], offset ??_7system_error@std@@6B@ ; const std::system_error::`vftable'
.text$mn:00004627                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000462E                 mov     eax, [ebp+var_30]
.text$mn:00004631                 mov     ecx, [ebp+var_C]
.text$mn:00004634                 mov     large fs:0, ecx
.text$mn:0000463B                 pop     ecx
.text$mn:0000463C                 mov     ecx, [ebp+var_10]
.text$mn:0000463F                 xor     ecx, ebp
.text$mn:00004641                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00004646                 mov     esp, ebp
.text$mn:00004648                 pop     ebp
.text$mn:00004649                 retn    0Ch
.text$mn:00004649 ??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$mn:00004649
.text$mn:00004649 _text$mn        ends
.text$mn:00004649
.text$x:0000464C ; ===========================================================================
.text$x:0000464C
.text$x:0000464C ; Segment type: Pure code
.text$x:0000464C ; Segment permissions: Read/Execute
.text$x:0000464C _text$x         segment para public 'CODE' use32
.text$x:0000464C                 assume cs:_text$x
.text$x:0000464C                 ;org 464Ch
.text$x:0000464C ; COMDAT (pick associative to section at 45C0)
.text$x:0000464C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000464C
.text$x:0000464C ; =============== S U B R O U T I N E =======================================
.text$x:0000464C
.text$x:0000464C
.text$x:0000464C __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 proc near
.text$x:0000464C                                         ; DATA XREF: .xdata$x:000094C4o
.text$x:0000464C                 lea     ecx, [ebp-2Ch]
.text$x:0000464F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000464F __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0 endp
.text$x:0000464F
.text$x:00004654
.text$x:00004654 ; =============== S U B R O U T I N E =======================================
.text$x:00004654
.text$x:00004654
.text$x:00004654 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 proc near
.text$x:00004654                                         ; DATA XREF: .xdata$x:000094CCo
.text$x:00004654                                         ; .xdata$x:000094D4o
.text$x:00004654                 mov     ecx, [ebp-30h]  ; this
.text$x:00004657                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:00004657 __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1 endp
.text$x:00004657
.text$x:0000465C
.text$x:0000465C ; =============== S U B R O U T I N E =======================================
.text$x:0000465C
.text$x:0000465C
.text$x:0000465C __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z proc near
.text$x:0000465C                                         ; DATA XREF: std::system_error::system_error(std::error_code,char const *)+5o
.text$x:0000465C
.text$x:0000465C arg_4           = dword ptr  8
.text$x:0000465C
.text$x:0000465C                 mov     edx, [esp+arg_4]
.text$x:00004660                 lea     eax, [edx+0Ch]
.text$x:00004663                 mov     ecx, [edx-28h]
.text$x:00004666                 xor     ecx, eax
.text$x:00004668                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000466D                 mov     ecx, [edx-4]
.text$x:00004670                 xor     ecx, eax
.text$x:00004672                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004677                 mov     eax, offset __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.text$x:0000467C                 jmp     ___CxxFrameHandler3
.text$x:0000467C __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z endp
.text$x:0000467C
.text$x:0000467C ; ---------------------------------------------------------------------------
.text$x:00004681                 align 4
.text$x:00004681 _text$x         ends
.text$x:00004681
.text$mn:00004684 ; ===========================================================================
.text$mn:00004684
.text$mn:00004684 ; Segment type: Pure code
.text$mn:00004684 ; Segment permissions: Read/Execute
.text$mn:00004684 _text$mn        segment para public 'CODE' use32
.text$mn:00004684                 assume cs:_text$mn
.text$mn:00004684                 ;org 4684h
.text$mn:00004684 ; COMDAT (pick any)
.text$mn:00004684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004684
.text$mn:00004684 ; =============== S U B R O U T I N E =======================================
.text$mn:00004684
.text$mn:00004684 ; Attributes: bp-based frame
.text$mn:00004684
.text$mn:00004684 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00004684                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004684 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004684                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00004684                                         ; __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00004684
.text$mn:00004684 var_10          = dword ptr -10h
.text$mn:00004684 var_C           = dword ptr -0Ch
.text$mn:00004684 var_4           = dword ptr -4
.text$mn:00004684
.text$mn:00004684                 push    ebp
.text$mn:00004685                 mov     ebp, esp
.text$mn:00004687                 push    0FFFFFFFFh
.text$mn:00004689                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000468E                 mov     eax, large fs:0
.text$mn:00004694                 push    eax
.text$mn:00004695                 push    ecx
.text$mn:00004696                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000469B                 xor     eax, ebp
.text$mn:0000469D                 push    eax
.text$mn:0000469E                 lea     eax, [ebp+var_C]
.text$mn:000046A1                 mov     large fs:0, eax
.text$mn:000046A7                 mov     [ebp+var_10], ecx
.text$mn:000046AA                 mov     [ebp+var_4], 0
.text$mn:000046B1                 mov     ecx, [ebp+var_10]
.text$mn:000046B4                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000046B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046C0                 mov     ecx, [ebp+var_10]
.text$mn:000046C3                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:000046C8                 mov     ecx, [ebp+var_C]
.text$mn:000046CB                 mov     large fs:0, ecx
.text$mn:000046D2                 pop     ecx
.text$mn:000046D3                 mov     esp, ebp
.text$mn:000046D5                 pop     ebp
.text$mn:000046D6                 retn
.text$mn:000046D6 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:000046D6
.text$mn:000046D6 ; ---------------------------------------------------------------------------
.text$mn:000046D7                 align 4
.text$mn:000046D7 _text$mn        ends
.text$mn:000046D7
.text$x:000046D8 ; ===========================================================================
.text$x:000046D8
.text$x:000046D8 ; Segment type: Pure code
.text$x:000046D8 ; Segment permissions: Read/Execute
.text$x:000046D8 _text$x         segment para public 'CODE' use32
.text$x:000046D8                 assume cs:_text$x
.text$x:000046D8                 ;org 46D8h
.text$x:000046D8 ; COMDAT (pick associative to section at 4684)
.text$x:000046D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046D8
.text$x:000046D8 ; =============== S U B R O U T I N E =======================================
.text$x:000046D8
.text$x:000046D8
.text$x:000046D8 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000046D8                                         ; DATA XREF: .xdata$x:00008F80o
.text$x:000046D8                 mov     ecx, [ebp-10h]
.text$x:000046DB                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000046DB __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000046DB
.text$x:000046E0
.text$x:000046E0 ; =============== S U B R O U T I N E =======================================
.text$x:000046E0
.text$x:000046E0
.text$x:000046E0 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:000046E0                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:000046E0
.text$x:000046E0 arg_4           = dword ptr  8
.text$x:000046E0
.text$x:000046E0                 mov     edx, [esp+arg_4]
.text$x:000046E4                 lea     eax, [edx+0Ch]
.text$x:000046E7                 mov     ecx, [edx-8]
.text$x:000046EA                 xor     ecx, eax
.text$x:000046EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046F1                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:000046F6                 jmp     ___CxxFrameHandler3
.text$x:000046F6 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:000046F6
.text$x:000046F6 ; ---------------------------------------------------------------------------
.text$x:000046FB                 align 4
.text$x:000046FB _text$x         ends
.text$x:000046FB
.text$mn:000046FC ; ===========================================================================
.text$mn:000046FC
.text$mn:000046FC ; Segment type: Pure code
.text$mn:000046FC ; Segment permissions: Read/Execute
.text$mn:000046FC _text$mn        segment para public 'CODE' use32
.text$mn:000046FC                 assume cs:_text$mn
.text$mn:000046FC                 ;org 46FCh
.text$mn:000046FC ; COMDAT (pick any)
.text$mn:000046FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046FC
.text$mn:000046FC ; =============== S U B R O U T I N E =======================================
.text$mn:000046FC
.text$mn:000046FC ; Attributes: bp-based frame
.text$mn:000046FC
.text$mn:000046FC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:000046FC                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000046FC ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000046FC                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j
.text$mn:000046FC                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0+3j ...
.text$mn:000046FC
.text$mn:000046FC var_10          = dword ptr -10h
.text$mn:000046FC var_C           = dword ptr -0Ch
.text$mn:000046FC var_4           = dword ptr -4
.text$mn:000046FC
.text$mn:000046FC                 push    ebp
.text$mn:000046FD                 mov     ebp, esp
.text$mn:000046FF                 push    0FFFFFFFFh
.text$mn:00004701                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00004706                 mov     eax, large fs:0
.text$mn:0000470C                 push    eax
.text$mn:0000470D                 push    ecx
.text$mn:0000470E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004713                 xor     eax, ebp
.text$mn:00004715                 push    eax
.text$mn:00004716                 lea     eax, [ebp+var_C]
.text$mn:00004719                 mov     large fs:0, eax
.text$mn:0000471F                 mov     [ebp+var_10], ecx
.text$mn:00004722                 mov     [ebp+var_4], 0
.text$mn:00004729                 mov     ecx, [ebp+var_10]
.text$mn:0000472C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004731                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004738                 mov     ecx, [ebp+var_10]
.text$mn:0000473B                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004740                 mov     ecx, [ebp+var_C]
.text$mn:00004743                 mov     large fs:0, ecx
.text$mn:0000474A                 pop     ecx
.text$mn:0000474B                 mov     esp, ebp
.text$mn:0000474D                 pop     ebp
.text$mn:0000474E                 retn
.text$mn:0000474E ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000474E
.text$mn:0000474E ; ---------------------------------------------------------------------------
.text$mn:0000474F                 align 10h
.text$mn:0000474F _text$mn        ends
.text$mn:0000474F
.text$x:00004750 ; ===========================================================================
.text$x:00004750
.text$x:00004750 ; Segment type: Pure code
.text$x:00004750 ; Segment permissions: Read/Execute
.text$x:00004750 _text$x         segment para public 'CODE' use32
.text$x:00004750                 assume cs:_text$x
.text$x:00004750                 ;org 4750h
.text$x:00004750 ; COMDAT (pick associative to section at 46FC)
.text$x:00004750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004750
.text$x:00004750 ; =============== S U B R O U T I N E =======================================
.text$x:00004750
.text$x:00004750
.text$x:00004750 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004750                                         ; DATA XREF: .xdata$x:000099BCo
.text$x:00004750                 mov     ecx, [ebp-10h]
.text$x:00004753                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00004753 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004753
.text$x:00004758
.text$x:00004758 ; =============== S U B R O U T I N E =======================================
.text$x:00004758
.text$x:00004758
.text$x:00004758 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004758                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00004758
.text$x:00004758 arg_4           = dword ptr  8
.text$x:00004758
.text$x:00004758                 mov     edx, [esp+arg_4]
.text$x:0000475C                 lea     eax, [edx+0Ch]
.text$x:0000475F                 mov     ecx, [edx-8]
.text$x:00004762                 xor     ecx, eax
.text$x:00004764                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004769                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:0000476E                 jmp     ___CxxFrameHandler3
.text$x:0000476E __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:0000476E
.text$x:0000476E ; ---------------------------------------------------------------------------
.text$x:00004773                 align 4
.text$x:00004773 _text$x         ends
.text$x:00004773
.text$mn:00004774 ; ===========================================================================
.text$mn:00004774
.text$mn:00004774 ; Segment type: Pure code
.text$mn:00004774 ; Segment permissions: Read/Execute
.text$mn:00004774 _text$mn        segment para public 'CODE' use32
.text$mn:00004774                 assume cs:_text$mn
.text$mn:00004774                 ;org 4774h
.text$mn:00004774 ; COMDAT (pick any)
.text$mn:00004774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004774
.text$mn:00004774 ; =============== S U B R O U T I N E =======================================
.text$mn:00004774
.text$mn:00004774 ; Attributes: bp-based frame
.text$mn:00004774
.text$mn:00004774 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00004774                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004774 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00004774                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00004774                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00004774
.text$mn:00004774 var_10          = dword ptr -10h
.text$mn:00004774 var_C           = dword ptr -0Ch
.text$mn:00004774 var_4           = dword ptr -4
.text$mn:00004774
.text$mn:00004774                 push    ebp
.text$mn:00004775                 mov     ebp, esp
.text$mn:00004777                 push    0FFFFFFFFh
.text$mn:00004779                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000477E                 mov     eax, large fs:0
.text$mn:00004784                 push    eax
.text$mn:00004785                 push    ecx
.text$mn:00004786                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000478B                 xor     eax, ebp
.text$mn:0000478D                 push    eax
.text$mn:0000478E                 lea     eax, [ebp+var_C]
.text$mn:00004791                 mov     large fs:0, eax
.text$mn:00004797                 mov     [ebp+var_10], ecx
.text$mn:0000479A                 mov     [ebp+var_4], 0
.text$mn:000047A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000047A8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000047AB                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000047B0                 mov     ecx, [ebp+var_C]
.text$mn:000047B3                 mov     large fs:0, ecx
.text$mn:000047BA                 pop     ecx
.text$mn:000047BB                 mov     esp, ebp
.text$mn:000047BD                 pop     ebp
.text$mn:000047BE                 retn
.text$mn:000047BE ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000047BE
.text$mn:000047BE ; ---------------------------------------------------------------------------
.text$mn:000047BF                 align 10h
.text$mn:000047BF _text$mn        ends
.text$mn:000047BF
.text$x:000047C0 ; ===========================================================================
.text$x:000047C0
.text$x:000047C0 ; Segment type: Pure code
.text$x:000047C0 ; Segment permissions: Read/Execute
.text$x:000047C0 _text$x         segment para public 'CODE' use32
.text$x:000047C0                 assume cs:_text$x
.text$x:000047C0                 ;org 47C0h
.text$x:000047C0 ; COMDAT (pick associative to section at 4774)
.text$x:000047C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047C0
.text$x:000047C0 ; =============== S U B R O U T I N E =======================================
.text$x:000047C0
.text$x:000047C0
.text$x:000047C0 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000047C0                                         ; DATA XREF: .xdata$x:00008F28o
.text$x:000047C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000047C3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000047C3 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000047C3
.text$x:000047C8
.text$x:000047C8 ; =============== S U B R O U T I N E =======================================
.text$x:000047C8
.text$x:000047C8
.text$x:000047C8 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000047C8                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000047C8
.text$x:000047C8 arg_4           = dword ptr  8
.text$x:000047C8
.text$x:000047C8                 mov     edx, [esp+arg_4]
.text$x:000047CC                 lea     eax, [edx+0Ch]
.text$x:000047CF                 mov     ecx, [edx-8]
.text$x:000047D2                 xor     ecx, eax
.text$x:000047D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047D9                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000047DE                 jmp     ___CxxFrameHandler3
.text$x:000047DE __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000047DE
.text$x:000047DE ; ---------------------------------------------------------------------------
.text$x:000047E3                 align 4
.text$x:000047E3 _text$x         ends
.text$x:000047E3
.text$mn:000047E4 ; ===========================================================================
.text$mn:000047E4
.text$mn:000047E4 ; Segment type: Pure code
.text$mn:000047E4 ; Segment permissions: Read/Execute
.text$mn:000047E4 _text$mn        segment para public 'CODE' use32
.text$mn:000047E4                 assume cs:_text$mn
.text$mn:000047E4                 ;org 47E4h
.text$mn:000047E4 ; COMDAT (pick any)
.text$mn:000047E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047E4
.text$mn:000047E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000047E4
.text$mn:000047E4 ; Attributes: bp-based frame
.text$mn:000047E4
.text$mn:000047E4 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000047E4                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000047E4 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000047E4                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:000047E4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:000047E4
.text$mn:000047E4 var_10          = dword ptr -10h
.text$mn:000047E4 var_C           = dword ptr -0Ch
.text$mn:000047E4 var_4           = dword ptr -4
.text$mn:000047E4
.text$mn:000047E4                 push    ebp
.text$mn:000047E5                 mov     ebp, esp
.text$mn:000047E7                 push    0FFFFFFFFh
.text$mn:000047E9                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000047EE                 mov     eax, large fs:0
.text$mn:000047F4                 push    eax
.text$mn:000047F5                 push    ecx
.text$mn:000047F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000047FB                 xor     eax, ebp
.text$mn:000047FD                 push    eax
.text$mn:000047FE                 lea     eax, [ebp+var_C]
.text$mn:00004801                 mov     large fs:0, eax
.text$mn:00004807                 mov     [ebp+var_10], ecx
.text$mn:0000480A                 mov     [ebp+var_4], 0
.text$mn:00004811                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004818                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000481B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004820                 mov     ecx, [ebp+var_C]
.text$mn:00004823                 mov     large fs:0, ecx
.text$mn:0000482A                 pop     ecx
.text$mn:0000482B                 mov     esp, ebp
.text$mn:0000482D                 pop     ebp
.text$mn:0000482E                 retn
.text$mn:0000482E ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:0000482E
.text$mn:0000482E ; ---------------------------------------------------------------------------
.text$mn:0000482F                 align 10h
.text$mn:0000482F _text$mn        ends
.text$mn:0000482F
.text$x:00004830 ; ===========================================================================
.text$x:00004830
.text$x:00004830 ; Segment type: Pure code
.text$x:00004830 ; Segment permissions: Read/Execute
.text$x:00004830 _text$x         segment para public 'CODE' use32
.text$x:00004830                 assume cs:_text$x
.text$x:00004830                 ;org 4830h
.text$x:00004830 ; COMDAT (pick associative to section at 47E4)
.text$x:00004830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004830
.text$x:00004830 ; =============== S U B R O U T I N E =======================================
.text$x:00004830
.text$x:00004830
.text$x:00004830 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004830                                         ; DATA XREF: .xdata$x:00009964o
.text$x:00004830                 mov     ecx, [ebp-10h]  ; this
.text$x:00004833                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004833 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00004833
.text$x:00004838
.text$x:00004838 ; =============== S U B R O U T I N E =======================================
.text$x:00004838
.text$x:00004838
.text$x:00004838 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004838                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004838
.text$x:00004838 arg_4           = dword ptr  8
.text$x:00004838
.text$x:00004838                 mov     edx, [esp+arg_4]
.text$x:0000483C                 lea     eax, [edx+0Ch]
.text$x:0000483F                 mov     ecx, [edx-8]
.text$x:00004842                 xor     ecx, eax
.text$x:00004844                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004849                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000484E                 jmp     ___CxxFrameHandler3
.text$x:0000484E __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000484E
.text$x:0000484E ; ---------------------------------------------------------------------------
.text$x:00004853                 align 4
.text$x:00004853 _text$x         ends
.text$x:00004853
.text$mn:00004854 ; ===========================================================================
.text$mn:00004854
.text$mn:00004854 ; Segment type: Pure code
.text$mn:00004854 ; Segment permissions: Read/Execute
.text$mn:00004854 _text$mn        segment para public 'CODE' use32
.text$mn:00004854                 assume cs:_text$mn
.text$mn:00004854                 ;org 4854h
.text$mn:00004854 ; COMDAT (pick any)
.text$mn:00004854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004854
.text$mn:00004854 ; =============== S U B R O U T I N E =======================================
.text$mn:00004854
.text$mn:00004854 ; Attributes: bp-based frame
.text$mn:00004854
.text$mn:00004854 ; public: __thiscall std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00004854                 public ??1?$_Yarn@D@std@@QAE@XZ
.text$mn:00004854 ??1?$_Yarn@D@std@@QAE@XZ proc near      ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1+6j
.text$mn:00004854                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2+6j ...
.text$mn:00004854
.text$mn:00004854 var_4           = dword ptr -4
.text$mn:00004854
.text$mn:00004854                 push    ebp
.text$mn:00004855                 mov     ebp, esp
.text$mn:00004857                 push    ecx
.text$mn:00004858                 mov     [ebp+var_4], ecx
.text$mn:0000485B                 mov     ecx, [ebp+var_4]
.text$mn:0000485E                 call    ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy(void)
.text$mn:00004863                 mov     esp, ebp
.text$mn:00004865                 pop     ebp
.text$mn:00004866                 retn
.text$mn:00004866 ??1?$_Yarn@D@std@@QAE@XZ endp
.text$mn:00004866
.text$mn:00004866 ; ---------------------------------------------------------------------------
.text$mn:00004867                 align 4
.text$mn:00004867 _text$mn        ends
.text$mn:00004867
.text$mn:00004868 ; ===========================================================================
.text$mn:00004868
.text$mn:00004868 ; Segment type: Pure code
.text$mn:00004868 ; Segment permissions: Read/Execute
.text$mn:00004868 _text$mn        segment para public 'CODE' use32
.text$mn:00004868                 assume cs:_text$mn
.text$mn:00004868                 ;org 4868h
.text$mn:00004868 ; COMDAT (pick any)
.text$mn:00004868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004868
.text$mn:00004868 ; =============== S U B R O U T I N E =======================================
.text$mn:00004868
.text$mn:00004868 ; Attributes: bp-based frame
.text$mn:00004868
.text$mn:00004868 ; public: __thiscall std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00004868                 public ??1?$_Yarn@_W@std@@QAE@XZ
.text$mn:00004868 ??1?$_Yarn@_W@std@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3+6j
.text$mn:00004868                                         ; __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4+6j ...
.text$mn:00004868
.text$mn:00004868 var_4           = dword ptr -4
.text$mn:00004868
.text$mn:00004868                 push    ebp
.text$mn:00004869                 mov     ebp, esp
.text$mn:0000486B                 push    ecx
.text$mn:0000486C                 mov     [ebp+var_4], ecx
.text$mn:0000486F                 mov     ecx, [ebp+var_4]
.text$mn:00004872                 call    ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:00004877                 mov     esp, ebp
.text$mn:00004879                 pop     ebp
.text$mn:0000487A                 retn
.text$mn:0000487A ??1?$_Yarn@_W@std@@QAE@XZ endp
.text$mn:0000487A
.text$mn:0000487A ; ---------------------------------------------------------------------------
.text$mn:0000487B                 align 4
.text$mn:0000487B _text$mn        ends
.text$mn:0000487B
.text$mn:0000487C ; ===========================================================================
.text$mn:0000487C
.text$mn:0000487C ; Segment type: Pure code
.text$mn:0000487C ; Segment permissions: Read/Execute
.text$mn:0000487C _text$mn        segment para public 'CODE' use32
.text$mn:0000487C                 assume cs:_text$mn
.text$mn:0000487C                 ;org 487Ch
.text$mn:0000487C ; COMDAT (pick any)
.text$mn:0000487C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000487C
.text$mn:0000487C ; =============== S U B R O U T I N E =======================================
.text$mn:0000487C
.text$mn:0000487C ; Attributes: bp-based frame
.text$mn:0000487C
.text$mn:0000487C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:0000487C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000487C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:0000487C                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+8Ap
.text$mn:0000487C                                         ; __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0+3j ...
.text$mn:0000487C
.text$mn:0000487C var_10          = dword ptr -10h
.text$mn:0000487C var_C           = dword ptr -0Ch
.text$mn:0000487C var_4           = dword ptr -4
.text$mn:0000487C
.text$mn:0000487C                 push    ebp
.text$mn:0000487D                 mov     ebp, esp
.text$mn:0000487F                 push    0FFFFFFFFh
.text$mn:00004881                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004886                 mov     eax, large fs:0
.text$mn:0000488C                 push    eax
.text$mn:0000488D                 push    ecx
.text$mn:0000488E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004893                 xor     eax, ebp
.text$mn:00004895                 push    eax
.text$mn:00004896                 lea     eax, [ebp+var_C]
.text$mn:00004899                 mov     large fs:0, eax
.text$mn:0000489F                 mov     [ebp+var_10], ecx
.text$mn:000048A2                 mov     [ebp+var_4], 0
.text$mn:000048A9                 push    0               ; Size
.text$mn:000048AB                 push    1               ; char
.text$mn:000048AD                 mov     ecx, [ebp+var_10]
.text$mn:000048B0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000048B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048BC                 mov     ecx, [ebp+var_10]
.text$mn:000048BF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000048C4                 mov     ecx, [ebp+var_C]
.text$mn:000048C7                 mov     large fs:0, ecx
.text$mn:000048CE                 pop     ecx
.text$mn:000048CF                 mov     esp, ebp
.text$mn:000048D1                 pop     ebp
.text$mn:000048D2                 retn
.text$mn:000048D2 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000048D2
.text$mn:000048D2 ; ---------------------------------------------------------------------------
.text$mn:000048D3                 align 4
.text$mn:000048D3 _text$mn        ends
.text$mn:000048D3
.text$x:000048D4 ; ===========================================================================
.text$x:000048D4
.text$x:000048D4 ; Segment type: Pure code
.text$x:000048D4 ; Segment permissions: Read/Execute
.text$x:000048D4 _text$x         segment para public 'CODE' use32
.text$x:000048D4                 assume cs:_text$x
.text$x:000048D4                 ;org 48D4h
.text$x:000048D4 ; COMDAT (pick associative to section at 487C)
.text$x:000048D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048D4
.text$x:000048D4 ; =============== S U B R O U T I N E =======================================
.text$x:000048D4
.text$x:000048D4
.text$x:000048D4 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000048D4                                         ; DATA XREF: .xdata$x:00009030o
.text$x:000048D4                 mov     ecx, [ebp-10h]
.text$x:000048D7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000048D7 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000048D7
.text$x:000048DC
.text$x:000048DC ; =============== S U B R O U T I N E =======================================
.text$x:000048DC
.text$x:000048DC
.text$x:000048DC __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:000048DC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:000048DC
.text$x:000048DC arg_4           = dword ptr  8
.text$x:000048DC
.text$x:000048DC                 mov     edx, [esp+arg_4]
.text$x:000048E0                 lea     eax, [edx+0Ch]
.text$x:000048E3                 mov     ecx, [edx-8]
.text$x:000048E6                 xor     ecx, eax
.text$x:000048E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048ED                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:000048F2                 jmp     ___CxxFrameHandler3
.text$x:000048F2 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:000048F2
.text$x:000048F2 ; ---------------------------------------------------------------------------
.text$x:000048F7                 align 4
.text$x:000048F7 _text$x         ends
.text$x:000048F7
.text$mn:000048F8 ; ===========================================================================
.text$mn:000048F8
.text$mn:000048F8 ; Segment type: Pure code
.text$mn:000048F8 ; Segment permissions: Read/Execute
.text$mn:000048F8 _text$mn        segment para public 'CODE' use32
.text$mn:000048F8                 assume cs:_text$mn
.text$mn:000048F8                 ;org 48F8h
.text$mn:000048F8 ; COMDAT (pick any)
.text$mn:000048F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048F8
.text$mn:000048F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048F8
.text$mn:000048F8 ; Attributes: bp-based frame
.text$mn:000048F8
.text$mn:000048F8 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000048F8                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000048F8 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000048F8                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+1BBp
.text$mn:000048F8                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+216p ...
.text$mn:000048F8
.text$mn:000048F8 var_10          = dword ptr -10h
.text$mn:000048F8 var_C           = dword ptr -0Ch
.text$mn:000048F8 var_4           = dword ptr -4
.text$mn:000048F8
.text$mn:000048F8                 push    ebp
.text$mn:000048F9                 mov     ebp, esp
.text$mn:000048FB                 push    0FFFFFFFFh
.text$mn:000048FD                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004902                 mov     eax, large fs:0
.text$mn:00004908                 push    eax
.text$mn:00004909                 push    ecx
.text$mn:0000490A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000490F                 xor     eax, ebp
.text$mn:00004911                 push    eax
.text$mn:00004912                 lea     eax, [ebp+var_C]
.text$mn:00004915                 mov     large fs:0, eax
.text$mn:0000491B                 mov     [ebp+var_10], ecx
.text$mn:0000491E                 mov     [ebp+var_4], 0
.text$mn:00004925                 push    0
.text$mn:00004927                 push    1
.text$mn:00004929                 mov     ecx, [ebp+var_10]
.text$mn:0000492C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004931                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004938                 mov     ecx, [ebp+var_10]
.text$mn:0000493B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00004940                 mov     ecx, [ebp+var_C]
.text$mn:00004943                 mov     large fs:0, ecx
.text$mn:0000494A                 pop     ecx
.text$mn:0000494B                 mov     esp, ebp
.text$mn:0000494D                 pop     ebp
.text$mn:0000494E                 retn
.text$mn:0000494E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:0000494E
.text$mn:0000494E ; ---------------------------------------------------------------------------
.text$mn:0000494F                 align 10h
.text$mn:0000494F _text$mn        ends
.text$mn:0000494F
.text$x:00004950 ; ===========================================================================
.text$x:00004950
.text$x:00004950 ; Segment type: Pure code
.text$x:00004950 ; Segment permissions: Read/Execute
.text$x:00004950 _text$x         segment para public 'CODE' use32
.text$x:00004950                 assume cs:_text$x
.text$x:00004950                 ;org 4950h
.text$x:00004950 ; COMDAT (pick associative to section at 48F8)
.text$x:00004950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004950
.text$x:00004950 ; =============== S U B R O U T I N E =======================================
.text$x:00004950
.text$x:00004950
.text$x:00004950 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00004950                                         ; DATA XREF: .xdata$x:00009A40o
.text$x:00004950                 mov     ecx, [ebp-10h]
.text$x:00004953                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004953 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00004953
.text$x:00004958
.text$x:00004958 ; =============== S U B R O U T I N E =======================================
.text$x:00004958
.text$x:00004958
.text$x:00004958 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00004958                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00004958
.text$x:00004958 arg_4           = dword ptr  8
.text$x:00004958
.text$x:00004958                 mov     edx, [esp+arg_4]
.text$x:0000495C                 lea     eax, [edx+0Ch]
.text$x:0000495F                 mov     ecx, [edx-8]
.text$x:00004962                 xor     ecx, eax
.text$x:00004964                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004969                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:0000496E                 jmp     ___CxxFrameHandler3
.text$x:0000496E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:0000496E
.text$x:0000496E ; ---------------------------------------------------------------------------
.text$x:00004973                 align 4
.text$x:00004973 _text$x         ends
.text$x:00004973
.text$mn:00004974 ; ===========================================================================
.text$mn:00004974
.text$mn:00004974 ; Segment type: Pure code
.text$mn:00004974 ; Segment permissions: Read/Execute
.text$mn:00004974 _text$mn        segment para public 'CODE' use32
.text$mn:00004974                 assume cs:_text$mn
.text$mn:00004974                 ;org 4974h
.text$mn:00004974 ; COMDAT (pick any)
.text$mn:00004974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004974
.text$mn:00004974 ; =============== S U B R O U T I N E =======================================
.text$mn:00004974
.text$mn:00004974 ; Attributes: bp-based frame
.text$mn:00004974
.text$mn:00004974 ; protected: virtual __thiscall std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:00004974                 public ??1?$ctype@_W@std@@MAE@XZ
.text$mn:00004974 ??1?$ctype@_W@std@@MAE@XZ proc near     ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+Ap
.text$mn:00004974
.text$mn:00004974 var_10          = dword ptr -10h
.text$mn:00004974 var_C           = dword ptr -0Ch
.text$mn:00004974 var_4           = dword ptr -4
.text$mn:00004974
.text$mn:00004974                 push    ebp
.text$mn:00004975                 mov     ebp, esp
.text$mn:00004977                 push    0FFFFFFFFh
.text$mn:00004979                 push    offset __ehhandler$??1?$ctype@_W@std@@MAE@XZ
.text$mn:0000497E                 mov     eax, large fs:0
.text$mn:00004984                 push    eax
.text$mn:00004985                 push    ecx
.text$mn:00004986                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000498B                 xor     eax, ebp
.text$mn:0000498D                 push    eax
.text$mn:0000498E                 lea     eax, [ebp+var_C]
.text$mn:00004991                 mov     large fs:0, eax
.text$mn:00004997                 mov     [ebp+var_10], ecx
.text$mn:0000499A                 mov     eax, [ebp+var_10]
.text$mn:0000499D                 mov     dword ptr [eax], offset ??_7?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`vftable'
.text$mn:000049A3                 mov     [ebp+var_4], 0
.text$mn:000049AA                 mov     ecx, [ebp+var_10]
.text$mn:000049AD                 cmp     dword ptr [ecx+10h], 0
.text$mn:000049B1                 jz      short loc_49C2
.text$mn:000049B3                 mov     edx, [ebp+var_10]
.text$mn:000049B6                 mov     eax, [edx+0Ch]
.text$mn:000049B9                 push    eax             ; Memory
.text$mn:000049BA                 call    _free
.text$mn:000049BF                 add     esp, 4
.text$mn:000049C2
.text$mn:000049C2 loc_49C2:                               ; CODE XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+3Dj
.text$mn:000049C2                 mov     ecx, [ebp+var_10]
.text$mn:000049C5                 mov     edx, [ecx+14h]
.text$mn:000049C8                 push    edx             ; Memory
.text$mn:000049C9                 call    _free
.text$mn:000049CE                 add     esp, 4
.text$mn:000049D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000049D8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000049DB                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:000049E0                 mov     ecx, [ebp+var_C]
.text$mn:000049E3                 mov     large fs:0, ecx
.text$mn:000049EA                 pop     ecx
.text$mn:000049EB                 mov     esp, ebp
.text$mn:000049ED                 pop     ebp
.text$mn:000049EE                 retn
.text$mn:000049EE ??1?$ctype@_W@std@@MAE@XZ endp
.text$mn:000049EE
.text$mn:000049EE ; ---------------------------------------------------------------------------
.text$mn:000049EF                 align 10h
.text$mn:000049EF _text$mn        ends
.text$mn:000049EF
.text$x:000049F0 ; ===========================================================================
.text$x:000049F0
.text$x:000049F0 ; Segment type: Pure code
.text$x:000049F0 ; Segment permissions: Read/Execute
.text$x:000049F0 _text$x         segment para public 'CODE' use32
.text$x:000049F0                 assume cs:_text$x
.text$x:000049F0                 ;org 49F0h
.text$x:000049F0 ; COMDAT (pick associative to section at 4974)
.text$x:000049F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000049F0
.text$x:000049F0 ; =============== S U B R O U T I N E =======================================
.text$x:000049F0
.text$x:000049F0
.text$x:000049F0 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 proc near
.text$x:000049F0                                         ; DATA XREF: .xdata$x:00009394o
.text$x:000049F0                 mov     ecx, [ebp-10h]  ; this
.text$x:000049F3                 jmp     ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$x:000049F3 __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0 endp
.text$x:000049F3
.text$x:000049F8
.text$x:000049F8 ; =============== S U B R O U T I N E =======================================
.text$x:000049F8
.text$x:000049F8
.text$x:000049F8 __ehhandler$??1?$ctype@_W@std@@MAE@XZ proc near
.text$x:000049F8                                         ; DATA XREF: std::ctype<wchar_t>::~ctype<wchar_t>(void)+5o
.text$x:000049F8
.text$x:000049F8 arg_4           = dword ptr  8
.text$x:000049F8
.text$x:000049F8                 mov     edx, [esp+arg_4]
.text$x:000049FC                 lea     eax, [edx+0Ch]
.text$x:000049FF                 mov     ecx, [edx-8]
.text$x:00004A02                 xor     ecx, eax
.text$x:00004A04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A09                 mov     eax, offset __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ
.text$x:00004A0E                 jmp     ___CxxFrameHandler3
.text$x:00004A0E __ehhandler$??1?$ctype@_W@std@@MAE@XZ endp
.text$x:00004A0E
.text$x:00004A0E ; ---------------------------------------------------------------------------
.text$x:00004A13                 align 4
.text$x:00004A13 _text$x         ends
.text$x:00004A13
.text$mn:00004A14 ; ===========================================================================
.text$mn:00004A14
.text$mn:00004A14 ; Segment type: Pure code
.text$mn:00004A14 ; Segment permissions: Read/Execute
.text$mn:00004A14 _text$mn        segment para public 'CODE' use32
.text$mn:00004A14                 assume cs:_text$mn
.text$mn:00004A14                 ;org 4A14h
.text$mn:00004A14 ; COMDAT (pick any)
.text$mn:00004A14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A14
.text$mn:00004A14 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A14
.text$mn:00004A14 ; Attributes: bp-based frame
.text$mn:00004A14
.text$mn:00004A14 ; _DWORD __thiscall TiXmlAttribute::~TiXmlAttribute(TiXmlAttribute *__hidden this)
.text$mn:00004A14                 public ??1TiXmlAttribute@@UAE@XZ
.text$mn:00004A14 ??1TiXmlAttribute@@UAE@XZ proc near     ; CODE XREF: TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+1A9p
.text$mn:00004A14                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+21Cp ...
.text$mn:00004A14
.text$mn:00004A14 var_10          = dword ptr -10h
.text$mn:00004A14 var_C           = dword ptr -0Ch
.text$mn:00004A14 var_4           = dword ptr -4
.text$mn:00004A14
.text$mn:00004A14                 push    ebp
.text$mn:00004A15                 mov     ebp, esp
.text$mn:00004A17                 push    0FFFFFFFFh
.text$mn:00004A19                 push    offset __ehhandler$??1TiXmlAttribute@@UAE@XZ
.text$mn:00004A1E                 mov     eax, large fs:0
.text$mn:00004A24                 push    eax
.text$mn:00004A25                 push    ecx
.text$mn:00004A26                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A2B                 xor     eax, ebp
.text$mn:00004A2D                 push    eax
.text$mn:00004A2E                 lea     eax, [ebp+var_C]
.text$mn:00004A31                 mov     large fs:0, eax
.text$mn:00004A37                 mov     [ebp+var_10], ecx
.text$mn:00004A3A                 mov     [ebp+var_4], 2
.text$mn:00004A41                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004A45                 mov     ecx, [ebp+var_10]
.text$mn:00004A48                 add     ecx, 2Ch ; ','
.text$mn:00004A4B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004A50                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004A54                 mov     ecx, [ebp+var_10]
.text$mn:00004A57                 add     ecx, 10h
.text$mn:00004A5A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004A5F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A66                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004A69                 call    ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$mn:00004A6E                 mov     ecx, [ebp+var_C]
.text$mn:00004A71                 mov     large fs:0, ecx
.text$mn:00004A78                 pop     ecx
.text$mn:00004A79                 mov     esp, ebp
.text$mn:00004A7B                 pop     ebp
.text$mn:00004A7C                 retn
.text$mn:00004A7C ??1TiXmlAttribute@@UAE@XZ endp
.text$mn:00004A7C
.text$mn:00004A7C ; ---------------------------------------------------------------------------
.text$mn:00004A7D                 align 10h
.text$mn:00004A7D _text$mn        ends
.text$mn:00004A7D
.text$x:00004A80 ; ===========================================================================
.text$x:00004A80
.text$x:00004A80 ; Segment type: Pure code
.text$x:00004A80 ; Segment permissions: Read/Execute
.text$x:00004A80 _text$x         segment para public 'CODE' use32
.text$x:00004A80                 assume cs:_text$x
.text$x:00004A80                 ;org 4A80h
.text$x:00004A80 ; COMDAT (pick associative to section at 4A14)
.text$x:00004A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A80
.text$x:00004A80 ; =============== S U B R O U T I N E =======================================
.text$x:00004A80
.text$x:00004A80
.text$x:00004A80 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0 proc near
.text$x:00004A80                                         ; DATA XREF: .xdata$x:00009C40o
.text$x:00004A80                 mov     ecx, [ebp-10h]  ; this
.text$x:00004A83                 jmp     ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$x:00004A83 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0 endp
.text$x:00004A83
.text$x:00004A88
.text$x:00004A88 ; =============== S U B R O U T I N E =======================================
.text$x:00004A88
.text$x:00004A88
.text$x:00004A88 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1 proc near
.text$x:00004A88                                         ; DATA XREF: .xdata$x:00009C48o
.text$x:00004A88                 mov     ecx, [ebp-10h]
.text$x:00004A8B                 add     ecx, 10h
.text$x:00004A8E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004A8E __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1 endp
.text$x:00004A8E
.text$x:00004A93
.text$x:00004A93 ; =============== S U B R O U T I N E =======================================
.text$x:00004A93
.text$x:00004A93
.text$x:00004A93 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2 proc near
.text$x:00004A93                                         ; DATA XREF: .xdata$x:00009C50o
.text$x:00004A93                 mov     ecx, [ebp-10h]
.text$x:00004A96                 add     ecx, 2Ch ; ','
.text$x:00004A99                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004A99 __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2 endp
.text$x:00004A99
.text$x:00004A9E
.text$x:00004A9E ; =============== S U B R O U T I N E =======================================
.text$x:00004A9E
.text$x:00004A9E
.text$x:00004A9E __ehhandler$??1TiXmlAttribute@@UAE@XZ proc near
.text$x:00004A9E                                         ; DATA XREF: TiXmlAttribute::~TiXmlAttribute(void)+5o
.text$x:00004A9E
.text$x:00004A9E arg_4           = dword ptr  8
.text$x:00004A9E
.text$x:00004A9E                 mov     edx, [esp+arg_4]
.text$x:00004AA2                 lea     eax, [edx+0Ch]
.text$x:00004AA5                 mov     ecx, [edx-8]
.text$x:00004AA8                 xor     ecx, eax
.text$x:00004AAA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AAF                 mov     eax, offset __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ
.text$x:00004AB4                 jmp     ___CxxFrameHandler3
.text$x:00004AB4 __ehhandler$??1TiXmlAttribute@@UAE@XZ endp
.text$x:00004AB4
.text$x:00004AB4 ; ---------------------------------------------------------------------------
.text$x:00004AB9                 align 4
.text$x:00004AB9 _text$x         ends
.text$x:00004AB9
.text$mn:00004ABC ; ===========================================================================
.text$mn:00004ABC
.text$mn:00004ABC ; Segment type: Pure code
.text$mn:00004ABC ; Segment permissions: Read/Execute
.text$mn:00004ABC _text$mn        segment para public 'CODE' use32
.text$mn:00004ABC                 assume cs:_text$mn
.text$mn:00004ABC                 ;org 4ABCh
.text$mn:00004ABC ; COMDAT (pick any)
.text$mn:00004ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004ABC
.text$mn:00004ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00004ABC
.text$mn:00004ABC ; Attributes: bp-based frame
.text$mn:00004ABC
.text$mn:00004ABC ; _DWORD __thiscall TiXmlBase::~TiXmlBase(TiXmlBase *__hidden this)
.text$mn:00004ABC                 public ??1TiXmlBase@@UAE@XZ
.text$mn:00004ABC ??1TiXmlBase@@UAE@XZ proc near          ; CODE XREF: __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0+3j
.text$mn:00004ABC                                         ; TiXmlAttribute::~TiXmlAttribute(void)+55p ...
.text$mn:00004ABC
.text$mn:00004ABC var_4           = dword ptr -4
.text$mn:00004ABC
.text$mn:00004ABC                 push    ebp
.text$mn:00004ABD                 mov     ebp, esp
.text$mn:00004ABF                 push    ecx
.text$mn:00004AC0                 mov     [ebp+var_4], ecx
.text$mn:00004AC3                 mov     eax, [ebp+var_4]
.text$mn:00004AC6                 mov     dword ptr [eax], offset ??_7TiXmlBase@@6B@ ; const TiXmlBase::`vftable'
.text$mn:00004ACC                 mov     esp, ebp
.text$mn:00004ACE                 pop     ebp
.text$mn:00004ACF                 retn
.text$mn:00004ACF ??1TiXmlBase@@UAE@XZ endp
.text$mn:00004ACF
.text$mn:00004ACF _text$mn        ends
.text$mn:00004ACF
.text$mn:00004AD0 ; ===========================================================================
.text$mn:00004AD0
.text$mn:00004AD0 ; Segment type: Pure code
.text$mn:00004AD0 ; Segment permissions: Read/Execute
.text$mn:00004AD0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AD0                 assume cs:_text$mn
.text$mn:00004AD0                 ;org 4AD0h
.text$mn:00004AD0 ; COMDAT (pick any)
.text$mn:00004AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AD0
.text$mn:00004AD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AD0
.text$mn:00004AD0 ; Attributes: bp-based frame
.text$mn:00004AD0
.text$mn:00004AD0 ; _DWORD __thiscall TiXmlComment::~TiXmlComment(TiXmlComment *__hidden this)
.text$mn:00004AD0                 public ??1TiXmlComment@@UAE@XZ
.text$mn:00004AD0 ??1TiXmlComment@@UAE@XZ proc near       ; CODE XREF: TiXmlComment::`scalar deleting destructor'(uint)+Ap
.text$mn:00004AD0
.text$mn:00004AD0 var_10          = dword ptr -10h
.text$mn:00004AD0 var_C           = dword ptr -0Ch
.text$mn:00004AD0 var_4           = dword ptr -4
.text$mn:00004AD0
.text$mn:00004AD0                 push    ebp
.text$mn:00004AD1                 mov     ebp, esp
.text$mn:00004AD3                 push    0FFFFFFFFh
.text$mn:00004AD5                 push    offset __ehhandler$??1TiXmlComment@@UAE@XZ
.text$mn:00004ADA                 mov     eax, large fs:0
.text$mn:00004AE0                 push    eax
.text$mn:00004AE1                 push    ecx
.text$mn:00004AE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004AE7                 xor     eax, ebp
.text$mn:00004AE9                 push    eax
.text$mn:00004AEA                 lea     eax, [ebp+var_C]
.text$mn:00004AED                 mov     large fs:0, eax
.text$mn:00004AF3                 mov     [ebp+var_10], ecx
.text$mn:00004AF6                 mov     eax, [ebp+var_10]
.text$mn:00004AF9                 mov     dword ptr [eax], offset ??_7TiXmlComment@@6B@ ; const TiXmlComment::`vftable'
.text$mn:00004AFF                 mov     [ebp+var_4], 0
.text$mn:00004B06                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004B0D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004B10                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00004B15                 mov     ecx, [ebp+var_C]
.text$mn:00004B18                 mov     large fs:0, ecx
.text$mn:00004B1F                 pop     ecx
.text$mn:00004B20                 mov     esp, ebp
.text$mn:00004B22                 pop     ebp
.text$mn:00004B23                 retn
.text$mn:00004B23 ??1TiXmlComment@@UAE@XZ endp
.text$mn:00004B23
.text$mn:00004B23 _text$mn        ends
.text$mn:00004B23
.text$x:00004B24 ; ===========================================================================
.text$x:00004B24
.text$x:00004B24 ; Segment type: Pure code
.text$x:00004B24 ; Segment permissions: Read/Execute
.text$x:00004B24 _text$x         segment para public 'CODE' use32
.text$x:00004B24                 assume cs:_text$x
.text$x:00004B24                 ;org 4B24h
.text$x:00004B24 ; COMDAT (pick associative to section at 4AD0)
.text$x:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B24
.text$x:00004B24 ; =============== S U B R O U T I N E =======================================
.text$x:00004B24
.text$x:00004B24
.text$x:00004B24 __unwindfunclet$??1TiXmlComment@@UAE@XZ$0 proc near
.text$x:00004B24                                         ; DATA XREF: .xdata$x:00009CA8o
.text$x:00004B24                 mov     ecx, [ebp-10h]  ; this
.text$x:00004B27                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00004B27 __unwindfunclet$??1TiXmlComment@@UAE@XZ$0 endp
.text$x:00004B27
.text$x:00004B2C
.text$x:00004B2C ; =============== S U B R O U T I N E =======================================
.text$x:00004B2C
.text$x:00004B2C
.text$x:00004B2C __ehhandler$??1TiXmlComment@@UAE@XZ proc near
.text$x:00004B2C                                         ; DATA XREF: TiXmlComment::~TiXmlComment(void)+5o
.text$x:00004B2C
.text$x:00004B2C arg_4           = dword ptr  8
.text$x:00004B2C
.text$x:00004B2C                 mov     edx, [esp+arg_4]
.text$x:00004B30                 lea     eax, [edx+0Ch]
.text$x:00004B33                 mov     ecx, [edx-8]
.text$x:00004B36                 xor     ecx, eax
.text$x:00004B38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B3D                 mov     eax, offset __ehfuncinfo$??1TiXmlComment@@UAE@XZ
.text$x:00004B42                 jmp     ___CxxFrameHandler3
.text$x:00004B42 __ehhandler$??1TiXmlComment@@UAE@XZ endp
.text$x:00004B42
.text$x:00004B42 ; ---------------------------------------------------------------------------
.text$x:00004B47                 align 4
.text$x:00004B47 _text$x         ends
.text$x:00004B47
.text$mn:00004B48 ; ===========================================================================
.text$mn:00004B48
.text$mn:00004B48 ; Segment type: Pure code
.text$mn:00004B48 ; Segment permissions: Read/Execute
.text$mn:00004B48 _text$mn        segment para public 'CODE' use32
.text$mn:00004B48                 assume cs:_text$mn
.text$mn:00004B48                 ;org 4B48h
.text$mn:00004B48 ; COMDAT (pick any)
.text$mn:00004B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B48
.text$mn:00004B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B48
.text$mn:00004B48 ; Attributes: bp-based frame
.text$mn:00004B48
.text$mn:00004B48 ; _DWORD __thiscall TiXmlDeclaration::~TiXmlDeclaration(TiXmlDeclaration *__hidden this)
.text$mn:00004B48                 public ??1TiXmlDeclaration@@UAE@XZ
.text$mn:00004B48 ??1TiXmlDeclaration@@UAE@XZ proc near   ; CODE XREF: TiXmlDeclaration::`scalar deleting destructor'(uint)+Ap
.text$mn:00004B48
.text$mn:00004B48 var_10          = dword ptr -10h
.text$mn:00004B48 var_C           = dword ptr -0Ch
.text$mn:00004B48 var_4           = dword ptr -4
.text$mn:00004B48
.text$mn:00004B48                 push    ebp
.text$mn:00004B49                 mov     ebp, esp
.text$mn:00004B4B                 push    0FFFFFFFFh
.text$mn:00004B4D                 push    offset __ehhandler$??1TiXmlDeclaration@@UAE@XZ
.text$mn:00004B52                 mov     eax, large fs:0
.text$mn:00004B58                 push    eax
.text$mn:00004B59                 push    ecx
.text$mn:00004B5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B5F                 xor     eax, ebp
.text$mn:00004B61                 push    eax
.text$mn:00004B62                 lea     eax, [ebp+var_C]
.text$mn:00004B65                 mov     large fs:0, eax
.text$mn:00004B6B                 mov     [ebp+var_10], ecx
.text$mn:00004B6E                 mov     eax, [ebp+var_10]
.text$mn:00004B71                 mov     dword ptr [eax], offset ??_7TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`vftable'
.text$mn:00004B77                 mov     [ebp+var_4], 3
.text$mn:00004B7E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004B82                 mov     ecx, [ebp+var_10]
.text$mn:00004B85                 add     ecx, 7Ch ; '|'
.text$mn:00004B88                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004B8D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004B91                 mov     ecx, [ebp+var_10]
.text$mn:00004B94                 add     ecx, 60h ; '`'
.text$mn:00004B97                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004B9C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004BA0                 mov     ecx, [ebp+var_10]
.text$mn:00004BA3                 add     ecx, 44h ; 'D'
.text$mn:00004BA6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004BAB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004BB2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004BB5                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00004BBA                 mov     ecx, [ebp+var_C]
.text$mn:00004BBD                 mov     large fs:0, ecx
.text$mn:00004BC4                 pop     ecx
.text$mn:00004BC5                 mov     esp, ebp
.text$mn:00004BC7                 pop     ebp
.text$mn:00004BC8                 retn
.text$mn:00004BC8 ??1TiXmlDeclaration@@UAE@XZ endp
.text$mn:00004BC8
.text$mn:00004BC8 ; ---------------------------------------------------------------------------
.text$mn:00004BC9                 align 4
.text$mn:00004BC9 _text$mn        ends
.text$mn:00004BC9
.text$x:00004BCC ; ===========================================================================
.text$x:00004BCC
.text$x:00004BCC ; Segment type: Pure code
.text$x:00004BCC ; Segment permissions: Read/Execute
.text$x:00004BCC _text$x         segment para public 'CODE' use32
.text$x:00004BCC                 assume cs:_text$x
.text$x:00004BCC                 ;org 4BCCh
.text$x:00004BCC ; COMDAT (pick associative to section at 4B48)
.text$x:00004BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BCC
.text$x:00004BCC ; =============== S U B R O U T I N E =======================================
.text$x:00004BCC
.text$x:00004BCC
.text$x:00004BCC __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0 proc near
.text$x:00004BCC                                         ; DATA XREF: .xdata$x:00009D70o
.text$x:00004BCC                 mov     ecx, [ebp-10h]  ; this
.text$x:00004BCF                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00004BCF __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0 endp
.text$x:00004BCF
.text$x:00004BD4
.text$x:00004BD4 ; =============== S U B R O U T I N E =======================================
.text$x:00004BD4
.text$x:00004BD4
.text$x:00004BD4 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1 proc near
.text$x:00004BD4                                         ; DATA XREF: .xdata$x:00009D78o
.text$x:00004BD4                 mov     ecx, [ebp-10h]
.text$x:00004BD7                 add     ecx, 44h ; 'D'
.text$x:00004BDA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004BDA __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1 endp
.text$x:00004BDA
.text$x:00004BDF
.text$x:00004BDF ; =============== S U B R O U T I N E =======================================
.text$x:00004BDF
.text$x:00004BDF
.text$x:00004BDF __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2 proc near
.text$x:00004BDF                                         ; DATA XREF: .xdata$x:00009D80o
.text$x:00004BDF                 mov     ecx, [ebp-10h]
.text$x:00004BE2                 add     ecx, 60h ; '`'
.text$x:00004BE5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004BE5 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2 endp
.text$x:00004BE5
.text$x:00004BEA
.text$x:00004BEA ; =============== S U B R O U T I N E =======================================
.text$x:00004BEA
.text$x:00004BEA
.text$x:00004BEA __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3 proc near
.text$x:00004BEA                                         ; DATA XREF: .xdata$x:00009D88o
.text$x:00004BEA                 mov     ecx, [ebp-10h]
.text$x:00004BED                 add     ecx, 7Ch ; '|'
.text$x:00004BF0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004BF0 __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3 endp
.text$x:00004BF0
.text$x:00004BF5
.text$x:00004BF5 ; =============== S U B R O U T I N E =======================================
.text$x:00004BF5
.text$x:00004BF5
.text$x:00004BF5 __ehhandler$??1TiXmlDeclaration@@UAE@XZ proc near
.text$x:00004BF5                                         ; DATA XREF: TiXmlDeclaration::~TiXmlDeclaration(void)+5o
.text$x:00004BF5
.text$x:00004BF5 arg_4           = dword ptr  8
.text$x:00004BF5
.text$x:00004BF5                 mov     edx, [esp+arg_4]
.text$x:00004BF9                 lea     eax, [edx+0Ch]
.text$x:00004BFC                 mov     ecx, [edx-8]
.text$x:00004BFF                 xor     ecx, eax
.text$x:00004C01                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C06                 mov     eax, offset __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ
.text$x:00004C0B                 jmp     ___CxxFrameHandler3
.text$x:00004C0B __ehhandler$??1TiXmlDeclaration@@UAE@XZ endp
.text$x:00004C0B
.text$x:00004C0B _text$x         ends
.text$x:00004C0B
.text$mn:00004C10 ; ===========================================================================
.text$mn:00004C10
.text$mn:00004C10 ; Segment type: Pure code
.text$mn:00004C10 ; Segment permissions: Read/Execute
.text$mn:00004C10 _text$mn        segment para public 'CODE' use32
.text$mn:00004C10                 assume cs:_text$mn
.text$mn:00004C10                 ;org 4C10h
.text$mn:00004C10 ; COMDAT (pick any)
.text$mn:00004C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C10
.text$mn:00004C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C10
.text$mn:00004C10 ; Attributes: bp-based frame
.text$mn:00004C10
.text$mn:00004C10 ; _DWORD __thiscall TiXmlText::~TiXmlText(TiXmlText *__hidden this)
.text$mn:00004C10                 public ??1TiXmlText@@UAE@XZ
.text$mn:00004C10 ??1TiXmlText@@UAE@XZ proc near          ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+142p
.text$mn:00004C10                                         ; __unwindfunclet$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0+3j ...
.text$mn:00004C10
.text$mn:00004C10 var_10          = dword ptr -10h
.text$mn:00004C10 var_C           = dword ptr -0Ch
.text$mn:00004C10 var_4           = dword ptr -4
.text$mn:00004C10
.text$mn:00004C10                 push    ebp
.text$mn:00004C11                 mov     ebp, esp
.text$mn:00004C13                 push    0FFFFFFFFh
.text$mn:00004C15                 push    offset __ehhandler$??1TiXmlText@@UAE@XZ
.text$mn:00004C1A                 mov     eax, large fs:0
.text$mn:00004C20                 push    eax
.text$mn:00004C21                 push    ecx
.text$mn:00004C22                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C27                 xor     eax, ebp
.text$mn:00004C29                 push    eax
.text$mn:00004C2A                 lea     eax, [ebp+var_C]
.text$mn:00004C2D                 mov     large fs:0, eax
.text$mn:00004C33                 mov     [ebp+var_10], ecx
.text$mn:00004C36                 mov     eax, [ebp+var_10]
.text$mn:00004C39                 mov     dword ptr [eax], offset ??_7TiXmlText@@6B@ ; const TiXmlText::`vftable'
.text$mn:00004C3F                 mov     [ebp+var_4], 0
.text$mn:00004C46                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C4D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C50                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00004C55                 mov     ecx, [ebp+var_C]
.text$mn:00004C58                 mov     large fs:0, ecx
.text$mn:00004C5F                 pop     ecx
.text$mn:00004C60                 mov     esp, ebp
.text$mn:00004C62                 pop     ebp
.text$mn:00004C63                 retn
.text$mn:00004C63 ??1TiXmlText@@UAE@XZ endp
.text$mn:00004C63
.text$mn:00004C63 _text$mn        ends
.text$mn:00004C63
.text$x:00004C64 ; ===========================================================================
.text$x:00004C64
.text$x:00004C64 ; Segment type: Pure code
.text$x:00004C64 ; Segment permissions: Read/Execute
.text$x:00004C64 _text$x         segment para public 'CODE' use32
.text$x:00004C64                 assume cs:_text$x
.text$x:00004C64                 ;org 4C64h
.text$x:00004C64 ; COMDAT (pick associative to section at 4C10)
.text$x:00004C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C64
.text$x:00004C64 ; =============== S U B R O U T I N E =======================================
.text$x:00004C64
.text$x:00004C64
.text$x:00004C64 __unwindfunclet$??1TiXmlText@@UAE@XZ$0 proc near
.text$x:00004C64                                         ; DATA XREF: .xdata$x:00009D00o
.text$x:00004C64                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C67                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00004C67 __unwindfunclet$??1TiXmlText@@UAE@XZ$0 endp
.text$x:00004C67
.text$x:00004C6C
.text$x:00004C6C ; =============== S U B R O U T I N E =======================================
.text$x:00004C6C
.text$x:00004C6C
.text$x:00004C6C __ehhandler$??1TiXmlText@@UAE@XZ proc near
.text$x:00004C6C                                         ; DATA XREF: TiXmlText::~TiXmlText(void)+5o
.text$x:00004C6C
.text$x:00004C6C arg_4           = dword ptr  8
.text$x:00004C6C
.text$x:00004C6C                 mov     edx, [esp+arg_4]
.text$x:00004C70                 lea     eax, [edx+0Ch]
.text$x:00004C73                 mov     ecx, [edx-8]
.text$x:00004C76                 xor     ecx, eax
.text$x:00004C78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C7D                 mov     eax, offset __ehfuncinfo$??1TiXmlText@@UAE@XZ
.text$x:00004C82                 jmp     ___CxxFrameHandler3
.text$x:00004C82 __ehhandler$??1TiXmlText@@UAE@XZ endp
.text$x:00004C82
.text$x:00004C82 ; ---------------------------------------------------------------------------
.text$x:00004C87                 align 4
.text$x:00004C87 _text$x         ends
.text$x:00004C87
.text$mn:00004C88 ; ===========================================================================
.text$mn:00004C88
.text$mn:00004C88 ; Segment type: Pure code
.text$mn:00004C88 ; Segment permissions: Read/Execute
.text$mn:00004C88 _text$mn        segment para public 'CODE' use32
.text$mn:00004C88                 assume cs:_text$mn
.text$mn:00004C88                 ;org 4C88h
.text$mn:00004C88 ; COMDAT (pick any)
.text$mn:00004C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C88
.text$mn:00004C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C88
.text$mn:00004C88 ; Attributes: bp-based frame
.text$mn:00004C88
.text$mn:00004C88 ; _DWORD __thiscall TiXmlUnknown::~TiXmlUnknown(TiXmlUnknown *__hidden this)
.text$mn:00004C88                 public ??1TiXmlUnknown@@UAE@XZ
.text$mn:00004C88 ??1TiXmlUnknown@@UAE@XZ proc near       ; CODE XREF: TiXmlUnknown::`scalar deleting destructor'(uint)+Ap
.text$mn:00004C88
.text$mn:00004C88 var_10          = dword ptr -10h
.text$mn:00004C88 var_C           = dword ptr -0Ch
.text$mn:00004C88 var_4           = dword ptr -4
.text$mn:00004C88
.text$mn:00004C88                 push    ebp
.text$mn:00004C89                 mov     ebp, esp
.text$mn:00004C8B                 push    0FFFFFFFFh
.text$mn:00004C8D                 push    offset __ehhandler$??1TiXmlUnknown@@UAE@XZ
.text$mn:00004C92                 mov     eax, large fs:0
.text$mn:00004C98                 push    eax
.text$mn:00004C99                 push    ecx
.text$mn:00004C9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C9F                 xor     eax, ebp
.text$mn:00004CA1                 push    eax
.text$mn:00004CA2                 lea     eax, [ebp+var_C]
.text$mn:00004CA5                 mov     large fs:0, eax
.text$mn:00004CAB                 mov     [ebp+var_10], ecx
.text$mn:00004CAE                 mov     eax, [ebp+var_10]
.text$mn:00004CB1                 mov     dword ptr [eax], offset ??_7TiXmlUnknown@@6B@ ; const TiXmlUnknown::`vftable'
.text$mn:00004CB7                 mov     [ebp+var_4], 0
.text$mn:00004CBE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004CC5                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004CC8                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00004CCD                 mov     ecx, [ebp+var_C]
.text$mn:00004CD0                 mov     large fs:0, ecx
.text$mn:00004CD7                 pop     ecx
.text$mn:00004CD8                 mov     esp, ebp
.text$mn:00004CDA                 pop     ebp
.text$mn:00004CDB                 retn
.text$mn:00004CDB ??1TiXmlUnknown@@UAE@XZ endp
.text$mn:00004CDB
.text$mn:00004CDB _text$mn        ends
.text$mn:00004CDB
.text$x:00004CDC ; ===========================================================================
.text$x:00004CDC
.text$x:00004CDC ; Segment type: Pure code
.text$x:00004CDC ; Segment permissions: Read/Execute
.text$x:00004CDC _text$x         segment para public 'CODE' use32
.text$x:00004CDC                 assume cs:_text$x
.text$x:00004CDC                 ;org 4CDCh
.text$x:00004CDC ; COMDAT (pick associative to section at 4C88)
.text$x:00004CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004CDC
.text$x:00004CDC ; =============== S U B R O U T I N E =======================================
.text$x:00004CDC
.text$x:00004CDC
.text$x:00004CDC __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0 proc near
.text$x:00004CDC                                         ; DATA XREF: .xdata$x:00009DE0o
.text$x:00004CDC                 mov     ecx, [ebp-10h]  ; this
.text$x:00004CDF                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00004CDF __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0 endp
.text$x:00004CDF
.text$x:00004CE4
.text$x:00004CE4 ; =============== S U B R O U T I N E =======================================
.text$x:00004CE4
.text$x:00004CE4
.text$x:00004CE4 __ehhandler$??1TiXmlUnknown@@UAE@XZ proc near
.text$x:00004CE4                                         ; DATA XREF: TiXmlUnknown::~TiXmlUnknown(void)+5o
.text$x:00004CE4
.text$x:00004CE4 arg_4           = dword ptr  8
.text$x:00004CE4
.text$x:00004CE4                 mov     edx, [esp+arg_4]
.text$x:00004CE8                 lea     eax, [edx+0Ch]
.text$x:00004CEB                 mov     ecx, [edx-8]
.text$x:00004CEE                 xor     ecx, eax
.text$x:00004CF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CF5                 mov     eax, offset __ehfuncinfo$??1TiXmlUnknown@@UAE@XZ
.text$x:00004CFA                 jmp     ___CxxFrameHandler3
.text$x:00004CFA __ehhandler$??1TiXmlUnknown@@UAE@XZ endp
.text$x:00004CFA
.text$x:00004CFA ; ---------------------------------------------------------------------------
.text$x:00004CFF                 align 10h
.text$x:00004CFF _text$x         ends
.text$x:00004CFF
.text$mn:00004D00 ; ===========================================================================
.text$mn:00004D00
.text$mn:00004D00 ; Segment type: Pure code
.text$mn:00004D00 ; Segment permissions: Read/Execute
.text$mn:00004D00 _text$mn        segment para public 'CODE' use32
.text$mn:00004D00                 assume cs:_text$mn
.text$mn:00004D00                 ;org 4D00h
.text$mn:00004D00 ; COMDAT (pick any)
.text$mn:00004D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D00
.text$mn:00004D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D00
.text$mn:00004D00 ; Attributes: bp-based frame
.text$mn:00004D00
.text$mn:00004D00 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00004D00                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00004D00 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00004D00                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00004D00                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00004D00
.text$mn:00004D00 var_4           = dword ptr -4
.text$mn:00004D00
.text$mn:00004D00                 push    ebp
.text$mn:00004D01                 mov     ebp, esp
.text$mn:00004D03                 push    ecx
.text$mn:00004D04                 mov     [ebp+var_4], ecx
.text$mn:00004D07                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004D0A                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004D0F                 mov     esp, ebp
.text$mn:00004D11                 pop     ebp
.text$mn:00004D12                 retn
.text$mn:00004D12 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00004D12
.text$mn:00004D12 ; ---------------------------------------------------------------------------
.text$mn:00004D13                 align 4
.text$mn:00004D13 _text$mn        ends
.text$mn:00004D13
.text$mn:00004D14 ; ===========================================================================
.text$mn:00004D14
.text$mn:00004D14 ; Segment type: Pure code
.text$mn:00004D14 ; Segment permissions: Read/Execute
.text$mn:00004D14 _text$mn        segment para public 'CODE' use32
.text$mn:00004D14                 assume cs:_text$mn
.text$mn:00004D14                 ;org 4D14h
.text$mn:00004D14 ; COMDAT (pick any)
.text$mn:00004D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D14
.text$mn:00004D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D14
.text$mn:00004D14 ; Attributes: bp-based frame
.text$mn:00004D14
.text$mn:00004D14 ; _DWORD __thiscall std::_Facet_base::~_Facet_base(std::_Facet_base *__hidden this)
.text$mn:00004D14                 public ??1_Facet_base@std@@UAE@XZ
.text$mn:00004D14 ??1_Facet_base@std@@UAE@XZ proc near    ; CODE XREF: __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0+3j
.text$mn:00004D14                                         ; std::locale::facet::~facet(void)+40p ...
.text$mn:00004D14
.text$mn:00004D14 var_4           = dword ptr -4
.text$mn:00004D14
.text$mn:00004D14                 push    ebp
.text$mn:00004D15                 mov     ebp, esp
.text$mn:00004D17                 push    ecx
.text$mn:00004D18                 mov     [ebp+var_4], ecx
.text$mn:00004D1B                 mov     eax, [ebp+var_4]
.text$mn:00004D1E                 mov     dword ptr [eax], offset ??_7_Facet_base@std@@6B@ ; const std::_Facet_base::`vftable'
.text$mn:00004D24                 mov     esp, ebp
.text$mn:00004D26                 pop     ebp
.text$mn:00004D27                 retn
.text$mn:00004D27 ??1_Facet_base@std@@UAE@XZ endp
.text$mn:00004D27
.text$mn:00004D27 _text$mn        ends
.text$mn:00004D27
.text$mn:00004D28 ; ===========================================================================
.text$mn:00004D28
.text$mn:00004D28 ; Segment type: Pure code
.text$mn:00004D28 ; Segment permissions: Read/Execute
.text$mn:00004D28 _text$mn        segment para public 'CODE' use32
.text$mn:00004D28                 assume cs:_text$mn
.text$mn:00004D28                 ;org 4D28h
.text$mn:00004D28 ; COMDAT (pick any)
.text$mn:00004D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D28
.text$mn:00004D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D28
.text$mn:00004D28 ; Attributes: bp-based frame
.text$mn:00004D28
.text$mn:00004D28 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00004D28                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004D28 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00004D28                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00004D28                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00004D28
.text$mn:00004D28 var_10          = dword ptr -10h
.text$mn:00004D28 var_C           = dword ptr -0Ch
.text$mn:00004D28 var_4           = dword ptr -4
.text$mn:00004D28
.text$mn:00004D28                 push    ebp
.text$mn:00004D29                 mov     ebp, esp
.text$mn:00004D2B                 push    0FFFFFFFFh
.text$mn:00004D2D                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004D32                 mov     eax, large fs:0
.text$mn:00004D38                 push    eax
.text$mn:00004D39                 push    ecx
.text$mn:00004D3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D3F                 xor     eax, ebp
.text$mn:00004D41                 push    eax
.text$mn:00004D42                 lea     eax, [ebp+var_C]
.text$mn:00004D45                 mov     large fs:0, eax
.text$mn:00004D4B                 mov     [ebp+var_10], ecx
.text$mn:00004D4E                 mov     [ebp+var_4], 0
.text$mn:00004D55                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D5C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004D5F                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00004D64                 mov     ecx, [ebp+var_C]
.text$mn:00004D67                 mov     large fs:0, ecx
.text$mn:00004D6E                 pop     ecx
.text$mn:00004D6F                 mov     esp, ebp
.text$mn:00004D71                 pop     ebp
.text$mn:00004D72                 retn
.text$mn:00004D72 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00004D72
.text$mn:00004D72 ; ---------------------------------------------------------------------------
.text$mn:00004D73                 align 4
.text$mn:00004D73 _text$mn        ends
.text$mn:00004D73
.text$x:00004D74 ; ===========================================================================
.text$x:00004D74
.text$x:00004D74 ; Segment type: Pure code
.text$x:00004D74 ; Segment permissions: Read/Execute
.text$x:00004D74 _text$x         segment para public 'CODE' use32
.text$x:00004D74                 assume cs:_text$x
.text$x:00004D74                 ;org 4D74h
.text$x:00004D74 ; COMDAT (pick associative to section at 4D28)
.text$x:00004D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D74
.text$x:00004D74 ; =============== S U B R O U T I N E =======================================
.text$x:00004D74
.text$x:00004D74
.text$x:00004D74 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00004D74                                         ; DATA XREF: .xdata$x:000095B0o
.text$x:00004D74                 mov     ecx, [ebp-10h]  ; this
.text$x:00004D77                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00004D77 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00004D77
.text$x:00004D7C
.text$x:00004D7C ; =============== S U B R O U T I N E =======================================
.text$x:00004D7C
.text$x:00004D7C
.text$x:00004D7C __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00004D7C                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00004D7C
.text$x:00004D7C arg_4           = dword ptr  8
.text$x:00004D7C
.text$x:00004D7C                 mov     edx, [esp+arg_4]
.text$x:00004D80                 lea     eax, [edx+0Ch]
.text$x:00004D83                 mov     ecx, [edx-8]
.text$x:00004D86                 xor     ecx, eax
.text$x:00004D88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D8D                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00004D92                 jmp     ___CxxFrameHandler3
.text$x:00004D92 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00004D92
.text$x:00004D92 ; ---------------------------------------------------------------------------
.text$x:00004D97                 align 4
.text$x:00004D97 _text$x         ends
.text$x:00004D97
.text$mn:00004D98 ; ===========================================================================
.text$mn:00004D98
.text$mn:00004D98 ; Segment type: Pure code
.text$mn:00004D98 ; Segment permissions: Read/Execute
.text$mn:00004D98 _text$mn        segment para public 'CODE' use32
.text$mn:00004D98                 assume cs:_text$mn
.text$mn:00004D98                 ;org 4D98h
.text$mn:00004D98 ; COMDAT (pick any)
.text$mn:00004D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D98
.text$mn:00004D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D98
.text$mn:00004D98 ; Attributes: bp-based frame
.text$mn:00004D98
.text$mn:00004D98 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004D98                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004D98 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00004D98                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00004D98                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004D98
.text$mn:00004D98 var_10          = dword ptr -10h
.text$mn:00004D98 var_C           = dword ptr -0Ch
.text$mn:00004D98 var_4           = dword ptr -4
.text$mn:00004D98
.text$mn:00004D98                 push    ebp
.text$mn:00004D99                 mov     ebp, esp
.text$mn:00004D9B                 push    0FFFFFFFFh
.text$mn:00004D9D                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004DA2                 mov     eax, large fs:0
.text$mn:00004DA8                 push    eax
.text$mn:00004DA9                 push    ecx
.text$mn:00004DAA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DAF                 xor     eax, ebp
.text$mn:00004DB1                 push    eax
.text$mn:00004DB2                 lea     eax, [ebp+var_C]
.text$mn:00004DB5                 mov     large fs:0, eax
.text$mn:00004DBB                 mov     [ebp+var_10], ecx
.text$mn:00004DBE                 mov     [ebp+var_4], 0
.text$mn:00004DC5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DCC                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004DCF                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004DD4                 mov     ecx, [ebp+var_C]
.text$mn:00004DD7                 mov     large fs:0, ecx
.text$mn:00004DDE                 pop     ecx
.text$mn:00004DDF                 mov     esp, ebp
.text$mn:00004DE1                 pop     ebp
.text$mn:00004DE2                 retn
.text$mn:00004DE2 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00004DE2
.text$mn:00004DE2 ; ---------------------------------------------------------------------------
.text$mn:00004DE3                 align 4
.text$mn:00004DE3 _text$mn        ends
.text$mn:00004DE3
.text$x:00004DE4 ; ===========================================================================
.text$x:00004DE4
.text$x:00004DE4 ; Segment type: Pure code
.text$x:00004DE4 ; Segment permissions: Read/Execute
.text$x:00004DE4 _text$x         segment para public 'CODE' use32
.text$x:00004DE4                 assume cs:_text$x
.text$x:00004DE4                 ;org 4DE4h
.text$x:00004DE4 ; COMDAT (pick associative to section at 4D98)
.text$x:00004DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004DE4
.text$x:00004DE4 ; =============== S U B R O U T I N E =======================================
.text$x:00004DE4
.text$x:00004DE4
.text$x:00004DE4 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00004DE4                                         ; DATA XREF: .xdata$x:00009634o
.text$x:00004DE4                 mov     ecx, [ebp-10h]  ; this
.text$x:00004DE7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004DE7 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00004DE7
.text$x:00004DEC
.text$x:00004DEC ; =============== S U B R O U T I N E =======================================
.text$x:00004DEC
.text$x:00004DEC
.text$x:00004DEC __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00004DEC                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00004DEC
.text$x:00004DEC arg_4           = dword ptr  8
.text$x:00004DEC
.text$x:00004DEC                 mov     edx, [esp+arg_4]
.text$x:00004DF0                 lea     eax, [edx+0Ch]
.text$x:00004DF3                 mov     ecx, [edx-8]
.text$x:00004DF6                 xor     ecx, eax
.text$x:00004DF8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DFD                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00004E02                 jmp     ___CxxFrameHandler3
.text$x:00004E02 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00004E02
.text$x:00004E02 ; ---------------------------------------------------------------------------
.text$x:00004E07                 align 4
.text$x:00004E07 _text$x         ends
.text$x:00004E07
.text$mn:00004E08 ; ===========================================================================
.text$mn:00004E08
.text$mn:00004E08 ; Segment type: Pure code
.text$mn:00004E08 ; Segment permissions: Read/Execute
.text$mn:00004E08 _text$mn        segment para public 'CODE' use32
.text$mn:00004E08                 assume cs:_text$mn
.text$mn:00004E08                 ;org 4E08h
.text$mn:00004E08 ; COMDAT (pick any)
.text$mn:00004E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E08
.text$mn:00004E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E08
.text$mn:00004E08 ; Attributes: bp-based frame
.text$mn:00004E08
.text$mn:00004E08 ; _DWORD __thiscall std::_Locinfo::~_Locinfo(std::_Locinfo *__hidden this)
.text$mn:00004E08                 public ??1_Locinfo@std@@QAE@XZ
.text$mn:00004E08 ??1_Locinfo@std@@QAE@XZ proc near       ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+DEp
.text$mn:00004E08                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+13j
.text$mn:00004E08
.text$mn:00004E08 var_10          = dword ptr -10h
.text$mn:00004E08 var_C           = dword ptr -0Ch
.text$mn:00004E08 var_4           = dword ptr -4
.text$mn:00004E08
.text$mn:00004E08                 push    ebp
.text$mn:00004E09                 mov     ebp, esp
.text$mn:00004E0B                 push    0FFFFFFFFh
.text$mn:00004E0D                 push    offset __ehhandler$??1_Locinfo@std@@QAE@XZ
.text$mn:00004E12                 mov     eax, large fs:0
.text$mn:00004E18                 push    eax
.text$mn:00004E19                 push    ecx
.text$mn:00004E1A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E1F                 xor     eax, ebp
.text$mn:00004E21                 push    eax
.text$mn:00004E22                 lea     eax, [ebp+var_C]
.text$mn:00004E25                 mov     large fs:0, eax
.text$mn:00004E2B                 mov     [ebp+var_10], ecx
.text$mn:00004E2E                 mov     [ebp+var_4], 6
.text$mn:00004E35                 mov     eax, [ebp+var_10]
.text$mn:00004E38                 push    eax             ; struct std::_Locinfo *
.text$mn:00004E39                 call    ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor(std::_Locinfo *)
.text$mn:00004E3E                 add     esp, 4
.text$mn:00004E41                 mov     byte ptr [ebp+var_4], 5
.text$mn:00004E45                 mov     ecx, [ebp+var_10]
.text$mn:00004E48                 add     ecx, 2Ch ; ','
.text$mn:00004E4B                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00004E50                 mov     byte ptr [ebp+var_4], 4
.text$mn:00004E54                 mov     ecx, [ebp+var_10]
.text$mn:00004E57                 add     ecx, 24h ; '$'
.text$mn:00004E5A                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00004E5F                 mov     byte ptr [ebp+var_4], 3
.text$mn:00004E63                 mov     ecx, [ebp+var_10]
.text$mn:00004E66                 add     ecx, 1Ch
.text$mn:00004E69                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00004E6E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004E72                 mov     ecx, [ebp+var_10]
.text$mn:00004E75                 add     ecx, 14h
.text$mn:00004E78                 call    ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$mn:00004E7D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004E81                 mov     ecx, [ebp+var_10]
.text$mn:00004E84                 add     ecx, 0Ch
.text$mn:00004E87                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00004E8C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004E90                 mov     ecx, [ebp+var_10]
.text$mn:00004E93                 add     ecx, 4
.text$mn:00004E96                 call    ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$mn:00004E9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004EA2                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004EA5                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004EAA                 mov     ecx, [ebp+var_C]
.text$mn:00004EAD                 mov     large fs:0, ecx
.text$mn:00004EB4                 pop     ecx
.text$mn:00004EB5                 mov     esp, ebp
.text$mn:00004EB7                 pop     ebp
.text$mn:00004EB8                 retn
.text$mn:00004EB8 ??1_Locinfo@std@@QAE@XZ endp
.text$mn:00004EB8
.text$mn:00004EB8 ; ---------------------------------------------------------------------------
.text$mn:00004EB9                 align 4
.text$mn:00004EB9 _text$mn        ends
.text$mn:00004EB9
.text$x:00004EBC ; ===========================================================================
.text$x:00004EBC
.text$x:00004EBC ; Segment type: Pure code
.text$x:00004EBC ; Segment permissions: Read/Execute
.text$x:00004EBC _text$x         segment para public 'CODE' use32
.text$x:00004EBC                 assume cs:_text$x
.text$x:00004EBC                 ;org 4EBCh
.text$x:00004EBC ; COMDAT (pick associative to section at 4E08)
.text$x:00004EBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004EBC
.text$x:00004EBC ; =============== S U B R O U T I N E =======================================
.text$x:00004EBC
.text$x:00004EBC
.text$x:00004EBC __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 proc near
.text$x:00004EBC                                         ; DATA XREF: .xdata$x:00009218o
.text$x:00004EBC                 mov     ecx, [ebp-10h]  ; this
.text$x:00004EBF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004EBF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0 endp
.text$x:00004EBF
.text$x:00004EC4
.text$x:00004EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00004EC4
.text$x:00004EC4
.text$x:00004EC4 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 proc near
.text$x:00004EC4                                         ; DATA XREF: .xdata$x:00009220o
.text$x:00004EC4                 mov     ecx, [ebp-10h]
.text$x:00004EC7                 add     ecx, 4
.text$x:00004ECA                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00004ECA __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1 endp
.text$x:00004ECA
.text$x:00004ECF
.text$x:00004ECF ; =============== S U B R O U T I N E =======================================
.text$x:00004ECF
.text$x:00004ECF
.text$x:00004ECF __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 proc near
.text$x:00004ECF                                         ; DATA XREF: .xdata$x:00009228o
.text$x:00004ECF                 mov     ecx, [ebp-10h]
.text$x:00004ED2                 add     ecx, 0Ch
.text$x:00004ED5                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00004ED5 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2 endp
.text$x:00004ED5
.text$x:00004EDA
.text$x:00004EDA ; =============== S U B R O U T I N E =======================================
.text$x:00004EDA
.text$x:00004EDA
.text$x:00004EDA __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 proc near
.text$x:00004EDA                                         ; DATA XREF: .xdata$x:00009230o
.text$x:00004EDA                 mov     ecx, [ebp-10h]
.text$x:00004EDD                 add     ecx, 14h
.text$x:00004EE0                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00004EE0 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3 endp
.text$x:00004EE0
.text$x:00004EE5
.text$x:00004EE5 ; =============== S U B R O U T I N E =======================================
.text$x:00004EE5
.text$x:00004EE5
.text$x:00004EE5 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 proc near
.text$x:00004EE5                                         ; DATA XREF: .xdata$x:00009238o
.text$x:00004EE5                 mov     ecx, [ebp-10h]
.text$x:00004EE8                 add     ecx, 1Ch
.text$x:00004EEB                 jmp     ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)
.text$x:00004EEB __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4 endp
.text$x:00004EEB
.text$x:00004EF0
.text$x:00004EF0 ; =============== S U B R O U T I N E =======================================
.text$x:00004EF0
.text$x:00004EF0
.text$x:00004EF0 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 proc near
.text$x:00004EF0                                         ; DATA XREF: .xdata$x:00009240o
.text$x:00004EF0                 mov     ecx, [ebp-10h]
.text$x:00004EF3                 add     ecx, 24h ; '$'
.text$x:00004EF6                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00004EF6 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5 endp
.text$x:00004EF6
.text$x:00004EFB
.text$x:00004EFB ; =============== S U B R O U T I N E =======================================
.text$x:00004EFB
.text$x:00004EFB
.text$x:00004EFB __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 proc near
.text$x:00004EFB                                         ; DATA XREF: .xdata$x:00009248o
.text$x:00004EFB                 mov     ecx, [ebp-10h]
.text$x:00004EFE                 add     ecx, 2Ch ; ','
.text$x:00004F01                 jmp     ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>(void)
.text$x:00004F01 __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6 endp
.text$x:00004F01
.text$x:00004F06
.text$x:00004F06 ; =============== S U B R O U T I N E =======================================
.text$x:00004F06
.text$x:00004F06
.text$x:00004F06 __ehhandler$??1_Locinfo@std@@QAE@XZ proc near
.text$x:00004F06                                         ; DATA XREF: std::_Locinfo::~_Locinfo(void)+5o
.text$x:00004F06
.text$x:00004F06 arg_4           = dword ptr  8
.text$x:00004F06
.text$x:00004F06                 mov     edx, [esp+arg_4]
.text$x:00004F0A                 lea     eax, [edx+0Ch]
.text$x:00004F0D                 mov     ecx, [edx-8]
.text$x:00004F10                 xor     ecx, eax
.text$x:00004F12                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F17                 mov     eax, offset __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
.text$x:00004F1C                 jmp     ___CxxFrameHandler3
.text$x:00004F1C __ehhandler$??1_Locinfo@std@@QAE@XZ endp
.text$x:00004F1C
.text$x:00004F1C ; ---------------------------------------------------------------------------
.text$x:00004F21                 align 4
.text$x:00004F21 _text$x         ends
.text$x:00004F21
.text$mn:00004F24 ; ===========================================================================
.text$mn:00004F24
.text$mn:00004F24 ; Segment type: Pure code
.text$mn:00004F24 ; Segment permissions: Read/Execute
.text$mn:00004F24 _text$mn        segment para public 'CODE' use32
.text$mn:00004F24                 assume cs:_text$mn
.text$mn:00004F24                 ;org 4F24h
.text$mn:00004F24 ; COMDAT (pick any)
.text$mn:00004F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F24
.text$mn:00004F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F24
.text$mn:00004F24 ; Attributes: bp-based frame
.text$mn:00004F24
.text$mn:00004F24 ; public: __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00004F24                 public ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:00004F24 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004F24                                         ; CODE XREF: __unwindfunclet$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z$0+3j
.text$mn:00004F24                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+37p ...
.text$mn:00004F24
.text$mn:00004F24 var_10          = dword ptr -10h
.text$mn:00004F24 var_C           = dword ptr -0Ch
.text$mn:00004F24 var_8           = dword ptr -8
.text$mn:00004F24 var_4           = dword ptr -4
.text$mn:00004F24
.text$mn:00004F24                 push    ebp
.text$mn:00004F25                 mov     ebp, esp
.text$mn:00004F27                 sub     esp, 10h
.text$mn:00004F2A                 mov     [ebp+var_8], ecx
.text$mn:00004F2D                 mov     eax, [ebp+var_8]
.text$mn:00004F30                 mov     ecx, [eax]
.text$mn:00004F32                 mov     [ebp+var_4], ecx
.text$mn:00004F35                 mov     edx, [ebp+var_4]
.text$mn:00004F38                 mov     eax, [edx]
.text$mn:00004F3A                 mov     ecx, [ebp+var_4]
.text$mn:00004F3D                 add     ecx, [eax+4]
.text$mn:00004F40                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00004F45                 test    eax, eax
.text$mn:00004F47                 jz      short loc_4F73
.text$mn:00004F49                 mov     ecx, [ebp+var_8]
.text$mn:00004F4C                 mov     edx, [ecx]
.text$mn:00004F4E                 mov     [ebp+var_C], edx
.text$mn:00004F51                 mov     eax, [ebp+var_C]
.text$mn:00004F54                 mov     ecx, [eax]
.text$mn:00004F56                 mov     edx, [ebp+var_C]
.text$mn:00004F59                 add     edx, [ecx+4]
.text$mn:00004F5C                 mov     ecx, edx
.text$mn:00004F5E                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00004F63                 mov     [ebp+var_10], eax
.text$mn:00004F66                 mov     eax, [ebp+var_10]
.text$mn:00004F69                 mov     edx, [eax]
.text$mn:00004F6B                 mov     ecx, [ebp+var_10]
.text$mn:00004F6E                 mov     eax, [edx+8]
.text$mn:00004F71                 call    eax
.text$mn:00004F73
.text$mn:00004F73 loc_4F73:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)+23j
.text$mn:00004F73                 mov     esp, ebp
.text$mn:00004F75                 pop     ebp
.text$mn:00004F76                 retn
.text$mn:00004F76 ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:00004F76
.text$mn:00004F76 ; ---------------------------------------------------------------------------
.text$mn:00004F77                 align 4
.text$mn:00004F77 _text$mn        ends
.text$mn:00004F77
.text$mn:00004F78 ; ===========================================================================
.text$mn:00004F78
.text$mn:00004F78 ; Segment type: Pure code
.text$mn:00004F78 ; Segment permissions: Read/Execute
.text$mn:00004F78 _text$mn        segment para public 'CODE' use32
.text$mn:00004F78                 assume cs:_text$mn
.text$mn:00004F78                 ;org 4F78h
.text$mn:00004F78 ; COMDAT (pick any)
.text$mn:00004F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F78
.text$mn:00004F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F78
.text$mn:00004F78 ; Attributes: bp-based frame
.text$mn:00004F78
.text$mn:00004F78 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00004F78                 public ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:00004F78 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004F78                                         ; CODE XREF: __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0+3j
.text$mn:00004F78                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+4Dp ...
.text$mn:00004F78
.text$mn:00004F78 var_10          = dword ptr -10h
.text$mn:00004F78 var_C           = dword ptr -0Ch
.text$mn:00004F78 var_8           = dword ptr -8
.text$mn:00004F78 var_4           = dword ptr -4
.text$mn:00004F78
.text$mn:00004F78                 push    ebp
.text$mn:00004F79                 mov     ebp, esp
.text$mn:00004F7B                 sub     esp, 10h
.text$mn:00004F7E                 mov     [ebp+var_8], ecx
.text$mn:00004F81                 mov     eax, [ebp+var_8]
.text$mn:00004F84                 mov     ecx, [eax]
.text$mn:00004F86                 mov     [ebp+var_4], ecx
.text$mn:00004F89                 mov     edx, [ebp+var_4]
.text$mn:00004F8C                 mov     eax, [edx]
.text$mn:00004F8E                 mov     ecx, [ebp+var_4]
.text$mn:00004F91                 add     ecx, [eax+4]
.text$mn:00004F94                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00004F99                 test    eax, eax
.text$mn:00004F9B                 jz      short loc_4FC7
.text$mn:00004F9D                 mov     ecx, [ebp+var_8]
.text$mn:00004FA0                 mov     edx, [ecx]
.text$mn:00004FA2                 mov     [ebp+var_C], edx
.text$mn:00004FA5                 mov     eax, [ebp+var_C]
.text$mn:00004FA8                 mov     ecx, [eax]
.text$mn:00004FAA                 mov     edx, [ebp+var_C]
.text$mn:00004FAD                 add     edx, [ecx+4]
.text$mn:00004FB0                 mov     ecx, edx
.text$mn:00004FB2                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00004FB7                 mov     [ebp+var_10], eax
.text$mn:00004FBA                 mov     eax, [ebp+var_10]
.text$mn:00004FBD                 mov     edx, [eax]
.text$mn:00004FBF                 mov     ecx, [ebp+var_10]
.text$mn:00004FC2                 mov     eax, [edx+8]
.text$mn:00004FC5                 call    eax
.text$mn:00004FC7
.text$mn:00004FC7 loc_4FC7:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)+23j
.text$mn:00004FC7                 mov     esp, ebp
.text$mn:00004FC9                 pop     ebp
.text$mn:00004FCA                 retn
.text$mn:00004FCA ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:00004FCA
.text$mn:00004FCA ; ---------------------------------------------------------------------------
.text$mn:00004FCB                 align 4
.text$mn:00004FCB _text$mn        ends
.text$mn:00004FCB
.text$mn:00004FCC ; ===========================================================================
.text$mn:00004FCC
.text$mn:00004FCC ; Segment type: Pure code
.text$mn:00004FCC ; Segment permissions: Read/Execute
.text$mn:00004FCC _text$mn        segment para public 'CODE' use32
.text$mn:00004FCC                 assume cs:_text$mn
.text$mn:00004FCC                 ;org 4FCCh
.text$mn:00004FCC ; COMDAT (pick any)
.text$mn:00004FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FCC
.text$mn:00004FCC ; =============== S U B R O U T I N E =======================================
.text$mn:00004FCC
.text$mn:00004FCC ; Attributes: bp-based frame
.text$mn:00004FCC
.text$mn:00004FCC ; _DWORD __thiscall std::_System_error::~_System_error(std::_System_error *__hidden this)
.text$mn:00004FCC                 public ??1_System_error@std@@UAE@XZ
.text$mn:00004FCC ??1_System_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0+3j
.text$mn:00004FCC                                         ; __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1+3j ...
.text$mn:00004FCC
.text$mn:00004FCC var_10          = dword ptr -10h
.text$mn:00004FCC var_C           = dword ptr -0Ch
.text$mn:00004FCC var_4           = dword ptr -4
.text$mn:00004FCC
.text$mn:00004FCC                 push    ebp
.text$mn:00004FCD                 mov     ebp, esp
.text$mn:00004FCF                 push    0FFFFFFFFh
.text$mn:00004FD1                 push    offset __ehhandler$??1_System_error@std@@UAE@XZ
.text$mn:00004FD6                 mov     eax, large fs:0
.text$mn:00004FDC                 push    eax
.text$mn:00004FDD                 push    ecx
.text$mn:00004FDE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FE3                 xor     eax, ebp
.text$mn:00004FE5                 push    eax
.text$mn:00004FE6                 lea     eax, [ebp+var_C]
.text$mn:00004FE9                 mov     large fs:0, eax
.text$mn:00004FEF                 mov     [ebp+var_10], ecx
.text$mn:00004FF2                 mov     [ebp+var_4], 0
.text$mn:00004FF9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005000                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005003                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:00005008                 mov     ecx, [ebp+var_C]
.text$mn:0000500B                 mov     large fs:0, ecx
.text$mn:00005012                 pop     ecx
.text$mn:00005013                 mov     esp, ebp
.text$mn:00005015                 pop     ebp
.text$mn:00005016                 retn
.text$mn:00005016 ??1_System_error@std@@UAE@XZ endp
.text$mn:00005016
.text$mn:00005016 ; ---------------------------------------------------------------------------
.text$mn:00005017                 align 4
.text$mn:00005017 _text$mn        ends
.text$mn:00005017
.text$x:00005018 ; ===========================================================================
.text$x:00005018
.text$x:00005018 ; Segment type: Pure code
.text$x:00005018 ; Segment permissions: Read/Execute
.text$x:00005018 _text$x         segment para public 'CODE' use32
.text$x:00005018                 assume cs:_text$x
.text$x:00005018                 ;org 5018h
.text$x:00005018 ; COMDAT (pick associative to section at 4FCC)
.text$x:00005018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005018
.text$x:00005018 ; =============== S U B R O U T I N E =======================================
.text$x:00005018
.text$x:00005018
.text$x:00005018 __unwindfunclet$??1_System_error@std@@UAE@XZ$0 proc near
.text$x:00005018                                         ; DATA XREF: .xdata$x:0000946Co
.text$x:00005018                 mov     ecx, [ebp-10h]  ; this
.text$x:0000501B                 jmp     ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$x:0000501B __unwindfunclet$??1_System_error@std@@UAE@XZ$0 endp
.text$x:0000501B
.text$x:00005020
.text$x:00005020 ; =============== S U B R O U T I N E =======================================
.text$x:00005020
.text$x:00005020
.text$x:00005020 __ehhandler$??1_System_error@std@@UAE@XZ proc near
.text$x:00005020                                         ; DATA XREF: std::_System_error::~_System_error(void)+5o
.text$x:00005020
.text$x:00005020 arg_4           = dword ptr  8
.text$x:00005020
.text$x:00005020                 mov     edx, [esp+arg_4]
.text$x:00005024                 lea     eax, [edx+0Ch]
.text$x:00005027                 mov     ecx, [edx-8]
.text$x:0000502A                 xor     ecx, eax
.text$x:0000502C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005031                 mov     eax, offset __ehfuncinfo$??1_System_error@std@@UAE@XZ
.text$x:00005036                 jmp     ___CxxFrameHandler3
.text$x:00005036 __ehhandler$??1_System_error@std@@UAE@XZ endp
.text$x:00005036
.text$x:00005036 ; ---------------------------------------------------------------------------
.text$x:0000503B                 align 4
.text$x:0000503B _text$x         ends
.text$x:0000503B
.text$mn:0000503C ; ===========================================================================
.text$mn:0000503C
.text$mn:0000503C ; Segment type: Pure code
.text$mn:0000503C ; Segment permissions: Read/Execute
.text$mn:0000503C _text$mn        segment para public 'CODE' use32
.text$mn:0000503C                 assume cs:_text$mn
.text$mn:0000503C                 ;org 503Ch
.text$mn:0000503C ; COMDAT (pick any)
.text$mn:0000503C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000503C
.text$mn:0000503C ; =============== S U B R O U T I N E =======================================
.text$mn:0000503C
.text$mn:0000503C ; Attributes: bp-based frame
.text$mn:0000503C
.text$mn:0000503C ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:0000503C                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:0000503C ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:0000503C                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:0000503C                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:0000503C
.text$mn:0000503C var_10          = dword ptr -10h
.text$mn:0000503C var_C           = dword ptr -0Ch
.text$mn:0000503C var_4           = dword ptr -4
.text$mn:0000503C
.text$mn:0000503C                 push    ebp
.text$mn:0000503D                 mov     ebp, esp
.text$mn:0000503F                 push    0FFFFFFFFh
.text$mn:00005041                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00005046                 mov     eax, large fs:0
.text$mn:0000504C                 push    eax
.text$mn:0000504D                 push    ecx
.text$mn:0000504E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005053                 xor     eax, ebp
.text$mn:00005055                 push    eax
.text$mn:00005056                 lea     eax, [ebp+var_C]
.text$mn:00005059                 mov     large fs:0, eax
.text$mn:0000505F                 mov     [ebp+var_10], ecx
.text$mn:00005062                 mov     [ebp+var_4], 0
.text$mn:00005069                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005070                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005073                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00005078                 mov     ecx, [ebp+var_C]
.text$mn:0000507B                 mov     large fs:0, ecx
.text$mn:00005082                 pop     ecx
.text$mn:00005083                 mov     esp, ebp
.text$mn:00005085                 pop     ebp
.text$mn:00005086                 retn
.text$mn:00005086 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00005086
.text$mn:00005086 ; ---------------------------------------------------------------------------
.text$mn:00005087                 align 4
.text$mn:00005087 _text$mn        ends
.text$mn:00005087
.text$x:00005088 ; ===========================================================================
.text$x:00005088
.text$x:00005088 ; Segment type: Pure code
.text$x:00005088 ; Segment permissions: Read/Execute
.text$x:00005088 _text$x         segment para public 'CODE' use32
.text$x:00005088                 assume cs:_text$x
.text$x:00005088                 ;org 5088h
.text$x:00005088 ; COMDAT (pick associative to section at 503C)
.text$x:00005088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005088
.text$x:00005088 ; =============== S U B R O U T I N E =======================================
.text$x:00005088
.text$x:00005088
.text$x:00005088 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00005088                                         ; DATA XREF: .xdata$x:000096B8o
.text$x:00005088                 mov     ecx, [ebp-10h]  ; this
.text$x:0000508B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000508B __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:0000508B
.text$x:00005090
.text$x:00005090 ; =============== S U B R O U T I N E =======================================
.text$x:00005090
.text$x:00005090
.text$x:00005090 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00005090                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00005090
.text$x:00005090 arg_4           = dword ptr  8
.text$x:00005090
.text$x:00005090                 mov     edx, [esp+arg_4]
.text$x:00005094                 lea     eax, [edx+0Ch]
.text$x:00005097                 mov     ecx, [edx-8]
.text$x:0000509A                 xor     ecx, eax
.text$x:0000509C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050A1                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:000050A6                 jmp     ___CxxFrameHandler3
.text$x:000050A6 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:000050A6
.text$x:000050A6 ; ---------------------------------------------------------------------------
.text$x:000050AB                 align 4
.text$x:000050AB _text$x         ends
.text$x:000050AB
.text$mn:000050AC ; ===========================================================================
.text$mn:000050AC
.text$mn:000050AC ; Segment type: Pure code
.text$mn:000050AC ; Segment permissions: Read/Execute
.text$mn:000050AC _text$mn        segment para public 'CODE' use32
.text$mn:000050AC                 assume cs:_text$mn
.text$mn:000050AC                 ;org 50ACh
.text$mn:000050AC ; COMDAT (pick any)
.text$mn:000050AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050AC
.text$mn:000050AC ; =============== S U B R O U T I N E =======================================
.text$mn:000050AC
.text$mn:000050AC ; Attributes: bp-based frame
.text$mn:000050AC
.text$mn:000050AC ; _DWORD __thiscall std::ctype_base::~ctype_base(std::ctype_base *__hidden this)
.text$mn:000050AC                 public ??1ctype_base@std@@UAE@XZ
.text$mn:000050AC ??1ctype_base@std@@UAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0+3j
.text$mn:000050AC                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+67p ...
.text$mn:000050AC
.text$mn:000050AC var_10          = dword ptr -10h
.text$mn:000050AC var_C           = dword ptr -0Ch
.text$mn:000050AC var_4           = dword ptr -4
.text$mn:000050AC
.text$mn:000050AC                 push    ebp
.text$mn:000050AD                 mov     ebp, esp
.text$mn:000050AF                 push    0FFFFFFFFh
.text$mn:000050B1                 push    offset __ehhandler$??1ctype_base@std@@UAE@XZ
.text$mn:000050B6                 mov     eax, large fs:0
.text$mn:000050BC                 push    eax
.text$mn:000050BD                 push    ecx
.text$mn:000050BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000050C3                 xor     eax, ebp
.text$mn:000050C5                 push    eax
.text$mn:000050C6                 lea     eax, [ebp+var_C]
.text$mn:000050C9                 mov     large fs:0, eax
.text$mn:000050CF                 mov     [ebp+var_10], ecx
.text$mn:000050D2                 mov     eax, [ebp+var_10]
.text$mn:000050D5                 mov     dword ptr [eax], offset ??_7ctype_base@std@@6B@ ; const std::ctype_base::`vftable'
.text$mn:000050DB                 mov     [ebp+var_4], 0
.text$mn:000050E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000050E9                 mov     ecx, [ebp+var_10] ; this
.text$mn:000050EC                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:000050F1                 mov     ecx, [ebp+var_C]
.text$mn:000050F4                 mov     large fs:0, ecx
.text$mn:000050FB                 pop     ecx
.text$mn:000050FC                 mov     esp, ebp
.text$mn:000050FE                 pop     ebp
.text$mn:000050FF                 retn
.text$mn:000050FF ??1ctype_base@std@@UAE@XZ endp
.text$mn:000050FF
.text$mn:000050FF _text$mn        ends
.text$mn:000050FF
.text$x:00005100 ; ===========================================================================
.text$x:00005100
.text$x:00005100 ; Segment type: Pure code
.text$x:00005100 ; Segment permissions: Read/Execute
.text$x:00005100 _text$x         segment para public 'CODE' use32
.text$x:00005100                 assume cs:_text$x
.text$x:00005100                 ;org 5100h
.text$x:00005100 ; COMDAT (pick associative to section at 50AC)
.text$x:00005100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005100
.text$x:00005100 ; =============== S U B R O U T I N E =======================================
.text$x:00005100
.text$x:00005100
.text$x:00005100 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 proc near
.text$x:00005100                                         ; DATA XREF: .xdata$x:00009300o
.text$x:00005100                 mov     ecx, [ebp-10h]  ; this
.text$x:00005103                 jmp     ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$x:00005103 __unwindfunclet$??1ctype_base@std@@UAE@XZ$0 endp
.text$x:00005103
.text$x:00005108
.text$x:00005108 ; =============== S U B R O U T I N E =======================================
.text$x:00005108
.text$x:00005108
.text$x:00005108 __ehhandler$??1ctype_base@std@@UAE@XZ proc near
.text$x:00005108                                         ; DATA XREF: std::ctype_base::~ctype_base(void)+5o
.text$x:00005108
.text$x:00005108 arg_4           = dword ptr  8
.text$x:00005108
.text$x:00005108                 mov     edx, [esp+arg_4]
.text$x:0000510C                 lea     eax, [edx+0Ch]
.text$x:0000510F                 mov     ecx, [edx-8]
.text$x:00005112                 xor     ecx, eax
.text$x:00005114                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005119                 mov     eax, offset __ehfuncinfo$??1ctype_base@std@@UAE@XZ
.text$x:0000511E                 jmp     ___CxxFrameHandler3
.text$x:0000511E __ehhandler$??1ctype_base@std@@UAE@XZ endp
.text$x:0000511E
.text$x:0000511E ; ---------------------------------------------------------------------------
.text$x:00005123                 align 4
.text$x:00005123 _text$x         ends
.text$x:00005123
.text$mn:00005124 ; ===========================================================================
.text$mn:00005124
.text$mn:00005124 ; Segment type: Pure code
.text$mn:00005124 ; Segment permissions: Read/Execute
.text$mn:00005124 _text$mn        segment para public 'CODE' use32
.text$mn:00005124                 assume cs:_text$mn
.text$mn:00005124                 ;org 5124h
.text$mn:00005124 ; COMDAT (pick any)
.text$mn:00005124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005124
.text$mn:00005124 ; =============== S U B R O U T I N E =======================================
.text$mn:00005124
.text$mn:00005124 ; Attributes: bp-based frame
.text$mn:00005124
.text$mn:00005124 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00005124                 public ??1error_category@std@@UAE@XZ
.text$mn:00005124 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00005124                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00005124
.text$mn:00005124 var_4           = dword ptr -4
.text$mn:00005124
.text$mn:00005124                 push    ebp
.text$mn:00005125                 mov     ebp, esp
.text$mn:00005127                 push    ecx
.text$mn:00005128                 mov     [ebp+var_4], ecx
.text$mn:0000512B                 mov     eax, [ebp+var_4]
.text$mn:0000512E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00005134                 mov     esp, ebp
.text$mn:00005136                 pop     ebp
.text$mn:00005137                 retn
.text$mn:00005137 ??1error_category@std@@UAE@XZ endp
.text$mn:00005137
.text$mn:00005137 _text$mn        ends
.text$mn:00005137
.text$mn:00005138 ; ===========================================================================
.text$mn:00005138
.text$mn:00005138 ; Segment type: Pure code
.text$mn:00005138 ; Segment permissions: Read/Execute
.text$mn:00005138 _text$mn        segment para public 'CODE' use32
.text$mn:00005138                 assume cs:_text$mn
.text$mn:00005138                 ;org 5138h
.text$mn:00005138 ; COMDAT (pick any)
.text$mn:00005138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005138
.text$mn:00005138 ; =============== S U B R O U T I N E =======================================
.text$mn:00005138
.text$mn:00005138 ; Attributes: bp-based frame
.text$mn:00005138
.text$mn:00005138 ; _DWORD __thiscall std::locale::facet::~facet(std::locale::facet *__hidden this)
.text$mn:00005138                 public ??1facet@locale@std@@MAE@XZ
.text$mn:00005138 ??1facet@locale@std@@MAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0+3j
.text$mn:00005138                                         ; std::ctype_base::~ctype_base(void)+40p ...
.text$mn:00005138
.text$mn:00005138 var_10          = dword ptr -10h
.text$mn:00005138 var_C           = dword ptr -0Ch
.text$mn:00005138 var_4           = dword ptr -4
.text$mn:00005138
.text$mn:00005138                 push    ebp
.text$mn:00005139                 mov     ebp, esp
.text$mn:0000513B                 push    0FFFFFFFFh
.text$mn:0000513D                 push    offset __ehhandler$??1facet@locale@std@@MAE@XZ
.text$mn:00005142                 mov     eax, large fs:0
.text$mn:00005148                 push    eax
.text$mn:00005149                 push    ecx
.text$mn:0000514A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000514F                 xor     eax, ebp
.text$mn:00005151                 push    eax
.text$mn:00005152                 lea     eax, [ebp+var_C]
.text$mn:00005155                 mov     large fs:0, eax
.text$mn:0000515B                 mov     [ebp+var_10], ecx
.text$mn:0000515E                 mov     eax, [ebp+var_10]
.text$mn:00005161                 mov     dword ptr [eax], offset ??_7facet@locale@std@@6B@ ; const std::locale::facet::`vftable'
.text$mn:00005167                 mov     [ebp+var_4], 0
.text$mn:0000516E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005175                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005178                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:0000517D                 mov     ecx, [ebp+var_C]
.text$mn:00005180                 mov     large fs:0, ecx
.text$mn:00005187                 pop     ecx
.text$mn:00005188                 mov     esp, ebp
.text$mn:0000518A                 pop     ebp
.text$mn:0000518B                 retn
.text$mn:0000518B ??1facet@locale@std@@MAE@XZ endp
.text$mn:0000518B
.text$mn:0000518B _text$mn        ends
.text$mn:0000518B
.text$x:0000518C ; ===========================================================================
.text$x:0000518C
.text$x:0000518C ; Segment type: Pure code
.text$x:0000518C ; Segment permissions: Read/Execute
.text$x:0000518C _text$x         segment para public 'CODE' use32
.text$x:0000518C                 assume cs:_text$x
.text$x:0000518C                 ;org 518Ch
.text$x:0000518C ; COMDAT (pick associative to section at 5138)
.text$x:0000518C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000518C
.text$x:0000518C ; =============== S U B R O U T I N E =======================================
.text$x:0000518C
.text$x:0000518C
.text$x:0000518C __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 proc near
.text$x:0000518C                                         ; DATA XREF: .xdata$x:000092A8o
.text$x:0000518C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000518F                 jmp     ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$x:0000518F __unwindfunclet$??1facet@locale@std@@MAE@XZ$0 endp
.text$x:0000518F
.text$x:00005194
.text$x:00005194 ; =============== S U B R O U T I N E =======================================
.text$x:00005194
.text$x:00005194
.text$x:00005194 __ehhandler$??1facet@locale@std@@MAE@XZ proc near
.text$x:00005194                                         ; DATA XREF: std::locale::facet::~facet(void)+5o
.text$x:00005194
.text$x:00005194 arg_4           = dword ptr  8
.text$x:00005194
.text$x:00005194                 mov     edx, [esp+arg_4]
.text$x:00005198                 lea     eax, [edx+0Ch]
.text$x:0000519B                 mov     ecx, [edx-8]
.text$x:0000519E                 xor     ecx, eax
.text$x:000051A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000051A5                 mov     eax, offset __ehfuncinfo$??1facet@locale@std@@MAE@XZ
.text$x:000051AA                 jmp     ___CxxFrameHandler3
.text$x:000051AA __ehhandler$??1facet@locale@std@@MAE@XZ endp
.text$x:000051AA
.text$x:000051AA ; ---------------------------------------------------------------------------
.text$x:000051AF                 align 10h
.text$x:000051AF _text$x         ends
.text$x:000051AF
.text$mn:000051B0 ; ===========================================================================
.text$mn:000051B0
.text$mn:000051B0 ; Segment type: Pure code
.text$mn:000051B0 ; Segment permissions: Read/Execute
.text$mn:000051B0 _text$mn        segment para public 'CODE' use32
.text$mn:000051B0                 assume cs:_text$mn
.text$mn:000051B0                 ;org 51B0h
.text$mn:000051B0 ; COMDAT (pick any)
.text$mn:000051B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051B0
.text$mn:000051B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000051B0
.text$mn:000051B0 ; Attributes: bp-based frame
.text$mn:000051B0
.text$mn:000051B0 ; _DWORD __thiscall std::ios_base::failure::~failure(std::ios_base::failure *__hidden this)
.text$mn:000051B0                 public ??1failure@ios_base@std@@UAE@XZ
.text$mn:000051B0 ??1failure@ios_base@std@@UAE@XZ proc near
.text$mn:000051B0                                         ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+Ap
.text$mn:000051B0                                         ; DATA XREF: .xdata$x:0000A254o
.text$mn:000051B0
.text$mn:000051B0 var_10          = dword ptr -10h
.text$mn:000051B0 var_C           = dword ptr -0Ch
.text$mn:000051B0 var_4           = dword ptr -4
.text$mn:000051B0
.text$mn:000051B0                 push    ebp
.text$mn:000051B1                 mov     ebp, esp
.text$mn:000051B3                 push    0FFFFFFFFh
.text$mn:000051B5                 push    offset __ehhandler$??1failure@ios_base@std@@UAE@XZ
.text$mn:000051BA                 mov     eax, large fs:0
.text$mn:000051C0                 push    eax
.text$mn:000051C1                 push    ecx
.text$mn:000051C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000051C7                 xor     eax, ebp
.text$mn:000051C9                 push    eax
.text$mn:000051CA                 lea     eax, [ebp+var_C]
.text$mn:000051CD                 mov     large fs:0, eax
.text$mn:000051D3                 mov     [ebp+var_10], ecx
.text$mn:000051D6                 mov     [ebp+var_4], 0
.text$mn:000051DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000051E4                 mov     ecx, [ebp+var_10] ; this
.text$mn:000051E7                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:000051EC                 mov     ecx, [ebp+var_C]
.text$mn:000051EF                 mov     large fs:0, ecx
.text$mn:000051F6                 pop     ecx
.text$mn:000051F7                 mov     esp, ebp
.text$mn:000051F9                 pop     ebp
.text$mn:000051FA                 retn
.text$mn:000051FA ??1failure@ios_base@std@@UAE@XZ endp
.text$mn:000051FA
.text$mn:000051FA ; ---------------------------------------------------------------------------
.text$mn:000051FB                 align 4
.text$mn:000051FB _text$mn        ends
.text$mn:000051FB
.text$x:000051FC ; ===========================================================================
.text$x:000051FC
.text$x:000051FC ; Segment type: Pure code
.text$x:000051FC ; Segment permissions: Read/Execute
.text$x:000051FC _text$x         segment para public 'CODE' use32
.text$x:000051FC                 assume cs:_text$x
.text$x:000051FC                 ;org 51FCh
.text$x:000051FC ; COMDAT (pick associative to section at 51B0)
.text$x:000051FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000051FC
.text$x:000051FC ; =============== S U B R O U T I N E =======================================
.text$x:000051FC
.text$x:000051FC
.text$x:000051FC __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 proc near
.text$x:000051FC                                         ; DATA XREF: .xdata$x:00009710o
.text$x:000051FC                 mov     ecx, [ebp-10h]  ; this
.text$x:000051FF                 jmp     ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$x:000051FF __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0 endp
.text$x:000051FF
.text$x:00005204
.text$x:00005204 ; =============== S U B R O U T I N E =======================================
.text$x:00005204
.text$x:00005204
.text$x:00005204 __ehhandler$??1failure@ios_base@std@@UAE@XZ proc near
.text$x:00005204                                         ; DATA XREF: std::ios_base::failure::~failure(void)+5o
.text$x:00005204
.text$x:00005204 arg_4           = dword ptr  8
.text$x:00005204
.text$x:00005204                 mov     edx, [esp+arg_4]
.text$x:00005208                 lea     eax, [edx+0Ch]
.text$x:0000520B                 mov     ecx, [edx-8]
.text$x:0000520E                 xor     ecx, eax
.text$x:00005210                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005215                 mov     eax, offset __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ
.text$x:0000521A                 jmp     ___CxxFrameHandler3
.text$x:0000521A __ehhandler$??1failure@ios_base@std@@UAE@XZ endp
.text$x:0000521A
.text$x:0000521A ; ---------------------------------------------------------------------------
.text$x:0000521F                 align 10h
.text$x:0000521F _text$x         ends
.text$x:0000521F
.text$mn:00005220 ; ===========================================================================
.text$mn:00005220
.text$mn:00005220 ; Segment type: Pure code
.text$mn:00005220 ; Segment permissions: Read/Execute
.text$mn:00005220 _text$mn        segment para public 'CODE' use32
.text$mn:00005220                 assume cs:_text$mn
.text$mn:00005220                 ;org 5220h
.text$mn:00005220 ; COMDAT (pick any)
.text$mn:00005220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005220
.text$mn:00005220 ; =============== S U B R O U T I N E =======================================
.text$mn:00005220
.text$mn:00005220 ; Attributes: bp-based frame
.text$mn:00005220
.text$mn:00005220 ; _DWORD __thiscall std::locale::~locale(std::locale *__hidden this)
.text$mn:00005220                 public ??1locale@std@@QAE@XZ
.text$mn:00005220 ??1locale@std@@QAE@XZ proc near         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+DBp
.text$mn:00005220                                         ; __unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2+3j ...
.text$mn:00005220
.text$mn:00005220 var_4           = dword ptr -4
.text$mn:00005220
.text$mn:00005220                 push    ebp
.text$mn:00005221                 mov     ebp, esp
.text$mn:00005223                 push    ecx
.text$mn:00005224                 mov     [ebp+var_4], ecx
.text$mn:00005227                 mov     eax, [ebp+var_4]
.text$mn:0000522A                 cmp     dword ptr [eax], 0
.text$mn:0000522D                 jz      short loc_5249
.text$mn:0000522F                 mov     ecx, [ebp+var_4]
.text$mn:00005232                 mov     edx, [ecx]
.text$mn:00005234                 mov     eax, [ebp+var_4]
.text$mn:00005237                 mov     edx, [edx]
.text$mn:00005239                 mov     ecx, [eax]
.text$mn:0000523B                 mov     eax, [edx+8]
.text$mn:0000523E                 call    eax
.text$mn:00005240                 push    eax             ; Memory
.text$mn:00005241                 call    ??$_DebugHeapDelete@V_Facet_base@std@@@std@@YAXPAV_Facet_base@0@@Z ; std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)
.text$mn:00005246                 add     esp, 4
.text$mn:00005249
.text$mn:00005249 loc_5249:                               ; CODE XREF: std::locale::~locale(void)+Dj
.text$mn:00005249                 mov     esp, ebp
.text$mn:0000524B                 pop     ebp
.text$mn:0000524C                 retn
.text$mn:0000524C ??1locale@std@@QAE@XZ endp
.text$mn:0000524C
.text$mn:0000524C ; ---------------------------------------------------------------------------
.text$mn:0000524D                 align 10h
.text$mn:0000524D _text$mn        ends
.text$mn:0000524D
.text$mn:00005250 ; ===========================================================================
.text$mn:00005250
.text$mn:00005250 ; Segment type: Pure code
.text$mn:00005250 ; Segment permissions: Read/Execute
.text$mn:00005250 _text$mn        segment para public 'CODE' use32
.text$mn:00005250                 assume cs:_text$mn
.text$mn:00005250                 ;org 5250h
.text$mn:00005250 ; COMDAT (pick any)
.text$mn:00005250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005250
.text$mn:00005250 ; =============== S U B R O U T I N E =======================================
.text$mn:00005250
.text$mn:00005250 ; Attributes: bp-based frame
.text$mn:00005250
.text$mn:00005250 ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:00005250                 public ??1runtime_error@std@@UAE@XZ
.text$mn:00005250 ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2+3j
.text$mn:00005250                                         ; __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00005250
.text$mn:00005250 var_10          = dword ptr -10h
.text$mn:00005250 var_C           = dword ptr -0Ch
.text$mn:00005250 var_4           = dword ptr -4
.text$mn:00005250
.text$mn:00005250                 push    ebp
.text$mn:00005251                 mov     ebp, esp
.text$mn:00005253                 push    0FFFFFFFFh
.text$mn:00005255                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:0000525A                 mov     eax, large fs:0
.text$mn:00005260                 push    eax
.text$mn:00005261                 push    ecx
.text$mn:00005262                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005267                 xor     eax, ebp
.text$mn:00005269                 push    eax
.text$mn:0000526A                 lea     eax, [ebp+var_C]
.text$mn:0000526D                 mov     large fs:0, eax
.text$mn:00005273                 mov     [ebp+var_10], ecx
.text$mn:00005276                 mov     [ebp+var_4], 0
.text$mn:0000527D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005284                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005287                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:0000528C                 mov     ecx, [ebp+var_C]
.text$mn:0000528F                 mov     large fs:0, ecx
.text$mn:00005296                 pop     ecx
.text$mn:00005297                 mov     esp, ebp
.text$mn:00005299                 pop     ebp
.text$mn:0000529A                 retn
.text$mn:0000529A ??1runtime_error@std@@UAE@XZ endp
.text$mn:0000529A
.text$mn:0000529A ; ---------------------------------------------------------------------------
.text$mn:0000529B                 align 4
.text$mn:0000529B _text$mn        ends
.text$mn:0000529B
.text$x:0000529C ; ===========================================================================
.text$x:0000529C
.text$x:0000529C ; Segment type: Pure code
.text$x:0000529C ; Segment permissions: Read/Execute
.text$x:0000529C _text$x         segment para public 'CODE' use32
.text$x:0000529C                 assume cs:_text$x
.text$x:0000529C                 ;org 529Ch
.text$x:0000529C ; COMDAT (pick associative to section at 5250)
.text$x:0000529C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000529C
.text$x:0000529C ; =============== S U B R O U T I N E =======================================
.text$x:0000529C
.text$x:0000529C
.text$x:0000529C __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:0000529C                                         ; DATA XREF: .xdata$x:00009140o
.text$x:0000529C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000529F                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000529F __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:0000529F
.text$x:000052A4
.text$x:000052A4 ; =============== S U B R O U T I N E =======================================
.text$x:000052A4
.text$x:000052A4
.text$x:000052A4 __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:000052A4                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:000052A4
.text$x:000052A4 arg_4           = dword ptr  8
.text$x:000052A4
.text$x:000052A4                 mov     edx, [esp+arg_4]
.text$x:000052A8                 lea     eax, [edx+0Ch]
.text$x:000052AB                 mov     ecx, [edx-8]
.text$x:000052AE                 xor     ecx, eax
.text$x:000052B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000052B5                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:000052BA                 jmp     ___CxxFrameHandler3
.text$x:000052BA __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:000052BA
.text$x:000052BA ; ---------------------------------------------------------------------------
.text$x:000052BF                 align 10h
.text$x:000052BF _text$x         ends
.text$x:000052BF
.text$mn:000052C0 ; ===========================================================================
.text$mn:000052C0
.text$mn:000052C0 ; Segment type: Pure code
.text$mn:000052C0 ; Segment permissions: Read/Execute
.text$mn:000052C0 _text$mn        segment para public 'CODE' use32
.text$mn:000052C0                 assume cs:_text$mn
.text$mn:000052C0                 ;org 52C0h
.text$mn:000052C0 ; COMDAT (pick any)
.text$mn:000052C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052C0
.text$mn:000052C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052C0
.text$mn:000052C0 ; Attributes: bp-based frame
.text$mn:000052C0
.text$mn:000052C0 ; public: __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:000052C0                 public ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:000052C0 ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:000052C0                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+14Cp
.text$mn:000052C0                                         ; __unwindfunclet$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2+3j ...
.text$mn:000052C0
.text$mn:000052C0 var_10          = dword ptr -10h
.text$mn:000052C0 var_C           = dword ptr -0Ch
.text$mn:000052C0 var_4           = dword ptr -4
.text$mn:000052C0
.text$mn:000052C0                 push    ebp
.text$mn:000052C1                 mov     ebp, esp
.text$mn:000052C3                 push    0FFFFFFFFh
.text$mn:000052C5                 push    offset __ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:000052CA                 mov     eax, large fs:0
.text$mn:000052D0                 push    eax
.text$mn:000052D1                 push    ecx
.text$mn:000052D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000052D7                 xor     eax, ebp
.text$mn:000052D9                 push    eax
.text$mn:000052DA                 lea     eax, [ebp+var_C]
.text$mn:000052DD                 mov     large fs:0, eax
.text$mn:000052E3                 mov     [ebp+var_10], ecx
.text$mn:000052E6                 mov     [ebp+var_4], 0
.text$mn:000052ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000052F4                 mov     ecx, [ebp+var_10]
.text$mn:000052F7                 call    ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:000052FC                 mov     ecx, [ebp+var_C]
.text$mn:000052FF                 mov     large fs:0, ecx
.text$mn:00005306                 pop     ecx
.text$mn:00005307                 mov     esp, ebp
.text$mn:00005309                 pop     ebp
.text$mn:0000530A                 retn
.text$mn:0000530A ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:0000530A
.text$mn:0000530A ; ---------------------------------------------------------------------------
.text$mn:0000530B                 align 4
.text$mn:0000530B _text$mn        ends
.text$mn:0000530B
.text$x:0000530C ; ===========================================================================
.text$x:0000530C
.text$x:0000530C ; Segment type: Pure code
.text$x:0000530C ; Segment permissions: Read/Execute
.text$x:0000530C _text$x         segment para public 'CODE' use32
.text$x:0000530C                 assume cs:_text$x
.text$x:0000530C                 ;org 530Ch
.text$x:0000530C ; COMDAT (pick associative to section at 52C0)
.text$x:0000530C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000530C
.text$x:0000530C ; =============== S U B R O U T I N E =======================================
.text$x:0000530C
.text$x:0000530C
.text$x:0000530C __unwindfunclet$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:0000530C                                         ; DATA XREF: .xdata$x:000098E0o
.text$x:0000530C                 mov     ecx, [ebp-10h]
.text$x:0000530F                 jmp     ??1_Sentry_base@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:0000530F __unwindfunclet$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000530F
.text$x:00005314
.text$x:00005314 ; =============== S U B R O U T I N E =======================================
.text$x:00005314
.text$x:00005314
.text$x:00005314 __ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$x:00005314                                         ; DATA XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+5o
.text$x:00005314
.text$x:00005314 arg_4           = dword ptr  8
.text$x:00005314
.text$x:00005314                 mov     edx, [esp+arg_4]
.text$x:00005318                 lea     eax, [edx+0Ch]
.text$x:0000531B                 mov     ecx, [edx-8]
.text$x:0000531E                 xor     ecx, eax
.text$x:00005320                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005325                 mov     eax, offset __ehfuncinfo$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$x:0000532A                 jmp     ___CxxFrameHandler3
.text$x:0000532A __ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$x:0000532A
.text$x:0000532A ; ---------------------------------------------------------------------------
.text$x:0000532F                 align 10h
.text$x:0000532F _text$x         ends
.text$x:0000532F
.text$mn:00005330 ; ===========================================================================
.text$mn:00005330
.text$mn:00005330 ; Segment type: Pure code
.text$mn:00005330 ; Segment permissions: Read/Execute
.text$mn:00005330 _text$mn        segment para public 'CODE' use32
.text$mn:00005330                 assume cs:_text$mn
.text$mn:00005330                 ;org 5330h
.text$mn:00005330 ; COMDAT (pick any)
.text$mn:00005330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005330
.text$mn:00005330 ; =============== S U B R O U T I N E =======================================
.text$mn:00005330
.text$mn:00005330 ; Attributes: bp-based frame
.text$mn:00005330
.text$mn:00005330 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00005330                 public ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:00005330 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$mn:00005330                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+9Ap
.text$mn:00005330                                         ; __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0+3j
.text$mn:00005330
.text$mn:00005330 var_10          = dword ptr -10h
.text$mn:00005330 var_C           = dword ptr -0Ch
.text$mn:00005330 var_4           = dword ptr -4
.text$mn:00005330
.text$mn:00005330                 push    ebp
.text$mn:00005331                 mov     ebp, esp
.text$mn:00005333                 push    0FFFFFFFFh
.text$mn:00005335                 push    offset __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$mn:0000533A                 mov     eax, large fs:0
.text$mn:00005340                 push    eax
.text$mn:00005341                 push    ecx
.text$mn:00005342                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005347                 xor     eax, ebp
.text$mn:00005349                 push    eax
.text$mn:0000534A                 lea     eax, [ebp+var_C]
.text$mn:0000534D                 mov     large fs:0, eax
.text$mn:00005353                 mov     [ebp+var_10], ecx
.text$mn:00005356                 mov     [ebp+var_4], 0
.text$mn:0000535D                 call    ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception(void)
.text$mn:00005362                 movzx   eax, al
.text$mn:00005365                 test    eax, eax
.text$mn:00005367                 jnz     short loc_5373
.text$mn:00005369                 mov     ecx, [ebp+var_10]
.text$mn:0000536C                 mov     ecx, [ecx]
.text$mn:0000536E                 call    ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)
.text$mn:00005373
.text$mn:00005373 loc_5373:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+37j
.text$mn:00005373                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000537A                 mov     ecx, [ebp+var_10]
.text$mn:0000537D                 call    ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$mn:00005382                 mov     ecx, [ebp+var_C]
.text$mn:00005385                 mov     large fs:0, ecx
.text$mn:0000538C                 pop     ecx
.text$mn:0000538D                 mov     esp, ebp
.text$mn:0000538F                 pop     ebp
.text$mn:00005390                 retn
.text$mn:00005390 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$mn:00005390
.text$mn:00005390 ; ---------------------------------------------------------------------------
.text$mn:00005391                 align 4
.text$mn:00005391 _text$mn        ends
.text$mn:00005391
.text$x:00005394 ; ===========================================================================
.text$x:00005394
.text$x:00005394 ; Segment type: Pure code
.text$x:00005394 ; Segment permissions: Read/Execute
.text$x:00005394 _text$x         segment para public 'CODE' use32
.text$x:00005394                 assume cs:_text$x
.text$x:00005394                 ;org 5394h
.text$x:00005394 ; COMDAT (pick associative to section at 5330)
.text$x:00005394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005394
.text$x:00005394 ; =============== S U B R O U T I N E =======================================
.text$x:00005394
.text$x:00005394
.text$x:00005394 __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00005394                                         ; DATA XREF: .xdata$x:00009EE8o
.text$x:00005394                 mov     ecx, [ebp-10h]
.text$x:00005397                 jmp     ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::~_Sentry_base(void)
.text$x:00005397 __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00005397
.text$x:0000539C
.text$x:0000539C ; =============== S U B R O U T I N E =======================================
.text$x:0000539C
.text$x:0000539C
.text$x:0000539C __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ proc near
.text$x:0000539C                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+5o
.text$x:0000539C
.text$x:0000539C arg_4           = dword ptr  8
.text$x:0000539C
.text$x:0000539C                 mov     edx, [esp+arg_4]
.text$x:000053A0                 lea     eax, [edx+0Ch]
.text$x:000053A3                 mov     ecx, [edx-8]
.text$x:000053A6                 xor     ecx, eax
.text$x:000053A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053AD                 mov     eax, offset __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.text$x:000053B2                 jmp     ___CxxFrameHandler3
.text$x:000053B2 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ endp
.text$x:000053B2
.text$x:000053B2 ; ---------------------------------------------------------------------------
.text$x:000053B7                 align 4
.text$x:000053B7 _text$x         ends
.text$x:000053B7
.text$mn:000053B8 ; ===========================================================================
.text$mn:000053B8
.text$mn:000053B8 ; Segment type: Pure code
.text$mn:000053B8 ; Segment permissions: Read/Execute
.text$mn:000053B8 _text$mn        segment para public 'CODE' use32
.text$mn:000053B8                 assume cs:_text$mn
.text$mn:000053B8                 ;org 53B8h
.text$mn:000053B8 ; COMDAT (pick any)
.text$mn:000053B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053B8
.text$mn:000053B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000053B8
.text$mn:000053B8 ; Attributes: bp-based frame
.text$mn:000053B8
.text$mn:000053B8 ; _DWORD __thiscall std::system_error::~system_error(std::system_error *__hidden this)
.text$mn:000053B8                 public ??1system_error@std@@UAE@XZ
.text$mn:000053B8 ??1system_error@std@@UAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0+3j
.text$mn:000053B8                                         ; __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0+3j ...
.text$mn:000053B8
.text$mn:000053B8 var_10          = dword ptr -10h
.text$mn:000053B8 var_C           = dword ptr -0Ch
.text$mn:000053B8 var_4           = dword ptr -4
.text$mn:000053B8
.text$mn:000053B8                 push    ebp
.text$mn:000053B9                 mov     ebp, esp
.text$mn:000053BB                 push    0FFFFFFFFh
.text$mn:000053BD                 push    offset __ehhandler$??1system_error@std@@UAE@XZ
.text$mn:000053C2                 mov     eax, large fs:0
.text$mn:000053C8                 push    eax
.text$mn:000053C9                 push    ecx
.text$mn:000053CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053CF                 xor     eax, ebp
.text$mn:000053D1                 push    eax
.text$mn:000053D2                 lea     eax, [ebp+var_C]
.text$mn:000053D5                 mov     large fs:0, eax
.text$mn:000053DB                 mov     [ebp+var_10], ecx
.text$mn:000053DE                 mov     [ebp+var_4], 0
.text$mn:000053E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000053EC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000053EF                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:000053F4                 mov     ecx, [ebp+var_C]
.text$mn:000053F7                 mov     large fs:0, ecx
.text$mn:000053FE                 pop     ecx
.text$mn:000053FF                 mov     esp, ebp
.text$mn:00005401                 pop     ebp
.text$mn:00005402                 retn
.text$mn:00005402 ??1system_error@std@@UAE@XZ endp
.text$mn:00005402
.text$mn:00005402 ; ---------------------------------------------------------------------------
.text$mn:00005403                 align 4
.text$mn:00005403 _text$mn        ends
.text$mn:00005403
.text$x:00005404 ; ===========================================================================
.text$x:00005404
.text$x:00005404 ; Segment type: Pure code
.text$x:00005404 ; Segment permissions: Read/Execute
.text$x:00005404 _text$x         segment para public 'CODE' use32
.text$x:00005404                 assume cs:_text$x
.text$x:00005404                 ;org 5404h
.text$x:00005404 ; COMDAT (pick associative to section at 53B8)
.text$x:00005404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005404
.text$x:00005404 ; =============== S U B R O U T I N E =======================================
.text$x:00005404
.text$x:00005404
.text$x:00005404 __unwindfunclet$??1system_error@std@@UAE@XZ$0 proc near
.text$x:00005404                                         ; DATA XREF: .xdata$x:00009500o
.text$x:00005404                 mov     ecx, [ebp-10h]  ; this
.text$x:00005407                 jmp     ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$x:00005407 __unwindfunclet$??1system_error@std@@UAE@XZ$0 endp
.text$x:00005407
.text$x:0000540C
.text$x:0000540C ; =============== S U B R O U T I N E =======================================
.text$x:0000540C
.text$x:0000540C
.text$x:0000540C __ehhandler$??1system_error@std@@UAE@XZ proc near
.text$x:0000540C                                         ; DATA XREF: std::system_error::~system_error(void)+5o
.text$x:0000540C
.text$x:0000540C arg_4           = dword ptr  8
.text$x:0000540C
.text$x:0000540C                 mov     edx, [esp+arg_4]
.text$x:00005410                 lea     eax, [edx+0Ch]
.text$x:00005413                 mov     ecx, [edx-8]
.text$x:00005416                 xor     ecx, eax
.text$x:00005418                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000541D                 mov     eax, offset __ehfuncinfo$??1system_error@std@@UAE@XZ
.text$x:00005422                 jmp     ___CxxFrameHandler3
.text$x:00005422 __ehhandler$??1system_error@std@@UAE@XZ endp
.text$x:00005422
.text$x:00005422 ; ---------------------------------------------------------------------------
.text$x:00005427                 align 4
.text$x:00005427 _text$x         ends
.text$x:00005427
.text$mn:00005428 ; ===========================================================================
.text$mn:00005428
.text$mn:00005428 ; Segment type: Pure code
.text$mn:00005428 ; Segment permissions: Read/Execute
.text$mn:00005428 _text$mn        segment para public 'CODE' use32
.text$mn:00005428                 assume cs:_text$mn
.text$mn:00005428                 ;org 5428h
.text$mn:00005428 ; COMDAT (pick any)
.text$mn:00005428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005428
.text$mn:00005428 ; =============== S U B R O U T I N E =======================================
.text$mn:00005428
.text$mn:00005428 ; Attributes: bp-based frame
.text$mn:00005428
.text$mn:00005428 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00005428                 public ??2@YAPAXIPAX@Z
.text$mn:00005428 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00005428                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00005428
.text$mn:00005428 arg_4           = dword ptr  0Ch
.text$mn:00005428
.text$mn:00005428                 push    ebp
.text$mn:00005429                 mov     ebp, esp
.text$mn:0000542B                 mov     eax, [ebp+arg_4]
.text$mn:0000542E                 pop     ebp
.text$mn:0000542F                 retn
.text$mn:0000542F ??2@YAPAXIPAX@Z endp
.text$mn:0000542F
.text$mn:0000542F _text$mn        ends
.text$mn:0000542F
.text$mn:00005430 ; ===========================================================================
.text$mn:00005430
.text$mn:00005430 ; Segment type: Pure code
.text$mn:00005430 ; Segment permissions: Read/Execute
.text$mn:00005430 _text$mn        segment para public 'CODE' use32
.text$mn:00005430                 assume cs:_text$mn
.text$mn:00005430                 ;org 5430h
.text$mn:00005430 ; COMDAT (pick any)
.text$mn:00005430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005430
.text$mn:00005430 ; =============== S U B R O U T I N E =======================================
.text$mn:00005430
.text$mn:00005430 ; Attributes: bp-based frame
.text$mn:00005430
.text$mn:00005430 ; void *__cdecl std::locale::facet::operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
.text$mn:00005430                 public ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z
.text$mn:00005430 ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:00005430                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5Ap
.text$mn:00005430
.text$mn:00005430 arg_0           = dword ptr  8
.text$mn:00005430 arg_4           = dword ptr  0Ch
.text$mn:00005430 arg_8           = dword ptr  10h
.text$mn:00005430 arg_C           = dword ptr  14h
.text$mn:00005430
.text$mn:00005430                 push    ebp
.text$mn:00005431                 mov     ebp, esp
.text$mn:00005433                 mov     eax, [ebp+arg_C]
.text$mn:00005436                 push    eax             ; int
.text$mn:00005437                 mov     ecx, [ebp+arg_8]
.text$mn:0000543A                 push    ecx             ; char *
.text$mn:0000543B                 mov     edx, [ebp+arg_4]
.text$mn:0000543E                 push    edx             ; struct std::_DebugHeapTag_t *
.text$mn:0000543F                 mov     eax, [ebp+arg_0]
.text$mn:00005442                 push    eax             ; unsigned int
.text$mn:00005443                 call    ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z ; operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:00005448                 add     esp, 10h
.text$mn:0000544B                 pop     ebp
.text$mn:0000544C                 retn
.text$mn:0000544C ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:0000544C
.text$mn:0000544C ; ---------------------------------------------------------------------------
.text$mn:0000544D                 align 10h
.text$mn:0000544D _text$mn        ends
.text$mn:0000544D
.text$mn:00005450 ; ===========================================================================
.text$mn:00005450
.text$mn:00005450 ; Segment type: Pure code
.text$mn:00005450 ; Segment permissions: Read/Execute
.text$mn:00005450 _text$mn        segment para public 'CODE' use32
.text$mn:00005450                 assume cs:_text$mn
.text$mn:00005450                 ;org 5450h
.text$mn:00005450 ; COMDAT (pick any)
.text$mn:00005450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005450
.text$mn:00005450 ; =============== S U B R O U T I N E =======================================
.text$mn:00005450
.text$mn:00005450 ; Attributes: bp-based frame
.text$mn:00005450
.text$mn:00005450 ; void __cdecl operator delete(void *)
.text$mn:00005450                 public ??3@YAXPAX0@Z
.text$mn:00005450 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00005450                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00005450                 push    ebp
.text$mn:00005451                 mov     ebp, esp
.text$mn:00005453                 pop     ebp
.text$mn:00005454                 retn
.text$mn:00005454 ??3@YAXPAX0@Z   endp
.text$mn:00005454
.text$mn:00005454 ; ---------------------------------------------------------------------------
.text$mn:00005455                 align 4
.text$mn:00005455 _text$mn        ends
.text$mn:00005455
.text$mn:00005458 ; ===========================================================================
.text$mn:00005458
.text$mn:00005458 ; Segment type: Pure code
.text$mn:00005458 ; Segment permissions: Read/Execute
.text$mn:00005458 _text$mn        segment para public 'CODE' use32
.text$mn:00005458                 assume cs:_text$mn
.text$mn:00005458                 ;org 5458h
.text$mn:00005458 ; COMDAT (pick any)
.text$mn:00005458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005458
.text$mn:00005458 ; =============== S U B R O U T I N E =======================================
.text$mn:00005458
.text$mn:00005458 ; Attributes: bp-based frame
.text$mn:00005458
.text$mn:00005458 ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:00005458                 public ??3facet@locale@std@@SAXPAX@Z
.text$mn:00005458 ??3facet@locale@std@@SAXPAX@Z proc near ; CODE XREF: std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)+7p
.text$mn:00005458                                         ; std::ctype<wchar_t>::`scalar deleting destructor'(uint)+1Bp ...
.text$mn:00005458
.text$mn:00005458 Memory          = dword ptr  8
.text$mn:00005458
.text$mn:00005458                 push    ebp
.text$mn:00005459                 mov     ebp, esp
.text$mn:0000545B                 mov     eax, [ebp+Memory]
.text$mn:0000545E                 push    eax             ; Memory
.text$mn:0000545F                 call    ??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)
.text$mn:00005464                 add     esp, 4
.text$mn:00005467                 pop     ebp
.text$mn:00005468                 retn
.text$mn:00005468 ??3facet@locale@std@@SAXPAX@Z endp
.text$mn:00005468
.text$mn:00005468 ; ---------------------------------------------------------------------------
.text$mn:00005469                 align 4
.text$mn:00005469 _text$mn        ends
.text$mn:00005469
.text$mn:0000546C ; ===========================================================================
.text$mn:0000546C
.text$mn:0000546C ; Segment type: Pure code
.text$mn:0000546C ; Segment permissions: Read/Execute
.text$mn:0000546C _text$mn        segment para public 'CODE' use32
.text$mn:0000546C                 assume cs:_text$mn
.text$mn:0000546C                 ;org 546Ch
.text$mn:0000546C ; COMDAT (pick any)
.text$mn:0000546C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000546C
.text$mn:0000546C ; =============== S U B R O U T I N E =======================================
.text$mn:0000546C
.text$mn:0000546C ; Attributes: bp-based frame
.text$mn:0000546C
.text$mn:0000546C ; void __cdecl std::locale::facet::operator delete(void *Memory)
.text$mn:0000546C                 public ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z
.text$mn:0000546C ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z proc near
.text$mn:0000546C                                         ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+12p
.text$mn:0000546C
.text$mn:0000546C Memory          = dword ptr  8
.text$mn:0000546C
.text$mn:0000546C                 push    ebp
.text$mn:0000546D                 mov     ebp, esp
.text$mn:0000546F                 mov     eax, [ebp+Memory]
.text$mn:00005472                 push    eax             ; Memory
.text$mn:00005473                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00005478                 add     esp, 4
.text$mn:0000547B                 pop     ebp
.text$mn:0000547C                 retn
.text$mn:0000547C ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z endp
.text$mn:0000547C
.text$mn:0000547C ; ---------------------------------------------------------------------------
.text$mn:0000547D                 align 10h
.text$mn:0000547D _text$mn        ends
.text$mn:0000547D
.text$mn:00005480 ; ===========================================================================
.text$mn:00005480
.text$mn:00005480 ; Segment type: Pure code
.text$mn:00005480 ; Segment permissions: Read/Execute
.text$mn:00005480 _text$mn        segment para public 'CODE' use32
.text$mn:00005480                 assume cs:_text$mn
.text$mn:00005480                 ;org 5480h
.text$mn:00005480 ; COMDAT (pick any)
.text$mn:00005480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005480
.text$mn:00005480 ; =============== S U B R O U T I N E =======================================
.text$mn:00005480
.text$mn:00005480 ; Attributes: bp-based frame
.text$mn:00005480
.text$mn:00005480 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00005480                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00005480 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00005480                                         ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Bp
.text$mn:00005480                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+Ep ...
.text$mn:00005480
.text$mn:00005480 var_4           = dword ptr -4
.text$mn:00005480 Str             = dword ptr  8
.text$mn:00005480
.text$mn:00005480                 push    ebp
.text$mn:00005481                 mov     ebp, esp
.text$mn:00005483                 push    ecx
.text$mn:00005484                 mov     [ebp+var_4], ecx
.text$mn:00005487                 mov     eax, [ebp+Str]
.text$mn:0000548A                 push    eax             ; Str
.text$mn:0000548B                 mov     ecx, [ebp+var_4]
.text$mn:0000548E                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00005493                 mov     esp, ebp
.text$mn:00005495                 pop     ebp
.text$mn:00005496                 retn    4
.text$mn:00005496 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00005496
.text$mn:00005496 ; ---------------------------------------------------------------------------
.text$mn:00005499                 align 4
.text$mn:00005499 _text$mn        ends
.text$mn:00005499
.text$mn:0000549C ; ===========================================================================
.text$mn:0000549C
.text$mn:0000549C ; Segment type: Pure code
.text$mn:0000549C ; Segment permissions: Read/Execute
.text$mn:0000549C _text$mn        segment para public 'CODE' use32
.text$mn:0000549C                 assume cs:_text$mn
.text$mn:0000549C                 ;org 549Ch
.text$mn:0000549C ; COMDAT (pick any)
.text$mn:0000549C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000549C
.text$mn:0000549C ; =============== S U B R O U T I N E =======================================
.text$mn:0000549C
.text$mn:0000549C ; Attributes: bp-based frame
.text$mn:0000549C
.text$mn:0000549C ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:0000549C                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:0000549C ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:0000549C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:0000549C                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:0000549C
.text$mn:0000549C var_8           = dword ptr -8
.text$mn:0000549C var_4           = dword ptr -4
.text$mn:0000549C arg_0           = dword ptr  8
.text$mn:0000549C
.text$mn:0000549C                 push    ebp
.text$mn:0000549D                 mov     ebp, esp
.text$mn:0000549F                 sub     esp, 8
.text$mn:000054A2                 mov     [ebp+var_8], ecx
.text$mn:000054A5                 mov     eax, [ebp+var_8]
.text$mn:000054A8                 cmp     eax, [ebp+arg_0]
.text$mn:000054AB                 jnz     short loc_54B6
.text$mn:000054AD                 mov     [ebp+var_4], 1
.text$mn:000054B4                 jmp     short loc_54BD
.text$mn:000054B6 ; ---------------------------------------------------------------------------
.text$mn:000054B6
.text$mn:000054B6 loc_54B6:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:000054B6                 mov     [ebp+var_4], 0
.text$mn:000054BD
.text$mn:000054BD loc_54BD:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:000054BD                 mov     al, byte ptr [ebp+var_4]
.text$mn:000054C0                 mov     esp, ebp
.text$mn:000054C2                 pop     ebp
.text$mn:000054C3                 retn    4
.text$mn:000054C3 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:000054C3
.text$mn:000054C3 ; ---------------------------------------------------------------------------
.text$mn:000054C6                 align 4
.text$mn:000054C6 _text$mn        ends
.text$mn:000054C6
.text$mn:000054C8 ; ===========================================================================
.text$mn:000054C8
.text$mn:000054C8 ; Segment type: Pure code
.text$mn:000054C8 ; Segment permissions: Read/Execute
.text$mn:000054C8 _text$mn        segment para public 'CODE' use32
.text$mn:000054C8                 assume cs:_text$mn
.text$mn:000054C8                 ;org 54C8h
.text$mn:000054C8 ; COMDAT (pick any)
.text$mn:000054C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C8
.text$mn:000054C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C8
.text$mn:000054C8 ; Attributes: bp-based frame
.text$mn:000054C8
.text$mn:000054C8 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:000054C8                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:000054C8 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:000054C8                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:000054C8
.text$mn:000054C8 var_8           = dword ptr -8
.text$mn:000054C8 var_4           = dword ptr -4
.text$mn:000054C8 arg_0           = dword ptr  8
.text$mn:000054C8
.text$mn:000054C8                 push    ebp
.text$mn:000054C9                 mov     ebp, esp
.text$mn:000054CB                 sub     esp, 8
.text$mn:000054CE                 push    esi
.text$mn:000054CF                 mov     [ebp+var_4], ecx
.text$mn:000054D2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000054D5                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:000054DA                 push    eax
.text$mn:000054DB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000054DE                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:000054E3                 mov     ecx, eax
.text$mn:000054E5                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:000054EA                 movzx   eax, al
.text$mn:000054ED                 test    eax, eax
.text$mn:000054EF                 jz      short loc_5510
.text$mn:000054F1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000054F4                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:000054F9                 mov     esi, eax
.text$mn:000054FB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000054FE                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00005503                 cmp     esi, eax
.text$mn:00005505                 jnz     short loc_5510
.text$mn:00005507                 mov     [ebp+var_8], 1
.text$mn:0000550E                 jmp     short loc_5517
.text$mn:00005510 ; ---------------------------------------------------------------------------
.text$mn:00005510
.text$mn:00005510 loc_5510:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00005510                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00005510                 mov     [ebp+var_8], 0
.text$mn:00005517
.text$mn:00005517 loc_5517:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00005517                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000551A                 pop     esi
.text$mn:0000551B                 mov     esp, ebp
.text$mn:0000551D                 pop     ebp
.text$mn:0000551E                 retn    4
.text$mn:0000551E ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:0000551E
.text$mn:0000551E ; ---------------------------------------------------------------------------
.text$mn:00005521                 align 4
.text$mn:00005521 _text$mn        ends
.text$mn:00005521
.text$mn:00005524 ; ===========================================================================
.text$mn:00005524
.text$mn:00005524 ; Segment type: Pure code
.text$mn:00005524 ; Segment permissions: Read/Execute
.text$mn:00005524 _text$mn        segment para public 'CODE' use32
.text$mn:00005524                 assume cs:_text$mn
.text$mn:00005524                 ;org 5524h
.text$mn:00005524 ; COMDAT (pick any)
.text$mn:00005524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005524
.text$mn:00005524 ; =============== S U B R O U T I N E =======================================
.text$mn:00005524
.text$mn:00005524 ; Attributes: bp-based frame
.text$mn:00005524
.text$mn:00005524 ; public: wchar_t const & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator[](unsigned int)const
.text$mn:00005524                 public ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z
.text$mn:00005524 ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z proc near
.text$mn:00005524                                         ; CODE XREF: TiXmlText::Blank(void)+3Bp
.text$mn:00005524
.text$mn:00005524 var_4           = dword ptr -4
.text$mn:00005524 arg_0           = dword ptr  8
.text$mn:00005524
.text$mn:00005524                 push    ebp
.text$mn:00005525                 mov     ebp, esp
.text$mn:00005527                 push    ecx
.text$mn:00005528                 mov     [ebp+var_4], ecx
.text$mn:0000552B                 mov     eax, [ebp+var_4]
.text$mn:0000552E                 mov     ecx, [eax+14h]
.text$mn:00005531                 cmp     ecx, [ebp+arg_0]
.text$mn:00005534                 jnb     short loc_554D
.text$mn:00005536                 push    6A2h            ; unsigned int
.text$mn:0000553B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005540                 push    offset ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "string subscript out of range"
.text$mn:00005545                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000554A                 add     esp, 0Ch
.text$mn:0000554D
.text$mn:0000554D loc_554D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+10j
.text$mn:0000554D                 mov     ecx, [ebp+var_4]
.text$mn:00005550                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005555                 mov     edx, [ebp+arg_0]
.text$mn:00005558                 lea     eax, [eax+edx*2]
.text$mn:0000555B                 mov     esp, ebp
.text$mn:0000555D                 pop     ebp
.text$mn:0000555E                 retn    4
.text$mn:0000555E ??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEAB_WI@Z endp
.text$mn:0000555E
.text$mn:0000555E ; ---------------------------------------------------------------------------
.text$mn:00005561                 align 4
.text$mn:00005561 _text$mn        ends
.text$mn:00005561
.text$mn:00005564 ; ===========================================================================
.text$mn:00005564
.text$mn:00005564 ; Segment type: Pure code
.text$mn:00005564 ; Segment permissions: Read/Execute
.text$mn:00005564 _text$mn        segment para public 'CODE' use32
.text$mn:00005564                 assume cs:_text$mn
.text$mn:00005564                 ;org 5564h
.text$mn:00005564 ; COMDAT (pick any)
.text$mn:00005564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005564
.text$mn:00005564 ; =============== S U B R O U T I N E =======================================
.text$mn:00005564
.text$mn:00005564 ; Attributes: bp-based frame
.text$mn:00005564
.text$mn:00005564 ; public: __thiscall std::locale::id::operator unsigned int(void)
.text$mn:00005564                 public ??Bid@locale@std@@QAEIXZ
.text$mn:00005564 ??Bid@locale@std@@QAEIXZ proc near      ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+43p
.text$mn:00005564
.text$mn:00005564 var_14          = byte ptr -14h
.text$mn:00005564 var_10          = dword ptr -10h
.text$mn:00005564 var_C           = dword ptr -0Ch
.text$mn:00005564 var_4           = dword ptr -4
.text$mn:00005564
.text$mn:00005564                 push    ebp
.text$mn:00005565                 mov     ebp, esp
.text$mn:00005567                 push    0FFFFFFFFh
.text$mn:00005569                 push    offset __ehhandler$??Bid@locale@std@@QAEIXZ
.text$mn:0000556E                 mov     eax, large fs:0
.text$mn:00005574                 push    eax
.text$mn:00005575                 sub     esp, 8
.text$mn:00005578                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000557D                 xor     eax, ebp
.text$mn:0000557F                 push    eax
.text$mn:00005580                 lea     eax, [ebp+var_C]
.text$mn:00005583                 mov     large fs:0, eax
.text$mn:00005589                 mov     [ebp+var_10], ecx
.text$mn:0000558C                 mov     eax, [ebp+var_10]
.text$mn:0000558F                 cmp     dword ptr [eax], 0
.text$mn:00005592                 jnz     short loc_55D6
.text$mn:00005594                 push    0               ; int
.text$mn:00005596                 lea     ecx, [ebp+var_14] ; this
.text$mn:00005599                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000559E                 mov     [ebp+var_4], 0
.text$mn:000055A5                 mov     ecx, [ebp+var_10]
.text$mn:000055A8                 cmp     dword ptr [ecx], 0
.text$mn:000055AB                 jnz     short loc_55C7
.text$mn:000055AD                 mov     edx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:000055B3                 add     edx, 1
.text$mn:000055B6                 mov     dword ptr ds:?_Id_cnt@id@locale@std@@0HA, edx ; int std::locale::id::_Id_cnt
.text$mn:000055BC                 mov     eax, [ebp+var_10]
.text$mn:000055BF                 mov     ecx, dword ptr ds:?_Id_cnt@id@locale@std@@0HA ; int std::locale::id::_Id_cnt
.text$mn:000055C5                 mov     [eax], ecx
.text$mn:000055C7
.text$mn:000055C7 loc_55C7:                               ; CODE XREF: std::locale::id::operator uint(void)+47j
.text$mn:000055C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000055CE                 lea     ecx, [ebp+var_14] ; this
.text$mn:000055D1                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000055D6
.text$mn:000055D6 loc_55D6:                               ; CODE XREF: std::locale::id::operator uint(void)+2Ej
.text$mn:000055D6                 mov     edx, [ebp+var_10]
.text$mn:000055D9                 mov     eax, [edx]
.text$mn:000055DB                 mov     ecx, [ebp+var_C]
.text$mn:000055DE                 mov     large fs:0, ecx
.text$mn:000055E5                 pop     ecx
.text$mn:000055E6                 mov     esp, ebp
.text$mn:000055E8                 pop     ebp
.text$mn:000055E9                 retn
.text$mn:000055E9 ??Bid@locale@std@@QAEIXZ endp
.text$mn:000055E9
.text$mn:000055E9 ; ---------------------------------------------------------------------------
.text$mn:000055EA                 align 4
.text$mn:000055EA _text$mn        ends
.text$mn:000055EA
.text$x:000055EC ; ===========================================================================
.text$x:000055EC
.text$x:000055EC ; Segment type: Pure code
.text$x:000055EC ; Segment permissions: Read/Execute
.text$x:000055EC _text$x         segment para public 'CODE' use32
.text$x:000055EC                 assume cs:_text$x
.text$x:000055EC                 ;org 55ECh
.text$x:000055EC ; COMDAT (pick associative to section at 5564)
.text$x:000055EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000055EC
.text$x:000055EC ; =============== S U B R O U T I N E =======================================
.text$x:000055EC
.text$x:000055EC
.text$x:000055EC __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 proc near
.text$x:000055EC                                         ; DATA XREF: .xdata$x:00009250o
.text$x:000055EC                 lea     ecx, [ebp-14h]  ; this
.text$x:000055EF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000055EF __unwindfunclet$??Bid@locale@std@@QAEIXZ$0 endp
.text$x:000055EF
.text$x:000055F4
.text$x:000055F4 ; =============== S U B R O U T I N E =======================================
.text$x:000055F4
.text$x:000055F4
.text$x:000055F4 __ehhandler$??Bid@locale@std@@QAEIXZ proc near
.text$x:000055F4                                         ; DATA XREF: std::locale::id::operator uint(void)+5o
.text$x:000055F4
.text$x:000055F4 arg_4           = dword ptr  8
.text$x:000055F4
.text$x:000055F4                 mov     edx, [esp+arg_4]
.text$x:000055F8                 lea     eax, [edx+0Ch]
.text$x:000055FB                 mov     ecx, [edx-0Ch]
.text$x:000055FE                 xor     ecx, eax
.text$x:00005600                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005605                 mov     eax, offset __ehfuncinfo$??Bid@locale@std@@QAEIXZ
.text$x:0000560A                 jmp     ___CxxFrameHandler3
.text$x:0000560A __ehhandler$??Bid@locale@std@@QAEIXZ endp
.text$x:0000560A
.text$x:0000560A ; ---------------------------------------------------------------------------
.text$x:0000560F                 align 10h
.text$x:0000560F _text$x         ends
.text$x:0000560F
.text$mn:00005610 ; ===========================================================================
.text$mn:00005610
.text$mn:00005610 ; Segment type: Pure code
.text$mn:00005610 ; Segment permissions: Read/Execute
.text$mn:00005610 _text$mn        segment para public 'CODE' use32
.text$mn:00005610                 assume cs:_text$mn
.text$mn:00005610                 ;org 5610h
.text$mn:00005610 ; COMDAT (pick any)
.text$mn:00005610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005610
.text$mn:00005610 ; =============== S U B R O U T I N E =======================================
.text$mn:00005610
.text$mn:00005610 ; Attributes: bp-based frame
.text$mn:00005610
.text$mn:00005610 ; public: __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::sentry::operator bool(void)const
.text$mn:00005610                 public ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
.text$mn:00005610 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ proc near
.text$mn:00005610                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+65p
.text$mn:00005610                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+65p
.text$mn:00005610
.text$mn:00005610 var_4           = dword ptr -4
.text$mn:00005610
.text$mn:00005610                 push    ebp
.text$mn:00005611                 mov     ebp, esp
.text$mn:00005613                 push    ecx
.text$mn:00005614                 mov     [ebp+var_4], ecx
.text$mn:00005617                 mov     eax, [ebp+var_4]
.text$mn:0000561A                 mov     al, [eax+4]
.text$mn:0000561D                 mov     esp, ebp
.text$mn:0000561F                 pop     ebp
.text$mn:00005620                 retn
.text$mn:00005620 ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ endp
.text$mn:00005620
.text$mn:00005620 ; ---------------------------------------------------------------------------
.text$mn:00005621                 align 4
.text$mn:00005621 _text$mn        ends
.text$mn:00005621
.text$mn:00005624 ; ===========================================================================
.text$mn:00005624
.text$mn:00005624 ; Segment type: Pure code
.text$mn:00005624 ; Segment permissions: Read/Execute
.text$mn:00005624 _text$mn        segment para public 'CODE' use32
.text$mn:00005624                 assume cs:_text$mn
.text$mn:00005624                 ;org 5624h
.text$mn:00005624 ; COMDAT (pick any)
.text$mn:00005624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005624
.text$mn:00005624 ; =============== S U B R O U T I N E =======================================
.text$mn:00005624
.text$mn:00005624 ; Attributes: bp-based frame
.text$mn:00005624
.text$mn:00005624 ; public: __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::sentry::operator bool(void)const
.text$mn:00005624                 public ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ
.text$mn:00005624 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ proc near
.text$mn:00005624                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+54p
.text$mn:00005624
.text$mn:00005624 var_4           = dword ptr -4
.text$mn:00005624
.text$mn:00005624                 push    ebp
.text$mn:00005625                 mov     ebp, esp
.text$mn:00005627                 push    ecx
.text$mn:00005628                 mov     [ebp+var_4], ecx
.text$mn:0000562B                 mov     eax, [ebp+var_4]
.text$mn:0000562E                 mov     al, [eax+4]
.text$mn:00005631                 mov     esp, ebp
.text$mn:00005633                 pop     ebp
.text$mn:00005634                 retn
.text$mn:00005634 ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ endp
.text$mn:00005634
.text$mn:00005634 ; ---------------------------------------------------------------------------
.text$mn:00005635                 align 4
.text$mn:00005635 _text$mn        ends
.text$mn:00005635
.text$mn:00005638 ; ===========================================================================
.text$mn:00005638
.text$mn:00005638 ; Segment type: Pure code
.text$mn:00005638 ; Segment permissions: Read/Execute
.text$mn:00005638 _text$mn        segment para public 'CODE' use32
.text$mn:00005638                 assume cs:_text$mn
.text$mn:00005638                 ;org 5638h
.text$mn:00005638 ; COMDAT (pick any)
.text$mn:00005638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005638
.text$mn:00005638 ; =============== S U B R O U T I N E =======================================
.text$mn:00005638
.text$mn:00005638 ; Attributes: bp-based frame
.text$mn:00005638
.text$mn:00005638 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00005638                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00005638 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00005638                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+140p
.text$mn:00005638
.text$mn:00005638 var_4           = dword ptr -4
.text$mn:00005638 arg_0           = dword ptr  8
.text$mn:00005638
.text$mn:00005638                 push    ebp
.text$mn:00005639                 mov     ebp, esp
.text$mn:0000563B                 push    ecx
.text$mn:0000563C                 mov     [ebp+var_4], ecx
.text$mn:0000563F                 mov     eax, [ebp+arg_0]
.text$mn:00005642                 push    eax
.text$mn:00005643                 mov     ecx, [ebp+var_4]
.text$mn:00005646                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000564B                 mov     esp, ebp
.text$mn:0000564D                 pop     ebp
.text$mn:0000564E                 retn    4
.text$mn:0000564E ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:0000564E
.text$mn:0000564E ; ---------------------------------------------------------------------------
.text$mn:00005651                 align 4
.text$mn:00005651 _text$mn        ends
.text$mn:00005651
.text$mn:00005654 ; ===========================================================================
.text$mn:00005654
.text$mn:00005654 ; Segment type: Pure code
.text$mn:00005654 ; Segment permissions: Read/Execute
.text$mn:00005654 _text$mn        segment para public 'CODE' use32
.text$mn:00005654                 assume cs:_text$mn
.text$mn:00005654                 ;org 5654h
.text$mn:00005654 ; COMDAT (pick any)
.text$mn:00005654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005654
.text$mn:00005654 ; =============== S U B R O U T I N E =======================================
.text$mn:00005654
.text$mn:00005654 ; Attributes: bp-based frame
.text$mn:00005654
.text$mn:00005654 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00005654                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00005654 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00005654                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+14Dp
.text$mn:00005654
.text$mn:00005654 var_4           = dword ptr -4
.text$mn:00005654 Str             = dword ptr  8
.text$mn:00005654
.text$mn:00005654                 push    ebp
.text$mn:00005655                 mov     ebp, esp
.text$mn:00005657                 push    ecx
.text$mn:00005658                 mov     [ebp+var_4], ecx
.text$mn:0000565B                 mov     eax, [ebp+Str]
.text$mn:0000565E                 push    eax             ; Str
.text$mn:0000565F                 mov     ecx, [ebp+var_4]
.text$mn:00005662                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00005667                 mov     esp, ebp
.text$mn:00005669                 pop     ebp
.text$mn:0000566A                 retn    4
.text$mn:0000566A ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:0000566A
.text$mn:0000566A ; ---------------------------------------------------------------------------
.text$mn:0000566D                 align 10h
.text$mn:0000566D _text$mn        ends
.text$mn:0000566D
.text$mn:00005670 ; ===========================================================================
.text$mn:00005670
.text$mn:00005670 ; Segment type: Pure code
.text$mn:00005670 ; Segment permissions: Read/Execute
.text$mn:00005670 _text$mn        segment para public 'CODE' use32
.text$mn:00005670                 assume cs:_text$mn
.text$mn:00005670                 ;org 5670h
.text$mn:00005670 ; COMDAT (pick any)
.text$mn:00005670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005670
.text$mn:00005670 ; =============== S U B R O U T I N E =======================================
.text$mn:00005670
.text$mn:00005670 ; Attributes: bp-based frame
.text$mn:00005670
.text$mn:00005670 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(wchar_t)
.text$mn:00005670                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z
.text$mn:00005670 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z proc near
.text$mn:00005670                                         ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+55p
.text$mn:00005670                                         ; TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+47p ...
.text$mn:00005670
.text$mn:00005670 var_4           = dword ptr -4
.text$mn:00005670 arg_0           = word ptr  8
.text$mn:00005670
.text$mn:00005670                 push    ebp
.text$mn:00005671                 mov     ebp, esp
.text$mn:00005673                 push    ecx
.text$mn:00005674                 mov     [ebp+var_4], ecx
.text$mn:00005677                 movzx   eax, [ebp+arg_0]
.text$mn:0000567B                 push    eax
.text$mn:0000567C                 push    1
.text$mn:0000567E                 mov     ecx, [ebp+var_4]
.text$mn:00005681                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)
.text$mn:00005686                 mov     esp, ebp
.text$mn:00005688                 pop     ebp
.text$mn:00005689                 retn    4
.text$mn:00005689 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@_W@Z endp
.text$mn:00005689
.text$mn:00005689 _text$mn        ends
.text$mn:00005689
.text$mn:0000568C ; ===========================================================================
.text$mn:0000568C
.text$mn:0000568C ; Segment type: Pure code
.text$mn:0000568C ; Segment permissions: Read/Execute
.text$mn:0000568C _text$mn        segment para public 'CODE' use32
.text$mn:0000568C                 assume cs:_text$mn
.text$mn:0000568C                 ;org 568Ch
.text$mn:0000568C ; COMDAT (pick any)
.text$mn:0000568C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000568C
.text$mn:0000568C ; =============== S U B R O U T I N E =======================================
.text$mn:0000568C
.text$mn:0000568C ; Attributes: bp-based frame
.text$mn:0000568C
.text$mn:0000568C ; protected: virtual void * __thiscall std::ctype<wchar_t>::`scalar deleting destructor'(unsigned int)
.text$mn:0000568C                 public ??_G?$ctype@_W@std@@MAEPAXI@Z
.text$mn:0000568C ??_G?$ctype@_W@std@@MAEPAXI@Z proc near
.text$mn:0000568C
.text$mn:0000568C Memory          = dword ptr -4
.text$mn:0000568C arg_0           = dword ptr  8
.text$mn:0000568C
.text$mn:0000568C                 push    ebp
.text$mn:0000568D                 mov     ebp, esp
.text$mn:0000568F                 push    ecx
.text$mn:00005690                 mov     [ebp+Memory], ecx
.text$mn:00005693                 mov     ecx, [ebp+Memory]
.text$mn:00005696                 call    ??1?$ctype@_W@std@@MAE@XZ ; std::ctype<wchar_t>::~ctype<wchar_t>(void)
.text$mn:0000569B                 mov     eax, [ebp+arg_0]
.text$mn:0000569E                 and     eax, 1
.text$mn:000056A1                 jz      short loc_56AF
.text$mn:000056A3                 mov     ecx, [ebp+Memory]
.text$mn:000056A6                 push    ecx             ; Memory
.text$mn:000056A7                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:000056AC                 add     esp, 4
.text$mn:000056AF
.text$mn:000056AF loc_56AF:                               ; CODE XREF: std::ctype<wchar_t>::`scalar deleting destructor'(uint)+15j
.text$mn:000056AF                 mov     eax, [ebp+Memory]
.text$mn:000056B2                 mov     esp, ebp
.text$mn:000056B4                 pop     ebp
.text$mn:000056B5                 retn    4
.text$mn:000056B5 ??_G?$ctype@_W@std@@MAEPAXI@Z endp
.text$mn:000056B5
.text$mn:000056B5 _text$mn        ends
.text$mn:000056B5
.text$mn:000056B8 ; ===========================================================================
.text$mn:000056B8
.text$mn:000056B8 ; Segment type: Pure code
.text$mn:000056B8 ; Segment permissions: Read/Execute
.text$mn:000056B8 _text$mn        segment para public 'CODE' use32
.text$mn:000056B8                 assume cs:_text$mn
.text$mn:000056B8                 ;org 56B8h
.text$mn:000056B8 ; COMDAT (pick any)
.text$mn:000056B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056B8
.text$mn:000056B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000056B8
.text$mn:000056B8 ; Attributes: bp-based frame
.text$mn:000056B8
.text$mn:000056B8 ; public: virtual void * __thiscall TiXmlAttribute::`scalar deleting destructor'(unsigned int)
.text$mn:000056B8                 public ??_GTiXmlAttribute@@UAEPAXI@Z
.text$mn:000056B8 ??_GTiXmlAttribute@@UAEPAXI@Z proc near
.text$mn:000056B8
.text$mn:000056B8 var_4           = dword ptr -4
.text$mn:000056B8 arg_0           = dword ptr  8
.text$mn:000056B8
.text$mn:000056B8                 push    ebp
.text$mn:000056B9                 mov     ebp, esp
.text$mn:000056BB                 push    ecx
.text$mn:000056BC                 mov     [ebp+var_4], ecx
.text$mn:000056BF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000056C2                 call    ??1TiXmlAttribute@@UAE@XZ ; TiXmlAttribute::~TiXmlAttribute(void)
.text$mn:000056C7                 mov     eax, [ebp+arg_0]
.text$mn:000056CA                 and     eax, 1
.text$mn:000056CD                 jz      short loc_56DB
.text$mn:000056CF                 mov     ecx, [ebp+var_4]
.text$mn:000056D2                 push    ecx             ; void *
.text$mn:000056D3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000056D8                 add     esp, 4
.text$mn:000056DB
.text$mn:000056DB loc_56DB:                               ; CODE XREF: TiXmlAttribute::`scalar deleting destructor'(uint)+15j
.text$mn:000056DB                 mov     eax, [ebp+var_4]
.text$mn:000056DE                 mov     esp, ebp
.text$mn:000056E0                 pop     ebp
.text$mn:000056E1                 retn    4
.text$mn:000056E1 ??_GTiXmlAttribute@@UAEPAXI@Z endp
.text$mn:000056E1
.text$mn:000056E1 _text$mn        ends
.text$mn:000056E1
.text$mn:000056E4 ; ===========================================================================
.text$mn:000056E4
.text$mn:000056E4 ; Segment type: Pure code
.text$mn:000056E4 ; Segment permissions: Read/Execute
.text$mn:000056E4 _text$mn        segment para public 'CODE' use32
.text$mn:000056E4                 assume cs:_text$mn
.text$mn:000056E4                 ;org 56E4h
.text$mn:000056E4 ; COMDAT (pick any)
.text$mn:000056E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056E4
.text$mn:000056E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000056E4
.text$mn:000056E4 ; Attributes: bp-based frame
.text$mn:000056E4
.text$mn:000056E4 ; public: virtual void * __thiscall TiXmlBase::`scalar deleting destructor'(unsigned int)
.text$mn:000056E4                 public ??_GTiXmlBase@@UAEPAXI@Z
.text$mn:000056E4 ??_GTiXmlBase@@UAEPAXI@Z proc near
.text$mn:000056E4
.text$mn:000056E4 var_4           = dword ptr -4
.text$mn:000056E4 arg_0           = dword ptr  8
.text$mn:000056E4
.text$mn:000056E4                 push    ebp
.text$mn:000056E5                 mov     ebp, esp
.text$mn:000056E7                 push    ecx
.text$mn:000056E8                 mov     [ebp+var_4], ecx
.text$mn:000056EB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000056EE                 call    ??1TiXmlBase@@UAE@XZ ; TiXmlBase::~TiXmlBase(void)
.text$mn:000056F3                 mov     eax, [ebp+arg_0]
.text$mn:000056F6                 and     eax, 1
.text$mn:000056F9                 jz      short loc_5707
.text$mn:000056FB                 mov     ecx, [ebp+var_4]
.text$mn:000056FE                 push    ecx             ; void *
.text$mn:000056FF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005704                 add     esp, 4
.text$mn:00005707
.text$mn:00005707 loc_5707:                               ; CODE XREF: TiXmlBase::`scalar deleting destructor'(uint)+15j
.text$mn:00005707                 mov     eax, [ebp+var_4]
.text$mn:0000570A                 mov     esp, ebp
.text$mn:0000570C                 pop     ebp
.text$mn:0000570D                 retn    4
.text$mn:0000570D ??_GTiXmlBase@@UAEPAXI@Z endp
.text$mn:0000570D
.text$mn:0000570D _text$mn        ends
.text$mn:0000570D
.text$mn:00005710 ; ===========================================================================
.text$mn:00005710
.text$mn:00005710 ; Segment type: Pure code
.text$mn:00005710 ; Segment permissions: Read/Execute
.text$mn:00005710 _text$mn        segment para public 'CODE' use32
.text$mn:00005710                 assume cs:_text$mn
.text$mn:00005710                 ;org 5710h
.text$mn:00005710 ; COMDAT (pick any)
.text$mn:00005710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005710
.text$mn:00005710 ; =============== S U B R O U T I N E =======================================
.text$mn:00005710
.text$mn:00005710 ; Attributes: bp-based frame
.text$mn:00005710
.text$mn:00005710 ; public: virtual void * __thiscall TiXmlComment::`scalar deleting destructor'(unsigned int)
.text$mn:00005710                 public ??_GTiXmlComment@@UAEPAXI@Z
.text$mn:00005710 ??_GTiXmlComment@@UAEPAXI@Z proc near
.text$mn:00005710
.text$mn:00005710 var_4           = dword ptr -4
.text$mn:00005710 arg_0           = dword ptr  8
.text$mn:00005710
.text$mn:00005710                 push    ebp
.text$mn:00005711                 mov     ebp, esp
.text$mn:00005713                 push    ecx
.text$mn:00005714                 mov     [ebp+var_4], ecx
.text$mn:00005717                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000571A                 call    ??1TiXmlComment@@UAE@XZ ; TiXmlComment::~TiXmlComment(void)
.text$mn:0000571F                 mov     eax, [ebp+arg_0]
.text$mn:00005722                 and     eax, 1
.text$mn:00005725                 jz      short loc_5733
.text$mn:00005727                 mov     ecx, [ebp+var_4]
.text$mn:0000572A                 push    ecx             ; void *
.text$mn:0000572B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005730                 add     esp, 4
.text$mn:00005733
.text$mn:00005733 loc_5733:                               ; CODE XREF: TiXmlComment::`scalar deleting destructor'(uint)+15j
.text$mn:00005733                 mov     eax, [ebp+var_4]
.text$mn:00005736                 mov     esp, ebp
.text$mn:00005738                 pop     ebp
.text$mn:00005739                 retn    4
.text$mn:00005739 ??_GTiXmlComment@@UAEPAXI@Z endp
.text$mn:00005739
.text$mn:00005739 _text$mn        ends
.text$mn:00005739
.text$mn:0000573C ; ===========================================================================
.text$mn:0000573C
.text$mn:0000573C ; Segment type: Pure code
.text$mn:0000573C ; Segment permissions: Read/Execute
.text$mn:0000573C _text$mn        segment para public 'CODE' use32
.text$mn:0000573C                 assume cs:_text$mn
.text$mn:0000573C                 ;org 573Ch
.text$mn:0000573C ; COMDAT (pick any)
.text$mn:0000573C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000573C
.text$mn:0000573C ; =============== S U B R O U T I N E =======================================
.text$mn:0000573C
.text$mn:0000573C ; Attributes: bp-based frame
.text$mn:0000573C
.text$mn:0000573C ; public: virtual void * __thiscall TiXmlDeclaration::`scalar deleting destructor'(unsigned int)
.text$mn:0000573C                 public ??_GTiXmlDeclaration@@UAEPAXI@Z
.text$mn:0000573C ??_GTiXmlDeclaration@@UAEPAXI@Z proc near
.text$mn:0000573C
.text$mn:0000573C var_4           = dword ptr -4
.text$mn:0000573C arg_0           = dword ptr  8
.text$mn:0000573C
.text$mn:0000573C                 push    ebp
.text$mn:0000573D                 mov     ebp, esp
.text$mn:0000573F                 push    ecx
.text$mn:00005740                 mov     [ebp+var_4], ecx
.text$mn:00005743                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005746                 call    ??1TiXmlDeclaration@@UAE@XZ ; TiXmlDeclaration::~TiXmlDeclaration(void)
.text$mn:0000574B                 mov     eax, [ebp+arg_0]
.text$mn:0000574E                 and     eax, 1
.text$mn:00005751                 jz      short loc_575F
.text$mn:00005753                 mov     ecx, [ebp+var_4]
.text$mn:00005756                 push    ecx             ; void *
.text$mn:00005757                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000575C                 add     esp, 4
.text$mn:0000575F
.text$mn:0000575F loc_575F:                               ; CODE XREF: TiXmlDeclaration::`scalar deleting destructor'(uint)+15j
.text$mn:0000575F                 mov     eax, [ebp+var_4]
.text$mn:00005762                 mov     esp, ebp
.text$mn:00005764                 pop     ebp
.text$mn:00005765                 retn    4
.text$mn:00005765 ??_GTiXmlDeclaration@@UAEPAXI@Z endp
.text$mn:00005765
.text$mn:00005765 _text$mn        ends
.text$mn:00005765
.text$mn:00005768 ; ===========================================================================
.text$mn:00005768
.text$mn:00005768 ; Segment type: Pure code
.text$mn:00005768 ; Segment permissions: Read/Execute
.text$mn:00005768 _text$mn        segment para public 'CODE' use32
.text$mn:00005768                 assume cs:_text$mn
.text$mn:00005768                 ;org 5768h
.text$mn:00005768 ; COMDAT (pick any)
.text$mn:00005768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005768
.text$mn:00005768 ; =============== S U B R O U T I N E =======================================
.text$mn:00005768
.text$mn:00005768 ; Attributes: bp-based frame
.text$mn:00005768
.text$mn:00005768 ; public: virtual void * __thiscall TiXmlText::`scalar deleting destructor'(unsigned int)
.text$mn:00005768                 public ??_GTiXmlText@@UAEPAXI@Z
.text$mn:00005768 ??_GTiXmlText@@UAEPAXI@Z proc near
.text$mn:00005768
.text$mn:00005768 var_4           = dword ptr -4
.text$mn:00005768 arg_0           = dword ptr  8
.text$mn:00005768
.text$mn:00005768                 push    ebp
.text$mn:00005769                 mov     ebp, esp
.text$mn:0000576B                 push    ecx
.text$mn:0000576C                 mov     [ebp+var_4], ecx
.text$mn:0000576F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005772                 call    ??1TiXmlText@@UAE@XZ ; TiXmlText::~TiXmlText(void)
.text$mn:00005777                 mov     eax, [ebp+arg_0]
.text$mn:0000577A                 and     eax, 1
.text$mn:0000577D                 jz      short loc_578B
.text$mn:0000577F                 mov     ecx, [ebp+var_4]
.text$mn:00005782                 push    ecx             ; void *
.text$mn:00005783                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005788                 add     esp, 4
.text$mn:0000578B
.text$mn:0000578B loc_578B:                               ; CODE XREF: TiXmlText::`scalar deleting destructor'(uint)+15j
.text$mn:0000578B                 mov     eax, [ebp+var_4]
.text$mn:0000578E                 mov     esp, ebp
.text$mn:00005790                 pop     ebp
.text$mn:00005791                 retn    4
.text$mn:00005791 ??_GTiXmlText@@UAEPAXI@Z endp
.text$mn:00005791
.text$mn:00005791 _text$mn        ends
.text$mn:00005791
.text$mn:00005794 ; ===========================================================================
.text$mn:00005794
.text$mn:00005794 ; Segment type: Pure code
.text$mn:00005794 ; Segment permissions: Read/Execute
.text$mn:00005794 _text$mn        segment para public 'CODE' use32
.text$mn:00005794                 assume cs:_text$mn
.text$mn:00005794                 ;org 5794h
.text$mn:00005794 ; COMDAT (pick any)
.text$mn:00005794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005794
.text$mn:00005794 ; =============== S U B R O U T I N E =======================================
.text$mn:00005794
.text$mn:00005794 ; Attributes: bp-based frame
.text$mn:00005794
.text$mn:00005794 ; public: virtual void * __thiscall TiXmlUnknown::`scalar deleting destructor'(unsigned int)
.text$mn:00005794                 public ??_GTiXmlUnknown@@UAEPAXI@Z
.text$mn:00005794 ??_GTiXmlUnknown@@UAEPAXI@Z proc near
.text$mn:00005794
.text$mn:00005794 var_4           = dword ptr -4
.text$mn:00005794 arg_0           = dword ptr  8
.text$mn:00005794
.text$mn:00005794                 push    ebp
.text$mn:00005795                 mov     ebp, esp
.text$mn:00005797                 push    ecx
.text$mn:00005798                 mov     [ebp+var_4], ecx
.text$mn:0000579B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000579E                 call    ??1TiXmlUnknown@@UAE@XZ ; TiXmlUnknown::~TiXmlUnknown(void)
.text$mn:000057A3                 mov     eax, [ebp+arg_0]
.text$mn:000057A6                 and     eax, 1
.text$mn:000057A9                 jz      short loc_57B7
.text$mn:000057AB                 mov     ecx, [ebp+var_4]
.text$mn:000057AE                 push    ecx             ; void *
.text$mn:000057AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000057B4                 add     esp, 4
.text$mn:000057B7
.text$mn:000057B7 loc_57B7:                               ; CODE XREF: TiXmlUnknown::`scalar deleting destructor'(uint)+15j
.text$mn:000057B7                 mov     eax, [ebp+var_4]
.text$mn:000057BA                 mov     esp, ebp
.text$mn:000057BC                 pop     ebp
.text$mn:000057BD                 retn    4
.text$mn:000057BD ??_GTiXmlUnknown@@UAEPAXI@Z endp
.text$mn:000057BD
.text$mn:000057BD _text$mn        ends
.text$mn:000057BD
.text$mn:000057C0 ; ===========================================================================
.text$mn:000057C0
.text$mn:000057C0 ; Segment type: Pure code
.text$mn:000057C0 ; Segment permissions: Read/Execute
.text$mn:000057C0 _text$mn        segment para public 'CODE' use32
.text$mn:000057C0                 assume cs:_text$mn
.text$mn:000057C0                 ;org 57C0h
.text$mn:000057C0 ; COMDAT (pick any)
.text$mn:000057C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057C0
.text$mn:000057C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000057C0
.text$mn:000057C0 ; Attributes: bp-based frame
.text$mn:000057C0
.text$mn:000057C0 ; public: virtual void * __thiscall std::_Facet_base::`scalar deleting destructor'(unsigned int)
.text$mn:000057C0                 public ??_G_Facet_base@std@@UAEPAXI@Z
.text$mn:000057C0 ??_G_Facet_base@std@@UAEPAXI@Z proc near
.text$mn:000057C0
.text$mn:000057C0 var_4           = dword ptr -4
.text$mn:000057C0 arg_0           = dword ptr  8
.text$mn:000057C0
.text$mn:000057C0                 push    ebp
.text$mn:000057C1                 mov     ebp, esp
.text$mn:000057C3                 push    ecx
.text$mn:000057C4                 mov     [ebp+var_4], ecx
.text$mn:000057C7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000057CA                 call    ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base(void)
.text$mn:000057CF                 mov     eax, [ebp+arg_0]
.text$mn:000057D2                 and     eax, 1
.text$mn:000057D5                 jz      short loc_57E3
.text$mn:000057D7                 mov     ecx, [ebp+var_4]
.text$mn:000057DA                 push    ecx             ; void *
.text$mn:000057DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000057E0                 add     esp, 4
.text$mn:000057E3
.text$mn:000057E3 loc_57E3:                               ; CODE XREF: std::_Facet_base::`scalar deleting destructor'(uint)+15j
.text$mn:000057E3                 mov     eax, [ebp+var_4]
.text$mn:000057E6                 mov     esp, ebp
.text$mn:000057E8                 pop     ebp
.text$mn:000057E9                 retn    4
.text$mn:000057E9 ??_G_Facet_base@std@@UAEPAXI@Z endp
.text$mn:000057E9
.text$mn:000057E9 _text$mn        ends
.text$mn:000057E9
.text$mn:000057EC ; ===========================================================================
.text$mn:000057EC
.text$mn:000057EC ; Segment type: Pure code
.text$mn:000057EC ; Segment permissions: Read/Execute
.text$mn:000057EC _text$mn        segment para public 'CODE' use32
.text$mn:000057EC                 assume cs:_text$mn
.text$mn:000057EC                 ;org 57ECh
.text$mn:000057EC ; COMDAT (pick any)
.text$mn:000057EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057EC
.text$mn:000057EC ; =============== S U B R O U T I N E =======================================
.text$mn:000057EC
.text$mn:000057EC ; Attributes: bp-based frame
.text$mn:000057EC
.text$mn:000057EC ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000057EC                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:000057EC ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:000057EC
.text$mn:000057EC var_4           = dword ptr -4
.text$mn:000057EC arg_0           = dword ptr  8
.text$mn:000057EC
.text$mn:000057EC                 push    ebp
.text$mn:000057ED                 mov     ebp, esp
.text$mn:000057EF                 push    ecx
.text$mn:000057F0                 mov     [ebp+var_4], ecx
.text$mn:000057F3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000057F6                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000057FB                 mov     eax, [ebp+arg_0]
.text$mn:000057FE                 and     eax, 1
.text$mn:00005801                 jz      short loc_580F
.text$mn:00005803                 mov     ecx, [ebp+var_4]
.text$mn:00005806                 push    ecx             ; void *
.text$mn:00005807                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000580C                 add     esp, 4
.text$mn:0000580F
.text$mn:0000580F loc_580F:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000580F                 mov     eax, [ebp+var_4]
.text$mn:00005812                 mov     esp, ebp
.text$mn:00005814                 pop     ebp
.text$mn:00005815                 retn    4
.text$mn:00005815 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00005815
.text$mn:00005815 _text$mn        ends
.text$mn:00005815
.text$mn:00005818 ; ===========================================================================
.text$mn:00005818
.text$mn:00005818 ; Segment type: Pure code
.text$mn:00005818 ; Segment permissions: Read/Execute
.text$mn:00005818 _text$mn        segment para public 'CODE' use32
.text$mn:00005818                 assume cs:_text$mn
.text$mn:00005818                 ;org 5818h
.text$mn:00005818 ; COMDAT (pick any)
.text$mn:00005818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005818
.text$mn:00005818 ; =============== S U B R O U T I N E =======================================
.text$mn:00005818
.text$mn:00005818 ; Attributes: bp-based frame
.text$mn:00005818
.text$mn:00005818 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005818                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00005818 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005818
.text$mn:00005818 var_4           = dword ptr -4
.text$mn:00005818 arg_0           = dword ptr  8
.text$mn:00005818
.text$mn:00005818                 push    ebp
.text$mn:00005819                 mov     ebp, esp
.text$mn:0000581B                 push    ecx
.text$mn:0000581C                 mov     [ebp+var_4], ecx
.text$mn:0000581F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005822                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00005827                 mov     eax, [ebp+arg_0]
.text$mn:0000582A                 and     eax, 1
.text$mn:0000582D                 jz      short loc_583B
.text$mn:0000582F                 mov     ecx, [ebp+var_4]
.text$mn:00005832                 push    ecx             ; void *
.text$mn:00005833                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005838                 add     esp, 4
.text$mn:0000583B
.text$mn:0000583B loc_583B:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000583B                 mov     eax, [ebp+var_4]
.text$mn:0000583E                 mov     esp, ebp
.text$mn:00005840                 pop     ebp
.text$mn:00005841                 retn    4
.text$mn:00005841 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00005841
.text$mn:00005841 _text$mn        ends
.text$mn:00005841
.text$mn:00005844 ; ===========================================================================
.text$mn:00005844
.text$mn:00005844 ; Segment type: Pure code
.text$mn:00005844 ; Segment permissions: Read/Execute
.text$mn:00005844 _text$mn        segment para public 'CODE' use32
.text$mn:00005844                 assume cs:_text$mn
.text$mn:00005844                 ;org 5844h
.text$mn:00005844 ; COMDAT (pick any)
.text$mn:00005844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005844
.text$mn:00005844 ; =============== S U B R O U T I N E =======================================
.text$mn:00005844
.text$mn:00005844 ; Attributes: bp-based frame
.text$mn:00005844
.text$mn:00005844 ; public: virtual void * __thiscall std::_System_error::`scalar deleting destructor'(unsigned int)
.text$mn:00005844                 public ??_G_System_error@std@@UAEPAXI@Z
.text$mn:00005844 ??_G_System_error@std@@UAEPAXI@Z proc near
.text$mn:00005844
.text$mn:00005844 var_4           = dword ptr -4
.text$mn:00005844 arg_0           = dword ptr  8
.text$mn:00005844
.text$mn:00005844                 push    ebp
.text$mn:00005845                 mov     ebp, esp
.text$mn:00005847                 push    ecx
.text$mn:00005848                 mov     [ebp+var_4], ecx
.text$mn:0000584B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000584E                 call    ??1_System_error@std@@UAE@XZ ; std::_System_error::~_System_error(void)
.text$mn:00005853                 mov     eax, [ebp+arg_0]
.text$mn:00005856                 and     eax, 1
.text$mn:00005859                 jz      short loc_5867
.text$mn:0000585B                 mov     ecx, [ebp+var_4]
.text$mn:0000585E                 push    ecx             ; void *
.text$mn:0000585F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005864                 add     esp, 4
.text$mn:00005867
.text$mn:00005867 loc_5867:                               ; CODE XREF: std::_System_error::`scalar deleting destructor'(uint)+15j
.text$mn:00005867                 mov     eax, [ebp+var_4]
.text$mn:0000586A                 mov     esp, ebp
.text$mn:0000586C                 pop     ebp
.text$mn:0000586D                 retn    4
.text$mn:0000586D ??_G_System_error@std@@UAEPAXI@Z endp
.text$mn:0000586D
.text$mn:0000586D _text$mn        ends
.text$mn:0000586D
.text$mn:00005870 ; ===========================================================================
.text$mn:00005870
.text$mn:00005870 ; Segment type: Pure code
.text$mn:00005870 ; Segment permissions: Read/Execute
.text$mn:00005870 _text$mn        segment para public 'CODE' use32
.text$mn:00005870                 assume cs:_text$mn
.text$mn:00005870                 ;org 5870h
.text$mn:00005870 ; COMDAT (pick any)
.text$mn:00005870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005870
.text$mn:00005870 ; =============== S U B R O U T I N E =======================================
.text$mn:00005870
.text$mn:00005870 ; Attributes: bp-based frame
.text$mn:00005870
.text$mn:00005870 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005870                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00005870 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005870
.text$mn:00005870 var_4           = dword ptr -4
.text$mn:00005870 arg_0           = dword ptr  8
.text$mn:00005870
.text$mn:00005870                 push    ebp
.text$mn:00005871                 mov     ebp, esp
.text$mn:00005873                 push    ecx
.text$mn:00005874                 mov     [ebp+var_4], ecx
.text$mn:00005877                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000587A                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:0000587F                 mov     eax, [ebp+arg_0]
.text$mn:00005882                 and     eax, 1
.text$mn:00005885                 jz      short loc_5893
.text$mn:00005887                 mov     ecx, [ebp+var_4]
.text$mn:0000588A                 push    ecx             ; void *
.text$mn:0000588B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005890                 add     esp, 4
.text$mn:00005893
.text$mn:00005893 loc_5893:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00005893                 mov     eax, [ebp+var_4]
.text$mn:00005896                 mov     esp, ebp
.text$mn:00005898                 pop     ebp
.text$mn:00005899                 retn    4
.text$mn:00005899 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00005899
.text$mn:00005899 _text$mn        ends
.text$mn:00005899
.text$mn:0000589C ; ===========================================================================
.text$mn:0000589C
.text$mn:0000589C ; Segment type: Pure code
.text$mn:0000589C ; Segment permissions: Read/Execute
.text$mn:0000589C _text$mn        segment para public 'CODE' use32
.text$mn:0000589C                 assume cs:_text$mn
.text$mn:0000589C                 ;org 589Ch
.text$mn:0000589C ; COMDAT (pick any)
.text$mn:0000589C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000589C
.text$mn:0000589C ; =============== S U B R O U T I N E =======================================
.text$mn:0000589C
.text$mn:0000589C ; Attributes: bp-based frame
.text$mn:0000589C
.text$mn:0000589C ; public: virtual void * __thiscall std::ctype_base::`scalar deleting destructor'(unsigned int)
.text$mn:0000589C                 public ??_Gctype_base@std@@UAEPAXI@Z
.text$mn:0000589C ??_Gctype_base@std@@UAEPAXI@Z proc near
.text$mn:0000589C
.text$mn:0000589C Memory          = dword ptr -4
.text$mn:0000589C arg_0           = dword ptr  8
.text$mn:0000589C
.text$mn:0000589C                 push    ebp
.text$mn:0000589D                 mov     ebp, esp
.text$mn:0000589F                 push    ecx
.text$mn:000058A0                 mov     [ebp+Memory], ecx
.text$mn:000058A3                 mov     ecx, [ebp+Memory] ; this
.text$mn:000058A6                 call    ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base(void)
.text$mn:000058AB                 mov     eax, [ebp+arg_0]
.text$mn:000058AE                 and     eax, 1
.text$mn:000058B1                 jz      short loc_58BF
.text$mn:000058B3                 mov     ecx, [ebp+Memory]
.text$mn:000058B6                 push    ecx             ; Memory
.text$mn:000058B7                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:000058BC                 add     esp, 4
.text$mn:000058BF
.text$mn:000058BF loc_58BF:                               ; CODE XREF: std::ctype_base::`scalar deleting destructor'(uint)+15j
.text$mn:000058BF                 mov     eax, [ebp+Memory]
.text$mn:000058C2                 mov     esp, ebp
.text$mn:000058C4                 pop     ebp
.text$mn:000058C5                 retn    4
.text$mn:000058C5 ??_Gctype_base@std@@UAEPAXI@Z endp
.text$mn:000058C5
.text$mn:000058C5 _text$mn        ends
.text$mn:000058C5
.text$mn:000058C8 ; ===========================================================================
.text$mn:000058C8
.text$mn:000058C8 ; Segment type: Pure code
.text$mn:000058C8 ; Segment permissions: Read/Execute
.text$mn:000058C8 _text$mn        segment para public 'CODE' use32
.text$mn:000058C8                 assume cs:_text$mn
.text$mn:000058C8                 ;org 58C8h
.text$mn:000058C8 ; COMDAT (pick any)
.text$mn:000058C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058C8
.text$mn:000058C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058C8
.text$mn:000058C8 ; Attributes: bp-based frame
.text$mn:000058C8
.text$mn:000058C8 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000058C8                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:000058C8 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:000058C8
.text$mn:000058C8 var_4           = dword ptr -4
.text$mn:000058C8 arg_0           = dword ptr  8
.text$mn:000058C8
.text$mn:000058C8                 push    ebp
.text$mn:000058C9                 mov     ebp, esp
.text$mn:000058CB                 push    ecx
.text$mn:000058CC                 mov     [ebp+var_4], ecx
.text$mn:000058CF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000058D2                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000058D7                 mov     eax, [ebp+arg_0]
.text$mn:000058DA                 and     eax, 1
.text$mn:000058DD                 jz      short loc_58EB
.text$mn:000058DF                 mov     ecx, [ebp+var_4]
.text$mn:000058E2                 push    ecx             ; void *
.text$mn:000058E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000058E8                 add     esp, 4
.text$mn:000058EB
.text$mn:000058EB loc_58EB:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000058EB                 mov     eax, [ebp+var_4]
.text$mn:000058EE                 mov     esp, ebp
.text$mn:000058F0                 pop     ebp
.text$mn:000058F1                 retn    4
.text$mn:000058F1 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:000058F1
.text$mn:000058F1 _text$mn        ends
.text$mn:000058F1
.text$mn:000058F4 ; ===========================================================================
.text$mn:000058F4
.text$mn:000058F4 ; Segment type: Pure code
.text$mn:000058F4 ; Segment permissions: Read/Execute
.text$mn:000058F4 _text$mn        segment para public 'CODE' use32
.text$mn:000058F4                 assume cs:_text$mn
.text$mn:000058F4                 ;org 58F4h
.text$mn:000058F4 ; COMDAT (pick any)
.text$mn:000058F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058F4
.text$mn:000058F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000058F4
.text$mn:000058F4 ; Attributes: bp-based frame
.text$mn:000058F4
.text$mn:000058F4 ; protected: virtual void * __thiscall std::locale::facet::`scalar deleting destructor'(unsigned int)
.text$mn:000058F4                 public ??_Gfacet@locale@std@@MAEPAXI@Z
.text$mn:000058F4 ??_Gfacet@locale@std@@MAEPAXI@Z proc near
.text$mn:000058F4
.text$mn:000058F4 var_4           = dword ptr -4
.text$mn:000058F4 arg_0           = dword ptr  8
.text$mn:000058F4
.text$mn:000058F4                 push    ebp
.text$mn:000058F5                 mov     ebp, esp
.text$mn:000058F7                 push    ecx
.text$mn:000058F8                 mov     [ebp+var_4], ecx
.text$mn:000058FB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000058FE                 call    ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet(void)
.text$mn:00005903                 mov     eax, [ebp+arg_0]
.text$mn:00005906                 and     eax, 1
.text$mn:00005909                 jz      short loc_5917
.text$mn:0000590B                 mov     ecx, [ebp+var_4]
.text$mn:0000590E                 push    ecx             ; Memory
.text$mn:0000590F                 call    ??3facet@locale@std@@SAXPAX@Z ; std::locale::facet::operator delete(void *)
.text$mn:00005914                 add     esp, 4
.text$mn:00005917
.text$mn:00005917 loc_5917:                               ; CODE XREF: std::locale::facet::`scalar deleting destructor'(uint)+15j
.text$mn:00005917                 mov     eax, [ebp+var_4]
.text$mn:0000591A                 mov     esp, ebp
.text$mn:0000591C                 pop     ebp
.text$mn:0000591D                 retn    4
.text$mn:0000591D ??_Gfacet@locale@std@@MAEPAXI@Z endp
.text$mn:0000591D
.text$mn:0000591D _text$mn        ends
.text$mn:0000591D
.text$mn:00005920 ; ===========================================================================
.text$mn:00005920
.text$mn:00005920 ; Segment type: Pure code
.text$mn:00005920 ; Segment permissions: Read/Execute
.text$mn:00005920 _text$mn        segment para public 'CODE' use32
.text$mn:00005920                 assume cs:_text$mn
.text$mn:00005920                 ;org 5920h
.text$mn:00005920 ; COMDAT (pick any)
.text$mn:00005920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005920
.text$mn:00005920 ; =============== S U B R O U T I N E =======================================
.text$mn:00005920
.text$mn:00005920 ; Attributes: bp-based frame
.text$mn:00005920
.text$mn:00005920 ; public: virtual void * __thiscall std::ios_base::failure::`scalar deleting destructor'(unsigned int)
.text$mn:00005920                 public ??_Gfailure@ios_base@std@@UAEPAXI@Z
.text$mn:00005920 ??_Gfailure@ios_base@std@@UAEPAXI@Z proc near
.text$mn:00005920
.text$mn:00005920 var_4           = dword ptr -4
.text$mn:00005920 arg_0           = dword ptr  8
.text$mn:00005920
.text$mn:00005920                 push    ebp
.text$mn:00005921                 mov     ebp, esp
.text$mn:00005923                 push    ecx
.text$mn:00005924                 mov     [ebp+var_4], ecx
.text$mn:00005927                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000592A                 call    ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.text$mn:0000592F                 mov     eax, [ebp+arg_0]
.text$mn:00005932                 and     eax, 1
.text$mn:00005935                 jz      short loc_5943
.text$mn:00005937                 mov     ecx, [ebp+var_4]
.text$mn:0000593A                 push    ecx             ; void *
.text$mn:0000593B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005940                 add     esp, 4
.text$mn:00005943
.text$mn:00005943 loc_5943:                               ; CODE XREF: std::ios_base::failure::`scalar deleting destructor'(uint)+15j
.text$mn:00005943                 mov     eax, [ebp+var_4]
.text$mn:00005946                 mov     esp, ebp
.text$mn:00005948                 pop     ebp
.text$mn:00005949                 retn    4
.text$mn:00005949 ??_Gfailure@ios_base@std@@UAEPAXI@Z endp
.text$mn:00005949
.text$mn:00005949 _text$mn        ends
.text$mn:00005949
.text$mn:0000594C ; ===========================================================================
.text$mn:0000594C
.text$mn:0000594C ; Segment type: Pure code
.text$mn:0000594C ; Segment permissions: Read/Execute
.text$mn:0000594C _text$mn        segment para public 'CODE' use32
.text$mn:0000594C                 assume cs:_text$mn
.text$mn:0000594C                 ;org 594Ch
.text$mn:0000594C ; COMDAT (pick any)
.text$mn:0000594C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000594C
.text$mn:0000594C ; =============== S U B R O U T I N E =======================================
.text$mn:0000594C
.text$mn:0000594C ; Attributes: bp-based frame
.text$mn:0000594C
.text$mn:0000594C ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:0000594C                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:0000594C ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:0000594C
.text$mn:0000594C var_4           = dword ptr -4
.text$mn:0000594C arg_0           = dword ptr  8
.text$mn:0000594C
.text$mn:0000594C                 push    ebp
.text$mn:0000594D                 mov     ebp, esp
.text$mn:0000594F                 push    ecx
.text$mn:00005950                 mov     [ebp+var_4], ecx
.text$mn:00005953                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005956                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:0000595B                 mov     eax, [ebp+arg_0]
.text$mn:0000595E                 and     eax, 1
.text$mn:00005961                 jz      short loc_596F
.text$mn:00005963                 mov     ecx, [ebp+var_4]
.text$mn:00005966                 push    ecx             ; void *
.text$mn:00005967                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000596C                 add     esp, 4
.text$mn:0000596F
.text$mn:0000596F loc_596F:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:0000596F                 mov     eax, [ebp+var_4]
.text$mn:00005972                 mov     esp, ebp
.text$mn:00005974                 pop     ebp
.text$mn:00005975                 retn    4
.text$mn:00005975 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:00005975
.text$mn:00005975 _text$mn        ends
.text$mn:00005975
.text$mn:00005978 ; ===========================================================================
.text$mn:00005978
.text$mn:00005978 ; Segment type: Pure code
.text$mn:00005978 ; Segment permissions: Read/Execute
.text$mn:00005978 _text$mn        segment para public 'CODE' use32
.text$mn:00005978                 assume cs:_text$mn
.text$mn:00005978                 ;org 5978h
.text$mn:00005978 ; COMDAT (pick any)
.text$mn:00005978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005978
.text$mn:00005978 ; =============== S U B R O U T I N E =======================================
.text$mn:00005978
.text$mn:00005978 ; Attributes: bp-based frame
.text$mn:00005978
.text$mn:00005978 ; public: virtual void * __thiscall std::system_error::`scalar deleting destructor'(unsigned int)
.text$mn:00005978                 public ??_Gsystem_error@std@@UAEPAXI@Z
.text$mn:00005978 ??_Gsystem_error@std@@UAEPAXI@Z proc near
.text$mn:00005978
.text$mn:00005978 var_4           = dword ptr -4
.text$mn:00005978 arg_0           = dword ptr  8
.text$mn:00005978
.text$mn:00005978                 push    ebp
.text$mn:00005979                 mov     ebp, esp
.text$mn:0000597B                 push    ecx
.text$mn:0000597C                 mov     [ebp+var_4], ecx
.text$mn:0000597F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005982                 call    ??1system_error@std@@UAE@XZ ; std::system_error::~system_error(void)
.text$mn:00005987                 mov     eax, [ebp+arg_0]
.text$mn:0000598A                 and     eax, 1
.text$mn:0000598D                 jz      short loc_599B
.text$mn:0000598F                 mov     ecx, [ebp+var_4]
.text$mn:00005992                 push    ecx             ; void *
.text$mn:00005993                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005998                 add     esp, 4
.text$mn:0000599B
.text$mn:0000599B loc_599B:                               ; CODE XREF: std::system_error::`scalar deleting destructor'(uint)+15j
.text$mn:0000599B                 mov     eax, [ebp+var_4]
.text$mn:0000599E                 mov     esp, ebp
.text$mn:000059A0                 pop     ebp
.text$mn:000059A1                 retn    4
.text$mn:000059A1 ??_Gsystem_error@std@@UAEPAXI@Z endp
.text$mn:000059A1
.text$mn:000059A1 _text$mn        ends
.text$mn:000059A1
.text$di:000059A4 ; ===========================================================================
.text$di:000059A4
.text$di:000059A4 ; Segment type: Pure code
.text$di:000059A4 ; Segment permissions: Read/Execute
.text$di:000059A4 _text$di        segment para public 'CODE' use32
.text$di:000059A4                 assume cs:_text$di
.text$di:000059A4                 ;org 59A4h
.text$di:000059A4 ; COMDAT (pick any)
.text$di:000059A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059A4
.text$di:000059A4 ; =============== S U B R O U T I N E =======================================
.text$di:000059A4
.text$di:000059A4 ; Attributes: bp-based frame
.text$di:000059A4
.text$di:000059A4 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:000059A4 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:000059A4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:000059A4                 push    ebp
.text$di:000059A5                 mov     ebp, esp
.text$di:000059A7                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000059AC                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000059B1                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000059B6                 call    _atexit
.text$di:000059BB                 add     esp, 4
.text$di:000059BE                 pop     ebp
.text$di:000059BF                 retn
.text$di:000059BF ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000059BF
.text$di:000059BF _text$di        ends
.text$di:000059BF
.text$di:000059C0 ; ===========================================================================
.text$di:000059C0
.text$di:000059C0 ; Segment type: Pure code
.text$di:000059C0 ; Segment permissions: Read/Execute
.text$di:000059C0 _text$di        segment para public 'CODE' use32
.text$di:000059C0                 assume cs:_text$di
.text$di:000059C0                 ;org 59C0h
.text$di:000059C0 ; COMDAT (pick any)
.text$di:000059C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059C0
.text$di:000059C0 ; =============== S U B R O U T I N E =======================================
.text$di:000059C0
.text$di:000059C0 ; Attributes: bp-based frame
.text$di:000059C0
.text$di:000059C0 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000059C0 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000059C0                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000059C0                 push    ebp
.text$di:000059C1                 mov     ebp, esp
.text$di:000059C3                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:000059C8                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:000059CD                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000059D2                 call    _atexit
.text$di:000059D7                 add     esp, 4
.text$di:000059DA                 pop     ebp
.text$di:000059DB                 retn
.text$di:000059DB ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:000059DB
.text$di:000059DB _text$di        ends
.text$di:000059DB
.text$di:000059DC ; ===========================================================================
.text$di:000059DC
.text$di:000059DC ; Segment type: Pure code
.text$di:000059DC ; Segment permissions: Read/Execute
.text$di:000059DC _text$di        segment para public 'CODE' use32
.text$di:000059DC                 assume cs:_text$di
.text$di:000059DC                 ;org 59DCh
.text$di:000059DC ; COMDAT (pick any)
.text$di:000059DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059DC
.text$di:000059DC ; =============== S U B R O U T I N E =======================================
.text$di:000059DC
.text$di:000059DC ; Attributes: bp-based frame
.text$di:000059DC
.text$di:000059DC ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:000059DC ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:000059DC                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:000059DC                 push    ebp
.text$di:000059DD                 mov     ebp, esp
.text$di:000059DF                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:000059E4                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:000059E9                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000059EE                 call    _atexit
.text$di:000059F3                 add     esp, 4
.text$di:000059F6                 pop     ebp
.text$di:000059F7                 retn
.text$di:000059F7 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:000059F7
.text$di:000059F7 _text$di        ends
.text$di:000059F7
.text$di:000059F8 ; ===========================================================================
.text$di:000059F8
.text$di:000059F8 ; Segment type: Pure code
.text$di:000059F8 ; Segment permissions: Read/Execute
.text$di:000059F8 _text$di        segment para public 'CODE' use32
.text$di:000059F8                 assume cs:_text$di
.text$di:000059F8                 ;org 59F8h
.text$di:000059F8 ; COMDAT (pick any)
.text$di:000059F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000059F8
.text$di:000059F8 ; =============== S U B R O U T I N E =======================================
.text$di:000059F8
.text$di:000059F8 ; Attributes: bp-based frame
.text$di:000059F8
.text$di:000059F8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:000059F8 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000059F8                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:000059F8                 push    ebp
.text$di:000059F9                 mov     ebp, esp
.text$di:000059FB                 push    0               ; unsigned int
.text$di:000059FD                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00005A02                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A07                 pop     ebp
.text$di:00005A08                 retn
.text$di:00005A08 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A08
.text$di:00005A08 ; ---------------------------------------------------------------------------
.text$di:00005A09                 align 4
.text$di:00005A09 _text$di        ends
.text$di:00005A09
.text$di:00005A0C ; ===========================================================================
.text$di:00005A0C
.text$di:00005A0C ; Segment type: Pure code
.text$di:00005A0C ; Segment permissions: Read/Execute
.text$di:00005A0C _text$di        segment para public 'CODE' use32
.text$di:00005A0C                 assume cs:_text$di
.text$di:00005A0C                 ;org 5A0Ch
.text$di:00005A0C ; COMDAT (pick any)
.text$di:00005A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A0C
.text$di:00005A0C ; =============== S U B R O U T I N E =======================================
.text$di:00005A0C
.text$di:00005A0C ; Attributes: bp-based frame
.text$di:00005A0C
.text$di:00005A0C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00005A0C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A0C                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00005A0C                 push    ebp
.text$di:00005A0D                 mov     ebp, esp
.text$di:00005A0F                 push    0               ; unsigned int
.text$di:00005A11                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00005A16                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A1B                 pop     ebp
.text$di:00005A1C                 retn
.text$di:00005A1C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A1C
.text$di:00005A1C ; ---------------------------------------------------------------------------
.text$di:00005A1D                 align 10h
.text$di:00005A1D _text$di        ends
.text$di:00005A1D
.text$di:00005A20 ; ===========================================================================
.text$di:00005A20
.text$di:00005A20 ; Segment type: Pure code
.text$di:00005A20 ; Segment permissions: Read/Execute
.text$di:00005A20 _text$di        segment para public 'CODE' use32
.text$di:00005A20                 assume cs:_text$di
.text$di:00005A20                 ;org 5A20h
.text$di:00005A20 ; COMDAT (pick any)
.text$di:00005A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A20
.text$di:00005A20 ; =============== S U B R O U T I N E =======================================
.text$di:00005A20
.text$di:00005A20 ; Attributes: bp-based frame
.text$di:00005A20
.text$di:00005A20 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00005A20 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A20                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00005A20                 push    ebp
.text$di:00005A21                 mov     ebp, esp
.text$di:00005A23                 push    0               ; unsigned int
.text$di:00005A25                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00005A2A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A2F                 pop     ebp
.text$di:00005A30                 retn
.text$di:00005A30 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A30
.text$di:00005A30 ; ---------------------------------------------------------------------------
.text$di:00005A31                 align 4
.text$di:00005A31 _text$di        ends
.text$di:00005A31
.text$di:00005A34 ; ===========================================================================
.text$di:00005A34
.text$di:00005A34 ; Segment type: Pure code
.text$di:00005A34 ; Segment permissions: Read/Execute
.text$di:00005A34 _text$di        segment para public 'CODE' use32
.text$di:00005A34                 assume cs:_text$di
.text$di:00005A34                 ;org 5A34h
.text$di:00005A34 ; COMDAT (pick any)
.text$di:00005A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A34
.text$di:00005A34 ; =============== S U B R O U T I N E =======================================
.text$di:00005A34
.text$di:00005A34 ; Attributes: bp-based frame
.text$di:00005A34
.text$di:00005A34 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00005A34 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005A34                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00005A34                 push    ebp
.text$di:00005A35                 mov     ebp, esp
.text$di:00005A37                 push    0               ; unsigned int
.text$di:00005A39                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00005A3E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005A43                 pop     ebp
.text$di:00005A44                 retn
.text$di:00005A44 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005A44
.text$di:00005A44 ; ---------------------------------------------------------------------------
.text$di:00005A45                 align 4
.text$di:00005A45 _text$di        ends
.text$di:00005A45
.text$di:00005A48 ; ===========================================================================
.text$di:00005A48
.text$di:00005A48 ; Segment type: Pure code
.text$di:00005A48 ; Segment permissions: Read/Execute
.text$di:00005A48 _text$di        segment para public 'CODE' use32
.text$di:00005A48                 assume cs:_text$di
.text$di:00005A48                 ;org 5A48h
.text$di:00005A48 ; COMDAT (pick any)
.text$di:00005A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A48
.text$di:00005A48 ; =============== S U B R O U T I N E =======================================
.text$di:00005A48
.text$di:00005A48 ; Attributes: bp-based frame
.text$di:00005A48
.text$di:00005A48 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00005A48 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00005A48
.text$di:00005A48 var_1           = byte ptr -1
.text$di:00005A48
.text$di:00005A48                 push    ebp
.text$di:00005A49                 mov     ebp, esp
.text$di:00005A4B                 push    ecx
.text$di:00005A4C                 xor     eax, eax
.text$di:00005A4E                 mov     [ebp+var_1], al
.text$di:00005A51                 mov     esp, ebp
.text$di:00005A53                 pop     ebp
.text$di:00005A54                 retn
.text$di:00005A54 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00005A54
.text$di:00005A54 ; ---------------------------------------------------------------------------
.text$di:00005A55                 align 4
.text$di:00005A55 _text$di        ends
.text$di:00005A55
.text$di:00005A58 ; ===========================================================================
.text$di:00005A58
.text$di:00005A58 ; Segment type: Pure code
.text$di:00005A58 ; Segment permissions: Read/Execute
.text$di:00005A58 _text$di        segment para public 'CODE' use32
.text$di:00005A58                 assume cs:_text$di
.text$di:00005A58                 ;org 5A58h
.text$di:00005A58 ; COMDAT (pick any)
.text$di:00005A58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005A58
.text$di:00005A58 ; =============== S U B R O U T I N E =======================================
.text$di:00005A58
.text$di:00005A58 ; Attributes: bp-based frame
.text$di:00005A58
.text$di:00005A58 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00005A58 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00005A58                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00005A58
.text$di:00005A58 var_1           = byte ptr -1
.text$di:00005A58
.text$di:00005A58                 push    ebp
.text$di:00005A59                 mov     ebp, esp
.text$di:00005A5B                 push    ecx
.text$di:00005A5C                 xor     eax, eax
.text$di:00005A5E                 mov     [ebp+var_1], al
.text$di:00005A61                 mov     esp, ebp
.text$di:00005A63                 pop     ebp
.text$di:00005A64                 retn
.text$di:00005A64 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00005A64
.text$di:00005A64 ; ---------------------------------------------------------------------------
.text$di:00005A65                 align 4
.text$di:00005A65 _text$di        ends
.text$di:00005A65
.text$yd:00005A68 ; ===========================================================================
.text$yd:00005A68
.text$yd:00005A68 ; Segment type: Pure code
.text$yd:00005A68 ; Segment permissions: Read/Execute
.text$yd:00005A68 _text$yd        segment para public 'CODE' use32
.text$yd:00005A68                 assume cs:_text$yd
.text$yd:00005A68                 ;org 5A68h
.text$yd:00005A68 ; COMDAT (pick any)
.text$yd:00005A68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005A68
.text$yd:00005A68 ; =============== S U B R O U T I N E =======================================
.text$yd:00005A68
.text$yd:00005A68 ; Attributes: bp-based frame
.text$yd:00005A68
.text$yd:00005A68 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00005A68 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00005A68                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00005A68                 push    ebp
.text$yd:00005A69                 mov     ebp, esp
.text$yd:00005A6B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00005A70                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00005A75                 pop     ebp
.text$yd:00005A76                 retn
.text$yd:00005A76 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00005A76
.text$yd:00005A76 ; ---------------------------------------------------------------------------
.text$yd:00005A77                 align 4
.text$yd:00005A77 _text$yd        ends
.text$yd:00005A77
.text$yd:00005A78 ; ===========================================================================
.text$yd:00005A78
.text$yd:00005A78 ; Segment type: Pure code
.text$yd:00005A78 ; Segment permissions: Read/Execute
.text$yd:00005A78 _text$yd        segment para public 'CODE' use32
.text$yd:00005A78                 assume cs:_text$yd
.text$yd:00005A78                 ;org 5A78h
.text$yd:00005A78 ; COMDAT (pick any)
.text$yd:00005A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005A78
.text$yd:00005A78 ; =============== S U B R O U T I N E =======================================
.text$yd:00005A78
.text$yd:00005A78 ; Attributes: bp-based frame
.text$yd:00005A78
.text$yd:00005A78 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00005A78 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00005A78                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00005A78                 push    ebp
.text$yd:00005A79                 mov     ebp, esp
.text$yd:00005A7B                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00005A80                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00005A85                 pop     ebp
.text$yd:00005A86                 retn
.text$yd:00005A86 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00005A86
.text$yd:00005A86 ; ---------------------------------------------------------------------------
.text$yd:00005A87                 align 4
.text$yd:00005A87 _text$yd        ends
.text$yd:00005A87
.text$yd:00005A88 ; ===========================================================================
.text$yd:00005A88
.text$yd:00005A88 ; Segment type: Pure code
.text$yd:00005A88 ; Segment permissions: Read/Execute
.text$yd:00005A88 _text$yd        segment para public 'CODE' use32
.text$yd:00005A88                 assume cs:_text$yd
.text$yd:00005A88                 ;org 5A88h
.text$yd:00005A88 ; COMDAT (pick any)
.text$yd:00005A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00005A88
.text$yd:00005A88 ; =============== S U B R O U T I N E =======================================
.text$yd:00005A88
.text$yd:00005A88 ; Attributes: bp-based frame
.text$yd:00005A88
.text$yd:00005A88 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00005A88 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00005A88                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00005A88                 push    ebp
.text$yd:00005A89                 mov     ebp, esp
.text$yd:00005A8B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00005A90                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00005A95                 pop     ebp
.text$yd:00005A96                 retn
.text$yd:00005A96 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00005A96
.text$yd:00005A96 ; ---------------------------------------------------------------------------
.text$yd:00005A97                 align 4
.text$yd:00005A97 _text$yd        ends
.text$yd:00005A97
.text$mn:00005A98 ; ===========================================================================
.text$mn:00005A98
.text$mn:00005A98 ; Segment type: Pure code
.text$mn:00005A98 ; Segment permissions: Read/Execute
.text$mn:00005A98 _text$mn        segment para public 'CODE' use32
.text$mn:00005A98                 assume cs:_text$mn
.text$mn:00005A98                 ;org 5A98h
.text$mn:00005A98 ; COMDAT (pick any)
.text$mn:00005A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A98
.text$mn:00005A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A98
.text$mn:00005A98 ; Attributes: bp-based frame
.text$mn:00005A98
.text$mn:00005A98 ; void __thiscall TiXmlCursor::Clear(TiXmlCursor *__hidden this)
.text$mn:00005A98                 public ?Clear@TiXmlCursor@@QAEXXZ
.text$mn:00005A98 ?Clear@TiXmlCursor@@QAEXXZ proc near    ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+3Cp
.text$mn:00005A98                                         ; TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+69p ...
.text$mn:00005A98
.text$mn:00005A98 var_4           = dword ptr -4
.text$mn:00005A98
.text$mn:00005A98                 push    ebp
.text$mn:00005A99                 mov     ebp, esp
.text$mn:00005A9B                 push    ecx
.text$mn:00005A9C                 mov     [ebp+var_4], ecx
.text$mn:00005A9F                 mov     eax, [ebp+var_4]
.text$mn:00005AA2                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:00005AA9                 mov     ecx, [ebp+var_4]
.text$mn:00005AAC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:00005AB2                 mov     esp, ebp
.text$mn:00005AB4                 pop     ebp
.text$mn:00005AB5                 retn
.text$mn:00005AB5 ?Clear@TiXmlCursor@@QAEXXZ endp
.text$mn:00005AB5
.text$mn:00005AB5 ; ---------------------------------------------------------------------------
.text$mn:00005AB6                 align 4
.text$mn:00005AB6 _text$mn        ends
.text$mn:00005AB6
.text$mn:00005AB8 ; ===========================================================================
.text$mn:00005AB8
.text$mn:00005AB8 ; Segment type: Pure code
.text$mn:00005AB8 ; Segment permissions: Read/Execute
.text$mn:00005AB8 _text$mn        segment para public 'CODE' use32
.text$mn:00005AB8                 assume cs:_text$mn
.text$mn:00005AB8                 ;org 5AB8h
.text$mn:00005AB8 ; COMDAT (pick any)
.text$mn:00005AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AB8
.text$mn:00005AB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AB8
.text$mn:00005AB8 ; Attributes: bp-based frame
.text$mn:00005AB8
.text$mn:00005AB8 ; void __thiscall TiXmlDocument::ClearError(TiXmlDocument *__hidden this)
.text$mn:00005AB8                 public ?ClearError@TiXmlDocument@@QAEXXZ
.text$mn:00005AB8 ?ClearError@TiXmlDocument@@QAEXXZ proc near
.text$mn:00005AB8                                         ; CODE XREF: TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+Cp
.text$mn:00005AB8
.text$mn:00005AB8 var_4           = dword ptr -4
.text$mn:00005AB8
.text$mn:00005AB8                 push    ebp
.text$mn:00005AB9                 mov     ebp, esp
.text$mn:00005ABB                 push    ecx
.text$mn:00005ABC                 mov     [ebp+var_4], ecx
.text$mn:00005ABF                 mov     eax, [ebp+var_4]
.text$mn:00005AC2                 mov     byte ptr [eax+44h], 0
.text$mn:00005AC6                 mov     ecx, [ebp+var_4]
.text$mn:00005AC9                 mov     dword ptr [ecx+48h], 0
.text$mn:00005AD0                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005AD5                 mov     ecx, [ebp+var_4]
.text$mn:00005AD8                 add     ecx, 4Ch ; 'L'
.text$mn:00005ADB                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00005AE0                 mov     edx, [ebp+var_4]
.text$mn:00005AE3                 mov     dword ptr [edx+70h], 0
.text$mn:00005AEA                 mov     eax, [ebp+var_4]
.text$mn:00005AED                 mov     dword ptr [eax+6Ch], 0
.text$mn:00005AF4                 mov     esp, ebp
.text$mn:00005AF6                 pop     ebp
.text$mn:00005AF7                 retn
.text$mn:00005AF7 ?ClearError@TiXmlDocument@@QAEXXZ endp
.text$mn:00005AF7
.text$mn:00005AF7 _text$mn        ends
.text$mn:00005AF7
.text$mn:00005AF8 ; ===========================================================================
.text$mn:00005AF8
.text$mn:00005AF8 ; Segment type: Pure code
.text$mn:00005AF8 ; Segment permissions: Read/Execute
.text$mn:00005AF8 _text$mn        segment para public 'CODE' use32
.text$mn:00005AF8                 assume cs:_text$mn
.text$mn:00005AF8                 ;org 5AF8h
.text$mn:00005AF8 ; COMDAT (pick any)
.text$mn:00005AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AF8
.text$mn:00005AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AF8
.text$mn:00005AF8 ; Attributes: bp-based frame
.text$mn:00005AF8
.text$mn:00005AF8 ; const struct TiXmlCursor *__thiscall TiXmlParsingData::Cursor(TiXmlParsingData *__hidden this)
.text$mn:00005AF8                 public ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ
.text$mn:00005AF8 ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ proc near
.text$mn:00005AF8                                         ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+62p
.text$mn:00005AF8                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+88p ...
.text$mn:00005AF8
.text$mn:00005AF8 var_4           = dword ptr -4
.text$mn:00005AF8
.text$mn:00005AF8                 push    ebp
.text$mn:00005AF9                 mov     ebp, esp
.text$mn:00005AFB                 push    ecx
.text$mn:00005AFC                 mov     [ebp+var_4], ecx
.text$mn:00005AFF                 mov     eax, [ebp+var_4]
.text$mn:00005B02                 mov     esp, ebp
.text$mn:00005B04                 pop     ebp
.text$mn:00005B05                 retn
.text$mn:00005B05 ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ endp
.text$mn:00005B05
.text$mn:00005B05 ; ---------------------------------------------------------------------------
.text$mn:00005B06                 align 4
.text$mn:00005B06 _text$mn        ends
.text$mn:00005B06
.text$mn:00005B08 ; ===========================================================================
.text$mn:00005B08
.text$mn:00005B08 ; Segment type: Pure code
.text$mn:00005B08 ; Segment permissions: Read/Execute
.text$mn:00005B08 _text$mn        segment para public 'CODE' use32
.text$mn:00005B08                 assume cs:_text$mn
.text$mn:00005B08                 ;org 5B08h
.text$mn:00005B08 ; COMDAT (pick any)
.text$mn:00005B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B08
.text$mn:00005B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B08
.text$mn:00005B08 ; Attributes: bp-based frame
.text$mn:00005B08
.text$mn:00005B08 ; const wchar_t *__cdecl TiXmlBase::GetChar(const wchar_t *Str2, wchar_t *)
.text$mn:00005B08                 public ?GetChar@TiXmlBase@@KAPB_WPB_WPA_W@Z
.text$mn:00005B08 ?GetChar@TiXmlBase@@KAPB_WPB_WPA_W@Z proc near
.text$mn:00005B08                                         ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+5Ap
.text$mn:00005B08                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+129p
.text$mn:00005B08
.text$mn:00005B08 Str2            = dword ptr  8
.text$mn:00005B08 arg_4           = dword ptr  0Ch
.text$mn:00005B08
.text$mn:00005B08                 push    ebp
.text$mn:00005B09                 mov     ebp, esp
.text$mn:00005B0B                 cmp     [ebp+Str2], 0
.text$mn:00005B0F                 jnz     short loc_5B28
.text$mn:00005B11                 push    0D3h ; '+'      ; Line
.text$mn:00005B16                 push    offset ??_C@_1JC@JGEPGBEJ@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ ; "c:\\workspace\\notepad-plus-plus-6.7.9."...
.text$mn:00005B1B                 push    offset ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@ ; Message
.text$mn:00005B20                 call    __wassert
.text$mn:00005B25 ; ---------------------------------------------------------------------------
.text$mn:00005B25                 add     esp, 0Ch
.text$mn:00005B28
.text$mn:00005B28 loc_5B28:                               ; CODE XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+7j
.text$mn:00005B28                 mov     ecx, [ebp+Str2]
.text$mn:00005B2B                 movzx   edx, word ptr [ecx]
.text$mn:00005B2E                 cmp     edx, 26h ; '&'
.text$mn:00005B31                 jnz     short loc_5B47
.text$mn:00005B33                 mov     eax, [ebp+arg_4]
.text$mn:00005B36                 push    eax             ; wchar_t *
.text$mn:00005B37                 mov     ecx, [ebp+Str2]
.text$mn:00005B3A                 push    ecx             ; Str2
.text$mn:00005B3B                 call    ?GetEntity@TiXmlBase@@KAPB_WPB_WPA_W@Z ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)
.text$mn:00005B40                 add     esp, 8
.text$mn:00005B43                 jmp     short loc_5B59
.text$mn:00005B45 ; ---------------------------------------------------------------------------
.text$mn:00005B45                 jmp     short loc_5B59
.text$mn:00005B47 ; ---------------------------------------------------------------------------
.text$mn:00005B47
.text$mn:00005B47 loc_5B47:                               ; CODE XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+29j
.text$mn:00005B47                 mov     edx, [ebp+arg_4]
.text$mn:00005B4A                 mov     eax, [ebp+Str2]
.text$mn:00005B4D                 mov     cx, [eax]
.text$mn:00005B50                 mov     [edx], cx
.text$mn:00005B53                 mov     eax, [ebp+Str2]
.text$mn:00005B56                 add     eax, 2
.text$mn:00005B59
.text$mn:00005B59 loc_5B59:                               ; CODE XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+3Bj
.text$mn:00005B59                                         ; TiXmlBase::GetChar(wchar_t const *,wchar_t *)+3Dj
.text$mn:00005B59                 pop     ebp
.text$mn:00005B5A                 retn
.text$mn:00005B5A ?GetChar@TiXmlBase@@KAPB_WPB_WPA_W@Z endp
.text$mn:00005B5A
.text$mn:00005B5A ; ---------------------------------------------------------------------------
.text$mn:00005B5B                 align 4
.text$mn:00005B5B _text$mn        ends
.text$mn:00005B5B
.text$mn:00005B5C ; ===========================================================================
.text$mn:00005B5C
.text$mn:00005B5C ; Segment type: Pure code
.text$mn:00005B5C ; Segment permissions: Read/Execute
.text$mn:00005B5C _text$mn        segment para public 'CODE' use32
.text$mn:00005B5C                 assume cs:_text$mn
.text$mn:00005B5C                 ;org 5B5Ch
.text$mn:00005B5C ; COMDAT (pick any)
.text$mn:00005B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B5C
.text$mn:00005B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B5C
.text$mn:00005B5C ; Attributes: bp-based frame
.text$mn:00005B5C
.text$mn:00005B5C ; bool __cdecl TiXmlBase::IsWhiteSpace(int C)
.text$mn:00005B5C                 public ?IsWhiteSpace@TiXmlBase@@KA_NH@Z
.text$mn:00005B5C ?IsWhiteSpace@TiXmlBase@@KA_NH@Z proc near
.text$mn:00005B5C                                         ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+33p
.text$mn:00005B5C                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1F8p
.text$mn:00005B5C
.text$mn:00005B5C var_4           = dword ptr -4
.text$mn:00005B5C C               = dword ptr  8
.text$mn:00005B5C
.text$mn:00005B5C                 push    ebp
.text$mn:00005B5D                 mov     ebp, esp
.text$mn:00005B5F                 push    ecx
.text$mn:00005B60                 mov     eax, [ebp+C]
.text$mn:00005B63                 push    eax             ; C
.text$mn:00005B64                 call    _isspace
.text$mn:00005B69                 add     esp, 4
.text$mn:00005B6C                 test    eax, eax
.text$mn:00005B6E                 jnz     short loc_5B85
.text$mn:00005B70                 cmp     [ebp+C], 0Ah
.text$mn:00005B74                 jz      short loc_5B85
.text$mn:00005B76                 cmp     [ebp+C], 0Dh
.text$mn:00005B7A                 jz      short loc_5B85
.text$mn:00005B7C                 mov     [ebp+var_4], 0
.text$mn:00005B83                 jmp     short loc_5B8C
.text$mn:00005B85 ; ---------------------------------------------------------------------------
.text$mn:00005B85
.text$mn:00005B85 loc_5B85:                               ; CODE XREF: TiXmlBase::IsWhiteSpace(int)+12j
.text$mn:00005B85                                         ; TiXmlBase::IsWhiteSpace(int)+18j ...
.text$mn:00005B85                 mov     [ebp+var_4], 1
.text$mn:00005B8C
.text$mn:00005B8C loc_5B8C:                               ; CODE XREF: TiXmlBase::IsWhiteSpace(int)+27j
.text$mn:00005B8C                 mov     al, byte ptr [ebp+var_4]
.text$mn:00005B8F                 mov     esp, ebp
.text$mn:00005B91                 pop     ebp
.text$mn:00005B92                 retn
.text$mn:00005B92 ?IsWhiteSpace@TiXmlBase@@KA_NH@Z endp
.text$mn:00005B92
.text$mn:00005B92 ; ---------------------------------------------------------------------------
.text$mn:00005B93                 align 4
.text$mn:00005B93 _text$mn        ends
.text$mn:00005B93
.text$mn:00005B94 ; ===========================================================================
.text$mn:00005B94
.text$mn:00005B94 ; Segment type: Pure code
.text$mn:00005B94 ; Segment permissions: Read/Execute
.text$mn:00005B94 _text$mn        segment para public 'CODE' use32
.text$mn:00005B94                 assume cs:_text$mn
.text$mn:00005B94                 ;org 5B94h
.text$mn:00005B94 ; COMDAT (pick any)
.text$mn:00005B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B94
.text$mn:00005B94 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B94
.text$mn:00005B94 ; Attributes: bp-based frame
.text$mn:00005B94
.text$mn:00005B94 ; const wchar_t *__thiscall TiXmlAttribute::Name(TiXmlAttribute *__hidden this)
.text$mn:00005B94                 public ?Name@TiXmlAttribute@@QBEPB_WXZ
.text$mn:00005B94 ?Name@TiXmlAttribute@@QBEPB_WXZ proc near
.text$mn:00005B94                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+449p
.text$mn:00005B94
.text$mn:00005B94 var_4           = dword ptr -4
.text$mn:00005B94
.text$mn:00005B94                 push    ebp
.text$mn:00005B95                 mov     ebp, esp
.text$mn:00005B97                 push    ecx
.text$mn:00005B98                 mov     [ebp+var_4], ecx
.text$mn:00005B9B                 mov     ecx, [ebp+var_4]
.text$mn:00005B9E                 add     ecx, 10h
.text$mn:00005BA1                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00005BA6                 mov     esp, ebp
.text$mn:00005BA8                 pop     ebp
.text$mn:00005BA9                 retn
.text$mn:00005BA9 ?Name@TiXmlAttribute@@QBEPB_WXZ endp
.text$mn:00005BA9
.text$mn:00005BA9 ; ---------------------------------------------------------------------------
.text$mn:00005BAA                 align 4
.text$mn:00005BAA _text$mn        ends
.text$mn:00005BAA
.text$mn:00005BAC ; ===========================================================================
.text$mn:00005BAC
.text$mn:00005BAC ; Segment type: Pure code
.text$mn:00005BAC ; Segment permissions: Read/Execute
.text$mn:00005BAC _text$mn        segment para public 'CODE' use32
.text$mn:00005BAC                 assume cs:_text$mn
.text$mn:00005BAC                 ;org 5BACh
.text$mn:00005BAC ; COMDAT (pick any)
.text$mn:00005BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BAC
.text$mn:00005BAC ; =============== S U B R O U T I N E =======================================
.text$mn:00005BAC
.text$mn:00005BAC ; Attributes: bp-based frame
.text$mn:00005BAC
.text$mn:00005BAC ; void __thiscall TiXmlAttribute::SetDocument(TiXmlAttribute *this, struct TiXmlDocument *)
.text$mn:00005BAC                 public ?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z
.text$mn:00005BAC ?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z proc near
.text$mn:00005BAC                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+3B1p
.text$mn:00005BAC
.text$mn:00005BAC var_4           = dword ptr -4
.text$mn:00005BAC arg_0           = dword ptr  8
.text$mn:00005BAC
.text$mn:00005BAC                 push    ebp
.text$mn:00005BAD                 mov     ebp, esp
.text$mn:00005BAF                 push    ecx
.text$mn:00005BB0                 mov     [ebp+var_4], ecx
.text$mn:00005BB3                 mov     eax, [ebp+var_4]
.text$mn:00005BB6                 mov     ecx, [ebp+arg_0]
.text$mn:00005BB9                 mov     [eax+0Ch], ecx
.text$mn:00005BBC                 mov     esp, ebp
.text$mn:00005BBE                 pop     ebp
.text$mn:00005BBF                 retn    4
.text$mn:00005BBF ?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z endp
.text$mn:00005BBF
.text$mn:00005BBF ; ---------------------------------------------------------------------------
.text$mn:00005BC2                 align 4
.text$mn:00005BC2 _text$mn        ends
.text$mn:00005BC2
.text$mn:00005BC4 ; ===========================================================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Segment type: Pure code
.text$mn:00005BC4 ; Segment permissions: Read/Execute
.text$mn:00005BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BC4                 assume cs:_text$mn
.text$mn:00005BC4                 ;org 5BC4h
.text$mn:00005BC4 ; COMDAT (pick any)
.text$mn:00005BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BC4
.text$mn:00005BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Attributes: bp-based frame
.text$mn:00005BC4
.text$mn:00005BC4 ; void __thiscall TiXmlAttribute::SetValue(TiXmlAttribute *this, const wchar_t *)
.text$mn:00005BC4                 public ?SetValue@TiXmlAttribute@@QAEXPB_W@Z
.text$mn:00005BC4 ?SetValue@TiXmlAttribute@@QAEXPB_W@Z proc near
.text$mn:00005BC4                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+46Fp
.text$mn:00005BC4
.text$mn:00005BC4 var_4           = dword ptr -4
.text$mn:00005BC4 Str             = dword ptr  8
.text$mn:00005BC4
.text$mn:00005BC4                 push    ebp
.text$mn:00005BC5                 mov     ebp, esp
.text$mn:00005BC7                 push    ecx
.text$mn:00005BC8                 mov     [ebp+var_4], ecx
.text$mn:00005BCB                 mov     eax, [ebp+Str]
.text$mn:00005BCE                 push    eax             ; Str
.text$mn:00005BCF                 mov     ecx, [ebp+var_4]
.text$mn:00005BD2                 add     ecx, 2Ch ; ','
.text$mn:00005BD5                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00005BDA                 mov     esp, ebp
.text$mn:00005BDC                 pop     ebp
.text$mn:00005BDD                 retn    4
.text$mn:00005BDD ?SetValue@TiXmlAttribute@@QAEXPB_W@Z endp
.text$mn:00005BDD
.text$mn:00005BDD _text$mn        ends
.text$mn:00005BDD
.text$mn:00005BE0 ; ===========================================================================
.text$mn:00005BE0
.text$mn:00005BE0 ; Segment type: Pure code
.text$mn:00005BE0 ; Segment permissions: Read/Execute
.text$mn:00005BE0 _text$mn        segment para public 'CODE' use32
.text$mn:00005BE0                 assume cs:_text$mn
.text$mn:00005BE0                 ;org 5BE0h
.text$mn:00005BE0 ; COMDAT (pick any)
.text$mn:00005BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BE0
.text$mn:00005BE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BE0
.text$mn:00005BE0 ; Attributes: bp-based frame
.text$mn:00005BE0
.text$mn:00005BE0 ; void __thiscall TiXmlNode::SetValue(TiXmlNode *this, const wchar_t *)
.text$mn:00005BE0                 public ?SetValue@TiXmlNode@@QAEXPB_W@Z
.text$mn:00005BE0 ?SetValue@TiXmlNode@@QAEXPB_W@Z proc near
.text$mn:00005BE0                                         ; CODE XREF: TiXmlText::TiXmlText(wchar_t const *)+47p
.text$mn:00005BE0
.text$mn:00005BE0 var_4           = dword ptr -4
.text$mn:00005BE0 Str             = dword ptr  8
.text$mn:00005BE0
.text$mn:00005BE0                 push    ebp
.text$mn:00005BE1                 mov     ebp, esp
.text$mn:00005BE3                 push    ecx
.text$mn:00005BE4                 mov     [ebp+var_4], ecx
.text$mn:00005BE7                 mov     eax, [ebp+Str]
.text$mn:00005BEA                 push    eax             ; Str
.text$mn:00005BEB                 mov     ecx, [ebp+var_4]
.text$mn:00005BEE                 add     ecx, 1Ch
.text$mn:00005BF1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00005BF6                 mov     esp, ebp
.text$mn:00005BF8                 pop     ebp
.text$mn:00005BF9                 retn    4
.text$mn:00005BF9 ?SetValue@TiXmlNode@@QAEXPB_W@Z endp
.text$mn:00005BF9
.text$mn:00005BF9 _text$mn        ends
.text$mn:00005BF9
.text$mn:00005BFC ; ===========================================================================
.text$mn:00005BFC
.text$mn:00005BFC ; Segment type: Pure code
.text$mn:00005BFC ; Segment permissions: Read/Execute
.text$mn:00005BFC _text$mn        segment para public 'CODE' use32
.text$mn:00005BFC                 assume cs:_text$mn
.text$mn:00005BFC                 ;org 5BFCh
.text$mn:00005BFC ; COMDAT (pick any)
.text$mn:00005BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BFC
.text$mn:00005BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00005BFC
.text$mn:00005BFC ; Attributes: bp-based frame
.text$mn:00005BFC
.text$mn:00005BFC ; int __thiscall TiXmlDocument::TabSize(TiXmlDocument *__hidden this)
.text$mn:00005BFC                 public ?TabSize@TiXmlDocument@@QBEHXZ
.text$mn:00005BFC ?TabSize@TiXmlDocument@@QBEHXZ proc near
.text$mn:00005BFC                                         ; CODE XREF: TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)+45p
.text$mn:00005BFC                                         ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)+85p
.text$mn:00005BFC
.text$mn:00005BFC var_4           = dword ptr -4
.text$mn:00005BFC
.text$mn:00005BFC                 push    ebp
.text$mn:00005BFD                 mov     ebp, esp
.text$mn:00005BFF                 push    ecx
.text$mn:00005C00                 mov     [ebp+var_4], ecx
.text$mn:00005C03                 mov     eax, [ebp+var_4]
.text$mn:00005C06                 mov     eax, [eax+68h]
.text$mn:00005C09                 mov     esp, ebp
.text$mn:00005C0B                 pop     ebp
.text$mn:00005C0C                 retn
.text$mn:00005C0C ?TabSize@TiXmlDocument@@QBEHXZ endp
.text$mn:00005C0C
.text$mn:00005C0C ; ---------------------------------------------------------------------------
.text$mn:00005C0D                 align 10h
.text$mn:00005C0D _text$mn        ends
.text$mn:00005C0D
.text$mn:00005C10 ; ===========================================================================
.text$mn:00005C10
.text$mn:00005C10 ; Segment type: Pure code
.text$mn:00005C10 ; Segment permissions: Read/Execute
.text$mn:00005C10 _text$mn        segment para public 'CODE' use32
.text$mn:00005C10                 assume cs:_text$mn
.text$mn:00005C10                 ;org 5C10h
.text$mn:00005C10 ; COMDAT (pick any)
.text$mn:00005C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C10
.text$mn:00005C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C10
.text$mn:00005C10 ; Attributes: bp-based frame
.text$mn:00005C10
.text$mn:00005C10 ; struct TiXmlElement *__thiscall TiXmlNode::ToElement(TiXmlNode *__hidden this)
.text$mn:00005C10                 public ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:00005C10 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:00005C10                                         ; CODE XREF: TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+F4p
.text$mn:00005C10
.text$mn:00005C10 var_8           = dword ptr -8
.text$mn:00005C10 var_4           = dword ptr -4
.text$mn:00005C10
.text$mn:00005C10                 push    ebp
.text$mn:00005C11                 mov     ebp, esp
.text$mn:00005C13                 sub     esp, 8
.text$mn:00005C16                 mov     [ebp+var_4], ecx
.text$mn:00005C19                 cmp     [ebp+var_4], 0
.text$mn:00005C1D                 jz      short loc_5C30
.text$mn:00005C1F                 mov     eax, [ebp+var_4]
.text$mn:00005C22                 cmp     dword ptr [eax+10h], 1
.text$mn:00005C26                 jnz     short loc_5C30
.text$mn:00005C28                 mov     ecx, [ebp+var_4]
.text$mn:00005C2B                 mov     [ebp+var_8], ecx
.text$mn:00005C2E                 jmp     short loc_5C37
.text$mn:00005C30 ; ---------------------------------------------------------------------------
.text$mn:00005C30
.text$mn:00005C30 loc_5C30:                               ; CODE XREF: TiXmlNode::ToElement(void)+Dj
.text$mn:00005C30                                         ; TiXmlNode::ToElement(void)+16j
.text$mn:00005C30                 mov     [ebp+var_8], 0
.text$mn:00005C37
.text$mn:00005C37 loc_5C37:                               ; CODE XREF: TiXmlNode::ToElement(void)+1Ej
.text$mn:00005C37                 mov     eax, [ebp+var_8]
.text$mn:00005C3A                 mov     esp, ebp
.text$mn:00005C3C                 pop     ebp
.text$mn:00005C3D                 retn
.text$mn:00005C3D ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:00005C3D
.text$mn:00005C3D ; ---------------------------------------------------------------------------
.text$mn:00005C3E                 align 10h
.text$mn:00005C3E _text$mn        ends
.text$mn:00005C3E
.text$mn:00005C40 ; ===========================================================================
.text$mn:00005C40
.text$mn:00005C40 ; Segment type: Pure code
.text$mn:00005C40 ; Segment permissions: Read/Execute
.text$mn:00005C40 _text$mn        segment para public 'CODE' use32
.text$mn:00005C40                 assume cs:_text$mn
.text$mn:00005C40                 ;org 5C40h
.text$mn:00005C40 ; COMDAT (pick any)
.text$mn:00005C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C40
.text$mn:00005C40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C40
.text$mn:00005C40 ; Attributes: bp-based frame
.text$mn:00005C40
.text$mn:00005C40 ; int __thiscall TiXmlNode::Type(TiXmlNode *__hidden this)
.text$mn:00005C40                 public ?Type@TiXmlNode@@UBEHXZ
.text$mn:00005C40 ?Type@TiXmlNode@@UBEHXZ proc near       ; DATA XREF: .rdata:0000A45Co
.text$mn:00005C40                                         ; .rdata:0000A47Co ...
.text$mn:00005C40
.text$mn:00005C40 var_4           = dword ptr -4
.text$mn:00005C40
.text$mn:00005C40                 push    ebp
.text$mn:00005C41                 mov     ebp, esp
.text$mn:00005C43                 push    ecx
.text$mn:00005C44                 mov     [ebp+var_4], ecx
.text$mn:00005C47                 mov     eax, [ebp+var_4]
.text$mn:00005C4A                 mov     eax, [eax+10h]
.text$mn:00005C4D                 mov     esp, ebp
.text$mn:00005C4F                 pop     ebp
.text$mn:00005C50                 retn
.text$mn:00005C50 ?Type@TiXmlNode@@UBEHXZ endp
.text$mn:00005C50
.text$mn:00005C50 ; ---------------------------------------------------------------------------
.text$mn:00005C51                 align 4
.text$mn:00005C51 _text$mn        ends
.text$mn:00005C51
.text$mn:00005C54 ; ===========================================================================
.text$mn:00005C54
.text$mn:00005C54 ; Segment type: Pure code
.text$mn:00005C54 ; Segment permissions: Read/Execute
.text$mn:00005C54 _text$mn        segment para public 'CODE' use32
.text$mn:00005C54                 assume cs:_text$mn
.text$mn:00005C54                 ;org 5C54h
.text$mn:00005C54 ; COMDAT (pick any)
.text$mn:00005C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C54
.text$mn:00005C54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C54
.text$mn:00005C54 ; Attributes: bp-based frame
.text$mn:00005C54
.text$mn:00005C54 ; const wchar_t *__thiscall TiXmlAttribute::Value(TiXmlAttribute *__hidden this)
.text$mn:00005C54                 public ?Value@TiXmlAttribute@@QBEPB_WXZ
.text$mn:00005C54 ?Value@TiXmlAttribute@@QBEPB_WXZ proc near
.text$mn:00005C54                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+466p
.text$mn:00005C54                                         ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)+18Bp ...
.text$mn:00005C54
.text$mn:00005C54 var_4           = dword ptr -4
.text$mn:00005C54
.text$mn:00005C54                 push    ebp
.text$mn:00005C55                 mov     ebp, esp
.text$mn:00005C57                 push    ecx
.text$mn:00005C58                 mov     [ebp+var_4], ecx
.text$mn:00005C5B                 mov     ecx, [ebp+var_4]
.text$mn:00005C5E                 add     ecx, 2Ch ; ','
.text$mn:00005C61                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00005C66                 mov     esp, ebp
.text$mn:00005C68                 pop     ebp
.text$mn:00005C69                 retn
.text$mn:00005C69 ?Value@TiXmlAttribute@@QBEPB_WXZ endp
.text$mn:00005C69
.text$mn:00005C69 ; ---------------------------------------------------------------------------
.text$mn:00005C6A                 align 4
.text$mn:00005C6A _text$mn        ends
.text$mn:00005C6A
.text$mn:00005C6C ; ===========================================================================
.text$mn:00005C6C
.text$mn:00005C6C ; Segment type: Pure code
.text$mn:00005C6C ; Segment permissions: Read/Execute
.text$mn:00005C6C _text$mn        segment para public 'CODE' use32
.text$mn:00005C6C                 assume cs:_text$mn
.text$mn:00005C6C                 ;org 5C6Ch
.text$mn:00005C6C ; COMDAT (pick any)
.text$mn:00005C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C6C
.text$mn:00005C6C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C6C
.text$mn:00005C6C ; Attributes: bp-based frame
.text$mn:00005C6C
.text$mn:00005C6C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00005C6C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00005C6C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005C6C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:00005C6C
.text$mn:00005C6C var_10          = byte ptr -10h
.text$mn:00005C6C var_8           = dword ptr -8
.text$mn:00005C6C var_1           = byte ptr -1
.text$mn:00005C6C
.text$mn:00005C6C                 push    ebp
.text$mn:00005C6D                 mov     ebp, esp
.text$mn:00005C6F                 sub     esp, 10h
.text$mn:00005C72                 mov     [ebp+var_8], ecx
.text$mn:00005C75                 lea     ecx, [ebp+var_1]
.text$mn:00005C78                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005C7D                 push    1
.text$mn:00005C7F                 lea     ecx, [ebp+var_1]
.text$mn:00005C82                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005C87                 mov     ecx, [ebp+var_8]
.text$mn:00005C8A                 mov     [ecx], eax
.text$mn:00005C8C                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005C8F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005C94                 push    eax             ; int
.text$mn:00005C95                 mov     edx, [ebp+var_8]
.text$mn:00005C98                 mov     eax, [edx]
.text$mn:00005C9A                 push    eax             ; void *
.text$mn:00005C9B                 lea     ecx, [ebp+var_1]
.text$mn:00005C9E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005CA3                 mov     ecx, [ebp+var_8]
.text$mn:00005CA6                 mov     edx, [ecx]
.text$mn:00005CA8                 mov     eax, [ebp+var_8]
.text$mn:00005CAB                 mov     [edx], eax
.text$mn:00005CAD                 mov     esp, ebp
.text$mn:00005CAF                 pop     ebp
.text$mn:00005CB0                 retn
.text$mn:00005CB0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005CB0
.text$mn:00005CB0 ; ---------------------------------------------------------------------------
.text$mn:00005CB1                 align 4
.text$mn:00005CB1 _text$mn        ends
.text$mn:00005CB1
.text$mn:00005CB4 ; ===========================================================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Segment type: Pure code
.text$mn:00005CB4 ; Segment permissions: Read/Execute
.text$mn:00005CB4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CB4                 assume cs:_text$mn
.text$mn:00005CB4                 ;org 5CB4h
.text$mn:00005CB4 ; COMDAT (pick any)
.text$mn:00005CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CB4
.text$mn:00005CB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Attributes: bp-based frame
.text$mn:00005CB4
.text$mn:00005CB4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00005CB4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00005CB4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005CB4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00005CB4
.text$mn:00005CB4 var_10          = byte ptr -10h
.text$mn:00005CB4 var_8           = dword ptr -8
.text$mn:00005CB4 var_1           = byte ptr -1
.text$mn:00005CB4
.text$mn:00005CB4                 push    ebp
.text$mn:00005CB5                 mov     ebp, esp
.text$mn:00005CB7                 sub     esp, 10h
.text$mn:00005CBA                 mov     [ebp+var_8], ecx
.text$mn:00005CBD                 lea     ecx, [ebp+var_1]
.text$mn:00005CC0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005CC5                 push    1
.text$mn:00005CC7                 lea     ecx, [ebp+var_1]
.text$mn:00005CCA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005CCF                 mov     ecx, [ebp+var_8]
.text$mn:00005CD2                 mov     [ecx], eax
.text$mn:00005CD4                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005CD7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005CDC                 push    eax             ; int
.text$mn:00005CDD                 mov     edx, [ebp+var_8]
.text$mn:00005CE0                 mov     eax, [edx]
.text$mn:00005CE2                 push    eax             ; void *
.text$mn:00005CE3                 lea     ecx, [ebp+var_1]
.text$mn:00005CE6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005CEB                 mov     ecx, [ebp+var_8]
.text$mn:00005CEE                 mov     edx, [ecx]
.text$mn:00005CF0                 mov     eax, [ebp+var_8]
.text$mn:00005CF3                 mov     [edx], eax
.text$mn:00005CF5                 mov     esp, ebp
.text$mn:00005CF7                 pop     ebp
.text$mn:00005CF8                 retn
.text$mn:00005CF8 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005CF8
.text$mn:00005CF8 ; ---------------------------------------------------------------------------
.text$mn:00005CF9                 align 4
.text$mn:00005CF9 _text$mn        ends
.text$mn:00005CF9
.text$mn:00005CFC ; ===========================================================================
.text$mn:00005CFC
.text$mn:00005CFC ; Segment type: Pure code
.text$mn:00005CFC ; Segment permissions: Read/Execute
.text$mn:00005CFC _text$mn        segment para public 'CODE' use32
.text$mn:00005CFC                 assume cs:_text$mn
.text$mn:00005CFC                 ;org 5CFCh
.text$mn:00005CFC ; COMDAT (pick any)
.text$mn:00005CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CFC
.text$mn:00005CFC ; =============== S U B R O U T I N E =======================================
.text$mn:00005CFC
.text$mn:00005CFC ; Attributes: bp-based frame
.text$mn:00005CFC
.text$mn:00005CFC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Assign_rv(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00005CFC                 public ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
.text$mn:00005CFC ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00005CFC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+60p
.text$mn:00005CFC
.text$mn:00005CFC var_8           = dword ptr -8
.text$mn:00005CFC var_1           = byte ptr -1
.text$mn:00005CFC arg_0           = dword ptr  8
.text$mn:00005CFC
.text$mn:00005CFC                 push    ebp
.text$mn:00005CFD                 mov     ebp, esp
.text$mn:00005CFF                 sub     esp, 8
.text$mn:00005D02                 mov     [ebp+var_8], ecx
.text$mn:00005D05                 mov     eax, [ebp+arg_0]
.text$mn:00005D08                 cmp     dword ptr [eax+18h], 10h
.text$mn:00005D0C                 jnb     short loc_5D30
.text$mn:00005D0E                 mov     ecx, [ebp+arg_0]
.text$mn:00005D11                 mov     edx, [ecx+14h]
.text$mn:00005D14                 add     edx, 1
.text$mn:00005D17                 push    edx             ; Size
.text$mn:00005D18                 mov     eax, [ebp+arg_0]
.text$mn:00005D1B                 add     eax, 4
.text$mn:00005D1E                 push    eax             ; Src
.text$mn:00005D1F                 mov     ecx, [ebp+var_8]
.text$mn:00005D22                 add     ecx, 4
.text$mn:00005D25                 push    ecx             ; Dst
.text$mn:00005D26                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00005D2B                 add     esp, 0Ch
.text$mn:00005D2E                 jmp     short loc_5D5B
.text$mn:00005D30 ; ---------------------------------------------------------------------------
.text$mn:00005D30
.text$mn:00005D30 loc_5D30:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+10j
.text$mn:00005D30                 mov     edx, [ebp+arg_0]
.text$mn:00005D33                 add     edx, 4
.text$mn:00005D36                 push    edx             ; int
.text$mn:00005D37                 mov     eax, [ebp+var_8]
.text$mn:00005D3A                 add     eax, 4
.text$mn:00005D3D                 push    eax             ; void *
.text$mn:00005D3E                 lea     ecx, [ebp+var_1]
.text$mn:00005D41                 push    ecx
.text$mn:00005D42                 mov     ecx, [ebp+var_8]
.text$mn:00005D45                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005D4A                 mov     ecx, eax
.text$mn:00005D4C                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005D51                 mov     edx, [ebp+arg_0]
.text$mn:00005D54                 mov     dword ptr [edx+4], 0
.text$mn:00005D5B
.text$mn:00005D5B loc_5D5B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+32j
.text$mn:00005D5B                 mov     eax, [ebp+var_8]
.text$mn:00005D5E                 mov     ecx, [ebp+arg_0]
.text$mn:00005D61                 mov     edx, [ecx+14h]
.text$mn:00005D64                 mov     [eax+14h], edx
.text$mn:00005D67                 mov     eax, [ebp+var_8]
.text$mn:00005D6A                 mov     ecx, [ebp+arg_0]
.text$mn:00005D6D                 mov     edx, [ecx+18h]
.text$mn:00005D70                 mov     [eax+18h], edx
.text$mn:00005D73                 push    0               ; Size
.text$mn:00005D75                 push    0               ; char
.text$mn:00005D77                 mov     ecx, [ebp+arg_0]
.text$mn:00005D7A                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005D7F                 mov     esp, ebp
.text$mn:00005D81                 pop     ebp
.text$mn:00005D82                 retn    4
.text$mn:00005D82 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00005D82
.text$mn:00005D82 ; ---------------------------------------------------------------------------
.text$mn:00005D85                 align 4
.text$mn:00005D85 _text$mn        ends
.text$mn:00005D85
.text$mn:00005D88 ; ===========================================================================
.text$mn:00005D88
.text$mn:00005D88 ; Segment type: Pure code
.text$mn:00005D88 ; Segment permissions: Read/Execute
.text$mn:00005D88 _text$mn        segment para public 'CODE' use32
.text$mn:00005D88                 assume cs:_text$mn
.text$mn:00005D88                 ;org 5D88h
.text$mn:00005D88 ; COMDAT (pick any)
.text$mn:00005D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D88
.text$mn:00005D88 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D88
.text$mn:00005D88 ; Attributes: bp-based frame
.text$mn:00005D88
.text$mn:00005D88 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Chassign(unsigned int, unsigned int, wchar_t)
.text$mn:00005D88                 public ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z
.text$mn:00005D88 ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z proc near
.text$mn:00005D88                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+5Cp
.text$mn:00005D88
.text$mn:00005D88 var_4           = dword ptr -4
.text$mn:00005D88 arg_0           = dword ptr  8
.text$mn:00005D88 arg_4           = dword ptr  0Ch
.text$mn:00005D88 arg_8           = word ptr  10h
.text$mn:00005D88
.text$mn:00005D88                 push    ebp
.text$mn:00005D89                 mov     ebp, esp
.text$mn:00005D8B                 push    ecx
.text$mn:00005D8C                 mov     [ebp+var_4], ecx
.text$mn:00005D8F                 cmp     [ebp+arg_4], 1
.text$mn:00005D93                 jnz     short loc_5DB2
.text$mn:00005D95                 lea     eax, [ebp+arg_8]
.text$mn:00005D98                 push    eax
.text$mn:00005D99                 mov     ecx, [ebp+var_4]
.text$mn:00005D9C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005DA1                 mov     ecx, [ebp+arg_0]
.text$mn:00005DA4                 lea     edx, [eax+ecx*2]
.text$mn:00005DA7                 push    edx
.text$mn:00005DA8                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00005DAD                 add     esp, 8
.text$mn:00005DB0                 jmp     short loc_5DD2
.text$mn:00005DB2 ; ---------------------------------------------------------------------------
.text$mn:00005DB2
.text$mn:00005DB2 loc_5DB2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+Bj
.text$mn:00005DB2                 movzx   eax, [ebp+arg_8]
.text$mn:00005DB6                 push    eax
.text$mn:00005DB7                 mov     ecx, [ebp+arg_4]
.text$mn:00005DBA                 push    ecx
.text$mn:00005DBB                 mov     ecx, [ebp+var_4]
.text$mn:00005DBE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005DC3                 mov     edx, [ebp+arg_0]
.text$mn:00005DC6                 lea     eax, [eax+edx*2]
.text$mn:00005DC9                 push    eax
.text$mn:00005DCA                 call    ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ; std::char_traits<wchar_t>::assign(wchar_t *,uint,wchar_t)
.text$mn:00005DCF                 add     esp, 0Ch
.text$mn:00005DD2
.text$mn:00005DD2 loc_5DD2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+28j
.text$mn:00005DD2                 mov     esp, ebp
.text$mn:00005DD4                 pop     ebp
.text$mn:00005DD5                 retn    0Ch
.text$mn:00005DD5 ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z endp
.text$mn:00005DD5
.text$mn:00005DD5 _text$mn        ends
.text$mn:00005DD5
.text$mn:00005DD8 ; ===========================================================================
.text$mn:00005DD8
.text$mn:00005DD8 ; Segment type: Pure code
.text$mn:00005DD8 ; Segment permissions: Read/Execute
.text$mn:00005DD8 _text$mn        segment para public 'CODE' use32
.text$mn:00005DD8                 assume cs:_text$mn
.text$mn:00005DD8                 ;org 5DD8h
.text$mn:00005DD8 ; COMDAT (pick any)
.text$mn:00005DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DD8
.text$mn:00005DD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DD8
.text$mn:00005DD8 ; Attributes: bp-based frame
.text$mn:00005DD8
.text$mn:00005DD8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00005DD8                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005DD8 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00005DD8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00005DD8
.text$mn:00005DD8 var_20          = dword ptr -20h
.text$mn:00005DD8 var_1C          = dword ptr -1Ch
.text$mn:00005DD8 var_18          = dword ptr -18h
.text$mn:00005DD8 var_11          = byte ptr -11h
.text$mn:00005DD8 var_10          = dword ptr -10h
.text$mn:00005DD8 var_C           = byte ptr -0Ch
.text$mn:00005DD8 var_4           = dword ptr -4
.text$mn:00005DD8 arg_0           = dword ptr  8
.text$mn:00005DD8
.text$mn:00005DD8 ; FUNCTION CHUNK AT .text$mn:00005EFA SIZE 00000009 BYTES
.text$mn:00005DD8
.text$mn:00005DD8                 push    ebp
.text$mn:00005DD9                 mov     ebp, esp
.text$mn:00005DDB                 push    0FFFFFFFFh
.text$mn:00005DDD                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005DE2                 mov     eax, large fs:0
.text$mn:00005DE8                 push    eax
.text$mn:00005DE9                 push    ecx
.text$mn:00005DEA                 sub     esp, 10h
.text$mn:00005DED                 push    ebx
.text$mn:00005DEE                 push    esi
.text$mn:00005DEF                 push    edi
.text$mn:00005DF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005DF5                 xor     eax, ebp
.text$mn:00005DF7                 push    eax
.text$mn:00005DF8                 lea     eax, [ebp+var_C]
.text$mn:00005DFB                 mov     large fs:0, eax
.text$mn:00005E01                 mov     [ebp+var_10], esp
.text$mn:00005E04                 mov     [ebp+var_18], ecx
.text$mn:00005E07                 mov     eax, [ebp+arg_0]
.text$mn:00005E0A                 or      eax, 0Fh
.text$mn:00005E0D                 mov     [ebp+var_1C], eax
.text$mn:00005E10                 mov     ecx, [ebp+var_18]
.text$mn:00005E13                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005E18                 cmp     eax, [ebp+var_1C]
.text$mn:00005E1B                 jnb     short loc_5E25
.text$mn:00005E1D                 mov     ecx, [ebp+arg_0]
.text$mn:00005E20                 mov     [ebp+var_1C], ecx
.text$mn:00005E23                 jmp     short loc_5E77
.text$mn:00005E25 ; ---------------------------------------------------------------------------
.text$mn:00005E25
.text$mn:00005E25 loc_5E25:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00005E25                 mov     edx, [ebp+var_18]
.text$mn:00005E28                 mov     ecx, [edx+18h]
.text$mn:00005E2B                 shr     ecx, 1
.text$mn:00005E2D                 mov     eax, [ebp+var_1C]
.text$mn:00005E30                 xor     edx, edx
.text$mn:00005E32                 mov     esi, 3
.text$mn:00005E37                 div     esi
.text$mn:00005E39                 cmp     ecx, eax
.text$mn:00005E3B                 ja      short loc_5E3F
.text$mn:00005E3D                 jmp     short loc_5E77
.text$mn:00005E3F ; ---------------------------------------------------------------------------
.text$mn:00005E3F
.text$mn:00005E3F loc_5E3F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00005E3F                 mov     ecx, [ebp+var_18]
.text$mn:00005E42                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005E47                 mov     edx, [ebp+var_18]
.text$mn:00005E4A                 mov     ecx, [edx+18h]
.text$mn:00005E4D                 shr     ecx, 1
.text$mn:00005E4F                 sub     eax, ecx
.text$mn:00005E51                 mov     edx, [ebp+var_18]
.text$mn:00005E54                 cmp     [edx+18h], eax
.text$mn:00005E57                 ja      short loc_5E6C
.text$mn:00005E59                 mov     eax, [ebp+var_18]
.text$mn:00005E5C                 mov     ecx, [eax+18h]
.text$mn:00005E5F                 shr     ecx, 1
.text$mn:00005E61                 mov     edx, [ebp+var_18]
.text$mn:00005E64                 add     ecx, [edx+18h]
.text$mn:00005E67                 mov     [ebp+var_1C], ecx
.text$mn:00005E6A                 jmp     short loc_5E77
.text$mn:00005E6C ; ---------------------------------------------------------------------------
.text$mn:00005E6C
.text$mn:00005E6C loc_5E6C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00005E6C                 mov     ecx, [ebp+var_18]
.text$mn:00005E6F                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005E74                 mov     [ebp+var_1C], eax
.text$mn:00005E77
.text$mn:00005E77 loc_5E77:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00005E77                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00005E77                 mov     [ebp+var_4], 0
.text$mn:00005E7E                 mov     eax, [ebp+var_1C]
.text$mn:00005E81                 add     eax, 1
.text$mn:00005E84                 push    eax
.text$mn:00005E85                 lea     ecx, [ebp+var_11]
.text$mn:00005E88                 push    ecx
.text$mn:00005E89                 mov     ecx, [ebp+var_18]
.text$mn:00005E8C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005E91                 mov     ecx, eax
.text$mn:00005E93                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005E98                 mov     [ebp+var_20], eax
.text$mn:00005E9B                 jmp     short loc_5EFA
.text$mn:00005E9B ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00005E9B
.text$mn:00005E9D
.text$mn:00005E9D ; =============== S U B R O U T I N E =======================================
.text$mn:00005E9D
.text$mn:00005E9D
.text$mn:00005E9D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00005E9D                                         ; DATA XREF: .xdata$x:00009064o
.text$mn:00005E9D
.text$mn:00005E9D ; FUNCTION CHUNK AT .text$mn:00005EE4 SIZE 00000009 BYTES
.text$mn:00005E9D ; FUNCTION CHUNK AT .text$mn:00005EF4 SIZE 00000006 BYTES
.text$mn:00005E9D
.text$mn:00005E9D                 mov     [ebp-10h], esp
.text$mn:00005EA0                 mov     edx, [ebp+8]
.text$mn:00005EA3                 mov     [ebp-1Ch], edx
.text$mn:00005EA6                 mov     byte ptr [ebp-4], 2
.text$mn:00005EAA                 mov     eax, [ebp-1Ch]
.text$mn:00005EAD                 add     eax, 1
.text$mn:00005EB0                 push    eax
.text$mn:00005EB1                 lea     ecx, [ebp-12h]
.text$mn:00005EB4                 push    ecx
.text$mn:00005EB5                 mov     ecx, [ebp-18h]
.text$mn:00005EB8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005EBD                 mov     ecx, eax
.text$mn:00005EBF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005EC4                 mov     [ebp-20h], eax
.text$mn:00005EC7                 jmp     short loc_5EE4
.text$mn:00005EC7 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00005EC7
.text$mn:00005EC9
.text$mn:00005EC9 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EC9
.text$mn:00005EC9 ; Attributes: noreturn
.text$mn:00005EC9
.text$mn:00005EC9 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005EC9                                         ; DATA XREF: .xdata$x:00009074o
.text$mn:00005EC9                 push    0               ; Size
.text$mn:00005ECB                 push    1               ; char
.text$mn:00005ECD                 mov     ecx, [ebp-18h]
.text$mn:00005ED0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005ED5                 push    0
.text$mn:00005ED7                 push    0
.text$mn:00005ED9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005ED9 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00005ED9
.text$mn:00005EDE ; ---------------------------------------------------------------------------
.text$mn:00005EDE                 mov     eax, offset $LN17
.text$mn:00005EE3                 retn
.text$mn:00005EE4 ; ---------------------------------------------------------------------------
.text$mn:00005EE4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005EE4
.text$mn:00005EE4 loc_5EE4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005EE4                 mov     dword ptr [ebp-4], 1
.text$mn:00005EEB                 jmp     short loc_5EF4
.text$mn:00005EEB ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005EED
.text$mn:00005EED ; =============== S U B R O U T I N E =======================================
.text$mn:00005EED
.text$mn:00005EED
.text$mn:00005EED $LN17           proc near               ; DATA XREF: .text$mn:00005EDEo
.text$mn:00005EED                 mov     dword ptr [ebp-4], 1
.text$mn:00005EED $LN17           endp ; sp-analysis failed
.text$mn:00005EED
.text$mn:00005EF4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005EF4
.text$mn:00005EF4 loc_5EF4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005EF4                 mov     eax, offset $LN19
.text$mn:00005EF9                 retn
.text$mn:00005EF9 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005EFA ; ---------------------------------------------------------------------------
.text$mn:00005EFA ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005EFA
.text$mn:00005EFA loc_5EFA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00005EFA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F01                 jmp     short loc_5F0A
.text$mn:00005F01 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005F03
.text$mn:00005F03 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F03
.text$mn:00005F03
.text$mn:00005F03 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_5EF4o
.text$mn:00005F03                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005F0A
.text$mn:00005F0A loc_5F0A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00005F0A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00005F0E                 jbe     short loc_5F29
.text$mn:00005F10                 mov     edx, [ebp+0Ch]
.text$mn:00005F13                 push    edx             ; Size
.text$mn:00005F14                 mov     ecx, [ebp-18h]
.text$mn:00005F17                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005F1C                 push    eax             ; Src
.text$mn:00005F1D                 mov     eax, [ebp-20h]
.text$mn:00005F20                 push    eax             ; Dst
.text$mn:00005F21                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005F26                 add     esp, 0Ch
.text$mn:00005F29
.text$mn:00005F29 loc_5F29:                               ; CODE XREF: $LN19+Bj
.text$mn:00005F29                 push    0               ; Size
.text$mn:00005F2B                 push    1               ; char
.text$mn:00005F2D                 mov     ecx, [ebp-18h]
.text$mn:00005F30                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005F35                 lea     ecx, [ebp-20h]
.text$mn:00005F38                 push    ecx             ; int
.text$mn:00005F39                 mov     edx, [ebp-18h]
.text$mn:00005F3C                 add     edx, 4
.text$mn:00005F3F                 push    edx             ; void *
.text$mn:00005F40                 lea     eax, [ebp-13h]
.text$mn:00005F43                 push    eax
.text$mn:00005F44                 mov     ecx, [ebp-18h]
.text$mn:00005F47                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005F4C                 mov     ecx, eax
.text$mn:00005F4E                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005F53                 mov     ecx, [ebp-18h]
.text$mn:00005F56                 mov     edx, [ebp-1Ch]
.text$mn:00005F59                 mov     [ecx+18h], edx
.text$mn:00005F5C                 mov     eax, [ebp+0Ch]
.text$mn:00005F5F                 push    eax
.text$mn:00005F60                 mov     ecx, [ebp-18h]
.text$mn:00005F63                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005F68                 mov     ecx, [ebp-0Ch]
.text$mn:00005F6B                 mov     large fs:0, ecx
.text$mn:00005F72                 pop     ecx
.text$mn:00005F73                 pop     edi
.text$mn:00005F74                 pop     esi
.text$mn:00005F75                 pop     ebx
.text$mn:00005F76                 mov     esp, ebp
.text$mn:00005F78                 pop     ebp
.text$mn:00005F79                 retn    8
.text$mn:00005F79 $LN19           endp ; sp-analysis failed
.text$mn:00005F79
.text$mn:00005F79 _text$mn        ends
.text$mn:00005F79
.text$x:00005F7C ; ===========================================================================
.text$x:00005F7C
.text$x:00005F7C ; Segment type: Pure code
.text$x:00005F7C ; Segment permissions: Read/Execute
.text$x:00005F7C _text$x         segment para public 'CODE' use32
.text$x:00005F7C                 assume cs:_text$x
.text$x:00005F7C                 ;org 5F7Ch
.text$x:00005F7C ; COMDAT (pick associative to section at 5DD8)
.text$x:00005F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F7C
.text$x:00005F7C ; =============== S U B R O U T I N E =======================================
.text$x:00005F7C
.text$x:00005F7C
.text$x:00005F7C __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00005F7C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00005F7C
.text$x:00005F7C arg_4           = dword ptr  8
.text$x:00005F7C
.text$x:00005F7C                 mov     edx, [esp+arg_4]
.text$x:00005F80                 lea     eax, [edx+0Ch]
.text$x:00005F83                 mov     ecx, [edx-24h]
.text$x:00005F86                 xor     ecx, eax
.text$x:00005F88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F8D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00005F92                 jmp     ___CxxFrameHandler3
.text$x:00005F92 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00005F92
.text$x:00005F92 ; ---------------------------------------------------------------------------
.text$x:00005F97                 align 4
.text$x:00005F97 _text$x         ends
.text$x:00005F97
.text$mn:00005F98 ; ===========================================================================
.text$mn:00005F98
.text$mn:00005F98 ; Segment type: Pure code
.text$mn:00005F98 ; Segment permissions: Read/Execute
.text$mn:00005F98 _text$mn        segment para public 'CODE' use32
.text$mn:00005F98                 assume cs:_text$mn
.text$mn:00005F98                 ;org 5F98h
.text$mn:00005F98 ; COMDAT (pick any)
.text$mn:00005F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F98
.text$mn:00005F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F98
.text$mn:00005F98 ; Attributes: bp-based frame
.text$mn:00005F98
.text$mn:00005F98 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00005F98                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005F98 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00005F98                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00005F98
.text$mn:00005F98 var_20          = dword ptr -20h
.text$mn:00005F98 var_1C          = dword ptr -1Ch
.text$mn:00005F98 var_18          = dword ptr -18h
.text$mn:00005F98 var_11          = byte ptr -11h
.text$mn:00005F98 var_10          = dword ptr -10h
.text$mn:00005F98 var_C           = byte ptr -0Ch
.text$mn:00005F98 var_4           = dword ptr -4
.text$mn:00005F98 arg_0           = dword ptr  8
.text$mn:00005F98
.text$mn:00005F98 ; FUNCTION CHUNK AT .text$mn:000060BA SIZE 00000009 BYTES
.text$mn:00005F98
.text$mn:00005F98                 push    ebp
.text$mn:00005F99                 mov     ebp, esp
.text$mn:00005F9B                 push    0FFFFFFFFh
.text$mn:00005F9D                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005FA2                 mov     eax, large fs:0
.text$mn:00005FA8                 push    eax
.text$mn:00005FA9                 push    ecx
.text$mn:00005FAA                 sub     esp, 10h
.text$mn:00005FAD                 push    ebx
.text$mn:00005FAE                 push    esi
.text$mn:00005FAF                 push    edi
.text$mn:00005FB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FB5                 xor     eax, ebp
.text$mn:00005FB7                 push    eax
.text$mn:00005FB8                 lea     eax, [ebp+var_C]
.text$mn:00005FBB                 mov     large fs:0, eax
.text$mn:00005FC1                 mov     [ebp+var_10], esp
.text$mn:00005FC4                 mov     [ebp+var_18], ecx
.text$mn:00005FC7                 mov     eax, [ebp+arg_0]
.text$mn:00005FCA                 or      eax, 7
.text$mn:00005FCD                 mov     [ebp+var_1C], eax
.text$mn:00005FD0                 mov     ecx, [ebp+var_18]
.text$mn:00005FD3                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005FD8                 cmp     eax, [ebp+var_1C]
.text$mn:00005FDB                 jnb     short loc_5FE5
.text$mn:00005FDD                 mov     ecx, [ebp+arg_0]
.text$mn:00005FE0                 mov     [ebp+var_1C], ecx
.text$mn:00005FE3                 jmp     short loc_6037
.text$mn:00005FE5 ; ---------------------------------------------------------------------------
.text$mn:00005FE5
.text$mn:00005FE5 loc_5FE5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00005FE5                 mov     edx, [ebp+var_18]
.text$mn:00005FE8                 mov     ecx, [edx+18h]
.text$mn:00005FEB                 shr     ecx, 1
.text$mn:00005FED                 mov     eax, [ebp+var_1C]
.text$mn:00005FF0                 xor     edx, edx
.text$mn:00005FF2                 mov     esi, 3
.text$mn:00005FF7                 div     esi
.text$mn:00005FF9                 cmp     ecx, eax
.text$mn:00005FFB                 ja      short loc_5FFF
.text$mn:00005FFD                 jmp     short loc_6037
.text$mn:00005FFF ; ---------------------------------------------------------------------------
.text$mn:00005FFF
.text$mn:00005FFF loc_5FFF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00005FFF                 mov     ecx, [ebp+var_18]
.text$mn:00006002                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00006007                 mov     edx, [ebp+var_18]
.text$mn:0000600A                 mov     ecx, [edx+18h]
.text$mn:0000600D                 shr     ecx, 1
.text$mn:0000600F                 sub     eax, ecx
.text$mn:00006011                 mov     edx, [ebp+var_18]
.text$mn:00006014                 cmp     [edx+18h], eax
.text$mn:00006017                 ja      short loc_602C
.text$mn:00006019                 mov     eax, [ebp+var_18]
.text$mn:0000601C                 mov     ecx, [eax+18h]
.text$mn:0000601F                 shr     ecx, 1
.text$mn:00006021                 mov     edx, [ebp+var_18]
.text$mn:00006024                 add     ecx, [edx+18h]
.text$mn:00006027                 mov     [ebp+var_1C], ecx
.text$mn:0000602A                 jmp     short loc_6037
.text$mn:0000602C ; ---------------------------------------------------------------------------
.text$mn:0000602C
.text$mn:0000602C loc_602C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:0000602C                 mov     ecx, [ebp+var_18]
.text$mn:0000602F                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00006034                 mov     [ebp+var_1C], eax
.text$mn:00006037
.text$mn:00006037 loc_6037:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:00006037                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:00006037                 mov     [ebp+var_4], 0
.text$mn:0000603E                 mov     eax, [ebp+var_1C]
.text$mn:00006041                 add     eax, 1
.text$mn:00006044                 push    eax
.text$mn:00006045                 lea     ecx, [ebp+var_11]
.text$mn:00006048                 push    ecx
.text$mn:00006049                 mov     ecx, [ebp+var_18]
.text$mn:0000604C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006051                 mov     ecx, eax
.text$mn:00006053                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00006058                 mov     [ebp+var_20], eax
.text$mn:0000605B                 jmp     short loc_60BA
.text$mn:0000605B ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:0000605B
.text$mn:0000605D
.text$mn:0000605D ; =============== S U B R O U T I N E =======================================
.text$mn:0000605D
.text$mn:0000605D
.text$mn:0000605D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000605D                                         ; DATA XREF: .xdata$x:00009A74o
.text$mn:0000605D
.text$mn:0000605D ; FUNCTION CHUNK AT .text$mn:000060A4 SIZE 00000009 BYTES
.text$mn:0000605D ; FUNCTION CHUNK AT .text$mn:000060B4 SIZE 00000006 BYTES
.text$mn:0000605D
.text$mn:0000605D                 mov     [ebp-10h], esp
.text$mn:00006060                 mov     edx, [ebp+8]
.text$mn:00006063                 mov     [ebp-1Ch], edx
.text$mn:00006066                 mov     byte ptr [ebp-4], 2
.text$mn:0000606A                 mov     eax, [ebp-1Ch]
.text$mn:0000606D                 add     eax, 1
.text$mn:00006070                 push    eax
.text$mn:00006071                 lea     ecx, [ebp-12h]
.text$mn:00006074                 push    ecx
.text$mn:00006075                 mov     ecx, [ebp-18h]
.text$mn:00006078                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000607D                 mov     ecx, eax
.text$mn:0000607F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00006084                 mov     [ebp-20h], eax
.text$mn:00006087                 jmp     short loc_60A4
.text$mn:00006087 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00006087
.text$mn:00006089
.text$mn:00006089 ; =============== S U B R O U T I N E =======================================
.text$mn:00006089
.text$mn:00006089 ; Attributes: noreturn
.text$mn:00006089
.text$mn:00006089 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00006089                                         ; DATA XREF: .xdata$x:00009A84o
.text$mn:00006089                 push    0
.text$mn:0000608B                 push    1
.text$mn:0000608D                 mov     ecx, [ebp-18h]
.text$mn:00006090                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006095                 push    0
.text$mn:00006097                 push    0
.text$mn:00006099                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006099 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00006099
.text$mn:0000609E ; ---------------------------------------------------------------------------
.text$mn:0000609E                 mov     eax, offset $LN17_0
.text$mn:000060A3                 retn
.text$mn:000060A4 ; ---------------------------------------------------------------------------
.text$mn:000060A4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000060A4
.text$mn:000060A4 loc_60A4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000060A4                 mov     dword ptr [ebp-4], 1
.text$mn:000060AB                 jmp     short loc_60B4
.text$mn:000060AB ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000060AD
.text$mn:000060AD ; =============== S U B R O U T I N E =======================================
.text$mn:000060AD
.text$mn:000060AD
.text$mn:000060AD $LN17_0         proc near               ; DATA XREF: .text$mn:0000609Eo
.text$mn:000060AD                 mov     dword ptr [ebp-4], 1
.text$mn:000060AD $LN17_0         endp ; sp-analysis failed
.text$mn:000060AD
.text$mn:000060B4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000060B4
.text$mn:000060B4 loc_60B4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000060B4                 mov     eax, offset $LN19_0
.text$mn:000060B9                 retn
.text$mn:000060B9 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000060BA ; ---------------------------------------------------------------------------
.text$mn:000060BA ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000060BA
.text$mn:000060BA loc_60BA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:000060BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060C1                 jmp     short loc_60CA
.text$mn:000060C1 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000060C3
.text$mn:000060C3 ; =============== S U B R O U T I N E =======================================
.text$mn:000060C3
.text$mn:000060C3
.text$mn:000060C3 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_60B4o
.text$mn:000060C3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000060CA
.text$mn:000060CA loc_60CA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:000060CA                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000060CE                 jbe     short loc_60E9
.text$mn:000060D0                 mov     edx, [ebp+0Ch]
.text$mn:000060D3                 push    edx             ; int
.text$mn:000060D4                 mov     ecx, [ebp-18h]
.text$mn:000060D7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000060DC                 push    eax             ; Src
.text$mn:000060DD                 mov     eax, [ebp-20h]
.text$mn:000060E0                 push    eax             ; Dst
.text$mn:000060E1                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000060E6                 add     esp, 0Ch
.text$mn:000060E9
.text$mn:000060E9 loc_60E9:                               ; CODE XREF: $LN19_0+Bj
.text$mn:000060E9                 push    0
.text$mn:000060EB                 push    1
.text$mn:000060ED                 mov     ecx, [ebp-18h]
.text$mn:000060F0                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000060F5                 lea     ecx, [ebp-20h]
.text$mn:000060F8                 push    ecx             ; int
.text$mn:000060F9                 mov     edx, [ebp-18h]
.text$mn:000060FC                 add     edx, 4
.text$mn:000060FF                 push    edx             ; void *
.text$mn:00006100                 lea     eax, [ebp-13h]
.text$mn:00006103                 push    eax
.text$mn:00006104                 mov     ecx, [ebp-18h]
.text$mn:00006107                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000610C                 mov     ecx, eax
.text$mn:0000610E                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00006113                 mov     ecx, [ebp-18h]
.text$mn:00006116                 mov     edx, [ebp-1Ch]
.text$mn:00006119                 mov     [ecx+18h], edx
.text$mn:0000611C                 mov     eax, [ebp+0Ch]
.text$mn:0000611F                 push    eax
.text$mn:00006120                 mov     ecx, [ebp-18h]
.text$mn:00006123                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006128                 mov     ecx, [ebp-0Ch]
.text$mn:0000612B                 mov     large fs:0, ecx
.text$mn:00006132                 pop     ecx
.text$mn:00006133                 pop     edi
.text$mn:00006134                 pop     esi
.text$mn:00006135                 pop     ebx
.text$mn:00006136                 mov     esp, ebp
.text$mn:00006138                 pop     ebp
.text$mn:00006139                 retn    8
.text$mn:00006139 $LN19_0         endp ; sp-analysis failed
.text$mn:00006139
.text$mn:00006139 _text$mn        ends
.text$mn:00006139
.text$x:0000613C ; ===========================================================================
.text$x:0000613C
.text$x:0000613C ; Segment type: Pure code
.text$x:0000613C ; Segment permissions: Read/Execute
.text$x:0000613C _text$x         segment para public 'CODE' use32
.text$x:0000613C                 assume cs:_text$x
.text$x:0000613C                 ;org 613Ch
.text$x:0000613C ; COMDAT (pick associative to section at 5F98)
.text$x:0000613C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000613C
.text$x:0000613C ; =============== S U B R O U T I N E =======================================
.text$x:0000613C
.text$x:0000613C
.text$x:0000613C __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:0000613C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:0000613C
.text$x:0000613C arg_4           = dword ptr  8
.text$x:0000613C
.text$x:0000613C                 mov     edx, [esp+arg_4]
.text$x:00006140                 lea     eax, [edx+0Ch]
.text$x:00006143                 mov     ecx, [edx-24h]
.text$x:00006146                 xor     ecx, eax
.text$x:00006148                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000614D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00006152                 jmp     ___CxxFrameHandler3
.text$x:00006152 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00006152
.text$x:00006152 ; ---------------------------------------------------------------------------
.text$x:00006157                 align 4
.text$x:00006157 _text$x         ends
.text$x:00006157
.text$mn:00006158 ; ===========================================================================
.text$mn:00006158
.text$mn:00006158 ; Segment type: Pure code
.text$mn:00006158 ; Segment permissions: Read/Execute
.text$mn:00006158 _text$mn        segment para public 'CODE' use32
.text$mn:00006158                 assume cs:_text$mn
.text$mn:00006158                 ;org 6158h
.text$mn:00006158 ; COMDAT (pick any)
.text$mn:00006158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006158
.text$mn:00006158 ; =============== S U B R O U T I N E =======================================
.text$mn:00006158
.text$mn:00006158 ; Attributes: bp-based frame
.text$mn:00006158
.text$mn:00006158 ; struct std::_Facet_base *__thiscall std::locale::facet::_Decref(std::locale::facet *__hidden this)
.text$mn:00006158                 public ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
.text$mn:00006158 ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ proc near
.text$mn:00006158                                         ; DATA XREF: .rdata:0000A038o
.text$mn:00006158                                         ; .rdata:0000A124o ...
.text$mn:00006158
.text$mn:00006158 var_4           = dword ptr -4
.text$mn:00006158
.text$mn:00006158                 push    ebp
.text$mn:00006159                 mov     ebp, esp
.text$mn:0000615B                 push    ecx
.text$mn:0000615C                 mov     [ebp+var_4], ecx
.text$mn:0000615F                 mov     eax, [ebp+var_4]
.text$mn:00006162                 add     eax, 4
.text$mn:00006165                 or      ecx, 0FFFFFFFFh
.text$mn:00006168                 lock xadd [eax], ecx
.text$mn:0000616C                 dec     ecx
.text$mn:0000616D                 jnz     short loc_6176
.text$mn:0000616F                 mov     eax, [ebp+var_4]
.text$mn:00006172                 jmp     short loc_6178
.text$mn:00006174 ; ---------------------------------------------------------------------------
.text$mn:00006174                 jmp     short loc_6178
.text$mn:00006176 ; ---------------------------------------------------------------------------
.text$mn:00006176
.text$mn:00006176 loc_6176:                               ; CODE XREF: std::locale::facet::_Decref(void)+15j
.text$mn:00006176                 xor     eax, eax
.text$mn:00006178
.text$mn:00006178 loc_6178:                               ; CODE XREF: std::locale::facet::_Decref(void)+1Aj
.text$mn:00006178                                         ; std::locale::facet::_Decref(void)+1Cj
.text$mn:00006178                 mov     esp, ebp
.text$mn:0000617A                 pop     ebp
.text$mn:0000617B                 retn
.text$mn:0000617B ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ endp
.text$mn:0000617B
.text$mn:0000617B _text$mn        ends
.text$mn:0000617B
.text$mn:0000617C ; ===========================================================================
.text$mn:0000617C
.text$mn:0000617C ; Segment type: Pure code
.text$mn:0000617C ; Segment permissions: Read/Execute
.text$mn:0000617C _text$mn        segment para public 'CODE' use32
.text$mn:0000617C                 assume cs:_text$mn
.text$mn:0000617C                 ;org 617Ch
.text$mn:0000617C ; COMDAT (pick any)
.text$mn:0000617C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000617C
.text$mn:0000617C ; =============== S U B R O U T I N E =======================================
.text$mn:0000617C
.text$mn:0000617C ; Attributes: bp-based frame
.text$mn:0000617C
.text$mn:0000617C ; protected: char __thiscall std::ctype<wchar_t>::_Donarrow(wchar_t, char)const
.text$mn:0000617C                 public ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z
.text$mn:0000617C ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z proc near
.text$mn:0000617C                                         ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t,char)+14p
.text$mn:0000617C                                         ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+62p
.text$mn:0000617C
.text$mn:0000617C var_18          = dword ptr -18h
.text$mn:0000617C var_14          = dword ptr -14h
.text$mn:0000617C var_D           = byte ptr -0Dh
.text$mn:0000617C var_C           = byte ptr -0Ch
.text$mn:0000617C var_4           = dword ptr -4
.text$mn:0000617C arg_0           = word ptr  8
.text$mn:0000617C arg_4           = byte ptr  0Ch
.text$mn:0000617C
.text$mn:0000617C                 push    ebp
.text$mn:0000617D                 mov     ebp, esp
.text$mn:0000617F                 sub     esp, 18h
.text$mn:00006182                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006187                 xor     eax, ebp
.text$mn:00006189                 mov     [ebp+var_4], eax
.text$mn:0000618C                 mov     [ebp+var_14], ecx
.text$mn:0000618F                 mov     [ebp+var_18], 0
.text$mn:00006196                 mov     eax, [ebp+var_14]
.text$mn:00006199                 add     eax, 18h
.text$mn:0000619C                 push    eax
.text$mn:0000619D                 lea     ecx, [ebp+var_18]
.text$mn:000061A0                 push    ecx
.text$mn:000061A1                 movzx   edx, [ebp+arg_0]
.text$mn:000061A5                 push    edx
.text$mn:000061A6                 lea     eax, [ebp+var_C]
.text$mn:000061A9                 push    eax
.text$mn:000061AA                 call    __Wcrtomb
.text$mn:000061AF                 add     esp, 10h
.text$mn:000061B2                 cmp     eax, 1
.text$mn:000061B5                 jz      short loc_61BF
.text$mn:000061B7                 mov     cl, [ebp+arg_4]
.text$mn:000061BA                 mov     [ebp+var_D], cl
.text$mn:000061BD                 jmp     short loc_61CE
.text$mn:000061BF ; ---------------------------------------------------------------------------
.text$mn:000061BF
.text$mn:000061BF loc_61BF:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+39j
.text$mn:000061BF                 mov     edx, 1
.text$mn:000061C4                 imul    eax, edx, 0
.text$mn:000061C7                 mov     cl, [ebp+eax+var_C]
.text$mn:000061CB                 mov     [ebp+var_D], cl
.text$mn:000061CE
.text$mn:000061CE loc_61CE:                               ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+41j
.text$mn:000061CE                 mov     al, [ebp+var_D]
.text$mn:000061D1                 mov     ecx, [ebp+var_4]
.text$mn:000061D4                 xor     ecx, ebp
.text$mn:000061D6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000061DB                 mov     esp, ebp
.text$mn:000061DD                 pop     ebp
.text$mn:000061DE                 retn    8
.text$mn:000061DE ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z endp
.text$mn:000061DE
.text$mn:000061DE ; ---------------------------------------------------------------------------
.text$mn:000061E1                 align 4
.text$mn:000061E1 _text$mn        ends
.text$mn:000061E1
.text$mn:000061E4 ; ===========================================================================
.text$mn:000061E4
.text$mn:000061E4 ; Segment type: Pure code
.text$mn:000061E4 ; Segment permissions: Read/Execute
.text$mn:000061E4 _text$mn        segment para public 'CODE' use32
.text$mn:000061E4                 assume cs:_text$mn
.text$mn:000061E4                 ;org 61E4h
.text$mn:000061E4 ; COMDAT (pick any)
.text$mn:000061E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061E4
.text$mn:000061E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061E4
.text$mn:000061E4 ; Attributes: bp-based frame
.text$mn:000061E4
.text$mn:000061E4 ; protected: wchar_t __thiscall std::ctype<wchar_t>::_Dowiden(char)const
.text$mn:000061E4                 public ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z
.text$mn:000061E4 ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z proc near
.text$mn:000061E4                                         ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+5Dp
.text$mn:000061E4                                         ; std::ctype<wchar_t>::do_widen(char)+Fp
.text$mn:000061E4
.text$mn:000061E4 var_10          = dword ptr -10h
.text$mn:000061E4 var_C           = dword ptr -0Ch
.text$mn:000061E4 var_8           = word ptr -8
.text$mn:000061E4 var_2           = word ptr -2
.text$mn:000061E4 arg_0           = byte ptr  8
.text$mn:000061E4
.text$mn:000061E4                 push    ebp
.text$mn:000061E5                 mov     ebp, esp
.text$mn:000061E7                 sub     esp, 10h
.text$mn:000061EA                 mov     [ebp+var_C], ecx
.text$mn:000061ED                 mov     [ebp+var_10], 0
.text$mn:000061F4                 mov     eax, [ebp+var_C]
.text$mn:000061F7                 add     eax, 18h
.text$mn:000061FA                 push    eax
.text$mn:000061FB                 lea     ecx, [ebp+var_10]
.text$mn:000061FE                 push    ecx
.text$mn:000061FF                 push    1
.text$mn:00006201                 lea     edx, [ebp+arg_0]
.text$mn:00006204                 push    edx
.text$mn:00006205                 lea     eax, [ebp+var_8]
.text$mn:00006208                 push    eax
.text$mn:00006209                 call    __Mbrtowc
.text$mn:0000620E                 add     esp, 14h
.text$mn:00006211                 test    eax, eax
.text$mn:00006213                 jge     short loc_6220
.text$mn:00006215                 mov     ecx, 0FFFFh
.text$mn:0000621A                 mov     [ebp+var_2], cx
.text$mn:0000621E                 jmp     short loc_6228
.text$mn:00006220 ; ---------------------------------------------------------------------------
.text$mn:00006220
.text$mn:00006220 loc_6220:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+2Fj
.text$mn:00006220                 mov     dx, [ebp+var_8]
.text$mn:00006224                 mov     [ebp+var_2], dx
.text$mn:00006228
.text$mn:00006228 loc_6228:                               ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+3Aj
.text$mn:00006228                 mov     ax, [ebp+var_2]
.text$mn:0000622C                 mov     esp, ebp
.text$mn:0000622E                 pop     ebp
.text$mn:0000622F                 retn    4
.text$mn:0000622F ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z endp
.text$mn:0000622F
.text$mn:0000622F ; ---------------------------------------------------------------------------
.text$mn:00006232                 align 4
.text$mn:00006232 _text$mn        ends
.text$mn:00006232
.text$mn:00006234 ; ===========================================================================
.text$mn:00006234
.text$mn:00006234 ; Segment type: Pure code
.text$mn:00006234 ; Segment permissions: Read/Execute
.text$mn:00006234 _text$mn        segment para public 'CODE' use32
.text$mn:00006234                 assume cs:_text$mn
.text$mn:00006234                 ;org 6234h
.text$mn:00006234 ; COMDAT (pick any)
.text$mn:00006234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006234
.text$mn:00006234 ; =============== S U B R O U T I N E =======================================
.text$mn:00006234
.text$mn:00006234 ; Attributes: bp-based frame
.text$mn:00006234
.text$mn:00006234 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00006234                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00006234 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00006234                                         ; CODE XREF: $LN19+60p
.text$mn:00006234                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00006234
.text$mn:00006234 var_8           = dword ptr -8
.text$mn:00006234 var_1           = byte ptr -1
.text$mn:00006234 arg_0           = dword ptr  8
.text$mn:00006234
.text$mn:00006234                 push    ebp
.text$mn:00006235                 mov     ebp, esp
.text$mn:00006237                 sub     esp, 8
.text$mn:0000623A                 mov     [ebp+var_8], ecx
.text$mn:0000623D                 mov     [ebp+var_1], 0
.text$mn:00006241                 mov     eax, [ebp+var_8]
.text$mn:00006244                 mov     ecx, [ebp+arg_0]
.text$mn:00006247                 mov     [eax+14h], ecx
.text$mn:0000624A                 lea     edx, [ebp+var_1]
.text$mn:0000624D                 push    edx
.text$mn:0000624E                 mov     ecx, [ebp+var_8]
.text$mn:00006251                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00006256                 add     eax, [ebp+arg_0]
.text$mn:00006259                 push    eax
.text$mn:0000625A                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:0000625F                 add     esp, 8
.text$mn:00006262                 mov     esp, ebp
.text$mn:00006264                 pop     ebp
.text$mn:00006265                 retn    4
.text$mn:00006265 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00006265
.text$mn:00006265 _text$mn        ends
.text$mn:00006265
.text$mn:00006268 ; ===========================================================================
.text$mn:00006268
.text$mn:00006268 ; Segment type: Pure code
.text$mn:00006268 ; Segment permissions: Read/Execute
.text$mn:00006268 _text$mn        segment para public 'CODE' use32
.text$mn:00006268                 assume cs:_text$mn
.text$mn:00006268                 ;org 6268h
.text$mn:00006268 ; COMDAT (pick any)
.text$mn:00006268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006268
.text$mn:00006268 ; =============== S U B R O U T I N E =======================================
.text$mn:00006268
.text$mn:00006268 ; Attributes: bp-based frame
.text$mn:00006268
.text$mn:00006268 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:00006268                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:00006268 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:00006268                                         ; CODE XREF: $LN19_0+60p
.text$mn:00006268                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:00006268
.text$mn:00006268 var_8           = dword ptr -8
.text$mn:00006268 var_2           = word ptr -2
.text$mn:00006268 arg_0           = dword ptr  8
.text$mn:00006268
.text$mn:00006268                 push    ebp
.text$mn:00006269                 mov     ebp, esp
.text$mn:0000626B                 sub     esp, 8
.text$mn:0000626E                 mov     [ebp+var_8], ecx
.text$mn:00006271                 xor     eax, eax
.text$mn:00006273                 mov     [ebp+var_2], ax
.text$mn:00006277                 mov     ecx, [ebp+var_8]
.text$mn:0000627A                 mov     edx, [ebp+arg_0]
.text$mn:0000627D                 mov     [ecx+14h], edx
.text$mn:00006280                 lea     eax, [ebp+var_2]
.text$mn:00006283                 push    eax
.text$mn:00006284                 mov     ecx, [ebp+var_8]
.text$mn:00006287                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000628C                 mov     ecx, [ebp+arg_0]
.text$mn:0000628F                 lea     edx, [eax+ecx*2]
.text$mn:00006292                 push    edx
.text$mn:00006293                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00006298                 add     esp, 8
.text$mn:0000629B                 mov     esp, ebp
.text$mn:0000629D                 pop     ebp
.text$mn:0000629E                 retn    4
.text$mn:0000629E ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000629E
.text$mn:0000629E ; ---------------------------------------------------------------------------
.text$mn:000062A1                 align 4
.text$mn:000062A1 _text$mn        ends
.text$mn:000062A1
.text$mn:000062A4 ; ===========================================================================
.text$mn:000062A4
.text$mn:000062A4 ; Segment type: Pure code
.text$mn:000062A4 ; Segment permissions: Read/Execute
.text$mn:000062A4 _text$mn        segment para public 'CODE' use32
.text$mn:000062A4                 assume cs:_text$mn
.text$mn:000062A4                 ;org 62A4h
.text$mn:000062A4 ; COMDAT (pick any)
.text$mn:000062A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062A4
.text$mn:000062A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000062A4
.text$mn:000062A4 ; Attributes: bp-based frame
.text$mn:000062A4
.text$mn:000062A4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:000062A4                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000062A4 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000062A4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:000062A4
.text$mn:000062A4 var_8           = dword ptr -8
.text$mn:000062A4 var_1           = byte ptr -1
.text$mn:000062A4
.text$mn:000062A4                 push    ebp
.text$mn:000062A5                 mov     ebp, esp
.text$mn:000062A7                 sub     esp, 8
.text$mn:000062AA                 mov     [ebp+var_8], ecx
.text$mn:000062AD                 lea     ecx, [ebp+var_1]
.text$mn:000062B0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000062B5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000062B8                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000062BD                 mov     eax, [ebp+var_8]
.text$mn:000062C0                 mov     ecx, [eax]
.text$mn:000062C2                 push    ecx
.text$mn:000062C3                 lea     ecx, [ebp+var_1]
.text$mn:000062C6                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000062CB                 push    1               ; int
.text$mn:000062CD                 mov     edx, [ebp+var_8]
.text$mn:000062D0                 mov     eax, [edx]
.text$mn:000062D2                 push    eax             ; void *
.text$mn:000062D3                 lea     ecx, [ebp+var_1]
.text$mn:000062D6                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000062DB                 mov     ecx, [ebp+var_8]
.text$mn:000062DE                 mov     dword ptr [ecx], 0
.text$mn:000062E4                 mov     esp, ebp
.text$mn:000062E6                 pop     ebp
.text$mn:000062E7                 retn
.text$mn:000062E7 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000062E7
.text$mn:000062E7 _text$mn        ends
.text$mn:000062E7
.text$mn:000062E8 ; ===========================================================================
.text$mn:000062E8
.text$mn:000062E8 ; Segment type: Pure code
.text$mn:000062E8 ; Segment permissions: Read/Execute
.text$mn:000062E8 _text$mn        segment para public 'CODE' use32
.text$mn:000062E8                 assume cs:_text$mn
.text$mn:000062E8                 ;org 62E8h
.text$mn:000062E8 ; COMDAT (pick any)
.text$mn:000062E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062E8
.text$mn:000062E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000062E8
.text$mn:000062E8 ; Attributes: bp-based frame
.text$mn:000062E8
.text$mn:000062E8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:000062E8                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000062E8 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000062E8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:000062E8
.text$mn:000062E8 var_8           = dword ptr -8
.text$mn:000062E8 var_1           = byte ptr -1
.text$mn:000062E8
.text$mn:000062E8                 push    ebp
.text$mn:000062E9                 mov     ebp, esp
.text$mn:000062EB                 sub     esp, 8
.text$mn:000062EE                 mov     [ebp+var_8], ecx
.text$mn:000062F1                 lea     ecx, [ebp+var_1]
.text$mn:000062F4                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000062F9                 mov     ecx, [ebp+var_8] ; this
.text$mn:000062FC                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006301                 mov     eax, [ebp+var_8]
.text$mn:00006304                 mov     ecx, [eax]
.text$mn:00006306                 push    ecx
.text$mn:00006307                 lea     ecx, [ebp+var_1]
.text$mn:0000630A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000630F                 push    1               ; int
.text$mn:00006311                 mov     edx, [ebp+var_8]
.text$mn:00006314                 mov     eax, [edx]
.text$mn:00006316                 push    eax             ; void *
.text$mn:00006317                 lea     ecx, [ebp+var_1]
.text$mn:0000631A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000631F                 mov     ecx, [ebp+var_8]
.text$mn:00006322                 mov     dword ptr [ecx], 0
.text$mn:00006328                 mov     esp, ebp
.text$mn:0000632A                 pop     ebp
.text$mn:0000632B                 retn
.text$mn:0000632B ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000632B
.text$mn:0000632B _text$mn        ends
.text$mn:0000632B
.text$mn:0000632C ; ===========================================================================
.text$mn:0000632C
.text$mn:0000632C ; Segment type: Pure code
.text$mn:0000632C ; Segment permissions: Read/Execute
.text$mn:0000632C _text$mn        segment para public 'CODE' use32
.text$mn:0000632C                 assume cs:_text$mn
.text$mn:0000632C                 ;org 632Ch
.text$mn:0000632C ; COMDAT (pick any)
.text$mn:0000632C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000632C
.text$mn:0000632C ; =============== S U B R O U T I N E =======================================
.text$mn:0000632C
.text$mn:0000632C ; Attributes: bp-based frame
.text$mn:0000632C
.text$mn:0000632C ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000632C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000632C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000632C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Fp
.text$mn:0000632C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+33p ...
.text$mn:0000632C
.text$mn:0000632C var_4           = dword ptr -4
.text$mn:0000632C arg_0           = dword ptr  8
.text$mn:0000632C
.text$mn:0000632C                 push    ebp
.text$mn:0000632D                 mov     ebp, esp
.text$mn:0000632F                 push    ecx
.text$mn:00006330                 mov     [ebp+var_4], ecx
.text$mn:00006333                 mov     ecx, [ebp+arg_0]
.text$mn:00006336                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000633B                 mov     eax, [ebp+arg_0]
.text$mn:0000633E                 mov     esp, ebp
.text$mn:00006340                 pop     ebp
.text$mn:00006341                 retn    4
.text$mn:00006341 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00006341
.text$mn:00006341 _text$mn        ends
.text$mn:00006341
.text$mn:00006344 ; ===========================================================================
.text$mn:00006344
.text$mn:00006344 ; Segment type: Pure code
.text$mn:00006344 ; Segment permissions: Read/Execute
.text$mn:00006344 _text$mn        segment para public 'CODE' use32
.text$mn:00006344                 assume cs:_text$mn
.text$mn:00006344                 ;org 6344h
.text$mn:00006344 ; COMDAT (pick any)
.text$mn:00006344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006344
.text$mn:00006344 ; =============== S U B R O U T I N E =======================================
.text$mn:00006344
.text$mn:00006344 ; Attributes: bp-based frame
.text$mn:00006344
.text$mn:00006344 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00006344                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00006344 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00006344                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+B4p
.text$mn:00006344                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:00006344
.text$mn:00006344 var_4           = dword ptr -4
.text$mn:00006344 arg_0           = dword ptr  8
.text$mn:00006344
.text$mn:00006344                 push    ebp
.text$mn:00006345                 mov     ebp, esp
.text$mn:00006347                 push    ecx
.text$mn:00006348                 mov     [ebp+var_4], ecx
.text$mn:0000634B                 mov     ecx, [ebp+arg_0]
.text$mn:0000634E                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00006353                 mov     eax, [ebp+arg_0]
.text$mn:00006356                 mov     esp, ebp
.text$mn:00006358                 pop     ebp
.text$mn:00006359                 retn    4
.text$mn:00006359 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00006359
.text$mn:00006359 _text$mn        ends
.text$mn:00006359
.text$mn:0000635C ; ===========================================================================
.text$mn:0000635C
.text$mn:0000635C ; Segment type: Pure code
.text$mn:0000635C ; Segment permissions: Read/Execute
.text$mn:0000635C _text$mn        segment para public 'CODE' use32
.text$mn:0000635C                 assume cs:_text$mn
.text$mn:0000635C                 ;org 635Ch
.text$mn:0000635C ; COMDAT (pick any)
.text$mn:0000635C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000635C
.text$mn:0000635C ; =============== S U B R O U T I N E =======================================
.text$mn:0000635C
.text$mn:0000635C ; Attributes: bp-based frame
.text$mn:0000635C
.text$mn:0000635C ; int __cdecl std::ctype<wchar_t>::_Getcat(int, std::locale *)
.text$mn:0000635C                 public ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:0000635C ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$mn:0000635C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+78p
.text$mn:0000635C
.text$mn:0000635C var_5C          = byte ptr -5Ch
.text$mn:0000635C var_28          = dword ptr -28h
.text$mn:0000635C var_24          = dword ptr -24h
.text$mn:0000635C var_20          = dword ptr -20h
.text$mn:0000635C var_1C          = dword ptr -1Ch
.text$mn:0000635C var_18          = dword ptr -18h
.text$mn:0000635C var_14          = dword ptr -14h
.text$mn:0000635C var_10          = dword ptr -10h
.text$mn:0000635C var_C           = dword ptr -0Ch
.text$mn:0000635C var_4           = dword ptr -4
.text$mn:0000635C arg_0           = dword ptr  8
.text$mn:0000635C arg_4           = dword ptr  0Ch
.text$mn:0000635C
.text$mn:0000635C                 push    ebp
.text$mn:0000635D                 mov     ebp, esp
.text$mn:0000635F                 push    0FFFFFFFFh
.text$mn:00006361                 push    offset __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$mn:00006366                 mov     eax, large fs:0
.text$mn:0000636C                 push    eax
.text$mn:0000636D                 sub     esp, 50h
.text$mn:00006370                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006375                 xor     eax, ebp
.text$mn:00006377                 push    eax
.text$mn:00006378                 lea     eax, [ebp+var_C]
.text$mn:0000637B                 mov     large fs:0, eax
.text$mn:00006381                 mov     [ebp+var_10], 0
.text$mn:00006388                 cmp     [ebp+arg_0], 0
.text$mn:0000638C                 jz      loc_643F
.text$mn:00006392                 mov     eax, [ebp+arg_0]
.text$mn:00006395                 cmp     dword ptr [eax], 0
.text$mn:00006398                 jnz     loc_643F
.text$mn:0000639E                 call    ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ ; std::_DebugHeapTag_func(void)
.text$mn:000063A3                 mov     [ebp+var_1C], eax
.text$mn:000063A6                 push    0A6Ch           ; int
.text$mn:000063AB                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000063B0                 mov     ecx, [ebp+var_1C]
.text$mn:000063B3                 push    ecx             ; struct std::_DebugHeapTag_t *
.text$mn:000063B4                 push    44h ; 'D'       ; unsigned int
.text$mn:000063B6                 call    ??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)
.text$mn:000063BB                 add     esp, 10h
.text$mn:000063BE                 mov     [ebp+var_14], eax
.text$mn:000063C1                 mov     [ebp+var_4], 0
.text$mn:000063C8                 cmp     [ebp+var_14], 0
.text$mn:000063CC                 jz      short loc_6408
.text$mn:000063CE                 push    0
.text$mn:000063D0                 mov     ecx, [ebp+arg_4] ; this
.text$mn:000063D3                 call    ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str(void)
.text$mn:000063D8                 push    eax             ; char *
.text$mn:000063D9                 lea     ecx, [ebp+var_5C] ; this
.text$mn:000063DC                 call    ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo(char const *)
.text$mn:000063E1                 mov     [ebp+var_20], eax
.text$mn:000063E4                 mov     edx, [ebp+var_20]
.text$mn:000063E7                 mov     [ebp+var_24], edx
.text$mn:000063EA                 mov     byte ptr [ebp+var_4], 1
.text$mn:000063EE                 mov     eax, [ebp+var_10]
.text$mn:000063F1                 or      eax, 1
.text$mn:000063F4                 mov     [ebp+var_10], eax
.text$mn:000063F7                 mov     ecx, [ebp+var_24]
.text$mn:000063FA                 push    ecx
.text$mn:000063FB                 mov     ecx, [ebp+var_14]
.text$mn:000063FE                 call    ??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)
.text$mn:00006403                 mov     [ebp+var_18], eax
.text$mn:00006406                 jmp     short loc_640F
.text$mn:00006408 ; ---------------------------------------------------------------------------
.text$mn:00006408
.text$mn:00006408 loc_6408:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+70j
.text$mn:00006408                 mov     [ebp+var_18], 0
.text$mn:0000640F
.text$mn:0000640F loc_640F:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+AAj
.text$mn:0000640F                 mov     edx, [ebp+var_18]
.text$mn:00006412                 mov     [ebp+var_28], edx
.text$mn:00006415                 mov     [ebp+var_4], 2
.text$mn:0000641C                 mov     eax, [ebp+arg_0]
.text$mn:0000641F                 mov     ecx, [ebp+var_28]
.text$mn:00006422                 mov     [eax], ecx
.text$mn:00006424                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000642B                 mov     edx, [ebp+var_10]
.text$mn:0000642E                 and     edx, 1
.text$mn:00006431                 jz      short loc_643F
.text$mn:00006433                 and     [ebp+var_10], 0FFFFFFFEh
.text$mn:00006437                 lea     ecx, [ebp+var_5C] ; this
.text$mn:0000643A                 call    ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$mn:0000643F
.text$mn:0000643F loc_643F:                               ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+30j
.text$mn:0000643F                                         ; std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+3Cj ...
.text$mn:0000643F                 mov     eax, 2
.text$mn:00006444                 mov     ecx, [ebp+var_C]
.text$mn:00006447                 mov     large fs:0, ecx
.text$mn:0000644E                 pop     ecx
.text$mn:0000644F                 mov     esp, ebp
.text$mn:00006451                 pop     ebp
.text$mn:00006452                 retn
.text$mn:00006452 ?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$mn:00006452
.text$mn:00006452 ; ---------------------------------------------------------------------------
.text$mn:00006453                 align 4
.text$mn:00006453 _text$mn        ends
.text$mn:00006453
.text$x:00006454 ; ===========================================================================
.text$x:00006454
.text$x:00006454 ; Segment type: Pure code
.text$x:00006454 ; Segment permissions: Read/Execute
.text$x:00006454 _text$x         segment para public 'CODE' use32
.text$x:00006454                 assume cs:_text$x
.text$x:00006454                 ;org 6454h
.text$x:00006454 ; COMDAT (pick associative to section at 635C)
.text$x:00006454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006454
.text$x:00006454 ; =============== S U B R O U T I N E =======================================
.text$x:00006454
.text$x:00006454
.text$x:00006454 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 proc near
.text$x:00006454                                         ; DATA XREF: .xdata$x:00009358o
.text$x:00006454                 push    0A6Ch
.text$x:00006459                 push    offset ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$x:0000645E                 mov     eax, [ebp-1Ch]
.text$x:00006461                 push    eax
.text$x:00006462                 mov     eax, [ebp-14h]
.text$x:00006465                 push    eax             ; Memory
.text$x:00006466                 call    ??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z ; std::locale::facet::operator delete(void *,std::_DebugHeapTag_t const &,char *,int)
.text$x:0000646B                 add     esp, 10h
.text$x:0000646E                 retn
.text$x:0000646E __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0 endp
.text$x:0000646E
.text$x:0000646F
.text$x:0000646F ; =============== S U B R O U T I N E =======================================
.text$x:0000646F
.text$x:0000646F
.text$x:0000646F __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 proc near
.text$x:0000646F                                         ; DATA XREF: .xdata$x:00009360o
.text$x:0000646F                                         ; .xdata$x:00009368o
.text$x:0000646F                 mov     eax, [ebp-10h]
.text$x:00006472                 and     eax, 1
.text$x:00006475                 jz      $LN8
.text$x:0000647B                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000647F                 lea     ecx, [ebp-5Ch]  ; this
.text$x:00006482                 jmp     ??1_Locinfo@std@@QAE@XZ ; std::_Locinfo::~_Locinfo(void)
.text$x:00006487 ; ---------------------------------------------------------------------------
.text$x:00006487
.text$x:00006487 $LN8:                                   ; CODE XREF: __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1+6j
.text$x:00006487                 retn
.text$x:00006487 __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1 endp
.text$x:00006487
.text$x:00006488
.text$x:00006488 ; =============== S U B R O U T I N E =======================================
.text$x:00006488
.text$x:00006488
.text$x:00006488 __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z proc near
.text$x:00006488                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+5o
.text$x:00006488
.text$x:00006488 arg_4           = dword ptr  8
.text$x:00006488
.text$x:00006488                 mov     edx, [esp+arg_4]
.text$x:0000648C                 lea     eax, [edx+0Ch]
.text$x:0000648F                 mov     ecx, [edx-54h]
.text$x:00006492                 xor     ecx, eax
.text$x:00006494                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006499                 mov     eax, offset __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.text$x:0000649E                 jmp     ___CxxFrameHandler3
.text$x:0000649E __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z endp
.text$x:0000649E
.text$x:0000649E ; ---------------------------------------------------------------------------
.text$x:000064A3                 align 4
.text$x:000064A3 _text$x         ends
.text$x:000064A3
.text$mn:000064A4 ; ===========================================================================
.text$mn:000064A4
.text$mn:000064A4 ; Segment type: Pure code
.text$mn:000064A4 ; Segment permissions: Read/Execute
.text$mn:000064A4 _text$mn        segment para public 'CODE' use32
.text$mn:000064A4                 assume cs:_text$mn
.text$mn:000064A4                 ;org 64A4h
.text$mn:000064A4 ; COMDAT (pick any)
.text$mn:000064A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064A4
.text$mn:000064A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064A4
.text$mn:000064A4 ; Attributes: bp-based frame
.text$mn:000064A4
.text$mn:000064A4 ; public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const
.text$mn:000064A4                 public ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
.text$mn:000064A4 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ proc near
.text$mn:000064A4                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+1Cp
.text$mn:000064A4
.text$mn:000064A4 var_24          = byte ptr -24h
.text$mn:000064A4 var_14          = dword ptr -14h
.text$mn:000064A4 var_10          = dword ptr -10h
.text$mn:000064A4 var_C           = dword ptr -0Ch
.text$mn:000064A4 var_8           = dword ptr -8
.text$mn:000064A4 var_4           = dword ptr -4
.text$mn:000064A4 arg_0           = dword ptr  8
.text$mn:000064A4
.text$mn:000064A4                 push    ebp
.text$mn:000064A5                 mov     ebp, esp
.text$mn:000064A7                 sub     esp, 24h
.text$mn:000064AA                 mov     [ebp+var_4], ecx
.text$mn:000064AD                 lea     eax, [ebp+var_24]
.text$mn:000064B0                 push    eax
.text$mn:000064B1                 call    __Getctype
.text$mn:000064B6                 add     esp, 4
.text$mn:000064B9                 mov     ecx, [eax]
.text$mn:000064BB                 mov     [ebp+var_14], ecx
.text$mn:000064BE                 mov     edx, [eax+4]
.text$mn:000064C1                 mov     [ebp+var_10], edx
.text$mn:000064C4                 mov     ecx, [eax+8]
.text$mn:000064C7                 mov     [ebp+var_C], ecx
.text$mn:000064CA                 mov     edx, [eax+0Ch]
.text$mn:000064CD                 mov     [ebp+var_8], edx
.text$mn:000064D0                 mov     eax, [ebp+arg_0]
.text$mn:000064D3                 mov     ecx, [ebp+var_14]
.text$mn:000064D6                 mov     [eax], ecx
.text$mn:000064D8                 mov     edx, [ebp+var_10]
.text$mn:000064DB                 mov     [eax+4], edx
.text$mn:000064DE                 mov     ecx, [ebp+var_C]
.text$mn:000064E1                 mov     [eax+8], ecx
.text$mn:000064E4                 mov     edx, [ebp+var_8]
.text$mn:000064E7                 mov     [eax+0Ch], edx
.text$mn:000064EA                 mov     eax, [ebp+arg_0]
.text$mn:000064ED                 mov     esp, ebp
.text$mn:000064EF                 pop     ebp
.text$mn:000064F0                 retn    4
.text$mn:000064F0 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ endp
.text$mn:000064F0
.text$mn:000064F0 ; ---------------------------------------------------------------------------
.text$mn:000064F3                 align 4
.text$mn:000064F3 _text$mn        ends
.text$mn:000064F3
.text$mn:000064F4 ; ===========================================================================
.text$mn:000064F4
.text$mn:000064F4 ; Segment type: Pure code
.text$mn:000064F4 ; Segment permissions: Read/Execute
.text$mn:000064F4 _text$mn        segment para public 'CODE' use32
.text$mn:000064F4                 assume cs:_text$mn
.text$mn:000064F4                 ;org 64F4h
.text$mn:000064F4 ; COMDAT (pick any)
.text$mn:000064F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064F4
.text$mn:000064F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064F4
.text$mn:000064F4 ; Attributes: bp-based frame
.text$mn:000064F4
.text$mn:000064F4 ; public: struct _Cvtvec __thiscall std::_Locinfo::_Getcvt(void)const
.text$mn:000064F4                 public ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
.text$mn:000064F4 ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ proc near
.text$mn:000064F4                                         ; CODE XREF: std::ctype<wchar_t>::_Init(std::_Locinfo const &)+44p
.text$mn:000064F4
.text$mn:000064F4 var_60          = byte ptr -60h
.text$mn:000064F4 var_34          = dword ptr -34h
.text$mn:000064F4 var_30          = byte ptr -30h
.text$mn:000064F4 var_4           = dword ptr -4
.text$mn:000064F4 arg_0           = dword ptr  8
.text$mn:000064F4
.text$mn:000064F4                 push    ebp
.text$mn:000064F5                 mov     ebp, esp
.text$mn:000064F7                 sub     esp, 60h
.text$mn:000064FA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000064FF                 xor     eax, ebp
.text$mn:00006501                 mov     [ebp+var_4], eax
.text$mn:00006504                 push    esi
.text$mn:00006505                 push    edi
.text$mn:00006506                 mov     [ebp+var_34], ecx
.text$mn:00006509                 lea     eax, [ebp+var_60]
.text$mn:0000650C                 push    eax
.text$mn:0000650D                 call    __Getcvt
.text$mn:00006512                 add     esp, 4
.text$mn:00006515                 mov     ecx, 0Bh
.text$mn:0000651A                 mov     esi, eax
.text$mn:0000651C                 lea     edi, [ebp+var_30]
.text$mn:0000651F                 rep movsd
.text$mn:00006521                 mov     ecx, 0Bh
.text$mn:00006526                 lea     esi, [ebp+var_30]
.text$mn:00006529                 mov     edi, [ebp+arg_0]
.text$mn:0000652C                 rep movsd
.text$mn:0000652E                 mov     eax, [ebp+arg_0]
.text$mn:00006531                 pop     edi
.text$mn:00006532                 pop     esi
.text$mn:00006533                 mov     ecx, [ebp+var_4]
.text$mn:00006536                 xor     ecx, ebp
.text$mn:00006538                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000653D                 mov     esp, ebp
.text$mn:0000653F                 pop     ebp
.text$mn:00006540                 retn    4
.text$mn:00006540 ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ endp
.text$mn:00006540
.text$mn:00006540 ; ---------------------------------------------------------------------------
.text$mn:00006543                 align 4
.text$mn:00006543 _text$mn        ends
.text$mn:00006543
.text$mn:00006544 ; ===========================================================================
.text$mn:00006544
.text$mn:00006544 ; Segment type: Pure code
.text$mn:00006544 ; Segment permissions: Read/Execute
.text$mn:00006544 _text$mn        segment para public 'CODE' use32
.text$mn:00006544                 assume cs:_text$mn
.text$mn:00006544                 ;org 6544h
.text$mn:00006544 ; COMDAT (pick any)
.text$mn:00006544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006544
.text$mn:00006544 ; =============== S U B R O U T I N E =======================================
.text$mn:00006544
.text$mn:00006544 ; Attributes: bp-based frame
.text$mn:00006544
.text$mn:00006544 ; const struct std::locale::facet *__thiscall std::locale::_Getfacet(std::locale *this, unsigned int)
.text$mn:00006544                 public ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
.text$mn:00006544 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z proc near
.text$mn:00006544                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+52p
.text$mn:00006544
.text$mn:00006544 var_14          = dword ptr -14h
.text$mn:00006544 var_10          = dword ptr -10h
.text$mn:00006544 var_C           = dword ptr -0Ch
.text$mn:00006544 var_8           = dword ptr -8
.text$mn:00006544 var_4           = dword ptr -4
.text$mn:00006544 arg_0           = dword ptr  8
.text$mn:00006544
.text$mn:00006544                 push    ebp
.text$mn:00006545                 mov     ebp, esp
.text$mn:00006547                 sub     esp, 14h
.text$mn:0000654A                 mov     [ebp+var_4], ecx
.text$mn:0000654D                 mov     eax, [ebp+var_4]
.text$mn:00006550                 mov     ecx, [eax]
.text$mn:00006552                 mov     edx, [ebp+arg_0]
.text$mn:00006555                 cmp     edx, [ecx+0Ch]
.text$mn:00006558                 jnb     short loc_656D
.text$mn:0000655A                 mov     eax, [ebp+var_4]
.text$mn:0000655D                 mov     ecx, [eax]
.text$mn:0000655F                 mov     edx, [ecx+8]
.text$mn:00006562                 mov     eax, [ebp+arg_0]
.text$mn:00006565                 mov     ecx, [edx+eax*4]
.text$mn:00006568                 mov     [ebp+var_8], ecx
.text$mn:0000656B                 jmp     short loc_6574
.text$mn:0000656D ; ---------------------------------------------------------------------------
.text$mn:0000656D
.text$mn:0000656D loc_656D:                               ; CODE XREF: std::locale::_Getfacet(uint)+14j
.text$mn:0000656D                 mov     [ebp+var_8], 0
.text$mn:00006574
.text$mn:00006574 loc_6574:                               ; CODE XREF: std::locale::_Getfacet(uint)+27j
.text$mn:00006574                 mov     edx, [ebp+var_8]
.text$mn:00006577                 mov     [ebp+var_C], edx
.text$mn:0000657A                 cmp     [ebp+var_C], 0
.text$mn:0000657E                 jnz     short loc_658D
.text$mn:00006580                 mov     eax, [ebp+var_4]
.text$mn:00006583                 mov     ecx, [eax]
.text$mn:00006585                 movzx   edx, byte ptr [ecx+14h]
.text$mn:00006589                 test    edx, edx
.text$mn:0000658B                 jnz     short loc_6594
.text$mn:0000658D
.text$mn:0000658D loc_658D:                               ; CODE XREF: std::locale::_Getfacet(uint)+3Aj
.text$mn:0000658D                 mov     eax, [ebp+var_C]
.text$mn:00006590                 jmp     short loc_65C2
.text$mn:00006592 ; ---------------------------------------------------------------------------
.text$mn:00006592                 jmp     short loc_65C2
.text$mn:00006594 ; ---------------------------------------------------------------------------
.text$mn:00006594
.text$mn:00006594 loc_6594:                               ; CODE XREF: std::locale::_Getfacet(uint)+47j
.text$mn:00006594                 call    ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale(void)
.text$mn:00006599                 mov     [ebp+var_10], eax
.text$mn:0000659C                 mov     eax, [ebp+var_10]
.text$mn:0000659F                 mov     ecx, [ebp+arg_0]
.text$mn:000065A2                 cmp     ecx, [eax+0Ch]
.text$mn:000065A5                 jnb     short loc_65B8
.text$mn:000065A7                 mov     edx, [ebp+var_10]
.text$mn:000065AA                 mov     eax, [edx+8]
.text$mn:000065AD                 mov     ecx, [ebp+arg_0]
.text$mn:000065B0                 mov     edx, [eax+ecx*4]
.text$mn:000065B3                 mov     [ebp+var_14], edx
.text$mn:000065B6                 jmp     short loc_65BF
.text$mn:000065B8 ; ---------------------------------------------------------------------------
.text$mn:000065B8
.text$mn:000065B8 loc_65B8:                               ; CODE XREF: std::locale::_Getfacet(uint)+61j
.text$mn:000065B8                 mov     [ebp+var_14], 0
.text$mn:000065BF
.text$mn:000065BF loc_65BF:                               ; CODE XREF: std::locale::_Getfacet(uint)+72j
.text$mn:000065BF                 mov     eax, [ebp+var_14]
.text$mn:000065C2
.text$mn:000065C2 loc_65C2:                               ; CODE XREF: std::locale::_Getfacet(uint)+4Cj
.text$mn:000065C2                                         ; std::locale::_Getfacet(uint)+4Ej
.text$mn:000065C2                 mov     esp, ebp
.text$mn:000065C4                 pop     ebp
.text$mn:000065C5                 retn    4
.text$mn:000065C5 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z endp
.text$mn:000065C5
.text$mn:000065C5 _text$mn        ends
.text$mn:000065C5
.text$mn:000065C8 ; ===========================================================================
.text$mn:000065C8
.text$mn:000065C8 ; Segment type: Pure code
.text$mn:000065C8 ; Segment permissions: Read/Execute
.text$mn:000065C8 _text$mn        segment para public 'CODE' use32
.text$mn:000065C8                 assume cs:_text$mn
.text$mn:000065C8                 ;org 65C8h
.text$mn:000065C8 ; COMDAT (pick any)
.text$mn:000065C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065C8
.text$mn:000065C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065C8
.text$mn:000065C8 ; Attributes: bp-based frame
.text$mn:000065C8
.text$mn:000065C8 ; protected: __int64 __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Gnavail(void)const
.text$mn:000065C8                 public ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ
.text$mn:000065C8 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ proc near
.text$mn:000065C8                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+Cp
.text$mn:000065C8                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+Cp ...
.text$mn:000065C8
.text$mn:000065C8 var_8           = dword ptr -8
.text$mn:000065C8 var_4           = dword ptr -4
.text$mn:000065C8
.text$mn:000065C8                 push    ebp
.text$mn:000065C9                 mov     ebp, esp
.text$mn:000065CB                 sub     esp, 8
.text$mn:000065CE                 mov     [ebp+var_4], ecx
.text$mn:000065D1                 mov     eax, [ebp+var_4]
.text$mn:000065D4                 mov     ecx, [eax+1Ch]
.text$mn:000065D7                 cmp     dword ptr [ecx], 0
.text$mn:000065DA                 jz      short loc_65E9
.text$mn:000065DC                 mov     edx, [ebp+var_4]
.text$mn:000065DF                 mov     eax, [edx+2Ch]
.text$mn:000065E2                 mov     ecx, [eax]
.text$mn:000065E4                 mov     [ebp+var_8], ecx
.text$mn:000065E7                 jmp     short loc_65F0
.text$mn:000065E9 ; ---------------------------------------------------------------------------
.text$mn:000065E9
.text$mn:000065E9 loc_65E9:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)+12j
.text$mn:000065E9                 mov     [ebp+var_8], 0
.text$mn:000065F0
.text$mn:000065F0 loc_65F0:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)+1Fj
.text$mn:000065F0                 mov     eax, [ebp+var_8]
.text$mn:000065F3                 cdq
.text$mn:000065F4                 mov     esp, ebp
.text$mn:000065F6                 pop     ebp
.text$mn:000065F7                 retn
.text$mn:000065F7 ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ endp
.text$mn:000065F7
.text$mn:000065F7 _text$mn        ends
.text$mn:000065F7
.text$mn:000065F8 ; ===========================================================================
.text$mn:000065F8
.text$mn:000065F8 ; Segment type: Pure code
.text$mn:000065F8 ; Segment permissions: Read/Execute
.text$mn:000065F8 _text$mn        segment para public 'CODE' use32
.text$mn:000065F8                 assume cs:_text$mn
.text$mn:000065F8                 ;org 65F8h
.text$mn:000065F8 ; COMDAT (pick any)
.text$mn:000065F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065F8
.text$mn:000065F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065F8
.text$mn:000065F8 ; Attributes: bp-based frame
.text$mn:000065F8
.text$mn:000065F8 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Gninc(void)
.text$mn:000065F8                 public ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
.text$mn:000065F8 ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ proc near
.text$mn:000065F8                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+28p
.text$mn:000065F8
.text$mn:000065F8 var_8           = dword ptr -8
.text$mn:000065F8 var_4           = dword ptr -4
.text$mn:000065F8
.text$mn:000065F8                 push    ebp
.text$mn:000065F9                 mov     ebp, esp
.text$mn:000065FB                 sub     esp, 8
.text$mn:000065FE                 mov     [ebp+var_4], ecx
.text$mn:00006601                 mov     eax, [ebp+var_4]
.text$mn:00006604                 mov     ecx, [eax+2Ch]
.text$mn:00006607                 mov     edx, [ecx]
.text$mn:00006609                 sub     edx, 1
.text$mn:0000660C                 mov     eax, [ebp+var_4]
.text$mn:0000660F                 mov     ecx, [eax+2Ch]
.text$mn:00006612                 mov     [ecx], edx
.text$mn:00006614                 mov     edx, [ebp+var_4]
.text$mn:00006617                 mov     eax, [edx+1Ch]
.text$mn:0000661A                 mov     ecx, [eax]
.text$mn:0000661C                 mov     [ebp+var_8], ecx
.text$mn:0000661F                 mov     edx, [ebp+var_4]
.text$mn:00006622                 mov     eax, [edx+1Ch]
.text$mn:00006625                 mov     ecx, [eax]
.text$mn:00006627                 add     ecx, 2
.text$mn:0000662A                 mov     edx, [ebp+var_4]
.text$mn:0000662D                 mov     eax, [edx+1Ch]
.text$mn:00006630                 mov     [eax], ecx
.text$mn:00006632                 mov     eax, [ebp+var_8]
.text$mn:00006635                 mov     esp, ebp
.text$mn:00006637                 pop     ebp
.text$mn:00006638                 retn
.text$mn:00006638 ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ endp
.text$mn:00006638
.text$mn:00006638 ; ---------------------------------------------------------------------------
.text$mn:00006639                 align 4
.text$mn:00006639 _text$mn        ends
.text$mn:00006639
.text$mn:0000663C ; ===========================================================================
.text$mn:0000663C
.text$mn:0000663C ; Segment type: Pure code
.text$mn:0000663C ; Segment permissions: Read/Execute
.text$mn:0000663C _text$mn        segment para public 'CODE' use32
.text$mn:0000663C                 assume cs:_text$mn
.text$mn:0000663C                 ;org 663Ch
.text$mn:0000663C ; COMDAT (pick any)
.text$mn:0000663C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000663C
.text$mn:0000663C ; =============== S U B R O U T I N E =======================================
.text$mn:0000663C
.text$mn:0000663C ; Attributes: bp-based frame
.text$mn:0000663C
.text$mn:0000663C ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::_Gnpreinc(void)
.text$mn:0000663C                 public ?_Gnpreinc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ
.text$mn:0000663C ?_Gnpreinc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ proc near
.text$mn:0000663C                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+28p
.text$mn:0000663C
.text$mn:0000663C var_8           = dword ptr -8
.text$mn:0000663C var_4           = dword ptr -4
.text$mn:0000663C
.text$mn:0000663C                 push    ebp
.text$mn:0000663D                 mov     ebp, esp
.text$mn:0000663F                 sub     esp, 8
.text$mn:00006642                 mov     [ebp+var_4], ecx
.text$mn:00006645                 mov     eax, [ebp+var_4]
.text$mn:00006648                 mov     ecx, [eax+2Ch]
.text$mn:0000664B                 mov     edx, [ecx]
.text$mn:0000664D                 sub     edx, 1
.text$mn:00006650                 mov     eax, [ebp+var_4]
.text$mn:00006653                 mov     ecx, [eax+2Ch]
.text$mn:00006656                 mov     [ecx], edx
.text$mn:00006658                 mov     edx, [ebp+var_4]
.text$mn:0000665B                 mov     eax, [edx+1Ch]
.text$mn:0000665E                 mov     ecx, [eax]
.text$mn:00006660                 add     ecx, 2
.text$mn:00006663                 mov     [ebp+var_8], ecx
.text$mn:00006666                 mov     edx, [ebp+var_4]
.text$mn:00006669                 mov     eax, [edx+1Ch]
.text$mn:0000666C                 mov     ecx, [ebp+var_8]
.text$mn:0000666F                 mov     [eax], ecx
.text$mn:00006671                 mov     eax, [ebp+var_8]
.text$mn:00006674                 mov     esp, ebp
.text$mn:00006676                 pop     ebp
.text$mn:00006677                 retn
.text$mn:00006677 ?_Gnpreinc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ endp
.text$mn:00006677
.text$mn:00006677 _text$mn        ends
.text$mn:00006677
.text$mn:00006678 ; ===========================================================================
.text$mn:00006678
.text$mn:00006678 ; Segment type: Pure code
.text$mn:00006678 ; Segment permissions: Read/Execute
.text$mn:00006678 _text$mn        segment para public 'CODE' use32
.text$mn:00006678                 assume cs:_text$mn
.text$mn:00006678                 ;org 6678h
.text$mn:00006678 ; COMDAT (pick any)
.text$mn:00006678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006678
.text$mn:00006678 ; =============== S U B R O U T I N E =======================================
.text$mn:00006678
.text$mn:00006678 ; Attributes: bp-based frame
.text$mn:00006678
.text$mn:00006678 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00006678                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00006678 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00006678                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Dp
.text$mn:00006678                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+8Cp ...
.text$mn:00006678
.text$mn:00006678 var_C           = dword ptr -0Ch
.text$mn:00006678 Size            = dword ptr -8
.text$mn:00006678 var_4           = dword ptr -4
.text$mn:00006678 arg_0           = dword ptr  8
.text$mn:00006678 arg_4           = byte ptr  0Ch
.text$mn:00006678
.text$mn:00006678                 push    ebp
.text$mn:00006679                 mov     ebp, esp
.text$mn:0000667B                 sub     esp, 0Ch
.text$mn:0000667E                 mov     [ebp+var_4], ecx
.text$mn:00006681                 mov     ecx, [ebp+var_4]
.text$mn:00006684                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00006689                 cmp     eax, [ebp+arg_0]
.text$mn:0000668C                 jnb     short loc_6696
.text$mn:0000668E                 mov     ecx, [ebp+var_4]
.text$mn:00006691                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00006696
.text$mn:00006696 loc_6696:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00006696                 mov     eax, [ebp+var_4]
.text$mn:00006699                 mov     ecx, [eax+18h]
.text$mn:0000669C                 cmp     ecx, [ebp+arg_0]
.text$mn:0000669F                 jnb     short loc_66B6
.text$mn:000066A1                 mov     edx, [ebp+var_4]
.text$mn:000066A4                 mov     eax, [edx+14h]
.text$mn:000066A7                 push    eax
.text$mn:000066A8                 mov     ecx, [ebp+arg_0]
.text$mn:000066AB                 push    ecx
.text$mn:000066AC                 mov     ecx, [ebp+var_4]
.text$mn:000066AF                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:000066B4                 jmp     short loc_6700
.text$mn:000066B6 ; ---------------------------------------------------------------------------
.text$mn:000066B6
.text$mn:000066B6 loc_66B6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:000066B6                 movzx   edx, [ebp+arg_4]
.text$mn:000066BA                 test    edx, edx
.text$mn:000066BC                 jz      short loc_66F0
.text$mn:000066BE                 cmp     [ebp+arg_0], 10h
.text$mn:000066C2                 jnb     short loc_66F0
.text$mn:000066C4                 mov     eax, [ebp+var_4]
.text$mn:000066C7                 mov     ecx, [ebp+arg_0]
.text$mn:000066CA                 cmp     ecx, [eax+14h]
.text$mn:000066CD                 jnb     short loc_66D7
.text$mn:000066CF                 mov     edx, [ebp+arg_0]
.text$mn:000066D2                 mov     [ebp+Size], edx
.text$mn:000066D5                 jmp     short loc_66E0
.text$mn:000066D7 ; ---------------------------------------------------------------------------
.text$mn:000066D7
.text$mn:000066D7 loc_66D7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:000066D7                 mov     eax, [ebp+var_4]
.text$mn:000066DA                 mov     ecx, [eax+14h]
.text$mn:000066DD                 mov     [ebp+Size], ecx
.text$mn:000066E0
.text$mn:000066E0 loc_66E0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:000066E0                 mov     edx, [ebp+Size]
.text$mn:000066E3                 push    edx             ; Size
.text$mn:000066E4                 push    1               ; char
.text$mn:000066E6                 mov     ecx, [ebp+var_4]
.text$mn:000066E9                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000066EE                 jmp     short loc_6700
.text$mn:000066F0 ; ---------------------------------------------------------------------------
.text$mn:000066F0
.text$mn:000066F0 loc_66F0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:000066F0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:000066F0                 cmp     [ebp+arg_0], 0
.text$mn:000066F4                 jnz     short loc_6700
.text$mn:000066F6                 push    0
.text$mn:000066F8                 mov     ecx, [ebp+var_4]
.text$mn:000066FB                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006700
.text$mn:00006700 loc_6700:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00006700                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00006700                 cmp     [ebp+arg_0], 0
.text$mn:00006704                 jbe     short loc_670F
.text$mn:00006706                 mov     [ebp+var_C], 1
.text$mn:0000670D                 jmp     short loc_6716
.text$mn:0000670F ; ---------------------------------------------------------------------------
.text$mn:0000670F
.text$mn:0000670F loc_670F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:0000670F                 mov     [ebp+var_C], 0
.text$mn:00006716
.text$mn:00006716 loc_6716:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00006716                 mov     al, byte ptr [ebp+var_C]
.text$mn:00006719                 mov     esp, ebp
.text$mn:0000671B                 pop     ebp
.text$mn:0000671C                 retn    8
.text$mn:0000671C ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:0000671C
.text$mn:0000671C ; ---------------------------------------------------------------------------
.text$mn:0000671F                 align 10h
.text$mn:0000671F _text$mn        ends
.text$mn:0000671F
.text$mn:00006720 ; ===========================================================================
.text$mn:00006720
.text$mn:00006720 ; Segment type: Pure code
.text$mn:00006720 ; Segment permissions: Read/Execute
.text$mn:00006720 _text$mn        segment para public 'CODE' use32
.text$mn:00006720                 assume cs:_text$mn
.text$mn:00006720                 ;org 6720h
.text$mn:00006720 ; COMDAT (pick any)
.text$mn:00006720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006720
.text$mn:00006720 ; =============== S U B R O U T I N E =======================================
.text$mn:00006720
.text$mn:00006720 ; Attributes: bp-based frame
.text$mn:00006720
.text$mn:00006720 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00006720                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00006720 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00006720                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00006720                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+3Dp ...
.text$mn:00006720
.text$mn:00006720 var_C           = dword ptr -0Ch
.text$mn:00006720 var_8           = dword ptr -8
.text$mn:00006720 var_4           = dword ptr -4
.text$mn:00006720 arg_0           = dword ptr  8
.text$mn:00006720 arg_4           = byte ptr  0Ch
.text$mn:00006720
.text$mn:00006720                 push    ebp
.text$mn:00006721                 mov     ebp, esp
.text$mn:00006723                 sub     esp, 0Ch
.text$mn:00006726                 mov     [ebp+var_4], ecx
.text$mn:00006729                 mov     ecx, [ebp+var_4]
.text$mn:0000672C                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00006731                 cmp     eax, [ebp+arg_0]
.text$mn:00006734                 jnb     short loc_673E
.text$mn:00006736                 mov     ecx, [ebp+var_4]
.text$mn:00006739                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000673E
.text$mn:0000673E loc_673E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:0000673E                 mov     eax, [ebp+var_4]
.text$mn:00006741                 mov     ecx, [eax+18h]
.text$mn:00006744                 cmp     ecx, [ebp+arg_0]
.text$mn:00006747                 jnb     short loc_675E
.text$mn:00006749                 mov     edx, [ebp+var_4]
.text$mn:0000674C                 mov     eax, [edx+14h]
.text$mn:0000674F                 push    eax
.text$mn:00006750                 mov     ecx, [ebp+arg_0]
.text$mn:00006753                 push    ecx
.text$mn:00006754                 mov     ecx, [ebp+var_4]
.text$mn:00006757                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:0000675C                 jmp     short loc_67A8
.text$mn:0000675E ; ---------------------------------------------------------------------------
.text$mn:0000675E
.text$mn:0000675E loc_675E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:0000675E                 movzx   edx, [ebp+arg_4]
.text$mn:00006762                 test    edx, edx
.text$mn:00006764                 jz      short loc_6798
.text$mn:00006766                 cmp     [ebp+arg_0], 8
.text$mn:0000676A                 jnb     short loc_6798
.text$mn:0000676C                 mov     eax, [ebp+var_4]
.text$mn:0000676F                 mov     ecx, [ebp+arg_0]
.text$mn:00006772                 cmp     ecx, [eax+14h]
.text$mn:00006775                 jnb     short loc_677F
.text$mn:00006777                 mov     edx, [ebp+arg_0]
.text$mn:0000677A                 mov     [ebp+var_8], edx
.text$mn:0000677D                 jmp     short loc_6788
.text$mn:0000677F ; ---------------------------------------------------------------------------
.text$mn:0000677F
.text$mn:0000677F loc_677F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:0000677F                 mov     eax, [ebp+var_4]
.text$mn:00006782                 mov     ecx, [eax+14h]
.text$mn:00006785                 mov     [ebp+var_8], ecx
.text$mn:00006788
.text$mn:00006788 loc_6788:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00006788                 mov     edx, [ebp+var_8]
.text$mn:0000678B                 push    edx
.text$mn:0000678C                 push    1
.text$mn:0000678E                 mov     ecx, [ebp+var_4]
.text$mn:00006791                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006796                 jmp     short loc_67A8
.text$mn:00006798 ; ---------------------------------------------------------------------------
.text$mn:00006798
.text$mn:00006798 loc_6798:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00006798                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00006798                 cmp     [ebp+arg_0], 0
.text$mn:0000679C                 jnz     short loc_67A8
.text$mn:0000679E                 push    0
.text$mn:000067A0                 mov     ecx, [ebp+var_4]
.text$mn:000067A3                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000067A8
.text$mn:000067A8 loc_67A8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:000067A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:000067A8                 cmp     [ebp+arg_0], 0
.text$mn:000067AC                 jbe     short loc_67B7
.text$mn:000067AE                 mov     [ebp+var_C], 1
.text$mn:000067B5                 jmp     short loc_67BE
.text$mn:000067B7 ; ---------------------------------------------------------------------------
.text$mn:000067B7
.text$mn:000067B7 loc_67B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:000067B7                 mov     [ebp+var_C], 0
.text$mn:000067BE
.text$mn:000067BE loc_67BE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:000067BE                 mov     al, byte ptr [ebp+var_C]
.text$mn:000067C1                 mov     esp, ebp
.text$mn:000067C3                 pop     ebp
.text$mn:000067C4                 retn    8
.text$mn:000067C4 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:000067C4
.text$mn:000067C4 ; ---------------------------------------------------------------------------
.text$mn:000067C7                 align 4
.text$mn:000067C7 _text$mn        ends
.text$mn:000067C7
.text$mn:000067C8 ; ===========================================================================
.text$mn:000067C8
.text$mn:000067C8 ; Segment type: Pure code
.text$mn:000067C8 ; Segment permissions: Read/Execute
.text$mn:000067C8 _text$mn        segment para public 'CODE' use32
.text$mn:000067C8                 assume cs:_text$mn
.text$mn:000067C8                 ;org 67C8h
.text$mn:000067C8 ; COMDAT (pick any)
.text$mn:000067C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067C8
.text$mn:000067C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067C8
.text$mn:000067C8 ; Attributes: bp-based frame
.text$mn:000067C8
.text$mn:000067C8 ; void __thiscall std::locale::facet::_Incref(std::locale::facet *__hidden this)
.text$mn:000067C8                 public ?_Incref@facet@locale@std@@UAEXXZ
.text$mn:000067C8 ?_Incref@facet@locale@std@@UAEXXZ proc near ; DATA XREF: .rdata:0000A034o
.text$mn:000067C8                                         ; .rdata:0000A120o ...
.text$mn:000067C8
.text$mn:000067C8 var_4           = dword ptr -4
.text$mn:000067C8
.text$mn:000067C8                 push    ebp
.text$mn:000067C9                 mov     ebp, esp
.text$mn:000067CB                 push    ecx
.text$mn:000067CC                 mov     [ebp+var_4], ecx
.text$mn:000067CF                 mov     eax, [ebp+var_4]
.text$mn:000067D2                 add     eax, 4
.text$mn:000067D5                 mov     ecx, 1
.text$mn:000067DA                 lock xadd [eax], ecx
.text$mn:000067DE                 mov     esp, ebp
.text$mn:000067E0                 pop     ebp
.text$mn:000067E1                 retn
.text$mn:000067E1 ?_Incref@facet@locale@std@@UAEXXZ endp
.text$mn:000067E1
.text$mn:000067E1 ; ---------------------------------------------------------------------------
.text$mn:000067E2                 align 4
.text$mn:000067E2 _text$mn        ends
.text$mn:000067E2
.text$mn:000067E4 ; ===========================================================================
.text$mn:000067E4
.text$mn:000067E4 ; Segment type: Pure code
.text$mn:000067E4 ; Segment permissions: Read/Execute
.text$mn:000067E4 _text$mn        segment para public 'CODE' use32
.text$mn:000067E4                 assume cs:_text$mn
.text$mn:000067E4                 ;org 67E4h
.text$mn:000067E4 ; COMDAT (pick any)
.text$mn:000067E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067E4
.text$mn:000067E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000067E4
.text$mn:000067E4 ; Attributes: bp-based frame
.text$mn:000067E4
.text$mn:000067E4 ; protected: void __thiscall std::ctype<wchar_t>::_Init(class std::_Locinfo const &)
.text$mn:000067E4                 public ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z
.text$mn:000067E4 ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z proc near
.text$mn:000067E4                                         ; CODE XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+49p
.text$mn:000067E4
.text$mn:000067E4 var_44          = byte ptr -44h
.text$mn:000067E4 var_34          = dword ptr -34h
.text$mn:000067E4 var_30          = byte ptr -30h
.text$mn:000067E4 var_4           = dword ptr -4
.text$mn:000067E4 arg_0           = dword ptr  8
.text$mn:000067E4
.text$mn:000067E4                 push    ebp
.text$mn:000067E5                 mov     ebp, esp
.text$mn:000067E7                 sub     esp, 44h
.text$mn:000067EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067EF                 xor     eax, ebp
.text$mn:000067F1                 mov     [ebp+var_4], eax
.text$mn:000067F4                 push    esi
.text$mn:000067F5                 push    edi
.text$mn:000067F6                 mov     [ebp+var_34], ecx
.text$mn:000067F9                 lea     eax, [ebp+var_44]
.text$mn:000067FC                 push    eax
.text$mn:000067FD                 mov     ecx, [ebp+arg_0]
.text$mn:00006800                 call    ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype(void)
.text$mn:00006805                 mov     ecx, [ebp+var_34]
.text$mn:00006808                 add     ecx, 8
.text$mn:0000680B                 mov     edx, [eax]
.text$mn:0000680D                 mov     [ecx], edx
.text$mn:0000680F                 mov     edx, [eax+4]
.text$mn:00006812                 mov     [ecx+4], edx
.text$mn:00006815                 mov     edx, [eax+8]
.text$mn:00006818                 mov     [ecx+8], edx
.text$mn:0000681B                 mov     eax, [eax+0Ch]
.text$mn:0000681E                 mov     [ecx+0Ch], eax
.text$mn:00006821                 lea     ecx, [ebp+var_30]
.text$mn:00006824                 push    ecx
.text$mn:00006825                 mov     ecx, [ebp+arg_0]
.text$mn:00006828                 call    ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt(void)
.text$mn:0000682D                 mov     edi, [ebp+var_34]
.text$mn:00006830                 add     edi, 18h
.text$mn:00006833                 mov     ecx, 0Bh
.text$mn:00006838                 mov     esi, eax
.text$mn:0000683A                 rep movsd
.text$mn:0000683C                 pop     edi
.text$mn:0000683D                 pop     esi
.text$mn:0000683E                 mov     ecx, [ebp+var_4]
.text$mn:00006841                 xor     ecx, ebp
.text$mn:00006843                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00006848                 mov     esp, ebp
.text$mn:0000684A                 pop     ebp
.text$mn:0000684B                 retn    4
.text$mn:0000684B ?_Init@?$ctype@_W@std@@IAEXABV_Locinfo@2@@Z endp
.text$mn:0000684B
.text$mn:0000684B ; ---------------------------------------------------------------------------
.text$mn:0000684E                 align 10h
.text$mn:0000684E _text$mn        ends
.text$mn:0000684E
.text$mn:00006850 ; ===========================================================================
.text$mn:00006850
.text$mn:00006850 ; Segment type: Pure code
.text$mn:00006850 ; Segment permissions: Read/Execute
.text$mn:00006850 _text$mn        segment para public 'CODE' use32
.text$mn:00006850                 assume cs:_text$mn
.text$mn:00006850                 ;org 6850h
.text$mn:00006850 ; COMDAT (pick any)
.text$mn:00006850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006850
.text$mn:00006850 ; =============== S U B R O U T I N E =======================================
.text$mn:00006850
.text$mn:00006850 ; Attributes: bp-based frame
.text$mn:00006850
.text$mn:00006850 ; void __cdecl std::_Init_atomic_counter(unsigned __int32 *, unsigned __int32)
.text$mn:00006850                 public ?_Init_atomic_counter@std@@YAXAAKK@Z
.text$mn:00006850 ?_Init_atomic_counter@std@@YAXAAKK@Z proc near
.text$mn:00006850                                         ; CODE XREF: std::locale::facet::facet(uint)+49p
.text$mn:00006850
.text$mn:00006850 arg_0           = dword ptr  8
.text$mn:00006850 arg_4           = dword ptr  0Ch
.text$mn:00006850
.text$mn:00006850                 push    ebp
.text$mn:00006851                 mov     ebp, esp
.text$mn:00006853                 mov     eax, [ebp+arg_0]
.text$mn:00006856                 mov     ecx, [ebp+arg_4]
.text$mn:00006859                 mov     [eax], ecx
.text$mn:0000685B                 pop     ebp
.text$mn:0000685C                 retn
.text$mn:0000685C ?_Init_atomic_counter@std@@YAXAAKK@Z endp
.text$mn:0000685C
.text$mn:0000685C ; ---------------------------------------------------------------------------
.text$mn:0000685D                 align 10h
.text$mn:0000685D _text$mn        ends
.text$mn:0000685D
.text$mn:00006860 ; ===========================================================================
.text$mn:00006860
.text$mn:00006860 ; Segment type: Pure code
.text$mn:00006860 ; Segment permissions: Read/Execute
.text$mn:00006860 _text$mn        segment para public 'CODE' use32
.text$mn:00006860                 assume cs:_text$mn
.text$mn:00006860                 ;org 6860h
.text$mn:00006860 ; COMDAT (pick any)
.text$mn:00006860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006860
.text$mn:00006860 ; =============== S U B R O U T I N E =======================================
.text$mn:00006860
.text$mn:00006860 ; Attributes: bp-based frame
.text$mn:00006860
.text$mn:00006860 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00006860                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00006860 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00006860                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+2Cp
.text$mn:00006860                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00006860
.text$mn:00006860 var_4           = dword ptr -4
.text$mn:00006860 arg_0           = dword ptr  8
.text$mn:00006860
.text$mn:00006860                 push    ebp
.text$mn:00006861                 mov     ebp, esp
.text$mn:00006863                 push    ecx
.text$mn:00006864                 mov     [ebp+var_4], ecx
.text$mn:00006867                 cmp     [ebp+arg_0], 0
.text$mn:0000686B                 jz      short loc_688D
.text$mn:0000686D                 mov     ecx, [ebp+var_4]
.text$mn:00006870                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00006875                 cmp     [ebp+arg_0], eax
.text$mn:00006878                 jb      short loc_688D
.text$mn:0000687A                 mov     ecx, [ebp+var_4]
.text$mn:0000687D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00006882                 mov     ecx, [ebp+var_4]
.text$mn:00006885                 add     eax, [ecx+14h]
.text$mn:00006888                 cmp     eax, [ebp+arg_0]
.text$mn:0000688B                 ja      short loc_6893
.text$mn:0000688D
.text$mn:0000688D loc_688D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:0000688D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:0000688D                 xor     al, al
.text$mn:0000688F                 jmp     short loc_6895
.text$mn:00006891 ; ---------------------------------------------------------------------------
.text$mn:00006891                 jmp     short loc_6895
.text$mn:00006893 ; ---------------------------------------------------------------------------
.text$mn:00006893
.text$mn:00006893 loc_6893:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00006893                 mov     al, 1
.text$mn:00006895
.text$mn:00006895 loc_6895:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00006895                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00006895                 mov     esp, ebp
.text$mn:00006897                 pop     ebp
.text$mn:00006898                 retn    4
.text$mn:00006898 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00006898
.text$mn:00006898 ; ---------------------------------------------------------------------------
.text$mn:0000689B                 align 4
.text$mn:0000689B _text$mn        ends
.text$mn:0000689B
.text$mn:0000689C ; ===========================================================================
.text$mn:0000689C
.text$mn:0000689C ; Segment type: Pure code
.text$mn:0000689C ; Segment permissions: Read/Execute
.text$mn:0000689C _text$mn        segment para public 'CODE' use32
.text$mn:0000689C                 assume cs:_text$mn
.text$mn:0000689C                 ;org 689Ch
.text$mn:0000689C ; COMDAT (pick any)
.text$mn:0000689C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000689C
.text$mn:0000689C ; =============== S U B R O U T I N E =======================================
.text$mn:0000689C
.text$mn:0000689C ; Attributes: bp-based frame
.text$mn:0000689C
.text$mn:0000689C ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000689C                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:0000689C ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:0000689C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:0000689C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:0000689C
.text$mn:0000689C var_4           = dword ptr -4
.text$mn:0000689C arg_0           = dword ptr  8
.text$mn:0000689C
.text$mn:0000689C                 push    ebp
.text$mn:0000689D                 mov     ebp, esp
.text$mn:0000689F                 push    ecx
.text$mn:000068A0                 mov     [ebp+var_4], ecx
.text$mn:000068A3                 cmp     [ebp+arg_0], 0
.text$mn:000068A7                 jz      short loc_68CC
.text$mn:000068A9                 mov     ecx, [ebp+var_4]
.text$mn:000068AC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000068B1                 cmp     [ebp+arg_0], eax
.text$mn:000068B4                 jb      short loc_68CC
.text$mn:000068B6                 mov     ecx, [ebp+var_4]
.text$mn:000068B9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000068BE                 mov     ecx, [ebp+var_4]
.text$mn:000068C1                 mov     edx, [ecx+14h]
.text$mn:000068C4                 lea     eax, [eax+edx*2]
.text$mn:000068C7                 cmp     eax, [ebp+arg_0]
.text$mn:000068CA                 ja      short loc_68D2
.text$mn:000068CC
.text$mn:000068CC loc_68CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:000068CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:000068CC                 xor     al, al
.text$mn:000068CE                 jmp     short loc_68D4
.text$mn:000068D0 ; ---------------------------------------------------------------------------
.text$mn:000068D0                 jmp     short loc_68D4
.text$mn:000068D2 ; ---------------------------------------------------------------------------
.text$mn:000068D2
.text$mn:000068D2 loc_68D2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:000068D2                 mov     al, 1
.text$mn:000068D4
.text$mn:000068D4 loc_68D4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:000068D4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:000068D4                 mov     esp, ebp
.text$mn:000068D6                 pop     ebp
.text$mn:000068D7                 retn    4
.text$mn:000068D7 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:000068D7
.text$mn:000068D7 ; ---------------------------------------------------------------------------
.text$mn:000068DA                 align 4
.text$mn:000068DA _text$mn        ends
.text$mn:000068DA
.text$mn:000068DC ; ===========================================================================
.text$mn:000068DC
.text$mn:000068DC ; Segment type: Pure code
.text$mn:000068DC ; Segment permissions: Read/Execute
.text$mn:000068DC _text$mn        segment para public 'CODE' use32
.text$mn:000068DC                 assume cs:_text$mn
.text$mn:000068DC                 ;org 68DCh
.text$mn:000068DC ; COMDAT (pick any)
.text$mn:000068DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068DC
.text$mn:000068DC ; =============== S U B R O U T I N E =======================================
.text$mn:000068DC
.text$mn:000068DC ; Attributes: bp-based frame
.text$mn:000068DC
.text$mn:000068DC ; public: bool __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::_Ipfx(bool)
.text$mn:000068DC                 public ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:000068DC ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z proc near
.text$mn:000068DC                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,bool)+43p
.text$mn:000068DC
.text$mn:000068DC var_2C          = dword ptr -2Ch
.text$mn:000068DC var_28          = byte ptr -28h
.text$mn:000068DC var_24          = dword ptr -24h
.text$mn:000068DC var_20          = dword ptr -20h
.text$mn:000068DC var_1C          = dword ptr -1Ch
.text$mn:000068DC var_16          = word ptr -16h
.text$mn:000068DC var_14          = word ptr -14h
.text$mn:000068DC var_10          = dword ptr -10h
.text$mn:000068DC var_C           = dword ptr -0Ch
.text$mn:000068DC var_4           = dword ptr -4
.text$mn:000068DC arg_0           = byte ptr  8
.text$mn:000068DC
.text$mn:000068DC ; FUNCTION CHUNK AT .text$mn:00006A78 SIZE 00000009 BYTES
.text$mn:000068DC ; FUNCTION CHUNK AT .text$mn:00006A88 SIZE 00000047 BYTES
.text$mn:000068DC
.text$mn:000068DC                 push    ebp
.text$mn:000068DD                 mov     ebp, esp
.text$mn:000068DF                 push    0FFFFFFFFh
.text$mn:000068E1                 push    offset __ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:000068E6                 mov     eax, large fs:0
.text$mn:000068EC                 push    eax
.text$mn:000068ED                 push    ecx
.text$mn:000068EE                 sub     esp, 1Ch
.text$mn:000068F1                 push    ebx
.text$mn:000068F2                 push    esi
.text$mn:000068F3                 push    edi
.text$mn:000068F4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068F9                 xor     eax, ebp
.text$mn:000068FB                 push    eax
.text$mn:000068FC                 lea     eax, [ebp+var_C]
.text$mn:000068FF                 mov     large fs:0, eax
.text$mn:00006905                 mov     [ebp+var_10], esp
.text$mn:00006908                 mov     [ebp+var_1C], ecx
.text$mn:0000690B                 mov     eax, [ebp+var_1C]
.text$mn:0000690E                 mov     ecx, [eax]
.text$mn:00006910                 mov     edx, [ebp+var_1C]
.text$mn:00006913                 add     edx, [ecx+4]
.text$mn:00006916                 mov     ecx, edx        ; this
.text$mn:00006918                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:0000691D                 movzx   eax, al
.text$mn:00006920                 test    eax, eax
.text$mn:00006922                 jz      loc_6AA5
.text$mn:00006928                 mov     ecx, [ebp+var_1C]
.text$mn:0000692B                 mov     edx, [ecx]
.text$mn:0000692D                 mov     ecx, [ebp+var_1C]
.text$mn:00006930                 add     ecx, [edx+4]
.text$mn:00006933                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:00006938                 test    eax, eax
.text$mn:0000693A                 jz      short loc_6955
.text$mn:0000693C                 mov     eax, [ebp+var_1C]
.text$mn:0000693F                 mov     ecx, [eax]
.text$mn:00006941                 mov     edx, [ebp+var_1C]
.text$mn:00006944                 add     edx, [ecx+4]
.text$mn:00006947                 mov     ecx, edx
.text$mn:00006949                 call    ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::tie(void)
.text$mn:0000694E                 mov     ecx, eax
.text$mn:00006950                 call    ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)
.text$mn:00006955
.text$mn:00006955 loc_6955:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+5Ej
.text$mn:00006955                 movzx   eax, [ebp+arg_0]
.text$mn:00006959                 test    eax, eax
.text$mn:0000695B                 jnz     loc_6A88
.text$mn:00006961                 mov     ecx, [ebp+var_1C]
.text$mn:00006964                 mov     edx, [ecx]
.text$mn:00006966                 mov     ecx, [ebp+var_1C]
.text$mn:00006969                 add     ecx, [edx+4]    ; this
.text$mn:0000696C                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00006971                 and     eax, 1
.text$mn:00006974                 jz      loc_6A88
.text$mn:0000697A                 lea     eax, [ebp+var_28]
.text$mn:0000697D                 push    eax
.text$mn:0000697E                 mov     ecx, [ebp+var_1C]
.text$mn:00006981                 mov     edx, [ecx]
.text$mn:00006983                 mov     ecx, [ebp+var_1C]
.text$mn:00006986                 add     ecx, [edx+4]
.text$mn:00006989                 call    ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc(void)
.text$mn:0000698E                 mov     [ebp+var_20], eax
.text$mn:00006991                 mov     eax, [ebp+var_20]
.text$mn:00006994                 mov     [ebp+var_24], eax
.text$mn:00006997                 mov     [ebp+var_4], 0
.text$mn:0000699E                 mov     ecx, [ebp+var_24]
.text$mn:000069A1                 push    ecx             ; std::locale *
.text$mn:000069A2                 call    ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)
.text$mn:000069A7                 add     esp, 4
.text$mn:000069AA                 mov     [ebp+var_2C], eax
.text$mn:000069AD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000069B4                 lea     ecx, [ebp+var_28] ; this
.text$mn:000069B7                 call    ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$mn:000069BC                 mov     [ebp+var_4], 1
.text$mn:000069C3                 mov     edx, [ebp+var_1C]
.text$mn:000069C6                 mov     eax, [edx]
.text$mn:000069C8                 mov     ecx, [ebp+var_1C]
.text$mn:000069CB                 add     ecx, [eax+4]
.text$mn:000069CE                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:000069D3                 mov     ecx, eax
.text$mn:000069D5                 call    ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)
.text$mn:000069DA                 mov     [ebp+var_14], ax
.text$mn:000069DE                 jmp     short loc_69FB
.text$mn:000069E0 ; ---------------------------------------------------------------------------
.text$mn:000069E0
.text$mn:000069E0 loc_69E0:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool):loc_6A58j
.text$mn:000069E0                 mov     ecx, [ebp+var_1C]
.text$mn:000069E3                 mov     edx, [ecx]
.text$mn:000069E5                 mov     ecx, [ebp+var_1C]
.text$mn:000069E8                 add     ecx, [edx+4]
.text$mn:000069EB                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:000069F0                 mov     ecx, eax
.text$mn:000069F2                 call    ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)
.text$mn:000069F7                 mov     [ebp+var_14], ax
.text$mn:000069FB
.text$mn:000069FB loc_69FB:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+102j
.text$mn:000069FB                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00006A00                 mov     [ebp+var_16], ax
.text$mn:00006A04                 lea     eax, [ebp+var_14]
.text$mn:00006A07                 push    eax
.text$mn:00006A08                 lea     ecx, [ebp+var_16]
.text$mn:00006A0B                 push    ecx
.text$mn:00006A0C                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00006A11                 add     esp, 8
.text$mn:00006A14                 movzx   edx, al
.text$mn:00006A17                 test    edx, edx
.text$mn:00006A19                 jz      short loc_6A35
.text$mn:00006A1B                 push    0
.text$mn:00006A1D                 push    1
.text$mn:00006A1F                 mov     eax, [ebp+var_1C]
.text$mn:00006A22                 mov     ecx, [eax]
.text$mn:00006A24                 mov     edx, [ebp+var_1C]
.text$mn:00006A27                 add     edx, [ecx+4]
.text$mn:00006A2A                 mov     ecx, edx
.text$mn:00006A2C                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00006A31                 jmp     short loc_6A5A
.text$mn:00006A33 ; ---------------------------------------------------------------------------
.text$mn:00006A33                 jmp     short loc_6A58
.text$mn:00006A35 ; ---------------------------------------------------------------------------
.text$mn:00006A35
.text$mn:00006A35 loc_6A35:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+13Dj
.text$mn:00006A35                 lea     eax, [ebp+var_14]
.text$mn:00006A38                 push    eax
.text$mn:00006A39                 call    ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z ; std::char_traits<wchar_t>::to_char_type(ushort const &)
.text$mn:00006A3E                 add     esp, 4
.text$mn:00006A41                 movzx   ecx, ax
.text$mn:00006A44                 push    ecx
.text$mn:00006A45                 push    48h ; 'H'
.text$mn:00006A47                 mov     ecx, [ebp+var_2C]
.text$mn:00006A4A                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:00006A4F                 movzx   edx, al
.text$mn:00006A52                 test    edx, edx
.text$mn:00006A54                 jnz     short loc_6A58
.text$mn:00006A56                 jmp     short loc_6A5A
.text$mn:00006A58 ; ---------------------------------------------------------------------------
.text$mn:00006A58
.text$mn:00006A58 loc_6A58:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+157j
.text$mn:00006A58                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+178j
.text$mn:00006A58                 jmp     short loc_69E0
.text$mn:00006A5A ; ---------------------------------------------------------------------------
.text$mn:00006A5A
.text$mn:00006A5A loc_6A5A:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+155j
.text$mn:00006A5A                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+17Aj
.text$mn:00006A5A                 jmp     short loc_6A78
.text$mn:00006A5A ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z endp
.text$mn:00006A5A
.text$mn:00006A5C
.text$mn:00006A5C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A5C
.text$mn:00006A5C
.text$mn:00006A5C __catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0 proc near
.text$mn:00006A5C                                         ; DATA XREF: .xdata$x:0000979Co
.text$mn:00006A5C                 push    1
.text$mn:00006A5E                 push    4
.text$mn:00006A60                 mov     eax, [ebp-1Ch]
.text$mn:00006A63                 mov     ecx, [eax]
.text$mn:00006A65                 mov     edx, [ebp-1Ch]
.text$mn:00006A68                 add     edx, [ecx+4]
.text$mn:00006A6B                 mov     ecx, edx
.text$mn:00006A6D                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00006A72                 mov     eax, offset $LN18
.text$mn:00006A77                 retn
.text$mn:00006A77 __catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0 endp
.text$mn:00006A77
.text$mn:00006A78 ; ---------------------------------------------------------------------------
.text$mn:00006A78 ; START OF FUNCTION CHUNK FOR ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:00006A78
.text$mn:00006A78 loc_6A78:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool):loc_6A5Aj
.text$mn:00006A78                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A7F                 jmp     short loc_6A88
.text$mn:00006A7F ; END OF FUNCTION CHUNK FOR ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:00006A81
.text$mn:00006A81 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A81
.text$mn:00006A81
.text$mn:00006A81 $LN18           proc near               ; DATA XREF: __catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0+16o
.text$mn:00006A81                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00006A81 $LN18           endp ; sp-analysis failed
.text$mn:00006A81
.text$mn:00006A88 ; START OF FUNCTION CHUNK FOR ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:00006A88
.text$mn:00006A88 loc_6A88:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+7Fj
.text$mn:00006A88                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+98j ...
.text$mn:00006A88                 mov     eax, [ebp+var_1C]
.text$mn:00006A8B                 mov     ecx, [eax]
.text$mn:00006A8D                 mov     edx, [ebp+var_1C]
.text$mn:00006A90                 add     edx, [ecx+4]
.text$mn:00006A93                 mov     ecx, edx        ; this
.text$mn:00006A95                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00006A9A                 movzx   eax, al
.text$mn:00006A9D                 test    eax, eax
.text$mn:00006A9F                 jz      short loc_6AA5
.text$mn:00006AA1                 mov     al, 1
.text$mn:00006AA3                 jmp     short loc_6ABB
.text$mn:00006AA5 ; ---------------------------------------------------------------------------
.text$mn:00006AA5
.text$mn:00006AA5 loc_6AA5:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+46j
.text$mn:00006AA5                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+1C3j
.text$mn:00006AA5                 push    0
.text$mn:00006AA7                 push    2
.text$mn:00006AA9                 mov     ecx, [ebp+var_1C]
.text$mn:00006AAC                 mov     edx, [ecx]
.text$mn:00006AAE                 mov     ecx, [ebp+var_1C]
.text$mn:00006AB1                 add     ecx, [edx+4]
.text$mn:00006AB4                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00006AB9                 xor     al, al
.text$mn:00006ABB
.text$mn:00006ABB loc_6ABB:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+1C7j
.text$mn:00006ABB                 mov     ecx, [ebp+var_C]
.text$mn:00006ABE                 mov     large fs:0, ecx
.text$mn:00006AC5                 pop     ecx
.text$mn:00006AC6                 pop     edi
.text$mn:00006AC7                 pop     esi
.text$mn:00006AC8                 pop     ebx
.text$mn:00006AC9                 mov     esp, ebp
.text$mn:00006ACB                 pop     ebp
.text$mn:00006ACC                 retn    4
.text$mn:00006ACC ; END OF FUNCTION CHUNK FOR ?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$mn:00006ACC ; ---------------------------------------------------------------------------
.text$mn:00006ACF                 align 10h
.text$mn:00006ACF _text$mn        ends
.text$mn:00006ACF
.text$x:00006AD0 ; ===========================================================================
.text$x:00006AD0
.text$x:00006AD0 ; Segment type: Pure code
.text$x:00006AD0 ; Segment permissions: Read/Execute
.text$x:00006AD0 _text$x         segment para public 'CODE' use32
.text$x:00006AD0                 assume cs:_text$x
.text$x:00006AD0                 ;org 6AD0h
.text$x:00006AD0 ; COMDAT (pick associative to section at 68DC)
.text$x:00006AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AD0
.text$x:00006AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00006AD0
.text$x:00006AD0
.text$x:00006AD0 __unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2 proc near
.text$x:00006AD0                                         ; DATA XREF: .xdata$x:000097B8o
.text$x:00006AD0                 lea     ecx, [ebp-28h]  ; this
.text$x:00006AD3                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:00006AD3 __unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2 endp
.text$x:00006AD3
.text$x:00006AD8
.text$x:00006AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00006AD8
.text$x:00006AD8
.text$x:00006AD8 __ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z proc near
.text$x:00006AD8                                         ; DATA XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+5o
.text$x:00006AD8
.text$x:00006AD8 arg_4           = dword ptr  8
.text$x:00006AD8
.text$x:00006AD8                 mov     edx, [esp+arg_4]
.text$x:00006ADC                 lea     eax, [edx+0Ch]
.text$x:00006ADF                 mov     ecx, [edx-30h]
.text$x:00006AE2                 xor     ecx, eax
.text$x:00006AE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AE9                 mov     eax, offset __ehfuncinfo$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.text$x:00006AEE                 jmp     ___CxxFrameHandler3
.text$x:00006AEE __ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z endp
.text$x:00006AEE
.text$x:00006AEE ; ---------------------------------------------------------------------------
.text$x:00006AF3                 align 4
.text$x:00006AF3 _text$x         ends
.text$x:00006AF3
.text$mn:00006AF4 ; ===========================================================================
.text$mn:00006AF4
.text$mn:00006AF4 ; Segment type: Pure code
.text$mn:00006AF4 ; Segment permissions: Read/Execute
.text$mn:00006AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00006AF4                 assume cs:_text$mn
.text$mn:00006AF4                 ;org 6AF4h
.text$mn:00006AF4 ; COMDAT (pick any)
.text$mn:00006AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AF4
.text$mn:00006AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AF4
.text$mn:00006AF4 ; Attributes: bp-based frame
.text$mn:00006AF4
.text$mn:00006AF4 ; private: static class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __cdecl std::_System_error::_Makestr(class std::error_code, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>)
.text$mn:00006AF4                 public ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:00006AF4 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$mn:00006AF4                                         ; CODE XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Fp
.text$mn:00006AF4
.text$mn:00006AF4 var_38          = dword ptr -38h
.text$mn:00006AF4 var_34          = dword ptr -34h
.text$mn:00006AF4 var_30          = dword ptr -30h
.text$mn:00006AF4 var_2C          = byte ptr -2Ch
.text$mn:00006AF4 var_10          = dword ptr -10h
.text$mn:00006AF4 var_C           = dword ptr -0Ch
.text$mn:00006AF4 var_4           = dword ptr -4
.text$mn:00006AF4 arg_0           = dword ptr  8
.text$mn:00006AF4 arg_4           = byte ptr  0Ch
.text$mn:00006AF4 arg_C           = byte ptr  14h
.text$mn:00006AF4
.text$mn:00006AF4                 push    ebp
.text$mn:00006AF5                 mov     ebp, esp
.text$mn:00006AF7                 push    0FFFFFFFFh
.text$mn:00006AF9                 push    offset __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$mn:00006AFE                 mov     eax, large fs:0
.text$mn:00006B04                 push    eax
.text$mn:00006B05                 sub     esp, 2Ch
.text$mn:00006B08                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B0D                 xor     eax, ebp
.text$mn:00006B0F                 mov     [ebp+var_10], eax
.text$mn:00006B12                 push    eax
.text$mn:00006B13                 lea     eax, [ebp+var_C]
.text$mn:00006B16                 mov     large fs:0, eax
.text$mn:00006B1C                 mov     [ebp+var_30], 0
.text$mn:00006B23                 mov     [ebp+var_4], 1
.text$mn:00006B2A                 lea     ecx, [ebp+arg_C]
.text$mn:00006B2D                 call    ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)
.text$mn:00006B32                 movzx   eax, al
.text$mn:00006B35                 test    eax, eax
.text$mn:00006B37                 jnz     short loc_6B46
.text$mn:00006B39                 push    offset ??_C@_02LMMGGCAJ@?3?5?$AA@ ; ": "
.text$mn:00006B3E                 lea     ecx, [ebp+arg_C]
.text$mn:00006B41                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)
.text$mn:00006B46
.text$mn:00006B46 loc_6B46:                               ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+43j
.text$mn:00006B46                 lea     ecx, [ebp+var_2C]
.text$mn:00006B49                 push    ecx
.text$mn:00006B4A                 lea     ecx, [ebp+arg_4]
.text$mn:00006B4D                 call    ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message(void)
.text$mn:00006B52                 mov     [ebp+var_34], eax
.text$mn:00006B55                 mov     edx, [ebp+var_34]
.text$mn:00006B58                 mov     [ebp+var_38], edx
.text$mn:00006B5B                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006B5F                 mov     eax, [ebp+var_38]
.text$mn:00006B62                 push    eax
.text$mn:00006B63                 lea     ecx, [ebp+arg_C]
.text$mn:00006B66                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text$mn:00006B6B                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006B6F                 lea     ecx, [ebp+var_2C]
.text$mn:00006B72                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00006B77                 lea     ecx, [ebp+arg_C]
.text$mn:00006B7A                 push    ecx
.text$mn:00006B7B                 mov     ecx, [ebp+arg_0]
.text$mn:00006B7E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00006B83                 mov     edx, [ebp+var_30]
.text$mn:00006B86                 or      edx, 1
.text$mn:00006B89                 mov     [ebp+var_30], edx
.text$mn:00006B8C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006B90                 lea     ecx, [ebp+arg_C]
.text$mn:00006B93                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00006B98                 mov     eax, [ebp+arg_0]
.text$mn:00006B9B                 mov     ecx, [ebp+var_C]
.text$mn:00006B9E                 mov     large fs:0, ecx
.text$mn:00006BA5                 pop     ecx
.text$mn:00006BA6                 mov     ecx, [ebp+var_10]
.text$mn:00006BA9                 xor     ecx, ebp
.text$mn:00006BAB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00006BB0                 mov     esp, ebp
.text$mn:00006BB2                 pop     ebp
.text$mn:00006BB3                 retn
.text$mn:00006BB3 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$mn:00006BB3
.text$mn:00006BB3 _text$mn        ends
.text$mn:00006BB3
.text$x:00006BB4 ; ===========================================================================
.text$x:00006BB4
.text$x:00006BB4 ; Segment type: Pure code
.text$x:00006BB4 ; Segment permissions: Read/Execute
.text$x:00006BB4 _text$x         segment para public 'CODE' use32
.text$x:00006BB4                 assume cs:_text$x
.text$x:00006BB4                 ;org 6BB4h
.text$x:00006BB4 ; COMDAT (pick associative to section at 6AF4)
.text$x:00006BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006BB4
.text$x:00006BB4 ; =============== S U B R O U T I N E =======================================
.text$x:00006BB4
.text$x:00006BB4
.text$x:00006BB4 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 proc near
.text$x:00006BB4                                         ; DATA XREF: .xdata$x:000093F4o
.text$x:00006BB4                 lea     ecx, [ebp+14h]
.text$x:00006BB7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006BB7 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0 endp
.text$x:00006BB7
.text$x:00006BBC
.text$x:00006BBC ; =============== S U B R O U T I N E =======================================
.text$x:00006BBC
.text$x:00006BBC
.text$x:00006BBC __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 proc near
.text$x:00006BBC                                         ; DATA XREF: .xdata$x:000093FCo
.text$x:00006BBC                 lea     ecx, [ebp-2Ch]
.text$x:00006BBF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006BBF __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1 endp
.text$x:00006BBF
.text$x:00006BC4
.text$x:00006BC4 ; =============== S U B R O U T I N E =======================================
.text$x:00006BC4
.text$x:00006BC4
.text$x:00006BC4 __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 proc near
.text$x:00006BC4                                         ; DATA XREF: .xdata$x:000093ECo
.text$x:00006BC4                 mov     eax, [ebp-30h]
.text$x:00006BC7                 and     eax, 1
.text$x:00006BCA                 jz      $LN7
.text$x:00006BD0                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:00006BD4                 mov     ecx, [ebp+8]
.text$x:00006BD7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006BDC ; ---------------------------------------------------------------------------
.text$x:00006BDC
.text$x:00006BDC $LN7:                                   ; CODE XREF: __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2+6j
.text$x:00006BDC                 retn
.text$x:00006BDC __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2 endp
.text$x:00006BDC
.text$x:00006BDD
.text$x:00006BDD ; =============== S U B R O U T I N E =======================================
.text$x:00006BDD
.text$x:00006BDD
.text$x:00006BDD __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z proc near
.text$x:00006BDD                                         ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+5o
.text$x:00006BDD
.text$x:00006BDD arg_4           = dword ptr  8
.text$x:00006BDD
.text$x:00006BDD                 mov     edx, [esp+arg_4]
.text$x:00006BE1                 lea     eax, [edx+0Ch]
.text$x:00006BE4                 mov     ecx, [edx-30h]
.text$x:00006BE7                 xor     ecx, eax
.text$x:00006BE9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BEE                 mov     ecx, [edx-4]
.text$x:00006BF1                 xor     ecx, eax
.text$x:00006BF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BF8                 mov     eax, offset __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.text$x:00006BFD                 jmp     ___CxxFrameHandler3
.text$x:00006BFD __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z endp
.text$x:00006BFD
.text$x:00006BFD ; ---------------------------------------------------------------------------
.text$x:00006C02                 align 4
.text$x:00006C02 _text$x         ends
.text$x:00006C02
.text$mn:00006C04 ; ===========================================================================
.text$mn:00006C04
.text$mn:00006C04 ; Segment type: Pure code
.text$mn:00006C04 ; Segment permissions: Read/Execute
.text$mn:00006C04 _text$mn        segment para public 'CODE' use32
.text$mn:00006C04                 assume cs:_text$mn
.text$mn:00006C04                 ;org 6C04h
.text$mn:00006C04 ; COMDAT (pick any)
.text$mn:00006C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C04
.text$mn:00006C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C04
.text$mn:00006C04 ; Attributes: bp-based frame
.text$mn:00006C04
.text$mn:00006C04 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00006C04                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00006C04 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00006C04                                         ; CODE XREF: $LN19+14p
.text$mn:00006C04                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00006C04
.text$mn:00006C04 var_8           = dword ptr -8
.text$mn:00006C04 var_4           = dword ptr -4
.text$mn:00006C04
.text$mn:00006C04                 push    ebp
.text$mn:00006C05                 mov     ebp, esp
.text$mn:00006C07                 sub     esp, 8
.text$mn:00006C0A                 mov     [ebp+var_4], ecx
.text$mn:00006C0D                 mov     eax, [ebp+var_4]
.text$mn:00006C10                 cmp     dword ptr [eax+18h], 10h
.text$mn:00006C14                 jb      short loc_6C2A
.text$mn:00006C16                 mov     ecx, [ebp+var_4]
.text$mn:00006C19                 mov     edx, [ecx+4]
.text$mn:00006C1C                 push    edx
.text$mn:00006C1D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00006C22                 add     esp, 4
.text$mn:00006C25                 mov     [ebp+var_8], eax
.text$mn:00006C28                 jmp     short loc_6C33
.text$mn:00006C2A ; ---------------------------------------------------------------------------
.text$mn:00006C2A
.text$mn:00006C2A loc_6C2A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00006C2A                 mov     eax, [ebp+var_4]
.text$mn:00006C2D                 add     eax, 4
.text$mn:00006C30                 mov     [ebp+var_8], eax
.text$mn:00006C33
.text$mn:00006C33 loc_6C33:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00006C33                 mov     eax, [ebp+var_8]
.text$mn:00006C36                 mov     esp, ebp
.text$mn:00006C38                 pop     ebp
.text$mn:00006C39                 retn
.text$mn:00006C39 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00006C39
.text$mn:00006C39 ; ---------------------------------------------------------------------------
.text$mn:00006C3A                 align 4
.text$mn:00006C3A _text$mn        ends
.text$mn:00006C3A
.text$mn:00006C3C ; ===========================================================================
.text$mn:00006C3C
.text$mn:00006C3C ; Segment type: Pure code
.text$mn:00006C3C ; Segment permissions: Read/Execute
.text$mn:00006C3C _text$mn        segment para public 'CODE' use32
.text$mn:00006C3C                 assume cs:_text$mn
.text$mn:00006C3C                 ;org 6C3Ch
.text$mn:00006C3C ; COMDAT (pick any)
.text$mn:00006C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C3C
.text$mn:00006C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C3C
.text$mn:00006C3C ; Attributes: bp-based frame
.text$mn:00006C3C
.text$mn:00006C3C ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00006C3C                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00006C3C ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00006C3C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+80p
.text$mn:00006C3C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp ...
.text$mn:00006C3C
.text$mn:00006C3C var_8           = dword ptr -8
.text$mn:00006C3C var_4           = dword ptr -4
.text$mn:00006C3C
.text$mn:00006C3C                 push    ebp
.text$mn:00006C3D                 mov     ebp, esp
.text$mn:00006C3F                 sub     esp, 8
.text$mn:00006C42                 mov     [ebp+var_4], ecx
.text$mn:00006C45                 mov     eax, [ebp+var_4]
.text$mn:00006C48                 cmp     dword ptr [eax+18h], 10h
.text$mn:00006C4C                 jb      short loc_6C62
.text$mn:00006C4E                 mov     ecx, [ebp+var_4]
.text$mn:00006C51                 mov     edx, [ecx+4]
.text$mn:00006C54                 push    edx
.text$mn:00006C55                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00006C5A                 add     esp, 4
.text$mn:00006C5D                 mov     [ebp+var_8], eax
.text$mn:00006C60                 jmp     short loc_6C6B
.text$mn:00006C62 ; ---------------------------------------------------------------------------
.text$mn:00006C62
.text$mn:00006C62 loc_6C62:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00006C62                 mov     eax, [ebp+var_4]
.text$mn:00006C65                 add     eax, 4
.text$mn:00006C68                 mov     [ebp+var_8], eax
.text$mn:00006C6B
.text$mn:00006C6B loc_6C6B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00006C6B                 mov     eax, [ebp+var_8]
.text$mn:00006C6E                 mov     esp, ebp
.text$mn:00006C70                 pop     ebp
.text$mn:00006C71                 retn
.text$mn:00006C71 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00006C71
.text$mn:00006C71 ; ---------------------------------------------------------------------------
.text$mn:00006C72                 align 4
.text$mn:00006C72 _text$mn        ends
.text$mn:00006C72
.text$mn:00006C74 ; ===========================================================================
.text$mn:00006C74
.text$mn:00006C74 ; Segment type: Pure code
.text$mn:00006C74 ; Segment permissions: Read/Execute
.text$mn:00006C74 _text$mn        segment para public 'CODE' use32
.text$mn:00006C74                 assume cs:_text$mn
.text$mn:00006C74                 ;org 6C74h
.text$mn:00006C74 ; COMDAT (pick any)
.text$mn:00006C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C74
.text$mn:00006C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C74
.text$mn:00006C74 ; Attributes: bp-based frame
.text$mn:00006C74
.text$mn:00006C74 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006C74                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00006C74 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00006C74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+14p
.text$mn:00006C74                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+36p ...
.text$mn:00006C74
.text$mn:00006C74 var_8           = dword ptr -8
.text$mn:00006C74 var_4           = dword ptr -4
.text$mn:00006C74
.text$mn:00006C74                 push    ebp
.text$mn:00006C75                 mov     ebp, esp
.text$mn:00006C77                 sub     esp, 8
.text$mn:00006C7A                 mov     [ebp+var_4], ecx
.text$mn:00006C7D                 mov     eax, [ebp+var_4]
.text$mn:00006C80                 cmp     dword ptr [eax+18h], 8
.text$mn:00006C84                 jb      short loc_6C9A
.text$mn:00006C86                 mov     ecx, [ebp+var_4]
.text$mn:00006C89                 mov     edx, [ecx+4]
.text$mn:00006C8C                 push    edx
.text$mn:00006C8D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006C92                 add     esp, 4
.text$mn:00006C95                 mov     [ebp+var_8], eax
.text$mn:00006C98                 jmp     short loc_6CA3
.text$mn:00006C9A ; ---------------------------------------------------------------------------
.text$mn:00006C9A
.text$mn:00006C9A loc_6C9A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00006C9A                 mov     eax, [ebp+var_4]
.text$mn:00006C9D                 add     eax, 4
.text$mn:00006CA0                 mov     [ebp+var_8], eax
.text$mn:00006CA3
.text$mn:00006CA3 loc_6CA3:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00006CA3                 mov     eax, [ebp+var_8]
.text$mn:00006CA6                 mov     esp, ebp
.text$mn:00006CA8                 pop     ebp
.text$mn:00006CA9                 retn
.text$mn:00006CA9 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00006CA9
.text$mn:00006CA9 ; ---------------------------------------------------------------------------
.text$mn:00006CAA                 align 4
.text$mn:00006CAA _text$mn        ends
.text$mn:00006CAA
.text$mn:00006CAC ; ===========================================================================
.text$mn:00006CAC
.text$mn:00006CAC ; Segment type: Pure code
.text$mn:00006CAC ; Segment permissions: Read/Execute
.text$mn:00006CAC _text$mn        segment para public 'CODE' use32
.text$mn:00006CAC                 assume cs:_text$mn
.text$mn:00006CAC                 ;org 6CACh
.text$mn:00006CAC ; COMDAT (pick any)
.text$mn:00006CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CAC
.text$mn:00006CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006CAC
.text$mn:00006CAC ; Attributes: bp-based frame
.text$mn:00006CAC
.text$mn:00006CAC ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00006CAC                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00006CAC ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00006CAC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+2Cp
.text$mn:00006CAC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p ...
.text$mn:00006CAC
.text$mn:00006CAC var_8           = dword ptr -8
.text$mn:00006CAC var_4           = dword ptr -4
.text$mn:00006CAC
.text$mn:00006CAC                 push    ebp
.text$mn:00006CAD                 mov     ebp, esp
.text$mn:00006CAF                 sub     esp, 8
.text$mn:00006CB2                 mov     [ebp+var_4], ecx
.text$mn:00006CB5                 mov     eax, [ebp+var_4]
.text$mn:00006CB8                 cmp     dword ptr [eax+18h], 8
.text$mn:00006CBC                 jb      short loc_6CD2
.text$mn:00006CBE                 mov     ecx, [ebp+var_4]
.text$mn:00006CC1                 mov     edx, [ecx+4]
.text$mn:00006CC4                 push    edx
.text$mn:00006CC5                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006CCA                 add     esp, 4
.text$mn:00006CCD                 mov     [ebp+var_8], eax
.text$mn:00006CD0                 jmp     short loc_6CDB
.text$mn:00006CD2 ; ---------------------------------------------------------------------------
.text$mn:00006CD2
.text$mn:00006CD2 loc_6CD2:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00006CD2                 mov     eax, [ebp+var_4]
.text$mn:00006CD5                 add     eax, 4
.text$mn:00006CD8                 mov     [ebp+var_8], eax
.text$mn:00006CDB
.text$mn:00006CDB loc_6CDB:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00006CDB                 mov     eax, [ebp+var_8]
.text$mn:00006CDE                 mov     esp, ebp
.text$mn:00006CE0                 pop     ebp
.text$mn:00006CE1                 retn
.text$mn:00006CE1 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00006CE1
.text$mn:00006CE1 ; ---------------------------------------------------------------------------
.text$mn:00006CE2                 align 4
.text$mn:00006CE2 _text$mn        ends
.text$mn:00006CE2
.text$mn:00006CE4 ; ===========================================================================
.text$mn:00006CE4
.text$mn:00006CE4 ; Segment type: Pure code
.text$mn:00006CE4 ; Segment permissions: Read/Execute
.text$mn:00006CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00006CE4                 assume cs:_text$mn
.text$mn:00006CE4                 ;org 6CE4h
.text$mn:00006CE4 ; COMDAT (pick any)
.text$mn:00006CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CE4
.text$mn:00006CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CE4
.text$mn:00006CE4 ; Attributes: bp-based frame
.text$mn:00006CE4
.text$mn:00006CE4 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00006CE4                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00006CE4 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00006CE4                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00006CE4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00006CE4
.text$mn:00006CE4 var_18          = byte ptr -18h
.text$mn:00006CE4 var_14          = dword ptr -14h
.text$mn:00006CE4 var_10          = dword ptr -10h
.text$mn:00006CE4 var_C           = dword ptr -0Ch
.text$mn:00006CE4 var_4           = dword ptr -4
.text$mn:00006CE4
.text$mn:00006CE4                 push    ebp
.text$mn:00006CE5                 mov     ebp, esp
.text$mn:00006CE7                 push    0FFFFFFFFh
.text$mn:00006CE9                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00006CEE                 mov     eax, large fs:0
.text$mn:00006CF4                 push    eax
.text$mn:00006CF5                 sub     esp, 0Ch
.text$mn:00006CF8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CFD                 xor     eax, ebp
.text$mn:00006CFF                 push    eax
.text$mn:00006D00                 lea     eax, [ebp+var_C]
.text$mn:00006D03                 mov     large fs:0, eax
.text$mn:00006D09                 mov     [ebp+var_14], ecx
.text$mn:00006D0C                 mov     eax, [ebp+var_14]
.text$mn:00006D0F                 cmp     dword ptr [eax], 0
.text$mn:00006D12                 jz      short loc_6D6F
.text$mn:00006D14                 push    3               ; int
.text$mn:00006D16                 lea     ecx, [ebp+var_18] ; this
.text$mn:00006D19                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00006D1E                 mov     [ebp+var_4], 0
.text$mn:00006D25                 mov     ecx, [ebp+var_14]
.text$mn:00006D28                 mov     edx, [ecx]
.text$mn:00006D2A                 add     edx, 4
.text$mn:00006D2D                 mov     [ebp+var_10], edx
.text$mn:00006D30                 jmp     short loc_6D3F
.text$mn:00006D32 ; ---------------------------------------------------------------------------
.text$mn:00006D32
.text$mn:00006D32 loc_6D32:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00006D32                 mov     eax, [ebp+var_10]
.text$mn:00006D35                 mov     ecx, [eax]
.text$mn:00006D37                 mov     edx, [ebp+var_10]
.text$mn:00006D3A                 mov     eax, [ecx+4]
.text$mn:00006D3D                 mov     [edx], eax
.text$mn:00006D3F
.text$mn:00006D3F loc_6D3F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00006D3F                 mov     ecx, [ebp+var_10]
.text$mn:00006D42                 cmp     dword ptr [ecx], 0
.text$mn:00006D45                 jz      short loc_6D54
.text$mn:00006D47                 mov     edx, [ebp+var_10]
.text$mn:00006D4A                 mov     eax, [edx]
.text$mn:00006D4C                 mov     dword ptr [eax], 0
.text$mn:00006D52                 jmp     short loc_6D32
.text$mn:00006D54 ; ---------------------------------------------------------------------------
.text$mn:00006D54
.text$mn:00006D54 loc_6D54:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00006D54                 mov     ecx, [ebp+var_14]
.text$mn:00006D57                 mov     edx, [ecx]
.text$mn:00006D59                 mov     dword ptr [edx+4], 0
.text$mn:00006D60                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D67                 lea     ecx, [ebp+var_18] ; this
.text$mn:00006D6A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006D6F
.text$mn:00006D6F loc_6D6F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00006D6F                 mov     ecx, [ebp+var_C]
.text$mn:00006D72                 mov     large fs:0, ecx
.text$mn:00006D79                 pop     ecx
.text$mn:00006D7A                 mov     esp, ebp
.text$mn:00006D7C                 pop     ebp
.text$mn:00006D7D                 retn
.text$mn:00006D7D ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00006D7D
.text$mn:00006D7D ; ---------------------------------------------------------------------------
.text$mn:00006D7E                 align 10h
.text$mn:00006D7E _text$mn        ends
.text$mn:00006D7E
.text$x:00006D80 ; ===========================================================================
.text$x:00006D80
.text$x:00006D80 ; Segment type: Pure code
.text$x:00006D80 ; Segment permissions: Read/Execute
.text$x:00006D80 _text$x         segment para public 'CODE' use32
.text$x:00006D80                 assume cs:_text$x
.text$x:00006D80                 ;org 6D80h
.text$x:00006D80 ; COMDAT (pick associative to section at 6CE4)
.text$x:00006D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D80
.text$x:00006D80 ; =============== S U B R O U T I N E =======================================
.text$x:00006D80
.text$x:00006D80
.text$x:00006D80 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00006D80                                         ; DATA XREF: .xdata$x:00008ED0o
.text$x:00006D80                 lea     ecx, [ebp-18h]  ; this
.text$x:00006D83                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006D83 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00006D83
.text$x:00006D88
.text$x:00006D88 ; =============== S U B R O U T I N E =======================================
.text$x:00006D88
.text$x:00006D88
.text$x:00006D88 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00006D88                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00006D88
.text$x:00006D88 arg_4           = dword ptr  8
.text$x:00006D88
.text$x:00006D88                 mov     edx, [esp+arg_4]
.text$x:00006D8C                 lea     eax, [edx+0Ch]
.text$x:00006D8F                 mov     ecx, [edx-10h]
.text$x:00006D92                 xor     ecx, eax
.text$x:00006D94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D99                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00006D9E                 jmp     ___CxxFrameHandler3
.text$x:00006D9E __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00006D9E
.text$x:00006D9E ; ---------------------------------------------------------------------------
.text$x:00006DA3                 align 4
.text$x:00006DA3 _text$x         ends
.text$x:00006DA3
.text$mn:00006DA4 ; ===========================================================================
.text$mn:00006DA4
.text$mn:00006DA4 ; Segment type: Pure code
.text$mn:00006DA4 ; Segment permissions: Read/Execute
.text$mn:00006DA4 _text$mn        segment para public 'CODE' use32
.text$mn:00006DA4                 assume cs:_text$mn
.text$mn:00006DA4                 ;org 6DA4h
.text$mn:00006DA4 ; COMDAT (pick any)
.text$mn:00006DA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DA4
.text$mn:00006DA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DA4
.text$mn:00006DA4 ; Attributes: bp-based frame
.text$mn:00006DA4
.text$mn:00006DA4 ; public: void __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::_Osfx(void)
.text$mn:00006DA4                 public ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00006DA4 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ proc near
.text$mn:00006DA4                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+3Ep
.text$mn:00006DA4
.text$mn:00006DA4 var_14          = dword ptr -14h
.text$mn:00006DA4 var_10          = dword ptr -10h
.text$mn:00006DA4 var_C           = byte ptr -0Ch
.text$mn:00006DA4 var_4           = dword ptr -4
.text$mn:00006DA4
.text$mn:00006DA4 ; FUNCTION CHUNK AT .text$mn:00006E42 SIZE 00000009 BYTES
.text$mn:00006DA4
.text$mn:00006DA4                 push    ebp
.text$mn:00006DA5                 mov     ebp, esp
.text$mn:00006DA7                 push    0FFFFFFFFh
.text$mn:00006DA9                 push    offset __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00006DAE                 mov     eax, large fs:0
.text$mn:00006DB4                 push    eax
.text$mn:00006DB5                 push    ecx
.text$mn:00006DB6                 push    ecx
.text$mn:00006DB7                 push    ebx
.text$mn:00006DB8                 push    esi
.text$mn:00006DB9                 push    edi
.text$mn:00006DBA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006DBF                 xor     eax, ebp
.text$mn:00006DC1                 push    eax
.text$mn:00006DC2                 lea     eax, [ebp+var_C]
.text$mn:00006DC5                 mov     large fs:0, eax
.text$mn:00006DCB                 mov     [ebp+var_10], esp
.text$mn:00006DCE                 mov     [ebp+var_14], ecx
.text$mn:00006DD1                 mov     [ebp+var_4], 0
.text$mn:00006DD8                 mov     eax, [ebp+var_14]
.text$mn:00006DDB                 mov     ecx, [eax]
.text$mn:00006DDD                 mov     edx, [ebp+var_14]
.text$mn:00006DE0                 add     edx, [ecx+4]
.text$mn:00006DE3                 mov     ecx, edx        ; this
.text$mn:00006DE5                 call    ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good(void)
.text$mn:00006DEA                 movzx   eax, al
.text$mn:00006DED                 test    eax, eax
.text$mn:00006DEF                 jz      short loc_6E3A
.text$mn:00006DF1                 mov     ecx, [ebp+var_14]
.text$mn:00006DF4                 mov     edx, [ecx]
.text$mn:00006DF6                 mov     ecx, [ebp+var_14]
.text$mn:00006DF9                 add     ecx, [edx+4]    ; this
.text$mn:00006DFC                 call    ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags(void)
.text$mn:00006E01                 and     eax, 2
.text$mn:00006E04                 jz      short loc_6E3A
.text$mn:00006E06                 mov     eax, [ebp+var_14]
.text$mn:00006E09                 mov     ecx, [eax]
.text$mn:00006E0B                 mov     edx, [ebp+var_14]
.text$mn:00006E0E                 add     edx, [ecx+4]
.text$mn:00006E11                 mov     ecx, edx
.text$mn:00006E13                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00006E18                 mov     ecx, eax
.text$mn:00006E1A                 call    ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pubsync(void)
.text$mn:00006E1F                 cmp     eax, 0FFFFFFFFh
.text$mn:00006E22                 jnz     short loc_6E3A
.text$mn:00006E24                 push    0
.text$mn:00006E26                 push    4
.text$mn:00006E28                 mov     eax, [ebp+var_14]
.text$mn:00006E2B                 mov     ecx, [eax]
.text$mn:00006E2D                 mov     edx, [ebp+var_14]
.text$mn:00006E30                 add     edx, [ecx+4]
.text$mn:00006E33                 mov     ecx, edx
.text$mn:00006E35                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00006E3A
.text$mn:00006E3A loc_6E3A:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+4Bj
.text$mn:00006E3A                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+60j ...
.text$mn:00006E3A                 jmp     short loc_6E42
.text$mn:00006E3A ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ endp
.text$mn:00006E3A
.text$mn:00006E3C
.text$mn:00006E3C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E3C
.text$mn:00006E3C
.text$mn:00006E3C __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0 proc near
.text$mn:00006E3C                                         ; DATA XREF: .xdata$x:00009E14o
.text$mn:00006E3C                 mov     eax, offset $LN9
.text$mn:00006E41                 retn
.text$mn:00006E41 __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0 endp
.text$mn:00006E41
.text$mn:00006E42 ; ---------------------------------------------------------------------------
.text$mn:00006E42 ; START OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00006E42
.text$mn:00006E42 loc_6E42:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void):loc_6E3Aj
.text$mn:00006E42                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E49                 jmp     short loc_6E52
.text$mn:00006E49 ; END OF FUNCTION CHUNK FOR ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$mn:00006E4B
.text$mn:00006E4B ; =============== S U B R O U T I N E =======================================
.text$mn:00006E4B
.text$mn:00006E4B
.text$mn:00006E4B $LN9            proc near               ; DATA XREF: __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0o
.text$mn:00006E4B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00006E52
.text$mn:00006E52 loc_6E52:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+A5j
.text$mn:00006E52                 mov     ecx, [ebp-0Ch]
.text$mn:00006E55                 mov     large fs:0, ecx
.text$mn:00006E5C                 pop     ecx
.text$mn:00006E5D                 pop     edi
.text$mn:00006E5E                 pop     esi
.text$mn:00006E5F                 pop     ebx
.text$mn:00006E60                 mov     esp, ebp
.text$mn:00006E62                 pop     ebp
.text$mn:00006E63                 retn
.text$mn:00006E63 $LN9            endp ; sp-analysis failed
.text$mn:00006E63
.text$mn:00006E63 _text$mn        ends
.text$mn:00006E63
.text$x:00006E64 ; ===========================================================================
.text$x:00006E64
.text$x:00006E64 ; Segment type: Pure code
.text$x:00006E64 ; Segment permissions: Read/Execute
.text$x:00006E64 _text$x         segment para public 'CODE' use32
.text$x:00006E64                 assume cs:_text$x
.text$x:00006E64                 ;org 6E64h
.text$x:00006E64 ; COMDAT (pick associative to section at 6DA4)
.text$x:00006E64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E64
.text$x:00006E64 ; =============== S U B R O U T I N E =======================================
.text$x:00006E64
.text$x:00006E64
.text$x:00006E64 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ proc near
.text$x:00006E64                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+5o
.text$x:00006E64
.text$x:00006E64 arg_4           = dword ptr  8
.text$x:00006E64
.text$x:00006E64                 mov     edx, [esp+arg_4]
.text$x:00006E68                 lea     eax, [edx+0Ch]
.text$x:00006E6B                 mov     ecx, [edx-18h]
.text$x:00006E6E                 xor     ecx, eax
.text$x:00006E70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E75                 mov     eax, offset __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.text$x:00006E7A                 jmp     ___CxxFrameHandler3
.text$x:00006E7A __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ endp
.text$x:00006E7A
.text$x:00006E7A ; ---------------------------------------------------------------------------
.text$x:00006E7F                 align 10h
.text$x:00006E7F _text$x         ends
.text$x:00006E7F
.text$mn:00006E80 ; ===========================================================================
.text$mn:00006E80
.text$mn:00006E80 ; Segment type: Pure code
.text$mn:00006E80 ; Segment permissions: Read/Execute
.text$mn:00006E80 _text$mn        segment para public 'CODE' use32
.text$mn:00006E80                 assume cs:_text$mn
.text$mn:00006E80                 ;org 6E80h
.text$mn:00006E80 ; COMDAT (pick any)
.text$mn:00006E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E80
.text$mn:00006E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E80
.text$mn:00006E80 ; Attributes: bp-based frame
.text$mn:00006E80
.text$mn:00006E80 ; private: void __thiscall std::_Yarn<char>::_Tidy(void)
.text$mn:00006E80                 public ?_Tidy@?$_Yarn@D@std@@AAEXXZ
.text$mn:00006E80 ?_Tidy@?$_Yarn@D@std@@AAEXXZ proc near  ; CODE XREF: std::_Yarn<char>::~_Yarn<char>(void)+Ap
.text$mn:00006E80
.text$mn:00006E80 var_4           = dword ptr -4
.text$mn:00006E80
.text$mn:00006E80                 push    ebp
.text$mn:00006E81                 mov     ebp, esp
.text$mn:00006E83                 push    ecx
.text$mn:00006E84                 mov     [ebp+var_4], ecx
.text$mn:00006E87                 mov     eax, [ebp+var_4]
.text$mn:00006E8A                 cmp     dword ptr [eax], 0
.text$mn:00006E8D                 jz      short loc_6E9F
.text$mn:00006E8F                 push    2
.text$mn:00006E91                 mov     ecx, [ebp+var_4]
.text$mn:00006E94                 mov     edx, [ecx]
.text$mn:00006E96                 push    edx
.text$mn:00006E97                 call    __free_dbg
.text$mn:00006E9C                 add     esp, 8
.text$mn:00006E9F
.text$mn:00006E9F loc_6E9F:                               ; CODE XREF: std::_Yarn<char>::_Tidy(void)+Dj
.text$mn:00006E9F                 mov     eax, [ebp+var_4]
.text$mn:00006EA2                 mov     dword ptr [eax], 0
.text$mn:00006EA8                 mov     esp, ebp
.text$mn:00006EAA                 pop     ebp
.text$mn:00006EAB                 retn
.text$mn:00006EAB ?_Tidy@?$_Yarn@D@std@@AAEXXZ endp
.text$mn:00006EAB
.text$mn:00006EAB _text$mn        ends
.text$mn:00006EAB
.text$mn:00006EAC ; ===========================================================================
.text$mn:00006EAC
.text$mn:00006EAC ; Segment type: Pure code
.text$mn:00006EAC ; Segment permissions: Read/Execute
.text$mn:00006EAC _text$mn        segment para public 'CODE' use32
.text$mn:00006EAC                 assume cs:_text$mn
.text$mn:00006EAC                 ;org 6EACh
.text$mn:00006EAC ; COMDAT (pick any)
.text$mn:00006EAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EAC
.text$mn:00006EAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EAC
.text$mn:00006EAC ; Attributes: bp-based frame
.text$mn:00006EAC
.text$mn:00006EAC ; private: void __thiscall std::_Yarn<wchar_t>::_Tidy(void)
.text$mn:00006EAC                 public ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
.text$mn:00006EAC ?_Tidy@?$_Yarn@_W@std@@AAEXXZ proc near ; CODE XREF: std::_Yarn<wchar_t>::~_Yarn<wchar_t>(void)+Ap
.text$mn:00006EAC
.text$mn:00006EAC var_4           = dword ptr -4
.text$mn:00006EAC
.text$mn:00006EAC                 push    ebp
.text$mn:00006EAD                 mov     ebp, esp
.text$mn:00006EAF                 push    ecx
.text$mn:00006EB0                 mov     [ebp+var_4], ecx
.text$mn:00006EB3                 mov     eax, [ebp+var_4]
.text$mn:00006EB6                 cmp     dword ptr [eax], 0
.text$mn:00006EB9                 jz      short loc_6ECB
.text$mn:00006EBB                 push    2
.text$mn:00006EBD                 mov     ecx, [ebp+var_4]
.text$mn:00006EC0                 mov     edx, [ecx]
.text$mn:00006EC2                 push    edx
.text$mn:00006EC3                 call    __free_dbg
.text$mn:00006EC8                 add     esp, 8
.text$mn:00006ECB
.text$mn:00006ECB loc_6ECB:                               ; CODE XREF: std::_Yarn<wchar_t>::_Tidy(void)+Dj
.text$mn:00006ECB                 mov     eax, [ebp+var_4]
.text$mn:00006ECE                 mov     dword ptr [eax], 0
.text$mn:00006ED4                 mov     esp, ebp
.text$mn:00006ED6                 pop     ebp
.text$mn:00006ED7                 retn
.text$mn:00006ED7 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ endp
.text$mn:00006ED7
.text$mn:00006ED7 _text$mn        ends
.text$mn:00006ED7
.text$mn:00006ED8 ; ===========================================================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Segment type: Pure code
.text$mn:00006ED8 ; Segment permissions: Read/Execute
.text$mn:00006ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED8                 assume cs:_text$mn
.text$mn:00006ED8                 ;org 6ED8h
.text$mn:00006ED8 ; COMDAT (pick any)
.text$mn:00006ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED8
.text$mn:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Attributes: bp-based frame
.text$mn:00006ED8
.text$mn:00006ED8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00006ED8                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00006ED8 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00006ED8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+4Bp
.text$mn:00006ED8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+56p ...
.text$mn:00006ED8
.text$mn:00006ED8 var_C           = dword ptr -0Ch
.text$mn:00006ED8 var_8           = dword ptr -8
.text$mn:00006ED8 var_2           = byte ptr -2
.text$mn:00006ED8 var_1           = byte ptr -1
.text$mn:00006ED8 arg_0           = byte ptr  8
.text$mn:00006ED8 Size            = dword ptr  0Ch
.text$mn:00006ED8
.text$mn:00006ED8                 push    ebp
.text$mn:00006ED9                 mov     ebp, esp
.text$mn:00006EDB                 sub     esp, 0Ch
.text$mn:00006EDE                 mov     [ebp+var_8], ecx
.text$mn:00006EE1                 movzx   eax, [ebp+arg_0]
.text$mn:00006EE5                 test    eax, eax
.text$mn:00006EE7                 jnz     short loc_6EEB
.text$mn:00006EE9                 jmp     short loc_6F5E
.text$mn:00006EEB ; ---------------------------------------------------------------------------
.text$mn:00006EEB
.text$mn:00006EEB loc_6EEB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00006EEB                 mov     ecx, [ebp+var_8]
.text$mn:00006EEE                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00006EF2                 jb      short loc_6F5E
.text$mn:00006EF4                 mov     edx, [ebp+var_8]
.text$mn:00006EF7                 mov     eax, [edx+4]
.text$mn:00006EFA                 mov     [ebp+var_C], eax
.text$mn:00006EFD                 mov     ecx, [ebp+var_8]
.text$mn:00006F00                 add     ecx, 4
.text$mn:00006F03                 push    ecx
.text$mn:00006F04                 lea     edx, [ebp+var_1]
.text$mn:00006F07                 push    edx
.text$mn:00006F08                 mov     ecx, [ebp+var_8]
.text$mn:00006F0B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006F10                 mov     ecx, eax
.text$mn:00006F12                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00006F17                 cmp     [ebp+Size], 0
.text$mn:00006F1B                 jbe     short loc_6F3D
.text$mn:00006F1D                 mov     eax, [ebp+Size]
.text$mn:00006F20                 push    eax             ; Size
.text$mn:00006F21                 mov     ecx, [ebp+var_C]
.text$mn:00006F24                 push    ecx
.text$mn:00006F25                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00006F2A                 add     esp, 4
.text$mn:00006F2D                 push    eax             ; Src
.text$mn:00006F2E                 mov     edx, [ebp+var_8]
.text$mn:00006F31                 add     edx, 4
.text$mn:00006F34                 push    edx             ; Dst
.text$mn:00006F35                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00006F3A                 add     esp, 0Ch
.text$mn:00006F3D
.text$mn:00006F3D loc_6F3D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00006F3D                 mov     eax, [ebp+var_8]
.text$mn:00006F40                 mov     ecx, [eax+18h]
.text$mn:00006F43                 add     ecx, 1
.text$mn:00006F46                 push    ecx             ; int
.text$mn:00006F47                 mov     edx, [ebp+var_C]
.text$mn:00006F4A                 push    edx             ; void *
.text$mn:00006F4B                 lea     eax, [ebp+var_2]
.text$mn:00006F4E                 push    eax
.text$mn:00006F4F                 mov     ecx, [ebp+var_8]
.text$mn:00006F52                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006F57                 mov     ecx, eax
.text$mn:00006F59                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00006F5E
.text$mn:00006F5E loc_6F5E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00006F5E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00006F5E                 mov     ecx, [ebp+var_8]
.text$mn:00006F61                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00006F68                 mov     edx, [ebp+Size]
.text$mn:00006F6B                 push    edx
.text$mn:00006F6C                 mov     ecx, [ebp+var_8]
.text$mn:00006F6F                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006F74                 mov     esp, ebp
.text$mn:00006F76                 pop     ebp
.text$mn:00006F77                 retn    8
.text$mn:00006F77 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00006F77
.text$mn:00006F77 ; ---------------------------------------------------------------------------
.text$mn:00006F7A                 align 4
.text$mn:00006F7A _text$mn        ends
.text$mn:00006F7A
.text$mn:00006F7C ; ===========================================================================
.text$mn:00006F7C
.text$mn:00006F7C ; Segment type: Pure code
.text$mn:00006F7C ; Segment permissions: Read/Execute
.text$mn:00006F7C _text$mn        segment para public 'CODE' use32
.text$mn:00006F7C                 assume cs:_text$mn
.text$mn:00006F7C                 ;org 6F7Ch
.text$mn:00006F7C ; COMDAT (pick any)
.text$mn:00006F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F7C
.text$mn:00006F7C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F7C
.text$mn:00006F7C ; Attributes: bp-based frame
.text$mn:00006F7C
.text$mn:00006F7C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00006F7C                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00006F7C ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00006F7C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p
.text$mn:00006F7C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+47p ...
.text$mn:00006F7C
.text$mn:00006F7C var_C           = dword ptr -0Ch
.text$mn:00006F7C var_8           = dword ptr -8
.text$mn:00006F7C var_2           = byte ptr -2
.text$mn:00006F7C var_1           = byte ptr -1
.text$mn:00006F7C arg_0           = byte ptr  8
.text$mn:00006F7C arg_4           = dword ptr  0Ch
.text$mn:00006F7C
.text$mn:00006F7C                 push    ebp
.text$mn:00006F7D                 mov     ebp, esp
.text$mn:00006F7F                 sub     esp, 0Ch
.text$mn:00006F82                 mov     [ebp+var_8], ecx
.text$mn:00006F85                 movzx   eax, [ebp+arg_0]
.text$mn:00006F89                 test    eax, eax
.text$mn:00006F8B                 jnz     short loc_6F8F
.text$mn:00006F8D                 jmp     short loc_7002
.text$mn:00006F8F ; ---------------------------------------------------------------------------
.text$mn:00006F8F
.text$mn:00006F8F loc_6F8F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00006F8F                 mov     ecx, [ebp+var_8]
.text$mn:00006F92                 cmp     dword ptr [ecx+18h], 8
.text$mn:00006F96                 jb      short loc_7002
.text$mn:00006F98                 mov     edx, [ebp+var_8]
.text$mn:00006F9B                 mov     eax, [edx+4]
.text$mn:00006F9E                 mov     [ebp+var_C], eax
.text$mn:00006FA1                 mov     ecx, [ebp+var_8]
.text$mn:00006FA4                 add     ecx, 4
.text$mn:00006FA7                 push    ecx
.text$mn:00006FA8                 lea     edx, [ebp+var_1]
.text$mn:00006FAB                 push    edx
.text$mn:00006FAC                 mov     ecx, [ebp+var_8]
.text$mn:00006FAF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006FB4                 mov     ecx, eax
.text$mn:00006FB6                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006FBB                 cmp     [ebp+arg_4], 0
.text$mn:00006FBF                 jbe     short loc_6FE1
.text$mn:00006FC1                 mov     eax, [ebp+arg_4]
.text$mn:00006FC4                 push    eax             ; int
.text$mn:00006FC5                 mov     ecx, [ebp+var_C]
.text$mn:00006FC8                 push    ecx
.text$mn:00006FC9                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006FCE                 add     esp, 4
.text$mn:00006FD1                 push    eax             ; Src
.text$mn:00006FD2                 mov     edx, [ebp+var_8]
.text$mn:00006FD5                 add     edx, 4
.text$mn:00006FD8                 push    edx             ; Dst
.text$mn:00006FD9                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006FDE                 add     esp, 0Ch
.text$mn:00006FE1
.text$mn:00006FE1 loc_6FE1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00006FE1                 mov     eax, [ebp+var_8]
.text$mn:00006FE4                 mov     ecx, [eax+18h]
.text$mn:00006FE7                 add     ecx, 1
.text$mn:00006FEA                 push    ecx             ; int
.text$mn:00006FEB                 mov     edx, [ebp+var_C]
.text$mn:00006FEE                 push    edx             ; void *
.text$mn:00006FEF                 lea     eax, [ebp+var_2]
.text$mn:00006FF2                 push    eax
.text$mn:00006FF3                 mov     ecx, [ebp+var_8]
.text$mn:00006FF6                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006FFB                 mov     ecx, eax
.text$mn:00006FFD                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00007002
.text$mn:00007002 loc_7002:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00007002                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00007002                 mov     ecx, [ebp+var_8]
.text$mn:00007005                 mov     dword ptr [ecx+18h], 7
.text$mn:0000700C                 mov     edx, [ebp+arg_4]
.text$mn:0000700F                 push    edx
.text$mn:00007010                 mov     ecx, [ebp+var_8]
.text$mn:00007013                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007018                 mov     esp, ebp
.text$mn:0000701A                 pop     ebp
.text$mn:0000701B                 retn    8
.text$mn:0000701B ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:0000701B
.text$mn:0000701B ; ---------------------------------------------------------------------------
.text$mn:0000701E                 align 10h
.text$mn:0000701E _text$mn        ends
.text$mn:0000701E
.text$mn:00007020 ; ===========================================================================
.text$mn:00007020
.text$mn:00007020 ; Segment type: Pure code
.text$mn:00007020 ; Segment permissions: Read/Execute
.text$mn:00007020 _text$mn        segment para public 'CODE' use32
.text$mn:00007020                 assume cs:_text$mn
.text$mn:00007020                 ;org 7020h
.text$mn:00007020 ; COMDAT (pick any)
.text$mn:00007020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007020
.text$mn:00007020 ; =============== S U B R O U T I N E =======================================
.text$mn:00007020
.text$mn:00007020 ; Attributes: bp-based frame
.text$mn:00007020
.text$mn:00007020 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00007020                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00007020 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00007020                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00007020                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Dp ...
.text$mn:00007020
.text$mn:00007020 var_4           = dword ptr -4
.text$mn:00007020
.text$mn:00007020                 push    ebp
.text$mn:00007021                 mov     ebp, esp
.text$mn:00007023                 push    ecx
.text$mn:00007024                 mov     [ebp+var_4], ecx
.text$mn:00007027                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000702C                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00007031                 mov     esp, ebp
.text$mn:00007033                 pop     ebp
.text$mn:00007034                 retn
.text$mn:00007034 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00007034
.text$mn:00007034 ; ---------------------------------------------------------------------------
.text$mn:00007035                 align 4
.text$mn:00007035 _text$mn        ends
.text$mn:00007035
.text$mn:00007038 ; ===========================================================================
.text$mn:00007038
.text$mn:00007038 ; Segment type: Pure code
.text$mn:00007038 ; Segment permissions: Read/Execute
.text$mn:00007038 _text$mn        segment para public 'CODE' use32
.text$mn:00007038                 assume cs:_text$mn
.text$mn:00007038                 ;org 7038h
.text$mn:00007038 ; COMDAT (pick any)
.text$mn:00007038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007038
.text$mn:00007038 ; =============== S U B R O U T I N E =======================================
.text$mn:00007038
.text$mn:00007038 ; Attributes: bp-based frame
.text$mn:00007038
.text$mn:00007038 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00007038                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00007038 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00007038                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00007038                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:00007038
.text$mn:00007038 var_4           = dword ptr -4
.text$mn:00007038
.text$mn:00007038                 push    ebp
.text$mn:00007039                 mov     ebp, esp
.text$mn:0000703B                 push    ecx
.text$mn:0000703C                 mov     [ebp+var_4], ecx
.text$mn:0000703F                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00007044                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00007049                 mov     esp, ebp
.text$mn:0000704B                 pop     ebp
.text$mn:0000704C                 retn
.text$mn:0000704C ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000704C
.text$mn:0000704C ; ---------------------------------------------------------------------------
.text$mn:0000704D                 align 10h
.text$mn:0000704D _text$mn        ends
.text$mn:0000704D
.text$mn:00007050 ; ===========================================================================
.text$mn:00007050
.text$mn:00007050 ; Segment type: Pure code
.text$mn:00007050 ; Segment permissions: Read/Execute
.text$mn:00007050 _text$mn        segment para public 'CODE' use32
.text$mn:00007050                 assume cs:_text$mn
.text$mn:00007050                 ;org 7050h
.text$mn:00007050 ; COMDAT (pick any)
.text$mn:00007050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007050
.text$mn:00007050 ; =============== S U B R O U T I N E =======================================
.text$mn:00007050
.text$mn:00007050 ; Attributes: bp-based frame
.text$mn:00007050
.text$mn:00007050 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00007050                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00007050 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00007050                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00007050                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p ...
.text$mn:00007050
.text$mn:00007050 var_4           = dword ptr -4
.text$mn:00007050
.text$mn:00007050                 push    ebp
.text$mn:00007051                 mov     ebp, esp
.text$mn:00007053                 push    ecx
.text$mn:00007054                 mov     [ebp+var_4], ecx
.text$mn:00007057                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000705C                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00007061                 mov     esp, ebp
.text$mn:00007063                 pop     ebp
.text$mn:00007064                 retn
.text$mn:00007064 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00007064
.text$mn:00007064 ; ---------------------------------------------------------------------------
.text$mn:00007065                 align 4
.text$mn:00007065 _text$mn        ends
.text$mn:00007065
.text$mn:00007068 ; ===========================================================================
.text$mn:00007068
.text$mn:00007068 ; Segment type: Pure code
.text$mn:00007068 ; Segment permissions: Read/Execute
.text$mn:00007068 _text$mn        segment para public 'CODE' use32
.text$mn:00007068                 assume cs:_text$mn
.text$mn:00007068                 ;org 7068h
.text$mn:00007068 ; COMDAT (pick any)
.text$mn:00007068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007068
.text$mn:00007068 ; =============== S U B R O U T I N E =======================================
.text$mn:00007068
.text$mn:00007068 ; Attributes: bp-based frame
.text$mn:00007068
.text$mn:00007068 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00007068                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00007068 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00007068                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00007068                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00007068
.text$mn:00007068 var_4           = dword ptr -4
.text$mn:00007068
.text$mn:00007068                 push    ebp
.text$mn:00007069                 mov     ebp, esp
.text$mn:0000706B                 push    ecx
.text$mn:0000706C                 mov     [ebp+var_4], ecx
.text$mn:0000706F                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00007074                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00007079                 mov     esp, ebp
.text$mn:0000707B                 pop     ebp
.text$mn:0000707C                 retn
.text$mn:0000707C ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000707C
.text$mn:0000707C ; ---------------------------------------------------------------------------
.text$mn:0000707D                 align 10h
.text$mn:0000707D _text$mn        ends
.text$mn:0000707D
.text$mn:00007080 ; ===========================================================================
.text$mn:00007080
.text$mn:00007080 ; Segment type: Pure code
.text$mn:00007080 ; Segment permissions: Read/Execute
.text$mn:00007080 _text$mn        segment para public 'CODE' use32
.text$mn:00007080                 assume cs:_text$mn
.text$mn:00007080                 ;org 7080h
.text$mn:00007080 ; COMDAT (pick any)
.text$mn:00007080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007080
.text$mn:00007080 ; =============== S U B R O U T I N E =======================================
.text$mn:00007080
.text$mn:00007080 ; Attributes: bp-based frame
.text$mn:00007080
.text$mn:00007080 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00007080                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00007080 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00007080                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00007080                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00007080
.text$mn:00007080 var_4           = dword ptr -4
.text$mn:00007080 arg_0           = dword ptr  8
.text$mn:00007080
.text$mn:00007080                 push    ebp
.text$mn:00007081                 mov     ebp, esp
.text$mn:00007083                 push    ecx
.text$mn:00007084                 mov     [ebp+var_4], ecx
.text$mn:00007087                 mov     eax, [ebp+arg_0]
.text$mn:0000708A                 push    eax
.text$mn:0000708B                 mov     ecx, [ebp+var_4]
.text$mn:0000708E                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00007093                 mov     esp, ebp
.text$mn:00007095                 pop     ebp
.text$mn:00007096                 retn    4
.text$mn:00007096 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00007096
.text$mn:00007096 ; ---------------------------------------------------------------------------
.text$mn:00007099                 align 4
.text$mn:00007099 _text$mn        ends
.text$mn:00007099
.text$mn:0000709C ; ===========================================================================
.text$mn:0000709C
.text$mn:0000709C ; Segment type: Pure code
.text$mn:0000709C ; Segment permissions: Read/Execute
.text$mn:0000709C _text$mn        segment para public 'CODE' use32
.text$mn:0000709C                 assume cs:_text$mn
.text$mn:0000709C                 ;org 709Ch
.text$mn:0000709C ; COMDAT (pick any)
.text$mn:0000709C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000709C
.text$mn:0000709C ; =============== S U B R O U T I N E =======================================
.text$mn:0000709C
.text$mn:0000709C ; Attributes: bp-based frame
.text$mn:0000709C
.text$mn:0000709C ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:0000709C                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:0000709C ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:0000709C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:0000709C                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:0000709C
.text$mn:0000709C var_4           = dword ptr -4
.text$mn:0000709C arg_0           = dword ptr  8
.text$mn:0000709C
.text$mn:0000709C                 push    ebp
.text$mn:0000709D                 mov     ebp, esp
.text$mn:0000709F                 push    ecx
.text$mn:000070A0                 mov     [ebp+var_4], ecx
.text$mn:000070A3                 mov     eax, [ebp+arg_0]
.text$mn:000070A6                 push    eax
.text$mn:000070A7                 mov     ecx, [ebp+var_4]
.text$mn:000070AA                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:000070AF                 mov     esp, ebp
.text$mn:000070B1                 pop     ebp
.text$mn:000070B2                 retn    4
.text$mn:000070B2 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:000070B2
.text$mn:000070B2 ; ---------------------------------------------------------------------------
.text$mn:000070B5                 align 4
.text$mn:000070B5 _text$mn        ends
.text$mn:000070B5
.text$mn:000070B8 ; ===========================================================================
.text$mn:000070B8
.text$mn:000070B8 ; Segment type: Pure code
.text$mn:000070B8 ; Segment permissions: Read/Execute
.text$mn:000070B8 _text$mn        segment para public 'CODE' use32
.text$mn:000070B8                 assume cs:_text$mn
.text$mn:000070B8                 ;org 70B8h
.text$mn:000070B8 ; COMDAT (pick any)
.text$mn:000070B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070B8
.text$mn:000070B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000070B8
.text$mn:000070B8 ; Attributes: bp-based frame
.text$mn:000070B8
.text$mn:000070B8 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:000070B8                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:000070B8 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:000070B8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:000070B8
.text$mn:000070B8 var_4           = dword ptr -4
.text$mn:000070B8 arg_0           = dword ptr  8
.text$mn:000070B8
.text$mn:000070B8                 push    ebp
.text$mn:000070B9                 mov     ebp, esp
.text$mn:000070BB                 push    ecx
.text$mn:000070BC                 mov     [ebp+var_4], ecx
.text$mn:000070BF                 push    0
.text$mn:000070C1                 mov     eax, [ebp+arg_0]
.text$mn:000070C4                 push    eax
.text$mn:000070C5                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:000070CA                 add     esp, 8
.text$mn:000070CD                 mov     esp, ebp
.text$mn:000070CF                 pop     ebp
.text$mn:000070D0                 retn    4
.text$mn:000070D0 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:000070D0
.text$mn:000070D0 ; ---------------------------------------------------------------------------
.text$mn:000070D3                 align 4
.text$mn:000070D3 _text$mn        ends
.text$mn:000070D3
.text$mn:000070D4 ; ===========================================================================
.text$mn:000070D4
.text$mn:000070D4 ; Segment type: Pure code
.text$mn:000070D4 ; Segment permissions: Read/Execute
.text$mn:000070D4 _text$mn        segment para public 'CODE' use32
.text$mn:000070D4                 assume cs:_text$mn
.text$mn:000070D4                 ;org 70D4h
.text$mn:000070D4 ; COMDAT (pick any)
.text$mn:000070D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070D4
.text$mn:000070D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070D4
.text$mn:000070D4 ; Attributes: bp-based frame
.text$mn:000070D4
.text$mn:000070D4 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:000070D4                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000070D4 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000070D4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:000070D4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:000070D4
.text$mn:000070D4 var_4           = dword ptr -4
.text$mn:000070D4 arg_0           = dword ptr  8
.text$mn:000070D4
.text$mn:000070D4                 push    ebp
.text$mn:000070D5                 mov     ebp, esp
.text$mn:000070D7                 push    ecx
.text$mn:000070D8                 mov     [ebp+var_4], ecx
.text$mn:000070DB                 push    0
.text$mn:000070DD                 mov     eax, [ebp+arg_0]
.text$mn:000070E0                 push    eax
.text$mn:000070E1                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:000070E6                 add     esp, 8
.text$mn:000070E9                 mov     esp, ebp
.text$mn:000070EB                 pop     ebp
.text$mn:000070EC                 retn    4
.text$mn:000070EC ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:000070EC
.text$mn:000070EC ; ---------------------------------------------------------------------------
.text$mn:000070EF                 align 10h
.text$mn:000070EF _text$mn        ends
.text$mn:000070EF
.text$mn:000070F0 ; ===========================================================================
.text$mn:000070F0
.text$mn:000070F0 ; Segment type: Pure code
.text$mn:000070F0 ; Segment permissions: Read/Execute
.text$mn:000070F0 _text$mn        segment para public 'CODE' use32
.text$mn:000070F0                 assume cs:_text$mn
.text$mn:000070F0                 ;org 70F0h
.text$mn:000070F0 ; COMDAT (pick any)
.text$mn:000070F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070F0
.text$mn:000070F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000070F0
.text$mn:000070F0 ; Attributes: bp-based frame
.text$mn:000070F0
.text$mn:000070F0 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:000070F0                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:000070F0 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:000070F0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:000070F0
.text$mn:000070F0 var_4           = dword ptr -4
.text$mn:000070F0 arg_0           = dword ptr  8
.text$mn:000070F0
.text$mn:000070F0                 push    ebp
.text$mn:000070F1                 mov     ebp, esp
.text$mn:000070F3                 push    ecx
.text$mn:000070F4                 mov     [ebp+var_4], ecx
.text$mn:000070F7                 push    0
.text$mn:000070F9                 mov     eax, [ebp+arg_0]
.text$mn:000070FC                 push    eax
.text$mn:000070FD                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00007102                 add     esp, 8
.text$mn:00007105                 mov     esp, ebp
.text$mn:00007107                 pop     ebp
.text$mn:00007108                 retn    4
.text$mn:00007108 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:00007108
.text$mn:00007108 ; ---------------------------------------------------------------------------
.text$mn:0000710B                 align 4
.text$mn:0000710B _text$mn        ends
.text$mn:0000710B
.text$mn:0000710C ; ===========================================================================
.text$mn:0000710C
.text$mn:0000710C ; Segment type: Pure code
.text$mn:0000710C ; Segment permissions: Read/Execute
.text$mn:0000710C _text$mn        segment para public 'CODE' use32
.text$mn:0000710C                 assume cs:_text$mn
.text$mn:0000710C                 ;org 710Ch
.text$mn:0000710C ; COMDAT (pick any)
.text$mn:0000710C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000710C
.text$mn:0000710C ; =============== S U B R O U T I N E =======================================
.text$mn:0000710C
.text$mn:0000710C ; Attributes: bp-based frame
.text$mn:0000710C
.text$mn:0000710C ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::append(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.text$mn:0000710C                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000710C ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000710C                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+72p
.text$mn:0000710C
.text$mn:0000710C var_4           = dword ptr -4
.text$mn:0000710C arg_0           = dword ptr  8
.text$mn:0000710C
.text$mn:0000710C                 push    ebp
.text$mn:0000710D                 mov     ebp, esp
.text$mn:0000710F                 push    ecx
.text$mn:00007110                 mov     [ebp+var_4], ecx
.text$mn:00007113                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00007118                 push    eax             ; Size
.text$mn:00007119                 push    0               ; int
.text$mn:0000711B                 mov     ecx, [ebp+arg_0]
.text$mn:0000711E                 push    ecx             ; int
.text$mn:0000711F                 mov     ecx, [ebp+var_4]
.text$mn:00007122                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00007127                 mov     esp, ebp
.text$mn:00007129                 pop     ebp
.text$mn:0000712A                 retn    4
.text$mn:0000712A ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000712A
.text$mn:0000712A ; ---------------------------------------------------------------------------
.text$mn:0000712D                 align 10h
.text$mn:0000712D _text$mn        ends
.text$mn:0000712D
.text$mn:00007130 ; ===========================================================================
.text$mn:00007130
.text$mn:00007130 ; Segment type: Pure code
.text$mn:00007130 ; Segment permissions: Read/Execute
.text$mn:00007130 _text$mn        segment para public 'CODE' use32
.text$mn:00007130                 assume cs:_text$mn
.text$mn:00007130                 ;org 7130h
.text$mn:00007130 ; COMDAT (pick any)
.text$mn:00007130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007130
.text$mn:00007130 ; =============== S U B R O U T I N E =======================================
.text$mn:00007130
.text$mn:00007130 ; Attributes: bp-based frame
.text$mn:00007130
.text$mn:00007130 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(int, int, size_t Size)
.text$mn:00007130                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00007130 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00007130                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+16p
.text$mn:00007130                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+51p
.text$mn:00007130
.text$mn:00007130 var_8           = dword ptr -8
.text$mn:00007130 var_4           = dword ptr -4
.text$mn:00007130 arg_0           = dword ptr  8
.text$mn:00007130 arg_4           = dword ptr  0Ch
.text$mn:00007130 Size            = dword ptr  10h
.text$mn:00007130
.text$mn:00007130                 push    ebp
.text$mn:00007131                 mov     ebp, esp
.text$mn:00007133                 sub     esp, 8
.text$mn:00007136                 mov     [ebp+var_4], ecx
.text$mn:00007139                 mov     ecx, [ebp+arg_0]
.text$mn:0000713C                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00007141                 cmp     eax, [ebp+arg_4]
.text$mn:00007144                 jnb     short loc_714E
.text$mn:00007146                 mov     ecx, [ebp+var_4]
.text$mn:00007149                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000714E
.text$mn:0000714E loc_714E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000714E                 mov     ecx, [ebp+arg_0]
.text$mn:00007151                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00007156                 sub     eax, [ebp+arg_4]
.text$mn:00007159                 mov     [ebp+var_8], eax
.text$mn:0000715C                 mov     eax, [ebp+var_8]
.text$mn:0000715F                 cmp     eax, [ebp+Size]
.text$mn:00007162                 jnb     short loc_716A
.text$mn:00007164                 mov     ecx, [ebp+var_8]
.text$mn:00007167                 mov     [ebp+Size], ecx
.text$mn:0000716A
.text$mn:0000716A loc_716A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000716A                 mov     edx, [ebp+var_4]
.text$mn:0000716D                 mov     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00007172                 sub     eax, [edx+14h]
.text$mn:00007175                 cmp     eax, [ebp+Size]
.text$mn:00007178                 ja      short loc_7182
.text$mn:0000717A                 mov     ecx, [ebp+var_4]
.text$mn:0000717D                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00007182
.text$mn:00007182 loc_7182:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+48j
.text$mn:00007182                 cmp     [ebp+Size], 0
.text$mn:00007186                 jbe     short loc_71DC
.text$mn:00007188                 mov     ecx, [ebp+var_4]
.text$mn:0000718B                 mov     edx, [ecx+14h]
.text$mn:0000718E                 add     edx, [ebp+Size]
.text$mn:00007191                 mov     [ebp+var_8], edx
.text$mn:00007194                 push    0
.text$mn:00007196                 mov     eax, [ebp+var_8]
.text$mn:00007199                 push    eax
.text$mn:0000719A                 mov     ecx, [ebp+var_4]
.text$mn:0000719D                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000071A2                 movzx   ecx, al
.text$mn:000071A5                 test    ecx, ecx
.text$mn:000071A7                 jz      short loc_71DC
.text$mn:000071A9                 mov     edx, [ebp+Size]
.text$mn:000071AC                 push    edx             ; Size
.text$mn:000071AD                 mov     ecx, [ebp+arg_0]
.text$mn:000071B0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000071B5                 add     eax, [ebp+arg_4]
.text$mn:000071B8                 push    eax             ; Src
.text$mn:000071B9                 mov     ecx, [ebp+var_4]
.text$mn:000071BC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000071C1                 mov     ecx, [ebp+var_4]
.text$mn:000071C4                 add     eax, [ecx+14h]
.text$mn:000071C7                 push    eax             ; Dst
.text$mn:000071C8                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000071CD                 add     esp, 0Ch
.text$mn:000071D0                 mov     edx, [ebp+var_8]
.text$mn:000071D3                 push    edx
.text$mn:000071D4                 mov     ecx, [ebp+var_4]
.text$mn:000071D7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000071DC
.text$mn:000071DC loc_71DC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+56j
.text$mn:000071DC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+77j
.text$mn:000071DC                 mov     eax, [ebp+var_4]
.text$mn:000071DF                 mov     esp, ebp
.text$mn:000071E1                 pop     ebp
.text$mn:000071E2                 retn    0Ch
.text$mn:000071E2 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000071E2
.text$mn:000071E2 ; ---------------------------------------------------------------------------
.text$mn:000071E5                 align 4
.text$mn:000071E5 _text$mn        ends
.text$mn:000071E5
.text$mn:000071E8 ; ===========================================================================
.text$mn:000071E8
.text$mn:000071E8 ; Segment type: Pure code
.text$mn:000071E8 ; Segment permissions: Read/Execute
.text$mn:000071E8 _text$mn        segment para public 'CODE' use32
.text$mn:000071E8                 assume cs:_text$mn
.text$mn:000071E8                 ;org 71E8h
.text$mn:000071E8 ; COMDAT (pick any)
.text$mn:000071E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071E8
.text$mn:000071E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000071E8
.text$mn:000071E8 ; Attributes: bp-based frame
.text$mn:000071E8
.text$mn:000071E8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char *Str)
.text$mn:000071E8                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:000071E8 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:000071E8                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+4Dp
.text$mn:000071E8
.text$mn:000071E8 var_4           = dword ptr -4
.text$mn:000071E8 Str             = dword ptr  8
.text$mn:000071E8
.text$mn:000071E8                 push    ebp
.text$mn:000071E9                 mov     ebp, esp
.text$mn:000071EB                 push    ecx
.text$mn:000071EC                 mov     [ebp+var_4], ecx
.text$mn:000071EF                 push    43Eh            ; unsigned int
.text$mn:000071F4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000071F9                 mov     eax, [ebp+Str]
.text$mn:000071FC                 push    eax             ; int
.text$mn:000071FD                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00007202                 add     esp, 0Ch
.text$mn:00007205                 mov     ecx, [ebp+Str]
.text$mn:00007208                 push    ecx             ; Str
.text$mn:00007209                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000720E                 add     esp, 4
.text$mn:00007211                 push    eax             ; Size
.text$mn:00007212                 mov     edx, [ebp+Str]
.text$mn:00007215                 push    edx             ; Src
.text$mn:00007216                 mov     ecx, [ebp+var_4]
.text$mn:00007219                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)
.text$mn:0000721E                 mov     esp, ebp
.text$mn:00007220                 pop     ebp
.text$mn:00007221                 retn    4
.text$mn:00007221 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00007221
.text$mn:00007221 _text$mn        ends
.text$mn:00007221
.text$mn:00007224 ; ===========================================================================
.text$mn:00007224
.text$mn:00007224 ; Segment type: Pure code
.text$mn:00007224 ; Segment permissions: Read/Execute
.text$mn:00007224 _text$mn        segment para public 'CODE' use32
.text$mn:00007224                 assume cs:_text$mn
.text$mn:00007224                 ;org 7224h
.text$mn:00007224 ; COMDAT (pick any)
.text$mn:00007224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007224
.text$mn:00007224 ; =============== S U B R O U T I N E =======================================
.text$mn:00007224
.text$mn:00007224 ; Attributes: bp-based frame
.text$mn:00007224
.text$mn:00007224 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(void *Src, size_t Size)
.text$mn:00007224                 public ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00007224 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00007224                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+31p
.text$mn:00007224
.text$mn:00007224 var_8           = dword ptr -8
.text$mn:00007224 var_4           = dword ptr -4
.text$mn:00007224 Src             = dword ptr  8
.text$mn:00007224 Size            = dword ptr  0Ch
.text$mn:00007224
.text$mn:00007224                 push    ebp
.text$mn:00007225                 mov     ebp, esp
.text$mn:00007227                 sub     esp, 8
.text$mn:0000722A                 mov     [ebp+var_4], ecx
.text$mn:0000722D                 cmp     [ebp+Size], 0
.text$mn:00007231                 jz      short loc_7249
.text$mn:00007233                 push    42Ah            ; unsigned int
.text$mn:00007238                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000723D                 mov     eax, [ebp+Src]
.text$mn:00007240                 push    eax             ; int
.text$mn:00007241                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00007246                 add     esp, 0Ch
.text$mn:00007249
.text$mn:00007249 loc_7249:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+Dj
.text$mn:00007249                 mov     ecx, [ebp+Src]
.text$mn:0000724C                 push    ecx
.text$mn:0000724D                 mov     ecx, [ebp+var_4]
.text$mn:00007250                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00007255                 movzx   edx, al
.text$mn:00007258                 test    edx, edx
.text$mn:0000725A                 jz      short loc_727C
.text$mn:0000725C                 mov     eax, [ebp+Size]
.text$mn:0000725F                 push    eax             ; Size
.text$mn:00007260                 mov     ecx, [ebp+var_4]
.text$mn:00007263                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007268                 mov     ecx, [ebp+Src]
.text$mn:0000726B                 sub     ecx, eax
.text$mn:0000726D                 push    ecx             ; int
.text$mn:0000726E                 mov     edx, [ebp+var_4]
.text$mn:00007271                 push    edx             ; int
.text$mn:00007272                 mov     ecx, [ebp+var_4]
.text$mn:00007275                 call    ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000727A                 jmp     short loc_72EA
.text$mn:0000727C ; ---------------------------------------------------------------------------
.text$mn:0000727C
.text$mn:0000727C loc_727C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+36j
.text$mn:0000727C                 mov     eax, [ebp+var_4]
.text$mn:0000727F                 mov     ecx, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:00007285                 sub     ecx, [eax+14h]
.text$mn:00007288                 cmp     ecx, [ebp+Size]
.text$mn:0000728B                 ja      short loc_7295
.text$mn:0000728D                 mov     ecx, [ebp+var_4]
.text$mn:00007290                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00007295
.text$mn:00007295 loc_7295:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+67j
.text$mn:00007295                 cmp     [ebp+Size], 0
.text$mn:00007299                 jbe     short loc_72E7
.text$mn:0000729B                 mov     edx, [ebp+var_4]
.text$mn:0000729E                 mov     eax, [edx+14h]
.text$mn:000072A1                 add     eax, [ebp+Size]
.text$mn:000072A4                 mov     [ebp+var_8], eax
.text$mn:000072A7                 push    0
.text$mn:000072A9                 mov     ecx, [ebp+var_8]
.text$mn:000072AC                 push    ecx
.text$mn:000072AD                 mov     ecx, [ebp+var_4]
.text$mn:000072B0                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000072B5                 movzx   edx, al
.text$mn:000072B8                 test    edx, edx
.text$mn:000072BA                 jz      short loc_72E7
.text$mn:000072BC                 mov     eax, [ebp+Size]
.text$mn:000072BF                 push    eax             ; Size
.text$mn:000072C0                 mov     ecx, [ebp+Src]
.text$mn:000072C3                 push    ecx             ; Src
.text$mn:000072C4                 mov     ecx, [ebp+var_4]
.text$mn:000072C7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000072CC                 mov     edx, [ebp+var_4]
.text$mn:000072CF                 add     eax, [edx+14h]
.text$mn:000072D2                 push    eax             ; Dst
.text$mn:000072D3                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000072D8                 add     esp, 0Ch
.text$mn:000072DB                 mov     eax, [ebp+var_8]
.text$mn:000072DE                 push    eax
.text$mn:000072DF                 mov     ecx, [ebp+var_4]
.text$mn:000072E2                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000072E7
.text$mn:000072E7 loc_72E7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+75j
.text$mn:000072E7                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+96j
.text$mn:000072E7                 mov     eax, [ebp+var_4]
.text$mn:000072EA
.text$mn:000072EA loc_72EA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *,uint)+56j
.text$mn:000072EA                 mov     esp, ebp
.text$mn:000072EC                 pop     ebp
.text$mn:000072ED                 retn    8
.text$mn:000072ED ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:000072ED
.text$mn:000072ED _text$mn        ends
.text$mn:000072ED
.text$mn:000072F0 ; ===========================================================================
.text$mn:000072F0
.text$mn:000072F0 ; Segment type: Pure code
.text$mn:000072F0 ; Segment permissions: Read/Execute
.text$mn:000072F0 _text$mn        segment para public 'CODE' use32
.text$mn:000072F0                 assume cs:_text$mn
.text$mn:000072F0                 ;org 72F0h
.text$mn:000072F0 ; COMDAT (pick any)
.text$mn:000072F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072F0
.text$mn:000072F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000072F0
.text$mn:000072F0 ; Attributes: bp-based frame
.text$mn:000072F0
.text$mn:000072F0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000072F0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:000072F0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:000072F0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:000072F0
.text$mn:000072F0 var_4           = dword ptr -4
.text$mn:000072F0 arg_0           = dword ptr  8
.text$mn:000072F0
.text$mn:000072F0                 push    ebp
.text$mn:000072F1                 mov     ebp, esp
.text$mn:000072F3                 push    ecx
.text$mn:000072F4                 mov     [ebp+var_4], ecx
.text$mn:000072F7                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000072FC                 push    eax
.text$mn:000072FD                 push    0
.text$mn:000072FF                 mov     ecx, [ebp+arg_0]
.text$mn:00007302                 push    ecx
.text$mn:00007303                 mov     ecx, [ebp+var_4]
.text$mn:00007306                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000730B                 mov     esp, ebp
.text$mn:0000730D                 pop     ebp
.text$mn:0000730E                 retn    4
.text$mn:0000730E ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000730E
.text$mn:0000730E ; ---------------------------------------------------------------------------
.text$mn:00007311                 align 4
.text$mn:00007311 _text$mn        ends
.text$mn:00007311
.text$mn:00007314 ; ===========================================================================
.text$mn:00007314
.text$mn:00007314 ; Segment type: Pure code
.text$mn:00007314 ; Segment permissions: Read/Execute
.text$mn:00007314 _text$mn        segment para public 'CODE' use32
.text$mn:00007314                 assume cs:_text$mn
.text$mn:00007314                 ;org 7314h
.text$mn:00007314 ; COMDAT (pick any)
.text$mn:00007314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007314
.text$mn:00007314 ; =============== S U B R O U T I N E =======================================
.text$mn:00007314
.text$mn:00007314 ; Attributes: bp-based frame
.text$mn:00007314
.text$mn:00007314 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00007314                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00007314 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00007314                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:00007314                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00007314
.text$mn:00007314 var_8           = dword ptr -8
.text$mn:00007314 var_4           = dword ptr -4
.text$mn:00007314 arg_0           = dword ptr  8
.text$mn:00007314 arg_4           = dword ptr  0Ch
.text$mn:00007314 arg_8           = dword ptr  10h
.text$mn:00007314
.text$mn:00007314                 push    ebp
.text$mn:00007315                 mov     ebp, esp
.text$mn:00007317                 sub     esp, 8
.text$mn:0000731A                 mov     [ebp+var_4], ecx
.text$mn:0000731D                 mov     ecx, [ebp+arg_0]
.text$mn:00007320                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00007325                 cmp     eax, [ebp+arg_4]
.text$mn:00007328                 jnb     short loc_7332
.text$mn:0000732A                 mov     ecx, [ebp+var_4]
.text$mn:0000732D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00007332
.text$mn:00007332 loc_7332:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00007332                 mov     ecx, [ebp+arg_0]
.text$mn:00007335                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000733A                 sub     eax, [ebp+arg_4]
.text$mn:0000733D                 mov     [ebp+var_8], eax
.text$mn:00007340                 mov     eax, [ebp+var_8]
.text$mn:00007343                 cmp     eax, [ebp+arg_8]
.text$mn:00007346                 jnb     short loc_734E
.text$mn:00007348                 mov     ecx, [ebp+var_8]
.text$mn:0000734B                 mov     [ebp+arg_8], ecx
.text$mn:0000734E
.text$mn:0000734E loc_734E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000734E                 mov     edx, [ebp+var_4]
.text$mn:00007351                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00007356                 sub     eax, [edx+14h]
.text$mn:00007359                 cmp     eax, [ebp+arg_8]
.text$mn:0000735C                 ja      short loc_7366
.text$mn:0000735E                 mov     ecx, [ebp+var_4]
.text$mn:00007361                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00007366
.text$mn:00007366 loc_7366:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:00007366                 cmp     [ebp+arg_8], 0
.text$mn:0000736A                 jbe     short loc_73C6
.text$mn:0000736C                 mov     ecx, [ebp+var_4]
.text$mn:0000736F                 mov     edx, [ecx+14h]
.text$mn:00007372                 add     edx, [ebp+arg_8]
.text$mn:00007375                 mov     [ebp+var_8], edx
.text$mn:00007378                 push    0
.text$mn:0000737A                 mov     eax, [ebp+var_8]
.text$mn:0000737D                 push    eax
.text$mn:0000737E                 mov     ecx, [ebp+var_4]
.text$mn:00007381                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00007386                 movzx   ecx, al
.text$mn:00007389                 test    ecx, ecx
.text$mn:0000738B                 jz      short loc_73C6
.text$mn:0000738D                 mov     edx, [ebp+arg_8]
.text$mn:00007390                 push    edx             ; int
.text$mn:00007391                 mov     ecx, [ebp+arg_0]
.text$mn:00007394                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007399                 mov     ecx, [ebp+arg_4]
.text$mn:0000739C                 lea     edx, [eax+ecx*2]
.text$mn:0000739F                 push    edx             ; Src
.text$mn:000073A0                 mov     ecx, [ebp+var_4]
.text$mn:000073A3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000073A8                 mov     ecx, [ebp+var_4]
.text$mn:000073AB                 mov     edx, [ecx+14h]
.text$mn:000073AE                 lea     eax, [eax+edx*2]
.text$mn:000073B1                 push    eax             ; Dst
.text$mn:000073B2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000073B7                 add     esp, 0Ch
.text$mn:000073BA                 mov     ecx, [ebp+var_8]
.text$mn:000073BD                 push    ecx
.text$mn:000073BE                 mov     ecx, [ebp+var_4]
.text$mn:000073C1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000073C6
.text$mn:000073C6 loc_73C6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:000073C6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:000073C6                 mov     eax, [ebp+var_4]
.text$mn:000073C9                 mov     esp, ebp
.text$mn:000073CB                 pop     ebp
.text$mn:000073CC                 retn    0Ch
.text$mn:000073CC ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000073CC
.text$mn:000073CC ; ---------------------------------------------------------------------------
.text$mn:000073CF                 align 10h
.text$mn:000073CF _text$mn        ends
.text$mn:000073CF
.text$mn:000073D0 ; ===========================================================================
.text$mn:000073D0
.text$mn:000073D0 ; Segment type: Pure code
.text$mn:000073D0 ; Segment permissions: Read/Execute
.text$mn:000073D0 _text$mn        segment para public 'CODE' use32
.text$mn:000073D0                 assume cs:_text$mn
.text$mn:000073D0                 ;org 73D0h
.text$mn:000073D0 ; COMDAT (pick any)
.text$mn:000073D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073D0
.text$mn:000073D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000073D0
.text$mn:000073D0 ; Attributes: bp-based frame
.text$mn:000073D0
.text$mn:000073D0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(unsigned int, wchar_t)
.text$mn:000073D0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
.text$mn:000073D0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z proc near
.text$mn:000073D0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t)+11p
.text$mn:000073D0
.text$mn:000073D0 var_8           = dword ptr -8
.text$mn:000073D0 var_4           = dword ptr -4
.text$mn:000073D0 arg_0           = dword ptr  8
.text$mn:000073D0 arg_4           = word ptr  0Ch
.text$mn:000073D0
.text$mn:000073D0                 push    ebp
.text$mn:000073D1                 mov     ebp, esp
.text$mn:000073D3                 sub     esp, 8
.text$mn:000073D6                 mov     [ebp+var_4], ecx
.text$mn:000073D9                 mov     eax, [ebp+var_4]
.text$mn:000073DC                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000073E2                 sub     ecx, [eax+14h]
.text$mn:000073E5                 cmp     ecx, [ebp+arg_0]
.text$mn:000073E8                 ja      short loc_73F2
.text$mn:000073EA                 mov     ecx, [ebp+var_4]
.text$mn:000073ED                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000073F2
.text$mn:000073F2 loc_73F2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+18j
.text$mn:000073F2                 cmp     [ebp+arg_0], 0
.text$mn:000073F6                 jbe     short loc_743D
.text$mn:000073F8                 mov     edx, [ebp+var_4]
.text$mn:000073FB                 mov     eax, [edx+14h]
.text$mn:000073FE                 add     eax, [ebp+arg_0]
.text$mn:00007401                 mov     [ebp+var_8], eax
.text$mn:00007404                 push    0
.text$mn:00007406                 mov     ecx, [ebp+var_8]
.text$mn:00007409                 push    ecx
.text$mn:0000740A                 mov     ecx, [ebp+var_4]
.text$mn:0000740D                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00007412                 movzx   edx, al
.text$mn:00007415                 test    edx, edx
.text$mn:00007417                 jz      short loc_743D
.text$mn:00007419                 movzx   eax, [ebp+arg_4]
.text$mn:0000741D                 push    eax
.text$mn:0000741E                 mov     ecx, [ebp+arg_0]
.text$mn:00007421                 push    ecx
.text$mn:00007422                 mov     edx, [ebp+var_4]
.text$mn:00007425                 mov     eax, [edx+14h]
.text$mn:00007428                 push    eax
.text$mn:00007429                 mov     ecx, [ebp+var_4]
.text$mn:0000742C                 call    ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)
.text$mn:00007431                 mov     ecx, [ebp+var_8]
.text$mn:00007434                 push    ecx
.text$mn:00007435                 mov     ecx, [ebp+var_4]
.text$mn:00007438                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000743D
.text$mn:0000743D loc_743D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+26j
.text$mn:0000743D                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+47j
.text$mn:0000743D                 mov     eax, [ebp+var_4]
.text$mn:00007440                 mov     esp, ebp
.text$mn:00007442                 pop     ebp
.text$mn:00007443                 retn    8
.text$mn:00007443 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z endp
.text$mn:00007443
.text$mn:00007443 ; ---------------------------------------------------------------------------
.text$mn:00007446                 align 4
.text$mn:00007446 _text$mn        ends
.text$mn:00007446
.text$mn:00007448 ; ===========================================================================
.text$mn:00007448
.text$mn:00007448 ; Segment type: Pure code
.text$mn:00007448 ; Segment permissions: Read/Execute
.text$mn:00007448 _text$mn        segment para public 'CODE' use32
.text$mn:00007448                 assume cs:_text$mn
.text$mn:00007448                 ;org 7448h
.text$mn:00007448 ; COMDAT (pick any)
.text$mn:00007448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007448
.text$mn:00007448 ; =============== S U B R O U T I N E =======================================
.text$mn:00007448
.text$mn:00007448 ; Attributes: bp-based frame
.text$mn:00007448
.text$mn:00007448 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00007448                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00007448 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00007448                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00007448
.text$mn:00007448 var_4           = dword ptr -4
.text$mn:00007448 Str             = dword ptr  8
.text$mn:00007448
.text$mn:00007448                 push    ebp
.text$mn:00007449                 mov     ebp, esp
.text$mn:0000744B                 push    ecx
.text$mn:0000744C                 mov     [ebp+var_4], ecx
.text$mn:0000744F                 push    43Eh            ; unsigned int
.text$mn:00007454                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007459                 mov     eax, [ebp+Str]
.text$mn:0000745C                 push    eax             ; int
.text$mn:0000745D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00007462                 add     esp, 0Ch
.text$mn:00007465                 mov     ecx, [ebp+Str]
.text$mn:00007468                 push    ecx             ; Str
.text$mn:00007469                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000746E                 add     esp, 4
.text$mn:00007471                 push    eax             ; int
.text$mn:00007472                 mov     edx, [ebp+Str]
.text$mn:00007475                 push    edx             ; Src
.text$mn:00007476                 mov     ecx, [ebp+var_4]
.text$mn:00007479                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000747E                 mov     esp, ebp
.text$mn:00007480                 pop     ebp
.text$mn:00007481                 retn    4
.text$mn:00007481 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00007481
.text$mn:00007481 _text$mn        ends
.text$mn:00007481
.text$mn:00007484 ; ===========================================================================
.text$mn:00007484
.text$mn:00007484 ; Segment type: Pure code
.text$mn:00007484 ; Segment permissions: Read/Execute
.text$mn:00007484 _text$mn        segment para public 'CODE' use32
.text$mn:00007484                 assume cs:_text$mn
.text$mn:00007484                 ;org 7484h
.text$mn:00007484 ; COMDAT (pick any)
.text$mn:00007484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007484
.text$mn:00007484 ; =============== S U B R O U T I N E =======================================
.text$mn:00007484
.text$mn:00007484 ; Attributes: bp-based frame
.text$mn:00007484
.text$mn:00007484 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:00007484                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00007484 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00007484                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:00007484
.text$mn:00007484 var_8           = dword ptr -8
.text$mn:00007484 var_4           = dword ptr -4
.text$mn:00007484 Src             = dword ptr  8
.text$mn:00007484 arg_4           = dword ptr  0Ch
.text$mn:00007484
.text$mn:00007484                 push    ebp
.text$mn:00007485                 mov     ebp, esp
.text$mn:00007487                 sub     esp, 8
.text$mn:0000748A                 mov     [ebp+var_4], ecx
.text$mn:0000748D                 cmp     [ebp+arg_4], 0
.text$mn:00007491                 jz      short loc_74A9
.text$mn:00007493                 push    42Ah            ; unsigned int
.text$mn:00007498                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000749D                 mov     eax, [ebp+Src]
.text$mn:000074A0                 push    eax             ; int
.text$mn:000074A1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000074A6                 add     esp, 0Ch
.text$mn:000074A9
.text$mn:000074A9 loc_74A9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:000074A9                 mov     ecx, [ebp+Src]
.text$mn:000074AC                 push    ecx
.text$mn:000074AD                 mov     ecx, [ebp+var_4]
.text$mn:000074B0                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000074B5                 movzx   edx, al
.text$mn:000074B8                 test    edx, edx
.text$mn:000074BA                 jz      short loc_74DE
.text$mn:000074BC                 mov     eax, [ebp+arg_4]
.text$mn:000074BF                 push    eax
.text$mn:000074C0                 mov     ecx, [ebp+var_4]
.text$mn:000074C3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000074C8                 mov     ecx, [ebp+Src]
.text$mn:000074CB                 sub     ecx, eax
.text$mn:000074CD                 sar     ecx, 1
.text$mn:000074CF                 push    ecx
.text$mn:000074D0                 mov     edx, [ebp+var_4]
.text$mn:000074D3                 push    edx
.text$mn:000074D4                 mov     ecx, [ebp+var_4]
.text$mn:000074D7                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000074DC                 jmp     short loc_754F
.text$mn:000074DE ; ---------------------------------------------------------------------------
.text$mn:000074DE
.text$mn:000074DE loc_74DE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:000074DE                 mov     eax, [ebp+var_4]
.text$mn:000074E1                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000074E7                 sub     ecx, [eax+14h]
.text$mn:000074EA                 cmp     ecx, [ebp+arg_4]
.text$mn:000074ED                 ja      short loc_74F7
.text$mn:000074EF                 mov     ecx, [ebp+var_4]
.text$mn:000074F2                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000074F7
.text$mn:000074F7 loc_74F7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:000074F7                 cmp     [ebp+arg_4], 0
.text$mn:000074FB                 jbe     short loc_754C
.text$mn:000074FD                 mov     edx, [ebp+var_4]
.text$mn:00007500                 mov     eax, [edx+14h]
.text$mn:00007503                 add     eax, [ebp+arg_4]
.text$mn:00007506                 mov     [ebp+var_8], eax
.text$mn:00007509                 push    0
.text$mn:0000750B                 mov     ecx, [ebp+var_8]
.text$mn:0000750E                 push    ecx
.text$mn:0000750F                 mov     ecx, [ebp+var_4]
.text$mn:00007512                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00007517                 movzx   edx, al
.text$mn:0000751A                 test    edx, edx
.text$mn:0000751C                 jz      short loc_754C
.text$mn:0000751E                 mov     eax, [ebp+arg_4]
.text$mn:00007521                 push    eax             ; int
.text$mn:00007522                 mov     ecx, [ebp+Src]
.text$mn:00007525                 push    ecx             ; Src
.text$mn:00007526                 mov     ecx, [ebp+var_4]
.text$mn:00007529                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000752E                 mov     edx, [ebp+var_4]
.text$mn:00007531                 mov     ecx, [edx+14h]
.text$mn:00007534                 lea     edx, [eax+ecx*2]
.text$mn:00007537                 push    edx             ; Dst
.text$mn:00007538                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000753D                 add     esp, 0Ch
.text$mn:00007540                 mov     eax, [ebp+var_8]
.text$mn:00007543                 push    eax
.text$mn:00007544                 mov     ecx, [ebp+var_4]
.text$mn:00007547                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000754C
.text$mn:0000754C loc_754C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:0000754C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:0000754C                 mov     eax, [ebp+var_4]
.text$mn:0000754F
.text$mn:0000754F loc_754F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:0000754F                 mov     esp, ebp
.text$mn:00007551                 pop     ebp
.text$mn:00007552                 retn    8
.text$mn:00007552 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00007552
.text$mn:00007552 ; ---------------------------------------------------------------------------
.text$mn:00007555                 align 4
.text$mn:00007555 _text$mn        ends
.text$mn:00007555
.text$mn:00007558 ; ===========================================================================
.text$mn:00007558
.text$mn:00007558 ; Segment type: Pure code
.text$mn:00007558 ; Segment permissions: Read/Execute
.text$mn:00007558 _text$mn        segment para public 'CODE' use32
.text$mn:00007558                 assume cs:_text$mn
.text$mn:00007558                 ;org 7558h
.text$mn:00007558 ; COMDAT (pick any)
.text$mn:00007558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007558
.text$mn:00007558 ; =============== S U B R O U T I N E =======================================
.text$mn:00007558
.text$mn:00007558 ; Attributes: bp-based frame
.text$mn:00007558
.text$mn:00007558 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00007558                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00007558 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00007558                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+6Bp
.text$mn:00007558                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00007558
.text$mn:00007558 Size            = dword ptr -8
.text$mn:00007558 var_4           = dword ptr -4
.text$mn:00007558 arg_0           = dword ptr  8
.text$mn:00007558 arg_4           = dword ptr  0Ch
.text$mn:00007558 arg_8           = dword ptr  10h
.text$mn:00007558
.text$mn:00007558                 push    ebp
.text$mn:00007559                 mov     ebp, esp
.text$mn:0000755B                 sub     esp, 8
.text$mn:0000755E                 mov     [ebp+var_4], ecx
.text$mn:00007561                 mov     ecx, [ebp+arg_0]
.text$mn:00007564                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00007569                 cmp     eax, [ebp+arg_4]
.text$mn:0000756C                 jnb     short loc_7576
.text$mn:0000756E                 mov     ecx, [ebp+var_4]
.text$mn:00007571                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00007576
.text$mn:00007576 loc_7576:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00007576                 mov     ecx, [ebp+arg_0]
.text$mn:00007579                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000757E                 sub     eax, [ebp+arg_4]
.text$mn:00007581                 mov     [ebp+Size], eax
.text$mn:00007584                 mov     eax, [ebp+arg_8]
.text$mn:00007587                 cmp     eax, [ebp+Size]
.text$mn:0000758A                 jnb     short loc_7592
.text$mn:0000758C                 mov     ecx, [ebp+arg_8]
.text$mn:0000758F                 mov     [ebp+Size], ecx
.text$mn:00007592
.text$mn:00007592 loc_7592:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00007592                 mov     edx, [ebp+var_4]
.text$mn:00007595                 cmp     edx, [ebp+arg_0]
.text$mn:00007598                 jnz     short loc_75B9
.text$mn:0000759A                 mov     eax, [ebp+arg_4]
.text$mn:0000759D                 add     eax, [ebp+Size]
.text$mn:000075A0                 push    eax
.text$mn:000075A1                 mov     ecx, [ebp+var_4]
.text$mn:000075A4                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:000075A9                 mov     ecx, [ebp+arg_4]
.text$mn:000075AC                 push    ecx
.text$mn:000075AD                 push    0
.text$mn:000075AF                 mov     ecx, [ebp+var_4]
.text$mn:000075B2                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:000075B7                 jmp     short loc_75FB
.text$mn:000075B9 ; ---------------------------------------------------------------------------
.text$mn:000075B9
.text$mn:000075B9 loc_75B9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:000075B9                 push    0
.text$mn:000075BB                 mov     edx, [ebp+Size]
.text$mn:000075BE                 push    edx
.text$mn:000075BF                 mov     ecx, [ebp+var_4]
.text$mn:000075C2                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000075C7                 movzx   eax, al
.text$mn:000075CA                 test    eax, eax
.text$mn:000075CC                 jz      short loc_75FB
.text$mn:000075CE                 mov     ecx, [ebp+Size]
.text$mn:000075D1                 push    ecx             ; Size
.text$mn:000075D2                 mov     ecx, [ebp+arg_0]
.text$mn:000075D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000075DA                 add     eax, [ebp+arg_4]
.text$mn:000075DD                 push    eax             ; Src
.text$mn:000075DE                 mov     ecx, [ebp+var_4]
.text$mn:000075E1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000075E6                 push    eax             ; Dst
.text$mn:000075E7                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000075EC                 add     esp, 0Ch
.text$mn:000075EF                 mov     edx, [ebp+Size]
.text$mn:000075F2                 push    edx
.text$mn:000075F3                 mov     ecx, [ebp+var_4]
.text$mn:000075F6                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000075FB
.text$mn:000075FB loc_75FB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:000075FB                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:000075FB                 mov     eax, [ebp+var_4]
.text$mn:000075FE                 mov     esp, ebp
.text$mn:00007600                 pop     ebp
.text$mn:00007601                 retn    0Ch
.text$mn:00007601 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00007601
.text$mn:00007601 _text$mn        ends
.text$mn:00007601
.text$mn:00007604 ; ===========================================================================
.text$mn:00007604
.text$mn:00007604 ; Segment type: Pure code
.text$mn:00007604 ; Segment permissions: Read/Execute
.text$mn:00007604 _text$mn        segment para public 'CODE' use32
.text$mn:00007604                 assume cs:_text$mn
.text$mn:00007604                 ;org 7604h
.text$mn:00007604 ; COMDAT (pick any)
.text$mn:00007604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007604
.text$mn:00007604 ; =============== S U B R O U T I N E =======================================
.text$mn:00007604
.text$mn:00007604 ; Attributes: bp-based frame
.text$mn:00007604
.text$mn:00007604 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00007604                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00007604 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00007604                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00007604
.text$mn:00007604 var_4           = dword ptr -4
.text$mn:00007604 Str             = dword ptr  8
.text$mn:00007604
.text$mn:00007604                 push    ebp
.text$mn:00007605                 mov     ebp, esp
.text$mn:00007607                 push    ecx
.text$mn:00007608                 mov     [ebp+var_4], ecx
.text$mn:0000760B                 push    490h            ; unsigned int
.text$mn:00007610                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007615                 mov     eax, [ebp+Str]
.text$mn:00007618                 push    eax             ; int
.text$mn:00007619                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000761E                 add     esp, 0Ch
.text$mn:00007621                 mov     ecx, [ebp+Str]
.text$mn:00007624                 push    ecx             ; Str
.text$mn:00007625                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000762A                 add     esp, 4
.text$mn:0000762D                 push    eax             ; Size
.text$mn:0000762E                 mov     edx, [ebp+Str]
.text$mn:00007631                 push    edx             ; Src
.text$mn:00007632                 mov     ecx, [ebp+var_4]
.text$mn:00007635                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000763A                 mov     esp, ebp
.text$mn:0000763C                 pop     ebp
.text$mn:0000763D                 retn    4
.text$mn:0000763D ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:0000763D
.text$mn:0000763D _text$mn        ends
.text$mn:0000763D
.text$mn:00007640 ; ===========================================================================
.text$mn:00007640
.text$mn:00007640 ; Segment type: Pure code
.text$mn:00007640 ; Segment permissions: Read/Execute
.text$mn:00007640 _text$mn        segment para public 'CODE' use32
.text$mn:00007640                 assume cs:_text$mn
.text$mn:00007640                 ;org 7640h
.text$mn:00007640 ; COMDAT (pick any)
.text$mn:00007640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007640
.text$mn:00007640 ; =============== S U B R O U T I N E =======================================
.text$mn:00007640
.text$mn:00007640 ; Attributes: bp-based frame
.text$mn:00007640
.text$mn:00007640 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00007640                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00007640 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00007640                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00007640
.text$mn:00007640 var_4           = dword ptr -4
.text$mn:00007640 Src             = dword ptr  8
.text$mn:00007640 Size            = dword ptr  0Ch
.text$mn:00007640
.text$mn:00007640                 push    ebp
.text$mn:00007641                 mov     ebp, esp
.text$mn:00007643                 push    ecx
.text$mn:00007644                 mov     [ebp+var_4], ecx
.text$mn:00007647                 cmp     [ebp+Size], 0
.text$mn:0000764B                 jz      short loc_7663
.text$mn:0000764D                 push    47Fh            ; unsigned int
.text$mn:00007652                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007657                 mov     eax, [ebp+Src]
.text$mn:0000765A                 push    eax             ; int
.text$mn:0000765B                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00007660                 add     esp, 0Ch
.text$mn:00007663
.text$mn:00007663 loc_7663:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00007663                 mov     ecx, [ebp+Src]
.text$mn:00007666                 push    ecx
.text$mn:00007667                 mov     ecx, [ebp+var_4]
.text$mn:0000766A                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000766F                 movzx   edx, al
.text$mn:00007672                 test    edx, edx
.text$mn:00007674                 jz      short loc_7696
.text$mn:00007676                 mov     eax, [ebp+Size]
.text$mn:00007679                 push    eax
.text$mn:0000767A                 mov     ecx, [ebp+var_4]
.text$mn:0000767D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007682                 mov     ecx, [ebp+Src]
.text$mn:00007685                 sub     ecx, eax
.text$mn:00007687                 push    ecx
.text$mn:00007688                 mov     edx, [ebp+var_4]
.text$mn:0000768B                 push    edx
.text$mn:0000768C                 mov     ecx, [ebp+var_4]
.text$mn:0000768F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00007694                 jmp     short loc_76D3
.text$mn:00007696 ; ---------------------------------------------------------------------------
.text$mn:00007696
.text$mn:00007696 loc_7696:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00007696                 push    0
.text$mn:00007698                 mov     eax, [ebp+Size]
.text$mn:0000769B                 push    eax
.text$mn:0000769C                 mov     ecx, [ebp+var_4]
.text$mn:0000769F                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000076A4                 movzx   ecx, al
.text$mn:000076A7                 test    ecx, ecx
.text$mn:000076A9                 jz      short loc_76D0
.text$mn:000076AB                 mov     edx, [ebp+Size]
.text$mn:000076AE                 push    edx             ; Size
.text$mn:000076AF                 mov     eax, [ebp+Src]
.text$mn:000076B2                 push    eax             ; Src
.text$mn:000076B3                 mov     ecx, [ebp+var_4]
.text$mn:000076B6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000076BB                 push    eax             ; Dst
.text$mn:000076BC                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000076C1                 add     esp, 0Ch
.text$mn:000076C4                 mov     ecx, [ebp+Size]
.text$mn:000076C7                 push    ecx
.text$mn:000076C8                 mov     ecx, [ebp+var_4]
.text$mn:000076CB                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000076D0
.text$mn:000076D0 loc_76D0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:000076D0                 mov     eax, [ebp+var_4]
.text$mn:000076D3
.text$mn:000076D3 loc_76D3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:000076D3                 mov     esp, ebp
.text$mn:000076D5                 pop     ebp
.text$mn:000076D6                 retn    8
.text$mn:000076D6 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:000076D6
.text$mn:000076D6 ; ---------------------------------------------------------------------------
.text$mn:000076D9                 align 4
.text$mn:000076D9 _text$mn        ends
.text$mn:000076D9
.text$mn:000076DC ; ===========================================================================
.text$mn:000076DC
.text$mn:000076DC ; Segment type: Pure code
.text$mn:000076DC ; Segment permissions: Read/Execute
.text$mn:000076DC _text$mn        segment para public 'CODE' use32
.text$mn:000076DC                 assume cs:_text$mn
.text$mn:000076DC                 ;org 76DCh
.text$mn:000076DC ; COMDAT (pick any)
.text$mn:000076DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076DC
.text$mn:000076DC ; =============== S U B R O U T I N E =======================================
.text$mn:000076DC
.text$mn:000076DC ; Attributes: bp-based frame
.text$mn:000076DC
.text$mn:000076DC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:000076DC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000076DC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000076DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+51p
.text$mn:000076DC
.text$mn:000076DC var_8           = dword ptr -8
.text$mn:000076DC var_4           = dword ptr -4
.text$mn:000076DC arg_0           = dword ptr  8
.text$mn:000076DC arg_4           = dword ptr  0Ch
.text$mn:000076DC arg_8           = dword ptr  10h
.text$mn:000076DC
.text$mn:000076DC                 push    ebp
.text$mn:000076DD                 mov     ebp, esp
.text$mn:000076DF                 sub     esp, 8
.text$mn:000076E2                 mov     [ebp+var_4], ecx
.text$mn:000076E5                 mov     ecx, [ebp+arg_0]
.text$mn:000076E8                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000076ED                 cmp     eax, [ebp+arg_4]
.text$mn:000076F0                 jnb     short loc_76FA
.text$mn:000076F2                 mov     ecx, [ebp+var_4]
.text$mn:000076F5                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000076FA
.text$mn:000076FA loc_76FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:000076FA                 mov     ecx, [ebp+arg_0]
.text$mn:000076FD                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00007702                 sub     eax, [ebp+arg_4]
.text$mn:00007705                 mov     [ebp+var_8], eax
.text$mn:00007708                 mov     eax, [ebp+arg_8]
.text$mn:0000770B                 cmp     eax, [ebp+var_8]
.text$mn:0000770E                 jnb     short loc_7716
.text$mn:00007710                 mov     ecx, [ebp+arg_8]
.text$mn:00007713                 mov     [ebp+var_8], ecx
.text$mn:00007716
.text$mn:00007716 loc_7716:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00007716                 mov     edx, [ebp+var_4]
.text$mn:00007719                 cmp     edx, [ebp+arg_0]
.text$mn:0000771C                 jnz     short loc_773D
.text$mn:0000771E                 mov     eax, [ebp+arg_4]
.text$mn:00007721                 add     eax, [ebp+var_8]
.text$mn:00007724                 push    eax
.text$mn:00007725                 mov     ecx, [ebp+var_4]
.text$mn:00007728                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:0000772D                 mov     ecx, [ebp+arg_4]
.text$mn:00007730                 push    ecx
.text$mn:00007731                 push    0
.text$mn:00007733                 mov     ecx, [ebp+var_4]
.text$mn:00007736                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000773B                 jmp     short loc_7782
.text$mn:0000773D ; ---------------------------------------------------------------------------
.text$mn:0000773D
.text$mn:0000773D loc_773D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:0000773D                 push    0
.text$mn:0000773F                 mov     edx, [ebp+var_8]
.text$mn:00007742                 push    edx
.text$mn:00007743                 mov     ecx, [ebp+var_4]
.text$mn:00007746                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000774B                 movzx   eax, al
.text$mn:0000774E                 test    eax, eax
.text$mn:00007750                 jz      short loc_7782
.text$mn:00007752                 mov     ecx, [ebp+var_8]
.text$mn:00007755                 push    ecx             ; int
.text$mn:00007756                 mov     ecx, [ebp+arg_0]
.text$mn:00007759                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000775E                 mov     edx, [ebp+arg_4]
.text$mn:00007761                 lea     eax, [eax+edx*2]
.text$mn:00007764                 push    eax             ; Src
.text$mn:00007765                 mov     ecx, [ebp+var_4]
.text$mn:00007768                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000776D                 push    eax             ; Dst
.text$mn:0000776E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00007773                 add     esp, 0Ch
.text$mn:00007776                 mov     ecx, [ebp+var_8]
.text$mn:00007779                 push    ecx
.text$mn:0000777A                 mov     ecx, [ebp+var_4]
.text$mn:0000777D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007782
.text$mn:00007782 loc_7782:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00007782                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00007782                 mov     eax, [ebp+var_4]
.text$mn:00007785                 mov     esp, ebp
.text$mn:00007787                 pop     ebp
.text$mn:00007788                 retn    0Ch
.text$mn:00007788 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00007788
.text$mn:00007788 ; ---------------------------------------------------------------------------
.text$mn:0000778B                 align 4
.text$mn:0000778B _text$mn        ends
.text$mn:0000778B
.text$mn:0000778C ; ===========================================================================
.text$mn:0000778C
.text$mn:0000778C ; Segment type: Pure code
.text$mn:0000778C ; Segment permissions: Read/Execute
.text$mn:0000778C _text$mn        segment para public 'CODE' use32
.text$mn:0000778C                 assume cs:_text$mn
.text$mn:0000778C                 ;org 778Ch
.text$mn:0000778C ; COMDAT (pick any)
.text$mn:0000778C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000778C
.text$mn:0000778C ; =============== S U B R O U T I N E =======================================
.text$mn:0000778C
.text$mn:0000778C ; Attributes: bp-based frame
.text$mn:0000778C
.text$mn:0000778C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:0000778C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000778C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000778C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:0000778C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:0000778C
.text$mn:0000778C var_4           = dword ptr -4
.text$mn:0000778C Str             = dword ptr  8
.text$mn:0000778C
.text$mn:0000778C                 push    ebp
.text$mn:0000778D                 mov     ebp, esp
.text$mn:0000778F                 push    ecx
.text$mn:00007790                 mov     [ebp+var_4], ecx
.text$mn:00007793                 push    490h            ; unsigned int
.text$mn:00007798                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000779D                 mov     eax, [ebp+Str]
.text$mn:000077A0                 push    eax             ; int
.text$mn:000077A1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000077A6                 add     esp, 0Ch
.text$mn:000077A9                 mov     ecx, [ebp+Str]
.text$mn:000077AC                 push    ecx             ; Str
.text$mn:000077AD                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000077B2                 add     esp, 4
.text$mn:000077B5                 push    eax             ; int
.text$mn:000077B6                 mov     edx, [ebp+Str]
.text$mn:000077B9                 push    edx             ; Src
.text$mn:000077BA                 mov     ecx, [ebp+var_4]
.text$mn:000077BD                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:000077C2                 mov     esp, ebp
.text$mn:000077C4                 pop     ebp
.text$mn:000077C5                 retn    4
.text$mn:000077C5 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:000077C5
.text$mn:000077C5 _text$mn        ends
.text$mn:000077C5
.text$mn:000077C8 ; ===========================================================================
.text$mn:000077C8
.text$mn:000077C8 ; Segment type: Pure code
.text$mn:000077C8 ; Segment permissions: Read/Execute
.text$mn:000077C8 _text$mn        segment para public 'CODE' use32
.text$mn:000077C8                 assume cs:_text$mn
.text$mn:000077C8                 ;org 77C8h
.text$mn:000077C8 ; COMDAT (pick any)
.text$mn:000077C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077C8
.text$mn:000077C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000077C8
.text$mn:000077C8 ; Attributes: bp-based frame
.text$mn:000077C8
.text$mn:000077C8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:000077C8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:000077C8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:000077C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:000077C8
.text$mn:000077C8 var_4           = dword ptr -4
.text$mn:000077C8 Src             = dword ptr  8
.text$mn:000077C8 arg_4           = dword ptr  0Ch
.text$mn:000077C8
.text$mn:000077C8                 push    ebp
.text$mn:000077C9                 mov     ebp, esp
.text$mn:000077CB                 push    ecx
.text$mn:000077CC                 mov     [ebp+var_4], ecx
.text$mn:000077CF                 cmp     [ebp+arg_4], 0
.text$mn:000077D3                 jz      short loc_77EB
.text$mn:000077D5                 push    47Fh            ; unsigned int
.text$mn:000077DA                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000077DF                 mov     eax, [ebp+Src]
.text$mn:000077E2                 push    eax             ; int
.text$mn:000077E3                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000077E8                 add     esp, 0Ch
.text$mn:000077EB
.text$mn:000077EB loc_77EB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:000077EB                 mov     ecx, [ebp+Src]
.text$mn:000077EE                 push    ecx
.text$mn:000077EF                 mov     ecx, [ebp+var_4]
.text$mn:000077F2                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000077F7                 movzx   edx, al
.text$mn:000077FA                 test    edx, edx
.text$mn:000077FC                 jz      short loc_7820
.text$mn:000077FE                 mov     eax, [ebp+arg_4]
.text$mn:00007801                 push    eax
.text$mn:00007802                 mov     ecx, [ebp+var_4]
.text$mn:00007805                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000780A                 mov     ecx, [ebp+Src]
.text$mn:0000780D                 sub     ecx, eax
.text$mn:0000780F                 sar     ecx, 1
.text$mn:00007811                 push    ecx
.text$mn:00007812                 mov     edx, [ebp+var_4]
.text$mn:00007815                 push    edx
.text$mn:00007816                 mov     ecx, [ebp+var_4]
.text$mn:00007819                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000781E                 jmp     short loc_785D
.text$mn:00007820 ; ---------------------------------------------------------------------------
.text$mn:00007820
.text$mn:00007820 loc_7820:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00007820                 push    0
.text$mn:00007822                 mov     eax, [ebp+arg_4]
.text$mn:00007825                 push    eax
.text$mn:00007826                 mov     ecx, [ebp+var_4]
.text$mn:00007829                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000782E                 movzx   ecx, al
.text$mn:00007831                 test    ecx, ecx
.text$mn:00007833                 jz      short loc_785A
.text$mn:00007835                 mov     edx, [ebp+arg_4]
.text$mn:00007838                 push    edx             ; int
.text$mn:00007839                 mov     eax, [ebp+Src]
.text$mn:0000783C                 push    eax             ; Src
.text$mn:0000783D                 mov     ecx, [ebp+var_4]
.text$mn:00007840                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007845                 push    eax             ; Dst
.text$mn:00007846                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000784B                 add     esp, 0Ch
.text$mn:0000784E                 mov     ecx, [ebp+arg_4]
.text$mn:00007851                 push    ecx
.text$mn:00007852                 mov     ecx, [ebp+var_4]
.text$mn:00007855                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000785A
.text$mn:0000785A loc_785A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:0000785A                 mov     eax, [ebp+var_4]
.text$mn:0000785D
.text$mn:0000785D loc_785D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:0000785D                 mov     esp, ebp
.text$mn:0000785F                 pop     ebp
.text$mn:00007860                 retn    8
.text$mn:00007860 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00007860
.text$mn:00007860 ; ---------------------------------------------------------------------------
.text$mn:00007863                 align 4
.text$mn:00007863 _text$mn        ends
.text$mn:00007863
.text$mn:00007864 ; ===========================================================================
.text$mn:00007864
.text$mn:00007864 ; Segment type: Pure code
.text$mn:00007864 ; Segment permissions: Read/Execute
.text$mn:00007864 _text$mn        segment para public 'CODE' use32
.text$mn:00007864                 assume cs:_text$mn
.text$mn:00007864                 ;org 7864h
.text$mn:00007864 ; COMDAT (pick any)
.text$mn:00007864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007864
.text$mn:00007864 ; =============== S U B R O U T I N E =======================================
.text$mn:00007864
.text$mn:00007864 ; Attributes: bp-based frame
.text$mn:00007864
.text$mn:00007864 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00007864                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00007864 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00007864                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00007864
.text$mn:00007864 arg_0           = dword ptr  8
.text$mn:00007864 arg_4           = dword ptr  0Ch
.text$mn:00007864
.text$mn:00007864                 push    ebp
.text$mn:00007865                 mov     ebp, esp
.text$mn:00007867                 mov     eax, [ebp+arg_0]
.text$mn:0000786A                 mov     ecx, [ebp+arg_4]
.text$mn:0000786D                 mov     dl, [ecx]
.text$mn:0000786F                 mov     [eax], dl
.text$mn:00007871                 pop     ebp
.text$mn:00007872                 retn
.text$mn:00007872 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00007872
.text$mn:00007872 ; ---------------------------------------------------------------------------
.text$mn:00007873                 align 4
.text$mn:00007873 _text$mn        ends
.text$mn:00007873
.text$mn:00007874 ; ===========================================================================
.text$mn:00007874
.text$mn:00007874 ; Segment type: Pure code
.text$mn:00007874 ; Segment permissions: Read/Execute
.text$mn:00007874 _text$mn        segment para public 'CODE' use32
.text$mn:00007874                 assume cs:_text$mn
.text$mn:00007874                 ;org 7874h
.text$mn:00007874 ; COMDAT (pick any)
.text$mn:00007874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007874
.text$mn:00007874 ; =============== S U B R O U T I N E =======================================
.text$mn:00007874
.text$mn:00007874 ; Attributes: bp-based frame
.text$mn:00007874
.text$mn:00007874 ; public: static wchar_t * __cdecl std::char_traits<wchar_t>::assign(wchar_t *, unsigned int, wchar_t)
.text$mn:00007874                 public ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z
.text$mn:00007874 ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z proc near
.text$mn:00007874                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+42p
.text$mn:00007874
.text$mn:00007874 arg_0           = dword ptr  8
.text$mn:00007874 arg_4           = dword ptr  0Ch
.text$mn:00007874 arg_8           = word ptr  10h
.text$mn:00007874
.text$mn:00007874                 push    ebp
.text$mn:00007875                 mov     ebp, esp
.text$mn:00007877                 mov     eax, [ebp+arg_4]
.text$mn:0000787A                 push    eax
.text$mn:0000787B                 movzx   ecx, [ebp+arg_8]
.text$mn:0000787F                 push    ecx
.text$mn:00007880                 mov     edx, [ebp+arg_0]
.text$mn:00007883                 push    edx
.text$mn:00007884                 call    _wmemset
.text$mn:00007889                 add     esp, 0Ch
.text$mn:0000788C                 pop     ebp
.text$mn:0000788D                 retn
.text$mn:0000788D ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z endp
.text$mn:0000788D
.text$mn:0000788D ; ---------------------------------------------------------------------------
.text$mn:0000788E                 align 10h
.text$mn:0000788E _text$mn        ends
.text$mn:0000788E
.text$mn:00007890 ; ===========================================================================
.text$mn:00007890
.text$mn:00007890 ; Segment type: Pure code
.text$mn:00007890 ; Segment permissions: Read/Execute
.text$mn:00007890 _text$mn        segment para public 'CODE' use32
.text$mn:00007890                 assume cs:_text$mn
.text$mn:00007890                 ;org 7890h
.text$mn:00007890 ; COMDAT (pick any)
.text$mn:00007890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007890
.text$mn:00007890 ; =============== S U B R O U T I N E =======================================
.text$mn:00007890
.text$mn:00007890 ; Attributes: bp-based frame
.text$mn:00007890
.text$mn:00007890 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00007890                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00007890 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00007890                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+20p
.text$mn:00007890                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00007890
.text$mn:00007890 arg_0           = dword ptr  8
.text$mn:00007890 arg_4           = dword ptr  0Ch
.text$mn:00007890
.text$mn:00007890                 push    ebp
.text$mn:00007891                 mov     ebp, esp
.text$mn:00007893                 mov     eax, [ebp+arg_0]
.text$mn:00007896                 mov     ecx, [ebp+arg_4]
.text$mn:00007899                 mov     dx, [ecx]
.text$mn:0000789C                 mov     [eax], dx
.text$mn:0000789F                 pop     ebp
.text$mn:000078A0                 retn
.text$mn:000078A0 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:000078A0
.text$mn:000078A0 ; ---------------------------------------------------------------------------
.text$mn:000078A1                 align 4
.text$mn:000078A1 _text$mn        ends
.text$mn:000078A1
.text$mn:000078A4 ; ===========================================================================
.text$mn:000078A4
.text$mn:000078A4 ; Segment type: Pure code
.text$mn:000078A4 ; Segment permissions: Read/Execute
.text$mn:000078A4 _text$mn        segment para public 'CODE' use32
.text$mn:000078A4                 assume cs:_text$mn
.text$mn:000078A4                 ;org 78A4h
.text$mn:000078A4 ; COMDAT (pick any)
.text$mn:000078A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078A4
.text$mn:000078A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000078A4
.text$mn:000078A4 ; Attributes: bp-based frame
.text$mn:000078A4
.text$mn:000078A4 ; public: wchar_t & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::at(unsigned int)
.text$mn:000078A4                 public ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z
.text$mn:000078A4 ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z proc near
.text$mn:000078A4                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+8Ap
.text$mn:000078A4                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+A6p ...
.text$mn:000078A4
.text$mn:000078A4 var_4           = dword ptr -4
.text$mn:000078A4 arg_0           = dword ptr  8
.text$mn:000078A4
.text$mn:000078A4                 push    ebp
.text$mn:000078A5                 mov     ebp, esp
.text$mn:000078A7                 push    ecx
.text$mn:000078A8                 mov     [ebp+var_4], ecx
.text$mn:000078AB                 mov     eax, [ebp+var_4]
.text$mn:000078AE                 mov     ecx, [eax+14h]
.text$mn:000078B1                 cmp     ecx, [ebp+arg_0]
.text$mn:000078B4                 ja      short loc_78BE
.text$mn:000078B6                 mov     ecx, [ebp+var_4]
.text$mn:000078B9                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000078BE
.text$mn:000078BE loc_78BE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::at(uint)+10j
.text$mn:000078BE                 mov     ecx, [ebp+var_4]
.text$mn:000078C1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000078C6                 mov     edx, [ebp+arg_0]
.text$mn:000078C9                 lea     eax, [eax+edx*2]
.text$mn:000078CC                 mov     esp, ebp
.text$mn:000078CE                 pop     ebp
.text$mn:000078CF                 retn    4
.text$mn:000078CF ?at@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z endp
.text$mn:000078CF
.text$mn:000078CF ; ---------------------------------------------------------------------------
.text$mn:000078D2                 align 4
.text$mn:000078D2 _text$mn        ends
.text$mn:000078D2
.text$mn:000078D4 ; ===========================================================================
.text$mn:000078D4
.text$mn:000078D4 ; Segment type: Pure code
.text$mn:000078D4 ; Segment permissions: Read/Execute
.text$mn:000078D4 _text$mn        segment para public 'CODE' use32
.text$mn:000078D4                 assume cs:_text$mn
.text$mn:000078D4                 ;org 78D4h
.text$mn:000078D4 ; COMDAT (pick any)
.text$mn:000078D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000078D4
.text$mn:000078D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000078D4
.text$mn:000078D4 ; Attributes: bp-based frame
.text$mn:000078D4
.text$mn:000078D4 ; public: char const * __thiscall std::_Yarn<char>::c_str(void)const
.text$mn:000078D4                 public ?c_str@?$_Yarn@D@std@@QBEPBDXZ
.text$mn:000078D4 ?c_str@?$_Yarn@D@std@@QBEPBDXZ proc near
.text$mn:000078D4                                         ; CODE XREF: std::locale::c_str(void)+22p
.text$mn:000078D4
.text$mn:000078D4 var_8           = dword ptr -8
.text$mn:000078D4 var_4           = dword ptr -4
.text$mn:000078D4
.text$mn:000078D4                 push    ebp
.text$mn:000078D5                 mov     ebp, esp
.text$mn:000078D7                 sub     esp, 8
.text$mn:000078DA                 mov     [ebp+var_4], ecx
.text$mn:000078DD                 mov     eax, [ebp+var_4]
.text$mn:000078E0                 cmp     dword ptr [eax], 0
.text$mn:000078E3                 jz      short loc_78EF
.text$mn:000078E5                 mov     ecx, [ebp+var_4]
.text$mn:000078E8                 mov     edx, [ecx]
.text$mn:000078EA                 mov     [ebp+var_8], edx
.text$mn:000078ED                 jmp     short loc_78F8
.text$mn:000078EF ; ---------------------------------------------------------------------------
.text$mn:000078EF
.text$mn:000078EF loc_78EF:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+Fj
.text$mn:000078EF                 mov     eax, [ebp+var_4]
.text$mn:000078F2                 add     eax, 4
.text$mn:000078F5                 mov     [ebp+var_8], eax
.text$mn:000078F8
.text$mn:000078F8 loc_78F8:                               ; CODE XREF: std::_Yarn<char>::c_str(void)+19j
.text$mn:000078F8                 mov     eax, [ebp+var_8]
.text$mn:000078FB                 mov     esp, ebp
.text$mn:000078FD                 pop     ebp
.text$mn:000078FE                 retn
.text$mn:000078FE ?c_str@?$_Yarn@D@std@@QBEPBDXZ endp
.text$mn:000078FE
.text$mn:000078FE ; ---------------------------------------------------------------------------
.text$mn:000078FF                 align 10h
.text$mn:000078FF _text$mn        ends
.text$mn:000078FF
.text$mn:00007900 ; ===========================================================================
.text$mn:00007900
.text$mn:00007900 ; Segment type: Pure code
.text$mn:00007900 ; Segment permissions: Read/Execute
.text$mn:00007900 _text$mn        segment para public 'CODE' use32
.text$mn:00007900                 assume cs:_text$mn
.text$mn:00007900                 ;org 7900h
.text$mn:00007900 ; COMDAT (pick any)
.text$mn:00007900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007900
.text$mn:00007900 ; =============== S U B R O U T I N E =======================================
.text$mn:00007900
.text$mn:00007900 ; Attributes: bp-based frame
.text$mn:00007900
.text$mn:00007900 ; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
.text$mn:00007900                 public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
.text$mn:00007900 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
.text$mn:00007900                                         ; CODE XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+2Bp
.text$mn:00007900
.text$mn:00007900 var_4           = dword ptr -4
.text$mn:00007900
.text$mn:00007900                 push    ebp
.text$mn:00007901                 mov     ebp, esp
.text$mn:00007903                 push    ecx
.text$mn:00007904                 mov     [ebp+var_4], ecx
.text$mn:00007907                 mov     ecx, [ebp+var_4]
.text$mn:0000790A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000790F                 mov     esp, ebp
.text$mn:00007911                 pop     ebp
.text$mn:00007912                 retn
.text$mn:00007912 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp
.text$mn:00007912
.text$mn:00007912 ; ---------------------------------------------------------------------------
.text$mn:00007913                 align 4
.text$mn:00007913 _text$mn        ends
.text$mn:00007913
.text$mn:00007914 ; ===========================================================================
.text$mn:00007914
.text$mn:00007914 ; Segment type: Pure code
.text$mn:00007914 ; Segment permissions: Read/Execute
.text$mn:00007914 _text$mn        segment para public 'CODE' use32
.text$mn:00007914                 assume cs:_text$mn
.text$mn:00007914                 ;org 7914h
.text$mn:00007914 ; COMDAT (pick any)
.text$mn:00007914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007914
.text$mn:00007914 ; =============== S U B R O U T I N E =======================================
.text$mn:00007914
.text$mn:00007914 ; Attributes: bp-based frame
.text$mn:00007914
.text$mn:00007914 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00007914                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00007914 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00007914                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25Ep
.text$mn:00007914                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+2A9p ...
.text$mn:00007914
.text$mn:00007914 var_4           = dword ptr -4
.text$mn:00007914
.text$mn:00007914                 push    ebp
.text$mn:00007915                 mov     ebp, esp
.text$mn:00007917                 push    ecx
.text$mn:00007918                 mov     [ebp+var_4], ecx
.text$mn:0000791B                 mov     ecx, [ebp+var_4]
.text$mn:0000791E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007923                 mov     esp, ebp
.text$mn:00007925                 pop     ebp
.text$mn:00007926                 retn
.text$mn:00007926 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00007926
.text$mn:00007926 ; ---------------------------------------------------------------------------
.text$mn:00007927                 align 4
.text$mn:00007927 _text$mn        ends
.text$mn:00007927
.text$mn:00007928 ; ===========================================================================
.text$mn:00007928
.text$mn:00007928 ; Segment type: Pure code
.text$mn:00007928 ; Segment permissions: Read/Execute
.text$mn:00007928 _text$mn        segment para public 'CODE' use32
.text$mn:00007928                 assume cs:_text$mn
.text$mn:00007928                 ;org 7928h
.text$mn:00007928 ; COMDAT (pick any)
.text$mn:00007928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007928
.text$mn:00007928 ; =============== S U B R O U T I N E =======================================
.text$mn:00007928
.text$mn:00007928 ; Attributes: bp-based frame
.text$mn:00007928
.text$mn:00007928 ; const char *__thiscall std::locale::c_str(std::locale *__hidden this)
.text$mn:00007928                 public ?c_str@locale@std@@QBEPBDXZ
.text$mn:00007928 ?c_str@locale@std@@QBEPBDXZ proc near   ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+77p
.text$mn:00007928
.text$mn:00007928 var_8           = dword ptr -8
.text$mn:00007928 var_4           = dword ptr -4
.text$mn:00007928
.text$mn:00007928                 push    ebp
.text$mn:00007929                 mov     ebp, esp
.text$mn:0000792B                 sub     esp, 8
.text$mn:0000792E                 mov     [ebp+var_4], ecx
.text$mn:00007931                 mov     eax, [ebp+var_4]
.text$mn:00007934                 cmp     dword ptr [eax], 0
.text$mn:00007937                 jnz     short loc_7942
.text$mn:00007939                 mov     [ebp+var_8], offset ??_C@_00CNPNBAHC@?$AA@ ; `string'
.text$mn:00007940                 jmp     short loc_7952
.text$mn:00007942 ; ---------------------------------------------------------------------------
.text$mn:00007942
.text$mn:00007942 loc_7942:                               ; CODE XREF: std::locale::c_str(void)+Fj
.text$mn:00007942                 mov     ecx, [ebp+var_4]
.text$mn:00007945                 mov     ecx, [ecx]
.text$mn:00007947                 add     ecx, 18h
.text$mn:0000794A                 call    ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str(void)
.text$mn:0000794F                 mov     [ebp+var_8], eax
.text$mn:00007952
.text$mn:00007952 loc_7952:                               ; CODE XREF: std::locale::c_str(void)+18j
.text$mn:00007952                 mov     eax, [ebp+var_8]
.text$mn:00007955                 mov     esp, ebp
.text$mn:00007957                 pop     ebp
.text$mn:00007958                 retn
.text$mn:00007958 ?c_str@locale@std@@QBEPBDXZ endp
.text$mn:00007958
.text$mn:00007958 ; ---------------------------------------------------------------------------
.text$mn:00007959                 align 4
.text$mn:00007959 _text$mn        ends
.text$mn:00007959
.text$mn:0000795C ; ===========================================================================
.text$mn:0000795C
.text$mn:0000795C ; Segment type: Pure code
.text$mn:0000795C ; Segment permissions: Read/Execute
.text$mn:0000795C _text$mn        segment para public 'CODE' use32
.text$mn:0000795C                 assume cs:_text$mn
.text$mn:0000795C                 ;org 795Ch
.text$mn:0000795C ; COMDAT (pick any)
.text$mn:0000795C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000795C
.text$mn:0000795C ; =============== S U B R O U T I N E =======================================
.text$mn:0000795C
.text$mn:0000795C ; Attributes: bp-based frame
.text$mn:0000795C
.text$mn:0000795C ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:0000795C                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:0000795C ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000795C                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:0000795C                                         ; std::error_code::message(void)+32p
.text$mn:0000795C
.text$mn:0000795C var_4           = dword ptr -4
.text$mn:0000795C
.text$mn:0000795C                 push    ebp
.text$mn:0000795D                 mov     ebp, esp
.text$mn:0000795F                 push    ecx
.text$mn:00007960                 mov     [ebp+var_4], ecx
.text$mn:00007963                 mov     eax, [ebp+var_4]
.text$mn:00007966                 mov     eax, [eax+4]
.text$mn:00007969                 mov     esp, ebp
.text$mn:0000796B                 pop     ebp
.text$mn:0000796C                 retn
.text$mn:0000796C ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000796C
.text$mn:0000796C ; ---------------------------------------------------------------------------
.text$mn:0000796D                 align 10h
.text$mn:0000796D _text$mn        ends
.text$mn:0000796D
.text$mn:00007970 ; ===========================================================================
.text$mn:00007970
.text$mn:00007970 ; Segment type: Pure code
.text$mn:00007970 ; Segment permissions: Read/Execute
.text$mn:00007970 _text$mn        segment para public 'CODE' use32
.text$mn:00007970                 assume cs:_text$mn
.text$mn:00007970                 ;org 7970h
.text$mn:00007970 ; COMDAT (pick any)
.text$mn:00007970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007970
.text$mn:00007970 ; =============== S U B R O U T I N E =======================================
.text$mn:00007970
.text$mn:00007970 ; Attributes: bp-based frame
.text$mn:00007970
.text$mn:00007970 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00007970                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00007970 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00007970                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00007970                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00007970
.text$mn:00007970 var_4           = dword ptr -4
.text$mn:00007970
.text$mn:00007970                 push    ebp
.text$mn:00007971                 mov     ebp, esp
.text$mn:00007973                 push    ecx
.text$mn:00007974                 mov     [ebp+var_4], ecx
.text$mn:00007977                 mov     eax, [ebp+var_4]
.text$mn:0000797A                 mov     eax, [eax+4]
.text$mn:0000797D                 mov     esp, ebp
.text$mn:0000797F                 pop     ebp
.text$mn:00007980                 retn
.text$mn:00007980 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00007980
.text$mn:00007980 ; ---------------------------------------------------------------------------
.text$mn:00007981                 align 4
.text$mn:00007981 _text$mn        ends
.text$mn:00007981
.text$mn:00007984 ; ===========================================================================
.text$mn:00007984
.text$mn:00007984 ; Segment type: Pure code
.text$mn:00007984 ; Segment permissions: Read/Execute
.text$mn:00007984 _text$mn        segment para public 'CODE' use32
.text$mn:00007984                 assume cs:_text$mn
.text$mn:00007984                 ;org 7984h
.text$mn:00007984 ; COMDAT (pick any)
.text$mn:00007984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007984
.text$mn:00007984 ; =============== S U B R O U T I N E =======================================
.text$mn:00007984
.text$mn:00007984 ; Attributes: bp-based frame
.text$mn:00007984
.text$mn:00007984 ; public: void __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::clear(int, bool)
.text$mn:00007984                 public ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
.text$mn:00007984 ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z proc near
.text$mn:00007984                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+21p
.text$mn:00007984
.text$mn:00007984 var_8           = dword ptr -8
.text$mn:00007984 var_4           = dword ptr -4
.text$mn:00007984 arg_0           = dword ptr  8
.text$mn:00007984 arg_4           = byte ptr  0Ch
.text$mn:00007984
.text$mn:00007984                 push    ebp
.text$mn:00007985                 mov     ebp, esp
.text$mn:00007987                 sub     esp, 8
.text$mn:0000798A                 mov     [ebp+var_8], ecx
.text$mn:0000798D                 mov     eax, [ebp+var_8]
.text$mn:00007990                 cmp     dword ptr [eax+38h], 0
.text$mn:00007994                 jnz     short loc_79A1
.text$mn:00007996                 mov     ecx, [ebp+arg_0]
.text$mn:00007999                 or      ecx, 4
.text$mn:0000799C                 mov     [ebp+var_4], ecx
.text$mn:0000799F                 jmp     short loc_79A7
.text$mn:000079A1 ; ---------------------------------------------------------------------------
.text$mn:000079A1
.text$mn:000079A1 loc_79A1:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+10j
.text$mn:000079A1                 mov     edx, [ebp+arg_0]
.text$mn:000079A4                 mov     [ebp+var_4], edx
.text$mn:000079A7
.text$mn:000079A7 loc_79A7:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+1Bj
.text$mn:000079A7                 movzx   eax, [ebp+arg_4]
.text$mn:000079AB                 push    eax             ; bool
.text$mn:000079AC                 mov     ecx, [ebp+var_4]
.text$mn:000079AF                 push    ecx             ; int
.text$mn:000079B0                 mov     ecx, [ebp+var_8] ; this
.text$mn:000079B3                 call    ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear(int,bool)
.text$mn:000079B8                 mov     esp, ebp
.text$mn:000079BA                 pop     ebp
.text$mn:000079BB                 retn    8
.text$mn:000079BB ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z endp
.text$mn:000079BB
.text$mn:000079BB ; ---------------------------------------------------------------------------
.text$mn:000079BE                 align 10h
.text$mn:000079BE _text$mn        ends
.text$mn:000079BE
.text$mn:000079C0 ; ===========================================================================
.text$mn:000079C0
.text$mn:000079C0 ; Segment type: Pure code
.text$mn:000079C0 ; Segment permissions: Read/Execute
.text$mn:000079C0 _text$mn        segment para public 'CODE' use32
.text$mn:000079C0                 assume cs:_text$mn
.text$mn:000079C0                 ;org 79C0h
.text$mn:000079C0 ; COMDAT (pick any)
.text$mn:000079C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079C0
.text$mn:000079C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000079C0
.text$mn:000079C0 ; Attributes: bp-based frame
.text$mn:000079C0
.text$mn:000079C0 ; void __thiscall std::ios_base::clear(std::ios_base *this, int, bool)
.text$mn:000079C0                 public ?clear@ios_base@std@@QAEXH_N@Z
.text$mn:000079C0 ?clear@ios_base@std@@QAEXH_N@Z proc near
.text$mn:000079C0                                         ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)+2Fp
.text$mn:000079C0
.text$mn:000079C0 var_58          = byte ptr -58h
.text$mn:000079C0 var_44          = byte ptr -44h
.text$mn:000079C0 var_30          = byte ptr -30h
.text$mn:000079C0 var_1C          = byte ptr -1Ch
.text$mn:000079C0 var_14          = byte ptr -14h
.text$mn:000079C0 var_C           = byte ptr -0Ch
.text$mn:000079C0 var_4           = dword ptr -4
.text$mn:000079C0 arg_0           = dword ptr  8
.text$mn:000079C0 arg_4           = byte ptr  0Ch
.text$mn:000079C0
.text$mn:000079C0                 push    ebp
.text$mn:000079C1                 mov     ebp, esp
.text$mn:000079C3                 sub     esp, 58h
.text$mn:000079C6                 mov     [ebp+var_4], ecx
.text$mn:000079C9                 mov     eax, [ebp+arg_0]
.text$mn:000079CC                 and     eax, 17h
.text$mn:000079CF                 mov     ecx, [ebp+var_4]
.text$mn:000079D2                 mov     [ecx+0Ch], eax
.text$mn:000079D5                 mov     edx, [ebp+var_4]
.text$mn:000079D8                 mov     eax, [ebp+var_4]
.text$mn:000079DB                 mov     ecx, [edx+0Ch]
.text$mn:000079DE                 and     ecx, [eax+10h]
.text$mn:000079E1                 jnz     short loc_79E8
.text$mn:000079E3                 jmp     loc_7AA2
.text$mn:000079E8 ; ---------------------------------------------------------------------------
.text$mn:000079E8
.text$mn:000079E8 loc_79E8:                               ; CODE XREF: std::ios_base::clear(int,bool)+21j
.text$mn:000079E8                 movzx   edx, [ebp+arg_4]
.text$mn:000079EC                 test    edx, edx
.text$mn:000079EE                 jz      short loc_79FE
.text$mn:000079F0                 push    0
.text$mn:000079F2                 push    0
.text$mn:000079F4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000079F9 ; ---------------------------------------------------------------------------
.text$mn:000079F9                 jmp     loc_7AA2
.text$mn:000079FE ; ---------------------------------------------------------------------------
.text$mn:000079FE
.text$mn:000079FE loc_79FE:                               ; CODE XREF: std::ios_base::clear(int,bool)+2Ej
.text$mn:000079FE                 mov     eax, [ebp+var_4]
.text$mn:00007A01                 mov     ecx, [ebp+var_4]
.text$mn:00007A04                 mov     edx, [eax+0Ch]
.text$mn:00007A07                 and     edx, [ecx+10h]
.text$mn:00007A0A                 and     edx, 4
.text$mn:00007A0D                 jz      short loc_7A3B
.text$mn:00007A0F                 push    1
.text$mn:00007A11                 lea     eax, [ebp+var_C]
.text$mn:00007A14                 push    eax
.text$mn:00007A15                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:00007A1A                 add     esp, 8
.text$mn:00007A1D                 push    eax             ; struct std::error_code *
.text$mn:00007A1E                 push    offset ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ ; "ios_base::badbit set"
.text$mn:00007A23                 lea     ecx, [ebp+var_30] ; this
.text$mn:00007A26                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:00007A2B                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:00007A30                 lea     ecx, [ebp+var_30]
.text$mn:00007A33                 push    ecx
.text$mn:00007A34                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007A39 ; ---------------------------------------------------------------------------
.text$mn:00007A39                 jmp     short loc_7AA2
.text$mn:00007A3B ; ---------------------------------------------------------------------------
.text$mn:00007A3B
.text$mn:00007A3B loc_7A3B:                               ; CODE XREF: std::ios_base::clear(int,bool)+4Dj
.text$mn:00007A3B                 mov     edx, [ebp+var_4]
.text$mn:00007A3E                 mov     eax, [ebp+var_4]
.text$mn:00007A41                 mov     ecx, [edx+0Ch]
.text$mn:00007A44                 and     ecx, [eax+10h]
.text$mn:00007A47                 and     ecx, 2
.text$mn:00007A4A                 jz      short loc_7A78
.text$mn:00007A4C                 push    1
.text$mn:00007A4E                 lea     edx, [ebp+var_14]
.text$mn:00007A51                 push    edx
.text$mn:00007A52                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:00007A57                 add     esp, 8
.text$mn:00007A5A                 push    eax             ; struct std::error_code *
.text$mn:00007A5B                 push    offset ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; "ios_base::failbit set"
.text$mn:00007A60                 lea     ecx, [ebp+var_44] ; this
.text$mn:00007A63                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:00007A68                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:00007A6D                 lea     eax, [ebp+var_44]
.text$mn:00007A70                 push    eax
.text$mn:00007A71                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007A76 ; ---------------------------------------------------------------------------
.text$mn:00007A76                 jmp     short loc_7AA2
.text$mn:00007A78 ; ---------------------------------------------------------------------------
.text$mn:00007A78
.text$mn:00007A78 loc_7A78:                               ; CODE XREF: std::ios_base::clear(int,bool)+8Aj
.text$mn:00007A78                 push    1
.text$mn:00007A7A                 lea     ecx, [ebp+var_1C]
.text$mn:00007A7D                 push    ecx
.text$mn:00007A7E                 call    ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code(std::io_errc)
.text$mn:00007A83                 add     esp, 8
.text$mn:00007A86                 push    eax             ; struct std::error_code *
.text$mn:00007A87                 push    offset ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ ; "ios_base::eofbit set"
.text$mn:00007A8C                 lea     ecx, [ebp+var_58] ; this
.text$mn:00007A8F                 call    ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure(char const *,std::error_code const &)
.text$mn:00007A94                 push    offset __TI5?AVfailure@ios_base@std@@
.text$mn:00007A99                 lea     edx, [ebp+var_58]
.text$mn:00007A9C                 push    edx
.text$mn:00007A9D                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007AA2 ; ---------------------------------------------------------------------------
.text$mn:00007AA2
.text$mn:00007AA2 loc_7AA2:                               ; CODE XREF: std::ios_base::clear(int,bool)+23j
.text$mn:00007AA2                                         ; std::ios_base::clear(int,bool)+39j ...
.text$mn:00007AA2                 mov     esp, ebp
.text$mn:00007AA4                 pop     ebp
.text$mn:00007AA5                 retn    8
.text$mn:00007AA5 ?clear@ios_base@std@@QAEXH_N@Z endp
.text$mn:00007AA5
.text$mn:00007AA5 _text$mn        ends
.text$mn:00007AA5
.text$mn:00007AA8 ; ===========================================================================
.text$mn:00007AA8
.text$mn:00007AA8 ; Segment type: Pure code
.text$mn:00007AA8 ; Segment permissions: Read/Execute
.text$mn:00007AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00007AA8                 assume cs:_text$mn
.text$mn:00007AA8                 ;org 7AA8h
.text$mn:00007AA8 ; COMDAT (pick any)
.text$mn:00007AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AA8
.text$mn:00007AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AA8
.text$mn:00007AA8 ; Attributes: bp-based frame
.text$mn:00007AA8
.text$mn:00007AA8 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00007AA8                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00007AA8 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00007AA8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00007AA8
.text$mn:00007AA8 var_4           = dword ptr -4
.text$mn:00007AA8 Dst             = dword ptr  8
.text$mn:00007AA8 Src             = dword ptr  0Ch
.text$mn:00007AA8 Size            = dword ptr  10h
.text$mn:00007AA8
.text$mn:00007AA8                 push    ebp
.text$mn:00007AA9                 mov     ebp, esp
.text$mn:00007AAB                 push    ecx
.text$mn:00007AAC                 cmp     [ebp+Size], 0
.text$mn:00007AB0                 jnz     short loc_7ABA
.text$mn:00007AB2                 mov     eax, [ebp+Dst]
.text$mn:00007AB5                 mov     [ebp+var_4], eax
.text$mn:00007AB8                 jmp     short loc_7AD1
.text$mn:00007ABA ; ---------------------------------------------------------------------------
.text$mn:00007ABA
.text$mn:00007ABA loc_7ABA:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:00007ABA                 mov     ecx, [ebp+Size]
.text$mn:00007ABD                 push    ecx             ; Size
.text$mn:00007ABE                 mov     edx, [ebp+Src]
.text$mn:00007AC1                 push    edx             ; Src
.text$mn:00007AC2                 mov     eax, [ebp+Dst]
.text$mn:00007AC5                 push    eax             ; Dst
.text$mn:00007AC6                 call    _memcpy
.text$mn:00007ACB                 add     esp, 0Ch
.text$mn:00007ACE                 mov     [ebp+var_4], eax
.text$mn:00007AD1
.text$mn:00007AD1 loc_7AD1:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00007AD1                 mov     eax, [ebp+var_4]
.text$mn:00007AD4                 mov     esp, ebp
.text$mn:00007AD6                 pop     ebp
.text$mn:00007AD7                 retn
.text$mn:00007AD7 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00007AD7
.text$mn:00007AD7 _text$mn        ends
.text$mn:00007AD7
.text$mn:00007AD8 ; ===========================================================================
.text$mn:00007AD8
.text$mn:00007AD8 ; Segment type: Pure code
.text$mn:00007AD8 ; Segment permissions: Read/Execute
.text$mn:00007AD8 _text$mn        segment para public 'CODE' use32
.text$mn:00007AD8                 assume cs:_text$mn
.text$mn:00007AD8                 ;org 7AD8h
.text$mn:00007AD8 ; COMDAT (pick any)
.text$mn:00007AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AD8
.text$mn:00007AD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AD8
.text$mn:00007AD8 ; Attributes: bp-based frame
.text$mn:00007AD8
.text$mn:00007AD8 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00007AD8                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00007AD8 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00007AD8                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00007AD8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00007AD8
.text$mn:00007AD8 var_4           = dword ptr -4
.text$mn:00007AD8 Dst             = dword ptr  8
.text$mn:00007AD8 Src             = dword ptr  0Ch
.text$mn:00007AD8 arg_8           = dword ptr  10h
.text$mn:00007AD8
.text$mn:00007AD8                 push    ebp
.text$mn:00007AD9                 mov     ebp, esp
.text$mn:00007ADB                 push    ecx
.text$mn:00007ADC                 cmp     [ebp+arg_8], 0
.text$mn:00007AE0                 jnz     short loc_7AEA
.text$mn:00007AE2                 mov     eax, [ebp+Dst]
.text$mn:00007AE5                 mov     [ebp+var_4], eax
.text$mn:00007AE8                 jmp     short loc_7B01
.text$mn:00007AEA ; ---------------------------------------------------------------------------
.text$mn:00007AEA
.text$mn:00007AEA loc_7AEA:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00007AEA                 mov     ecx, [ebp+arg_8]
.text$mn:00007AED                 push    ecx             ; int
.text$mn:00007AEE                 mov     edx, [ebp+Src]
.text$mn:00007AF1                 push    edx             ; Src
.text$mn:00007AF2                 mov     eax, [ebp+Dst]
.text$mn:00007AF5                 push    eax             ; Dst
.text$mn:00007AF6                 call    _wmemcpy
.text$mn:00007AFB                 add     esp, 0Ch
.text$mn:00007AFE                 mov     [ebp+var_4], eax
.text$mn:00007B01
.text$mn:00007B01 loc_7B01:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00007B01                 mov     eax, [ebp+var_4]
.text$mn:00007B04                 mov     esp, ebp
.text$mn:00007B06                 pop     ebp
.text$mn:00007B07                 retn
.text$mn:00007B07 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00007B07
.text$mn:00007B07 _text$mn        ends
.text$mn:00007B07
.text$mn:00007B08 ; ===========================================================================
.text$mn:00007B08
.text$mn:00007B08 ; Segment type: Pure code
.text$mn:00007B08 ; Segment permissions: Read/Execute
.text$mn:00007B08 _text$mn        segment para public 'CODE' use32
.text$mn:00007B08                 assume cs:_text$mn
.text$mn:00007B08                 ;org 7B08h
.text$mn:00007B08 ; COMDAT (pick any)
.text$mn:00007B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B08
.text$mn:00007B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B08
.text$mn:00007B08 ; Attributes: bp-based frame
.text$mn:00007B08
.text$mn:00007B08 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00007B08                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00007B08 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00007B08                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00007B08
.text$mn:00007B08 var_4           = dword ptr -4
.text$mn:00007B08 arg_0           = dword ptr  8
.text$mn:00007B08 arg_4           = dword ptr  0Ch
.text$mn:00007B08
.text$mn:00007B08                 push    ebp
.text$mn:00007B09                 mov     ebp, esp
.text$mn:00007B0B                 push    ecx
.text$mn:00007B0C                 mov     [ebp+var_4], ecx
.text$mn:00007B0F                 mov     eax, [ebp+arg_4]
.text$mn:00007B12                 push    eax             ; int
.text$mn:00007B13                 mov     ecx, [ebp+arg_0]
.text$mn:00007B16                 push    ecx             ; void *
.text$mn:00007B17                 mov     ecx, [ebp+var_4]
.text$mn:00007B1A                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00007B1F                 mov     esp, ebp
.text$mn:00007B21                 pop     ebp
.text$mn:00007B22                 retn    8
.text$mn:00007B22 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00007B22
.text$mn:00007B22 ; ---------------------------------------------------------------------------
.text$mn:00007B25                 align 4
.text$mn:00007B25 _text$mn        ends
.text$mn:00007B25
.text$mn:00007B28 ; ===========================================================================
.text$mn:00007B28
.text$mn:00007B28 ; Segment type: Pure code
.text$mn:00007B28 ; Segment permissions: Read/Execute
.text$mn:00007B28 _text$mn        segment para public 'CODE' use32
.text$mn:00007B28                 assume cs:_text$mn
.text$mn:00007B28                 ;org 7B28h
.text$mn:00007B28 ; COMDAT (pick any)
.text$mn:00007B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B28
.text$mn:00007B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B28
.text$mn:00007B28 ; Attributes: bp-based frame
.text$mn:00007B28
.text$mn:00007B28 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00007B28                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00007B28 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00007B28                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00007B28
.text$mn:00007B28 var_4           = dword ptr -4
.text$mn:00007B28 arg_0           = dword ptr  8
.text$mn:00007B28 arg_4           = dword ptr  0Ch
.text$mn:00007B28
.text$mn:00007B28                 push    ebp
.text$mn:00007B29                 mov     ebp, esp
.text$mn:00007B2B                 push    ecx
.text$mn:00007B2C                 mov     [ebp+var_4], ecx
.text$mn:00007B2F                 mov     eax, [ebp+arg_4]
.text$mn:00007B32                 push    eax             ; int
.text$mn:00007B33                 mov     ecx, [ebp+arg_0]
.text$mn:00007B36                 push    ecx             ; void *
.text$mn:00007B37                 mov     ecx, [ebp+var_4]
.text$mn:00007B3A                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00007B3F                 mov     esp, ebp
.text$mn:00007B41                 pop     ebp
.text$mn:00007B42                 retn    8
.text$mn:00007B42 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00007B42
.text$mn:00007B42 ; ---------------------------------------------------------------------------
.text$mn:00007B45                 align 4
.text$mn:00007B45 _text$mn        ends
.text$mn:00007B45
.text$mn:00007B48 ; ===========================================================================
.text$mn:00007B48
.text$mn:00007B48 ; Segment type: Pure code
.text$mn:00007B48 ; Segment permissions: Read/Execute
.text$mn:00007B48 _text$mn        segment para public 'CODE' use32
.text$mn:00007B48                 assume cs:_text$mn
.text$mn:00007B48                 ;org 7B48h
.text$mn:00007B48 ; COMDAT (pick any)
.text$mn:00007B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B48
.text$mn:00007B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B48
.text$mn:00007B48 ; Attributes: bp-based frame
.text$mn:00007B48
.text$mn:00007B48 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00007B48                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00007B48 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00007B48                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00007B48
.text$mn:00007B48 var_4           = dword ptr -4
.text$mn:00007B48 arg_0           = dword ptr  8
.text$mn:00007B48
.text$mn:00007B48                 push    ebp
.text$mn:00007B49                 mov     ebp, esp
.text$mn:00007B4B                 push    ecx
.text$mn:00007B4C                 mov     [ebp+var_4], ecx
.text$mn:00007B4F                 mov     eax, [ebp+arg_0]
.text$mn:00007B52                 push    eax             ; void *
.text$mn:00007B53                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B58                 add     esp, 4
.text$mn:00007B5B                 mov     esp, ebp
.text$mn:00007B5D                 pop     ebp
.text$mn:00007B5E                 retn    8
.text$mn:00007B5E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:00007B5E
.text$mn:00007B5E ; ---------------------------------------------------------------------------
.text$mn:00007B61                 align 4
.text$mn:00007B61 _text$mn        ends
.text$mn:00007B61
.text$mn:00007B64 ; ===========================================================================
.text$mn:00007B64
.text$mn:00007B64 ; Segment type: Pure code
.text$mn:00007B64 ; Segment permissions: Read/Execute
.text$mn:00007B64 _text$mn        segment para public 'CODE' use32
.text$mn:00007B64                 assume cs:_text$mn
.text$mn:00007B64                 ;org 7B64h
.text$mn:00007B64 ; COMDAT (pick any)
.text$mn:00007B64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B64
.text$mn:00007B64 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B64
.text$mn:00007B64 ; Attributes: bp-based frame
.text$mn:00007B64
.text$mn:00007B64 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00007B64                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00007B64 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00007B64                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00007B64                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:00007B64
.text$mn:00007B64 var_4           = dword ptr -4
.text$mn:00007B64 arg_0           = dword ptr  8
.text$mn:00007B64
.text$mn:00007B64                 push    ebp
.text$mn:00007B65                 mov     ebp, esp
.text$mn:00007B67                 push    ecx
.text$mn:00007B68                 mov     [ebp+var_4], ecx
.text$mn:00007B6B                 mov     eax, [ebp+arg_0]
.text$mn:00007B6E                 push    eax             ; void *
.text$mn:00007B6F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B74                 add     esp, 4
.text$mn:00007B77                 mov     esp, ebp
.text$mn:00007B79                 pop     ebp
.text$mn:00007B7A                 retn    8
.text$mn:00007B7A ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00007B7A
.text$mn:00007B7A ; ---------------------------------------------------------------------------
.text$mn:00007B7D                 align 10h
.text$mn:00007B7D _text$mn        ends
.text$mn:00007B7D
.text$mn:00007B80 ; ===========================================================================
.text$mn:00007B80
.text$mn:00007B80 ; Segment type: Pure code
.text$mn:00007B80 ; Segment permissions: Read/Execute
.text$mn:00007B80 _text$mn        segment para public 'CODE' use32
.text$mn:00007B80                 assume cs:_text$mn
.text$mn:00007B80                 ;org 7B80h
.text$mn:00007B80 ; COMDAT (pick any)
.text$mn:00007B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B80
.text$mn:00007B80 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B80
.text$mn:00007B80 ; Attributes: bp-based frame
.text$mn:00007B80
.text$mn:00007B80 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00007B80                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00007B80 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00007B80                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00007B80
.text$mn:00007B80 var_4           = dword ptr -4
.text$mn:00007B80 arg_0           = dword ptr  8
.text$mn:00007B80
.text$mn:00007B80                 push    ebp
.text$mn:00007B81                 mov     ebp, esp
.text$mn:00007B83                 push    ecx
.text$mn:00007B84                 mov     [ebp+var_4], ecx
.text$mn:00007B87                 mov     eax, [ebp+arg_0]
.text$mn:00007B8A                 push    eax             ; void *
.text$mn:00007B8B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B90                 add     esp, 4
.text$mn:00007B93                 mov     esp, ebp
.text$mn:00007B95                 pop     ebp
.text$mn:00007B96                 retn    8
.text$mn:00007B96 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00007B96
.text$mn:00007B96 ; ---------------------------------------------------------------------------
.text$mn:00007B99                 align 4
.text$mn:00007B99 _text$mn        ends
.text$mn:00007B99
.text$mn:00007B9C ; ===========================================================================
.text$mn:00007B9C
.text$mn:00007B9C ; Segment type: Pure code
.text$mn:00007B9C ; Segment permissions: Read/Execute
.text$mn:00007B9C _text$mn        segment para public 'CODE' use32
.text$mn:00007B9C                 assume cs:_text$mn
.text$mn:00007B9C                 ;org 7B9Ch
.text$mn:00007B9C ; COMDAT (pick any)
.text$mn:00007B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B9C
.text$mn:00007B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B9C
.text$mn:00007B9C ; Attributes: bp-based frame
.text$mn:00007B9C
.text$mn:00007B9C ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00007B9C                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00007B9C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00007B9C                                         ; DATA XREF: .rdata:0000A224o
.text$mn:00007B9C
.text$mn:00007B9C var_4           = dword ptr -4
.text$mn:00007B9C arg_0           = dword ptr  8
.text$mn:00007B9C arg_4           = dword ptr  0Ch
.text$mn:00007B9C
.text$mn:00007B9C                 push    ebp
.text$mn:00007B9D                 mov     ebp, esp
.text$mn:00007B9F                 push    ecx
.text$mn:00007BA0                 mov     [ebp+var_4], ecx
.text$mn:00007BA3                 mov     eax, [ebp+arg_4]
.text$mn:00007BA6                 push    eax             ; int
.text$mn:00007BA7                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00007BAC                 add     esp, 4
.text$mn:00007BAF                 test    eax, eax
.text$mn:00007BB1                 jz      short loc_7BCC
.text$mn:00007BB3                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00007BB8                 push    eax             ; struct std::error_category *
.text$mn:00007BB9                 mov     ecx, [ebp+arg_4]
.text$mn:00007BBC                 push    ecx             ; int
.text$mn:00007BBD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007BC0                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007BC5                 mov     eax, [ebp+arg_0]
.text$mn:00007BC8                 jmp     short loc_7BE1
.text$mn:00007BCA ; ---------------------------------------------------------------------------
.text$mn:00007BCA                 jmp     short loc_7BE1
.text$mn:00007BCC ; ---------------------------------------------------------------------------
.text$mn:00007BCC
.text$mn:00007BCC loc_7BCC:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00007BCC                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00007BD1                 push    eax             ; struct std::error_category *
.text$mn:00007BD2                 mov     edx, [ebp+arg_4]
.text$mn:00007BD5                 push    edx             ; int
.text$mn:00007BD6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007BD9                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007BDE                 mov     eax, [ebp+arg_0]
.text$mn:00007BE1
.text$mn:00007BE1 loc_7BE1:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00007BE1                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00007BE1                 mov     esp, ebp
.text$mn:00007BE3                 pop     ebp
.text$mn:00007BE4                 retn    8
.text$mn:00007BE4 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007BE4
.text$mn:00007BE4 ; ---------------------------------------------------------------------------
.text$mn:00007BE7                 align 4
.text$mn:00007BE7 _text$mn        ends
.text$mn:00007BE7
.text$mn:00007BE8 ; ===========================================================================
.text$mn:00007BE8
.text$mn:00007BE8 ; Segment type: Pure code
.text$mn:00007BE8 ; Segment permissions: Read/Execute
.text$mn:00007BE8 _text$mn        segment para public 'CODE' use32
.text$mn:00007BE8                 assume cs:_text$mn
.text$mn:00007BE8                 ;org 7BE8h
.text$mn:00007BE8 ; COMDAT (pick any)
.text$mn:00007BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BE8
.text$mn:00007BE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BE8
.text$mn:00007BE8 ; Attributes: bp-based frame
.text$mn:00007BE8
.text$mn:00007BE8 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00007BE8                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00007BE8 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00007BE8                                         ; DATA XREF: .rdata:0000A178o
.text$mn:00007BE8                                         ; .rdata:0000A1B0o ...
.text$mn:00007BE8
.text$mn:00007BE8 var_4           = dword ptr -4
.text$mn:00007BE8 arg_0           = dword ptr  8
.text$mn:00007BE8 arg_4           = dword ptr  0Ch
.text$mn:00007BE8
.text$mn:00007BE8                 push    ebp
.text$mn:00007BE9                 mov     ebp, esp
.text$mn:00007BEB                 push    ecx
.text$mn:00007BEC                 mov     [ebp+var_4], ecx
.text$mn:00007BEF                 mov     eax, [ebp+var_4]
.text$mn:00007BF2                 push    eax             ; struct std::error_category *
.text$mn:00007BF3                 mov     ecx, [ebp+arg_4]
.text$mn:00007BF6                 push    ecx             ; int
.text$mn:00007BF7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007BFA                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007BFF                 mov     eax, [ebp+arg_0]
.text$mn:00007C02                 mov     esp, ebp
.text$mn:00007C04                 pop     ebp
.text$mn:00007C05                 retn    8
.text$mn:00007C05 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007C05
.text$mn:00007C05 _text$mn        ends
.text$mn:00007C05
.text$mn:00007C08 ; ===========================================================================
.text$mn:00007C08
.text$mn:00007C08 ; Segment type: Pure code
.text$mn:00007C08 ; Segment permissions: Read/Execute
.text$mn:00007C08 _text$mn        segment para public 'CODE' use32
.text$mn:00007C08                 assume cs:_text$mn
.text$mn:00007C08                 ;org 7C08h
.text$mn:00007C08 ; COMDAT (pick any)
.text$mn:00007C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C08
.text$mn:00007C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C08
.text$mn:00007C08 ; Attributes: bp-based frame
.text$mn:00007C08
.text$mn:00007C08 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_is(wchar_t const *, wchar_t const *, short *)const
.text$mn:00007C08                 public ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
.text$mn:00007C08 ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z proc near
.text$mn:00007C08                                         ; DATA XREF: .rdata:0000A138o
.text$mn:00007C08
.text$mn:00007C08 var_4           = dword ptr -4
.text$mn:00007C08 arg_0           = dword ptr  8
.text$mn:00007C08 arg_4           = dword ptr  0Ch
.text$mn:00007C08 arg_8           = dword ptr  10h
.text$mn:00007C08
.text$mn:00007C08                 push    ebp
.text$mn:00007C09                 mov     ebp, esp
.text$mn:00007C0B                 push    ecx
.text$mn:00007C0C                 mov     [ebp+var_4], ecx
.text$mn:00007C0F                 push    0A88h           ; unsigned int
.text$mn:00007C14                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007C19                 mov     eax, [ebp+arg_4]
.text$mn:00007C1C                 push    eax             ; int
.text$mn:00007C1D                 mov     ecx, [ebp+arg_0]
.text$mn:00007C20                 push    ecx             ; int
.text$mn:00007C21                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007C26                 add     esp, 10h
.text$mn:00007C29                 push    0A89h           ; unsigned int
.text$mn:00007C2E                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007C33                 mov     edx, [ebp+arg_8]
.text$mn:00007C36                 push    edx             ; int
.text$mn:00007C37                 call    ??$_Debug_pointer@F@std@@YAXPAFPB_WI@Z ; std::_Debug_pointer<short>(short *,wchar_t const *,uint)
.text$mn:00007C3C                 add     esp, 0Ch
.text$mn:00007C3F                 mov     eax, [ebp+var_4]
.text$mn:00007C42                 add     eax, 8
.text$mn:00007C45                 push    eax
.text$mn:00007C46                 mov     ecx, [ebp+arg_8]
.text$mn:00007C49                 push    ecx
.text$mn:00007C4A                 mov     edx, [ebp+arg_4]
.text$mn:00007C4D                 push    edx
.text$mn:00007C4E                 mov     eax, [ebp+arg_0]
.text$mn:00007C51                 push    eax
.text$mn:00007C52                 call    __Getwctypes
.text$mn:00007C57                 add     esp, 10h
.text$mn:00007C5A                 mov     esp, ebp
.text$mn:00007C5C                 pop     ebp
.text$mn:00007C5D                 retn    0Ch
.text$mn:00007C5D ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z endp
.text$mn:00007C5D
.text$mn:00007C5D _text$mn        ends
.text$mn:00007C5D
.text$mn:00007C60 ; ===========================================================================
.text$mn:00007C60
.text$mn:00007C60 ; Segment type: Pure code
.text$mn:00007C60 ; Segment permissions: Read/Execute
.text$mn:00007C60 _text$mn        segment para public 'CODE' use32
.text$mn:00007C60                 assume cs:_text$mn
.text$mn:00007C60                 ;org 7C60h
.text$mn:00007C60 ; COMDAT (pick any)
.text$mn:00007C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C60
.text$mn:00007C60 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C60
.text$mn:00007C60 ; Attributes: bp-based frame
.text$mn:00007C60
.text$mn:00007C60 ; protected: virtual bool __thiscall std::ctype<wchar_t>::do_is(short, wchar_t)const
.text$mn:00007C60                 public ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
.text$mn:00007C60 ?do_is@?$ctype@_W@std@@MBE_NF_W@Z proc near ; DATA XREF: .rdata:0000A13Co
.text$mn:00007C60
.text$mn:00007C60 var_8           = dword ptr -8
.text$mn:00007C60 var_4           = dword ptr -4
.text$mn:00007C60 arg_0           = word ptr  8
.text$mn:00007C60 arg_4           = word ptr  0Ch
.text$mn:00007C60
.text$mn:00007C60                 push    ebp
.text$mn:00007C61                 mov     ebp, esp
.text$mn:00007C63                 sub     esp, 8
.text$mn:00007C66                 mov     [ebp+var_8], ecx
.text$mn:00007C69                 mov     eax, [ebp+var_8]
.text$mn:00007C6C                 add     eax, 8
.text$mn:00007C6F                 push    eax
.text$mn:00007C70                 movzx   ecx, [ebp+arg_4]
.text$mn:00007C74                 push    ecx
.text$mn:00007C75                 call    __Getwctype
.text$mn:00007C7A                 add     esp, 8
.text$mn:00007C7D                 movsx   edx, ax
.text$mn:00007C80                 movsx   eax, [ebp+arg_0]
.text$mn:00007C84                 and     edx, eax
.text$mn:00007C86                 jz      short loc_7C91
.text$mn:00007C88                 mov     [ebp+var_4], 1
.text$mn:00007C8F                 jmp     short loc_7C98
.text$mn:00007C91 ; ---------------------------------------------------------------------------
.text$mn:00007C91
.text$mn:00007C91 loc_7C91:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+26j
.text$mn:00007C91                 mov     [ebp+var_4], 0
.text$mn:00007C98
.text$mn:00007C98 loc_7C98:                               ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+2Fj
.text$mn:00007C98                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007C9B                 mov     esp, ebp
.text$mn:00007C9D                 pop     ebp
.text$mn:00007C9E                 retn    8
.text$mn:00007C9E ?do_is@?$ctype@_W@std@@MBE_NF_W@Z endp
.text$mn:00007C9E
.text$mn:00007C9E ; ---------------------------------------------------------------------------
.text$mn:00007CA1                 align 4
.text$mn:00007CA1 _text$mn        ends
.text$mn:00007CA1
.text$mn:00007CA4 ; ===========================================================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Segment type: Pure code
.text$mn:00007CA4 ; Segment permissions: Read/Execute
.text$mn:00007CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CA4                 assume cs:_text$mn
.text$mn:00007CA4                 ;org 7CA4h
.text$mn:00007CA4 ; COMDAT (pick any)
.text$mn:00007CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CA4
.text$mn:00007CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CA4
.text$mn:00007CA4 ; Attributes: bp-based frame
.text$mn:00007CA4
.text$mn:00007CA4 ; protected: virtual char __thiscall std::ctype<wchar_t>::do_narrow(wchar_t, char)const
.text$mn:00007CA4                 public ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
.text$mn:00007CA4 ?do_narrow@?$ctype@_W@std@@MBED_WD@Z proc near
.text$mn:00007CA4                                         ; DATA XREF: .rdata:0000A164o
.text$mn:00007CA4
.text$mn:00007CA4 var_4           = dword ptr -4
.text$mn:00007CA4 arg_0           = word ptr  8
.text$mn:00007CA4 arg_4           = byte ptr  0Ch
.text$mn:00007CA4
.text$mn:00007CA4                 push    ebp
.text$mn:00007CA5                 mov     ebp, esp
.text$mn:00007CA7                 push    ecx
.text$mn:00007CA8                 mov     [ebp+var_4], ecx
.text$mn:00007CAB                 movzx   eax, [ebp+arg_4]
.text$mn:00007CAF                 push    eax
.text$mn:00007CB0                 movzx   ecx, [ebp+arg_0]
.text$mn:00007CB4                 push    ecx
.text$mn:00007CB5                 mov     ecx, [ebp+var_4]
.text$mn:00007CB8                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:00007CBD                 mov     esp, ebp
.text$mn:00007CBF                 pop     ebp
.text$mn:00007CC0                 retn    8
.text$mn:00007CC0 ?do_narrow@?$ctype@_W@std@@MBED_WD@Z endp
.text$mn:00007CC0
.text$mn:00007CC0 ; ---------------------------------------------------------------------------
.text$mn:00007CC3                 align 4
.text$mn:00007CC3 _text$mn        ends
.text$mn:00007CC3
.text$mn:00007CC4 ; ===========================================================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Segment type: Pure code
.text$mn:00007CC4 ; Segment permissions: Read/Execute
.text$mn:00007CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CC4                 assume cs:_text$mn
.text$mn:00007CC4                 ;org 7CC4h
.text$mn:00007CC4 ; COMDAT (pick any)
.text$mn:00007CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CC4
.text$mn:00007CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Attributes: bp-based frame
.text$mn:00007CC4
.text$mn:00007CC4 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_narrow(wchar_t const *, wchar_t const *, char, char *)const
.text$mn:00007CC4                 public ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
.text$mn:00007CC4 ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z proc near
.text$mn:00007CC4                                         ; DATA XREF: .rdata:0000A160o
.text$mn:00007CC4
.text$mn:00007CC4 var_4           = dword ptr -4
.text$mn:00007CC4 arg_0           = dword ptr  8
.text$mn:00007CC4 arg_4           = dword ptr  0Ch
.text$mn:00007CC4 arg_8           = byte ptr  10h
.text$mn:00007CC4 arg_C           = dword ptr  14h
.text$mn:00007CC4
.text$mn:00007CC4                 push    ebp
.text$mn:00007CC5                 mov     ebp, esp
.text$mn:00007CC7                 push    ecx
.text$mn:00007CC8                 mov     [ebp+var_4], ecx
.text$mn:00007CCB                 push    0AE2h           ; unsigned int
.text$mn:00007CD0                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007CD5                 mov     eax, [ebp+arg_4]
.text$mn:00007CD8                 push    eax             ; int
.text$mn:00007CD9                 mov     ecx, [ebp+arg_0]
.text$mn:00007CDC                 push    ecx             ; int
.text$mn:00007CDD                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007CE2                 add     esp, 10h
.text$mn:00007CE5                 push    0AE3h           ; unsigned int
.text$mn:00007CEA                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007CEF                 mov     edx, [ebp+arg_C]
.text$mn:00007CF2                 push    edx             ; int
.text$mn:00007CF3                 call    ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z ; std::_Debug_pointer<char>(char *,wchar_t const *,uint)
.text$mn:00007CF8                 add     esp, 0Ch
.text$mn:00007CFB                 jmp     short loc_7D0F
.text$mn:00007CFD ; ---------------------------------------------------------------------------
.text$mn:00007CFD
.text$mn:00007CFD loc_7CFD:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+6Cj
.text$mn:00007CFD                 mov     eax, [ebp+arg_0]
.text$mn:00007D00                 add     eax, 2
.text$mn:00007D03                 mov     [ebp+arg_0], eax
.text$mn:00007D06                 mov     ecx, [ebp+arg_C]
.text$mn:00007D09                 add     ecx, 1
.text$mn:00007D0C                 mov     [ebp+arg_C], ecx
.text$mn:00007D0F
.text$mn:00007D0F loc_7D0F:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+37j
.text$mn:00007D0F                 mov     edx, [ebp+arg_0]
.text$mn:00007D12                 cmp     edx, [ebp+arg_4]
.text$mn:00007D15                 jz      short loc_7D32
.text$mn:00007D17                 movzx   eax, [ebp+arg_8]
.text$mn:00007D1B                 push    eax
.text$mn:00007D1C                 mov     ecx, [ebp+arg_0]
.text$mn:00007D1F                 movzx   edx, word ptr [ecx]
.text$mn:00007D22                 push    edx
.text$mn:00007D23                 mov     ecx, [ebp+var_4]
.text$mn:00007D26                 call    ?_Donarrow@?$ctype@_W@std@@IBED_WD@Z ; std::ctype<wchar_t>::_Donarrow(wchar_t,char)
.text$mn:00007D2B                 mov     ecx, [ebp+arg_C]
.text$mn:00007D2E                 mov     [ecx], al
.text$mn:00007D30                 jmp     short loc_7CFD
.text$mn:00007D32 ; ---------------------------------------------------------------------------
.text$mn:00007D32
.text$mn:00007D32 loc_7D32:                               ; CODE XREF: std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)+51j
.text$mn:00007D32                 mov     eax, [ebp+arg_0]
.text$mn:00007D35                 mov     esp, ebp
.text$mn:00007D37                 pop     ebp
.text$mn:00007D38                 retn    10h
.text$mn:00007D38 ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z endp
.text$mn:00007D38
.text$mn:00007D38 ; ---------------------------------------------------------------------------
.text$mn:00007D3B                 align 4
.text$mn:00007D3B _text$mn        ends
.text$mn:00007D3B
.text$mn:00007D3C ; ===========================================================================
.text$mn:00007D3C
.text$mn:00007D3C ; Segment type: Pure code
.text$mn:00007D3C ; Segment permissions: Read/Execute
.text$mn:00007D3C _text$mn        segment para public 'CODE' use32
.text$mn:00007D3C                 assume cs:_text$mn
.text$mn:00007D3C                 ;org 7D3Ch
.text$mn:00007D3C ; COMDAT (pick any)
.text$mn:00007D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D3C
.text$mn:00007D3C ; =============== S U B R O U T I N E =======================================
.text$mn:00007D3C
.text$mn:00007D3C ; Attributes: bp-based frame
.text$mn:00007D3C
.text$mn:00007D3C ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_is(short, wchar_t const *, wchar_t const *)const
.text$mn:00007D3C                 public ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:00007D3C ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:00007D3C                                         ; DATA XREF: .rdata:0000A140o
.text$mn:00007D3C
.text$mn:00007D3C var_4           = dword ptr -4
.text$mn:00007D3C arg_0           = word ptr  8
.text$mn:00007D3C arg_4           = dword ptr  0Ch
.text$mn:00007D3C arg_8           = dword ptr  10h
.text$mn:00007D3C
.text$mn:00007D3C                 push    ebp
.text$mn:00007D3D                 mov     ebp, esp
.text$mn:00007D3F                 push    ecx
.text$mn:00007D40                 mov     [ebp+var_4], ecx
.text$mn:00007D43                 push    0A90h           ; unsigned int
.text$mn:00007D48                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007D4D                 mov     eax, [ebp+arg_8]
.text$mn:00007D50                 push    eax             ; int
.text$mn:00007D51                 mov     ecx, [ebp+arg_4]
.text$mn:00007D54                 push    ecx             ; int
.text$mn:00007D55                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007D5A                 add     esp, 10h
.text$mn:00007D5D                 jmp     short loc_7D68
.text$mn:00007D5F ; ---------------------------------------------------------------------------
.text$mn:00007D5F
.text$mn:00007D5F loc_7D5F:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:00007D5F                 mov     edx, [ebp+arg_4]
.text$mn:00007D62                 add     edx, 2
.text$mn:00007D65                 mov     [ebp+arg_4], edx
.text$mn:00007D68
.text$mn:00007D68 loc_7D68:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+21j
.text$mn:00007D68                 mov     eax, [ebp+arg_4]
.text$mn:00007D6B                 cmp     eax, [ebp+arg_8]
.text$mn:00007D6E                 jz      short loc_7D8D
.text$mn:00007D70                 mov     ecx, [ebp+arg_4]
.text$mn:00007D73                 movzx   edx, word ptr [ecx]
.text$mn:00007D76                 push    edx
.text$mn:00007D77                 movzx   eax, [ebp+arg_0]
.text$mn:00007D7B                 push    eax
.text$mn:00007D7C                 mov     ecx, [ebp+var_4]
.text$mn:00007D7F                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:00007D84                 movzx   ecx, al
.text$mn:00007D87                 test    ecx, ecx
.text$mn:00007D89                 jnz     short loc_7D8D
.text$mn:00007D8B                 jmp     short loc_7D5F
.text$mn:00007D8D ; ---------------------------------------------------------------------------
.text$mn:00007D8D
.text$mn:00007D8D loc_7D8D:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+32j
.text$mn:00007D8D                                         ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:00007D8D                 mov     eax, [ebp+arg_4]
.text$mn:00007D90                 mov     esp, ebp
.text$mn:00007D92                 pop     ebp
.text$mn:00007D93                 retn    0Ch
.text$mn:00007D93 ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:00007D93
.text$mn:00007D93 ; ---------------------------------------------------------------------------
.text$mn:00007D96                 align 4
.text$mn:00007D96 _text$mn        ends
.text$mn:00007D96
.text$mn:00007D98 ; ===========================================================================
.text$mn:00007D98
.text$mn:00007D98 ; Segment type: Pure code
.text$mn:00007D98 ; Segment permissions: Read/Execute
.text$mn:00007D98 _text$mn        segment para public 'CODE' use32
.text$mn:00007D98                 assume cs:_text$mn
.text$mn:00007D98                 ;org 7D98h
.text$mn:00007D98 ; COMDAT (pick any)
.text$mn:00007D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D98
.text$mn:00007D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D98
.text$mn:00007D98 ; Attributes: bp-based frame
.text$mn:00007D98
.text$mn:00007D98 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_scan_not(short, wchar_t const *, wchar_t const *)const
.text$mn:00007D98                 public ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
.text$mn:00007D98 ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z proc near
.text$mn:00007D98                                         ; DATA XREF: .rdata:0000A144o
.text$mn:00007D98
.text$mn:00007D98 var_4           = dword ptr -4
.text$mn:00007D98 arg_0           = word ptr  8
.text$mn:00007D98 arg_4           = dword ptr  0Ch
.text$mn:00007D98 arg_8           = dword ptr  10h
.text$mn:00007D98
.text$mn:00007D98                 push    ebp
.text$mn:00007D99                 mov     ebp, esp
.text$mn:00007D9B                 push    ecx
.text$mn:00007D9C                 mov     [ebp+var_4], ecx
.text$mn:00007D9F                 push    0A99h           ; unsigned int
.text$mn:00007DA4                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007DA9                 mov     eax, [ebp+arg_8]
.text$mn:00007DAC                 push    eax             ; int
.text$mn:00007DAD                 mov     ecx, [ebp+arg_4]
.text$mn:00007DB0                 push    ecx             ; int
.text$mn:00007DB1                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007DB6                 add     esp, 10h
.text$mn:00007DB9                 jmp     short loc_7DC4
.text$mn:00007DBB ; ---------------------------------------------------------------------------
.text$mn:00007DBB
.text$mn:00007DBB loc_7DBB:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Fj
.text$mn:00007DBB                 mov     edx, [ebp+arg_4]
.text$mn:00007DBE                 add     edx, 2
.text$mn:00007DC1                 mov     [ebp+arg_4], edx
.text$mn:00007DC4
.text$mn:00007DC4 loc_7DC4:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+21j
.text$mn:00007DC4                 mov     eax, [ebp+arg_4]
.text$mn:00007DC7                 cmp     eax, [ebp+arg_8]
.text$mn:00007DCA                 jz      short loc_7DE9
.text$mn:00007DCC                 mov     ecx, [ebp+arg_4]
.text$mn:00007DCF                 movzx   edx, word ptr [ecx]
.text$mn:00007DD2                 push    edx
.text$mn:00007DD3                 movzx   eax, [ebp+arg_0]
.text$mn:00007DD7                 push    eax
.text$mn:00007DD8                 mov     ecx, [ebp+var_4]
.text$mn:00007DDB                 call    ?is@?$ctype@_W@std@@QBE_NF_W@Z ; std::ctype<wchar_t>::is(short,wchar_t)
.text$mn:00007DE0                 movzx   ecx, al
.text$mn:00007DE3                 test    ecx, ecx
.text$mn:00007DE5                 jz      short loc_7DE9
.text$mn:00007DE7                 jmp     short loc_7DBB
.text$mn:00007DE9 ; ---------------------------------------------------------------------------
.text$mn:00007DE9
.text$mn:00007DE9 loc_7DE9:                               ; CODE XREF: std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+32j
.text$mn:00007DE9                                         ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)+4Dj
.text$mn:00007DE9                 mov     eax, [ebp+arg_4]
.text$mn:00007DEC                 mov     esp, ebp
.text$mn:00007DEE                 pop     ebp
.text$mn:00007DEF                 retn    0Ch
.text$mn:00007DEF ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z endp
.text$mn:00007DEF
.text$mn:00007DEF ; ---------------------------------------------------------------------------
.text$mn:00007DF2                 align 4
.text$mn:00007DF2 _text$mn        ends
.text$mn:00007DF2
.text$mn:00007DF4 ; ===========================================================================
.text$mn:00007DF4
.text$mn:00007DF4 ; Segment type: Pure code
.text$mn:00007DF4 ; Segment permissions: Read/Execute
.text$mn:00007DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00007DF4                 assume cs:_text$mn
.text$mn:00007DF4                 ;org 7DF4h
.text$mn:00007DF4 ; COMDAT (pick any)
.text$mn:00007DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DF4
.text$mn:00007DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DF4
.text$mn:00007DF4 ; Attributes: bp-based frame
.text$mn:00007DF4
.text$mn:00007DF4 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_tolower(wchar_t *, wchar_t const *)const
.text$mn:00007DF4                 public ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:00007DF4 ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:00007DF4                                         ; DATA XREF: .rdata:0000A148o
.text$mn:00007DF4
.text$mn:00007DF4 var_4           = dword ptr -4
.text$mn:00007DF4 arg_0           = dword ptr  8
.text$mn:00007DF4 arg_4           = dword ptr  0Ch
.text$mn:00007DF4
.text$mn:00007DF4                 push    ebp
.text$mn:00007DF5                 mov     ebp, esp
.text$mn:00007DF7                 push    ecx
.text$mn:00007DF8                 mov     [ebp+var_4], ecx
.text$mn:00007DFB                 push    0AA7h           ; unsigned int
.text$mn:00007E00                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007E05                 mov     eax, [ebp+arg_4]
.text$mn:00007E08                 push    eax             ; int
.text$mn:00007E09                 mov     ecx, [ebp+arg_0]
.text$mn:00007E0C                 push    ecx             ; int
.text$mn:00007E0D                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007E12                 add     esp, 10h
.text$mn:00007E15                 jmp     short loc_7E20
.text$mn:00007E17 ; ---------------------------------------------------------------------------
.text$mn:00007E17
.text$mn:00007E17 loc_7E17:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+50j
.text$mn:00007E17                 mov     edx, [ebp+arg_0]
.text$mn:00007E1A                 add     edx, 2
.text$mn:00007E1D                 mov     [ebp+arg_0], edx
.text$mn:00007E20
.text$mn:00007E20 loc_7E20:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+21j
.text$mn:00007E20                 mov     eax, [ebp+arg_0]
.text$mn:00007E23                 cmp     eax, [ebp+arg_4]
.text$mn:00007E26                 jz      short loc_7E46
.text$mn:00007E28                 mov     ecx, [ebp+var_4]
.text$mn:00007E2B                 add     ecx, 8
.text$mn:00007E2E                 push    ecx
.text$mn:00007E2F                 mov     edx, [ebp+arg_0]
.text$mn:00007E32                 movzx   eax, word ptr [edx]
.text$mn:00007E35                 push    eax
.text$mn:00007E36                 call    __Towlower
.text$mn:00007E3B                 add     esp, 8
.text$mn:00007E3E                 mov     ecx, [ebp+arg_0]
.text$mn:00007E41                 mov     [ecx], ax
.text$mn:00007E44                 jmp     short loc_7E17
.text$mn:00007E46 ; ---------------------------------------------------------------------------
.text$mn:00007E46
.text$mn:00007E46 loc_7E46:                               ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+32j
.text$mn:00007E46                 mov     eax, [ebp+arg_0]
.text$mn:00007E49                 mov     esp, ebp
.text$mn:00007E4B                 pop     ebp
.text$mn:00007E4C                 retn    8
.text$mn:00007E4C ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:00007E4C
.text$mn:00007E4C ; ---------------------------------------------------------------------------
.text$mn:00007E4F                 align 10h
.text$mn:00007E4F _text$mn        ends
.text$mn:00007E4F
.text$mn:00007E50 ; ===========================================================================
.text$mn:00007E50
.text$mn:00007E50 ; Segment type: Pure code
.text$mn:00007E50 ; Segment permissions: Read/Execute
.text$mn:00007E50 _text$mn        segment para public 'CODE' use32
.text$mn:00007E50                 assume cs:_text$mn
.text$mn:00007E50                 ;org 7E50h
.text$mn:00007E50 ; COMDAT (pick any)
.text$mn:00007E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E50
.text$mn:00007E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E50
.text$mn:00007E50 ; Attributes: bp-based frame
.text$mn:00007E50
.text$mn:00007E50 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_tolower(wchar_t)const
.text$mn:00007E50                 public ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:00007E50 ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:00007E50                                         ; DATA XREF: .rdata:0000A14Co
.text$mn:00007E50
.text$mn:00007E50 var_4           = dword ptr -4
.text$mn:00007E50 arg_0           = word ptr  8
.text$mn:00007E50
.text$mn:00007E50                 push    ebp
.text$mn:00007E51                 mov     ebp, esp
.text$mn:00007E53                 push    ecx
.text$mn:00007E54                 mov     [ebp+var_4], ecx
.text$mn:00007E57                 mov     eax, [ebp+var_4]
.text$mn:00007E5A                 add     eax, 8
.text$mn:00007E5D                 push    eax
.text$mn:00007E5E                 movzx   ecx, [ebp+arg_0]
.text$mn:00007E62                 push    ecx
.text$mn:00007E63                 call    __Towlower
.text$mn:00007E68                 add     esp, 8
.text$mn:00007E6B                 mov     esp, ebp
.text$mn:00007E6D                 pop     ebp
.text$mn:00007E6E                 retn    4
.text$mn:00007E6E ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:00007E6E
.text$mn:00007E6E ; ---------------------------------------------------------------------------
.text$mn:00007E71                 align 4
.text$mn:00007E71 _text$mn        ends
.text$mn:00007E71
.text$mn:00007E74 ; ===========================================================================
.text$mn:00007E74
.text$mn:00007E74 ; Segment type: Pure code
.text$mn:00007E74 ; Segment permissions: Read/Execute
.text$mn:00007E74 _text$mn        segment para public 'CODE' use32
.text$mn:00007E74                 assume cs:_text$mn
.text$mn:00007E74                 ;org 7E74h
.text$mn:00007E74 ; COMDAT (pick any)
.text$mn:00007E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E74
.text$mn:00007E74 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E74
.text$mn:00007E74 ; Attributes: bp-based frame
.text$mn:00007E74
.text$mn:00007E74 ; protected: virtual wchar_t const * __thiscall std::ctype<wchar_t>::do_toupper(wchar_t *, wchar_t const *)const
.text$mn:00007E74                 public ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
.text$mn:00007E74 ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z proc near
.text$mn:00007E74                                         ; DATA XREF: .rdata:0000A150o
.text$mn:00007E74
.text$mn:00007E74 var_4           = dword ptr -4
.text$mn:00007E74 arg_0           = dword ptr  8
.text$mn:00007E74 arg_4           = dword ptr  0Ch
.text$mn:00007E74
.text$mn:00007E74                 push    ebp
.text$mn:00007E75                 mov     ebp, esp
.text$mn:00007E77                 push    ecx
.text$mn:00007E78                 mov     [ebp+var_4], ecx
.text$mn:00007E7B                 push    0AB5h           ; unsigned int
.text$mn:00007E80                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007E85                 mov     eax, [ebp+arg_4]
.text$mn:00007E88                 push    eax             ; int
.text$mn:00007E89                 mov     ecx, [ebp+arg_0]
.text$mn:00007E8C                 push    ecx             ; int
.text$mn:00007E8D                 call    ??$_Debug_range@PB_W@std@@YAXPB_W00I@Z ; std::_Debug_range<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint)
.text$mn:00007E92                 add     esp, 10h
.text$mn:00007E95                 jmp     short loc_7EA0
.text$mn:00007E97 ; ---------------------------------------------------------------------------
.text$mn:00007E97
.text$mn:00007E97 loc_7E97:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+50j
.text$mn:00007E97                 mov     edx, [ebp+arg_0]
.text$mn:00007E9A                 add     edx, 2
.text$mn:00007E9D                 mov     [ebp+arg_0], edx
.text$mn:00007EA0
.text$mn:00007EA0 loc_7EA0:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+21j
.text$mn:00007EA0                 mov     eax, [ebp+arg_0]
.text$mn:00007EA3                 cmp     eax, [ebp+arg_4]
.text$mn:00007EA6                 jz      short loc_7EC6
.text$mn:00007EA8                 mov     ecx, [ebp+var_4]
.text$mn:00007EAB                 add     ecx, 8
.text$mn:00007EAE                 push    ecx
.text$mn:00007EAF                 mov     edx, [ebp+arg_0]
.text$mn:00007EB2                 movzx   eax, word ptr [edx]
.text$mn:00007EB5                 push    eax
.text$mn:00007EB6                 call    __Towupper
.text$mn:00007EBB                 add     esp, 8
.text$mn:00007EBE                 mov     ecx, [ebp+arg_0]
.text$mn:00007EC1                 mov     [ecx], ax
.text$mn:00007EC4                 jmp     short loc_7E97
.text$mn:00007EC6 ; ---------------------------------------------------------------------------
.text$mn:00007EC6
.text$mn:00007EC6 loc_7EC6:                               ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+32j
.text$mn:00007EC6                 mov     eax, [ebp+arg_0]
.text$mn:00007EC9                 mov     esp, ebp
.text$mn:00007ECB                 pop     ebp
.text$mn:00007ECC                 retn    8
.text$mn:00007ECC ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z endp
.text$mn:00007ECC
.text$mn:00007ECC ; ---------------------------------------------------------------------------
.text$mn:00007ECF                 align 10h
.text$mn:00007ECF _text$mn        ends
.text$mn:00007ECF
.text$mn:00007ED0 ; ===========================================================================
.text$mn:00007ED0
.text$mn:00007ED0 ; Segment type: Pure code
.text$mn:00007ED0 ; Segment permissions: Read/Execute
.text$mn:00007ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00007ED0                 assume cs:_text$mn
.text$mn:00007ED0                 ;org 7ED0h
.text$mn:00007ED0 ; COMDAT (pick any)
.text$mn:00007ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007ED0
.text$mn:00007ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007ED0
.text$mn:00007ED0 ; Attributes: bp-based frame
.text$mn:00007ED0
.text$mn:00007ED0 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_toupper(wchar_t)const
.text$mn:00007ED0                 public ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
.text$mn:00007ED0 ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z proc near
.text$mn:00007ED0                                         ; DATA XREF: .rdata:0000A154o
.text$mn:00007ED0
.text$mn:00007ED0 var_4           = dword ptr -4
.text$mn:00007ED0 arg_0           = word ptr  8
.text$mn:00007ED0
.text$mn:00007ED0                 push    ebp
.text$mn:00007ED1                 mov     ebp, esp
.text$mn:00007ED3                 push    ecx
.text$mn:00007ED4                 mov     [ebp+var_4], ecx
.text$mn:00007ED7                 mov     eax, [ebp+var_4]
.text$mn:00007EDA                 add     eax, 8
.text$mn:00007EDD                 push    eax
.text$mn:00007EDE                 movzx   ecx, [ebp+arg_0]
.text$mn:00007EE2                 push    ecx
.text$mn:00007EE3                 call    __Towupper
.text$mn:00007EE8                 add     esp, 8
.text$mn:00007EEB                 mov     esp, ebp
.text$mn:00007EED                 pop     ebp
.text$mn:00007EEE                 retn    4
.text$mn:00007EEE ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z endp
.text$mn:00007EEE
.text$mn:00007EEE ; ---------------------------------------------------------------------------
.text$mn:00007EF1                 align 4
.text$mn:00007EF1 _text$mn        ends
.text$mn:00007EF1
.text$mn:00007EF4 ; ===========================================================================
.text$mn:00007EF4
.text$mn:00007EF4 ; Segment type: Pure code
.text$mn:00007EF4 ; Segment permissions: Read/Execute
.text$mn:00007EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00007EF4                 assume cs:_text$mn
.text$mn:00007EF4                 ;org 7EF4h
.text$mn:00007EF4 ; COMDAT (pick any)
.text$mn:00007EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EF4
.text$mn:00007EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EF4
.text$mn:00007EF4 ; Attributes: bp-based frame
.text$mn:00007EF4
.text$mn:00007EF4 ; protected: virtual char const * __thiscall std::ctype<wchar_t>::do_widen(char const *, char const *, wchar_t *)const
.text$mn:00007EF4                 public ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
.text$mn:00007EF4 ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z proc near
.text$mn:00007EF4                                         ; DATA XREF: .rdata:0000A158o
.text$mn:00007EF4
.text$mn:00007EF4 var_4           = dword ptr -4
.text$mn:00007EF4 arg_0           = dword ptr  8
.text$mn:00007EF4 arg_4           = dword ptr  0Ch
.text$mn:00007EF4 arg_8           = dword ptr  10h
.text$mn:00007EF4
.text$mn:00007EF4                 push    ebp
.text$mn:00007EF5                 mov     ebp, esp
.text$mn:00007EF7                 push    ecx
.text$mn:00007EF8                 mov     [ebp+var_4], ecx
.text$mn:00007EFB                 push    0ACBh           ; unsigned int
.text$mn:00007F00                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007F05                 mov     eax, [ebp+arg_4]
.text$mn:00007F08                 push    eax             ; int
.text$mn:00007F09                 mov     ecx, [ebp+arg_0]
.text$mn:00007F0C                 push    ecx             ; int
.text$mn:00007F0D                 call    ??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z ; std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,uint)
.text$mn:00007F12                 add     esp, 10h
.text$mn:00007F15                 push    0ACCh           ; unsigned int
.text$mn:00007F1A                 push    offset ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007F1F                 mov     edx, [ebp+arg_8]
.text$mn:00007F22                 push    edx             ; int
.text$mn:00007F23                 call    ??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z ; std::_Debug_pointer<wchar_t>(wchar_t *,wchar_t const *,uint)
.text$mn:00007F28                 add     esp, 0Ch
.text$mn:00007F2B                 jmp     short loc_7F3F
.text$mn:00007F2D ; ---------------------------------------------------------------------------
.text$mn:00007F2D
.text$mn:00007F2D loc_7F2D:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+68j
.text$mn:00007F2D                 mov     eax, [ebp+arg_0]
.text$mn:00007F30                 add     eax, 1
.text$mn:00007F33                 mov     [ebp+arg_0], eax
.text$mn:00007F36                 mov     ecx, [ebp+arg_8]
.text$mn:00007F39                 add     ecx, 2
.text$mn:00007F3C                 mov     [ebp+arg_8], ecx
.text$mn:00007F3F
.text$mn:00007F3F loc_7F3F:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+37j
.text$mn:00007F3F                 mov     edx, [ebp+arg_0]
.text$mn:00007F42                 cmp     edx, [ebp+arg_4]
.text$mn:00007F45                 jz      short loc_7F5E
.text$mn:00007F47                 mov     eax, [ebp+arg_0]
.text$mn:00007F4A                 movzx   ecx, byte ptr [eax]
.text$mn:00007F4D                 push    ecx
.text$mn:00007F4E                 mov     ecx, [ebp+var_4]
.text$mn:00007F51                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:00007F56                 mov     edx, [ebp+arg_8]
.text$mn:00007F59                 mov     [edx], ax
.text$mn:00007F5C                 jmp     short loc_7F2D
.text$mn:00007F5E ; ---------------------------------------------------------------------------
.text$mn:00007F5E
.text$mn:00007F5E loc_7F5E:                               ; CODE XREF: std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)+51j
.text$mn:00007F5E                 mov     eax, [ebp+arg_0]
.text$mn:00007F61                 mov     esp, ebp
.text$mn:00007F63                 pop     ebp
.text$mn:00007F64                 retn    0Ch
.text$mn:00007F64 ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z endp
.text$mn:00007F64
.text$mn:00007F64 ; ---------------------------------------------------------------------------
.text$mn:00007F67                 align 4
.text$mn:00007F67 _text$mn        ends
.text$mn:00007F67
.text$mn:00007F68 ; ===========================================================================
.text$mn:00007F68
.text$mn:00007F68 ; Segment type: Pure code
.text$mn:00007F68 ; Segment permissions: Read/Execute
.text$mn:00007F68 _text$mn        segment para public 'CODE' use32
.text$mn:00007F68                 assume cs:_text$mn
.text$mn:00007F68                 ;org 7F68h
.text$mn:00007F68 ; COMDAT (pick any)
.text$mn:00007F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F68
.text$mn:00007F68 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F68
.text$mn:00007F68 ; Attributes: bp-based frame
.text$mn:00007F68
.text$mn:00007F68 ; protected: virtual wchar_t __thiscall std::ctype<wchar_t>::do_widen(char)const
.text$mn:00007F68                 public ?do_widen@?$ctype@_W@std@@MBE_WD@Z
.text$mn:00007F68 ?do_widen@?$ctype@_W@std@@MBE_WD@Z proc near ; DATA XREF: .rdata:0000A15Co
.text$mn:00007F68
.text$mn:00007F68 var_4           = dword ptr -4
.text$mn:00007F68 arg_0           = byte ptr  8
.text$mn:00007F68
.text$mn:00007F68                 push    ebp
.text$mn:00007F69                 mov     ebp, esp
.text$mn:00007F6B                 push    ecx
.text$mn:00007F6C                 mov     [ebp+var_4], ecx
.text$mn:00007F6F                 movzx   eax, [ebp+arg_0]
.text$mn:00007F73                 push    eax
.text$mn:00007F74                 mov     ecx, [ebp+var_4]
.text$mn:00007F77                 call    ?_Dowiden@?$ctype@_W@std@@IBE_WD@Z ; std::ctype<wchar_t>::_Dowiden(char)
.text$mn:00007F7C                 mov     esp, ebp
.text$mn:00007F7E                 pop     ebp
.text$mn:00007F7F                 retn    4
.text$mn:00007F7F ?do_widen@?$ctype@_W@std@@MBE_WD@Z endp
.text$mn:00007F7F
.text$mn:00007F7F ; ---------------------------------------------------------------------------
.text$mn:00007F82                 align 4
.text$mn:00007F82 _text$mn        ends
.text$mn:00007F82
.text$mn:00007F84 ; ===========================================================================
.text$mn:00007F84
.text$mn:00007F84 ; Segment type: Pure code
.text$mn:00007F84 ; Segment permissions: Read/Execute
.text$mn:00007F84 _text$mn        segment para public 'CODE' use32
.text$mn:00007F84                 assume cs:_text$mn
.text$mn:00007F84                 ;org 7F84h
.text$mn:00007F84 ; COMDAT (pick any)
.text$mn:00007F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F84
.text$mn:00007F84 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F84
.text$mn:00007F84 ; Attributes: bp-based frame
.text$mn:00007F84
.text$mn:00007F84 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::empty(void)const
.text$mn:00007F84                 public ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
.text$mn:00007F84 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
.text$mn:00007F84                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+39p
.text$mn:00007F84
.text$mn:00007F84 var_8           = dword ptr -8
.text$mn:00007F84 var_4           = dword ptr -4
.text$mn:00007F84
.text$mn:00007F84                 push    ebp
.text$mn:00007F85                 mov     ebp, esp
.text$mn:00007F87                 sub     esp, 8
.text$mn:00007F8A                 mov     [ebp+var_8], ecx
.text$mn:00007F8D                 mov     eax, [ebp+var_8]
.text$mn:00007F90                 cmp     dword ptr [eax+14h], 0
.text$mn:00007F94                 jnz     short loc_7F9F
.text$mn:00007F96                 mov     [ebp+var_4], 1
.text$mn:00007F9D                 jmp     short loc_7FA6
.text$mn:00007F9F ; ---------------------------------------------------------------------------
.text$mn:00007F9F
.text$mn:00007F9F loc_7F9F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+10j
.text$mn:00007F9F                 mov     [ebp+var_4], 0
.text$mn:00007FA6
.text$mn:00007FA6 loc_7FA6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty(void)+19j
.text$mn:00007FA6                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007FA9                 mov     esp, ebp
.text$mn:00007FAB                 pop     ebp
.text$mn:00007FAC                 retn
.text$mn:00007FAC ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ endp
.text$mn:00007FAC
.text$mn:00007FAC ; ---------------------------------------------------------------------------
.text$mn:00007FAD                 align 10h
.text$mn:00007FAD _text$mn        ends
.text$mn:00007FAD
.text$mn:00007FB0 ; ===========================================================================
.text$mn:00007FB0
.text$mn:00007FB0 ; Segment type: Pure code
.text$mn:00007FB0 ; Segment permissions: Read/Execute
.text$mn:00007FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00007FB0                 assume cs:_text$mn
.text$mn:00007FB0                 ;org 7FB0h
.text$mn:00007FB0 ; COMDAT (pick any)
.text$mn:00007FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FB0
.text$mn:00007FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FB0
.text$mn:00007FB0 ; Attributes: bp-based frame
.text$mn:00007FB0
.text$mn:00007FB0 ; public: static unsigned short __cdecl std::char_traits<wchar_t>::eof(void)
.text$mn:00007FB0                 public ?eof@?$char_traits@_W@std@@SAGXZ
.text$mn:00007FB0 ?eof@?$char_traits@_W@std@@SAGXZ proc near
.text$mn:00007FB0                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool):loc_69FBp
.text$mn:00007FB0                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+71p ...
.text$mn:00007FB0                 push    ebp
.text$mn:00007FB1                 mov     ebp, esp
.text$mn:00007FB3                 mov     eax, 0FFFFh
.text$mn:00007FB8                 pop     ebp
.text$mn:00007FB9                 retn
.text$mn:00007FB9 ?eof@?$char_traits@_W@std@@SAGXZ endp
.text$mn:00007FB9
.text$mn:00007FB9 ; ---------------------------------------------------------------------------
.text$mn:00007FBA                 align 4
.text$mn:00007FBA _text$mn        ends
.text$mn:00007FBA
.text$mn:00007FBC ; ===========================================================================
.text$mn:00007FBC
.text$mn:00007FBC ; Segment type: Pure code
.text$mn:00007FBC ; Segment permissions: Read/Execute
.text$mn:00007FBC _text$mn        segment para public 'CODE' use32
.text$mn:00007FBC                 assume cs:_text$mn
.text$mn:00007FBC                 ;org 7FBCh
.text$mn:00007FBC ; COMDAT (pick any)
.text$mn:00007FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FBC
.text$mn:00007FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00007FBC
.text$mn:00007FBC ; Attributes: bp-based frame
.text$mn:00007FBC
.text$mn:00007FBC ; public: static bool __cdecl std::char_traits<wchar_t>::eq_int_type(unsigned short const &, unsigned short const &)
.text$mn:00007FBC                 public ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z
.text$mn:00007FBC ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z proc near
.text$mn:00007FBC                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+130p
.text$mn:00007FBC                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+AFp ...
.text$mn:00007FBC
.text$mn:00007FBC var_4           = dword ptr -4
.text$mn:00007FBC arg_0           = dword ptr  8
.text$mn:00007FBC arg_4           = dword ptr  0Ch
.text$mn:00007FBC
.text$mn:00007FBC                 push    ebp
.text$mn:00007FBD                 mov     ebp, esp
.text$mn:00007FBF                 push    ecx
.text$mn:00007FC0                 mov     eax, [ebp+arg_0]
.text$mn:00007FC3                 movzx   ecx, word ptr [eax]
.text$mn:00007FC6                 mov     edx, [ebp+arg_4]
.text$mn:00007FC9                 movzx   eax, word ptr [edx]
.text$mn:00007FCC                 cmp     ecx, eax
.text$mn:00007FCE                 jnz     short loc_7FD9
.text$mn:00007FD0                 mov     [ebp+var_4], 1
.text$mn:00007FD7                 jmp     short loc_7FE0
.text$mn:00007FD9 ; ---------------------------------------------------------------------------
.text$mn:00007FD9
.text$mn:00007FD9 loc_7FD9:                               ; CODE XREF: std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)+12j
.text$mn:00007FD9                 mov     [ebp+var_4], 0
.text$mn:00007FE0
.text$mn:00007FE0 loc_7FE0:                               ; CODE XREF: std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)+1Bj
.text$mn:00007FE0                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007FE3                 mov     esp, ebp
.text$mn:00007FE5                 pop     ebp
.text$mn:00007FE6                 retn
.text$mn:00007FE6 ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z endp
.text$mn:00007FE6
.text$mn:00007FE6 ; ---------------------------------------------------------------------------
.text$mn:00007FE7                 align 4
.text$mn:00007FE7 _text$mn        ends
.text$mn:00007FE7
.text$mn:00007FE8 ; ===========================================================================
.text$mn:00007FE8
.text$mn:00007FE8 ; Segment type: Pure code
.text$mn:00007FE8 ; Segment permissions: Read/Execute
.text$mn:00007FE8 _text$mn        segment para public 'CODE' use32
.text$mn:00007FE8                 assume cs:_text$mn
.text$mn:00007FE8                 ;org 7FE8h
.text$mn:00007FE8 ; COMDAT (pick any)
.text$mn:00007FE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FE8
.text$mn:00007FE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FE8
.text$mn:00007FE8 ; Attributes: bp-based frame
.text$mn:00007FE8
.text$mn:00007FE8 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00007FE8                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00007FE8 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00007FE8                                         ; DATA XREF: .rdata:0000A17Co
.text$mn:00007FE8                                         ; .rdata:0000A1B4o ...
.text$mn:00007FE8
.text$mn:00007FE8 var_8           = dword ptr -8
.text$mn:00007FE8 var_4           = dword ptr -4
.text$mn:00007FE8 arg_0           = dword ptr  8
.text$mn:00007FE8 arg_4           = dword ptr  0Ch
.text$mn:00007FE8
.text$mn:00007FE8                 push    ebp
.text$mn:00007FE9                 mov     ebp, esp
.text$mn:00007FEB                 sub     esp, 8
.text$mn:00007FEE                 mov     [ebp+var_8], ecx
.text$mn:00007FF1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007FF4                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00007FF9                 push    eax
.text$mn:00007FFA                 mov     ecx, [ebp+var_8]
.text$mn:00007FFD                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00008002                 movzx   eax, al
.text$mn:00008005                 test    eax, eax
.text$mn:00008007                 jz      short loc_801F
.text$mn:00008009                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000800C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00008011                 cmp     eax, [ebp+arg_4]
.text$mn:00008014                 jnz     short loc_801F
.text$mn:00008016                 mov     [ebp+var_4], 1
.text$mn:0000801D                 jmp     short loc_8026
.text$mn:0000801F ; ---------------------------------------------------------------------------
.text$mn:0000801F
.text$mn:0000801F loc_801F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000801F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000801F                 mov     [ebp+var_4], 0
.text$mn:00008026
.text$mn:00008026 loc_8026:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00008026                 mov     al, byte ptr [ebp+var_4]
.text$mn:00008029                 mov     esp, ebp
.text$mn:0000802B                 pop     ebp
.text$mn:0000802C                 retn    8
.text$mn:0000802C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000802C
.text$mn:0000802C ; ---------------------------------------------------------------------------
.text$mn:0000802F                 align 10h
.text$mn:0000802F _text$mn        ends
.text$mn:0000802F
.text$mn:00008030 ; ===========================================================================
.text$mn:00008030
.text$mn:00008030 ; Segment type: Pure code
.text$mn:00008030 ; Segment permissions: Read/Execute
.text$mn:00008030 _text$mn        segment para public 'CODE' use32
.text$mn:00008030                 assume cs:_text$mn
.text$mn:00008030                 ;org 8030h
.text$mn:00008030 ; COMDAT (pick any)
.text$mn:00008030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008030
.text$mn:00008030 ; =============== S U B R O U T I N E =======================================
.text$mn:00008030
.text$mn:00008030 ; Attributes: bp-based frame
.text$mn:00008030
.text$mn:00008030 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00008030                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00008030 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00008030                                         ; DATA XREF: .rdata:0000A180o
.text$mn:00008030                                         ; .rdata:0000A1B8o ...
.text$mn:00008030
.text$mn:00008030 var_C           = byte ptr -0Ch
.text$mn:00008030 var_4           = dword ptr -4
.text$mn:00008030 arg_0           = dword ptr  8
.text$mn:00008030 arg_4           = dword ptr  0Ch
.text$mn:00008030
.text$mn:00008030                 push    ebp
.text$mn:00008031                 mov     ebp, esp
.text$mn:00008033                 sub     esp, 0Ch
.text$mn:00008036                 mov     [ebp+var_4], ecx
.text$mn:00008039                 mov     eax, [ebp+arg_4]
.text$mn:0000803C                 push    eax             ; std::error_condition *
.text$mn:0000803D                 mov     ecx, [ebp+arg_0]
.text$mn:00008040                 push    ecx
.text$mn:00008041                 lea     edx, [ebp+var_C]
.text$mn:00008044                 push    edx
.text$mn:00008045                 mov     eax, [ebp+var_4]
.text$mn:00008048                 mov     edx, [eax]
.text$mn:0000804A                 mov     ecx, [ebp+var_4]
.text$mn:0000804D                 mov     eax, [edx+0Ch]
.text$mn:00008050                 call    eax
.text$mn:00008052                 mov     ecx, eax
.text$mn:00008054                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00008059                 mov     esp, ebp
.text$mn:0000805B                 pop     ebp
.text$mn:0000805C                 retn    8
.text$mn:0000805C ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000805C
.text$mn:0000805C ; ---------------------------------------------------------------------------
.text$mn:0000805F                 align 10h
.text$mn:0000805F _text$mn        ends
.text$mn:0000805F
.text$mn:00008060 ; ===========================================================================
.text$mn:00008060
.text$mn:00008060 ; Segment type: Pure code
.text$mn:00008060 ; Segment permissions: Read/Execute
.text$mn:00008060 _text$mn        segment para public 'CODE' use32
.text$mn:00008060                 assume cs:_text$mn
.text$mn:00008060                 ;org 8060h
.text$mn:00008060 ; COMDAT (pick any)
.text$mn:00008060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008060
.text$mn:00008060 ; =============== S U B R O U T I N E =======================================
.text$mn:00008060
.text$mn:00008060 ; Attributes: bp-based frame
.text$mn:00008060
.text$mn:00008060 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:00008060                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:00008060 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00008060                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:00008060
.text$mn:00008060 var_4           = dword ptr -4
.text$mn:00008060 arg_0           = dword ptr  8
.text$mn:00008060
.text$mn:00008060                 push    ebp
.text$mn:00008061                 mov     ebp, esp
.text$mn:00008063                 push    ecx
.text$mn:00008064                 mov     [ebp+var_4], ecx
.text$mn:00008067                 mov     eax, [ebp+var_4]
.text$mn:0000806A                 mov     ecx, [eax+14h]
.text$mn:0000806D                 cmp     ecx, [ebp+arg_0]
.text$mn:00008070                 jnb     short loc_807A
.text$mn:00008072                 mov     ecx, [ebp+var_4]
.text$mn:00008075                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000807A
.text$mn:0000807A loc_807A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000807A                 mov     edx, [ebp+arg_0]
.text$mn:0000807D                 push    edx
.text$mn:0000807E                 mov     ecx, [ebp+var_4]
.text$mn:00008081                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008086                 mov     eax, [ebp+var_4]
.text$mn:00008089                 mov     esp, ebp
.text$mn:0000808B                 pop     ebp
.text$mn:0000808C                 retn    4
.text$mn:0000808C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000808C
.text$mn:0000808C ; ---------------------------------------------------------------------------
.text$mn:0000808F                 align 10h
.text$mn:0000808F _text$mn        ends
.text$mn:0000808F
.text$mn:00008090 ; ===========================================================================
.text$mn:00008090
.text$mn:00008090 ; Segment type: Pure code
.text$mn:00008090 ; Segment permissions: Read/Execute
.text$mn:00008090 _text$mn        segment para public 'CODE' use32
.text$mn:00008090                 assume cs:_text$mn
.text$mn:00008090                 ;org 8090h
.text$mn:00008090 ; COMDAT (pick any)
.text$mn:00008090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008090
.text$mn:00008090 ; =============== S U B R O U T I N E =======================================
.text$mn:00008090
.text$mn:00008090 ; Attributes: bp-based frame
.text$mn:00008090
.text$mn:00008090 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00008090                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00008090 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00008090                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00008090
.text$mn:00008090 var_C           = dword ptr -0Ch
.text$mn:00008090 Dst             = dword ptr -8
.text$mn:00008090 var_4           = dword ptr -4
.text$mn:00008090 arg_0           = dword ptr  8
.text$mn:00008090 arg_4           = dword ptr  0Ch
.text$mn:00008090
.text$mn:00008090                 push    ebp
.text$mn:00008091                 mov     ebp, esp
.text$mn:00008093                 sub     esp, 0Ch
.text$mn:00008096                 mov     [ebp+var_4], ecx
.text$mn:00008099                 mov     eax, [ebp+var_4]
.text$mn:0000809C                 mov     ecx, [eax+14h]
.text$mn:0000809F                 cmp     ecx, [ebp+arg_0]
.text$mn:000080A2                 jnb     short loc_80AC
.text$mn:000080A4                 mov     ecx, [ebp+var_4]
.text$mn:000080A7                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000080AC
.text$mn:000080AC loc_80AC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:000080AC                 mov     edx, [ebp+var_4]
.text$mn:000080AF                 mov     eax, [edx+14h]
.text$mn:000080B2                 sub     eax, [ebp+arg_0]
.text$mn:000080B5                 cmp     eax, [ebp+arg_4]
.text$mn:000080B8                 ja      short loc_80C8
.text$mn:000080BA                 mov     ecx, [ebp+arg_0]
.text$mn:000080BD                 push    ecx
.text$mn:000080BE                 mov     ecx, [ebp+var_4]
.text$mn:000080C1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000080C6                 jmp     short loc_810E
.text$mn:000080C8 ; ---------------------------------------------------------------------------
.text$mn:000080C8
.text$mn:000080C8 loc_80C8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:000080C8                 cmp     [ebp+arg_4], 0
.text$mn:000080CC                 jbe     short loc_810E
.text$mn:000080CE                 mov     ecx, [ebp+var_4]
.text$mn:000080D1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000080D6                 add     eax, [ebp+arg_0]
.text$mn:000080D9                 mov     [ebp+Dst], eax
.text$mn:000080DC                 mov     edx, [ebp+var_4]
.text$mn:000080DF                 mov     eax, [edx+14h]
.text$mn:000080E2                 sub     eax, [ebp+arg_4]
.text$mn:000080E5                 mov     [ebp+var_C], eax
.text$mn:000080E8                 mov     ecx, [ebp+var_C]
.text$mn:000080EB                 sub     ecx, [ebp+arg_0]
.text$mn:000080EE                 push    ecx             ; Size
.text$mn:000080EF                 mov     edx, [ebp+Dst]
.text$mn:000080F2                 add     edx, [ebp+arg_4]
.text$mn:000080F5                 push    edx             ; Src
.text$mn:000080F6                 mov     eax, [ebp+Dst]
.text$mn:000080F9                 push    eax             ; Dst
.text$mn:000080FA                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000080FF                 add     esp, 0Ch
.text$mn:00008102                 mov     ecx, [ebp+var_C]
.text$mn:00008105                 push    ecx
.text$mn:00008106                 mov     ecx, [ebp+var_4]
.text$mn:00008109                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000810E
.text$mn:0000810E loc_810E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000810E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000810E                 mov     eax, [ebp+var_4]
.text$mn:00008111                 mov     esp, ebp
.text$mn:00008113                 pop     ebp
.text$mn:00008114                 retn    8
.text$mn:00008114 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00008114
.text$mn:00008114 ; ---------------------------------------------------------------------------
.text$mn:00008117                 align 4
.text$mn:00008117 _text$mn        ends
.text$mn:00008117
.text$mn:00008118 ; ===========================================================================
.text$mn:00008118
.text$mn:00008118 ; Segment type: Pure code
.text$mn:00008118 ; Segment permissions: Read/Execute
.text$mn:00008118 _text$mn        segment para public 'CODE' use32
.text$mn:00008118                 assume cs:_text$mn
.text$mn:00008118                 ;org 8118h
.text$mn:00008118 ; COMDAT (pick any)
.text$mn:00008118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008118
.text$mn:00008118 ; =============== S U B R O U T I N E =======================================
.text$mn:00008118
.text$mn:00008118 ; Attributes: bp-based frame
.text$mn:00008118
.text$mn:00008118 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00008118                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00008118 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00008118                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00008118
.text$mn:00008118 var_4           = dword ptr -4
.text$mn:00008118 arg_0           = dword ptr  8
.text$mn:00008118
.text$mn:00008118                 push    ebp
.text$mn:00008119                 mov     ebp, esp
.text$mn:0000811B                 push    ecx
.text$mn:0000811C                 mov     [ebp+var_4], ecx
.text$mn:0000811F                 mov     eax, [ebp+var_4]
.text$mn:00008122                 mov     ecx, [eax+14h]
.text$mn:00008125                 cmp     ecx, [ebp+arg_0]
.text$mn:00008128                 jnb     short loc_8132
.text$mn:0000812A                 mov     ecx, [ebp+var_4]
.text$mn:0000812D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008132
.text$mn:00008132 loc_8132:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00008132                 mov     edx, [ebp+arg_0]
.text$mn:00008135                 push    edx
.text$mn:00008136                 mov     ecx, [ebp+var_4]
.text$mn:00008139                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000813E                 mov     eax, [ebp+var_4]
.text$mn:00008141                 mov     esp, ebp
.text$mn:00008143                 pop     ebp
.text$mn:00008144                 retn    4
.text$mn:00008144 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00008144
.text$mn:00008144 ; ---------------------------------------------------------------------------
.text$mn:00008147                 align 4
.text$mn:00008147 _text$mn        ends
.text$mn:00008147
.text$mn:00008148 ; ===========================================================================
.text$mn:00008148
.text$mn:00008148 ; Segment type: Pure code
.text$mn:00008148 ; Segment permissions: Read/Execute
.text$mn:00008148 _text$mn        segment para public 'CODE' use32
.text$mn:00008148                 assume cs:_text$mn
.text$mn:00008148                 ;org 8148h
.text$mn:00008148 ; COMDAT (pick any)
.text$mn:00008148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008148
.text$mn:00008148 ; =============== S U B R O U T I N E =======================================
.text$mn:00008148
.text$mn:00008148 ; Attributes: bp-based frame
.text$mn:00008148
.text$mn:00008148 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00008148                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00008148 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00008148                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00008148
.text$mn:00008148 var_C           = dword ptr -0Ch
.text$mn:00008148 Dst             = dword ptr -8
.text$mn:00008148 var_4           = dword ptr -4
.text$mn:00008148 arg_0           = dword ptr  8
.text$mn:00008148 arg_4           = dword ptr  0Ch
.text$mn:00008148
.text$mn:00008148                 push    ebp
.text$mn:00008149                 mov     ebp, esp
.text$mn:0000814B                 sub     esp, 0Ch
.text$mn:0000814E                 mov     [ebp+var_4], ecx
.text$mn:00008151                 mov     eax, [ebp+var_4]
.text$mn:00008154                 mov     ecx, [eax+14h]
.text$mn:00008157                 cmp     ecx, [ebp+arg_0]
.text$mn:0000815A                 jnb     short loc_8164
.text$mn:0000815C                 mov     ecx, [ebp+var_4]
.text$mn:0000815F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008164
.text$mn:00008164 loc_8164:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00008164                 mov     edx, [ebp+var_4]
.text$mn:00008167                 mov     eax, [edx+14h]
.text$mn:0000816A                 sub     eax, [ebp+arg_0]
.text$mn:0000816D                 cmp     eax, [ebp+arg_4]
.text$mn:00008170                 ja      short loc_8180
.text$mn:00008172                 mov     ecx, [ebp+arg_0]
.text$mn:00008175                 push    ecx
.text$mn:00008176                 mov     ecx, [ebp+var_4]
.text$mn:00008179                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000817E                 jmp     short loc_81CC
.text$mn:00008180 ; ---------------------------------------------------------------------------
.text$mn:00008180
.text$mn:00008180 loc_8180:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00008180                 cmp     [ebp+arg_4], 0
.text$mn:00008184                 jbe     short loc_81CC
.text$mn:00008186                 mov     ecx, [ebp+var_4]
.text$mn:00008189                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000818E                 mov     edx, [ebp+arg_0]
.text$mn:00008191                 lea     eax, [eax+edx*2]
.text$mn:00008194                 mov     [ebp+Dst], eax
.text$mn:00008197                 mov     ecx, [ebp+var_4]
.text$mn:0000819A                 mov     edx, [ecx+14h]
.text$mn:0000819D                 sub     edx, [ebp+arg_4]
.text$mn:000081A0                 mov     [ebp+var_C], edx
.text$mn:000081A3                 mov     eax, [ebp+var_C]
.text$mn:000081A6                 sub     eax, [ebp+arg_0]
.text$mn:000081A9                 push    eax             ; int
.text$mn:000081AA                 mov     ecx, [ebp+arg_4]
.text$mn:000081AD                 mov     edx, [ebp+Dst]
.text$mn:000081B0                 lea     eax, [edx+ecx*2]
.text$mn:000081B3                 push    eax             ; Src
.text$mn:000081B4                 mov     ecx, [ebp+Dst]
.text$mn:000081B7                 push    ecx             ; Dst
.text$mn:000081B8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000081BD                 add     esp, 0Ch
.text$mn:000081C0                 mov     edx, [ebp+var_C]
.text$mn:000081C3                 push    edx
.text$mn:000081C4                 mov     ecx, [ebp+var_4]
.text$mn:000081C7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000081CC
.text$mn:000081CC loc_81CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:000081CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:000081CC                 mov     eax, [ebp+var_4]
.text$mn:000081CF                 mov     esp, ebp
.text$mn:000081D1                 pop     ebp
.text$mn:000081D2                 retn    8
.text$mn:000081D2 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:000081D2
.text$mn:000081D2 ; ---------------------------------------------------------------------------
.text$mn:000081D5                 align 4
.text$mn:000081D5 _text$mn        ends
.text$mn:000081D5
.text$mn:000081D8 ; ===========================================================================
.text$mn:000081D8
.text$mn:000081D8 ; Segment type: Pure code
.text$mn:000081D8 ; Segment permissions: Read/Execute
.text$mn:000081D8 _text$mn        segment para public 'CODE' use32
.text$mn:000081D8                 assume cs:_text$mn
.text$mn:000081D8                 ;org 81D8h
.text$mn:000081D8 ; COMDAT (pick any)
.text$mn:000081D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081D8
.text$mn:000081D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000081D8
.text$mn:000081D8 ; Attributes: bp-based frame
.text$mn:000081D8
.text$mn:000081D8 ; int __thiscall std::ios_base::flags(std::ios_base *__hidden this)
.text$mn:000081D8                 public ?flags@ios_base@std@@QBEHXZ
.text$mn:000081D8 ?flags@ios_base@std@@QBEHXZ proc near   ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+90p
.text$mn:000081D8                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+58p
.text$mn:000081D8
.text$mn:000081D8 var_4           = dword ptr -4
.text$mn:000081D8
.text$mn:000081D8                 push    ebp
.text$mn:000081D9                 mov     ebp, esp
.text$mn:000081DB                 push    ecx
.text$mn:000081DC                 mov     [ebp+var_4], ecx
.text$mn:000081DF                 mov     eax, [ebp+var_4]
.text$mn:000081E2                 mov     eax, [eax+14h]
.text$mn:000081E5                 mov     esp, ebp
.text$mn:000081E7                 pop     ebp
.text$mn:000081E8                 retn
.text$mn:000081E8 ?flags@ios_base@std@@QBEHXZ endp
.text$mn:000081E8
.text$mn:000081E8 ; ---------------------------------------------------------------------------
.text$mn:000081E9                 align 4
.text$mn:000081E9 _text$mn        ends
.text$mn:000081E9
.text$mn:000081EC ; ===========================================================================
.text$mn:000081EC
.text$mn:000081EC ; Segment type: Pure code
.text$mn:000081EC ; Segment permissions: Read/Execute
.text$mn:000081EC _text$mn        segment para public 'CODE' use32
.text$mn:000081EC                 assume cs:_text$mn
.text$mn:000081EC                 ;org 81ECh
.text$mn:000081EC ; COMDAT (pick any)
.text$mn:000081EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081EC
.text$mn:000081EC ; =============== S U B R O U T I N E =======================================
.text$mn:000081EC
.text$mn:000081EC ; Attributes: bp-based frame
.text$mn:000081EC
.text$mn:000081EC ; public: class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> & __thiscall std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>>::flush(void)
.text$mn:000081EC                 public ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$mn:000081EC ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ proc near
.text$mn:000081EC                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+8Fp
.text$mn:000081EC                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+74p
.text$mn:000081EC
.text$mn:000081EC var_18          = byte ptr -18h
.text$mn:000081EC var_10          = dword ptr -10h
.text$mn:000081EC var_C           = dword ptr -0Ch
.text$mn:000081EC var_4           = dword ptr -4
.text$mn:000081EC
.text$mn:000081EC                 push    ebp
.text$mn:000081ED                 mov     ebp, esp
.text$mn:000081EF                 push    0FFFFFFFFh
.text$mn:000081F1                 push    offset __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$mn:000081F6                 mov     eax, large fs:0
.text$mn:000081FC                 push    eax
.text$mn:000081FD                 sub     esp, 0Ch
.text$mn:00008200                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008205                 xor     eax, ebp
.text$mn:00008207                 push    eax
.text$mn:00008208                 lea     eax, [ebp+var_C]
.text$mn:0000820B                 mov     large fs:0, eax
.text$mn:00008211                 mov     [ebp+var_10], ecx
.text$mn:00008214                 mov     eax, [ebp+var_10]
.text$mn:00008217                 mov     ecx, [eax]
.text$mn:00008219                 mov     edx, [ebp+var_10]
.text$mn:0000821C                 add     edx, [ecx+4]
.text$mn:0000821F                 mov     ecx, edx
.text$mn:00008221                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00008226                 test    eax, eax
.text$mn:00008228                 jz      short loc_828B
.text$mn:0000822A                 mov     eax, [ebp+var_10]
.text$mn:0000822D                 push    eax
.text$mn:0000822E                 lea     ecx, [ebp+var_18]
.text$mn:00008231                 call    ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)
.text$mn:00008236                 mov     [ebp+var_4], 0
.text$mn:0000823D                 lea     ecx, [ebp+var_18]
.text$mn:00008240                 call    ??Bsentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:00008245                 movzx   ecx, al
.text$mn:00008248                 test    ecx, ecx
.text$mn:0000824A                 jz      short loc_827C
.text$mn:0000824C                 mov     edx, [ebp+var_10]
.text$mn:0000824F                 mov     eax, [edx]
.text$mn:00008251                 mov     ecx, [ebp+var_10]
.text$mn:00008254                 add     ecx, [eax+4]
.text$mn:00008257                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:0000825C                 mov     ecx, eax
.text$mn:0000825E                 call    ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::pubsync(void)
.text$mn:00008263                 cmp     eax, 0FFFFFFFFh
.text$mn:00008266                 jnz     short loc_827C
.text$mn:00008268                 push    0
.text$mn:0000826A                 push    4
.text$mn:0000826C                 mov     ecx, [ebp+var_10]
.text$mn:0000826F                 mov     edx, [ecx]
.text$mn:00008271                 mov     ecx, [ebp+var_10]
.text$mn:00008274                 add     ecx, [edx+4]
.text$mn:00008277                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000827C
.text$mn:0000827C loc_827C:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+5Ej
.text$mn:0000827C                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+7Aj
.text$mn:0000827C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008283                 lea     ecx, [ebp+var_18]
.text$mn:00008286                 call    ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:0000828B
.text$mn:0000828B loc_828B:                               ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+3Cj
.text$mn:0000828B                 mov     eax, [ebp+var_10]
.text$mn:0000828E                 mov     ecx, [ebp+var_C]
.text$mn:00008291                 mov     large fs:0, ecx
.text$mn:00008298                 pop     ecx
.text$mn:00008299                 mov     esp, ebp
.text$mn:0000829B                 pop     ebp
.text$mn:0000829C                 retn
.text$mn:0000829C ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ endp
.text$mn:0000829C
.text$mn:0000829C ; ---------------------------------------------------------------------------
.text$mn:0000829D                 align 10h
.text$mn:0000829D _text$mn        ends
.text$mn:0000829D
.text$x:000082A0 ; ===========================================================================
.text$x:000082A0
.text$x:000082A0 ; Segment type: Pure code
.text$x:000082A0 ; Segment permissions: Read/Execute
.text$x:000082A0 _text$x         segment para public 'CODE' use32
.text$x:000082A0                 assume cs:_text$x
.text$x:000082A0                 ;org 82A0h
.text$x:000082A0 ; COMDAT (pick associative to section at 81EC)
.text$x:000082A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000082A0
.text$x:000082A0 ; =============== S U B R O U T I N E =======================================
.text$x:000082A0
.text$x:000082A0
.text$x:000082A0 __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0 proc near
.text$x:000082A0                                         ; DATA XREF: .xdata$x:00009E64o
.text$x:000082A0                 lea     ecx, [ebp-18h]
.text$x:000082A3                 jmp     ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:000082A3 __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0 endp
.text$x:000082A3
.text$x:000082A8
.text$x:000082A8 ; =============== S U B R O U T I N E =======================================
.text$x:000082A8
.text$x:000082A8
.text$x:000082A8 __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ proc near
.text$x:000082A8                                         ; DATA XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+5o
.text$x:000082A8
.text$x:000082A8 arg_4           = dword ptr  8
.text$x:000082A8
.text$x:000082A8                 mov     edx, [esp+arg_4]
.text$x:000082AC                 lea     eax, [edx+0Ch]
.text$x:000082AF                 mov     ecx, [edx-10h]
.text$x:000082B2                 xor     ecx, eax
.text$x:000082B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000082B9                 mov     eax, offset __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.text$x:000082BE                 jmp     ___CxxFrameHandler3
.text$x:000082BE __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ endp
.text$x:000082BE
.text$x:000082BE ; ---------------------------------------------------------------------------
.text$x:000082C3                 align 4
.text$x:000082C3 _text$x         ends
.text$x:000082C3
.text$mn:000082C4 ; ===========================================================================
.text$mn:000082C4
.text$mn:000082C4 ; Segment type: Pure code
.text$mn:000082C4 ; Segment permissions: Read/Execute
.text$mn:000082C4 _text$mn        segment para public 'CODE' use32
.text$mn:000082C4                 assume cs:_text$mn
.text$mn:000082C4                 ;org 82C4h
.text$mn:000082C4 ; COMDAT (pick any)
.text$mn:000082C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082C4
.text$mn:000082C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000082C4
.text$mn:000082C4 ; Attributes: bp-based frame
.text$mn:000082C4
.text$mn:000082C4 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:000082C4                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:000082C4 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000082C4                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:000082C4                 push    ebp
.text$mn:000082C5                 mov     ebp, esp
.text$mn:000082C7                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:000082CC                 pop     ebp
.text$mn:000082CD                 retn
.text$mn:000082CD ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:000082CD
.text$mn:000082CD ; ---------------------------------------------------------------------------
.text$mn:000082CE                 align 10h
.text$mn:000082CE _text$mn        ends
.text$mn:000082CE
.text$mn:000082D0 ; ===========================================================================
.text$mn:000082D0
.text$mn:000082D0 ; Segment type: Pure code
.text$mn:000082D0 ; Segment permissions: Read/Execute
.text$mn:000082D0 _text$mn        segment para public 'CODE' use32
.text$mn:000082D0                 assume cs:_text$mn
.text$mn:000082D0                 ;org 82D0h
.text$mn:000082D0 ; COMDAT (pick any)
.text$mn:000082D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082D0
.text$mn:000082D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000082D0
.text$mn:000082D0 ; Attributes: bp-based frame
.text$mn:000082D0
.text$mn:000082D0 ; public: unsigned short __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::get(void)
.text$mn:000082D0                 public ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:000082D0 ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$mn:000082D0                                         ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+49p
.text$mn:000082D0                                         ; TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Ap ...
.text$mn:000082D0
.text$mn:000082D0 var_28          = byte ptr -28h
.text$mn:000082D0 var_20          = dword ptr -20h
.text$mn:000082D0 var_1C          = dword ptr -1Ch
.text$mn:000082D0 var_18          = word ptr -18h
.text$mn:000082D0 var_16          = word ptr -16h
.text$mn:000082D0 var_14          = word ptr -14h
.text$mn:000082D0 var_10          = dword ptr -10h
.text$mn:000082D0 var_C           = dword ptr -0Ch
.text$mn:000082D0 var_4           = dword ptr -4
.text$mn:000082D0
.text$mn:000082D0 ; FUNCTION CHUNK AT .text$mn:000083E4 SIZE 00000009 BYTES
.text$mn:000082D0 ; FUNCTION CHUNK AT .text$mn:000083F4 SIZE 00000043 BYTES
.text$mn:000082D0
.text$mn:000082D0                 push    ebp
.text$mn:000082D1                 mov     ebp, esp
.text$mn:000082D3                 push    0FFFFFFFFh
.text$mn:000082D5                 push    offset __ehhandler$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:000082DA                 mov     eax, large fs:0
.text$mn:000082E0                 push    eax
.text$mn:000082E1                 push    ecx
.text$mn:000082E2                 sub     esp, 18h
.text$mn:000082E5                 push    ebx
.text$mn:000082E6                 push    esi
.text$mn:000082E7                 push    edi
.text$mn:000082E8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000082ED                 xor     eax, ebp
.text$mn:000082EF                 push    eax
.text$mn:000082F0                 lea     eax, [ebp+var_C]
.text$mn:000082F3                 mov     large fs:0, eax
.text$mn:000082F9                 mov     [ebp+var_10], esp
.text$mn:000082FC                 mov     [ebp+var_1C], ecx
.text$mn:000082FF                 xor     eax, eax
.text$mn:00008301                 mov     [ebp+var_14], ax
.text$mn:00008305                 mov     [ebp+var_20], 0
.text$mn:0000830C                 mov     ecx, [ebp+var_1C]
.text$mn:0000830F                 mov     dword ptr [ecx+8], 0
.text$mn:00008316                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000831D                 push    1
.text$mn:0000831F                 mov     edx, [ebp+var_1C]
.text$mn:00008322                 push    edx
.text$mn:00008323                 lea     ecx, [ebp+var_28]
.text$mn:00008326                 call    ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,bool)
.text$mn:0000832B                 mov     [ebp+var_4], 0
.text$mn:00008332                 lea     ecx, [ebp+var_28]
.text$mn:00008335                 call    ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:0000833A                 movzx   eax, al
.text$mn:0000833D                 test    eax, eax
.text$mn:0000833F                 jnz     short loc_834F
.text$mn:00008341                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008346                 mov     [ebp+var_14], ax
.text$mn:0000834A                 jmp     loc_83F4
.text$mn:0000834F ; ---------------------------------------------------------------------------
.text$mn:0000834F
.text$mn:0000834F loc_834F:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+6Fj
.text$mn:0000834F                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008353                 mov     ecx, [ebp+var_1C]
.text$mn:00008356                 mov     edx, [ecx]
.text$mn:00008358                 mov     ecx, [ebp+var_1C]
.text$mn:0000835B                 add     ecx, [edx+4]
.text$mn:0000835E                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00008363                 mov     ecx, eax
.text$mn:00008365                 call    ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)
.text$mn:0000836A                 mov     [ebp+var_14], ax
.text$mn:0000836E                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008373                 mov     [ebp+var_16], ax
.text$mn:00008377                 lea     eax, [ebp+var_14]
.text$mn:0000837A                 push    eax
.text$mn:0000837B                 lea     ecx, [ebp+var_16]
.text$mn:0000837E                 push    ecx
.text$mn:0000837F                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00008384                 add     esp, 8
.text$mn:00008387                 movzx   edx, al
.text$mn:0000838A                 test    edx, edx
.text$mn:0000838C                 jz      short loc_8399
.text$mn:0000838E                 mov     eax, [ebp+var_20]
.text$mn:00008391                 or      eax, 3
.text$mn:00008394                 mov     [ebp+var_20], eax
.text$mn:00008397                 jmp     short loc_83C8
.text$mn:00008399 ; ---------------------------------------------------------------------------
.text$mn:00008399
.text$mn:00008399 loc_8399:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+BCj
.text$mn:00008399                 mov     ecx, [ebp+var_1C]
.text$mn:0000839C                 mov     edx, [ecx]
.text$mn:0000839E                 mov     ecx, [ebp+var_1C]
.text$mn:000083A1                 add     ecx, [edx+4]
.text$mn:000083A4                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:000083A9                 mov     ecx, eax
.text$mn:000083AB                 call    ?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)
.text$mn:000083B0                 mov     eax, [ebp+var_1C]
.text$mn:000083B3                 mov     ecx, [eax+8]
.text$mn:000083B6                 add     ecx, 1
.text$mn:000083B9                 mov     edx, [eax+0Ch]
.text$mn:000083BC                 adc     edx, 0
.text$mn:000083BF                 mov     eax, [ebp+var_1C]
.text$mn:000083C2                 mov     [eax+8], ecx
.text$mn:000083C5                 mov     [eax+0Ch], edx
.text$mn:000083C8
.text$mn:000083C8 loc_83C8:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+C7j
.text$mn:000083C8                 jmp     short loc_83E4
.text$mn:000083C8 ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$mn:000083C8
.text$mn:000083CA
.text$mn:000083CA ; =============== S U B R O U T I N E =======================================
.text$mn:000083CA
.text$mn:000083CA
.text$mn:000083CA __catch$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0 proc near
.text$mn:000083CA                                         ; DATA XREF: .xdata$x:000097FCo
.text$mn:000083CA                 push    1
.text$mn:000083CC                 push    4
.text$mn:000083CE                 mov     ecx, [ebp-1Ch]
.text$mn:000083D1                 mov     edx, [ecx]
.text$mn:000083D3                 mov     ecx, [ebp-1Ch]
.text$mn:000083D6                 add     ecx, [edx+4]
.text$mn:000083D9                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:000083DE                 mov     eax, offset $LN12
.text$mn:000083E3                 retn
.text$mn:000083E3 __catch$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0 endp
.text$mn:000083E3
.text$mn:000083E4 ; ---------------------------------------------------------------------------
.text$mn:000083E4 ; START OF FUNCTION CHUNK FOR ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:000083E4
.text$mn:000083E4 loc_83E4:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void):loc_83C8j
.text$mn:000083E4                 mov     [ebp+var_4], 0
.text$mn:000083EB                 jmp     short loc_83F4
.text$mn:000083EB ; END OF FUNCTION CHUNK FOR ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:000083ED
.text$mn:000083ED ; =============== S U B R O U T I N E =======================================
.text$mn:000083ED
.text$mn:000083ED
.text$mn:000083ED $LN12           proc near               ; DATA XREF: __catch$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0+14o
.text$mn:000083ED                 mov     dword ptr [ebp-4], 0
.text$mn:000083ED $LN12           endp ; sp-analysis failed
.text$mn:000083ED
.text$mn:000083F4 ; START OF FUNCTION CHUNK FOR ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:000083F4
.text$mn:000083F4 loc_83F4:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+7Aj
.text$mn:000083F4                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+11Bj
.text$mn:000083F4                 push    0
.text$mn:000083F6                 mov     eax, [ebp+var_20]
.text$mn:000083F9                 push    eax
.text$mn:000083FA                 mov     ecx, [ebp+var_1C]
.text$mn:000083FD                 mov     edx, [ecx]
.text$mn:000083FF                 mov     ecx, [ebp+var_1C]
.text$mn:00008402                 add     ecx, [edx+4]
.text$mn:00008405                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:0000840A                 mov     ax, [ebp+var_14]
.text$mn:0000840E                 mov     [ebp+var_18], ax
.text$mn:00008412                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008419                 lea     ecx, [ebp+var_28]
.text$mn:0000841C                 call    ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00008421                 mov     ax, [ebp+var_18]
.text$mn:00008425                 mov     ecx, [ebp+var_C]
.text$mn:00008428                 mov     large fs:0, ecx
.text$mn:0000842F                 pop     ecx
.text$mn:00008430                 pop     edi
.text$mn:00008431                 pop     esi
.text$mn:00008432                 pop     ebx
.text$mn:00008433                 mov     esp, ebp
.text$mn:00008435                 pop     ebp
.text$mn:00008436                 retn
.text$mn:00008436 ; END OF FUNCTION CHUNK FOR ?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008436 ; ---------------------------------------------------------------------------
.text$mn:00008437                 align 4
.text$mn:00008437 _text$mn        ends
.text$mn:00008437
.text$x:00008438 ; ===========================================================================
.text$x:00008438
.text$x:00008438 ; Segment type: Pure code
.text$x:00008438 ; Segment permissions: Read/Execute
.text$x:00008438 _text$x         segment para public 'CODE' use32
.text$x:00008438                 assume cs:_text$x
.text$x:00008438                 ;org 8438h
.text$x:00008438 ; COMDAT (pick associative to section at 82D0)
.text$x:00008438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008438
.text$x:00008438 ; =============== S U B R O U T I N E =======================================
.text$x:00008438
.text$x:00008438
.text$x:00008438 __unwindfunclet$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2 proc near
.text$x:00008438                                         ; DATA XREF: .xdata$x:00009818o
.text$x:00008438                 lea     ecx, [ebp-28h]
.text$x:0000843B                 jmp     ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:0000843B __unwindfunclet$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2 endp
.text$x:0000843B
.text$x:00008440
.text$x:00008440 ; =============== S U B R O U T I N E =======================================
.text$x:00008440
.text$x:00008440
.text$x:00008440 __ehhandler$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$x:00008440                                         ; DATA XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+5o
.text$x:00008440
.text$x:00008440 arg_4           = dword ptr  8
.text$x:00008440
.text$x:00008440                 mov     edx, [esp+arg_4]
.text$x:00008444                 lea     eax, [edx+0Ch]
.text$x:00008447                 mov     ecx, [edx-2Ch]
.text$x:0000844A                 xor     ecx, eax
.text$x:0000844C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008451                 mov     eax, offset __ehfuncinfo$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$x:00008456                 jmp     ___CxxFrameHandler3
.text$x:00008456 __ehhandler$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$x:00008456
.text$x:00008456 ; ---------------------------------------------------------------------------
.text$x:0000845B                 align 4
.text$x:0000845B _text$x         ends
.text$x:0000845B
.text$mn:0000845C ; ===========================================================================
.text$mn:0000845C
.text$mn:0000845C ; Segment type: Pure code
.text$mn:0000845C ; Segment permissions: Read/Execute
.text$mn:0000845C _text$mn        segment para public 'CODE' use32
.text$mn:0000845C                 assume cs:_text$mn
.text$mn:0000845C                 ;org 845Ch
.text$mn:0000845C ; COMDAT (pick any)
.text$mn:0000845C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000845C
.text$mn:0000845C ; =============== S U B R O U T I N E =======================================
.text$mn:0000845C
.text$mn:0000845C ; Attributes: bp-based frame
.text$mn:0000845C
.text$mn:0000845C ; public: class std::locale __thiscall std::ios_base::getloc(void)const
.text$mn:0000845C                 public ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:0000845C ?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$mn:0000845C                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+ADp
.text$mn:0000845C
.text$mn:0000845C var_14          = dword ptr -14h
.text$mn:0000845C var_10          = dword ptr -10h
.text$mn:0000845C var_C           = dword ptr -0Ch
.text$mn:0000845C var_4           = dword ptr -4
.text$mn:0000845C arg_0           = dword ptr  8
.text$mn:0000845C
.text$mn:0000845C                 push    ebp
.text$mn:0000845D                 mov     ebp, esp
.text$mn:0000845F                 push    0FFFFFFFFh
.text$mn:00008461                 push    offset __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$mn:00008466                 mov     eax, large fs:0
.text$mn:0000846C                 push    eax
.text$mn:0000846D                 sub     esp, 8
.text$mn:00008470                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008475                 xor     eax, ebp
.text$mn:00008477                 push    eax
.text$mn:00008478                 lea     eax, [ebp+var_C]
.text$mn:0000847B                 mov     large fs:0, eax
.text$mn:00008481                 mov     [ebp+var_14], ecx
.text$mn:00008484                 mov     [ebp+var_10], 0
.text$mn:0000848B                 mov     eax, [ebp+var_14]
.text$mn:0000848E                 mov     ecx, [eax+30h]
.text$mn:00008491                 push    ecx             ; struct std::locale *
.text$mn:00008492                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008495                 call    ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale(std::locale const &)
.text$mn:0000849A                 mov     [ebp+var_4], 0
.text$mn:000084A1                 mov     edx, [ebp+var_10]
.text$mn:000084A4                 or      edx, 1
.text$mn:000084A7                 mov     [ebp+var_10], edx
.text$mn:000084AA                 mov     eax, [ebp+arg_0]
.text$mn:000084AD                 mov     ecx, [ebp+var_C]
.text$mn:000084B0                 mov     large fs:0, ecx
.text$mn:000084B7                 pop     ecx
.text$mn:000084B8                 mov     esp, ebp
.text$mn:000084BA                 pop     ebp
.text$mn:000084BB                 retn    4
.text$mn:000084BB ?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$mn:000084BB
.text$mn:000084BB ; ---------------------------------------------------------------------------
.text$mn:000084BE                 align 10h
.text$mn:000084BE _text$mn        ends
.text$mn:000084BE
.text$x:000084C0 ; ===========================================================================
.text$x:000084C0
.text$x:000084C0 ; Segment type: Pure code
.text$x:000084C0 ; Segment permissions: Read/Execute
.text$x:000084C0 _text$x         segment para public 'CODE' use32
.text$x:000084C0                 assume cs:_text$x
.text$x:000084C0                 ;org 84C0h
.text$x:000084C0 ; COMDAT (pick associative to section at 845C)
.text$x:000084C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000084C0
.text$x:000084C0 ; =============== S U B R O U T I N E =======================================
.text$x:000084C0
.text$x:000084C0
.text$x:000084C0 __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 proc near
.text$x:000084C0                                         ; DATA XREF: .xdata$x:00009768o
.text$x:000084C0                 mov     eax, [ebp-10h]
.text$x:000084C3                 and     eax, 1
.text$x:000084C6                 jz      $LN4_0
.text$x:000084CC                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:000084D0                 mov     ecx, [ebp+8]    ; this
.text$x:000084D3                 jmp     ??1locale@std@@QAE@XZ ; std::locale::~locale(void)
.text$x:000084D8 ; ---------------------------------------------------------------------------
.text$x:000084D8
.text$x:000084D8 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0+6j
.text$x:000084D8                 retn
.text$x:000084D8 __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0 endp
.text$x:000084D8
.text$x:000084D9
.text$x:000084D9 ; =============== S U B R O U T I N E =======================================
.text$x:000084D9
.text$x:000084D9
.text$x:000084D9 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ proc near
.text$x:000084D9                                         ; DATA XREF: std::ios_base::getloc(void)+5o
.text$x:000084D9
.text$x:000084D9 arg_4           = dword ptr  8
.text$x:000084D9
.text$x:000084D9                 mov     edx, [esp+arg_4]
.text$x:000084DD                 lea     eax, [edx+0Ch]
.text$x:000084E0                 mov     ecx, [edx-0Ch]
.text$x:000084E3                 xor     ecx, eax
.text$x:000084E5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000084EA                 mov     eax, offset __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.text$x:000084EF                 jmp     ___CxxFrameHandler3
.text$x:000084EF __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ endp
.text$x:000084EF
.text$x:000084EF _text$x         ends
.text$x:000084EF
.text$mn:000084F4 ; ===========================================================================
.text$mn:000084F4
.text$mn:000084F4 ; Segment type: Pure code
.text$mn:000084F4 ; Segment permissions: Read/Execute
.text$mn:000084F4 _text$mn        segment para public 'CODE' use32
.text$mn:000084F4                 assume cs:_text$mn
.text$mn:000084F4                 ;org 84F4h
.text$mn:000084F4 ; COMDAT (pick any)
.text$mn:000084F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084F4
.text$mn:000084F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000084F4
.text$mn:000084F4 ; Attributes: bp-based frame
.text$mn:000084F4
.text$mn:000084F4 ; bool __thiscall std::ios_base::good(std::ios_base *__hidden this)
.text$mn:000084F4                 public ?good@ios_base@std@@QBE_NXZ
.text$mn:000084F4 ?good@ios_base@std@@QBE_NXZ proc near   ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11p
.text$mn:000084F4                                         ; TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11p ...
.text$mn:000084F4
.text$mn:000084F4 var_8           = dword ptr -8
.text$mn:000084F4 var_4           = dword ptr -4
.text$mn:000084F4
.text$mn:000084F4                 push    ebp
.text$mn:000084F5                 mov     ebp, esp
.text$mn:000084F7                 sub     esp, 8
.text$mn:000084FA                 mov     [ebp+var_8], ecx
.text$mn:000084FD                 mov     ecx, [ebp+var_8] ; this
.text$mn:00008500                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:00008505                 test    eax, eax
.text$mn:00008507                 jnz     short loc_8512
.text$mn:00008509                 mov     [ebp+var_4], 1
.text$mn:00008510                 jmp     short loc_8519
.text$mn:00008512 ; ---------------------------------------------------------------------------
.text$mn:00008512
.text$mn:00008512 loc_8512:                               ; CODE XREF: std::ios_base::good(void)+13j
.text$mn:00008512                 mov     [ebp+var_4], 0
.text$mn:00008519
.text$mn:00008519 loc_8519:                               ; CODE XREF: std::ios_base::good(void)+1Cj
.text$mn:00008519                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000851C                 mov     esp, ebp
.text$mn:0000851E                 pop     ebp
.text$mn:0000851F                 retn
.text$mn:0000851F ?good@ios_base@std@@QBE_NXZ endp
.text$mn:0000851F
.text$mn:0000851F _text$mn        ends
.text$mn:0000851F
.text$mn:00008520 ; ===========================================================================
.text$mn:00008520
.text$mn:00008520 ; Segment type: Pure code
.text$mn:00008520 ; Segment permissions: Read/Execute
.text$mn:00008520 _text$mn        segment para public 'CODE' use32
.text$mn:00008520                 assume cs:_text$mn
.text$mn:00008520                 ;org 8520h
.text$mn:00008520 ; COMDAT (pick any)
.text$mn:00008520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008520
.text$mn:00008520 ; =============== S U B R O U T I N E =======================================
.text$mn:00008520
.text$mn:00008520 ; Attributes: bp-based frame
.text$mn:00008520
.text$mn:00008520 ; protected: wchar_t * __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::gptr(void)const
.text$mn:00008520                 public ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ
.text$mn:00008520 ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ proc near
.text$mn:00008520                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+28p
.text$mn:00008520
.text$mn:00008520 var_4           = dword ptr -4
.text$mn:00008520
.text$mn:00008520                 push    ebp
.text$mn:00008521                 mov     ebp, esp
.text$mn:00008523                 push    ecx
.text$mn:00008524                 mov     [ebp+var_4], ecx
.text$mn:00008527                 mov     eax, [ebp+var_4]
.text$mn:0000852A                 mov     ecx, [eax+1Ch]
.text$mn:0000852D                 mov     eax, [ecx]
.text$mn:0000852F                 mov     esp, ebp
.text$mn:00008531                 pop     ebp
.text$mn:00008532                 retn
.text$mn:00008532 ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ endp
.text$mn:00008532
.text$mn:00008532 ; ---------------------------------------------------------------------------
.text$mn:00008533                 align 4
.text$mn:00008533 _text$mn        ends
.text$mn:00008533
.text$mn:00008534 ; ===========================================================================
.text$mn:00008534
.text$mn:00008534 ; Segment type: Pure code
.text$mn:00008534 ; Segment permissions: Read/Execute
.text$mn:00008534 _text$mn        segment para public 'CODE' use32
.text$mn:00008534                 assume cs:_text$mn
.text$mn:00008534                 ;org 8534h
.text$mn:00008534 ; COMDAT (pick any)
.text$mn:00008534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008534
.text$mn:00008534 ; =============== S U B R O U T I N E =======================================
.text$mn:00008534
.text$mn:00008534 ; Attributes: bp-based frame
.text$mn:00008534
.text$mn:00008534 ; const struct std::error_category *__cdecl std::iostream_category()
.text$mn:00008534                 public ?iostream_category@std@@YAABVerror_category@1@XZ
.text$mn:00008534 ?iostream_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00008534                                         ; CODE XREF: std::make_error_code(std::io_errc)+3p
.text$mn:00008534                 push    ebp
.text$mn:00008535                 mov     ebp, esp
.text$mn:00008537                 mov     eax, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.text$mn:0000853C                 pop     ebp
.text$mn:0000853D                 retn
.text$mn:0000853D ?iostream_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000853D
.text$mn:0000853D ; ---------------------------------------------------------------------------
.text$mn:0000853E                 align 10h
.text$mn:0000853E _text$mn        ends
.text$mn:0000853E
.text$mn:00008540 ; ===========================================================================
.text$mn:00008540
.text$mn:00008540 ; Segment type: Pure code
.text$mn:00008540 ; Segment permissions: Read/Execute
.text$mn:00008540 _text$mn        segment para public 'CODE' use32
.text$mn:00008540                 assume cs:_text$mn
.text$mn:00008540                 ;org 8540h
.text$mn:00008540 ; COMDAT (pick any)
.text$mn:00008540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008540
.text$mn:00008540 ; =============== S U B R O U T I N E =======================================
.text$mn:00008540
.text$mn:00008540 ; Attributes: bp-based frame
.text$mn:00008540
.text$mn:00008540 ; public: bool __thiscall std::ctype<wchar_t>::is(short, wchar_t)const
.text$mn:00008540                 public ?is@?$ctype@_W@std@@QBE_NF_W@Z
.text$mn:00008540 ?is@?$ctype@_W@std@@QBE_NF_W@Z proc near
.text$mn:00008540                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+16Ep
.text$mn:00008540                                         ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)+43p ...
.text$mn:00008540
.text$mn:00008540 var_4           = dword ptr -4
.text$mn:00008540 arg_0           = word ptr  8
.text$mn:00008540 arg_4           = word ptr  0Ch
.text$mn:00008540
.text$mn:00008540                 push    ebp
.text$mn:00008541                 mov     ebp, esp
.text$mn:00008543                 push    ecx
.text$mn:00008544                 mov     [ebp+var_4], ecx
.text$mn:00008547                 movzx   eax, [ebp+arg_4]
.text$mn:0000854B                 push    eax
.text$mn:0000854C                 movzx   ecx, [ebp+arg_0]
.text$mn:00008550                 push    ecx
.text$mn:00008551                 mov     edx, [ebp+var_4]
.text$mn:00008554                 mov     eax, [edx]
.text$mn:00008556                 mov     ecx, [ebp+var_4]
.text$mn:00008559                 mov     edx, [eax+10h]
.text$mn:0000855C                 call    edx
.text$mn:0000855E                 mov     esp, ebp
.text$mn:00008560                 pop     ebp
.text$mn:00008561                 retn    8
.text$mn:00008561 ?is@?$ctype@_W@std@@QBE_NF_W@Z endp
.text$mn:00008561
.text$mn:00008561 _text$mn        ends
.text$mn:00008561
.text$mn:00008564 ; ===========================================================================
.text$mn:00008564
.text$mn:00008564 ; Segment type: Pure code
.text$mn:00008564 ; Segment permissions: Read/Execute
.text$mn:00008564 _text$mn        segment para public 'CODE' use32
.text$mn:00008564                 assume cs:_text$mn
.text$mn:00008564                 ;org 8564h
.text$mn:00008564 ; COMDAT (pick any)
.text$mn:00008564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008564
.text$mn:00008564 ; =============== S U B R O U T I N E =======================================
.text$mn:00008564
.text$mn:00008564 ; Attributes: bp-based frame
.text$mn:00008564
.text$mn:00008564 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:00008564                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00008564 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00008564                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Cp
.text$mn:00008564                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+7Ep ...
.text$mn:00008564
.text$mn:00008564 var_4           = dword ptr -4
.text$mn:00008564
.text$mn:00008564                 push    ebp
.text$mn:00008565                 mov     ebp, esp
.text$mn:00008567                 push    ecx
.text$mn:00008568                 mov     [ebp+var_4], ecx
.text$mn:0000856B                 mov     eax, [ebp+var_4]
.text$mn:0000856E                 mov     eax, [eax+14h]
.text$mn:00008571                 mov     esp, ebp
.text$mn:00008573                 pop     ebp
.text$mn:00008574                 retn
.text$mn:00008574 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00008574
.text$mn:00008574 ; ---------------------------------------------------------------------------
.text$mn:00008575                 align 4
.text$mn:00008575 _text$mn        ends
.text$mn:00008575
.text$mn:00008578 ; ===========================================================================
.text$mn:00008578
.text$mn:00008578 ; Segment type: Pure code
.text$mn:00008578 ; Segment permissions: Read/Execute
.text$mn:00008578 _text$mn        segment para public 'CODE' use32
.text$mn:00008578                 assume cs:_text$mn
.text$mn:00008578                 ;org 8578h
.text$mn:00008578 ; COMDAT (pick any)
.text$mn:00008578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008578
.text$mn:00008578 ; =============== S U B R O U T I N E =======================================
.text$mn:00008578
.text$mn:00008578 ; Attributes: bp-based frame
.text$mn:00008578
.text$mn:00008578 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00008578                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00008578 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00008578                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+21p
.text$mn:00008578                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00008578
.text$mn:00008578 var_4           = dword ptr -4
.text$mn:00008578 Str             = dword ptr  8
.text$mn:00008578
.text$mn:00008578                 push    ebp
.text$mn:00008579                 mov     ebp, esp
.text$mn:0000857B                 push    ecx
.text$mn:0000857C                 mov     eax, [ebp+Str]
.text$mn:0000857F                 movsx   ecx, byte ptr [eax]
.text$mn:00008582                 test    ecx, ecx
.text$mn:00008584                 jnz     short loc_858F
.text$mn:00008586                 mov     [ebp+var_4], 0
.text$mn:0000858D                 jmp     short loc_859E
.text$mn:0000858F ; ---------------------------------------------------------------------------
.text$mn:0000858F
.text$mn:0000858F loc_858F:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000858F                 mov     edx, [ebp+Str]
.text$mn:00008592                 push    edx             ; Str
.text$mn:00008593                 call    _strlen
.text$mn:00008598                 add     esp, 4
.text$mn:0000859B                 mov     [ebp+var_4], eax
.text$mn:0000859E
.text$mn:0000859E loc_859E:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000859E                 mov     eax, [ebp+var_4]
.text$mn:000085A1                 mov     esp, ebp
.text$mn:000085A3                 pop     ebp
.text$mn:000085A4                 retn
.text$mn:000085A4 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:000085A4
.text$mn:000085A4 ; ---------------------------------------------------------------------------
.text$mn:000085A5                 align 4
.text$mn:000085A5 _text$mn        ends
.text$mn:000085A5
.text$mn:000085A8 ; ===========================================================================
.text$mn:000085A8
.text$mn:000085A8 ; Segment type: Pure code
.text$mn:000085A8 ; Segment permissions: Read/Execute
.text$mn:000085A8 _text$mn        segment para public 'CODE' use32
.text$mn:000085A8                 assume cs:_text$mn
.text$mn:000085A8                 ;org 85A8h
.text$mn:000085A8 ; COMDAT (pick any)
.text$mn:000085A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085A8
.text$mn:000085A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000085A8
.text$mn:000085A8 ; Attributes: bp-based frame
.text$mn:000085A8
.text$mn:000085A8 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:000085A8                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:000085A8 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:000085A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:000085A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:000085A8
.text$mn:000085A8 var_4           = dword ptr -4
.text$mn:000085A8 Str             = dword ptr  8
.text$mn:000085A8
.text$mn:000085A8                 push    ebp
.text$mn:000085A9                 mov     ebp, esp
.text$mn:000085AB                 push    ecx
.text$mn:000085AC                 mov     eax, [ebp+Str]
.text$mn:000085AF                 movzx   ecx, word ptr [eax]
.text$mn:000085B2                 test    ecx, ecx
.text$mn:000085B4                 jnz     short loc_85BF
.text$mn:000085B6                 mov     [ebp+var_4], 0
.text$mn:000085BD                 jmp     short loc_85CE
.text$mn:000085BF ; ---------------------------------------------------------------------------
.text$mn:000085BF
.text$mn:000085BF loc_85BF:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:000085BF                 mov     edx, [ebp+Str]
.text$mn:000085C2                 push    edx             ; Str
.text$mn:000085C3                 call    _wcslen
.text$mn:000085C8                 add     esp, 4
.text$mn:000085CB                 mov     [ebp+var_4], eax
.text$mn:000085CE
.text$mn:000085CE loc_85CE:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:000085CE                 mov     eax, [ebp+var_4]
.text$mn:000085D1                 mov     esp, ebp
.text$mn:000085D3                 pop     ebp
.text$mn:000085D4                 retn
.text$mn:000085D4 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:000085D4
.text$mn:000085D4 ; ---------------------------------------------------------------------------
.text$mn:000085D5                 align 4
.text$mn:000085D5 _text$mn        ends
.text$mn:000085D5
.text$mn:000085D8 ; ===========================================================================
.text$mn:000085D8
.text$mn:000085D8 ; Segment type: Pure code
.text$mn:000085D8 ; Segment permissions: Read/Execute
.text$mn:000085D8 _text$mn        segment para public 'CODE' use32
.text$mn:000085D8                 assume cs:_text$mn
.text$mn:000085D8                 ;org 85D8h
.text$mn:000085D8 ; COMDAT (pick any)
.text$mn:000085D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085D8
.text$mn:000085D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000085D8
.text$mn:000085D8 ; Attributes: bp-based frame
.text$mn:000085D8
.text$mn:000085D8 ; class std::error_code __cdecl std::make_error_code(enum  std::io_errc)
.text$mn:000085D8                 public ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
.text$mn:000085D8 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z proc near
.text$mn:000085D8                                         ; CODE XREF: std::ios_base::clear(int,bool)+55p
.text$mn:000085D8                                         ; std::ios_base::clear(int,bool)+92p ...
.text$mn:000085D8
.text$mn:000085D8 arg_0           = dword ptr  8
.text$mn:000085D8 arg_4           = dword ptr  0Ch
.text$mn:000085D8
.text$mn:000085D8                 push    ebp
.text$mn:000085D9                 mov     ebp, esp
.text$mn:000085DB                 call    ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category(void)
.text$mn:000085E0                 push    eax             ; struct std::error_category *
.text$mn:000085E1                 mov     eax, [ebp+arg_4]
.text$mn:000085E4                 push    eax             ; int
.text$mn:000085E5                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000085E8                 call    ??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code(int,std::error_category const &)
.text$mn:000085ED                 mov     eax, [ebp+arg_0]
.text$mn:000085F0                 pop     ebp
.text$mn:000085F1                 retn
.text$mn:000085F1 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z endp
.text$mn:000085F1
.text$mn:000085F1 ; ---------------------------------------------------------------------------
.text$mn:000085F2                 align 4
.text$mn:000085F2 _text$mn        ends
.text$mn:000085F2
.text$mn:000085F4 ; ===========================================================================
.text$mn:000085F4
.text$mn:000085F4 ; Segment type: Pure code
.text$mn:000085F4 ; Segment permissions: Read/Execute
.text$mn:000085F4 _text$mn        segment para public 'CODE' use32
.text$mn:000085F4                 assume cs:_text$mn
.text$mn:000085F4                 ;org 85F4h
.text$mn:000085F4 ; COMDAT (pick any)
.text$mn:000085F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085F4
.text$mn:000085F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000085F4
.text$mn:000085F4 ; Attributes: bp-based frame
.text$mn:000085F4
.text$mn:000085F4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:000085F4                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:000085F4 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:000085F4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:000085F4
.text$mn:000085F4 var_4           = dword ptr -4
.text$mn:000085F4
.text$mn:000085F4                 push    ebp
.text$mn:000085F5                 mov     ebp, esp
.text$mn:000085F7                 push    ecx
.text$mn:000085F8                 mov     [ebp+var_4], ecx
.text$mn:000085FB                 mov     eax, [ebp+var_4]
.text$mn:000085FE                 push    eax
.text$mn:000085FF                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00008604                 add     esp, 4
.text$mn:00008607                 mov     esp, ebp
.text$mn:00008609                 pop     ebp
.text$mn:0000860A                 retn
.text$mn:0000860A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000860A
.text$mn:0000860A ; ---------------------------------------------------------------------------
.text$mn:0000860B                 align 4
.text$mn:0000860B _text$mn        ends
.text$mn:0000860B
.text$mn:0000860C ; ===========================================================================
.text$mn:0000860C
.text$mn:0000860C ; Segment type: Pure code
.text$mn:0000860C ; Segment permissions: Read/Execute
.text$mn:0000860C _text$mn        segment para public 'CODE' use32
.text$mn:0000860C                 assume cs:_text$mn
.text$mn:0000860C                 ;org 860Ch
.text$mn:0000860C ; COMDAT (pick any)
.text$mn:0000860C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000860C
.text$mn:0000860C ; =============== S U B R O U T I N E =======================================
.text$mn:0000860C
.text$mn:0000860C ; Attributes: bp-based frame
.text$mn:0000860C
.text$mn:0000860C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000860C                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000860C ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000860C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000860C
.text$mn:0000860C var_4           = dword ptr -4
.text$mn:0000860C
.text$mn:0000860C                 push    ebp
.text$mn:0000860D                 mov     ebp, esp
.text$mn:0000860F                 push    ecx
.text$mn:00008610                 mov     [ebp+var_4], ecx
.text$mn:00008613                 mov     eax, [ebp+var_4]
.text$mn:00008616                 push    eax
.text$mn:00008617                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000861C                 add     esp, 4
.text$mn:0000861F                 mov     esp, ebp
.text$mn:00008621                 pop     ebp
.text$mn:00008622                 retn
.text$mn:00008622 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00008622
.text$mn:00008622 ; ---------------------------------------------------------------------------
.text$mn:00008623                 align 4
.text$mn:00008623 _text$mn        ends
.text$mn:00008623
.text$mn:00008624 ; ===========================================================================
.text$mn:00008624
.text$mn:00008624 ; Segment type: Pure code
.text$mn:00008624 ; Segment permissions: Read/Execute
.text$mn:00008624 _text$mn        segment para public 'CODE' use32
.text$mn:00008624                 assume cs:_text$mn
.text$mn:00008624                 ;org 8624h
.text$mn:00008624 ; COMDAT (pick any)
.text$mn:00008624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008624
.text$mn:00008624 ; =============== S U B R O U T I N E =======================================
.text$mn:00008624
.text$mn:00008624 ; Attributes: bp-based frame
.text$mn:00008624
.text$mn:00008624 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00008624                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00008624 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00008624                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00008624
.text$mn:00008624 var_4           = dword ptr -4
.text$mn:00008624
.text$mn:00008624                 push    ebp
.text$mn:00008625                 mov     ebp, esp
.text$mn:00008627                 push    ecx
.text$mn:00008628                 mov     [ebp+var_4], ecx
.text$mn:0000862B                 or      eax, 0FFFFFFFFh
.text$mn:0000862E                 mov     esp, ebp
.text$mn:00008630                 pop     ebp
.text$mn:00008631                 retn
.text$mn:00008631 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00008631
.text$mn:00008631 ; ---------------------------------------------------------------------------
.text$mn:00008632                 align 4
.text$mn:00008632 _text$mn        ends
.text$mn:00008632
.text$mn:00008634 ; ===========================================================================
.text$mn:00008634
.text$mn:00008634 ; Segment type: Pure code
.text$mn:00008634 ; Segment permissions: Read/Execute
.text$mn:00008634 _text$mn        segment para public 'CODE' use32
.text$mn:00008634                 assume cs:_text$mn
.text$mn:00008634                 ;org 8634h
.text$mn:00008634 ; COMDAT (pick any)
.text$mn:00008634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008634
.text$mn:00008634 ; =============== S U B R O U T I N E =======================================
.text$mn:00008634
.text$mn:00008634 ; Attributes: bp-based frame
.text$mn:00008634
.text$mn:00008634 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00008634                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00008634 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00008634                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00008634
.text$mn:00008634 var_4           = dword ptr -4
.text$mn:00008634
.text$mn:00008634                 push    ebp
.text$mn:00008635                 mov     ebp, esp
.text$mn:00008637                 push    ecx
.text$mn:00008638                 mov     [ebp+var_4], ecx
.text$mn:0000863B                 mov     eax, 7FFFFFFFh
.text$mn:00008640                 mov     esp, ebp
.text$mn:00008642                 pop     ebp
.text$mn:00008643                 retn
.text$mn:00008643 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00008643
.text$mn:00008643 _text$mn        ends
.text$mn:00008643
.text$mn:00008644 ; ===========================================================================
.text$mn:00008644
.text$mn:00008644 ; Segment type: Pure code
.text$mn:00008644 ; Segment permissions: Read/Execute
.text$mn:00008644 _text$mn        segment para public 'CODE' use32
.text$mn:00008644                 assume cs:_text$mn
.text$mn:00008644                 ;org 8644h
.text$mn:00008644 ; COMDAT (pick any)
.text$mn:00008644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008644
.text$mn:00008644 ; =============== S U B R O U T I N E =======================================
.text$mn:00008644
.text$mn:00008644 ; Attributes: bp-based frame
.text$mn:00008644
.text$mn:00008644 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00008644                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00008644 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00008644                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00008644
.text$mn:00008644 arg_0           = dword ptr  8
.text$mn:00008644
.text$mn:00008644                 push    ebp
.text$mn:00008645                 mov     ebp, esp
.text$mn:00008647                 mov     ecx, [ebp+arg_0]
.text$mn:0000864A                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000864F                 pop     ebp
.text$mn:00008650                 retn
.text$mn:00008650 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00008650
.text$mn:00008650 ; ---------------------------------------------------------------------------
.text$mn:00008651                 align 4
.text$mn:00008651 _text$mn        ends
.text$mn:00008651
.text$mn:00008654 ; ===========================================================================
.text$mn:00008654
.text$mn:00008654 ; Segment type: Pure code
.text$mn:00008654 ; Segment permissions: Read/Execute
.text$mn:00008654 _text$mn        segment para public 'CODE' use32
.text$mn:00008654                 assume cs:_text$mn
.text$mn:00008654                 ;org 8654h
.text$mn:00008654 ; COMDAT (pick any)
.text$mn:00008654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008654
.text$mn:00008654 ; =============== S U B R O U T I N E =======================================
.text$mn:00008654
.text$mn:00008654 ; Attributes: bp-based frame
.text$mn:00008654
.text$mn:00008654 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00008654                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00008654 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00008654                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00008654
.text$mn:00008654 arg_0           = dword ptr  8
.text$mn:00008654
.text$mn:00008654                 push    ebp
.text$mn:00008655                 mov     ebp, esp
.text$mn:00008657                 mov     ecx, [ebp+arg_0]
.text$mn:0000865A                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000865F                 pop     ebp
.text$mn:00008660                 retn
.text$mn:00008660 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00008660
.text$mn:00008660 ; ---------------------------------------------------------------------------
.text$mn:00008661                 align 4
.text$mn:00008661 _text$mn        ends
.text$mn:00008661
.text$mn:00008664 ; ===========================================================================
.text$mn:00008664
.text$mn:00008664 ; Segment type: Pure code
.text$mn:00008664 ; Segment permissions: Read/Execute
.text$mn:00008664 _text$mn        segment para public 'CODE' use32
.text$mn:00008664                 assume cs:_text$mn
.text$mn:00008664                 ;org 8664h
.text$mn:00008664 ; COMDAT (pick any)
.text$mn:00008664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008664
.text$mn:00008664 ; =============== S U B R O U T I N E =======================================
.text$mn:00008664
.text$mn:00008664 ; Attributes: bp-based frame
.text$mn:00008664
.text$mn:00008664 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00008664                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00008664 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00008664                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00008664                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00008664
.text$mn:00008664 var_10          = dword ptr -10h
.text$mn:00008664 var_C           = dword ptr -0Ch
.text$mn:00008664 var_8           = dword ptr -8
.text$mn:00008664 var_1           = byte ptr -1
.text$mn:00008664
.text$mn:00008664                 push    ebp
.text$mn:00008665                 mov     ebp, esp
.text$mn:00008667                 sub     esp, 10h
.text$mn:0000866A                 mov     [ebp+var_10], ecx
.text$mn:0000866D                 lea     eax, [ebp+var_1]
.text$mn:00008670                 push    eax
.text$mn:00008671                 mov     ecx, [ebp+var_10]
.text$mn:00008674                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008679                 mov     ecx, eax
.text$mn:0000867B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00008680                 mov     [ebp+var_8], eax
.text$mn:00008683                 cmp     [ebp+var_8], 1
.text$mn:00008687                 ja      short loc_8692
.text$mn:00008689                 mov     [ebp+var_C], 1
.text$mn:00008690                 jmp     short loc_869B
.text$mn:00008692 ; ---------------------------------------------------------------------------
.text$mn:00008692
.text$mn:00008692 loc_8692:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00008692                 mov     ecx, [ebp+var_8]
.text$mn:00008695                 sub     ecx, 1
.text$mn:00008698                 mov     [ebp+var_C], ecx
.text$mn:0000869B
.text$mn:0000869B loc_869B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000869B                 mov     eax, [ebp+var_C]
.text$mn:0000869E                 mov     esp, ebp
.text$mn:000086A0                 pop     ebp
.text$mn:000086A1                 retn
.text$mn:000086A1 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000086A1
.text$mn:000086A1 ; ---------------------------------------------------------------------------
.text$mn:000086A2                 align 4
.text$mn:000086A2 _text$mn        ends
.text$mn:000086A2
.text$mn:000086A4 ; ===========================================================================
.text$mn:000086A4
.text$mn:000086A4 ; Segment type: Pure code
.text$mn:000086A4 ; Segment permissions: Read/Execute
.text$mn:000086A4 _text$mn        segment para public 'CODE' use32
.text$mn:000086A4                 assume cs:_text$mn
.text$mn:000086A4                 ;org 86A4h
.text$mn:000086A4 ; COMDAT (pick any)
.text$mn:000086A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086A4
.text$mn:000086A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000086A4
.text$mn:000086A4 ; Attributes: bp-based frame
.text$mn:000086A4
.text$mn:000086A4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:000086A4                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000086A4 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000086A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:000086A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:000086A4
.text$mn:000086A4 var_10          = dword ptr -10h
.text$mn:000086A4 var_C           = dword ptr -0Ch
.text$mn:000086A4 var_8           = dword ptr -8
.text$mn:000086A4 var_1           = byte ptr -1
.text$mn:000086A4
.text$mn:000086A4                 push    ebp
.text$mn:000086A5                 mov     ebp, esp
.text$mn:000086A7                 sub     esp, 10h
.text$mn:000086AA                 mov     [ebp+var_10], ecx
.text$mn:000086AD                 lea     eax, [ebp+var_1]
.text$mn:000086B0                 push    eax
.text$mn:000086B1                 mov     ecx, [ebp+var_10]
.text$mn:000086B4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000086B9                 mov     ecx, eax
.text$mn:000086BB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:000086C0                 mov     [ebp+var_8], eax
.text$mn:000086C3                 cmp     [ebp+var_8], 1
.text$mn:000086C7                 ja      short loc_86D2
.text$mn:000086C9                 mov     [ebp+var_C], 1
.text$mn:000086D0                 jmp     short loc_86DB
.text$mn:000086D2 ; ---------------------------------------------------------------------------
.text$mn:000086D2
.text$mn:000086D2 loc_86D2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:000086D2                 mov     ecx, [ebp+var_8]
.text$mn:000086D5                 sub     ecx, 1
.text$mn:000086D8                 mov     [ebp+var_C], ecx
.text$mn:000086DB
.text$mn:000086DB loc_86DB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:000086DB                 mov     eax, [ebp+var_C]
.text$mn:000086DE                 mov     esp, ebp
.text$mn:000086E0                 pop     ebp
.text$mn:000086E1                 retn
.text$mn:000086E1 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000086E1
.text$mn:000086E1 ; ---------------------------------------------------------------------------
.text$mn:000086E2                 align 4
.text$mn:000086E2 _text$mn        ends
.text$mn:000086E2
.text$mn:000086E4 ; ===========================================================================
.text$mn:000086E4
.text$mn:000086E4 ; Segment type: Pure code
.text$mn:000086E4 ; Segment permissions: Read/Execute
.text$mn:000086E4 _text$mn        segment para public 'CODE' use32
.text$mn:000086E4                 assume cs:_text$mn
.text$mn:000086E4                 ;org 86E4h
.text$mn:000086E4 ; COMDAT (pick any)
.text$mn:000086E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086E4
.text$mn:000086E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000086E4
.text$mn:000086E4 ; Attributes: bp-based frame
.text$mn:000086E4
.text$mn:000086E4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:000086E4                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000086E4 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:000086E4                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:000086E4                                         ; DATA XREF: .rdata:0000A1ACo
.text$mn:000086E4
.text$mn:000086E4 var_1C          = dword ptr -1Ch
.text$mn:000086E4 var_18          = dword ptr -18h
.text$mn:000086E4 Str             = dword ptr -14h
.text$mn:000086E4 var_10          = dword ptr -10h
.text$mn:000086E4 var_C           = dword ptr -0Ch
.text$mn:000086E4 var_4           = dword ptr -4
.text$mn:000086E4 arg_0           = dword ptr  8
.text$mn:000086E4 arg_4           = dword ptr  0Ch
.text$mn:000086E4
.text$mn:000086E4                 push    ebp
.text$mn:000086E5                 mov     ebp, esp
.text$mn:000086E7                 push    0FFFFFFFFh
.text$mn:000086E9                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000086EE                 mov     eax, large fs:0
.text$mn:000086F4                 push    eax
.text$mn:000086F5                 sub     esp, 10h
.text$mn:000086F8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000086FD                 xor     eax, ebp
.text$mn:000086FF                 push    eax
.text$mn:00008700                 lea     eax, [ebp+var_C]
.text$mn:00008703                 mov     large fs:0, eax
.text$mn:00008709                 mov     [ebp+var_1C], ecx
.text$mn:0000870C                 mov     [ebp+var_18], 0
.text$mn:00008713                 mov     eax, [ebp+arg_4]
.text$mn:00008716                 push    eax             ; int
.text$mn:00008717                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000871C                 add     esp, 4
.text$mn:0000871F                 mov     [ebp+var_10], eax
.text$mn:00008722                 cmp     [ebp+var_10], 0
.text$mn:00008726                 jz      short loc_8730
.text$mn:00008728                 mov     ecx, [ebp+var_10]
.text$mn:0000872B                 mov     [ebp+Str], ecx
.text$mn:0000872E                 jmp     short loc_8737
.text$mn:00008730 ; ---------------------------------------------------------------------------
.text$mn:00008730
.text$mn:00008730 loc_8730:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00008730                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00008737
.text$mn:00008737 loc_8737:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00008737                 mov     edx, [ebp+Str]
.text$mn:0000873A                 push    edx             ; Str
.text$mn:0000873B                 mov     ecx, [ebp+arg_0]
.text$mn:0000873E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00008743                 mov     [ebp+var_4], 0
.text$mn:0000874A                 mov     eax, [ebp+var_18]
.text$mn:0000874D                 or      eax, 1
.text$mn:00008750                 mov     [ebp+var_18], eax
.text$mn:00008753                 mov     eax, [ebp+arg_0]
.text$mn:00008756                 mov     ecx, [ebp+var_C]
.text$mn:00008759                 mov     large fs:0, ecx
.text$mn:00008760                 pop     ecx
.text$mn:00008761                 mov     esp, ebp
.text$mn:00008763                 pop     ebp
.text$mn:00008764                 retn    8
.text$mn:00008764 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00008764
.text$mn:00008764 ; ---------------------------------------------------------------------------
.text$mn:00008767                 align 4
.text$mn:00008767 _text$mn        ends
.text$mn:00008767
.text$x:00008768 ; ===========================================================================
.text$x:00008768
.text$x:00008768 ; Segment type: Pure code
.text$x:00008768 ; Segment permissions: Read/Execute
.text$x:00008768 _text$x         segment para public 'CODE' use32
.text$x:00008768                 assume cs:_text$x
.text$x:00008768                 ;org 8768h
.text$x:00008768 ; COMDAT (pick associative to section at 86E4)
.text$x:00008768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008768
.text$x:00008768 ; =============== S U B R O U T I N E =======================================
.text$x:00008768
.text$x:00008768
.text$x:00008768 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00008768                                         ; DATA XREF: .xdata$x:00009584o
.text$x:00008768                 mov     eax, [ebp-18h]
.text$x:0000876B                 and     eax, 1
.text$x:0000876E                 jz      $LN6
.text$x:00008774                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00008778                 mov     ecx, [ebp+8]
.text$x:0000877B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00008780 ; ---------------------------------------------------------------------------
.text$x:00008780
.text$x:00008780 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00008780                 retn
.text$x:00008780 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00008780
.text$x:00008781
.text$x:00008781 ; =============== S U B R O U T I N E =======================================
.text$x:00008781
.text$x:00008781
.text$x:00008781 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00008781                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00008781
.text$x:00008781 arg_4           = dword ptr  8
.text$x:00008781
.text$x:00008781                 mov     edx, [esp+arg_4]
.text$x:00008785                 lea     eax, [edx+0Ch]
.text$x:00008788                 mov     ecx, [edx-14h]
.text$x:0000878B                 xor     ecx, eax
.text$x:0000878D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008792                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00008797                 jmp     ___CxxFrameHandler3
.text$x:00008797 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00008797
.text$x:00008797 _text$x         ends
.text$x:00008797
.text$mn:0000879C ; ===========================================================================
.text$mn:0000879C
.text$mn:0000879C ; Segment type: Pure code
.text$mn:0000879C ; Segment permissions: Read/Execute
.text$mn:0000879C _text$mn        segment para public 'CODE' use32
.text$mn:0000879C                 assume cs:_text$mn
.text$mn:0000879C                 ;org 879Ch
.text$mn:0000879C ; COMDAT (pick any)
.text$mn:0000879C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000879C
.text$mn:0000879C ; =============== S U B R O U T I N E =======================================
.text$mn:0000879C
.text$mn:0000879C ; Attributes: bp-based frame
.text$mn:0000879C
.text$mn:0000879C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000879C                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000879C ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000879C                                         ; DATA XREF: .rdata:0000A1E0o
.text$mn:0000879C
.text$mn:0000879C var_14          = dword ptr -14h
.text$mn:0000879C var_10          = dword ptr -10h
.text$mn:0000879C var_C           = dword ptr -0Ch
.text$mn:0000879C var_4           = dword ptr -4
.text$mn:0000879C arg_0           = dword ptr  8
.text$mn:0000879C arg_4           = dword ptr  0Ch
.text$mn:0000879C
.text$mn:0000879C                 push    ebp
.text$mn:0000879D                 mov     ebp, esp
.text$mn:0000879F                 push    0FFFFFFFFh
.text$mn:000087A1                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000087A6                 mov     eax, large fs:0
.text$mn:000087AC                 push    eax
.text$mn:000087AD                 sub     esp, 8
.text$mn:000087B0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000087B5                 xor     eax, ebp
.text$mn:000087B7                 push    eax
.text$mn:000087B8                 lea     eax, [ebp+var_C]
.text$mn:000087BB                 mov     large fs:0, eax
.text$mn:000087C1                 mov     [ebp+var_14], ecx
.text$mn:000087C4                 mov     [ebp+var_10], 0
.text$mn:000087CB                 cmp     [ebp+arg_4], 1
.text$mn:000087CF                 jnz     short loc_87F5
.text$mn:000087D1                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:000087D6                 mov     ecx, [ebp+arg_0]
.text$mn:000087D9                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000087DE                 mov     [ebp+var_4], 0
.text$mn:000087E5                 mov     eax, [ebp+var_10]
.text$mn:000087E8                 or      eax, 1
.text$mn:000087EB                 mov     [ebp+var_10], eax
.text$mn:000087EE                 mov     eax, [ebp+arg_0]
.text$mn:000087F1                 jmp     short loc_8818
.text$mn:000087F3 ; ---------------------------------------------------------------------------
.text$mn:000087F3                 jmp     short loc_8818
.text$mn:000087F5 ; ---------------------------------------------------------------------------
.text$mn:000087F5
.text$mn:000087F5 loc_87F5:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:000087F5                 mov     ecx, [ebp+arg_4]
.text$mn:000087F8                 push    ecx
.text$mn:000087F9                 mov     edx, [ebp+arg_0]
.text$mn:000087FC                 push    edx
.text$mn:000087FD                 mov     ecx, [ebp+var_14]
.text$mn:00008800                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00008805                 mov     [ebp+var_4], 0
.text$mn:0000880C                 mov     eax, [ebp+var_10]
.text$mn:0000880F                 or      eax, 1
.text$mn:00008812                 mov     [ebp+var_10], eax
.text$mn:00008815                 mov     eax, [ebp+arg_0]
.text$mn:00008818
.text$mn:00008818 loc_8818:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00008818                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00008818                 mov     ecx, [ebp+var_C]
.text$mn:0000881B                 mov     large fs:0, ecx
.text$mn:00008822                 pop     ecx
.text$mn:00008823                 mov     esp, ebp
.text$mn:00008825                 pop     ebp
.text$mn:00008826                 retn    8
.text$mn:00008826 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00008826
.text$mn:00008826 ; ---------------------------------------------------------------------------
.text$mn:00008829                 align 4
.text$mn:00008829 _text$mn        ends
.text$mn:00008829
.text$x:0000882C ; ===========================================================================
.text$x:0000882C
.text$x:0000882C ; Segment type: Pure code
.text$x:0000882C ; Segment permissions: Read/Execute
.text$x:0000882C _text$x         segment para public 'CODE' use32
.text$x:0000882C                 assume cs:_text$x
.text$x:0000882C                 ;org 882Ch
.text$x:0000882C ; COMDAT (pick associative to section at 879C)
.text$x:0000882C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000882C
.text$x:0000882C ; =============== S U B R O U T I N E =======================================
.text$x:0000882C
.text$x:0000882C
.text$x:0000882C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000882C                                         ; DATA XREF: .xdata$x:00009608o
.text$x:0000882C                 mov     eax, [ebp-10h]
.text$x:0000882F                 and     eax, 1
.text$x:00008832                 jz      $LN6_0
.text$x:00008838                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000883C                 mov     ecx, [ebp+8]
.text$x:0000883F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00008844 ; ---------------------------------------------------------------------------
.text$x:00008844
.text$x:00008844 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00008844                 retn
.text$x:00008844 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00008844
.text$x:00008845
.text$x:00008845 ; =============== S U B R O U T I N E =======================================
.text$x:00008845
.text$x:00008845
.text$x:00008845 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00008845                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00008845
.text$x:00008845 arg_4           = dword ptr  8
.text$x:00008845
.text$x:00008845                 mov     edx, [esp+arg_4]
.text$x:00008849                 lea     eax, [edx+0Ch]
.text$x:0000884C                 mov     ecx, [edx-0Ch]
.text$x:0000884F                 xor     ecx, eax
.text$x:00008851                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008856                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000885B                 jmp     ___CxxFrameHandler3
.text$x:0000885B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000885B
.text$x:0000885B _text$x         ends
.text$x:0000885B
.text$mn:00008860 ; ===========================================================================
.text$mn:00008860
.text$mn:00008860 ; Segment type: Pure code
.text$mn:00008860 ; Segment permissions: Read/Execute
.text$mn:00008860 _text$mn        segment para public 'CODE' use32
.text$mn:00008860                 assume cs:_text$mn
.text$mn:00008860                 ;org 8860h
.text$mn:00008860 ; COMDAT (pick any)
.text$mn:00008860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008860
.text$mn:00008860 ; =============== S U B R O U T I N E =======================================
.text$mn:00008860
.text$mn:00008860 ; Attributes: bp-based frame
.text$mn:00008860
.text$mn:00008860 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00008860                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008860 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00008860                                         ; DATA XREF: .rdata:0000A220o
.text$mn:00008860
.text$mn:00008860 var_1C          = dword ptr -1Ch
.text$mn:00008860 var_18          = dword ptr -18h
.text$mn:00008860 Str             = dword ptr -14h
.text$mn:00008860 var_10          = dword ptr -10h
.text$mn:00008860 var_C           = dword ptr -0Ch
.text$mn:00008860 var_4           = dword ptr -4
.text$mn:00008860 arg_0           = dword ptr  8
.text$mn:00008860 arg_4           = dword ptr  0Ch
.text$mn:00008860
.text$mn:00008860                 push    ebp
.text$mn:00008861                 mov     ebp, esp
.text$mn:00008863                 push    0FFFFFFFFh
.text$mn:00008865                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000886A                 mov     eax, large fs:0
.text$mn:00008870                 push    eax
.text$mn:00008871                 sub     esp, 10h
.text$mn:00008874                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008879                 xor     eax, ebp
.text$mn:0000887B                 push    eax
.text$mn:0000887C                 lea     eax, [ebp+var_C]
.text$mn:0000887F                 mov     large fs:0, eax
.text$mn:00008885                 mov     [ebp+var_1C], ecx
.text$mn:00008888                 mov     [ebp+var_18], 0
.text$mn:0000888F                 mov     eax, [ebp+arg_4]
.text$mn:00008892                 push    eax             ; int
.text$mn:00008893                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00008898                 add     esp, 4
.text$mn:0000889B                 mov     [ebp+var_10], eax
.text$mn:0000889E                 cmp     [ebp+var_10], 0
.text$mn:000088A2                 jz      short loc_88AC
.text$mn:000088A4                 mov     ecx, [ebp+var_10]
.text$mn:000088A7                 mov     [ebp+Str], ecx
.text$mn:000088AA                 jmp     short loc_88B3
.text$mn:000088AC ; ---------------------------------------------------------------------------
.text$mn:000088AC
.text$mn:000088AC loc_88AC:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:000088AC                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:000088B3
.text$mn:000088B3 loc_88B3:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:000088B3                 mov     edx, [ebp+Str]
.text$mn:000088B6                 push    edx             ; Str
.text$mn:000088B7                 mov     ecx, [ebp+arg_0]
.text$mn:000088BA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000088BF                 mov     [ebp+var_4], 0
.text$mn:000088C6                 mov     eax, [ebp+var_18]
.text$mn:000088C9                 or      eax, 1
.text$mn:000088CC                 mov     [ebp+var_18], eax
.text$mn:000088CF                 mov     eax, [ebp+arg_0]
.text$mn:000088D2                 mov     ecx, [ebp+var_C]
.text$mn:000088D5                 mov     large fs:0, ecx
.text$mn:000088DC                 pop     ecx
.text$mn:000088DD                 mov     esp, ebp
.text$mn:000088DF                 pop     ebp
.text$mn:000088E0                 retn    8
.text$mn:000088E0 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:000088E0
.text$mn:000088E0 ; ---------------------------------------------------------------------------
.text$mn:000088E3                 align 4
.text$mn:000088E3 _text$mn        ends
.text$mn:000088E3
.text$x:000088E4 ; ===========================================================================
.text$x:000088E4
.text$x:000088E4 ; Segment type: Pure code
.text$x:000088E4 ; Segment permissions: Read/Execute
.text$x:000088E4 _text$x         segment para public 'CODE' use32
.text$x:000088E4                 assume cs:_text$x
.text$x:000088E4                 ;org 88E4h
.text$x:000088E4 ; COMDAT (pick associative to section at 8860)
.text$x:000088E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000088E4
.text$x:000088E4 ; =============== S U B R O U T I N E =======================================
.text$x:000088E4
.text$x:000088E4
.text$x:000088E4 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:000088E4                                         ; DATA XREF: .xdata$x:0000968Co
.text$x:000088E4                 mov     eax, [ebp-18h]
.text$x:000088E7                 and     eax, 1
.text$x:000088EA                 jz      $LN6_1
.text$x:000088F0                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000088F4                 mov     ecx, [ebp+8]
.text$x:000088F7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000088FC ; ---------------------------------------------------------------------------
.text$x:000088FC
.text$x:000088FC $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000088FC                 retn
.text$x:000088FC __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000088FC
.text$x:000088FD
.text$x:000088FD ; =============== S U B R O U T I N E =======================================
.text$x:000088FD
.text$x:000088FD
.text$x:000088FD __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000088FD                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:000088FD
.text$x:000088FD arg_4           = dword ptr  8
.text$x:000088FD
.text$x:000088FD                 mov     edx, [esp+arg_4]
.text$x:00008901                 lea     eax, [edx+0Ch]
.text$x:00008904                 mov     ecx, [edx-14h]
.text$x:00008907                 xor     ecx, eax
.text$x:00008909                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000890E                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00008913                 jmp     ___CxxFrameHandler3
.text$x:00008913 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00008913
.text$x:00008913 _text$x         ends
.text$x:00008913
.text$mn:00008918 ; ===========================================================================
.text$mn:00008918
.text$mn:00008918 ; Segment type: Pure code
.text$mn:00008918 ; Segment permissions: Read/Execute
.text$mn:00008918 _text$mn        segment para public 'CODE' use32
.text$mn:00008918                 assume cs:_text$mn
.text$mn:00008918                 ;org 8918h
.text$mn:00008918 ; COMDAT (pick any)
.text$mn:00008918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008918
.text$mn:00008918 ; =============== S U B R O U T I N E =======================================
.text$mn:00008918
.text$mn:00008918 ; Attributes: bp-based frame
.text$mn:00008918
.text$mn:00008918 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::error_code::message(void)const
.text$mn:00008918                 public ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:00008918 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$mn:00008918                                         ; CODE XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+59p
.text$mn:00008918
.text$mn:00008918 var_18          = dword ptr -18h
.text$mn:00008918 var_14          = dword ptr -14h
.text$mn:00008918 var_10          = dword ptr -10h
.text$mn:00008918 var_C           = dword ptr -0Ch
.text$mn:00008918 var_4           = dword ptr -4
.text$mn:00008918 arg_0           = dword ptr  8
.text$mn:00008918
.text$mn:00008918                 push    ebp
.text$mn:00008919                 mov     ebp, esp
.text$mn:0000891B                 push    0FFFFFFFFh
.text$mn:0000891D                 push    offset __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$mn:00008922                 mov     eax, large fs:0
.text$mn:00008928                 push    eax
.text$mn:00008929                 sub     esp, 0Ch
.text$mn:0000892C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008931                 xor     eax, ebp
.text$mn:00008933                 push    eax
.text$mn:00008934                 lea     eax, [ebp+var_C]
.text$mn:00008937                 mov     large fs:0, eax
.text$mn:0000893D                 mov     [ebp+var_10], ecx
.text$mn:00008940                 mov     [ebp+var_18], 0
.text$mn:00008947                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000894A                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000894F                 mov     [ebp+var_14], eax
.text$mn:00008952                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008955                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000895A                 push    eax
.text$mn:0000895B                 mov     eax, [ebp+arg_0]
.text$mn:0000895E                 push    eax
.text$mn:0000895F                 mov     ecx, [ebp+var_14]
.text$mn:00008962                 mov     edx, [ecx]
.text$mn:00008964                 mov     ecx, [ebp+var_14]
.text$mn:00008967                 mov     eax, [edx+8]
.text$mn:0000896A                 call    eax
.text$mn:0000896C                 mov     [ebp+var_4], 0
.text$mn:00008973                 mov     ecx, [ebp+var_18]
.text$mn:00008976                 or      ecx, 1
.text$mn:00008979                 mov     [ebp+var_18], ecx
.text$mn:0000897C                 mov     eax, [ebp+arg_0]
.text$mn:0000897F                 mov     ecx, [ebp+var_C]
.text$mn:00008982                 mov     large fs:0, ecx
.text$mn:00008989                 pop     ecx
.text$mn:0000898A                 mov     esp, ebp
.text$mn:0000898C                 pop     ebp
.text$mn:0000898D                 retn    4
.text$mn:0000898D ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$mn:0000898D
.text$mn:0000898D _text$mn        ends
.text$mn:0000898D
.text$x:00008990 ; ===========================================================================
.text$x:00008990
.text$x:00008990 ; Segment type: Pure code
.text$x:00008990 ; Segment permissions: Read/Execute
.text$x:00008990 _text$x         segment para public 'CODE' use32
.text$x:00008990                 assume cs:_text$x
.text$x:00008990                 ;org 8990h
.text$x:00008990 ; COMDAT (pick associative to section at 8918)
.text$x:00008990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008990
.text$x:00008990 ; =============== S U B R O U T I N E =======================================
.text$x:00008990
.text$x:00008990
.text$x:00008990 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 proc near
.text$x:00008990                                         ; DATA XREF: .xdata$x:000093C0o
.text$x:00008990                 mov     eax, [ebp-18h]
.text$x:00008993                 and     eax, 1
.text$x:00008996                 jz      $LN4
.text$x:0000899C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000089A0                 mov     ecx, [ebp+8]
.text$x:000089A3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000089A8 ; ---------------------------------------------------------------------------
.text$x:000089A8
.text$x:000089A8 $LN4:                                   ; CODE XREF: __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0+6j
.text$x:000089A8                 retn
.text$x:000089A8 __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0 endp
.text$x:000089A8
.text$x:000089A9
.text$x:000089A9 ; =============== S U B R O U T I N E =======================================
.text$x:000089A9
.text$x:000089A9
.text$x:000089A9 __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc near
.text$x:000089A9                                         ; DATA XREF: std::error_code::message(void)+5o
.text$x:000089A9
.text$x:000089A9 arg_4           = dword ptr  8
.text$x:000089A9
.text$x:000089A9                 mov     edx, [esp+arg_4]
.text$x:000089AD                 lea     eax, [edx+0Ch]
.text$x:000089B0                 mov     ecx, [edx-10h]
.text$x:000089B3                 xor     ecx, eax
.text$x:000089B5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000089BA                 mov     eax, offset __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.text$x:000089BF                 jmp     ___CxxFrameHandler3
.text$x:000089BF __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ endp
.text$x:000089BF
.text$x:000089BF _text$x         ends
.text$x:000089BF
.text$mn:000089C4 ; ===========================================================================
.text$mn:000089C4
.text$mn:000089C4 ; Segment type: Pure code
.text$mn:000089C4 ; Segment permissions: Read/Execute
.text$mn:000089C4 _text$mn        segment para public 'CODE' use32
.text$mn:000089C4                 assume cs:_text$mn
.text$mn:000089C4                 ;org 89C4h
.text$mn:000089C4 ; COMDAT (pick any)
.text$mn:000089C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089C4
.text$mn:000089C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000089C4
.text$mn:000089C4 ; Attributes: bp-based frame
.text$mn:000089C4
.text$mn:000089C4 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:000089C4                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000089C4 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:000089C4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Ap
.text$mn:000089C4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:000089C4
.text$mn:000089C4 var_4           = dword ptr -4
.text$mn:000089C4 Dst             = dword ptr  8
.text$mn:000089C4 Src             = dword ptr  0Ch
.text$mn:000089C4 Size            = dword ptr  10h
.text$mn:000089C4
.text$mn:000089C4                 push    ebp
.text$mn:000089C5                 mov     ebp, esp
.text$mn:000089C7                 push    ecx
.text$mn:000089C8                 cmp     [ebp+Size], 0
.text$mn:000089CC                 jnz     short loc_89D6
.text$mn:000089CE                 mov     eax, [ebp+Dst]
.text$mn:000089D1                 mov     [ebp+var_4], eax
.text$mn:000089D4                 jmp     short loc_89ED
.text$mn:000089D6 ; ---------------------------------------------------------------------------
.text$mn:000089D6
.text$mn:000089D6 loc_89D6:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:000089D6                 mov     ecx, [ebp+Size]
.text$mn:000089D9                 push    ecx             ; Size
.text$mn:000089DA                 mov     edx, [ebp+Src]
.text$mn:000089DD                 push    edx             ; Src
.text$mn:000089DE                 mov     eax, [ebp+Dst]
.text$mn:000089E1                 push    eax             ; Dst
.text$mn:000089E2                 call    _memmove
.text$mn:000089E7                 add     esp, 0Ch
.text$mn:000089EA                 mov     [ebp+var_4], eax
.text$mn:000089ED
.text$mn:000089ED loc_89ED:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:000089ED                 mov     eax, [ebp+var_4]
.text$mn:000089F0                 mov     esp, ebp
.text$mn:000089F2                 pop     ebp
.text$mn:000089F3                 retn
.text$mn:000089F3 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000089F3
.text$mn:000089F3 _text$mn        ends
.text$mn:000089F3
.text$mn:000089F4 ; ===========================================================================
.text$mn:000089F4
.text$mn:000089F4 ; Segment type: Pure code
.text$mn:000089F4 ; Segment permissions: Read/Execute
.text$mn:000089F4 _text$mn        segment para public 'CODE' use32
.text$mn:000089F4                 assume cs:_text$mn
.text$mn:000089F4                 ;org 89F4h
.text$mn:000089F4 ; COMDAT (pick any)
.text$mn:000089F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089F4
.text$mn:000089F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000089F4
.text$mn:000089F4 ; Attributes: bp-based frame
.text$mn:000089F4
.text$mn:000089F4 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:000089F4                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:000089F4 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:000089F4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:000089F4
.text$mn:000089F4 var_4           = dword ptr -4
.text$mn:000089F4 Dst             = dword ptr  8
.text$mn:000089F4 Src             = dword ptr  0Ch
.text$mn:000089F4 arg_8           = dword ptr  10h
.text$mn:000089F4
.text$mn:000089F4                 push    ebp
.text$mn:000089F5                 mov     ebp, esp
.text$mn:000089F7                 push    ecx
.text$mn:000089F8                 cmp     [ebp+arg_8], 0
.text$mn:000089FC                 jnz     short loc_8A06
.text$mn:000089FE                 mov     eax, [ebp+Dst]
.text$mn:00008A01                 mov     [ebp+var_4], eax
.text$mn:00008A04                 jmp     short loc_8A1D
.text$mn:00008A06 ; ---------------------------------------------------------------------------
.text$mn:00008A06
.text$mn:00008A06 loc_8A06:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00008A06                 mov     ecx, [ebp+arg_8]
.text$mn:00008A09                 push    ecx             ; int
.text$mn:00008A0A                 mov     edx, [ebp+Src]
.text$mn:00008A0D                 push    edx             ; Src
.text$mn:00008A0E                 mov     eax, [ebp+Dst]
.text$mn:00008A11                 push    eax             ; Dst
.text$mn:00008A12                 call    _wmemmove
.text$mn:00008A17                 add     esp, 0Ch
.text$mn:00008A1A                 mov     [ebp+var_4], eax
.text$mn:00008A1D
.text$mn:00008A1D loc_8A1D:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00008A1D                 mov     eax, [ebp+var_4]
.text$mn:00008A20                 mov     esp, ebp
.text$mn:00008A22                 pop     ebp
.text$mn:00008A23                 retn
.text$mn:00008A23 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00008A23
.text$mn:00008A23 _text$mn        ends
.text$mn:00008A23
.text$mn:00008A24 ; ===========================================================================
.text$mn:00008A24
.text$mn:00008A24 ; Segment type: Pure code
.text$mn:00008A24 ; Segment permissions: Read/Execute
.text$mn:00008A24 _text$mn        segment para public 'CODE' use32
.text$mn:00008A24                 assume cs:_text$mn
.text$mn:00008A24                 ;org 8A24h
.text$mn:00008A24 ; COMDAT (pick any)
.text$mn:00008A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A24
.text$mn:00008A24 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A24
.text$mn:00008A24 ; Attributes: bp-based frame
.text$mn:00008A24
.text$mn:00008A24 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00008A24                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00008A24 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00008A24                                         ; DATA XREF: .rdata:0000A1A8o
.text$mn:00008A24
.text$mn:00008A24 var_4           = dword ptr -4
.text$mn:00008A24
.text$mn:00008A24                 push    ebp
.text$mn:00008A25                 mov     ebp, esp
.text$mn:00008A27                 push    ecx
.text$mn:00008A28                 mov     [ebp+var_4], ecx
.text$mn:00008A2B                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00008A30                 mov     esp, ebp
.text$mn:00008A32                 pop     ebp
.text$mn:00008A33                 retn
.text$mn:00008A33 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00008A33
.text$mn:00008A33 _text$mn        ends
.text$mn:00008A33
.text$mn:00008A34 ; ===========================================================================
.text$mn:00008A34
.text$mn:00008A34 ; Segment type: Pure code
.text$mn:00008A34 ; Segment permissions: Read/Execute
.text$mn:00008A34 _text$mn        segment para public 'CODE' use32
.text$mn:00008A34                 assume cs:_text$mn
.text$mn:00008A34                 ;org 8A34h
.text$mn:00008A34 ; COMDAT (pick any)
.text$mn:00008A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A34
.text$mn:00008A34 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A34
.text$mn:00008A34 ; Attributes: bp-based frame
.text$mn:00008A34
.text$mn:00008A34 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00008A34                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00008A34 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00008A34                                         ; DATA XREF: .rdata:0000A1DCo
.text$mn:00008A34
.text$mn:00008A34 var_4           = dword ptr -4
.text$mn:00008A34
.text$mn:00008A34                 push    ebp
.text$mn:00008A35                 mov     ebp, esp
.text$mn:00008A37                 push    ecx
.text$mn:00008A38                 mov     [ebp+var_4], ecx
.text$mn:00008A3B                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00008A40                 mov     esp, ebp
.text$mn:00008A42                 pop     ebp
.text$mn:00008A43                 retn
.text$mn:00008A43 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00008A43
.text$mn:00008A43 _text$mn        ends
.text$mn:00008A43
.text$mn:00008A44 ; ===========================================================================
.text$mn:00008A44
.text$mn:00008A44 ; Segment type: Pure code
.text$mn:00008A44 ; Segment permissions: Read/Execute
.text$mn:00008A44 _text$mn        segment para public 'CODE' use32
.text$mn:00008A44                 assume cs:_text$mn
.text$mn:00008A44                 ;org 8A44h
.text$mn:00008A44 ; COMDAT (pick any)
.text$mn:00008A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A44
.text$mn:00008A44 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A44
.text$mn:00008A44 ; Attributes: bp-based frame
.text$mn:00008A44
.text$mn:00008A44 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00008A44                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00008A44 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00008A44                                         ; DATA XREF: .rdata:0000A21Co
.text$mn:00008A44
.text$mn:00008A44 var_4           = dword ptr -4
.text$mn:00008A44
.text$mn:00008A44                 push    ebp
.text$mn:00008A45                 mov     ebp, esp
.text$mn:00008A47                 push    ecx
.text$mn:00008A48                 mov     [ebp+var_4], ecx
.text$mn:00008A4B                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00008A50                 mov     esp, ebp
.text$mn:00008A52                 pop     ebp
.text$mn:00008A53                 retn
.text$mn:00008A53 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00008A53
.text$mn:00008A53 _text$mn        ends
.text$mn:00008A53
.text$mn:00008A54 ; ===========================================================================
.text$mn:00008A54
.text$mn:00008A54 ; Segment type: Pure code
.text$mn:00008A54 ; Segment permissions: Read/Execute
.text$mn:00008A54 _text$mn        segment para public 'CODE' use32
.text$mn:00008A54                 assume cs:_text$mn
.text$mn:00008A54                 ;org 8A54h
.text$mn:00008A54 ; COMDAT (pick any)
.text$mn:00008A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A54
.text$mn:00008A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A54
.text$mn:00008A54 ; Attributes: bp-based frame
.text$mn:00008A54
.text$mn:00008A54 ; public: unsigned short __thiscall std::basic_istream<wchar_t, struct std::char_traits<wchar_t>>::peek(void)
.text$mn:00008A54                 public ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008A54 ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$mn:00008A54                                         ; CODE XREF: TiXmlBase::StreamWhiteSpace(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+24p
.text$mn:00008A54                                         ; TiXmlBase::StreamTo(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+20p ...
.text$mn:00008A54
.text$mn:00008A54 var_28          = byte ptr -28h
.text$mn:00008A54 var_20          = dword ptr -20h
.text$mn:00008A54 var_1C          = dword ptr -1Ch
.text$mn:00008A54 var_18          = word ptr -18h
.text$mn:00008A54 var_16          = word ptr -16h
.text$mn:00008A54 var_14          = word ptr -14h
.text$mn:00008A54 var_10          = dword ptr -10h
.text$mn:00008A54 var_C           = dword ptr -0Ch
.text$mn:00008A54 var_4           = dword ptr -4
.text$mn:00008A54
.text$mn:00008A54 ; FUNCTION CHUNK AT .text$mn:00008B34 SIZE 00000009 BYTES
.text$mn:00008A54 ; FUNCTION CHUNK AT .text$mn:00008B44 SIZE 00000043 BYTES
.text$mn:00008A54
.text$mn:00008A54                 push    ebp
.text$mn:00008A55                 mov     ebp, esp
.text$mn:00008A57                 push    0FFFFFFFFh
.text$mn:00008A59                 push    offset __ehhandler$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008A5E                 mov     eax, large fs:0
.text$mn:00008A64                 push    eax
.text$mn:00008A65                 push    ecx
.text$mn:00008A66                 sub     esp, 18h
.text$mn:00008A69                 push    ebx
.text$mn:00008A6A                 push    esi
.text$mn:00008A6B                 push    edi
.text$mn:00008A6C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008A71                 xor     eax, ebp
.text$mn:00008A73                 push    eax
.text$mn:00008A74                 lea     eax, [ebp+var_C]
.text$mn:00008A77                 mov     large fs:0, eax
.text$mn:00008A7D                 mov     [ebp+var_10], esp
.text$mn:00008A80                 mov     [ebp+var_1C], ecx
.text$mn:00008A83                 mov     [ebp+var_20], 0
.text$mn:00008A8A                 mov     eax, [ebp+var_1C]
.text$mn:00008A8D                 mov     dword ptr [eax+8], 0
.text$mn:00008A94                 mov     dword ptr [eax+0Ch], 0
.text$mn:00008A9B                 xor     ecx, ecx
.text$mn:00008A9D                 mov     [ebp+var_14], cx
.text$mn:00008AA1                 push    1
.text$mn:00008AA3                 mov     edx, [ebp+var_1C]
.text$mn:00008AA6                 push    edx
.text$mn:00008AA7                 lea     ecx, [ebp+var_28]
.text$mn:00008AAA                 call    ??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &,bool)
.text$mn:00008AAF                 mov     [ebp+var_4], 0
.text$mn:00008AB6                 lea     ecx, [ebp+var_28]
.text$mn:00008AB9                 call    ??Bsentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QBE_NXZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::operator bool(void)
.text$mn:00008ABE                 movzx   eax, al
.text$mn:00008AC1                 test    eax, eax
.text$mn:00008AC3                 jnz     short loc_8AD0
.text$mn:00008AC5                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008ACA                 mov     [ebp+var_14], ax
.text$mn:00008ACE                 jmp     short loc_8B44
.text$mn:00008AD0 ; ---------------------------------------------------------------------------
.text$mn:00008AD0
.text$mn:00008AD0 loc_8AD0:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+6Fj
.text$mn:00008AD0                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008AD4                 mov     ecx, [ebp+var_1C]
.text$mn:00008AD7                 mov     edx, [ecx]
.text$mn:00008AD9                 mov     ecx, [ebp+var_1C]
.text$mn:00008ADC                 add     ecx, [edx+4]
.text$mn:00008ADF                 call    ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::rdbuf(void)
.text$mn:00008AE4                 mov     ecx, eax
.text$mn:00008AE6                 call    ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)
.text$mn:00008AEB                 mov     [ebp+var_14], ax
.text$mn:00008AEF                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008AF4                 mov     [ebp+var_16], ax
.text$mn:00008AF8                 lea     eax, [ebp+var_14]
.text$mn:00008AFB                 push    eax
.text$mn:00008AFC                 lea     ecx, [ebp+var_16]
.text$mn:00008AFF                 push    ecx
.text$mn:00008B00                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00008B05                 add     esp, 8
.text$mn:00008B08                 movzx   edx, al
.text$mn:00008B0B                 test    edx, edx
.text$mn:00008B0D                 jz      short loc_8B18
.text$mn:00008B0F                 mov     eax, [ebp+var_20]
.text$mn:00008B12                 or      eax, 1
.text$mn:00008B15                 mov     [ebp+var_20], eax
.text$mn:00008B18
.text$mn:00008B18 loc_8B18:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+B9j
.text$mn:00008B18                 jmp     short loc_8B34
.text$mn:00008B18 ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$mn:00008B18
.text$mn:00008B1A
.text$mn:00008B1A ; =============== S U B R O U T I N E =======================================
.text$mn:00008B1A
.text$mn:00008B1A
.text$mn:00008B1A __catch$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0 proc near
.text$mn:00008B1A                                         ; DATA XREF: .xdata$x:0000985Co
.text$mn:00008B1A                 push    1
.text$mn:00008B1C                 push    4
.text$mn:00008B1E                 mov     ecx, [ebp-1Ch]
.text$mn:00008B21                 mov     edx, [ecx]
.text$mn:00008B23                 mov     ecx, [ebp-1Ch]
.text$mn:00008B26                 add     ecx, [edx+4]
.text$mn:00008B29                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00008B2E                 mov     eax, offset $LN11
.text$mn:00008B33                 retn
.text$mn:00008B33 __catch$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0 endp
.text$mn:00008B33
.text$mn:00008B34 ; ---------------------------------------------------------------------------
.text$mn:00008B34 ; START OF FUNCTION CHUNK FOR ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008B34
.text$mn:00008B34 loc_8B34:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void):loc_8B18j
.text$mn:00008B34                 mov     [ebp+var_4], 0
.text$mn:00008B3B                 jmp     short loc_8B44
.text$mn:00008B3B ; END OF FUNCTION CHUNK FOR ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008B3D
.text$mn:00008B3D ; =============== S U B R O U T I N E =======================================
.text$mn:00008B3D
.text$mn:00008B3D
.text$mn:00008B3D $LN11           proc near               ; DATA XREF: __catch$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0+14o
.text$mn:00008B3D                 mov     dword ptr [ebp-4], 0
.text$mn:00008B3D $LN11           endp ; sp-analysis failed
.text$mn:00008B3D
.text$mn:00008B44 ; START OF FUNCTION CHUNK FOR ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008B44
.text$mn:00008B44 loc_8B44:                               ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+7Aj
.text$mn:00008B44                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+E7j
.text$mn:00008B44                 push    0
.text$mn:00008B46                 mov     eax, [ebp+var_20]
.text$mn:00008B49                 push    eax
.text$mn:00008B4A                 mov     ecx, [ebp+var_1C]
.text$mn:00008B4D                 mov     edx, [ecx]
.text$mn:00008B4F                 mov     ecx, [ebp+var_1C]
.text$mn:00008B52                 add     ecx, [edx+4]
.text$mn:00008B55                 call    ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)
.text$mn:00008B5A                 mov     ax, [ebp+var_14]
.text$mn:00008B5E                 mov     [ebp+var_18], ax
.text$mn:00008B62                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008B69                 lea     ecx, [ebp+var_28]
.text$mn:00008B6C                 call    ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$mn:00008B71                 mov     ax, [ebp+var_18]
.text$mn:00008B75                 mov     ecx, [ebp+var_C]
.text$mn:00008B78                 mov     large fs:0, ecx
.text$mn:00008B7F                 pop     ecx
.text$mn:00008B80                 pop     edi
.text$mn:00008B81                 pop     esi
.text$mn:00008B82                 pop     ebx
.text$mn:00008B83                 mov     esp, ebp
.text$mn:00008B85                 pop     ebp
.text$mn:00008B86                 retn
.text$mn:00008B86 ; END OF FUNCTION CHUNK FOR ?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008B86 ; ---------------------------------------------------------------------------
.text$mn:00008B87                 align 4
.text$mn:00008B87 _text$mn        ends
.text$mn:00008B87
.text$x:00008B88 ; ===========================================================================
.text$x:00008B88
.text$x:00008B88 ; Segment type: Pure code
.text$x:00008B88 ; Segment permissions: Read/Execute
.text$x:00008B88 _text$x         segment para public 'CODE' use32
.text$x:00008B88                 assume cs:_text$x
.text$x:00008B88                 ;org 8B88h
.text$x:00008B88 ; COMDAT (pick associative to section at 8A54)
.text$x:00008B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008B88
.text$x:00008B88 ; =============== S U B R O U T I N E =======================================
.text$x:00008B88
.text$x:00008B88
.text$x:00008B88 __unwindfunclet$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2 proc near
.text$x:00008B88                                         ; DATA XREF: .xdata$x:00009878o
.text$x:00008B88                 lea     ecx, [ebp-28h]
.text$x:00008B8B                 jmp     ??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)
.text$x:00008B8B __unwindfunclet$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2 endp
.text$x:00008B8B
.text$x:00008B90
.text$x:00008B90 ; =============== S U B R O U T I N E =======================================
.text$x:00008B90
.text$x:00008B90
.text$x:00008B90 __ehhandler$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$x:00008B90                                         ; DATA XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::peek(void)+5o
.text$x:00008B90
.text$x:00008B90 arg_4           = dword ptr  8
.text$x:00008B90
.text$x:00008B90                 mov     edx, [esp+arg_4]
.text$x:00008B94                 lea     eax, [edx+0Ch]
.text$x:00008B97                 mov     ecx, [edx-2Ch]
.text$x:00008B9A                 xor     ecx, eax
.text$x:00008B9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008BA1                 mov     eax, offset __ehfuncinfo$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$x:00008BA6                 jmp     ___CxxFrameHandler3
.text$x:00008BA6 __ehhandler$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$x:00008BA6
.text$x:00008BA6 ; ---------------------------------------------------------------------------
.text$x:00008BAB                 align 4
.text$x:00008BAB _text$x         ends
.text$x:00008BAB
.text$mn:00008BAC ; ===========================================================================
.text$mn:00008BAC
.text$mn:00008BAC ; Segment type: Pure code
.text$mn:00008BAC ; Segment permissions: Read/Execute
.text$mn:00008BAC _text$mn        segment para public 'CODE' use32
.text$mn:00008BAC                 assume cs:_text$mn
.text$mn:00008BAC                 ;org 8BACh
.text$mn:00008BAC ; COMDAT (pick any)
.text$mn:00008BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BAC
.text$mn:00008BAC ; =============== S U B R O U T I N E =======================================
.text$mn:00008BAC
.text$mn:00008BAC ; Attributes: bp-based frame
.text$mn:00008BAC
.text$mn:00008BAC ; public: int __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::pubsync(void)
.text$mn:00008BAC                 public ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ
.text$mn:00008BAC ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ proc near
.text$mn:00008BAC                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::_Osfx(void)+76p
.text$mn:00008BAC                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::flush(void)+72p
.text$mn:00008BAC
.text$mn:00008BAC var_4           = dword ptr -4
.text$mn:00008BAC
.text$mn:00008BAC                 push    ebp
.text$mn:00008BAD                 mov     ebp, esp
.text$mn:00008BAF                 push    ecx
.text$mn:00008BB0                 mov     [ebp+var_4], ecx
.text$mn:00008BB3                 mov     eax, [ebp+var_4]
.text$mn:00008BB6                 mov     edx, [eax]
.text$mn:00008BB8                 mov     ecx, [ebp+var_4]
.text$mn:00008BBB                 mov     eax, [edx+34h]
.text$mn:00008BBE                 call    eax
.text$mn:00008BC0                 mov     esp, ebp
.text$mn:00008BC2                 pop     ebp
.text$mn:00008BC3                 retn
.text$mn:00008BC3 ?pubsync@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEHXZ endp
.text$mn:00008BC3
.text$mn:00008BC3 _text$mn        ends
.text$mn:00008BC3
.text$mn:00008BC4 ; ===========================================================================
.text$mn:00008BC4
.text$mn:00008BC4 ; Segment type: Pure code
.text$mn:00008BC4 ; Segment permissions: Read/Execute
.text$mn:00008BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00008BC4                 assume cs:_text$mn
.text$mn:00008BC4                 ;org 8BC4h
.text$mn:00008BC4 ; COMDAT (pick any)
.text$mn:00008BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BC4
.text$mn:00008BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BC4
.text$mn:00008BC4 ; Attributes: bp-based frame
.text$mn:00008BC4
.text$mn:00008BC4 ; public: class std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>> * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::rdbuf(void)const
.text$mn:00008BC4                 public ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ
.text$mn:00008BC4 ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ proc near
.text$mn:00008BC4                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &)+24p
.text$mn:00008BC4                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Sentry_base::_Sentry_base(std::basic_istream<wchar_t,std::char_traits<wchar_t>> &)+40p ...
.text$mn:00008BC4
.text$mn:00008BC4 var_4           = dword ptr -4
.text$mn:00008BC4
.text$mn:00008BC4                 push    ebp
.text$mn:00008BC5                 mov     ebp, esp
.text$mn:00008BC7                 push    ecx
.text$mn:00008BC8                 mov     [ebp+var_4], ecx
.text$mn:00008BCB                 mov     eax, [ebp+var_4]
.text$mn:00008BCE                 mov     eax, [eax+38h]
.text$mn:00008BD1                 mov     esp, ebp
.text$mn:00008BD3                 pop     ebp
.text$mn:00008BD4                 retn
.text$mn:00008BD4 ?rdbuf@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_streambuf@_WU?$char_traits@_W@std@@@2@XZ endp
.text$mn:00008BD4
.text$mn:00008BD4 ; ---------------------------------------------------------------------------
.text$mn:00008BD5                 align 4
.text$mn:00008BD5 _text$mn        ends
.text$mn:00008BD5
.text$mn:00008BD8 ; ===========================================================================
.text$mn:00008BD8
.text$mn:00008BD8 ; Segment type: Pure code
.text$mn:00008BD8 ; Segment permissions: Read/Execute
.text$mn:00008BD8 _text$mn        segment para public 'CODE' use32
.text$mn:00008BD8                 assume cs:_text$mn
.text$mn:00008BD8                 ;org 8BD8h
.text$mn:00008BD8 ; COMDAT (pick any)
.text$mn:00008BD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BD8
.text$mn:00008BD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BD8
.text$mn:00008BD8 ; Attributes: bp-based frame
.text$mn:00008BD8
.text$mn:00008BD8 ; int __thiscall std::ios_base::rdstate(std::ios_base *__hidden this)
.text$mn:00008BD8                 public ?rdstate@ios_base@std@@QBEHXZ
.text$mn:00008BD8 ?rdstate@ios_base@std@@QBEHXZ proc near ; CODE XREF: std::ios_base::good(void)+Cp
.text$mn:00008BD8                                         ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+15p
.text$mn:00008BD8
.text$mn:00008BD8 var_4           = dword ptr -4
.text$mn:00008BD8
.text$mn:00008BD8                 push    ebp
.text$mn:00008BD9                 mov     ebp, esp
.text$mn:00008BDB                 push    ecx
.text$mn:00008BDC                 mov     [ebp+var_4], ecx
.text$mn:00008BDF                 mov     eax, [ebp+var_4]
.text$mn:00008BE2                 mov     eax, [eax+0Ch]
.text$mn:00008BE5                 mov     esp, ebp
.text$mn:00008BE7                 pop     ebp
.text$mn:00008BE8                 retn
.text$mn:00008BE8 ?rdstate@ios_base@std@@QBEHXZ endp
.text$mn:00008BE8
.text$mn:00008BE8 ; ---------------------------------------------------------------------------
.text$mn:00008BE9                 align 4
.text$mn:00008BE9 _text$mn        ends
.text$mn:00008BE9
.text$mn:00008BEC ; ===========================================================================
.text$mn:00008BEC
.text$mn:00008BEC ; Segment type: Pure code
.text$mn:00008BEC ; Segment permissions: Read/Execute
.text$mn:00008BEC _text$mn        segment para public 'CODE' use32
.text$mn:00008BEC                 assume cs:_text$mn
.text$mn:00008BEC                 ;org 8BECh
.text$mn:00008BEC ; COMDAT (pick any)
.text$mn:00008BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BEC
.text$mn:00008BEC ; =============== S U B R O U T I N E =======================================
.text$mn:00008BEC
.text$mn:00008BEC ; Attributes: bp-based frame
.text$mn:00008BEC
.text$mn:00008BEC ; public: unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::sbumpc(void)
.text$mn:00008BEC                 public ?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008BEC ?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$mn:00008BEC                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+DBp
.text$mn:00008BEC                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+3Fp
.text$mn:00008BEC
.text$mn:00008BEC var_10          = dword ptr -10h
.text$mn:00008BEC var_C           = dword ptr -0Ch
.text$mn:00008BEC var_8           = dword ptr -8
.text$mn:00008BEC var_2           = word ptr -2
.text$mn:00008BEC
.text$mn:00008BEC                 push    ebp
.text$mn:00008BED                 mov     ebp, esp
.text$mn:00008BEF                 sub     esp, 10h
.text$mn:00008BF2                 mov     [ebp+var_8], ecx
.text$mn:00008BF5                 mov     ecx, [ebp+var_8]
.text$mn:00008BF8                 call    ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)
.text$mn:00008BFD                 mov     [ebp+var_10], eax
.text$mn:00008C00                 mov     [ebp+var_C], edx
.text$mn:00008C03                 cmp     [ebp+var_C], 0
.text$mn:00008C07                 jl      short loc_8C28
.text$mn:00008C09                 jg      short loc_8C11
.text$mn:00008C0B                 cmp     [ebp+var_10], 0
.text$mn:00008C0F                 jbe     short loc_8C28
.text$mn:00008C11
.text$mn:00008C11 loc_8C11:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+1Dj
.text$mn:00008C11                 mov     ecx, [ebp+var_8]
.text$mn:00008C14                 call    ?_Gninc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gninc(void)
.text$mn:00008C19                 push    eax
.text$mn:00008C1A                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:00008C1F                 add     esp, 4
.text$mn:00008C22                 mov     [ebp+var_2], ax
.text$mn:00008C26                 jmp     short loc_8C39
.text$mn:00008C28 ; ---------------------------------------------------------------------------
.text$mn:00008C28
.text$mn:00008C28 loc_8C28:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+1Bj
.text$mn:00008C28                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+23j
.text$mn:00008C28                 mov     eax, [ebp+var_8]
.text$mn:00008C2B                 mov     edx, [eax]
.text$mn:00008C2D                 mov     ecx, [ebp+var_8]
.text$mn:00008C30                 mov     eax, [edx+1Ch]
.text$mn:00008C33                 call    eax
.text$mn:00008C35                 mov     [ebp+var_2], ax
.text$mn:00008C39
.text$mn:00008C39 loc_8C39:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+3Aj
.text$mn:00008C39                 mov     ax, [ebp+var_2]
.text$mn:00008C3D                 mov     esp, ebp
.text$mn:00008C3F                 pop     ebp
.text$mn:00008C40                 retn
.text$mn:00008C40 ?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$mn:00008C40
.text$mn:00008C40 ; ---------------------------------------------------------------------------
.text$mn:00008C41                 align 4
.text$mn:00008C41 _text$mn        ends
.text$mn:00008C41
.text$mn:00008C44 ; ===========================================================================
.text$mn:00008C44
.text$mn:00008C44 ; Segment type: Pure code
.text$mn:00008C44 ; Segment permissions: Read/Execute
.text$mn:00008C44 _text$mn        segment para public 'CODE' use32
.text$mn:00008C44                 assume cs:_text$mn
.text$mn:00008C44                 ;org 8C44h
.text$mn:00008C44 ; COMDAT (pick any)
.text$mn:00008C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C44
.text$mn:00008C44 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C44
.text$mn:00008C44 ; Attributes: bp-based frame
.text$mn:00008C44
.text$mn:00008C44 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_Wrap_alloc<class std::allocator<char>>::select_on_container_copy_construction(void)const
.text$mn:00008C44                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
.text$mn:00008C44 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ proc near
.text$mn:00008C44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
.text$mn:00008C44
.text$mn:00008C44 var_8           = dword ptr -8
.text$mn:00008C44 var_1           = byte ptr -1
.text$mn:00008C44 arg_0           = dword ptr  8
.text$mn:00008C44
.text$mn:00008C44                 push    ebp
.text$mn:00008C45                 mov     ebp, esp
.text$mn:00008C47                 sub     esp, 8
.text$mn:00008C4A                 mov     [ebp+var_8], ecx
.text$mn:00008C4D                 mov     eax, [ebp+var_8]
.text$mn:00008C50                 push    eax
.text$mn:00008C51                 lea     ecx, [ebp+var_1]
.text$mn:00008C54                 push    ecx
.text$mn:00008C55                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)
.text$mn:00008C5A                 add     esp, 8
.text$mn:00008C5D                 push    eax
.text$mn:00008C5E                 mov     ecx, [ebp+arg_0]
.text$mn:00008C61                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(std::allocator<char> const &)
.text$mn:00008C66                 mov     eax, [ebp+arg_0]
.text$mn:00008C69                 mov     esp, ebp
.text$mn:00008C6B                 pop     ebp
.text$mn:00008C6C                 retn    4
.text$mn:00008C6C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ endp
.text$mn:00008C6C
.text$mn:00008C6C ; ---------------------------------------------------------------------------
.text$mn:00008C6F                 align 10h
.text$mn:00008C6F _text$mn        ends
.text$mn:00008C6F
.text$mn:00008C70 ; ===========================================================================
.text$mn:00008C70
.text$mn:00008C70 ; Segment type: Pure code
.text$mn:00008C70 ; Segment permissions: Read/Execute
.text$mn:00008C70 _text$mn        segment para public 'CODE' use32
.text$mn:00008C70                 assume cs:_text$mn
.text$mn:00008C70                 ;org 8C70h
.text$mn:00008C70 ; COMDAT (pick any)
.text$mn:00008C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C70
.text$mn:00008C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C70
.text$mn:00008C70 ; Attributes: bp-based frame
.text$mn:00008C70
.text$mn:00008C70 ; public: class std::allocator<char> __thiscall std::allocator<char>::select_on_container_copy_construction(void)const
.text$mn:00008C70                 public ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
.text$mn:00008C70 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ proc near
.text$mn:00008C70                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::select_on_container_copy_construction(std::allocator<char> const &)+Ap
.text$mn:00008C70
.text$mn:00008C70 var_4           = dword ptr -4
.text$mn:00008C70 arg_0           = dword ptr  8
.text$mn:00008C70
.text$mn:00008C70                 push    ebp
.text$mn:00008C71                 mov     ebp, esp
.text$mn:00008C73                 push    ecx
.text$mn:00008C74                 mov     [ebp+var_4], ecx
.text$mn:00008C77                 mov     eax, [ebp+var_4]
.text$mn:00008C7A                 push    eax
.text$mn:00008C7B                 mov     ecx, [ebp+arg_0]
.text$mn:00008C7E                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:00008C83                 mov     eax, [ebp+arg_0]
.text$mn:00008C86                 mov     esp, ebp
.text$mn:00008C88                 pop     ebp
.text$mn:00008C89                 retn    4
.text$mn:00008C89 ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ endp
.text$mn:00008C89
.text$mn:00008C89 _text$mn        ends
.text$mn:00008C89
.text$mn:00008C8C ; ===========================================================================
.text$mn:00008C8C
.text$mn:00008C8C ; Segment type: Pure code
.text$mn:00008C8C ; Segment permissions: Read/Execute
.text$mn:00008C8C _text$mn        segment para public 'CODE' use32
.text$mn:00008C8C                 assume cs:_text$mn
.text$mn:00008C8C                 ;org 8C8Ch
.text$mn:00008C8C ; COMDAT (pick any)
.text$mn:00008C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C8C
.text$mn:00008C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C8C
.text$mn:00008C8C ; Attributes: bp-based frame
.text$mn:00008C8C
.text$mn:00008C8C ; public: static class std::allocator<char> __cdecl std::allocator_traits<class std::allocator<char>>::select_on_container_copy_construction(class std::allocator<char> const &)
.text$mn:00008C8C                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
.text$mn:00008C8C ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z proc near
.text$mn:00008C8C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::select_on_container_copy_construction(void)+11p
.text$mn:00008C8C
.text$mn:00008C8C arg_0           = dword ptr  8
.text$mn:00008C8C arg_4           = dword ptr  0Ch
.text$mn:00008C8C
.text$mn:00008C8C                 push    ebp
.text$mn:00008C8D                 mov     ebp, esp
.text$mn:00008C8F                 mov     eax, [ebp+arg_0]
.text$mn:00008C92                 push    eax
.text$mn:00008C93                 mov     ecx, [ebp+arg_4]
.text$mn:00008C96                 call    ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction(void)
.text$mn:00008C9B                 mov     eax, [ebp+arg_0]
.text$mn:00008C9E                 pop     ebp
.text$mn:00008C9F                 retn
.text$mn:00008C9F ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z endp
.text$mn:00008C9F
.text$mn:00008C9F _text$mn        ends
.text$mn:00008C9F
.text$mn:00008CA0 ; ===========================================================================
.text$mn:00008CA0
.text$mn:00008CA0 ; Segment type: Pure code
.text$mn:00008CA0 ; Segment permissions: Read/Execute
.text$mn:00008CA0 _text$mn        segment para public 'CODE' use32
.text$mn:00008CA0                 assume cs:_text$mn
.text$mn:00008CA0                 ;org 8CA0h
.text$mn:00008CA0 ; COMDAT (pick any)
.text$mn:00008CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CA0
.text$mn:00008CA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CA0
.text$mn:00008CA0 ; Attributes: bp-based frame
.text$mn:00008CA0
.text$mn:00008CA0 ; public: void __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::setstate(int, bool)
.text$mn:00008CA0                 public ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
.text$mn:00008CA0 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z proc near
.text$mn:00008CA0                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+150p
.text$mn:00008CA0                                         ; __catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0+11p ...
.text$mn:00008CA0
.text$mn:00008CA0 var_4           = dword ptr -4
.text$mn:00008CA0 arg_0           = dword ptr  8
.text$mn:00008CA0 arg_4           = byte ptr  0Ch
.text$mn:00008CA0
.text$mn:00008CA0                 push    ebp
.text$mn:00008CA1                 mov     ebp, esp
.text$mn:00008CA3                 push    ecx
.text$mn:00008CA4                 mov     [ebp+var_4], ecx
.text$mn:00008CA7                 cmp     [ebp+arg_0], 0
.text$mn:00008CAB                 jz      short loc_8CC6
.text$mn:00008CAD                 movzx   eax, [ebp+arg_4]
.text$mn:00008CB1                 push    eax
.text$mn:00008CB2                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008CB5                 call    ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate(void)
.text$mn:00008CBA                 or      eax, [ebp+arg_0]
.text$mn:00008CBD                 push    eax
.text$mn:00008CBE                 mov     ecx, [ebp+var_4]
.text$mn:00008CC1                 call    ?clear@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t>>::clear(int,bool)
.text$mn:00008CC6
.text$mn:00008CC6 loc_8CC6:                               ; CODE XREF: std::basic_ios<wchar_t,std::char_traits<wchar_t>>::setstate(int,bool)+Bj
.text$mn:00008CC6                 mov     esp, ebp
.text$mn:00008CC8                 pop     ebp
.text$mn:00008CC9                 retn    8
.text$mn:00008CC9 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z endp
.text$mn:00008CC9
.text$mn:00008CC9 _text$mn        ends
.text$mn:00008CC9
.text$mn:00008CCC ; ===========================================================================
.text$mn:00008CCC
.text$mn:00008CCC ; Segment type: Pure code
.text$mn:00008CCC ; Segment permissions: Read/Execute
.text$mn:00008CCC _text$mn        segment para public 'CODE' use32
.text$mn:00008CCC                 assume cs:_text$mn
.text$mn:00008CCC                 ;org 8CCCh
.text$mn:00008CCC ; COMDAT (pick any)
.text$mn:00008CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CCC
.text$mn:00008CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00008CCC
.text$mn:00008CCC ; Attributes: bp-based frame
.text$mn:00008CCC
.text$mn:00008CCC ; public: unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::sgetc(void)
.text$mn:00008CCC                 public ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008CCC ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$mn:00008CCC                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+F9p
.text$mn:00008CCC                                         ; std::basic_istream<wchar_t,std::char_traits<wchar_t>>::get(void)+95p ...
.text$mn:00008CCC
.text$mn:00008CCC var_10          = dword ptr -10h
.text$mn:00008CCC var_C           = dword ptr -0Ch
.text$mn:00008CCC var_8           = dword ptr -8
.text$mn:00008CCC var_2           = word ptr -2
.text$mn:00008CCC
.text$mn:00008CCC                 push    ebp
.text$mn:00008CCD                 mov     ebp, esp
.text$mn:00008CCF                 sub     esp, 10h
.text$mn:00008CD2                 mov     [ebp+var_8], ecx
.text$mn:00008CD5                 mov     ecx, [ebp+var_8]
.text$mn:00008CD8                 call    ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)
.text$mn:00008CDD                 mov     [ebp+var_10], eax
.text$mn:00008CE0                 mov     [ebp+var_C], edx
.text$mn:00008CE3                 cmp     [ebp+var_C], 0
.text$mn:00008CE7                 jl      short loc_8D08
.text$mn:00008CE9                 jg      short loc_8CF1
.text$mn:00008CEB                 cmp     [ebp+var_10], 0
.text$mn:00008CEF                 jbe     short loc_8D08
.text$mn:00008CF1
.text$mn:00008CF1 loc_8CF1:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+1Dj
.text$mn:00008CF1                 mov     ecx, [ebp+var_8]
.text$mn:00008CF4                 call    ?gptr@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::gptr(void)
.text$mn:00008CF9                 push    eax
.text$mn:00008CFA                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:00008CFF                 add     esp, 4
.text$mn:00008D02                 mov     [ebp+var_2], ax
.text$mn:00008D06                 jmp     short loc_8D19
.text$mn:00008D08 ; ---------------------------------------------------------------------------
.text$mn:00008D08
.text$mn:00008D08 loc_8D08:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+1Bj
.text$mn:00008D08                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+23j
.text$mn:00008D08                 mov     eax, [ebp+var_8]
.text$mn:00008D0B                 mov     edx, [eax]
.text$mn:00008D0D                 mov     ecx, [ebp+var_8]
.text$mn:00008D10                 mov     eax, [edx+18h]
.text$mn:00008D13                 call    eax
.text$mn:00008D15                 mov     [ebp+var_2], ax
.text$mn:00008D19
.text$mn:00008D19 loc_8D19:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+3Aj
.text$mn:00008D19                 mov     ax, [ebp+var_2]
.text$mn:00008D1D                 mov     esp, ebp
.text$mn:00008D1F                 pop     ebp
.text$mn:00008D20                 retn
.text$mn:00008D20 ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$mn:00008D20
.text$mn:00008D20 ; ---------------------------------------------------------------------------
.text$mn:00008D21                 align 4
.text$mn:00008D21 _text$mn        ends
.text$mn:00008D21
.text$mn:00008D24 ; ===========================================================================
.text$mn:00008D24
.text$mn:00008D24 ; Segment type: Pure code
.text$mn:00008D24 ; Segment permissions: Read/Execute
.text$mn:00008D24 _text$mn        segment para public 'CODE' use32
.text$mn:00008D24                 assume cs:_text$mn
.text$mn:00008D24                 ;org 8D24h
.text$mn:00008D24 ; COMDAT (pick any)
.text$mn:00008D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D24
.text$mn:00008D24 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D24
.text$mn:00008D24 ; Attributes: bp-based frame
.text$mn:00008D24
.text$mn:00008D24 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:00008D24                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00008D24 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00008D24                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:00008D24                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p ...
.text$mn:00008D24
.text$mn:00008D24 var_4           = dword ptr -4
.text$mn:00008D24
.text$mn:00008D24                 push    ebp
.text$mn:00008D25                 mov     ebp, esp
.text$mn:00008D27                 push    ecx
.text$mn:00008D28                 mov     [ebp+var_4], ecx
.text$mn:00008D2B                 mov     eax, [ebp+var_4]
.text$mn:00008D2E                 mov     eax, [eax+14h]
.text$mn:00008D31                 mov     esp, ebp
.text$mn:00008D33                 pop     ebp
.text$mn:00008D34                 retn
.text$mn:00008D34 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00008D34
.text$mn:00008D34 ; ---------------------------------------------------------------------------
.text$mn:00008D35                 align 4
.text$mn:00008D35 _text$mn        ends
.text$mn:00008D35
.text$mn:00008D38 ; ===========================================================================
.text$mn:00008D38
.text$mn:00008D38 ; Segment type: Pure code
.text$mn:00008D38 ; Segment permissions: Read/Execute
.text$mn:00008D38 _text$mn        segment para public 'CODE' use32
.text$mn:00008D38                 assume cs:_text$mn
.text$mn:00008D38                 ;org 8D38h
.text$mn:00008D38 ; COMDAT (pick any)
.text$mn:00008D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D38
.text$mn:00008D38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D38
.text$mn:00008D38 ; Attributes: bp-based frame
.text$mn:00008D38
.text$mn:00008D38 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:00008D38                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00008D38 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00008D38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:00008D38                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:00008D38
.text$mn:00008D38 var_4           = dword ptr -4
.text$mn:00008D38
.text$mn:00008D38                 push    ebp
.text$mn:00008D39                 mov     ebp, esp
.text$mn:00008D3B                 push    ecx
.text$mn:00008D3C                 mov     [ebp+var_4], ecx
.text$mn:00008D3F                 mov     eax, [ebp+var_4]
.text$mn:00008D42                 mov     eax, [eax+14h]
.text$mn:00008D45                 mov     esp, ebp
.text$mn:00008D47                 pop     ebp
.text$mn:00008D48                 retn
.text$mn:00008D48 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00008D48
.text$mn:00008D48 ; ---------------------------------------------------------------------------
.text$mn:00008D49                 align 4
.text$mn:00008D49 _text$mn        ends
.text$mn:00008D49
.text$mn:00008D4C ; ===========================================================================
.text$mn:00008D4C
.text$mn:00008D4C ; Segment type: Pure code
.text$mn:00008D4C ; Segment permissions: Read/Execute
.text$mn:00008D4C _text$mn        segment para public 'CODE' use32
.text$mn:00008D4C                 assume cs:_text$mn
.text$mn:00008D4C                 ;org 8D4Ch
.text$mn:00008D4C ; COMDAT (pick any)
.text$mn:00008D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D4C
.text$mn:00008D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00008D4C
.text$mn:00008D4C ; Attributes: bp-based frame
.text$mn:00008D4C
.text$mn:00008D4C ; public: unsigned short __thiscall std::basic_streambuf<wchar_t, struct std::char_traits<wchar_t>>::snextc(void)
.text$mn:00008D4C                 public ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.text$mn:00008D4C ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ proc near
.text$mn:00008D4C                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+116p
.text$mn:00008D4C
.text$mn:00008D4C var_14          = dword ptr -14h
.text$mn:00008D4C var_10          = dword ptr -10h
.text$mn:00008D4C var_C           = dword ptr -0Ch
.text$mn:00008D4C var_8           = word ptr -8
.text$mn:00008D4C var_6           = word ptr -6
.text$mn:00008D4C var_4           = word ptr -4
.text$mn:00008D4C var_2           = word ptr -2
.text$mn:00008D4C
.text$mn:00008D4C                 push    ebp
.text$mn:00008D4D                 mov     ebp, esp
.text$mn:00008D4F                 sub     esp, 14h
.text$mn:00008D52                 mov     [ebp+var_C], ecx
.text$mn:00008D55                 mov     ecx, [ebp+var_C]
.text$mn:00008D58                 call    ?_Gnavail@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IBE_JXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnavail(void)
.text$mn:00008D5D                 mov     [ebp+var_14], eax
.text$mn:00008D60                 mov     [ebp+var_10], edx
.text$mn:00008D63                 cmp     [ebp+var_10], 0
.text$mn:00008D67                 jl      short loc_8D88
.text$mn:00008D69                 jg      short loc_8D71
.text$mn:00008D6B                 cmp     [ebp+var_14], 1
.text$mn:00008D6F                 jbe     short loc_8D88
.text$mn:00008D71
.text$mn:00008D71 loc_8D71:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+1Dj
.text$mn:00008D71                 mov     ecx, [ebp+var_C]
.text$mn:00008D74                 call    ?_Gnpreinc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@IAEPA_WXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::_Gnpreinc(void)
.text$mn:00008D79                 push    eax
.text$mn:00008D7A                 call    ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z ; std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:00008D7F                 add     esp, 4
.text$mn:00008D82                 mov     [ebp+var_4], ax
.text$mn:00008D86                 jmp     short loc_8DD3
.text$mn:00008D88 ; ---------------------------------------------------------------------------
.text$mn:00008D88
.text$mn:00008D88 loc_8D88:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+1Bj
.text$mn:00008D88                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+23j
.text$mn:00008D88                 mov     ecx, [ebp+var_C]
.text$mn:00008D8B                 call    ?sbumpc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)
.text$mn:00008D90                 mov     [ebp+var_6], ax
.text$mn:00008D94                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008D99                 mov     [ebp+var_8], ax
.text$mn:00008D9D                 lea     eax, [ebp+var_6]
.text$mn:00008DA0                 push    eax
.text$mn:00008DA1                 lea     ecx, [ebp+var_8]
.text$mn:00008DA4                 push    ecx
.text$mn:00008DA5                 call    ?eq_int_type@?$char_traits@_W@std@@SA_NABG0@Z ; std::char_traits<wchar_t>::eq_int_type(ushort const &,ushort const &)
.text$mn:00008DAA                 add     esp, 8
.text$mn:00008DAD                 movzx   edx, al
.text$mn:00008DB0                 test    edx, edx
.text$mn:00008DB2                 jz      short loc_8DBF
.text$mn:00008DB4                 call    ?eof@?$char_traits@_W@std@@SAGXZ ; std::char_traits<wchar_t>::eof(void)
.text$mn:00008DB9                 mov     [ebp+var_2], ax
.text$mn:00008DBD                 jmp     short loc_8DCB
.text$mn:00008DBF ; ---------------------------------------------------------------------------
.text$mn:00008DBF
.text$mn:00008DBF loc_8DBF:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+66j
.text$mn:00008DBF                 mov     ecx, [ebp+var_C]
.text$mn:00008DC2                 call    ?sgetc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)
.text$mn:00008DC7                 mov     [ebp+var_2], ax
.text$mn:00008DCB
.text$mn:00008DCB loc_8DCB:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+71j
.text$mn:00008DCB                 mov     ax, [ebp+var_2]
.text$mn:00008DCF                 mov     [ebp+var_4], ax
.text$mn:00008DD3
.text$mn:00008DD3 loc_8DD3:                               ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::snextc(void)+3Aj
.text$mn:00008DD3                 mov     ax, [ebp+var_4]
.text$mn:00008DD7                 mov     esp, ebp
.text$mn:00008DD9                 pop     ebp
.text$mn:00008DDA                 retn
.text$mn:00008DDA ?snextc@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@QAEGXZ endp
.text$mn:00008DDA
.text$mn:00008DDA ; ---------------------------------------------------------------------------
.text$mn:00008DDB                 align 4
.text$mn:00008DDB _text$mn        ends
.text$mn:00008DDB
.text$mn:00008DDC ; ===========================================================================
.text$mn:00008DDC
.text$mn:00008DDC ; Segment type: Pure code
.text$mn:00008DDC ; Segment permissions: Read/Execute
.text$mn:00008DDC _text$mn        segment para public 'CODE' use32
.text$mn:00008DDC                 assume cs:_text$mn
.text$mn:00008DDC                 ;org 8DDCh
.text$mn:00008DDC ; COMDAT (pick any)
.text$mn:00008DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DDC
.text$mn:00008DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00008DDC
.text$mn:00008DDC ; Attributes: bp-based frame
.text$mn:00008DDC
.text$mn:00008DDC ; const struct std::error_category *__cdecl std::system_category()
.text$mn:00008DDC                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:00008DDC ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00008DDC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_7BCCp
.text$mn:00008DDC                 push    ebp
.text$mn:00008DDD                 mov     ebp, esp
.text$mn:00008DDF                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00008DE4                 pop     ebp
.text$mn:00008DE5                 retn
.text$mn:00008DE5 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00008DE5
.text$mn:00008DE5 ; ---------------------------------------------------------------------------
.text$mn:00008DE6                 align 4
.text$mn:00008DE6 _text$mn        ends
.text$mn:00008DE6
.text$mn:00008DE8 ; ===========================================================================
.text$mn:00008DE8
.text$mn:00008DE8 ; Segment type: Pure code
.text$mn:00008DE8 ; Segment permissions: Read/Execute
.text$mn:00008DE8 _text$mn        segment para public 'CODE' use32
.text$mn:00008DE8                 assume cs:_text$mn
.text$mn:00008DE8                 ;org 8DE8h
.text$mn:00008DE8 ; COMDAT (pick any)
.text$mn:00008DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DE8
.text$mn:00008DE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DE8
.text$mn:00008DE8 ; Attributes: bp-based frame
.text$mn:00008DE8
.text$mn:00008DE8 ; public: class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> * __thiscall std::basic_ios<wchar_t, struct std::char_traits<wchar_t>>::tie(void)const
.text$mn:00008DE8                 public ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ
.text$mn:00008DE8 ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ proc near
.text$mn:00008DE8                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+5Bp
.text$mn:00008DE8                                         ; std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::sentry(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> &)+71p ...
.text$mn:00008DE8
.text$mn:00008DE8 var_4           = dword ptr -4
.text$mn:00008DE8
.text$mn:00008DE8                 push    ebp
.text$mn:00008DE9                 mov     ebp, esp
.text$mn:00008DEB                 push    ecx
.text$mn:00008DEC                 mov     [ebp+var_4], ecx
.text$mn:00008DEF                 mov     eax, [ebp+var_4]
.text$mn:00008DF2                 mov     eax, [eax+3Ch]
.text$mn:00008DF5                 mov     esp, ebp
.text$mn:00008DF7                 pop     ebp
.text$mn:00008DF8                 retn
.text$mn:00008DF8 ?tie@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QBEPAV?$basic_ostream@_WU?$char_traits@_W@std@@@2@XZ endp
.text$mn:00008DF8
.text$mn:00008DF8 ; ---------------------------------------------------------------------------
.text$mn:00008DF9                 align 4
.text$mn:00008DF9 _text$mn        ends
.text$mn:00008DF9
.text$mn:00008DFC ; ===========================================================================
.text$mn:00008DFC
.text$mn:00008DFC ; Segment type: Pure code
.text$mn:00008DFC ; Segment permissions: Read/Execute
.text$mn:00008DFC _text$mn        segment para public 'CODE' use32
.text$mn:00008DFC                 assume cs:_text$mn
.text$mn:00008DFC                 ;org 8DFCh
.text$mn:00008DFC ; COMDAT (pick any)
.text$mn:00008DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DFC
.text$mn:00008DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00008DFC
.text$mn:00008DFC ; Attributes: bp-based frame
.text$mn:00008DFC
.text$mn:00008DFC ; public: static wchar_t __cdecl std::char_traits<wchar_t>::to_char_type(unsigned short const &)
.text$mn:00008DFC                 public ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z
.text$mn:00008DFC ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z proc near
.text$mn:00008DFC                                         ; CODE XREF: std::basic_istream<wchar_t,std::char_traits<wchar_t>>::_Ipfx(bool)+15Dp
.text$mn:00008DFC
.text$mn:00008DFC arg_0           = dword ptr  8
.text$mn:00008DFC
.text$mn:00008DFC                 push    ebp
.text$mn:00008DFD                 mov     ebp, esp
.text$mn:00008DFF                 mov     eax, [ebp+arg_0]
.text$mn:00008E02                 mov     ax, [eax]
.text$mn:00008E05                 pop     ebp
.text$mn:00008E06                 retn
.text$mn:00008E06 ?to_char_type@?$char_traits@_W@std@@SA_WABG@Z endp
.text$mn:00008E06
.text$mn:00008E06 ; ---------------------------------------------------------------------------
.text$mn:00008E07                 align 4
.text$mn:00008E07 _text$mn        ends
.text$mn:00008E07
.text$mn:00008E08 ; ===========================================================================
.text$mn:00008E08
.text$mn:00008E08 ; Segment type: Pure code
.text$mn:00008E08 ; Segment permissions: Read/Execute
.text$mn:00008E08 _text$mn        segment para public 'CODE' use32
.text$mn:00008E08                 assume cs:_text$mn
.text$mn:00008E08                 ;org 8E08h
.text$mn:00008E08 ; COMDAT (pick any)
.text$mn:00008E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E08
.text$mn:00008E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E08
.text$mn:00008E08 ; Attributes: bp-based frame
.text$mn:00008E08
.text$mn:00008E08 ; public: static unsigned short __cdecl std::char_traits<wchar_t>::to_int_type(wchar_t const &)
.text$mn:00008E08                 public ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z
.text$mn:00008E08 ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z proc near
.text$mn:00008E08                                         ; CODE XREF: std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sbumpc(void)+2Ep
.text$mn:00008E08                                         ; std::basic_streambuf<wchar_t,std::char_traits<wchar_t>>::sgetc(void)+2Ep ...
.text$mn:00008E08
.text$mn:00008E08 arg_0           = dword ptr  8
.text$mn:00008E08
.text$mn:00008E08                 push    ebp
.text$mn:00008E09                 mov     ebp, esp
.text$mn:00008E0B                 mov     eax, [ebp+arg_0]
.text$mn:00008E0E                 mov     ax, [eax]
.text$mn:00008E11                 pop     ebp
.text$mn:00008E12                 retn
.text$mn:00008E12 ?to_int_type@?$char_traits@_W@std@@SAGAB_W@Z endp
.text$mn:00008E12
.text$mn:00008E12 ; ---------------------------------------------------------------------------
.text$mn:00008E13                 align 4
.text$mn:00008E13 _text$mn        ends
.text$mn:00008E13
.text$mn:00008E14 ; ===========================================================================
.text$mn:00008E14
.text$mn:00008E14 ; Segment type: Pure code
.text$mn:00008E14 ; Segment permissions: Read/Execute
.text$mn:00008E14 _text$mn        segment para public 'CODE' use32
.text$mn:00008E14                 assume cs:_text$mn
.text$mn:00008E14                 ;org 8E14h
.text$mn:00008E14 ; COMDAT (pick any)
.text$mn:00008E14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E14
.text$mn:00008E14 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E14
.text$mn:00008E14 ; Attributes: bp-based frame
.text$mn:00008E14
.text$mn:00008E14 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00008E14                 public ?value@error_code@std@@QBEHXZ
.text$mn:00008E14 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00008E14                                         ; std::error_code::message(void)+3Dp
.text$mn:00008E14
.text$mn:00008E14 var_4           = dword ptr -4
.text$mn:00008E14
.text$mn:00008E14                 push    ebp
.text$mn:00008E15                 mov     ebp, esp
.text$mn:00008E17                 push    ecx
.text$mn:00008E18                 mov     [ebp+var_4], ecx
.text$mn:00008E1B                 mov     eax, [ebp+var_4]
.text$mn:00008E1E                 mov     eax, [eax]
.text$mn:00008E20                 mov     esp, ebp
.text$mn:00008E22                 pop     ebp
.text$mn:00008E23                 retn
.text$mn:00008E23 ?value@error_code@std@@QBEHXZ endp
.text$mn:00008E23
.text$mn:00008E23 _text$mn        ends
.text$mn:00008E23
.text$mn:00008E24 ; ===========================================================================
.text$mn:00008E24
.text$mn:00008E24 ; Segment type: Pure code
.text$mn:00008E24 ; Segment permissions: Read/Execute
.text$mn:00008E24 _text$mn        segment para public 'CODE' use32
.text$mn:00008E24                 assume cs:_text$mn
.text$mn:00008E24                 ;org 8E24h
.text$mn:00008E24 ; COMDAT (pick any)
.text$mn:00008E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E24
.text$mn:00008E24 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E24
.text$mn:00008E24 ; Attributes: bp-based frame
.text$mn:00008E24
.text$mn:00008E24 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00008E24                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00008E24 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00008E24                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00008E24                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00008E24
.text$mn:00008E24 var_4           = dword ptr -4
.text$mn:00008E24
.text$mn:00008E24                 push    ebp
.text$mn:00008E25                 mov     ebp, esp
.text$mn:00008E27                 push    ecx
.text$mn:00008E28                 mov     [ebp+var_4], ecx
.text$mn:00008E2B                 mov     eax, [ebp+var_4]
.text$mn:00008E2E                 mov     eax, [eax]
.text$mn:00008E30                 mov     esp, ebp
.text$mn:00008E32                 pop     ebp
.text$mn:00008E33                 retn
.text$mn:00008E33 ?value@error_condition@std@@QBEHXZ endp
.text$mn:00008E33
.text$mn:00008E33 _text$mn        ends
.text$mn:00008E33
.text$mn:00008E34 ; ===========================================================================
.text$mn:00008E34
.text$mn:00008E34 ; Segment type: Pure code
.text$mn:00008E34 ; Segment permissions: Read/Execute
.text$mn:00008E34 _text$mn        segment para public 'CODE' use32
.text$mn:00008E34                 assume cs:_text$mn
.text$mn:00008E34                 ;org 8E34h
.text$mn:00008E34 ; COMDAT (pick any)
.text$mn:00008E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E34
.text$mn:00008E34 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E34
.text$mn:00008E34 ; Attributes: bp-based frame
.text$mn:00008E34
.text$mn:00008E34                 public _hypot
.text$mn:00008E34 _hypot          proc near
.text$mn:00008E34
.text$mn:00008E34 var_10          = qword ptr -10h
.text$mn:00008E34 var_8           = qword ptr -8
.text$mn:00008E34 arg_0           = qword ptr  8
.text$mn:00008E34 arg_8           = qword ptr  10h
.text$mn:00008E34
.text$mn:00008E34                 push    ebp
.text$mn:00008E35                 mov     ebp, esp
.text$mn:00008E37                 sub     esp, 8
.text$mn:00008E3A                 movsd   xmm0, [ebp+arg_8]
.text$mn:00008E3F                 movsd   [esp+8+var_8], xmm0
.text$mn:00008E44                 sub     esp, 8
.text$mn:00008E47                 movsd   xmm0, [ebp+arg_0]
.text$mn:00008E4C                 movsd   [esp+10h+var_10], xmm0
.text$mn:00008E51                 call    __hypot
.text$mn:00008E56                 add     esp, 10h
.text$mn:00008E59                 pop     ebp
.text$mn:00008E5A                 retn
.text$mn:00008E5A _hypot          endp
.text$mn:00008E5A
.text$mn:00008E5A ; ---------------------------------------------------------------------------
.text$mn:00008E5B                 align 4
.text$mn:00008E5B _text$mn        ends
.text$mn:00008E5B
.text$mn:00008E5C ; ===========================================================================
.text$mn:00008E5C
.text$mn:00008E5C ; Segment type: Pure code
.text$mn:00008E5C ; Segment permissions: Read/Execute
.text$mn:00008E5C _text$mn        segment para public 'CODE' use32
.text$mn:00008E5C                 assume cs:_text$mn
.text$mn:00008E5C                 ;org 8E5Ch
.text$mn:00008E5C ; COMDAT (pick any)
.text$mn:00008E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E5C
.text$mn:00008E5C ; =============== S U B R O U T I N E =======================================
.text$mn:00008E5C
.text$mn:00008E5C ; Attributes: bp-based frame
.text$mn:00008E5C
.text$mn:00008E5C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:00008E5C                 public _wmemcpy
.text$mn:00008E5C _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00008E5C
.text$mn:00008E5C Dst             = dword ptr  8
.text$mn:00008E5C Src             = dword ptr  0Ch
.text$mn:00008E5C arg_8           = dword ptr  10h
.text$mn:00008E5C
.text$mn:00008E5C                 push    ebp
.text$mn:00008E5D                 mov     ebp, esp
.text$mn:00008E5F                 mov     eax, [ebp+arg_8]
.text$mn:00008E62                 shl     eax, 1
.text$mn:00008E64                 push    eax             ; Size
.text$mn:00008E65                 mov     ecx, [ebp+Src]
.text$mn:00008E68                 push    ecx             ; Src
.text$mn:00008E69                 mov     edx, [ebp+Dst]
.text$mn:00008E6C                 push    edx             ; Dst
.text$mn:00008E6D                 call    _memcpy
.text$mn:00008E72                 add     esp, 0Ch
.text$mn:00008E75                 pop     ebp
.text$mn:00008E76                 retn
.text$mn:00008E76 _wmemcpy        endp
.text$mn:00008E76
.text$mn:00008E76 ; ---------------------------------------------------------------------------
.text$mn:00008E77                 align 4
.text$mn:00008E77 _text$mn        ends
.text$mn:00008E77
.text$mn:00008E78 ; ===========================================================================
.text$mn:00008E78
.text$mn:00008E78 ; Segment type: Pure code
.text$mn:00008E78 ; Segment permissions: Read/Execute
.text$mn:00008E78 _text$mn        segment para public 'CODE' use32
.text$mn:00008E78                 assume cs:_text$mn
.text$mn:00008E78                 ;org 8E78h
.text$mn:00008E78 ; COMDAT (pick any)
.text$mn:00008E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E78
.text$mn:00008E78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E78
.text$mn:00008E78 ; Attributes: bp-based frame
.text$mn:00008E78
.text$mn:00008E78 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:00008E78                 public _wmemmove
.text$mn:00008E78 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00008E78
.text$mn:00008E78 Dst             = dword ptr  8
.text$mn:00008E78 Src             = dword ptr  0Ch
.text$mn:00008E78 arg_8           = dword ptr  10h
.text$mn:00008E78
.text$mn:00008E78                 push    ebp
.text$mn:00008E79                 mov     ebp, esp
.text$mn:00008E7B                 mov     eax, [ebp+arg_8]
.text$mn:00008E7E                 shl     eax, 1
.text$mn:00008E80                 push    eax             ; Size
.text$mn:00008E81                 mov     ecx, [ebp+Src]
.text$mn:00008E84                 push    ecx             ; Src
.text$mn:00008E85                 mov     edx, [ebp+Dst]
.text$mn:00008E88                 push    edx             ; Dst
.text$mn:00008E89                 call    _memmove
.text$mn:00008E8E                 add     esp, 0Ch
.text$mn:00008E91                 pop     ebp
.text$mn:00008E92                 retn
.text$mn:00008E92 _wmemmove       endp
.text$mn:00008E92
.text$mn:00008E92 ; ---------------------------------------------------------------------------
.text$mn:00008E93                 align 4
.text$mn:00008E93 _text$mn        ends
.text$mn:00008E93
.text$mn:00008E94 ; ===========================================================================
.text$mn:00008E94
.text$mn:00008E94 ; Segment type: Pure code
.text$mn:00008E94 ; Segment permissions: Read/Execute
.text$mn:00008E94 _text$mn        segment para public 'CODE' use32
.text$mn:00008E94                 assume cs:_text$mn
.text$mn:00008E94                 ;org 8E94h
.text$mn:00008E94 ; COMDAT (pick any)
.text$mn:00008E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E94
.text$mn:00008E94 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E94
.text$mn:00008E94 ; Attributes: bp-based frame
.text$mn:00008E94
.text$mn:00008E94                 public _wmemset
.text$mn:00008E94 _wmemset        proc near               ; CODE XREF: std::char_traits<wchar_t>::assign(wchar_t *,uint,wchar_t)+10p
.text$mn:00008E94
.text$mn:00008E94 var_4           = dword ptr -4
.text$mn:00008E94 arg_0           = dword ptr  8
.text$mn:00008E94 arg_4           = word ptr  0Ch
.text$mn:00008E94 arg_8           = dword ptr  10h
.text$mn:00008E94
.text$mn:00008E94                 push    ebp
.text$mn:00008E95                 mov     ebp, esp
.text$mn:00008E97                 push    ecx
.text$mn:00008E98                 mov     eax, [ebp+arg_0]
.text$mn:00008E9B                 mov     [ebp+var_4], eax
.text$mn:00008E9E                 jmp     short loc_8EB2
.text$mn:00008EA0 ; ---------------------------------------------------------------------------
.text$mn:00008EA0
.text$mn:00008EA0 loc_8EA0:                               ; CODE XREF: _wmemset+2Ej
.text$mn:00008EA0                 mov     ecx, [ebp+var_4]
.text$mn:00008EA3                 add     ecx, 2
.text$mn:00008EA6                 mov     [ebp+var_4], ecx
.text$mn:00008EA9                 mov     edx, [ebp+arg_8]
.text$mn:00008EAC                 sub     edx, 1
.text$mn:00008EAF                 mov     [ebp+arg_8], edx
.text$mn:00008EB2
.text$mn:00008EB2 loc_8EB2:                               ; CODE XREF: _wmemset+Aj
.text$mn:00008EB2                 cmp     [ebp+arg_8], 0
.text$mn:00008EB6                 jbe     short loc_8EC4
.text$mn:00008EB8                 mov     eax, [ebp+var_4]
.text$mn:00008EBB                 mov     cx, [ebp+arg_4]
.text$mn:00008EBF                 mov     [eax], cx
.text$mn:00008EC2                 jmp     short loc_8EA0
.text$mn:00008EC4 ; ---------------------------------------------------------------------------
.text$mn:00008EC4
.text$mn:00008EC4 loc_8EC4:                               ; CODE XREF: _wmemset+22j
.text$mn:00008EC4                 mov     eax, [ebp+arg_0]
.text$mn:00008EC7                 mov     esp, ebp
.text$mn:00008EC9                 pop     ebp
.text$mn:00008ECA                 retn
.text$mn:00008ECA _wmemset        endp
.text$mn:00008ECA
.text$mn:00008ECA ; ---------------------------------------------------------------------------
.text$mn:00008ECB                 align 4
.text$mn:00008ECB _text$mn        ends
.text$mn:00008ECB
.xdata$x:00008ECC ; ===========================================================================
.xdata$x:00008ECC
.xdata$x:00008ECC ; Segment type: Pure data
.xdata$x:00008ECC ; Segment permissions: Read
.xdata$x:00008ECC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008ECC                 assume cs:_xdata$x
.xdata$x:00008ECC                 ;org 8ECCh
.xdata$x:00008ECC ; COMDAT (pick associative to section at 6CE4)
.xdata$x:00008ECC __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:00008ECC                                         ; DATA XREF: .xdata$x:00008EDCo
.xdata$x:00008ECD                 db 0FFh
.xdata$x:00008ECE                 db 0FFh
.xdata$x:00008ECF                 db 0FFh
.xdata$x:00008ED0                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:00008ED4 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:00008ED4                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:00008ED5                 db    5
.xdata$x:00008ED6                 db  93h ; ô
.xdata$x:00008ED7                 db  19h
.xdata$x:00008ED8                 db    1
.xdata$x:00008ED9                 db    0
.xdata$x:00008EDA                 db    0
.xdata$x:00008EDB                 db    0
.xdata$x:00008EDC                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00008EE0                 db    0
.xdata$x:00008EE1                 db    0
.xdata$x:00008EE2                 db    0
.xdata$x:00008EE3                 db    0
.xdata$x:00008EE4                 db    0
.xdata$x:00008EE5                 db    0
.xdata$x:00008EE6                 db    0
.xdata$x:00008EE7                 db    0
.xdata$x:00008EE8                 db    0
.xdata$x:00008EE9                 db    0
.xdata$x:00008EEA                 db    0
.xdata$x:00008EEB                 db    0
.xdata$x:00008EEC                 db    0
.xdata$x:00008EED                 db    0
.xdata$x:00008EEE                 db    0
.xdata$x:00008EEF                 db    0
.xdata$x:00008EF0                 db    0
.xdata$x:00008EF1                 db    0
.xdata$x:00008EF2                 db    0
.xdata$x:00008EF3                 db    0
.xdata$x:00008EF4                 db    0
.xdata$x:00008EF5                 db    0
.xdata$x:00008EF6                 db    0
.xdata$x:00008EF7                 db    0
.xdata$x:00008EF7 _xdata$x        ends
.xdata$x:00008EF7
.xdata$x:00008EF8 ; ===========================================================================
.xdata$x:00008EF8
.xdata$x:00008EF8 ; Segment type: Pure data
.xdata$x:00008EF8 ; Segment permissions: Read
.xdata$x:00008EF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008EF8                 assume cs:_xdata$x
.xdata$x:00008EF8                 ;org 8EF8h
.xdata$x:00008EF8 ; COMDAT (pick associative to section at 30B8)
.xdata$x:00008EF8 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008EF8                                         ; DATA XREF: .xdata$x:00008F08o
.xdata$x:00008EF9                 db 0FFh
.xdata$x:00008EFA                 db 0FFh
.xdata$x:00008EFB                 db 0FFh
.xdata$x:00008EFC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00008F00 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008F00                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00008F01                 db    5
.xdata$x:00008F02                 db  93h ; ô
.xdata$x:00008F03                 db  19h
.xdata$x:00008F04                 db    1
.xdata$x:00008F05                 db    0
.xdata$x:00008F06                 db    0
.xdata$x:00008F07                 db    0
.xdata$x:00008F08                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00008F0C                 db    0
.xdata$x:00008F0D                 db    0
.xdata$x:00008F0E                 db    0
.xdata$x:00008F0F                 db    0
.xdata$x:00008F10                 db    0
.xdata$x:00008F11                 db    0
.xdata$x:00008F12                 db    0
.xdata$x:00008F13                 db    0
.xdata$x:00008F14                 db    0
.xdata$x:00008F15                 db    0
.xdata$x:00008F16                 db    0
.xdata$x:00008F17                 db    0
.xdata$x:00008F18                 db    0
.xdata$x:00008F19                 db    0
.xdata$x:00008F1A                 db    0
.xdata$x:00008F1B                 db    0
.xdata$x:00008F1C                 db    0
.xdata$x:00008F1D                 db    0
.xdata$x:00008F1E                 db    0
.xdata$x:00008F1F                 db    0
.xdata$x:00008F20                 db    0
.xdata$x:00008F21                 db    0
.xdata$x:00008F22                 db    0
.xdata$x:00008F23                 db    0
.xdata$x:00008F23 _xdata$x        ends
.xdata$x:00008F23
.xdata$x:00008F24 ; ===========================================================================
.xdata$x:00008F24
.xdata$x:00008F24 ; Segment type: Pure data
.xdata$x:00008F24 ; Segment permissions: Read
.xdata$x:00008F24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F24                 assume cs:_xdata$x
.xdata$x:00008F24                 ;org 8F24h
.xdata$x:00008F24 ; COMDAT (pick associative to section at 4774)
.xdata$x:00008F24 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008F24                                         ; DATA XREF: .xdata$x:00008F34o
.xdata$x:00008F25                 db 0FFh
.xdata$x:00008F26                 db 0FFh
.xdata$x:00008F27                 db 0FFh
.xdata$x:00008F28                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00008F2C __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008F2C                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00008F2D                 db    5
.xdata$x:00008F2E                 db  93h ; ô
.xdata$x:00008F2F                 db  19h
.xdata$x:00008F30                 db    1
.xdata$x:00008F31                 db    0
.xdata$x:00008F32                 db    0
.xdata$x:00008F33                 db    0
.xdata$x:00008F34                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00008F38                 db    0
.xdata$x:00008F39                 db    0
.xdata$x:00008F3A                 db    0
.xdata$x:00008F3B                 db    0
.xdata$x:00008F3C                 db    0
.xdata$x:00008F3D                 db    0
.xdata$x:00008F3E                 db    0
.xdata$x:00008F3F                 db    0
.xdata$x:00008F40                 db    0
.xdata$x:00008F41                 db    0
.xdata$x:00008F42                 db    0
.xdata$x:00008F43                 db    0
.xdata$x:00008F44                 db    0
.xdata$x:00008F45                 db    0
.xdata$x:00008F46                 db    0
.xdata$x:00008F47                 db    0
.xdata$x:00008F48                 db    0
.xdata$x:00008F49                 db    0
.xdata$x:00008F4A                 db    0
.xdata$x:00008F4B                 db    0
.xdata$x:00008F4C                 db    0
.xdata$x:00008F4D                 db    0
.xdata$x:00008F4E                 db    0
.xdata$x:00008F4F                 db    0
.xdata$x:00008F4F _xdata$x        ends
.xdata$x:00008F4F
.xdata$x:00008F50 ; ===========================================================================
.xdata$x:00008F50
.xdata$x:00008F50 ; Segment type: Pure data
.xdata$x:00008F50 ; Segment permissions: Read
.xdata$x:00008F50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F50                 assume cs:_xdata$x
.xdata$x:00008F50                 ;org 8F50h
.xdata$x:00008F50 ; COMDAT (pick associative to section at 2FC0)
.xdata$x:00008F50 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00008F50                                         ; DATA XREF: .xdata$x:00008F60o
.xdata$x:00008F51                 db 0FFh
.xdata$x:00008F52                 db 0FFh
.xdata$x:00008F53                 db 0FFh
.xdata$x:00008F54                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:00008F58 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:00008F58                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:00008F59                 db    5
.xdata$x:00008F5A                 db  93h ; ô
.xdata$x:00008F5B                 db  19h
.xdata$x:00008F5C                 db    1
.xdata$x:00008F5D                 db    0
.xdata$x:00008F5E                 db    0
.xdata$x:00008F5F                 db    0
.xdata$x:00008F60                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:00008F64                 db    0
.xdata$x:00008F65                 db    0
.xdata$x:00008F66                 db    0
.xdata$x:00008F67                 db    0
.xdata$x:00008F68                 db    0
.xdata$x:00008F69                 db    0
.xdata$x:00008F6A                 db    0
.xdata$x:00008F6B                 db    0
.xdata$x:00008F6C                 db    0
.xdata$x:00008F6D                 db    0
.xdata$x:00008F6E                 db    0
.xdata$x:00008F6F                 db    0
.xdata$x:00008F70                 db    0
.xdata$x:00008F71                 db    0
.xdata$x:00008F72                 db    0
.xdata$x:00008F73                 db    0
.xdata$x:00008F74                 db    0
.xdata$x:00008F75                 db    0
.xdata$x:00008F76                 db    0
.xdata$x:00008F77                 db    0
.xdata$x:00008F78                 db    0
.xdata$x:00008F79                 db    0
.xdata$x:00008F7A                 db    0
.xdata$x:00008F7B                 db    0
.xdata$x:00008F7B _xdata$x        ends
.xdata$x:00008F7B
.xdata$x:00008F7C ; ===========================================================================
.xdata$x:00008F7C
.xdata$x:00008F7C ; Segment type: Pure data
.xdata$x:00008F7C ; Segment permissions: Read
.xdata$x:00008F7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008F7C                 assume cs:_xdata$x
.xdata$x:00008F7C                 ;org 8F7Ch
.xdata$x:00008F7C ; COMDAT (pick associative to section at 4684)
.xdata$x:00008F7C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00008F7C                                         ; DATA XREF: .xdata$x:00008F8Co
.xdata$x:00008F7D                 db 0FFh
.xdata$x:00008F7E                 db 0FFh
.xdata$x:00008F7F                 db 0FFh
.xdata$x:00008F80                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00008F84 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008F84                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008F85                 db    5
.xdata$x:00008F86                 db  93h ; ô
.xdata$x:00008F87                 db  19h
.xdata$x:00008F88                 db    1
.xdata$x:00008F89                 db    0
.xdata$x:00008F8A                 db    0
.xdata$x:00008F8B                 db    0
.xdata$x:00008F8C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00008F90                 db    0
.xdata$x:00008F91                 db    0
.xdata$x:00008F92                 db    0
.xdata$x:00008F93                 db    0
.xdata$x:00008F94                 db    0
.xdata$x:00008F95                 db    0
.xdata$x:00008F96                 db    0
.xdata$x:00008F97                 db    0
.xdata$x:00008F98                 db    0
.xdata$x:00008F99                 db    0
.xdata$x:00008F9A                 db    0
.xdata$x:00008F9B                 db    0
.xdata$x:00008F9C                 db    0
.xdata$x:00008F9D                 db    0
.xdata$x:00008F9E                 db    0
.xdata$x:00008F9F                 db    0
.xdata$x:00008FA0                 db    0
.xdata$x:00008FA1                 db    0
.xdata$x:00008FA2                 db    0
.xdata$x:00008FA3                 db    0
.xdata$x:00008FA4                 db    0
.xdata$x:00008FA5                 db    0
.xdata$x:00008FA6                 db    0
.xdata$x:00008FA7                 db    0
.xdata$x:00008FA7 _xdata$x        ends
.xdata$x:00008FA7
.xdata$x:00008FA8 ; ===========================================================================
.xdata$x:00008FA8
.xdata$x:00008FA8 ; Segment type: Pure data
.xdata$x:00008FA8 ; Segment permissions: Read
.xdata$x:00008FA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008FA8                 assume cs:_xdata$x
.xdata$x:00008FA8                 ;org 8FA8h
.xdata$x:00008FA8 ; COMDAT (pick associative to section at 3338)
.xdata$x:00008FA8 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00008FA8                                         ; DATA XREF: .xdata$x:00008FB8o
.xdata$x:00008FA9                 db 0FFh
.xdata$x:00008FAA                 db 0FFh
.xdata$x:00008FAB                 db 0FFh
.xdata$x:00008FAC                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
.xdata$x:00008FB0 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00008FB0                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:00008FB1                 db    5
.xdata$x:00008FB2                 db  93h ; ô
.xdata$x:00008FB3                 db  19h
.xdata$x:00008FB4                 db    1
.xdata$x:00008FB5                 db    0
.xdata$x:00008FB6                 db    0
.xdata$x:00008FB7                 db    0
.xdata$x:00008FB8                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.xdata$x:00008FBC                 db    0
.xdata$x:00008FBD                 db    0
.xdata$x:00008FBE                 db    0
.xdata$x:00008FBF                 db    0
.xdata$x:00008FC0                 db    0
.xdata$x:00008FC1                 db    0
.xdata$x:00008FC2                 db    0
.xdata$x:00008FC3                 db    0
.xdata$x:00008FC4                 db    0
.xdata$x:00008FC5                 db    0
.xdata$x:00008FC6                 db    0
.xdata$x:00008FC7                 db    0
.xdata$x:00008FC8                 db    0
.xdata$x:00008FC9                 db    0
.xdata$x:00008FCA                 db    0
.xdata$x:00008FCB                 db    0
.xdata$x:00008FCC                 db    0
.xdata$x:00008FCD                 db    0
.xdata$x:00008FCE                 db    0
.xdata$x:00008FCF                 db    0
.xdata$x:00008FD0                 db    0
.xdata$x:00008FD1                 db    0
.xdata$x:00008FD2                 db    0
.xdata$x:00008FD3                 db    0
.xdata$x:00008FD3 _xdata$x        ends
.xdata$x:00008FD3
.xdata$x:00008FD4 ; ===========================================================================
.xdata$x:00008FD4
.xdata$x:00008FD4 ; Segment type: Pure data
.xdata$x:00008FD4 ; Segment permissions: Read
.xdata$x:00008FD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008FD4                 assume cs:_xdata$x
.xdata$x:00008FD4                 ;org 8FD4h
.xdata$x:00008FD4 ; COMDAT (pick associative to section at 33E8)
.xdata$x:00008FD4 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00008FD4                                         ; DATA XREF: .xdata$x:00008FE4o
.xdata$x:00008FD5                 db 0FFh
.xdata$x:00008FD6                 db 0FFh
.xdata$x:00008FD7                 db 0FFh
.xdata$x:00008FD8                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00008FDC __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00008FDC                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00008FDD                 db    5
.xdata$x:00008FDE                 db  93h ; ô
.xdata$x:00008FDF                 db  19h
.xdata$x:00008FE0                 db    1
.xdata$x:00008FE1                 db    0
.xdata$x:00008FE2                 db    0
.xdata$x:00008FE3                 db    0
.xdata$x:00008FE4                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00008FE8                 align 20h
.xdata$x:00008FE8 _xdata$x        ends
.xdata$x:00008FE8
.xdata$x:00009000 ; ===========================================================================
.xdata$x:00009000
.xdata$x:00009000 ; Segment type: Pure data
.xdata$x:00009000 ; Segment permissions: Read
.xdata$x:00009000 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009000                 assume cs:_xdata$x
.xdata$x:00009000                 ;org 9000h
.xdata$x:00009000 ; COMDAT (pick associative to section at 3294)
.xdata$x:00009000 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:00009000                                         ; DATA XREF: .xdata$x:00009010o
.xdata$x:00009001                 db 0FFh
.xdata$x:00009002                 db 0FFh
.xdata$x:00009003                 db 0FFh
.xdata$x:00009004                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:00009008 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:00009008                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:00009009                 db    5
.xdata$x:0000900A                 db  93h ; ô
.xdata$x:0000900B                 db  19h
.xdata$x:0000900C                 db    1
.xdata$x:0000900D                 db    0
.xdata$x:0000900E                 db    0
.xdata$x:0000900F                 db    0
.xdata$x:00009010                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
.xdata$x:00009014                 db    0
.xdata$x:00009015                 db    0
.xdata$x:00009016                 db    0
.xdata$x:00009017                 db    0
.xdata$x:00009018                 db    0
.xdata$x:00009019                 db    0
.xdata$x:0000901A                 db    0
.xdata$x:0000901B                 db    0
.xdata$x:0000901C                 db    0
.xdata$x:0000901D                 db    0
.xdata$x:0000901E                 db    0
.xdata$x:0000901F                 db    0
.xdata$x:00009020                 db    0
.xdata$x:00009021                 db    0
.xdata$x:00009022                 db    0
.xdata$x:00009023                 db    0
.xdata$x:00009024                 db    0
.xdata$x:00009025                 db    0
.xdata$x:00009026                 db    0
.xdata$x:00009027                 db    0
.xdata$x:00009028                 db    0
.xdata$x:00009029                 db    0
.xdata$x:0000902A                 db    0
.xdata$x:0000902B                 db    0
.xdata$x:0000902B _xdata$x        ends
.xdata$x:0000902B
.xdata$x:0000902C ; ===========================================================================
.xdata$x:0000902C
.xdata$x:0000902C ; Segment type: Pure data
.xdata$x:0000902C ; Segment permissions: Read
.xdata$x:0000902C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000902C                 assume cs:_xdata$x
.xdata$x:0000902C                 ;org 902Ch
.xdata$x:0000902C ; COMDAT (pick associative to section at 487C)
.xdata$x:0000902C __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000902C                                         ; DATA XREF: .xdata$x:0000903Co
.xdata$x:0000902D                 db 0FFh
.xdata$x:0000902E                 db 0FFh
.xdata$x:0000902F                 db 0FFh
.xdata$x:00009030                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:00009034 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009034                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:00009035                 db    5
.xdata$x:00009036                 db  93h ; ô
.xdata$x:00009037                 db  19h
.xdata$x:00009038                 db    1
.xdata$x:00009039                 db    0
.xdata$x:0000903A                 db    0
.xdata$x:0000903B                 db    0
.xdata$x:0000903C                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:00009040                 db    0
.xdata$x:00009041                 db    0
.xdata$x:00009042                 db    0
.xdata$x:00009043                 db    0
.xdata$x:00009044                 db    0
.xdata$x:00009045                 db    0
.xdata$x:00009046                 db    0
.xdata$x:00009047                 db    0
.xdata$x:00009048                 db    0
.xdata$x:00009049                 db    0
.xdata$x:0000904A                 db    0
.xdata$x:0000904B                 db    0
.xdata$x:0000904C                 db    0
.xdata$x:0000904D                 db    0
.xdata$x:0000904E                 db    0
.xdata$x:0000904F                 db    0
.xdata$x:00009050                 db    0
.xdata$x:00009051                 db    0
.xdata$x:00009052                 db    0
.xdata$x:00009053                 db    0
.xdata$x:00009054                 db    0
.xdata$x:00009055                 db    0
.xdata$x:00009056                 db    0
.xdata$x:00009057                 db    0
.xdata$x:00009057 _xdata$x        ends
.xdata$x:00009057
.xdata$x:00009058 ; ===========================================================================
.xdata$x:00009058
.xdata$x:00009058 ; Segment type: Pure data
.xdata$x:00009058 ; Segment permissions: Read
.xdata$x:00009058 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009058                 assume cs:_xdata$x
.xdata$x:00009058                 ;org 9058h
.xdata$x:00009058 ; COMDAT (pick associative to section at 5DD8)
.xdata$x:00009058 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00009058                                         ; DATA XREF: .xdata$x:000090E0o
.xdata$x:00009059                 db    0
.xdata$x:0000905A                 db    0
.xdata$x:0000905B                 db    0
.xdata$x:0000905C                 db    0
.xdata$x:0000905D                 db    0
.xdata$x:0000905E                 db    0
.xdata$x:0000905F                 db    0
.xdata$x:00009060                 db    0
.xdata$x:00009061                 db    0
.xdata$x:00009062                 db    0
.xdata$x:00009063                 db    0
.xdata$x:00009064                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:00009068 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00009068                                         ; DATA XREF: .xdata$x:000090CCo
.xdata$x:00009069                 db    0
.xdata$x:0000906A                 db    0
.xdata$x:0000906B                 db    0
.xdata$x:0000906C                 db    0
.xdata$x:0000906D                 db    0
.xdata$x:0000906E                 db    0
.xdata$x:0000906F                 db    0
.xdata$x:00009070                 db    0
.xdata$x:00009071                 db    0
.xdata$x:00009072                 db    0
.xdata$x:00009073                 db    0
.xdata$x:00009074                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:00009078 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00009078                                         ; DATA XREF: .xdata$x:000090A0o
.xdata$x:00009079                 db 0FFh
.xdata$x:0000907A                 db 0FFh
.xdata$x:0000907B                 db 0FFh
.xdata$x:0000907C                 db    0
.xdata$x:0000907D                 db    0
.xdata$x:0000907E                 db    0
.xdata$x:0000907F                 db    0
.xdata$x:00009080                 db 0FFh
.xdata$x:00009081                 db 0FFh
.xdata$x:00009082                 db 0FFh
.xdata$x:00009083                 db 0FFh
.xdata$x:00009084                 db    0
.xdata$x:00009085                 db    0
.xdata$x:00009086                 db    0
.xdata$x:00009087                 db    0
.xdata$x:00009088                 db    1
.xdata$x:00009089                 db    0
.xdata$x:0000908A                 db    0
.xdata$x:0000908B                 db    0
.xdata$x:0000908C                 db    0
.xdata$x:0000908D                 db    0
.xdata$x:0000908E                 db    0
.xdata$x:0000908F                 db    0
.xdata$x:00009090                 db    1
.xdata$x:00009091                 db    0
.xdata$x:00009092                 db    0
.xdata$x:00009093                 db    0
.xdata$x:00009094                 db    0
.xdata$x:00009095                 db    0
.xdata$x:00009096                 db    0
.xdata$x:00009097                 db    0
.xdata$x:00009098 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00009098                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:00009099                 db    5
.xdata$x:0000909A                 db  93h ; ô
.xdata$x:0000909B                 db  19h
.xdata$x:0000909C                 db    4
.xdata$x:0000909D                 db    0
.xdata$x:0000909E                 db    0
.xdata$x:0000909F                 db    0
.xdata$x:000090A0                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000090A4                 db    2
.xdata$x:000090A5                 db    0
.xdata$x:000090A6                 db    0
.xdata$x:000090A7                 db    0
.xdata$x:000090A8                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000090AC                 db    0
.xdata$x:000090AD                 db    0
.xdata$x:000090AE                 db    0
.xdata$x:000090AF                 db    0
.xdata$x:000090B0                 db    0
.xdata$x:000090B1                 db    0
.xdata$x:000090B2                 db    0
.xdata$x:000090B3                 db    0
.xdata$x:000090B4                 db    0
.xdata$x:000090B5                 db    0
.xdata$x:000090B6                 db    0
.xdata$x:000090B7                 db    0
.xdata$x:000090B8                 db    0
.xdata$x:000090B9                 db    0
.xdata$x:000090BA                 db    0
.xdata$x:000090BB                 db    0
.xdata$x:000090BC __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:000090BC                                         ; DATA XREF: .xdata$x:000090A8o
.xdata$x:000090BD                 db    0
.xdata$x:000090BE                 db    0
.xdata$x:000090BF                 db    0
.xdata$x:000090C0                 db    2
.xdata$x:000090C1                 db    0
.xdata$x:000090C2                 db    0
.xdata$x:000090C3                 db    0
.xdata$x:000090C4                 db    3
.xdata$x:000090C5                 db    0
.xdata$x:000090C6                 db    0
.xdata$x:000090C7                 db    0
.xdata$x:000090C8                 db    1
.xdata$x:000090C9                 db    0
.xdata$x:000090CA                 db    0
.xdata$x:000090CB                 db    0
.xdata$x:000090CC                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:000090D0                 db    0
.xdata$x:000090D1                 db    0
.xdata$x:000090D2                 db    0
.xdata$x:000090D3                 db    0
.xdata$x:000090D4                 db    0
.xdata$x:000090D5                 db    0
.xdata$x:000090D6                 db    0
.xdata$x:000090D7                 db    0
.xdata$x:000090D8                 db    3
.xdata$x:000090D9                 db    0
.xdata$x:000090DA                 db    0
.xdata$x:000090DB                 db    0
.xdata$x:000090DC                 db    1
.xdata$x:000090DD                 db    0
.xdata$x:000090DE                 db    0
.xdata$x:000090DF                 db    0
.xdata$x:000090E0                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:000090E0 _xdata$x        ends
.xdata$x:000090E0
.xdata$x:000090E4 ; ===========================================================================
.xdata$x:000090E4
.xdata$x:000090E4 ; Segment type: Pure data
.xdata$x:000090E4 ; Segment permissions: Read
.xdata$x:000090E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000090E4                 assume cs:_xdata$x
.xdata$x:000090E4                 ;org 90E4h
.xdata$x:000090E4 ; COMDAT (pick associative to section at 42AC)
.xdata$x:000090E4 __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:000090E4                                         ; DATA XREF: .xdata$x:000090F4o
.xdata$x:000090E5                 db 0FFh
.xdata$x:000090E6                 db 0FFh
.xdata$x:000090E7                 db 0FFh
.xdata$x:000090E8                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:000090EC __ehfuncinfo$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:000090EC                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+11o
.xdata$x:000090ED                 db    5
.xdata$x:000090EE                 db  93h ; ô
.xdata$x:000090EF                 db  19h
.xdata$x:000090F0                 db    1
.xdata$x:000090F1                 db    0
.xdata$x:000090F2                 db    0
.xdata$x:000090F3                 db    0
.xdata$x:000090F4                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:000090F8                 db    0
.xdata$x:000090F9                 db    0
.xdata$x:000090FA                 db    0
.xdata$x:000090FB                 db    0
.xdata$x:000090FC                 db    0
.xdata$x:000090FD                 db    0
.xdata$x:000090FE                 db    0
.xdata$x:000090FF                 db    0
.xdata$x:00009100                 db    0
.xdata$x:00009101                 db    0
.xdata$x:00009102                 db    0
.xdata$x:00009103                 db    0
.xdata$x:00009104                 db    0
.xdata$x:00009105                 db    0
.xdata$x:00009106                 db    0
.xdata$x:00009107                 db    0
.xdata$x:00009108                 db    0
.xdata$x:00009109                 db    0
.xdata$x:0000910A                 db    0
.xdata$x:0000910B                 db    0
.xdata$x:0000910C                 db    0
.xdata$x:0000910D                 db    0
.xdata$x:0000910E                 db    0
.xdata$x:0000910F                 db    0
.xdata$x:0000910F _xdata$x        ends
.xdata$x:0000910F
.xdata$x:00009110 ; ===========================================================================
.xdata$x:00009110
.xdata$x:00009110 ; Segment type: Pure data
.xdata$x:00009110 ; Segment permissions: Read
.xdata$x:00009110 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009110                 assume cs:_xdata$x
.xdata$x:00009110                 ;org 9110h
.xdata$x:00009110 ; COMDAT (pick associative to section at 433C)
.xdata$x:00009110 __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:00009110                                         ; DATA XREF: .xdata$x:00009120o
.xdata$x:00009111                 db 0FFh
.xdata$x:00009112                 db 0FFh
.xdata$x:00009113                 db 0FFh
.xdata$x:00009114                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:00009118 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00009118                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:00009119                 db    5
.xdata$x:0000911A                 db  93h ; ô
.xdata$x:0000911B                 db  19h
.xdata$x:0000911C                 db    1
.xdata$x:0000911D                 db    0
.xdata$x:0000911E                 db    0
.xdata$x:0000911F                 db    0
.xdata$x:00009120                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:00009124                 db    0
.xdata$x:00009125                 db    0
.xdata$x:00009126                 db    0
.xdata$x:00009127                 db    0
.xdata$x:00009128                 db    0
.xdata$x:00009129                 db    0
.xdata$x:0000912A                 db    0
.xdata$x:0000912B                 db    0
.xdata$x:0000912C                 db    0
.xdata$x:0000912D                 db    0
.xdata$x:0000912E                 db    0
.xdata$x:0000912F                 db    0
.xdata$x:00009130                 db    0
.xdata$x:00009131                 db    0
.xdata$x:00009132                 db    0
.xdata$x:00009133                 db    0
.xdata$x:00009134                 db    0
.xdata$x:00009135                 db    0
.xdata$x:00009136                 db    0
.xdata$x:00009137                 db    0
.xdata$x:00009138                 db    0
.xdata$x:00009139                 db    0
.xdata$x:0000913A                 db    0
.xdata$x:0000913B                 db    0
.xdata$x:0000913B _xdata$x        ends
.xdata$x:0000913B
.xdata$x:0000913C ; ===========================================================================
.xdata$x:0000913C
.xdata$x:0000913C ; Segment type: Pure data
.xdata$x:0000913C ; Segment permissions: Read
.xdata$x:0000913C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000913C                 assume cs:_xdata$x
.xdata$x:0000913C                 ;org 913Ch
.xdata$x:0000913C ; COMDAT (pick associative to section at 5250)
.xdata$x:0000913C __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:0000913C                                         ; DATA XREF: .xdata$x:0000914Co
.xdata$x:0000913D                 db 0FFh
.xdata$x:0000913E                 db 0FFh
.xdata$x:0000913F                 db 0FFh
.xdata$x:00009140                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:00009144 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:00009144                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:00009145                 db    5
.xdata$x:00009146                 db  93h ; ô
.xdata$x:00009147                 db  19h
.xdata$x:00009148                 db    1
.xdata$x:00009149                 db    0
.xdata$x:0000914A                 db    0
.xdata$x:0000914B                 db    0
.xdata$x:0000914C                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:00009150                 db    0
.xdata$x:00009151                 db    0
.xdata$x:00009152                 db    0
.xdata$x:00009153                 db    0
.xdata$x:00009154                 db    0
.xdata$x:00009155                 db    0
.xdata$x:00009156                 db    0
.xdata$x:00009157                 db    0
.xdata$x:00009158                 db    0
.xdata$x:00009159                 db    0
.xdata$x:0000915A                 db    0
.xdata$x:0000915B                 db    0
.xdata$x:0000915C                 db    0
.xdata$x:0000915D                 db    0
.xdata$x:0000915E                 db    0
.xdata$x:0000915F                 db    0
.xdata$x:00009160                 db    0
.xdata$x:00009161                 db    0
.xdata$x:00009162                 db    0
.xdata$x:00009163                 db    0
.xdata$x:00009164                 db    0
.xdata$x:00009165                 db    0
.xdata$x:00009166                 db    0
.xdata$x:00009167                 db    0
.xdata$x:00009167 _xdata$x        ends
.xdata$x:00009167
.xdata$x:00009168 ; ===========================================================================
.xdata$x:00009168
.xdata$x:00009168 ; Segment type: Pure data
.xdata$x:00009168 ; Segment permissions: Read
.xdata$x:00009168 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009168                 assume cs:_xdata$x
.xdata$x:00009168                 ;org 9168h
.xdata$x:00009168 ; COMDAT (pick associative to section at 4228)
.xdata$x:00009168 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009168                                         ; DATA XREF: .xdata$x:00009178o
.xdata$x:00009169                 db 0FFh
.xdata$x:0000916A                 db 0FFh
.xdata$x:0000916B                 db 0FFh
.xdata$x:0000916C                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:00009170 __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00009170                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:00009171                 db    5
.xdata$x:00009172                 db  93h ; ô
.xdata$x:00009173                 db  19h
.xdata$x:00009174                 db    1
.xdata$x:00009175                 db    0
.xdata$x:00009176                 db    0
.xdata$x:00009177                 db    0
.xdata$x:00009178                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:0000917C                 db    0
.xdata$x:0000917D                 db    0
.xdata$x:0000917E                 db    0
.xdata$x:0000917F                 db    0
.xdata$x:00009180                 db    0
.xdata$x:00009181                 db    0
.xdata$x:00009182                 db    0
.xdata$x:00009183                 db    0
.xdata$x:00009184                 db    0
.xdata$x:00009185                 db    0
.xdata$x:00009186                 db    0
.xdata$x:00009187                 db    0
.xdata$x:00009188                 db    0
.xdata$x:00009189                 db    0
.xdata$x:0000918A                 db    0
.xdata$x:0000918B                 db    0
.xdata$x:0000918C                 db    0
.xdata$x:0000918D                 db    0
.xdata$x:0000918E                 db    0
.xdata$x:0000918F                 db    0
.xdata$x:00009190                 db    0
.xdata$x:00009191                 db    0
.xdata$x:00009192                 db    0
.xdata$x:00009193                 db    0
.xdata$x:00009193 _xdata$x        ends
.xdata$x:00009193
.xdata$x:00009194 ; ===========================================================================
.xdata$x:00009194
.xdata$x:00009194 ; Segment type: Pure data
.xdata$x:00009194 ; Segment permissions: Read
.xdata$x:00009194 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009194                 assume cs:_xdata$x
.xdata$x:00009194                 ;org 9194h
.xdata$x:00009194 ; COMDAT (pick associative to section at 3B3C)
.xdata$x:00009194 __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00009194                                         ; DATA XREF: __ehhandler$??0_Locinfo@std@@QAE@PBD@Z+11o
.xdata$x:00009195                 db    5
.xdata$x:00009196                 db  93h ; ô
.xdata$x:00009197                 db  19h
.xdata$x:00009198                 db    7
.xdata$x:00009199                 db    0
.xdata$x:0000919A                 db    0
.xdata$x:0000919B                 db    0
.xdata$x:0000919C                 dd offset __unwindtable$??0_Locinfo@std@@QAE@PBD@Z
.xdata$x:000091A0                 db    0
.xdata$x:000091A1                 db    0
.xdata$x:000091A2                 db    0
.xdata$x:000091A3                 db    0
.xdata$x:000091A4                 db    0
.xdata$x:000091A5                 db    0
.xdata$x:000091A6                 db    0
.xdata$x:000091A7                 db    0
.xdata$x:000091A8                 db    0
.xdata$x:000091A9                 db    0
.xdata$x:000091AA                 db    0
.xdata$x:000091AB                 db    0
.xdata$x:000091AC                 db    0
.xdata$x:000091AD                 db    0
.xdata$x:000091AE                 db    0
.xdata$x:000091AF                 db    0
.xdata$x:000091B0                 db    0
.xdata$x:000091B1                 db    0
.xdata$x:000091B2                 db    0
.xdata$x:000091B3                 db    0
.xdata$x:000091B4                 db    0
.xdata$x:000091B5                 db    0
.xdata$x:000091B6                 db    0
.xdata$x:000091B7                 db    0
.xdata$x:000091B8 __unwindtable$??0_Locinfo@std@@QAE@PBD@Z db 0FFh
.xdata$x:000091B8                                         ; DATA XREF: .xdata$x:0000919Co
.xdata$x:000091B9                 db 0FFh
.xdata$x:000091BA                 db 0FFh
.xdata$x:000091BB                 db 0FFh
.xdata$x:000091BC                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
.xdata$x:000091C0                 db    0
.xdata$x:000091C1                 db    0
.xdata$x:000091C2                 db    0
.xdata$x:000091C3                 db    0
.xdata$x:000091C4                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
.xdata$x:000091C8                 db    1
.xdata$x:000091C9                 db    0
.xdata$x:000091CA                 db    0
.xdata$x:000091CB                 db    0
.xdata$x:000091CC                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
.xdata$x:000091D0                 db    2
.xdata$x:000091D1                 db    0
.xdata$x:000091D2                 db    0
.xdata$x:000091D3                 db    0
.xdata$x:000091D4                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
.xdata$x:000091D8                 db    3
.xdata$x:000091D9                 db    0
.xdata$x:000091DA                 db    0
.xdata$x:000091DB                 db    0
.xdata$x:000091DC                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
.xdata$x:000091E0                 db    4
.xdata$x:000091E1                 db    0
.xdata$x:000091E2                 db    0
.xdata$x:000091E3                 db    0
.xdata$x:000091E4                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
.xdata$x:000091E8                 db    5
.xdata$x:000091E9                 db    0
.xdata$x:000091EA                 db    0
.xdata$x:000091EB                 db    0
.xdata$x:000091EC                 dd offset __unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
.xdata$x:000091EC _xdata$x        ends
.xdata$x:000091EC
.xdata$x:000091F0 ; ===========================================================================
.xdata$x:000091F0
.xdata$x:000091F0 ; Segment type: Pure data
.xdata$x:000091F0 ; Segment permissions: Read
.xdata$x:000091F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000091F0                 assume cs:_xdata$x
.xdata$x:000091F0                 ;org 91F0h
.xdata$x:000091F0 ; COMDAT (pick associative to section at 4E08)
.xdata$x:000091F0 __ehfuncinfo$??1_Locinfo@std@@QAE@XZ db  22h ; "
.xdata$x:000091F0                                         ; DATA XREF: __ehhandler$??1_Locinfo@std@@QAE@XZ+11o
.xdata$x:000091F1                 db    5
.xdata$x:000091F2                 db  93h ; ô
.xdata$x:000091F3                 db  19h
.xdata$x:000091F4                 db    7
.xdata$x:000091F5                 db    0
.xdata$x:000091F6                 db    0
.xdata$x:000091F7                 db    0
.xdata$x:000091F8                 dd offset __unwindtable$??1_Locinfo@std@@QAE@XZ
.xdata$x:000091FC                 db    0
.xdata$x:000091FD                 db    0
.xdata$x:000091FE                 db    0
.xdata$x:000091FF                 db    0
.xdata$x:00009200                 db    0
.xdata$x:00009201                 db    0
.xdata$x:00009202                 db    0
.xdata$x:00009203                 db    0
.xdata$x:00009204                 db    0
.xdata$x:00009205                 db    0
.xdata$x:00009206                 db    0
.xdata$x:00009207                 db    0
.xdata$x:00009208                 db    0
.xdata$x:00009209                 db    0
.xdata$x:0000920A                 db    0
.xdata$x:0000920B                 db    0
.xdata$x:0000920C                 db    0
.xdata$x:0000920D                 db    0
.xdata$x:0000920E                 db    0
.xdata$x:0000920F                 db    0
.xdata$x:00009210                 db    0
.xdata$x:00009211                 db    0
.xdata$x:00009212                 db    0
.xdata$x:00009213                 db    0
.xdata$x:00009214 __unwindtable$??1_Locinfo@std@@QAE@XZ db 0FFh
.xdata$x:00009214                                         ; DATA XREF: .xdata$x:000091F8o
.xdata$x:00009215                 db 0FFh
.xdata$x:00009216                 db 0FFh
.xdata$x:00009217                 db 0FFh
.xdata$x:00009218                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
.xdata$x:0000921C                 align 10h
.xdata$x:00009220                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
.xdata$x:00009224                 db    1
.xdata$x:00009225                 db    0
.xdata$x:00009226                 db    0
.xdata$x:00009227                 db    0
.xdata$x:00009228                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
.xdata$x:0000922C                 db    2
.xdata$x:0000922D                 db    0
.xdata$x:0000922E                 db    0
.xdata$x:0000922F                 db    0
.xdata$x:00009230                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
.xdata$x:00009234                 db    3
.xdata$x:00009235                 db    0
.xdata$x:00009236                 db    0
.xdata$x:00009237                 db    0
.xdata$x:00009238                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
.xdata$x:0000923C                 db    4
.xdata$x:0000923D                 db    0
.xdata$x:0000923E                 db    0
.xdata$x:0000923F                 db    0
.xdata$x:00009240                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$5
.xdata$x:00009244                 db    5
.xdata$x:00009245                 db    0
.xdata$x:00009246                 db    0
.xdata$x:00009247                 db    0
.xdata$x:00009248                 dd offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$6
.xdata$x:00009248 _xdata$x        ends
.xdata$x:00009248
.xdata$x:0000924C ; ===========================================================================
.xdata$x:0000924C
.xdata$x:0000924C ; Segment type: Pure data
.xdata$x:0000924C ; Segment permissions: Read
.xdata$x:0000924C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000924C                 assume cs:_xdata$x
.xdata$x:0000924C                 ;org 924Ch
.xdata$x:0000924C ; COMDAT (pick associative to section at 5564)
.xdata$x:0000924C __unwindtable$??Bid@locale@std@@QAEIXZ db 0FFh
.xdata$x:0000924C                                         ; DATA XREF: .xdata$x:0000925Co
.xdata$x:0000924D                 db 0FFh
.xdata$x:0000924E                 db 0FFh
.xdata$x:0000924F                 db 0FFh
.xdata$x:00009250                 dd offset __unwindfunclet$??Bid@locale@std@@QAEIXZ$0
.xdata$x:00009254 __ehfuncinfo$??Bid@locale@std@@QAEIXZ db  22h ; "
.xdata$x:00009254                                         ; DATA XREF: __ehhandler$??Bid@locale@std@@QAEIXZ+11o
.xdata$x:00009255                 db    5
.xdata$x:00009256                 db  93h ; ô
.xdata$x:00009257                 db  19h
.xdata$x:00009258                 db    1
.xdata$x:00009259                 db    0
.xdata$x:0000925A                 db    0
.xdata$x:0000925B                 db    0
.xdata$x:0000925C                 dd offset __unwindtable$??Bid@locale@std@@QAEIXZ
.xdata$x:00009260                 db    0
.xdata$x:00009261                 db    0
.xdata$x:00009262                 db    0
.xdata$x:00009263                 db    0
.xdata$x:00009264                 db    0
.xdata$x:00009265                 db    0
.xdata$x:00009266                 db    0
.xdata$x:00009267                 db    0
.xdata$x:00009268                 db    0
.xdata$x:00009269                 db    0
.xdata$x:0000926A                 db    0
.xdata$x:0000926B                 db    0
.xdata$x:0000926C                 db    0
.xdata$x:0000926D                 db    0
.xdata$x:0000926E                 db    0
.xdata$x:0000926F                 db    0
.xdata$x:00009270                 db    0
.xdata$x:00009271                 db    0
.xdata$x:00009272                 db    0
.xdata$x:00009273                 db    0
.xdata$x:00009274                 db    0
.xdata$x:00009275                 db    0
.xdata$x:00009276                 db    0
.xdata$x:00009277                 db    0
.xdata$x:00009277 _xdata$x        ends
.xdata$x:00009277
.xdata$x:00009278 ; ===========================================================================
.xdata$x:00009278
.xdata$x:00009278 ; Segment type: Pure data
.xdata$x:00009278 ; Segment permissions: Read
.xdata$x:00009278 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009278                 assume cs:_xdata$x
.xdata$x:00009278                 ;org 9278h
.xdata$x:00009278 ; COMDAT (pick associative to section at 4044)
.xdata$x:00009278 __unwindtable$??0facet@locale@std@@IAE@I@Z db 0FFh
.xdata$x:00009278                                         ; DATA XREF: .xdata$x:00009288o
.xdata$x:00009279                 db 0FFh
.xdata$x:0000927A                 db 0FFh
.xdata$x:0000927B                 db 0FFh
.xdata$x:0000927C                 dd offset __unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
.xdata$x:00009280 __ehfuncinfo$??0facet@locale@std@@IAE@I@Z db  22h ; "
.xdata$x:00009280                                         ; DATA XREF: __ehhandler$??0facet@locale@std@@IAE@I@Z+11o
.xdata$x:00009281                 db    5
.xdata$x:00009282                 db  93h ; ô
.xdata$x:00009283                 db  19h
.xdata$x:00009284                 db    1
.xdata$x:00009285                 db    0
.xdata$x:00009286                 db    0
.xdata$x:00009287                 db    0
.xdata$x:00009288                 dd offset __unwindtable$??0facet@locale@std@@IAE@I@Z
.xdata$x:0000928C                 db    0
.xdata$x:0000928D                 db    0
.xdata$x:0000928E                 db    0
.xdata$x:0000928F                 db    0
.xdata$x:00009290                 db    0
.xdata$x:00009291                 db    0
.xdata$x:00009292                 db    0
.xdata$x:00009293                 db    0
.xdata$x:00009294                 db    0
.xdata$x:00009295                 db    0
.xdata$x:00009296                 db    0
.xdata$x:00009297                 db    0
.xdata$x:00009298                 db    0
.xdata$x:00009299                 db    0
.xdata$x:0000929A                 db    0
.xdata$x:0000929B                 db    0
.xdata$x:0000929C                 db    0
.xdata$x:0000929D                 db    0
.xdata$x:0000929E                 db    0
.xdata$x:0000929F                 db    0
.xdata$x:000092A0                 db    0
.xdata$x:000092A1                 db    0
.xdata$x:000092A2                 db    0
.xdata$x:000092A3                 db    0
.xdata$x:000092A3 _xdata$x        ends
.xdata$x:000092A3
.xdata$x:000092A4 ; ===========================================================================
.xdata$x:000092A4
.xdata$x:000092A4 ; Segment type: Pure data
.xdata$x:000092A4 ; Segment permissions: Read
.xdata$x:000092A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092A4                 assume cs:_xdata$x
.xdata$x:000092A4                 ;org 92A4h
.xdata$x:000092A4 ; COMDAT (pick associative to section at 5138)
.xdata$x:000092A4 __unwindtable$??1facet@locale@std@@MAE@XZ db 0FFh
.xdata$x:000092A4                                         ; DATA XREF: .xdata$x:000092B4o
.xdata$x:000092A5                 db 0FFh
.xdata$x:000092A6                 db 0FFh
.xdata$x:000092A7                 db 0FFh
.xdata$x:000092A8                 dd offset __unwindfunclet$??1facet@locale@std@@MAE@XZ$0
.xdata$x:000092AC __ehfuncinfo$??1facet@locale@std@@MAE@XZ db  22h ; "
.xdata$x:000092AC                                         ; DATA XREF: __ehhandler$??1facet@locale@std@@MAE@XZ+11o
.xdata$x:000092AD                 db    5
.xdata$x:000092AE                 db  93h ; ô
.xdata$x:000092AF                 db  19h
.xdata$x:000092B0                 db    1
.xdata$x:000092B1                 db    0
.xdata$x:000092B2                 db    0
.xdata$x:000092B3                 db    0
.xdata$x:000092B4                 dd offset __unwindtable$??1facet@locale@std@@MAE@XZ
.xdata$x:000092B8                 db    0
.xdata$x:000092B9                 db    0
.xdata$x:000092BA                 db    0
.xdata$x:000092BB                 db    0
.xdata$x:000092BC                 db    0
.xdata$x:000092BD                 db    0
.xdata$x:000092BE                 db    0
.xdata$x:000092BF                 db    0
.xdata$x:000092C0                 db    0
.xdata$x:000092C1                 db    0
.xdata$x:000092C2                 db    0
.xdata$x:000092C3                 db    0
.xdata$x:000092C4                 db    0
.xdata$x:000092C5                 db    0
.xdata$x:000092C6                 db    0
.xdata$x:000092C7                 db    0
.xdata$x:000092C8                 db    0
.xdata$x:000092C9                 db    0
.xdata$x:000092CA                 db    0
.xdata$x:000092CB                 db    0
.xdata$x:000092CC                 db    0
.xdata$x:000092CD                 db    0
.xdata$x:000092CE                 db    0
.xdata$x:000092CF                 db    0
.xdata$x:000092CF _xdata$x        ends
.xdata$x:000092CF
.xdata$x:000092D0 ; ===========================================================================
.xdata$x:000092D0
.xdata$x:000092D0 ; Segment type: Pure data
.xdata$x:000092D0 ; Segment permissions: Read
.xdata$x:000092D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092D0                 assume cs:_xdata$x
.xdata$x:000092D0                 ;org 92D0h
.xdata$x:000092D0 ; COMDAT (pick associative to section at 3F60)
.xdata$x:000092D0 __unwindtable$??0ctype_base@std@@QAE@I@Z db 0FFh
.xdata$x:000092D0                                         ; DATA XREF: .xdata$x:000092E0o
.xdata$x:000092D1                 db 0FFh
.xdata$x:000092D2                 db 0FFh
.xdata$x:000092D3                 db 0FFh
.xdata$x:000092D4                 dd offset __unwindfunclet$??0ctype_base@std@@QAE@I@Z$0
.xdata$x:000092D8 __ehfuncinfo$??0ctype_base@std@@QAE@I@Z db  22h ; "
.xdata$x:000092D8                                         ; DATA XREF: __ehhandler$??0ctype_base@std@@QAE@I@Z+11o
.xdata$x:000092D9                 db    5
.xdata$x:000092DA                 db  93h ; ô
.xdata$x:000092DB                 db  19h
.xdata$x:000092DC                 db    1
.xdata$x:000092DD                 db    0
.xdata$x:000092DE                 db    0
.xdata$x:000092DF                 db    0
.xdata$x:000092E0                 dd offset __unwindtable$??0ctype_base@std@@QAE@I@Z
.xdata$x:000092E4                 db    0
.xdata$x:000092E5                 db    0
.xdata$x:000092E6                 db    0
.xdata$x:000092E7                 db    0
.xdata$x:000092E8                 db    0
.xdata$x:000092E9                 db    0
.xdata$x:000092EA                 db    0
.xdata$x:000092EB                 db    0
.xdata$x:000092EC                 db    0
.xdata$x:000092ED                 db    0
.xdata$x:000092EE                 db    0
.xdata$x:000092EF                 db    0
.xdata$x:000092F0                 db    0
.xdata$x:000092F1                 db    0
.xdata$x:000092F2                 db    0
.xdata$x:000092F3                 db    0
.xdata$x:000092F4                 db    0
.xdata$x:000092F5                 db    0
.xdata$x:000092F6                 db    0
.xdata$x:000092F7                 db    0
.xdata$x:000092F8                 db    0
.xdata$x:000092F9                 db    0
.xdata$x:000092FA                 db    0
.xdata$x:000092FB                 db    0
.xdata$x:000092FB _xdata$x        ends
.xdata$x:000092FB
.xdata$x:000092FC ; ===========================================================================
.xdata$x:000092FC
.xdata$x:000092FC ; Segment type: Pure data
.xdata$x:000092FC ; Segment permissions: Read
.xdata$x:000092FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092FC                 assume cs:_xdata$x
.xdata$x:000092FC                 ;org 92FCh
.xdata$x:000092FC ; COMDAT (pick associative to section at 50AC)
.xdata$x:000092FC __unwindtable$??1ctype_base@std@@UAE@XZ db 0FFh
.xdata$x:000092FC                                         ; DATA XREF: .xdata$x:0000930Co
.xdata$x:000092FD                 db 0FFh
.xdata$x:000092FE                 db 0FFh
.xdata$x:000092FF                 db 0FFh
.xdata$x:00009300                 dd offset __unwindfunclet$??1ctype_base@std@@UAE@XZ$0
.xdata$x:00009304 __ehfuncinfo$??1ctype_base@std@@UAE@XZ db  22h ; "
.xdata$x:00009304                                         ; DATA XREF: __ehhandler$??1ctype_base@std@@UAE@XZ+11o
.xdata$x:00009305                 db    5
.xdata$x:00009306                 db  93h ; ô
.xdata$x:00009307                 db  19h
.xdata$x:00009308                 db    1
.xdata$x:00009309                 db    0
.xdata$x:0000930A                 db    0
.xdata$x:0000930B                 db    0
.xdata$x:0000930C                 dd offset __unwindtable$??1ctype_base@std@@UAE@XZ
.xdata$x:00009310                 db    0
.xdata$x:00009311                 db    0
.xdata$x:00009312                 db    0
.xdata$x:00009313                 db    0
.xdata$x:00009314                 db    0
.xdata$x:00009315                 db    0
.xdata$x:00009316                 db    0
.xdata$x:00009317                 db    0
.xdata$x:00009318                 db    0
.xdata$x:00009319                 db    0
.xdata$x:0000931A                 db    0
.xdata$x:0000931B                 db    0
.xdata$x:0000931C                 db    0
.xdata$x:0000931D                 db    0
.xdata$x:0000931E                 db    0
.xdata$x:0000931F                 db    0
.xdata$x:00009320                 db    0
.xdata$x:00009321                 db    0
.xdata$x:00009322                 db    0
.xdata$x:00009323                 db    0
.xdata$x:00009324                 db    0
.xdata$x:00009325                 db    0
.xdata$x:00009326                 db    0
.xdata$x:00009327                 db    0
.xdata$x:00009327 _xdata$x        ends
.xdata$x:00009327
.xdata$x:00009328 ; ===========================================================================
.xdata$x:00009328
.xdata$x:00009328 ; Segment type: Pure data
.xdata$x:00009328 ; Segment permissions: Read
.xdata$x:00009328 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009328                 assume cs:_xdata$x
.xdata$x:00009328                 ;org 9328h
.xdata$x:00009328 ; COMDAT (pick associative to section at 35A4)
.xdata$x:00009328 __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db 0FFh
.xdata$x:00009328                                         ; DATA XREF: .xdata$x:00009338o
.xdata$x:00009329                 db 0FFh
.xdata$x:0000932A                 db 0FFh
.xdata$x:0000932B                 db 0FFh
.xdata$x:0000932C                 dd offset __unwindfunclet$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z$0
.xdata$x:00009330 __ehfuncinfo$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z db  22h ; "
.xdata$x:00009330                                         ; DATA XREF: __ehhandler$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z+11o
.xdata$x:00009331                 db    5
.xdata$x:00009332                 db  93h ; ô
.xdata$x:00009333                 db  19h
.xdata$x:00009334                 db    1
.xdata$x:00009335                 db    0
.xdata$x:00009336                 db    0
.xdata$x:00009337                 db    0
.xdata$x:00009338                 dd offset __unwindtable$??0?$ctype@_W@std@@QAE@ABV_Locinfo@1@I@Z
.xdata$x:0000933C                 db    0
.xdata$x:0000933D                 db    0
.xdata$x:0000933E                 db    0
.xdata$x:0000933F                 db    0
.xdata$x:00009340                 db    0
.xdata$x:00009341                 db    0
.xdata$x:00009342                 db    0
.xdata$x:00009343                 db    0
.xdata$x:00009344                 db    0
.xdata$x:00009345                 db    0
.xdata$x:00009346                 db    0
.xdata$x:00009347                 db    0
.xdata$x:00009348                 db    0
.xdata$x:00009349                 db    0
.xdata$x:0000934A                 db    0
.xdata$x:0000934B                 db    0
.xdata$x:0000934C                 db    0
.xdata$x:0000934D                 db    0
.xdata$x:0000934E                 db    0
.xdata$x:0000934F                 db    0
.xdata$x:00009350                 db    0
.xdata$x:00009351                 db    0
.xdata$x:00009352                 db    0
.xdata$x:00009353                 db    0
.xdata$x:00009353 _xdata$x        ends
.xdata$x:00009353
.xdata$x:00009354 ; ===========================================================================
.xdata$x:00009354
.xdata$x:00009354 ; Segment type: Pure data
.xdata$x:00009354 ; Segment permissions: Read
.xdata$x:00009354 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009354                 assume cs:_xdata$x
.xdata$x:00009354                 ;org 9354h
.xdata$x:00009354 ; COMDAT (pick associative to section at 635C)
.xdata$x:00009354 __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db 0FFh
.xdata$x:00009354                                         ; DATA XREF: .xdata$x:00009374o
.xdata$x:00009355                 db 0FFh
.xdata$x:00009356                 db 0FFh
.xdata$x:00009357                 db 0FFh
.xdata$x:00009358                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
.xdata$x:0000935C                 align 10h
.xdata$x:00009360                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:00009364                 db 0FFh
.xdata$x:00009365                 db 0FFh
.xdata$x:00009366                 db 0FFh
.xdata$x:00009367                 db 0FFh
.xdata$x:00009368                 dd offset __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
.xdata$x:0000936C __ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z db  22h ; "
.xdata$x:0000936C                                         ; DATA XREF: __ehhandler$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z+11o
.xdata$x:0000936D                 db    5
.xdata$x:0000936E                 db  93h ; ô
.xdata$x:0000936F                 db  19h
.xdata$x:00009370                 db    3
.xdata$x:00009371                 db    0
.xdata$x:00009372                 db    0
.xdata$x:00009373                 db    0
.xdata$x:00009374                 dd offset __unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
.xdata$x:00009378                 db    0
.xdata$x:00009379                 db    0
.xdata$x:0000937A                 db    0
.xdata$x:0000937B                 db    0
.xdata$x:0000937C                 db    0
.xdata$x:0000937D                 db    0
.xdata$x:0000937E                 db    0
.xdata$x:0000937F                 db    0
.xdata$x:00009380                 db    0
.xdata$x:00009381                 db    0
.xdata$x:00009382                 db    0
.xdata$x:00009383                 db    0
.xdata$x:00009384                 db    0
.xdata$x:00009385                 db    0
.xdata$x:00009386                 db    0
.xdata$x:00009387                 db    0
.xdata$x:00009388                 db    0
.xdata$x:00009389                 db    0
.xdata$x:0000938A                 db    0
.xdata$x:0000938B                 db    0
.xdata$x:0000938C                 db    0
.xdata$x:0000938D                 db    0
.xdata$x:0000938E                 db    0
.xdata$x:0000938F                 db    0
.xdata$x:0000938F _xdata$x        ends
.xdata$x:0000938F
.xdata$x:00009390 ; ===========================================================================
.xdata$x:00009390
.xdata$x:00009390 ; Segment type: Pure data
.xdata$x:00009390 ; Segment permissions: Read
.xdata$x:00009390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009390                 assume cs:_xdata$x
.xdata$x:00009390                 ;org 9390h
.xdata$x:00009390 ; COMDAT (pick associative to section at 4974)
.xdata$x:00009390 __unwindtable$??1?$ctype@_W@std@@MAE@XZ db 0FFh
.xdata$x:00009390                                         ; DATA XREF: .xdata$x:000093A0o
.xdata$x:00009391                 db 0FFh
.xdata$x:00009392                 db 0FFh
.xdata$x:00009393                 db 0FFh
.xdata$x:00009394                 dd offset __unwindfunclet$??1?$ctype@_W@std@@MAE@XZ$0
.xdata$x:00009398 __ehfuncinfo$??1?$ctype@_W@std@@MAE@XZ db  22h ; "
.xdata$x:00009398                                         ; DATA XREF: __ehhandler$??1?$ctype@_W@std@@MAE@XZ+11o
.xdata$x:00009399                 db    5
.xdata$x:0000939A                 db  93h ; ô
.xdata$x:0000939B                 db  19h
.xdata$x:0000939C                 db    1
.xdata$x:0000939D                 db    0
.xdata$x:0000939E                 db    0
.xdata$x:0000939F                 db    0
.xdata$x:000093A0                 dd offset __unwindtable$??1?$ctype@_W@std@@MAE@XZ
.xdata$x:000093A4                 db    0
.xdata$x:000093A5                 db    0
.xdata$x:000093A6                 db    0
.xdata$x:000093A7                 db    0
.xdata$x:000093A8                 db    0
.xdata$x:000093A9                 db    0
.xdata$x:000093AA                 db    0
.xdata$x:000093AB                 db    0
.xdata$x:000093AC                 db    0
.xdata$x:000093AD                 db    0
.xdata$x:000093AE                 db    0
.xdata$x:000093AF                 db    0
.xdata$x:000093B0                 db    0
.xdata$x:000093B1                 db    0
.xdata$x:000093B2                 db    0
.xdata$x:000093B3                 db    0
.xdata$x:000093B4                 db    0
.xdata$x:000093B5                 db    0
.xdata$x:000093B6                 db    0
.xdata$x:000093B7                 db    0
.xdata$x:000093B8                 db    0
.xdata$x:000093B9                 db    0
.xdata$x:000093BA                 db    0
.xdata$x:000093BB                 db    0
.xdata$x:000093BB _xdata$x        ends
.xdata$x:000093BB
.xdata$x:000093BC ; ===========================================================================
.xdata$x:000093BC
.xdata$x:000093BC ; Segment type: Pure data
.xdata$x:000093BC ; Segment permissions: Read
.xdata$x:000093BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000093BC                 assume cs:_xdata$x
.xdata$x:000093BC                 ;org 93BCh
.xdata$x:000093BC ; COMDAT (pick associative to section at 8918)
.xdata$x:000093BC __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db 0FFh
.xdata$x:000093BC                                         ; DATA XREF: .xdata$x:000093CCo
.xdata$x:000093BD                 db 0FFh
.xdata$x:000093BE                 db 0FFh
.xdata$x:000093BF                 db 0FFh
.xdata$x:000093C0                 dd offset __unwindfunclet$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
.xdata$x:000093C4 __ehfuncinfo$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ db  22h ; "
.xdata$x:000093C4                                         ; DATA XREF: __ehhandler$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ+11o
.xdata$x:000093C5                 db    5
.xdata$x:000093C6                 db  93h ; ô
.xdata$x:000093C7                 db  19h
.xdata$x:000093C8                 db    1
.xdata$x:000093C9                 db    0
.xdata$x:000093CA                 db    0
.xdata$x:000093CB                 db    0
.xdata$x:000093CC                 dd offset __unwindtable$?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
.xdata$x:000093D0                 db    0
.xdata$x:000093D1                 db    0
.xdata$x:000093D2                 db    0
.xdata$x:000093D3                 db    0
.xdata$x:000093D4                 db    0
.xdata$x:000093D5                 db    0
.xdata$x:000093D6                 db    0
.xdata$x:000093D7                 db    0
.xdata$x:000093D8                 db    0
.xdata$x:000093D9                 db    0
.xdata$x:000093DA                 db    0
.xdata$x:000093DB                 db    0
.xdata$x:000093DC                 db    0
.xdata$x:000093DD                 db    0
.xdata$x:000093DE                 db    0
.xdata$x:000093DF                 db    0
.xdata$x:000093E0                 db    0
.xdata$x:000093E1                 db    0
.xdata$x:000093E2                 db    0
.xdata$x:000093E3                 db    0
.xdata$x:000093E4                 db    0
.xdata$x:000093E5                 db    0
.xdata$x:000093E6                 db    0
.xdata$x:000093E7                 db    0
.xdata$x:000093E7 _xdata$x        ends
.xdata$x:000093E7
.xdata$x:000093E8 ; ===========================================================================
.xdata$x:000093E8
.xdata$x:000093E8 ; Segment type: Pure data
.xdata$x:000093E8 ; Segment permissions: Read
.xdata$x:000093E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000093E8                 assume cs:_xdata$x
.xdata$x:000093E8                 ;org 93E8h
.xdata$x:000093E8 ; COMDAT (pick associative to section at 6AF4)
.xdata$x:000093E8 __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db 0FFh
.xdata$x:000093E8                                         ; DATA XREF: .xdata$x:00009408o
.xdata$x:000093E9                 db 0FFh
.xdata$x:000093EA                 db 0FFh
.xdata$x:000093EB                 db 0FFh
.xdata$x:000093EC                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$2
.xdata$x:000093F0                 db    0
.xdata$x:000093F1                 db    0
.xdata$x:000093F2                 db    0
.xdata$x:000093F3                 db    0
.xdata$x:000093F4                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
.xdata$x:000093F8                 db    1
.xdata$x:000093F9                 db    0
.xdata$x:000093FA                 db    0
.xdata$x:000093FB                 db    0
.xdata$x:000093FC                 dd offset __unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
.xdata$x:00009400 __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z db  22h ; "
.xdata$x:00009400                                         ; DATA XREF: __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+1Bo
.xdata$x:00009401                 db    5
.xdata$x:00009402                 db  93h ; ô
.xdata$x:00009403                 db  19h
.xdata$x:00009404                 db    3
.xdata$x:00009405                 db    0
.xdata$x:00009406                 db    0
.xdata$x:00009407                 db    0
.xdata$x:00009408                 dd offset __unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
.xdata$x:0000940C                 db    0
.xdata$x:0000940D                 db    0
.xdata$x:0000940E                 db    0
.xdata$x:0000940F                 db    0
.xdata$x:00009410                 db    0
.xdata$x:00009411                 db    0
.xdata$x:00009412                 db    0
.xdata$x:00009413                 db    0
.xdata$x:00009414                 db    0
.xdata$x:00009415                 db    0
.xdata$x:00009416                 db    0
.xdata$x:00009417                 db    0
.xdata$x:00009418                 db    0
.xdata$x:00009419                 db    0
.xdata$x:0000941A                 db    0
.xdata$x:0000941B                 db    0
.xdata$x:0000941C                 db    0
.xdata$x:0000941D                 db    0
.xdata$x:0000941E                 db    0
.xdata$x:0000941F                 db    0
.xdata$x:00009420                 db    0
.xdata$x:00009421                 db    0
.xdata$x:00009422                 db    0
.xdata$x:00009423                 db    0
.xdata$x:00009423 _xdata$x        ends
.xdata$x:00009423
.xdata$x:00009424 ; ===========================================================================
.xdata$x:00009424
.xdata$x:00009424 ; Segment type: Pure data
.xdata$x:00009424 ; Segment permissions: Read
.xdata$x:00009424 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009424                 assume cs:_xdata$x
.xdata$x:00009424                 ;org 9424h
.xdata$x:00009424 ; COMDAT (pick associative to section at 3D44)
.xdata$x:00009424 __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db 0FFh
.xdata$x:00009424                                         ; DATA XREF: .xdata$x:0000944Co
.xdata$x:00009425                 db 0FFh
.xdata$x:00009426                 db 0FFh
.xdata$x:00009427                 db 0FFh
.xdata$x:00009428                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
.xdata$x:0000942C                 db 0FFh
.xdata$x:0000942D                 db 0FFh
.xdata$x:0000942E                 db 0FFh
.xdata$x:0000942F                 db 0FFh
.xdata$x:00009430                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
.xdata$x:00009434                 db    1
.xdata$x:00009435                 db    0
.xdata$x:00009436                 db    0
.xdata$x:00009437                 db    0
.xdata$x:00009438                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:0000943C                 db 0FFh
.xdata$x:0000943D                 db 0FFh
.xdata$x:0000943E                 db 0FFh
.xdata$x:0000943F                 db 0FFh
.xdata$x:00009440                 dd offset __unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
.xdata$x:00009444 __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z db  22h ; "
.xdata$x:00009444                                         ; DATA XREF: __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+1Bo
.xdata$x:00009445                 db    5
.xdata$x:00009446                 db  93h ; ô
.xdata$x:00009447                 db  19h
.xdata$x:00009448                 db    4
.xdata$x:00009449                 db    0
.xdata$x:0000944A                 db    0
.xdata$x:0000944B                 db    0
.xdata$x:0000944C                 dd offset __unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
.xdata$x:00009450                 db    0
.xdata$x:00009451                 db    0
.xdata$x:00009452                 db    0
.xdata$x:00009453                 db    0
.xdata$x:00009454                 db    0
.xdata$x:00009455                 db    0
.xdata$x:00009456                 db    0
.xdata$x:00009457                 db    0
.xdata$x:00009458                 db    0
.xdata$x:00009459                 db    0
.xdata$x:0000945A                 db    0
.xdata$x:0000945B                 db    0
.xdata$x:0000945C                 db    0
.xdata$x:0000945D                 db    0
.xdata$x:0000945E                 db    0
.xdata$x:0000945F                 db    0
.xdata$x:00009460                 db    0
.xdata$x:00009461                 db    0
.xdata$x:00009462                 db    0
.xdata$x:00009463                 db    0
.xdata$x:00009464                 db    0
.xdata$x:00009465                 db    0
.xdata$x:00009466                 db    0
.xdata$x:00009467                 db    0
.xdata$x:00009467 _xdata$x        ends
.xdata$x:00009467
.xdata$x:00009468 ; ===========================================================================
.xdata$x:00009468
.xdata$x:00009468 ; Segment type: Pure data
.xdata$x:00009468 ; Segment permissions: Read
.xdata$x:00009468 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009468                 assume cs:_xdata$x
.xdata$x:00009468                 ;org 9468h
.xdata$x:00009468 ; COMDAT (pick associative to section at 4FCC)
.xdata$x:00009468 __unwindtable$??1_System_error@std@@UAE@XZ db 0FFh
.xdata$x:00009468                                         ; DATA XREF: .xdata$x:00009478o
.xdata$x:00009469                 db 0FFh
.xdata$x:0000946A                 db 0FFh
.xdata$x:0000946B                 db 0FFh
.xdata$x:0000946C                 dd offset __unwindfunclet$??1_System_error@std@@UAE@XZ$0
.xdata$x:00009470 __ehfuncinfo$??1_System_error@std@@UAE@XZ db  22h ; "
.xdata$x:00009470                                         ; DATA XREF: __ehhandler$??1_System_error@std@@UAE@XZ+11o
.xdata$x:00009471                 db    5
.xdata$x:00009472                 db  93h ; ô
.xdata$x:00009473                 db  19h
.xdata$x:00009474                 db    1
.xdata$x:00009475                 db    0
.xdata$x:00009476                 db    0
.xdata$x:00009477                 db    0
.xdata$x:00009478                 dd offset __unwindtable$??1_System_error@std@@UAE@XZ
.xdata$x:0000947C                 db    0
.xdata$x:0000947D                 db    0
.xdata$x:0000947E                 db    0
.xdata$x:0000947F                 db    0
.xdata$x:00009480                 db    0
.xdata$x:00009481                 db    0
.xdata$x:00009482                 db    0
.xdata$x:00009483                 db    0
.xdata$x:00009484                 db    0
.xdata$x:00009485                 db    0
.xdata$x:00009486                 db    0
.xdata$x:00009487                 db    0
.xdata$x:00009488                 db    0
.xdata$x:00009489                 db    0
.xdata$x:0000948A                 db    0
.xdata$x:0000948B                 db    0
.xdata$x:0000948C                 db    0
.xdata$x:0000948D                 db    0
.xdata$x:0000948E                 db    0
.xdata$x:0000948F                 db    0
.xdata$x:00009490                 db    0
.xdata$x:00009491                 db    0
.xdata$x:00009492                 db    0
.xdata$x:00009493                 db    0
.xdata$x:00009493 _xdata$x        ends
.xdata$x:00009493
.xdata$x:00009494 ; ===========================================================================
.xdata$x:00009494
.xdata$x:00009494 ; Segment type: Pure data
.xdata$x:00009494 ; Segment permissions: Read
.xdata$x:00009494 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009494                 assume cs:_xdata$x
.xdata$x:00009494                 ;org 9494h
.xdata$x:00009494 ; COMDAT (pick associative to section at 3E50)
.xdata$x:00009494 __unwindtable$??0_System_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009494                                         ; DATA XREF: .xdata$x:000094A4o
.xdata$x:00009495                 db 0FFh
.xdata$x:00009496                 db 0FFh
.xdata$x:00009497                 db 0FFh
.xdata$x:00009498                 dd offset __unwindfunclet$??0_System_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000949C __ehfuncinfo$??0_System_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000949C                                         ; DATA XREF: __ehhandler$??0_System_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000949D                 db    5
.xdata$x:0000949E                 db  93h ; ô
.xdata$x:0000949F                 db  19h
.xdata$x:000094A0                 db    1
.xdata$x:000094A1                 db    0
.xdata$x:000094A2                 db    0
.xdata$x:000094A3                 db    0
.xdata$x:000094A4                 dd offset __unwindtable$??0_System_error@std@@QAE@ABV01@@Z
.xdata$x:000094A8                 align 20h
.xdata$x:000094A8 _xdata$x        ends
.xdata$x:000094A8
.xdata$x:000094C0 ; ===========================================================================
.xdata$x:000094C0
.xdata$x:000094C0 ; Segment type: Pure data
.xdata$x:000094C0 ; Segment permissions: Read
.xdata$x:000094C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000094C0                 assume cs:_xdata$x
.xdata$x:000094C0                 ;org 94C0h
.xdata$x:000094C0 ; COMDAT (pick associative to section at 45C0)
.xdata$x:000094C0 __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z db 0FFh
.xdata$x:000094C0                                         ; DATA XREF: .xdata$x:000094E0o
.xdata$x:000094C1                 db 0FFh
.xdata$x:000094C2                 db 0FFh
.xdata$x:000094C3                 db 0FFh
.xdata$x:000094C4                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
.xdata$x:000094C8                 db    0
.xdata$x:000094C9                 db    0
.xdata$x:000094CA                 db    0
.xdata$x:000094CB                 db    0
.xdata$x:000094CC                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:000094D0                 db 0FFh
.xdata$x:000094D1                 db 0FFh
.xdata$x:000094D2                 db 0FFh
.xdata$x:000094D3                 db 0FFh
.xdata$x:000094D4                 dd offset __unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$1
.xdata$x:000094D8 __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z db  22h ; "
.xdata$x:000094D8                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z+1Bo
.xdata$x:000094D9                 db    5
.xdata$x:000094DA                 db  93h ; ô
.xdata$x:000094DB                 db  19h
.xdata$x:000094DC                 db    3
.xdata$x:000094DD                 db    0
.xdata$x:000094DE                 db    0
.xdata$x:000094DF                 db    0
.xdata$x:000094E0                 dd offset __unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
.xdata$x:000094E4                 db    0
.xdata$x:000094E5                 db    0
.xdata$x:000094E6                 db    0
.xdata$x:000094E7                 db    0
.xdata$x:000094E8                 db    0
.xdata$x:000094E9                 db    0
.xdata$x:000094EA                 db    0
.xdata$x:000094EB                 db    0
.xdata$x:000094EC                 db    0
.xdata$x:000094ED                 db    0
.xdata$x:000094EE                 db    0
.xdata$x:000094EF                 db    0
.xdata$x:000094F0                 db    0
.xdata$x:000094F1                 db    0
.xdata$x:000094F2                 db    0
.xdata$x:000094F3                 db    0
.xdata$x:000094F4                 db    0
.xdata$x:000094F5                 db    0
.xdata$x:000094F6                 db    0
.xdata$x:000094F7                 db    0
.xdata$x:000094F8                 db    0
.xdata$x:000094F9                 db    0
.xdata$x:000094FA                 db    0
.xdata$x:000094FB                 db    0
.xdata$x:000094FB _xdata$x        ends
.xdata$x:000094FB
.xdata$x:000094FC ; ===========================================================================
.xdata$x:000094FC
.xdata$x:000094FC ; Segment type: Pure data
.xdata$x:000094FC ; Segment permissions: Read
.xdata$x:000094FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000094FC                 assume cs:_xdata$x
.xdata$x:000094FC                 ;org 94FCh
.xdata$x:000094FC ; COMDAT (pick associative to section at 53B8)
.xdata$x:000094FC __unwindtable$??1system_error@std@@UAE@XZ db 0FFh
.xdata$x:000094FC                                         ; DATA XREF: .xdata$x:0000950Co
.xdata$x:000094FD                 db 0FFh
.xdata$x:000094FE                 db 0FFh
.xdata$x:000094FF                 db 0FFh
.xdata$x:00009500                 dd offset __unwindfunclet$??1system_error@std@@UAE@XZ$0
.xdata$x:00009504 __ehfuncinfo$??1system_error@std@@UAE@XZ db  22h ; "
.xdata$x:00009504                                         ; DATA XREF: __ehhandler$??1system_error@std@@UAE@XZ+11o
.xdata$x:00009505                 db    5
.xdata$x:00009506                 db  93h ; ô
.xdata$x:00009507                 db  19h
.xdata$x:00009508                 db    1
.xdata$x:00009509                 db    0
.xdata$x:0000950A                 db    0
.xdata$x:0000950B                 db    0
.xdata$x:0000950C                 dd offset __unwindtable$??1system_error@std@@UAE@XZ
.xdata$x:00009510                 db    0
.xdata$x:00009511                 db    0
.xdata$x:00009512                 db    0
.xdata$x:00009513                 db    0
.xdata$x:00009514                 db    0
.xdata$x:00009515                 db    0
.xdata$x:00009516                 db    0
.xdata$x:00009517                 db    0
.xdata$x:00009518                 db    0
.xdata$x:00009519                 db    0
.xdata$x:0000951A                 db    0
.xdata$x:0000951B                 db    0
.xdata$x:0000951C                 db    0
.xdata$x:0000951D                 db    0
.xdata$x:0000951E                 db    0
.xdata$x:0000951F                 db    0
.xdata$x:00009520                 db    0
.xdata$x:00009521                 db    0
.xdata$x:00009522                 db    0
.xdata$x:00009523                 db    0
.xdata$x:00009524                 db    0
.xdata$x:00009525                 db    0
.xdata$x:00009526                 db    0
.xdata$x:00009527                 db    0
.xdata$x:00009527 _xdata$x        ends
.xdata$x:00009527
.xdata$x:00009528 ; ===========================================================================
.xdata$x:00009528
.xdata$x:00009528 ; Segment type: Pure data
.xdata$x:00009528 ; Segment permissions: Read
.xdata$x:00009528 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009528                 assume cs:_xdata$x
.xdata$x:00009528                 ;org 9528h
.xdata$x:00009528 ; COMDAT (pick associative to section at 453C)
.xdata$x:00009528 __unwindtable$??0system_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009528                                         ; DATA XREF: .xdata$x:00009538o
.xdata$x:00009529                 db 0FFh
.xdata$x:0000952A                 db 0FFh
.xdata$x:0000952B                 db 0FFh
.xdata$x:0000952C                 dd offset __unwindfunclet$??0system_error@std@@QAE@ABV01@@Z$0
.xdata$x:00009530 __ehfuncinfo$??0system_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00009530                                         ; DATA XREF: __ehhandler$??0system_error@std@@QAE@ABV01@@Z+11o
.xdata$x:00009531                 db    5
.xdata$x:00009532                 db  93h ; ô
.xdata$x:00009533                 db  19h
.xdata$x:00009534                 db    1
.xdata$x:00009535                 db    0
.xdata$x:00009536                 db    0
.xdata$x:00009537                 db    0
.xdata$x:00009538                 dd offset __unwindtable$??0system_error@std@@QAE@ABV01@@Z
.xdata$x:0000953C                 db    0
.xdata$x:0000953D                 db    0
.xdata$x:0000953E                 db    0
.xdata$x:0000953F                 db    0
.xdata$x:00009540                 db    0
.xdata$x:00009541                 db    0
.xdata$x:00009542                 db    0
.xdata$x:00009543                 db    0
.xdata$x:00009544                 db    0
.xdata$x:00009545                 db    0
.xdata$x:00009546                 db    0
.xdata$x:00009547                 db    0
.xdata$x:00009548                 db    0
.xdata$x:00009549                 db    0
.xdata$x:0000954A                 db    0
.xdata$x:0000954B                 db    0
.xdata$x:0000954C                 db    0
.xdata$x:0000954D                 db    0
.xdata$x:0000954E                 db    0
.xdata$x:0000954F                 db    0
.xdata$x:00009550                 db    0
.xdata$x:00009551                 db    0
.xdata$x:00009552                 db    0
.xdata$x:00009553                 db    0
.xdata$x:00009553 _xdata$x        ends
.xdata$x:00009553
.xdata$x:00009554 ; ===========================================================================
.xdata$x:00009554
.xdata$x:00009554 ; Segment type: Pure data
.xdata$x:00009554 ; Segment permissions: Read
.xdata$x:00009554 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009554                 assume cs:_xdata$x
.xdata$x:00009554                 ;org 9554h
.xdata$x:00009554 ; COMDAT (pick associative to section at 3A44)
.xdata$x:00009554 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00009554                                         ; DATA XREF: .xdata$x:00009564o
.xdata$x:00009555                 db 0FFh
.xdata$x:00009556                 db 0FFh
.xdata$x:00009557                 db 0FFh
.xdata$x:00009558                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000955C __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000955C                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000955D                 db    5
.xdata$x:0000955E                 db  93h ; ô
.xdata$x:0000955F                 db  19h
.xdata$x:00009560                 db    1
.xdata$x:00009561                 db    0
.xdata$x:00009562                 db    0
.xdata$x:00009563                 db    0
.xdata$x:00009564                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:00009568                 align 20h
.xdata$x:00009568 _xdata$x        ends
.xdata$x:00009568
.xdata$x:00009580 ; ===========================================================================
.xdata$x:00009580
.xdata$x:00009580 ; Segment type: Pure data
.xdata$x:00009580 ; Segment permissions: Read
.xdata$x:00009580 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009580                 assume cs:_xdata$x
.xdata$x:00009580                 ;org 9580h
.xdata$x:00009580 ; COMDAT (pick associative to section at 86E4)
.xdata$x:00009580 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009580                                         ; DATA XREF: .xdata$x:00009590o
.xdata$x:00009581                 db 0FFh
.xdata$x:00009582                 db 0FFh
.xdata$x:00009583                 db 0FFh
.xdata$x:00009584                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009588 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009588                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009589                 db    5
.xdata$x:0000958A                 db  93h ; ô
.xdata$x:0000958B                 db  19h
.xdata$x:0000958C                 db    1
.xdata$x:0000958D                 db    0
.xdata$x:0000958E                 db    0
.xdata$x:0000958F                 db    0
.xdata$x:00009590                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009594                 db    0
.xdata$x:00009595                 db    0
.xdata$x:00009596                 db    0
.xdata$x:00009597                 db    0
.xdata$x:00009598                 db    0
.xdata$x:00009599                 db    0
.xdata$x:0000959A                 db    0
.xdata$x:0000959B                 db    0
.xdata$x:0000959C                 db    0
.xdata$x:0000959D                 db    0
.xdata$x:0000959E                 db    0
.xdata$x:0000959F                 db    0
.xdata$x:000095A0                 db    0
.xdata$x:000095A1                 db    0
.xdata$x:000095A2                 db    0
.xdata$x:000095A3                 db    0
.xdata$x:000095A4                 db    0
.xdata$x:000095A5                 db    0
.xdata$x:000095A6                 db    0
.xdata$x:000095A7                 db    0
.xdata$x:000095A8                 db    0
.xdata$x:000095A9                 db    0
.xdata$x:000095AA                 db    0
.xdata$x:000095AB                 db    0
.xdata$x:000095AB _xdata$x        ends
.xdata$x:000095AB
.xdata$x:000095AC ; ===========================================================================
.xdata$x:000095AC
.xdata$x:000095AC ; Segment type: Pure data
.xdata$x:000095AC ; Segment permissions: Read
.xdata$x:000095AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000095AC                 assume cs:_xdata$x
.xdata$x:000095AC                 ;org 95ACh
.xdata$x:000095AC ; COMDAT (pick associative to section at 4D28)
.xdata$x:000095AC __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:000095AC                                         ; DATA XREF: .xdata$x:000095BCo
.xdata$x:000095AD                 db 0FFh
.xdata$x:000095AE                 db 0FFh
.xdata$x:000095AF                 db 0FFh
.xdata$x:000095B0                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:000095B4 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:000095B4                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:000095B5                 db    5
.xdata$x:000095B6                 db  93h ; ô
.xdata$x:000095B7                 db  19h
.xdata$x:000095B8                 db    1
.xdata$x:000095B9                 db    0
.xdata$x:000095BA                 db    0
.xdata$x:000095BB                 db    0
.xdata$x:000095BC                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:000095C0                 db    0
.xdata$x:000095C1                 db    0
.xdata$x:000095C2                 db    0
.xdata$x:000095C3                 db    0
.xdata$x:000095C4                 db    0
.xdata$x:000095C5                 db    0
.xdata$x:000095C6                 db    0
.xdata$x:000095C7                 db    0
.xdata$x:000095C8                 db    0
.xdata$x:000095C9                 db    0
.xdata$x:000095CA                 db    0
.xdata$x:000095CB                 db    0
.xdata$x:000095CC                 db    0
.xdata$x:000095CD                 db    0
.xdata$x:000095CE                 db    0
.xdata$x:000095CF                 db    0
.xdata$x:000095D0                 db    0
.xdata$x:000095D1                 db    0
.xdata$x:000095D2                 db    0
.xdata$x:000095D3                 db    0
.xdata$x:000095D4                 db    0
.xdata$x:000095D5                 db    0
.xdata$x:000095D6                 db    0
.xdata$x:000095D7                 db    0
.xdata$x:000095D7 _xdata$x        ends
.xdata$x:000095D7
.xdata$x:000095D8 ; ===========================================================================
.xdata$x:000095D8
.xdata$x:000095D8 ; Segment type: Pure data
.xdata$x:000095D8 ; Segment permissions: Read
.xdata$x:000095D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000095D8                 assume cs:_xdata$x
.xdata$x:000095D8                 ;org 95D8h
.xdata$x:000095D8 ; COMDAT (pick associative to section at 3AC0)
.xdata$x:000095D8 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000095D8                                         ; DATA XREF: .xdata$x:000095E8o
.xdata$x:000095D9                 db 0FFh
.xdata$x:000095DA                 db 0FFh
.xdata$x:000095DB                 db 0FFh
.xdata$x:000095DC                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:000095E0 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000095E0                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:000095E1                 db    5
.xdata$x:000095E2                 db  93h ; ô
.xdata$x:000095E3                 db  19h
.xdata$x:000095E4                 db    1
.xdata$x:000095E5                 db    0
.xdata$x:000095E6                 db    0
.xdata$x:000095E7                 db    0
.xdata$x:000095E8                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:000095EC                 db    0
.xdata$x:000095ED                 db    0
.xdata$x:000095EE                 db    0
.xdata$x:000095EF                 db    0
.xdata$x:000095F0                 db    0
.xdata$x:000095F1                 db    0
.xdata$x:000095F2                 db    0
.xdata$x:000095F3                 db    0
.xdata$x:000095F4                 db    0
.xdata$x:000095F5                 db    0
.xdata$x:000095F6                 db    0
.xdata$x:000095F7                 db    0
.xdata$x:000095F8                 db    0
.xdata$x:000095F9                 db    0
.xdata$x:000095FA                 db    0
.xdata$x:000095FB                 db    0
.xdata$x:000095FC                 db    0
.xdata$x:000095FD                 db    0
.xdata$x:000095FE                 db    0
.xdata$x:000095FF                 db    0
.xdata$x:00009600                 db    0
.xdata$x:00009601                 db    0
.xdata$x:00009602                 db    0
.xdata$x:00009603                 db    0
.xdata$x:00009603 _xdata$x        ends
.xdata$x:00009603
.xdata$x:00009604 ; ===========================================================================
.xdata$x:00009604
.xdata$x:00009604 ; Segment type: Pure data
.xdata$x:00009604 ; Segment permissions: Read
.xdata$x:00009604 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009604                 assume cs:_xdata$x
.xdata$x:00009604                 ;org 9604h
.xdata$x:00009604 ; COMDAT (pick associative to section at 879C)
.xdata$x:00009604 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009604                                         ; DATA XREF: .xdata$x:00009614o
.xdata$x:00009605                 db 0FFh
.xdata$x:00009606                 db 0FFh
.xdata$x:00009607                 db 0FFh
.xdata$x:00009608                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000960C __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000960C                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000960D                 db    5
.xdata$x:0000960E                 db  93h ; ô
.xdata$x:0000960F                 db  19h
.xdata$x:00009610                 db    1
.xdata$x:00009611                 db    0
.xdata$x:00009612                 db    0
.xdata$x:00009613                 db    0
.xdata$x:00009614                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009618                 db    0
.xdata$x:00009619                 db    0
.xdata$x:0000961A                 db    0
.xdata$x:0000961B                 db    0
.xdata$x:0000961C                 db    0
.xdata$x:0000961D                 db    0
.xdata$x:0000961E                 db    0
.xdata$x:0000961F                 db    0
.xdata$x:00009620                 db    0
.xdata$x:00009621                 db    0
.xdata$x:00009622                 db    0
.xdata$x:00009623                 db    0
.xdata$x:00009624                 db    0
.xdata$x:00009625                 db    0
.xdata$x:00009626                 db    0
.xdata$x:00009627                 db    0
.xdata$x:00009628                 db    0
.xdata$x:00009629                 db    0
.xdata$x:0000962A                 db    0
.xdata$x:0000962B                 db    0
.xdata$x:0000962C                 db    0
.xdata$x:0000962D                 db    0
.xdata$x:0000962E                 db    0
.xdata$x:0000962F                 db    0
.xdata$x:0000962F _xdata$x        ends
.xdata$x:0000962F
.xdata$x:00009630 ; ===========================================================================
.xdata$x:00009630
.xdata$x:00009630 ; Segment type: Pure data
.xdata$x:00009630 ; Segment permissions: Read
.xdata$x:00009630 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009630                 assume cs:_xdata$x
.xdata$x:00009630                 ;org 9630h
.xdata$x:00009630 ; COMDAT (pick associative to section at 4D98)
.xdata$x:00009630 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009630                                         ; DATA XREF: .xdata$x:00009640o
.xdata$x:00009631                 db 0FFh
.xdata$x:00009632                 db 0FFh
.xdata$x:00009633                 db 0FFh
.xdata$x:00009634                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00009638 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009638                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00009639                 db    5
.xdata$x:0000963A                 db  93h ; ô
.xdata$x:0000963B                 db  19h
.xdata$x:0000963C                 db    1
.xdata$x:0000963D                 db    0
.xdata$x:0000963E                 db    0
.xdata$x:0000963F                 db    0
.xdata$x:00009640                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:00009644                 db    0
.xdata$x:00009645                 db    0
.xdata$x:00009646                 db    0
.xdata$x:00009647                 db    0
.xdata$x:00009648                 db    0
.xdata$x:00009649                 db    0
.xdata$x:0000964A                 db    0
.xdata$x:0000964B                 db    0
.xdata$x:0000964C                 db    0
.xdata$x:0000964D                 db    0
.xdata$x:0000964E                 db    0
.xdata$x:0000964F                 db    0
.xdata$x:00009650                 db    0
.xdata$x:00009651                 db    0
.xdata$x:00009652                 db    0
.xdata$x:00009653                 db    0
.xdata$x:00009654                 db    0
.xdata$x:00009655                 db    0
.xdata$x:00009656                 db    0
.xdata$x:00009657                 db    0
.xdata$x:00009658                 db    0
.xdata$x:00009659                 db    0
.xdata$x:0000965A                 db    0
.xdata$x:0000965B                 db    0
.xdata$x:0000965B _xdata$x        ends
.xdata$x:0000965B
.xdata$x:0000965C ; ===========================================================================
.xdata$x:0000965C
.xdata$x:0000965C ; Segment type: Pure data
.xdata$x:0000965C ; Segment permissions: Read
.xdata$x:0000965C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000965C                 assume cs:_xdata$x
.xdata$x:0000965C                 ;org 965Ch
.xdata$x:0000965C ; COMDAT (pick associative to section at 3EE4)
.xdata$x:0000965C __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000965C                                         ; DATA XREF: .xdata$x:0000966Co
.xdata$x:0000965D                 db 0FFh
.xdata$x:0000965E                 db 0FFh
.xdata$x:0000965F                 db 0FFh
.xdata$x:00009660                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:00009664 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00009664                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:00009665                 db    5
.xdata$x:00009666                 db  93h ; ô
.xdata$x:00009667                 db  19h
.xdata$x:00009668                 db    1
.xdata$x:00009669                 db    0
.xdata$x:0000966A                 db    0
.xdata$x:0000966B                 db    0
.xdata$x:0000966C                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00009670                 db    0
.xdata$x:00009671                 db    0
.xdata$x:00009672                 db    0
.xdata$x:00009673                 db    0
.xdata$x:00009674                 db    0
.xdata$x:00009675                 db    0
.xdata$x:00009676                 db    0
.xdata$x:00009677                 db    0
.xdata$x:00009678                 db    0
.xdata$x:00009679                 db    0
.xdata$x:0000967A                 db    0
.xdata$x:0000967B                 db    0
.xdata$x:0000967C                 db    0
.xdata$x:0000967D                 db    0
.xdata$x:0000967E                 db    0
.xdata$x:0000967F                 db    0
.xdata$x:00009680                 db    0
.xdata$x:00009681                 db    0
.xdata$x:00009682                 db    0
.xdata$x:00009683                 db    0
.xdata$x:00009684                 db    0
.xdata$x:00009685                 db    0
.xdata$x:00009686                 db    0
.xdata$x:00009687                 db    0
.xdata$x:00009687 _xdata$x        ends
.xdata$x:00009687
.xdata$x:00009688 ; ===========================================================================
.xdata$x:00009688
.xdata$x:00009688 ; Segment type: Pure data
.xdata$x:00009688 ; Segment permissions: Read
.xdata$x:00009688 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009688                 assume cs:_xdata$x
.xdata$x:00009688                 ;org 9688h
.xdata$x:00009688 ; COMDAT (pick associative to section at 8860)
.xdata$x:00009688 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009688                                         ; DATA XREF: .xdata$x:00009698o
.xdata$x:00009689                 db 0FFh
.xdata$x:0000968A                 db 0FFh
.xdata$x:0000968B                 db 0FFh
.xdata$x:0000968C                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009690 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009690                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009691                 db    5
.xdata$x:00009692                 db  93h ; ô
.xdata$x:00009693                 db  19h
.xdata$x:00009694                 db    1
.xdata$x:00009695                 db    0
.xdata$x:00009696                 db    0
.xdata$x:00009697                 db    0
.xdata$x:00009698                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000969C                 db    0
.xdata$x:0000969D                 db    0
.xdata$x:0000969E                 db    0
.xdata$x:0000969F                 db    0
.xdata$x:000096A0                 db    0
.xdata$x:000096A1                 db    0
.xdata$x:000096A2                 db    0
.xdata$x:000096A3                 db    0
.xdata$x:000096A4                 db    0
.xdata$x:000096A5                 db    0
.xdata$x:000096A6                 db    0
.xdata$x:000096A7                 db    0
.xdata$x:000096A8                 db    0
.xdata$x:000096A9                 db    0
.xdata$x:000096AA                 db    0
.xdata$x:000096AB                 db    0
.xdata$x:000096AC                 db    0
.xdata$x:000096AD                 db    0
.xdata$x:000096AE                 db    0
.xdata$x:000096AF                 db    0
.xdata$x:000096B0                 db    0
.xdata$x:000096B1                 db    0
.xdata$x:000096B2                 db    0
.xdata$x:000096B3                 db    0
.xdata$x:000096B3 _xdata$x        ends
.xdata$x:000096B3
.xdata$x:000096B4 ; ===========================================================================
.xdata$x:000096B4
.xdata$x:000096B4 ; Segment type: Pure data
.xdata$x:000096B4 ; Segment permissions: Read
.xdata$x:000096B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000096B4                 assume cs:_xdata$x
.xdata$x:000096B4                 ;org 96B4h
.xdata$x:000096B4 ; COMDAT (pick associative to section at 503C)
.xdata$x:000096B4 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:000096B4                                         ; DATA XREF: .xdata$x:000096C4o
.xdata$x:000096B5                 db 0FFh
.xdata$x:000096B6                 db 0FFh
.xdata$x:000096B7                 db 0FFh
.xdata$x:000096B8                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:000096BC __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:000096BC                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:000096BD                 db    5
.xdata$x:000096BE                 db  93h ; ô
.xdata$x:000096BF                 db  19h
.xdata$x:000096C0                 db    1
.xdata$x:000096C1                 db    0
.xdata$x:000096C2                 db    0
.xdata$x:000096C3                 db    0
.xdata$x:000096C4                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:000096C8                 align 20h
.xdata$x:000096C8 _xdata$x        ends
.xdata$x:000096C8
.xdata$x:000096E0 ; ===========================================================================
.xdata$x:000096E0
.xdata$x:000096E0 ; Segment type: Pure data
.xdata$x:000096E0 ; Segment permissions: Read
.xdata$x:000096E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000096E0                 assume cs:_xdata$x
.xdata$x:000096E0                 ;org 96E0h
.xdata$x:000096E0 ; COMDAT (pick associative to section at 4158)
.xdata$x:000096E0 __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db 0FFh
.xdata$x:000096E0                                         ; DATA XREF: .xdata$x:000096F0o
.xdata$x:000096E1                 db 0FFh
.xdata$x:000096E2                 db 0FFh
.xdata$x:000096E3                 db 0FFh
.xdata$x:000096E4                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
.xdata$x:000096E8 __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z db  22h ; "
.xdata$x:000096E8                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z+11o
.xdata$x:000096E9                 db    5
.xdata$x:000096EA                 db  93h ; ô
.xdata$x:000096EB                 db  19h
.xdata$x:000096EC                 db    1
.xdata$x:000096ED                 db    0
.xdata$x:000096EE                 db    0
.xdata$x:000096EF                 db    0
.xdata$x:000096F0                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
.xdata$x:000096F4                 db    0
.xdata$x:000096F5                 db    0
.xdata$x:000096F6                 db    0
.xdata$x:000096F7                 db    0
.xdata$x:000096F8                 db    0
.xdata$x:000096F9                 db    0
.xdata$x:000096FA                 db    0
.xdata$x:000096FB                 db    0
.xdata$x:000096FC                 db    0
.xdata$x:000096FD                 db    0
.xdata$x:000096FE                 db    0
.xdata$x:000096FF                 db    0
.xdata$x:00009700                 db    0
.xdata$x:00009701                 db    0
.xdata$x:00009702                 db    0
.xdata$x:00009703                 db    0
.xdata$x:00009704                 db    0
.xdata$x:00009705                 db    0
.xdata$x:00009706                 db    0
.xdata$x:00009707                 db    0
.xdata$x:00009708                 db    0
.xdata$x:00009709                 db    0
.xdata$x:0000970A                 db    0
.xdata$x:0000970B                 db    0
.xdata$x:0000970B _xdata$x        ends
.xdata$x:0000970B
.xdata$x:0000970C ; ===========================================================================
.xdata$x:0000970C
.xdata$x:0000970C ; Segment type: Pure data
.xdata$x:0000970C ; Segment permissions: Read
.xdata$x:0000970C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000970C                 assume cs:_xdata$x
.xdata$x:0000970C                 ;org 970Ch
.xdata$x:0000970C ; COMDAT (pick associative to section at 51B0)
.xdata$x:0000970C __unwindtable$??1failure@ios_base@std@@UAE@XZ db 0FFh
.xdata$x:0000970C                                         ; DATA XREF: .xdata$x:0000971Co
.xdata$x:0000970D                 db 0FFh
.xdata$x:0000970E                 db 0FFh
.xdata$x:0000970F                 db 0FFh
.xdata$x:00009710                 dd offset __unwindfunclet$??1failure@ios_base@std@@UAE@XZ$0
.xdata$x:00009714 __ehfuncinfo$??1failure@ios_base@std@@UAE@XZ db  22h ; "
.xdata$x:00009714                                         ; DATA XREF: __ehhandler$??1failure@ios_base@std@@UAE@XZ+11o
.xdata$x:00009715                 db    5
.xdata$x:00009716                 db  93h ; ô
.xdata$x:00009717                 db  19h
.xdata$x:00009718                 db    1
.xdata$x:00009719                 db    0
.xdata$x:0000971A                 db    0
.xdata$x:0000971B                 db    0
.xdata$x:0000971C                 dd offset __unwindtable$??1failure@ios_base@std@@UAE@XZ
.xdata$x:00009720                 db    0
.xdata$x:00009721                 db    0
.xdata$x:00009722                 db    0
.xdata$x:00009723                 db    0
.xdata$x:00009724                 db    0
.xdata$x:00009725                 db    0
.xdata$x:00009726                 db    0
.xdata$x:00009727                 db    0
.xdata$x:00009728                 db    0
.xdata$x:00009729                 db    0
.xdata$x:0000972A                 db    0
.xdata$x:0000972B                 db    0
.xdata$x:0000972C                 db    0
.xdata$x:0000972D                 db    0
.xdata$x:0000972E                 db    0
.xdata$x:0000972F                 db    0
.xdata$x:00009730                 db    0
.xdata$x:00009731                 db    0
.xdata$x:00009732                 db    0
.xdata$x:00009733                 db    0
.xdata$x:00009734                 db    0
.xdata$x:00009735                 db    0
.xdata$x:00009736                 db    0
.xdata$x:00009737                 db    0
.xdata$x:00009737 _xdata$x        ends
.xdata$x:00009737
.xdata$x:00009738 ; ===========================================================================
.xdata$x:00009738
.xdata$x:00009738 ; Segment type: Pure data
.xdata$x:00009738 ; Segment permissions: Read
.xdata$x:00009738 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009738                 assume cs:_xdata$x
.xdata$x:00009738                 ;org 9738h
.xdata$x:00009738 ; COMDAT (pick associative to section at 40D4)
.xdata$x:00009738 __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z db 0FFh
.xdata$x:00009738                                         ; DATA XREF: .xdata$x:00009748o
.xdata$x:00009739                 db 0FFh
.xdata$x:0000973A                 db 0FFh
.xdata$x:0000973B                 db 0FFh
.xdata$x:0000973C                 dd offset __unwindfunclet$??0failure@ios_base@std@@QAE@ABV012@@Z$0
.xdata$x:00009740 __ehfuncinfo$??0failure@ios_base@std@@QAE@ABV012@@Z db  22h ; "
.xdata$x:00009740                                         ; DATA XREF: __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z+11o
.xdata$x:00009741                 db    5
.xdata$x:00009742                 db  93h ; ô
.xdata$x:00009743                 db  19h
.xdata$x:00009744                 db    1
.xdata$x:00009745                 db    0
.xdata$x:00009746                 db    0
.xdata$x:00009747                 db    0
.xdata$x:00009748                 dd offset __unwindtable$??0failure@ios_base@std@@QAE@ABV012@@Z
.xdata$x:0000974C                 db    0
.xdata$x:0000974D                 db    0
.xdata$x:0000974E                 db    0
.xdata$x:0000974F                 db    0
.xdata$x:00009750                 db    0
.xdata$x:00009751                 db    0
.xdata$x:00009752                 db    0
.xdata$x:00009753                 db    0
.xdata$x:00009754                 db    0
.xdata$x:00009755                 db    0
.xdata$x:00009756                 db    0
.xdata$x:00009757                 db    0
.xdata$x:00009758                 db    0
.xdata$x:00009759                 db    0
.xdata$x:0000975A                 db    0
.xdata$x:0000975B                 db    0
.xdata$x:0000975C                 db    0
.xdata$x:0000975D                 db    0
.xdata$x:0000975E                 db    0
.xdata$x:0000975F                 db    0
.xdata$x:00009760                 db    0
.xdata$x:00009761                 db    0
.xdata$x:00009762                 db    0
.xdata$x:00009763                 db    0
.xdata$x:00009763 _xdata$x        ends
.xdata$x:00009763
.xdata$x:00009764 ; ===========================================================================
.xdata$x:00009764
.xdata$x:00009764 ; Segment type: Pure data
.xdata$x:00009764 ; Segment permissions: Read
.xdata$x:00009764 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009764                 assume cs:_xdata$x
.xdata$x:00009764                 ;org 9764h
.xdata$x:00009764 ; COMDAT (pick associative to section at 845C)
.xdata$x:00009764 __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db 0FFh
.xdata$x:00009764                                         ; DATA XREF: .xdata$x:00009774o
.xdata$x:00009765                 db 0FFh
.xdata$x:00009766                 db 0FFh
.xdata$x:00009767                 db 0FFh
.xdata$x:00009768                 dd offset __unwindfunclet$?getloc@ios_base@std@@QBE?AVlocale@2@XZ$0
.xdata$x:0000976C __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ db  22h ; "
.xdata$x:0000976C                                         ; DATA XREF: __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ+11o
.xdata$x:0000976D                 db    5
.xdata$x:0000976E                 db  93h ; ô
.xdata$x:0000976F                 db  19h
.xdata$x:00009770                 db    1
.xdata$x:00009771                 db    0
.xdata$x:00009772                 db    0
.xdata$x:00009773                 db    0
.xdata$x:00009774                 dd offset __unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
.xdata$x:00009778                 db    0
.xdata$x:00009779                 db    0
.xdata$x:0000977A                 db    0
.xdata$x:0000977B                 db    0
.xdata$x:0000977C                 db    0
.xdata$x:0000977D                 db    0
.xdata$x:0000977E                 db    0
.xdata$x:0000977F                 db    0
.xdata$x:00009780                 db    0
.xdata$x:00009781                 db    0
.xdata$x:00009782                 db    0
.xdata$x:00009783                 db    0
.xdata$x:00009784                 db    0
.xdata$x:00009785                 db    0
.xdata$x:00009786                 db    0
.xdata$x:00009787                 db    0
.xdata$x:00009788                 db    0
.xdata$x:00009789                 db    0
.xdata$x:0000978A                 db    0
.xdata$x:0000978B                 db    0
.xdata$x:0000978C                 db    0
.xdata$x:0000978D                 db    0
.xdata$x:0000978E                 db    0
.xdata$x:0000978F                 db    0
.xdata$x:0000978F _xdata$x        ends
.xdata$x:0000978F
.xdata$x:00009790 ; ===========================================================================
.xdata$x:00009790
.xdata$x:00009790 ; Segment type: Pure data
.xdata$x:00009790 ; Segment permissions: Read
.xdata$x:00009790 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009790                 assume cs:_xdata$x
.xdata$x:00009790                 ;org 9790h
.xdata$x:00009790 ; COMDAT (pick associative to section at 68DC)
.xdata$x:00009790 __catchsym$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$3 db    0
.xdata$x:00009790                                         ; DATA XREF: .xdata$x:000097B0o
.xdata$x:00009791                 db    0
.xdata$x:00009792                 db    0
.xdata$x:00009793                 db    0
.xdata$x:00009794                 db    0
.xdata$x:00009795                 db    0
.xdata$x:00009796                 db    0
.xdata$x:00009797                 db    0
.xdata$x:00009798                 db    0
.xdata$x:00009799                 db    0
.xdata$x:0000979A                 db    0
.xdata$x:0000979B                 db    0
.xdata$x:0000979C                 dd offset __catch$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$0
.xdata$x:000097A0 __tryblocktable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z db    1
.xdata$x:000097A0                                         ; DATA XREF: .xdata$x:000097DCo
.xdata$x:000097A1                 db    0
.xdata$x:000097A2                 db    0
.xdata$x:000097A3                 db    0
.xdata$x:000097A4                 db    1
.xdata$x:000097A5                 db    0
.xdata$x:000097A6                 db    0
.xdata$x:000097A7                 db    0
.xdata$x:000097A8                 db    2
.xdata$x:000097A9                 db    0
.xdata$x:000097AA                 db    0
.xdata$x:000097AB                 db    0
.xdata$x:000097AC                 db    1
.xdata$x:000097AD                 db    0
.xdata$x:000097AE                 db    0
.xdata$x:000097AF                 db    0
.xdata$x:000097B0                 dd offset __catchsym$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$3
.xdata$x:000097B4 __unwindtable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z db 0FFh
.xdata$x:000097B4                                         ; DATA XREF: .xdata$x:000097D4o
.xdata$x:000097B5                 db 0FFh
.xdata$x:000097B6                 db 0FFh
.xdata$x:000097B7                 db 0FFh
.xdata$x:000097B8                 dd offset __unwindfunclet$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z$2
.xdata$x:000097BC                 db 0FFh
.xdata$x:000097BD                 db 0FFh
.xdata$x:000097BE                 db 0FFh
.xdata$x:000097BF                 db 0FFh
.xdata$x:000097C0                 db    0
.xdata$x:000097C1                 db    0
.xdata$x:000097C2                 db    0
.xdata$x:000097C3                 db    0
.xdata$x:000097C4                 db 0FFh
.xdata$x:000097C5                 db 0FFh
.xdata$x:000097C6                 db 0FFh
.xdata$x:000097C7                 db 0FFh
.xdata$x:000097C8                 db    0
.xdata$x:000097C9                 db    0
.xdata$x:000097CA                 db    0
.xdata$x:000097CB                 db    0
.xdata$x:000097CC __ehfuncinfo$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z db  22h ; "
.xdata$x:000097CC                                         ; DATA XREF: __ehhandler$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z+11o
.xdata$x:000097CD                 db    5
.xdata$x:000097CE                 db  93h ; ô
.xdata$x:000097CF                 db  19h
.xdata$x:000097D0                 db    3
.xdata$x:000097D1                 db    0
.xdata$x:000097D2                 db    0
.xdata$x:000097D3                 db    0
.xdata$x:000097D4                 dd offset __unwindtable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.xdata$x:000097D8                 db    1
.xdata$x:000097D9                 db    0
.xdata$x:000097DA                 db    0
.xdata$x:000097DB                 db    0
.xdata$x:000097DC                 dd offset __tryblocktable$?_Ipfx@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE_N_N@Z
.xdata$x:000097E0                 db    0
.xdata$x:000097E1                 db    0
.xdata$x:000097E2                 db    0
.xdata$x:000097E3                 db    0
.xdata$x:000097E4                 db    0
.xdata$x:000097E5                 db    0
.xdata$x:000097E6                 db    0
.xdata$x:000097E7                 db    0
.xdata$x:000097E8                 db    0
.xdata$x:000097E9                 db    0
.xdata$x:000097EA                 db    0
.xdata$x:000097EB                 db    0
.xdata$x:000097EC                 db    0
.xdata$x:000097ED                 db    0
.xdata$x:000097EE                 db    0
.xdata$x:000097EF                 db    0
.xdata$x:000097EF _xdata$x        ends
.xdata$x:000097EF
.xdata$x:000097F0 ; ===========================================================================
.xdata$x:000097F0
.xdata$x:000097F0 ; Segment type: Pure data
.xdata$x:000097F0 ; Segment permissions: Read
.xdata$x:000097F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000097F0                 assume cs:_xdata$x
.xdata$x:000097F0                 ;org 97F0h
.xdata$x:000097F0 ; COMDAT (pick associative to section at 82D0)
.xdata$x:000097F0 __catchsym$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$3 db    0
.xdata$x:000097F0                                         ; DATA XREF: .xdata$x:00009810o
.xdata$x:000097F1                 db    0
.xdata$x:000097F2                 db    0
.xdata$x:000097F3                 db    0
.xdata$x:000097F4                 db    0
.xdata$x:000097F5                 db    0
.xdata$x:000097F6                 db    0
.xdata$x:000097F7                 db    0
.xdata$x:000097F8                 db    0
.xdata$x:000097F9                 db    0
.xdata$x:000097FA                 db    0
.xdata$x:000097FB                 db    0
.xdata$x:000097FC                 dd offset __catch$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0
.xdata$x:00009800 __tryblocktable$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db    1
.xdata$x:00009800                                         ; DATA XREF: .xdata$x:0000983Co
.xdata$x:00009801                 db    0
.xdata$x:00009802                 db    0
.xdata$x:00009803                 db    0
.xdata$x:00009804                 db    1
.xdata$x:00009805                 db    0
.xdata$x:00009806                 db    0
.xdata$x:00009807                 db    0
.xdata$x:00009808                 db    2
.xdata$x:00009809                 db    0
.xdata$x:0000980A                 db    0
.xdata$x:0000980B                 db    0
.xdata$x:0000980C                 db    1
.xdata$x:0000980D                 db    0
.xdata$x:0000980E                 db    0
.xdata$x:0000980F                 db    0
.xdata$x:00009810                 dd offset __catchsym$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$3
.xdata$x:00009814 __unwindtable$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db 0FFh
.xdata$x:00009814                                         ; DATA XREF: .xdata$x:00009834o
.xdata$x:00009815                 db 0FFh
.xdata$x:00009816                 db 0FFh
.xdata$x:00009817                 db 0FFh
.xdata$x:00009818                 dd offset __unwindfunclet$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2
.xdata$x:0000981C                 db    0
.xdata$x:0000981D                 db    0
.xdata$x:0000981E                 db    0
.xdata$x:0000981F                 db    0
.xdata$x:00009820                 db    0
.xdata$x:00009821                 db    0
.xdata$x:00009822                 db    0
.xdata$x:00009823                 db    0
.xdata$x:00009824                 db    0
.xdata$x:00009825                 db    0
.xdata$x:00009826                 db    0
.xdata$x:00009827                 db    0
.xdata$x:00009828                 db    0
.xdata$x:00009829                 db    0
.xdata$x:0000982A                 db    0
.xdata$x:0000982B                 db    0
.xdata$x:0000982C __ehfuncinfo$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db  22h ; "
.xdata$x:0000982C                                         ; DATA XREF: __ehhandler$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ+11o
.xdata$x:0000982D                 db    5
.xdata$x:0000982E                 db  93h ; ô
.xdata$x:0000982F                 db  19h
.xdata$x:00009830                 db    3
.xdata$x:00009831                 db    0
.xdata$x:00009832                 db    0
.xdata$x:00009833                 db    0
.xdata$x:00009834                 dd offset __unwindtable$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.xdata$x:00009838                 db    1
.xdata$x:00009839                 db    0
.xdata$x:0000983A                 db    0
.xdata$x:0000983B                 db    0
.xdata$x:0000983C                 dd offset __tryblocktable$?get@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.xdata$x:00009840                 db    0
.xdata$x:00009841                 db    0
.xdata$x:00009842                 db    0
.xdata$x:00009843                 db    0
.xdata$x:00009844                 db    0
.xdata$x:00009845                 db    0
.xdata$x:00009846                 db    0
.xdata$x:00009847                 db    0
.xdata$x:00009848                 db    0
.xdata$x:00009849                 db    0
.xdata$x:0000984A                 db    0
.xdata$x:0000984B                 db    0
.xdata$x:0000984C                 db    0
.xdata$x:0000984D                 db    0
.xdata$x:0000984E                 db    0
.xdata$x:0000984F                 db    0
.xdata$x:0000984F _xdata$x        ends
.xdata$x:0000984F
.xdata$x:00009850 ; ===========================================================================
.xdata$x:00009850
.xdata$x:00009850 ; Segment type: Pure data
.xdata$x:00009850 ; Segment permissions: Read
.xdata$x:00009850 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009850                 assume cs:_xdata$x
.xdata$x:00009850                 ;org 9850h
.xdata$x:00009850 ; COMDAT (pick associative to section at 8A54)
.xdata$x:00009850 __catchsym$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$3 db    0
.xdata$x:00009850                                         ; DATA XREF: .xdata$x:00009870o
.xdata$x:00009851                 db    0
.xdata$x:00009852                 db    0
.xdata$x:00009853                 db    0
.xdata$x:00009854                 db    0
.xdata$x:00009855                 db    0
.xdata$x:00009856                 db    0
.xdata$x:00009857                 db    0
.xdata$x:00009858                 db    0
.xdata$x:00009859                 db    0
.xdata$x:0000985A                 db    0
.xdata$x:0000985B                 db    0
.xdata$x:0000985C                 dd offset __catch$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$0
.xdata$x:00009860 __tryblocktable$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db    1
.xdata$x:00009860                                         ; DATA XREF: .xdata$x:0000989Co
.xdata$x:00009861                 db    0
.xdata$x:00009862                 db    0
.xdata$x:00009863                 db    0
.xdata$x:00009864                 db    1
.xdata$x:00009865                 db    0
.xdata$x:00009866                 db    0
.xdata$x:00009867                 db    0
.xdata$x:00009868                 db    2
.xdata$x:00009869                 db    0
.xdata$x:0000986A                 db    0
.xdata$x:0000986B                 db    0
.xdata$x:0000986C                 db    1
.xdata$x:0000986D                 db    0
.xdata$x:0000986E                 db    0
.xdata$x:0000986F                 db    0
.xdata$x:00009870                 dd offset __catchsym$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$3
.xdata$x:00009874 __unwindtable$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db 0FFh
.xdata$x:00009874                                         ; DATA XREF: .xdata$x:00009894o
.xdata$x:00009875                 db 0FFh
.xdata$x:00009876                 db 0FFh
.xdata$x:00009877                 db 0FFh
.xdata$x:00009878                 dd offset __unwindfunclet$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ$2
.xdata$x:0000987C                 db    0
.xdata$x:0000987D                 db    0
.xdata$x:0000987E                 db    0
.xdata$x:0000987F                 db    0
.xdata$x:00009880                 db    0
.xdata$x:00009881                 db    0
.xdata$x:00009882                 db    0
.xdata$x:00009883                 db    0
.xdata$x:00009884                 db    0
.xdata$x:00009885                 db    0
.xdata$x:00009886                 db    0
.xdata$x:00009887                 db    0
.xdata$x:00009888                 db    0
.xdata$x:00009889                 db    0
.xdata$x:0000988A                 db    0
.xdata$x:0000988B                 db    0
.xdata$x:0000988C __ehfuncinfo$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ db  22h ; "
.xdata$x:0000988C                                         ; DATA XREF: __ehhandler$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ+11o
.xdata$x:0000988D                 db    5
.xdata$x:0000988E                 db  93h ; ô
.xdata$x:0000988F                 db  19h
.xdata$x:00009890                 db    3
.xdata$x:00009891                 db    0
.xdata$x:00009892                 db    0
.xdata$x:00009893                 db    0
.xdata$x:00009894                 dd offset __unwindtable$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.xdata$x:00009898                 db    1
.xdata$x:00009899                 db    0
.xdata$x:0000989A                 db    0
.xdata$x:0000989B                 db    0
.xdata$x:0000989C                 dd offset __tryblocktable$?peek@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAEGXZ
.xdata$x:000098A0                 db    0
.xdata$x:000098A1                 db    0
.xdata$x:000098A2                 db    0
.xdata$x:000098A3                 db    0
.xdata$x:000098A4                 db    0
.xdata$x:000098A5                 db    0
.xdata$x:000098A6                 db    0
.xdata$x:000098A7                 db    0
.xdata$x:000098A8                 db    0
.xdata$x:000098A9                 db    0
.xdata$x:000098AA                 db    0
.xdata$x:000098AB                 db    0
.xdata$x:000098AC                 db    0
.xdata$x:000098AD                 db    0
.xdata$x:000098AE                 db    0
.xdata$x:000098AF                 db    0
.xdata$x:000098AF _xdata$x        ends
.xdata$x:000098AF
.xdata$x:000098B0 ; ===========================================================================
.xdata$x:000098B0
.xdata$x:000098B0 ; Segment type: Pure data
.xdata$x:000098B0 ; Segment permissions: Read
.xdata$x:000098B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098B0                 assume cs:_xdata$x
.xdata$x:000098B0                 ;org 98B0h
.xdata$x:000098B0 ; COMDAT (pick associative to section at 43C0)
.xdata$x:000098B0 __unwindtable$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z db 0FFh
.xdata$x:000098B0                                         ; DATA XREF: .xdata$x:000098C0o
.xdata$x:000098B1                 db 0FFh
.xdata$x:000098B2                 db 0FFh
.xdata$x:000098B3                 db 0FFh
.xdata$x:000098B4                 dd offset __unwindfunclet$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z$0
.xdata$x:000098B8 __ehfuncinfo$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z db  22h ; "
.xdata$x:000098B8                                         ; DATA XREF: __ehhandler$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z+11o
.xdata$x:000098B9                 db    5
.xdata$x:000098BA                 db  93h ; ô
.xdata$x:000098BB                 db  19h
.xdata$x:000098BC                 db    1
.xdata$x:000098BD                 db    0
.xdata$x:000098BE                 db    0
.xdata$x:000098BF                 db    0
.xdata$x:000098C0                 dd offset __unwindtable$??0sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@_N@Z
.xdata$x:000098C4                 db    0
.xdata$x:000098C5                 db    0
.xdata$x:000098C6                 db    0
.xdata$x:000098C7                 db    0
.xdata$x:000098C8                 db    0
.xdata$x:000098C9                 db    0
.xdata$x:000098CA                 db    0
.xdata$x:000098CB                 db    0
.xdata$x:000098CC                 db    0
.xdata$x:000098CD                 db    0
.xdata$x:000098CE                 db    0
.xdata$x:000098CF                 db    0
.xdata$x:000098D0                 db    0
.xdata$x:000098D1                 db    0
.xdata$x:000098D2                 db    0
.xdata$x:000098D3                 db    0
.xdata$x:000098D4                 db    0
.xdata$x:000098D5                 db    0
.xdata$x:000098D6                 db    0
.xdata$x:000098D7                 db    0
.xdata$x:000098D8                 db    0
.xdata$x:000098D9                 db    0
.xdata$x:000098DA                 db    0
.xdata$x:000098DB                 db    0
.xdata$x:000098DB _xdata$x        ends
.xdata$x:000098DB
.xdata$x:000098DC ; ===========================================================================
.xdata$x:000098DC
.xdata$x:000098DC ; Segment type: Pure data
.xdata$x:000098DC ; Segment permissions: Read
.xdata$x:000098DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098DC                 assume cs:_xdata$x
.xdata$x:000098DC                 ;org 98DCh
.xdata$x:000098DC ; COMDAT (pick associative to section at 52C0)
.xdata$x:000098DC __unwindtable$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000098DC                                         ; DATA XREF: .xdata$x:000098ECo
.xdata$x:000098DD                 db 0FFh
.xdata$x:000098DE                 db 0FFh
.xdata$x:000098DF                 db 0FFh
.xdata$x:000098E0                 dd offset __unwindfunclet$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
.xdata$x:000098E4 __ehfuncinfo$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000098E4                                         ; DATA XREF: __ehhandler$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ+11o
.xdata$x:000098E5                 db    5
.xdata$x:000098E6                 db  93h ; ô
.xdata$x:000098E7                 db  19h
.xdata$x:000098E8                 db    1
.xdata$x:000098E9                 db    0
.xdata$x:000098EA                 db    0
.xdata$x:000098EB                 db    0
.xdata$x:000098EC                 dd offset __unwindtable$??1sentry@?$basic_istream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.xdata$x:000098F0                 db    0
.xdata$x:000098F1                 db    0
.xdata$x:000098F2                 db    0
.xdata$x:000098F3                 db    0
.xdata$x:000098F4                 db    0
.xdata$x:000098F5                 db    0
.xdata$x:000098F6                 db    0
.xdata$x:000098F7                 db    0
.xdata$x:000098F8                 db    0
.xdata$x:000098F9                 db    0
.xdata$x:000098FA                 db    0
.xdata$x:000098FB                 db    0
.xdata$x:000098FC                 db    0
.xdata$x:000098FD                 db    0
.xdata$x:000098FE                 db    0
.xdata$x:000098FF                 db    0
.xdata$x:00009900                 db    0
.xdata$x:00009901                 db    0
.xdata$x:00009902                 db    0
.xdata$x:00009903                 db    0
.xdata$x:00009904                 db    0
.xdata$x:00009905                 db    0
.xdata$x:00009906                 db    0
.xdata$x:00009907                 db    0
.xdata$x:00009907 _xdata$x        ends
.xdata$x:00009907
.xdata$x:00009908 ; ===========================================================================
.xdata$x:00009908
.xdata$x:00009908 ; Segment type: Pure data
.xdata$x:00009908 ; Segment permissions: Read
.xdata$x:00009908 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009908                 assume cs:_xdata$x
.xdata$x:00009908                 ;org 9908h
.xdata$x:00009908 ; COMDAT (pick associative to section at 2EA4)
.xdata$x:00009908 __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db 0FFh
.xdata$x:00009908                                         ; DATA XREF: .xdata$x:00009918o
.xdata$x:00009909                 db 0FFh
.xdata$x:0000990A                 db 0FFh
.xdata$x:0000990B                 db 0FFh
.xdata$x:0000990C                 dd offset __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
.xdata$x:00009910 __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z db  22h ; "
.xdata$x:00009910                                         ; DATA XREF: __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z+11o
.xdata$x:00009911                 db    5
.xdata$x:00009912                 db  93h ; ô
.xdata$x:00009913                 db  19h
.xdata$x:00009914                 db    1
.xdata$x:00009915                 db    0
.xdata$x:00009916                 db    0
.xdata$x:00009917                 db    0
.xdata$x:00009918                 dd offset __unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
.xdata$x:0000991C                 db    0
.xdata$x:0000991D                 db    0
.xdata$x:0000991E                 db    0
.xdata$x:0000991F                 db    0
.xdata$x:00009920                 db    0
.xdata$x:00009921                 db    0
.xdata$x:00009922                 db    0
.xdata$x:00009923                 db    0
.xdata$x:00009924                 db    0
.xdata$x:00009925                 db    0
.xdata$x:00009926                 db    0
.xdata$x:00009927                 db    0
.xdata$x:00009928                 db    0
.xdata$x:00009929                 db    0
.xdata$x:0000992A                 db    0
.xdata$x:0000992B                 db    0
.xdata$x:0000992C                 db    0
.xdata$x:0000992D                 db    0
.xdata$x:0000992E                 db    0
.xdata$x:0000992F                 db    0
.xdata$x:00009930                 db    0
.xdata$x:00009931                 db    0
.xdata$x:00009932                 db    0
.xdata$x:00009933                 db    0
.xdata$x:00009933 _xdata$x        ends
.xdata$x:00009933
.xdata$x:00009934 ; ===========================================================================
.xdata$x:00009934
.xdata$x:00009934 ; Segment type: Pure data
.xdata$x:00009934 ; Segment permissions: Read
.xdata$x:00009934 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009934                 assume cs:_xdata$x
.xdata$x:00009934                 ;org 9934h
.xdata$x:00009934 ; COMDAT (pick associative to section at 3140)
.xdata$x:00009934 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009934                                         ; DATA XREF: .xdata$x:00009944o
.xdata$x:00009935                 db 0FFh
.xdata$x:00009936                 db 0FFh
.xdata$x:00009937                 db 0FFh
.xdata$x:00009938                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000993C __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000993C                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000993D                 db    5
.xdata$x:0000993E                 db  93h ; ô
.xdata$x:0000993F                 db  19h
.xdata$x:00009940                 db    1
.xdata$x:00009941                 db    0
.xdata$x:00009942                 db    0
.xdata$x:00009943                 db    0
.xdata$x:00009944                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00009948                 align 20h
.xdata$x:00009948 _xdata$x        ends
.xdata$x:00009948
.xdata$x:00009960 ; ===========================================================================
.xdata$x:00009960
.xdata$x:00009960 ; Segment type: Pure data
.xdata$x:00009960 ; Segment permissions: Read
.xdata$x:00009960 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009960                 assume cs:_xdata$x
.xdata$x:00009960                 ;org 9960h
.xdata$x:00009960 ; COMDAT (pick associative to section at 47E4)
.xdata$x:00009960 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009960                                         ; DATA XREF: .xdata$x:00009970o
.xdata$x:00009961                 db 0FFh
.xdata$x:00009962                 db 0FFh
.xdata$x:00009963                 db 0FFh
.xdata$x:00009964                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009968 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009968                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009969                 db    5
.xdata$x:0000996A                 db  93h ; ô
.xdata$x:0000996B                 db  19h
.xdata$x:0000996C                 db    1
.xdata$x:0000996D                 db    0
.xdata$x:0000996E                 db    0
.xdata$x:0000996F                 db    0
.xdata$x:00009970                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00009974                 db    0
.xdata$x:00009975                 db    0
.xdata$x:00009976                 db    0
.xdata$x:00009977                 db    0
.xdata$x:00009978                 db    0
.xdata$x:00009979                 db    0
.xdata$x:0000997A                 db    0
.xdata$x:0000997B                 db    0
.xdata$x:0000997C                 db    0
.xdata$x:0000997D                 db    0
.xdata$x:0000997E                 db    0
.xdata$x:0000997F                 db    0
.xdata$x:00009980                 db    0
.xdata$x:00009981                 db    0
.xdata$x:00009982                 db    0
.xdata$x:00009983                 db    0
.xdata$x:00009984                 db    0
.xdata$x:00009985                 db    0
.xdata$x:00009986                 db    0
.xdata$x:00009987                 db    0
.xdata$x:00009988                 db    0
.xdata$x:00009989                 db    0
.xdata$x:0000998A                 db    0
.xdata$x:0000998B                 db    0
.xdata$x:0000998B _xdata$x        ends
.xdata$x:0000998B
.xdata$x:0000998C ; ===========================================================================
.xdata$x:0000998C
.xdata$x:0000998C ; Segment type: Pure data
.xdata$x:0000998C ; Segment permissions: Read
.xdata$x:0000998C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000998C                 assume cs:_xdata$x
.xdata$x:0000998C                 ;org 998Ch
.xdata$x:0000998C ; COMDAT (pick associative to section at 303C)
.xdata$x:0000998C __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000998C                                         ; DATA XREF: .xdata$x:0000999Co
.xdata$x:0000998D                 db 0FFh
.xdata$x:0000998E                 db 0FFh
.xdata$x:0000998F                 db 0FFh
.xdata$x:00009990                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00009994 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00009994                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00009995                 db    5
.xdata$x:00009996                 db  93h ; ô
.xdata$x:00009997                 db  19h
.xdata$x:00009998                 db    1
.xdata$x:00009999                 db    0
.xdata$x:0000999A                 db    0
.xdata$x:0000999B                 db    0
.xdata$x:0000999C                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:000099A0                 db    0
.xdata$x:000099A1                 db    0
.xdata$x:000099A2                 db    0
.xdata$x:000099A3                 db    0
.xdata$x:000099A4                 db    0
.xdata$x:000099A5                 db    0
.xdata$x:000099A6                 db    0
.xdata$x:000099A7                 db    0
.xdata$x:000099A8                 db    0
.xdata$x:000099A9                 db    0
.xdata$x:000099AA                 db    0
.xdata$x:000099AB                 db    0
.xdata$x:000099AC                 db    0
.xdata$x:000099AD                 db    0
.xdata$x:000099AE                 db    0
.xdata$x:000099AF                 db    0
.xdata$x:000099B0                 db    0
.xdata$x:000099B1                 db    0
.xdata$x:000099B2                 db    0
.xdata$x:000099B3                 db    0
.xdata$x:000099B4                 db    0
.xdata$x:000099B5                 db    0
.xdata$x:000099B6                 db    0
.xdata$x:000099B7                 db    0
.xdata$x:000099B7 _xdata$x        ends
.xdata$x:000099B7
.xdata$x:000099B8 ; ===========================================================================
.xdata$x:000099B8
.xdata$x:000099B8 ; Segment type: Pure data
.xdata$x:000099B8 ; Segment permissions: Read
.xdata$x:000099B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000099B8                 assume cs:_xdata$x
.xdata$x:000099B8                 ;org 99B8h
.xdata$x:000099B8 ; COMDAT (pick associative to section at 46FC)
.xdata$x:000099B8 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000099B8                                         ; DATA XREF: .xdata$x:000099C8o
.xdata$x:000099B9                 db 0FFh
.xdata$x:000099BA                 db 0FFh
.xdata$x:000099BB                 db 0FFh
.xdata$x:000099BC                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000099C0 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000099C0                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000099C1                 db    5
.xdata$x:000099C2                 db  93h ; ô
.xdata$x:000099C3                 db  19h
.xdata$x:000099C4                 db    1
.xdata$x:000099C5                 db    0
.xdata$x:000099C6                 db    0
.xdata$x:000099C7                 db    0
.xdata$x:000099C8                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:000099CC                 db    0
.xdata$x:000099CD                 db    0
.xdata$x:000099CE                 db    0
.xdata$x:000099CF                 db    0
.xdata$x:000099D0                 db    0
.xdata$x:000099D1                 db    0
.xdata$x:000099D2                 db    0
.xdata$x:000099D3                 db    0
.xdata$x:000099D4                 db    0
.xdata$x:000099D5                 db    0
.xdata$x:000099D6                 db    0
.xdata$x:000099D7                 db    0
.xdata$x:000099D8                 db    0
.xdata$x:000099D9                 db    0
.xdata$x:000099DA                 db    0
.xdata$x:000099DB                 db    0
.xdata$x:000099DC                 db    0
.xdata$x:000099DD                 db    0
.xdata$x:000099DE                 db    0
.xdata$x:000099DF                 db    0
.xdata$x:000099E0                 db    0
.xdata$x:000099E1                 db    0
.xdata$x:000099E2                 db    0
.xdata$x:000099E3                 db    0
.xdata$x:000099E3 _xdata$x        ends
.xdata$x:000099E3
.xdata$x:000099E4 ; ===========================================================================
.xdata$x:000099E4
.xdata$x:000099E4 ; Segment type: Pure data
.xdata$x:000099E4 ; Segment permissions: Read
.xdata$x:000099E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000099E4                 assume cs:_xdata$x
.xdata$x:000099E4                 ;org 99E4h
.xdata$x:000099E4 ; COMDAT (pick associative to section at 3518)
.xdata$x:000099E4 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:000099E4                                         ; DATA XREF: .xdata$x:000099F4o
.xdata$x:000099E5                 db 0FFh
.xdata$x:000099E6                 db 0FFh
.xdata$x:000099E7                 db 0FFh
.xdata$x:000099E8                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:000099EC __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000099EC                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:000099ED                 db    5
.xdata$x:000099EE                 db  93h ; ô
.xdata$x:000099EF                 db  19h
.xdata$x:000099F0                 db    1
.xdata$x:000099F1                 db    0
.xdata$x:000099F2                 db    0
.xdata$x:000099F3                 db    0
.xdata$x:000099F4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:000099F8                 db    0
.xdata$x:000099F9                 db    0
.xdata$x:000099FA                 db    0
.xdata$x:000099FB                 db    0
.xdata$x:000099FC                 db    0
.xdata$x:000099FD                 db    0
.xdata$x:000099FE                 db    0
.xdata$x:000099FF                 db    0
.xdata$x:00009A00                 db    0
.xdata$x:00009A01                 db    0
.xdata$x:00009A02                 db    0
.xdata$x:00009A03                 db    0
.xdata$x:00009A04                 db    0
.xdata$x:00009A05                 db    0
.xdata$x:00009A06                 db    0
.xdata$x:00009A07                 db    0
.xdata$x:00009A08                 db    0
.xdata$x:00009A09                 db    0
.xdata$x:00009A0A                 db    0
.xdata$x:00009A0B                 db    0
.xdata$x:00009A0C                 db    0
.xdata$x:00009A0D                 db    0
.xdata$x:00009A0E                 db    0
.xdata$x:00009A0F                 db    0
.xdata$x:00009A0F _xdata$x        ends
.xdata$x:00009A0F
.xdata$x:00009A10 ; ===========================================================================
.xdata$x:00009A10
.xdata$x:00009A10 ; Segment type: Pure data
.xdata$x:00009A10 ; Segment permissions: Read
.xdata$x:00009A10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A10                 assume cs:_xdata$x
.xdata$x:00009A10                 ;org 9A10h
.xdata$x:00009A10 ; COMDAT (pick associative to section at 3480)
.xdata$x:00009A10 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00009A10                                         ; DATA XREF: .xdata$x:00009A20o
.xdata$x:00009A11                 db 0FFh
.xdata$x:00009A12                 db 0FFh
.xdata$x:00009A13                 db 0FFh
.xdata$x:00009A14                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:00009A18 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:00009A18                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:00009A19                 db    5
.xdata$x:00009A1A                 db  93h ; ô
.xdata$x:00009A1B                 db  19h
.xdata$x:00009A1C                 db    1
.xdata$x:00009A1D                 db    0
.xdata$x:00009A1E                 db    0
.xdata$x:00009A1F                 db    0
.xdata$x:00009A20                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00009A24                 db    0
.xdata$x:00009A25                 db    0
.xdata$x:00009A26                 db    0
.xdata$x:00009A27                 db    0
.xdata$x:00009A28                 db    0
.xdata$x:00009A29                 db    0
.xdata$x:00009A2A                 db    0
.xdata$x:00009A2B                 db    0
.xdata$x:00009A2C                 db    0
.xdata$x:00009A2D                 db    0
.xdata$x:00009A2E                 db    0
.xdata$x:00009A2F                 db    0
.xdata$x:00009A30                 db    0
.xdata$x:00009A31                 db    0
.xdata$x:00009A32                 db    0
.xdata$x:00009A33                 db    0
.xdata$x:00009A34                 db    0
.xdata$x:00009A35                 db    0
.xdata$x:00009A36                 db    0
.xdata$x:00009A37                 db    0
.xdata$x:00009A38                 db    0
.xdata$x:00009A39                 db    0
.xdata$x:00009A3A                 db    0
.xdata$x:00009A3B                 db    0
.xdata$x:00009A3B _xdata$x        ends
.xdata$x:00009A3B
.xdata$x:00009A3C ; ===========================================================================
.xdata$x:00009A3C
.xdata$x:00009A3C ; Segment type: Pure data
.xdata$x:00009A3C ; Segment permissions: Read
.xdata$x:00009A3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A3C                 assume cs:_xdata$x
.xdata$x:00009A3C                 ;org 9A3Ch
.xdata$x:00009A3C ; COMDAT (pick associative to section at 48F8)
.xdata$x:00009A3C __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009A3C                                         ; DATA XREF: .xdata$x:00009A4Co
.xdata$x:00009A3D                 db 0FFh
.xdata$x:00009A3E                 db 0FFh
.xdata$x:00009A3F                 db 0FFh
.xdata$x:00009A40                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00009A44 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009A44                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00009A45                 db    5
.xdata$x:00009A46                 db  93h ; ô
.xdata$x:00009A47                 db  19h
.xdata$x:00009A48                 db    1
.xdata$x:00009A49                 db    0
.xdata$x:00009A4A                 db    0
.xdata$x:00009A4B                 db    0
.xdata$x:00009A4C                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00009A50                 db    0
.xdata$x:00009A51                 db    0
.xdata$x:00009A52                 db    0
.xdata$x:00009A53                 db    0
.xdata$x:00009A54                 db    0
.xdata$x:00009A55                 db    0
.xdata$x:00009A56                 db    0
.xdata$x:00009A57                 db    0
.xdata$x:00009A58                 db    0
.xdata$x:00009A59                 db    0
.xdata$x:00009A5A                 db    0
.xdata$x:00009A5B                 db    0
.xdata$x:00009A5C                 db    0
.xdata$x:00009A5D                 db    0
.xdata$x:00009A5E                 db    0
.xdata$x:00009A5F                 db    0
.xdata$x:00009A60                 db    0
.xdata$x:00009A61                 db    0
.xdata$x:00009A62                 db    0
.xdata$x:00009A63                 db    0
.xdata$x:00009A64                 db    0
.xdata$x:00009A65                 db    0
.xdata$x:00009A66                 db    0
.xdata$x:00009A67                 db    0
.xdata$x:00009A67 _xdata$x        ends
.xdata$x:00009A67
.xdata$x:00009A68 ; ===========================================================================
.xdata$x:00009A68
.xdata$x:00009A68 ; Segment type: Pure data
.xdata$x:00009A68 ; Segment permissions: Read
.xdata$x:00009A68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A68                 assume cs:_xdata$x
.xdata$x:00009A68                 ;org 9A68h
.xdata$x:00009A68 ; COMDAT (pick associative to section at 5F98)
.xdata$x:00009A68 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00009A68                                         ; DATA XREF: .xdata$x:00009AF0o
.xdata$x:00009A69                 db    0
.xdata$x:00009A6A                 db    0
.xdata$x:00009A6B                 db    0
.xdata$x:00009A6C                 db    0
.xdata$x:00009A6D                 db    0
.xdata$x:00009A6E                 db    0
.xdata$x:00009A6F                 db    0
.xdata$x:00009A70                 db    0
.xdata$x:00009A71                 db    0
.xdata$x:00009A72                 db    0
.xdata$x:00009A73                 db    0
.xdata$x:00009A74                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:00009A78 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00009A78                                         ; DATA XREF: .xdata$x:00009ADCo
.xdata$x:00009A79                 db    0
.xdata$x:00009A7A                 db    0
.xdata$x:00009A7B                 db    0
.xdata$x:00009A7C                 db    0
.xdata$x:00009A7D                 db    0
.xdata$x:00009A7E                 db    0
.xdata$x:00009A7F                 db    0
.xdata$x:00009A80                 db    0
.xdata$x:00009A81                 db    0
.xdata$x:00009A82                 db    0
.xdata$x:00009A83                 db    0
.xdata$x:00009A84                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:00009A88 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00009A88                                         ; DATA XREF: .xdata$x:00009AB0o
.xdata$x:00009A89                 db 0FFh
.xdata$x:00009A8A                 db 0FFh
.xdata$x:00009A8B                 db 0FFh
.xdata$x:00009A8C                 db    0
.xdata$x:00009A8D                 db    0
.xdata$x:00009A8E                 db    0
.xdata$x:00009A8F                 db    0
.xdata$x:00009A90                 db 0FFh
.xdata$x:00009A91                 db 0FFh
.xdata$x:00009A92                 db 0FFh
.xdata$x:00009A93                 db 0FFh
.xdata$x:00009A94                 db    0
.xdata$x:00009A95                 db    0
.xdata$x:00009A96                 db    0
.xdata$x:00009A97                 db    0
.xdata$x:00009A98                 db    1
.xdata$x:00009A99                 db    0
.xdata$x:00009A9A                 db    0
.xdata$x:00009A9B                 db    0
.xdata$x:00009A9C                 db    0
.xdata$x:00009A9D                 db    0
.xdata$x:00009A9E                 db    0
.xdata$x:00009A9F                 db    0
.xdata$x:00009AA0                 db    1
.xdata$x:00009AA1                 db    0
.xdata$x:00009AA2                 db    0
.xdata$x:00009AA3                 db    0
.xdata$x:00009AA4                 db    0
.xdata$x:00009AA5                 db    0
.xdata$x:00009AA6                 db    0
.xdata$x:00009AA7                 db    0
.xdata$x:00009AA8 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00009AA8                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:00009AA9                 db    5
.xdata$x:00009AAA                 db  93h ; ô
.xdata$x:00009AAB                 db  19h
.xdata$x:00009AAC                 db    4
.xdata$x:00009AAD                 db    0
.xdata$x:00009AAE                 db    0
.xdata$x:00009AAF                 db    0
.xdata$x:00009AB0                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00009AB4                 db    2
.xdata$x:00009AB5                 db    0
.xdata$x:00009AB6                 db    0
.xdata$x:00009AB7                 db    0
.xdata$x:00009AB8                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00009ABC                 db    0
.xdata$x:00009ABD                 db    0
.xdata$x:00009ABE                 db    0
.xdata$x:00009ABF                 db    0
.xdata$x:00009AC0                 db    0
.xdata$x:00009AC1                 db    0
.xdata$x:00009AC2                 db    0
.xdata$x:00009AC3                 db    0
.xdata$x:00009AC4                 db    0
.xdata$x:00009AC5                 db    0
.xdata$x:00009AC6                 db    0
.xdata$x:00009AC7                 db    0
.xdata$x:00009AC8                 db    0
.xdata$x:00009AC9                 db    0
.xdata$x:00009ACA                 db    0
.xdata$x:00009ACB                 db    0
.xdata$x:00009ACC __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00009ACC                                         ; DATA XREF: .xdata$x:00009AB8o
.xdata$x:00009ACD                 db    0
.xdata$x:00009ACE                 db    0
.xdata$x:00009ACF                 db    0
.xdata$x:00009AD0                 db    2
.xdata$x:00009AD1                 db    0
.xdata$x:00009AD2                 db    0
.xdata$x:00009AD3                 db    0
.xdata$x:00009AD4                 db    3
.xdata$x:00009AD5                 db    0
.xdata$x:00009AD6                 db    0
.xdata$x:00009AD7                 db    0
.xdata$x:00009AD8                 db    1
.xdata$x:00009AD9                 db    0
.xdata$x:00009ADA                 db    0
.xdata$x:00009ADB                 db    0
.xdata$x:00009ADC                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00009AE0                 db    0
.xdata$x:00009AE1                 db    0
.xdata$x:00009AE2                 db    0
.xdata$x:00009AE3                 db    0
.xdata$x:00009AE4                 db    0
.xdata$x:00009AE5                 db    0
.xdata$x:00009AE6                 db    0
.xdata$x:00009AE7                 db    0
.xdata$x:00009AE8                 db    3
.xdata$x:00009AE9                 db    0
.xdata$x:00009AEA                 db    0
.xdata$x:00009AEB                 db    0
.xdata$x:00009AEC                 db    1
.xdata$x:00009AED                 db    0
.xdata$x:00009AEE                 db    0
.xdata$x:00009AEF                 db    0
.xdata$x:00009AF0                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00009AF0 _xdata$x        ends
.xdata$x:00009AF0
.xdata$x:00009AF4 ; ===========================================================================
.xdata$x:00009AF4
.xdata$x:00009AF4 ; Segment type: Pure data
.xdata$x:00009AF4 ; Segment permissions: Read
.xdata$x:00009AF4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AF4                 assume cs:_xdata$x
.xdata$x:00009AF4                 ;org 9AF4h
.xdata$x:00009AF4 __unwindtable$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z db 0FFh
.xdata$x:00009AF4                                         ; DATA XREF: .xdata$x:00009B78o
.xdata$x:00009AF5                 db 0FFh
.xdata$x:00009AF6                 db 0FFh
.xdata$x:00009AF7                 db 0FFh
.xdata$x:00009AF8                 dd offset __unwindfunclet$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z$0
.xdata$x:00009AFC __unwindtable$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db 0FFh
.xdata$x:00009AFC                                         ; DATA XREF: .xdata$x:00009BC0o
.xdata$x:00009AFD                 db 0FFh
.xdata$x:00009AFE                 db 0FFh
.xdata$x:00009AFF                 db 0FFh
.xdata$x:00009B00                 dd offset __unwindfunclet$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0
.xdata$x:00009B04 __unwindtable$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z db 0FFh
.xdata$x:00009B04                                         ; DATA XREF: .xdata$x:00009B9Co
.xdata$x:00009B05                 db 0FFh
.xdata$x:00009B06                 db 0FFh
.xdata$x:00009B07                 db 0FFh
.xdata$x:00009B08                 dd offset __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0
.xdata$x:00009B0C                 align 10h
.xdata$x:00009B10                 dd offset __unwindfunclet$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1
.xdata$x:00009B14 __unwindtable$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z db 0FFh
.xdata$x:00009B14                                         ; DATA XREF: .xdata$x:00009B54o
.xdata$x:00009B15                 db 0FFh
.xdata$x:00009B16                 db 0FFh
.xdata$x:00009B17                 db 0FFh
.xdata$x:00009B18                 dd offset __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$0
.xdata$x:00009B1C                 db 0FFh
.xdata$x:00009B1D                 db 0FFh
.xdata$x:00009B1E                 db 0FFh
.xdata$x:00009B1F                 db 0FFh
.xdata$x:00009B20                 dd offset __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$1
.xdata$x:00009B24                 db 0FFh
.xdata$x:00009B25                 db 0FFh
.xdata$x:00009B26                 db 0FFh
.xdata$x:00009B27                 db 0FFh
.xdata$x:00009B28                 dd offset __unwindfunclet$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z$2
.xdata$x:00009B2C __unwindtable$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z db 0FFh
.xdata$x:00009B2C                                         ; DATA XREF: .xdata$x:00009BE4o
.xdata$x:00009B2D                 db 0FFh
.xdata$x:00009B2E                 db 0FFh
.xdata$x:00009B2F                 db 0FFh
.xdata$x:00009B30                 dd offset __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$0
.xdata$x:00009B34                 db 0FFh
.xdata$x:00009B35                 db 0FFh
.xdata$x:00009B36                 db 0FFh
.xdata$x:00009B37                 db 0FFh
.xdata$x:00009B38                 dd offset __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$1
.xdata$x:00009B3C                 db 0FFh
.xdata$x:00009B3D                 db 0FFh
.xdata$x:00009B3E                 db 0FFh
.xdata$x:00009B3F                 db 0FFh
.xdata$x:00009B40                 dd offset __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$2
.xdata$x:00009B44                 db 0FFh
.xdata$x:00009B45                 db 0FFh
.xdata$x:00009B46                 db 0FFh
.xdata$x:00009B47                 db 0FFh
.xdata$x:00009B48                 dd offset __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$3
.xdata$x:00009B4C __ehfuncinfo$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z db  22h ; "
.xdata$x:00009B4C                                         ; DATA XREF: __ehhandler$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z+1Eo
.xdata$x:00009B4D                 db    5
.xdata$x:00009B4E                 db  93h ; ô
.xdata$x:00009B4F                 db  19h
.xdata$x:00009B50                 db    3
.xdata$x:00009B51                 db    0
.xdata$x:00009B52                 db    0
.xdata$x:00009B53                 db    0
.xdata$x:00009B54                 dd offset __unwindtable$?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.xdata$x:00009B58                 db    0
.xdata$x:00009B59                 db    0
.xdata$x:00009B5A                 db    0
.xdata$x:00009B5B                 db    0
.xdata$x:00009B5C                 db    0
.xdata$x:00009B5D                 db    0
.xdata$x:00009B5E                 db    0
.xdata$x:00009B5F                 db    0
.xdata$x:00009B60                 db    0
.xdata$x:00009B61                 db    0
.xdata$x:00009B62                 db    0
.xdata$x:00009B63                 db    0
.xdata$x:00009B64                 db    0
.xdata$x:00009B65                 db    0
.xdata$x:00009B66                 db    0
.xdata$x:00009B67                 db    0
.xdata$x:00009B68                 db    0
.xdata$x:00009B69                 db    0
.xdata$x:00009B6A                 db    0
.xdata$x:00009B6B                 db    0
.xdata$x:00009B6C                 db    0
.xdata$x:00009B6D                 db    0
.xdata$x:00009B6E                 db    0
.xdata$x:00009B6F                 db    0
.xdata$x:00009B70 __ehfuncinfo$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z db  22h ; "
.xdata$x:00009B70                                         ; DATA XREF: __ehhandler$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z+11o
.xdata$x:00009B71                 db    5
.xdata$x:00009B72                 db  93h ; ô
.xdata$x:00009B73                 db  19h
.xdata$x:00009B74                 db    1
.xdata$x:00009B75                 db    0
.xdata$x:00009B76                 db    0
.xdata$x:00009B77                 db    0
.xdata$x:00009B78                 dd offset __unwindtable$?ReadValue@TiXmlElement@@IAEPB_WPB_WPAVTiXmlParsingData@@@Z
.xdata$x:00009B7C                 db    0
.xdata$x:00009B7D                 db    0
.xdata$x:00009B7E                 db    0
.xdata$x:00009B7F                 db    0
.xdata$x:00009B80                 db    0
.xdata$x:00009B81                 db    0
.xdata$x:00009B82                 db    0
.xdata$x:00009B83                 db    0
.xdata$x:00009B84                 db    0
.xdata$x:00009B85                 db    0
.xdata$x:00009B86                 db    0
.xdata$x:00009B87                 db    0
.xdata$x:00009B88                 db    0
.xdata$x:00009B89                 db    0
.xdata$x:00009B8A                 db    0
.xdata$x:00009B8B                 db    0
.xdata$x:00009B8C                 db    0
.xdata$x:00009B8D                 db    0
.xdata$x:00009B8E                 db    0
.xdata$x:00009B8F                 db    0
.xdata$x:00009B90                 db    0
.xdata$x:00009B91                 db    0
.xdata$x:00009B92                 db    0
.xdata$x:00009B93                 db    0
.xdata$x:00009B94 __ehfuncinfo$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z db  22h ; "
.xdata$x:00009B94                                         ; DATA XREF: __ehhandler$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z+1Eo
.xdata$x:00009B95                 db    5
.xdata$x:00009B96                 db  93h ; ô
.xdata$x:00009B97                 db  19h
.xdata$x:00009B98                 db    2
.xdata$x:00009B99                 db    0
.xdata$x:00009B9A                 db    0
.xdata$x:00009B9B                 db    0
.xdata$x:00009B9C                 dd offset __unwindtable$?Parse@TiXmlElement@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z
.xdata$x:00009BA0                 db    0
.xdata$x:00009BA1                 db    0
.xdata$x:00009BA2                 db    0
.xdata$x:00009BA3                 db    0
.xdata$x:00009BA4                 db    0
.xdata$x:00009BA5                 db    0
.xdata$x:00009BA6                 db    0
.xdata$x:00009BA7                 db    0
.xdata$x:00009BA8                 db    0
.xdata$x:00009BA9                 db    0
.xdata$x:00009BAA                 db    0
.xdata$x:00009BAB                 db    0
.xdata$x:00009BAC                 db    0
.xdata$x:00009BAD                 db    0
.xdata$x:00009BAE                 db    0
.xdata$x:00009BAF                 db    0
.xdata$x:00009BB0                 db    0
.xdata$x:00009BB1                 db    0
.xdata$x:00009BB2                 db    0
.xdata$x:00009BB3                 db    0
.xdata$x:00009BB4                 db    0
.xdata$x:00009BB5                 db    0
.xdata$x:00009BB6                 db    0
.xdata$x:00009BB7                 db    0
.xdata$x:00009BB8 __ehfuncinfo$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db  22h ; "
.xdata$x:00009BB8                                         ; DATA XREF: __ehhandler$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+1Bo
.xdata$x:00009BB9                 db    5
.xdata$x:00009BBA                 db  93h ; ô
.xdata$x:00009BBB                 db  19h
.xdata$x:00009BBC                 db    1
.xdata$x:00009BBD                 db    0
.xdata$x:00009BBE                 db    0
.xdata$x:00009BBF                 db    0
.xdata$x:00009BC0                 dd offset __unwindtable$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.xdata$x:00009BC4                 db    0
.xdata$x:00009BC5                 db    0
.xdata$x:00009BC6                 db    0
.xdata$x:00009BC7                 db    0
.xdata$x:00009BC8                 db    0
.xdata$x:00009BC9                 db    0
.xdata$x:00009BCA                 db    0
.xdata$x:00009BCB                 db    0
.xdata$x:00009BCC                 db    0
.xdata$x:00009BCD                 db    0
.xdata$x:00009BCE                 db    0
.xdata$x:00009BCF                 db    0
.xdata$x:00009BD0                 db    0
.xdata$x:00009BD1                 db    0
.xdata$x:00009BD2                 db    0
.xdata$x:00009BD3                 db    0
.xdata$x:00009BD4                 db    0
.xdata$x:00009BD5                 db    0
.xdata$x:00009BD6                 db    0
.xdata$x:00009BD7                 db    0
.xdata$x:00009BD8                 db    0
.xdata$x:00009BD9                 db    0
.xdata$x:00009BDA                 db    0
.xdata$x:00009BDB                 db    0
.xdata$x:00009BDC __ehfuncinfo$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z db  22h ; "
.xdata$x:00009BDC                                         ; DATA XREF: __ehhandler$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z+11o
.xdata$x:00009BDD                 db    5
.xdata$x:00009BDE                 db  93h ; ô
.xdata$x:00009BDF                 db  19h
.xdata$x:00009BE0                 db    4
.xdata$x:00009BE1                 db    0
.xdata$x:00009BE2                 db    0
.xdata$x:00009BE3                 db    0
.xdata$x:00009BE4                 dd offset __unwindtable$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z
.xdata$x:00009BE8                 align 20h
.xdata$x:00009BE8 _xdata$x        ends
.xdata$x:00009BE8
.xdata$x:00009C00 ; ===========================================================================
.xdata$x:00009C00
.xdata$x:00009C00 ; Segment type: Pure data
.xdata$x:00009C00 ; Segment permissions: Read
.xdata$x:00009C00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C00                 assume cs:_xdata$x
.xdata$x:00009C00                 ;org 9C00h
.xdata$x:00009C00 ; COMDAT (pick associative to section at 3634)
.xdata$x:00009C00 __unwindtable$??0TiXmlAttribute@@QAE@XZ db 0FFh
.xdata$x:00009C00                                         ; DATA XREF: .xdata$x:00009C20o
.xdata$x:00009C01                 db 0FFh
.xdata$x:00009C02                 db 0FFh
.xdata$x:00009C03                 db 0FFh
.xdata$x:00009C04                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0
.xdata$x:00009C08                 db    0
.xdata$x:00009C09                 db    0
.xdata$x:00009C0A                 db    0
.xdata$x:00009C0B                 db    0
.xdata$x:00009C0C                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1
.xdata$x:00009C10                 db    1
.xdata$x:00009C11                 db    0
.xdata$x:00009C12                 db    0
.xdata$x:00009C13                 db    0
.xdata$x:00009C14                 dd offset __unwindfunclet$??0TiXmlAttribute@@QAE@XZ$2
.xdata$x:00009C18 __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ db  22h ; "
.xdata$x:00009C18                                         ; DATA XREF: __ehhandler$??0TiXmlAttribute@@QAE@XZ+11o
.xdata$x:00009C19                 db    5
.xdata$x:00009C1A                 db  93h ; ô
.xdata$x:00009C1B                 db  19h
.xdata$x:00009C1C                 db    3
.xdata$x:00009C1D                 db    0
.xdata$x:00009C1E                 db    0
.xdata$x:00009C1F                 db    0
.xdata$x:00009C20                 dd offset __unwindtable$??0TiXmlAttribute@@QAE@XZ
.xdata$x:00009C24                 db    0
.xdata$x:00009C25                 db    0
.xdata$x:00009C26                 db    0
.xdata$x:00009C27                 db    0
.xdata$x:00009C28                 db    0
.xdata$x:00009C29                 db    0
.xdata$x:00009C2A                 db    0
.xdata$x:00009C2B                 db    0
.xdata$x:00009C2C                 db    0
.xdata$x:00009C2D                 db    0
.xdata$x:00009C2E                 db    0
.xdata$x:00009C2F                 db    0
.xdata$x:00009C30                 db    0
.xdata$x:00009C31                 db    0
.xdata$x:00009C32                 db    0
.xdata$x:00009C33                 db    0
.xdata$x:00009C34                 db    0
.xdata$x:00009C35                 db    0
.xdata$x:00009C36                 db    0
.xdata$x:00009C37                 db    0
.xdata$x:00009C38                 db    0
.xdata$x:00009C39                 db    0
.xdata$x:00009C3A                 db    0
.xdata$x:00009C3B                 db    0
.xdata$x:00009C3B _xdata$x        ends
.xdata$x:00009C3B
.xdata$x:00009C3C ; ===========================================================================
.xdata$x:00009C3C
.xdata$x:00009C3C ; Segment type: Pure data
.xdata$x:00009C3C ; Segment permissions: Read
.xdata$x:00009C3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C3C                 assume cs:_xdata$x
.xdata$x:00009C3C                 ;org 9C3Ch
.xdata$x:00009C3C ; COMDAT (pick associative to section at 4A14)
.xdata$x:00009C3C __unwindtable$??1TiXmlAttribute@@UAE@XZ db 0FFh
.xdata$x:00009C3C                                         ; DATA XREF: .xdata$x:00009C5Co
.xdata$x:00009C3D                 db 0FFh
.xdata$x:00009C3E                 db 0FFh
.xdata$x:00009C3F                 db 0FFh
.xdata$x:00009C40                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0
.xdata$x:00009C44                 align 8
.xdata$x:00009C48                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1
.xdata$x:00009C4C                 db    1
.xdata$x:00009C4D                 db    0
.xdata$x:00009C4E                 db    0
.xdata$x:00009C4F                 db    0
.xdata$x:00009C50                 dd offset __unwindfunclet$??1TiXmlAttribute@@UAE@XZ$2
.xdata$x:00009C54 __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ db  22h ; "
.xdata$x:00009C54                                         ; DATA XREF: __ehhandler$??1TiXmlAttribute@@UAE@XZ+11o
.xdata$x:00009C55                 db    5
.xdata$x:00009C56                 db  93h ; ô
.xdata$x:00009C57                 db  19h
.xdata$x:00009C58                 db    3
.xdata$x:00009C59                 db    0
.xdata$x:00009C5A                 db    0
.xdata$x:00009C5B                 db    0
.xdata$x:00009C5C                 dd offset __unwindtable$??1TiXmlAttribute@@UAE@XZ
.xdata$x:00009C60                 db    0
.xdata$x:00009C61                 db    0
.xdata$x:00009C62                 db    0
.xdata$x:00009C63                 db    0
.xdata$x:00009C64                 db    0
.xdata$x:00009C65                 db    0
.xdata$x:00009C66                 db    0
.xdata$x:00009C67                 db    0
.xdata$x:00009C68                 db    0
.xdata$x:00009C69                 db    0
.xdata$x:00009C6A                 db    0
.xdata$x:00009C6B                 db    0
.xdata$x:00009C6C                 db    0
.xdata$x:00009C6D                 db    0
.xdata$x:00009C6E                 db    0
.xdata$x:00009C6F                 db    0
.xdata$x:00009C70                 db    0
.xdata$x:00009C71                 db    0
.xdata$x:00009C72                 db    0
.xdata$x:00009C73                 db    0
.xdata$x:00009C74                 db    0
.xdata$x:00009C75                 db    0
.xdata$x:00009C76                 db    0
.xdata$x:00009C77                 db    0
.xdata$x:00009C77 _xdata$x        ends
.xdata$x:00009C77
.xdata$x:00009C78 ; ===========================================================================
.xdata$x:00009C78
.xdata$x:00009C78 ; Segment type: Pure data
.xdata$x:00009C78 ; Segment permissions: Read
.xdata$x:00009C78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C78                 assume cs:_xdata$x
.xdata$x:00009C78                 ;org 9C78h
.xdata$x:00009C78 ; COMDAT (pick associative to section at 3728)
.xdata$x:00009C78 __unwindtable$??0TiXmlComment@@QAE@XZ db 0FFh
.xdata$x:00009C78                                         ; DATA XREF: .xdata$x:00009C88o
.xdata$x:00009C79                 db 0FFh
.xdata$x:00009C7A                 db 0FFh
.xdata$x:00009C7B                 db 0FFh
.xdata$x:00009C7C                 dd offset __unwindfunclet$??0TiXmlComment@@QAE@XZ$0
.xdata$x:00009C80 __ehfuncinfo$??0TiXmlComment@@QAE@XZ db  22h ; "
.xdata$x:00009C80                                         ; DATA XREF: __ehhandler$??0TiXmlComment@@QAE@XZ+11o
.xdata$x:00009C81                 db    5
.xdata$x:00009C82                 db  93h ; ô
.xdata$x:00009C83                 db  19h
.xdata$x:00009C84                 db    1
.xdata$x:00009C85                 db    0
.xdata$x:00009C86                 db    0
.xdata$x:00009C87                 db    0
.xdata$x:00009C88                 dd offset __unwindtable$??0TiXmlComment@@QAE@XZ
.xdata$x:00009C8C                 db    0
.xdata$x:00009C8D                 db    0
.xdata$x:00009C8E                 db    0
.xdata$x:00009C8F                 db    0
.xdata$x:00009C90                 db    0
.xdata$x:00009C91                 db    0
.xdata$x:00009C92                 db    0
.xdata$x:00009C93                 db    0
.xdata$x:00009C94                 db    0
.xdata$x:00009C95                 db    0
.xdata$x:00009C96                 db    0
.xdata$x:00009C97                 db    0
.xdata$x:00009C98                 db    0
.xdata$x:00009C99                 db    0
.xdata$x:00009C9A                 db    0
.xdata$x:00009C9B                 db    0
.xdata$x:00009C9C                 db    0
.xdata$x:00009C9D                 db    0
.xdata$x:00009C9E                 db    0
.xdata$x:00009C9F                 db    0
.xdata$x:00009CA0                 db    0
.xdata$x:00009CA1                 db    0
.xdata$x:00009CA2                 db    0
.xdata$x:00009CA3                 db    0
.xdata$x:00009CA3 _xdata$x        ends
.xdata$x:00009CA3
.xdata$x:00009CA4 ; ===========================================================================
.xdata$x:00009CA4
.xdata$x:00009CA4 ; Segment type: Pure data
.xdata$x:00009CA4 ; Segment permissions: Read
.xdata$x:00009CA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CA4                 assume cs:_xdata$x
.xdata$x:00009CA4                 ;org 9CA4h
.xdata$x:00009CA4 ; COMDAT (pick associative to section at 4AD0)
.xdata$x:00009CA4 __unwindtable$??1TiXmlComment@@UAE@XZ db 0FFh
.xdata$x:00009CA4                                         ; DATA XREF: .xdata$x:00009CB4o
.xdata$x:00009CA5                 db 0FFh
.xdata$x:00009CA6                 db 0FFh
.xdata$x:00009CA7                 db 0FFh
.xdata$x:00009CA8                 dd offset __unwindfunclet$??1TiXmlComment@@UAE@XZ$0
.xdata$x:00009CAC __ehfuncinfo$??1TiXmlComment@@UAE@XZ db  22h ; "
.xdata$x:00009CAC                                         ; DATA XREF: __ehhandler$??1TiXmlComment@@UAE@XZ+11o
.xdata$x:00009CAD                 db    5
.xdata$x:00009CAE                 db  93h ; ô
.xdata$x:00009CAF                 db  19h
.xdata$x:00009CB0                 db    1
.xdata$x:00009CB1                 db    0
.xdata$x:00009CB2                 db    0
.xdata$x:00009CB3                 db    0
.xdata$x:00009CB4                 dd offset __unwindtable$??1TiXmlComment@@UAE@XZ
.xdata$x:00009CB8                 db    0
.xdata$x:00009CB9                 db    0
.xdata$x:00009CBA                 db    0
.xdata$x:00009CBB                 db    0
.xdata$x:00009CBC                 db    0
.xdata$x:00009CBD                 db    0
.xdata$x:00009CBE                 db    0
.xdata$x:00009CBF                 db    0
.xdata$x:00009CC0                 db    0
.xdata$x:00009CC1                 db    0
.xdata$x:00009CC2                 db    0
.xdata$x:00009CC3                 db    0
.xdata$x:00009CC4                 db    0
.xdata$x:00009CC5                 db    0
.xdata$x:00009CC6                 db    0
.xdata$x:00009CC7                 db    0
.xdata$x:00009CC8                 db    0
.xdata$x:00009CC9                 db    0
.xdata$x:00009CCA                 db    0
.xdata$x:00009CCB                 db    0
.xdata$x:00009CCC                 db    0
.xdata$x:00009CCD                 db    0
.xdata$x:00009CCE                 db    0
.xdata$x:00009CCF                 db    0
.xdata$x:00009CCF _xdata$x        ends
.xdata$x:00009CCF
.xdata$x:00009CD0 ; ===========================================================================
.xdata$x:00009CD0
.xdata$x:00009CD0 ; Segment type: Pure data
.xdata$x:00009CD0 ; Segment permissions: Read
.xdata$x:00009CD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CD0                 assume cs:_xdata$x
.xdata$x:00009CD0                 ;org 9CD0h
.xdata$x:00009CD0 ; COMDAT (pick associative to section at 38E4)
.xdata$x:00009CD0 __unwindtable$??0TiXmlText@@QAE@PB_W@Z db 0FFh
.xdata$x:00009CD0                                         ; DATA XREF: .xdata$x:00009CE0o
.xdata$x:00009CD1                 db 0FFh
.xdata$x:00009CD2                 db 0FFh
.xdata$x:00009CD3                 db 0FFh
.xdata$x:00009CD4                 dd offset __unwindfunclet$??0TiXmlText@@QAE@PB_W@Z$0
.xdata$x:00009CD8 __ehfuncinfo$??0TiXmlText@@QAE@PB_W@Z db  22h ; "
.xdata$x:00009CD8                                         ; DATA XREF: __ehhandler$??0TiXmlText@@QAE@PB_W@Z+11o
.xdata$x:00009CD9                 db    5
.xdata$x:00009CDA                 db  93h ; ô
.xdata$x:00009CDB                 db  19h
.xdata$x:00009CDC                 db    1
.xdata$x:00009CDD                 db    0
.xdata$x:00009CDE                 db    0
.xdata$x:00009CDF                 db    0
.xdata$x:00009CE0                 dd offset __unwindtable$??0TiXmlText@@QAE@PB_W@Z
.xdata$x:00009CE4                 db    0
.xdata$x:00009CE5                 db    0
.xdata$x:00009CE6                 db    0
.xdata$x:00009CE7                 db    0
.xdata$x:00009CE8                 db    0
.xdata$x:00009CE9                 db    0
.xdata$x:00009CEA                 db    0
.xdata$x:00009CEB                 db    0
.xdata$x:00009CEC                 db    0
.xdata$x:00009CED                 db    0
.xdata$x:00009CEE                 db    0
.xdata$x:00009CEF                 db    0
.xdata$x:00009CF0                 db    0
.xdata$x:00009CF1                 db    0
.xdata$x:00009CF2                 db    0
.xdata$x:00009CF3                 db    0
.xdata$x:00009CF4                 db    0
.xdata$x:00009CF5                 db    0
.xdata$x:00009CF6                 db    0
.xdata$x:00009CF7                 db    0
.xdata$x:00009CF8                 db    0
.xdata$x:00009CF9                 db    0
.xdata$x:00009CFA                 db    0
.xdata$x:00009CFB                 db    0
.xdata$x:00009CFB _xdata$x        ends
.xdata$x:00009CFB
.xdata$x:00009CFC ; ===========================================================================
.xdata$x:00009CFC
.xdata$x:00009CFC ; Segment type: Pure data
.xdata$x:00009CFC ; Segment permissions: Read
.xdata$x:00009CFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CFC                 assume cs:_xdata$x
.xdata$x:00009CFC                 ;org 9CFCh
.xdata$x:00009CFC ; COMDAT (pick associative to section at 4C10)
.xdata$x:00009CFC __unwindtable$??1TiXmlText@@UAE@XZ db 0FFh ; DATA XREF: .xdata$x:00009D0Co
.xdata$x:00009CFD                 db 0FFh
.xdata$x:00009CFE                 db 0FFh
.xdata$x:00009CFF                 db 0FFh
.xdata$x:00009D00                 dd offset __unwindfunclet$??1TiXmlText@@UAE@XZ$0
.xdata$x:00009D04 __ehfuncinfo$??1TiXmlText@@UAE@XZ db  22h ; "
.xdata$x:00009D04                                         ; DATA XREF: __ehhandler$??1TiXmlText@@UAE@XZ+11o
.xdata$x:00009D05                 db    5
.xdata$x:00009D06                 db  93h ; ô
.xdata$x:00009D07                 db  19h
.xdata$x:00009D08                 db    1
.xdata$x:00009D09                 db    0
.xdata$x:00009D0A                 db    0
.xdata$x:00009D0B                 db    0
.xdata$x:00009D0C                 dd offset __unwindtable$??1TiXmlText@@UAE@XZ
.xdata$x:00009D10                 db    0
.xdata$x:00009D11                 db    0
.xdata$x:00009D12                 db    0
.xdata$x:00009D13                 db    0
.xdata$x:00009D14                 db    0
.xdata$x:00009D15                 db    0
.xdata$x:00009D16                 db    0
.xdata$x:00009D17                 db    0
.xdata$x:00009D18                 db    0
.xdata$x:00009D19                 db    0
.xdata$x:00009D1A                 db    0
.xdata$x:00009D1B                 db    0
.xdata$x:00009D1C                 db    0
.xdata$x:00009D1D                 db    0
.xdata$x:00009D1E                 db    0
.xdata$x:00009D1F                 db    0
.xdata$x:00009D20                 db    0
.xdata$x:00009D21                 db    0
.xdata$x:00009D22                 db    0
.xdata$x:00009D23                 db    0
.xdata$x:00009D24                 db    0
.xdata$x:00009D25                 db    0
.xdata$x:00009D26                 db    0
.xdata$x:00009D27                 db    0
.xdata$x:00009D27 _xdata$x        ends
.xdata$x:00009D27
.xdata$x:00009D28 ; ===========================================================================
.xdata$x:00009D28
.xdata$x:00009D28 ; Segment type: Pure data
.xdata$x:00009D28 ; Segment permissions: Read
.xdata$x:00009D28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D28                 assume cs:_xdata$x
.xdata$x:00009D28                 ;org 9D28h
.xdata$x:00009D28 ; COMDAT (pick associative to section at 37C0)
.xdata$x:00009D28 __unwindtable$??0TiXmlDeclaration@@QAE@XZ db 0FFh
.xdata$x:00009D28                                         ; DATA XREF: .xdata$x:00009D50o
.xdata$x:00009D29                 db 0FFh
.xdata$x:00009D2A                 db 0FFh
.xdata$x:00009D2B                 db 0FFh
.xdata$x:00009D2C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0
.xdata$x:00009D30                 db    0
.xdata$x:00009D31                 db    0
.xdata$x:00009D32                 db    0
.xdata$x:00009D33                 db    0
.xdata$x:00009D34                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1
.xdata$x:00009D38                 db    1
.xdata$x:00009D39                 db    0
.xdata$x:00009D3A                 db    0
.xdata$x:00009D3B                 db    0
.xdata$x:00009D3C                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2
.xdata$x:00009D40                 db    2
.xdata$x:00009D41                 db    0
.xdata$x:00009D42                 db    0
.xdata$x:00009D43                 db    0
.xdata$x:00009D44                 dd offset __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$3
.xdata$x:00009D48 __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ db  22h ; "
.xdata$x:00009D48                                         ; DATA XREF: __ehhandler$??0TiXmlDeclaration@@QAE@XZ+11o
.xdata$x:00009D49                 db    5
.xdata$x:00009D4A                 db  93h ; ô
.xdata$x:00009D4B                 db  19h
.xdata$x:00009D4C                 db    4
.xdata$x:00009D4D                 db    0
.xdata$x:00009D4E                 db    0
.xdata$x:00009D4F                 db    0
.xdata$x:00009D50                 dd offset __unwindtable$??0TiXmlDeclaration@@QAE@XZ
.xdata$x:00009D54                 db    0
.xdata$x:00009D55                 db    0
.xdata$x:00009D56                 db    0
.xdata$x:00009D57                 db    0
.xdata$x:00009D58                 db    0
.xdata$x:00009D59                 db    0
.xdata$x:00009D5A                 db    0
.xdata$x:00009D5B                 db    0
.xdata$x:00009D5C                 db    0
.xdata$x:00009D5D                 db    0
.xdata$x:00009D5E                 db    0
.xdata$x:00009D5F                 db    0
.xdata$x:00009D60                 db    0
.xdata$x:00009D61                 db    0
.xdata$x:00009D62                 db    0
.xdata$x:00009D63                 db    0
.xdata$x:00009D64                 db    0
.xdata$x:00009D65                 db    0
.xdata$x:00009D66                 db    0
.xdata$x:00009D67                 db    0
.xdata$x:00009D68                 db    0
.xdata$x:00009D69                 db    0
.xdata$x:00009D6A                 db    0
.xdata$x:00009D6B                 db    0
.xdata$x:00009D6B _xdata$x        ends
.xdata$x:00009D6B
.xdata$x:00009D6C ; ===========================================================================
.xdata$x:00009D6C
.xdata$x:00009D6C ; Segment type: Pure data
.xdata$x:00009D6C ; Segment permissions: Read
.xdata$x:00009D6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D6C                 assume cs:_xdata$x
.xdata$x:00009D6C                 ;org 9D6Ch
.xdata$x:00009D6C ; COMDAT (pick associative to section at 4B48)
.xdata$x:00009D6C __unwindtable$??1TiXmlDeclaration@@UAE@XZ db 0FFh
.xdata$x:00009D6C                                         ; DATA XREF: .xdata$x:00009D94o
.xdata$x:00009D6D                 db 0FFh
.xdata$x:00009D6E                 db 0FFh
.xdata$x:00009D6F                 db 0FFh
.xdata$x:00009D70                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0
.xdata$x:00009D74                 align 8
.xdata$x:00009D78                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1
.xdata$x:00009D7C                 db    1
.xdata$x:00009D7D                 db    0
.xdata$x:00009D7E                 db    0
.xdata$x:00009D7F                 db    0
.xdata$x:00009D80                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2
.xdata$x:00009D84                 db    2
.xdata$x:00009D85                 db    0
.xdata$x:00009D86                 db    0
.xdata$x:00009D87                 db    0
.xdata$x:00009D88                 dd offset __unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$3
.xdata$x:00009D8C __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ db  22h ; "
.xdata$x:00009D8C                                         ; DATA XREF: __ehhandler$??1TiXmlDeclaration@@UAE@XZ+11o
.xdata$x:00009D8D                 db    5
.xdata$x:00009D8E                 db  93h ; ô
.xdata$x:00009D8F                 db  19h
.xdata$x:00009D90                 db    4
.xdata$x:00009D91                 db    0
.xdata$x:00009D92                 db    0
.xdata$x:00009D93                 db    0
.xdata$x:00009D94                 dd offset __unwindtable$??1TiXmlDeclaration@@UAE@XZ
.xdata$x:00009D98                 db    0
.xdata$x:00009D99                 db    0
.xdata$x:00009D9A                 db    0
.xdata$x:00009D9B                 db    0
.xdata$x:00009D9C                 db    0
.xdata$x:00009D9D                 db    0
.xdata$x:00009D9E                 db    0
.xdata$x:00009D9F                 db    0
.xdata$x:00009DA0                 db    0
.xdata$x:00009DA1                 db    0
.xdata$x:00009DA2                 db    0
.xdata$x:00009DA3                 db    0
.xdata$x:00009DA4                 db    0
.xdata$x:00009DA5                 db    0
.xdata$x:00009DA6                 db    0
.xdata$x:00009DA7                 db    0
.xdata$x:00009DA8                 db    0
.xdata$x:00009DA9                 db    0
.xdata$x:00009DAA                 db    0
.xdata$x:00009DAB                 db    0
.xdata$x:00009DAC                 db    0
.xdata$x:00009DAD                 db    0
.xdata$x:00009DAE                 db    0
.xdata$x:00009DAF                 db    0
.xdata$x:00009DAF _xdata$x        ends
.xdata$x:00009DAF
.xdata$x:00009DB0 ; ===========================================================================
.xdata$x:00009DB0
.xdata$x:00009DB0 ; Segment type: Pure data
.xdata$x:00009DB0 ; Segment permissions: Read
.xdata$x:00009DB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DB0                 assume cs:_xdata$x
.xdata$x:00009DB0                 ;org 9DB0h
.xdata$x:00009DB0 ; COMDAT (pick associative to section at 3970)
.xdata$x:00009DB0 __unwindtable$??0TiXmlUnknown@@QAE@XZ db 0FFh
.xdata$x:00009DB0                                         ; DATA XREF: .xdata$x:00009DC0o
.xdata$x:00009DB1                 db 0FFh
.xdata$x:00009DB2                 db 0FFh
.xdata$x:00009DB3                 db 0FFh
.xdata$x:00009DB4                 dd offset __unwindfunclet$??0TiXmlUnknown@@QAE@XZ$0
.xdata$x:00009DB8 __ehfuncinfo$??0TiXmlUnknown@@QAE@XZ db  22h ; "
.xdata$x:00009DB8                                         ; DATA XREF: __ehhandler$??0TiXmlUnknown@@QAE@XZ+11o
.xdata$x:00009DB9                 db    5
.xdata$x:00009DBA                 db  93h ; ô
.xdata$x:00009DBB                 db  19h
.xdata$x:00009DBC                 db    1
.xdata$x:00009DBD                 db    0
.xdata$x:00009DBE                 db    0
.xdata$x:00009DBF                 db    0
.xdata$x:00009DC0                 dd offset __unwindtable$??0TiXmlUnknown@@QAE@XZ
.xdata$x:00009DC4                 db    0
.xdata$x:00009DC5                 db    0
.xdata$x:00009DC6                 db    0
.xdata$x:00009DC7                 db    0
.xdata$x:00009DC8                 db    0
.xdata$x:00009DC9                 db    0
.xdata$x:00009DCA                 db    0
.xdata$x:00009DCB                 db    0
.xdata$x:00009DCC                 db    0
.xdata$x:00009DCD                 db    0
.xdata$x:00009DCE                 db    0
.xdata$x:00009DCF                 db    0
.xdata$x:00009DD0                 db    0
.xdata$x:00009DD1                 db    0
.xdata$x:00009DD2                 db    0
.xdata$x:00009DD3                 db    0
.xdata$x:00009DD4                 db    0
.xdata$x:00009DD5                 db    0
.xdata$x:00009DD6                 db    0
.xdata$x:00009DD7                 db    0
.xdata$x:00009DD8                 db    0
.xdata$x:00009DD9                 db    0
.xdata$x:00009DDA                 db    0
.xdata$x:00009DDB                 db    0
.xdata$x:00009DDB _xdata$x        ends
.xdata$x:00009DDB
.xdata$x:00009DDC ; ===========================================================================
.xdata$x:00009DDC
.xdata$x:00009DDC ; Segment type: Pure data
.xdata$x:00009DDC ; Segment permissions: Read
.xdata$x:00009DDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DDC                 assume cs:_xdata$x
.xdata$x:00009DDC                 ;org 9DDCh
.xdata$x:00009DDC ; COMDAT (pick associative to section at 4C88)
.xdata$x:00009DDC __unwindtable$??1TiXmlUnknown@@UAE@XZ db 0FFh
.xdata$x:00009DDC                                         ; DATA XREF: .xdata$x:00009DECo
.xdata$x:00009DDD                 db 0FFh
.xdata$x:00009DDE                 db 0FFh
.xdata$x:00009DDF                 db 0FFh
.xdata$x:00009DE0                 dd offset __unwindfunclet$??1TiXmlUnknown@@UAE@XZ$0
.xdata$x:00009DE4 __ehfuncinfo$??1TiXmlUnknown@@UAE@XZ db  22h ; "
.xdata$x:00009DE4                                         ; DATA XREF: __ehhandler$??1TiXmlUnknown@@UAE@XZ+11o
.xdata$x:00009DE5                 db    5
.xdata$x:00009DE6                 db  93h ; ô
.xdata$x:00009DE7                 db  19h
.xdata$x:00009DE8                 db    1
.xdata$x:00009DE9                 db    0
.xdata$x:00009DEA                 db    0
.xdata$x:00009DEB                 db    0
.xdata$x:00009DEC                 dd offset __unwindtable$??1TiXmlUnknown@@UAE@XZ
.xdata$x:00009DF0                 db    0
.xdata$x:00009DF1                 db    0
.xdata$x:00009DF2                 db    0
.xdata$x:00009DF3                 db    0
.xdata$x:00009DF4                 db    0
.xdata$x:00009DF5                 db    0
.xdata$x:00009DF6                 db    0
.xdata$x:00009DF7                 db    0
.xdata$x:00009DF8                 db    0
.xdata$x:00009DF9                 db    0
.xdata$x:00009DFA                 db    0
.xdata$x:00009DFB                 db    0
.xdata$x:00009DFC                 db    0
.xdata$x:00009DFD                 db    0
.xdata$x:00009DFE                 db    0
.xdata$x:00009DFF                 db    0
.xdata$x:00009E00                 db    0
.xdata$x:00009E01                 db    0
.xdata$x:00009E02                 db    0
.xdata$x:00009E03                 db    0
.xdata$x:00009E04                 db    0
.xdata$x:00009E05                 db    0
.xdata$x:00009E06                 db    0
.xdata$x:00009E07                 db    0
.xdata$x:00009E07 _xdata$x        ends
.xdata$x:00009E07
.xdata$x:00009E08 ; ===========================================================================
.xdata$x:00009E08
.xdata$x:00009E08 ; Segment type: Pure data
.xdata$x:00009E08 ; Segment permissions: Read
.xdata$x:00009E08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E08                 assume cs:_xdata$x
.xdata$x:00009E08                 ;org 9E08h
.xdata$x:00009E08 ; COMDAT (pick associative to section at 6DA4)
.xdata$x:00009E08 __catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 db    0
.xdata$x:00009E08                                         ; DATA XREF: .xdata$x:00009E38o
.xdata$x:00009E09                 db    0
.xdata$x:00009E0A                 db    0
.xdata$x:00009E0B                 db    0
.xdata$x:00009E0C                 db    0
.xdata$x:00009E0D                 db    0
.xdata$x:00009E0E                 db    0
.xdata$x:00009E0F                 db    0
.xdata$x:00009E10                 db    0
.xdata$x:00009E11                 db    0
.xdata$x:00009E12                 db    0
.xdata$x:00009E13                 db    0
.xdata$x:00009E14                 dd offset __catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
.xdata$x:00009E18 __unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db 0FFh
.xdata$x:00009E18                                         ; DATA XREF: .xdata$x:00009E44o
.xdata$x:00009E19                 db 0FFh
.xdata$x:00009E1A                 db 0FFh
.xdata$x:00009E1B                 db 0FFh
.xdata$x:00009E1C                 db    0
.xdata$x:00009E1D                 db    0
.xdata$x:00009E1E                 db    0
.xdata$x:00009E1F                 db    0
.xdata$x:00009E20                 db 0FFh
.xdata$x:00009E21                 db 0FFh
.xdata$x:00009E22                 db 0FFh
.xdata$x:00009E23                 db 0FFh
.xdata$x:00009E24                 db    0
.xdata$x:00009E25                 db    0
.xdata$x:00009E26                 db    0
.xdata$x:00009E27                 db    0
.xdata$x:00009E28 __tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db    0
.xdata$x:00009E28                                         ; DATA XREF: .xdata$x:00009E4Co
.xdata$x:00009E29                 db    0
.xdata$x:00009E2A                 db    0
.xdata$x:00009E2B                 db    0
.xdata$x:00009E2C                 db    0
.xdata$x:00009E2D                 db    0
.xdata$x:00009E2E                 db    0
.xdata$x:00009E2F                 db    0
.xdata$x:00009E30                 db    1
.xdata$x:00009E31                 db    0
.xdata$x:00009E32                 db    0
.xdata$x:00009E33                 db    0
.xdata$x:00009E34                 db    1
.xdata$x:00009E35                 db    0
.xdata$x:00009E36                 db    0
.xdata$x:00009E37                 db    0
.xdata$x:00009E38                 dd offset __catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
.xdata$x:00009E3C __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ db  22h ; "
.xdata$x:00009E3C                                         ; DATA XREF: __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ+11o
.xdata$x:00009E3D                 db    5
.xdata$x:00009E3E                 db  93h ; ô
.xdata$x:00009E3F                 db  19h
.xdata$x:00009E40                 db    2
.xdata$x:00009E41                 db    0
.xdata$x:00009E42                 db    0
.xdata$x:00009E43                 db    0
.xdata$x:00009E44                 dd offset __unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.xdata$x:00009E48                 db    1
.xdata$x:00009E49                 db    0
.xdata$x:00009E4A                 db    0
.xdata$x:00009E4B                 db    0
.xdata$x:00009E4C                 dd offset __tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
.xdata$x:00009E50                 align 20h
.xdata$x:00009E50 _xdata$x        ends
.xdata$x:00009E50
.xdata$x:00009E60 ; ===========================================================================
.xdata$x:00009E60
.xdata$x:00009E60 ; Segment type: Pure data
.xdata$x:00009E60 ; Segment permissions: Read
.xdata$x:00009E60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E60                 assume cs:_xdata$x
.xdata$x:00009E60                 ;org 9E60h
.xdata$x:00009E60 ; COMDAT (pick associative to section at 81EC)
.xdata$x:00009E60 __unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ db 0FFh
.xdata$x:00009E60                                         ; DATA XREF: .xdata$x:00009E70o
.xdata$x:00009E61                 db 0FFh
.xdata$x:00009E62                 db 0FFh
.xdata$x:00009E63                 db 0FFh
.xdata$x:00009E64                 dd offset __unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0
.xdata$x:00009E68 __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ db  22h ; "
.xdata$x:00009E68                                         ; DATA XREF: __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ+11o
.xdata$x:00009E69                 db    5
.xdata$x:00009E6A                 db  93h ; ô
.xdata$x:00009E6B                 db  19h
.xdata$x:00009E6C                 db    1
.xdata$x:00009E6D                 db    0
.xdata$x:00009E6E                 db    0
.xdata$x:00009E6F                 db    0
.xdata$x:00009E70                 dd offset __unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
.xdata$x:00009E74                 db    0
.xdata$x:00009E75                 db    0
.xdata$x:00009E76                 db    0
.xdata$x:00009E77                 db    0
.xdata$x:00009E78                 db    0
.xdata$x:00009E79                 db    0
.xdata$x:00009E7A                 db    0
.xdata$x:00009E7B                 db    0
.xdata$x:00009E7C                 db    0
.xdata$x:00009E7D                 db    0
.xdata$x:00009E7E                 db    0
.xdata$x:00009E7F                 db    0
.xdata$x:00009E80                 db    0
.xdata$x:00009E81                 db    0
.xdata$x:00009E82                 db    0
.xdata$x:00009E83                 db    0
.xdata$x:00009E84                 db    0
.xdata$x:00009E85                 db    0
.xdata$x:00009E86                 db    0
.xdata$x:00009E87                 db    0
.xdata$x:00009E88                 db    0
.xdata$x:00009E89                 db    0
.xdata$x:00009E8A                 db    0
.xdata$x:00009E8B                 db    0
.xdata$x:00009E8B _xdata$x        ends
.xdata$x:00009E8B
.xdata$x:00009E8C ; ===========================================================================
.xdata$x:00009E8C
.xdata$x:00009E8C ; Segment type: Pure data
.xdata$x:00009E8C ; Segment permissions: Read
.xdata$x:00009E8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E8C                 assume cs:_xdata$x
.xdata$x:00009E8C                 ;org 9E8Ch
.xdata$x:00009E8C ; COMDAT (pick associative to section at 2D34)
.xdata$x:00009E8C __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00009E8C                                         ; DATA XREF: .xdata$x:00009E9Co
.xdata$x:00009E8D                 db 0FFh
.xdata$x:00009E8E                 db 0FFh
.xdata$x:00009E8F                 db 0FFh
.xdata$x:00009E90                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00009E94 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00009E94                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00009E95                 db    5
.xdata$x:00009E96                 db  93h ; ô
.xdata$x:00009E97                 db  19h
.xdata$x:00009E98                 db    1
.xdata$x:00009E99                 db    0
.xdata$x:00009E9A                 db    0
.xdata$x:00009E9B                 db    0
.xdata$x:00009E9C                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:00009EA0                 db    0
.xdata$x:00009EA1                 db    0
.xdata$x:00009EA2                 db    0
.xdata$x:00009EA3                 db    0
.xdata$x:00009EA4                 db    0
.xdata$x:00009EA5                 db    0
.xdata$x:00009EA6                 db    0
.xdata$x:00009EA7                 db    0
.xdata$x:00009EA8                 db    0
.xdata$x:00009EA9                 db    0
.xdata$x:00009EAA                 db    0
.xdata$x:00009EAB                 db    0
.xdata$x:00009EAC                 db    0
.xdata$x:00009EAD                 db    0
.xdata$x:00009EAE                 db    0
.xdata$x:00009EAF                 db    0
.xdata$x:00009EB0                 db    0
.xdata$x:00009EB1                 db    0
.xdata$x:00009EB2                 db    0
.xdata$x:00009EB3                 db    0
.xdata$x:00009EB4                 db    0
.xdata$x:00009EB5                 db    0
.xdata$x:00009EB6                 db    0
.xdata$x:00009EB7                 db    0
.xdata$x:00009EB7 _xdata$x        ends
.xdata$x:00009EB7
.xdata$x:00009EB8 ; ===========================================================================
.xdata$x:00009EB8
.xdata$x:00009EB8 ; Segment type: Pure data
.xdata$x:00009EB8 ; Segment permissions: Read
.xdata$x:00009EB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EB8                 assume cs:_xdata$x
.xdata$x:00009EB8                 ;org 9EB8h
.xdata$x:00009EB8 ; COMDAT (pick associative to section at 4450)
.xdata$x:00009EB8 __unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z db 0FFh
.xdata$x:00009EB8                                         ; DATA XREF: .xdata$x:00009EC8o
.xdata$x:00009EB9                 db 0FFh
.xdata$x:00009EBA                 db 0FFh
.xdata$x:00009EBB                 db 0FFh
.xdata$x:00009EBC                 dd offset __unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
.xdata$x:00009EC0 __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z db  22h ; "
.xdata$x:00009EC0                                         ; DATA XREF: __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z+11o
.xdata$x:00009EC1                 db    5
.xdata$x:00009EC2                 db  93h ; ô
.xdata$x:00009EC3                 db  19h
.xdata$x:00009EC4                 db    1
.xdata$x:00009EC5                 db    0
.xdata$x:00009EC6                 db    0
.xdata$x:00009EC7                 db    0
.xdata$x:00009EC8                 dd offset __unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
.xdata$x:00009ECC                 db    0
.xdata$x:00009ECD                 db    0
.xdata$x:00009ECE                 db    0
.xdata$x:00009ECF                 db    0
.xdata$x:00009ED0                 db    0
.xdata$x:00009ED1                 db    0
.xdata$x:00009ED2                 db    0
.xdata$x:00009ED3                 db    0
.xdata$x:00009ED4                 db    0
.xdata$x:00009ED5                 db    0
.xdata$x:00009ED6                 db    0
.xdata$x:00009ED7                 db    0
.xdata$x:00009ED8                 db    0
.xdata$x:00009ED9                 db    0
.xdata$x:00009EDA                 db    0
.xdata$x:00009EDB                 db    0
.xdata$x:00009EDC                 db    0
.xdata$x:00009EDD                 db    0
.xdata$x:00009EDE                 db    0
.xdata$x:00009EDF                 db    0
.xdata$x:00009EE0                 db    0
.xdata$x:00009EE1                 db    0
.xdata$x:00009EE2                 db    0
.xdata$x:00009EE3                 db    0
.xdata$x:00009EE3 _xdata$x        ends
.xdata$x:00009EE3
.xdata$x:00009EE4 ; ===========================================================================
.xdata$x:00009EE4
.xdata$x:00009EE4 ; Segment type: Pure data
.xdata$x:00009EE4 ; Segment permissions: Read
.xdata$x:00009EE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EE4                 assume cs:_xdata$x
.xdata$x:00009EE4                 ;org 9EE4h
.xdata$x:00009EE4 ; COMDAT (pick associative to section at 5330)
.xdata$x:00009EE4 __unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009EE4                                         ; DATA XREF: .xdata$x:00009EF4o
.xdata$x:00009EE5                 db 0FFh
.xdata$x:00009EE6                 db 0FFh
.xdata$x:00009EE7                 db 0FFh
.xdata$x:00009EE8                 dd offset __unwindfunclet$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009EEC __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009EEC                                         ; DATA XREF: __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009EED                 db    5
.xdata$x:00009EEE                 db  93h ; ô
.xdata$x:00009EEF                 db  19h
.xdata$x:00009EF0                 db    1
.xdata$x:00009EF1                 db    0
.xdata$x:00009EF2                 db    0
.xdata$x:00009EF3                 db    0
.xdata$x:00009EF4                 dd offset __unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
.xdata$x:00009EF8                 db    0
.xdata$x:00009EF9                 db    0
.xdata$x:00009EFA                 db    0
.xdata$x:00009EFB                 db    0
.xdata$x:00009EFC                 db    0
.xdata$x:00009EFD                 db    0
.xdata$x:00009EFE                 db    0
.xdata$x:00009EFF                 db    0
.xdata$x:00009F00                 db    0
.xdata$x:00009F01                 db    0
.xdata$x:00009F02                 db    0
.xdata$x:00009F03                 db    0
.xdata$x:00009F04                 db    0
.xdata$x:00009F05                 db    0
.xdata$x:00009F06                 db    0
.xdata$x:00009F07                 db    0
.xdata$x:00009F08                 db    0
.xdata$x:00009F09                 db    0
.xdata$x:00009F0A                 db    0
.xdata$x:00009F0B                 db    0
.xdata$x:00009F0C                 db    0
.xdata$x:00009F0D                 db    0
.xdata$x:00009F0E                 db    0
.xdata$x:00009F0F                 db    0
.xdata$x:00009F0F _xdata$x        ends
.xdata$x:00009F0F
.xdata$x:00009F10 ; ===========================================================================
.xdata$x:00009F10
.xdata$x:00009F10 ; Segment type: Pure data
.xdata$x:00009F10 ; Segment permissions: Read
.xdata$x:00009F10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F10                 assume cs:_xdata$x
.xdata$x:00009F10                 ;org 9F10h
.xdata$x:00009F10 ; COMDAT (pick associative to section at 2B60)
.xdata$x:00009F10 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00009F10                                         ; DATA XREF: .xdata$x:00009F20o
.xdata$x:00009F11                 db 0FFh
.xdata$x:00009F12                 db 0FFh
.xdata$x:00009F13                 db 0FFh
.xdata$x:00009F14                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00009F18 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00009F18                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00009F19                 db    5
.xdata$x:00009F1A                 db  93h ; ô
.xdata$x:00009F1B                 db  19h
.xdata$x:00009F1C                 db    1
.xdata$x:00009F1D                 db    0
.xdata$x:00009F1E                 db    0
.xdata$x:00009F1F                 db    0
.xdata$x:00009F20                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00009F24                 db    0
.xdata$x:00009F25                 db    0
.xdata$x:00009F26                 db    0
.xdata$x:00009F27                 db    0
.xdata$x:00009F28                 db    0
.xdata$x:00009F29                 db    0
.xdata$x:00009F2A                 db    0
.xdata$x:00009F2B                 db    0
.xdata$x:00009F2C                 db    0
.xdata$x:00009F2D                 db    0
.xdata$x:00009F2E                 db    0
.xdata$x:00009F2F                 db    0
.xdata$x:00009F30                 db    0
.xdata$x:00009F31                 db    0
.xdata$x:00009F32                 db    0
.xdata$x:00009F33                 db    0
.xdata$x:00009F34                 db    0
.xdata$x:00009F35                 db    0
.xdata$x:00009F36                 db    0
.xdata$x:00009F37                 db    0
.xdata$x:00009F38                 db    0
.xdata$x:00009F39                 db    0
.xdata$x:00009F3A                 db    0
.xdata$x:00009F3B                 db    0
.xdata$x:00009F3B _xdata$x        ends
.xdata$x:00009F3B
.xdata$x:00009F3C ; ===========================================================================
.xdata$x:00009F3C
.xdata$x:00009F3C ; Segment type: Pure data
.xdata$x:00009F3C ; Segment permissions: Read
.xdata$x:00009F3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F3C                 assume cs:_xdata$x
.xdata$x:00009F3C                 ;org 9F3Ch
.xdata$x:00009F3C ; COMDAT (pick associative to section at 2C60)
.xdata$x:00009F3C __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00009F3C                                         ; DATA XREF: .xdata$x:00009F4Co
.xdata$x:00009F3D                 db 0FFh
.xdata$x:00009F3E                 db 0FFh
.xdata$x:00009F3F                 db 0FFh
.xdata$x:00009F40                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00009F44 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00009F44                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00009F45                 db    5
.xdata$x:00009F46                 db  93h ; ô
.xdata$x:00009F47                 db  19h
.xdata$x:00009F48                 db    1
.xdata$x:00009F49                 db    0
.xdata$x:00009F4A                 db    0
.xdata$x:00009F4B                 db    0
.xdata$x:00009F4C                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00009F50                 db    0
.xdata$x:00009F51                 db    0
.xdata$x:00009F52                 db    0
.xdata$x:00009F53                 db    0
.xdata$x:00009F54                 db    0
.xdata$x:00009F55                 db    0
.xdata$x:00009F56                 db    0
.xdata$x:00009F57                 db    0
.xdata$x:00009F58                 db    0
.xdata$x:00009F59                 db    0
.xdata$x:00009F5A                 db    0
.xdata$x:00009F5B                 db    0
.xdata$x:00009F5C                 db    0
.xdata$x:00009F5D                 db    0
.xdata$x:00009F5E                 db    0
.xdata$x:00009F5F                 db    0
.xdata$x:00009F60                 db    0
.xdata$x:00009F61                 db    0
.xdata$x:00009F62                 db    0
.xdata$x:00009F63                 db    0
.xdata$x:00009F64                 db    0
.xdata$x:00009F65                 db    0
.xdata$x:00009F66                 db    0
.xdata$x:00009F67                 db    0
.xdata$x:00009F67 _xdata$x        ends
.xdata$x:00009F67
.bss:00009F68 ; ===========================================================================
.bss:00009F68
.bss:00009F68 ; Segment type: Uninitialized
.bss:00009F68 ; Segment permissions: Read/Write
.bss:00009F68 _bss            segment byte public 'BSS' use32
.bss:00009F68                 assume cs:_bss
.bss:00009F68                 ;org 9F68h
.bss:00009F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00009F68 _allocator_arg  db    ? ;
.bss:00009F69 _piecewise_construct db    ? ;
.bss:00009F6A                 align 4
.bss:00009F6A _bss            ends
.bss:00009F6A
.rdata:00009F6C ; ===========================================================================
.rdata:00009F6C
.rdata:00009F6C ; Segment type: Pure data
.rdata:00009F6C ; Segment permissions: Read
.rdata:00009F6C _rdata          segment dword public 'DATA' use32
.rdata:00009F6C                 assume cs:_rdata
.rdata:00009F6C                 ;org 9F6Ch
.rdata:00009F6C ; COMDAT (pick any)
.rdata:00009F6C                 public ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
.rdata:00009F6C ; size_t std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.rdata:00009F6C ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB dd 0FFFFFFFFh
.rdata:00009F6C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+5Br
.rdata:00009F6C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+7r ...
.rdata:00009F6C _rdata          ends
.rdata:00009F6C
.rdata:00009F70 ; ===========================================================================
.rdata:00009F70
.rdata:00009F70 ; Segment type: Pure data
.rdata:00009F70 ; Segment permissions: Read
.rdata:00009F70 _rdata          segment dword public 'DATA' use32
.rdata:00009F70                 assume cs:_rdata
.rdata:00009F70                 ;org 9F70h
.rdata:00009F70 ; COMDAT (pick largest)
.rdata:00009F70                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:00009F74                 public ??_7runtime_error@std@@6B@
.rdata:00009F74 ; const std::runtime_error::`vftable'
.rdata:00009F74 ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:00009F74                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:00009F74                                         ; std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+49o ...
.rdata:00009F74                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:00009F78                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:00009F78 _rdata          ends
.rdata:00009F78
.xdata$x:00009F7C ; ===========================================================================
.xdata$x:00009F7C
.xdata$x:00009F7C ; Segment type: Pure data
.xdata$x:00009F7C ; Segment permissions: Read
.xdata$x:00009F7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F7C                 assume cs:_xdata$x
.xdata$x:00009F7C                 ;org 9F7Ch
.xdata$x:00009F7C ; COMDAT (pick any)
.xdata$x:00009F7C                 public __TI2?AVruntime_error@std@@
.xdata$x:00009F7C __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+A6o
.xdata$x:00009F7D                 db    0
.xdata$x:00009F7E                 db    0
.xdata$x:00009F7F                 db    0
.xdata$x:00009F80                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:00009F84                 align 8
.xdata$x:00009F88                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:00009F88 _xdata$x        ends
.xdata$x:00009F88
.xdata$x:00009F8C ; ===========================================================================
.xdata$x:00009F8C
.xdata$x:00009F8C ; Segment type: Pure data
.xdata$x:00009F8C ; Segment permissions: Read
.xdata$x:00009F8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F8C                 assume cs:_xdata$x
.xdata$x:00009F8C                 ;org 9F8Ch
.xdata$x:00009F8C ; COMDAT (pick any)
.xdata$x:00009F8C                 public __CTA2?AVruntime_error@std@@
.xdata$x:00009F8C __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:00009F88o
.xdata$x:00009F8D                 db    0
.xdata$x:00009F8E                 db    0
.xdata$x:00009F8F                 db    0
.xdata$x:00009F90                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:00009F94                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00009F94 _xdata$x        ends
.xdata$x:00009F94
.data$r:00009F98 ; ===========================================================================
.data$r:00009F98
.data$r:00009F98 ; Segment type: Pure data
.data$r:00009F98 ; Segment permissions: Read/Write
.data$r:00009F98 _data$r         segment dword public 'DATA' use32
.data$r:00009F98                 assume cs:_data$r
.data$r:00009F98                 ;org 9F98h
.data$r:00009F98 ; COMDAT (pick any)
.data$r:00009F98                 public ??_R0?AVruntime_error@std@@@8
.data$r:00009F98 ; class std::runtime_error `RTTI Type Descriptor'
.data$r:00009F98 ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009F98                                         ; DATA XREF: .xdata$x:00009FBCo
.data$r:00009F98                                         ; .rdata$r:0000A714o ...
.data$r:00009F98                                         ; const type_info::`vftable'
.data$r:00009F9C                 align 10h
.data$r:00009FA0 a_?avruntime_er db '.?AVruntime_error@std@@',0
.data$r:00009FA0 _data$r         ends
.data$r:00009FA0
.xdata$x:00009FB8 ; ===========================================================================
.xdata$x:00009FB8
.xdata$x:00009FB8 ; Segment type: Pure data
.xdata$x:00009FB8 ; Segment permissions: Read
.xdata$x:00009FB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FB8                 assume cs:_xdata$x
.xdata$x:00009FB8                 ;org 9FB8h
.xdata$x:00009FB8 ; COMDAT (pick any)
.xdata$x:00009FB8                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:00009FB8 __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:00009FB8                                         ; DATA XREF: .xdata$x:00009F90o
.xdata$x:00009FB8                                         ; .xdata$x:0000A270o
.xdata$x:00009FB9                 db    0
.xdata$x:00009FBA                 db    0
.xdata$x:00009FBB                 db    0
.xdata$x:00009FBC                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:00009FC0                 db    0
.xdata$x:00009FC1                 db    0
.xdata$x:00009FC2                 db    0
.xdata$x:00009FC3                 db    0
.xdata$x:00009FC4                 db 0FFh
.xdata$x:00009FC5                 db 0FFh
.xdata$x:00009FC6                 db 0FFh
.xdata$x:00009FC7                 db 0FFh
.xdata$x:00009FC8                 db    0
.xdata$x:00009FC9                 db    0
.xdata$x:00009FCA                 db    0
.xdata$x:00009FCB                 db    0
.xdata$x:00009FCC                 db  0Ch
.xdata$x:00009FCD                 db    0
.xdata$x:00009FCE                 db    0
.xdata$x:00009FCF                 db    0
.xdata$x:00009FD0                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:00009FD0 _xdata$x        ends
.xdata$x:00009FD0
.data$r:00009FD4 ; ===========================================================================
.data$r:00009FD4
.data$r:00009FD4 ; Segment type: Pure data
.data$r:00009FD4 ; Segment permissions: Read/Write
.data$r:00009FD4 _data$r         segment dword public 'DATA' use32
.data$r:00009FD4                 assume cs:_data$r
.data$r:00009FD4                 ;org 9FD4h
.data$r:00009FD4 ; COMDAT (pick any)
.data$r:00009FD4                 public ??_R0?AVexception@std@@@8
.data$r:00009FD4 ; class std::exception `RTTI Type Descriptor'
.data$r:00009FD4 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00009FD4                                         ; DATA XREF: .xdata$x:00009FF4o
.data$r:00009FD4                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00009FD4                                         ; const type_info::`vftable'
.data$r:00009FD8                 db    0
.data$r:00009FD9                 db    0
.data$r:00009FDA                 db    0
.data$r:00009FDB                 db    0
.data$r:00009FDC                 db  2Eh ; .
.data$r:00009FDD                 db  3Fh ; ?
.data$r:00009FDE                 db  41h ; A
.data$r:00009FDF                 db  56h ; V
.data$r:00009FE0                 db  65h ; e
.data$r:00009FE1                 db  78h ; x
.data$r:00009FE2                 db  63h ; c
.data$r:00009FE3                 db  65h ; e
.data$r:00009FE4                 db  70h ; p
.data$r:00009FE5                 db  74h ; t
.data$r:00009FE6                 db  69h ; i
.data$r:00009FE7                 db  6Fh ; o
.data$r:00009FE8                 db  6Eh ; n
.data$r:00009FE9                 db  40h ; @
.data$r:00009FEA                 db  73h ; s
.data$r:00009FEB                 db  74h ; t
.data$r:00009FEC                 db  64h ; d
.data$r:00009FED                 db  40h ; @
.data$r:00009FEE                 db  40h ; @
.data$r:00009FEF                 db    0
.data$r:00009FEF _data$r         ends
.data$r:00009FEF
.xdata$x:00009FF0 ; ===========================================================================
.xdata$x:00009FF0
.xdata$x:00009FF0 ; Segment type: Pure data
.xdata$x:00009FF0 ; Segment permissions: Read
.xdata$x:00009FF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FF0                 assume cs:_xdata$x
.xdata$x:00009FF0                 ;org 9FF0h
.xdata$x:00009FF0 ; COMDAT (pick any)
.xdata$x:00009FF0                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00009FF0 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:00009FF0                                         ; DATA XREF: .xdata$x:00009F94o
.xdata$x:00009FF0                                         ; .xdata$x:0000A274o ...
.xdata$x:00009FF1                 db    0
.xdata$x:00009FF2                 db    0
.xdata$x:00009FF3                 db    0
.xdata$x:00009FF4                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:00009FF8                 db    0
.xdata$x:00009FF9                 db    0
.xdata$x:00009FFA                 db    0
.xdata$x:00009FFB                 db    0
.xdata$x:00009FFC                 db 0FFh
.xdata$x:00009FFD                 db 0FFh
.xdata$x:00009FFE                 db 0FFh
.xdata$x:00009FFF                 db 0FFh
.xdata$x:0000A000                 db    0
.xdata$x:0000A001                 db    0
.xdata$x:0000A002                 db    0
.xdata$x:0000A003                 db    0
.xdata$x:0000A004                 db  0Ch
.xdata$x:0000A005                 db    0
.xdata$x:0000A006                 db    0
.xdata$x:0000A007                 db    0
.xdata$x:0000A008                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:0000A008 _xdata$x        ends
.xdata$x:0000A008
.rdata:0000A00C ; ===========================================================================
.rdata:0000A00C
.rdata:0000A00C ; Segment type: Pure data
.rdata:0000A00C ; Segment permissions: Read
.rdata:0000A00C _rdata          segment dword public 'DATA' use32
.rdata:0000A00C                 assume cs:_rdata
.rdata:0000A00C                 ;org 0A00Ch
.rdata:0000A00C ; COMDAT (pick any)
.rdata:0000A00C                 public ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
.rdata:0000A00C ; char `string'[]
.rdata:0000A00C ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ db 'bad locale name',0
.rdata:0000A00C                                         ; DATA XREF: std::_Locinfo::_Locinfo(char const *)+99o
.rdata:0000A00C _rdata          ends
.rdata:0000A00C
.rdata:0000A01C ; ===========================================================================
.rdata:0000A01C
.rdata:0000A01C ; Segment type: Pure data
.rdata:0000A01C ; Segment permissions: Read
.rdata:0000A01C _rdata          segment dword public 'DATA' use32
.rdata:0000A01C                 assume cs:_rdata
.rdata:0000A01C                 ;org 0A01Ch
.rdata:0000A01C ; COMDAT (pick largest)
.rdata:0000A01C                 dd offset ??_R4_Facet_base@std@@6B@ ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata:0000A020                 public ??_7_Facet_base@std@@6B@
.rdata:0000A020 ; const std::_Facet_base::`vftable'
.rdata:0000A020 ??_7_Facet_base@std@@6B@ dd offset ??_E_Facet_base@std@@UAEPAXI@Z
.rdata:0000A020                                         ; DATA XREF: std::_Facet_base::_Facet_base(void)+Ao
.rdata:0000A020                                         ; std::_Facet_base::~_Facet_base(void)+Ao
.rdata:0000A020                                         ; std::_Facet_base::`vector deleting destructor'(uint)
.rdata:0000A024                 dd offset __purecall
.rdata:0000A028                 dd offset __purecall
.rdata:0000A028 _rdata          ends
.rdata:0000A028
.rdata:0000A02C ; ===========================================================================
.rdata:0000A02C
.rdata:0000A02C ; Segment type: Pure data
.rdata:0000A02C ; Segment permissions: Read
.rdata:0000A02C _rdata          segment dword public 'DATA' use32
.rdata:0000A02C                 assume cs:_rdata
.rdata:0000A02C                 ;org 0A02Ch
.rdata:0000A02C ; COMDAT (pick largest)
.rdata:0000A02C                 dd offset ??_R4facet@locale@std@@6B@ ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata:0000A030                 public ??_7facet@locale@std@@6B@
.rdata:0000A030 ; const std::locale::facet::`vftable'
.rdata:0000A030 ??_7facet@locale@std@@6B@ dd offset ??_Efacet@locale@std@@MAEPAXI@Z
.rdata:0000A030                                         ; DATA XREF: std::locale::facet::facet(uint)+38o
.rdata:0000A030                                         ; std::locale::facet::~facet(void)+29o
.rdata:0000A030                                         ; std::locale::facet::`vector deleting destructor'(uint)
.rdata:0000A034                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000A038                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000A038 _rdata          ends
.rdata:0000A038
.rdata:0000A03C ; ===========================================================================
.rdata:0000A03C
.rdata:0000A03C ; Segment type: Pure data
.rdata:0000A03C ; Segment permissions: Read
.rdata:0000A03C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A03C _rdata          segment para public 'DATA' use32
.rdata:0000A03C                 assume cs:_rdata
.rdata:0000A03C                 ;org 0A03Ch
.rdata:0000A03C ; COMDAT (pick any)
.rdata:0000A03C                 public ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
.rdata:0000A03C ; char `string'[]
.rdata:0000A03C ??_C@_0EH@EPAENFJM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ db 'C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\xl'
.rdata:0000A03C                                         ; DATA XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+4Fo
.rdata:0000A03C                                         ; __unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0+5o
.rdata:0000A03C                 db 'ocale',0
.rdata:0000A083                 align 4
.rdata:0000A083 _rdata          ends
.rdata:0000A083
.rdata:0000A084 ; ===========================================================================
.rdata:0000A084
.rdata:0000A084 ; Segment type: Pure data
.rdata:0000A084 ; Segment permissions: Read
.rdata:0000A084 _rdata          segment byte public 'DATA' use32
.rdata:0000A084                 assume cs:_rdata
.rdata:0000A084                 ;org 0A084h
.rdata:0000A084 ; COMDAT (pick any)
.rdata:0000A084                 public ??_C@_00CNPNBAHC@?$AA@
.rdata:0000A084 ; `string'
.rdata:0000A084 ??_C@_00CNPNBAHC@?$AA@ db    0          ; DATA XREF: std::locale::c_str(void)+11o
.rdata:0000A085                 align 4
.rdata:0000A085 _rdata          ends
.rdata:0000A085
.rdata:0000A088 ; ===========================================================================
.rdata:0000A088
.rdata:0000A088 ; Segment type: Pure data
.rdata:0000A088 ; Segment permissions: Read
.rdata:0000A088 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A088 _rdata          segment para public 'DATA' use32
.rdata:0000A088                 assume cs:_rdata
.rdata:0000A088                 ;org 0A088h
.rdata:0000A088 ; COMDAT (pick any)
.rdata:0000A088                 public ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A088 ; wchar_t `string'
.rdata:0000A088 ??_C@_1IO@OFOLDAJI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A088                                         ; DATA XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+Co
.rdata:0000A088                                         ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+26o ...
.rdata:0000A088                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A088                 unicode 0, <clude\xlocale>,0
.rdata:0000A116                 align 4
.rdata:0000A116 _rdata          ends
.rdata:0000A116
.rdata:0000A118 ; ===========================================================================
.rdata:0000A118
.rdata:0000A118 ; Segment type: Pure data
.rdata:0000A118 ; Segment permissions: Read
.rdata:0000A118 _rdata          segment dword public 'DATA' use32
.rdata:0000A118                 assume cs:_rdata
.rdata:0000A118                 ;org 0A118h
.rdata:0000A118 ; COMDAT (pick largest)
.rdata:0000A118                 dd offset ??_R4ctype_base@std@@6B@ ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata:0000A11C                 public ??_7ctype_base@std@@6B@
.rdata:0000A11C ; const std::ctype_base::`vftable'
.rdata:0000A11C ??_7ctype_base@std@@6B@ dd offset ??_Ectype_base@std@@UAEPAXI@Z
.rdata:0000A11C                                         ; DATA XREF: std::ctype_base::ctype_base(uint)+3Co
.rdata:0000A11C                                         ; std::ctype_base::~ctype_base(void)+29o
.rdata:0000A11C                                         ; std::ctype_base::`vector deleting destructor'(uint)
.rdata:0000A120                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000A124                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000A124 _rdata          ends
.rdata:0000A124
.rdata:0000A128 ; ===========================================================================
.rdata:0000A128
.rdata:0000A128 ; Segment type: Pure data
.rdata:0000A128 ; Segment permissions: Read
.rdata:0000A128 _rdata          segment dword public 'DATA' use32
.rdata:0000A128                 assume cs:_rdata
.rdata:0000A128                 ;org 0A128h
.rdata:0000A128 ; COMDAT (pick largest)
.rdata:0000A128                 dd offset ??_R4?$ctype@_W@std@@6B@ ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata:0000A12C                 public ??_7?$ctype@_W@std@@6B@
.rdata:0000A12C ; const std::ctype<wchar_t>::`vftable'
.rdata:0000A12C ??_7?$ctype@_W@std@@6B@ dd offset ??_E?$ctype@_W@std@@MAEPAXI@Z
.rdata:0000A12C                                         ; DATA XREF: std::ctype<wchar_t>::ctype<wchar_t>(std::_Locinfo const &,uint)+3Co
.rdata:0000A12C                                         ; std::ctype<wchar_t>::~ctype<wchar_t>(void)+29o
.rdata:0000A12C                                         ; std::ctype<wchar_t>::`vector deleting destructor'(uint)
.rdata:0000A130                 dd offset ?_Incref@facet@locale@std@@UAEXXZ ; std::locale::facet::_Incref(void)
.rdata:0000A134                 dd offset ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref(void)
.rdata:0000A138                 dd offset ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ; std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)
.rdata:0000A13C                 dd offset ?do_is@?$ctype@_W@std@@MBE_NF_W@Z ; std::ctype<wchar_t>::do_is(short,wchar_t)
.rdata:0000A140                 dd offset ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_is(short,wchar_t const *,wchar_t const *)
.rdata:0000A144                 dd offset ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ; std::ctype<wchar_t>::do_scan_not(short,wchar_t const *,wchar_t const *)
.rdata:0000A148                 dd offset ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)
.rdata:0000A14C                 dd offset ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_tolower(wchar_t)
.rdata:0000A150                 dd offset ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)
.rdata:0000A154                 dd offset ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ; std::ctype<wchar_t>::do_toupper(wchar_t)
.rdata:0000A158                 dd offset ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ; std::ctype<wchar_t>::do_widen(char const *,char const *,wchar_t *)
.rdata:0000A15C                 dd offset ?do_widen@?$ctype@_W@std@@MBE_WD@Z ; std::ctype<wchar_t>::do_widen(char)
.rdata:0000A160                 dd offset ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t const *,wchar_t const *,char,char *)
.rdata:0000A164                 dd offset ?do_narrow@?$ctype@_W@std@@MBED_WD@Z ; std::ctype<wchar_t>::do_narrow(wchar_t,char)
.rdata:0000A164 _rdata          ends
.rdata:0000A164
.rdata:0000A168 ; ===========================================================================
.rdata:0000A168
.rdata:0000A168 ; Segment type: Pure data
.rdata:0000A168 ; Segment permissions: Read
.rdata:0000A168 _rdata          segment dword public 'DATA' use32
.rdata:0000A168                 assume cs:_rdata
.rdata:0000A168                 ;org 0A168h
.rdata:0000A168 ; COMDAT (pick largest)
.rdata:0000A168                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000A16C                 public ??_7error_category@std@@6B@
.rdata:0000A16C ; const std::error_category::`vftable'
.rdata:0000A16C ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000A16C                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000A16C                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000A16C                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000A170                 dd offset __purecall
.rdata:0000A174                 dd offset __purecall
.rdata:0000A178                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A17C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A180                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A180 _rdata          ends
.rdata:0000A180
.rdata:0000A184 ; ===========================================================================
.rdata:0000A184
.rdata:0000A184 ; Segment type: Pure data
.rdata:0000A184 ; Segment permissions: Read
.rdata:0000A184 _rdata          segment dword public 'DATA' use32
.rdata:0000A184                 assume cs:_rdata
.rdata:0000A184                 ;org 0A184h
.rdata:0000A184 ; COMDAT (pick largest)
.rdata:0000A184                 dd offset ??_R4_System_error@std@@6B@ ; const std::_System_error::`RTTI Complete Object Locator'
.rdata:0000A188                 public ??_7_System_error@std@@6B@
.rdata:0000A188 ; const std::_System_error::`vftable'
.rdata:0000A188 ??_7_System_error@std@@6B@ dd offset ??_E_System_error@std@@UAEPAXI@Z
.rdata:0000A188                                         ; DATA XREF: std::_System_error::_System_error(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+92o
.rdata:0000A188                                         ; std::_System_error::_System_error(std::_System_error const &)+3Co
.rdata:0000A188                                         ; std::_System_error::`vector deleting destructor'(uint)
.rdata:0000A18C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000A18C _rdata          ends
.rdata:0000A18C
.rdata:0000A190 ; ===========================================================================
.rdata:0000A190
.rdata:0000A190 ; Segment type: Pure data
.rdata:0000A190 ; Segment permissions: Read
.rdata:0000A190 _rdata          segment dword public 'DATA' use32
.rdata:0000A190                 assume cs:_rdata
.rdata:0000A190                 ;org 0A190h
.rdata:0000A190 ; COMDAT (pick any)
.rdata:0000A190                 public ??_C@_02LMMGGCAJ@?3?5?$AA@
.rdata:0000A190 ; char `string'[3]
.rdata:0000A190 ??_C@_02LMMGGCAJ@?3?5?$AA@ db ': ',0    ; DATA XREF: std::_System_error::_Makestr(std::error_code,std::basic_string<char,std::char_traits<char>,std::allocator<char>>)+45o
.rdata:0000A193                 align 4
.rdata:0000A193 _rdata          ends
.rdata:0000A193
.rdata:0000A194 ; ===========================================================================
.rdata:0000A194
.rdata:0000A194 ; Segment type: Pure data
.rdata:0000A194 ; Segment permissions: Read
.rdata:0000A194 _rdata          segment dword public 'DATA' use32
.rdata:0000A194                 assume cs:_rdata
.rdata:0000A194                 ;org 0A194h
.rdata:0000A194 ; COMDAT (pick largest)
.rdata:0000A194                 dd offset ??_R4system_error@std@@6B@ ; const std::system_error::`RTTI Complete Object Locator'
.rdata:0000A198                 public ??_7system_error@std@@6B@
.rdata:0000A198 ; const std::system_error::`vftable'
.rdata:0000A198 ??_7system_error@std@@6B@ dd offset ??_Esystem_error@std@@UAEPAXI@Z
.rdata:0000A198                                         ; DATA XREF: std::system_error::system_error(std::system_error const &)+3Co
.rdata:0000A198                                         ; std::system_error::system_error(std::error_code,char const *)+61o
.rdata:0000A198                                         ; std::system_error::`vector deleting destructor'(uint)
.rdata:0000A19C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000A19C _rdata          ends
.rdata:0000A19C
.rdata:0000A1A0 ; ===========================================================================
.rdata:0000A1A0
.rdata:0000A1A0 ; Segment type: Pure data
.rdata:0000A1A0 ; Segment permissions: Read
.rdata:0000A1A0 _rdata          segment dword public 'DATA' use32
.rdata:0000A1A0                 assume cs:_rdata
.rdata:0000A1A0                 ;org 0A1A0h
.rdata:0000A1A0 ; COMDAT (pick largest)
.rdata:0000A1A0                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000A1A4                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000A1A4 ; const std::_Generic_error_category::`vftable'
.rdata:0000A1A4 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000A1A4                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000A1A4                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000A1A8                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000A1AC                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000A1B0                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A1B4                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A1B8                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A1B8 _rdata          ends
.rdata:0000A1B8
.rdata:0000A1BC ; ===========================================================================
.rdata:0000A1BC
.rdata:0000A1BC ; Segment type: Pure data
.rdata:0000A1BC ; Segment permissions: Read
.rdata:0000A1BC _rdata          segment dword public 'DATA' use32
.rdata:0000A1BC                 assume cs:_rdata
.rdata:0000A1BC                 ;org 0A1BCh
.rdata:0000A1BC ; COMDAT (pick any)
.rdata:0000A1BC                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000A1BC ; `string'
.rdata:0000A1BC ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000A1BC                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000A1BC _rdata          ends
.rdata:0000A1BC
.rdata:0000A1C4 ; ===========================================================================
.rdata:0000A1C4
.rdata:0000A1C4 ; Segment type: Pure data
.rdata:0000A1C4 ; Segment permissions: Read
.rdata:0000A1C4 _rdata          segment dword public 'DATA' use32
.rdata:0000A1C4                 assume cs:_rdata
.rdata:0000A1C4                 ;org 0A1C4h
.rdata:0000A1C4 ; COMDAT (pick any)
.rdata:0000A1C4                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000A1C4 ; `string'
.rdata:0000A1C4 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000A1C4                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_8730o
.rdata:0000A1C4                                         ; std::_System_error_category::message(int):loc_88ACo
.rdata:0000A1D2                 align 4
.rdata:0000A1D2 _rdata          ends
.rdata:0000A1D2
.rdata:0000A1D4 ; ===========================================================================
.rdata:0000A1D4
.rdata:0000A1D4 ; Segment type: Pure data
.rdata:0000A1D4 ; Segment permissions: Read
.rdata:0000A1D4 _rdata          segment dword public 'DATA' use32
.rdata:0000A1D4                 assume cs:_rdata
.rdata:0000A1D4                 ;org 0A1D4h
.rdata:0000A1D4 ; COMDAT (pick largest)
.rdata:0000A1D4                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000A1D8                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000A1D8 ; const std::_Iostream_error_category::`vftable'
.rdata:0000A1D8 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000A1D8                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000A1D8                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000A1DC                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000A1E0                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000A1E4                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A1E8                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A1EC                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A1EC _rdata          ends
.rdata:0000A1EC
.rdata:0000A1F0 ; ===========================================================================
.rdata:0000A1F0
.rdata:0000A1F0 ; Segment type: Pure data
.rdata:0000A1F0 ; Segment permissions: Read
.rdata:0000A1F0 _rdata          segment dword public 'DATA' use32
.rdata:0000A1F0                 assume cs:_rdata
.rdata:0000A1F0                 ;org 0A1F0h
.rdata:0000A1F0 ; COMDAT (pick any)
.rdata:0000A1F0                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000A1F0 ; `string'
.rdata:0000A1F0 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000A1F0                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000A1F9                 align 4
.rdata:0000A1F9 _rdata          ends
.rdata:0000A1F9
.rdata:0000A1FC ; ===========================================================================
.rdata:0000A1FC
.rdata:0000A1FC ; Segment type: Pure data
.rdata:0000A1FC ; Segment permissions: Read
.rdata:0000A1FC _rdata          segment dword public 'DATA' use32
.rdata:0000A1FC                 assume cs:_rdata
.rdata:0000A1FC                 ;org 0A1FCh
.rdata:0000A1FC ; COMDAT (pick any)
.rdata:0000A1FC                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000A1FC ; char `string'[]
.rdata:0000A1FC ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000A1FC                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000A212                 align 4
.rdata:0000A212 _rdata          ends
.rdata:0000A212
.rdata:0000A214 ; ===========================================================================
.rdata:0000A214
.rdata:0000A214 ; Segment type: Pure data
.rdata:0000A214 ; Segment permissions: Read
.rdata:0000A214 _rdata          segment dword public 'DATA' use32
.rdata:0000A214                 assume cs:_rdata
.rdata:0000A214                 ;org 0A214h
.rdata:0000A214 ; COMDAT (pick largest)
.rdata:0000A214                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000A218                 public ??_7_System_error_category@std@@6B@
.rdata:0000A218 ; const std::_System_error_category::`vftable'
.rdata:0000A218 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000A218                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000A218                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000A21C                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000A220                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000A224                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000A228                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A22C                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A22C _rdata          ends
.rdata:0000A22C
.rdata:0000A230 ; ===========================================================================
.rdata:0000A230
.rdata:0000A230 ; Segment type: Pure data
.rdata:0000A230 ; Segment permissions: Read
.rdata:0000A230 _rdata          segment dword public 'DATA' use32
.rdata:0000A230                 assume cs:_rdata
.rdata:0000A230                 ;org 0A230h
.rdata:0000A230 ; COMDAT (pick any)
.rdata:0000A230                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000A230 ; `string'
.rdata:0000A230 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000A230                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000A237                 align 4
.rdata:0000A237 _rdata          ends
.rdata:0000A237
.bss:0000A238 ; ===========================================================================
.bss:0000A238
.bss:0000A238 ; Segment type: Uninitialized
.bss:0000A238 ; Segment permissions: Read/Write
.bss:0000A238 _bss            segment dword public 'BSS' use32
.bss:0000A238                 assume cs:_bss
.bss:0000A238                 ;org 0A238h
.bss:0000A238 ; COMDAT (pick any)
.bss:0000A238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A238                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000A238 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000A238 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000A238                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000A238                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000A239                 db    ? ;
.bss:0000A23A                 db    ? ;
.bss:0000A23B                 db    ? ;
.bss:0000A23B _bss            ends
.bss:0000A23B
.bss:0000A23C ; ===========================================================================
.bss:0000A23C
.bss:0000A23C ; Segment type: Uninitialized
.bss:0000A23C ; Segment permissions: Read/Write
.bss:0000A23C _bss            segment dword public 'BSS' use32
.bss:0000A23C                 assume cs:_bss
.bss:0000A23C                 ;org 0A23Ch
.bss:0000A23C ; COMDAT (pick any)
.bss:0000A23C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A23C                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000A23C ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000A23C ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000A23C                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000A23C                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o ...
.bss:0000A23D                 db    ? ;
.bss:0000A23E                 db    ? ;
.bss:0000A23F                 db    ? ;
.bss:0000A23F _bss            ends
.bss:0000A23F
.bss:0000A240 ; ===========================================================================
.bss:0000A240
.bss:0000A240 ; Segment type: Uninitialized
.bss:0000A240 ; Segment permissions: Read/Write
.bss:0000A240 _bss            segment dword public 'BSS' use32
.bss:0000A240                 assume cs:_bss
.bss:0000A240                 ;org 0A240h
.bss:0000A240 ; COMDAT (pick any)
.bss:0000A240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A240                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000A240 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000A240 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000A240                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000A240                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000A241                 db    ? ;
.bss:0000A242                 db    ? ;
.bss:0000A243                 db    ? ;
.bss:0000A243 _bss            ends
.bss:0000A243
.rdata:0000A244 ; ===========================================================================
.rdata:0000A244
.rdata:0000A244 ; Segment type: Pure data
.rdata:0000A244 ; Segment permissions: Read
.rdata:0000A244 _rdata          segment dword public 'DATA' use32
.rdata:0000A244                 assume cs:_rdata
.rdata:0000A244                 ;org 0A244h
.rdata:0000A244 ; COMDAT (pick largest)
.rdata:0000A244                 dd offset ??_R4failure@ios_base@std@@6B@ ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata:0000A248                 public ??_7failure@ios_base@std@@6B@
.rdata:0000A248 ; const std::ios_base::failure::`vftable'
.rdata:0000A248 ??_7failure@ios_base@std@@6B@ dd offset ??_Efailure@ios_base@std@@UAEPAXI@Z
.rdata:0000A248                                         ; DATA XREF: std::ios_base::failure::failure(std::ios_base::failure const &)+3Co
.rdata:0000A248                                         ; std::ios_base::failure::failure(char const *,std::error_code const &)+46o
.rdata:0000A248                                         ; std::ios_base::failure::`vector deleting destructor'(uint)
.rdata:0000A24C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000A24C _rdata          ends
.rdata:0000A24C
.xdata$x:0000A250 ; ===========================================================================
.xdata$x:0000A250
.xdata$x:0000A250 ; Segment type: Pure data
.xdata$x:0000A250 ; Segment permissions: Read
.xdata$x:0000A250 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A250                 assume cs:_xdata$x
.xdata$x:0000A250                 ;org 0A250h
.xdata$x:0000A250 ; COMDAT (pick any)
.xdata$x:0000A250                 public __TI5?AVfailure@ios_base@std@@
.xdata$x:0000A250 __TI5?AVfailure@ios_base@std@@ db    0  ; DATA XREF: std::ios_base::clear(int,bool)+6Bo
.xdata$x:0000A250                                         ; std::ios_base::clear(int,bool)+A8o ...
.xdata$x:0000A251                 db    0
.xdata$x:0000A252                 db    0
.xdata$x:0000A253                 db    0
.xdata$x:0000A254                 dd offset ??1failure@ios_base@std@@UAE@XZ ; std::ios_base::failure::~failure(void)
.xdata$x:0000A258                 db    0
.xdata$x:0000A259                 db    0
.xdata$x:0000A25A                 db    0
.xdata$x:0000A25B                 db    0
.xdata$x:0000A25C                 dd offset __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000A25C _xdata$x        ends
.xdata$x:0000A25C
.xdata$x:0000A260 ; ===========================================================================
.xdata$x:0000A260
.xdata$x:0000A260 ; Segment type: Pure data
.xdata$x:0000A260 ; Segment permissions: Read
.xdata$x:0000A260 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A260                 assume cs:_xdata$x
.xdata$x:0000A260                 ;org 0A260h
.xdata$x:0000A260 ; COMDAT (pick any)
.xdata$x:0000A260                 public __CTA5?AVfailure@ios_base@std@@
.xdata$x:0000A260 __CTA5?AVfailure@ios_base@std@@ db    5 ; DATA XREF: .xdata$x:0000A25Co
.xdata$x:0000A261                 db    0
.xdata$x:0000A262                 db    0
.xdata$x:0000A263                 db    0
.xdata$x:0000A264                 dd offset __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000A268                 dd offset __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000A26C                 dd offset __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000A270                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000A274                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000A274 _xdata$x        ends
.xdata$x:0000A274
.data$r:0000A278 ; ===========================================================================
.data$r:0000A278
.data$r:0000A278 ; Segment type: Pure data
.data$r:0000A278 ; Segment permissions: Read/Write
.data$r:0000A278 _data$r         segment dword public 'DATA' use32
.data$r:0000A278                 assume cs:_data$r
.data$r:0000A278                 ;org 0A278h
.data$r:0000A278 ; COMDAT (pick any)
.data$r:0000A278                 public ??_R0?AVfailure@ios_base@std@@@8
.data$r:0000A278 ; class std::ios_base::failure `RTTI Type Descriptor'
.data$r:0000A278 ??_R0?AVfailure@ios_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A278                                         ; DATA XREF: .xdata$x:0000A2A0o
.data$r:0000A278                                         ; .rdata$r:0000AB98o ...
.data$r:0000A278                                         ; const type_info::`vftable'
.data$r:0000A27C                 align 10h
.data$r:0000A280 a_?avfailure@io db '.?AVfailure@ios_base@std@@',0
.data$r:0000A29B                 align 4
.data$r:0000A29B _data$r         ends
.data$r:0000A29B
.xdata$x:0000A29C ; ===========================================================================
.xdata$x:0000A29C
.xdata$x:0000A29C ; Segment type: Pure data
.xdata$x:0000A29C ; Segment permissions: Read
.xdata$x:0000A29C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A29C                 assume cs:_xdata$x
.xdata$x:0000A29C                 ;org 0A29Ch
.xdata$x:0000A29C ; COMDAT (pick any)
.xdata$x:0000A29C                 public __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
.xdata$x:0000A29C __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 db    0
.xdata$x:0000A29C                                         ; DATA XREF: .xdata$x:0000A264o
.xdata$x:0000A29D                 db    0
.xdata$x:0000A29E                 db    0
.xdata$x:0000A29F                 db    0
.xdata$x:0000A2A0                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.xdata$x:0000A2A4                 align 8
.xdata$x:0000A2A8                 db 0FFh
.xdata$x:0000A2A9                 db 0FFh
.xdata$x:0000A2AA                 db 0FFh
.xdata$x:0000A2AB                 db 0FFh
.xdata$x:0000A2AC                 db    0
.xdata$x:0000A2AD                 db    0
.xdata$x:0000A2AE                 db    0
.xdata$x:0000A2AF                 db    0
.xdata$x:0000A2B0                 db  14h
.xdata$x:0000A2B1                 db    0
.xdata$x:0000A2B2                 db    0
.xdata$x:0000A2B3                 db    0
.xdata$x:0000A2B4                 dd offset ??0failure@ios_base@std@@QAE@ABV012@@Z ; std::ios_base::failure::failure(std::ios_base::failure const &)
.xdata$x:0000A2B4 _xdata$x        ends
.xdata$x:0000A2B4
.data$r:0000A2B8 ; ===========================================================================
.data$r:0000A2B8
.data$r:0000A2B8 ; Segment type: Pure data
.data$r:0000A2B8 ; Segment permissions: Read/Write
.data$r:0000A2B8 _data$r         segment dword public 'DATA' use32
.data$r:0000A2B8                 assume cs:_data$r
.data$r:0000A2B8                 ;org 0A2B8h
.data$r:0000A2B8 ; COMDAT (pick any)
.data$r:0000A2B8                 public ??_R0?AVsystem_error@std@@@8
.data$r:0000A2B8 ; class std::system_error `RTTI Type Descriptor'
.data$r:0000A2B8 ??_R0?AVsystem_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A2B8                                         ; DATA XREF: .xdata$x:0000A2DCo
.data$r:0000A2B8                                         ; .rdata$r:0000A9D4o ...
.data$r:0000A2B8                                         ; const type_info::`vftable'
.data$r:0000A2BC                 align 10h
.data$r:0000A2C0 a_?avsystem_err db '.?AVsystem_error@std@@',0
.data$r:0000A2D7                 align 4
.data$r:0000A2D7 _data$r         ends
.data$r:0000A2D7
.xdata$x:0000A2D8 ; ===========================================================================
.xdata$x:0000A2D8
.xdata$x:0000A2D8 ; Segment type: Pure data
.xdata$x:0000A2D8 ; Segment permissions: Read
.xdata$x:0000A2D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A2D8                 assume cs:_xdata$x
.xdata$x:0000A2D8                 ;org 0A2D8h
.xdata$x:0000A2D8 ; COMDAT (pick any)
.xdata$x:0000A2D8                 public __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
.xdata$x:0000A2D8 __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000A2D8                                         ; DATA XREF: .xdata$x:0000A268o
.xdata$x:0000A2D9                 db    0
.xdata$x:0000A2DA                 db    0
.xdata$x:0000A2DB                 db    0
.xdata$x:0000A2DC                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.xdata$x:0000A2E0                 db    0
.xdata$x:0000A2E1                 db    0
.xdata$x:0000A2E2                 db    0
.xdata$x:0000A2E3                 db    0
.xdata$x:0000A2E4                 db 0FFh
.xdata$x:0000A2E5                 db 0FFh
.xdata$x:0000A2E6                 db 0FFh
.xdata$x:0000A2E7                 db 0FFh
.xdata$x:0000A2E8                 db    0
.xdata$x:0000A2E9                 db    0
.xdata$x:0000A2EA                 db    0
.xdata$x:0000A2EB                 db    0
.xdata$x:0000A2EC                 db  14h
.xdata$x:0000A2ED                 db    0
.xdata$x:0000A2EE                 db    0
.xdata$x:0000A2EF                 db    0
.xdata$x:0000A2F0                 dd offset ??0system_error@std@@QAE@ABV01@@Z ; std::system_error::system_error(std::system_error const &)
.xdata$x:0000A2F0 _xdata$x        ends
.xdata$x:0000A2F0
.data$r:0000A2F4 ; ===========================================================================
.data$r:0000A2F4
.data$r:0000A2F4 ; Segment type: Pure data
.data$r:0000A2F4 ; Segment permissions: Read/Write
.data$r:0000A2F4 _data$r         segment dword public 'DATA' use32
.data$r:0000A2F4                 assume cs:_data$r
.data$r:0000A2F4                 ;org 0A2F4h
.data$r:0000A2F4 ; COMDAT (pick any)
.data$r:0000A2F4                 public ??_R0?AV_System_error@std@@@8
.data$r:0000A2F4 ; class std::_System_error `RTTI Type Descriptor'
.data$r:0000A2F4 ??_R0?AV_System_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A2F4                                         ; DATA XREF: .xdata$x:0000A318o
.data$r:0000A2F4                                         ; .rdata$r:0000A984o ...
.data$r:0000A2F4                                         ; const type_info::`vftable'
.data$r:0000A2F8                 db    0
.data$r:0000A2F9                 db    0
.data$r:0000A2FA                 db    0
.data$r:0000A2FB                 db    0
.data$r:0000A2FC                 db  2Eh ; .
.data$r:0000A2FD                 db  3Fh ; ?
.data$r:0000A2FE                 db  41h ; A
.data$r:0000A2FF                 db  56h ; V
.data$r:0000A300                 db  5Fh ; _
.data$r:0000A301                 db  53h ; S
.data$r:0000A302                 db  79h ; y
.data$r:0000A303                 db  73h ; s
.data$r:0000A304                 db  74h ; t
.data$r:0000A305                 db  65h ; e
.data$r:0000A306                 db  6Dh ; m
.data$r:0000A307                 db  5Fh ; _
.data$r:0000A308                 db  65h ; e
.data$r:0000A309                 db  72h ; r
.data$r:0000A30A                 db  72h ; r
.data$r:0000A30B                 db  6Fh ; o
.data$r:0000A30C                 db  72h ; r
.data$r:0000A30D                 db  40h ; @
.data$r:0000A30E                 db  73h ; s
.data$r:0000A30F                 db  74h ; t
.data$r:0000A310                 db  64h ; d
.data$r:0000A311                 db  40h ; @
.data$r:0000A312                 db  40h ; @
.data$r:0000A313                 db    0
.data$r:0000A313 _data$r         ends
.data$r:0000A313
.xdata$x:0000A314 ; ===========================================================================
.xdata$x:0000A314
.xdata$x:0000A314 ; Segment type: Pure data
.xdata$x:0000A314 ; Segment permissions: Read
.xdata$x:0000A314 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A314                 assume cs:_xdata$x
.xdata$x:0000A314                 ;org 0A314h
.xdata$x:0000A314 ; COMDAT (pick any)
.xdata$x:0000A314                 public __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
.xdata$x:0000A314 __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 db    0
.xdata$x:0000A314                                         ; DATA XREF: .xdata$x:0000A26Co
.xdata$x:0000A315                 db    0
.xdata$x:0000A316                 db    0
.xdata$x:0000A317                 db    0
.xdata$x:0000A318                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.xdata$x:0000A31C                 align 10h
.xdata$x:0000A320                 db 0FFh
.xdata$x:0000A321                 db 0FFh
.xdata$x:0000A322                 db 0FFh
.xdata$x:0000A323                 db 0FFh
.xdata$x:0000A324                 db    0
.xdata$x:0000A325                 db    0
.xdata$x:0000A326                 db    0
.xdata$x:0000A327                 db    0
.xdata$x:0000A328                 db  14h
.xdata$x:0000A329                 db    0
.xdata$x:0000A32A                 db    0
.xdata$x:0000A32B                 db    0
.xdata$x:0000A32C                 dd offset ??0_System_error@std@@QAE@ABV01@@Z ; std::_System_error::_System_error(std::_System_error const &)
.xdata$x:0000A32C _xdata$x        ends
.xdata$x:0000A32C
.rdata:0000A330 ; ===========================================================================
.rdata:0000A330
.rdata:0000A330 ; Segment type: Pure data
.rdata:0000A330 ; Segment permissions: Read
.rdata:0000A330 _rdata          segment dword public 'DATA' use32
.rdata:0000A330                 assume cs:_rdata
.rdata:0000A330                 ;org 0A330h
.rdata:0000A330 ; COMDAT (pick any)
.rdata:0000A330                 public ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
.rdata:0000A330 ; char `string'[]
.rdata:0000A330 ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ db 'ios_base::badbit set',0
.rdata:0000A330                                         ; DATA XREF: std::ios_base::clear(int,bool)+5Eo
.rdata:0000A345                 align 4
.rdata:0000A345 _rdata          ends
.rdata:0000A345
.rdata:0000A348 ; ===========================================================================
.rdata:0000A348
.rdata:0000A348 ; Segment type: Pure data
.rdata:0000A348 ; Segment permissions: Read
.rdata:0000A348 _rdata          segment dword public 'DATA' use32
.rdata:0000A348                 assume cs:_rdata
.rdata:0000A348                 ;org 0A348h
.rdata:0000A348 ; COMDAT (pick any)
.rdata:0000A348                 public ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
.rdata:0000A348 ; char `string'[]
.rdata:0000A348 ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ db 'ios_base::failbit set',0
.rdata:0000A348                                         ; DATA XREF: std::ios_base::clear(int,bool)+9Bo
.rdata:0000A35E                 align 10h
.rdata:0000A35E _rdata          ends
.rdata:0000A35E
.rdata:0000A360 ; ===========================================================================
.rdata:0000A360
.rdata:0000A360 ; Segment type: Pure data
.rdata:0000A360 ; Segment permissions: Read
.rdata:0000A360 _rdata          segment dword public 'DATA' use32
.rdata:0000A360                 assume cs:_rdata
.rdata:0000A360                 ;org 0A360h
.rdata:0000A360 ; COMDAT (pick any)
.rdata:0000A360                 public ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
.rdata:0000A360 ; char `string'[]
.rdata:0000A360 ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ db 'ios_base::eofbit set',0
.rdata:0000A360                                         ; DATA XREF: std::ios_base::clear(int,bool)+C7o
.rdata:0000A375                 align 4
.rdata:0000A375 _rdata          ends
.rdata:0000A375
.rdata:0000A378 ; ===========================================================================
.rdata:0000A378
.rdata:0000A378 ; Segment type: Pure data
.rdata:0000A378 ; Segment permissions: Read
.rdata:0000A378 _rdata          segment dword public 'DATA' use32
.rdata:0000A378                 assume cs:_rdata
.rdata:0000A378                 ;org 0A378h
.rdata:0000A378 ; COMDAT (pick any)
.rdata:0000A378                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000A378 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000A378 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000A378                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7r
.rdata:0000A378                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+3Dr ...
.rdata:0000A378 _rdata          ends
.rdata:0000A378
.bss:0000A37C ; ===========================================================================
.bss:0000A37C
.bss:0000A37C ; Segment type: Uninitialized
.bss:0000A37C ; Segment permissions: Read/Write
.bss:0000A37C _bss            segment dword public 'BSS' use32
.bss:0000A37C                 assume cs:_bss
.bss:0000A37C                 ;org 0A37Ch
.bss:0000A37C ; COMDAT (pick any)
.bss:0000A37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A37C                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A37C ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000A37C ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A37C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000A37D                 db    ? ;
.bss:0000A37E                 db    ? ;
.bss:0000A37F                 db    ? ;
.bss:0000A37F _bss            ends
.bss:0000A37F
.bss:0000A380 ; ===========================================================================
.bss:0000A380
.bss:0000A380 ; Segment type: Uninitialized
.bss:0000A380 ; Segment permissions: Read/Write
.bss:0000A380 _bss            segment dword public 'BSS' use32
.bss:0000A380                 assume cs:_bss
.bss:0000A380                 ;org 0A380h
.bss:0000A380 ; COMDAT (pick any)
.bss:0000A380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A380                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A380 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000A380 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A380                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000A381                 db    ? ;
.bss:0000A382                 db    ? ;
.bss:0000A383                 db    ? ;
.bss:0000A383 _bss            ends
.bss:0000A383
.rdata:0000A384 ; ===========================================================================
.rdata:0000A384
.rdata:0000A384 ; Segment type: Pure data
.rdata:0000A384 ; Segment permissions: Read
.rdata:0000A384 _rdata          segment dword public 'DATA' use32
.rdata:0000A384                 assume cs:_rdata
.rdata:0000A384                 ;org 0A384h
.rdata:0000A384 ; COMDAT (pick largest)
.rdata:0000A384                 dd offset ??_R4TiXmlBase@@6B@ ; const TiXmlBase::`RTTI Complete Object Locator'
.rdata:0000A388                 public ??_7TiXmlBase@@6B@
.rdata:0000A388 ; const TiXmlBase::`vftable'
.rdata:0000A388 ??_7TiXmlBase@@6B@ dd offset ??_ETiXmlBase@@UAEPAXI@Z
.rdata:0000A388                                         ; DATA XREF: TiXmlBase::TiXmlBase(void)+Ao
.rdata:0000A388                                         ; TiXmlBase::~TiXmlBase(void)+Ao
.rdata:0000A388                                         ; TiXmlBase::`vector deleting destructor'(uint)
.rdata:0000A38C                 dd offset __purecall
.rdata:0000A390                 dd offset __purecall
.rdata:0000A394                 dd offset __purecall
.rdata:0000A394 _rdata          ends
.rdata:0000A394
.rdata:0000A398 ; ===========================================================================
.rdata:0000A398
.rdata:0000A398 ; Segment type: Pure data
.rdata:0000A398 ; Segment permissions: Read
.rdata:0000A398 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A398 _rdata          segment para public 'DATA' use32
.rdata:0000A398                 assume cs:_rdata
.rdata:0000A398                 ;org 0A398h
.rdata:0000A398 ; COMDAT (pick any)
.rdata:0000A398                 public ??_C@_1JC@JGEPGBEJ@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
.rdata:0000A398 ; wchar_t `string'
.rdata:0000A398 ??_C@_1JC@JGEPGBEJ@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@:
.rdata:0000A398                                         ; DATA XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+Eo
.rdata:0000A398                 unicode 0, <c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\ti>
.rdata:0000A398                 unicode 0, <nyxml\tinyxml.h>,0
.rdata:0000A42A                 align 4
.rdata:0000A42A _rdata          ends
.rdata:0000A42A
.rdata:0000A42C ; ===========================================================================
.rdata:0000A42C
.rdata:0000A42C ; Segment type: Pure data
.rdata:0000A42C ; Segment permissions: Read
.rdata:0000A42C _rdata          segment dword public 'DATA' use32
.rdata:0000A42C                 assume cs:_rdata
.rdata:0000A42C                 ;org 0A42Ch
.rdata:0000A42C ; COMDAT (pick any)
.rdata:0000A42C                 public ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
.rdata:0000A42C ; wchar_t `string'
.rdata:0000A42C ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@ dd offset $SG95566+20h
.rdata:0000A42C                                         ; DATA XREF: TiXmlBase::GetChar(wchar_t const *,wchar_t *)+13o
.rdata:0000A42C _rdata          ends                    ; "inyxmlparser.cpp"
.rdata:0000A42C
.rdata:0000A430 ; ===========================================================================
.rdata:0000A430
.rdata:0000A430 ; Segment type: Pure data
.rdata:0000A430 ; Segment permissions: Read
.rdata:0000A430 _rdata          segment dword public 'DATA' use32
.rdata:0000A430                 assume cs:_rdata
.rdata:0000A430                 ;org 0A430h
.rdata:0000A430 ; COMDAT (pick any)
.rdata:0000A430                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:0000A430 ; wchar_t `string'
.rdata:0000A430 ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: TiXmlDocument::ClearError(void)+18o
.rdata:0000A432                 align 4
.rdata:0000A432 _rdata          ends
.rdata:0000A432
.rdata:0000A434 ; ===========================================================================
.rdata:0000A434
.rdata:0000A434 ; Segment type: Pure data
.rdata:0000A434 ; Segment permissions: Read
.rdata:0000A434 _rdata          segment dword public 'DATA' use32
.rdata:0000A434                 assume cs:_rdata
.rdata:0000A434                 ;org 0A434h
.rdata:0000A434 ; COMDAT (pick largest)
.rdata:0000A434                 dd offset ??_R4TiXmlAttribute@@6B@ ; const TiXmlAttribute::`RTTI Complete Object Locator'
.rdata:0000A438                 public ??_7TiXmlAttribute@@6B@
.rdata:0000A438 ; const TiXmlAttribute::`vftable'
.rdata:0000A438 ??_7TiXmlAttribute@@6B@ dd offset ??_ETiXmlAttribute@@UAEPAXI@Z
.rdata:0000A438                                         ; DATA XREF: TiXmlAttribute::TiXmlAttribute(void)+38o
.rdata:0000A438                                         ; TiXmlAttribute::`vector deleting destructor'(uint)
.rdata:0000A43C                 dd offset ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z ; TiXmlAttribute::Print(_iobuf *,int)
.rdata:0000A440                 dd offset ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlAttribute::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000A444                 dd offset ?Parse@TiXmlAttribute@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlAttribute::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000A444 _rdata          ends
.rdata:0000A444
.rdata:0000A448 ; ===========================================================================
.rdata:0000A448
.rdata:0000A448 ; Segment type: Pure data
.rdata:0000A448 ; Segment permissions: Read
.rdata:0000A448 _rdata          segment dword public 'DATA' use32
.rdata:0000A448                 assume cs:_rdata
.rdata:0000A448                 ;org 0A448h
.rdata:0000A448 ; COMDAT (pick largest)
.rdata:0000A448                 dd offset ??_R4TiXmlComment@@6B@ ; const TiXmlComment::`RTTI Complete Object Locator'
.rdata:0000A44C                 public ??_7TiXmlComment@@6B@
.rdata:0000A44C ; const TiXmlComment::`vftable'
.rdata:0000A44C ??_7TiXmlComment@@6B@ dd offset ??_ETiXmlComment@@UAEPAXI@Z
.rdata:0000A44C                                         ; DATA XREF: TiXmlComment::TiXmlComment(void)+3Ao
.rdata:0000A44C                                         ; TiXmlComment::~TiXmlComment(void)+29o
.rdata:0000A44C                                         ; TiXmlComment::`vector deleting destructor'(uint)
.rdata:0000A450                 dd offset ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z ; TiXmlComment::Print(_iobuf *,int)
.rdata:0000A454                 dd offset ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlComment::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000A458                 dd offset ?Parse@TiXmlComment@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlComment::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000A45C                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000A460                 dd offset ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ ; TiXmlComment::Clone(void)
.rdata:0000A464                 dd offset ?StreamIn@TiXmlComment@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlComment::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000A464 _rdata          ends
.rdata:0000A464
.rdata:0000A468 ; ===========================================================================
.rdata:0000A468
.rdata:0000A468 ; Segment type: Pure data
.rdata:0000A468 ; Segment permissions: Read
.rdata:0000A468 _rdata          segment dword public 'DATA' use32
.rdata:0000A468                 assume cs:_rdata
.rdata:0000A468                 ;org 0A468h
.rdata:0000A468 ; COMDAT (pick largest)
.rdata:0000A468                 dd offset ??_R4TiXmlText@@6B@ ; const TiXmlText::`RTTI Complete Object Locator'
.rdata:0000A46C                 public ??_7TiXmlText@@6B@
.rdata:0000A46C ; const TiXmlText::`vftable'
.rdata:0000A46C ??_7TiXmlText@@6B@ dd offset ??_ETiXmlText@@UAEPAXI@Z
.rdata:0000A46C                                         ; DATA XREF: TiXmlText::TiXmlText(wchar_t const *)+3Ao
.rdata:0000A46C                                         ; TiXmlText::~TiXmlText(void)+29o
.rdata:0000A46C                                         ; TiXmlText::`vector deleting destructor'(uint)
.rdata:0000A470                 dd offset ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z ; TiXmlText::Print(_iobuf *,int)
.rdata:0000A474                 dd offset ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlText::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000A478                 dd offset ?Parse@TiXmlText@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlText::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000A47C                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000A480                 dd offset ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ ; TiXmlText::Clone(void)
.rdata:0000A484                 dd offset ?StreamIn@TiXmlText@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlText::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000A484 _rdata          ends
.rdata:0000A484
.rdata:0000A488 ; ===========================================================================
.rdata:0000A488
.rdata:0000A488 ; Segment type: Pure data
.rdata:0000A488 ; Segment permissions: Read
.rdata:0000A488 _rdata          segment dword public 'DATA' use32
.rdata:0000A488                 assume cs:_rdata
.rdata:0000A488                 ;org 0A488h
.rdata:0000A488 ; COMDAT (pick largest)
.rdata:0000A488                 dd offset ??_R4TiXmlDeclaration@@6B@ ; const TiXmlDeclaration::`RTTI Complete Object Locator'
.rdata:0000A48C                 public ??_7TiXmlDeclaration@@6B@
.rdata:0000A48C ; const TiXmlDeclaration::`vftable'
.rdata:0000A48C ??_7TiXmlDeclaration@@6B@ dd offset ??_ETiXmlDeclaration@@UAEPAXI@Z
.rdata:0000A48C                                         ; DATA XREF: TiXmlDeclaration::TiXmlDeclaration(void)+3Ao
.rdata:0000A48C                                         ; TiXmlDeclaration::~TiXmlDeclaration(void)+29o
.rdata:0000A48C                                         ; TiXmlDeclaration::`vector deleting destructor'(uint)
.rdata:0000A490                 dd offset ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z ; TiXmlDeclaration::Print(_iobuf *,int)
.rdata:0000A494                 dd offset ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlDeclaration::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000A498                 dd offset ?Parse@TiXmlDeclaration@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlDeclaration::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000A49C                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000A4A0                 dd offset ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ ; TiXmlDeclaration::Clone(void)
.rdata:0000A4A4                 dd offset ?StreamIn@TiXmlDeclaration@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlDeclaration::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000A4A4 _rdata          ends
.rdata:0000A4A4
.rdata:0000A4A8 ; ===========================================================================
.rdata:0000A4A8
.rdata:0000A4A8 ; Segment type: Pure data
.rdata:0000A4A8 ; Segment permissions: Read
.rdata:0000A4A8 _rdata          segment dword public 'DATA' use32
.rdata:0000A4A8                 assume cs:_rdata
.rdata:0000A4A8                 ;org 0A4A8h
.rdata:0000A4A8 ; COMDAT (pick largest)
.rdata:0000A4A8                 dd offset ??_R4TiXmlUnknown@@6B@ ; const TiXmlUnknown::`RTTI Complete Object Locator'
.rdata:0000A4AC                 public ??_7TiXmlUnknown@@6B@
.rdata:0000A4AC ; const TiXmlUnknown::`vftable'
.rdata:0000A4AC ??_7TiXmlUnknown@@6B@ dd offset ??_ETiXmlUnknown@@UAEPAXI@Z
.rdata:0000A4AC                                         ; DATA XREF: TiXmlUnknown::TiXmlUnknown(void)+3Ao
.rdata:0000A4AC                                         ; TiXmlUnknown::~TiXmlUnknown(void)+29o
.rdata:0000A4AC                                         ; TiXmlUnknown::`vector deleting destructor'(uint)
.rdata:0000A4B0                 dd offset ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z ; TiXmlUnknown::Print(_iobuf *,int)
.rdata:0000A4B4                 dd offset ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlUnknown::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000A4B8                 dd offset ?Parse@TiXmlUnknown@@MAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlUnknown::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000A4BC                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000A4C0                 dd offset ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ ; TiXmlUnknown::Clone(void)
.rdata:0000A4C4                 dd offset ?StreamIn@TiXmlUnknown@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlUnknown::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000A4C4 _rdata          ends
.rdata:0000A4C4
.rdata:0000A4C8 ; ===========================================================================
.rdata:0000A4C8
.rdata:0000A4C8 ; Segment type: Pure data
.rdata:0000A4C8 ; Segment permissions: Read
.rdata:0000A4C8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A4C8 _rdata          segment para public 'DATA' use32
.rdata:0000A4C8                 assume cs:_rdata
.rdata:0000A4C8                 ;org 0A4C8h
.rdata:0000A4C8 ; COMDAT (pick any)
.rdata:0000A4C8                 public ??_C@_1EC@ODHFGFFM@?$AA?4?$AA?4?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAT?$AAi?$AAn?$AAy?$AAX?$AAm?$AAl?$AA?2?$AAt?$AAi?$AAn?$AAy?$AAx?$AAm?$AAl?$AAp?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?4?$AAc?$AAp?$AAp@
.rdata:0000A4C8 ; wchar_t `string'
.rdata:0000A4C8 ??_C@_1EC@ODHFGFFM@?$AA?4?$AA?4?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAT?$AAi?$AAn?$AAy?$AAX?$AAm?$AAl?$AA?2?$AAt?$AAi?$AAn?$AAy?$AAx?$AAm?$AAl?$AAp?$AAa?$AAr?$AAs?$AAe?$AAr?$AA?4?$AAc?$AAp?$AAp@:
.rdata:0000A4C8                                         ; DATA XREF: TiXmlParsingData::TiXmlParsingData(wchar_t const *,int,int,int)+17o
.rdata:0000A4C8                 unicode 0, <..\src\TinyXml\tinyxmlparser.cpp>,0
.rdata:0000A50A                 align 4
.rdata:0000A50A _rdata          ends
.rdata:0000A50A
.rdata:0000A50C ; ===========================================================================
.rdata:0000A50C
.rdata:0000A50C ; Segment type: Pure data
.rdata:0000A50C ; Segment permissions: Read
.rdata:0000A50C _rdata          segment dword public 'DATA' use32
.rdata:0000A50C                 assume cs:_rdata
.rdata:0000A50C                 ;org 0A50Ch
.rdata:0000A50C ; COMDAT (pick any)
.rdata:0000A50C                 public ??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
.rdata:0000A50C ; wchar_t `string'
.rdata:0000A50C ??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@:
.rdata:0000A50C                                         ; DATA XREF: TiXmlParsingData::TiXmlParsingData(wchar_t const *,int,int,int)+1Co
.rdata:0000A50C                 unicode 0, <start>,0
.rdata:0000A50C _rdata          ends
.rdata:0000A50C
.rdata:0000A518 ; ===========================================================================
.rdata:0000A518
.rdata:0000A518 ; Segment type: Pure data
.rdata:0000A518 ; Segment permissions: Read
.rdata:0000A518 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A518 _rdata          segment para public 'DATA' use32
.rdata:0000A518                 assume cs:_rdata
.rdata:0000A518                 ;org 0A518h
.rdata:0000A518 ; COMDAT (pick any)
.rdata:0000A518                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A518 ; wchar_t `string'
.rdata:0000A518 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A518                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+17o
.rdata:0000A518                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::append(char const *)+Co ...
.rdata:0000A518                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A518                 unicode 0, <clude\xstring>,0
.rdata:0000A5A6                 align 4
.rdata:0000A5A6 _rdata          ends
.rdata:0000A5A6
.rdata:0000A5A8 ; ===========================================================================
.rdata:0000A5A8
.rdata:0000A5A8 ; Segment type: Pure data
.rdata:0000A5A8 ; Segment permissions: Read
.rdata:0000A5A8 _rdata          segment dword public 'DATA' use32
.rdata:0000A5A8                 assume cs:_rdata
.rdata:0000A5A8                 ;org 0A5A8h
.rdata:0000A5A8 ; COMDAT (pick any)
.rdata:0000A5A8                 public ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000A5A8 ; wchar_t `string'
.rdata:0000A5A8 ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000A5A8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator[](uint)+1Co
.rdata:0000A5A8                 unicode 0, <string subscript out of range>,0
.rdata:0000A5A8 _rdata          ends
.rdata:0000A5A8
.bss:0000A5E4 ; ===========================================================================
.bss:0000A5E4
.bss:0000A5E4 ; Segment type: Uninitialized
.bss:0000A5E4 ; Segment permissions: Read/Write
.bss:0000A5E4 _bss            segment dword public 'BSS' use32
.bss:0000A5E4                 assume cs:_bss
.bss:0000A5E4                 ;org 0A5E4h
.bss:0000A5E4 ; COMDAT (pick any)
.bss:0000A5E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A5E4                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000A5E4 ; std::locale::id std::numpunct<char>::id
.bss:0000A5E4 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000A5E4                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000A5E5                 db    ? ;
.bss:0000A5E6                 db    ? ;
.bss:0000A5E7                 db    ? ;
.bss:0000A5E7 _bss            ends
.bss:0000A5E7
.bss:0000A5E8 ; ===========================================================================
.bss:0000A5E8
.bss:0000A5E8 ; Segment type: Uninitialized
.bss:0000A5E8 ; Segment permissions: Read/Write
.bss:0000A5E8 _bss            segment dword public 'BSS' use32
.bss:0000A5E8                 assume cs:_bss
.bss:0000A5E8                 ;org 0A5E8h
.bss:0000A5E8 ; COMDAT (pick any)
.bss:0000A5E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A5E8                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000A5E8 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000A5E8 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000A5E8                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000A5E9                 db    ? ;
.bss:0000A5EA                 db    ? ;
.bss:0000A5EB                 db    ? ;
.bss:0000A5EB _bss            ends
.bss:0000A5EB
.rdata:0000A5EC ; ===========================================================================
.rdata:0000A5EC
.rdata:0000A5EC ; Segment type: Pure data
.rdata:0000A5EC ; Segment permissions: Read
.rdata:0000A5EC _rdata          segment dword public 'DATA' use32
.rdata:0000A5EC                 assume cs:_rdata
.rdata:0000A5EC                 ;org 0A5ECh
.rdata:0000A5EC ; COMDAT (pick any)
.rdata:0000A5EC                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000A5EC ; char `string'[]
.rdata:0000A5EC ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000A5EC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000A5EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000A5EC _rdata          ends
.rdata:0000A5EC
.rdata:0000A604 ; ===========================================================================
.rdata:0000A604
.rdata:0000A604 ; Segment type: Pure data
.rdata:0000A604 ; Segment permissions: Read
.rdata:0000A604 _rdata          segment dword public 'DATA' use32
.rdata:0000A604                 assume cs:_rdata
.rdata:0000A604                 ;org 0A604h
.rdata:0000A604 ; COMDAT (pick any)
.rdata:0000A604                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000A604 ; char `string'[]
.rdata:0000A604 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000A604                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000A604                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000A604 _rdata          ends
.rdata:0000A604
.rdata:0000A614 ; ===========================================================================
.rdata:0000A614
.rdata:0000A614 ; Segment type: Pure data
.rdata:0000A614 ; Segment permissions: Read
.rdata:0000A614 _rdata          segment dword public 'DATA' use32
.rdata:0000A614                 assume cs:_rdata
.rdata:0000A614                 ;org 0A614h
.rdata:0000A614 ; COMDAT (pick any)
.rdata:0000A614                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000A614 ; wchar_t `string'
.rdata:0000A614 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000A614                                         ; DATA XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+11o
.rdata:0000A614                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o ...
.rdata:0000A614                 unicode 0, <invalid null pointer>,0
.rdata:0000A63E                 align 10h
.rdata:0000A63E _rdata          ends
.rdata:0000A63E
.xdata$x:0000A640 ; ===========================================================================
.xdata$x:0000A640
.xdata$x:0000A640 ; Segment type: Pure data
.xdata$x:0000A640 ; Segment permissions: Read
.xdata$x:0000A640 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A640                 assume cs:_xdata$x
.xdata$x:0000A640                 ;org 0A640h
.xdata$x:0000A640 ; COMDAT (pick any)
.xdata$x:0000A640                 public __TI2?AVbad_cast@std@@
.xdata$x:0000A640 __TI2?AVbad_cast@std@@ db    0          ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+92o
.xdata$x:0000A641                 db    0
.xdata$x:0000A642                 db    0
.xdata$x:0000A643                 db    0
.xdata$x:0000A644                 dd offset ??1bad_cast@std@@UAE@XZ ; std::bad_cast::~bad_cast(void)
.xdata$x:0000A648                 db    0
.xdata$x:0000A649                 db    0
.xdata$x:0000A64A                 db    0
.xdata$x:0000A64B                 db    0
.xdata$x:0000A64C                 dd offset __CTA2?AVbad_cast@std@@
.xdata$x:0000A64C _xdata$x        ends
.xdata$x:0000A64C
.xdata$x:0000A650 ; ===========================================================================
.xdata$x:0000A650
.xdata$x:0000A650 ; Segment type: Pure data
.xdata$x:0000A650 ; Segment permissions: Read
.xdata$x:0000A650 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A650                 assume cs:_xdata$x
.xdata$x:0000A650                 ;org 0A650h
.xdata$x:0000A650 ; COMDAT (pick any)
.xdata$x:0000A650                 public __CTA2?AVbad_cast@std@@
.xdata$x:0000A650 __CTA2?AVbad_cast@std@@ db    2         ; DATA XREF: .xdata$x:0000A64Co
.xdata$x:0000A651                 db    0
.xdata$x:0000A652                 db    0
.xdata$x:0000A653                 db    0
.xdata$x:0000A654                 dd offset __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000A658                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000A658 _xdata$x        ends
.xdata$x:0000A658
.data$r:0000A65C ; ===========================================================================
.data$r:0000A65C
.data$r:0000A65C ; Segment type: Pure data
.data$r:0000A65C ; Segment permissions: Read/Write
.data$r:0000A65C _data$r         segment dword public 'DATA' use32
.data$r:0000A65C                 assume cs:_data$r
.data$r:0000A65C                 ;org 0A65Ch
.data$r:0000A65C ; COMDAT (pick any)
.data$r:0000A65C                 public ??_R0?AVbad_cast@std@@@8
.data$r:0000A65C ; class std::bad_cast `RTTI Type Descriptor'
.data$r:0000A65C ??_R0?AVbad_cast@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A65C                                         ; DATA XREF: .xdata$x:0000A67Co
.data$r:0000A65C                                         ; const type_info::`vftable'
.data$r:0000A660                 db    0
.data$r:0000A661                 db    0
.data$r:0000A662                 db    0
.data$r:0000A663                 db    0
.data$r:0000A664                 db  2Eh ; .
.data$r:0000A665                 db  3Fh ; ?
.data$r:0000A666                 db  41h ; A
.data$r:0000A667                 db  56h ; V
.data$r:0000A668                 db  62h ; b
.data$r:0000A669                 db  61h ; a
.data$r:0000A66A                 db  64h ; d
.data$r:0000A66B                 db  5Fh ; _
.data$r:0000A66C                 db  63h ; c
.data$r:0000A66D                 db  61h ; a
.data$r:0000A66E                 db  73h ; s
.data$r:0000A66F                 db  74h ; t
.data$r:0000A670                 db  40h ; @
.data$r:0000A671                 db  73h ; s
.data$r:0000A672                 db  74h ; t
.data$r:0000A673                 db  64h ; d
.data$r:0000A674                 db  40h ; @
.data$r:0000A675                 db  40h ; @
.data$r:0000A676                 db    0
.data$r:0000A677                 align 4
.data$r:0000A677 _data$r         ends
.data$r:0000A677
.xdata$x:0000A678 ; ===========================================================================
.xdata$x:0000A678
.xdata$x:0000A678 ; Segment type: Pure data
.xdata$x:0000A678 ; Segment permissions: Read
.xdata$x:0000A678 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A678                 assume cs:_xdata$x
.xdata$x:0000A678                 ;org 0A678h
.xdata$x:0000A678 ; COMDAT (pick any)
.xdata$x:0000A678                 public __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
.xdata$x:0000A678 __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000A678                                         ; DATA XREF: .xdata$x:0000A654o
.xdata$x:0000A679                 db    0
.xdata$x:0000A67A                 db    0
.xdata$x:0000A67B                 db    0
.xdata$x:0000A67C                 dd offset ??_R0?AVbad_cast@std@@@8 ; std::bad_cast `RTTI Type Descriptor'
.xdata$x:0000A680                 db    0
.xdata$x:0000A681                 db    0
.xdata$x:0000A682                 db    0
.xdata$x:0000A683                 db    0
.xdata$x:0000A684                 db 0FFh
.xdata$x:0000A685                 db 0FFh
.xdata$x:0000A686                 db 0FFh
.xdata$x:0000A687                 db 0FFh
.xdata$x:0000A688                 db    0
.xdata$x:0000A689                 db    0
.xdata$x:0000A68A                 db    0
.xdata$x:0000A68B                 db    0
.xdata$x:0000A68C                 db  0Ch
.xdata$x:0000A68D                 db    0
.xdata$x:0000A68E                 db    0
.xdata$x:0000A68F                 db    0
.xdata$x:0000A690                 dd offset ??0bad_cast@std@@QAE@ABV01@@Z ; std::bad_cast::bad_cast(std::bad_cast const &)
.xdata$x:0000A690 _xdata$x        ends
.xdata$x:0000A690
.rdata:0000A694 ; ===========================================================================
.rdata:0000A694
.rdata:0000A694 ; Segment type: Pure data
.rdata:0000A694 ; Segment permissions: Read
.rdata:0000A694 _rdata          segment dword public 'DATA' use32
.rdata:0000A694                 assume cs:_rdata
.rdata:0000A694                 ;org 0A694h
.rdata:0000A694 ; COMDAT (pick any)
.rdata:0000A694                 public ??_C@_08EPJLHIJG@bad?5cast?$AA@
.rdata:0000A694 ; char `string'[]
.rdata:0000A694 ??_C@_08EPJLHIJG@bad?5cast?$AA@ db 'bad cast',0
.rdata:0000A694                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+85o
.rdata:0000A69D                 align 10h
.rdata:0000A69D _rdata          ends
.rdata:0000A69D
.bss:0000A6A0 ; ===========================================================================
.bss:0000A6A0
.bss:0000A6A0 ; Segment type: Uninitialized
.bss:0000A6A0 ; Segment permissions: Read/Write
.bss:0000A6A0 _bss            segment dword public 'BSS' use32
.bss:0000A6A0                 assume cs:_bss
.bss:0000A6A0                 ;org 0A6A0h
.bss:0000A6A0 ; COMDAT (pick any)
.bss:0000A6A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A6A0                 public ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
.bss:0000A6A0 ; public: static class std::locale::facet const * const std::_Facetptr<class std::ctype<wchar_t>>::_Psave
.bss:0000A6A0 ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B dd ?
.bss:0000A6A0                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+36r
.bss:0000A6A0                                         ; std::use_facet<std::ctype<wchar_t>>(std::locale const &)+ABw
.bss:0000A6A0 _bss            ends
.bss:0000A6A0
.rdata:0000A6A4 ; ===========================================================================
.rdata:0000A6A4
.rdata:0000A6A4 ; Segment type: Pure data
.rdata:0000A6A4 ; Segment permissions: Read
.rdata:0000A6A4 _rdata          segment dword public 'DATA' use32
.rdata:0000A6A4                 assume cs:_rdata
.rdata:0000A6A4                 ;org 0A6A4h
.rdata:0000A6A4 ; COMDAT (pick any)
.rdata:0000A6A4                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000A6A4 ; wchar_t `string'
.rdata:0000A6A4 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000A6A4                                         ; DATA XREF: std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000A6A4                                         ; std::_Debug_range2<wchar_t const *>(wchar_t const *,wchar_t const *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000A6A4                 unicode 0, <invalid iterator range>,0
.rdata:0000A6D2                 align 4
.rdata:0000A6D2 _rdata          ends
.rdata:0000A6D2
.rdata$r:0000A6D4 ; ===========================================================================
.rdata$r:0000A6D4
.rdata$r:0000A6D4 ; Segment type: Pure data
.rdata$r:0000A6D4 ; Segment permissions: Read
.rdata$r:0000A6D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A6D4                 assume cs:_rdata$r
.rdata$r:0000A6D4                 ;org 0A6D4h
.rdata$r:0000A6D4 ; COMDAT (pick any)
.rdata$r:0000A6D4                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000A6D4 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A6D4 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:0000A6D4                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:0000A6D4                                         ; .rdata$r:0000A730o ...
.rdata$r:0000A6D4                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:0000A6D8                 align 10h
.rdata$r:0000A6E0                 db 0FFh
.rdata$r:0000A6E1                 db 0FFh
.rdata$r:0000A6E2                 db 0FFh
.rdata$r:0000A6E3                 db 0FFh
.rdata$r:0000A6E4                 db    0
.rdata$r:0000A6E5                 db    0
.rdata$r:0000A6E6                 db    0
.rdata$r:0000A6E7                 db    0
.rdata$r:0000A6E8                 db  40h ; @
.rdata$r:0000A6E9                 db    0
.rdata$r:0000A6EA                 db    0
.rdata$r:0000A6EB                 db    0
.rdata$r:0000A6EC                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A6EC _rdata$r        ends
.rdata$r:0000A6EC
.rdata$r:0000A6F0 ; ===========================================================================
.rdata$r:0000A6F0
.rdata$r:0000A6F0 ; Segment type: Pure data
.rdata$r:0000A6F0 ; Segment permissions: Read
.rdata$r:0000A6F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A6F0                 assume cs:_rdata$r
.rdata$r:0000A6F0                 ;org 0A6F0h
.rdata$r:0000A6F0 ; COMDAT (pick any)
.rdata$r:0000A6F0                 public ??_R3exception@std@@8
.rdata$r:0000A6F0 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A6F0 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:0000A6ECo
.rdata$r:0000A6F1                 db    0
.rdata$r:0000A6F2                 db    0
.rdata$r:0000A6F3                 db    0
.rdata$r:0000A6F4                 db    0
.rdata$r:0000A6F5                 db    0
.rdata$r:0000A6F6                 db    0
.rdata$r:0000A6F7                 db    0
.rdata$r:0000A6F8                 db    1
.rdata$r:0000A6F9                 db    0
.rdata$r:0000A6FA                 db    0
.rdata$r:0000A6FB                 db    0
.rdata$r:0000A6FC                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000A6FC _rdata$r        ends
.rdata$r:0000A6FC
.rdata$r:0000A700 ; ===========================================================================
.rdata$r:0000A700
.rdata$r:0000A700 ; Segment type: Pure data
.rdata$r:0000A700 ; Segment permissions: Read
.rdata$r:0000A700 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A700                 assume cs:_rdata$r
.rdata$r:0000A700                 ;org 0A700h
.rdata$r:0000A700 ; COMDAT (pick any)
.rdata$r:0000A700                 public ??_R2exception@std@@8
.rdata$r:0000A700 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000A700 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000A700                                         ; DATA XREF: .rdata$r:0000A6FCo
.rdata$r:0000A700                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A704                 db    0
.rdata$r:0000A705                 align 4
.rdata$r:0000A705 _rdata$r        ends
.rdata$r:0000A705
.rdata$r:0000A708 ; ===========================================================================
.rdata$r:0000A708
.rdata$r:0000A708 ; Segment type: Pure data
.rdata$r:0000A708 ; Segment permissions: Read
.rdata$r:0000A708 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A708                 assume cs:_rdata$r
.rdata$r:0000A708                 ;org 0A708h
.rdata$r:0000A708 ; COMDAT (pick any)
.rdata$r:0000A708                 public ??_R4runtime_error@std@@6B@
.rdata$r:0000A708 ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:0000A708 ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:00009F70o
.rdata$r:0000A709                 db    0
.rdata$r:0000A70A                 db    0
.rdata$r:0000A70B                 db    0
.rdata$r:0000A70C                 db    0
.rdata$r:0000A70D                 db    0
.rdata$r:0000A70E                 db    0
.rdata$r:0000A70F                 db    0
.rdata$r:0000A710                 db    0
.rdata$r:0000A711                 db    0
.rdata$r:0000A712                 db    0
.rdata$r:0000A713                 db    0
.rdata$r:0000A714                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000A718                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A718 _rdata$r        ends
.rdata$r:0000A718
.rdata$r:0000A71C ; ===========================================================================
.rdata$r:0000A71C
.rdata$r:0000A71C ; Segment type: Pure data
.rdata$r:0000A71C ; Segment permissions: Read
.rdata$r:0000A71C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A71C                 assume cs:_rdata$r
.rdata$r:0000A71C                 ;org 0A71Ch
.rdata$r:0000A71C ; COMDAT (pick any)
.rdata$r:0000A71C                 public ??_R3runtime_error@std@@8
.rdata$r:0000A71C ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A71C ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000A718o
.rdata$r:0000A71C                                         ; .rdata$r:0000A750o
.rdata$r:0000A71D                 db    0
.rdata$r:0000A71E                 db    0
.rdata$r:0000A71F                 db    0
.rdata$r:0000A720                 db    0
.rdata$r:0000A721                 db    0
.rdata$r:0000A722                 db    0
.rdata$r:0000A723                 db    0
.rdata$r:0000A724                 db    2
.rdata$r:0000A725                 db    0
.rdata$r:0000A726                 db    0
.rdata$r:0000A727                 db    0
.rdata$r:0000A728                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000A728 _rdata$r        ends
.rdata$r:0000A728
.rdata$r:0000A72C ; ===========================================================================
.rdata$r:0000A72C
.rdata$r:0000A72C ; Segment type: Pure data
.rdata$r:0000A72C ; Segment permissions: Read
.rdata$r:0000A72C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A72C                 assume cs:_rdata$r
.rdata$r:0000A72C                 ;org 0A72Ch
.rdata$r:0000A72C ; COMDAT (pick any)
.rdata$r:0000A72C                 public ??_R2runtime_error@std@@8
.rdata$r:0000A72C ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000A72C ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000A72C                                         ; DATA XREF: .rdata$r:0000A728o
.rdata$r:0000A72C                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A730                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A734                 db    0
.rdata$r:0000A735                 align 4
.rdata$r:0000A735 _rdata$r        ends
.rdata$r:0000A735
.rdata$r:0000A738 ; ===========================================================================
.rdata$r:0000A738
.rdata$r:0000A738 ; Segment type: Pure data
.rdata$r:0000A738 ; Segment permissions: Read
.rdata$r:0000A738 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A738                 assume cs:_rdata$r
.rdata$r:0000A738                 ;org 0A738h
.rdata$r:0000A738 ; COMDAT (pick any)
.rdata$r:0000A738                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000A738 ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A738 ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:0000A738                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:0000A738                                         ; .rdata$r:0000A9A0o ...
.rdata$r:0000A738                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000A73C                 db    1
.rdata$r:0000A73D                 db    0
.rdata$r:0000A73E                 db    0
.rdata$r:0000A73F                 db    0
.rdata$r:0000A740                 db    0
.rdata$r:0000A741                 db    0
.rdata$r:0000A742                 db    0
.rdata$r:0000A743                 db    0
.rdata$r:0000A744                 db 0FFh
.rdata$r:0000A745                 db 0FFh
.rdata$r:0000A746                 db 0FFh
.rdata$r:0000A747                 db 0FFh
.rdata$r:0000A748                 db    0
.rdata$r:0000A749                 db    0
.rdata$r:0000A74A                 db    0
.rdata$r:0000A74B                 db    0
.rdata$r:0000A74C                 db  40h ; @
.rdata$r:0000A74D                 db    0
.rdata$r:0000A74E                 db    0
.rdata$r:0000A74F                 db    0
.rdata$r:0000A750                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A750 _rdata$r        ends
.rdata$r:0000A750
.rdata$r:0000A754 ; ===========================================================================
.rdata$r:0000A754
.rdata$r:0000A754 ; Segment type: Pure data
.rdata$r:0000A754 ; Segment permissions: Read
.rdata$r:0000A754 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A754                 assume cs:_rdata$r
.rdata$r:0000A754                 ;org 0A754h
.rdata$r:0000A754 ; COMDAT (pick any)
.rdata$r:0000A754                 public ??_R4_Facet_base@std@@6B@
.rdata$r:0000A754 ; const std::_Facet_base::`RTTI Complete Object Locator'
.rdata$r:0000A754 ??_R4_Facet_base@std@@6B@ db    0       ; DATA XREF: .rdata:0000A01Co
.rdata$r:0000A755                 db    0
.rdata$r:0000A756                 db    0
.rdata$r:0000A757                 db    0
.rdata$r:0000A758                 db    0
.rdata$r:0000A759                 db    0
.rdata$r:0000A75A                 db    0
.rdata$r:0000A75B                 db    0
.rdata$r:0000A75C                 db    0
.rdata$r:0000A75D                 db    0
.rdata$r:0000A75E                 db    0
.rdata$r:0000A75F                 db    0
.rdata$r:0000A760                 dd offset ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000A764                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A764 _rdata$r        ends
.rdata$r:0000A764
.data$r:0000A768 ; ===========================================================================
.data$r:0000A768
.data$r:0000A768 ; Segment type: Pure data
.data$r:0000A768 ; Segment permissions: Read/Write
.data$r:0000A768 _data$r         segment dword public 'DATA' use32
.data$r:0000A768                 assume cs:_data$r
.data$r:0000A768                 ;org 0A768h
.data$r:0000A768 ; COMDAT (pick any)
.data$r:0000A768                 public ??_R0?AV_Facet_base@std@@@8
.data$r:0000A768 ; class std::_Facet_base `RTTI Type Descriptor'
.data$r:0000A768 ??_R0?AV_Facet_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A768                                         ; DATA XREF: .rdata$r:0000A760o
.data$r:0000A768                                         ; .rdata$r:std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A768                                         ; const type_info::`vftable'
.data$r:0000A76C                 align 10h
.data$r:0000A770 a_?av_facet_bas db '.?AV_Facet_base@std@@',0
.data$r:0000A786                 align 4
.data$r:0000A786 _data$r         ends
.data$r:0000A786
.rdata$r:0000A788 ; ===========================================================================
.rdata$r:0000A788
.rdata$r:0000A788 ; Segment type: Pure data
.rdata$r:0000A788 ; Segment permissions: Read
.rdata$r:0000A788 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A788                 assume cs:_rdata$r
.rdata$r:0000A788                 ;org 0A788h
.rdata$r:0000A788 ; COMDAT (pick any)
.rdata$r:0000A788                 public ??_R3_Facet_base@std@@8
.rdata$r:0000A788 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A788 ??_R3_Facet_base@std@@8 db    0         ; DATA XREF: .rdata$r:0000A764o
.rdata$r:0000A788                                         ; .rdata$r:0000A7B8o
.rdata$r:0000A789                 db    0
.rdata$r:0000A78A                 db    0
.rdata$r:0000A78B                 db    0
.rdata$r:0000A78C                 db    0
.rdata$r:0000A78D                 db    0
.rdata$r:0000A78E                 db    0
.rdata$r:0000A78F                 db    0
.rdata$r:0000A790                 db    1
.rdata$r:0000A791                 db    0
.rdata$r:0000A792                 db    0
.rdata$r:0000A793                 db    0
.rdata$r:0000A794                 dd offset ??_R2_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000A794 _rdata$r        ends
.rdata$r:0000A794
.rdata$r:0000A798 ; ===========================================================================
.rdata$r:0000A798
.rdata$r:0000A798 ; Segment type: Pure data
.rdata$r:0000A798 ; Segment permissions: Read
.rdata$r:0000A798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A798                 assume cs:_rdata$r
.rdata$r:0000A798                 ;org 0A798h
.rdata$r:0000A798 ; COMDAT (pick any)
.rdata$r:0000A798                 public ??_R2_Facet_base@std@@8
.rdata$r:0000A798 ; std::_Facet_base::`RTTI Base Class Array'
.rdata$r:0000A798 ??_R2_Facet_base@std@@8 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000A798                                         ; DATA XREF: .rdata$r:0000A794o
.rdata$r:0000A798                                         ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A79C                 db    0
.rdata$r:0000A79D                 align 10h
.rdata$r:0000A79D _rdata$r        ends
.rdata$r:0000A79D
.rdata$r:0000A7A0 ; ===========================================================================
.rdata$r:0000A7A0
.rdata$r:0000A7A0 ; Segment type: Pure data
.rdata$r:0000A7A0 ; Segment permissions: Read
.rdata$r:0000A7A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A7A0                 assume cs:_rdata$r
.rdata$r:0000A7A0                 ;org 0A7A0h
.rdata$r:0000A7A0 ; COMDAT (pick any)
.rdata$r:0000A7A0                 public ??_R1A@?0A@EA@_Facet_base@std@@8
.rdata$r:0000A7A0 ; std::_Facet_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A7A0 ??_R1A@?0A@EA@_Facet_base@std@@8 dd offset ??_R0?AV_Facet_base@std@@@8
.rdata$r:0000A7A0                                         ; DATA XREF: .rdata$r:std::_Facet_base::`RTTI Base Class Array'o
.rdata$r:0000A7A0                                         ; .rdata$r:0000A80Co ...
.rdata$r:0000A7A0                                         ; std::_Facet_base `RTTI Type Descriptor'
.rdata$r:0000A7A4                 db    0
.rdata$r:0000A7A5                 db    0
.rdata$r:0000A7A6                 db    0
.rdata$r:0000A7A7                 db    0
.rdata$r:0000A7A8                 db    0
.rdata$r:0000A7A9                 db    0
.rdata$r:0000A7AA                 db    0
.rdata$r:0000A7AB                 db    0
.rdata$r:0000A7AC                 db 0FFh
.rdata$r:0000A7AD                 db 0FFh
.rdata$r:0000A7AE                 db 0FFh
.rdata$r:0000A7AF                 db 0FFh
.rdata$r:0000A7B0                 db    0
.rdata$r:0000A7B1                 db    0
.rdata$r:0000A7B2                 db    0
.rdata$r:0000A7B3                 db    0
.rdata$r:0000A7B4                 db  40h ; @
.rdata$r:0000A7B5                 db    0
.rdata$r:0000A7B6                 db    0
.rdata$r:0000A7B7                 db    0
.rdata$r:0000A7B8                 dd offset ??_R3_Facet_base@std@@8 ; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A7B8 _rdata$r        ends
.rdata$r:0000A7B8
.rdata$r:0000A7BC ; ===========================================================================
.rdata$r:0000A7BC
.rdata$r:0000A7BC ; Segment type: Pure data
.rdata$r:0000A7BC ; Segment permissions: Read
.rdata$r:0000A7BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A7BC                 assume cs:_rdata$r
.rdata$r:0000A7BC                 ;org 0A7BCh
.rdata$r:0000A7BC ; COMDAT (pick any)
.rdata$r:0000A7BC                 public ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000A7BC ; std::locale::facet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A7BC ??_R1A@?0A@EA@facet@locale@std@@8 dd offset ??_R0?AVfacet@locale@std@@@8
.rdata$r:0000A7BC                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Array'o
.rdata$r:0000A7BC                                         ; .rdata$r:0000A870o ...
.rdata$r:0000A7BC                                         ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000A7C0                 db    1
.rdata$r:0000A7C1                 db    0
.rdata$r:0000A7C2                 db    0
.rdata$r:0000A7C3                 db    0
.rdata$r:0000A7C4                 db    0
.rdata$r:0000A7C5                 db    0
.rdata$r:0000A7C6                 db    0
.rdata$r:0000A7C7                 db    0
.rdata$r:0000A7C8                 db 0FFh
.rdata$r:0000A7C9                 db 0FFh
.rdata$r:0000A7CA                 db 0FFh
.rdata$r:0000A7CB                 db 0FFh
.rdata$r:0000A7CC                 db    0
.rdata$r:0000A7CD                 db    0
.rdata$r:0000A7CE                 db    0
.rdata$r:0000A7CF                 db    0
.rdata$r:0000A7D0                 db  40h ; @
.rdata$r:0000A7D1                 db    0
.rdata$r:0000A7D2                 db    0
.rdata$r:0000A7D3                 db    0
.rdata$r:0000A7D4                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A7D4 _rdata$r        ends
.rdata$r:0000A7D4
.data$r:0000A7D8 ; ===========================================================================
.data$r:0000A7D8
.data$r:0000A7D8 ; Segment type: Pure data
.data$r:0000A7D8 ; Segment permissions: Read/Write
.data$r:0000A7D8 _data$r         segment dword public 'DATA' use32
.data$r:0000A7D8                 assume cs:_data$r
.data$r:0000A7D8                 ;org 0A7D8h
.data$r:0000A7D8 ; COMDAT (pick any)
.data$r:0000A7D8                 public ??_R0?AVfacet@locale@std@@@8
.data$r:0000A7D8 ; class std::locale::facet `RTTI Type Descriptor'
.data$r:0000A7D8 ??_R0?AVfacet@locale@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A7D8                                         ; DATA XREF: .rdata$r:std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A7D8                                         ; .rdata$r:0000A820o
.data$r:0000A7D8                                         ; const type_info::`vftable'
.data$r:0000A7DC                 align 10h
.data$r:0000A7E0 a_?avfacet@loca db '.?AVfacet@locale@std@@',0
.data$r:0000A7F7                 align 4
.data$r:0000A7F7 _data$r         ends
.data$r:0000A7F7
.rdata$r:0000A7F8 ; ===========================================================================
.rdata$r:0000A7F8
.rdata$r:0000A7F8 ; Segment type: Pure data
.rdata$r:0000A7F8 ; Segment permissions: Read
.rdata$r:0000A7F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A7F8                 assume cs:_rdata$r
.rdata$r:0000A7F8                 ;org 0A7F8h
.rdata$r:0000A7F8 ; COMDAT (pick any)
.rdata$r:0000A7F8                 public ??_R3facet@locale@std@@8
.rdata$r:0000A7F8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A7F8 ??_R3facet@locale@std@@8 db    0        ; DATA XREF: .rdata$r:0000A7D4o
.rdata$r:0000A7F8                                         ; .rdata$r:0000A824o
.rdata$r:0000A7F9                 db    0
.rdata$r:0000A7FA                 db    0
.rdata$r:0000A7FB                 db    0
.rdata$r:0000A7FC                 db    0
.rdata$r:0000A7FD                 db    0
.rdata$r:0000A7FE                 db    0
.rdata$r:0000A7FF                 db    0
.rdata$r:0000A800                 db    2
.rdata$r:0000A801                 db    0
.rdata$r:0000A802                 db    0
.rdata$r:0000A803                 db    0
.rdata$r:0000A804                 dd offset ??_R2facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000A804 _rdata$r        ends
.rdata$r:0000A804
.rdata$r:0000A808 ; ===========================================================================
.rdata$r:0000A808
.rdata$r:0000A808 ; Segment type: Pure data
.rdata$r:0000A808 ; Segment permissions: Read
.rdata$r:0000A808 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A808                 assume cs:_rdata$r
.rdata$r:0000A808                 ;org 0A808h
.rdata$r:0000A808 ; COMDAT (pick any)
.rdata$r:0000A808                 public ??_R2facet@locale@std@@8
.rdata$r:0000A808 ; std::locale::facet::`RTTI Base Class Array'
.rdata$r:0000A808 ??_R2facet@locale@std@@8 dd offset ??_R1A@?0A@EA@facet@locale@std@@8
.rdata$r:0000A808                                         ; DATA XREF: .rdata$r:0000A804o
.rdata$r:0000A808                                         ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A80C                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A810                 db    0
.rdata$r:0000A811                 align 4
.rdata$r:0000A811 _rdata$r        ends
.rdata$r:0000A811
.rdata$r:0000A814 ; ===========================================================================
.rdata$r:0000A814
.rdata$r:0000A814 ; Segment type: Pure data
.rdata$r:0000A814 ; Segment permissions: Read
.rdata$r:0000A814 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A814                 assume cs:_rdata$r
.rdata$r:0000A814                 ;org 0A814h
.rdata$r:0000A814 ; COMDAT (pick any)
.rdata$r:0000A814                 public ??_R4facet@locale@std@@6B@
.rdata$r:0000A814 ; const std::locale::facet::`RTTI Complete Object Locator'
.rdata$r:0000A814 ??_R4facet@locale@std@@6B@ db    0      ; DATA XREF: .rdata:0000A02Co
.rdata$r:0000A815                 db    0
.rdata$r:0000A816                 db    0
.rdata$r:0000A817                 db    0
.rdata$r:0000A818                 db    0
.rdata$r:0000A819                 db    0
.rdata$r:0000A81A                 db    0
.rdata$r:0000A81B                 db    0
.rdata$r:0000A81C                 db    0
.rdata$r:0000A81D                 db    0
.rdata$r:0000A81E                 db    0
.rdata$r:0000A81F                 db    0
.rdata$r:0000A820                 dd offset ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet `RTTI Type Descriptor'
.rdata$r:0000A824                 dd offset ??_R3facet@locale@std@@8 ; std::locale::facet::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A824 _rdata$r        ends
.rdata$r:0000A824
.rdata$r:0000A828 ; ===========================================================================
.rdata$r:0000A828
.rdata$r:0000A828 ; Segment type: Pure data
.rdata$r:0000A828 ; Segment permissions: Read
.rdata$r:0000A828 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A828                 assume cs:_rdata$r
.rdata$r:0000A828                 ;org 0A828h
.rdata$r:0000A828 ; COMDAT (pick any)
.rdata$r:0000A828                 public ??_R4ctype_base@std@@6B@
.rdata$r:0000A828 ; const std::ctype_base::`RTTI Complete Object Locator'
.rdata$r:0000A828 ??_R4ctype_base@std@@6B@ db    0        ; DATA XREF: .rdata:0000A118o
.rdata$r:0000A829                 db    0
.rdata$r:0000A82A                 db    0
.rdata$r:0000A82B                 db    0
.rdata$r:0000A82C                 db    0
.rdata$r:0000A82D                 db    0
.rdata$r:0000A82E                 db    0
.rdata$r:0000A82F                 db    0
.rdata$r:0000A830                 db    0
.rdata$r:0000A831                 db    0
.rdata$r:0000A832                 db    0
.rdata$r:0000A833                 db    0
.rdata$r:0000A834                 dd offset ??_R0?AUctype_base@std@@@8 ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000A838                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A838 _rdata$r        ends
.rdata$r:0000A838
.data$r:0000A83C ; ===========================================================================
.data$r:0000A83C
.data$r:0000A83C ; Segment type: Pure data
.data$r:0000A83C ; Segment permissions: Read/Write
.data$r:0000A83C _data$r         segment dword public 'DATA' use32
.data$r:0000A83C                 assume cs:_data$r
.data$r:0000A83C                 ;org 0A83Ch
.data$r:0000A83C ; COMDAT (pick any)
.data$r:0000A83C                 public ??_R0?AUctype_base@std@@@8
.data$r:0000A83C ; struct std::ctype_base `RTTI Type Descriptor'
.data$r:0000A83C ??_R0?AUctype_base@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A83C                                         ; DATA XREF: .rdata$r:0000A834o
.data$r:0000A83C                                         ; .rdata$r:std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A83C                                         ; const type_info::`vftable'
.data$r:0000A840                 db    0
.data$r:0000A841                 db    0
.data$r:0000A842                 db    0
.data$r:0000A843                 db    0
.data$r:0000A844                 db  2Eh ; .
.data$r:0000A845                 db  3Fh ; ?
.data$r:0000A846                 db  41h ; A
.data$r:0000A847                 db  55h ; U
.data$r:0000A848                 db  63h ; c
.data$r:0000A849                 db  74h ; t
.data$r:0000A84A                 db  79h ; y
.data$r:0000A84B                 db  70h ; p
.data$r:0000A84C                 db  65h ; e
.data$r:0000A84D                 db  5Fh ; _
.data$r:0000A84E                 db  62h ; b
.data$r:0000A84F                 db  61h ; a
.data$r:0000A850                 db  73h ; s
.data$r:0000A851                 db  65h ; e
.data$r:0000A852                 db  40h ; @
.data$r:0000A853                 db  73h ; s
.data$r:0000A854                 db  74h ; t
.data$r:0000A855                 db  64h ; d
.data$r:0000A856                 db  40h ; @
.data$r:0000A857                 db  40h ; @
.data$r:0000A858                 db    0
.data$r:0000A859                 align 4
.data$r:0000A859 _data$r         ends
.data$r:0000A859
.rdata$r:0000A85C ; ===========================================================================
.rdata$r:0000A85C
.rdata$r:0000A85C ; Segment type: Pure data
.rdata$r:0000A85C ; Segment permissions: Read
.rdata$r:0000A85C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A85C                 assume cs:_rdata$r
.rdata$r:0000A85C                 ;org 0A85Ch
.rdata$r:0000A85C ; COMDAT (pick any)
.rdata$r:0000A85C                 public ??_R3ctype_base@std@@8
.rdata$r:0000A85C ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A85C ??_R3ctype_base@std@@8 db    0          ; DATA XREF: .rdata$r:0000A838o
.rdata$r:0000A85C                                         ; .rdata$r:0000A894o
.rdata$r:0000A85D                 db    0
.rdata$r:0000A85E                 db    0
.rdata$r:0000A85F                 db    0
.rdata$r:0000A860                 db    0
.rdata$r:0000A861                 db    0
.rdata$r:0000A862                 db    0
.rdata$r:0000A863                 db    0
.rdata$r:0000A864                 db    3
.rdata$r:0000A865                 db    0
.rdata$r:0000A866                 db    0
.rdata$r:0000A867                 db    0
.rdata$r:0000A868                 dd offset ??_R2ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000A868 _rdata$r        ends
.rdata$r:0000A868
.rdata$r:0000A86C ; ===========================================================================
.rdata$r:0000A86C
.rdata$r:0000A86C ; Segment type: Pure data
.rdata$r:0000A86C ; Segment permissions: Read
.rdata$r:0000A86C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A86C                 assume cs:_rdata$r
.rdata$r:0000A86C                 ;org 0A86Ch
.rdata$r:0000A86C ; COMDAT (pick any)
.rdata$r:0000A86C                 public ??_R2ctype_base@std@@8
.rdata$r:0000A86C ; std::ctype_base::`RTTI Base Class Array'
.rdata$r:0000A86C ??_R2ctype_base@std@@8 dd offset ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000A86C                                         ; DATA XREF: .rdata$r:0000A868o
.rdata$r:0000A86C                                         ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A870                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A874                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A878                 db    0
.rdata$r:0000A879                 align 4
.rdata$r:0000A879 _rdata$r        ends
.rdata$r:0000A879
.rdata$r:0000A87C ; ===========================================================================
.rdata$r:0000A87C
.rdata$r:0000A87C ; Segment type: Pure data
.rdata$r:0000A87C ; Segment permissions: Read
.rdata$r:0000A87C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A87C                 assume cs:_rdata$r
.rdata$r:0000A87C                 ;org 0A87Ch
.rdata$r:0000A87C ; COMDAT (pick any)
.rdata$r:0000A87C                 public ??_R1A@?0A@EA@ctype_base@std@@8
.rdata$r:0000A87C ; std::ctype_base::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A87C ??_R1A@?0A@EA@ctype_base@std@@8 dd offset ??_R0?AUctype_base@std@@@8
.rdata$r:0000A87C                                         ; DATA XREF: .rdata$r:std::ctype_base::`RTTI Base Class Array'o
.rdata$r:0000A87C                                         ; .rdata$r:0000A8E0o
.rdata$r:0000A87C                                         ; std::ctype_base `RTTI Type Descriptor'
.rdata$r:0000A880                 db    2
.rdata$r:0000A881                 db    0
.rdata$r:0000A882                 db    0
.rdata$r:0000A883                 db    0
.rdata$r:0000A884                 db    0
.rdata$r:0000A885                 db    0
.rdata$r:0000A886                 db    0
.rdata$r:0000A887                 db    0
.rdata$r:0000A888                 db 0FFh
.rdata$r:0000A889                 db 0FFh
.rdata$r:0000A88A                 db 0FFh
.rdata$r:0000A88B                 db 0FFh
.rdata$r:0000A88C                 db    0
.rdata$r:0000A88D                 db    0
.rdata$r:0000A88E                 db    0
.rdata$r:0000A88F                 db    0
.rdata$r:0000A890                 db  40h ; @
.rdata$r:0000A891                 db    0
.rdata$r:0000A892                 db    0
.rdata$r:0000A893                 db    0
.rdata$r:0000A894                 dd offset ??_R3ctype_base@std@@8 ; std::ctype_base::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A894 _rdata$r        ends
.rdata$r:0000A894
.rdata$r:0000A898 ; ===========================================================================
.rdata$r:0000A898
.rdata$r:0000A898 ; Segment type: Pure data
.rdata$r:0000A898 ; Segment permissions: Read
.rdata$r:0000A898 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A898                 assume cs:_rdata$r
.rdata$r:0000A898                 ;org 0A898h
.rdata$r:0000A898 ; COMDAT (pick any)
.rdata$r:0000A898                 public ??_R4?$ctype@_W@std@@6B@
.rdata$r:0000A898 ; const std::ctype<wchar_t>::`RTTI Complete Object Locator'
.rdata$r:0000A898 ??_R4?$ctype@_W@std@@6B@ db    0        ; DATA XREF: .rdata:0000A128o
.rdata$r:0000A899                 db    0
.rdata$r:0000A89A                 db    0
.rdata$r:0000A89B                 db    0
.rdata$r:0000A89C                 db    0
.rdata$r:0000A89D                 db    0
.rdata$r:0000A89E                 db    0
.rdata$r:0000A89F                 db    0
.rdata$r:0000A8A0                 db    0
.rdata$r:0000A8A1                 db    0
.rdata$r:0000A8A2                 db    0
.rdata$r:0000A8A3                 db    0
.rdata$r:0000A8A4                 dd offset ??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:0000A8A8                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A8A8 _rdata$r        ends
.rdata$r:0000A8A8
.data$r:0000A8AC ; ===========================================================================
.data$r:0000A8AC
.data$r:0000A8AC ; Segment type: Pure data
.data$r:0000A8AC ; Segment permissions: Read/Write
.data$r:0000A8AC _data$r         segment dword public 'DATA' use32
.data$r:0000A8AC                 assume cs:_data$r
.data$r:0000A8AC                 ;org 0A8ACh
.data$r:0000A8AC ; COMDAT (pick any)
.data$r:0000A8AC                 public ??_R0?AV?$ctype@_W@std@@@8
.data$r:0000A8AC ; class std::ctype<wchar_t> `RTTI Type Descriptor'
.data$r:0000A8AC ??_R0?AV?$ctype@_W@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A8AC                                         ; DATA XREF: .rdata$r:0000A8A4o
.data$r:0000A8AC                                         ; .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A8AC                                         ; const type_info::`vftable'
.data$r:0000A8B0                 db    0
.data$r:0000A8B1                 db    0
.data$r:0000A8B2                 db    0
.data$r:0000A8B3                 db    0
.data$r:0000A8B4                 db  2Eh ; .
.data$r:0000A8B5                 db  3Fh ; ?
.data$r:0000A8B6                 db  41h ; A
.data$r:0000A8B7                 db  56h ; V
.data$r:0000A8B8                 db  3Fh ; ?
.data$r:0000A8B9                 db  24h ; $
.data$r:0000A8BA                 db  63h ; c
.data$r:0000A8BB                 db  74h ; t
.data$r:0000A8BC                 db  79h ; y
.data$r:0000A8BD                 db  70h ; p
.data$r:0000A8BE                 db  65h ; e
.data$r:0000A8BF                 db  40h ; @
.data$r:0000A8C0                 db  5Fh ; _
.data$r:0000A8C1                 db  57h ; W
.data$r:0000A8C2                 db  40h ; @
.data$r:0000A8C3                 db  73h ; s
.data$r:0000A8C4                 db  74h ; t
.data$r:0000A8C5                 db  64h ; d
.data$r:0000A8C6                 db  40h ; @
.data$r:0000A8C7                 db  40h ; @
.data$r:0000A8C8                 db    0
.data$r:0000A8C9                 align 4
.data$r:0000A8C9 _data$r         ends
.data$r:0000A8C9
.rdata$r:0000A8CC ; ===========================================================================
.rdata$r:0000A8CC
.rdata$r:0000A8CC ; Segment type: Pure data
.rdata$r:0000A8CC ; Segment permissions: Read
.rdata$r:0000A8CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A8CC                 assume cs:_rdata$r
.rdata$r:0000A8CC                 ;org 0A8CCh
.rdata$r:0000A8CC ; COMDAT (pick any)
.rdata$r:0000A8CC                 public ??_R3?$ctype@_W@std@@8
.rdata$r:0000A8CC ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A8CC ??_R3?$ctype@_W@std@@8 db    0          ; DATA XREF: .rdata$r:0000A8A8o
.rdata$r:0000A8CC                                         ; .rdata$r:0000A908o
.rdata$r:0000A8CD                 db    0
.rdata$r:0000A8CE                 db    0
.rdata$r:0000A8CF                 db    0
.rdata$r:0000A8D0                 db    0
.rdata$r:0000A8D1                 db    0
.rdata$r:0000A8D2                 db    0
.rdata$r:0000A8D3                 db    0
.rdata$r:0000A8D4                 db    4
.rdata$r:0000A8D5                 db    0
.rdata$r:0000A8D6                 db    0
.rdata$r:0000A8D7                 db    0
.rdata$r:0000A8D8                 dd offset ??_R2?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:0000A8D8 _rdata$r        ends
.rdata$r:0000A8D8
.rdata$r:0000A8DC ; ===========================================================================
.rdata$r:0000A8DC
.rdata$r:0000A8DC ; Segment type: Pure data
.rdata$r:0000A8DC ; Segment permissions: Read
.rdata$r:0000A8DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A8DC                 assume cs:_rdata$r
.rdata$r:0000A8DC                 ;org 0A8DCh
.rdata$r:0000A8DC ; COMDAT (pick any)
.rdata$r:0000A8DC                 public ??_R2?$ctype@_W@std@@8
.rdata$r:0000A8DC ; std::ctype<wchar_t>::`RTTI Base Class Array'
.rdata$r:0000A8DC ??_R2?$ctype@_W@std@@8 dd offset ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:0000A8DC                                         ; DATA XREF: .rdata$r:0000A8D8o
.rdata$r:0000A8DC                                         ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A8E0                 dd offset ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A8E4                 dd offset ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A8E8                 dd offset ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A8EC                 db    0
.rdata$r:0000A8ED                 align 10h
.rdata$r:0000A8ED _rdata$r        ends
.rdata$r:0000A8ED
.rdata$r:0000A8F0 ; ===========================================================================
.rdata$r:0000A8F0
.rdata$r:0000A8F0 ; Segment type: Pure data
.rdata$r:0000A8F0 ; Segment permissions: Read
.rdata$r:0000A8F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A8F0                 assume cs:_rdata$r
.rdata$r:0000A8F0                 ;org 0A8F0h
.rdata$r:0000A8F0 ; COMDAT (pick any)
.rdata$r:0000A8F0                 public ??_R1A@?0A@EA@?$ctype@_W@std@@8
.rdata$r:0000A8F0 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A8F0 ??_R1A@?0A@EA@?$ctype@_W@std@@8 dd offset ??_R0?AV?$ctype@_W@std@@@8
.rdata$r:0000A8F0                                         ; DATA XREF: .rdata$r:std::ctype<wchar_t>::`RTTI Base Class Array'o
.rdata$r:0000A8F0                                         ; std::ctype<wchar_t> `RTTI Type Descriptor'
.rdata$r:0000A8F4                 db    3
.rdata$r:0000A8F5                 db    0
.rdata$r:0000A8F6                 db    0
.rdata$r:0000A8F7                 db    0
.rdata$r:0000A8F8                 db    0
.rdata$r:0000A8F9                 db    0
.rdata$r:0000A8FA                 db    0
.rdata$r:0000A8FB                 db    0
.rdata$r:0000A8FC                 db 0FFh
.rdata$r:0000A8FD                 db 0FFh
.rdata$r:0000A8FE                 db 0FFh
.rdata$r:0000A8FF                 db 0FFh
.rdata$r:0000A900                 db    0
.rdata$r:0000A901                 db    0
.rdata$r:0000A902                 db    0
.rdata$r:0000A903                 db    0
.rdata$r:0000A904                 db  40h ; @
.rdata$r:0000A905                 db    0
.rdata$r:0000A906                 db    0
.rdata$r:0000A907                 db    0
.rdata$r:0000A908                 dd offset ??_R3?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A908 _rdata$r        ends
.rdata$r:0000A908
.rdata$r:0000A90C ; ===========================================================================
.rdata$r:0000A90C
.rdata$r:0000A90C ; Segment type: Pure data
.rdata$r:0000A90C ; Segment permissions: Read
.rdata$r:0000A90C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A90C                 assume cs:_rdata$r
.rdata$r:0000A90C                 ;org 0A90Ch
.rdata$r:0000A90C ; COMDAT (pick any)
.rdata$r:0000A90C                 public ??_R4error_category@std@@6B@
.rdata$r:0000A90C ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000A90C ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000A168o
.rdata$r:0000A90D                 db    0
.rdata$r:0000A90E                 db    0
.rdata$r:0000A90F                 db    0
.rdata$r:0000A910                 db    0
.rdata$r:0000A911                 db    0
.rdata$r:0000A912                 db    0
.rdata$r:0000A913                 db    0
.rdata$r:0000A914                 db    0
.rdata$r:0000A915                 db    0
.rdata$r:0000A916                 db    0
.rdata$r:0000A917                 db    0
.rdata$r:0000A918                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000A91C                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A91C _rdata$r        ends
.rdata$r:0000A91C
.data$r:0000A920 ; ===========================================================================
.data$r:0000A920
.data$r:0000A920 ; Segment type: Pure data
.data$r:0000A920 ; Segment permissions: Read/Write
.data$r:0000A920 _data$r         segment dword public 'DATA' use32
.data$r:0000A920                 assume cs:_data$r
.data$r:0000A920                 ;org 0A920h
.data$r:0000A920 ; COMDAT (pick any)
.data$r:0000A920                 public ??_R0?AVerror_category@std@@@8
.data$r:0000A920 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000A920 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A920                                         ; DATA XREF: .rdata$r:0000A918o
.data$r:0000A920                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A920                                         ; const type_info::`vftable'
.data$r:0000A924                 align 8
.data$r:0000A928 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:0000A941                 align 4
.data$r:0000A941 _data$r         ends
.data$r:0000A941
.rdata$r:0000A944 ; ===========================================================================
.rdata$r:0000A944
.rdata$r:0000A944 ; Segment type: Pure data
.rdata$r:0000A944 ; Segment permissions: Read
.rdata$r:0000A944 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A944                 assume cs:_rdata$r
.rdata$r:0000A944                 ;org 0A944h
.rdata$r:0000A944 ; COMDAT (pick any)
.rdata$r:0000A944                 public ??_R3error_category@std@@8
.rdata$r:0000A944 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A944 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000A91Co
.rdata$r:0000A944                                         ; .rdata$r:0000A974o
.rdata$r:0000A945                 db    0
.rdata$r:0000A946                 db    0
.rdata$r:0000A947                 db    0
.rdata$r:0000A948                 db    0
.rdata$r:0000A949                 db    0
.rdata$r:0000A94A                 db    0
.rdata$r:0000A94B                 db    0
.rdata$r:0000A94C                 db    1
.rdata$r:0000A94D                 db    0
.rdata$r:0000A94E                 db    0
.rdata$r:0000A94F                 db    0
.rdata$r:0000A950                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000A950 _rdata$r        ends
.rdata$r:0000A950
.rdata$r:0000A954 ; ===========================================================================
.rdata$r:0000A954
.rdata$r:0000A954 ; Segment type: Pure data
.rdata$r:0000A954 ; Segment permissions: Read
.rdata$r:0000A954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A954                 assume cs:_rdata$r
.rdata$r:0000A954                 ;org 0A954h
.rdata$r:0000A954 ; COMDAT (pick any)
.rdata$r:0000A954                 public ??_R2error_category@std@@8
.rdata$r:0000A954 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000A954 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000A954                                         ; DATA XREF: .rdata$r:0000A950o
.rdata$r:0000A954                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A958                 db    0
.rdata$r:0000A959                 align 4
.rdata$r:0000A959 _rdata$r        ends
.rdata$r:0000A959
.rdata$r:0000A95C ; ===========================================================================
.rdata$r:0000A95C
.rdata$r:0000A95C ; Segment type: Pure data
.rdata$r:0000A95C ; Segment permissions: Read
.rdata$r:0000A95C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A95C                 assume cs:_rdata$r
.rdata$r:0000A95C                 ;org 0A95Ch
.rdata$r:0000A95C ; COMDAT (pick any)
.rdata$r:0000A95C                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000A95C ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A95C ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000A95C                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000A95C                                         ; .rdata$r:0000AA70o ...
.rdata$r:0000A95C                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000A960                 db    0
.rdata$r:0000A961                 db    0
.rdata$r:0000A962                 db    0
.rdata$r:0000A963                 db    0
.rdata$r:0000A964                 db    0
.rdata$r:0000A965                 db    0
.rdata$r:0000A966                 db    0
.rdata$r:0000A967                 db    0
.rdata$r:0000A968                 db 0FFh
.rdata$r:0000A969                 db 0FFh
.rdata$r:0000A96A                 db 0FFh
.rdata$r:0000A96B                 db 0FFh
.rdata$r:0000A96C                 db    0
.rdata$r:0000A96D                 db    0
.rdata$r:0000A96E                 db    0
.rdata$r:0000A96F                 db    0
.rdata$r:0000A970                 db  40h ; @
.rdata$r:0000A971                 db    0
.rdata$r:0000A972                 db    0
.rdata$r:0000A973                 db    0
.rdata$r:0000A974                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A974 _rdata$r        ends
.rdata$r:0000A974
.rdata$r:0000A978 ; ===========================================================================
.rdata$r:0000A978
.rdata$r:0000A978 ; Segment type: Pure data
.rdata$r:0000A978 ; Segment permissions: Read
.rdata$r:0000A978 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A978                 assume cs:_rdata$r
.rdata$r:0000A978                 ;org 0A978h
.rdata$r:0000A978 ; COMDAT (pick any)
.rdata$r:0000A978                 public ??_R4_System_error@std@@6B@
.rdata$r:0000A978 ; const std::_System_error::`RTTI Complete Object Locator'
.rdata$r:0000A978 ??_R4_System_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000A184o
.rdata$r:0000A979                 db    0
.rdata$r:0000A97A                 db    0
.rdata$r:0000A97B                 db    0
.rdata$r:0000A97C                 db    0
.rdata$r:0000A97D                 db    0
.rdata$r:0000A97E                 db    0
.rdata$r:0000A97F                 db    0
.rdata$r:0000A980                 db    0
.rdata$r:0000A981                 db    0
.rdata$r:0000A982                 db    0
.rdata$r:0000A983                 db    0
.rdata$r:0000A984                 dd offset ??_R0?AV_System_error@std@@@8 ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000A988                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A988 _rdata$r        ends
.rdata$r:0000A988
.rdata$r:0000A98C ; ===========================================================================
.rdata$r:0000A98C
.rdata$r:0000A98C ; Segment type: Pure data
.rdata$r:0000A98C ; Segment permissions: Read
.rdata$r:0000A98C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A98C                 assume cs:_rdata$r
.rdata$r:0000A98C                 ;org 0A98Ch
.rdata$r:0000A98C ; COMDAT (pick any)
.rdata$r:0000A98C                 public ??_R3_System_error@std@@8
.rdata$r:0000A98C ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A98C ??_R3_System_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000A988o
.rdata$r:0000A98C                                         ; .rdata$r:0000A9C4o
.rdata$r:0000A98D                 db    0
.rdata$r:0000A98E                 db    0
.rdata$r:0000A98F                 db    0
.rdata$r:0000A990                 db    0
.rdata$r:0000A991                 db    0
.rdata$r:0000A992                 db    0
.rdata$r:0000A993                 db    0
.rdata$r:0000A994                 db    3
.rdata$r:0000A995                 db    0
.rdata$r:0000A996                 db    0
.rdata$r:0000A997                 db    0
.rdata$r:0000A998                 dd offset ??_R2_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000A998 _rdata$r        ends
.rdata$r:0000A998
.rdata$r:0000A99C ; ===========================================================================
.rdata$r:0000A99C
.rdata$r:0000A99C ; Segment type: Pure data
.rdata$r:0000A99C ; Segment permissions: Read
.rdata$r:0000A99C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A99C                 assume cs:_rdata$r
.rdata$r:0000A99C                 ;org 0A99Ch
.rdata$r:0000A99C ; COMDAT (pick any)
.rdata$r:0000A99C                 public ??_R2_System_error@std@@8
.rdata$r:0000A99C ; std::_System_error::`RTTI Base Class Array'
.rdata$r:0000A99C ??_R2_System_error@std@@8 dd offset ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000A99C                                         ; DATA XREF: .rdata$r:0000A998o
.rdata$r:0000A99C                                         ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9A0                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9A4                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9A8                 db    0
.rdata$r:0000A9A9                 align 4
.rdata$r:0000A9A9 _rdata$r        ends
.rdata$r:0000A9A9
.rdata$r:0000A9AC ; ===========================================================================
.rdata$r:0000A9AC
.rdata$r:0000A9AC ; Segment type: Pure data
.rdata$r:0000A9AC ; Segment permissions: Read
.rdata$r:0000A9AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9AC                 assume cs:_rdata$r
.rdata$r:0000A9AC                 ;org 0A9ACh
.rdata$r:0000A9AC ; COMDAT (pick any)
.rdata$r:0000A9AC                 public ??_R1A@?0A@EA@_System_error@std@@8
.rdata$r:0000A9AC ; std::_System_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000A9AC ??_R1A@?0A@EA@_System_error@std@@8 dd offset ??_R0?AV_System_error@std@@@8
.rdata$r:0000A9AC                                         ; DATA XREF: .rdata$r:std::_System_error::`RTTI Base Class Array'o
.rdata$r:0000A9AC                                         ; .rdata$r:0000A9F0o ...
.rdata$r:0000A9AC                                         ; std::_System_error `RTTI Type Descriptor'
.rdata$r:0000A9B0                 db    2
.rdata$r:0000A9B1                 db    0
.rdata$r:0000A9B2                 db    0
.rdata$r:0000A9B3                 db    0
.rdata$r:0000A9B4                 db    0
.rdata$r:0000A9B5                 db    0
.rdata$r:0000A9B6                 db    0
.rdata$r:0000A9B7                 db    0
.rdata$r:0000A9B8                 db 0FFh
.rdata$r:0000A9B9                 db 0FFh
.rdata$r:0000A9BA                 db 0FFh
.rdata$r:0000A9BB                 db 0FFh
.rdata$r:0000A9BC                 db    0
.rdata$r:0000A9BD                 db    0
.rdata$r:0000A9BE                 db    0
.rdata$r:0000A9BF                 db    0
.rdata$r:0000A9C0                 db  40h ; @
.rdata$r:0000A9C1                 db    0
.rdata$r:0000A9C2                 db    0
.rdata$r:0000A9C3                 db    0
.rdata$r:0000A9C4                 dd offset ??_R3_System_error@std@@8 ; std::_System_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A9C4 _rdata$r        ends
.rdata$r:0000A9C4
.rdata$r:0000A9C8 ; ===========================================================================
.rdata$r:0000A9C8
.rdata$r:0000A9C8 ; Segment type: Pure data
.rdata$r:0000A9C8 ; Segment permissions: Read
.rdata$r:0000A9C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9C8                 assume cs:_rdata$r
.rdata$r:0000A9C8                 ;org 0A9C8h
.rdata$r:0000A9C8 ; COMDAT (pick any)
.rdata$r:0000A9C8                 public ??_R4system_error@std@@6B@
.rdata$r:0000A9C8 ; const std::system_error::`RTTI Complete Object Locator'
.rdata$r:0000A9C8 ??_R4system_error@std@@6B@ db    0      ; DATA XREF: .rdata:0000A194o
.rdata$r:0000A9C9                 db    0
.rdata$r:0000A9CA                 db    0
.rdata$r:0000A9CB                 db    0
.rdata$r:0000A9CC                 db    0
.rdata$r:0000A9CD                 db    0
.rdata$r:0000A9CE                 db    0
.rdata$r:0000A9CF                 db    0
.rdata$r:0000A9D0                 db    0
.rdata$r:0000A9D1                 db    0
.rdata$r:0000A9D2                 db    0
.rdata$r:0000A9D3                 db    0
.rdata$r:0000A9D4                 dd offset ??_R0?AVsystem_error@std@@@8 ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000A9D8                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A9D8 _rdata$r        ends
.rdata$r:0000A9D8
.rdata$r:0000A9DC ; ===========================================================================
.rdata$r:0000A9DC
.rdata$r:0000A9DC ; Segment type: Pure data
.rdata$r:0000A9DC ; Segment permissions: Read
.rdata$r:0000A9DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9DC                 assume cs:_rdata$r
.rdata$r:0000A9DC                 ;org 0A9DCh
.rdata$r:0000A9DC ; COMDAT (pick any)
.rdata$r:0000A9DC                 public ??_R3system_error@std@@8
.rdata$r:0000A9DC ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000A9DC ??_R3system_error@std@@8 db    0        ; DATA XREF: .rdata$r:0000A9D8o
.rdata$r:0000A9DC                                         ; .rdata$r:0000AA18o
.rdata$r:0000A9DD                 db    0
.rdata$r:0000A9DE                 db    0
.rdata$r:0000A9DF                 db    0
.rdata$r:0000A9E0                 db    0
.rdata$r:0000A9E1                 db    0
.rdata$r:0000A9E2                 db    0
.rdata$r:0000A9E3                 db    0
.rdata$r:0000A9E4                 db    4
.rdata$r:0000A9E5                 db    0
.rdata$r:0000A9E6                 db    0
.rdata$r:0000A9E7                 db    0
.rdata$r:0000A9E8                 dd offset ??_R2system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000A9E8 _rdata$r        ends
.rdata$r:0000A9E8
.rdata$r:0000A9EC ; ===========================================================================
.rdata$r:0000A9EC
.rdata$r:0000A9EC ; Segment type: Pure data
.rdata$r:0000A9EC ; Segment permissions: Read
.rdata$r:0000A9EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000A9EC                 assume cs:_rdata$r
.rdata$r:0000A9EC                 ;org 0A9ECh
.rdata$r:0000A9EC ; COMDAT (pick any)
.rdata$r:0000A9EC                 public ??_R2system_error@std@@8
.rdata$r:0000A9EC ; std::system_error::`RTTI Base Class Array'
.rdata$r:0000A9EC ??_R2system_error@std@@8 dd offset ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000A9EC                                         ; DATA XREF: .rdata$r:0000A9E8o
.rdata$r:0000A9EC                                         ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9F0                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9F4                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9F8                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000A9FC                 db    0
.rdata$r:0000A9FD                 align 10h
.rdata$r:0000A9FD _rdata$r        ends
.rdata$r:0000A9FD
.rdata$r:0000AA00 ; ===========================================================================
.rdata$r:0000AA00
.rdata$r:0000AA00 ; Segment type: Pure data
.rdata$r:0000AA00 ; Segment permissions: Read
.rdata$r:0000AA00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA00                 assume cs:_rdata$r
.rdata$r:0000AA00                 ;org 0AA00h
.rdata$r:0000AA00 ; COMDAT (pick any)
.rdata$r:0000AA00                 public ??_R1A@?0A@EA@system_error@std@@8
.rdata$r:0000AA00 ; std::system_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AA00 ??_R1A@?0A@EA@system_error@std@@8 dd offset ??_R0?AVsystem_error@std@@@8
.rdata$r:0000AA00                                         ; DATA XREF: .rdata$r:std::system_error::`RTTI Base Class Array'o
.rdata$r:0000AA00                                         ; .rdata$r:0000ABB4o
.rdata$r:0000AA00                                         ; std::system_error `RTTI Type Descriptor'
.rdata$r:0000AA04                 db    3
.rdata$r:0000AA05                 db    0
.rdata$r:0000AA06                 db    0
.rdata$r:0000AA07                 db    0
.rdata$r:0000AA08                 db    0
.rdata$r:0000AA09                 db    0
.rdata$r:0000AA0A                 db    0
.rdata$r:0000AA0B                 db    0
.rdata$r:0000AA0C                 db 0FFh
.rdata$r:0000AA0D                 db 0FFh
.rdata$r:0000AA0E                 db 0FFh
.rdata$r:0000AA0F                 db 0FFh
.rdata$r:0000AA10                 db    0
.rdata$r:0000AA11                 db    0
.rdata$r:0000AA12                 db    0
.rdata$r:0000AA13                 db    0
.rdata$r:0000AA14                 db  40h ; @
.rdata$r:0000AA15                 db    0
.rdata$r:0000AA16                 db    0
.rdata$r:0000AA17                 db    0
.rdata$r:0000AA18                 dd offset ??_R3system_error@std@@8 ; std::system_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA18 _rdata$r        ends
.rdata$r:0000AA18
.rdata$r:0000AA1C ; ===========================================================================
.rdata$r:0000AA1C
.rdata$r:0000AA1C ; Segment type: Pure data
.rdata$r:0000AA1C ; Segment permissions: Read
.rdata$r:0000AA1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA1C                 assume cs:_rdata$r
.rdata$r:0000AA1C                 ;org 0AA1Ch
.rdata$r:0000AA1C ; COMDAT (pick any)
.rdata$r:0000AA1C                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000AA1C ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000AA1C ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000AA1C                                         ; DATA XREF: .rdata:0000A1A0o
.rdata$r:0000AA1D                 db    0
.rdata$r:0000AA1E                 db    0
.rdata$r:0000AA1F                 db    0
.rdata$r:0000AA20                 db    0
.rdata$r:0000AA21                 db    0
.rdata$r:0000AA22                 db    0
.rdata$r:0000AA23                 db    0
.rdata$r:0000AA24                 db    0
.rdata$r:0000AA25                 db    0
.rdata$r:0000AA26                 db    0
.rdata$r:0000AA27                 db    0
.rdata$r:0000AA28                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000AA2C                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA2C _rdata$r        ends
.rdata$r:0000AA2C
.data$r:0000AA30 ; ===========================================================================
.data$r:0000AA30
.data$r:0000AA30 ; Segment type: Pure data
.data$r:0000AA30 ; Segment permissions: Read/Write
.data$r:0000AA30 _data$r         segment dword public 'DATA' use32
.data$r:0000AA30                 assume cs:_data$r
.data$r:0000AA30                 ;org 0AA30h
.data$r:0000AA30 ; COMDAT (pick any)
.data$r:0000AA30                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000AA30 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000AA30 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AA30                                         ; DATA XREF: .rdata$r:0000AA28o
.data$r:0000AA30                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AA30                                         ; const type_info::`vftable'
.data$r:0000AA34                 align 8
.data$r:0000AA38 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:0000AA5A                 align 4
.data$r:0000AA5A _data$r         ends
.data$r:0000AA5A
.rdata$r:0000AA5C ; ===========================================================================
.rdata$r:0000AA5C
.rdata$r:0000AA5C ; Segment type: Pure data
.rdata$r:0000AA5C ; Segment permissions: Read
.rdata$r:0000AA5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA5C                 assume cs:_rdata$r
.rdata$r:0000AA5C                 ;org 0AA5Ch
.rdata$r:0000AA5C ; COMDAT (pick any)
.rdata$r:0000AA5C                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000AA5C ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA5C ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000AA5C                                         ; DATA XREF: .rdata$r:0000AA2Co
.rdata$r:0000AA5C                                         ; .rdata$r:0000AA90o
.rdata$r:0000AA5D                 db    0
.rdata$r:0000AA5E                 db    0
.rdata$r:0000AA5F                 db    0
.rdata$r:0000AA60                 db    0
.rdata$r:0000AA61                 db    0
.rdata$r:0000AA62                 db    0
.rdata$r:0000AA63                 db    0
.rdata$r:0000AA64                 db    2
.rdata$r:0000AA65                 db    0
.rdata$r:0000AA66                 db    0
.rdata$r:0000AA67                 db    0
.rdata$r:0000AA68                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000AA68 _rdata$r        ends
.rdata$r:0000AA68
.rdata$r:0000AA6C ; ===========================================================================
.rdata$r:0000AA6C
.rdata$r:0000AA6C ; Segment type: Pure data
.rdata$r:0000AA6C ; Segment permissions: Read
.rdata$r:0000AA6C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA6C                 assume cs:_rdata$r
.rdata$r:0000AA6C                 ;org 0AA6Ch
.rdata$r:0000AA6C ; COMDAT (pick any)
.rdata$r:0000AA6C                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000AA6C ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000AA6C ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000AA6C                                         ; DATA XREF: .rdata$r:0000AA68o
.rdata$r:0000AA6C                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AA70                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AA74                 db    0
.rdata$r:0000AA75                 align 4
.rdata$r:0000AA75 _rdata$r        ends
.rdata$r:0000AA75
.rdata$r:0000AA78 ; ===========================================================================
.rdata$r:0000AA78
.rdata$r:0000AA78 ; Segment type: Pure data
.rdata$r:0000AA78 ; Segment permissions: Read
.rdata$r:0000AA78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA78                 assume cs:_rdata$r
.rdata$r:0000AA78                 ;org 0AA78h
.rdata$r:0000AA78 ; COMDAT (pick any)
.rdata$r:0000AA78                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000AA78 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AA78 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000AA78                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000AA78                                         ; .rdata$r:0000AAE8o ...
.rdata$r:0000AA78                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000AA7C                 db    1
.rdata$r:0000AA7D                 db    0
.rdata$r:0000AA7E                 db    0
.rdata$r:0000AA7F                 db    0
.rdata$r:0000AA80                 db    0
.rdata$r:0000AA81                 db    0
.rdata$r:0000AA82                 db    0
.rdata$r:0000AA83                 db    0
.rdata$r:0000AA84                 db 0FFh
.rdata$r:0000AA85                 db 0FFh
.rdata$r:0000AA86                 db 0FFh
.rdata$r:0000AA87                 db 0FFh
.rdata$r:0000AA88                 db    0
.rdata$r:0000AA89                 db    0
.rdata$r:0000AA8A                 db    0
.rdata$r:0000AA8B                 db    0
.rdata$r:0000AA8C                 db  40h ; @
.rdata$r:0000AA8D                 db    0
.rdata$r:0000AA8E                 db    0
.rdata$r:0000AA8F                 db    0
.rdata$r:0000AA90                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AA90 _rdata$r        ends
.rdata$r:0000AA90
.rdata$r:0000AA94 ; ===========================================================================
.rdata$r:0000AA94
.rdata$r:0000AA94 ; Segment type: Pure data
.rdata$r:0000AA94 ; Segment permissions: Read
.rdata$r:0000AA94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AA94                 assume cs:_rdata$r
.rdata$r:0000AA94                 ;org 0AA94h
.rdata$r:0000AA94 ; COMDAT (pick any)
.rdata$r:0000AA94                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000AA94 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000AA94 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000AA94                                         ; DATA XREF: .rdata:0000A1D4o
.rdata$r:0000AA95                 db    0
.rdata$r:0000AA96                 db    0
.rdata$r:0000AA97                 db    0
.rdata$r:0000AA98                 db    0
.rdata$r:0000AA99                 db    0
.rdata$r:0000AA9A                 db    0
.rdata$r:0000AA9B                 db    0
.rdata$r:0000AA9C                 db    0
.rdata$r:0000AA9D                 db    0
.rdata$r:0000AA9E                 db    0
.rdata$r:0000AA9F                 db    0
.rdata$r:0000AAA0                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000AAA4                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AAA4 _rdata$r        ends
.rdata$r:0000AAA4
.data$r:0000AAA8 ; ===========================================================================
.data$r:0000AAA8
.data$r:0000AAA8 ; Segment type: Pure data
.data$r:0000AAA8 ; Segment permissions: Read/Write
.data$r:0000AAA8 _data$r         segment dword public 'DATA' use32
.data$r:0000AAA8                 assume cs:_data$r
.data$r:0000AAA8                 ;org 0AAA8h
.data$r:0000AAA8 ; COMDAT (pick any)
.data$r:0000AAA8                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000AAA8 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000AAA8 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AAA8                                         ; DATA XREF: .rdata$r:0000AAA0o
.data$r:0000AAA8                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AAA8                                         ; const type_info::`vftable'
.data$r:0000AAAC                 align 10h
.data$r:0000AAB0 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:0000AAD3                 align 4
.data$r:0000AAD3 _data$r         ends
.data$r:0000AAD3
.rdata$r:0000AAD4 ; ===========================================================================
.rdata$r:0000AAD4
.rdata$r:0000AAD4 ; Segment type: Pure data
.rdata$r:0000AAD4 ; Segment permissions: Read
.rdata$r:0000AAD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AAD4                 assume cs:_rdata$r
.rdata$r:0000AAD4                 ;org 0AAD4h
.rdata$r:0000AAD4 ; COMDAT (pick any)
.rdata$r:0000AAD4                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000AAD4 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AAD4 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000AAD4                                         ; DATA XREF: .rdata$r:0000AAA4o
.rdata$r:0000AAD4                                         ; .rdata$r:0000AB0Co
.rdata$r:0000AAD5                 db    0
.rdata$r:0000AAD6                 db    0
.rdata$r:0000AAD7                 db    0
.rdata$r:0000AAD8                 db    0
.rdata$r:0000AAD9                 db    0
.rdata$r:0000AADA                 db    0
.rdata$r:0000AADB                 db    0
.rdata$r:0000AADC                 db    3
.rdata$r:0000AADD                 db    0
.rdata$r:0000AADE                 db    0
.rdata$r:0000AADF                 db    0
.rdata$r:0000AAE0                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000AAE0 _rdata$r        ends
.rdata$r:0000AAE0
.rdata$r:0000AAE4 ; ===========================================================================
.rdata$r:0000AAE4
.rdata$r:0000AAE4 ; Segment type: Pure data
.rdata$r:0000AAE4 ; Segment permissions: Read
.rdata$r:0000AAE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AAE4                 assume cs:_rdata$r
.rdata$r:0000AAE4                 ;org 0AAE4h
.rdata$r:0000AAE4 ; COMDAT (pick any)
.rdata$r:0000AAE4                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000AAE4 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000AAE4 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000AAE4                                         ; DATA XREF: .rdata$r:0000AAE0o
.rdata$r:0000AAE4                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AAE8                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AAEC                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AAF0                 db    0
.rdata$r:0000AAF1                 align 4
.rdata$r:0000AAF1 _rdata$r        ends
.rdata$r:0000AAF1
.rdata$r:0000AAF4 ; ===========================================================================
.rdata$r:0000AAF4
.rdata$r:0000AAF4 ; Segment type: Pure data
.rdata$r:0000AAF4 ; Segment permissions: Read
.rdata$r:0000AAF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AAF4                 assume cs:_rdata$r
.rdata$r:0000AAF4                 ;org 0AAF4h
.rdata$r:0000AAF4 ; COMDAT (pick any)
.rdata$r:0000AAF4                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000AAF4 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AAF4 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000AAF4                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000AAF4                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000AAF8                 db    2
.rdata$r:0000AAF9                 db    0
.rdata$r:0000AAFA                 db    0
.rdata$r:0000AAFB                 db    0
.rdata$r:0000AAFC                 db    0
.rdata$r:0000AAFD                 db    0
.rdata$r:0000AAFE                 db    0
.rdata$r:0000AAFF                 db    0
.rdata$r:0000AB00                 db 0FFh
.rdata$r:0000AB01                 db 0FFh
.rdata$r:0000AB02                 db 0FFh
.rdata$r:0000AB03                 db 0FFh
.rdata$r:0000AB04                 db    0
.rdata$r:0000AB05                 db    0
.rdata$r:0000AB06                 db    0
.rdata$r:0000AB07                 db    0
.rdata$r:0000AB08                 db  40h ; @
.rdata$r:0000AB09                 db    0
.rdata$r:0000AB0A                 db    0
.rdata$r:0000AB0B                 db    0
.rdata$r:0000AB0C                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AB0C _rdata$r        ends
.rdata$r:0000AB0C
.rdata$r:0000AB10 ; ===========================================================================
.rdata$r:0000AB10
.rdata$r:0000AB10 ; Segment type: Pure data
.rdata$r:0000AB10 ; Segment permissions: Read
.rdata$r:0000AB10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AB10                 assume cs:_rdata$r
.rdata$r:0000AB10                 ;org 0AB10h
.rdata$r:0000AB10 ; COMDAT (pick any)
.rdata$r:0000AB10                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000AB10 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000AB10 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000A214o
.rdata$r:0000AB11                 db    0
.rdata$r:0000AB12                 db    0
.rdata$r:0000AB13                 db    0
.rdata$r:0000AB14                 db    0
.rdata$r:0000AB15                 db    0
.rdata$r:0000AB16                 db    0
.rdata$r:0000AB17                 db    0
.rdata$r:0000AB18                 db    0
.rdata$r:0000AB19                 db    0
.rdata$r:0000AB1A                 db    0
.rdata$r:0000AB1B                 db    0
.rdata$r:0000AB1C                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000AB20                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AB20 _rdata$r        ends
.rdata$r:0000AB20
.data$r:0000AB24 ; ===========================================================================
.data$r:0000AB24
.data$r:0000AB24 ; Segment type: Pure data
.data$r:0000AB24 ; Segment permissions: Read/Write
.data$r:0000AB24 _data$r         segment dword public 'DATA' use32
.data$r:0000AB24                 assume cs:_data$r
.data$r:0000AB24                 ;org 0AB24h
.data$r:0000AB24 ; COMDAT (pick any)
.data$r:0000AB24                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000AB24 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000AB24 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AB24                                         ; DATA XREF: .rdata$r:0000AB1Co
.data$r:0000AB24                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AB24                                         ; const type_info::`vftable'
.data$r:0000AB28                 db    0
.data$r:0000AB29                 db    0
.data$r:0000AB2A                 db    0
.data$r:0000AB2B                 db    0
.data$r:0000AB2C                 db  2Eh ; .
.data$r:0000AB2D                 db  3Fh ; ?
.data$r:0000AB2E                 db  41h ; A
.data$r:0000AB2F                 db  56h ; V
.data$r:0000AB30                 db  5Fh ; _
.data$r:0000AB31                 db  53h ; S
.data$r:0000AB32                 db  79h ; y
.data$r:0000AB33                 db  73h ; s
.data$r:0000AB34                 db  74h ; t
.data$r:0000AB35                 db  65h ; e
.data$r:0000AB36                 db  6Dh ; m
.data$r:0000AB37                 db  5Fh ; _
.data$r:0000AB38                 db  65h ; e
.data$r:0000AB39                 db  72h ; r
.data$r:0000AB3A                 db  72h ; r
.data$r:0000AB3B                 db  6Fh ; o
.data$r:0000AB3C                 db  72h ; r
.data$r:0000AB3D                 db  5Fh ; _
.data$r:0000AB3E                 db  63h ; c
.data$r:0000AB3F                 db  61h ; a
.data$r:0000AB40                 db  74h ; t
.data$r:0000AB41                 db  65h ; e
.data$r:0000AB42                 db  67h ; g
.data$r:0000AB43                 db  6Fh ; o
.data$r:0000AB44                 db  72h ; r
.data$r:0000AB45                 db  79h ; y
.data$r:0000AB46                 db  40h ; @
.data$r:0000AB47                 db  73h ; s
.data$r:0000AB48                 db  74h ; t
.data$r:0000AB49                 db  64h ; d
.data$r:0000AB4A                 db  40h ; @
.data$r:0000AB4B                 db  40h ; @
.data$r:0000AB4C                 db    0
.data$r:0000AB4D                 align 10h
.data$r:0000AB4D _data$r         ends
.data$r:0000AB4D
.rdata$r:0000AB50 ; ===========================================================================
.rdata$r:0000AB50
.rdata$r:0000AB50 ; Segment type: Pure data
.rdata$r:0000AB50 ; Segment permissions: Read
.rdata$r:0000AB50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AB50                 assume cs:_rdata$r
.rdata$r:0000AB50                 ;org 0AB50h
.rdata$r:0000AB50 ; COMDAT (pick any)
.rdata$r:0000AB50                 public ??_R3_System_error_category@std@@8
.rdata$r:0000AB50 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AB50 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000AB20o
.rdata$r:0000AB50                                         ; .rdata$r:0000AB88o
.rdata$r:0000AB51                 db    0
.rdata$r:0000AB52                 db    0
.rdata$r:0000AB53                 db    0
.rdata$r:0000AB54                 db    0
.rdata$r:0000AB55                 db    0
.rdata$r:0000AB56                 db    0
.rdata$r:0000AB57                 db    0
.rdata$r:0000AB58                 db    3
.rdata$r:0000AB59                 db    0
.rdata$r:0000AB5A                 db    0
.rdata$r:0000AB5B                 db    0
.rdata$r:0000AB5C                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000AB5C _rdata$r        ends
.rdata$r:0000AB5C
.rdata$r:0000AB60 ; ===========================================================================
.rdata$r:0000AB60
.rdata$r:0000AB60 ; Segment type: Pure data
.rdata$r:0000AB60 ; Segment permissions: Read
.rdata$r:0000AB60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AB60                 assume cs:_rdata$r
.rdata$r:0000AB60                 ;org 0AB60h
.rdata$r:0000AB60 ; COMDAT (pick any)
.rdata$r:0000AB60                 public ??_R2_System_error_category@std@@8
.rdata$r:0000AB60 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000AB60 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000AB60                                         ; DATA XREF: .rdata$r:0000AB5Co
.rdata$r:0000AB60                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AB64                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AB68                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AB6C                 db    0
.rdata$r:0000AB6D                 align 10h
.rdata$r:0000AB6D _rdata$r        ends
.rdata$r:0000AB6D
.rdata$r:0000AB70 ; ===========================================================================
.rdata$r:0000AB70
.rdata$r:0000AB70 ; Segment type: Pure data
.rdata$r:0000AB70 ; Segment permissions: Read
.rdata$r:0000AB70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AB70                 assume cs:_rdata$r
.rdata$r:0000AB70                 ;org 0AB70h
.rdata$r:0000AB70 ; COMDAT (pick any)
.rdata$r:0000AB70                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000AB70 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AB70 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000AB70                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000AB70                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000AB74                 db    2
.rdata$r:0000AB75                 db    0
.rdata$r:0000AB76                 db    0
.rdata$r:0000AB77                 db    0
.rdata$r:0000AB78                 db    0
.rdata$r:0000AB79                 db    0
.rdata$r:0000AB7A                 db    0
.rdata$r:0000AB7B                 db    0
.rdata$r:0000AB7C                 db 0FFh
.rdata$r:0000AB7D                 db 0FFh
.rdata$r:0000AB7E                 db 0FFh
.rdata$r:0000AB7F                 db 0FFh
.rdata$r:0000AB80                 db    0
.rdata$r:0000AB81                 db    0
.rdata$r:0000AB82                 db    0
.rdata$r:0000AB83                 db    0
.rdata$r:0000AB84                 db  40h ; @
.rdata$r:0000AB85                 db    0
.rdata$r:0000AB86                 db    0
.rdata$r:0000AB87                 db    0
.rdata$r:0000AB88                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AB88 _rdata$r        ends
.rdata$r:0000AB88
.rdata$r:0000AB8C ; ===========================================================================
.rdata$r:0000AB8C
.rdata$r:0000AB8C ; Segment type: Pure data
.rdata$r:0000AB8C ; Segment permissions: Read
.rdata$r:0000AB8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AB8C                 assume cs:_rdata$r
.rdata$r:0000AB8C                 ;org 0AB8Ch
.rdata$r:0000AB8C ; COMDAT (pick any)
.rdata$r:0000AB8C                 public ??_R4failure@ios_base@std@@6B@
.rdata$r:0000AB8C ; const std::ios_base::failure::`RTTI Complete Object Locator'
.rdata$r:0000AB8C ??_R4failure@ios_base@std@@6B@ db    0  ; DATA XREF: .rdata:0000A244o
.rdata$r:0000AB8D                 db    0
.rdata$r:0000AB8E                 db    0
.rdata$r:0000AB8F                 db    0
.rdata$r:0000AB90                 db    0
.rdata$r:0000AB91                 db    0
.rdata$r:0000AB92                 db    0
.rdata$r:0000AB93                 db    0
.rdata$r:0000AB94                 db    0
.rdata$r:0000AB95                 db    0
.rdata$r:0000AB96                 db    0
.rdata$r:0000AB97                 db    0
.rdata$r:0000AB98                 dd offset ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000AB9C                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AB9C _rdata$r        ends
.rdata$r:0000AB9C
.rdata$r:0000ABA0 ; ===========================================================================
.rdata$r:0000ABA0
.rdata$r:0000ABA0 ; Segment type: Pure data
.rdata$r:0000ABA0 ; Segment permissions: Read
.rdata$r:0000ABA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ABA0                 assume cs:_rdata$r
.rdata$r:0000ABA0                 ;org 0ABA0h
.rdata$r:0000ABA0 ; COMDAT (pick any)
.rdata$r:0000ABA0                 public ??_R3failure@ios_base@std@@8
.rdata$r:0000ABA0 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ABA0 ??_R3failure@ios_base@std@@8 db    0    ; DATA XREF: .rdata$r:0000AB9Co
.rdata$r:0000ABA0                                         ; .rdata$r:0000ABE0o
.rdata$r:0000ABA1                 db    0
.rdata$r:0000ABA2                 db    0
.rdata$r:0000ABA3                 db    0
.rdata$r:0000ABA4                 db    0
.rdata$r:0000ABA5                 db    0
.rdata$r:0000ABA6                 db    0
.rdata$r:0000ABA7                 db    0
.rdata$r:0000ABA8                 db    5
.rdata$r:0000ABA9                 db    0
.rdata$r:0000ABAA                 db    0
.rdata$r:0000ABAB                 db    0
.rdata$r:0000ABAC                 dd offset ??_R2failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000ABAC _rdata$r        ends
.rdata$r:0000ABAC
.rdata$r:0000ABB0 ; ===========================================================================
.rdata$r:0000ABB0
.rdata$r:0000ABB0 ; Segment type: Pure data
.rdata$r:0000ABB0 ; Segment permissions: Read
.rdata$r:0000ABB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ABB0                 assume cs:_rdata$r
.rdata$r:0000ABB0                 ;org 0ABB0h
.rdata$r:0000ABB0 ; COMDAT (pick any)
.rdata$r:0000ABB0                 public ??_R2failure@ios_base@std@@8
.rdata$r:0000ABB0 ; std::ios_base::failure::`RTTI Base Class Array'
.rdata$r:0000ABB0 ??_R2failure@ios_base@std@@8 dd offset ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000ABB0                                         ; DATA XREF: .rdata$r:0000ABACo
.rdata$r:0000ABB0                                         ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ABB4                 dd offset ??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ABB8                 dd offset ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ABBC                 dd offset ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ABC0                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ABC4                 db    0
.rdata$r:0000ABC5                 align 4
.rdata$r:0000ABC5 _rdata$r        ends
.rdata$r:0000ABC5
.rdata$r:0000ABC8 ; ===========================================================================
.rdata$r:0000ABC8
.rdata$r:0000ABC8 ; Segment type: Pure data
.rdata$r:0000ABC8 ; Segment permissions: Read
.rdata$r:0000ABC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ABC8                 assume cs:_rdata$r
.rdata$r:0000ABC8                 ;org 0ABC8h
.rdata$r:0000ABC8 ; COMDAT (pick any)
.rdata$r:0000ABC8                 public ??_R1A@?0A@EA@failure@ios_base@std@@8
.rdata$r:0000ABC8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ABC8 ??_R1A@?0A@EA@failure@ios_base@std@@8 dd offset ??_R0?AVfailure@ios_base@std@@@8
.rdata$r:0000ABC8                                         ; DATA XREF: .rdata$r:std::ios_base::failure::`RTTI Base Class Array'o
.rdata$r:0000ABC8                                         ; std::ios_base::failure `RTTI Type Descriptor'
.rdata$r:0000ABCC                 db    4
.rdata$r:0000ABCD                 db    0
.rdata$r:0000ABCE                 db    0
.rdata$r:0000ABCF                 db    0
.rdata$r:0000ABD0                 db    0
.rdata$r:0000ABD1                 db    0
.rdata$r:0000ABD2                 db    0
.rdata$r:0000ABD3                 db    0
.rdata$r:0000ABD4                 db 0FFh
.rdata$r:0000ABD5                 db 0FFh
.rdata$r:0000ABD6                 db 0FFh
.rdata$r:0000ABD7                 db 0FFh
.rdata$r:0000ABD8                 db    0
.rdata$r:0000ABD9                 db    0
.rdata$r:0000ABDA                 db    0
.rdata$r:0000ABDB                 db    0
.rdata$r:0000ABDC                 db  40h ; @
.rdata$r:0000ABDD                 db    0
.rdata$r:0000ABDE                 db    0
.rdata$r:0000ABDF                 db    0
.rdata$r:0000ABE0                 dd offset ??_R3failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ABE0 _rdata$r        ends
.rdata$r:0000ABE0
.rdata$r:0000ABE4 ; ===========================================================================
.rdata$r:0000ABE4
.rdata$r:0000ABE4 ; Segment type: Pure data
.rdata$r:0000ABE4 ; Segment permissions: Read
.rdata$r:0000ABE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ABE4                 assume cs:_rdata$r
.rdata$r:0000ABE4                 ;org 0ABE4h
.rdata$r:0000ABE4 ; COMDAT (pick any)
.rdata$r:0000ABE4                 public ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000ABE4 ; TiXmlNode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ABE4 ??_R1A@?0A@EA@TiXmlNode@@8 dd offset ??_R0?AVTiXmlNode@@@8
.rdata$r:0000ABE4                                         ; DATA XREF: .rdata$r:TiXmlNode::`RTTI Base Class Array'o
.rdata$r:0000ABE4                                         ; .rdata$r:0000ACC4o ...
.rdata$r:0000ABE4                                         ; TiXmlNode `RTTI Type Descriptor'
.rdata$r:0000ABE8                 db    1
.rdata$r:0000ABE9                 db    0
.rdata$r:0000ABEA                 db    0
.rdata$r:0000ABEB                 db    0
.rdata$r:0000ABEC                 db    0
.rdata$r:0000ABED                 db    0
.rdata$r:0000ABEE                 db    0
.rdata$r:0000ABEF                 db    0
.rdata$r:0000ABF0                 db 0FFh
.rdata$r:0000ABF1                 db 0FFh
.rdata$r:0000ABF2                 db 0FFh
.rdata$r:0000ABF3                 db 0FFh
.rdata$r:0000ABF4                 db    0
.rdata$r:0000ABF5                 db    0
.rdata$r:0000ABF6                 db    0
.rdata$r:0000ABF7                 db    0
.rdata$r:0000ABF8                 db  40h ; @
.rdata$r:0000ABF9                 db    0
.rdata$r:0000ABFA                 db    0
.rdata$r:0000ABFB                 db    0
.rdata$r:0000ABFC                 dd offset ??_R3TiXmlNode@@8 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ABFC _rdata$r        ends
.rdata$r:0000ABFC
.data$r:0000AC00 ; ===========================================================================
.data$r:0000AC00
.data$r:0000AC00 ; Segment type: Pure data
.data$r:0000AC00 ; Segment permissions: Read/Write
.data$r:0000AC00 _data$r         segment dword public 'DATA' use32
.data$r:0000AC00                 assume cs:_data$r
.data$r:0000AC00                 ;org 0AC00h
.data$r:0000AC00 ; COMDAT (pick any)
.data$r:0000AC00                 public ??_R0?AVTiXmlNode@@@8
.data$r:0000AC00 ; class TiXmlNode `RTTI Type Descriptor'
.data$r:0000AC00 ??_R0?AVTiXmlNode@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AC00                                         ; DATA XREF: .rdata$r:TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AC00                                         ; const type_info::`vftable'
.data$r:0000AC04                 align 8
.data$r:0000AC08 a_?avtixmlnode@ db '.?AVTiXmlNode@@',0
.data$r:0000AC08 _data$r         ends
.data$r:0000AC08
.rdata$r:0000AC18 ; ===========================================================================
.rdata$r:0000AC18
.rdata$r:0000AC18 ; Segment type: Pure data
.rdata$r:0000AC18 ; Segment permissions: Read
.rdata$r:0000AC18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC18                 assume cs:_rdata$r
.rdata$r:0000AC18                 ;org 0AC18h
.rdata$r:0000AC18 ; COMDAT (pick any)
.rdata$r:0000AC18                 public ??_R3TiXmlNode@@8
.rdata$r:0000AC18 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AC18 ??_R3TiXmlNode@@8 db    0               ; DATA XREF: .rdata$r:0000ABFCo
.rdata$r:0000AC19                 db    0
.rdata$r:0000AC1A                 db    0
.rdata$r:0000AC1B                 db    0
.rdata$r:0000AC1C                 db    0
.rdata$r:0000AC1D                 db    0
.rdata$r:0000AC1E                 db    0
.rdata$r:0000AC1F                 db    0
.rdata$r:0000AC20                 db    2
.rdata$r:0000AC21                 db    0
.rdata$r:0000AC22                 db    0
.rdata$r:0000AC23                 db    0
.rdata$r:0000AC24                 dd offset ??_R2TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000AC24 _rdata$r        ends
.rdata$r:0000AC24
.rdata$r:0000AC28 ; ===========================================================================
.rdata$r:0000AC28
.rdata$r:0000AC28 ; Segment type: Pure data
.rdata$r:0000AC28 ; Segment permissions: Read
.rdata$r:0000AC28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC28                 assume cs:_rdata$r
.rdata$r:0000AC28                 ;org 0AC28h
.rdata$r:0000AC28 ; COMDAT (pick any)
.rdata$r:0000AC28                 public ??_R2TiXmlNode@@8
.rdata$r:0000AC28 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000AC28 ??_R2TiXmlNode@@8 dd offset ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000AC28                                         ; DATA XREF: .rdata$r:0000AC24o
.rdata$r:0000AC28                                         ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AC2C                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AC30                 db    0
.rdata$r:0000AC31                 align 4
.rdata$r:0000AC31 _rdata$r        ends
.rdata$r:0000AC31
.rdata$r:0000AC34 ; ===========================================================================
.rdata$r:0000AC34
.rdata$r:0000AC34 ; Segment type: Pure data
.rdata$r:0000AC34 ; Segment permissions: Read
.rdata$r:0000AC34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC34                 assume cs:_rdata$r
.rdata$r:0000AC34                 ;org 0AC34h
.rdata$r:0000AC34 ; COMDAT (pick any)
.rdata$r:0000AC34                 public ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000AC34 ; TiXmlBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AC34 ??_R1A@?0A@EA@TiXmlBase@@8 dd offset ??_R0?AVTiXmlBase@@@8
.rdata$r:0000AC34                                         ; DATA XREF: .rdata$r:0000AC2Co
.rdata$r:0000AC34                                         ; .rdata$r:TiXmlBase::`RTTI Base Class Array'o ...
.rdata$r:0000AC34                                         ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:0000AC38                 align 10h
.rdata$r:0000AC40                 db 0FFh
.rdata$r:0000AC41                 db 0FFh
.rdata$r:0000AC42                 db 0FFh
.rdata$r:0000AC43                 db 0FFh
.rdata$r:0000AC44                 db    0
.rdata$r:0000AC45                 db    0
.rdata$r:0000AC46                 db    0
.rdata$r:0000AC47                 db    0
.rdata$r:0000AC48                 db  40h ; @
.rdata$r:0000AC49                 db    0
.rdata$r:0000AC4A                 db    0
.rdata$r:0000AC4B                 db    0
.rdata$r:0000AC4C                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AC4C _rdata$r        ends
.rdata$r:0000AC4C
.data$r:0000AC50 ; ===========================================================================
.data$r:0000AC50
.data$r:0000AC50 ; Segment type: Pure data
.data$r:0000AC50 ; Segment permissions: Read/Write
.data$r:0000AC50 _data$r         segment dword public 'DATA' use32
.data$r:0000AC50                 assume cs:_data$r
.data$r:0000AC50                 ;org 0AC50h
.data$r:0000AC50 ; COMDAT (pick any)
.data$r:0000AC50                 public ??_R0?AVTiXmlBase@@@8
.data$r:0000AC50 ; class TiXmlBase `RTTI Type Descriptor'
.data$r:0000AC50 ??_R0?AVTiXmlBase@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AC50                                         ; DATA XREF: .rdata$r:TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AC50                                         ; .rdata$r:0000AEA8o
.data$r:0000AC50                                         ; const type_info::`vftable'
.data$r:0000AC54                 align 8
.data$r:0000AC58 a_?avtixmlbase@ db '.?AVTiXmlBase@@',0
.data$r:0000AC58 _data$r         ends
.data$r:0000AC58
.rdata$r:0000AC68 ; ===========================================================================
.rdata$r:0000AC68
.rdata$r:0000AC68 ; Segment type: Pure data
.rdata$r:0000AC68 ; Segment permissions: Read
.rdata$r:0000AC68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC68                 assume cs:_rdata$r
.rdata$r:0000AC68                 ;org 0AC68h
.rdata$r:0000AC68 ; COMDAT (pick any)
.rdata$r:0000AC68                 public ??_R3TiXmlBase@@8
.rdata$r:0000AC68 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AC68 ??_R3TiXmlBase@@8 db    0               ; DATA XREF: .rdata$r:0000AC4Co
.rdata$r:0000AC68                                         ; .rdata$r:0000AEACo
.rdata$r:0000AC69                 db    0
.rdata$r:0000AC6A                 db    0
.rdata$r:0000AC6B                 db    0
.rdata$r:0000AC6C                 db    0
.rdata$r:0000AC6D                 db    0
.rdata$r:0000AC6E                 db    0
.rdata$r:0000AC6F                 db    0
.rdata$r:0000AC70                 db    1
.rdata$r:0000AC71                 db    0
.rdata$r:0000AC72                 db    0
.rdata$r:0000AC73                 db    0
.rdata$r:0000AC74                 dd offset ??_R2TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000AC74 _rdata$r        ends
.rdata$r:0000AC74
.rdata$r:0000AC78 ; ===========================================================================
.rdata$r:0000AC78
.rdata$r:0000AC78 ; Segment type: Pure data
.rdata$r:0000AC78 ; Segment permissions: Read
.rdata$r:0000AC78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC78                 assume cs:_rdata$r
.rdata$r:0000AC78                 ;org 0AC78h
.rdata$r:0000AC78 ; COMDAT (pick any)
.rdata$r:0000AC78                 public ??_R2TiXmlBase@@8
.rdata$r:0000AC78 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000AC78 ??_R2TiXmlBase@@8 dd offset ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000AC78                                         ; DATA XREF: .rdata$r:0000AC74o
.rdata$r:0000AC78                                         ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AC7C                 db    0
.rdata$r:0000AC7D                 align 10h
.rdata$r:0000AC7D _rdata$r        ends
.rdata$r:0000AC7D
.rdata$r:0000AC80 ; ===========================================================================
.rdata$r:0000AC80
.rdata$r:0000AC80 ; Segment type: Pure data
.rdata$r:0000AC80 ; Segment permissions: Read
.rdata$r:0000AC80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AC80                 assume cs:_rdata$r
.rdata$r:0000AC80                 ;org 0AC80h
.rdata$r:0000AC80 ; COMDAT (pick any)
.rdata$r:0000AC80                 public ??_R4TiXmlComment@@6B@
.rdata$r:0000AC80 ; const TiXmlComment::`RTTI Complete Object Locator'
.rdata$r:0000AC80 ??_R4TiXmlComment@@6B@ db    0          ; DATA XREF: .rdata:0000A448o
.rdata$r:0000AC81                 db    0
.rdata$r:0000AC82                 db    0
.rdata$r:0000AC83                 db    0
.rdata$r:0000AC84                 db    0
.rdata$r:0000AC85                 db    0
.rdata$r:0000AC86                 db    0
.rdata$r:0000AC87                 db    0
.rdata$r:0000AC88                 db    0
.rdata$r:0000AC89                 db    0
.rdata$r:0000AC8A                 db    0
.rdata$r:0000AC8B                 db    0
.rdata$r:0000AC8C                 dd offset ??_R0?AVTiXmlComment@@@8 ; TiXmlComment `RTTI Type Descriptor'
.rdata$r:0000AC90                 dd offset ??_R3TiXmlComment@@8 ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AC90 _rdata$r        ends
.rdata$r:0000AC90
.data$r:0000AC94 ; ===========================================================================
.data$r:0000AC94
.data$r:0000AC94 ; Segment type: Pure data
.data$r:0000AC94 ; Segment permissions: Read/Write
.data$r:0000AC94 _data$r         segment dword public 'DATA' use32
.data$r:0000AC94                 assume cs:_data$r
.data$r:0000AC94                 ;org 0AC94h
.data$r:0000AC94 ; COMDAT (pick any)
.data$r:0000AC94                 public ??_R0?AVTiXmlComment@@@8
.data$r:0000AC94 ; class TiXmlComment `RTTI Type Descriptor'
.data$r:0000AC94 ??_R0?AVTiXmlComment@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AC94                                         ; DATA XREF: .rdata$r:0000AC8Co
.data$r:0000AC94                                         ; .rdata$r:TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AC94                                         ; const type_info::`vftable'
.data$r:0000AC98                 db    0
.data$r:0000AC99                 db    0
.data$r:0000AC9A                 db    0
.data$r:0000AC9B                 db    0
.data$r:0000AC9C                 db  2Eh ; .
.data$r:0000AC9D                 db  3Fh ; ?
.data$r:0000AC9E                 db  41h ; A
.data$r:0000AC9F                 db  56h ; V
.data$r:0000ACA0                 db  54h ; T
.data$r:0000ACA1                 db  69h ; i
.data$r:0000ACA2                 db  58h ; X
.data$r:0000ACA3                 db  6Dh ; m
.data$r:0000ACA4                 db  6Ch ; l
.data$r:0000ACA5                 db  43h ; C
.data$r:0000ACA6                 db  6Fh ; o
.data$r:0000ACA7                 db  6Dh ; m
.data$r:0000ACA8                 db  6Dh ; m
.data$r:0000ACA9                 db  65h ; e
.data$r:0000ACAA                 db  6Eh ; n
.data$r:0000ACAB                 db  74h ; t
.data$r:0000ACAC                 db  40h ; @
.data$r:0000ACAD                 db  40h ; @
.data$r:0000ACAE                 db    0
.data$r:0000ACAF                 align 10h
.data$r:0000ACAF _data$r         ends
.data$r:0000ACAF
.rdata$r:0000ACB0 ; ===========================================================================
.rdata$r:0000ACB0
.rdata$r:0000ACB0 ; Segment type: Pure data
.rdata$r:0000ACB0 ; Segment permissions: Read
.rdata$r:0000ACB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ACB0                 assume cs:_rdata$r
.rdata$r:0000ACB0                 ;org 0ACB0h
.rdata$r:0000ACB0 ; COMDAT (pick any)
.rdata$r:0000ACB0                 public ??_R3TiXmlComment@@8
.rdata$r:0000ACB0 ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ACB0 ??_R3TiXmlComment@@8 db    0            ; DATA XREF: .rdata$r:0000AC90o
.rdata$r:0000ACB0                                         ; .rdata$r:0000ACE8o
.rdata$r:0000ACB1                 db    0
.rdata$r:0000ACB2                 db    0
.rdata$r:0000ACB3                 db    0
.rdata$r:0000ACB4                 db    0
.rdata$r:0000ACB5                 db    0
.rdata$r:0000ACB6                 db    0
.rdata$r:0000ACB7                 db    0
.rdata$r:0000ACB8                 db    3
.rdata$r:0000ACB9                 db    0
.rdata$r:0000ACBA                 db    0
.rdata$r:0000ACBB                 db    0
.rdata$r:0000ACBC                 dd offset ??_R2TiXmlComment@@8 ; TiXmlComment::`RTTI Base Class Array'
.rdata$r:0000ACBC _rdata$r        ends
.rdata$r:0000ACBC
.rdata$r:0000ACC0 ; ===========================================================================
.rdata$r:0000ACC0
.rdata$r:0000ACC0 ; Segment type: Pure data
.rdata$r:0000ACC0 ; Segment permissions: Read
.rdata$r:0000ACC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ACC0                 assume cs:_rdata$r
.rdata$r:0000ACC0                 ;org 0ACC0h
.rdata$r:0000ACC0 ; COMDAT (pick any)
.rdata$r:0000ACC0                 public ??_R2TiXmlComment@@8
.rdata$r:0000ACC0 ; TiXmlComment::`RTTI Base Class Array'
.rdata$r:0000ACC0 ??_R2TiXmlComment@@8 dd offset ??_R1A@?0A@EA@TiXmlComment@@8
.rdata$r:0000ACC0                                         ; DATA XREF: .rdata$r:0000ACBCo
.rdata$r:0000ACC0                                         ; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ACC4                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ACC8                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ACCC                 db    0
.rdata$r:0000ACCD                 align 10h
.rdata$r:0000ACCD _rdata$r        ends
.rdata$r:0000ACCD
.rdata$r:0000ACD0 ; ===========================================================================
.rdata$r:0000ACD0
.rdata$r:0000ACD0 ; Segment type: Pure data
.rdata$r:0000ACD0 ; Segment permissions: Read
.rdata$r:0000ACD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ACD0                 assume cs:_rdata$r
.rdata$r:0000ACD0                 ;org 0ACD0h
.rdata$r:0000ACD0 ; COMDAT (pick any)
.rdata$r:0000ACD0                 public ??_R1A@?0A@EA@TiXmlComment@@8
.rdata$r:0000ACD0 ; TiXmlComment::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ACD0 ??_R1A@?0A@EA@TiXmlComment@@8 dd offset ??_R0?AVTiXmlComment@@@8
.rdata$r:0000ACD0                                         ; DATA XREF: .rdata$r:TiXmlComment::`RTTI Base Class Array'o
.rdata$r:0000ACD0                                         ; TiXmlComment `RTTI Type Descriptor'
.rdata$r:0000ACD4                 db    2
.rdata$r:0000ACD5                 db    0
.rdata$r:0000ACD6                 db    0
.rdata$r:0000ACD7                 db    0
.rdata$r:0000ACD8                 db    0
.rdata$r:0000ACD9                 db    0
.rdata$r:0000ACDA                 db    0
.rdata$r:0000ACDB                 db    0
.rdata$r:0000ACDC                 db 0FFh
.rdata$r:0000ACDD                 db 0FFh
.rdata$r:0000ACDE                 db 0FFh
.rdata$r:0000ACDF                 db 0FFh
.rdata$r:0000ACE0                 db    0
.rdata$r:0000ACE1                 db    0
.rdata$r:0000ACE2                 db    0
.rdata$r:0000ACE3                 db    0
.rdata$r:0000ACE4                 db  40h ; @
.rdata$r:0000ACE5                 db    0
.rdata$r:0000ACE6                 db    0
.rdata$r:0000ACE7                 db    0
.rdata$r:0000ACE8                 dd offset ??_R3TiXmlComment@@8 ; TiXmlComment::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ACE8 _rdata$r        ends
.rdata$r:0000ACE8
.rdata$r:0000ACEC ; ===========================================================================
.rdata$r:0000ACEC
.rdata$r:0000ACEC ; Segment type: Pure data
.rdata$r:0000ACEC ; Segment permissions: Read
.rdata$r:0000ACEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ACEC                 assume cs:_rdata$r
.rdata$r:0000ACEC                 ;org 0ACECh
.rdata$r:0000ACEC ; COMDAT (pick any)
.rdata$r:0000ACEC                 public ??_R4TiXmlUnknown@@6B@
.rdata$r:0000ACEC ; const TiXmlUnknown::`RTTI Complete Object Locator'
.rdata$r:0000ACEC ??_R4TiXmlUnknown@@6B@ db    0          ; DATA XREF: .rdata:0000A4A8o
.rdata$r:0000ACED                 db    0
.rdata$r:0000ACEE                 db    0
.rdata$r:0000ACEF                 db    0
.rdata$r:0000ACF0                 db    0
.rdata$r:0000ACF1                 db    0
.rdata$r:0000ACF2                 db    0
.rdata$r:0000ACF3                 db    0
.rdata$r:0000ACF4                 db    0
.rdata$r:0000ACF5                 db    0
.rdata$r:0000ACF6                 db    0
.rdata$r:0000ACF7                 db    0
.rdata$r:0000ACF8                 dd offset ??_R0?AVTiXmlUnknown@@@8 ; TiXmlUnknown `RTTI Type Descriptor'
.rdata$r:0000ACFC                 dd offset ??_R3TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ACFC _rdata$r        ends
.rdata$r:0000ACFC
.data$r:0000AD00 ; ===========================================================================
.data$r:0000AD00
.data$r:0000AD00 ; Segment type: Pure data
.data$r:0000AD00 ; Segment permissions: Read/Write
.data$r:0000AD00 _data$r         segment dword public 'DATA' use32
.data$r:0000AD00                 assume cs:_data$r
.data$r:0000AD00                 ;org 0AD00h
.data$r:0000AD00 ; COMDAT (pick any)
.data$r:0000AD00                 public ??_R0?AVTiXmlUnknown@@@8
.data$r:0000AD00 ; class TiXmlUnknown `RTTI Type Descriptor'
.data$r:0000AD00 ??_R0?AVTiXmlUnknown@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AD00                                         ; DATA XREF: .rdata$r:0000ACF8o
.data$r:0000AD00                                         ; .rdata$r:TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AD00                                         ; const type_info::`vftable'
.data$r:0000AD04                 align 8
.data$r:0000AD08 a_?avtixmlunkno db '.?AVTiXmlUnknown@@',0
.data$r:0000AD1B                 align 4
.data$r:0000AD1B _data$r         ends
.data$r:0000AD1B
.rdata$r:0000AD1C ; ===========================================================================
.rdata$r:0000AD1C
.rdata$r:0000AD1C ; Segment type: Pure data
.rdata$r:0000AD1C ; Segment permissions: Read
.rdata$r:0000AD1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD1C                 assume cs:_rdata$r
.rdata$r:0000AD1C                 ;org 0AD1Ch
.rdata$r:0000AD1C ; COMDAT (pick any)
.rdata$r:0000AD1C                 public ??_R3TiXmlUnknown@@8
.rdata$r:0000AD1C ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD1C ??_R3TiXmlUnknown@@8 db    0            ; DATA XREF: .rdata$r:0000ACFCo
.rdata$r:0000AD1C                                         ; .rdata$r:0000AD54o
.rdata$r:0000AD1D                 db    0
.rdata$r:0000AD1E                 db    0
.rdata$r:0000AD1F                 db    0
.rdata$r:0000AD20                 db    0
.rdata$r:0000AD21                 db    0
.rdata$r:0000AD22                 db    0
.rdata$r:0000AD23                 db    0
.rdata$r:0000AD24                 db    3
.rdata$r:0000AD25                 db    0
.rdata$r:0000AD26                 db    0
.rdata$r:0000AD27                 db    0
.rdata$r:0000AD28                 dd offset ??_R2TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Base Class Array'
.rdata$r:0000AD28 _rdata$r        ends
.rdata$r:0000AD28
.rdata$r:0000AD2C ; ===========================================================================
.rdata$r:0000AD2C
.rdata$r:0000AD2C ; Segment type: Pure data
.rdata$r:0000AD2C ; Segment permissions: Read
.rdata$r:0000AD2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD2C                 assume cs:_rdata$r
.rdata$r:0000AD2C                 ;org 0AD2Ch
.rdata$r:0000AD2C ; COMDAT (pick any)
.rdata$r:0000AD2C                 public ??_R2TiXmlUnknown@@8
.rdata$r:0000AD2C ; TiXmlUnknown::`RTTI Base Class Array'
.rdata$r:0000AD2C ??_R2TiXmlUnknown@@8 dd offset ??_R1A@?0A@EA@TiXmlUnknown@@8
.rdata$r:0000AD2C                                         ; DATA XREF: .rdata$r:0000AD28o
.rdata$r:0000AD2C                                         ; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AD30                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AD34                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AD38                 db    0
.rdata$r:0000AD39                 align 4
.rdata$r:0000AD39 _rdata$r        ends
.rdata$r:0000AD39
.rdata$r:0000AD3C ; ===========================================================================
.rdata$r:0000AD3C
.rdata$r:0000AD3C ; Segment type: Pure data
.rdata$r:0000AD3C ; Segment permissions: Read
.rdata$r:0000AD3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD3C                 assume cs:_rdata$r
.rdata$r:0000AD3C                 ;org 0AD3Ch
.rdata$r:0000AD3C ; COMDAT (pick any)
.rdata$r:0000AD3C                 public ??_R1A@?0A@EA@TiXmlUnknown@@8
.rdata$r:0000AD3C ; TiXmlUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AD3C ??_R1A@?0A@EA@TiXmlUnknown@@8 dd offset ??_R0?AVTiXmlUnknown@@@8
.rdata$r:0000AD3C                                         ; DATA XREF: .rdata$r:TiXmlUnknown::`RTTI Base Class Array'o
.rdata$r:0000AD3C                                         ; TiXmlUnknown `RTTI Type Descriptor'
.rdata$r:0000AD40                 db    2
.rdata$r:0000AD41                 db    0
.rdata$r:0000AD42                 db    0
.rdata$r:0000AD43                 db    0
.rdata$r:0000AD44                 db    0
.rdata$r:0000AD45                 db    0
.rdata$r:0000AD46                 db    0
.rdata$r:0000AD47                 db    0
.rdata$r:0000AD48                 db 0FFh
.rdata$r:0000AD49                 db 0FFh
.rdata$r:0000AD4A                 db 0FFh
.rdata$r:0000AD4B                 db 0FFh
.rdata$r:0000AD4C                 db    0
.rdata$r:0000AD4D                 db    0
.rdata$r:0000AD4E                 db    0
.rdata$r:0000AD4F                 db    0
.rdata$r:0000AD50                 db  40h ; @
.rdata$r:0000AD51                 db    0
.rdata$r:0000AD52                 db    0
.rdata$r:0000AD53                 db    0
.rdata$r:0000AD54                 dd offset ??_R3TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD54 _rdata$r        ends
.rdata$r:0000AD54
.rdata$r:0000AD58 ; ===========================================================================
.rdata$r:0000AD58
.rdata$r:0000AD58 ; Segment type: Pure data
.rdata$r:0000AD58 ; Segment permissions: Read
.rdata$r:0000AD58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD58                 assume cs:_rdata$r
.rdata$r:0000AD58                 ;org 0AD58h
.rdata$r:0000AD58 ; COMDAT (pick any)
.rdata$r:0000AD58                 public ??_R4TiXmlAttribute@@6B@
.rdata$r:0000AD58 ; const TiXmlAttribute::`RTTI Complete Object Locator'
.rdata$r:0000AD58 ??_R4TiXmlAttribute@@6B@ db    0        ; DATA XREF: .rdata:0000A434o
.rdata$r:0000AD59                 db    0
.rdata$r:0000AD5A                 db    0
.rdata$r:0000AD5B                 db    0
.rdata$r:0000AD5C                 db    0
.rdata$r:0000AD5D                 db    0
.rdata$r:0000AD5E                 db    0
.rdata$r:0000AD5F                 db    0
.rdata$r:0000AD60                 db    0
.rdata$r:0000AD61                 db    0
.rdata$r:0000AD62                 db    0
.rdata$r:0000AD63                 db    0
.rdata$r:0000AD64                 dd offset ??_R0?AVTiXmlAttribute@@@8 ; TiXmlAttribute `RTTI Type Descriptor'
.rdata$r:0000AD68                 dd offset ??_R3TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD68 _rdata$r        ends
.rdata$r:0000AD68
.data$r:0000AD6C ; ===========================================================================
.data$r:0000AD6C
.data$r:0000AD6C ; Segment type: Pure data
.data$r:0000AD6C ; Segment permissions: Read/Write
.data$r:0000AD6C _data$r         segment dword public 'DATA' use32
.data$r:0000AD6C                 assume cs:_data$r
.data$r:0000AD6C                 ;org 0AD6Ch
.data$r:0000AD6C ; COMDAT (pick any)
.data$r:0000AD6C                 public ??_R0?AVTiXmlAttribute@@@8
.data$r:0000AD6C ; class TiXmlAttribute `RTTI Type Descriptor'
.data$r:0000AD6C ??_R0?AVTiXmlAttribute@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AD6C                                         ; DATA XREF: .rdata$r:0000AD64o
.data$r:0000AD6C                                         ; .rdata$r:TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AD6C                                         ; const type_info::`vftable'
.data$r:0000AD70                 db    0
.data$r:0000AD71                 db    0
.data$r:0000AD72                 db    0
.data$r:0000AD73                 db    0
.data$r:0000AD74                 db  2Eh ; .
.data$r:0000AD75                 db  3Fh ; ?
.data$r:0000AD76                 db  41h ; A
.data$r:0000AD77                 db  56h ; V
.data$r:0000AD78                 db  54h ; T
.data$r:0000AD79                 db  69h ; i
.data$r:0000AD7A                 db  58h ; X
.data$r:0000AD7B                 db  6Dh ; m
.data$r:0000AD7C                 db  6Ch ; l
.data$r:0000AD7D                 db  41h ; A
.data$r:0000AD7E                 db  74h ; t
.data$r:0000AD7F                 db  74h ; t
.data$r:0000AD80                 db  72h ; r
.data$r:0000AD81                 db  69h ; i
.data$r:0000AD82                 db  62h ; b
.data$r:0000AD83                 db  75h ; u
.data$r:0000AD84                 db  74h ; t
.data$r:0000AD85                 db  65h ; e
.data$r:0000AD86                 db  40h ; @
.data$r:0000AD87                 db  40h ; @
.data$r:0000AD88                 db    0
.data$r:0000AD89                 align 4
.data$r:0000AD89 _data$r         ends
.data$r:0000AD89
.rdata$r:0000AD8C ; ===========================================================================
.rdata$r:0000AD8C
.rdata$r:0000AD8C ; Segment type: Pure data
.rdata$r:0000AD8C ; Segment permissions: Read
.rdata$r:0000AD8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD8C                 assume cs:_rdata$r
.rdata$r:0000AD8C                 ;org 0AD8Ch
.rdata$r:0000AD8C ; COMDAT (pick any)
.rdata$r:0000AD8C                 public ??_R3TiXmlAttribute@@8
.rdata$r:0000AD8C ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AD8C ??_R3TiXmlAttribute@@8 db    0          ; DATA XREF: .rdata$r:0000AD68o
.rdata$r:0000AD8C                                         ; .rdata$r:0000ADC0o
.rdata$r:0000AD8D                 db    0
.rdata$r:0000AD8E                 db    0
.rdata$r:0000AD8F                 db    0
.rdata$r:0000AD90                 db    0
.rdata$r:0000AD91                 db    0
.rdata$r:0000AD92                 db    0
.rdata$r:0000AD93                 db    0
.rdata$r:0000AD94                 db    2
.rdata$r:0000AD95                 db    0
.rdata$r:0000AD96                 db    0
.rdata$r:0000AD97                 db    0
.rdata$r:0000AD98                 dd offset ??_R2TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Base Class Array'
.rdata$r:0000AD98 _rdata$r        ends
.rdata$r:0000AD98
.rdata$r:0000AD9C ; ===========================================================================
.rdata$r:0000AD9C
.rdata$r:0000AD9C ; Segment type: Pure data
.rdata$r:0000AD9C ; Segment permissions: Read
.rdata$r:0000AD9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AD9C                 assume cs:_rdata$r
.rdata$r:0000AD9C                 ;org 0AD9Ch
.rdata$r:0000AD9C ; COMDAT (pick any)
.rdata$r:0000AD9C                 public ??_R2TiXmlAttribute@@8
.rdata$r:0000AD9C ; TiXmlAttribute::`RTTI Base Class Array'
.rdata$r:0000AD9C ??_R2TiXmlAttribute@@8 dd offset ??_R1A@?0A@EA@TiXmlAttribute@@8
.rdata$r:0000AD9C                                         ; DATA XREF: .rdata$r:0000AD98o
.rdata$r:0000AD9C                                         ; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ADA0                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000ADA4                 db    0
.rdata$r:0000ADA5                 align 4
.rdata$r:0000ADA5 _rdata$r        ends
.rdata$r:0000ADA5
.rdata$r:0000ADA8 ; ===========================================================================
.rdata$r:0000ADA8
.rdata$r:0000ADA8 ; Segment type: Pure data
.rdata$r:0000ADA8 ; Segment permissions: Read
.rdata$r:0000ADA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ADA8                 assume cs:_rdata$r
.rdata$r:0000ADA8                 ;org 0ADA8h
.rdata$r:0000ADA8 ; COMDAT (pick any)
.rdata$r:0000ADA8                 public ??_R1A@?0A@EA@TiXmlAttribute@@8
.rdata$r:0000ADA8 ; TiXmlAttribute::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000ADA8 ??_R1A@?0A@EA@TiXmlAttribute@@8 dd offset ??_R0?AVTiXmlAttribute@@@8
.rdata$r:0000ADA8                                         ; DATA XREF: .rdata$r:TiXmlAttribute::`RTTI Base Class Array'o
.rdata$r:0000ADA8                                         ; TiXmlAttribute `RTTI Type Descriptor'
.rdata$r:0000ADAC                 db    1
.rdata$r:0000ADAD                 db    0
.rdata$r:0000ADAE                 db    0
.rdata$r:0000ADAF                 db    0
.rdata$r:0000ADB0                 db    0
.rdata$r:0000ADB1                 db    0
.rdata$r:0000ADB2                 db    0
.rdata$r:0000ADB3                 db    0
.rdata$r:0000ADB4                 db 0FFh
.rdata$r:0000ADB5                 db 0FFh
.rdata$r:0000ADB6                 db 0FFh
.rdata$r:0000ADB7                 db 0FFh
.rdata$r:0000ADB8                 db    0
.rdata$r:0000ADB9                 db    0
.rdata$r:0000ADBA                 db    0
.rdata$r:0000ADBB                 db    0
.rdata$r:0000ADBC                 db  40h ; @
.rdata$r:0000ADBD                 db    0
.rdata$r:0000ADBE                 db    0
.rdata$r:0000ADBF                 db    0
.rdata$r:0000ADC0                 dd offset ??_R3TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ADC0 _rdata$r        ends
.rdata$r:0000ADC0
.rdata$r:0000ADC4 ; ===========================================================================
.rdata$r:0000ADC4
.rdata$r:0000ADC4 ; Segment type: Pure data
.rdata$r:0000ADC4 ; Segment permissions: Read
.rdata$r:0000ADC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ADC4                 assume cs:_rdata$r
.rdata$r:0000ADC4                 ;org 0ADC4h
.rdata$r:0000ADC4 ; COMDAT (pick any)
.rdata$r:0000ADC4                 public ??_R4TiXmlText@@6B@
.rdata$r:0000ADC4 ; const TiXmlText::`RTTI Complete Object Locator'
.rdata$r:0000ADC4 ??_R4TiXmlText@@6B@ db    0             ; DATA XREF: .rdata:0000A468o
.rdata$r:0000ADC5                 db    0
.rdata$r:0000ADC6                 db    0
.rdata$r:0000ADC7                 db    0
.rdata$r:0000ADC8                 db    0
.rdata$r:0000ADC9                 db    0
.rdata$r:0000ADCA                 db    0
.rdata$r:0000ADCB                 db    0
.rdata$r:0000ADCC                 db    0
.rdata$r:0000ADCD                 db    0
.rdata$r:0000ADCE                 db    0
.rdata$r:0000ADCF                 db    0
.rdata$r:0000ADD0                 dd offset ??_R0?AVTiXmlText@@@8 ; TiXmlText `RTTI Type Descriptor'
.rdata$r:0000ADD4                 dd offset ??_R3TiXmlText@@8 ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ADD4 _rdata$r        ends
.rdata$r:0000ADD4
.data$r:0000ADD8 ; ===========================================================================
.data$r:0000ADD8
.data$r:0000ADD8 ; Segment type: Pure data
.data$r:0000ADD8 ; Segment permissions: Read/Write
.data$r:0000ADD8 _data$r         segment dword public 'DATA' use32
.data$r:0000ADD8                 assume cs:_data$r
.data$r:0000ADD8                 ;org 0ADD8h
.data$r:0000ADD8 ; COMDAT (pick any)
.data$r:0000ADD8                 public ??_R0?AVTiXmlText@@@8
.data$r:0000ADD8 ; class TiXmlText `RTTI Type Descriptor'
.data$r:0000ADD8 ??_R0?AVTiXmlText@@@8 dd offset ??_7type_info@@6B@
.data$r:0000ADD8                                         ; DATA XREF: .rdata$r:0000ADD0o
.data$r:0000ADD8                                         ; .rdata$r:TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000ADD8                                         ; const type_info::`vftable'
.data$r:0000ADDC                 align 10h
.data$r:0000ADE0 a_?avtixmltext@ db '.?AVTiXmlText@@',0
.data$r:0000ADE0 _data$r         ends
.data$r:0000ADE0
.rdata$r:0000ADF0 ; ===========================================================================
.rdata$r:0000ADF0
.rdata$r:0000ADF0 ; Segment type: Pure data
.rdata$r:0000ADF0 ; Segment permissions: Read
.rdata$r:0000ADF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000ADF0                 assume cs:_rdata$r
.rdata$r:0000ADF0                 ;org 0ADF0h
.rdata$r:0000ADF0 ; COMDAT (pick any)
.rdata$r:0000ADF0                 public ??_R3TiXmlText@@8
.rdata$r:0000ADF0 ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000ADF0 ??_R3TiXmlText@@8 db    0               ; DATA XREF: .rdata$r:0000ADD4o
.rdata$r:0000ADF0                                         ; .rdata$r:0000AE28o
.rdata$r:0000ADF1                 db    0
.rdata$r:0000ADF2                 db    0
.rdata$r:0000ADF3                 db    0
.rdata$r:0000ADF4                 db    0
.rdata$r:0000ADF5                 db    0
.rdata$r:0000ADF6                 db    0
.rdata$r:0000ADF7                 db    0
.rdata$r:0000ADF8                 db    3
.rdata$r:0000ADF9                 db    0
.rdata$r:0000ADFA                 db    0
.rdata$r:0000ADFB                 db    0
.rdata$r:0000ADFC                 dd offset ??_R2TiXmlText@@8 ; TiXmlText::`RTTI Base Class Array'
.rdata$r:0000ADFC _rdata$r        ends
.rdata$r:0000ADFC
.rdata$r:0000AE00 ; ===========================================================================
.rdata$r:0000AE00
.rdata$r:0000AE00 ; Segment type: Pure data
.rdata$r:0000AE00 ; Segment permissions: Read
.rdata$r:0000AE00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE00                 assume cs:_rdata$r
.rdata$r:0000AE00                 ;org 0AE00h
.rdata$r:0000AE00 ; COMDAT (pick any)
.rdata$r:0000AE00                 public ??_R2TiXmlText@@8
.rdata$r:0000AE00 ; TiXmlText::`RTTI Base Class Array'
.rdata$r:0000AE00 ??_R2TiXmlText@@8 dd offset ??_R1A@?0A@EA@TiXmlText@@8
.rdata$r:0000AE00                                         ; DATA XREF: .rdata$r:0000ADFCo
.rdata$r:0000AE00                                         ; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE04                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE08                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE0C                 db    0
.rdata$r:0000AE0D                 align 10h
.rdata$r:0000AE0D _rdata$r        ends
.rdata$r:0000AE0D
.rdata$r:0000AE10 ; ===========================================================================
.rdata$r:0000AE10
.rdata$r:0000AE10 ; Segment type: Pure data
.rdata$r:0000AE10 ; Segment permissions: Read
.rdata$r:0000AE10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE10                 assume cs:_rdata$r
.rdata$r:0000AE10                 ;org 0AE10h
.rdata$r:0000AE10 ; COMDAT (pick any)
.rdata$r:0000AE10                 public ??_R1A@?0A@EA@TiXmlText@@8
.rdata$r:0000AE10 ; TiXmlText::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AE10 ??_R1A@?0A@EA@TiXmlText@@8 dd offset ??_R0?AVTiXmlText@@@8
.rdata$r:0000AE10                                         ; DATA XREF: .rdata$r:TiXmlText::`RTTI Base Class Array'o
.rdata$r:0000AE10                                         ; TiXmlText `RTTI Type Descriptor'
.rdata$r:0000AE14                 db    2
.rdata$r:0000AE15                 db    0
.rdata$r:0000AE16                 db    0
.rdata$r:0000AE17                 db    0
.rdata$r:0000AE18                 db    0
.rdata$r:0000AE19                 db    0
.rdata$r:0000AE1A                 db    0
.rdata$r:0000AE1B                 db    0
.rdata$r:0000AE1C                 db 0FFh
.rdata$r:0000AE1D                 db 0FFh
.rdata$r:0000AE1E                 db 0FFh
.rdata$r:0000AE1F                 db 0FFh
.rdata$r:0000AE20                 db    0
.rdata$r:0000AE21                 db    0
.rdata$r:0000AE22                 db    0
.rdata$r:0000AE23                 db    0
.rdata$r:0000AE24                 db  40h ; @
.rdata$r:0000AE25                 db    0
.rdata$r:0000AE26                 db    0
.rdata$r:0000AE27                 db    0
.rdata$r:0000AE28                 dd offset ??_R3TiXmlText@@8 ; TiXmlText::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AE28 _rdata$r        ends
.rdata$r:0000AE28
.rdata$r:0000AE2C ; ===========================================================================
.rdata$r:0000AE2C
.rdata$r:0000AE2C ; Segment type: Pure data
.rdata$r:0000AE2C ; Segment permissions: Read
.rdata$r:0000AE2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE2C                 assume cs:_rdata$r
.rdata$r:0000AE2C                 ;org 0AE2Ch
.rdata$r:0000AE2C ; COMDAT (pick any)
.rdata$r:0000AE2C                 public ??_R4TiXmlDeclaration@@6B@
.rdata$r:0000AE2C ; const TiXmlDeclaration::`RTTI Complete Object Locator'
.rdata$r:0000AE2C ??_R4TiXmlDeclaration@@6B@ db    0      ; DATA XREF: .rdata:0000A488o
.rdata$r:0000AE2D                 db    0
.rdata$r:0000AE2E                 db    0
.rdata$r:0000AE2F                 db    0
.rdata$r:0000AE30                 db    0
.rdata$r:0000AE31                 db    0
.rdata$r:0000AE32                 db    0
.rdata$r:0000AE33                 db    0
.rdata$r:0000AE34                 db    0
.rdata$r:0000AE35                 db    0
.rdata$r:0000AE36                 db    0
.rdata$r:0000AE37                 db    0
.rdata$r:0000AE38                 dd offset ??_R0?AVTiXmlDeclaration@@@8 ; TiXmlDeclaration `RTTI Type Descriptor'
.rdata$r:0000AE3C                 dd offset ??_R3TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AE3C _rdata$r        ends
.rdata$r:0000AE3C
.data$r:0000AE40 ; ===========================================================================
.data$r:0000AE40
.data$r:0000AE40 ; Segment type: Pure data
.data$r:0000AE40 ; Segment permissions: Read/Write
.data$r:0000AE40 _data$r         segment dword public 'DATA' use32
.data$r:0000AE40                 assume cs:_data$r
.data$r:0000AE40                 ;org 0AE40h
.data$r:0000AE40 ; COMDAT (pick any)
.data$r:0000AE40                 public ??_R0?AVTiXmlDeclaration@@@8
.data$r:0000AE40 ; class TiXmlDeclaration `RTTI Type Descriptor'
.data$r:0000AE40 ??_R0?AVTiXmlDeclaration@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AE40                                         ; DATA XREF: .rdata$r:0000AE38o
.data$r:0000AE40                                         ; .rdata$r:TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AE40                                         ; const type_info::`vftable'
.data$r:0000AE44                 align 8
.data$r:0000AE48 a_?avtixmldecla db '.?AVTiXmlDeclaration@@',0
.data$r:0000AE5F                 align 10h
.data$r:0000AE5F _data$r         ends
.data$r:0000AE5F
.rdata$r:0000AE60 ; ===========================================================================
.rdata$r:0000AE60
.rdata$r:0000AE60 ; Segment type: Pure data
.rdata$r:0000AE60 ; Segment permissions: Read
.rdata$r:0000AE60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE60                 assume cs:_rdata$r
.rdata$r:0000AE60                 ;org 0AE60h
.rdata$r:0000AE60 ; COMDAT (pick any)
.rdata$r:0000AE60                 public ??_R3TiXmlDeclaration@@8
.rdata$r:0000AE60 ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AE60 ??_R3TiXmlDeclaration@@8 db    0        ; DATA XREF: .rdata$r:0000AE3Co
.rdata$r:0000AE60                                         ; .rdata$r:0000AE98o
.rdata$r:0000AE61                 db    0
.rdata$r:0000AE62                 db    0
.rdata$r:0000AE63                 db    0
.rdata$r:0000AE64                 db    0
.rdata$r:0000AE65                 db    0
.rdata$r:0000AE66                 db    0
.rdata$r:0000AE67                 db    0
.rdata$r:0000AE68                 db    3
.rdata$r:0000AE69                 db    0
.rdata$r:0000AE6A                 db    0
.rdata$r:0000AE6B                 db    0
.rdata$r:0000AE6C                 dd offset ??_R2TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Base Class Array'
.rdata$r:0000AE6C _rdata$r        ends
.rdata$r:0000AE6C
.rdata$r:0000AE70 ; ===========================================================================
.rdata$r:0000AE70
.rdata$r:0000AE70 ; Segment type: Pure data
.rdata$r:0000AE70 ; Segment permissions: Read
.rdata$r:0000AE70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE70                 assume cs:_rdata$r
.rdata$r:0000AE70                 ;org 0AE70h
.rdata$r:0000AE70 ; COMDAT (pick any)
.rdata$r:0000AE70                 public ??_R2TiXmlDeclaration@@8
.rdata$r:0000AE70 ; TiXmlDeclaration::`RTTI Base Class Array'
.rdata$r:0000AE70 ??_R2TiXmlDeclaration@@8 dd offset ??_R1A@?0A@EA@TiXmlDeclaration@@8
.rdata$r:0000AE70                                         ; DATA XREF: .rdata$r:0000AE6Co
.rdata$r:0000AE70                                         ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE74                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE78                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AE7C                 db    0
.rdata$r:0000AE7D                 align 10h
.rdata$r:0000AE7D _rdata$r        ends
.rdata$r:0000AE7D
.rdata$r:0000AE80 ; ===========================================================================
.rdata$r:0000AE80
.rdata$r:0000AE80 ; Segment type: Pure data
.rdata$r:0000AE80 ; Segment permissions: Read
.rdata$r:0000AE80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE80                 assume cs:_rdata$r
.rdata$r:0000AE80                 ;org 0AE80h
.rdata$r:0000AE80 ; COMDAT (pick any)
.rdata$r:0000AE80                 public ??_R1A@?0A@EA@TiXmlDeclaration@@8
.rdata$r:0000AE80 ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AE80 ??_R1A@?0A@EA@TiXmlDeclaration@@8 dd offset ??_R0?AVTiXmlDeclaration@@@8
.rdata$r:0000AE80                                         ; DATA XREF: .rdata$r:TiXmlDeclaration::`RTTI Base Class Array'o
.rdata$r:0000AE80                                         ; TiXmlDeclaration `RTTI Type Descriptor'
.rdata$r:0000AE84                 db    2
.rdata$r:0000AE85                 db    0
.rdata$r:0000AE86                 db    0
.rdata$r:0000AE87                 db    0
.rdata$r:0000AE88                 db    0
.rdata$r:0000AE89                 db    0
.rdata$r:0000AE8A                 db    0
.rdata$r:0000AE8B                 db    0
.rdata$r:0000AE8C                 db 0FFh
.rdata$r:0000AE8D                 db 0FFh
.rdata$r:0000AE8E                 db 0FFh
.rdata$r:0000AE8F                 db 0FFh
.rdata$r:0000AE90                 db    0
.rdata$r:0000AE91                 db    0
.rdata$r:0000AE92                 db    0
.rdata$r:0000AE93                 db    0
.rdata$r:0000AE94                 db  40h ; @
.rdata$r:0000AE95                 db    0
.rdata$r:0000AE96                 db    0
.rdata$r:0000AE97                 db    0
.rdata$r:0000AE98                 dd offset ??_R3TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AE98 _rdata$r        ends
.rdata$r:0000AE98
.rdata$r:0000AE9C ; ===========================================================================
.rdata$r:0000AE9C
.rdata$r:0000AE9C ; Segment type: Pure data
.rdata$r:0000AE9C ; Segment permissions: Read
.rdata$r:0000AE9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AE9C                 assume cs:_rdata$r
.rdata$r:0000AE9C                 ;org 0AE9Ch
.rdata$r:0000AE9C ; COMDAT (pick any)
.rdata$r:0000AE9C                 public ??_R4TiXmlBase@@6B@
.rdata$r:0000AE9C ; const TiXmlBase::`RTTI Complete Object Locator'
.rdata$r:0000AE9C ??_R4TiXmlBase@@6B@ db    0             ; DATA XREF: .rdata:0000A384o
.rdata$r:0000AE9D                 db    0
.rdata$r:0000AE9E                 db    0
.rdata$r:0000AE9F                 db    0
.rdata$r:0000AEA0                 db    0
.rdata$r:0000AEA1                 db    0
.rdata$r:0000AEA2                 db    0
.rdata$r:0000AEA3                 db    0
.rdata$r:0000AEA4                 db    0
.rdata$r:0000AEA5                 db    0
.rdata$r:0000AEA6                 db    0
.rdata$r:0000AEA7                 db    0
.rdata$r:0000AEA8                 dd offset ??_R0?AVTiXmlBase@@@8 ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:0000AEAC                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AEAC _rdata$r        ends
.rdata$r:0000AEAC
.CRT$XCU:0000AEB0 ; ===========================================================================
.CRT$XCU:0000AEB0
.CRT$XCU:0000AEB0 ; Segment type: Pure data
.CRT$XCU:0000AEB0 ; Segment permissions: Read
.CRT$XCU:0000AEB0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEB0                 assume cs:_CRT$XCU
.CRT$XCU:0000AEB0                 ;org 0AEB0h
.CRT$XCU:0000AEB0 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000AEB4 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000AEB4 _CRT$XCU        ends
.CRT$XCU:0000AEB4
.CRT$XCU:0000AEB8 ; ===========================================================================
.CRT$XCU:0000AEB8
.CRT$XCU:0000AEB8 ; Segment type: Pure data
.CRT$XCU:0000AEB8 ; Segment permissions: Read
.CRT$XCU:0000AEB8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEB8                 assume cs:_CRT$XCU
.CRT$XCU:0000AEB8                 ;org 0AEB8h
.CRT$XCU:0000AEB8 ; COMDAT (pick associative to section at A238)
.CRT$XCU:0000AEB8 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000AEB8 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000AEB8 _CRT$XCU        ends
.CRT$XCU:0000AEB8
.CRT$XCU:0000AEBC ; ===========================================================================
.CRT$XCU:0000AEBC
.CRT$XCU:0000AEBC ; Segment type: Pure data
.CRT$XCU:0000AEBC ; Segment permissions: Read
.CRT$XCU:0000AEBC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEBC                 assume cs:_CRT$XCU
.CRT$XCU:0000AEBC                 ;org 0AEBCh
.CRT$XCU:0000AEBC ; COMDAT (pick associative to section at A23C)
.CRT$XCU:0000AEBC ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000AEBC ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000AEBC _CRT$XCU        ends
.CRT$XCU:0000AEBC
.CRT$XCU:0000AEC0 ; ===========================================================================
.CRT$XCU:0000AEC0
.CRT$XCU:0000AEC0 ; Segment type: Pure data
.CRT$XCU:0000AEC0 ; Segment permissions: Read
.CRT$XCU:0000AEC0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEC0                 assume cs:_CRT$XCU
.CRT$XCU:0000AEC0                 ;org 0AEC0h
.CRT$XCU:0000AEC0 ; COMDAT (pick associative to section at A240)
.CRT$XCU:0000AEC0 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000AEC0 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000AEC0 _CRT$XCU        ends
.CRT$XCU:0000AEC0
.CRT$XCU:0000AEC4 ; ===========================================================================
.CRT$XCU:0000AEC4
.CRT$XCU:0000AEC4 ; Segment type: Pure data
.CRT$XCU:0000AEC4 ; Segment permissions: Read
.CRT$XCU:0000AEC4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEC4                 assume cs:_CRT$XCU
.CRT$XCU:0000AEC4                 ;org 0AEC4h
.CRT$XCU:0000AEC4 ; COMDAT (pick associative to section at A37C)
.CRT$XCU:0000AEC4 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000AEC4 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000AEC4 _CRT$XCU        ends
.CRT$XCU:0000AEC4
.CRT$XCU:0000AEC8 ; ===========================================================================
.CRT$XCU:0000AEC8
.CRT$XCU:0000AEC8 ; Segment type: Pure data
.CRT$XCU:0000AEC8 ; Segment permissions: Read
.CRT$XCU:0000AEC8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AEC8                 assume cs:_CRT$XCU
.CRT$XCU:0000AEC8                 ;org 0AEC8h
.CRT$XCU:0000AEC8 ; COMDAT (pick associative to section at A380)
.CRT$XCU:0000AEC8 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000AEC8 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000AEC8 _CRT$XCU        ends
.CRT$XCU:0000AEC8
.CRT$XCU:0000AECC ; ===========================================================================
.CRT$XCU:0000AECC
.CRT$XCU:0000AECC ; Segment type: Pure data
.CRT$XCU:0000AECC ; Segment permissions: Read
.CRT$XCU:0000AECC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AECC                 assume cs:_CRT$XCU
.CRT$XCU:0000AECC                 ;org 0AECCh
.CRT$XCU:0000AECC ; COMDAT (pick associative to section at A5E4)
.CRT$XCU:0000AECC ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000AECC ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000AECC _CRT$XCU        ends
.CRT$XCU:0000AECC
.CRT$XCU:0000AED0 ; ===========================================================================
.CRT$XCU:0000AED0
.CRT$XCU:0000AED0 ; Segment type: Pure data
.CRT$XCU:0000AED0 ; Segment permissions: Read
.CRT$XCU:0000AED0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000AED0                 assume cs:_CRT$XCU
.CRT$XCU:0000AED0                 ;org 0AED0h
.CRT$XCU:0000AED0 ; COMDAT (pick associative to section at A5E8)
.CRT$XCU:0000AED0 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000AED0 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000AED0 _CRT$XCU        ends
.CRT$XCU:0000AED0
UNDEF:0000AEE0 ; ===========================================================================
UNDEF:0000AEE0
UNDEF:0000AEE0 ; Segment type: Externs
UNDEF:0000AEE0 ; UNDEF
UNDEF:0000AEE0                 extrn __purecall:near   ; DATA XREF: .rdata:0000A024o
UNDEF:0000AEE0                                         ; .rdata:0000A028o ...
UNDEF:0000AEE4 ; void *__cdecl operator new(unsigned int)
UNDEF:0000AEE4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+BDp
UNDEF:0000AEE4                                         ; TiXmlNode::Identify(wchar_t const *)+126p ...
UNDEF:0000AEE8 ; void __cdecl operator delete(void *)
UNDEF:0000AEE8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$0+4p
UNDEF:0000AEE8                                         ; __unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z$1+4p ...
UNDEF:0000AEEC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000AEEC                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000AEEC                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000AEF0 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:0000AEF0                 extrn __wassert:near    ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
UNDEF:0000AEF0                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+E4p ...
UNDEF:0000AEF4 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000AEF4                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000AEF4                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+2Ap
UNDEF:0000AEF4                                         ; std::_Locinfo::_Locinfo(char const *)+2Dp ...
UNDEF:0000AEF8 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000AEF8                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000AEF8                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+E0p
UNDEF:0000AEF8                                         ; __unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0+3j ...
UNDEF:0000AEFC                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000AF00 ; int swscanf(const wchar_t *Src, const wchar_t *Format, ...)
UNDEF:0000AF00                 extrn _swscanf:near     ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+54p
UNDEF:0000AF04 ; void __cdecl free(void *Memory)
UNDEF:0000AF04                 extrn _free:near        ; CODE XREF: std::_DebugHeapDelete<std::_Facet_base>(std::_Facet_base *)+1Bp
UNDEF:0000AF04                                         ; std::_DebugHeapDelete<std::locale::facet>(std::locale::facet *)+1Bp ...
UNDEF:0000AF08 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000AF08                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000AF08                                         ; _wmemcpy+11p
UNDEF:0000AF0C ; size_t __cdecl strlen(const char *Str)
UNDEF:0000AF0C                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000AF10 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000AF10                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000AF10                                         ; _wmemmove+11p
UNDEF:0000AF14 ; wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch)
UNDEF:0000AF14                 extrn _wcschr:near      ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+26p
UNDEF:0000AF18 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000AF18                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000AF1C ; int __cdecl wcsncmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount)
UNDEF:0000AF1C                 extrn _wcsncmp:near     ; CODE XREF: TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+11p
UNDEF:0000AF1C                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+ACp
UNDEF:0000AF20 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:0000AF20                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:0000AF20                                         ; CODE XREF: std::runtime_error::runtime_error(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)+3Ap
UNDEF:0000AF20                                         ; std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0000AF24 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000AF24                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000AF24                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0000AF24                                         ; DATA XREF: .xdata$x:0000A008o
UNDEF:0000AF28 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:0000AF28                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:0000AF28                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:0000AF28                                         ; __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0+3j ...
UNDEF:0000AF2C ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:0000AF2C                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:0000AF2C                                         ; DATA XREF: .rdata:00009F78o
UNDEF:0000AF2C                                         ; .rdata:0000A18Co ...
UNDEF:0000AF30 ; bool __cdecl std::uncaught_exception()
UNDEF:0000AF30                 extrn ?uncaught_exception@std@@YA_NXZ:near
UNDEF:0000AF30                                         ; CODE XREF: std::basic_ostream<wchar_t,std::char_traits<wchar_t>>::sentry::~sentry(void)+2Dp
UNDEF:0000AF34                 extrn __free_dbg:near   ; CODE XREF: std::_Yarn<char>::_Tidy(void)+17p
UNDEF:0000AF34                                         ; std::_Yarn<wchar_t>::_Tidy(void)+17p
UNDEF:0000AF38 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000AF38                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000AF38                                         ; CODE XREF: std::_Debug_pointer<char>(char *,wchar_t const *,uint)+16p
UNDEF:0000AF38                                         ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p ...
UNDEF:0000AF3C ; void __cdecl std::_Xbad_alloc()
UNDEF:0000AF3C                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000AF3C                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_2866p
UNDEF:0000AF3C                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_28A8p ...
UNDEF:0000AF40 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000AF40                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000AF40                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000AF40                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:0000AF44 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000AF44                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000AF44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000AF44                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000AF48 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:0000AF48                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AF48                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:0000AF4C ; _DWORD __thiscall std::bad_cast::bad_cast(std::bad_cast *__hidden this, const char *)
UNDEF:0000AF4C                 extrn ??0bad_cast@std@@QAE@PBD@Z:near
UNDEF:0000AF4C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+8Dp
UNDEF:0000AF50 ; public: __thiscall std::bad_cast::bad_cast(class std::bad_cast const &)
UNDEF:0000AF50                 extrn ??0bad_cast@std@@QAE@ABV01@@Z:near
UNDEF:0000AF50                                         ; DATA XREF: .xdata$x:0000A690o
UNDEF:0000AF54 ; public: virtual __thiscall std::bad_cast::~bad_cast(void)
UNDEF:0000AF54                 extrn ??1bad_cast@std@@UAE@XZ:near
UNDEF:0000AF54                                         ; DATA XREF: .xdata$x:0000A644o
UNDEF:0000AF58 ; int __cdecl isalpha(int C)
UNDEF:0000AF58                 extrn _isalpha:near     ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Cp
UNDEF:0000AF58                                         ; TiXmlNode::Identify(wchar_t const *)+109p
UNDEF:0000AF5C ; int __cdecl isspace(int C)
UNDEF:0000AF5C                 extrn _isspace:near     ; CODE XREF: TiXmlBase::SkipWhiteSpace(wchar_t const *)+2Ep
UNDEF:0000AF5C                                         ; TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+F0p ...
UNDEF:0000AF60 ; int __cdecl isalnum(int C)
UNDEF:0000AF60                 extrn _isalnum:near     ; CODE XREF: TiXmlBase::ReadName(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+7Ap
UNDEF:0000AF64 ; int __cdecl tolower(int C)
UNDEF:0000AF64                 extrn _tolower:near     ; CODE XREF: TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+5Bp
UNDEF:0000AF64                                         ; TiXmlBase::StringEqual(wchar_t const *,wchar_t const *,bool)+6Cp ...
UNDEF:0000AF68                 extrn __Getctype:near   ; CODE XREF: std::_Locinfo::_Getctype(void)+Dp
UNDEF:0000AF6C                 extrn __Getcvt:near     ; CODE XREF: std::_Locinfo::_Getcvt(void)+19p
UNDEF:0000AF70                 extrn __Mbrtowc:near    ; CODE XREF: std::ctype<wchar_t>::_Dowiden(char)+25p
UNDEF:0000AF74                 extrn __Wcrtomb:near    ; CODE XREF: std::ctype<wchar_t>::_Donarrow(wchar_t,char)+2Ep
UNDEF:0000AF78                 extrn __Getwctype:near  ; CODE XREF: std::ctype<wchar_t>::do_is(short,wchar_t)+15p
UNDEF:0000AF7C                 extrn __Getwctypes:near ; CODE XREF: std::ctype<wchar_t>::do_is(wchar_t const *,wchar_t const *,short *)+4Ap
UNDEF:0000AF80                 extrn __Towlower:near   ; CODE XREF: std::ctype<wchar_t>::do_tolower(wchar_t *,wchar_t const *)+42p
UNDEF:0000AF80                                         ; std::ctype<wchar_t>::do_tolower(wchar_t)+13p
UNDEF:0000AF84                 extrn __Towupper:near   ; CODE XREF: std::ctype<wchar_t>::do_toupper(wchar_t *,wchar_t const *)+42p
UNDEF:0000AF84                                         ; std::ctype<wchar_t>::do_toupper(wchar_t)+13p
UNDEF:0000AF88 ; void __cdecl static std::_Locinfo::_Locinfo_ctor(struct std::_Locinfo *, const char *)
UNDEF:0000AF88                 extrn ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:near
UNDEF:0000AF88                                         ; CODE XREF: std::_Locinfo::_Locinfo(char const *)+BCp
UNDEF:0000AF8C ; void __cdecl static std::_Locinfo::_Locinfo_dtor(struct std::_Locinfo *)
UNDEF:0000AF8C                 extrn ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:near
UNDEF:0000AF8C                                         ; CODE XREF: std::_Locinfo::~_Locinfo(void)+31p
UNDEF:0000AF90 ; void *__cdecl operator new(unsigned int, const struct std::_DebugHeapTag_t *, char *, int)
UNDEF:0000AF90                 extrn ??2@YAPAXIABU_DebugHeapTag_t@std@@PADH@Z:near
UNDEF:0000AF90                                         ; CODE XREF: std::locale::facet::operator new(uint,std::_DebugHeapTag_t const &,char *,int)+13p
UNDEF:0000AF94 ; const struct std::_DebugHeapTag_t *__cdecl std::_DebugHeapTag_func()
UNDEF:0000AF94                 extrn ?_DebugHeapTag_func@std@@YAABU_DebugHeapTag_t@1@XZ:near
UNDEF:0000AF94                                         ; CODE XREF: std::ctype<wchar_t>::_Getcat(std::locale::facet const * *,std::locale const *)+42p
UNDEF:0000AF98 ; public: virtual void * __thiscall std::_Facet_base::`vector deleting destructor'(unsigned int)
UNDEF:0000AF98                 extrn ??_E_Facet_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AF98                                         ; DATA XREF: .rdata:const std::_Facet_base::`vftable'o
UNDEF:0000AF9C ; void __cdecl std::_Facet_Register(struct std::_Facet_base *)
UNDEF:0000AF9C                 extrn ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:near
UNDEF:0000AF9C                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+C8p
UNDEF:0000AFA0 ; protected: virtual void * __thiscall std::locale::facet::`vector deleting destructor'(unsigned int)
UNDEF:0000AFA0                 extrn ??_Efacet@locale@std@@MAEPAXI@Z:near ; weak
UNDEF:0000AFA0                                         ; DATA XREF: .rdata:const std::locale::facet::`vftable'o
UNDEF:0000AFA4 ; struct std::locale::_Locimp *__cdecl static std::locale::_Getgloballocale()
UNDEF:0000AFA4                 extrn ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:near
UNDEF:0000AFA4                                         ; CODE XREF: std::locale::_Getfacet(uint):loc_6594p
UNDEF:0000AFA8 ; public: virtual void * __thiscall std::ctype_base::`vector deleting destructor'(unsigned int)
UNDEF:0000AFA8                 extrn ??_Ectype_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFA8                                         ; DATA XREF: .rdata:const std::ctype_base::`vftable'o
UNDEF:0000AFAC ; protected: virtual void * __thiscall std::ctype<wchar_t>::`vector deleting destructor'(unsigned int)
UNDEF:0000AFAC                 extrn ??_E?$ctype@_W@std@@MAEPAXI@Z:near ; weak
UNDEF:0000AFAC                                         ; DATA XREF: .rdata:const std::ctype<wchar_t>::`vftable'o
UNDEF:0000AFB0 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000AFB0                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFB0                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000AFB4 ; public: virtual void * __thiscall std::_System_error::`vector deleting destructor'(unsigned int)
UNDEF:0000AFB4                 extrn ??_E_System_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFB4                                         ; DATA XREF: .rdata:const std::_System_error::`vftable'o
UNDEF:0000AFB8 ; public: virtual void * __thiscall std::system_error::`vector deleting destructor'(unsigned int)
UNDEF:0000AFB8                 extrn ??_Esystem_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFB8                                         ; DATA XREF: .rdata:const std::system_error::`vftable'o
UNDEF:0000AFBC ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000AFBC                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000AFBC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000AFBC                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000AFC0 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000AFC0                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000AFC0                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000AFC4 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000AFC4                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFC4                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000AFC8 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000AFC8                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFC8                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000AFCC ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000AFCC                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFCC                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000AFD0 ; public: virtual void * __thiscall std::ios_base::failure::`vector deleting destructor'(unsigned int)
UNDEF:0000AFD0                 extrn ??_Efailure@ios_base@std@@UAEPAXI@Z:near ; weak
UNDEF:0000AFD0                                         ; DATA XREF: .rdata:const std::ios_base::failure::`vftable'o
UNDEF:0000AFD4 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000AFD4                 extrn __imp__lstrlenW@4:near
UNDEF:0000AFD4                                         ; CODE XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+14Ap
UNDEF:0000AFD4                                         ; TiXmlBase::GetEntity(wchar_t const *,wchar_t *)+C3p ...
UNDEF:0000AFD8 ; public: virtual void * __thiscall TiXmlBase::`vector deleting destructor'(unsigned int)
UNDEF:0000AFD8                 extrn ??_ETiXmlBase@@UAEPAXI@Z:near ; weak
UNDEF:0000AFD8                                         ; DATA XREF: .rdata:const TiXmlBase::`vftable'o
UNDEF:0000AFDC ; _DWORD __thiscall TiXmlNode::~TiXmlNode(TiXmlNode *__hidden this)
UNDEF:0000AFDC                 extrn ??1TiXmlNode@@UAE@XZ:near
UNDEF:0000AFDC                                         ; CODE XREF: __unwindfunclet$??0TiXmlComment@@QAE@XZ$0+3j
UNDEF:0000AFDC                                         ; __unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0+3j ...
UNDEF:0000AFE0 ; struct TiXmlNode *__thiscall TiXmlNode::LinkEndChild(TiXmlNode *__hidden this, struct TiXmlNode *)
UNDEF:0000AFE0                 extrn ?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z:near
UNDEF:0000AFE0                                         ; CODE XREF: TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+FEp
UNDEF:0000AFE0                                         ; TiXmlElement::ReadValue(wchar_t const *,TiXmlParsingData *)+188p ...
UNDEF:0000AFE4 ; struct TiXmlDocument *__thiscall TiXmlNode::GetDocument(TiXmlNode *__hidden this)
UNDEF:0000AFE4                 extrn ?GetDocument@TiXmlNode@@QBEPAVTiXmlDocument@@XZ:near
UNDEF:0000AFE4                                         ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+63p
UNDEF:0000AFE4                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+40p ...
UNDEF:0000AFE8 ; protected: __thiscall TiXmlNode::TiXmlNode(enum  TiXmlNode::NodeType)
UNDEF:0000AFE8                 extrn ??0TiXmlNode@@IAE@W4NodeType@0@@Z:near
UNDEF:0000AFE8                                         ; CODE XREF: TiXmlComment::TiXmlComment(void)+2Bp
UNDEF:0000AFE8                                         ; TiXmlDeclaration::TiXmlDeclaration(void)+2Bp ...
UNDEF:0000AFEC ; public: virtual void __thiscall TiXmlAttribute::Print(struct _iobuf *, int)const
UNDEF:0000AFEC                 extrn ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000AFEC                                         ; DATA XREF: .rdata:0000A43Co
UNDEF:0000AFF0 ; public: virtual void __thiscall TiXmlAttribute::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000AFF0                 extrn ?StreamOut@TiXmlAttribute@@UBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000AFF0                                         ; DATA XREF: .rdata:0000A440o
UNDEF:0000AFF4 ; public: virtual void * __thiscall TiXmlAttribute::`vector deleting destructor'(unsigned int)
UNDEF:0000AFF4                 extrn ??_ETiXmlAttribute@@UAEPAXI@Z:near ; weak
UNDEF:0000AFF4                                         ; DATA XREF: .rdata:const TiXmlAttribute::`vftable'o
UNDEF:0000AFF8 ; void __thiscall TiXmlAttributeSet::Add(TiXmlAttributeSet *__hidden this, struct TiXmlAttribute *)
UNDEF:0000AFF8                 extrn ?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z:near
UNDEF:0000AFF8                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+4C5p
UNDEF:0000AFFC ; struct TiXmlAttribute *__thiscall TiXmlAttributeSet::Find(TiXmlAttributeSet *__hidden this, const wchar_t *)
UNDEF:0000AFFC                 extrn ?Find@TiXmlAttributeSet@@QBEPAVTiXmlAttribute@@PB_W@Z:near
UNDEF:0000AFFC                                         ; CODE XREF: TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+455p
UNDEF:0000B000 ; _DWORD __thiscall TiXmlElement::TiXmlElement(TiXmlElement *__hidden this, const wchar_t *)
UNDEF:0000B000                 extrn ??0TiXmlElement@@QAE@PB_W@Z:near
UNDEF:0000B000                                         ; CODE XREF: TiXmlNode::Identify(wchar_t const *)+146p
UNDEF:0000B004 ; public: virtual class TiXmlNode * __thiscall TiXmlComment::Clone(void)const
UNDEF:0000B004                 extrn ?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ:near
UNDEF:0000B004                                         ; DATA XREF: .rdata:0000A460o
UNDEF:0000B008 ; public: virtual void __thiscall TiXmlComment::Print(struct _iobuf *, int)const
UNDEF:0000B008                 extrn ?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000B008                                         ; DATA XREF: .rdata:0000A450o
UNDEF:0000B00C ; protected: virtual void __thiscall TiXmlComment::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000B00C                 extrn ?StreamOut@TiXmlComment@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000B00C                                         ; DATA XREF: .rdata:0000A454o
UNDEF:0000B010 ; public: virtual void * __thiscall TiXmlComment::`vector deleting destructor'(unsigned int)
UNDEF:0000B010                 extrn ??_ETiXmlComment@@UAEPAXI@Z:near ; weak
UNDEF:0000B010                                         ; DATA XREF: .rdata:const TiXmlComment::`vftable'o
UNDEF:0000B014 ; public: virtual void __thiscall TiXmlText::Print(struct _iobuf *, int)const
UNDEF:0000B014                 extrn ?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000B014                                         ; DATA XREF: .rdata:0000A470o
UNDEF:0000B018 ; protected: virtual class TiXmlNode * __thiscall TiXmlText::Clone(void)const
UNDEF:0000B018                 extrn ?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ:near
UNDEF:0000B018                                         ; DATA XREF: .rdata:0000A480o
UNDEF:0000B01C ; protected: virtual void __thiscall TiXmlText::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000B01C                 extrn ?StreamOut@TiXmlText@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000B01C                                         ; DATA XREF: .rdata:0000A474o
UNDEF:0000B020 ; public: virtual void * __thiscall TiXmlText::`vector deleting destructor'(unsigned int)
UNDEF:0000B020                 extrn ??_ETiXmlText@@UAEPAXI@Z:near ; weak
UNDEF:0000B020                                         ; DATA XREF: .rdata:const TiXmlText::`vftable'o
UNDEF:0000B024 ; public: virtual class TiXmlNode * __thiscall TiXmlDeclaration::Clone(void)const
UNDEF:0000B024                 extrn ?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ:near
UNDEF:0000B024                                         ; DATA XREF: .rdata:0000A4A0o
UNDEF:0000B028 ; public: virtual void __thiscall TiXmlDeclaration::Print(struct _iobuf *, int)const
UNDEF:0000B028                 extrn ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000B028                                         ; DATA XREF: .rdata:0000A490o
UNDEF:0000B02C ; protected: virtual void __thiscall TiXmlDeclaration::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000B02C                 extrn ?StreamOut@TiXmlDeclaration@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000B02C                                         ; DATA XREF: .rdata:0000A494o
UNDEF:0000B030 ; public: virtual void * __thiscall TiXmlDeclaration::`vector deleting destructor'(unsigned int)
UNDEF:0000B030                 extrn ??_ETiXmlDeclaration@@UAEPAXI@Z:near ; weak
UNDEF:0000B030                                         ; DATA XREF: .rdata:const TiXmlDeclaration::`vftable'o
UNDEF:0000B034 ; public: virtual class TiXmlNode * __thiscall TiXmlUnknown::Clone(void)const
UNDEF:0000B034                 extrn ?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ:near
UNDEF:0000B034                                         ; DATA XREF: .rdata:0000A4C0o
UNDEF:0000B038 ; public: virtual void __thiscall TiXmlUnknown::Print(struct _iobuf *, int)const
UNDEF:0000B038                 extrn ?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000B038                                         ; DATA XREF: .rdata:0000A4B0o
UNDEF:0000B03C ; protected: virtual void __thiscall TiXmlUnknown::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000B03C                 extrn ?StreamOut@TiXmlUnknown@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000B03C                                         ; DATA XREF: .rdata:0000A4B4o
UNDEF:0000B040 ; public: virtual void * __thiscall TiXmlUnknown::`vector deleting destructor'(unsigned int)
UNDEF:0000B040                 extrn ??_ETiXmlUnknown@@UAEPAXI@Z:near ; weak
UNDEF:0000B040                                         ; DATA XREF: .rdata:const TiXmlUnknown::`vftable'o
UNDEF:0000B044 ; __fastcall __security_check_cookie(x)
UNDEF:0000B044                 extrn @__security_check_cookie@4:near
UNDEF:0000B044                                         ; CODE XREF: TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+2E0p
UNDEF:0000B044                                         ; TiXmlElement::Parse(wchar_t const *,TiXmlParsingData *)+4FDp ...
UNDEF:0000B048 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000B048                 extrn __CxxThrowException@8:near
UNDEF:0000B048                                         ; CODE XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+9Bp
UNDEF:0000B048                                         ; std::_Locinfo::_Locinfo(char const *)+AFp ...
UNDEF:0000B04C                 extrn ___CxxFrameHandler3:near
UNDEF:0000B04C                                         ; CODE XREF: __ehhandler$?Identify@TiXmlNode@@IAEPAV1@PB_W@Z+16j
UNDEF:0000B04C                                         ; __ehhandler$?StreamIn@TiXmlElement@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+20j ...
UNDEF:0000B050 ; const type_info::`vftable'
UNDEF:0000B050                 extrn ??_7type_info@@6B@:near
UNDEF:0000B050                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:0000B050                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:0000B054 ; private: static int std::locale::id::_Id_cnt
UNDEF:0000B054                 extrn ?_Id_cnt@id@locale@std@@0HA:near
UNDEF:0000B054                                         ; DATA XREF: std::locale::id::operator uint(void)+49r
UNDEF:0000B054                                         ; std::locale::id::operator uint(void)+52w ...
UNDEF:0000B058 ; public: static class std::locale::id std::ctype<wchar_t>::id
UNDEF:0000B058                 extrn ?id@?$ctype@_W@std@@2V0locale@2@A:near
UNDEF:0000B058                                         ; DATA XREF: std::use_facet<std::ctype<wchar_t>>(std::locale const &)+3Eo
UNDEF:0000B05C ; wchar_t *TiXmlBase::errorString
UNDEF:0000B05C                 extrn ?errorString@TiXmlBase@@1PAPB_WA:near
UNDEF:0000B05C                                         ; DATA XREF: TiXmlDocument::SetError(int,wchar_t const *,TiXmlParsingData *)+50r
UNDEF:0000B060 ; private: static bool TiXmlBase::condenseWhiteSpace
UNDEF:0000B060                 extrn ?condenseWhiteSpace@TiXmlBase@@0_NA:near
UNDEF:0000B060                                         ; DATA XREF: TiXmlBase::ReadText(wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,bool,wchar_t const *,bool)+1Br
UNDEF:0000B064                 extrn ___security_cookie:near
UNDEF:0000B064                                         ; DATA XREF: TiXmlNode::Identify(wchar_t const *)+14r
UNDEF:0000B064                                         ; TiXmlElement::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+14r ...
UNDEF:0000B068                 extrn __fltused:near
UNDEF:0000B068
UNDEF:0000B068
UNDEF:0000B068                 end